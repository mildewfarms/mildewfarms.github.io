<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>APR94: Fuzzy Logic in C: An Update</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Fuzzy Logic in C: An Update<a name="0128_0002"></h1><P>

<h3><a name="0128_0001"><a name="0128_0000">John A.R. Tucker, Phillip E. Fraley, and Lawrence P. Swanson</h3><P>

<P>
<i><a name="0128_0000"><a name="0128_0000">John teaches computer courses at Albright College and Reading Area Community College; Phillip is working on several projects, including proton models, large color images, and neural networks; Lawrence currently works as a test engineer. They can be reached through the DDJ<I>offices.</I></i></p><hr><P>

Early last year, we were looking for a software implementation of fuzzy logic. Greg Viot's article &quot;Fuzzy Logic in C&quot; (<I>DDJ</I>, February 1993) was a step towards what we needed, but it didn't include the necessary initialization, parsing, and output functions. Consequently, we filled in the gaps by writing functions that, together with Greg's code, make a working fuzzy-logic program you can use. <a href="#0128_000c">Listing One</A> (page 101) is the complete source code for the updated version (which includes Greg's original code and our additions). The enhancements, which we'll focus on in this article, are shaded as well as identified in the comments. For background on fuzzy logic in general and Greg's techniques in particular, refer to his original article.<P>

<h3><a name="0128_0003">Rule Files and Structures<a name="0128_0003"></h3><P>

We saw right away that the parsing of the rules file would be a problem to generalize for all possible combinations of antecedents and consequences, so we elected to simplify the problem by allowing only two antecedents and one consequence.<P>

The generalized case would have resulted in loss of clarity. We didn't try to be clever about our functions; in fact, they are quite direct (three segments are repetitive). The extensive use of linked lists and pointers to structures in <I>initialize_system()</I> related to the rules are, however, quite involved. Nor did we optimize or generalize the code. This makes it possible for you to modify the code to accept other input files by copying existing code segments and making minor adjustments. Finally, we took full advantage of understanding the input data structures for the specific example of the inverted-pendulum problem Greg described.<P>

To allow for easy alteration of the fuzzy sets or rule definitions, we used three ASCII files with fixed names and formats as the input files that describe the fuzzy sets (angle, velocity, and force). Similarly, an ASCII file is used to describe the rules file. These four files are to be located in a common directory from which the program is run.<P>

In the three files describing the fuzzy sets (in1, in2, and out1), you can use any name ten characters or less in length on the first line as a name for the input fuzzy set. The first column of the subsequent lines is for the name of the membership element of that fuzzy set, again limited to ten characters. The next four columns describe the corner points of the membership (if the third and fourth columns are the same, the shape is a triangle). White-space, spaces, or tabs separate the columns. You may have as many rows of membership elements as you please, but five, seven, or nine seem to be the best choices. Take care not to include any blank rows.<P>

The first file, in1 (angle), looks like <a href="#0128_0006">Figure 1</A>. The files in2 (velocity) and out1 (force) are similar. In <I>initialize_<P>
system()</I>, we have three nearly identical code fragments. You can block copy them and make the few changes required. The cycle is as follows: Open the file, set a pointer and allocate memory, read the fuzzy set's name, read a line of data from the file, set a pointer to the next structure, assign values to the structure elements, and lastly, close the file. The differences in these three segments are in lines 1 and 2 (the filenames are different), lines 5 and 6 (the pointers point to differing places), and lines 27 and 33, where the filenames in the error messages are different.<P>

We included an error trap to detect if either <I>slope1</I> or <I>slope2</I> is less than or equal to 0, a condition not allowed in the original program. If such an error is encountered, the program exits with appropriate information. The setting of the pointers for the rules file is more complex. In the original article, Greg suggested a file that looked like <a href="#0128_0007">Figure 2(a)</A>. Although we liked the form of this file, it was complex to parse so we stripped the file to its essential elements: the name of the fuzzy set elements and the order in which they appear in each rule; see <a href="#0128_0007">Figure 2(b)</A>. We used an awk and sed pipeline to strip the &quot;rule&quot; file and create a more suitable form for parsing in a file named &quot;rules.&quot; (The command line <I>awk '{print $6, $10, $14}' rule|sed 's/)//g'&gt; rules</I> does this elegantly. You can create the rules file directly, as with the input files, and eliminate the clearer representation of the rule file entirely if you do not have these tools.) You can have more or less than the 15 rules in Greg's article. Add or delete them as you please, one rule per row. Be certain that membership-element names are exact matches in all the files, including the rules file. In particular, note that upper and lower case are <I>not</I> equivalent.<P>

Once <I>initialize_system()</I> is written, you're limited to two inputs and one output. You will need to make changes to the arguments for <I>fscanf()</I> and define new buffers to accommodate any other combination.<P>

The insight to the rules structures initialization is that structures of <I>rule_<P>
type</I> and <I>rule_element_type</I> form the acceptable rules at the time of initialization. That is, appropriate fuzzy inputs (antecedents) are associated (linked) with a fuzzy output (consequence) as defined in the rules at the time the rules file is read. Values in the <I>mf_type</I> structure are pointed to by the pointer stored in the <I>rule_element_type *value</I>. Later, if a 0 is pointed to by any of the <I>if_side</I> value pointers, the function <I>defuzzification()</I> will equate to 0, and subsequent calculation of the <I>sum_of_products</I> and <I>sum_of_areas</I> will not be affected. See <a href="1994012a.htm">Figure 3</A> for the complete relationship of all the data structures and their pointers.<P>

<h3><a name="0128_0004">Using the Updated Program<a name="0128_0004"></h3><P>

To illustrate how you can use the updated fuzzy-logic program, we'll refer you to the rule in <a href="#0128_0008">Figure 4</A>, where we begin by opening the rules file, allocating memory for a structure <I>rule_type</I> and setting a pointer to it, and scanning the rules one line at a time. As each line (rule) is read, we &quot;know&quot; that the first field in the line is the angle (structure <I>io_type</I>, pointed to by <I>*membership_function</I>s), so we begin searching its fuzzy-set members (structures <I>mf_type</I>), doing a string match on the membership element name, NL. When the match is found, memory for a <I>rule_element_type</I> structure is allocated, the <I>address</I> to the <I>value</I> element of the matching <I>mf_structure</I> is stored, and a pointer to <I>rule_type,</I> pointed to by the <I>*if_side</I>. A pointer to the second field (in this case, velocity) is also established as a pointer (element <I>*next</I>) in <I>rule_element_type</I>.<P>

The second field of the rule (velocity) is then used to search for a string match on its membership-element name, ZE, in the second <I>io_structure *membership_function</I>, and a pointer to the <I>address</I> where its value is located is stored in the next <I>rule_element_type *value</I>. Finally, the last element of the rule, the consequence (force, in our example), is treated in the same manner: The <I>address</I> of the match is stored in the <I>rule_<P>
element_type *value</I> pointed to by the <I>rule_type *then</I> side when the appropriate membership element name, PL, is matched.<P>

These steps are repeated for every rule in the rules file; refer again to the first three rules in <a href="1994012b.htm">Figure 3</A>.<P>

To complete the alterations, other changes included placing the two anchor pointers <I>System_Output</I> and <I>System_Inputs</I> as global pointers along with the existing <I>Rule_Base</I>, adding macro definitions for max and min for cross-compiling onto MS-DOS platforms, and adding the <I>#include</I> for the function <I>strcmp()</I>; see <a href="#0128_000a">Example 1</A>. We also included the necessary function to accept two inputs from the command line as arguments for the initial condition <I>get_system_inputs()</I> and a function <I>put_system_outputs()</I> to examine the exit status of a single inference pass on the input data.<P>

After using the code with various inputs, we needed to add error traps because we were getting core dumps with certain input. These were caused by division by zero when there were no rules in the set to cover the condition. Consequently, we added the code in <a href="#0128_000b">Example 2(a)</A> to the original function <I>defuzzification()</I>. We also added <a href="#0128_000b">Example 2(b)</A> to <I>rule_evaluation()</I>.<P>

To further illustrate how you can use the program, assume the scaled angle of 60 and a scaled velocity of 125 as in <a href="#0128_0009">Figure 5</A>. The line <I>force: Value=134</I> reflects the defuzzified and scaled single-valued output for the two inputs. It would be instructive to interface this program to a graphics output device where a loop could be created and the inverted pendulum balanced. Alternatively, a batch file or shell script could feed new inputs and use the output to generate the two new inputs, storing intermediate data in a file. Or, you might try graphing the trapezoidal output areas made on each iteration.<P>

<h3><a name="0128_0005">Completing a<P>
fuzzy-based<P>
inference engine<a name="0128_0005"></h3><P>

<h4><a name="0128_0006"><B>Figure 1:</B> The in1 file; values can be altered as desired.<a name="0128_0006"></h4><P>

<PRE>
              Angle
NL       0      31      31      63
NM      31      63      63      95
NS      63      95      95     127
ZE      95     127     127     159
PS     127     159     159     191
PM     159     191     191     223
PL     191     223     223     255

</pre>
<h4><a name="0128_0007"><B>Figure 2:</B> (a) Original rules file; (b) modified rules file.<a name="0128_0007"></h4><P>

<pre>
(a)
    rule 1: IF (angle is NL) AND (velocity is ZE) THEN (force is PL)
    rule 2: IF (angle is ZE) AND (velocity is NL) THEN  (force is PL)
    rule 3: IF (angle is NM) AND (velocity is ZE) THEN (force is PM)
     .
     .
     .

    rule 15: IF (angle is PL) AND (velocity is ZE) THEN (force is NL)

(b)
    NL ZE PL
    ZE NL PL
    NM ZE PM
       .
       .
       .
    PL ZE NL
</pre><P>


<h4><B> <a href="1994012c.htm">Figure 3</A>: </B>Relationship of data structures and their pointers.</h4><P>


<h4><a name="0128_0008"><B>Figure 4:</B> Sample rule used to develop <a href="1994012d.htm">Figure 3</A>.<a name="0128_0008"></h4><P>

<pre>
rule 1: IF (angle is NL) AND (velocity is ZE)
THEN (force is PL)
</pre><P>

<h4><a name="0128_0009"><B>Figure 5:</B> Output generated with a scaled angle of 60 and scaled velocity of 125.<a name="0128_0009"></h4><P>

<pre>
fuzz 60 125
angle: Value=60
  NL: Value 21 Left 0 Right 63
  NM: Value 203 Left 31 Right 95
  NS: Value 0 Left 63 Right 127
  ZE: Value 0 Left 95 Right 159
  PS: Value 0 Left 127 Right 191
  PM: Value 0 Left 159 Right 223
  PL: Value 0 Left 191 Right 255
velocity: Value=125
  NL: Value 0 Left 0 Right 64
  NM: Value 0 Left 31 Right 95
  NS: Value 14 Left 63 Right 127
  ZE: Value 210 Left 95 Right 159
  PS: Value 0 Left 127 Right 191
  PM: Value 0 Left 159 Right 223
  PL: Value 0 Left 191 Right 255
force: Value=134
  NL: Value 0 Left 0 Right 63
  NM: Value 203 Left 31 Right 95
  NS: Value 0 Left 63 Right 127
  ZE: Value 0 Left 95 Right 159
  PS: Value 0 Left 127 Right 191
  PM: Value 203 Left 159  Right 223
  PL: Value 21 Left 191 Right 255
  Rule #1: 21 210 21
  Rule #2: 0 0 21
  Rule #3: 203 210 203
  Rule #4: 0 0 203
  Rule #5: 0 210 0
  Rule #6: 0 14 0
  Rule #7: 0 0 0
  Rule #8: 0 210 0
  Rule #9: 0 0 0
  Rule #10: 0 210 0
  Rule #11: 0 14 0
  Rule #12: 0 0 203
  Rule #13: 203 210 203
  Rule #14: 0 0 0
  Rule #15: 0 210 0


</pre><P>

<h4><a name="0128_000a"><B>Example 1: </B>Adding the #include, global pointers, and macros.<a name="0128_000a"></h4><P>

<pre>
#include     &lt;string.h&gt;
#define max(a,b) (a&lt;b ? b : a)
#define min(a,b) (a&gt;b ? b : a)
struct io_type *System_Inputs;
struct io_type *System_Output;

</pre><P>

<h4><a name="0128_000b"><B>Example 2: </B>(a) Code added to the original function defuzzification(); (b) code added to rule_evaluation().<a name="0128_000b"></h4><P>

<pre>
(a)
if(sum_of_areas==0)<P>
{  printf(&quot;Sum     of Areas = 0, will cause div error\n&quot;);<P>
   printf(&quot;Sum     of Products= %d\n&quot;,sum_of_products);<P>
   so-&gt;value=0;<P>
   return;<P>
}

(b)
int nomatch=0;<P>
for(tp=rule-&gt;then_side;tp!=NULL;tp=tp-&gt;next)<P>
{  *(tp-&gt;value)=max(strength,*(tp-&gt;value));<P>
   if(strength&gt;0)nomatch=1;<P>
}<P>
}<P>
if(nomatch==0)printf(&quot;NO MATCHING RULES FOUND!\n&quot;);
</pre><P>


<h4><a name="0128_000c"><a name="0128_000d"><B>[LISTING ONE]</B></H4>

<PRE>

/* Update to Greg Viot's fuzzy system -- DDJ, February 1993, page 94 */
/* By J. Tucker, P. Fraley, and L. Swanson, April 1993 */
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;                      /* NEW */
# define max(a,b)   (a&lt;b ? b : a)        /* NEW */
# define min(a,b)   (a&gt;b ? b : a)        /* NEW */
struct io_type *System_Inputs;           /* anchor inputs NEW */
struct io_type *System_Output;           /* anchor output NEW */
#define MAXNAME 10
#define UPPER_LIMIT 255
struct io_type{
   char name[MAXNAME];
   int value;
   struct mf_type *membership_functions;
   struct io_type *next;
   };
struct mf_type{
   char name[MAXNAME];
   int value;
   int point1;
   int point2;
   float slope1;
   float slope2;
   struct mf_type *next;
   };
struct rule_type{
   struct rule_element_type *if_side;
   struct rule_element_type *then_side;
   struct rule_type *next;
   };
struct rule_element_type{
   int *value;
   struct rule_element_type *next;
   };
struct rule_type *Rule_Base;

main(argc,argv)                          /* NEW */
int argc;                                /* NEW */
char *argv[];                            /* NEW */
{  int input1, input2;                   /* NEW */
   if(argc!=3)                           /* NEW */
   {  printf(&quot;Error - Must supply 2 numeric inputs.\n&quot;); /* NEW */
      printf(&quot;        Inputs scaled to range 0-255.\n&quot;); /* NEW */
      printf(&quot;Usage: %s angle velocity\n&quot;,argv[0]);      /* NEW */
      exit(0);                           /* NEW */
   }                                     /* NEW */
   input1=atoi(argv[1]);                 /* NEW */
   input2=atoi(argv[2]);                 /* NEW */
   initialize_system();                  /* Read input files, NEW */
   get_system_inputs(input1,input2);     /* Get &amp; put argv NEW */
   fuzzification();
   rule_evaluation();
   defuzzification();
   put_system_outputs();                 /* print all data, NEW */
}                                        /* END MAIN */
fuzzification()
{  struct io_type *si;
   struct mf_type *mf;
   for(si=System_Inputs;si!=NULL;si=si-&gt;next)
      for(mf=si-&gt;membership_functions;mf!=NULL;mf=mf-&gt;next)
     compute_degree_of_membership(mf,si-&gt;value);
}                                        /* END FUZZIFICATION */
rule_evaluation()
{  struct rule_type *rule;
   struct rule_element_type *ip;    /* if ptr */
   struct rule_element_type *tp;    /* then ptr */
   int strength;
   int nomatch=0;                   /* NEW, test some rules */
   for(rule=Rule_Base;rule!=NULL;rule=rule-&gt;next)
   {  strength=UPPER_LIMIT;
      for(ip=rule-&gt;if_side;ip!=NULL;ip=ip-&gt;next)
             strength=min(strength,*(ip-&gt;value));
      for(tp=rule-&gt;then_side;tp!=NULL;tp=tp-&gt;next)
      {  *(tp-&gt;value)=max(strength,*(tp-&gt;value));      /* NEW */
         if(strength&gt;0)nomatch=1;                      /* NEW */
      }                                                /* NEW */
   }
   if(nomatch==0)printf(&quot;NO MATCHING RULES FOUND!\n&quot;); /* NEW */
}                                        /* END RULE EVALUATION */
defuzzification()
{  struct io_type *so;
   struct mf_type *mf;
   int sum_of_products;
   int sum_of_areas;
   int area, centroid;
   for(so=System_Output;so!=NULL;so=so-&gt;next)
   {  sum_of_products=0;
      sum_of_areas=0;
      for(mf=so-&gt;membership_functions;mf!=NULL;mf=mf-&gt;next)
      {  area=compute_area_of_trapezoid(mf);
         centroid=mf-&gt;point1+(mf-&gt;point2-mf-&gt;point1)/2;
         sum_of_products+=area*centroid;
         sum_of_areas+=area;
      }
      if(sum_of_areas==0)                                    /* NEW */
      {  printf(&quot;Sum of Areas = 0, will cause div error\n&quot;); /* NEW */
         printf(&quot;Sum of Products= %d\n&quot;,sum_of_products);    /* NEW */
         so-&gt;value=0;                                        /* NEW */
         return;                                             /* NEW */
      }                                                      /* NEW */
      so-&gt;value=sum_of_products/sum_of_areas;
   }
}                                        /* END DEFUZZIFICATION */
compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{  int delta_1, delta_2;
   delta_1=input - mf-&gt;point1;
   delta_2=mf-&gt;point2 - input;
   if((delta_1&lt;=0)||(delta_2&lt;=0))mf-&gt;value=0;
   else
   {  mf-&gt;value=min((mf-&gt;slope1*delta_1),(mf-&gt;slope2*delta_2));
      mf-&gt;value=min(mf-&gt;value,UPPER_LIMIT);
   }
}                                        /* END DEGREE OF MEMBERSHIP */
compute_area_of_trapezoid(mf)
struct mf_type *mf;
{  float run_1,run_2,area,top;
   float base;
   base=mf-&gt;point2 - mf-&gt;point1;
   run_1=mf-&gt;value / mf-&gt;slope1;
   run_2=mf-&gt;value / mf-&gt;slope2;
   top=base - run_1 - run_2;
   area=mf-&gt;value*(base+top)/2;
   return(area);
}                                        /* END AREA OF TRAPEZOID */
initialize_system()                      /* NEW FUNCTION INITIALIZE */
{  int a, b, c, d, x;
   char buff[10],buff1[4],buff2[4];
   static char filename1[]=&quot;in1&quot;;  /* &quot;angles&quot; filename */
   static char filename2[]=&quot;in2&quot;;  /* &quot;velocities&quot; filename */
   static char filename3[]=&quot;out1&quot;; /* &quot;forces&quot; filename */
   FILE *fp;
   struct io_type *outptr;
   struct mf_type *top_mf;
   struct mf_type *mfptr;
   struct io_type *ioptr;
   struct rule_type *ruleptr;
   struct rule_element_type *ifptr;
   struct rule_element_type *thenptr;
   ioptr=NULL;
   ruleptr=NULL;
   ifptr=NULL;
   thenptr=NULL;
/* READ THE FIRST FUZZY SET (ANTECEDENT); INITIALIZE STRUCTURES */
   if((fp=fopen(filename1,&quot;r&quot;))==NULL)   /* open &quot;angles&quot; file */
   {  printf(&quot;ERROR- Unable to open data file named %s.\n&quot;,filename1);
      exit(0);
   }
   ioptr=(struct io_type *)calloc(1,sizeof(struct io_type));
   System_Inputs=ioptr;                  /* Anchor to top of inputs */
   x=fscanf(fp,&quot;%s&quot;,buff);               /* from 1st line, get set's name */
   sprintf(ioptr-&gt;name,&quot;%s&quot;,buff);       /* into struct io_type.name */
   mfptr=NULL;
   while((x=fscanf(fp,&quot;%s %d %d %d %d&quot;,buff,&amp;a,&amp;b,&amp;c,&amp;d))!=EOF)/* get line */
   {  if(mfptr==NULL)                    /* first time thru only */
      {  mfptr=(struct mf_type *)calloc(1,sizeof(struct mf_type));
         top_mf=mfptr;
         ioptr-&gt;membership_functions=mfptr;
      }
      else
      {  for(mfptr=top_mf;mfptr-&gt;next;mfptr=mfptr-&gt;next); /* spin to last */
         mfptr-&gt;next=(struct mf_type *)calloc(1,sizeof(struct mf_type));
         mfptr=mfptr-&gt;next;
      }
      sprintf(mfptr-&gt;name,&quot;%s&quot;,buff);    /* membership name, NL, ZE, etc */
      mfptr-&gt;point1=a;                   /* left x axis value */
      mfptr-&gt;point2=d;                   /* right x axis value */
      if(b-a&gt;0) mfptr-&gt;slope1=UPPER_LIMIT/(b-a);     /* left slope */
      else
      {  printf(&quot;Error in input file %s, membership element %s.\n&quot;,
         filename1,buff);
         exit(1);
      }
      if(d-c&gt;0) mfptr-&gt;slope2=UPPER_LIMIT/(d-c);     /* right slope */
      else
      {  printf(&quot;Error in input file %s, membership element %s.\n&quot;,
         filename1,buff);
         exit(1);
      }
   }
   close(fp);                            /* close &quot;angles&quot; file */
/* READ THE SECOND FUZZY SET (ANTECEDENT); INITIALIZE STRUCTURES */
   if((fp=fopen(filename2,&quot;r&quot;))==NULL)   /* open &quot;velocity&quot; file */
   {  printf(&quot;ERROR- Unable to open data file named %s.\n&quot;,filename2);
      exit(0);
   }
   ioptr-&gt;next=(struct io_type *)calloc(1,sizeof(struct io_type));
   ioptr=ioptr-&gt;next;
   x=fscanf(fp,&quot;%s&quot;,buff);               /* from 1st line, get set's name */
   sprintf(ioptr-&gt;name,&quot;%s&quot;,buff);       /* into struct io_type.name */
   mfptr=NULL;
   while((x=fscanf(fp,&quot;%s %d %d %d %d&quot;,buff,&amp;a,&amp;b,&amp;c,&amp;d))!=EOF)/* get line */
   {  if(mfptr==NULL)                    /* first time thru only */
      {  mfptr=(struct mf_type *)calloc(1,sizeof(struct mf_type));
         top_mf=mfptr;
         ioptr-&gt;membership_functions=mfptr;
      }
      else
      {  for(mfptr=top_mf;mfptr-&gt;next;mfptr=mfptr-&gt;next); /* spin to last */
         mfptr-&gt;next=(struct mf_type *)calloc(1,sizeof(struct mf_type));
         mfptr=mfptr-&gt;next;
      }
      sprintf(mfptr-&gt;name,&quot;%s&quot;,buff);    /* membership name, NL, ZE, etc */
      mfptr-&gt;point1=a;                   /* left x axis value */
      mfptr-&gt;point2=d;                   /* right x axis value */
      if(b-a&gt;0) mfptr-&gt;slope1=UPPER_LIMIT/(b-a);     /* left slope */
      else
      {  printf(&quot;Error in input file %s, membership element %s.\n&quot;,
         filename2,buff);
         exit(1);
      }
      if(d-c&gt;0) mfptr-&gt;slope2=UPPER_LIMIT/(d-c);     /* right slope */
      else
      {  printf(&quot;Error in input file %s, membership element %s.\n&quot;,
         filename2,buff);
         exit(1);
      }
   }
   close(fp);                            /* close &quot;velocity&quot; file */
/* READ THE THIRD FUZZY SET (CONSEQUENCE); INITIALIZE STRUCTURES */
   if((fp=fopen(filename3,&quot;r&quot;))==NULL)   /* open &quot;force&quot; file */
   {  printf(&quot;ERROR- Unable to open data file named %s.\n&quot;,filename3);
      exit(0);
   }
   ioptr=(struct io_type *)calloc(1,sizeof(struct io_type));
   System_Output=ioptr;                  /* Anchor output structure */
   x=fscanf(fp,&quot;%s&quot;,buff);               /* from 1st line, get set's name */
   sprintf(ioptr-&gt;name,&quot;%s&quot;,buff);       /* into struct io_type.name */
   mfptr=NULL;
   while((x=fscanf(fp,&quot;%s %d %d %d %d&quot;,buff,&amp;a,&amp;b,&amp;c,&amp;d))!=EOF)/* get line */
   {  if(mfptr==NULL)                    /* first time thru */
      {  mfptr=(struct mf_type *)calloc(1,sizeof(struct mf_type));
         top_mf=mfptr;
         ioptr-&gt;membership_functions=mfptr;
      }
      else
      {  for(mfptr=top_mf;mfptr-&gt;next;mfptr=mfptr-&gt;next);
         mfptr-&gt;next=(struct mf_type *)calloc(1,sizeof(struct mf_type));
         mfptr=mfptr-&gt;next;
      }
      sprintf(mfptr-&gt;name,&quot;%s&quot;,buff);    /* membership name, NL, ZE, etc */
      mfptr-&gt;point1=a;                   /* left x axis value */
      mfptr-&gt;point2=d;                   /* right x axis value */
      if(b-a&gt;0) mfptr-&gt;slope1=UPPER_LIMIT/(b-a);     /* left slope */
      else
      {  printf(&quot;Error in input file %s, membership element %s.\n&quot;,
         filename3,buff);
         exit(1);
      }
      if(d-c&gt;0) mfptr-&gt;slope2=UPPER_LIMIT/(d-c);     /* right slope */
      else
      {  printf(&quot;Error in input file %s, membership element %s.\n&quot;,
         filename3,buff);
         exit(1);
      }
   }
   close(fp);                            /* close &quot;force&quot; file */
/* READ RULES FILE; INITIALIZE STRUCTURES */
   ioptr=NULL;
   outptr=NULL;
   if((fp=fopen(&quot;rules&quot;,&quot;r&quot;))==NULL)     /* open rules file */
   {  printf(&quot;ERROR- Unable to open data file named %s.\n&quot;,&quot;rules&quot;);
      exit(0);
   }
   ruleptr=(struct rule_type *)calloc(1,sizeof(struct rule_type));
   if(ioptr==NULL)Rule_Base=ruleptr;     /* first time thru, anchor */
   while((x=fscanf(fp,&quot;%s %s %s&quot;,buff,buff1,buff2))!=EOF) /* get a line */
   {  ioptr=System_Inputs;               /* points to angle */
      for(mfptr=ioptr-&gt;membership_functions;mfptr!=NULL;mfptr=mfptr-&gt;next)
      {  if((strcmp(mfptr-&gt;name,buff))==0)
     {  ifptr=(struct rule_element_type *)
                  calloc(1,sizeof(struct rule_element_type));
        ruleptr-&gt;if_side=ifptr;      /* points to angle */
        ifptr-&gt;value=&amp;mfptr-&gt;value;  /* needs address here */
        ifptr-&gt;next=(struct rule_element_type *)
                  calloc(1,sizeof(struct rule_element_type));
        ifptr=ifptr-&gt;next;
        break;                       /* match found */
          }
      }
      ioptr=ioptr-&gt;next;                 /* points to velocity */
      for(mfptr=ioptr-&gt;membership_functions;mfptr!=NULL;mfptr=mfptr-&gt;next)
      {  if((strcmp(mfptr-&gt;name,buff1))==0)
     {  ifptr-&gt;value=&amp;mfptr-&gt;value;  /* needs address here */
        break;                       /* match found */
          }
      }
      if(outptr==NULL)outptr=System_Output;/* point then stuff to output */
      for(mfptr=outptr-&gt;membership_functions;mfptr!=NULL;mfptr=mfptr-&gt;next)
      {  if((strcmp(mfptr-&gt;name,buff2))==0)
         {  thenptr=(struct rule_element_type *)
                calloc(1,sizeof(struct rule_element_type));
        ruleptr-&gt;then_side=thenptr;
            thenptr-&gt;value=&amp;mfptr-&gt;value; /* needs address here */
        break;                        /* match found */
         }
      }
      ruleptr-&gt;next=(struct rule_type *)calloc(1,sizeof(struct rule_type));
      ruleptr=ruleptr-&gt;next;
   }                                     /* END WHILE READING RULES FILE */
   close(fp);                            /* close &quot;rules&quot; file */
}                                        /* END INITIALIZE */
put_system_outputs()                     /* NEW */
{  struct io_type *ioptr;
   struct mf_type *mfptr;
   struct rule_type *ruleptr;
   struct rule_element_type *ifptr;
   struct rule_element_type *thenptr;
   int cnt=1;
   for(ioptr=System_Inputs;ioptr!=NULL;ioptr=ioptr-&gt;next)
   {  printf(&quot;%s: Value= %d\n&quot;,ioptr-&gt;name,ioptr-&gt;value);
      for(mfptr=ioptr-&gt;membership_functions;mfptr!=NULL;mfptr=mfptr-&gt;next)
      {  printf(&quot;  %s: Value %d Left %d Right %d\n&quot;,
           mfptr-&gt;name,mfptr-&gt;value,mfptr-&gt;point1,mfptr-&gt;point2);
      }
     printf(&quot;\n&quot;);
   }
   for(ioptr=System_Output;ioptr!=NULL;ioptr=ioptr-&gt;next)
   {  printf(&quot;%s: Value= %d\n&quot;,ioptr-&gt;name,ioptr-&gt;value);
      for(mfptr=ioptr-&gt;membership_functions;mfptr!=NULL;mfptr=mfptr-&gt;next)
      {  printf(&quot;  %s: Value %d Left %d Right %d\n&quot;,
           mfptr-&gt;name,mfptr-&gt;value,mfptr-&gt;point1,mfptr-&gt;point2);
      }
   }
/* print values pointed to by rule_type (if &amp; then) */
   printf(&quot;\n&quot;);
   for(ruleptr=Rule_Base;ruleptr-&gt;next!=NULL;ruleptr=ruleptr-&gt;next)
   {  printf(&quot;Rule #%d:&quot;,cnt++);
      for(ifptr=ruleptr-&gt;if_side;ifptr!=NULL;ifptr=ifptr-&gt;next)
          printf(&quot;  %d&quot;,*(ifptr-&gt;value));
      for(thenptr=ruleptr-&gt;then_side;thenptr!=NULL;thenptr=thenptr-&gt;next)
          printf(&quot;  %d\n&quot;,*(thenptr-&gt;value));
   }
   printf(&quot;\n&quot;);
}                                        /* END PUT SYSTEM OUTPUTS */
get_system_inputs(input1,input2)         /* NEW */
int input1, input2;
{  struct io_type *ioptr;
   ioptr=System_Inputs;
   ioptr-&gt;value=input1;
   ioptr=ioptr-&gt;next;
   ioptr-&gt;value=input2;
}                                        /* END GET SYSTEM INPUTS */
</pre><HR><P>
Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
