<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>APR94: The Blowfish Encryption Algorithm</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>The Blowfish Encryption Algorithm<a name="010b_0003"></h1><P>

<h3><a name="010b_0001"><a name="010b_0000">Bruce Schneier</h3><P>

<P>
<i><a name="010b_0002"><a name="010b_0000">Bruce is the author of Applied Cryptography: Protocols, Algorithms, and Source Code in C (John Wiley, 1994). This article is based on a paper he presented at the Cambridge Algorithms Conference. Bruce can be contacted at schneier@ chinet.com.</i></p><hr><P>

Blowfish is a block-encryption algorithm designed to be fast (it encrypts data on large 32-bit microprocessors at a rate of 26 clock cycles per byte), compact (it can run in less than 5K of memory), simple (the only operations it uses are addition, XOR, and table lookup on 32-bit operands), secure (Blowfish's key length is variable and can be as long as 448 bits), and robust (unlike DES, Blowfish's security is not diminished by simple programming errors).<P>

The Blowfish block-cipher algorithm, which encrypts data one 64-bit block at a time, is divided into key-expansion and a data-encryption parts. Key expansion converts a key of at most 448 bits into several subkey arrays totaling 4168 bytes. Data encryption consists of a simple function iterated 16 times. Each iteration, called a &quot;round,&quot; consists of a key-dependent permutation and a key- and data-dependent substitution.<P>

<h3><a name="010b_0004">Subkeys<a name="010b_0004"></h3><P>

Blowfish uses a large number of subkeys that must be precomputed before any data encryption or decryption. The P-array consists of 18 32-bit subkeys, P<sub>1</sub>, P<sub>2</sub>...P<sub>18</sub>, and there are four 32-bit S-boxes with 256 entries each: S<sub>1,0</sub>, S<sub>1,1</sub>...
S<sub>1,255</sub>; S<sub>2,0</sub>, S<sub>2,1</sub>...S<sub>2,255</sub>; S<sub>3,0</sub>, S<sub>3,1</sub>...S<sub>3,255</sub>; S4,0, S<sub>4,1</sub>...S<sub>4,255</sub>.<P>

<h3><a name="010b_0005">Encryption<a name="010b_0005"></h3><P>

Blowfish is a Feistel network consisting of 16 rounds; see <a href="1994010d.htm">Figure 1</A>. The input is a 64-bit data element, x. Divide x into two 32-bit halves: x<sub>L</sub> and x<sub>R</sub>. Then, for i=1 to 16:<P>

<p>
x<sub>L</sub>=x<sub>L</sub> XOR P<sub>i</sub><br>
x<sub>R</sub>=F(x<sub>L</sub>) XOR x<sub>R</sub><br>
Swap x<sub>L</sub> and x<sub>R</sub><br>
</p>

After the sixteenth iteration, swap x<sub>L</sub> and x<sub>R</sub> to undo the last swap. Then x<sub>R</sub>=x<sub>R</sub> XOR P<sub>17</sub> and x<sub>L</sub>=x<sub>L</sub> XOR P<sub>18</sub>. Finally, recombine x<sub>L</sub> and x<sub>R</sub> to get the ciphertext.<P>

Function F looks like this: Divide x<sub>L</sub> into four eight-bit quarters: a, b, c, and d. F(x<sub>L</sub>)=((S<sub>1,a</sub>+S<sub>2,b</sub> mod 2<sup>32</sup>)XOR S<sub>3,c</sub>)+
S<sub>4,d</sub> mod 2<sup>32</sup>; see <a href="1994010e.htm">Figure 2</A>.<P>

Decryption is exactly the same as encryption, except that P1, P2_P18 are used in the reverse order.<P>

Implementations of Blowfish that require the fastest speeds should unroll the loop and ensure that all subkeys are stored in cache. For the purposes of illustration, I've implemented Blowfish in C; <a href="#010b_000a">Listing One</A> (page 98) is blowfish.h, and <a href="#010b_000c">Listing Two</A> (page 98) is blowfish.c. A required data file is available electronically; see &quot;Availability,&quot; page 3.<P>

<h3><a name="010b_0006">Generating the Subkeys<a name="010b_0006"></h3><P>

The subkeys are calculated using the Blowfish algorithm, as follows:<P>

<OL>
<LI>Initialize first the P-array and then the four S-boxes, in order, with a fixed random string. This string consists of the hexadecimal digits of <img src="pi14.gif" alt="[pi]">.</LI>
<LI>XOR P1 with the first 32 bits of the key, XOR P2 with the second 32 bits of the key, and so on for all bits of the key (up to P<sub>18</sub>). Cycle through the key bits repeatedly until the entire P-array has been XORed.</LI>
<LI>Encrypt the all-zero string with the Blowfish algorithm, using the subkeys described in steps #1 and #2.</LI>
<LI>Replace P<sub>1</sub> and P<sub>2</sub> with the output of step #3.</LI>
<LI>Encrypt the all-zero string using the Blowfish algorithm with the modified subkeys.</LI>
<LI>Replace P<sub>3</sub> and P<sub>4</sub> with the output of step #4.</LI>
<LI>Continue the process, replacing all elements of the P-array and then all four S-boxes in order, with the output of the continuously changing Blowfish algorithm.</LI>
</OL>
In total, 521 iterations are required to generate all required subkeys. Applications can store the subkeys rather than re-executing this derivation process.<P>

<h3><a name="010b_0007">Design Decisions<a name="010b_0007"></h3><P>

The underlying philosophy behind Blowfish is that simplicity of design yields an algorithm that is easier both to understand and to implement. Hopefully, the use of a streamlined Feistel network (the same structure used in DES, IDEA, and many other algorithms), a simple S-box substitution, and a simple P-box substitution, will minimize design flaws.<P>

For details about the design decisions affecting the security of Blowfish, see &quot;Requirements for a New Encryption Algorithm&quot; (by B. Schneier and N. Fergusen) and &quot;Description of a New Variable-Length Key, 64-Bit Block Cipher (Blowfish)&quot; (by B. Schneier), both to be included in <I>Fast Software Encryption,</I> to be published by Springer-Verlag later this year as part of their <I>Lecture Notes on Computer Science</I> series. The algorithm is designed to be very fast on 32-bit microprocessors. Operations are all based on a 32-bit word and are one-instruction XORs, ADDs, and MOVs. There are no branches (assuming you unravel the main loop). The subkey arrays and the instructions can fit in the on-chip caches of both the Pentium and the PowerPC. Furthermore, the algorithm is designed to be resistant to poor implementation and programmer errors.<P>

I'm considering several simplifications to the algorithm, including fewer and smaller S-boxes, fewer rounds, and on-the-fly subkey calculation.<P>

<h3><a name="010b_0008">Conclusions<a name="010b_0008"></h3><P>

At this early stage, I don't recommend implementing Blowfish in security systems. More analysis is needed. I conjecture that the most efficient way to break Blowfish is through exhaustive search of the keyspace. I encourage all cryptanalytic attacks, modifications, and improvements to the algorithm.<P>

However, remember one of the basic rules of cryptography: The inventor of an algorithm is the worst person to judge its security. I am publishing the details of Blowfish so that others may have a chance to analyze it.<P>

Blowfish is unpatented and will remain so in all countries. The algorithm is hereby placed in the public domain and can be freely used by anyone.<P>

<h4><B> <a href="1994010f.htm">Figure 1</A>: </B>Blowfish is a Feistel network consisting of 16 rounds.</h4><P>

<h4><B> </B><B><a href="19940110.htm">Figure 2</A>: </B>Blowfish function F.</h4><P>

<a name="010b_0009"><I>DDJ's </I>Blowfish Cryptanalysis Contest<a name="010b_0009"><P>

The only way to inspire confidence in a cryptographic algorithm is to let people analyze it. It is in this spirit that <I>DDJ </I>is pleased to announce the Blowfish Cryptanalysis Contest, our third reader contest in recent years.<P>

We'd like you to cryptanalyze Bruce Schneier's Blowfish algorithm presented in this issue. Give it your best shot. Break it, beat on it, cryptanalyze it. The best attack received by April 1, 1995 wins the contest.<P>

The contest rules are simple. It's open to any individual or organization. Governments are encouraged to enter. Even the NSA can compete and win the prize (their budget isn't what it used to be; they can probably use the money). But since we will publish the results, classified entries will not be permitted. To officially enter the contest, your entry must be accompanied by a completed and signed entry form. These are available electronically (see &quot;Availability,&quot; page 3) or we'll be glad to mail or fax you a hardcopy.<P>

We're not going to publish messages encrypted in Blowfish and some random key, because we think that would be too difficult.<P>

Partial results--those attacks that don't break the algorithm but instead prove that it isn't as strong as we thought it was--are just as useful and can be entered.<P>

Your entry does not have to consist of code. Instead, your entry can be a paper describing the attack. The attack does not have to completely break the Blowfish algorithm, it can simply be more efficient than a brute-force attack. The attack can be against either the complete algorithm or a simplified version of the algorithm (fewer rounds, smaller block size, simpler S-boxes, and the like).<P>

We'll select a winner based on the following criteria:<P>

<UL>
<li>Success of the attack. How much more efficient is the attack than brute force?</li>
<li>Type of attack. Is it ciphertext only, known plaintext, or chosen plaintext?</li>
<li>Type of algorithm. Is the attack against full Blowfish or a simplified version of the algorithm?</li>
</UL>
Bruce Schneier, frequent <I>DDJ</I> contributor, author of <I>Applied Cryptography</I>, and inventor of the Blowfish algorithm will referee the contest.<P>

The contest results will be published in the September 1995 issue of <I>Dr. Dobb's Journal</I>, in which we'll discuss and summarize the winning programs, the weaknesses of the Blowfish algorithm, and any modifications of the algorithm.<P>

We'll be providing a number of awards for the winners. The grand-prize winner will receive a $750 honorarium. Honorariums of $250 to the second-place winner and $100   to the third-place winner will also be awarded.<P>

--editors<P>


<h4><a name="010b_000a"><a name="010b_000b"><B>[LISTING ONE]</B></H4>

<PRE>

/* Blowfish.h */

#define MAXKEYBYTES 56              /* 448 bits */

short opensubkeyfile(void);
unsigned long F(unsigned long x);
void Blowfish_encipher(unsigned long *xl, unsigned long *xr);
void Blowfish_decipher(unsigned long *xl, unsigned long *xr);
short InitializeBlowfish(char key[], short keybytes);


</PRE>

<h4><a name="010b_000c"><a name="010b_000d"><B>[LISTING TWO]</B></H4>

<PRE>


/* Blowfish.c */

#include &lt;dos.h&gt;
#include &lt;graphics.h&gt;
#include &lt;io.h&gt;
#include &lt;math.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;
#include &lt;alloc.h&gt;
#include &lt;ctype.h&gt;
#include &lt;dir.h&gt;
#include &lt;bios.h&gt;
#include &lt;Types.h&gt;

#define  N  16
#define  noErr 0
#define  DATAERROR -1
#define  KEYBYTES 8
#define  subkeyfilename &quot;Blowfish.dat&quot;

static unsigned long P[18];
static unsigned long S[4,256];
static FILE*         SubkeyFile;

short opensubkeyfile(void) /* read only */
{
   short error;
   error = noErr;
   if((SubkeyFile = fopen(subkeyfilename,&quot;rb&quot;)) == NULL) {
      error = DATAERROR;
   }
   return error;
}
unsigned long F(unsigned long x)
{
   unsigned short a;
   unsigned short b;
   unsigned short c;
   unsigned short d;
   unsigned long  y;

   d = x &amp; 0x00FF;
   x &gt;&gt;= 8;
   c = x &amp; 0x00FF;
   x &gt;&gt;= 8;
   b = x &amp; 0x00FF;
   x &gt;&gt;= 8;
   a = x &amp; 0x00FF;

   y = ((S[0, a] + (S[1, b] % 32)) ^ S[2, c]) + (S[3, d] % 32);
   /* Note: There is a good chance that the following line will execute faster */
   /* y = ((S[0,a] + (S[1, b] &amp; 0x001F)) ^ S[2, c]) + (S[3,d] &amp; 0x001F); */
   return y;
}
void Blowfish_encipher(unsigned long *xl, unsigned long *xr)
{
   unsigned long  Xl;
   unsigned long  Xr;
   unsigned long  temp;
   short          i;

   Xl = *xl;
   Xr = *xr;
   for (i = 0; i &lt; N; ++i) {
      Xl = Xl ^ P[i];
      Xr = F(Xl) ^ Xr;

      temp = Xl;
      Xl = Xr;
      Xr = temp;
   }
   temp = Xl;
   Xl = Xr;
   Xr = temp;

   Xr = Xr ^ P[N];
   Xl = Xl ^ P[N + 1];

   *xl = Xl;
   *xr = Xr;
}
void Blowfish_decipher(unsigned long *xl, unsigned long *xr)
{
   unsigned long  Xl;
   unsigned long  Xr;
   unsigned long  temp;
   short          i;

   Xl = *xl;
   Xr = *xr;

   for (i = N + 1; i &gt; 1; --i) {
      Xl = Xl ^ P[i];
      Xr = F(Xl) ^ Xr;

      /* Exchange Xl and Xr */
      temp = Xl;
      Xl = Xr;
      Xr = temp;
   }
   /* Exchange Xl and Xr */
   temp = Xl;
   Xl = Xr;
   Xr = temp;

   Xr = Xr ^ P[1];
   Xl = Xl ^ P[0];

   *xl = Xl;
   *xr = Xr;
}
short InitializeBlowfish(char key[], short keybytes)
{
   short          i;
   short          j;
   short          k;
   short          error;
   short          numread;
   unsigned long  data;
   unsigned long  datal;
   unsigned long  datar;
   /* First, open the file containing the array initialization data */
   error = opensubkeyfile();
   if (error == noErr) {
      for (i = 0; i &lt; N + 1; ++i) {
         numread = fread(&amp;data, 4, 1, SubkeyFile);
         printf(&quot;%d : %d : %.4s\n&quot;, numread, i, &amp;data);
         if (numread != 1) {
            return DATAERROR;
         } else {
            P[i] = data;
         }
      }
      for (i = 0; i &lt; 4; ++i) {
         for (j = 0; j &lt; 256; ++j) {
            numread = fread(&amp;data, 4, 1, SubkeyFile);
            printf(&quot;[%d, %d] : %.4s\n&quot;, i, j, &amp;data);
            if (numread != 1) {
               return DATAERROR;
            } else {
               S[i, j] = data;
            }
         }
      }
      fclose(SubkeyFile);
      j = 0;
      for (i = 0; i &lt; 18; ++i) {
         data = 0x00000000;
         for (k = 0; k &lt; 4; ++k) {
            data = (data &lt;&lt; 8) | key[j];
            j = j + 1;
            if (j &gt; keybytes) {
               j = 0;
            }
         }
         P[i] = P[i] ^ data;
      }
      datal = 0x00000000;
      datar = 0x00000000;
      for (i = 0; i &lt; 18; i += 2) {
         Blowfish_encipher(&amp;datal, &amp;datar);

         P[i] = datal;
         P[i + 1] = datar;
      }
      for (j = 0; i &lt; 4; ++j) {
         for (i = 0; i &lt; 256; i += 2) {
            Blowfish_encipher(&amp;datal, &amp;datar);

            S[j, i] = datal;
            S[j, i + 1] = datar;
         }
      }
   } else {
      printf(&quot;Unable to open subkey initialization file : %d\n&quot;, error);
   }
   return error;
}
</pre><HR><P>
Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
