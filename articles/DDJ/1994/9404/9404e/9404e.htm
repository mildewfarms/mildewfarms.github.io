<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>APR94: The Wavelet Packet Transform</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>The Wavelet Packet Transform<a name="0111_0003"></h1><P>

<h2><a name="0111_0001"><a name="0111_0000">Extending the wavelet transform</h2><P>

<h3>Mac A. Cody</h3><P>

<P>
<i><a name="0111_0002"><a name="0111_0000">Mac is an engineering specialist at E-Systems' Garland Division in Dallas, Texas. He can be contacted at 214-205-6452 and on Internet at mcody@aol.com</i></p><hr><P>

The wavelet transform enables analysis of data at multiple levels of resolution (also known as &quot;scale&quot;). In addition, transient events in the data are preserved by the analysis. When the wavelet transform (WT) is applied to a signal in the time domain, the result is a two-dimensional, time-scale domain analysis of the signal. The transform has proven useful for the compression and analysis of signals and images.<P>

The fast wavelet transform (FWT) is an efficient implementation of the discrete wavelet transform (DWT). The DWT is the WT as applied to a regularly sampled data sequence. The transform of the data exhibits discrete steps in time on one axis, and discrete steps of resolution on another. The algorithm and a C language implementation of the FWT were presented in my article, &quot;The Fast Wavelet Transform&quot; (<I>DDJ,</I> April 1992).<P>

As demonstrated in that article, the superiority of the DWT over the discrete Fourier transform (DFT) is in the DWT's simultaneous localization of frequency and time, something that DFTs can't do. As a trade-off, the frequency divisions in the DWT are not in integral steps. Instead, the divisions are in octave bands. Each level of the transform represents a frequency range half as wide as that of the level above it and twice as wide as that of the level below it; see <a href="19940113.htm">Figure 1</A>(a).<P>

Conversely, the time scale on each level is twice that of the level below it and half that of the level above it; see <a href="19940114.htm">Figure 1</A>(b). This characteristic of the DWT poses problems when attempting to localize higher frequencies. Discrimination of frequency is sacrificed for time localization at the higher levels in the transform.<P>

It turns out that the DWT is actually a subset of a far more versatile transform, the wavelet packet transform (WPT). Developed by Dr. Ronald A. Coifman of Yale University, the WPT generalizes the time-frequency analysis of the wavelet transform. It yields a family of orthonormal transform bases of which the wavelet transform basis is but one member.<P>

In this article I'll develop the wavelet packet transform algorithm from its roots in the wavelet transform algorithm. After that, I'll present C code to implement the algorithm.<P>

<h3><a name="0111_0004">From a Humble Root a Tree Shall Grow<a name="0111_0004"></h3><P>

In the fast wavelet transform algorithm, the sampled data set is passed through the scaling and wavelet filters (the convolution operation). They are, respectively, low-pass and high-pass filters with complementary bandwidths, also known as a quadriture mirror filter (QMF) pair. The outputs of both filters are decimated (desampled) by a factor of two. The high-pass filtered data set is the wavelet transform detail coefficients at that level of scale of the transform. The low-pass filtered data set is the approximation coefficients at that level of scale. Due to the decimation, both sets of coefficients have half as many elements as the original data set.<P>

The approximation coefficients can now be used as the sampled data input for another pair of wavelet filters, identical to the first pair, generating another set of detail and approximation coefficients at the next-lower level of scale. This process can continue until the limit for the unit interval is reached. For example, if it is desired that the transform have six levels (5 through 0), then the unit interval must be 64 (2<sup>6</sup>) samples long. The data set can be of any length as long as it has an integral number of unit intervals. The resulting algorithm is the forward fast wavelet transform tree algorithm; see <a href="19940115.htm">Figure 2</A>(a).<P>

You can turn the tree algorithm on end, with the initial data input at the top and the detail and approximation coefficients fanning out towards the bottom. The fast wavelet transform algorithm can now be viewed as a partial graph of a binary tree (the significance of this will be seen shortly); see <a href="19940116.htm">Figure 2</A>(b). The flow of the algorithm moves down and to the left, forming new levels of the transform from the approximation coefficients at higher levels. The detail &quot;branches&quot; are not used for further calculations.<P>

Observe that the wavelet transform operation can be stopped at any level while working down the tree. The resulting &quot;partial&quot; transform is still a valid orthonormal transform. For example, <P>
if the unit interval for a data set were 32 points (2<sup>5</sup>), the corresponding transform would have five levels (4 through 0). If the transform operation were stopped at level 2, the transform would have only three levels, but the approximation and detail coefficients of the transform would correspond exactly to a wavelet transform with a unit interval of 8 (2<sup>3</sup>) samples; see <a href="19940117.htm">Figure 2</A>(b).<P>

The implication of this observation is that the QMF pair is an orthonormal transform kernel, just as butterfly operation is the kernel of the FFT. As long as the filters are designed to be orthonormal wavelet filters and the original data set meets the unit-interval requirement described above, repeated applications of the kernel will always yield an orthonormal transform.<P>

Now, the set of detail and approximation coefficients at each level of the transform forms a pair of subspaces of the approximation coefficients of the next-higher level of scale and, ultimately, of the original data set. The subspaces created by the wavelet transform roughly correspond to the frequency subbands shown in <a href="19940118.htm">Figure 1</A>(a). These subspaces form a disjoint cover of the frequency space of the original data set. In other words, the subspaces have no elements in common, and the union of the frequency subbands span the frequency range of the original data set.<P>

What Coifman proposed is that any set of subspaces which are a disjoint cover of the original data set is an orthonormal basis. The wavelet transform basis is then but one of a family of orthonormal bases with different subband intervals. As with the wavelet transform basis, each disjoint cover roughly corresponds to a covering of the frequency space of the original signal. Coifman dubbed this family a &quot;wavelet packet library.&quot; The various orthonormal bases are formed by arbitrary applications of the orthonormal transform kernel upon the detail coefficients as well as the approximation coefficients of higher transform levels.<P>

The application of the transform kernel to both the detail and approximation coefficients results in an expansion of the structure of the fast wavelet transform tree algorithm. The tree algorithm for the wavelet packet transform can be represented as a full binary tree; see <a href="19940119.htm">Figure 3</A>. As read from left to right, the <I>a</I> and <I>d</I> symbols at each node indicate the order of orthonormal transform kernel filter operations performed which yield each particular subspace of the original data set. Each node in the transform tree is also representative of a particular wavelet packet. The transform coefficients computed at each node are a correlation of the original data set and a waveform function representing the wavelet packet.<P>

For example, the sequence <I>aaad</I> in <a href="1994011a.htm">Figure 3</A> represents four operations of the orthonormal transform kernel representing one of 48 possible wavelet packets. (The combination of all possible translations in time and dilation in scale for the wavelet packets is J*2<sup>J</sup>; in this instance J equals 4.) The first three represent low-pass filter/decimation operations performed by the transform kernel. The fourth represents a high-pass filter/decimation operation performed by the transform kernel. This subspace should be recognizable as exactly the level 0 detail coefficients of the wavelet transform. The operations of the orthonormal transform kernel correspond to the wavelet function of the wavelet transform. Likewise, the wavelet packet represented by <I>aaaa</I> is the scaling function of the wavelet transform.<P>

<h3><a name="0111_0005">Packets, Graphs, and Bases<a name="0111_0005"></h3><P>

The wavelet transform basis is actually a subset of a family of bases formed by the wavelet packet transform. The heavy lines in <a href="1994011b.htm">Figure 3</A> indicate the graph forming the wavelet basis. Note that the wavelet basis consists of the subspaces <I>d</I>, <I>ad</I>, <I>aad</I>, <I>aaad</I>, and <I>aaaa</I>. The sequences <I>a</I>, <I>aa</I>, and <I>aaa</I> are intermediate steps leading to the generation of the subspaces of the wavelet basis at the lower levels. Since the orthonormal transform kernel can be arbitrarily applied to either approximation or detail branches on the tree, J*2<sup>J</sup> graphs representing different orthonormal bases can be created; see <a href="1994011c.htm">Figure 4</A>.<P>

The variety of orthonormal bases which can be formed by the WPT algorithm, coupled with the infinite number of wavelet and scaling functions which can be created, yields a very flexible analysis tool. The flexibility of WPT versus the FWT can be compared to that of having a complete set of sockets for a ratchet rather than a single socket to attach to it. The ratchet (algorithm) works the same regardless of the socket (basis) that is chosen. The flexibility of the tool is in choosing the appropriate socket (basis) for the particular nut (problem). The choice of wavelet and scaling functions is then analogous to selecting from English, metric, or Torx socket sets for use with the ratchet. The WPT allows tailoring of the wavelet analysis to selectively localize spectral bands in the input data as well as to correlate the signal to the wavelet. Not only can the best wavelet be chosen to analyze a particular signal but the best orthonormal basis can as well. In signal-processing terminology, the various bases of the wavelet packet transform can be used as arbitrary adaptive tree-structured filter banks.<P>

<h3><a name="0111_0006">Piece-wise Convolutions and Traversing the Tree<a name="0111_0006"></h3><P>

The implementation of the WPT is itself a generalization of the FWT routine presented in my previous article. As with the FWT, the kernel operations are the decimating and interpolating convolutions, as presented in <a href="#0111_0009">Listing One</A> (page 101). The convolutions performed are actually piece-wise convolutions, due to the discrete nature of the data. The routine <I>DualConvDec2</I> replaces the routines <I>ConvolveDec2</I> and <I>Dotp</I> in the FWT code. The routine <I>DualConvInt2Sum</I> replaces <I>ConvolveInt2</I>, <I>DotpOdd</I>, and <I>DotpEven</I> in the inverse FWT code.<P>

Both convolution routines are designed to operate upon aperiodic data of finite length. The data does not represent an infinitely repeating pattern and is assumed to be surrounded by zero-valued data; see <a href="1994011d.htm">Figure 5</A>. To support this data model, each data array is appended with additional data storage equal to the length of the wavelet filter, minus one (the shaded elements). The extra data is filled with the terminating convolution values as the wavelet filters &quot;slide off&quot; the end of the data set. Extending the convolution data by this additional amount during the decomposition process of the forward transform ensures perfect reconstruction of the original input data by the inverse transform. <I>DualConvDec2</I> also uses partial dot products at both ends of the convolution to simulate the implied zero-valued data (the dotted lines) outside of the data array. The dotted lines on the filter elements indicate coefficients not used in the partial dot product calculations. <I>DualConvInt2Sum</I> does not need to do this, since all information necessary for reconstruction is contained within the extended data arrays. Note that <I>DualConvInt2Sum</I> performs only the odd-valued dot product at the beginning of the convolution for the initial, reconstruction data point.<P>

The WPT data is stored in the structure <I>WPTstruct</I>, defined in <a href="1994011e.htm">Figure 6</A>(a). The structure contains storage for the number of levels in the transform, the length of the original, untransformed data array, and a pointer to a two-dimensional matrix of data arrays. The size of the matrix in dependent upon three factors. These are the number of levels in the transform, the length of the original data array, and the length of the transform filters. The length of the data array is itself affected by the length of the transform filters; see <a href="1994011f.htm">Figure 6</A>(b).<P>

<a href="19940120.htm">Figure 6</A>(c) shows the matrix structure as the wavelet packet binary tree. The data-array pointers are allocated memory from the heap as necessary to form the disjoint cover for the chosen orthonormal basis. Those array pointers not required for the disjoint cover are set to zero. The example shown in the figure represents a three-level wavelet basis for an input of 40 data points with transform filters containing six coefficients.<P>

The routine <I>DualConvDec2</I> is used by <I>AWPT</I>, the forward wavelet packet transform routine; see <a href="#0111_000b">Listing Two</A> (page 101). <I>AWPT</I> accepts pointers to the input data array, the WPT data structure, and the transform filter arrays, and the length of the filters. The transform routine works down the levels of the binary tree performing convolutions on the data arrays. Each level of the binary tree is traversed by taking adjacent pairs of array pointers as the destination nodes for the low-pass and high-pass convolutions. If the array pointer for the low-pass convolution is zero, the convolutions are not performed since the destinations are not part of the current disjoint cover.<P>

At the highest level (where <I>i</I> equals 0) the input data array is the source for the convolutions. On each subsequent level, the sources are the arrays on the previous level. The appropriate array in the binary tree is determined by dividing the current <I>j</I> index by 2. After each convolution operation, the data length is divided by two, in order to keep track of the effect of the decimation operation during the convolutions.<P>

<I>DualConvInt2Sum</I> is used by <I>IAWPT</I>, the inverse wavelet packet transform routine. <I>IAWPT</I> accepts pointers to the source WPT data structure, the output data array, the transform filter arrays, and the length of the filters. The inverse transform routine works up the levels of the binary tree, performing convolutions on the data arrays and  reconstructing the higher-resolution data on each level. Each level of the binary tree is traversed in the same fashion as was <I>AWPT</I>. The destination arrays are on the next-higher level of the matrix, and they are selected by dividing the <I>j</I> index by 2. At the highest level (<I>i</I> equals 0), the destination array is the output data array. After each convolution operation, the data length is doubled to keep track of the effect of the interpolation operation during the convolutions.<P>

The code listings presented here are written in ANSI C and have been tested with Borland Turbo C 2.0. They should compile on any compiler that is compliant with ANSI C. I've also written a wavelet packet transform demonstration program which is available electronically; see &quot;Availability&quot; on page 3. The electronic version includes the demo program, sample data files, support drivers, and documentation.<P>

<h3><a name="0111_0007">Conclusion<a name="0111_0007"></h3><P>

The wavelet packet transform generalizes the discrete wavelet transform and provides a more flexible tool for the time-scale analysis of data. All of the advantages of the fast wavelet transform are retained since the wavelet basis is in the repertoire of bases available with the wavelet packet transform. Given this, the wavelet packet transform may eventually become a standard tool in signal processing.<P>

<h3><a name="0111_0008">References<a name="0111_0008"></h3><P>

Cody, Mac A. &quot;The Fast Wavelet Transform.&quot; <I>Dr. Dobb's Journal</I> (April 1992).<P>

Coifman, Ronald R., Yves Meyer, and Victor Wickerhauser. <I>Wavelet Analysis and Signal Processing</I>. New Haven, CT: Yale University, 1991, preprint.<P>

<h4> <a href="19940121.htm">Figure 1</A>: (a) The Discrete Wavelet Transform (DWT) divides the spectrum of the sampled data into octave bands; (b) the resolution at each level of the DWT is half that of the level above it and twice that of the level below.  At lower levels, time resolution is sacrificed for frequency localization.</h4><P>

<h4> <a href="19940122.htm">Figure 2</A>: The tree or pyramid algorithm of the forward fast wavelet transform (a) can be viewed as a partial graph of a binary tree (b).  FOr a particular unit interval (2<sup>J</sup> samples), a maximum of J levels of transform data can be formed.</h4><P>

<h4> <a href="19940123.htm">Figure 3</A>: The wavelet packet transform viewed as a complete binary graph.  Each &quot;a&quot; and &quot;d&quot; in each sequence represents the filtering operations performed to yield the particular subspace of the original signal.  The bold lines represent the disjoint cover known as the wavelet basis.</h4><P>

<h4> <a href="19940124.htm">Figure 4</A>: Different disjoint covers formed from the WPT binary tree (<a href="19940125.htm">Figure 3</A>) yield different wavelet packet bases.  (a) A subband basis; (b) an orthonormal basis subset; (c) a basis which is the opposite of the wavelet basis (better frequency localization at higher frequencies).</h4><P>

<h4> <a href="19940126.htm">Figure 5</A>: The convolution operation in DualConvDec2 employs partial dot products at both ends of the data array to simulate zero-valued data surrounding it; (b) the convolution operating in DualConvInt2Sum performs dot products with alternating odd and even filter components to simulate interpolation.  The additional convolution data generated by DualConvDec2 is used to accomplish perfect reconstruction.  Marked data elements indicate starting points of dot-product calculations.</h4><P>

<h4> <a href="19940127.htm">Figure 6</A>: (a) The data structure for the WPT.  The REAL_TYPE declaration can be defined either as float or double; (b) the storage structure for the original signal consists of the data, plus appended storage equal to the filter length, minus 1; (c) the data component of WPTstruct is a two-dimensional matrix of data arrays forming the wavelet packet binary tree.  Data-array pointers set to 0 indicate parts of the tree that aren't part of the disjoint cover (the wavelet basis).</h4><P>


<h4><a name="0111_0009"><a name="0111_000a"><B>[LISTING ONE]</B></H4>

<PRE>

/* CONVOLVE.C */
/* Copyright (C) 1993 Mac A. Cody - All rights reserved */

#include &quot;convolve.h&quot;

/* DualConvDec2 - Convolution of data array with decomposition filters
                  followed by decimation by two.
   Input(s): REAL_TYPE *src    - Pointer to source data sample array.
             REAL_TYPE *htilda - Pointer to lowpass filter array.
             REAL_TYPE *gtilda - Pointer to highpass filter array.
             short srclen      - length of source data array.
             short filtlen     - length of filter arrays.
   Output(s): REAL_TYPE *adst  - Pointer to approximation data sample array.
              REAL_TYPE *ddst  - Pointer to detail data sample array.
*/
void DualConvDec2(REAL_TYPE *src, REAL_TYPE *adst, REAL_TYPE *ddst,
           REAL_TYPE *htilda, REAL_TYPE *gtilda, short srclen, short filtlen)
{
  short i, j, brklen, endlen;
  REAL_TYPE adot_p, ddot_p;
  REAL_TYPE *head_src, *lp_fltr, *hp_fltr;
  brklen = 1; /* initial break in dot product is after first element */
  /* perform truncated dot products until filter no longer hangs off end of
     array; decimation by two handled by two-element shift; break count
     increases by two on every iteration */
  for(j = 0; j &lt; filtlen; j += 2, brklen += 2)
  {
    head_src = src + j; /* point to appropriate initial element at head */
    lp_fltr = htilda;   /* set up pointer to lowpass filter */
    hp_fltr = gtilda;   /* set up pointer to highpass filter */
    adot_p = *head_src * *lp_fltr++;   /* initial lowpass product of head */
    ddot_p = *head_src-- * *hp_fltr++; /* initial highpass product of head */
    for(i = 1; i &lt; brklen; i++) /* perform remaining products of head */
    {
      adot_p += *head_src * *lp_fltr++;
      ddot_p += *head_src-- * *hp_fltr++;
    }
    *adst++ = adot_p; /* save the completed lowpass dot product */
    *ddst++ = ddot_p; /* save the completed highpass dot product */
  }
  endlen = srclen + filtlen - 2; /* find total length of array */
  /* perform convolution to the physical end of the array
     with a simple dot product loop */
  for(; j &lt;= endlen; j += 2)
  {
    head_src = src + j; /* point to appropriate initial element at head */
    lp_fltr = htilda;   /* set up pointer to lowpass filter */
    hp_fltr = gtilda;   /* set up pointer to highpass filter */
    adot_p = *head_src * *lp_fltr++;   /* initial lowpass product */
    ddot_p = *head_src-- * *hp_fltr++; /* initial highpass product */
    for(i = 1; i &lt; filtlen; i++) /* perform remaining products */
    {
      adot_p += *head_src * *lp_fltr++;
      ddot_p += *head_src-- * *hp_fltr++;
    }
    *adst++ = adot_p; /* save the completed lowpass dot product */
    *ddst++ = ddot_p; /* save the completed highpass dot product */
  }
  /* perform convolution off the physical end of the array
     with a partial dot product loop, like at the beginning */
  for(brklen = filtlen - 2, j = 2; brklen &gt; 0; brklen -= 2, j += 2)
  {
    head_src = src + endlen; /* point to last element in array */
    lp_fltr = htilda + j;    /* set up pointer to lowpass filter offset */
    hp_fltr = gtilda + j;    /* set up pointer to highpass filter offset*/
    adot_p = *head_src * *lp_fltr++;   /* initial lowpass product */
    ddot_p = *head_src-- * *hp_fltr++; /* initial highpass product */
    for(i = 1; i &lt; brklen; i++) /* perform remaining products */
    {
      adot_p += *head_src * *lp_fltr++;
      ddot_p += *head_src-- * *hp_fltr++;
    }
    *adst++ = adot_p; /* save the completed lowpass dot product */
    *ddst++ = ddot_p; /* save the completed highpass dot product */
  }
} /* End of DualConvDec2 */
/* DualConvInt2Sum - Convolution of data array with reconstruction
                     filters with interpolation by two and sum together.
   Input(s): REAL_TYPE *asrc   - Pointer to approximation data sample array.
             REAL_TYPE *dsrc   - Pointer to detail data sample array.
             REAL_TYPE *h      - Pointer to lowpass filter array.
             REAL_TYPE *g      - Pointer to highpass filter array.
             short srclen      - length of source data array.
             short filtlen     - length of filter arrays.
   Output(s): REAL_TYPE *dst  - Pointer to output data sample array.
*/
void DualConvInt2Sum(REAL_TYPE *asrc, REAL_TYPE *dsrc, REAL_TYPE *dst,
                     REAL_TYPE *h, REAL_TYPE *g, short srclen, short filtlen)
{
  short i, j, endlen;
  REAL_TYPE dot_pe, dot_po;
  REAL_TYPE *head_asrc, *head_dsrc, *lp_fltr, *hp_fltr;
  endlen = srclen + filtlen - 2; /* find total length of array */
  filtlen /= 2;         /* adjust filter length value for interpolation */
  j = filtlen - 1;      /* start with filter 'covering' end of array */
  head_asrc = asrc + j; /* point to initial element at head */
  head_dsrc = dsrc + j; /* point to initial element at head */
  lp_fltr = h + 1;      /* set up pointer to lowpass filter */
  hp_fltr = g + 1;      /* set up pointer to highpass filter */
  /* initial lowpass and highpass odd product */
  dot_po = *head_asrc-- * *lp_fltr + *head_dsrc-- * *hp_fltr;
  lp_fltr += 2;  hp_fltr += 2; /* skip over even filter elements */
  for(i = 1; i &lt; filtlen; i += 2) /* perform remaining products */
  {
    dot_po += *head_asrc-- * *lp_fltr + *head_dsrc-- * *hp_fltr;
    lp_fltr += 2;  hp_fltr += 2; /* skip over even filter elements */
  }
  /* save the completed lowpass and highpass odd dot product */
  *dst++ = dot_po;
  /* perform initial convolution with a simple dot product loop */
  for(j++; j &lt;= endlen; j++)
  {
    head_asrc = asrc + j; /* point to appropriate initial element at head */
    head_dsrc = dsrc + j; /* point to appropriate initial element at head */
    lp_fltr = h;          /* set up pointer to lowpass filter */
    hp_fltr = g;          /* set up pointer to highpass filter */
    /* initial lowpass and highpass even product */
    dot_pe = *head_asrc * *lp_fltr++ + *head_dsrc * *hp_fltr++;
    /* initial lowpass and highpass odd product */
    dot_po = *head_asrc-- * *lp_fltr++ + *head_dsrc-- * *hp_fltr++;
    for(i = 1; i &lt; filtlen; i++) /* perform remaining products */
    {
      dot_pe += *head_asrc * *lp_fltr++ + *head_dsrc * *hp_fltr++;
      dot_po += *head_asrc-- * *lp_fltr++ + *head_dsrc-- * *hp_fltr++;
    }
    /* save the completed lowpass and highpass even dot product */
    *dst++ = dot_pe;
    /* save the completed lowpass and highpass odd dot product */
    *dst++ = dot_po;
  }
} /* End of DualConvInt2Sum */



</PRE>

<h4><a name="0111_000b"><a name="0111_000c"><B>[LISTING TWO]</B></H4>

<PRE>


/* AWPT.C */
/* Copyright (C) 1993 Mac A. Cody - All rights reserved */

#include &quot;wp_types.h&quot;
#include &quot;awpt.h&quot;
#include &quot;convolve.h&quot;

/* AWPT - Aperiodic Wavelet Packet Transform: Data is assumed to be
          non-periodic, so convolutions do not wrap around arrays.
          Convolution data past end of data is generated and retained
          to allow perfect reconstruction of original input.
   Input(s): REAL_TYPE *indata - Pointer to input data sample array.
             REAL_TYPE *htilda - Pointer to lowpass filter array.
             REAL_TYPE *gtilda - Pointer to highpass filter array.
             short filtlen     - Length of filter arrays.
   Output(s): WPTstruct *out - Pointer to transform data structure.
   Note: Structure pointed to by 'out' contains:
         out-&gt;levels - Number of levels in transform (short).
         out-&gt;length - Length of input data sample array (short).
         out-&gt;data   - Pointer to pointer of arrays of data (REAL_TYPE ***).
*/
void AWPT(REAL_TYPE *indata, WPTstruct *out,
          REAL_TYPE *htilda, REAL_TYPE *gtilda, short filtlen)
{
  short i, j, nodes, datalen;
  REAL_TYPE *src;
  levels = out-&gt;levels;
  datalen = out-&gt;length; /* start with length of input array */
  /* loop for all levels, halving the data length on each lower level */
  for (i = 0, nodes = 2; i &lt; levels; i++, nodes &lt;&lt;= 1)
  {
    for(j = 0; j &lt; nodes; j += 2)
    {
      if(out-&gt;data[i][j] == 0) continue;
      if(i == 0)      /* ... source for highest level is input data */
        src = indata;
      else            /* ... source is corresponding node of higher level */
        src = out-&gt;data[i-1][j &gt;&gt; 1];
      DualConvDec2(src, out-&gt;data[i][j], out-&gt;data[i][j+1],
                                    htilda, gtilda, datalen, filtlen);
    }
    datalen /= 2; /* input length for next level is half this level */
  }
} /* End of AWPT */
/* IAWPT - Inverse Aperiodic Wavelet Packet Transform: Data is assumed to be
           non-periodic, so convolutions do not wrap arround arrays.
           Convolution data past end of data is used to generate perfect
           reconstruction of original input.
   Input(s): WPTstruct *in     - Pointer to transform data structure.
             REAL_TYPE *htilda - Pointer to lowpass filter array.
             REAL_TYPE *gtilda - Pointer to highpass filter array.
             short filtlen     - Length of filter arrays.
   Note: Structure pointed to by 'in' contains:
         in-&gt;levels - Number of levels in transform (short).
         in-&gt;length - Length of output data sample array (short).
         in-&gt;data   - Pointer to pointer of arrays of data (REAL_TYPE ***).
   Output(s): REAL_TYPE *indata - Pointer to input data sample array.
*/
void IAWPT(WPTstuct *in, REAL_TYPE *outdata,
           REAL_TYPE *htilda, REAL_TYPE *gtilda, short filtlen)
{
  short i, j, levels, nodes, datalen;
  REAL_TYPE *dst;
  levels = in-&gt;levels;
  /* start with length of lowest level input array */
  datalen = in-&gt;length &gt;&gt; levels;
  /* loop for all levels, doubling the data length on each higher level;
     destination of all but the highest branch of the reconstruction
     is the next higher node */
  for (i = levels - 1, nodes = 1 &lt;&lt; levels; i &gt;= 0; i--, nodes &gt;&gt;= 1)
  {
    for(j = 0; j &lt; nodes; j += 2)
    {
      if(out-&gt;data[i][j] == 0) continue;
      if(i == 0) /* ... destination for highest level is input data */
        dst = outdata;
      else       /* ... destination is corresponding node of higher level */
        dst = in-&gt;data[i - 1][j &gt;&gt; 1];
      DualConvInt2Sum(in-&gt;data[i][j], in-&gt;data[i][j+1], dst,
                                      htilda, gtilda, datalen, filtlen);
    }
    datalen *= 2; /* input length for next level is half this level */
  }
}/* End of IAWPT */
End Listings
</pre><HR><P>
Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
