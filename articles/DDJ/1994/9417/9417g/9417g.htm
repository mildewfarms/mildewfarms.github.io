<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>SP 94: Customizing Window Behavior</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Customizing Window Behavior<a name="02f4_0102"></h1><P>
<h2><a name="02f4_0100"><a name="02f4_0000">Subclassing windows with MFC</h2><P>
<h3>Vinod Anantharaman</h3><P>
<p><i><a name="02f4_0101"><a name="02f4_0000">Vinod is a software-design engineer at Microsoft working with desktop applications and graphical user interfaces. He can be reached at One Microsoft Way, Redmond, WA 98052.</i></p><hr><P>
Subclassing is a well-known meth-od of enhancing and modifying default window behavior under Microsoft Windows. The way subclassing works is by letting an application intercept any Windows message before it reaches its target window, thereby giving the application the first shot at performing some action in response to the message. Subclassing is widely used for developing specialized types of window controls from existing ones. For instance, masked edit controls and multiple-selection list boxes can be developed from the edit and list-box controls that come with Windows. Potentially expensive reimplementation of existing control functionality can be avoided by using this technique. <P>
When discussing ways to avoid reimplementation, the term &quot;object oriented&quot; can never be far behind. Although objects have been touted as the panacea for all programming ills for several years now, only in recent times is this paradigm finding widespread acceptance in the world of GUI-based Windows programming. This has a lot to do with the growing acceptance, by developers, of object-oriented frameworks for Windows, such as the Microsoft Foundation Class (MFC) library and Borland's Object Windows Library (OWL). By combining powerful visual tools with well-designed Windows wrapper classes, class libraries bring method to the madness of API calls. Programmers leverage from the classes provided in such libraries by inheriting their functionality in their own derived classes and then extending and modifying the inherited behavior as desired in an object-oriented fashion. Class libraries support and simplify code reuse, substantially reducing the time and effort needed to design and implement Windows applications. In this article, I'll discuss how to use subclassing in MFC and illustrate this with an MFC DLL that lets you change the default look of windows running on your system to whatever you choose.<P>
<h3><a name="02f4_0103">Automatic Subclassed Windows in MFC<a name="02f4_0103"></h3><P>
With MFC, custom controls and standard windows inheriting from MFC's <I>CWnd</I> class get subclassed automatically. You just need to handle messages appropriately with &quot;message maps&quot;--tables connecting messages to the member functions that handle them. For example, the <I>CEdit</I> and <I>CListBox</I> classes both inherit from <I>CWnd</I>. To subclass one of these classes and create your own custom control, you simply: <P>
<UL>
<li>Make your new, derived class inherit from the base class you want; for example, <I>CMaskedEdit</I> from <I>CEdit</I>.</li>
<li>Write the message map for your derived class. The messages to be included in the map are usually evident from the functionality of the control you want to build. For instance, masked edit controls restrict the data input to specific formats, preventing the entry of invalid characters. Evidently, WM_CHAR needs to be on <I>CMasked Edit</I>'s message map.</li>
<li>Write &quot;message-handler&quot; functions for your class. These are the member functions that handle the commands mapped to them in the message map.</li>
<li>Construct an instance of your new class and call its creation function. Note that the call to your class's creation function should eventually lead to one of <I>CWnd</I>'s <I>Create</I> or <I>CreateEx</I> member functions (possibly through an intermediate call to your immediate base class's <I>Create</I> function) for subclassing to be automatic.</li>
</UL>
How does the class library implement subclassing? This isn't much of a mystery, really. <I>CWnd</I>'s <I>Create</I> and <I>CreateEx</I> member functions call the Windows function <I>SetWindowsHook</I> to set up a window-procedure filtering hook (of the type WH_CALLWNDPROC) with a corresponding callback function. Windows ensures that this library callback function will get called by the system whenever the <I>SendMessage</I> function is invoked. This enables MFC to intercept, among others, all the WM_CREATE messages sent by the system, as in <a href="199402f6.htm">Figure 1</A>(a). When MFC's callback function gets a creation message, it subclasses the window by calling <I>SetWindowLong</I> to reset the window procedure to <I>AfxWndProc</I>, the window procedure for all windows in MFC. <a href="199402f7.htm">Figure 1</A>(b) shows how <I>AfxWndProc</I> routes all Windows messages through the attached message map once the window is subclassed.<P>

<h3><a name="02f4_0104">Windows MFC Does Not Subclass<a name="02f4_0104"></h3><P>
So much for windows created by the MFC library. The interesting problem is that of subclassing windows created with <I>CreateWindow</I> or <I>CreateWindowEx</I>, the usual Windows API functions.<P>
Assume you want to subclass the window <I>myHwnd</I>. One simple solution would be to declare a <I>CWnd</I> object and then use <I>CWnd</I>'s <I>Attach</I> member function, as in <a href="#02f4_0106">Example 1(a)</A>. But this does not work because <I>Attach</I> does not subclass <I>myHwnd</I>, and <I>myHwnd</I> must be subclassed prior to the call to <I>Attach</I>. Fortunately, <I>CWnd</I> has a member function, <I>SubclassWindow</I>, that enables you to do exactly what you want. So you might be tempted to use <I>SubclassWindow</I> along the lines of <a href="#02f4_0106">Example 1(b)</A>.<P>
But this will only get you into more trouble. Why? Remember that MFC itself subclasses all windows that it creates. On subclassing, MFC saves the window's original window procedure, its Super WNDPROC, so that this procedure can continue to process messages not handled by <I>AfxWndProc</I>'s message map. Now, a <I>CWnd</I> class can be subclassed with <I>SubclassWindow</I> exactly once so that all objects of that class have exactly the same behavior. It is likely that the <I>CWnd</I> class has already been subclassed by MFC--typically, this would have happened when a <I>CWnd</I> object was created in your application, either explicitly or implicitly, by the MFC framework. If so, the <I>myCWndObject.SubclassWindow(myHwnd)</I> call in <a href="#02f4_0106">Example 1(b)</A> fails to subclass <I>myHwnd</I>. <P>
To get over this hurdle, derive a class from <I>CWnd</I> and make this class store its Super WNDPROC in a location different from that of <I>CWnd.</I> For this, the derived class has to override <I>CWnd</I>'s <I>GetSuperWndProcAddr</I> function. This virtual function returns a pointer to a window procedure. For subclassed windows, this return value is a pointer to the original window procedure. Your derived class should override this function by declaring a static WNDPROC member variable, initialized to NULL, and returning a pointer to this static in <I>GetSuperWndProcAddr</I>, as in <a href="#02f4_0106">Example 1(c)</A>. Because the WNDPROC member variable is declared static, all subclassed windows belonging to the class <I>CMyWnd</I> share a single Super WNDPROC. <P>
It always helps to see how things fit into a real program, so I'll step through a subclassing DLL that I developed with MFC. The DLL subclasses all windows, system-wide, that are not already attached to a <I>CWnd</I> object and that have a caption and a system-menu box (this includes both preexisting and newly created windows). To visually demonstrate the subclassing, the DLL replaces their default Windows-provided looks with a nonclient look that I want to experiment with. <P>
In a nutshell, my DLL will: <P>
<UL>
<li>Set the subclass style to be windows that have a caption bar and a system menu.</li>
<li>Dynamically subclass every visible subclass-style window running under Windows that is not already attached to a <I>CWnd</I> object, attaching each such window to a C++ object of a class <I>CMyWnd</I> (which inherits from MFC's <I>CWnd</I> class).</li>
<li>Install a window-procedure filtering hook (a Windows hook of the type WH_CALLWNDPROC) to catch every new window-creation message meant for a subclass-style window. This way, we can subclass, on the fly, any newly created subclass-style windows.</li>
<li>Intercept nonclient paint (WM_NCPAINT) messages before they reach their target subclass-style windows and call my own paint function, which gives subclassed windows the nonclient look that I fancy.</li>
</UL>
<h3><a name="02f4_0105">The Pieces of the Subclassing DLL<a name="02f4_0105"></h3><P>
For easy readability, I've organized the source code for the DLL in three separate listings. <a href="#02f4_0107">Listing One</A> contains some <I>typedef</I>s and globals for the DLL.<P>
The code for <I>CWinApp</I> and the Windows hook is in <a href="#02f4_0108">Listing Two</A> . In MFC, <I>CWinApp</I> is the base class from which you derive a Windows application object; this class provides member functions for initializing your application and for cleanup before termination. My DLL derives the class <I>CSubclassDLL</I> from <I>CWinApp</I> and overrides its <I>InitInstance</I> and <I>ExitInstance</I> member functions.<P>
The <I>InitInstance</I> function, called during DLL initialization, sets up a window-procedure filtering hook with the exported callback function <I>CallWndProc,</I> which is called by the system whenever <I>SendMessage</I> is called. <I>CallWndProc</I> monitors all WM_NCCREATE messages--if it was meant for a subclass-style window (for example, my function <I>FSubclassStyle</I> returns TRUE for this window), it calls <I>CMyWnd</I>'s <I>MySubclassWindow</I> member function to promptly subclass this newly created window on the fly. The <I>ExitInstance</I> function removes this hook before termination. Note that since there can be only one instance of a DLL, the <I>InitInstance</I> code is called just once and could equivalently be in an overridden <I>InitApplication</I> member function.<P>
An MFC application needs to declare its derived <I>CWinApp</I> object at the global level; my DLL's <I>CSubclassDLL</I> object is simply called subclassDLL. <P>
The <I>CMyWnd</I> and subclassing-related functions are in <a href="#02f4_0109">Listing Three</A> . Each window that gets dynamically subclassed is attached to an object of my class <I>CMyWnd</I>, which inherits from MFC's <I>CWnd</I>. <I>CMyWnd</I> overrides <I>CWnd</I>'s virtual <I>GetSuperWndProcAddr</I> function, as discussed previously. <I>CMyWnd</I> adds two new functions, <I>MySubclassWindow</I> and <I>UnsubclassWindow</I>. <I>MySubclassWindow</I> takes a window handle, subclasses the window if it does not have a <I>CWnd</I> object already attached to it, and if successful, returns a pointer to the <I>CMyWnd</I> object that it attached to the window. The <I>UnsubclassWindow</I> member function retrieves the Super WNDPROC pointer from <I>GetSuperWndProcAddr</I>, does a <I>SetWindowLong</I> to reset the Super WNDPROC as the window's window procedure, and calls <I>Detach</I> to detach the window handle from the <I>CMyWnd</I> object.<P>
The DLL's exported function <I>SetSubclassingState</I> is used to start or terminate subclassing for this demo. This needs to be called from your driver program. To start subclassing, call <I>SetSubclassingState</I> with the <I>fStart</I> parameter set to TRUE. This results in a call to <I>InitSubclassing</I>, which, together with the recursive <I>InitSubclassingHwnd</I> function, does a depth-first scan on the system's window tree (starting from the desktop window), subclasses all the windows that belong to the subclass style, and calls the redraw function for those windows. When terminating subclassing, call <I>SetSubclassState</I> with <I>fStart</I> set to FALSE--this leads to a call to <I>TerminateSubclassing</I>, which provides the means to restore the system back to its pre-subclassed state (a good feature to have, too!). <I>TerminateSubclassing</I>, together with the recursive <I>TerminateSubclassingHwnd</I> function, scans depth-first for subclassed windows in the system's window tree, un-subclasses these by calling <I>UnsubclassWindow</I>, and calls their redraw function.<P>
Finally, the message map of <I>CMyWnd</I> is set to include, among other messages, the WM_NCPAINT message. <I>CMyWnd</I>'s <I>OnNcPaint</I> handler function calls <I>MyPaint</I>, which does my nonclient painting. <a href="199402f8.htm">Figure 2</A> shows what windows look like under the version of <I>MyPaint</I> that I use. Notice that the frame has a 3-D look, the title-bar font is different, and the nonclient area buttons use new visuals and are no longer in their default positions. Because the title bar, borders, caption-bar buttons, and so on, no longer conform to the Windows defaults, the message map needs to add the WM_NCHITTEST message, and the corresponding handler, <I>OnNcHitTest</I>, must return the correct value (HTCAPTION, HTMINBUTTON, and so on) to indicate the position of the cursor on our window's nonclient area. We also need to detect mouse clicks over our repositioned, nonclient area buttons ourselves, so the message map includes the WM_NCLBUTTONDOWN and WM_LBUTTONUP messages. To do this, I check in <I>CMyWnd</I>'s <I>OnNcLButtonDown </I>handler to see if the mouse-down was on one of the repositioned buttons; if so, I set a flag and capture the mouse. In the <I>OnLButtonUp </I>handler function, I check if the mouse-up occurred on a button, and from the flags value, I determine if the mouse-up occurred on the same button that we recorded the mouse-down on. If it did, a mouse click occurred, so I do whatever is appropriate for that button. The code for <I>MyPaint</I> and the <I>OnNcHitTest</I>, <I>OnNcLButtonDown,</I> and <I>OnLButtonUp</I> handler functions is not shown in the listings, but you can customize these functions to create any window look or nonclient button positions (and functionality) of your own choice.<P>
<a href="199402f9.htm">Figure 1</A>  (a) Message path after MFC's hook has been set up, before the window is subclassed; (b) message path after MFC subclasses the window.
<h4><a name="02f4_0106"><B>Example 1:</B> (a) Declaring a CWnd object and using CWnd's Attach member function to subclass the window myHwnd; (b) using SubclassWindow to subclass myHwnd; (c) declaring a static WNDPROC member variable to override a function.<a name="02f4_0106"></h4><P>
<pre>(a) CWnd myCwndObject;
    myCWndObject.Attach (myHwnd);

(b) CWnd myCwndObject;
    myCWndObject.SubclassWindow (myHwnd);

(c) class CMyWnd : public CWnd
    {
    protected:
             static WNDPROC lpfnSuperWndProc;
             virtual WNDPROC* GetSuperWndProcAddr()
                             { return &amp;lpfnSuperWndProc; }
    }
    WNDPROC CMyWnd::lpfnSuperWndProc = NULL; CMyWnd myCwndObject;
    myCWndObject.SubclassWindow (myHwnd);</pre><P>
<a href="199402fa.htm">Figure 2</A>  New-look subclassed windows.
<P>
<h4><a name="02f4_0107">Listing One <a name="02f4_0107"></h4><pre>

// A couple of typedefs
typedef struct tagCWPSTRUCT
        {
        LPARAM    lParam;
        WPARAM    wParam;
        UINT msg;
        HWND hWnd;
        }
CWPSTRUCT;

typedef CWPSTRUCT FAR* LPCWPSTRUCT;

// Global handle of the installed Windows hook
HHOOK vhHookCallWnd = NULL;

// The subclass-style
const long lSubclassStyle = (WS_CAPTION | WS_SYSMENU);


</pre>
<h4><a name="02f4_0108">Listing Two<a name="02f4_0108"></h4><pre>

// Our CWinApp class, and the Windows hook related stuff

// CSubclassDLL is our CWinApp class
class CSubclassDLL : public CWinApp
{
public:
        virtual BOOL InitInstance();
        virtual int ExitInstance();
        
        // No special code for the constructor
        CSubclassDLL(const char* pszAppName) : CWinApp (pszAppName) { }
};

// Our global CWinApp object
CSubclassDLL NEAR subclassDLL(&quot;subclass.dll&quot;);

// InitInstance is called on DLL initialization, it sets up the Windows hook.
BOOL CSubclassDLL::InitInstance() {
 HMODULE hmodule=::GetModuleHandle((LPCSTR)MAKELONG(AfxGetInstanceHandle(),0));
        vhHookCallWnd = ::SetWindowsHookEx(WH_CALLWNDPROC,
             (HOOKPROC)CallWndProc, hmodule, NULL);
        return (vhHookCallWnd != NULL);
}               
// ExitInstance removes the hook if there was one.
int CSubclassDLL::ExitInstance()  
{
        if (vhHookCallWnd != NULL)
             ::UnhookWindowsHookEx(vhHookCallWnd);
        return CWinApp::ExitInstance(); 
}
// The hook callback function
LRESULT CALLBACK AFX_EXPORT CallWndProc(int code, WPARAM wParam, LPARAM lParam)
{
        LPCWPSTRUCT lpCall;
        LPCREATESTRUCT lpcs;
        CMyWnd *pMyWnd;
        if (code &lt; 0)
             {
             CallNextHookEx (vhHookCallWnd, code, wParam, lParam);
             }
        else
             {
             lpCall = (LPCWPSTRUCT) lParam;
             switch (lpCall-&gt;msg)
                  {
                  case WM_CREATE:
                       lpcs = (LPCREATESTRUCT) lpCall-&gt;lParam;
                       if (FSubclassStyle(lpcs-&gt;style)) 
                            { 
                                 HWND hwnd;
                                 hwnd = lpCall-&gt;hWnd;
                                 pMyWnd = CMyWnd::MySubclassWindow(hwnd);
                            }                   
                       break;
                  }
             }
        return 0L;
}


</pre>
<h4><a name="02f4_0109">Listing Three<a name="02f4_0109"></h4><pre>

// Subclassing functions and the class CMyWnd

// FSubclassStyle determines if lStyle conforms to our subclass-style
BOOL FSubclassStyle (LONG lStyle)
{
        return ((lStyle &amp; lSubclassStyle) == lSubclassStyle);
}
// SetSubclassingState is the exported function that needs to 
//  be called from your driver program to begin or terminate subclassing
void FAR PASCAL __export SetSubclassingState(BOOL fStart)
{                  
        if (fStart)   
             InitSubclassing();
        else
             TerminateSubclassing();
}

// InitSubclassing, along with InitSubclassingHwnd, enumerates all 
//  the windows and subclasses relevant ones. void InitSubclassing()
{
        HCURSOR hcurSave;
        HWND hwnd;
        hcurSave = SetCursor(LoadCursor(NULL, IDC_WAIT));
        hwnd = GetDesktopWindow();
        InitSubclassingHwnd(hwnd);
        SetCursor(hcurSave);
}
void InitSubclassingHwnd(HWND hwndParent)
{
        HWND hwndChild = GetWindow(hwndParent, GW_CHILD);
        static CMyWnd * pMyWnd;
        while (hwndChild)
             {
             long lStyle = GetWindowLong(hwndChild, GWL_STYLE);
             BOOL fActive;
             
             if (FSubclassStyle(lStyle) &amp;&amp; IsWindowVisible (hwndChild))
                  {
                  pMyWnd = CMyWnd::MySubclassWindow(hwndChild);
                  if (pMyWnd != NULL)
                       pMyWnd-&gt;RedrawWindow(NULL, NULL, 
                                      RDW_INVALIDATE | RDW_FRAME);
                  }
             InitSubclassingHwnd(hwndChild);
             hwndChild = GetWindow (hwndChild, GW_HWNDNEXT);
             }
}
// TerminateSubclassing, along with TerminateSubclassingHwnd, 
//   enumerates all the windows and un-subclasses relevant ones.
void TerminateSubclassing()
{
        HCURSOR hcurSave;
        HWND hwnd;
        
        hcurSave = SetCursor(LoadCursor(NULL, IDC_WAIT));
        
        hwnd = GetDesktopWindow();
        TerminateSubclassingHwnd(hwnd);
        
        SetCursor(hcurSave);
}
void TerminateSubclassingHwnd(HWND hwndParent)
{
        HWND hwndChild = GetWindow(hwndParent, GW_CHILD);
        static CMyWnd * pMyWnd;
        
        while (hwndChild)
             {                  
                  if ((pMyWnd = (CMyWnd *) 
                                 CWnd::FromHandlePermanent(hwndChild)) != NULL)
                  {
                  pMyWnd-&gt;UnsubclassWindow();
                  if (IsWindowVisible (hwndChild))                                  RedrawWindow(hwndChild, NULL, NULL, RDW_INVALIDATE | 
                                                                    RDW_FRAME);
                  }
             TerminateSubclassingHwnd(hwndChild);
             hwndChild = GetWindow (hwndChild, GW_HWNDNEXT);
             }
}
// The class CMyWnd and its member functions
class CMyWnd : public CWnd
{
protected:
        static WNDPROC lpfnSuperWndProc;
        virtual WNDPROC* GetSuperWndProcAddr();                  
        void OnNcPaint();
public:
        CMyWnd* MySubclassWindow(HWND hwnd);
        BOOL UnsubclassWindow();
};
WNDPROC CMyWnd::lpfnSuperWndProc = NULL;
WNDPROC* CMyWnd::GetSuperWndProcAddr() 
{ 
        return &amp;lpfnSuperWndProc; 
}
// CMyWnd::MySubclassWindow subclasses hwnd if it is doesn't already have a
//   CWnd attached to it. If successful, it returns a pointer to the CMyWnd 
//   object that it attached to the window.
CMyWnd* CMyWnd::MySubclassWindow(HWND hwnd)
{                          
        CMyWnd * pMyWnd = NULL; 
        if (CWnd::FromHandlePermanent(hwnd) == NULL)
             { 
             pMyWnd = new CMyWnd;
             pMyWnd-&gt;SubclassWindow(hwnd);
             }              
        return pMyWnd;
}                              
// CMyWnd::UnsubclassWindow un-subclasses the window
BOOL CMyWnd::UnsubclassWindow()
{
        WNDPROC* lplpfn;
        WNDPROC  oldWndProc;
        RedrawWindow(NULL, NULL, RDW_FRAME | RDW_INVALIDATE | 
                                               RDW_UPDATENOW | RDW_NOCHILDREN);
        lplpfn = GetSuperWndProcAddr();
        oldWndProc =  (WNDPROC) ::SetWindowLong (m_hWnd, GWL_WNDPROC, 
                                                           (DWORD) (*lplpfn));
        Detach();
        
        return TRUE;
}
// CMyWnd's message map
BEGIN_MESSAGE_MAP(CMyWnd, CWnd)
        ON_WM_NCPAINT()
        ON_WM_NCHITTEST() 
        ON_WM_NCLBUTTONDOWN()
        ON_WM_LBUTTONUP()
END_MESSAGE_MAP()
// CMyWnd's WM_NCPAINT message handler
afx_msg void CMyWnd::OnNcPaint ()
{   
        MyPaint();
}

</pre>
<HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
