<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>DEC94: Intelligent XYModem</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Intelligent XYModem<a name="01ec_00a3"></h1><P>
<h2><a name="01ec_00a1"><a name="01ec_0000">Establishing a common ground for XModem/YModem dialects</h2><P>
<h3>Tim Kientzle</h3><P>
<p><i><a name="01ec_00a2"><a name="01ec_0000">More on XYModem and other serial protocols can be found in Tim's upcoming book from Coriolis Group Books. Tim can be contacted at kientzle@netcom.com.</i></p><hr><P>
When Ward Christensen upgraded his MODEM program to MODEM2 in 1977, he added a method for transferring binary files between two CP/M computers. This protocol, which became known as &quot;XModem,&quot; spread rapidly, primarily because of it's simplicity. But this popularity came at a price. New implementations often incorporated minor changes to the original protocol, resulting in a babel of incompatible &quot;dialects.&quot;<P>
Today, programs that attempt to support a wide variety of file-transfer protocols sometimes list as many as eight XModem and YModem variations. Worse, the same dialect can appear under different names: What some systems refer to as &quot;XModem-1k&quot; is referred to by others as &quot;YModem.&quot; This lack of standardization confuses users; even if the local terminal program and remote host are using identically named protocols, they still may not be able to transfer a file!<P>
<h3><a name="01ec_00a4">The XYModem Protocol<a name="01ec_00a4"></h3><P>
About five years ago, I began to develop techniques for automatically determining which XModem or YModem dialect is being used by the other end. The result is a single protocol, which I call &quot;XYModem,&quot; implemented in the program XY.C. Applications using this &quot;smart&quot; XYModem protocol can transfer files with any of the common XModem or YModem dialects. <a href="#01ec_00b4">Listing One</A> presents excerpts from XY.C. The complete implementation is available electronically; see &quot;Availability,&quot; page 3.<P>
The major advantage of this combined protocol over more traditional implementations is that it simplifies the user interface. A smart implementation reduces the need for the user to set his or her program to exactly match the other end. It also significantly reduces the number of settings and technical terms that the user has to contend with. <P>
<a href="#01ec_00b4">Listing One</A> is organized by layers. Each layer reflects a different level of functionality, ranging from basic serial I/O to a complete transfer session. <P>
<h3><a name="01ec_00a5">Packet Layer<a name="01ec_00a5"></h3><P>
The lowest layer is the packet layer. XYModem has data packets (see <a href="#01ec_00ab">Table 1</A>), and control packets (<a href="#01ec_00ac">Table 2</A>). One of XYModem's weaknesses, compared to protocols such as Kermit or ZModem, is that control packets do not contain error-check information. This means that higher layers need to allow for altered or spurious control packets.<P>
<h3><a name="01ec_00a6">Reliability Layer<a name="01ec_00a6"></h3><P>
The reliability layer is responsible for ensuring that data packets are correctly transferred. It calls packet-layer functions to send or receive data and interprets responses and errors. The receiver responds to most errors by waiting for the line to clear and sending a NAK to request that the packet be resent.<P>
XYModem is receiver driven so the XYModem receiver should always timeout before the sender. To simplify the UI, I usually offer the user a short menu of timeouts. I then subtract one second from the user's choice to get the actual receiver timeout and multiply it by 5 to get the actual sender timeout. Thus, the default user setting of 10 seconds results in a 9-second receiver timeout and a 50-second sender timeout.<P>
<h3><a name="01ec_00a7">File Layer<a name="01ec_00a7"></h3><P>
The file layer, responsible for transferring a single file, involves a handshake negotiation and an optional batch-header transfer, followed by the transfer of the actual file data. <P>
By convention, text files are converted to a neutral format with CR/LF terminating each line, and the last packet is filled out with SUB characters (Ctrl-Z). This corresponds to the CP/M file format used by the first XModem implementations. For optimal compatibility with older systems, it's advisable to ensure that text files end with CR/LF, and that there is at least one SUB character after the end of the file data.<P>
<B>Handshake.</B> The file layer's handling of the initial handshake is a bit complicated because the handshakes used by different dialects overlap. In particular, the C handshake is used by both the non-batch XModem-CRC dialect and the batch YModem dialect. <a href="#01ec_00ad">Table 3</A> lists the handshake sequences that may be sent by the XYModem receiver. (Forsberg, the inventor of YModem, allows a YModem transfer to begin with a NAK handshake, specifying Checksum error detection. However, this is rarely used.) <P>
The receiver starts with a handshake based on the user's protocol setting, which should default to YModem. The receiver repeats the initial handshake three times; if there is no response, it tries a different handshake, as indicated under &quot;Fallback&quot; in <a href="#01ec_00ad">Table 3</A>. After a total of ten timeouts, the receiver fails.<P>
When the sender sees a handshake it recognizes, it responds with one of two packets--a filename packet (to attempt a batch-mode transfer) or the first packet of data (for a non-batch-mode transfer)--depending on the receiver's handshake. After three failures, the sender tries the other. Once the receiver acknowledges one of these packets, the sender knows whether or not batch mode will be used.<P>
At this point, the sender and receiver agree on the batch mode and error-check method. The only remaining possibility for disagreement is the packet size. Unfortunately, it's dangerous to try sending the same data with different packet sizes  just to discover the receiver's capabilities. For example, spurious ACKs can cause both sides to believe the file transfer has succeeded, even though data has been duplicated. (ZModem, which uses file position rather than packet number to identify data, is immune to this problem.) So the XYModem sender assumes that all batch receivers can handle long data packets and relies on the initial handshake to determine if nonbatch receivers can handle long packets.<P>
To show how these rules work in practice, Figures <a href="#01ec_00af">1</A> and <a href="#01ec_00b0">2</A> illustrate negotiations between XYModem and non-XYModem implementations. <a href="#01ec_00af">Figure 1</A> demonstrates an XYModem sender attempting to transfer a file with an XModem-CRC receiver. The XYModem sender initially sends a batch header, but after three NAKs changes to a nonbatch transfer, which succeeds. In this case, the startup is quite fast, since the XModem-CRC receiver is likely to NAK the unrecognized packets immediately. Other instances of an XYModem sender transferring data to a non-XYModem receiver work similarly.<P>
<a href="#01ec_00b0">Figure 2</A> demonstrates an XYModem receiver attempting to transfer a file with a YModem-G sender. The XYModem receiver has been configured to start with plain YModem. This example shows that, although the XYModem receiver will eventually manage to negotiate a common protocol, it can be time consuming. If the user can choose the protocol for the XYModem receiver to try first, the negotiation is much quicker. Note that if the sender were an XYModem sender, it would recognize and respond to the first handshake and a normal YModem transfer would take place immediately.<P>
<B>Nonbatch File Transfer.</B> In nonbatch mode, the file data is transferred beginning with packet number one. After the receiver acknowledges the last data packet, the sender sends an EOT and waits for the receiver's acknowledgment. <a href="#01ec_00b1">Figure 3</A> illustrates this exchange. Notice that because EOT can conceivably be generated by noise, the receiver sends NAK to challenge the first EOT. (Older nonbatch senders don't wait for the acknowledgment, so a receiver using this technique should be prepared to terminate gracefully if there is no response to the NAK.)<P>
<B>Batch File Transfer.</B> Instead of simply transferring the file contents as <a href="#01ec_00b1">Figure 3</A> indicates, the sender may attempt a batch transfer. The batch transfer consists of adding a packet zero with data about the file; see <a href="#01ec_00b2">Figure 4</A>. If the receiver fails to acknowledge packet zero, the sender should try sending the first packet of data and continue in nonbatch mode if the receiver acknowledges.<P>
Packet zero contains two consecutive, null-terminated strings. The remainder of the packet is filled with nulls. The first string is the mandatory filename, the second contains the file size as a decimal number, the file's time of creation (an octal number representing seconds since January 1, 1970), and the file's mode (as a UNIX-style octal number). These three fields are separated by blanks and are all optional. If any field is omitted, all following fields must also be omitted. Also, if the file size is unknown (which is common for text files that require end-of-line conversion), the size field must be omitted.<P>
<h3><a name="01ec_00a8">Session Layer<a name="01ec_00a8"></h3><P>
The session layer handles multiple files. After the first file is transferred, the protocol knows if batch mode is being used. If so, the session layer loops to repeatedly transfer the remaining files and does a final transfer of a file with no name to terminate the session. Otherwise, it simply terminates after transferring the first file.<P>
<h3><a name="01ec_00a9">XYModem Implementation<a name="01ec_00a9"></h3><P>
I've implemented the XModem and YModem protocols, both separately and in the combined form discussed earlier, several times over the last ten years. Each time I've learned a few more tricks. <P>
One of the major reasons file-transfer protocols exist is to deal with errors. Good error handling can't be easily added as an afterthought. The approach I prefer is for each function to return a status code: 0 if the function succeeded with no errors, or a code indicating the type of error. A collection of constants defines the error values. Using this approach, most function calls end up looking somewhat like <a href="#01ec_00b3">Example 1</A>. <P>
Three basic serial functions simplify the implementation of most file-transfer protocols, while improving portability. <P>
<UL>
<li><I>ReadBytesWithTimeout</I> accepts a buffer and a timeout interval and returns when the buffer is filled or the timeout expires.</li>
<li><I>SendBytes</I> queues bytes to be sent.</li>
<li><I>WaitForSentBytes</I> waits until the outgoing serial queue is empty.</li>
</UL>
Each of these returns a status code to indicate one of the following:<P>
<UL>
<li>The operation was completed successfully.</li>
<li>A user interrupt was detected. This result is eventually returned to the top layer of the transfer code, which sends the abort sequence.</li>
<li>There was a fatal serial error which cannot be recovered from (loss of carrier, for example).</li>
<li>There was a nonfatal serial error which invalidates the received data (a framing or overrun error, for example).</li>
<li>There was a timeout.</li>
</UL>
There are two reasons why it's useful to implement sending as two separate functions. First, accurate timing requires that the protocol not begin waiting for a response until the data has actually been sent. Calling <I>WaitForSentBytes</I> after each packet is sent helps to ensure this. Second, it allows you to queue data for sending and then do additional work while the serial queue empties. In particular, this speeds sending packets, since the CRC calculation can be started after the data bytes are queued for sending.<P>
Providing good user feedback for file transfers requires balancing user requirements against efficiency. If you don't update the display for every transfer event, then at low baud rates a user may easily believe that the transfer has stopped. If you do update the display, then at high baud rates the overhead of updating can slow the transfer. (Excessive screen updates have been known to slow transfers by 20 percent or more.)<P>
My solution is to generate frequent updates to the screen information, but to limit the frequency at which the screen is actually updated. It is usually easy to record the time of the last update and only change the screen if there is some unusual condition or if a minimum time has elapsed.<P>
Care also must be given when deciding what information to display. Too much information can be intimidating to nontechnical users. <a href="#01ec_00ae">Table 4</A> lists the information I have found to be consistently useful.<P>
Many programs overwhelm the user with a wealth of settings. My preference is to provide only two: a timeout setting with options of 5, 10, or 20 seconds; and a protocol setting with choices of XModem, YModem, or YModem-G. The other settings commonly provided by terminal programs are either not useful in practice, or made largely obsolete by the automatic negotiation of the XYModem protocol.<P>
The only real trick to implementing the combined protocol is dealing with ambiguity. For example, if the sender sees a C handshake, then the receiver may or may not support batch transfers. To help with this, my implementation maintains a structure with information about which protocol options are currently active. Each option contains two variables: one to indicate whether that option is currently enabled, and another to indicate if that option is locked or not. During the handshake negotiation, the program uses the current options, changing them after repeated errors. When there is evidence that a particular option is correct, that option is locked and not changed again during the session.<P>
<h3><a name="01ec_00aa">Summary<a name="01ec_00aa"></h3><P>
XModem and YModem are often criticized for being difficult to use. Much of that difficulty is due to unrefined user interfaces which require the user to know many details of protocol operation. By shifting the burden to the implementation and using automatic negotiation, the UI complexity can be significantly reduced.<P>
<h4><a name="01ec_00ab"><B>Table 1:</B> XYModem data packet.<a name="01ec_00ab"></h4><P>
<PRE>
Size         Description
             
1            1 for 128-byte packet or 2 for 1024-byte packet.
1            Packet-sequence number.
1            Complement of sequence number.
128 or 1024  Data.
1 or 2       1-byte. checksum/2-byte CRC-16.
</pre>

<h4><a name="01ec_00ac"><B>Table 2:</B> XYModem control packets.</h4>
<PRE>
Control Packet   Description

ACK              Sent by receiver to acknowledge successful receipt
                  of a packet; sender responds with next data packet 
                  or EOT.
NAK              Sent by receiver to request repeat of previous packet.
EOT              Sent by sender to indicate end of file data.
CAN CAN          Sent by either side to abort transfer.
</pre>

<h4><a name="01ec_00ad"><B>Table 3:</B> Handshakes.<a name="01ec_00ad"></h4><P>
<PRE>
Handshake   Fallback   Error Check   Batch   Long Packets   Dialect

NAK         G          Checksum      No      No             XModem
C           NAK        CRC-16        No      Yes            XModem-1K
C           NAK        CRC-16        No      No             XModem-CRC
C           NAK        CRC-16        Yes     Yes            YModem
G           C          CRC-16        Yes     Yes            YModem-G
</pre>

<h4><a name="01ec_00ae"><B>Table 4:</B> Progress information.<a name="01ec_00ae"></h4><P>

<B>Relative progress.</B> During sends or during batch receives, the file size should be available so it's possible to compute the relative progress and display it using a &quot;thermometer&quot; bar. If the file size is not available, then the number of bytes transferred can be substituted.<P>

<B>Current filename.</B> The receiver should show the filename under which the file is being stored, rather than the name specified by the sender. These may differ if the name given by the sender is illegal on this particular system or the receiver is modifying names to avoid overwriting existing files.<P>

<B>Estimated time remaining.</B> On some systems, this display can be updated every second, providing a reassuring, steady countdown to the user. This should be computed from a decaying average of the measured transfer speed, not from the serial-port baud rate.<P>

<B>Throughput estimate.</B> Percent-efficiency estimates, while popular, can be misleading. Using newer, speed-buffering modems, the &quot;efficiency&quot; may appear very low because the modems are connected at a low speed. I prefer to display a throughput estimate in bits per second. Since modems are commonly rated in bits per second, these numbers are more likely to be meaningful to the user.<P>

<B>Status.</B> Detailed status messages are not very useful to the user and can actually slow down the transfer if too much time is spent frequently updating the display. I prefer to limit the status during the transfer to: <I>Negotiating_</I>, <I>Sending_</I>, <I>Receiving_</I>, and <I>Finishing_</I>. When the transfer stops, the status shows either <I>Finished,</I> <I>Failed,</I> or <I>Aborted.</I><P>

<h4><a name="01ec_00af"><B>Figure 1: Handshake example:</B> XModem-CRC receiver, XYModem sender.</h4>
<PRE>

        Receiver        Sender

Send C handshake
                        Send filename packet
             NAK
                        Send filename packet
             NAK
                        Send filename packet
             NAK
                        Send first data packet
     Acknowledge

<I>Nonbatch XModem-CRC transfer proceeds</I>
</pre>
<h4><a name="01ec_00b0"><B>Figure 2: Handshake example:</B> XYModem receiver, YModem-G sender.</h4>

<PRE>
        Receiver        Sender

Send C handshake
                        Timeout
Send C handshake
                        Timeout
Send C handshake
                        Timeout
Send NAK handshake
                        Timeout
Send NAK handshake
                        Timeout
Send NAK handshake
                        Timeout
Send G handshake
                        Send filename packet

     <I>YModem-G transfer proceeds</I>
</pre>
<h4><a name="01ec_00b1"><B>Figure 3:</B> XYModem nonbatch file layer.</h4>

<PRE>
      Receiver          Sender

Send handshake
                        Send packet one
   Acknowledge
               <B>.</B>
               <B>.</B>
               <B>.</B>
                        Send last packet
   Acknowledge
                        Send EOT
           NAK
                        Resend EOT
   Acknowledge
              <I>End of file</I>
</pre><P>
<h4><a name="01ec_00b2"><B>Figure 4:</B> XYModem batch file layer.</h4>
<PRE>
        Receiver          Sender

  Send handshake
                          Send packet zero
     Acknowledge
Repeat handshake
                          Send packet one
     Acknowledge
                 <B>.</B>
                 <B>.</B>
                 <B>.</B>
                          Send EOT
             NAK
                          Resend EOT
     Acknowledge
               <I>End of file</I>
</pre>
<h4><a name="01ec_00b3"><B>Example 1:</B> XYModem function calls.</h4>

<pre>
int status;
status = function(arguments);
if (status == special value)
  fix problem;
else if (status != 0)
  return status;</pre><P>
<P>

<h4><a name="01ec_00b4">Listing One <a name="01ec_00b4"></h4>

<pre>

/****************************************************************************
**            Excerpts from XY.C                                           **
****************************************************************************/

/**** Every function returns a status code.  These macros help. ****/
#define StsWarn(s)  Sts_Warn(s,__FILE__,__LINE__)
#define StsRet(e)   do{int tmp_s; if ((tmp_s = (e)) != xyOK) \
                    return StsWarn(tmp_s);}while(FALSE)
static int Sts_Warn(int s,char *file,int line)
{   switch(s) {
        case xyFail:     fprintf(stderr,&quot;!?:%s:%d:xyFail\n&quot;,file,line); break;
            /* ... other cases deleted ... */    }
    return s;
}
/* A 'capability' has two fields. The 'enabled' field determines current state
of the capability, while the 'certain' field determines whether the capability
can still change. Whenever we have evidence of a capability (for example, we
receive an acknowledge for a long packet), set the 'certain' field to TRUE. */

typedef struct CAPABILITY {   int enabled, certain; } CAPABILITY;

/* This structure contains the current state of the transfer. By keeping all 
information about the transfer in a dynamically-allocated structure, we can 
allow multiple simultaneous transfers in a multi-threaded system. */

typedef struct XYMODEM XYMODEM;
struct XYMODEM {
    CAPABILITY  crc,        /* Does other end support CRC? */
                longPacket, /* Does other end support 1K blocks? */
                batch,      /* Does other end support batch? */
                G;          /* Does other end support `G'? */
    int         timeout;    /* Number of seconds timeout */
    int         retries;    /* Number of times to retry a packet */
    int         userAbort;  /* Set when user asks for abort */
    int         packetNumber; /* Current packet number */
    PORT_TYPE   port;       /* Port to use */
    FILE *      f;          /* Current file */
    char        fileName[128]; /* Name of file being transferred */
    long        fileSize;   /* Size of file being transferred, -1 if not known */
    long        fileDate;    /* Mod time, GMT, in seconds after 1/1/1970 */
    long        fileMode;   /* Unix-style file mode */
    long        transferred;/* Number of bytes transferred so far */
};

/**************************** Packet Layer *********************************/
/* XYSendPacket. Send an XYModem data packet. Length must be less than 1024.
    Packets shorter than 128 or longer than 128 but shorter than 1024 are
    padded with SUB characters. */

static int XYSendPacket(XYMODEM *pXY, BYTE *pBuffer, int length)
    /* ... body deleted ... */

/* XYReceivePacket. Receiver must be able to receive three different types of 
packets: data packets start with a recognizable 3-byte sequence; EOT packets 
consist of a single EOT character; CAN packets consist of two consecutive CAN.
We use a shorter timeout between bytes within a single packet than we do 
between packets.  This is to help speed error recovery. */

static int XYReceivePacket(XYMODEM *pXY, int *pPacketNumber,
                                                  BYTE *pBuffer, int *pLength)
{
    BYTE  startOfPacket = 0;
    BYTE  packet = 0;
    BYTE  packetCheck = 0;

/* This loop searches incoming bytes for a valid packet start. This reduces */
/* our sensitivity to inter-packet noise. Also check for EOT and CAN packets.*/
    StsRet(XYReadBytesWithTimeout(pXY,pXY-&gt;timeout,&amp;packetCheck,1));
    if (packetCheck == EOT) return xyEOT;
    do {
        startOfPacket = packet; packet = packetCheck;
        StsRet(XYReadBytesWithTimeout(pXY,pXY-&gt;timeout,&amp;packetCheck,1));
        if ((packetCheck == CAN) &amp;&amp; (packet == CAN)) return StsWarn(xyFailed);
    } while (  ( (startOfPacket != 0x01) &amp;&amp; (startOfPacket != 0x02) )
            || ( ((packet ^ packetCheck) &amp; 0xFF) != 0xFF ) );
    /* ... rest of body deleted ... */
}

/************************* Reliability Layer ******************************/
/* XYSendPacketReliable. Repeatedly sends a packet until it is acknowledged. 
Note that only a slight change is required to handle the YModem-G protocol. */

static int XYSendPacketReliable(XYMODEM *pXY, BYTE *pBuffer, int length)
{
    int err;
    BYTE response = ACK;
    do {
        StsRet(XYSendPacket(pXY, pBuffer, length));
        if (pXY-&gt;G.enabled) return xyOK;
        do { /* Read ACK or NAK response */
            err = XYReadBytesWithTimeout(pXY, pXY-&gt;timeout, &amp;response, 1);
            if (err == xyTimeout) return StsWarn(xyFail);
            StsRet(err);
        } while ((response != ACK) &amp;&amp; (response != NAK));
    } while (response != ACK);
    pXY-&gt;crc.certain = TRUE; /* Checksum/crc mode is now known */
    if (length &gt; 128)
        pXY-&gt;longPacket.enabled = pXY-&gt;longPacket.certain = TRUE;
    return xyOK;
}

/* XYReceivePacketReliable. Handles NAK of data packets until a valid packet is
received. The next layer up is responsible for sending the ACK and dealing
with packet sequencing issues. EOT packets are handled here by the following 
logic:  An EOT is considered reliable if it is repeated twice by the sender 
or if we get three consecutive timeouts after an EOT. Cancel packets are 
already reliable. We don't ACK packets here so the next layer up can do some
work (opening files, etc.) before the ACK is sent. That way, we can avoid
having to deal with the issue of overlapped serial and disk I/O. */

static int XYReceivePacketReliable(XYMODEM *pXY, int *pPacket,
                                              BYTE *pBuffer, int *pLength)
    /* ... body deleted ... */

/************************* File Layer *************************************/
/* Read and interpret receiver's handshake */
static int XYSendReadHandshake(XYMODEM *pXY, BYTE *pResponse)
{
    int err;
    do { /* Read handshake */
        err = XYReadBytesWithTimeout(pXY, pXY-&gt;timeout, pResponse, 1);
        if (err == xyTimeout) return xyFail;
        if (err != xyOK) return err;
        /* Interpret the receiver's handshake */
        switch(*pResponse) {
            case 'G':   if (pXY-&gt;G.enabled) return xyOK;
                        if (!pXY-&gt;G.certain) pXY-&gt;G.enabled = TRUE;
                        if (!pXY-&gt;G.enabled) break;
                        return xyOK;
            case 'C':    /* ... deleted ... */
            case NAK:    /* ... deleted ... */
            case ACK: return xyOK;
            default: break;
        }
    } while (TRUE);
}
/* Send packet zero or one, depending on batch mode.  If there are too many
   failures, we swap batch mode. The buffer is passed as a parameter to reduce 
   our stack requirements. */ 
static int XYSendFirstPacket(XYMODEM *pXY, BYTE *pBuffer, int bufferLength )
{
    int err;
    int totalRetries = pXY-&gt;retries;
    int retries = pXY-&gt;retries / 2;
    BYTE response = ACK;
    int dataLength = 0;
    /* Get initial handshake */
    do {
        StsRet(XYSendReadHandshake(pXY,&amp;response));
    } while (response == ACK);
    do {
        /* Send packet 0 or 1, depending on current batch mode */
        if (pXY-&gt;batch.enabled) { StsRet(XYSendPacketZero(pXY));
                                    if (pXY-&gt;G.enabled) return xyOK;
        } else {
            if (dataLength == 0) { /* Get packet 1 */
                dataLength = (pXY-&gt;longPacket.enabled)?1024:128;
                err = XYFileRead(pXY, pBuffer, &amp;dataLength);
            }
            pXY-&gt;packetNumber = 1;
            StsRet(XYSendPacket(pXY,pBuffer,dataLength));
        }
        /* Get response or repeated handshake */
        StsRet(XYSendReadHandshake(pXY,&amp;response));
        /* Count down number of retries */
        if (response != ACK) {
            if (retries-- == 0) {
                if (!pXY-&gt;batch.certain)
                    pXY-&gt;batch.enabled = !pXY-&gt;batch.enabled;
                if (!pXY-&gt;longPacket.certain)
                    pXY-&gt;longPacket.enabled = pXY-&gt;batch.enabled;
                retries = 2;
            }
            if (totalRetries-- == 0) return xyFail;
        }
    } while (response != ACK);
    if ( (pXY-&gt;packetNumber == 0) &amp;&amp; (dataLength &gt; 0) ) {
        pXY-&gt;packetNumber++;
        StsRet(XYSendPacketReliable(pXY, pBuffer, dataLength));
        pXY-&gt;transferred += dataLength;
    }
    pXY-&gt;G.certain = pXY-&gt;batch.certain = TRUE; /* batch mode is now known */
    return xyOK;
}
/* Send EOT and wait for acknowledgement */
static int XYSendEOT(XYMODEM *pXY)    /* ... body deleted ... */

static int XYSendFile(XYMODEM *pXY)    /* ... body deleted ... */

/* Shuffles capabilities for falling back to a lower protocol. Note that we do
 actually `fall' from basic XModem to YModem-G, to handle obstinate senders 
that may be looking for only a `G' or `C' handshake. */
static int XYReceiveFallback(XYMODEM *pXY)
{
    if (pXY-&gt;G.enabled)  pXY-&gt;G.enabled = FALSE;
    else if (pXY-&gt;crc.enabled) pXY-&gt;crc.enabled
        = pXY-&gt;batch.enabled = pXY-&gt;longPacket.enabled = FALSE;
    else   pXY-&gt;G.enabled = pXY-&gt;batch.enabled
                = pXY-&gt;longPacket.enabled = pXY-&gt;crc.enabled = TRUE;
    return xyOK;
}
/* Send the correct handshake for the current capabilities. */
static int XYReceiveSendHandshake(XYMODEM *pXY)   /* ... body deleted ... */

static int XYReceiveFile(XYMODEM *pXY)
{
    BYTE data[1024];
    int dataLength, err = xyOK, packetNumber;
    int retries = pXY-&gt;retries/2 + 1;
    int totalRetries = (pXY-&gt;retries * 3)/2+1;
    /* Try different handshakes until we get the first packet */
    XYNewFile(pXY);
    XYProgress(pXY,stsNegotiating);
    do { 
        if (--retries == 0) {
            XYReceiveFallback(pXY);
            XYProgress(pXY,stsNegotiating);
            retries = (pXY-&gt;retries/3);
        }
        if (totalRetries-- == 0) return xyFail;
        StsRet(XYReceiveSendHandshake(pXY));
        err = XYReceivePacket(pXY, &amp;packetNumber, data, &amp;dataLength);
        if (err == xyEOT)  /* EOT must be garbage... */
            StsRet(XYGobble(pXY, pXY-&gt;timeout/2));
        if (err == xyBadCRC)  /* garbaged block */
            StsRet(XYGobble(pXY,pXY-&gt;timeout/3));
    } while ( (err == xyTimeout) || (err == xyBadCRC) || (err == xyEOT) );
    StsRet(err);
    if ((packetNumber != 0) &amp;&amp; (packetNumber != 1)) return xyFail;
    /* The first packet tells us the sender's batch mode */
    /* If batch mode is certain, then a mismatch is fatal. */
    /* Note that batch mode is never certain for the first file. */
    if (packetNumber == 0)  pXY-&gt;batch.enabled = TRUE;
    else if (pXY-&gt;batch.enabled &amp;&amp; pXY-&gt;batch.certain) return xyFail;
    else                    pXY-&gt;batch.enabled = FALSE;
    pXY-&gt;batch.certain = TRUE;
    /* Open the file and make sure `data' contains the first part of file */
    if (packetNumber == 0) {
        if (data[0] == 0) { /* Empty filename? */
            StsRet(XYSendByte(pXY,ACK)); /* Ack packet zero */
            return StsWarn(xyEndOfSession);
        }
        StsRet(XYFileWriteOpen(pXY, data, dataLength));
        StsRet(XYSendByte(pXY,ACK)); /* Ack packet zero */
        StsRet(XYReceiveSendHandshake(pXY));
        err = XYReceivePacketReliable(pXY, &amp;packetNumber, data, &amp;dataLength);
    } else
        StsRet(XYFileWriteOpen(pXY, NULL, 0));
    pXY-&gt;packetNumber = 1; pXY-&gt;transferred = 0;
    XYProgress(pXY,stsReceiving);
    /* We have the first packet of file data. Receive remaining packets and 
    /* write it all to the file. Note that we're careful to ACK only after 
    /* file I/O is complete. */
    while (err == xyOK) {
        if (packetNumber == (pXY-&gt;packetNumber &amp; 0xFF)) {
            if ( (pXY-&gt;fileSize &gt;= 0)
                 &amp;&amp; (dataLength + pXY-&gt;transferred &gt; pXY-&gt;fileSize) )
                dataLength = pXY-&gt;fileSize - pXY-&gt;transferred;
            StsRet(XYFileWrite(pXY,data,dataLength));
            pXY-&gt;transferred += dataLength;
            pXY-&gt;packetNumber++;
            XYProgress(pXY,stsReceiving);
            StsRet(XYSendByte(pXY,ACK)); /* Ack correct packet */
        } else if (packetNumber == (pXY-&gt;packetNumber-1) &amp; 0xFF)
            StsRet(XYSendByte(pXY,ACK)); /* Ack repeat of previous packet */
        else return xyFail; /* Fatal: wrong packet number! */
        err = XYReceivePacketReliable(pXY, &amp;packetNumber, data, &amp;dataLength);
    }
    /* ACK the EOT.  Note that the Reliability layer has already */
    /* handled a challenge, if necessary. */
    if (err == xyEOT) {
        XYProgress(pXY,stsFinishing);
        err = XYSendByte(pXY,ACK);
    }
    StsRet(XYFileWriteClose(pXY));
    StsRet(err);
    if (!pXY-&gt;batch.enabled) return StsWarn(xyEndOfSession);
    return xyOK;
}
/************************ Session Layer *********************************/
static int XYSend(XYMODEM *pXY)
{
    int err;
    XYNewFile(pXY);
    err = XYFileReadOpenNext(pXY);
    while (err == xyOK) {
        err = XYSendFile(pXY);
        XYFileReadClose(pXY);
        XYNewFile(pXY);
        if (err == xyOK) err = XYFileReadOpenNext(pXY);
    }
    if (err == xyEndOfSession) {
        err = xyOK;
        if (pXY-&gt;batch.enabled)
            err = XYSendSessionEnd(pXY); /* Transfer empty filename */
    }
    if (err == xyFail) {
        static BYTE cancel[] = {CAN,CAN,CAN,CAN,CAN,8,8,8,8,8};
        XYSendBytes(pXY,cancel,sizeof(cancel)/sizeof(cancel[0]));
        return xyFailed;
    }
    if (err == xyOK) XYProgress(pXY,stsFinished);
    else if (pXY-&gt;userAbort) XYProgress(pXY,stsAborted);
    else XYProgress(pXY,stsFailed);
    return xyOK;
}
/* The session layer simply receives successive files until end-of-session */
static int XYReceive(XYMODEM *pXY)   /* ... body deleted ... */

/******************* Public Interface Layer ******************************/
/* Initialize the XY structure from the user preferences. Protocol codes are 
defined in xy.h, timeout is in seconds. */
int XYModemInit( void **ppXY, int protocol, int timeout, PORT_TYPE port)
  /* ... body deleted ... */

/* The public interfaces are simply stubs that call the internal XYSend/
XYReceive functions. We isolate the interface so it can be easily changed. */
int XYModemSend(void *pXY_public, char *filenames[], int count)
int XYModemReceive( void *pXY_public)
</pre><HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
