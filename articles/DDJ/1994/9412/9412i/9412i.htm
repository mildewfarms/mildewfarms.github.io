<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>DEC94: Building an E-mail Manager</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Building an E-mail Manager<a name="0215_00af"></h1><P>
<h2><a name="0215_00ad"><a name="0215_0000">PowerBuilder Desktop meets QmodemPro</h2><P>
<h3>Michael Floyd</h3><P>
<p><i><a name="0215_00ae"><a name="0215_0000">Michael is  DDJ's executive editor. He can be reached at mfloyd@mfi.com, on CompuServe at 76703,3047, or through the DDJ offices.</i></p><hr><P>
Rapid application development (or RAD) tools emphasize drag-and-drop visual programming and client/server development (even though most of the tools I've seen address only the client side). To a large degree, the &quot;rapid&quot; part of the application development stems from a focus on building user interfaces using software &quot;components.&quot; Among the RAD tools are Microsoft's Visual Basic, Powersoft's PowerBuilder (both based on Basic), IBM's Visual Age, Symantec's Enterprise Developer, and Borland's yet-to-come Pascal-based Delphi95. <P>
To explore RAD-based development, I've created a minimal communications engine which allows me to automatically log on and exchange e-mail using a variety of online services such as CompuServe, MCI Mail, Internet, and DDJ Online. In this article, I'll use PowerBuilder Desktop to build the front end. In the future, I'll revisit this project using other RAD front-end tools.<P>
On the communications side, I use QmodemPro for Windows from Mustang Software. While there are a number of asynchronous communications libraries available--CommLib 5.0 from Greenleaf Software or Asynch Professional from Turbo Power Software, among them--I decided to use QmodemPro for Windows because of its built-in scripting language, SLIQ (Script Language Interface for Qmodem). This powerful scripting language does much more than simply automate communications tasks. SLIQ scripts, which are compiled by Qmodem's built-in script compiler, allow you to create windows and dialog boxes and call Windows DLLs, as well as providing a number of useful functions for handling communications. Also, the script compiler includes a debugger facility that lets you set breakpoints, step through code, and set variable watches. <P>
While the engine handles sending and receiving mail from each of the different services, a front-end Windows application handles the storage and retrieval of messages in the mail database, displaying of messages, and so on. The front-end application simply invokes QmodemPro by calling the appropriate script. <P>
<h3><a name="0215_00b0">The Qmodem Connection<a name="0215_00b0"></h3><P>
The first time I wrote publicly about Qmodem was in a 1984 issue of the <I>CCF Bulletin</I>, a newsletter for users of the Central Computing Facility at NASA/Ames Research Center in Mountain View, CA. Written by John Friel of the Forbin Project, Qmodem was a pioneer in many areas. Qmodem was, at the time, arguably the best PC communications program around, and it was freeware (&quot;shareware&quot; had not yet taken hold). Qmodem was also an early example of what could be done with Turbo Pascal. In fact, Friel wrote freely about his use of the Turbo in the doc files.<P>
Since then, Qmodem has been acquired by Mustang Software, well known for its Mustang BBS, and turned into a commercial toolkit. John Friel continues to work on the DOS version. The Qmodem family now includes a Windows version, although it is under separate development. Because of these separate development paths, there are significant differences between the DOS and Windows versions, and little compatibility between the scripting language, the phone book, and so on. <P>
QmodemPro for Windows provides full support for asynchronous connection, a long list of terminal-emulation options, file-transfer protocols (including several variations of XModem and YModem, Kermit, CIS B+, and ASCII), fax and host-mode capabilities, and SLIQ. SLIQ is a Basic-like scripting language which includes some rather powerful features for Windows developers. For starters, the scripting language provides the ability to create Windows dialog boxes. To do so, you create a dialog-box template like that shown in <a href="#0215_00b4">Figure 1</A>. The dialog-box definition includes definitions for controls such as check boxes, radio buttons, combo boxes, group boxes, list boxes, justified text, edit controls, pushbuttons, and so on. Once the dialog is defined, you simply create an instance of the dialog box based on the template. Note in <a href="#0215_00b4">Figure 1</A> that the width and height of the dialog are specified in &quot;dialog units.&quot; Because they are based on the size of the font used in the dialog, dialog units are used to avoid scaling problems when changing fonts.<P>
<a href="#0215_00b5">Listing One</A> presents a script to parse mail headers in CompuServe Mail and determine whether a message is new. If the message is new, the script downloads the message to a file. A feature I don't like in mail-reader programs such as ConnectSoft's E-Mail Connection is that they automatically delete online mail after it has been downloaded. Although you have the option of doing so, the scripts I present here do not automatically delete mail. Instead, a mail header file (MAIL.HDR) is opened in capture mode and the CompuServe SCAN command is issued. SCAN displays all mailbox information without disturbing a message's &quot;read&quot; status. The presence of the string &quot;Expire:&quot; within the header indicates that the message has already been read; headers not containing the string are new. So, the mail script parses this file to determine which messages are new and downloads them using the <I>Download</I> function. The filename is constructed based on the service from which it was downloaded and the message number assigned to it by the service. For example, Message number 23 on CompuServe is given the filename CIS.23. This is a temporary file which will be deleted when the message is stored in the database by the front-end application.<P>
As you can see in <a href="#0215_00b5">Listing One</A>, SLIQ provides a number of built-in functions like <I>Dial</I>, <I>Send,</I> <I>Waitfor, Delay, </I>and <I>HangUp</I> that make communication with the online service painless. SLIQ also includes a <I>LogFile</I> function used to create a record of the session. Although I haven't used the log file on the PowerBuilder side, it's useful in determining the success or failure of a message transfer.<P>
Because the transfer uses CompuServe's B+ file-transfer protocol, it doesn't matter to the script whether the file is a text message or a binary file such as a .ZIP file. If the file transfer is successful, an appropriate message is displayed and the script logs off the system. For the sake of simplicity, however, I didn't implement error handling with this version. If you plan to use these scripts, error handling will be the first enhancement you'll want to make. Complete scripts for sending and receiving e-mail via DDJ Online, MCI Mail, and CompuServe are provided electronically; see &quot;Availability,&quot; page 3.<P>
<h3><a name="0215_00b1">Database and Interface<a name="0215_00b1"></h3><P>
PowerBuilder is an object-oriented development environment that supports features such as inheritance, encapsulation, and user-defined objects. It includes an enriched set of database portability and management functions; the ability to support large-scale projects, including report generation and object libraries with check-in/check-out procedures; and a complete implementation of Windows objects, events, functions, and communications--including OLE, MDI, DDE, and DLL calls. PowerBuilder also comes with the Watcom SQL database and a complete set of ODBC drivers covering virtually all PC databases.<P>
When developing an application, you work with various painters, much like you work with wizards in Visual C++. You start by creating an application object using the application painter. Database tables and connections are painted using the database painter, and views into the database are created using a data window painter. The Window painter, not to be confused with the data window painter, is the portion of PowerBuilder that is most like Visual Basic. There, you create windows and controls, set their properties, and create handlers for events. PowerBuilder includes a scripting language called &quot;PowerScript&quot; for this purpose. Scripts are primarily used to handle events associated with an object or control (such as a click event for a button). PowerScript is Basic-like in syntax and includes a sizable function library. Additionally, PowerScript allows you to embed SQL statements within a script, as well as create user-defined functions. Scripts are written using the script painter, which includes a debug facility that lets you set breakpoints; set watches for local, global, and shared variables; and step through code. When you finish building the script, it is compiled and placed in temporary storage. When you save the object, the script is saved in an application library (.PBL file) with the object.<P>
The e-mail app consists of a main window with two data windows and several control buttons; see <a href="19940217.htm">Figure 2</A>. Buttons are used to initiate communications and manage the mail database. The two data windows are different views into the same table. The top window provides a summary of messages in the database, including message status and header information. The user can scroll through the database and click on any row in the table. When clicked, the lower data window receives an update message and displays the mail for that row. If the mail is plain ASCII, the message itself is displayed. If, however, the mail is binary in nature (such as a .ZIP file), then a message (containing the fully qualified path and filename) is displayed.<P>
The bulk of the work takes place in the script for the click event of the Send/Receive button; see <a href="#0215_00b6">Listing Two</A>. The first task is to invoke QmodemPro, passing the name of the script in <a href="#0215_00b5">Listing One</A> as a parameter. The Qmodem script downloads the mail to temporary files and creates a temporary mail-header file. <a href="#0215_00b6">Listing Two</A> reads the mail-header file, parses the mail messages, and stores them in the database. At the same time, the two data windows are updated with the new mail messages.<P>
One minor problem I encountered involves the formatting of date and time strings. Date strings in particular are presented in different formats depending on the service from which the message was received. And even though PowerBuilder can display date strings in any format, it expects to receive them in the form YYYY-MM-DD. <a href="#0215_00b6">Listing Two</A> determines from which system the message originated and formats the date string accordingly. Once the string is parsed, the new date string is constructed using PowerBuilder's <I>replace()</I> function and then stored in the <I>DateStr</I> variable. Later, <I>DateStr</I> will be concatenated to a larger string containing the complete formatted record for the mail message.<P>
A simple method to import records into the database is to create a delimited string and call PowerBuilder's <I>ImportString()</I> function. However, I found a few quirks using this function, particularly with large bodies of text such as those associated with e-mail. The problem arises from the fact that <I>ImportString()</I> uses carriage returns, line feeds, and EOF markers to separate fields upon importing. However, you cannot specify which of these are used. To get around this, <a href="#0215_00b6">Listing Two</A> Opens the same file twice; once in line mode and again in stream mode. In line mode, <I>FileRead()</I> reads until either a carriage return, line feed, or EOF is encountered. In stream mode, <I>FileRead()</I> will read the entire file until an EOF is encountered or the maximum 32,765 bytes are read.<P>
Once the import string is formatted, <I>InsertRow()</I> is called to create a new row in the table. Next, <I>dw_2.ImportString(ImportStr)</I> imports the string stored in <I>ImportStr</I> to the database. The <I>dw_2</I> object qualifier references data window 2. Finally, <I>dw_2.update()</I> adds the new record to the table and <I>dw_1.retrieve()</I> makes the change visible in the top data window.<P>
<h3><a name="0215_00b2">Wrapping It Up<a name="0215_00b2"></h3><P>
PowerBuilder includes many other features which I have not explored, including the ability to communicate via DDE and OLE. And because PowerScript supports calls to DLLs, you can extend the environment. In fact, the communications engine could be rewritten in, say C, and called directly from PowerScript. That way, you could add support for network mail systems such as cc:Mail.<P>
Coincidentally, PowerBuilder supports MAPI. PowerBuilder supplies a system object called MailSession, and some mail-related structures, enumerated data types, and object-level functions including <I>MailLogon, MailGetMessages</I>,<I> MailAddress</I>,<I> </I>and<I> MailSend</I>. One enhancement you might consider is creating a mail server for the e-mail application. The server could be used to handle requests from other applications for e-mail services.<P>
PowerBuilder 4.0 is due out by the end of this year, according to Powersoft. While company officials are reluctant to give out details of this new release, they have indicated the new version will support both Windows and Windows NT, and that Macintosh support will be available in early 1995. A Powersoft spokesperson also indicated plans for several UNIX implementations with Sun Solaris at the top of the list.<P>
Finally, using Qmodem over a roll-your-own approach saves the headaches of implementing terminal emulations and the sometimes-obscure file-transfer protocols. And on the PowerBuilder side, you no longer have to agonize over user-interface and database-connectivity issues. You may not have thought of putting these two tools together in a programming project; nevertheless, it is surprising what you can accomplish in a short time when you use RADical tools.<P>
<h3><a name="0215_00b3">For More Information<a name="0215_00b3"></h3><P>
QmodemPro For Windows 1.1<P>
Mustang Software<P>
6200 Lake Ming Road<P>
Bakersfield, CA 93306<P>
805-395-2500<P>
Price: $99.00<P>
Requirements: Windows 3.1<P>
PowerBuilder Desktop 3.0<P>
Powersoft Corp.<P>
561 Virginia Rd.<P>
Concord, MA 01742-2732<P>
508-287-1500<P>
Price: $695.00<P>
<h4><a name="0215_00b4"><B>Figure 1:</B> Creating a dialog-box template using SLIQ.<a name="0215_00b4"></h4><P>
<pre>DIALOG dialogtype x, y, w, h
  [CAPTION caption]
  [FONT size, fontname]
  [integer-field AS CHECKBOX title, id, x, y, w, h]
  [integer-field AS COMBOBOX id, x, y, w, h]
  [CTEXT title, id, x, y, w, h]
  [DEFPUSHBUTTON title, id, x, y, w, h]
  [string-field as EDITTEXT id, x, y, w, h]
  [GROUPBOX title, id, x, y, w, h]
  [integer-field AS LISTBOX id, x, y, w, h]
  [LTEXT title, id, x, y, w, h]
  [PUSHBUTTON title, id, x, y, w, h]
  [integer-field AS RADIOBUTTON title, id, x, y, w, h]
  [RTEXT title, id, x, y, w, h]
  ...
END DIALOG</pre><P>
<a href="19940218.htm">Figure 2</A>  Main window of the e-mail application.
<P>
<h4><a name="0215_00b5">Listing One <a name="0215_00b5"></h4><pre>

'
' Script to parse mail headers in CIS Mail and determine whether a message
' is new. If new, then download
'

DIM Str1 as string
DIM Str2 as string
DIM Str3 as string
DIM FileName as string
DIM I, N, J as Integer
DIM MsgNum as string
DIM DownLoadStr as string

LogFile ON

If Exists(&quot;cis.hdr&quot;) then
   del &quot;cis.hdr&quot;
End If

dial manual &quot;9,434-1580&quot;

striphibit on
DELAY 1
SEND &quot;^C&quot;;
WAITFOR &quot;User ID: &quot;
SEND &quot;76703,4057&quot;
WAITFOR &quot;Password: &quot;
SEND &quot;elder*wholly&quot;

WAITFOR &quot;!&quot;
SEND &quot;go mail&quot;

WAITFOR &quot;!&quot;
CAPTURE &quot;cis.hdr&quot;
SEND &quot;scan&quot;
WAITFOR &quot;!&quot;
CAPTURE OFF
SEND
WAITFOR &quot;!&quot;

OPEN &quot;cis.hdr&quot; for input as #1

For I = 1 to 4
   INPUT #1, Str1
Next I

Do While not eof(1)
   INPUT #1, Str1
   INPUT #1, Str2
   If Str2 = &quot;&quot; then
      Exit Do
   End If
   INPUT #1, Str3

   MsgNum = &quot; &quot;
   I = InStr(Str3, &quot;Expire:&quot;)
   If I = 0 then
      While MsgNum = &quot; &quot;
        MsgNum = LEFT(Str1, 1)
        N = Len(Str1) - 1
        Str1 = RIGHT(Str1, N)
      WEnd

      FileName = &quot;cis.&quot; + MsgNum
      DownLoadStr =  &quot;download/pro:b &quot; + MsgNum

      Send DownLoadStr
      Waitfor &quot;:&quot;
      Send FileName
      If download(&quot;c:\apps\qmwin\download&quot;, bplus) = 0 Then
         'PRINT &quot;file transfer OK&quot;
      End If
      Waitfor &quot;!&quot;
      SEND
   End If
   IF Str3 &lt;&gt; &quot;&quot; then
      INPUT #1, Str1
   End If
Loop
   CLOSE #1

SEND &quot;BYE&quot;
Waitfor &quot;!&quot;
Send &quot;N&quot;
DELAY 5
HANGUP
LogFile OFF


</pre>
<h4><a name="0215_00b6">Listing Two<a name="0215_00b6"></h4><pre>

string Fname, TmpStr, DateStr, FromStr, SubjectStr, ImportStr
string StatusStr, SystemStr, MsgStr, FExtension
int Fnum, HdrNum, retrn, HdrFileRet, I
long StrPos, RowNum
Boolean OK

run(&quot;c:\apps\qmwin\qmwin c:\apps\qmwin\scripts\email.scr&quot;)

// Construct filename from mail.hdr
Fname = &quot;c:\apps\qmwin\cis.hdr&quot;
OK = FileExists(Fname)
If OK then 
   HdrNum = FileOpen(Fname)
   For I = 1 to 5
      HdrFileRet = FileRead(HdrNum, TmpStr)
   Next
  Do While HdrFileRet &gt; 0
   FExtension = mid(TmpStr, 3, 1)
   FName = &quot;c:\apps\qmwin\download\cis.&quot;
   FName = replace(FName,Len(FName)+1,Len(FExtension), FExtension)

   // Determine if file is binary
   For I = 1 to 3
      HdrFileRet = FileRead(HdrNum, TmpStr)
   Next
   StrPos = pos(&quot;* Binary *&quot;, TmpStr)

   // If file is text then open mail and process
   If StrPos = 0 Then
      OK = FileExists(Fname)
      If OK then 
         Fnum = FileOpen(Fname)

         //   Get and format the date time string
         retrn = FileRead(Fnum, TmpStr)
         If retrn &gt; 0 then 
            StrPos = pos(TmpStr, &quot;:  &quot;)
            StrPos = StrPos + 2
            DateStr = mid(TmpStr, StrPos)
            DateStr = replace(DateStr,Len(DateStr)+1,Len(&quot;~t&quot;), &quot;~t&quot;)
         End If
   
        //   Get and format the &quot;From&quot; string
         retrn = FileRead(Fnum, TmpStr)
         If retrn &gt; 0 then 
            StrPos = pos(TmpStr, &quot;:  &quot;)
            StrPos = StrPos + 2
            FromStr = mid(TmpStr, StrPos)
            FromStr = replace(FromStr,Len(FromStr)+1,Len(&quot;~t&quot;), &quot;~t&quot;)
         End If

         //   Get and format the Subject string
         retrn = FileRead(Fnum, TmpStr)
         If retrn &gt; 0 then 
            StrPos = pos(TmpStr, &quot;:&quot;)
            StrPos = StrPos + 2
            SubjectStr = mid(TmpStr, StrPos)
            SubjectStr = replace(SubjectStr,Len(SubjectStr)+1,Len(&quot;~t&quot;), &quot;~t&quot;)
         End If

         // Get the mail message
         Do While retrn &gt;= 0
            retrn = FileRead(Fnum, TmpStr)
            MsgStr = replace(MsgStr,Len(MsgStr)+1,Len(TmpStr), TmpStr)
         Loop
         FileClose(Fnum)
      End If

   Else // Process binary file     
      MsgStr = &quot;Binary file copied to download directory~t&quot;
      FromStr = TmpStr
      SubjectStr = TmpStr
      DateStr = &quot;1994-01-01&quot;
      HdrFileRet = FileRead(Fnum, TmpStr)
      HdrFileRet = FileRead(HdrNum, TmpStr)
   End If
   
   StatusStr = &quot;received~t&quot;
   SystemStr = &quot;Compuserve~t&quot;
   RowNum = dw_2.InsertRow(0)
   ImportStr = String(Rownum)
   ImportStr = replace(ImportStr,Len(ImportStr)+1,Len(&quot;~t&quot;), &quot;~t&quot;)
   ImportStr = replace(ImportStr,Len(ImportStr)+1,Len(DateStr), DateStr)
   ImportStr = replace(ImportStr,Len(ImportStr)+1,Len(FromStr), FromStr)
   ImportStr = replace(ImportStr,Len(ImportStr)+1,Len(SubjectStr), SubjectStr)
   ImportStr = replace(ImportStr,Len(ImportStr)+1,Len(StatusStr), StatusStr)
   ImportStr = replace(ImportStr,Len(ImportStr)+1,Len(SystemStr), SystemStr)
   ImportStr = replace(ImportStr,Len(ImportStr)+1,Len(MsgStr), MsgStr)

   dw_2.ImportString(ImportStr)
   dw_2.update()
   dw_1.retrieve()
 Loop
FileClose(HdrNum)
End If
</pre><HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
