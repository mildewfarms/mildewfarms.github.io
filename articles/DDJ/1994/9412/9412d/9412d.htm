<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>DEC94: Error-Recovery Codes</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Error-Recovery Codes<a name="01ee_00a5"></h1><P>

<h2><a name="01ee_00a3"><a name="01ee_0000">Powerful codes for reliable data communications</h2><P>

<h3>Bart De Canne</h3><P>

<P>
<i><a name="01ee_00a4"><a name="01ee_0000">Bart is project manager for digital video communications in the Broadcast &amp; Cable division of Barco nv., Kortrijk, Belgium. He can be reached at bdc@barco.be.</i></p><hr><P>

The need for reliable, high-speed transmission of video, audio, and data applications has never been greater. One of the keys to reliable communications is error recovery--and Bose-Chaudhuri-Hocquenghem (BCH) and Reed-Solomon (RS) codes are two powerful approaches to error-control coding. RS, in fact, is specified in virtually every proposed digital-TV transmission standard that tolerates less than one uncorrected error event per hour. At a multiplexed transmission rate of about 30 Mbits/sec, this corresponds to a bit-error rate (BER) in the order of 10. With transmission channels typically having a BER of 10<I>e</I><sup>-3</sup> to 10<I>e</I><sup>-4</sup>, powerful error-correction techniques are obviously required.<P>

In this article, I'll examine BCH and RS codes, using them to encode data in such a way that data errors can be recovered. In doing so, I'll present GALOIS.EXE, a C program for constructing Galois fields and BCH/RS generators and for encoding/ decoding of arbitrary files. The program also includes a feature to &quot;scramble&quot; an encoded file with a specified number of symbol errors per block to simulate error correctability. The complete package, including programmer notes, is available electronically; see &quot;Availability,&quot; page 3. <P>

<h3><a name="01ee_00a6">Polynomials and Galois Fields<a name="01ee_00a6"></h3><P>

As <a href="199401f0.htm">Figure 1</A> illustrates, cyclic-linear block codes, like those discussed in this article, convert blocks of L symbols at the encoder input into blocks of N symbols (N&gt;L). They're called &quot;cyclic&quot; because each shift of valid N-length code word yields another code word. For these codes, the input/output relation can easily be expressed using polynomials. The &quot;generator polynomial&quot; <I>g</I>(D) completely characterizes a particular code.<P>

Finite fields (or Galois fields)have <I>p</I> elements denoted as GF(<I>p</I>). The field's elements are denoted by 0,1,_,<I>p</I>--1. On each pair of elements, both addition and multiplication operations are defined. If the fields have a prime number of arguments, addition and multiplication operations are performed the normal way, with the result being modulo <I>p</I>. One reason for the presence of the implied modulo operation is to keep the result of adding/multiplying two field elements contained in the same GF.<P>

However, there exist fields with a non-prime number of arguments. In such cases, the number of GF elements is a power of a prime number, so the field can be expressed as GF(<I>p<sup>n</sup></I>) with <I>p</I> prime. Here I'll refer to GF(<I>p</I>) as the &quot;symbol field&quot; and GF(<I>p<sup>n</sup></I>) as the &quot;locator field.&quot; You can express an element of GF(<I>p<sup>n</sup></I>) as a row of <I>n</I> GF(<I>p</I>) elements and hence as a polynomial of a degree no larger than <I>n</I>-1, with each coefficient value belonging to GF(<I>p</I>).<P>

How do you construct GF(<I>p<sup>n</sup></I>)? The addition of two polynomials of degree <I>n</I>--1 yields another polynomial of degree <I>n</I>--1 or less. This is not the case for multiplication. The resulting polynomial may not be a field element. However, if you reduce the polynomial by performing the modulo operation using a degree-<I>n</I> polynomial <I>p</I>(D), the result will be of degree <I>n</I>--1 or less. To construct a valid field, you choose <I>p</I>(D) to be a &quot;primitive&quot; polynomial. For GF(3<sup>2</sup>), such a polynomial is D<sup>2</sup>+D+2. <a href="199401f1.htm">Table 1</A> lists the representation of the elements of this Galois field. Note that you can represent a GF(<I>p<sup>n</sup></I>) element <I><img src="alpha14.gif" alt="[alpha]"><sup>i</sup> (i=0..p<sup>n</sup></I>-2) by the polynomial D<I>i</I> modulo <I>g</I>(D), <I>g</I>(D) being the primitive polynomial for primitive element <img src="alpha14.gif" alt="[alpha]">. Since the primitive polynomial is of degree <I>n</I> and is irreducible, you can find a polynomial for generating GF(<I>p<sup>n</sup></I>) by taking an irreducible polynomial of this degree and calculating <I>D<sup>i</sup> mod g(D) for i=0,_,p<sup>n</sup></I>--2. If this gives you <I>p<sup>n</sup></I>-1 (all elements of GF(<I>p<sup>n</sup></I>) except 0), <I>g</I>(D) is primitive.<P>

All operations are performed on coefficient values belonging to the already-constructed symbol field. <a href="#01ee_00ab">Listing One</A> is the code for searching for such a primitive polynomial (there's always at least one for each GF). Afterwards, addition and multiplication operations on each pair of GF(<I>p<sup>n</sup></I>) elements are defined by means of the polynomial representation of these operands: by adding or multiplying the corresponding polynomials modulo <I>g</I>(D). The result is defined to be the polynomial representation of the GF element corresponding to the sum or product of both operands. GALOIS.EXE stores this value into a table defining the field's operations. <a href="#01ee_00ac">Listing Two</A> provides the syntax used in the Galois program to store these and additional one-dimensional tables for additive and multiplicative inverses. <a href="199401f2.htm">Table 2</A> shows addition and multiplication tables for GF(2<sup>2</sup>), constructed out of GF(2) using D<sup>2</sup>+D+1 as a primitive polynomial over GF(2). Note that operations in GF(4) are not ordinary addition and multiplication modulo 4 (4 is not prime!). You could apply this procedure, for instance, to repeatedly generate GF(4<sup>2</sup>) out of the previously created GF(4) by using D<sup>2</sup>+D+2 over GF(4). <a href="199401f3.htm">Table 3</A> shows the corresponding elements of GF(16).<P>

<h3><a name="01ee_00a7">Generating BCH/RS codes<a name="01ee_00a7"></h3><P>

BCH codes are designed for powerful error recovery--if you need more robustness than Hamming provides, BCH is the way to go. The first step in generating a specific BCH or RS code is the choice and construction of both GF(<I>p</I>) and GF(<I>p<sup>n</sup></I>) fields. GF(<I>p</I>) contains the symbols and defines operations on these symbols. In the case of GF(2), a symbol is just a bit; if <I>p</I> is equal to 16, the code deals with 16-ary symbols, each one represented by four bits. The block length N of the code is dependent on your choice of <I>n</I> in GF(<I>p<sup>n</sup></I>) since N=<I>p<sup>n</sup></I>-1 for BCH and RS codes. So if you choose <I>p</I>=16 and <I>n</I>=2, the coder will generate blocks of 255 symbols, each symbol consisting of four bits. Just one parameter remains to be determined: the number of symbol errors (not bit errors) per block N that can be recovered; this is denoted by <I>t</I>. Up to four bit errors cause only one symbol error to occur if these four erroneous bits all occur within the same symbol boundary. <P>

Coding theory proves that RS codes maximize error correctability for a set of possible code words having a specific minimum distance (the minimum Hamming distance between two valid N-length code words). The family of BCH codes approximates this theoretical limit. The generators for BCH and RS codes are given in <a href="199401f4.htm">Figure 2</A>. RS codes actually constitute a subset of BCH codes: If both symbol and locator field are the same (say, GF(<I>p</I>) and GF(<I>p</I><sup>1</sup>), respectively), the code generated is RS. In this case, all locator-field elements also belong to the symbol field. The minimal polynomial of a locator-field element ai then simply reduces to (D-<img src="alpha14.gif" alt="[alpha]"><sup>i</sup>), yielding the RS canonical form. Note also that the number of recoverable symbol errors per block <I>t</I> always equals one-half the number of parity symbols (N-L) added to the data block, the latter indicated by the generator's degree. <a href="#01ee_00ad">Listing Three</A> shows how GALOIS.EXE constructs the minimal polynomial for GF element <img src="alpha14.gif" alt="[alpha]"><sup>i</sup> and how to get to the generator polynomial for a specific BCH or RS code.<P>

<h3><a name="01ee_00a8">Decoding BCH/RS Codes<a name="01ee_00a8"></h3><P>

How can a receiver know about the occurrence of one or more errors during transmission or storage of the encoded block, given only the generator polynomial <I>g</I>(D) and the received code word <I>y</I>, represented by its polynomial <I>y</I>(D)? Assuming that code word <I>x</I>(D) is transmitted, you can write <I>y</I>(D)=<I>x</I>(D)+<I>e</I>(D), introducing the error polynomial <I>e</I>(D). Remember, <I>x</I>(D) equals <I>u</I>(D).<I>g</I>(D) and <I>g</I>(<img src="alpha14.gif" alt="[alpha]"><sup>i</sup><I>)=0 (i=1..</I>2<I>t</I>) for BCH/RS codes by construction of the generator. Hence, calculating <I>y(<img src="alpha14.gif" alt="[alpha]"><sup>i</sup></I>) when receiving the block yields a nonzero result only when errors have occurred. When their nonzero status points to an erroneous condition, these 2<I>t</I> values <I>y(<img src="alpha14.gif" alt="[alpha]"><sup>i</sup></I>) are called &quot;syndromes&quot; and are denoted S(i).<P>

Now you know, on a per block basis, whether or not errors have occurred, but you don't know how many symbols are affected, nor the error positions. You can find these positions by constructing yet another polynomial: the &quot;error locator&quot; <img src="sigma12.gif" alt="[sigma]">(D). The inverses of its roots will indicate the positions in error. <a href="199401f5.htm">Figure 3</A> defines <img src="sigma12.gif" alt="[sigma]">(D). <P>

     The key to decoding BCH/RS codes is the construction of this polynomial using the Massey-Berlekamp algorithm, which is generally more applicable for synthesizing a linear-shift feedback register (LSFR) of minimum length and generating a predefined output sequence. <a href="199401f6.htm">Figure 4</A> shows the algorithm. <a href="199401f7.htm">Table 4</A> illustrates the procedure in terms of LSFR generation for decoding a triple-error-correcting binary (15,5) BCH-encoded block with three positions in error. Note that a LSFR generating the 2<I>t</I> syndromes is constructed in this way. Each time the register fails to generate a syndrome, its length is incremented. When the algorithm ends, the LSFR will generate the 2<I>t</I> syndromes correctly if the number of errors in the block is less than or equal to t. As you see from the example, the LSFR is readily described by the polynomial <img src="sigma12.gif" alt="[sigma]">(D). Solve <img src="sigma12.gif" alt="[sigma]">(D) for its roots, and invert these to obtain the error locators. <P>

To decode binary BCH codes where the symbol field is GF(2), you only have to know the position of symbol errors. In nonbinary codes, however, you also need to know the error magnitudes. You can get around by modifying the error locator (to incorporate error values, not only error positions) and by defining an extra error evaluator polynomial. GALOIS.EXE incorporates the code for doing this. <P>

<h3><a name="01ee_00a9">Conclusion<a name="01ee_00a9"></h3><P>

While these error-correcting codes have been known for some time, their application in high-speed digital transmission has only recently come into vogue because of the complex decoding involved. Chips performing RS encoding/decoding using 256-ary symbols are now commercially available at bit rates of up to 40 Mbits/sec and higher. There's little doubt that they would be a useful building block for the construction of error-resilient, safe file systems.<P>

<h3><a name="01ee_00aa">References<a name="01ee_00aa"></h3><P>

Anderson, J.B. and S. Mohan. <I>Source and Channel Coding: An Algorithmic Approach</I>. Boston, MA: Kluwer Academic Publishers, 1991.<P>

J.L. Massey. &quot;Shift Register Synthesis and BCH Decoding.&quot; <I>IEEE Transactions on Information Theory</I> (January 1969).<P>

<a href="199401f8.htm"><b>Figure 1</b></A>  Input/output relation for cyclic-linear block codes.<P>
<a href="199401f9.htm"><b>Figure 2</b></A>  Generator polynomials for BCH and RS codes.<P>
<a href="199401fa.htm"><b>Figure 3</b></A>  The error-locator polynomial <img src="sigma12.gif" alt="[sigma]">(D).<P>
<a href="199401fb.htm"><b>Figure 4</b></A>  The Massey-Berlekamp algorithm for BCH decoding: synthesizing <img src="sigma12.gif" alt="[sigma]">(D) as linear-shift feedback register of minimum length.<P>
<a href="199401fc.htm"><b>Table 1</b></A>  Representation of GF(3<sup>2</sup>) elements.<P>
<a href="199401fd.htm"><b>Table 2</b></A>  Operations in GF(4).<P>
<a href="199401fe.htm"><b>Table 3</b></A>  Representation of GF(4<sup>2</sup>) elements.<P>
<a href="199401ff.htm"><b>Table 4</b></A>  Massey-Berlekamp algorithm in progress.<P>
<P>

<h4><a name="01ee_00ab">Listing One <a name="01ee_00ab"></h4><pre>

/* Finds a primitive polynomial of GF(p^n) */
void FindPrimitivePolynomial(void) {
   int k,d;
   int *pi1;                  /* array of (n+1) integers, each indicating  */
                              /* a number between 0 and p-1 -&gt; generation  */
                              /* of all polynomials of degree n with       */
                              /* coeff. in GF(p)                           */
   int *pi2;                  /* idem for polynomials of degree &lt;=n-1      */
   bool rem0;
   d=pg_l-&gt;Exp;                 /* degree of primitive polynomial          */
   ... (allocate and init to zero pp_prim, pp_aux, pi1 &amp; pi2) ...
   pi1[d]=1;                  /* force it to be a degree-q polynomial      */
   pp_prim-&gt;Deg=d;            
   do{                  /* loop for generation of all degree-d polynomials */
      for(k=d;k&gt;=0;k--)
         pp_prim-&gt;c[k]=pi1[k];
      if(d!=1){         /* all degree 1 polynomials are irreducible        */
         memset((void*)pi2,0,sizeof(int)*d);
         pi2[1]=1;                        /* degree 1 polynomial           */
         do{            /* loop for generation of all degree 0..q-1 pol.   */
            for(k=d-1;k&gt;=0;k--) 
               pp_aux-&gt;c[k]=pi2[k];
            DEGREE(pp_aux);
            rem0=DivPoly(pp_prim,pp_aux,NULL,NULL,po_s);
            if(rem0) break;     /* not irreducible                         */
            }
         while(update(pi2,po_s-&gt;MaxNo,d-1));
         }
      else 
         rem0=0;
      if(!rem0)         /* found an irreducible polynomial                 */ 
         if(is_primitive())
            break;
      }
   while(update(pi1,po_s-&gt;MaxNo,d));
   ... (free pp_aux, pi1, pi2) ...
   }
/* Gets increment for (d+1) integers, each having maximum value p-1 */
static bool update(int *pi,int p,int q) {
   int i,j,max;
   max=p-1;
   j=0;
   while(pi[j]!=max &amp;&amp; j&lt;q) j++;
   i=j;
   while(pi[i]==max &amp;&amp; pi[i+1]==max &amp;&amp; i&lt;q) i++;
   if(i==q &amp;&amp; j==0)
      return FALSE;
   if(j)
      pi[0]++;
   else {
      pi[i+1]++;
      for(j=0;j&lt;=i;j++)
         pi[j]=0;
      }
   return TRUE;
   }
/* Checks for an irreducible polynomial to be primitive. If it is found to be 
primitive, the function returns TRUE and &lt;pg&gt; contains all GF-elements. */
static bool is_primitive(void) {
   int p,i,k,l;
   pPOLYNOM pp_rem=NULL;
   bool is_prim=TRUE;
   p=pp_prim-&gt;Deg;
   ...(allocate pp_aux, pp_rem) ...
   ...(init pg_l-&gt;pe[0] to 0
            pg_l-&gt;pe[1] to 1
            remaining entries to 0) ...
   for(i=2;i&lt;pg_l-&gt;MaxNo &amp;&amp; is_prim;i++) {            /* `^1,..,`^(p^q-2)  */
      SET_POLY(pp_aux,i-1,1);                         /* D^i &lt;-&gt; `^i       */
      DivPoly(pp_aux,pp_prim,NULL,pp_rem,po_s);
      for(k=p-1;k&gt;=0;k--)
         pg_l-&gt;pe[i].Alpha[k] = (byte)pp_rem-&gt;c[k];
      for(l=0;l&lt;i;l++) {
         for(k=0;k&lt;p;k++) {
            if(pg_l-&gt;pe[l].Alpha[k] != pg_l-&gt;pe[i].Alpha[k])
               break;
            }
         if(k==p) {               /* then pe[l] == pe[i] -&gt; not primitive  */
            is_prim=FALSE;
            break;
            }
         }
      }
 ...(free pp_aux, pp_rem) ...
   return(is_prim);
   }


</pre>
<h4><a name="01ee_00ac">Listing Two <a name="01ee_00ac"></h4><pre>

/* constructs table of operations &lt;po&gt; of locator field &lt;pg&gt; given symbol field
** operations &lt;op&gt;. Returns &lt;po&gt; Since 2D operations commute, only 1/2 of the 
** NxN tables are necessary. Proper indexing into 2D-arrays is done using 
** ADD/MULT macros. */

#define I(i,j) ((i&gt;j) ? j : i)
#define J(i,j) ((i&gt;j) ? (i-j) : (j-i))
#define MULT(i,j) Mult[I(i,j)][J(i,j)]
#define ADD(i,j) Add[I(i,j)][J(i,j)]

pOPTABLE ConstructOpTable(pOPTABLE po,pGALOIS pg,pOPTABLE op) {
   unsigned i,j;
   for(i=0;i&lt;po-&gt;MaxNo;i++) {
      po-&gt;InvAdd[i]  =  (byte) i_add_inv(i,pg,op);
      po-&gt;InvMult[i] =  (byte) i_mult_inv(i,pg,op);
      for(j=i;j&lt;po-&gt;MaxNo;j++) {
         po-&gt;Add[i][j-i] = (byte) i_add(i,j,pg,op);
         po-&gt;Mult[i][j-i]= (byte) i_mult(i,j,pg,op);
         }
      }
   return po;
   }
/*  Note: All references to GF-elements denote indexes to the &lt;pg&gt;-structure 
**  containing these elements. The convention is:
**           index = 0        -&gt;    GF-element = 0
**                   1        -&gt;                 1
**                   2        -&gt;                 `
**                   3        -&gt;                 `^2
**                   ...
**                   p^q - 1  -&gt;                 `^(p^q-2)
*/ 

/* `^k = `^i * `^j */
int i_mult(int i,int j,pGALOIS pg,pOPTABLE po) {
   int res;
   int mod=pg-&gt;MaxNo;
   if(po==NULL)                  /* symbol field created -&gt; modulo      */
      return( (i*j)%pg-&gt;Base);
   if(i==0 || j==0)              /* 0                                   */
      return 0;
   res=i+j-1;
   while(res&gt;=mod)
      res -= (mod-1);
   return res;
   }
/* `^k = `^i + `^j */
int i_add(int i,int j,pGALOIS pg,pOPTABLE po) {
   byte res[8];
   int k,l;
   if(po==NULL)                  /* symbol field created -&gt; modulo      */
      return( (i+j)%pg-&gt;Base);
   for(k=pg-&gt;Exp - 1;k&gt;=0;k--) 
      res[k]=po-&gt;ADD(pg-&gt;pe[i].Alpha[k],pg-&gt;pe[j].Alpha[k]);
   for(l=0;;l++) {
      for(k=0;k&lt;pg-&gt;Exp;k++) {
         if( res[k] != pg-&gt;pe[l].Alpha[k] )
            break;
         }
      if(k==pg-&gt;Exp)
         break;
      }
   return l;
   }
/* `^k = (`^i)^n */
int i_pow(int i,int n,pGALOIS pg,pOPTABLE po) {
   int res=1;
   while (n--)
      res=i_mult(res,i,pg,po);
   return res;
   }
/*  `^k = - (`^i) */
int i_add_inv(int i,pGALOIS pg,pOPTABLE po) {
   int j=0;
   while( 0 != i_add(i,j,pg,po) ) j++;
   return j;
   }
/*  `^k = (`^i)^(-1) */
int i_mult_inv(int i,pGALOIS pg,pOPTABLE po) {
   int j=0;
   if(!i) return 0;              /* no multiplicative inverse for 0     */
   while( 1 != i_mult(i,j,pg,po) ) j++;
   return j;
   }


</pre>
<h4><a name="01ee_00ad">Listing Three<a name="01ee_00ad"></h4><pre>

/* Gets the minimal polynomial for each field element (except for 0 and 1),
** given locator field's elements and operations. */ 
void FindMinimalPolynomials(void) {
   int i,j,k,order;
   pPOLYNOM pp_min;
   ...(allocate pp_aux and init it to D) ...
   for(i=2;i&lt;pg_l-&gt;MaxNo;i++) {
                      /* We first get the order of the element since this */
                      /* will determine the degree of the minimal polynomial */
      for(order=1;
          i_pow(i,(int)pow((double)pg_l-&gt;Base,(double)order),pg_l,po_l) != i;
          order++) ;
      ...(allocate pp_min to this degree and init to 1)...
                                 /* Now we'll actually start constructing  */
                                 /* it : m`i(D)=(D-`i)(D-`i^2)...(D-`i^q)  */
                                 /* where q equals the order of `i.        */
      for(j=0;j&lt;order;j++) {
         pp_aux-&gt;c[1]=1;
         pp_aux-&gt;c[0]=
            po_l-&gt;InvAdd[
               i_pow(i,(int)pow((double)pg_l-&gt;Base,(double)j),pg_l,po_l)];
         pp_min=MultPoly(pp_min,pp_aux,pp_min,po_l);
         }
                                 /* coeff. of &lt;pp_min&gt; n SYMBOL field, but */
                                 /* operations are done in the locator     */
                                 /* field, so remap these values           */
      for(k=order;k&gt;=0;k--)
         pp_min-&gt;c[k]= (int)pg_l-&gt;pe[ pp_min-&gt;c[k] ].Alpha[0];
      DEGREE(pp_min);
      }
   ...(free pp_aux)...  
   }
/* Generates BCH/RS generator polynomial in symbol and locator field set up
** previously. */ 
extern int t;                             /* error correctability          */
extern pPOLYNOM pp_gen;                   /* generator polynomial          */ 
extern bool ComparePoly(pPOLYNOM p1,pPOLYNOM p2);
                                          /* returns true if p1==p2        */ 
void GenerateBCH(void) {
   bool common_factor;
   int deg,i,j;
   ...(init pp_gen to 1) ...
   deg=1+(t&lt;&lt;1);                                   /* 2t+1                 */
   for(i=2;i&lt;=deg;i++) {
      common_factor=FALSE;
      for(j=2;j&lt;i;j++) {
         if(ComparePoly(pg_l-&gt;pe[j].pp,pg_l-&gt;pe[i].pp)) {
            common_factor=TRUE;
            break;
            }
         }
      if(!common_factor) 
         pp_gen=MultPoly(pp_gen,pg_l-&gt;pe[i].pp,pp_gen,po_s);
      }
   DEGREE(pp_gen);
   }
END.
</pre><HR><P>
Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
