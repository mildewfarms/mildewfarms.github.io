<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>DEC94: Writing Serial Drivers for UNIX</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Writing Serial Drivers for UNIX<a name="0211_00ab"></h1><P>
<h2><a name="0211_00a9"><a name="0211_0000">Dialing in and out on the same serial line</h2><P>
<h3>Bill Wells</h3><P>
<p><i><a name="0211_00aa"><a name="0211_0000">Bill, a longtime UNIX programmer, can be contacted at bill@twwells.com.</i></p><hr><P>
If you've ever butted heads with UNIX serial ports, you've noticed that things often don't work just right. One reason is that most serial drivers are derived from a few ancestral sources, which have been hacked and kludged until they work--more or less. (Indeed, I've read two books on writing device drivers that start out by saying that the only practical way to write a terminal-like driver is by starting from someone else's driver.)<P>
This is certainly the case with the serial driver that is part of FreeBSD, the UNIX-like operating system I run on my machine. That driver started out as the HP dca driver, was modified into the com.c driver, and was finally used to build the sio.c driver. It wouldn't surprise me at all to discover other transformations in there, too. The FreeBSD system is based on the 386BSD UNIX-like operating system developed by William Jolitz and described in a series of <I>DDJ</I> articles entitled &quot;Porting UNIX to the 386&quot; (January 1991--July 1992). FreeBSD is available from a number of sources, including Walnut Creek CD-ROM and the ftpmail server at gatekeeper.dec.com. <P>
While the FreeBSD serial driver has several minor annoyances, its major defect is that your system can't dial in or out on the same serial line without manual intervention. After mulling over the options of further hacking the FreeBSD driver, waiting for developers to fix the problem, or porting an existing driver, I opted to write a new driver altogether. (This driver has since been ported to NetBSD, another 386BSD descendant.)<P>
To successfully write a serial driver, you must have an understanding of concurrency and control flow in the device driver, the kernel interface, and the serial device itself. Good software-engineering practice dictates that the various parts of the driver be distinguished and separate; my driver has five sections: declarations, debugging and statistic facilities, hardware manipulation, state changes, and system-call interface.<P>
<h3><a name="0211_00ac">Coding the Serial Driver<a name="0211_00ac"></h3><P>
In my serial driver, the declarations section contains type and variable declarations specific to the driver itself. In particular, the LINE_STATE enumeration describes the overall state of a line. One essential design decision was to describe the line-state concept using a scalar rather than a host of variables scattered through various data structures. By categorizing and characterizing the four primary states of a line before I began coding, I avoided most of the problems that beset other drivers. I'll discuss this further when I talk about the driver's <I>open</I> routine.<P>
If you've ever written code that involved asynchronous events, you'll know just how difficult it can be to debug--bugs tend to depend on timing, so they are often very difficult to reproduce, much less track down. Ideally, you want a complete trace of the events that occurred just before the bug bit. In reality, such a trace requires that expensive hardware or CPU time be spent executing otherwise useless debugging code. <P>
Each function entry, function exit, and significant driver action gets recorded in a circular buffer. This is moderately expensive in time, but a judicious use of inline assembly and functions in the debugging code keeps cost down. An external program takes a snapshot of the circular buffer, then interrupts and prints it out so that you can make sense of it. If the driver locks up the machine, the debugging code can be configured to record events on the console screen where, by no coincidence, the event codes result in distinguishable, readable characters on the screen.<P>
Another useful item in this section is a &quot;status print&quot; routine. FreeBSD's kernel debugger, ddb, can call an arbitrary kernel function. At any time, you can break into the debugger and call this routine for a dump of most of a line's variables.<P>
The hardware-manipulation section is the only part of the driver that knows the details of the hardware. Separating this part of the code let me implement a &quot;virtual UART,&quot; which separates the bit-twiddling code from the primary driver logic. This also makes it relatively easy to support different sorts of hardware.<P>
One difficulty of writing a serial device driver is that UNIX has a long interrupt latency. Consequently, serial drivers coded the &quot;standard&quot; way lose characters. One solution, &quot;pseudo-dma,&quot; available in FreeBSD and used in my driver, replaces the standard interrupt-handler code with a much simpler one. Instead of establishing a normal UNIX execution thread with all the overhead that entails, the serial device's interrupt goes directly to the interrupt handler. Instead of calling standard UNIX functions to transfer data to and from the device (which is rather slow), data is transferred to and from the driver's control structures. The handler signals the UNIX kernel when it needs data or when it has data available; this functions much like an interrupt except that it is software generated. The &quot;soft-interrupt&quot; handler does the same work as a standard interrupt handler, except that instead of reading and writing to a device, it reads and writes to the driver's control structures.<P>
The state-transition section moves data from here to there and keeps track of the state of the driver. Most of the tricky logic goes here. System calls eventually result in calls into this section, and the soft-interrupt handler is here. This part of the driver knows that it is dealing with a serial device but it relies on the hardware routines to do the actual device manipulation.<P>
In many drivers, an attempt is made to propagate changes to driver variables throughout all the other variables that might be affected, This usually results in extremely complex code, full of incomprehensible conditionals--that never quite work right. In my driver, wherever this might be a problem, I use a different approach. I centralize the computation of the variable in a single routine, and then whenever anything might require a change to the variable, I call that routine. Instead of a computation from cause to effect that (hopefully!) considers exactly the effect that the change causes, I fully recompute the variable. The variable always has the right value, and if this is less efficient than the alternative, it isn't measurably so.<P>
The system-call interface primarily handles system calls from user processes. This is where your <I>open</I>/<I>close</I>/<I>read</I>/<I>write</I> calls end up in the driver. This is fairly straightforward code, except for the <I>open</I> routine in <a href="#0211_00af">Listing Two</A> . <P>
Suppose you want to dial out on a modem. You need to communicate with the modem to get it to dial. When a connection is established, you then need to let the dial-out application gain control of the line. If the carrier goes away, you want the application to receive a hang-up signal.<P>
Dialing in, on the other hand, requires that a front-end program (typically getty) monitor the line for a connection indicated by the presence of a carrier, then execute the application once the connection exists. If you were only dialing in on the line, this would be easy: Just wait for input and proceed. However, if you dial both in and out on the same line, things get trickier. Sure, you could make everything work with the help of application-level interlocking. This involves finicky code that every single application must get right. Rather than do this, it's better to get the driver to help out.<P>
One approach is to prevent an open dial-in device from completing until a carrier is present. Then getty can simply attempt to open the line; once the open is successful, it knows there is a connection on the other side.<P>
While you could have two varieties of <I>open</I>s--blocking for dial-in and nonblocking for dial-out--this isn't enough. What happens to an <I>open</I> that occurs while the line is open? There's a carrier, so both types of <I>open</I> will complete. If that <I>open </I>is a getty while a dialect is in progress, it could be made to work, but this, too, would involve ugly interlocking code in each dial-in and dial-out application.<P>
A better approach is to have the driver distinguish between dial-out and dial-in <I>open</I>s; when either one has completed, the other is prevented from completing. This leaves open how the driver is to distinguish the two sorts of <I>open</I>s. There are a number of ways to do this; the one I chose is to distinguish the type of <I>open</I> by a bit in the minor device number.<P>
Devices in the range 0--127 are dial-in devices; those in the range 128--255 are dial-out. A getty tries to open a dial-in device, but it cannot succeed until there is a carrier and no dial-out device is open. A dial-out program, such as uucico, tries to open a dial-out device. This succeeds unless the corresponding dial-in device is open, in which case the <I>open</I> fails immediately.<P>
It would be nice if the UNIX kernel kept track of who is open and who is waiting to open; unfortunately, it doesn't. First, the kernel has no notion that the dial-in and dial-out devices are related. Second, the kernel does not try to keep track of <I>open</I>s and those waiting for <I>open</I>s; for most other types of drivers, it just isn't needed. Keeping track is thus left to the driver itself.<P>
The primary parameter for line state is whether <I>open</I>s are waiting or active for the line. When there are none, no one is using or trying to use the driver. DTR is not sent by the UART, and the UART is ignored. Once an <I>open</I> is attempted, one of the <I>open</I> <I>wait</I> counts goes nonzero. In that state, DTR is turned on to let a modem know that a process is preparing to use the line. The modem-status lines are monitored for a carrier. When the <I>open</I> completes, the <I>wait</I> count is decremented but the appropriate active flag is set. Modem controls are used to manipulate the modem, modem status is used for flow control and for discovering loss of carrier, and data is transferred to and from the line.<P>
These conditions are summarized in a single LINE_STATE variable. Each time one of the <I>open wait</I> counts or active flags changes, this variable is recomputed; see <a href="#0211_00ae">Listing One</A> . If it changes, various bits in the driver are changed appropriately and the UART is programmed for that state.<P>
(There is one more state: When the last close for a line happens, the driver is placed in a &quot;shutdown state&quot; while it does the things needed to clean up the line. During the shutdown state, no <I>open</I>s are allowed on the line, and, as the last <I>open</I> has been closed, the line is entirely under the control of the driver. That lets it do things such as manipulate the modem-control lines to hang up a modem without interference.)<P>
<h3><a name="0211_00ad">The <I>open</I> Routine<a name="0211_00ad"></h3><P>
Having a state variable makes coding the <I>open</I> a snap. The heart of the <I>open</I> is of a single loop. On entry to the loop, the <I>open wait</I> count is incremented. The loop is only exited when the <I>open</I> is to fail with an error or succeed. In either case, the <I>open wait</I> count is decremented, because the <I>open</I> is not waiting anymore. Then, the <I>open</I> either returns an error or sets the appropriate <I>open active</I> flag and actually opens the line. <P>
The loop is, conceptually, very simple. At the top of the loop, the line status is tested and the driver set to the appropriate state. Then a series of tests are performed. A given test says either that this <I>open</I> may not succeed, in which case the loop is exited with an error, or that this <I>open</I> is to succeed right now, in which case the loop is exited without an error. If all the tests fall through, the <I>open</I> goes to sleep and stays asleep until something relevant changes. When it wakes up, it goes right back up to the top of the loop, where it does all of the tests again.<P>
Coding this loop was, in fact, my main reason for writing a new driver. Most drivers simply get this wrong. Typically, they use two loops, which test for different <I>open</I> conditions, both of which have to be true before the <I>open</I> may succeed. However, if you have two loops, there is either a sequence of events that causes the <I>open</I> to succeed when it shouldn't or a sequence that causes an <I>open</I> to deadlock, thus preventing the <I>open</I> from succeeding when it should. <P>
<h2>About Ring Buffers</h2><P>
One problem facing driver developers is efficiently moving the data between the interrupt handlers and the rest of the driver. For small amounts of data, this isn't difficult; but the characters sent and received are a large amount of data that must be moved quickly. Functionally, you need a queue: characters placed in one end, where they sit until extracted from the other. One of the most time- and space-efficient ways to implement a queue is the &quot;ring buffer,&quot; or circular queue.<P>
A ring buffer is an array of elements with two pointers: &quot;write&quot; and &quot;read.&quot; A character is added to the ring buffer by storing it at the write pointer, then advancing the write pointer. A character is removed from the ring buffer by loading it from the read pointer, then advancing that pointer. When the pointer advances past the end of the ring buffer, it is made to point to the start of the buffer.<P>
There is a &quot;gotcha&quot; when writing ring-buffer code: When the ring buffer is empty, the read and write pointers are equal; the same is true when it is full. A full ring buffer must be distinguished from an empty one, so the ring buffer must not be allowed to become full.The solution I use involves having the read pointer trail one behind the actual read position. Instead of read and advance, I advance and read. As the write pointer is not allowed to advance past the read pointer, it can never actually reach the read position, so the buffer cannot become full.<P>
While writing the ring-buffer code in <a href="#0211_00b0">Listing Three</A> , I discovered that if you are careful, it is not necessary to do any sort of interlocking between buffer readers and writers--you can interleave the execution of a <I>read</I> routine and a <I>write</I> routine, and things will still work. The trick is that at the front of the <I>read</I> routine, the read pointer is accessed once and stored in a temp. This value is then compared with the write pointer to check for an empty buffer. Once data is retrieved, the updated pointer value is stored back in the ring buffer's pointer. A similar procedure is followed in the <I>write</I> routine. To enforce this access/compare sequence, the pointers are declared volatile. This tells the compiler not to do things like optimizing those operations into something unexpected.<P>
The end result is that the top half of the driver can add characters to the write buffer while the interrupt routine reads from it, without any special precautions being taken. Similarly, characters read by the interrupt routine can be placed in the read ring buffer, without worrying if the top half of the driver was reading from it.<P>
The ring-buffer code in the driver is stand-alone, implemented as a C <I>include</I> file, and not restricted to character elements. It is intended to be portable and useful in applications other than the driver.<P>
--B.W.<P>
<P>
<h4><a name="0211_00ae">Listing One <a name="0211_00ae"></h4><pre>

STATIC void
sio_change_line_state(SIO_CTL *ctl)
{
    LINE_STATE new_state;
    LINE_STATE old_state;
    sio_record_call(EV_CHANGE_LINE_STATE, ctl-&gt;sc_unit, 0);
    /* What should the new state be? Return if no change. */
    if (ctl-&gt;sc_shutdown != CL_NONE) {
        new_state = ST_SHUTDOWN;
    } else if (ctl-&gt;sc_actin || ctl-&gt;sc_actout) {
        new_state = ST_ACTIVE;
    } else if (ctl-&gt;sc_winc || ctl-&gt;sc_woutc) {
        new_state = ST_WOPEN;
    } else {
        new_state = ST_INACT;
    }
    old_state = ctl-&gt;sc_lstate;
    if (old_state == new_state) {
        sio_set_modem_control(ctl);
        sio_record_return(EV_CHANGE_LINE_STATE, 0, 0);
        return;
    }
    sio_record_event(EV_LSTATE, new_state, 0);
    ctl-&gt;sc_lstate = new_state;
    if (new_state == ST_ACTIVE) {
        sio_flush_input(ctl);
    }
    if (new_state == ST_INACT) {
        ctl-&gt;sc_rtsline = ctl-&gt;sc_dtrline = 0;
        ctl-&gt;sc_carrier = 0;
    }
    sio_set_interrupt_state(ctl);
    if (old_state == ST_INACT) {
        ctl-&gt;sc_rtsline = ctl-&gt;sc_dtrline = 1;
    }
    sio_set_modem_control(ctl);
    sio_wake_open(ctl);
    sio_record_return(EV_CHANGE_LINE_STATE, 1, 0);
}


</pre>
<h4><a name="0211_00af">Listing Two<a name="0211_00af"></h4><pre>

int
sioopen(dev_t dev, int flag, int mode, PROC *p)
{
    SIO_CTL *ctl;
    bool_t  callout;
    dev_t   unit;
    spl_t   x;
    TTY     *tp;
    const char *reason;
    error_t error;
    SIO_IF_DEBUG(static ucount_t onum;)
    sio_record_call(EV_SIOOPEN, minor(dev), flag);
    /* Extract the unit number and callout flag. */
    SIO_IF_DEBUG(++onum;)
    unit = UNIT(dev);
    if ((u_int)unit &gt;= NSIO || !(ctl = sio_ptrs[unit])) {
        sio_record_return(EV_SIOOPEN, 0, ENXIO);
        return (ENXIO);
    }
    callout = CALLOUT(dev);
    dev = makedev(major(dev), UNIT(dev));
    tp = ctl-&gt;sc_tty;
    /* Record that we're waiting for an open. */
    if (callout) {
        ++ctl-&gt;sc_woutc;
    } else {
        ++ctl-&gt;sc_winc;
    }
    sio_set_wopen(ctl);
    error = 0;
    x = spltty();
    while (1) {
        /* Get the device set up as necessary. */
        sio_change_line_state(ctl);
        /* If the line is set to exclude opens, and if the line is
           actually open, forbid anyone but root from opening it. */
        if ((tp-&gt;t_state &amp; TS_XCLUDE)
            &amp;&amp; (ctl-&gt;sc_actout || ctl-&gt;sc_actin)
            &amp;&amp; p-&gt;p_ucred-&gt;cr_uid != 0) {
            error = EBUSY;
            break;
        /* Shutdown temporarily prevents all opens. */
        } else if (ctl-&gt;sc_lstate==ST_SHUTDOWN) {
            reason = &quot;sioocls&quot;;
        /* A dialout open succeeds unless there is an active
           dialin open, in which case it fails. */
        } else if (callout) {
            if (!ctl-&gt;sc_actin) {
                break;
            }
            if (!(tp-&gt;t_cflag &amp; CLOCAL)) {
                error = EBUSY;
                break;
            }
            reason = &quot;sioinw&quot;;
        /* A dialin open will not succeed while there are active or 
                pending dialout opens. It also requires a carrier or clocal. */
        } else {
            if (ctl-&gt;sc_actout || ctl-&gt;sc_woutc) {
                reason = &quot;sioout&quot;;
            } else if (!(tp-&gt;t_cflag &amp; CLOCAL)
                &amp;&amp; !(tp-&gt;t_state &amp; TS_CARR_ON)) {
                reason = &quot;siocar&quot;;
            } else {
                break;
            }
        }
        /* If we're here, either the line was in shutdown or a dialin
           open is going to wait. If this is a nonblocking open,
           return. Otherwise, sleep. */
        if (flag &amp; O_NONBLOCK) {
            error = EWOULDBLOCK;
            break;
        }
        sio_record_event(EV_SLEEP, onum, 0);
        error = tsleep((caddr_t)ctl, TTIPRI | PCATCH,
            reason, 0);
        sio_record_event(EV_WAKE, onum, error);
        if (error != 0) {
            break;
        }
    }
    /* The open has succeeded. We're no longer waiting for open.*/
    if (callout) {
        --ctl-&gt;sc_woutc;
    } else {
        --ctl-&gt;sc_winc;
    }
    sio_set_wopen(ctl);
    /* If the open errored, reset the device and return the error. */
    if (error != 0) {
        sio_change_line_state(ctl);
        splx(x);
        sio_record_return(EV_SIOOPEN, 1, error);
        return (error);
    }
    /* Next, set up the tty structure. */
    tp-&gt;t_oproc = siostart;
    tp-&gt;t_param = sioparam;
    if (!(tp-&gt;t_state &amp; TS_ISOPEN)) {
        tp-&gt;t_dev = dev;
        ttychars(tp);
        if (!tp-&gt;t_ispeed) {
            tp-&gt;t_iflag = 0;
            tp-&gt;t_oflag = 0;
            tp-&gt;t_cflag = CREAD | CS8 | HUPCL;
            tp-&gt;t_lflag = 0;
            tp-&gt;t_ispeed = tp-&gt;t_ospeed = TTYDEF_SPEED;
        }
        ttsetwater(tp);
        (void)sioparam(tp, &amp;tp-&gt;t_termios);
    }
    /* Do the line discipline open. This marks the line open. */
    error = (*linesw[tp-&gt;t_line].l_open)(dev, tp, 0);
    if (error != 0) {
        sio_change_line_state(ctl);
        splx(x);
        sio_record_return(EV_SIOOPEN, 2, error);
        return (error);
    }
    /* The line is now open. Let it rip. */
    if (callout) {
        ctl-&gt;sc_actout = 1;

        /* Dialout devices start by pretending they have
           carrier. */

        tp-&gt;t_state |= TS_CARR_ON;
    } else {
        ctl-&gt;sc_actin = 1;
    }
    sio_set_wopen(ctl);
    sio_change_line_state(ctl);
    splx(x);
    sio_record_return(EV_SIOOPEN, 3, error);
    return (error);
}


</pre>
<h4><a name="0211_00b0">Listing Three<a name="0211_00b0"></h4><pre>

#include &lt;stdlib.h&gt;

#if !defined(RB_PREFIX)
#define RB_PREFIX rb_
#define RB_TYPE char
#define RB_CONTROL RBUF
#define RB_QUAL static
#endif

#define RB_GLUE1(x,y) x ## y
#define RB_GLUE(x,y) RB_GLUE1(x,y)
#define RB_NAME(x) RB_GLUE(RB_PREFIX, x)

#if !defined(RB_SET)
#define RB_SET(buf,rh,wh) (\
    (buf)-&gt;rb_rhold = (buf)-&gt;rb_start + (rh),\
    (buf)-&gt;rb_whold = (buf)-&gt;rb_start + (wh))
#define RB_GET(buf,rh,wh) (\
    (rh) = (buf)-&gt;rb_rhold - (buf)-&gt;rb_start,\
    (wh) = (buf)-&gt;rb_whold - (buf)-&gt;rb_start)
#endif
#if !defined(RB_OVERHEAD)
#define RB_OVERHEAD (1)
#endif

typedef struct {
    RB_TYPE *volatile rb_rhold;
    RB_TYPE *volatile rb_whold;
    RB_TYPE *rb_start;
    RB_TYPE *rb_end;
    size_t  rb_size;
} RB_CONTROL;
/* This initializes a ring buffer. */
RB_QUAL void
RB_NAME(init)(RB_CONTROL *p, RB_TYPE *d, size_t n)
{
    p-&gt;rb_start = d;
    p-&gt;rb_end = d + n;
    p-&gt;rb_size = n;
    p-&gt;rb_whold = p-&gt;rb_start;
    p-&gt;rb_rhold = p-&gt;rb_end - 1;
}
/* Returns the size of the ring buffer. Note that this is the maximum number
   of elements that may be placed in it, not the size of allocated area. */
RB_QUAL size_t
RB_NAME(size)(const RB_CONTROL *p)
{
    return (p-&gt;rb_size - 1);
}
/* This writes one datum to the ring buffer. The return value is the
   number of items written, 0 or 1. */
RB_QUAL size_t
RB_NAME(putc)(RB_CONTROL *p, const RB_TYPE *d)
{
    RB_TYPE *wp;
    wp = p-&gt;rb_whold;
    if (wp == p-&gt;rb_rhold) {
        return (0);
    }
    *wp++ = *d;
    if (wp == p-&gt;rb_end) {
        wp = p-&gt;rb_start;
    }
    p-&gt;rb_whold = wp;
    return (1);
}
/* This writes an arbitrary number of elements to the ring buffer. The
   return value is the number of items written. */
RB_QUAL size_t
RB_NAME(puts)(RB_CONTROL *p, const RB_TYPE *d, size_t n)
{
    RB_TYPE *rh = p-&gt;rb_rhold;
    RB_TYPE *wp;
    size_t  c;
    size_t  r;
    /* If the data in the buffer is wrapped, the hole into which data may
     be placed is not wrapped. This makes a wrapped buffer be the easy case. */
    wp = p-&gt;rb_whold;
    if (wp &lt; rh) {
        c = rh - wp;
        if (n &lt; c) {
            c = n;
        }
        if (!c) {
            return (0);
        }
        r = c;
        do {
            *wp++ = *d++;
        } while (--c);
        p-&gt;rb_whold = wp;
        return (r);
    }
    /* This next case handles an unwrapped buffer where the data
       fits before the end of the buffer. */
    c = p-&gt;rb_end - wp;
    if (c &gt;= n) {
        c = n;
        if (!c) {
            return (0);
        }
        r = c;
        do {
            *wp++ = *d++;
        } while (--c);
        if (wp == p-&gt;rb_end) {
            wp = p-&gt;rb_start;
        }
        p-&gt;rb_whold = wp;
        return (r);
    }
    /* Finally, deal with the case where data will wrap. Since the write
       pointer is never at the end of the buffer, there is always one 
       element in the buffer. So, this copy doesn't require testing. */
    r = c;
    n -= r;
    do {
        *wp++ = *d++;
    } while (--c);
    /* Next, copy data to the start of the buffer. This might not
       copy any data if rhold is at the start of the buffer. */
    wp = p-&gt;rb_start;
    c = rh - wp;
    if (n &lt; c) {
        c = n;
    }
    if (c) {
        r += c;
        do {
            *wp++ = *d++;
        } while (--c);
    }
    p-&gt;rb_whold = wp;
    return (r);
}
/* Returns the number of elements that may be put into the buffer. It is, in
   effect, a put routine, which means that you can't call it in a context where
   it might overlap with a put of the ring buffer. However, asynchronous gets 
   may occur, which would increase the number of available elements to above 
   what this routine returns. */
RB_QUAL size_t
RB_NAME(pcount)(const RB_CONTROL *p)
{
    RB_TYPE *rp = p-&gt;rb_rhold;
    RB_TYPE *wp = p-&gt;rb_whold;
    return (rp &lt; wp ? p-&gt;rb_size - (wp - rp) : rp - wp);
}
/* This reads one datum from the ring buffer. The return value is the
   number of items returned, 0 or 1. */
RB_QUAL size_t
RB_NAME(getc)(RB_CONTROL *p, RB_TYPE *d)
{
    RB_TYPE *rp;

    rp = p-&gt;rb_rhold + 1;
    if (rp == p-&gt;rb_end) {
        rp = p-&gt;rb_start;
    }
    if (rp == p-&gt;rb_whold) {
        return (0);
    }
    *d = *rp;
    p-&gt;rb_rhold = rp;
    return (1);
}
/* This reads an arbitrary number of items from the ring buffer. The
   return value is the number of items returned. */
RB_QUAL size_t
RB_NAME(gets)(RB_CONTROL *p, RB_TYPE *d, size_t n)
{
    RB_TYPE *wh = p-&gt;rb_whold;
    RB_TYPE *rp;
    size_t  c;
    size_t  r;
    /* Handle the easy case, where the buffer is not wrapped. */
    rp = p-&gt;rb_rhold + 1;
    if (rp == p-&gt;rb_end) {
        rp = p-&gt;rb_start;
    }
    if (rp &lt;= wh) {
        c = wh - rp;
        if (n &lt; c) {
            c = n;
        }
        if (!c) {
            return (0);
        }
        r = c;
        do {
            *d++ = *rp++;
        } while (--c);
        p-&gt;rb_rhold = rp - 1;
        return (r);
    }
    /* The buffer is wrapped, which means that the data to be
       returned might span the end of the buffer. This case
       applies when the data wanted will not span the end of the buffer. */
    c = p-&gt;rb_end - rp;
    if (n &lt;= c) {
        c = n;
        if (!c) {
            return (0);
        }
        r = c;
        do {
            *d++ = *rp++;
        } while (--c);
        p-&gt;rb_rhold = rp - 1;
        return (r);
    }
    /* The buffer is wrapped and so is the data that is to be
       returned. First, copy the data at the end of the buffer. */
    r = c;
    n -= r;
    do {
        *d++ = *rp++;
    } while (--c);
    /* There might be nothing left to copy if whold is at the
       start of the buffer. */
    rp = p-&gt;rb_start;
    c = wh - rp;
    if (n &lt; c) {
        c = n;
    }
    if (c) {
        r += c;
        do {
            *d++ = *rp++;
        } while (--c);
        p-&gt;rb_rhold = rp - 1;
    } else {
        p-&gt;rb_rhold = p-&gt;rb_end - 1;
    }
    return (r);
}
/* This routine returns the number of data elements in the buffer. It
   is, in effect, a get routine, which means that you can't call it in
   a context where it might overlap with a get of the ring buffer.
   However, asynchronous puts may occur, which would increase the
   number of elements to above what this routine returns. */
RB_QUAL size_t
RB_NAME(gcount)(const RB_CONTROL *p)
{
    RB_TYPE *rp = p-&gt;rb_rhold + 1;
    RB_TYPE *wp = p-&gt;rb_whold;

    return (wp &gt;= rp ? (wp - rp)
             : rp == p-&gt;rb_end ? wp - p-&gt;rb_start
                       : p-&gt;rb_size - (rp - wp));
}
/* This clears all data from a ring buffer. */
RB_QUAL void
RB_NAME(gclear)(RB_CONTROL *p)
{
    RB_TYPE *wp = p-&gt;rb_whold;
    p-&gt;rb_rhold = wp == p-&gt;rb_start ? p-&gt;rb_end - 1 : wp - 1;
}
#undef RB_PREFIX
#undef RB_TYPE
#undef RB_CONTROL
#undef RB_QUAL
#undef RB_GLUE1
#undef RB_GLUE
#undef RB_NAME
</pre><HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
