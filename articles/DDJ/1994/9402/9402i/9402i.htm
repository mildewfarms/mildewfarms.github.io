<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>FEB94: NT-Style Threads for MS-DOS</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>NT-Style Threads for MS-DOS<a name="00a5_0003"></h1><P>
<h2><a name="00a5_0001"><a name="00a5_0000">Phar Lap's TNT 386/DOS-Extender makes it possible</h2><P>
<h3>Al Williams</h3><P>
<p><i><a name="00a5_0002"><a name="00a5_0000">Al is the author of DOS and Windows Protected Mode and Commando Windows Programming, both published by Addison-Wesley. Al can be contacted at 310 Ivy Glen Court, League City, TX 77573.</i></p><hr><P>
Mention features such as threads, DLLs, and 32-bit memory allocation, and you'll probably think about operating systems such as Windows NT or OS/2 2.1. By using special tools, however, you can take advantage of features such as these in an MS-DOS program. Better still, your source code can be compatible with Windows NT or Win32s.<P>
In this article, I'll examine Phar Lap's TNT 386|DOS-Extender, which provides a subset of the Win32 programming API. You can use many features from the Win32-base API specification, including multiple threads, DLLs, and 32-bit memory allocation.<P>
TNT also allows you to mix standard DOS and BIOS interrupts (and C library functions that use them) with Win32 functions in your programs. Of course, doing so prevents you from compiling your program for native Windows NT or Win32s. However, a mixed program can still run in a DOS box under Windows or NT.<P>
<h3><a name="00a5_0004">About DOS Extenders<a name="00a5_0004"></h3><P>
DOS extenders let you write programs for MS-DOS that take advantage of protected-mode features; a typical 386 extender supports access to four gigabytes of virtual memory, for example. Most extenders supply functions that stand in for the common DOS and BIOS interrupts. Of course, you can't use an ordinary 16-bit compiler to generate 32-bit programs. Instead, you need a special 32-bit compiler.<P>
Traditionally, programmers have turned to extenders when the need arose for additional memory. However, the new hybrid extenders (like TNT) offer much more than simple extended-memory management. They mimic other operating systems and provide modern operating-system features for MS-DOS programs.<P>
In this article, I'll develop a DOS program that removes a directory tree. Instead of recursing down the tree, I'll use NT-style threads to process the directories in parallel. The resulting program, XPRUNE, will work with TNT or Windows NT.<P>
<h3><a name="00a5_0005">About Multithreading<a name="00a5_0005"></h3><P>
In simple terms, a thread is a piece of code that can execute in parallel with other threads. Threads share global variables, but not local (stack-based) ones. For example, if your program is performing a complex calculation, it might spawn a thread to check for keyboard input. If this thread detects a key press, it aborts the calculation. Ordinarily, you would have to code the calculation to occasionally scan for input. With the thread method, your calculation continues unimpeded until the keyboard-scanning thread aborts it.<P>
Multiple threads can share the same code. That is, a game program might have a function that draws an asteroid on the screen. This function tracks the asteroid's position, color, and spin rate. Although this is one function, it could run in multiple threads to create several asteroids at once.<P>
Windows NT contains a call for creating new threads (<I>CreateThread()</I>), but you won't use it often from inside C/C++ programs. Instead, you should use the C function <I>_beginthread()</I> (declared in PROCESS.H), because only by starting a thread this way can you call C library functions. <a href="#00a5_000c">Figure 1</A> shows the details of the <I>_beginthread()</I> call.<P>
The <I>_beginthread()</I> function returns a thread handle. You can use this handle to query the thread's status or control the thread. For example, you can use <I>WaitForSingleObject()</I> with a thread handle to wait for the thread to terminate. Under NT, you can also use <I>WaitForMultipleObjects()</I> to wait for multiple threads, but TNT doesn't implement this call; see <a href="#00a5_000d">Table 1</A>.<P>
<h3><a name="00a5_0006">Using Threads<a name="00a5_0006"></h3><P>
XPRUNE (see <a href="#00a5_000f">Listing One</A>, page 88) is a TNT program that uses threads. XPRUNE accepts a directory name and removes the directory and all the files and directories under it.<P>
Traditionally, programs like XPRUNE would use simple recursion, deleting each directory tree in sequence. With threads, XPRUNE can delete all the trees in parallel. Of course, you can't remove a directory until all of its contents are gone, so XPRUNE needs some synchronization.<P>
Under DOS, deleting directories in parallel won't help the XPRUNE program go faster--DOS is inherently single-tasking. Still, when the program runs on an NT system (perhaps even a multiprocessor system), things should speed up considerably.<P>
The <I>erase_all()</I> function is the heart of XPRUNE. This function removes a directory and its contents. It sends each file that it finds in the initial directory to <I>del()</I>. When <I>del()</I> detects a subdirectory, it creates a new thread using <I>erase_all()</I>.<P>
Since you can only pass one pointer to a thread function, <I>erase_all()</I> accepts a pointer to structure (<I>struct pkt</I>) as an argument. Callers must allocate this pointer using <I>malloc()</I>. In general, the pointer you pass to the thread should not point to a local or global variable; the local variable may go out of scope, and the global variable's value may get changed unexpectedly.<P>
<h3><a name="00a5_0007">Synchronization<a name="00a5_0007"></h3><P>
XPRUNE can't remove a directory until it deletes all the files in it. Therefore, <I>erase_all()</I> must wait for all the <I>del()</I> calls (and their threads) to complete before removing the directory.<P>
Creating a list of thread handles and using <I>WaitForSingleObject()</I> is one way to wait for the multiple <I>del()</I> threads to complete, but this is awkward. A better method is to use semaphores (see the accompanying text box entitled, &quot;About Semaphores&quot;).<P>
Many multitasking operating systems (including Windows NT) support semaphores. Since TNT does not, I wrote TNTSEM (see <a href="#00a5_0026">Listings Two</A> and <a href="#00a5_0027">Three</A>, page 88). TNTSEM implements semaphores using events--an NT feature that TNT does support. Of course, TNTSEM will work fine under Windows NT, too.<P>
<h3><a name="00a5_0008">Compiling XPRUNE<a name="00a5_0008"></h3><P>
You can compile XPRUNE with any TNT-supported compiler. I used Microsoft Visual C++ 32-bit edition (the version that runs under DOS and generates WIN32s code). From the command line, enter:<P>
<pre>cl /MT /Zi xprune.c tntsem.c.</pre><P>
To make the resulting executable work with TNT, enter:<P>
<pre>rebind xprune.</pre><P>
<h3><a name="00a5_0009">Other TNT Capabilities and Limitations<a name="00a5_0009"></h3><P>
As you can see in <a href="#00a5_000d">Table 1</A>, TNT supports numerous NT features. For example, you can create and use DLLs. You can also call DOS and BIOS functions directly. Of course, doing so prevents your program from running under Windows NT (except as a DOS program in the NT DOS box). If you program in C, you won't use many of these functions anyway--the compiler's run-time library uses them. You continue to use <I>fopen()</I>, <I>malloc()</I>, and other familiar calls.<P>
TNT can still produce files compatible with previous versions of Phar Lap's 386 extenders. However, you can't make NT-style calls from these programs. The NT-style programs allow you to mix old and new API calls along with DOS and BIOS function calls--the best of both worlds.<P>
TNT can help you write DOS-extended programs that may also run under Windows NT. However, if you are an experienced NT programmer, you'll quickly be frustrated with some omissions in the TNT API (semaphores, for example). Phar Lap promises to continue adding API functions in subsequent releases.<P>
Also, TNT does not support Unicode. Only the ANSI character-set functions are available. Still, for most programmers this isn't a problem.<P>
If you are coming from a DOS or Windows environment, you'll find TNT's functions quite rich. You can allocate large amounts of memory and perform high-level file operations by making simple TNT calls.<P>
You may find that using features like threading can slow down a program under DOS (this is a problem with DOS, not TNT). However, the time difference is usually not very large. If you compile XPRUNE with the /DSINGLE option, it will not use threads. Then you can compare the time difference for yourself.<P>
<h3><a name="00a5_000a">Summary<a name="00a5_000a"></h3><P>
TNT is worth looking at if you need to write DOS-extended programs using widely available tools or programs that run under DOS, Windows, and Windows NT.<P>
If you've tried DOS extenders before, you'll find that 32-bit tools are finally in the mainstream. Using NT development tools means not having to compromise--you'll have full-featured debuggers and libraries.<P>
If you need to support code for DOS and Windows NT, TNT can simplify your life considerably. You may have to roll some of your own API functions for now, but that is easier than trying to do it all from scratch.<P>
<h3><a name="00a5_000b">References<a name="00a5_000b"></h3><P>
<I>Win32 Applications Programming Interface</I>. Redmond, WA: Microsoft, 1992.<P>
Williams, Al. <I>DOS and Windows Protected Mode</I>. Reading, MA: Addison-Wesley, 1992.<P>
--. &quot;Your Own Disk Duplication Program.&quot; <I>Dr. Dobb's Journal</I> (January, 1992).<P>
--. &quot;Programming with Phar Lap's 286|DOS-Extender.&quot; <I>Dr. Dobb's Journal</I> (February, 1992).<P>
--. &quot;Roll Your Own DOS Extender.&quot; <I>Dr. Dobb's Journal</I> (October/November, 1990).<P>
<h4><a name="00a5_000c"><B>Figure 1: </B>(a) _beginthread() call; (b) return value; (c) arguments.<a name="00a5_000c"></h4><P>
<pre>
<b>(a)</b>
     <I>unsigned long _beginthread(void (*f)(void *), unsigned stksiz, void * arg);</I>
<b>(b)</b>
     Thread handle (cast to type HANDLE). If an error occurs, the return value is --1.
<b>(c)</b>
     <I>f</I>, pointer to thread function. Function's prototype is <I>void f(void *arg)</I>.
<I>     stksiz</I>, stack size in bytes. If 0, use default size.
<I>     arg</I>, void pointer to pass to thread function.</pre><P>
<h4><a name="00a5_000d"><B>Table 1:</B> NT API functions available for use with TNT.<a name="00a5_000d"></h4><P>
<pre><B>Console I/O</B>
<I>FlushConsoleInputBuffer</I>
<I>GetCommandLine</I>
<I>GetConsoleCP</I>
<I>GetConsoleMode</I>
<I>PeekConsoleInput</I>
<I>ReadConsole</I>
<I>ScrollConsoleScreenBuffer</I>
<I>SetConsoleCtrlHandler</I>
<I>SetConsoleCursorPosition</I>
<I>SetConsoleModeSetConsoleTitle</I>
<I>WriteConsole</I>
<B>Debugging</B>
<I>ContinueDebugEvent</I>
<I>DebugBreak</I>
<I>OutputDebugString</I>
<I>QueryPerformanceCounter</I>
<I>QueryPerformanceFrequency</I>
<I>ReadProcessMemory</I>
<I>UnhandledExceptionFilter</I>
<I>WaitForDebugEvent</I>
<I>WriteProcessMemory</I>
<B>File Manipulation</B>
<I>CopyFile</I>
<I>CreateDirectory</I>
<I>CreateFile</I>
<I>DeleteFile</I>
<I>DosDateTimeToFileTime</I>
<I>FileTimeToDosDateTime</I>
<I>FileTimeToLocalFileTime</I>
<I>FileTimeToSystemTime</I>
<I>FindClose</I>
<I>FindFirstFile</I>
<I>FindNextFile</I>
<I>FlushFileBuffers</I>
<I>GetCurrentDirectory</I>
<I>GetDiskFreeSpace</I>
<I>GetDriveType</I>
<I>GetFileAttributes</I>
<I>GetFileInformationByHandle</I>
<I>GetFileSize</I>
<I>GetFileTime</I>
<I>GetFileType</I>
<I>GetFullPathName</I>
<I>GetLogicalDrives</I>
<I>GetStdHandle</I>
<I>GetSystemDirectory</I>
<I>GetVolumeInformation</I>
<I>_lclose</I>
<I>LockFile</I>
<I>MoveFile</I>
<I>OpenFile</I>
<I>ReadFile</I>
<I>RemoveDirectory</I>
<I>SearchPath</I>
<I>SetCurrentDirectory</I>
<I>SetEndOfFile</I>
<I>SetFileAttributes</I>
<I>SetFilePointer</I>
<I>SetFileTime</I>
<I>SetHandleCount</I>
<I>SetStdHandle</I>
<I>SystemTimeToFileTIme</I>
<I>UnlockFile</I>
<I>WriteFile</I>
<B>Memory Management</B>
<I>CreateFileMapping</I>
<I>GlobalAlloc</I>
<I>FlobalFree</I>
<I>HeapAlloc</I>
<I>HeapFree</I>
<I>HeapReAlloc</I>
<I>HeapSize</I>
<I>LocalAlloc</I>
<I>LocalFree</I>
<I>LocalReAlloc</I>
<I>LocalSize</I>
<I>MapViewOfFile</I>
<I>UnmapViewOfFile</I>
<I>VirtualAlloc</I>
<I>VirtualFree</I>
<I>VirtualQuery</I>
<B>Miscellaneous</B>
<I>Beep</I>
<I>CloseHandle</I>
<I>DuplicateHandle</I>
<I>GetCPInfo</I>
<I>GetEnvironmentStrings</I>
<I>GetEnvrionmentVariable</I>
<I>GetLastError</I>
<I>GetLocalTime</I>
<I>GetSystemTime</I>
<I>GetTimeZoneInformation</I>
<I>GetVersion</I>
<I>IsDBCSLeadByte</I>
<I>RaiseException</I>
<I>SetEnvrionmentVariable</I>
<I>SetErrorMode</I>
<I>SetLocalTime</I>
<I>SetSystemTime</I>
<I>Sleep</I>
<B>Module Management</B>
<I>FreeLibrary</I>
<I>GetModuleFIleName</I>
<I>GetModuleHandle</I>
<I>GetProcAddress</I>
<I>LoadLibrary</I>
<B>Process/Thread Management</B>
<I>CreateEvent</I>
<I>CreateProcess</I>
<I>CreateThread</I>
<I>DeleteCriticalSection</I>
<I>EnterCriticalSection</I>
<I>ExitProcess</I>
<I>ExitThread</I>
<I>GetCurrentProcess</I>
<I>GetCurrentThread</I>
<I>GetCurrentThreadID</I>
<I>GetExitCodeProcess</I>
<I>GetPriorityClass</I>
<I>GetProcessHeap</I>
<I>GetStartupInfo</I>
<I>GetThreadContext</I>
<I>GetThreadPriority</I>
<I>GetThreadSelectorEntry</I>
<I>InitializeCriticalSection</I>
<I>LeaveCriticalSection</I>
<I>OpenEvent</I>
<I>OpenThread</I>
<I>PulseEvent</I>
<I>ResetEvent</I>
<I>ResumeThread</I>
<I>SetEvent</I>
<I>SetPriorityClass</I>
<I>SetThreadContext</I>
<I>SetThreadPriority</I>
<I>TerminateProcess</I>
<I>WaitForSingleObject</I></pre><P>
<a name="00a5_000e"><b>About Semaphores</b><a name="00a5_000e"><P>
Semaphores are a way to allow threads to wait for several events to occur. The TNTSEM implementation differs from true NT semaphores, but the ideas are the same. Each semaphore has an associated count. A thread blocking on the semaphore will not execute until the count is 0.<P>
When you create a semaphore (using <I>sem_create()</I>), you specify its initial count. You can modify the count using <I>sem_signal()</I>. When you want to wait for the semaphore to return to 0, call <I>sem_wait()</I>.<P>
XPRUNE creates a TNTSEM for each directory it wants to delete. Every subdirectory increments its parent's semaphore. When the semaphore returns to 0, XPRUNE can remove the directory. Without the semaphore, XPRUNE could try to remove the directory before its child threads have erased all of the files in it.<P>
--A.W.<P>
Products Mentioned<P>
<pre>
TNT 386|DOS-Extender
Phar Lap Software Inc.
60 Aberdeen Avenue
Cambridge, MA 02138
617-661-1510

</pre>

<h4><a name="00a5_000f"><a name="00a5_0010"><B>[LISTING ONE]</B></H4>

<PRE>

/* XPRUNE.C -- (T)NT directory removal -- Williams */

#include &lt;windows.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;process.h&gt;
#include &lt;string.h&gt;
#include &quot;tntsem.h&quot;

/* Arguments to thread function */
struct pkt
  {
  char *dir;
  TNT_SEM sem;
  };
void erase_all(struct pkt *);
void del(char *,WIN32_FIND_DATA *,TNT_SEM);
/* Delete file of directory */
void del(char *dir,WIN32_FIND_DATA *fd,TNT_SEM wait)
  {
  char path[MAX_PATH];
  strcpy(path,dir);
  strcat(path,fd-&gt;cFileName);
  if (fd-&gt;dwFileAttributes!=FILE_ATTRIBUTE_DIRECTORY)
    {
    if (!DeleteFile(path))
      {
      printf(&quot;Failed to delete file: %s\n&quot;,path);
      }
    }
  else
    {
/* Build arguments to new thread */
    struct pkt *packet=malloc(sizeof(struct pkt));
    if (fd-&gt;cFileName[0]=='.') return; /* skip . and .. */
    strcat(path,&quot;\\&quot;);
    packet-&gt;dir=strdup(path);
    packet-&gt;sem=wait;
/* Bump semaphore count up by 1 */
    sem_signal(wait,1);
/* Launch new thread to delete subdirectory */
#ifndef SINGLE
    _beginthread(erase_all,8192,packet);
#else
    erase_all(packet);
#endif
    }
  }
void erase_all(struct pkt *packet)
  {
  char path[MAX_PATH];
  WIN32_FIND_DATA fd;
  HANDLE findhandle;
  BOOL found=TRUE;
  TNT_SEM wait;
/* Wait on subthreads before deleting directory */
  wait=sem_create(0);
  strcpy(path,packet-&gt;dir);
  strcat(path,&quot;*.*&quot;);
/* Find all files and call del() */
  for (findhandle=FindFirstFile(path,&amp;fd);
       found;
       found=FindNextFile(findhandle,&amp;fd))
    {
    del(packet-&gt;dir,&amp;fd,wait);
    }
/* Wait */
  sem_wait(wait,-1);
  sem_delete(wait);
/* Remove backslash */
  packet-&gt;dir[strlen(packet-&gt;dir)-1]='\0';
  if (!RemoveDirectory(packet-&gt;dir))
    {
    printf(&quot;Failed to remove directory: %s\n&quot;,packet-&gt;dir);
    if (GetLastError()==5)
      printf(&quot;Directory probably contains hidden or read only files.\n&quot;);
    };
/* Clean up malloc'd pointers */
  free(packet-&gt;dir);
  free(packet);
/* Signal parent thread that we are done */
  sem_signal(packet-&gt;sem,-1);
  }
main(int argc,char *argv[])
  {
  int i;
  struct pkt *p;
  TNT_SEM sem;
  char dir[MAX_PATH];
  if (argc&gt;=2)
    {
    strcpy(dir,argv[1]);
    if (dir[strlen(dir)-1]!='\\') strcat(dir,&quot;\\&quot;);
    p=malloc(sizeof(struct pkt));
    p-&gt;dir=strdup(dir);
    p-&gt;sem=sem=sem_create(1);
    erase_all(p);
    sem_wait(sem,-1);
    sem_delete(sem);
    }
  else
    {
    printf(&quot;XPRUNE by Al Williams\nUsage:\n&quot;
           &quot;XPRUNE directory_name\n\nRemoves directory and &quot;
           &quot;all files within it.&quot;);
    }
  }




</PRE>

<h4><a name="00a5_0026"><a name="00a5_0011"><a name="00a5_0012"><B>[LISTING TWO]</B></H4>

<PRE>


/* TNT semaphores -- usable with NT, too.   Al Williams */
#ifndef _TNT_SEM
#define _TNT_SEM

typedef struct _tnt_sem
  {
  int count;             /* count */
  HANDLE event;          /* semaphore wait event */
  CRITICAL_SECTION cs;   /* controls access to count */
  } *TNT_SEM;
TNT_SEM sem_create(int count);
void sem_delete(TNT_SEM p);
int sem_signal(TNT_SEM p,int how);
int sem_wait(TNT_SEM p,int timeout);

#endif


</PRE>

<h4><a name="00a5_0027"><a name="00a5_0013"><a name="00a5_0014"><B>[LISTING THREE]</B></H4>

<PRE>


/* TNT semaphores -- usable with NT, too.   Al Williams */

#include &lt;windows.h&gt;
#include &lt;stdlib.h&gt;
#include &quot;tntsem.h&quot;

/* Create a semaphore */
TNT_SEM sem_create(int count)
  {
  TNT_SEM p=(TNT_SEM)malloc(sizeof(struct _tnt_sem));
  if (p)
    {
    p-&gt;count=count;
    p-&gt;event=CreateEvent(NULL,TRUE,count==0?TRUE:FALSE,NULL);
    if (!p-&gt;event)
      {
      free(p);
      p=NULL;
      }
    }
  InitializeCriticalSection(&amp;p-&gt;cs);
  return p;
  }
/* Destroy semaphore */
void sem_delete(TNT_SEM p)
  {
  if (p&amp;&amp;p-&gt;event) CloseHandle(p-&gt;event);
  if (p) DeleteCriticalSection(&amp;p-&gt;cs);
  free(p);
  }
/* Signal a semaphore
   how == -x ; decrement by x
   how == 0  ; read semaphore count
   how == x  ; increment by x
*/
int sem_signal(TNT_SEM p,int how)
  {
  if (!p) return 0;
  EnterCriticalSection(&amp;p-&gt;cs);
  p-&gt;count+=how;
  if (p-&gt;count)
    ResetEvent(p-&gt;event);
  else
    SetEvent(p-&gt;event);
  LeaveCriticalSection(&amp;p-&gt;cs);
  return p-&gt;count;
  }
/* Wait for semaphore to reach zero count */
int sem_wait(TNT_SEM p,int timeout)
  {
  return WaitForSingleObject(p-&gt;event,timeout);
  }
</pre>

<HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
