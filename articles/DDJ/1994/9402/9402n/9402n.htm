<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>FEB94: PROGRAMMER'S BOOKSHELF</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>PROGRAMMER'S BOOKSHELF<a name="00b2_0003"></h1><P>
<h2><a name="00b2_0001"><a name="00b2_0000">Teachers, Schools,  and Computers</h2><P>
<h3>Peter D. Varhol</h3><P>
<p><i><a name="00b2_0002"><a name="00b2_0000">Peter is an assistant professor of computer science and mathematics at Rivier College in Nashua, New Hampshire.</i></p><hr><P>
The day I finished Seymour Papert's <I>The Children's Machine</I>, I received the property-tax bill for my house in New Hampshire. A quick calculation of the rates revealed that over $1700 was allocated for the local school district. Certainly, I would gladly pay this if I thought that it was going to improve the ability of our children to comprehend and improve our society. But, given current reports of our system of public education, there seems to be little chance of that.<P>
There's no question that public education as an institution in America is broken. Nationwide, the dropout rate is 30 percent, although it's as high as 50 percent in some cities. Often, those who complete school are ill-prepared to participate in society, as evidenced by a recent Department of Education study which suggests that almost 50 percent of the adult population are not literate enough to fully function in the modern world. In a world where information is the new universal currency and knowledge is a prerequisite for achievement and success, public education has become little more than a large and inefficient day-care center. Seymour Papert proposes the computer as the logical solution to these educational problems.<P>
Papert, developer of the Logo programming language, former codirector of the MIT AI Lab, and founder of the MIT Media Lab, is well known enough to command attention for his ideas. Still, he goes one step further, invoking the thoughts of such diverse thinkers as Marvin Minsky, John Kemeny, Noam Chomsky, and Jean Piaget to describe how children learn by discovery, and how the computer is the ultimate discovery tool.<P>
Papert begins with a compelling thought: Take a surgeon and a teacher from a hundred years in the past and place them in their respective workplaces of the present. The surgeon is unlikely to even begin to appreciate the concepts and complexities of modern surgery. The teacher, on the other hand, would feel right at home in today's classroom, if not necessarily with the specific subject matter. The point is that teaching as a method has barely changed in a long time. Some may argue that education is a basic process that does not change. However, while learning may not change, the way we present education (as distinct from learning) is certainly ripe for some drastic changes.<P>
Computers are already in most mainstream schools. According to Papert, however, the educational establishment has embraced computers not as a method of change, but as a subject of study in its own right. The curriculum includes the math lesson, the English lesson, and the computer-literacy lesson. As such, the establishment can claim, with some justification, that it has integrated advanced technology into education. Computers are not an academic subject, Papert contends, but rather a mechanism for exploring and integrating all of the traditional subjects.<P>
This is precisely what is wrong with computer-aided instruction (CAI), which presents lessons to students, who are then able to learn at their own pace, go back and review old concepts, and choose the subject of study. Researchers have found that these techniques are able to improve students' standardized test scores and are considered to be innovative and worthwhile under many circumstances. Papert argues, with some force, that CAI is simply using computers to reinforce old and obsolete teaching paradigms. The student is still the recipient of fixed information, rather than the discoverer of new concepts.<P>
Papert makes a distinction between teachers (who, as individuals, run the spectrum from unable to innovate to demanding continual innovation) and school (the primary purpose of which is to perpetuate its own existence and methodologies). Teachers aren't the problem, he argues, school is. The bureaucracy is more interested in ensuring compliance with teaching methodologies.<P>
I thought this distinction to be specious. You have to have something concrete to battle against, and pointing the finger at the institution means that no individuals need take any responsibility for change. Then I raised Papert's arguments to one of my graduate classes. One student, a high-school math teacher, immediately became defensive at the prospect that there was something wrong with the way she taught, especially using computers. As I watched the interaction, it occurred to me that Papert was right. No matter how sincere and innovative this woman may be, she is constrained by an oppressive collection of rules and procedures that all but dictate what is to be taught in the classroom and how.<P>
Central to Papert's concepts of childhood education is the Logo programming language. In Papert's view, Logo is less a way of controlling the computer than it is a method of exploring different but related concepts, such as mathematics, art, culture, and design. The computer, through Logo, becomes the medium for learning things that might, at first glance, be thought of as unrelated to programming.<P>
Curious, I dusted off (literally) an old Logo, Coral Software's Object Logo for the Macintosh (Coral's product has since been taken over by Paradigm Software, updated, and remarketed). When I first used this Logo, about seven years ago, I was new to programming and tried to use it in the same step-by-step manner I was learning with other languages at the time. I quickly concluded that Logo was limiting and difficult to use compared to other languages, and set it aside.<P>
This time, I simply used Logo for the fun of it. First, I drew a straight horizontal line with the turtle. Then, I began sending lines off in any old direction, up, down, diagonally, making a mess of the drawing window, but quickly learning how the language behaved. I then cleared the drawing window and tried some simple programs. Logo is an interpreted language, which some purists would claim gives it a performance handicap. However, I realized that this very feature lets children start out simply, with one-line programs that actually perform a visible action, then gradually increase its size and complexity until they are doing something that is unusually sophisticated. Within two hours, my own explorations led me to produce a fractal-like drawing using the code in <a href="#00b2_0004">Example 1</A>.<P>
I learned two things from this exercise. First, when I originally experimented with Logo, I was concerned with learning the syntax and structure of the language and failed to appreciate that the language itself was a means to do other things. I was also caught up with learning about &quot;objects&quot; from the viewpoint of a procedural language, rather than recognizing that an object is far more intuitive than a record. At the time, I was perhaps not childlike enough in my way of thinking (now, later in life, presumably I am). In short, I didn't play with it, but treated it as a subject for serious study.<P>
Second, it is wrong to think of what children do with Logo as &quot;programming,&quot; even though we would recognize it as such. Many psychologists doubt that children can program in the traditional sense prior to achieving a certain level of logical and mathematical sophistication. Developmental psychologists and computer scientists may debate among themselves what exactly is going on, but children, who do not understand what the fuss is all about, simply surprise everyone with the complexity and insight of their creations. I am reminded of the Bugs Bunny cartoon where, after performing yet another impossible feat, Bugs declares, &quot;I know this violates the law of gravity, but then, I never studied law.&quot; Many educators, including my student, demand to know where the money will come from to integrate computers into public education in the way Papert describes. Even though the amount spent per student has doubled over the last ten years, schools still cannot find the right formula to improve education. It is clear that they have the money; it is school itself that must change to use it better. Papert claims that a wealth of computers is not a requirement; even a few computers could well support some effective group efforts at computer learning.<P>
One last point of interest is that the computer revolution in education began with the introduction and availability of the microcomputer. Papert's early experiments used teletype terminals connected to large and expensive mainframes. This setup was possible for small-scale experiments, but was not going to change education in any way. The microcomputer made it possible for small groups or even individual children to inexpensively use both computer concepts and graphics to explore virtually any academic subject.<P>
I teach mostly working adults in professional graduate programs, but I see the need for change, even at this level. The classroom lecture model is expensive, inefficient, and dominated by teaching, rather than learning. Back in my undergraduate days, I had a psychology professor who instinctively knew this, claiming that &quot;my goal is to get you excited enough about the subject so that you will leave the classroom and go learn something about it.&quot; Papert focuses on learning, rather than cost, but I am certain that any future endeavors will have to both encompass all students in a learning experience, and do it without sending our property taxes any higher than they are now.<P>
Our educational institutions at all levels have to find new ways to package and deliver education. For my part, I am trying to sell my powers-that-be on multimedia and virtual classrooms. Wherever the school of the future ends up, we--as computer professionals--should be leading the way.<P>
The Children's Machine: Rethinking School in the Age of the Computer<P>
<I>Seymour Papert</I><P>
BasicBooks, 1993, 241 pp., $22.50<P>
ISBN: 0-465-01830-0<P>

<HR>

<h4><a name="00b2_0004"><B>Example 1: </B>Object Logo procedure to create a fractal drawing.<a name="00b2_0004"></h4><P>
<PRE>
to fractal.pattern :level :inc
hideturtle
publicmake &quot;window first turtlewindows
ask :window [setwsize [500 290]
_            wselect
_            startrgn]
clearscreen
fractal 260 :level
insetfractal ask :window [getrgn] :inc
end
to fractal :size :level
penup
back :size / 2
pendown
repeat 3 [fractal1 :size :level right 120]
end
to fractal1 :size :level
if :level = 0 [forward :size stop]
fractal1 :size / 3.0 :level - 1
left 60
fractal1 :size / 3.0 :level - 1
right 120
fractal1 :size / 3.0 :level - 1
left 60
fractal1 :size / 3.0 :level - 1
end
to insetfractal :rgn :inc
if emptyrgnp :rgn [stop]
ask :window [framergn :rgn]
insetfractal insetrgn :rgn :inc :inc :inc
end
fractal.pattern 6, 4
</pre>

<HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
