<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>SEP94: A Print Filter for UNIX</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>A Print Filter for UNIX<a name="00fa_0050"></h1><P>
<h2><a name="00fa_004e"><a name="00fa_0000">More power for your LaserJet 4M printer</h2><P>
<h3>Michael A. Covington and Mark Juric</h3><P>
<p><i><a name="00fa_004f"><a name="00fa_0000">Michael is an associate research scientist and manages the artificial-intelligence lab at the University of Georgia. He is the author of Natural Language Processing for Prolog Programmers (Prentice-Hall, 1994). Mark is a master's degree candidate and Sun system administrator at the University of Georgia. His specialties are genetic algorithms and neural networks. Contact the authors at mcovingt@ai.uga.edu.</i></p><hr><P>
Printers are getting smarter. The Hewlett Packard LaserJet 4M, for example, can print in three modes: PostScript, HP-control code, and plain ASCII. In this article, we will present lj4m, a UNIX print filter that enhances the power of this versatile printer and keeps it out of mischief. Among other things, our program performs the following:<P>
<UL>
<li>Distinguishes PostScript, HP, and ASCII code, kicking the printer into the right mode for each. (The printer can supposedly do this itself, but we had problems with it mistaking Prolog source listings for PostScript code.)</li>
<li>Supplies a Ctrl-D to properly terminate every PostScript job.</li>
<li>Bails out gracefully if a user tries to print an unprintable binary file (essential in a student lab, where such mistakes are common).</li>
<li>Displays the user's name on the printer control panel (see <a href="199400fc.htm">Figure 1</A>).</li>
<li>Logs every print job in /var/adm/lpd-errs (or a location specified in /etc/syslog.conf).</li>
</UL>
<h3><a name="00fa_0051">Print Filtering<a name="00fa_0051"></h3><P>
Our lj4m filter was developed under SunOS 4.1.3, but it should work under any UNIX-like operating system that uses /etc/printcap in the conventional way, including Linux.<P>
Like any other filter, a print filter copies standard input to standard output, making appropriate changes along the way. The filter resides in any convenient directory (we used /etc), has global execute permissions, and is invoked in the printer's /etc/printcap entry.<P>
<a href="#00fa_0057">Example 1(a)</A> shows the printcap entry for our LaserJet 4M. Decoded, this means: &quot;The default printer (<I>lp</I>) is connected to /dev/ttyb at 19,200 baud, with the <I>litout</I> and <I>ixon</I> <I>stty</I> parameters. Suppress formfeeds, suppress headers, allow unlimited length files, and communicate with /dev/ttyb in read/write mode. Filter each print job through /etc/lj4m (our program); use /var/spool/lpd as the spool directory; and use /dev/null as the accounting file.&quot;<P>
Why use /dev/null as an accounting file? Because we want accounting information to be supplied to the filter (as command-line parameters; more about this in a moment), but we don't actually need an accounting file. If the <I>af=</I> line were not there, the filter would not receive accounting information.<P>
Notice that our program is an input filter (<I>if=)</I>, not an output filter (<I>of=)</I>. The difference is that an input filter is started afresh for every file sent to the printer, while an output filter is started only once for a whole series of jobs and cannot handle the individual jobs separately.<P>
For printing through a network, the input filter resides and runs only on the print server. The other machines send their print jobs to the server through the <I>rp=</I> printcap field and do not need <I>if=</I> fields.<P>
<h3><a name="00fa_0052">What Kind of File am I?<a name="00fa_0052"></h3><P>
<a href="#00fa_0059">Listing One</A> is the C source code for the lj4m filter. The heart of the program is <I>main()</I>, which classifies each job by looking at its first two characters: %! for PostScript, Esc-E or Esc-% for Hewlett Packard code. Anything else is presumed to be plain ASCII. PostScript and HP code are just copied to the printer, preceded and followed by appropriate printer commands. <P>
ASCII jobs are more complicated to handle, for two reasons. First, ASCII lines must be truncated at column 80 to keep them from wrapping around and throwing page headers out of sync with the pages. Consider what happens when a user pipes a file to <I>lpr  </I>--<I>p</I>. The --p option generates a heading every 66 lines. If any line wraps around to the next, there will not be 66 lines on the page, and the headers will start shifting. This is not an arcane situation; it arises whenever anyone prints e-mail or netnews, because the headers almost always contain long lines.<P>
We chose, therefore, to truncate at column 80 and underline the last character of each line that was cut off. In counting columns, our program recognizes that Ctrl-H is a backspace and that Return, New Line, and Form Feed return the print position to column 1. Users can still print long lines by using <I>fold</I> to wrap them before the file gets divided into pages: <I>fold &lt; myfile | lpr </I>--<I>p</I>.<P>
Second, any putative ASCII file may turn out to contain unprintable data. The filter uses a table of printable characters stored in an array. The printable characters are considered to be codes 32--126, plus Ctrl-D (UNIX end-of-file), Ctrl-G (bell), Ctrl-H (backspace), Ctrl-I (tab), Ctrl-J (new line), Ctrl-L (form feed), Ctrl-M (return), and Ctrl-Z (MS-DOS end-of-file mark, often present in uploaded text files). This table can, of course, be altered to fit local requirements.<P>
When it hits an unprintable character, the filter resets the printer, prints a message, dumps 30 lines of data in (hopefully) readable form, and terminates the job; see <a href="#00fa_0058">Figure 2</A>.<P>
<h3><a name="00fa_0053">Printer Control<a name="00fa_0053"></h3><P>
The printer-control codes used by the filter are <I>#define</I>d at the beginning of the program. Several are familiar LaserJet PCL code sequences that begin with Escape (octal 033): <I>Esc E</I> to reset the printer, <I>Esc </I>&amp;<I> k 2 G</I> to tell the printer to insert returns before all line feeds, and similar-looking codes to select an appropriate font and margins for 80x66 ASCII printing.<P>
However, to select or deselect PostScript and manipulate the display on the printer console, it is necessary to use HP's higher-level Printer Job Language (PJL). Sequences of PJL commands are introduced and terminated by the string <I>Esc%--12345X</I> (no spaces between characters), presumably chosen because it is unlikely to appear in a print job. The first command in a sequence must be <I>@PJL</I>; other commands used in this program are listed in <a href="#00fa_0057">Example 1(b)</A>. The last of these, of course, displays a string on the printer console.<P>
<h3><a name="00fa_0054">Identifying the User<a name="00fa_0054"></h3><P>
The print filter receives command-line arguments from the system. For example, if the print filter is named lj4m, it executes as if invoked by a command like this: <I>lj4m </I>--<I>w132 </I>--<I>l66 </I>--<I>i0 </I>--<I>n username </I>--<I>h hostname /dev/null</I>.<P>
The first three arguments give nominal values for page width, page length, and extra indentation; our filter, like most, ignores them. The arguments we use are the fifth and seventh, which identify the user and the host; the program puts them together into a string, <I>hostname:username</I>, which is used in the log and on the printer display. If the printcap entry does not contain an <I>af=</I> field, the filter does not receive these arguments, and it displays &quot;Unknown username&quot; instead.<P>
<h3><a name="00fa_0055">Writing in the Log <a name="00fa_0055"></h3><P>
We chose to log all print jobs in the LPD error log rather than in a separate accounting file. Accordingly, our program outputs log entries using <I>syslog()</I> rather than ordinary file-output routines.Actually, three function calls are involved. First, <I>openlog(&quot;LaserJet 4M&quot;,0,LOG_LPR);</I> specifies that the program will be writing on the printer log and that each message will be preceded by &quot;LaserJet 4M:&quot; (complete with the UNIX-supplied colon). Next, calls of the form <I>syslog(LOG_DEBUG,&quot;format string&quot;,arg,arg_);</I> actually write the log entries. The first argument specifies the priority of the message; the priorities we use are LOG_DEBUG for normal events and LOG_ERR for errors. The format string and subsequent arguments work just like those of <I>printf()</I>. Finally, <I>closelog();</I> closes the log.<P>
Where do the messages go? Wherever /etc/syslog.conf says they should. For example, our /etc/syslog.conf contains, among other things, the code in <a href="#00fa_0057">Example 1(c)</A>. ERR messages from any process get written on the console and on /var/adm/messages; DEBUG messages from the printer daemon (including those from our filter) get written on /var/adm/lpd-errs. <P>
<h3><a name="00fa_0056">Further Possibilities<a name="00fa_0056"></h3><P>
A print filter like this can easily be extended. One obvious possibility is to extract the <I>%%Pages:</I> comments in PostScript files and thereby log the number of pages that each job claims to have. Another possibility is to perform additional diagnosis on every unprintable file: Identify it (perhaps even using &quot;file&quot;, or at least /etc/magic) and print a more meaningful message for the user.<P>
Unlike ordinary filters, print filters are allowed to <I>lseek()</I> (reposition) their input files under some flavors of UNIX; this raises the possibility of a two-pass filter. For example, a filter could read a whole ASCII file, determine the maximum line length, and set the typeface and margins accordingly.<P>
We encourage you to customize this filter rather than install it unaltered. Every printer and every printing situation has its own needs; an intelligent print filter can go a long way toward giving users what they want in every situation, even if they don't explicitly ask for it.<P>
<a href="199400fd.htm">Figure 1</A>  PJL commands make the printer display user's name and machine. 
<h4><a name="00fa_0057"><B>Example 1:</B> (a) Printcap entry for LaserJet 4M; (b) sample commands used in the lj4m program; (c) logging messages.<a name="00fa_0057"></h4><P>
<pre>(a)
lp|LaserJet 4M:\
 :lp=/dev/ttyb:\
 :br#19200:ms=litout,ixon:\
 :sf:sh:mx#0:rw:\
 :if=/etc/lj4m:\
 :sd=/var/spool/lpd:\
 :af=/dev/null:

(b)
@PJL ENTER LANGUAGE = POSTSCRIPT
@PJL ENTER LANGUAGE = PCL
@PJL RDYMSG DISPLAY = &quot;your string here&quot;

(c)
*.err               /dev/console
*.err               /var/adm/messages
lpr.debug           /var/adm/lpd-errs</pre><P>
<h4><a name="00fa_0058"><B>Figure 2:</B> Sample dump produced when a file is found to be unprintable.<a name="00fa_0058"></h4><P>
<pre>aisun1:mcovingt
Unprintable data! Partial dump follows...
..... ... ...........  ......... ....@...D.* .......@......&quot;........b.........
...@.......@.......@....#. @......@..........h/......(......&quot;.@..K.. .......\@
..K..  ..  ...O.......^..a....K......`...d...h......../......H.. ... .. ......
...@..4.. ............d.. .. .........@..+..../......t......&quot;.@..#.. .......h.
......./......H.......... .. .........@..... ....p.....#.|.#...#.......b..#...
.....`..#........`d.#.... ...... |.............. ....... G...... ... .........
......... .......... ... ... ... ... ...@./usr/lib/ld.so./dev/zero.......crt0:
 no /usr/lib/ld.so.......&amp;crt0: /usr/lib/ld.so mapping failure........crt0: no
/dev/zero......%d  %d.....@..Z...... ..'........ c... ...... ..'....... c.....
................. ..............b.........@..e..........`......'..............
.`......'............................... ........... ...`... ....... ..`... ..
.`...@... ...................... ..*`...............?.2.......................
. ...`....... .......... ....... ...............#@@..*.. ..................`..
. ....... ......&quot;`..............@l..........@x..........@...........@.........
.@........L...................................................................
..............................................................................
.............'H.........@...........@...........  ......P........%..........,.
.....&quot;....2..d&lt;..@...;..M3..@....E...&gt;.......K../...$....S..3.......[..b1..#@.
..n..W...@....}.....@.......%...@.......b!..#.......S...@.......e&gt;..._etext._e
data._end.start.start_float.__exit._main._environ._DYNAMIC._exit.__main._print
f.___do_global_dtors.__DTOR_LIST__.__exit_dummy_ref.__exit_dummy_decl.__do_glo
bal_ctors.___CTOR_LIST_._on_exit...../usr/local/lib/gcc-lib/sparc-sun4-sunos4.
1.3/2.5.2:/usr/local/lib......... ..............&quot;............c.dl.............
..............................................................................
..............................................................................
..............................................................................
..............................................................................
..............................................................................
..............................................................................
..............................................................................</pre><P>
<P>
<h4><a name="00fa_0059">Listing One <a name="00fa_0059"></h4><pre>

/*  lj4m.c -- Michael A. Covington and Mark L. Juric, 1994
   Pre-spooler filter for LaserJet 4M. Compile with gcc or ANSI C.
   Install with the &quot;if=&quot; (not &quot;of=&quot;) option in /etc/printcap.
   Print jobs are logged as lpr.debug messages.
*/

#include &lt;syslog.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

#define CTRLD      &quot;\004&quot;
#define LINELENGTH 80

/***  HP LaserJet control sequences  ***/
#define RESET      &quot;\033E&quot;
#define LF_TO_CRLF &quot;\033&amp;k2G&quot;
#define LMARGIN    &quot;\033&amp;a11L&quot;
#define FONT       &quot;\033(s0p(s12h(s4b(s4099T&quot;
#define START_PJL  &quot;\033%-12345X@PJL\n&quot;
#define END_PJL    &quot;\033%-12345X&quot;
#define POSTSCRIPT &quot;@PJL ENTER LANGUAGE = POSTSCRIPT\n&quot;
#define PCL        &quot;@PJL ENTER LANGUAGE = PCL\n&quot;


/***  Global variables  ***/
int        c0, c;               /* first 2 chars of file      */
long int   bytes;               /* character count            */
char       userinfo[64] = &quot;&quot;;   /* will be &quot;machine:username&quot; */

/*** Printer console display functions ***/
void DisplayOnPrinterConsole(char *s)
{
  fprintf(stdout,&quot;%s%s%s%s%s%s%s&quot;,
          RESET,
          START_PJL,
          &quot;@PJL RDYMSG DISPLAY = \&quot;&quot;,
          s,
          &quot;\&quot;\n&quot;,
          END_PJL,
          RESET);
}
void ResetPrinterConsole()     /* to display &quot;00 READY&quot; */
{
  fprintf(stdout,&quot;%s%s%s%s%s&quot;,
          RESET,
          START_PJL,
          &quot;@PJL RDYMSG DISPLAY = \&quot;\&quot;\n&quot;,
          END_PJL,
          RESET);
}

/*** PostScript and HP file handling ***/
void PrintPostScriptFile()
{
  /* Choose language */
  fprintf(stdout,&quot;%s%s%s&quot;,RESET,START_PJL,POSTSCRIPT);
  /* Transmit file transparently */
  putc(c0,stdout);
  for (bytes=1; !feof(stdin); bytes++)
  {
     putc(c,stdout);
     c = getc(stdin);
  }
  /* Add newline, Ctrl-D, and reset at end */
  fprintf(stdout,&quot;\n%s%s%s&quot;,CTRLD,END_PJL,RESET);
  /* Log results */
  syslog(LOG_DEBUG,&quot;%s, PostScript file, %d bytes&quot;,userinfo,bytes);
}
void PrintHPFile()
{
  /* Choose language */
  fprintf(stdout,&quot;%s%s%s&quot;,RESET,START_PJL,PCL);
  /* Transmit file transparently */
  putc(c0,stdout);
  for (bytes=1; !feof(stdin); bytes++)
  {
     putc(c,stdout);
     c = getc(stdin);
  }
  /* Reset printer at end */
  fprintf(stdout,&quot;%s%s&quot;,END_PJL,RESET);
  /* Log results */
  syslog(LOG_DEBUG,&quot;%s, HP file, %d bytes&quot;,userinfo,bytes);
}

/*** ASCII and unprintable file handling ***/
#define PRINTABLE(c) (printable[(unsigned char) c])
char printable[256] =
   /* Table of which ASCII codes are printable characters */
       { 0,0,0,0,1,0,0,1,1,1,1,0,1,1,0,0,   /* NUL to ^O  */
         0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,   /* ^P to 31   */
         1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,   /* 32 to 47   */
         1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,   /* 48 to 63   */
         1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,   /* 64 to 79   */
         1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,   /* 80 to 95   */
         1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,   /* 96 to 112  */
         1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,   /* 113 to 127 */
         0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,   /* 128 to 143 */
         0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,   /* 144 to 159 */
         0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,   /* 160 to 175 */
         0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,   /* 176 to 191 */
         0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,   /* 192 to 207 */
         0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,   /* 208 to 223 */
         0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,   /* 224 to 239 */
         0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 }; /* 240 to 255 */
                                /* -1 (eof) maps onto 255 */
void RejectFileAsUnprintable()
{
  /* Set up printer again because it may have been disrupted */
  fprintf(stdout,&quot;\n%s%s%s%s%s%s&quot;,
          RESET,
          START_PJL,
          PCL,
          LF_TO_CRLF,

          FONT,
          LMARGIN);
  /* Dump 30 lines, printing '.' for unprintable characters */
  fprintf(stdout, &quot;%s\nUnprintable data! Partial dump follows...\n&quot;, userinfo);
  for (bytes=1; bytes&lt;LINELENGTH*30+1; bytes++)
  {
    if (feof(stdin)) break;
    if (c&lt;32 || c&gt;126) c = '.';
    fputc(c,stdout);
    if (bytes % LINELENGTH == 0) fputc('\n',stdout);
    c = getc(stdin);
  }
  /* Log the error */
  syslog(LOG_ERR, &quot;LJ4M: %s: tried to print unprintable data\n&quot;,userinfo);
}
void PrintASCIIFile()
{
  int  position = 1;   /* where the next char on the line will be */
  int  ok_to_print;    /* true if no bad chars found */
  /* Set up printer */
  fprintf(stdout,&quot;%s%s%s%s%s%s&quot;,
          RESET,
          START_PJL,
          PCL,
          LF_TO_CRLF,
          FONT,
          LMARGIN);
  /* Deal with the first character already read */
  ok_to_print = PRINTABLE(c0) &amp;&amp; PRINTABLE(c);
  if (ok_to_print &amp;&amp; (c0 != EOF)) putc(c0,stdout);
  /* Process rest of file, breaking at column 80 and
     underlining last character if line continues beyond */
  for(bytes=1; ok_to_print &amp;&amp; !feof(stdin); bytes++)
  {
    if (c==4 || c==26) break;       /* Skip UNIX or DOS EOF mark */
    /* Compute where c will print */
    if (c==10 || c==12 || c==13) position=0;    /* CR, FF, or LF */
    else if (c==8 &amp;&amp; position&gt;0) position--;    /* Backspace */
    else position++;
    /* If in a printable column, print it */

    if (position &lt;= LINELENGTH) fputc(c,stdout);
    /* If we have just run past margin, underline last character */
    if (position == LINELENGTH+1) fputs(&quot;\b_&quot;,stdout);
    /* Obtain and check next character */
    c = getc(stdin);
    ok_to_print = PRINTABLE(c);
  }
  /* If a bad byte was found, print messages and dump */
  if(!ok_to_print) RejectFileAsUnprintable();
  /* Reset printer at end */
  fprintf(stdout,&quot;%s%s&quot;,END_PJL,RESET);
  /* If normal termination, report results */
  if (ok_to_print)
     syslog(LOG_DEBUG,&quot;%s, ASCII file, %d bytes&quot;,userinfo,bytes);
}

/*** Main program ***/
main(int argc, char* argv[])
{
  /* Obtain machine name and user name from cmd line args */
  if (argc&gt;8)
    sprintf(userinfo,&quot;%s:%s&quot;,argv[7],argv[5]);
  else
    strcpy(userinfo,&quot;Unknown username&quot;);
  DisplayOnPrinterConsole(userinfo);
  openlog(&quot;LaserJet 4M&quot;,0,LOG_LPR);
  /* Examine first 2 bytes, decide how to handle file */
  c0 = getc(stdin);
  c  = getc(stdin);
  if (c0=='%' &amp;&amp; c=='!')
    PrintPostScriptFile();
  else if (c0==27 &amp;&amp; (c=='E' || c=='%'))
    PrintHPFile();
  else
    PrintASCIIFile();
  /* Clean up */
  ResetPrinterConsole();
  closelog();
  return(0);       /* UNIX insists on return code 0. */
}
</pre><HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
