<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>SEP94: Extending REXX with C++</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Extending REXX with C++<a name="00d4_0048"></h1><P>
<h2><a name="00d4_0046"><a name="00d4_0000">Combining REXX's ease of use with the power and flexibility of C++</h2><P>
<h3>Art Sulger</h3><P>
<p><i><a name="00d4_0047"><a name="00d4_0000">Art specializes in database administration, analysis, and programming for the State of New York. He can be contacted on CompuServe at 71020,435.</i></p><hr><P>
Windows programmers are used to using C or C++ to extend visual development tools. OS/2 developers haven't always had it so easy, however. It's only recently that a number of OS/2-targeted visual development tools have come onto the scene, most of which use OS/2's built-in REXX interpreter (see &quot;A Multicolumn List-Box Container for OS/2,&quot; <I>DDJ</I>, May 1994). With tools such as Gpf's GpfRexx, HockWare's VisPro/REXX, and Watcom's VX-REXX, REXX can call routines written in other languages--as long as those languages can create DLLs.<P>
I recently wrote a number of database routines in C++ for OS/2 Presentation Manager applications. I wanted to use visual development tools to build the user interface without recoding the database routines. Consequently, I extended my C++ classes into REXX-callable external functions. To illustrate this process, I'll develop, test, and debug a C++ class that displays text files. I'll then write an application using one of the visual Presentation Manager tools linked to the C++ class. <P>
<h3><a name="00d4_0049">External REXX Functions<a name="00d4_0049"></h3><P>
REXX allows programs to be written in a clear and structured way. With REXX, you must follow a rigid structure to write external functions that REXX can call; see <a href="#00d4_004e">Example 1</A>. You do not directly pass these parameters; they are built by the REXX interpreter. The only parameters you can even indirectly control are <I>argc</I> and <I>argv</I>, which are built from the function arguments in your REXX program--just as <I>main(int argc, char ** argv)</I> in C is built by the command-line arguments.<P>
REXX has no built-in data typing. The type is inferred from the context, so variables are passed as character strings. Unlike C, these strings are <I>not</I> null terminated so the structure includes the length as well as a pointer to the value. <a href="#00d4_004f">Example 2</A> is the structure from the REXXSAA.H file (supplied with the OS/2 Developer's Toolkit; you must include this file in your C module). For instance, suppose you included the commands in <a href="#00d4_0050">Example 3(a)</A> in a REXX program. The C function that receives the command would look like <a href="#00d4_0050">Example 3(b)</A>. Notice that the <I>fname</I> argument is the <I>argv[0].strptr</I> parameter of the <I>x-&gt;Open() call</I>.<P>
RXSTRING is also the structure you use to build the character string to return to the REXX command file. Interestingly, the C module is really returning values to two different processes--your REXX command file and the system's REXX interpreter. You notify the interpreter with the <I>return</I> statement, and it expects either 0 (VALID_ROUTINE) or 40 (INVALID_ROUTINE). An INVALID_RETURN halts program execution. <P>
You supply the other return value at the address of the last <I>*retstr</I> argument passed into your function by the REXX interpreter. The value you pass back from your function is assigned to the special REXX variable RESULT; you can also assign it to a variable in your REXX program. In <a href="#00d4_0051">Example 4</A>, <I>say</I> emits the value you have put into the <I>retstr</I> parameter in your <I>FileDBNext</I> function. Similarly, the string you build in <I>FileDBError</I> is interpreted as a numeric return code in the <I>do while</I> phrase. With the interpreter passing memory addresses from your REXX program to your C functions, you may be wondering, who owns this memory?<P>
The return value (<I>retstr</I>) is allocated by REXX. The REXX interpreter allocates 256 bytes for return values when the process starts. This memory is owned by the process and is accessible by both your REXX program and C functions. In addition, any memory you allocate remains available to the process. The usual scoping rules apply, with the presumption that the REXX program and C functions are treated as a single module.<P>
The return value that REXX allocates is slightly different than the memory allocations that you make. You don't have to worry about freeing it, but you do have to worry about not having enough. For instance, what happens if the value you want to return is greater than 256 bytes? After all, REXX imposes no limit on the length of the returned string. The function <I>CopyResult</I> (<a href="#00d4_0056">Listing One</A>) checks to see if there is enough storage, and, if not, allocates more. <I>CopyResult()</I> uses <I>DosAllocMem()</I>, which handles memory in 4K chunks, so chances are you won't have to do too many allocations. This memory stays around until the process ends, or until the REXX program encounters a <I>return</I> statement that has no expression attached to it, in which case REXX drops (uninitializes) it.<P>
<h3><a name="00d4_004a">Using C++<a name="00d4_004a"></h3><P>
Except for the way C++ mangles names, it is relatively straightforward to extend these concepts to C++. The REXXSAA.H file should wrap the declarations in <I>extern &quot;C</I>&quot; directives (although some C++ implementations don't do this). If you get compile warnings about undefined <I>pragma</I>s or link errors listing unresolved externals, chances are the header file is obsolete. You can download the correct file (REXXSAA.ZIP) from CompuServe (GO IBMDF1). <P>
<a href="#00d4_0057">Listing Two</A> is a C++ class for reading text files. It opens files, reads lines sequentially, and performs some simple error checking. The class is a scaled-down version of the database class that I designed to use with the new REXX tools.<P>
REXX development tools need only interface to the public methods of your C++ class. In the <I>FileDB</I> class these consist of: two constructors, of which one immediately opens a file and the other instantiates the class without a particular filename; a destructor, which simply calls the <I>Close()</I> method; <I>Next()</I>, which returns character strings from the file; and <I>Error()</I>, which returns the class status.<P>
Constructors should go in one function and destructors in another. Your REXX procedures will then follow the scenario in <a href="#00d4_0052">Example 5</A>. The constructor function will initialize the class (<I>clss*x=new clss</I>), and the destructor function will invoke the class destructor (<I>delete x</I>).<P>
There are two methods of mapping the external function(s) to the public class members: You can write a separate function for each public method, and the REXX calls will look like <a href="#00d4_0053">Example 6(a)</A>; or, you can put all of the interface code in a single function, and the same REXX program will look like <a href="#00d4_0053">Example 6(b)</A>. <a href="#00d4_0056">Listing One</A> uses both methods. <P>
<h3><a name="00d4_004b">Telling REXX About New Functions<a name="00d4_004b"></h3><P>
You have to notify the REXX environment about any new external functions written in a language other than REXX. You can use a built-in REXX function which you must use for at least one of your external functions; see <a href="#00d4_0054">Example 7(a)</A>. This loads the external routine <I>Func1</I> located in RXFILEDB.DLL and tells REXX that it will be known to REXX by the name <I>Func1</I>. Another approach is for the C program to register external functions. <a href="#00d4_0054">Example 7(b)</A> from RXFILEDB.CPP registers all the functions in a previously defined data structure.<P>
The usual procedure is to build a <I>LoadFunctions</I> procedure in your DLL that will handle the bulk of the registrations. The REXX program need only register this single function, then call it. Once registered, the external functions are visible to all processes until OS/2 shuts down or the functions are deregistered. Usually you won't deregister functions, and often you may want to write a procedure that will automatically register your functions at startup.<P>
The code does the registration in the body of the pseudoconstructor. This is acceptable to OS/2; there is no penalty for duplicate registrations.<P>
<h3><a name="00d4_004c">Compiling, Linking, and Testing<a name="00d4_004c"></h3><P>
Compiling and linking are straightforward if you know how to code an OS/2 DLL. You will need to link to the OS/2 Developer's Toolkit with the appropriate headers and the REXX.LIB file. These are supplied by the compiler vendor as part of the OS/2 support files. If you are using <I>fopen()</I> and similar functions, you should link to the multithreaded C run-time support libraries. <a href="#00d4_0058">Listing Three</A> shows the compile and link commands for IBM C Set++ and Watcom.<P>
During development, you may get an error while the DLL is being linked because the DLL you are testing may still be owned by the operating system. Make sure you end the process in which you are testing the DLL by exiting the window in which the testing is being done.<P>
If you want to use your library from more than one application concurrently, direct the linker to provide a data segment for every process that invokes it. If your application uses any C run-time functions, tell the linker to initialize the library at each invocation. This is shown in the linker definition files in <a href="#00d4_0058">Listing Three</A> for both IBM C Set++ and Watcom.<P>
Testing DLLs can be a problem. You will first want to make sure your class works correctly. I've included test.cpp (see <a href="#00d4_0059">Listing Four</A>) for just this purpose.<P>
Once you are sure the C++ class works, you should test the REXX callable parts by writing a command file--a text file containing REXX commands. Command files must start with a C-style comment, and clauses are delimited by semicolons or line ends, unless the last character in a line is a comma (the continuation character). Your test program will make calls to the external functions which you have built. A call is made using the CALL keyword, or simply by writing the function. In the latter, the interpreter will execute the function, then attempt to execute the result.<P>
The RXSTRING that you build in the <I>RexxFunctionHandler</I> to return a value is placed in a special variable, RESULT, which is set automatically during execution of a REXX program. The clause in <a href="#00d4_0055">Example 8(a)</A> is equivalent to <a href="#00d4_0055">Example 8(b)</A>, which in turn is functionally identical to <a href="#00d4_0055">Example 8(c)</A>.<P>
The sample program T.CMD (<a href="#00d4_005a">Listing Five</A>) prompts for a filename, then lists it. The program starts with a menu to test concurrent invocations of the DLL. The menu allows you to select a file in more than one window, then start the listings almost simultaneously.<P>
If the command file works correctly, then you are ready to use the DLL. If, on the other hand, you run into a bug, you can source-level debug DLLs called by REXX by debugging the REXX interpreter (cmd.exe). To do so with the C Set++ PM debugger, choose the Breakpoints/Load Occurrence option from the Disassembly window and type in the name of your DLL. The command for loading the debugger initially is <I>IPMD cmd /K x:\dir\MyREXX.cmd</I>. <P>
<h3><a name="00d4_004d">A VX-REXX Application<a name="00d4_004d"></h3><P>
<a href="199400d6.htm">Figure 1</A> shows two VX-REXX applications and one REXX command file (T.CMD), all using the <I>RXFileDB</I> DLL. The code generated is based on the screen design. The three applications are displaying three different listings. <a href="#00d4_005b">Listing Six</A> provides only the additional code needed for the VX-REXX application. The <I>FileDBStart</I> pseudoconstructor call is in the <I>Initialization </I>routine of the REXX source, and the destructor is in the <I>Quit </I>routine. The File dialog in the <I>Menu</I> routine calls the remaining functions.<P>
The ability to extend the new REXX development tools can provide a major boost in productivity. As you can see here, you can extend these tools even further using your existing library of C++ classes.<P>
<a href="199400d7.htm">Figure 1</A>  Two VX-REXX applications and one REXX command file (T.CMD).
<h4><a name="00d4_004e"><B>Example 1:</B> Prototype for C function callable by REXX.<a name="00d4_004e"></h4><P>
<pre>ULONG _System    // The _System directive inhibits C++ name mangling
FileDBLoadFuncs(
CHAR *name,      // The name of this Function name.
ULONG argc,      // Number of arguments, as in main(int argc,...
RXSTRING argv[], // Arguments, as in main(int argc,char *argv[])
CHAR *q_name,    // Current Rexx queue name
RXSTRING *retstr)// The value that this function will return</pre><P>
<h4><a name="00d4_004f"><B>Example 2:</B> REXXSAA.H structure.<a name="00d4_004f"></h4><P>
<pre>typedef struct _RXSTRING {     /* rxstr */
        ULONG  strlength;      /* length of string   */
        PCH    strptr;         /* pointer to string  */
}  RXSTRING;</pre><P>
<h4><a name="00d4_0050"><B>Example 3:</B> (a) Sample REXX program; (b) the C function called by the REXX program in (a).<a name="00d4_0050"></h4><P>
<pre>(a) pull fname
    say FileDBOpen(fname)

(b) ULONG _System
    FileDBOpen(CHAR *name, ULONG argc, RXSTRING argv[],
           CHAR *q_name, RXSTRING *retstr)
      {

      char tmp[5] ;
      if( argc != 1 )
        return(INVALID_ROUTINE);
      if (x)
        {
        x-&gt;Open(argv[0].strptr) ; // argv[0].strptr == REXX fname
        strcpy(retstr-&gt;strptr, itoa(x-&gt;Error(), tmp, 10)) ;
        retstr-&gt;strlength = strlen(retstr-&gt;strptr) ;
        }
      else
        . . .
      return(VALID_ROUTINE);
      }</pre><P>
<h4><a name="00d4_0051"><B>Example 4:</B> Assigning a value to a variable in your REXX program.<a name="00d4_0051"></h4><P>
<pre>do while FileDBError() = 0
say FileDBNext()
  . . .</pre><P>
<h4><a name="00d4_0052"><B>Example 5:</B> Constructors should go in one function and destructors in another.<a name="00d4_0052"></h4><P>
<pre>/* typical REXX call to C++ */
call FileDBStart  /* the constructor */
do until FileDBError() = 0
  say FileDBNext()
end
call FileDBFinish /* the destructor */</pre><P>
<h4><a name="00d4_0053"><B>Example 6:</B> (a)Writing a separate function for each public method to map the external function to the public class members; (b) putting interface code in a single function to map the external function.<a name="00d4_0053"></h4><P>
<pre>(a) call FileDBOpen(&quot;filename&quot;)
    if FileDBError() = 0 then do
      say FileDBNext()
      end

(b) call MyREXXDLL(&quot;Open&quot;, &quot;filename&quot;)
    if MyREXXDLL(&quot;Error&quot;) = 0 then do
      say MyREXXDLL(&quot;Next&quot;)
      end</pre><P>
<h4><a name="00d4_0054"><B>Example 7:</B> (a) Using a built-in function to notify the REXX environment about a new external function; (b) using a C program to register external functions.<a name="00d4_0054"></h4><P>
<pre>(a) call RXFuncAdd 'Func1',
          'MYDLL', 'Func1'

(b) for( j = 0; j &lt; entries; ++j )
      RexxRegisterFunctionDll(
      RxFncTable[ j ].rxName,
                         DLLNAME.
      RxFncTable[ j ].cName );</pre><P>
<h4><a name="00d4_0055"><B>Example 8:</B> Returning a value. The clause in (a) is equivalent to (b) which, in turn, is functionally identical to (c).<a name="00d4_0055"></h4><P>
<pre>(a) say FileDBNext()

(b) call FileDBNext
    say Result

(c) result = FileDBNext()
    say result</pre><P>
<P>
<h4><a name="00d4_0056">Listing One <a name="00d4_0056"></h4><pre>

/* RXFileDB.cpp */
#include &quot;FileDB.hpp&quot;
#define INCL_DOS
#define INCL_NOMAPI
#include &lt;os2.h&gt;
#define  INCL_RXFUNC
#include &lt;rexxsaa.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
// Change this if you're changing the DLL name...
#define DLLNAME &quot;RXFILEDB&quot;
#define  INVALID_ROUTINE 40            // return Rexx error
#define  VALID_ROUTINE    0
// Some useful macros:
#define  SetNullRXString(dest) {*dest-&gt;strptr = '\0' ; \
                                 dest-&gt;strlength = 0 ;}
#define BUILDRXSTRING(t, s) {strcpy((t)-&gt;strptr,(s));\
                            (t)-&gt;strlength = strlen((s));}
// The C++ interface is done by declaring a global class instance and then 
// using members of this global class in our RexxFunctionHandler functions.
// The class can be declared, or a pointer can be declared and then allocated
// within a RexxFunctionHandler function.  We will use the latter approach.
// Either of these declarations will work, with the appropriate adjustments
// in the code that references them:
//FileDB x ;    // Don't new and delete these.
//                 Reference members with dot(.) operator.
FileDB * x ;    // Must new and delete.
//                 Refer to members with arrow(-&gt;) operator.
// Then declare the functions that access the public members of
// this class.  Remember to export these!
//========================================================================
RexxFunctionHandler FileDBLoadFuncs ; // Load the other functions.
RexxFunctionHandler FileDBDropFuncs ; // Drop all these functions; why bother?
RexxFunctionHandler FileDBStart ;     // Our class constructor.
RexxFunctionHandler FileDBFinish ;    // Our class destructor.
RexxFunctionHandler FileDBClose ;     // &quot;call FileDBClose()&quot;
RexxFunctionHandler FileDBError ;     // &quot;do while FileDBError() = 0&quot;
RexxFunctionHandler FileDBNext ;      // &quot;say FileDBNext()&quot;
RexxFunctionHandler FileDBOpen ;      // &quot;say FileDBOpen('fname')&quot;
RexxFunctionHandler FileDBAPI ;       // A single function API
// Define the table that lists REXX function names and the corresponding
// DLL entry point.  You must change this table whenever you add/remove
// a function or entry point.
typedef struct {
    PSZ     rxName;
    PSZ     cName;
} fncEntry, *fncEntryPtr;
static fncEntry RxFncTable[] =
   {
        /* function */     /* entry point (may not match function name*/
      { &quot;FileDBLoadFuncs&quot;, &quot;FileDBLoadFuncs&quot; },
      { &quot;FileDBDropFuncs&quot;, &quot;FileDBDropFuncs&quot; },
      { &quot;FileDBStart&quot;,     &quot;FileDBStart&quot;     },
      { &quot;FileDBFinish&quot;,    &quot;FileDBFinish&quot;    },
      { &quot;FileDBClose&quot;,     &quot;FileDBClose&quot;     },
      { &quot;FileDBError&quot;,     &quot;FileDBError&quot;     },
      { &quot;FileDBNext&quot;,      &quot;FileDBNext&quot;      },
      { &quot;FileDBOpen&quot;,      &quot;FileDBOpen&quot;      },
      { &quot;FileDBAPI&quot;,       &quot;FileDBAPI&quot;       },
   };
// This function builds strings to return to REXX :
void CopyResult(PRXSTRING dest, const char * src) ;
//------------------------------------------------------------------------
// FileDBLoadFuncs -- Register all the functions with REXX.
ULONG _System
FileDBLoadFuncs(CHAR *name, ULONG argc, RXSTRING argv[],
                CHAR *q_name, RXSTRING *retstr)
  {
  int entries;
  int j;
  if (argc != 0)
    return(INVALID_ROUTINE);
  entries = sizeof( RxFncTable ) / sizeof( fncEntry );
  for( j = 0; j &lt; entries; ++j )
    RexxRegisterFunctionDll( RxFncTable[ j ].rxName, DLLNAME,
    RxFncTable[ j ].cName );
  SetNullRXString(retstr)
  return (VALID_ROUTINE);
  }
//------------------------------------------------------------------------
ULONG _System
FileDBDropFuncs( CHAR *name, ULONG argc, RXSTRING argv[],
                 CHAR *q_name, RXSTRING *retstr )
  {
  int entries;
  int j;
  if( argc != 0 )
    return( INVALID_ROUTINE );
  entries = sizeof( RxFncTable ) / sizeof( fncEntry );
  for( j = 0; j &lt; entries; ++j )
    RexxDeregisterFunction(RxFncTable[ j ].rxName);
  SetNullRXString(retstr)
  return(VALID_ROUTINE);
  }
//---------------------------------------------------------------------------
ULONG _System
FileDBStart( CHAR *name, ULONG argc, RXSTRING argv[],
             CHAR *q_name, RXSTRING *retstr )
  {
  if(argc == 1)
   {
   x = new FileDB(argv[0].strptr) ;
   CopyResult(retstr, argv[0].strptr) ;
   }
  else
  if(argc == 0)
    {
    x = new FileDB() ;
    BUILDRXSTRING(retstr, &quot;Okay&quot;)
    }
  else
    return (INVALID_ROUTINE) ;
  return(VALID_ROUTINE);
  }
//------------------------------------------------------------------------
ULONG  _System
FileDBFinish( CHAR *name, ULONG argc, RXSTRING argv[],
              CHAR *q_name, RXSTRING *retstr )
  {
  if( argc != 0 )
    return( INVALID_ROUTINE );
  if (x)
    delete x ;
  SetNullRXString(retstr)
  return(VALID_ROUTINE);
  }
//----------------------------------------------------------------------
ULONG _System
FileDBClose( CHAR *name, ULONG argc, RXSTRING argv[],
             CHAR *q_name, RXSTRING *retstr )
  {
  char tmp[5] ;
  if( argc != 0)
    return(INVALID_ROUTINE);
  if (x)
    {
    x-&gt;Close() ;
    BUILDRXSTRING(retstr, itoa(x-&gt;Error(), tmp, 5))
    }
  else
    BUILDRXSTRING(retstr, &quot;No Object&quot;)
  return(VALID_ROUTINE);
  }
//----------------------------------------------------------------------
ULONG _System
FileDBError( CHAR *name, ULONG argc, RXSTRING argv[],
             CHAR *q_name, RXSTRING *retstr )
  {
  char tmp[5] ;
  if( argc != 0 )
    return( INVALID_ROUTINE );
  if (x)
    BUILDRXSTRING(retstr, itoa(x-&gt;Error(), tmp, 10))
  else
    BUILDRXSTRING(retstr, &quot;No Object&quot;)
  return(VALID_ROUTINE);
  }
//----------------------------------------------------------------------
ULONG _System
FileDBNext( CHAR *name, ULONG argc, RXSTRING argv[],
            CHAR *q_name, RXSTRING *retstr )
  {
  if (argc != 0)
    return( INVALID_ROUTINE );
  if (x)
    {
    CopyResult(retstr, x-&gt;Next()) ;
    if (x-&gt;Error() != 0)
      BUILDRXSTRING(retstr, &quot; &quot;)
    }
  else
    BUILDRXSTRING(retstr, &quot;No Object&quot;)
  return(VALID_ROUTINE);
  }
//----------------------------------------------------------------------
// Open returns a number which we convert to character for Rexx-&gt;
ULONG _System
FileDBOpen( CHAR *name, ULONG argc, RXSTRING argv[],
            CHAR *q_name, RXSTRING *retstr )
  {
  char tmp[5] ;
  if( argc != 1 )
    return(INVALID_ROUTINE);
  if (x)
    {
    x-&gt;Open(argv[0].strptr) ;
    BUILDRXSTRING(retstr, itoa(x-&gt;Error(), tmp, 10))
    }
  else
    BUILDRXSTRING(retstr, &quot;No Object&quot;)
  return(VALID_ROUTINE);
  }
//----------------------------------------------------------------------
/* This is the 'all-in-one' function.  REXX programs will typically
   call this function as follows: 
   call FileDBAPI(&quot;Open&quot;, &quot;FileName&quot;)
   if FileDBAPI(&quot;Error&quot;) = 0 then do
     say FileDBAPI(&quot;Next&quot;) ....  */
ULONG  _System
FileDBAPI( CHAR *name, ULONG argc, RXSTRING argv[],
           CHAR *q_name, RXSTRING *retstr )
  {
  char tmp[5] ;
  if (argc == 0) // There must be at least one arg, the name of the call.
    return( INVALID_ROUTINE );
  if (!x)
    {
    BUILDRXSTRING(retstr, &quot;No Object&quot;)
    return(VALID_ROUTINE);
    }
  if (stricmp(&quot;Close&quot;, argv[0].strptr) == 0)
    {
    if (argc != 1)
      return( INVALID_ROUTINE );
    x-&gt;Close() ;
    CopyResult(retstr, itoa(x-&gt;Error(), tmp, 10)) ;
    }
  else
  if (stricmp(&quot;Error&quot;, argv[0].strptr) == 0)
    {
    if (argc != 1)
      return( INVALID_ROUTINE );
    CopyResult(retstr, itoa(x-&gt;Error(), tmp, 10)) ;
    }
  else
  if (stricmp(&quot;Next&quot;, argv[0].strptr) == 0)
    {
    if (argc != 1)
      return( INVALID_ROUTINE );
    CopyResult(retstr, x-&gt;Next()) ;
    }
  else
  if (stricmp(&quot;Open&quot;, argv[0].strptr) == 0)
    {
    if (argc != 2)
      return( INVALID_ROUTINE );
    x-&gt;Open(argv[1].strptr) ;
    CopyResult(retstr, itoa(x-&gt;Error(), tmp, 10)) ;
    }
  else
    CopyResult(retstr, &quot;Invalid First Argument&quot;) ;
  return (VALID_ROUTINE) ;
  }
//------------------------------------------------------------------------
/* CopyResult -- Copies a string into a result, allocating space for it if
     necessary. If you pass it an RXSTRING with a non-null buffer and a 
     non-zero length, it will try to copy the data into that buffer. Otherwise
     is uses DosAllocMem to allocate a new one.  */
void CopyResult(PRXSTRING dest, const char *src)
  {
  int len = strlen(src) ;
  static void  *mem = NULL;
  if( !dest )
    return ;
  if( (!src) &amp;&amp; dest-&gt;strptr != NULL)
     SetNullRXString(dest)
  else
  if( dest-&gt;strptr != NULL &amp;&amp; len &lt;= dest-&gt;strlength )
    {
    memset(dest-&gt;strptr, 0, (size_t)dest-&gt;strlength);
    memcpy(dest-&gt;strptr, src, len);
    dest-&gt;strlength = len;
    }
  else
    {
    // The buffer is too small, so allocate a new one
    SetNullRXString(dest)
    if (DosAllocMem(&amp;mem, len + 1, PAG_COMMIT | PAG_WRITE | PAG_READ))
        return ;
    dest-&gt;strptr    = (char *)mem;
    dest-&gt;strlength = len;
    //memset(dest-&gt;strptr, 0, len + 1);
    *(dest-&gt;strptr + len) = '\0' ;
    memcpy(dest-&gt;strptr, src, len);
    }
  }


</pre>
<h4><a name="00d4_0057">Listing Two<a name="00d4_0057"></h4><pre>

/* This C++ class can be dynamically allocated and called from REXX. It reads
    text files. There are public members that return integers and others that
    return character pointers. The class does file manipulation using 
    ordinary C runtime functions. */
#ifndef FILEDB_HPP
#define FILEDB_HPP
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#define MAXROWSIZE  200
class FileDB
  {
  private:
    FILE * fp ;
    int error ;
    char * bf ;
    long pos ;
    const char * Get()
      {
      if (fgets(bf, MAXROWSIZE, fp) != NULL)
        {
        error = 0 ;
        if (strchr(bf, 0x0d))
          memset(strchr(bf, 0x0d), '\0', 1) ;
        else
        if (strchr(bf, 0x0a))
          memset(strchr(bf, 0x0a), '\0', 1) ;
        if (!strchr(bf, 0x1a))
          return bf ;
        }
      //else
      fseek(fp, 0L, SEEK_SET) ;
      error = -2 ;
      *bf = '\0' ;
      return bf ;
      }
  public:
    FileDB(){fp=NULL;bf=NULL;error=0;}
    FileDB(char * fname){fp=NULL;bf=NULL;Open(fname);}
    ~FileDB(){Close();}
    void Close()
      {
      if(fp)
        {
        fclose(fp);
        fp=(FILE *)NULL;
        }
      if (bf)
        delete [] bf ;
      }
    int     Error(){return error;}
    const char * Next(){return Get();}
    void Open(char *fname)
      {
      Close();
      bf = new char [MAXROWSIZE] ;
      if ((fp = fopen(fname, &quot;r&quot;)) == NULL)
        error = -1 ;
      else
        error = 0 ;
      fseek(fp, 0L, SEEK_SET) ;
      }
  } ;
#endif // FILEDB_HPP


</pre>
<h4><a name="00d4_0058">Listing Three<a name="00d4_0058"></h4><pre>

/* commands for compiling and linking for IBM C-Set++ */
ICC.EXE   /Ge- /Gm+ /C   .\$*.cpp
 /B&quot; /de /noe /m&quot;
 /Fe&quot;RXFILEDB.DLL&quot; REXX.LIB RXFILEDB.DEF

;RXFileDB.DEF Used for Link step for IBM C-Set++
LIBRARY RXFILEDB INITINSTANCE TERMINSTANCE
DESCRIPTION 'OS/2 Test Dynamic Link Library (c)AFS 1994'
DATA MULTIPLE NONSHARED READWRITE LOADONCALL
CODE LOADONCALL
EXPORTS
    FileDBLoadFuncs
    FileDBDropFuncs
    FileDBStart
    FileDBFinish
    FileDBAPI
    FileDBClose
    FileDBError
    FileDBNext
    FileDBOpen

/* commands for compiling and linking for Watcom */
call wpp386 /bd /bm /d2 rxfiledb.cpp
call wlink @rxfiledb.lnk

;RXFileDB.LNK Used for Link step for Watcom

system os2v2 dll initinstance terminstance
option manyautodata
debug all
option symfile
export FileDBLoadFuncs
export FileDBDropFuncs
export FileDBStart
export FileDBFinish
export FileDBAPI
export FileDBClose
export FileDBError
export FileDBNext
export FileDBOpen
library rexx
file rxfiledb


</pre>
<h4><a name="00d4_0059">Listing Four<a name="00d4_0059"></h4><pre>

/* C program to test the FileDB class. Pass in the name of a file to list. */
#include &quot;FileDB.hpp&quot;
#include &lt;iostream.h&gt;
int main(int argc, char * argv[])
  {
  FileDB * f ;
  if (argc != 2)
    return -1 ;
  f = new FileDB(argv[1]) ;
  while (0 == f-&gt;Error())
    cout &lt;&lt; f-&gt;Next() ;
  return 0 ;
  }


</pre>
<h4><a name="00d4_005a">Listing Five<a name="00d4_005a"></h4><pre>

/* t.cmd  -- Functions with no arguments= call func or rc=func() */
say &quot;Registering the RXFILEDB functions.  If the program halts when trying&quot;
say &quot;to call RXFileDB, make sure the RxFileDB.DLL file is in your LIBPATH.&quot;
say &quot;&quot;
call RXFuncAdd 'FileDBLoadFuncs', 'RXFILEDB', 'FileDBLoadFuncs'
say &quot;Load Funcs added&quot;
call FileDBLoadFuncs
say &quot;Load Funcs finished&quot;
GotAFile = 0
call FileDBStart
do forever
  say &quot;Main Menu &quot;
  say &quot;1. Choose a File&quot;
  say &quot;2. List a File&quot;
  say &quot;0. Quit&quot;
  say &quot;&quot;
  say &quot;Make a Selection&quot;
  pull input
  select
    when input = 1 then call Chooser
    when input = 2 then call Lister
    when input = 0 then leave
  otherwise
    say &quot;Make a Selection from 1 to 2&quot;
  end
end
say &quot;Left&quot;
call FileDBFinish
say &quot;Finish&quot;
/*call FileDBDropFuncs*/
return
CHOOSER:
GotAFile = 0
say &quot;What is the name of the file? Please include the extension.&quot;
say &quot;Example: TEST.EXT&quot;
pull fname
say FileDBAPI(&quot;Open&quot;, fname)
if FileDBAPI(&quot;Error&quot;) = 0 then do
  GotAFile = 1
end ;
return
LISTER:
if GotAFile = 0 then do
  say &quot;Choose a file first&quot;
  return
end ;
do until FileDBError() &lt;&gt; 0
  say FileDBNext()
end
say &quot;Fname = &quot; fname
say FileDBOpen(fname) /* Reset to top of the file */
return


</pre>
<h4><a name="00d4_005b">Listing Six<a name="00d4_005b"></h4><pre>

/*:VRX         File_Click   */
File_Click:
 filespec = VRFileDialog( VRWindow(), &quot;File to open?&quot;, &quot;O&quot;, &quot;*.*&quot; )
 if filespec = &quot;&quot; then do
     return
 end
  call VRMethod(&quot;List001&quot;, &quot;Clear&quot;)
  x = FileDBOpen(filespec)
  do while FileDBError() = 0
    f_line = FileDBNext()
    if FileDBError() = 0 then do
      call VRMethod(&quot;List001&quot;, &quot;AddString&quot;, f_line)
    end
  end
return
/*:VRX         Init */
Init:
    window = VRWindow()
    call VRMethod window, &quot;CenterWindow&quot;
    call VRSet window, &quot;Visible&quot;, 1
    call VRMethod window, &quot;Activate&quot;
    call RXFuncAdd 'FileDBLoadFuncs', 'RXFILEDB', 'FileDBLoadFuncs'
    call FileDBLoadFuncs
    call FileDBStart
    drop window
return
/*:VRX         Quit  */
Quit:
    window = VRWindow()
    call VRSet window, &quot;Shutdown&quot;, 1
    drop window
    call FileDBFinish
return

</pre><HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
