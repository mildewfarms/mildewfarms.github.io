<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>SEP94: The BMP File Format</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>The BMP File Format<a name="00c2_0044"></h1><P>
<h2><a name="00c2_0042"><a name="00c2_0000">When a standard isn't necessarily a standard     </h2><P>
<h3>Marv Luse</h3><P>
<p><i><a name="00c2_0043"><a name="00c2_0000">Marv is president of Autumn Hill Software and author of Bitmapped Graphics Programming in C++ (Addison-Wesley, 1994). Marv can be contacted at 303-494-8865.</i></p><hr><P>
Over the last few years, the BMP format has become an important graphics file standard. This is not surprising as it is the native graphics file format of both OS/2 and Windows. To most developers, however, the BMP format is still something of a stranger, albeit one we know by name. This was true in my own case, and it was only after writing a book on graphics file formats (<I>Bitmapped Graphics Programming in C++</I>, Addison-Wesley, 1994) that I came to appreciate the format's many vagaries.<P>
As it turns out, the BMP format is actually a sheaf of formats bundled under the same name. Under OS/2, for example, the format is used to store images, icons, cursors, pointers, and image arrays (and I'm not entirely sure this list is complete). Here, I'll look primarily at one of these variants--the BMP image format. <P>
There are currently two versions of the BMP image format for Windows and two for OS/2. Think of these as &quot;old&quot; and &quot;new&quot; versions on each platform. The two old versions are identical, reflecting the common ancestry of OS/2 and Windows. The two new versions, however, are different. This means that an application that wishes to handle any valid instance of the BMP image format must be prepared to deal with three format variants.<P>
Few commercial applications actually support all three variants. You may have had the experience of an image editor or word processor trying to import a BMP file, only to be notified that the file is invalid. In such cases, it is likely that the BMP file originated on OS/2, but the application only knows how to handle the Windows-format variants. Another possibility is that the file actually contains something other than an image, such as an icon or cursor. And, of course, if the application is sufficiently old, it is possible that it only knows about the common version of the format.<P>
From an application-development perspective, a program should be prepared to deal with any of the three valid image formats, and the program's error-handling logic should recognize three distinct situations: a valid BMP image file, a valid BMP file that contains something other than an image, and an invalid file of undetermined format. Anything less is likely to generate unnecessary and annoying technical-support calls (and if you are like me, anything that reduces technical-support calls is nothing less than manna from heaven!).<P>
In this article, I'll examine the format itself and present techniques for encapsulating it using C++. The latter will present a class design that implements the strategy I've just described. <P>
<h3><a name="00c2_0045">The BMP Image Format<a name="00c2_0045"></h3><P>
The BMP image format is a general-purpose format designed to accommodate images of any size and possessing from 1 to 24 bits of color information. The bitmap-handling machinery of OS/2 and Windows prefers a chunky (nonplanar) pixel format; this is considered the norm for the format. Although multiplanar images can be accommodated, I have never encountered a BMP file that contained one. The format also supports RLE compression under Windows and RLE and Huffman 1D encoding under OS/2. Again, I've never encountered a compressed BMP file. One unfortunate canon of the format is that images are stored as scanlines ordered from the bottom up. This is never a problem when dealing only with the Windows or OS/2 Presentation Manager (PM) APIs, but if you must deal with the bitmap data directly (say, to perform a format conversion or to print the image on a dot-matrix printer), then the bottom-up ordering is a real pain.<P>
As noted previously, the domain of the BMP image format is generated from two format versions on each of two operating environments and contains three distinct variants; see <a href="199400c4.htm">Figure 1</A>. In each case, a BMP file contains, in the following order,  a file header, bitmap header, optional palette, and bitmap. Format variances are confined to the bitmap header and palette.<P>
Under Windows 3.1, the old format is represented by the structures BITMAPCOREHEADER, BITMAPCOREINFO, and RGBTRIPLE, while the newer format comprises BITMAPINFOHEADER, BITMAPINFO, and RGBQUAD. Both versions also include the BITMAPFILEHEADER structure. It should also be noted that a &quot;COREINFO&quot; structure consists of a &quot;COREHEADER&quot; followed by one or more RGBTRIPLE instances; similarly, an &quot;INFO&quot; structure consists of an &quot;INFOHEADER&quot; followed by one or more RGBQUAD instances. (I'm using the convention of paraphrasing names by dropping the BITMAP prefix and placing the remaining name in quotes.)<P>
The corresponding OS/2 structure names are a bit more logical by themselves and a bit less logical when you lump them with the Windows names. The old format consists of BITMAPINFOHEADER, BITMAPINFO, and RGB, while version 2 names are BITMAPINFOHEADER2, BITMAPINFO2, and RGB2. As with the Windows versions, both structure sets also include a BITMAPFILEHEADER structure. The file-header structures are identical under both operating environments.<P>
You may have noticed that the old OS/2 names are the same as the new Windows names. A second complication is that the structures overlap in both environments. Thus, a &quot;COREINFO&quot; consists of a &quot;COREHEADER&quot; and an RGBTRIPLE array, and an &quot;INFO&quot; consists of an &quot;INFOHEADER&quot; and an RGBQUAD array (using Windows in this example). If this all seems confusing, don't be alarmed--it is!<P>
Palette entries in the old form of the format consist of three bytes indicating a blue, green, and red intensity, respectively. The newer versions add a fourth byte so that the palette can be read as an array of longs. Note that the traditional RGB order is evident when read into a long value on an Intel processor and then notated in hex.<P>
The bitmap of a BMP file is organized as a series of scanlines and is presented beginning with the bottom row of the image and proceeding up. A second requirement is that scanlines are always padded, if necessary, so that they occupy an even number of 32-bit double-words. Given an image <I>w</I> pixels wide where each pixel is <I>d</I> bits deep, the number of bytes per scanline is calculated as <I>rowbytes</I>=((<I>w</I>*<I>d</I>+31)/32)*4.<P>
<h3><a name="00c2_0046">BMP Structure Items<a name="00c2_0046"></h3><P>
Generally speaking, unused or unimportant fields can safely be set to 0 in all situations. (In the following discussion, the names of the OS/2 structure items precede Windows names.)<P>
<UL>
<li>usType/bfType<I> is used to validate the file as being a BMP file and also to indicate its content. (The first word of the BITMAPFILEHEADER is always the first item of a BMP file.) For a BMP image file, this field always contains the value 4D42h which, when presented as low-byte/high-byte, consists of the two ASCII characters BM, short for &quot;BitMap.&quot; Windows does not appear to support any additional values for this field, but OS/2 supports at least six possible values; see <a href="#00c2_0049">Table 1</A>.</I></li>
<li>cbSize/bfSize<I> indicates the size of the file. In older instances of the format it is frequently 0, and when set, it is sometimes the size of the file in bytes, and other times, the size of the file in words, depending on who wrote the file. Thus, you should never make assumptions based on its value. The correct interpretation is file size in bytes.</I></li>
<li>offBits/bfOffBits<I> indicates the offset in bytes from the beginning of the file to the beginning of the bitmap, and is an important value. It is used to locate the file's bitmap and to calculate the number of entries in the palette as: </I>ncolors=(offBits-file_hdr_size-bitmap_hdr_size)/rgb_size<I>.</I></li>
<li>cbFix/biSize<I> is the size of the bitmap header in bytes. This value is also used to determine what version of the format you are dealing with. If the value is 12, then you have an instance of either the old Windows format or the old OS/2 format (they are identical). If the value is 40, you have an instance of the new Windows format. If the value is 64, then you have an instance of the new OS/2 format. And if the value is some other value between 12 and 64, you might have an instance of a newer format, and then again, you might not. For example, the file OS2LOGO.BMP that comes with OS/2 Version 2.1 has a value of 36 because the last double-word of the bitmap header is not present. Many applications check this field for value 40; if it isn't 40, they assume that the file is not a BMP file. As you can see, this is not a very good strategy.</I></li>
<li>cx/biWidth<I> is the width of the image in pixels. This value does not reflect scanline padding.</I></li>
<li>cy/biHeight<I> is the height of the image in rows.</I></li>
<li>cPlanes/biPlanes<I> is the number of planes in the bitmap. I have yet to see a value here other than 1, since the preferred format is for chunky pixels.</I></li>
<li>cBitCount/biBitCount<I> is the number of bits per pixel. Valid values are 1, 4, 8, and 24.</I></li>
<li>ulCompression/biCompression<I> is a value indicating the type of compression employed on the bitmap. Zero indicates no compression, and this is likely to be the only value you will ever encounter.</I></li>
<li>cbImage/biSizeImage<I> is the size of the bitmap in bytes. Some applications depend upon a correct (nonzero) value here.</I></li>
</UL>
<h3><a name="00c2_0047">A BMP-Format Class Design<a name="00c2_0047"></h3><P>
There are many possible approaches to handling the BMP format from an application, all of which depend upon the requirements and operational domain of the application. For example, if you are writing for Windows 3.1 only, then dealing only with the newer Windows version of the format is an acceptable option. On the other hand, we are seeing more and more emphasis on cross-platform capabilities these days, and from this standpoint it seems desirable to handle the format no matter what--no excuses, no exceptions. This is obviously the most desirable strategy in any case, but also the one requiring the most work and presenting the most headache. However, once a suitable black box has been constructed and determined to function properly, it will never again have to be pondered; at least, not until somebody deems that a version 3 of the format is necessary.<P>
The approach I took in my own development was to base a BMP class on the OS/2 2.1 format, which represents, in effect, a superset of all other format variants. When another variant is encountered on input, it is treated as if it were an incomplete form of the OS/2 format, one where default values are supplied for missing items. Conversely, if it is required to output a different format variant, it is a simple matter to omit extraneous items and to supply reformatting where necessary. A second aspect of the design is that I elected to treat BMP files as consisting of two components only: a large header followed by a bitmap. Thus, in place of a file header, a bitmap header, and a color array there is simply a header. This goes against conventional design wisdom to a certain extent, in that it is less modular. However, the interdependence of the various data structures tends to neutralize the benefits of a modular implementation.<P>
When it is necessary to supply data components from the format for an instance of a BITMAPFILEHEADER alone, the BMP class provides member functions that return void pointers that can then be cast to the appropriate type. And if the required type is formatted differently than the class's &quot;native&quot; type, a reformatted version can be constructed on the fly in a temporary buffer and a pointer to the buffer returned.<P>
With this background, a suitable, skeletal class definition would look something like <a href="#00c2_004a">Example 1</A>. For more details, see <a href="#00c2_004b">Listing One</A> and <a href="#00c2_0129">Two</A>, page 82.<P>
<h3><a name="00c2_0048">Final Thoughts<a name="00c2_0048"></h3><P>
At this point you probably have a good idea of the complexity and capabilities of the BMP format. What is more difficult to convey is the format's importance and how to access and use it within a PM or Windows application. You might start by examining those functions in either platform's API that use BMP-format components as arguments and experimenting with them. BMPTEST.CPP, available electronically in both source and executable form (see &quot;Availability,&quot; page 3) is a program that can serve as a starting point, in this case for my platform of choice, OS/2. Eventually you should find this familiar stranger to be a bit more familiar, and hopefully, a bit less strange!<P>
<a href="199400c5.htm">Figure 1</A>  BMP format domains.
<h4><a name="00c2_0049"><B>Table 1:</B> BMP file header usType (OS/2) values.<a name="00c2_0049"></h4><P>
<PRE>
    Hex Value   Characters   Meaning

    4142        BA           Bitmap array
    4D42        BM           Bitmap
    4943        CI           Color icon
    5043        CP           Color pointer (mouse cursor)
    4349        IC           Icon
    5450        PT           Pointer (mouse cursor)</pre><P>
<h4><a name="00c2_004a"><B>Example 1:</B> A skeletal class definition for encapsulating BMP files.<a name="00c2_004a"></h4><P>
<pre>class BmpImage
{
   public:
   enum BmpVersions
   {
      BMPOS2NEW,
      BMPOS2OLD,
      BMPWINNEW,
      BMPWINOLD
   };
   BmpImage( );
   ~BmpImage( );
   int read( char *path );
   int write( char * path, int version=BMPOS2NEW );
   void * filehdr( int version=BMPOS2NEW );
   void * bmaphdr( int version=BMPOS2NEW );
   void * palette( int version=BMPOS2NEW );
   void * bits( );
}    ;</pre><P>
<P>
<h4><a name="00c2_004b">Listing One <a name="00c2_004b"></h4><pre>

//------------------------------------------------------------------//
//  File:  BMP.H  -- Classes for encapsulating the BMP format       //
//  Copr:  Copyright (c) 1994 by Marv Luse                          //
//------------------------------------------------------------------//

#ifndef _BMP_H_
#define _BMP_H_

//.......Useful types
typedef unsigned char  uchar;
typedef unsigned short ushort;
typedef unsigned long  ulong;

//.......Useful constants
enum FileOrigins
{
   FILEBGN = SEEK_SET,
   FILECUR = SEEK_CUR,
   FILEEND = SEEK_END,
};
enum FileStates
{
   FILEOKAY,
   FILEENDOFFILE,
   FILENOTFOUND,
   FILEINVALID,
   FILENOTBMP,
   FILENOTBMPIMG,
   FILEERROR,
   FILENOMEMORY,
};
enum BmpVersions
{
   BMPWINOLD,
   BMPOS2OLD,
   BMPWINNEW,
   BMPOS2NEW,
};
enum BmpSizes
{
   BMPFILEHDRSIZE   = 14,
   BMPOLDANYHDRSIZE = 12,
   BMPNEWWINHDRSIZE = 40,
   BMPNEWOS2HDRSIZE = 64,
};
enum BmpTypes
{
   BMPARRAY       = 0x4142,    // 'BA'
   BMPBITMAP      = 0x4D42,    // 'BM'
   BMPCLRICON     = 0x4943,    // 'CI'
   BMPCLRPOINTER  = 0x5043,    // 'CP'
   BMPICON        = 0x4349,    // 'IC'
   BMPPOINTER     = 0x5450,    // 'PT'
};
//.......A class for performing binary input
class BinaryInput
{
   private:
   FILE * inp;
   public:
   BinaryInput( char * path );
   ~BinaryInput( );
   //.....read various types
   int  byte( );
   int  word( );
   long dword( );
   int  block( void * blk, int nbytes );
   //.....file management members
   int  ok( );
   int  error( );
   int  seek( long ofs, int org );
   long tell( );
};
//.......A class for a BMP header and bitmap
class BmpImage
{
   private:
   char  *bmBits;              // bitmap data
   ulong  bmNumColors;         // size of palette
   int    fiBmpStatus;         // a status code

   char  *tmpfilehdr;          // temporaries
   char  *tmpbmaphdr;
   char  *tmppalette;

   public:

   ushort fiType;              // type - 'BM' for bitmaps
   ulong  fiSizeFile;          // file size in bytes
   ushort fiXhot;              // 0 or x hotspot
   ushort fiYhot;              // 0 or y hotspot
   ulong  fiOffBits;           // offset to bitmap
   ulong  bmSizeHeader;        // size of this data - 64
   ulong  bmWidth;             // bitmap width in pixels
   ulong  bmHeight;            // bitmap height in pixels
   ushort bmPlanes;            // num planes - always 1
   ushort bmBitCount;          // bits per pixel
   ulong  bmCompression;       // compression flag
   ulong  bmSizeImage;         // image size in bytes
   long   bmXPelsPerMeter;     // horz resolution
   long   bmYPelsPerMeter;     // vert resolution
   ulong  bmClrUsed;           // 0 -&gt; color table size
   ulong  bmClrImportant;      // important color count
   ushort bmUnits;             // units of measure
   ushort bmReserved;          // reserved
   ushort bmRecording;         // recording algorithm
   ushort bmRendering;         // halftoning algorithm
   ulong  bmSize1;             // size value 1
   ulong  bmSize2;             // size value 2
   ulong  bmIdentifier;        // for application use
   ulong  bmPalette[256];      // image palette

   BmpImage( char * path );
   ~BmpImage( );

   //.....member functions - query
   long   width( );            // bitmap width in pixels
   long   height( );           // bitmap height in pixels
   long   depth( );            // bitmap depth in bits
   long   rowbytes( );         // scan line width in bytes
   long   size( );             // bitmap size in bytes
   int    planes( );           // number of planes
   int    bits( );             // bits per plane
   int    compression( );      // compression type
   int    xres( );             // x res as pels/meter
   int    xdpi( );             // x res dots/inch
   int    yres( );             // y res as pels/meter
   int    ydpi( );             // y res dots/inch
   void * filehdr( int vers ); // ptr to bmp file header
   void * bmaphdr( int vers ); // ptr to bmp info header
   void * palhdr( int vers );  // ptr to bmp rgb array
   void * bitmap( int vers );  // ptr to bmp bitmap data
   int    status( );           // image/file status code
};
#endif

</pre>
<h4><a name="00c2_0129"><a name="00c2_004c">Listing Two<a name="00c2_004c"></h4><pre>
//-------------------------------------------------------------------//
//  File:  BMP.CPP -- Classes for encapsulating the BMP format       //
//  Copr:  Copyright (c) 1994 by Marv Luse                          //
//------------------------------------------------------------------//
// Notes... (1) Only BMP input is illustrated here, and in general, the code 
// is intended as a model only. (2) No size typing is performed on pointers or
// the objects to which they point (i.e., near, far, huge, etc). This is 
// normal for OS/2, but since Windows is 16-bit, the code will need to be 
// modified slightly for that environment. In particular, if the entire bitmap
// is to be accessible through a single pointer, that pointer should be 
// declared huge. (3) The code was tested under OS/2 2.1 using the Borland
// 1.0 OS/2 compiler. Tweaking may be necessary with other environment mixes.

#include &quot;stdlib.h&quot;
#include &quot;stdio.h&quot;
#include &quot;string.h&quot;
#include &quot;bmp.h&quot;

//.......A class for performing binary input
BinaryInput::BinaryInput( char * path )
{
   inp = fopen( path, &quot;rb&quot; );
}
BinaryInput::~BinaryInput( )
{
   if( inp ) fclose( inp );
}
int BinaryInput::byte( )
{
   return fgetc( inp );
}
int BinaryInput::word( )
{
   short s;
   fread( &amp;s, sizeof(short), 1, inp );
   return s;
}
long BinaryInput::dword( )
{
   long l;
   fread( &amp;l, sizeof(long), 1, inp );
   return l;
}
int BinaryInput::block( void * blk, int nbytes )
{
   return fread( blk, nbytes, 1, inp );
}

int BinaryInput::ok( )
{
   return ((inp==0) || ferror(inp) || feof(inp)) ? 0 : 1;
}
int BinaryInput::error( )
{
   if( inp == 0 )    return FILENOTFOUND;
   if( feof(inp) )   return FILEENDOFFILE;
   if( ferror(inp) ) return FILEERROR;
   return FILEOKAY;
}
int BinaryInput::seek( long ofs, int org )
{
   return inp ? fseek( inp, ofs, org ) : FILEERROR;
}
long BinaryInput::tell( )
{
   return inp ? ftell( inp ) : -1;
}
//.......A class for a BMP header and bitmap
BmpImage::BmpImage( char * path )
{
   //.....initialize nonformat items
   bmBits = 0;
   bmNumColors = 0;
   tmpfilehdr = tmpbmaphdr = tmppalette = 0;
   //.....the remaining items constitute a valid OS/2 2.x BMP header set
   memset( &amp;fiType,0,BMPFILEHDRSIZE + BMPNEWOS2HDRSIZE + sizeof(long) * 256 );
   //.....instantiate the input stream
   BinaryInput inB( path );
   if( ! inB.ok() )
   {
      fiBmpStatus = inB.error( );
      return;
   }
   //.....get the file header type field and verify
   fiType = (ushort) inB.word( );
   switch( fiType )
   {
      case BMPBITMAP:
           break;
      case BMPARRAY:
      case BMPCLRICON:
      case BMPCLRPOINTER:
      case BMPICON:
      case BMPPOINTER:
           fiBmpStatus = FILENOTBMPIMG;
           return;
      default:
           fiBmpStatus = FILENOTBMP;
           return;
   }
   //.....read rest of file hdr, which isn't versn dependent
   fiSizeFile = inB.dword( );
   fiXhot     = (ushort) inB.word( );
   fiYhot     = (ushort) inB.word( );
   fiOffBits  = inB.dword( );
   //.....get the bitmap header size field and verify
   bmSizeHeader = inB.dword( );
   switch( bmSizeHeader )
   {
      case BMPOLDANYHDRSIZE:
      case BMPNEWWINHDRSIZE:
      case BMPNEWOS2HDRSIZE:
           break;
      default:
           if( (bmSizeHeader &lt; BMPOLDANYHDRSIZE) ||
               (bmSizeHeader &gt; BMPNEWOS2HDRSIZE) )
           {
               fiBmpStatus = FILENOTBMP;
               return;
           }
           break;
   }
   //.....read the rest of the bitmap header and palette
   if( bmSizeHeader == BMPOLDANYHDRSIZE )
   {
      bmWidth     = inB.word( );
      bmHeight    = inB.word( );
      bmPlanes    = (ushort) inB.word( );
      bmBitCount  = (ushort) inB.word( );
      bmNumColors = (fiOffBits - bmSizeHeader - BMPFILEHDRSIZE) / 3;
      bmSizeImage = rowbytes( ) * bmHeight;
      for( int i=0; i&lt;bmNumColors; i++ )
      {
         long blu = inB.byte( );
         long grn = inB.byte( );
         long red = inB.byte( );
         bmPalette[i] = (red &lt;&lt; 16) | (grn &lt;&lt; 8) | blu;
      }
   }
   else
   {
      long nbytes = bmSizeHeader - 4;
      inB.block( &amp;bmWidth, nbytes );
      bmNumColors = (fiOffBits - bmSizeHeader - BMPFILEHDRSIZE) / 4;
      if( bmNumColors &gt; 0 )
         inB.block( bmPalette, bmNumColors * 4 );
   }
   //.....read the bitmap. Works only for bitmaps 64K or smaller under Windows.
   bmBits = new char [ rowbytes() * bmHeight ];
   if( bmBits )
   {
      inB.block( bmBits, rowbytes() * bmHeight );
      fiBmpStatus = inB.ok( ) ? FILEOKAY : inB.error( );
   }
   else
      fiBmpStatus = FILENOMEMORY;
}
BmpImage::~BmpImage( )
{
   delete [] tmpfilehdr;
   delete [] tmpbmaphdr;
   delete [] tmppalette;
   delete [] bmBits;
}
long BmpImage::width( )
{
   return bmWidth;
}
long BmpImage::height( )
{
   return bmHeight;
}
long BmpImage::depth( )
{
   return bmPlanes * bmBitCount;
}
long BmpImage::rowbytes( )
{
   return (((bmPlanes*bmBitCount*bmWidth) + 31) / 32) * 4;
}
long BmpImage::size( )
{
   return bmSizeImage ? bmSizeImage : rowbytes() * bmHeight;
}
int BmpImage::planes( )
{
   return bmPlanes;
}
int BmpImage::bits( )
{
   return bmBitCount;
}
int BmpImage::compression( )
{
   return bmCompression;
}
int BmpImage::xres( )
{
   return bmXPelsPerMeter;
}
int BmpImage::xdpi( )
{
   return (int) ((bmXPelsPerMeter * 100) / 3937);
}
int BmpImage::yres( )
{
   return bmYPelsPerMeter;
}
int BmpImage::ydpi( )
{
   return (int) ((bmYPelsPerMeter * 100) / 3937);
}
void * BmpImage::filehdr( int vers )
{
   // file header is not version dependent
   return (void *) &amp;fiType;
}
void * BmpImage::bmaphdr( int vers )
{
   // the first 40 bytes of the new OS/2 header is the same as the new Windows
   // header, except for the length value (40 versus 64); the old headers,
   // however, requires reformatting
   if( vers == BMPOS2NEW )
      return &amp;bmSizeHeader;
   // allocate space for worst case - 40 bytes
   if( tmpfilehdr == 0 )
      tmpfilehdr = new char [ BMPNEWWINHDRSIZE ];
   if( (vers == BMPWINNEW) &amp;&amp; (tmpfilehdr != 0) )
   {
      memcpy( tmpfilehdr, &amp;bmSizeHeader, BMPNEWWINHDRSIZE );
      *((ulong *) tmpfilehdr) = BMPNEWWINHDRSIZE;
   }
   else if( ((vers == BMPWINOLD) || (vers == BMPOS2OLD)) &amp;&amp;
            (tmpfilehdr != 0) )
   {
      // this is ugly, but safe and functional!
      *((ulong *) tmpfilehdr) = BMPOLDANYHDRSIZE;
      short * hdr = (short *) tmpfilehdr;
      hdr[2] = (short) bmWidth;
      hdr[3] = (short) bmHeight;
      hdr[4] = bmPlanes;
      hdr[5] = bmBitCount;
   }
   return (void *) tmpfilehdr;
}
void * BmpImage::palhdr( int vers )
{
   // The palette format is the same for both new
   // format versions, but the old format requires reformatting.
   if( (vers == BMPOS2NEW) || (vers == BMPWINNEW) )
      return (bmNumColors &gt; 0) ? (void *) &amp;bmPalette[0] : 0;
   // allocate space for old palette
   if( (tmppalette == 0) &amp;&amp; (bmNumColors &gt; 0) )
   {
      tmppalette = new char [ bmNumColors * 3 ];
      if( tmppalette != 0 )
      {
         char * s = (char *) &amp;bmPalette[0];
         char * d = (char *) tmppalette;
         for( int i=0; i&lt;bmNumColors; i++ )
         {
            *d++ = *s++;
            *d++ = *s++;
            *d++ = *s++;
            s++;
         }
      }
   }
   return tmppalette;
}
void * BmpImage::bitmap( int vers )
{
   // bitmap is not version dependent
   return (void *) bmBits;
}
int BmpImage::status( )
{
   return fiBmpStatus;
}
</pre><HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
