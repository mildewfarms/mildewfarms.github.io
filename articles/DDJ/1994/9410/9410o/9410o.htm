<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>OCT94: LETTERS</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>LETTERS<a name="011e_0001"></h1><P>
<h3><a name="011e_0002">More on Fractal Rulers<a name="011e_0002"></h3><P>
Dear <I>DDJ</I>,<P>
I was interested by the &quot;Algorithm Alley&quot; column about fractal rulers (<I>DDJ</I>, June 1994), particularly because Tom Swan sped up the algorithm by replacing recursion with an explicit stack. I was not convinced that this was the best way, especially as recursion may be faster than implementing the stack manually.<P>
I noticed that the pattern of the lengths of the markings of the ruler is the same as the number of 0s on the right-hand end of a binary number; see <a href="#011e_0005">Example 1(a)</A>.<P>
You can clear all but the least significant set bit of a number by calculating <I>n</I> and --<I>n</I>. This leaves you with a power of two, but the ruler markings should increase in size linearly. You could take the logarithm of <I>n</I> and --<I>n</I>, but this isn't very fast; you could test each bit in turn until you find one that's set, but that isn't very elegant; or you could consult alt.hackers on Usenet. Somebody will reply, reminding you that for such a small problem size, you can't beat a lookup table. (Thanks to David Jones at dej@eecg.toronto.edu for that one!) So the ruler algorithm is like that in <a href="#011e_0005">Example 1(b)</A>. This should be more efficient, but instead of demonstrating recursion elimination, it shows that you should look for a better algorithm before optimizing.<P>
Anthony Finch<P>
Bristol, England <P>
Dear <I>DDJ</I>,<P>
I enjoyed Tom Swan's &quot;Algorithm Alley&quot; column on drawing a ruler, but I should point out that he took the hard approach. If you number the ticks starting with 1, then it can be seen that the length of each tick (up to a maximum) is simply one more than the number of low-order 0 bits in the tick number. Taking that observation, and using C instead of Pascal (shudder), the routine could have been written as <a href="#011e_0006">Example 2</A>, which does not involve either recursion or stack usage. The code uses <I>line()</I> and <I>label()</I>. The <I>line()</I> function is the same as in Tom's article; <I>label()</I> was not mentioned there, but something had to draw the numbers! Also, I have assumed that both <I>line()</I> and <I>label()</I> are zero relative and that the <I>top</I> variable and the <I>charHeight</I> variable are set elsewhere. As you can also see, there is substantially less code than in the Pascal version, although there are additional variable definitions (some of which were left undefined in the Pascal version).<P>
Michael Lee Finney<P>
Lynchburg, Virginia<P>
<h3><a name="011e_0003">The Fuzzy-Logic Language Model<a name="011e_0003"></h3><P>
Dear <I>DDJ</I>,<P>
The trouble with fuzzy logic is that it <I>isn</I>'<I>t</I>--logic, that is. Fuzzy, maybe. Calling it &quot;logic&quot; at best confuses the issue, and at worst sounds like scammery.<P>
Fuzzy logic, at least the way it seems to be used today, is much more like a computer <I>language</I>--a translation product that allows the programmer to produce a program in high-level constructs, which are then translated into actual machine codes. Even when assembly language is used, this is still the approach, except that translation is done manually.<P>
Briefly, the fuzzy-logic language model is as follows:<P>
<UL>
<li> Inputs are characterized in real quantities as fuzzy things: The sensor range from 70 to 100 might be &quot;fast,&quot; and a range from 0 to 80 might be &quot;slow.&quot; The <I>degree</I> of fast and slow is variable, and both can be somewhat true at the same time. These things are controlled by relatively simple input functions which, apparently, come in different flavors.</li>
<li> A set of fuzzy &quot;rules&quot; is used to combine these fuzzy inputs and produce fuzzy outputs, somewhat analogously to ordinary logic, except that the exact method used is <I>not fixed</I>. Apparently there are varying strategies available, which have their fans and likely applications. &quot;Fast&quot; and &quot;heavy&quot; inputs might trigger a fuzzy &quot;brakes&quot; output, for instance.</li>
<li> The fuzzy outputs are &quot;de-fuzzified.&quot; &quot;Hi-power&quot; might signify that a value of 200 should be applied to a digital-to-analog converter that controls a motor.</li>
</UL>
There is nothing particularly &quot;logical&quot; about this process that I can discern, anymore than there is anything especially logical about the translation of a C program into assembly language. (By the way, I learned all this useful stuff, and therefore became an immediate expert on fuzzy logic, by using the fuzzyTECH 3.1 MCU-166 Explorer Edition toolkit from Inform Software Corporation, 1840 Oak Avenue, Evanston, IL 60201, 800-929-2815. I don't know what other platforms and/or demo packages they offer. The one I used was for the Siemens 80C166 processor and probably wouldn't appeal to many, but the product is an excellent introduction to fuzzy logic.)<P>
I am <I>not</I> antifuzzy. To emphasize my initial point, I feel referring to this stuff as &quot;logic&quot; or &quot;a logic&quot; is confusing at best, and misleading at worst. As a language tool, this thing is probably quite useful for the embedded-control applications for which it is in fact used. Will it or something like it also solve the mysteries of consciousness and the future of mankind? I don't think so.<P>
Gregor Owen <P>
CompuServe 71121,625<P>
<h3><a name="011e_0004">NT Services<a name="011e_0004"></h3><P>
Dear <I>DDJ</I>,<P>
I enjoyed reading Marshall Brain's article &quot;Inside Windows NT Services&quot; (<I>DDJ</I>, May 1994). However, I did want to alert Marshall and <I>DDJ</I> readers to a typographical error in the Windows NT SDK concerning NT services. The prototypes for the <I>ServiceMain</I> and <I>ControlHandler</I> functions in the <I>include</I> file WINSVC.H should be prototyped to use the WINAPI (or CALLBACK) calling convention. See <a href="#011e_0007">Example 3</A>. <P>
The WINAPI and CALLBACK macros are defined in the NT SDK as <I>__stdcall</I>. The <I>ServiceMain</I> and <I>ControlHandler</I> functions must use the <I>__stdcall</I> calling convention. Failure to use the correct calling conventions will result in an improperly functioning service. The next version of the NT SDK will correctly prototype these functions.<P>
Peter Santoro<P>
Microsoft Consulting Service<P>
<h4><a name="011e_0005"><B>Example 1:</B> An alternative fractal-ruler algorithm.<a name="011e_0005"></h4><P>
<pre>(a)
      0 = 0000 -&gt; 4 -&gt; -----
      1 = 0001 -&gt; 0 -&gt; -
      2 = 0010 -&gt; 1 -&gt; --
      3 = 0011 -&gt; 0 -&gt; -
      4 = 0100 -&gt; 2 -&gt; ---
      5 = 0101 -&gt; 0 -&gt; -
      6 = 0110 -&gt; 1 -&gt; --
      7 = 0111 -&gt; 0 -&gt; -
      8 = 1000 -&gt; 3 -&gt; ----
      9 = 1001 -&gt; 0 -&gt; -
     10 = 1010 -&gt; 1 -&gt; --
     11 = 1011 -&gt; 0 -&gt; -
     12 = 1100 -&gt; 2 -&gt; ---
     13 = 1101 -&gt; 0 -&gt; -
     14 = 1110 -&gt; 1 -&gt; --
     15 = 1111 -&gt; 0 -&gt; -
(b)
       void ruler(double length,        /*of ruler (screen units) */
           int subdivs,    /* in an inch (power of 2) */
           double step,    /* for each subdivision (screen units) */
           double min_mark_len,   /* length of smallest mark (ditto) */
           double mark_incr, /* difference in length of marks (ditto) */
           double long_mark_len,/* length of the inch markers (ditto) */
           double num_size  /* for the inch numbers (do I really need to
           say it again?) */
   {
        double mark_pos, mark_len;
        int counter, inch;
        const char zeros[64] = {
            6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
            4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
            5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
            4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
          };
     assert(subdivs == 1
         || subdivs == 2
         || subdivs == 4
         || subdivs == 8
         || subdivs == 16
         || subdivs == 32
         || subdivs == 64);
     inch = 0;
     counter = subdivs;
     for(mark_pos = 0; mark_pos &lt; length; mark_pos += step)
     {
       if(counter == subdivs)
       {
         line(mark_pos, 0, mark_pos, long_mark_len);
         plot_num(inch, mark_pos, long_mark_len, num_size);
         counter = 1;
         ++inch;
       }
       else
       {
         mark_len = min_mark_len + zeros[counter] * mark_incr;
         line(mark_pos, 0, mark_pos, mark_len);
         ++counter;
       }
     }
   }</pre><P>
<h4><a name="011e_0006"><B>Example 2:</B> More on fractal rulers.<a name="011e_0006"></h4><P>
<pre>// assumed variables and functions...
extern unsigned top;
extern unsigned charHeight;
void line(unsigned x1, unsigned y1, unsigned x2, unsigned y2);
void label(usigned x, unsigned y, char *s);
void ruler(
   unsigned segments,     // Number of complete segments
   unsigned partialTicks) // Must be in range 0..ticksPerSegment-1
   {
   unsigned const tickIncrement   = 1;
   unsigned const ticksPerSegment = 16;    // Must be power of two.
   unsigned const tickLength[ticksPerSegment] =
      {1 * tickIncrement,
       2 * tickIncrement, 0,
       3 * tickIncrement, 0, 0, 0,
       4 * tickIncrement, 0, 0, 0, 0, 0, 0, 0,
       5 * tickIncrement};
   unsigned ticks  = ticksPerSegment * segments + partialTicks;
   unsigned length;
   char s[16];
   for (unsigned i = 0; i &lt; ticks; i++)
      {
      length = tickLength[min(x ^ (unsigned long)(x + 1),
ticksPerSegment - 1)];
      line(i, top, i, top - length);
      if (i &amp;&amp; (i % ticksPerSegment == 0))
         label(i, top - length - charHeight, itoa(i / ticksPerSegment,
                                                         s, 10));
      }
   }</pre><P>
<h4><a name="011e_0007"><B>Example 3:</B> NT services.<a name="011e_0007"></h4><P>
<pre>// Function Prototype for the Service Main Function
typedef VOID(WINAPI*LPSERVICE_MAIN_FUNCTIONW)(
  DWORD dwNumServicesArgs,
  LPWSTR*lpServiceArgVectors
  );
typedef VOID(WINAPI*LPSERVICE_MAIN_FUNCTIONA)(
  DWORD dwNumServicesArgs,
  LPSTR*lpServiceArgVectors
  );
//Prototype for the Service Control Handler //Function
typedef VOID(WINAPI*LPHANDLER_FUNCTION)(
  DWORD dwControl
  );
</pre>

<HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
