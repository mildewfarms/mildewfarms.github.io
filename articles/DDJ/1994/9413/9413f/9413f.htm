<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>SP 94: Programming the QUANTUMdsp</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Programming the QUANTUMdsp<a name="0209_0003"></h1><P>
<h2><a name="0209_0001"><a name="0209_0000">Downloadable microcode makes softcoding a reality</h2><P>
<h3>Charles A. Mirho</h3><P>
<p><i><a name="0209_0002"><a name="0209_0000">Charles is a consultant specializing in multimedia and telephony. He can be reached on CompuServe at 70563,2671.</i></p><hr><P>
Many conventional multimedia boards are <I>hard function</I> in that their capabilities are defined by ROM chips (or ROM embedded in microcontrollers) planted on the board at the factory. The problem with the hard-function approach is that technology, particularly in the areas of audio compression and telecommunications, marches ruthlessly on. How state-of-the-art is that 8-bit SoundBlaster board you purchased two years ago, or that three-year-old modem? New compressions offering improved quality and higher ratios are constantly being invented. Standards evolve. Modem and fax technology advances toward higher bit rates. As a result, hard-function hardware becomes less than state-of-the-art within months of its manufacture. The QUANTUMdsp board from Communication Automation &amp; Control offers a solution to this dilemma. The microcode that other multimedia and telephone boards hardcode into ROM is encapsulated into disk files. These disk files are downloaded to the board's local RAM as needed. The QUANTUMdsp's capability at any given time is defined by the contents of this RAM. Therefore, the board can be decoding a JPEG image while simultaneously playing MPEG-coded audio and rotating multiple 3-D wireframes. Or it can be synthesizing MIDI while answering the telephone, simply by replacing the contents of RAM with a new set of functions. The great advantage of this approach is that pieces of the microcode can be combined and configured on the fly. What's more, updating the microcode disk files updates the board's capabilities. For instance, the initial beta version I had contained a disk file with microcode to emulate a 9600-baud modem. Within weeks I received a floppy disk with new microcode to emulate a 14.4-baud modem. I copied the new file over the old one, and I had a working 14.4-baud modem running from the Windows Terminal program.<P>
The QUANTUMdsp board supports advanced audio-compression formats such as MPEG, G.722, G.728, and subband coding, as well as the more well-known mLaw, aLaw, and ADPCM compressions. The board includes a general-MIDI synthesizer, baseline 24-bit JPEG decoder, 14.4-Kbps analog modem, Class I fax, speaker-independent voice recognition, and a fast, graceful means of rotating 3-D wireframes. And, as just mentioned, many of these are available simultaneously.<P>
<h3><a name="0209_0004">Sound Familiar?<a name="0209_0004"></h3><P>
Historically, this isn't a new approach. Desktop printers followed a similar evolution during their early stages. Over the last 15 years, printers evolved away from hard function. Early printers had only a built-in set of fonts (still true of low-end printers). When an application used the printer, it was stuck with these internal fonts. If, later on, the application required better fonts, the user had to purchase a new printer, or possibly upgrade the printer's ROM chip to include the new fonts. Then laser printers came along, and everything changed. If an application required a font not included in the printer's internal set, it simply downloaded a suitable &quot;soft font&quot; to the printer. This flexibility was a strong influence in the rise of desktop publishing.<P>
<h3><a name="0209_0005">How it Works<a name="0209_0005"></h3><P>
A library of microcode files (the manual calls them &quot;modules&quot;) are stored in a separate directory. These modules can be combined sequentially using a simple scripting language. <a href="#0209_000b">Example 1</A>, for instance, shows a script file for playing linear, 16-bit audio at 8000 samples per second. Linear data exists in the raw, 16-bit native format of the A/D converter that sampled it. No special processing is required to play linear data; it's moved directly from the source to the speaker. This is rarely the case--audio data is usually coded, which means each sample has been compressed. (Without compression, audio files can consume 2 to 50 times more space on a hard drive.) The script in <a href="#0209_000b">Example 1</A> offers some insight into the board's inner workings. The first two lines declare a <I>flow-control buffer</I>. A Windows application can get a pointer to this buffer and fill it with audio data from a disk file. (We will see how this is done in a moment.) The flow-control buffer is needed for two reasons. First, the Windows application runs on the PC (Intel) processor under cooperative multitasking, which means its behavior is nondeterministic. That is, it is subject to unpredictable delays. The module (<I>fta</I> in the script) is responsible for feeding data to the speaker at exactly 8000 samples per second. That means having a steady supply of audio data on hand at all times; delays are unacceptable, unless you enjoy gaps and hiccups in your audio. The module cannot be left to the mercy of the Windows program, since the Windows program is at the mercy of other Windows programs, ISRs, the Windows memory manager, and so forth.<P>
The second reason for the flow-control buffer is a bit more complex and involves signal theory. Essentially, the problem is that it is most efficient for programs to read large chunks of data at a time from disk files. The Windows program, for the sake of efficiency, would like to read between 4 Kbytes and 32 Kbytes at a time from the audio file. The DSP module, on the other hand, must execute in real time. (The playing of audio is inherently real-time in nature, since we hear sound in real time.) For this reason the DSP module can only deal with tiny chunks of data at any one time (typically between 50 and 3000 bytes). The flow-control buffer lets both the Windows application and the DSP module have it their way--the app feeds large chunks of data into one end of the buffer at a rate it is comfortable with, while the DSP module takes data in small blocks from the other end at its own rate. For this to work, the buffer needs two ends, a head, and a tail. Thus the flow-control buffer is implemented as a FIFO data queue.<P>
The FIFO is a circular buffer with associated read and write pointers. The read pointer marks the spot in the FIFO where the next read operation will find data. The write pointer marks the spot where the next write operation will put data. In <a href="1994020b.htm">Figure 1</A>, the area indicated in light green contains data. Reading this data increments the read pointer. Writing more data increments the write pointer. The FIFO is full when the write pointer is one position to the left of the read pointer. The FIFO is empty when the read and write pointers are equal.<P>
The third line in the script declares a <I>channel</I>--a connection to an external device (such as a speaker, microphone, or telephone line). Channels have two other characteristics besides the device type: the <I>sampling rate</I> and the <I>device number</I>. The sampling rate is simply the number of samples per second that will pass through the channel. The device number specifies which device of the specified type you wish to connect to. If two speakers are connected to the board, you could direct the audio to the first speaker by setting the device number to 1. A declaration of the channel in the form <I>device.type_sample.rate_<P>device.number</I> defines all of these characteristics: 8000 samples per second flow over the channel to the first speaker connected to the board. Therefore, <I>AudOut_8_1 </I>in <a href="#0209_000b">Example 1</A> specifies an audio output device (a speaker) with 8000 samples per second, which connects to the first speaker (there may be more than one).<P>
Finally, the module itself is declared. The module <I>fta</I> is nothing more than a piece of DSP microcode. The definition of modules in the script is object oriented; each module is treated as a &quot;black box&quot; with inputs, outputs, and possibly, controls. The <I>fta</I> module is simply designed to take &quot;bites&quot; of its input and move them to its output. The input of <I>fta</I> is connected to the flow control buffer, and the output is connected to the channel. <I>fta</I> bites off 80 samples at a time from the flow-control buffer and moves them out over the channel where they reach the speaker to be perceived as sound. The DSP always reads 100 blocks of data per second for a total throughput of 8000 samples per second.<P>
Taken in its entirety, the script defines the flow of audio data from the Windows application to the first speaker connected to the board. Graphically, the data flow looks like <a href="1994020c.htm">Figure 2</A>.<P>
The module library is full of simple, useful modules like <I>fta</I>. The modules can be combined sequentially in a script to form more-complex multimedia functions. However, such examples are beyond the scope of this article.<P>
<h3><a name="0209_0006">Change is Easy<a name="0209_0006"></h3><P>
You may be wondering if all of this scripting is worth the trouble. After all, playing 16-bit uncompressed audio at 8000 samples per second is hardly a monumental feat. <a href="#0209_000c">Example 2</A>, however, shows how simple it is to modify the script for playing audio at 44,100 samples per second. The only difference is in the channel declaration, <I>AudOut_<P>44_1</I>. The number 44 is shorthand for 44,100, just as 8 is shorthand for 8000.<P>
Suppose you wanted to record audio at 44,100 samples per second instead of playing it. You simply modify the script to reverse the flow of data; see <a href="#0209_000d">Example 3</A>. There are two changes to the script in <a href="#0209_000d">Example 3</A>. The first is the channel declaration, which changes the device type from <I>AudOut</I> (specifying a speaker) to <I>AudIn</I> (specifying a microphone). The second difference is that the <I>fta</I> module has been replaced with the module <I>atf</I>, which works like <I>fta</I> but in reverse; it accepts blocks of data from the channel and moves them to the flow-control buffer. Graphically, the flow of data looks like <a href="1994020d.htm">Figure 3</A>. To add or remove compression from the audio stream, a coder/decoder module could be added in series with either the <I>atf</I> or <I>fta</I> module. The module library is full of useful coders and decoders.<P>
<h3><a name="0209_0007">Some C Required<a name="0209_0007"></h3><P>
Returning to the example of playing 16-bit, linear audio at 8000 samples per second, on the Windows side, a C program is required to read the data file and move the audio data into the flow-control buffer so that it can be sent out over the channel. <a href="#0209_000f">Listing One</A>, page 46 shows the complete program. The program has the structure of a DOS program and is compiled and linked for QuickWin. This isn't a requirement, but I use it for the benefit of DOS programmers making the transition to Windows. QuickWin programs are much easier to follow than conventional Windows programs, while still illustrating all the important concepts.<P>
The program begins with a list of necessary header files. In addition to the standard C header files, the file vclib.h is included. This header defines the API to the multimedia board. You can easily spot board-specific functions in the example; they are all prefixed by the letters <I>vc</I>.<P>
The first call is to function <I>vcAddTask</I>, which loads the script file. The microcode from any disk modules in the script are downloaded to the board at this point. The 40,000-byte flow-control buffer defined in the script is also allocated. The first parameter to <I>vcAddTask</I> is the DSP number on which the script will execute. Each board contains a single floating-point 32-bit DSP running at 55 MHz. This should be enough for all but the most intensive applications. If you need more power, however, up to four boards can be added in a single machine. The second parameter is the name of the script file to load. The function returns a handle which will be used to identify this script in future function calls. (A single program can load many scripts simultaneously.)<P>
At this point the script is loaded and idle. The example calls the functions <I>vcGetFifoHandle</I> and <I>vcInitFifo.</I> The function <I>vcGetFifoHandle</I> returns a handle to the FIFO buffer, just as the Windows memory-allocation functions return handles to memory blocks. This handle will be dereferenced shortly when it is time to move data from <P>the file into the FIFO. The call to <I>vcInitFifo</I> simply sets the FIFO read pointer equal to the value of the FIFO write pointer, indicating that no data is available in the FIFO (the empty state).<P>
Next the data file is opened. This <P>data file contains audio data sampled at 8000 samples per second. After opening the data file, <a href="#0209_000f">Listing One</A> calls the function <I>DiskToFifo</I>. This isn't a board function but rather a local function for moving data from the audio file to the FIFO. We will see how the function does this in a moment; for now, suffice it to say that when the function returns, the FIFO is loaded with data and ready to go. The script is loaded and sitting idle with data in the buffer. All that remains is to call <I>vcStartTask</I> to get things started. <I>vcStartTask</I> takes a single parameter, the script handle returned by <I>vcAddTask</I>.<P>
<h3><a name="0209_0008">Inside <I>DiskToFifo</I><a name="0209_0008"></h3><P>
Function <I>DiskToFifo</I> moves data from the audio file to the FIFO. <I>DiskToFifo</I> dereferences the handle to the FIFO returned by the previous call to <I>vcGetFifoHandle</I>. It also returns the number of bytes available for writing in the FIFO. <I>vcGetFifoWritePtr</I> is used to get a pointer to the write FIFO. The FIFO write count is returned in the variable <I>lWriteCount</I>. The pointer to the FIFO is dereferenced into the variable <I>lpWrite</I>. The next line of code limits the number of bytes to move to less than 32 Kbytes. This isn't a limitation of the board software but rather a choice in this example to avoid huge data moves that can cause problems in the Intel segmented architecture.<P>
Data is read directly from the data file into the FIFO using the standard C language <I>read</I> function. Since data is read directly into the FIFO this way, the write count returned by <I>vcGetFifoWritePtr</I> must be the number of <I>consecutive</I> bytes available for writing in the FIFO (remember, FIFOs are circular buffers). Obviously, a function like <I>read</I> is &quot;unaware&quot; of the circular nature of the FIFO buffer, and so it is up to the program to supply the number of consecutive bytes.<P>
If an end-of-file condition is reached, indicating that all the data in the file has been moved to the FIFO, the read count is checked using the formula <I>lReadCount &amp;=~0x3L</I>.<P>
This formula rounds down to the nearest multiple of four bytes. This is necessary because the last read may have reached an end-of-file, so the actual read count is something less than the number of bytes requested. For example, if 0x7fff bytes were requested but only 1001 bytes remained in the file, then the read count will be 1001. This number must be rounded down to the nearest multiple of four bytes: <I>1001 &amp;=~3L0 </I>becomes <I>1000</I>. (An annoying anomaly of the FIFOs--they must be a multiple of four bytes in size, and must be read and written in multiples of four bytes.) Unfortunately, this discards the last byte in the file but it's  not usually a problem when playing audio files. If it is essential to preserve the last byte in the file, then pad bytes can be added, making the total read a multiple of four.<P>
Even after the entire file is read into the FIFO, it isn't yet safe to shut down and exit the program. The entire file has not been played until the FIFO is empty. The flag <I>donewriting</I> is set to indicate that the file has been read into the FIFO and we are now waiting for the FIFO to play out. An <I>if</I> statement at the top of the function checks if the FIFO has played out by calling the function <I>vcGetFifoReadCount</I>. The FIFO read count will be 0 when the FIFO is empty, indicating that all data has been played.<P>
The last statement in <I>DiskToFifo</I> is a call to the function <I>vcUpdateFifoWritePtr</I>. This function updates the read and write pointers for the FIFO. The FIFO pointers are not updated automatically when the FIFO is read or written, because there is no way for the board software to know how many bytes the standard C <I>read</I> function moved into the FIFO.<P>
The <I>main</I> function calls <I>DiskToFifo</I> from a tight loop until the entire file has been played. When <I>DiskToFifo</I> returns 0, indicating that all data has been played, <I>main</I> calls <I>vcDeleteTask</I> with the handle to the script file. This unloads the script and frees the memory allocated for the FIFO.<P>
<h3><a name="0209_0009">Support for Standards<a name="0209_0009"></h3><P>
Developers who prefer standards will be happy to know that the board supports all MPC functions for the playing and recording of wave audio, as well as for MIDI (synthesis only). Technically, the QUANTUMdsp is not MPC compliant because it does not include a MIDI port. MIDI output messages are directed to the board's general-MIDI synthesizer (also a downloadable microcode file). I tested the board with both Sound Recorder and Media Player and both worked well. <a href="#0209_000e">Table 1</A> shows the linear wave-audio formats supported by the board.<P>
Most of the audio formats can mix with one another in any combination. That means two or more audio files of different sampling rates and sample size can play simultaneously. Try that with a Soundblaster! Sample rate-converter modules in the microcode library allow two or more audio streams with different underlying sampling rates to mix on the same output channel. (The sample rate-converter modules are inserted automatically when the board software detects a format conflict.) Supported audio coder/decoders are G.722, G.728, MPEG Layer Two, ADPCM, mLaw, aLaw, and subband.<P>
Analog modem and fax (Class I) capabilities are available by replacing the standard Windows COMM driver with the board's COMM driver. Once the driver is installed, the Windows Terminal program can be used to dial from 14.4 kbps right on down to 300 bps. Any Windows communication program that uses the standard COMM driver will work as well. Fax programs which use the Windows COMM driver (such as BitFax from BIT Software) also work at 9600 baud. Demo programs for 3-D wireframes, 24-bit (16-million-color) JPEG still-image decompression, and an audio jukebox are included.<P>
<h3><a name="0209_000a">Conclusion<a name="0209_000a"></h3><P>
While the microcode library supports an impressive set of audio functions, there's relatively little in the way of image compressions (only JPEG). The lack of a MIDI or joystick port are certainly drawbacks for the music-composition and game markets. Motion video isn't supported, but a video daughterboard is planned for the future.<P>
Still, the high-powered set of audio compressions are well suited to voice mail and teleconferencing applications. The fast JPEG decoder and MPEG audio compression should be very useful in top-end presentation packages. The telephone and fax features rival similarly priced, dedicated communication boards. But probably the most important feature of the board is the fact that the buyer is not committing to today's multimedia standards. As standards evolve, as compression formats improve, and modem bit rates move up, you can expect updates in the form of disk files (courtesy of AT&amp;T and third parties). This should double or possibly triple the useflife of the board over more-conventional hard-function aproaches.<P>
<h4><a name="0209_000b"><B>Example 1:</B> Script to play linear, 16-bit audio at 8000 samples per second.<a name="0209_000b"></h4><P>
<pre>FifoSize:   40000              /* size of flow-control buffer */
Local: FlowBuffer FifoSize     /* declare flow control buffer */
Extern: AudOut_8_1             /* output channel */
fta( ILevel)
{
        fin     FlowBuffer
        aout    AudOut_8_1
}
</pre><P>
<h4><B> <a href="1994020e.htm">Figure 1</A>:</B> The flow-control buffer.</h4><P>
<pre></pre><P>
<h4><B> <a href="1994020f.htm">Figure 2</A>:</B> Flow of audio data from a Windows application to the first speaker.</h4><P>
<h4><a name="0209_000c"><B>Example 2:</B> Modifying the script in Example 1 to play linear, 16-bit audio at 44,100 samples per second.<a name="0209_000c"></h4><P>
<pre>FifoSize:   40000             /* size of flow-control buffer */
Local: FlowBuffer FifoSize    /* declare flow control buffer */
Extern: AudOut_44_1           /* output channel */
fta( ILevel)
{
        fin     FlowBuffer
        aout    AudOut_44_1
}

</pre><P>
<h4><a name="0209_000d"><B>Example 3:</B> Script to record linear, 16-bit audio at 44,100 samples per second.<a name="0209_000d"></h4><P>
<pre>FifoSize:   40000             /* size of flow-control buffer */
Local: FlowBuffer FifoSize    /* declare flow control buffer */
Extern: AudIn_44_1            /* input channel */
atf( ILevel)
{
        ain     AudIn_44_1
        fout    FlowBuffer

}

</pre><P>
<h4><B> <a href="19940210.htm">Figure 3</A>:</B> Flow of data when recording audio at 44,100 samples per second.</h4><P>
<h4><a name="0209_000e"><B>Table 1:</B> Linear wave audio formats supported (almost all formats can mix).<a name="0209_000e"></h4><P>
<pre><B>Sample          Mono PLAY Stereo                   Mono       RECORD       Stereo</B>
<B>Rate     8 bit 16 bit      8 bit 16 bit          8 bit  16 bit       8 bit       16 bit</B>
 8000       x     x           x     x            x        x     x      x
11025       x     x           x     x            x        x     x      x
16000       x     x           x     x            x        x     x      x
22050       x     x           x     x            x        x     x      x
24000       x     x           x     x            x        x     x      x
32000       x     x           x     x            x        x     x      x
44100       x     x           x     x            x        x     x      x
48000       x     x           x     x            x        x     x      x</pre><P>
For More Information<P>
<pre>
Communication Automation <P>&amp; Control
1642 Union Blvd., Suite 200
Allentown, PA 18103
800-367-6735
</pre>

<h4><a name="0209_000f"><a name="0209_0010"><B>[LISTING ONE]</B></H4>

<PRE>

/*  QuickWin Audio Player */
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;conio.h&gt;
#include &lt;io.h&gt;
#include &lt;errno.h&gt;
#include &lt;sys\types.h&gt;
#include &lt;sys\stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;vclib.h&gt;      /* VCAS function prototypes */

int DiskToFifo(long hf, int fd);
static int fd, tidPLAY, tidADA;

main()
{
static long hf;
long hparam;

        if( vcAddTask( 1, &quot;PLAY&quot;,&amp;tidPLAY) &lt; 0)  /* load script */
                return -1;
        if( vcGetFifoHandle( tidPLAY, &quot;FlowBuffer&quot;, &amp;hf) &lt; 0)
                                        /* get handle to flow control buffer */
                return -1;
        if( vcInitFifo( hf) &lt; 0) /* initialize (zero out) flow control buffer*/
                return -1;
        fd=open( &quot;HELLO.L8&quot;, O_BINARY|O_RDONLY); /* open the audio data file */
        if(fd == -1) printf(&quot;Cannot open HELLO.L8\n&quot;);

        printf (&quot;Hit return...\n&quot;);
        getchar();

        DiskToFifo( hf, fd);        /* put some data in the FIFO */
        if( vcStartTask( tidPLAY) &lt; 0)  /* start playing the audio file */
                return -1;
        while(DiskToFifo(hf,fd)==1); /* play until done */
        vcDeleteTask (tidPLAY);
        close(fd);                  /* close input file */
}

int DiskToFifo(long hf, int fd)
{
long    lReadCount, lWriteCount, *lpWrite, li;
static  donewriting = 0;

        if (donewriting)
        {
            vcGetFifoReadCount( hf, &amp;li);  /* if DSP has emptied the FIFO... */
            if(li==0L) return(0);          /* then quit */
            return 1;
        }
        printf(&quot;.&quot;);         /* print something to indicate activity */
        vcGetFifoWritePtr( hf, &amp;lWriteCount, &amp;lpWrite);
                                                  /* get FIFO write pointer */
        if(lWriteCount &gt; 0x7fff) lWriteCount=0x7fff;
                                     /* limit data moves to 32K */
                                     /* read the disk directly into the FIFO */
        lReadCount= read( fd, (void*)lpWrite, (unsigned int)lWriteCount);
        if(lReadCount &lt; lWriteCount)  /* if disk is getting empty... */
        {
                lReadCount &amp;= ~0x3L;           /* ensure 32-bit transfer */
                donewriting = 1;
        }
        vcUpdateFifoWritePtr( hf, lReadCount); /* update FIFO indices */
        return(1);
}
End Listing<P>
</pre><HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
