<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>SP 94: Inside OS/2 Software Motion Video</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Inside OS/2 Software Motion Video<a name="0201_0003"></h1><P>
<h2><a name="0201_0001"><a name="0201_0000">Using threads to synchronize audio and video data</h2><P>
<h3>Les Wilson</h3><P>
<p><i><a name="0201_0002"><a name="0201_0000">Les is a senior programmer in IBM's OS/2 Multimedia Software group. He was the project leader of the team that invented and developed the software motion-video support in OS/2 2.1. The synchronization algorithm described here was invented by Steve Hancock and Bill Lawton. Les can be reached at IBM Corp., 1000 NW 51st St., Boca Raton, FL 33431.</i></p><hr><P>
Until recently, digital video's huge demands for processing power and data storage were major hurdles for PC developers. To a great extent, recent advances in hardware, CD-ROM, and image-compression technologies have enabled us to make gains in the race for realistic digital video. Fully synchronizing audio and visual data, however, is one of the technical challenges yet to be solved. You know the problem: &quot;Out-of-sync&quot; audio and video in foreign monster films where English-speaking voices are dubbed over a non-English-speaking actor's moving lips. For low-budget entertainment, we've been generally tolerant of this lack of synchronization. However, system providers must address the timing and synchronization problems to ensure the serious use and acceptance of their system.<P>
IBM's Multimedia Presentation Manager/2, Apple's QuickTime, and Microsoft's Video for Windows all provide users with the ability to create and manipulate digital video and audio data. To do software motion-video playback, such a system must first locate the data for presentation and transport it from its current location to the playback system. Depending on the way the data was created, the task of locating and transporting the data can be simple or complex. In the simple case, the system opens the file and reads a buffer of data. In the complex case, the system traverses data structures and retrieves the required data using indirect pointers to other files.<P>
Next, the system segregates and moves each type of data to the appropriate processor for that data. Audio data goes to the audio subsystem, video goes to the software decompressor, and so on. Synchronization of the data presentation occurs at the target end of the pipeline; see <a href="19940203.htm">Figure 1</A>.<P>
<h3><a name="0201_0004">Types of Synchronization<a name="0201_0004"></h3><P>
There are two types of synchronization:  <I>free-running</I> and <I>monitored</I>. The free-running technique cues up the audio and video data at the target processor, kicks them off, crosses its fingers, and hopes for the best. Sometimes it works, sometimes it doesn't. Systems that use this technique alone often exhibit inconsistent audio and video sync. This is especially common when processing high-motion scenes in the video that cause the target video processor to lag behind the audio. Other interference from device contention can also cause a given target processor to lose synchronization. Once a target processor is out of sync in a free-running system, nothing other than chance will bring it back in sync.<P>
Monitored systems add a policing activity to free-running target processors. In these systems, target processors detect when they're out of sync and employ appropriate techniques to resynchronize the processed data. Timing compensation occurs when a target processor is either ahead or behind the desired location in the data. In doing so, target processors adjust their processing speed depending on the complexity of the data, processing power available on the system, and interference from outside activities.<P>
Monitored systems react to the complex interactions occurring in the system. For audio/visual data, this type of system constantly resynchronizes what is seen with what is heard. This doesn't help the foreign actor with the wrong lip movements for the English-language sound track, but it does ensure that the &quot;thud&quot; is heard when the monster hits the ground.<P>
<h3><a name="0201_0005">Using Interleaved Data<a name="0201_0005"></h3><P>
Both free-running and monitored systems are affected by how the data is organized at the source. When audio and video data is evenly distributed, or <I>interleaved</I>, it flows easily into the system with minimal overhead. That is, as long as there's sufficient data for the target processors, the source data can be read in a single sequential stream. Free-running systems work best when audio and video data are interleaved. Interleaving is also very good when data is on slow devices such as CD-ROM.<P>
While interleaving can help synchronization, it shouldn't be mandatory. Some file formats allow audio and video data to be &quot;clumped&quot; at the beginning or the end of a file. Other file formats allow the data to be distributed in other local and remote files. Either way, multimedia systems must ensure adequate processing time is allocated to prefetch the required data to affect on-time delivery to the target processors.<P>
<h3><a name="0201_0006">Using Multiple Threads for Synchronization<a name="0201_0006"></h3><P>
The OS/2 data-streaming model employs the concept of source and target stream handlers. Chains of stream handlers process and move data at discrete points in a stream of data. As the stream handler moves data from point to point, it performs the required data-specific timing and processing operations. In this way, the stream handler becomes a convenient place to encapsulate data-dependent and timing-dependent operations.<P>
OS/2's Multimedia Presentation Manager implements this streaming model with several independently dispatched threads. Each stream handler is a thread that controls the processing of data through a certain point in the stream. Additionally, a centralized buffer-management and timing thread called the &quot;synchronization stream manager&quot; (SSM) provides services to each stream handler for handling buffers and monitoring its own processing against that of other stream handlers. Together, these threads join to move, filter, and present data with monitored synchronization. This is illustrated in the data and control flows diagramed in <a href="19940204.htm">Figure 2</A>.<P>
Here's what happens during playback of a software motion-video file:<P>
<OL>
<LI>The application initiates the playback operation using the media-control interface (MCI) API. These operations identify the source file and the operation(s) to be performed (play, pause, seek, and so on).</LI>
<LI>The system loads the movie and starts the play.</LI>
<LI>The digital-video media-control driver (MCD) uses the Multimedia I/O services (MMIO) to find and open the file. The MCD is isolated from the file being local or remote.</LI>
<LI>MMIO identifies the file format and uses one of its pluggable I/O procedures (IOPROC) to handle any file-format dependent operations. This allows support of additional file formats without modification of the MCD.</LI>
<LI>The IOPROC opens the file, identifies it, examines the contents, and determines the type of video it contains.</LI>
<LI>The IOPROC loads and initializes the appropriate software decompressor.</LI>
<LI>The MCD initiates the required stream handlers, and allocates the buffer management, timing services, and hardware resources required by the contents of the file.</LI>
<LI>When ready, the multitrack stream handler (MTSH) reads the audio and video data from the file.</LI>
<LI>The MTSH identifies and splits the data into its output streams.</LI>
<LI>The system cues the streams.</LI>
<LI>The MCD starts target stream handlers and controls the playback as requested by the application.</LI>
<LI>As the video stream handler runs, it tells the pluggable video decompressor to reconstruct and display the frame.</LI>
<LI>On systems that allow direct access to the display (such as OS/2), the video decompressor reconstructs the image directly into its window.<P>Otherwise, the image is reconstructed in system memory and displayed by the video stream handler.</LI>
</OL>
As the system runs, it dispatches threads according to priorities and scheduling algorithms. Each point in the stream performs its part of the entire task to move data from the source to the target. As each stream handler does its work, it records its progress so that the SSM can monitor the data stream and provide synchronization services.<P>
Depending on a hardware platform's display hardware, the time required to display a frame can vary greatly. The less efficient the display subsystem, the less processing power is available for other activities in the system. To solve the problems of inefficient display subsystems, OS/2 2.1 allows its video decompressors to bypass the graphics subsystem and access the display adapter directly. When implemented by the adapter's OS/2 display driver, this bypass dramatically improves the performance of software motion video. (See the accompanying text box &quot;About IBM's Ultimotion&quot; for an example of the performance levels achieved by this technology.) Given such varying video-display performance, the synchronization system must be built to compensate for the variable video-stream performance and still deliver synchronized video and audio data.<P>
<h3><a name="0201_0007">Synchronizing Stream Handlers<a name="0201_0007"></h3><P>
One of a stream handler's responsibilities is to report its progress to the SSM. In turn, the SSM monitors each stream and provides tolerance checks of a given &quot;slave&quot; stream against a &quot;master&quot; stream. In OS/2, the video stream is a slave stream and the audio stream is the master stream.<P>
When there's sufficient processing power to handle a movie's frame rate, the video stream handler displays a frame, calculates the time to the next frame, and sets a timer for that duration. As long as the system and audio times remain in tolerance, the system behaves like a free-running system. However, this rarely happens for very long and before you know it, you need adjustments in the video output timing. To acheive synchronization between the two streams, the slave stream adjusts itself to the master stream. For video, this adjustment is made in the calculation of when to display the next frame.<P>
<a href="19940205.htm">Figure 3</A> shows a flowchart of the algorithm. However, the details of the algorithm may be better illustrated with an analogy. Consider two postal workers with delivery routes containing the same number of mailboxes. Each postal worker tries to deliver the mail to each box at the same time the other worker delivers the mail to the corresponding box. Postal-worker A (audio) delivers mail at a large apartment complex. The mailboxes have a central location and an efficient and predictable means for mail delivery. Worker A calls in his progress to the main post office (SSM) on a regular basis. Postal-worker V (video) delivers mail in a nearby suburb. This route has rural mailboxes, and the worker must drive from mailbox to mailbox. At the end of each block, postal-worker V calls in (to SSM) and reports his current box number.<P>
In general, each stop along worker V's route is predictable. However, as in real life, he may deliver mail too quickly and get ahead of worker A by the end of a block. When worker V realizes he shot ahead or lagged behind worker A, worker V adjusts his delivery rate so that he delivers to the next box at the same time that worker A is expected to deliver to the corresponding box. Should anything keep A from his or her &quot;appointed task,&quot; this behavior ensures synchronization of V to A at the end of each block.<P>
Conversely, if worker V lags behind worker A, worker V adjusts his rate of delivery until he catches up. If the difference is small, worker V attempts to catch up by eliminating any unneeded waiting at each box. If worker V is already delivering at the fastest possible rate (that is, he has already eliminated waiting between boxes) and chronically lags behind, a more drastic change in delivery is required. In this analogy, we let postal worker V race down the block and simply toss the mail out the window at each mailbox. Worse yet, we may forget delivery altogether and just drive to the end of the block. (For video, the actual technique used depends on the capabilities of the video decompressor. In either case, the basic idea is to try and drop frames so that the video correlates with the audio.)<P>
<a href="#0201_000f">Listing One</A>, page 41, is a C implementation of this algorithm using the OS/2 system and synchronization stream manager (SSM) APIs. The routine that calculates the next video-frame decompression time (that is, the next time for worker V to deliver at a mailbox) is called <I>CalcNextFrameIval</I>. The input parameters to this routine are pointers to instance structures. The pointer <I>psib</I> points to the SSM timing information for this thread. The pointer <I>pMovie</I> points to the video stream handler's instance data for the movie being played. Local variables exist for calculating the various error values used by the algorithm as well as flags used for controlling the path through the algorithm.<P>
First, the code gets the current time using the system timer. Based on the movie's authored frame rate, the variable <I>TimeNextFrame</I> is incremented to reflect when the next frame should be displayed. Using these two pieces of information, the <I>fVideoTooSlow</I> Boolean and the <I>VideoTimeError</I> variables are set. These reflect how far off, and in which direction (ahead or behind), the video is relative to the system timer. Next, the algorithm tests if SSM is reporting that the slave stream (video) is out of tolerance. When this test fails, the algorithm drops directly into the last section of code. If the video is not too slow, the thread sleeps for the calculated <I>TimeNextFrame</I>. If the value of <I>TimeNextFrame</I> is less than the system-timer granularity, a quick yield is done to let higher priority threads execute. This helps prevent the file-system threads from starving.<P>
Returning to where the SSM &quot;out-of-tolerance&quot; check is successful (video and audio are out of tolerance), the algorithm goes on to set the error values and synchronization flags.<P>
Using the information about the relative position of the master (audio) and slave (video) streams, the variable <I>TimeNextFrame</I> is calculated. It's important to note that at this point, the algorithm works to force the video in sync with the audio and not in sync with where it computes it &quot;should&quot; be.<P>
The comments in the code detail the precise conditions tested and the way <I>TimeNextFrame</I> is calculated. However, regardless of which stream lags behind the other, the algorithm uses the same scheme. When video lags behind audio, <I>TimeNextFrame</I> is set behind the current time. This has the effect of making the video play faster. Conversely, when the audio lags behind video, <I>TimeNextFrame</I> is set ahead of the current time, which has the effect of slowing down the video. The amount by which <I>TimeNextFrame</I> is set ahead or behind the current time is always calculated to be the difference between the audio time and the system timer. In addition to forcing the video to synchronize to the audio, this cross check also adjusts for possible differences in the timing sources. (For example, SSM and the system timer use different physical timers, and the two clocks drift.)<P>
Once <I>TimeNextFrame</I> is recalculated, the algorithm drops into the same code discussed earlier that takes action based on the local flags and error values. If it isn't time to display the next frame, the thread sleeps for the calculated interval. If the time is past, the algorithm stores this information in the movie-instance structure for use by the frame-dropping algorithm.<P>
<h3><a name="0201_0008">Dropping Frames to Catch Up<a name="0201_0008"></h3><P>
At first glance, dropping frames to make video &quot;catch up&quot; seems simple and straightforward. However, most software algorithms use temporal compression and only store &quot;delta frames&quot;--those portions of a frame that have changed since the last frame. If these frames are dropped, portions of the movie that should have changed aren't changed from frame to frame and unpleasant visual artifacts are displayed. To counter this, the compression algorithm frequently compresses the entire frame and inserts it into the video stream. This intraframe compressed frame is called an &quot;I-frame.&quot; When displayed, I-frames repaint the entire video frame and repair any artifacts.<P>
Since frame dropping depends on <P>the compression algorithm, the frame-dropping logic in the stream handler defers the actual drop processing to the decompressor. If the compressed data stream cannot tolerate frame dropping, the decompressor simply ignores the information and the system continues as best it can.<P>
<h3><a name="0201_0009">Summary<a name="0201_0009"></h3><P>
A fully threaded system provides efficient tools to process multimedia data. These tools effectively help address multimedia-related problems in areas such as buffer management, data movement, data filtering, and synchronization. As a platform for multimedia applications, OS/2 provides a rich set of synchronization and video-output services. Through the use of threads, system-timing services and OS/2's multimedia synchronization services, the synchronization algorithm presented here can provide an independent video-timing mechanism for when an audio track is not present. It can also correct for the following: clock drifts in system and audio timers, dynamically and statically varying display subsystem efficiency, chronic video-synchronization loss, and catastrophic audio failure. It is an example of how multiple timing services can be combined to provide a solution to an age-old problem.<P>
<h4><B> <a href="19940206.htm">Figure 1</A>: </B>Typical data flow in multimedia systems.</h4><P>
<a name="0201_000a">Digital Video Compression<a name="0201_000a"><P>
Digital-video compression is the act of taking a raw digitized image and reducing the amount of storage required to represent the image. There are two compression domains: spatial (or intraframe) compression, which tries to eliminate redundancies within a given frame; and temporal compression, which tries to eliminate redundancies over intervals of time (frames). An algorithm's resulting compression ratio is determined by the degree to which it is able to exploit redundancies and irrelevancies in each of these domains.<P>
There are also two types of compression: lossy and lossless. As its name implies, lossless video compression compacts the source data without losing any of the information it contains. For video data, this means that the compression retains all the image detail. When the image is decompressed, the result is identical to the original. Lossless algorithms are well suited for compressing computer-generated images and are commonly used for storing video animations. To date, however, lossless video algorithms are still too computationally complex for software playback and have limited applicability when the objective is to achieve high compression and frame rates.<P>
Lossy algorithms compact the source data by throwing away data that is redundant from one frame to the next. Examination of a reconstructed frame from any of today's software algorithms reveals the use of this technique. The advantage of this technique is that a respectable representation of the original is retained and it satisfies the requirement for high compression ratios and low computational complexity.<P>
When examining software-compression algorithms, one must consider several characteristics; see <a href="#0201_000b">Table 1</A>. Because these characteristics are interrelated, you should avoid stressing one at the expense of another. Consider the frame size, which is determined at movie-creation time. Frame size is the width and height (in pixels) that the compression algorithm stores in the movie. In a video digitizer that uses 16-bit color (65,535 colors), the raw data for each frame of a 320x240 movie is 153,600 bytes. At 15 frames per second, the raw data is 15 times that, or 2,304,000 bytes. Assuming 22 Kbytes per second for an audio track, a video-compression algorithm must achieve an average compression ratio of 18:1 to play back at single-speed CD-ROM rates.<P>
The frame rate, determined at movie-creation time, is usually expressed in frames per second. The frame rate determines how smoothly the motion is perceived by the viewer. Studies show that most people dislike frame rates below 12 frames per second. Most movies made for software motion video are 15 frames per second and higher.<P>
Data rate expresses how much bandwidth is required for a movie. A given movie's frame size, frame rate, and compression ratio determine how much space is required for a given interval of time. Usually expressed in bytes per second, the data rate simply expresses the average number of bytes used for one second of movie. A movie's data rate must not exceed the storage device's data rate. If it does, the device won't deliver the data fast enough, and the movie will break up.<P>
A 16-bit color, 320x240 movie running at 15 frames per second takes 2,304,000 bytes (320x240x2x15) for one second of uncompressed (raw) data. Using a compressor that averages 18:1 compression, one second of video data can be reduced to 128,000 bytes. Adding a 22,000-byte audio track, the resulting movie has a data rate of 150,000 bytes per second.<P>
The compression algorithm determines a movie's computational complexity, which is a measure of how much processing power is required to decompress and display a movie's frames. The density at which an algorithm encrypts the data, the technique required to reconstruct each image, and the volume of data per frame determine an algorithm's computational complexity. As an algorithm's playback computational complexity increases, a given processor's ability to decompress it is diminished. To bring it back in balance, the volume of data must be reduced using a smaller frame size, lower frame rate, or both. In this way, a given algorithm can be evaluated on the basis of how large a frame rate and size can be achieved without compromising the appearance of the image.<P>
Using the previous example, we can calculate that the average number of bytes for each compressed frame is 10,000 (150,000 bytes/15 frames per second). Therefore, the decompression algorithm has 1/15 of a second to read the 10,000 bytes, reconstruct the frame, and display it. The higher a movie's frame rate, the less time there is to do this. The larger the frame size, the more pixels have to be displayed. The more dense or complex the compressed data, the more time is required to reconstruct the frame.<P>
Compression complexity determines how an algorithm is used to make a movie. An algorithm that takes longer to compress a frame than it does to decompress a frame is called an &quot;asymmetric,&quot; or &quot;off-line&quot; algorithm. Conversely, one that takes equally long to compress as decompress is called a &quot;symmetric,&quot; or &quot;real-time&quot; algorithm.<P>
Off-line algorithms first get raw data from a file or frame-stepped device and then compress it. By their nature, these algorithms usually have the best image quality and compression ratios. Real-time algorithms are useful on live video sources that are not controlled one frame at a time. These algorithms compress the data on the fly as it is digitized. The advantage of these algorithms is that they eliminate the need for vast disk storage of raw data. Real-time algorithms usually trade off frame size and compression to achieve reasonable frame rates.<P>
A movie's author determines frame rate, frame size, and data rate at movie-creation time. If played on a system that lacks sufficient power to handle the movie (for example, if the frame rate is too high), the scalability of an algorithm determines what the playback system can do to compensate. The degree to which a movie's characteristics (frame rate, size, resolution, or color depth) can be scaled down at playback time is called its &quot;playback scalability.&quot; <a href="#0201_000c">Table 2</A> shows how each characteristic of a movie can scale.<P>
Image quality is largely a subjective measure of how well the algorithm retains the details of a movie. As lossy algorithms, today's software motion-video algorithms are perceived differently by different people. However, in general, as image detail increases, one or more of the other characteristics (such as computational complexity) are affected. Again, the overall quality of an algorithm is a function of how well it balances all of these characteristics.<P>
Each video-compression algorithm tries to balance these characteristics to deliver the best video possible in its environment. Which algorithm is best for you depends on which characteristics and environments are most important to you. To some degree, most algorithms let you trade off one characteristic to improve another (for example, reduce the frame size so that you can increase the frame or data rate). Ultimately, before drawing any conclusions, make sure you see a good representation of movies for yourself.<P>
--L.W.<P>
<h4><B> <a href="19940207.htm">Figure 2</A>: </B>Architecture of OS/2 software motion-video playback.</h4><P>
<h4><a name="0201_000b"><B>Table 1:</B> Characteristics that must be considered in digital-video compression.<a name="0201_000b"></h4><P>
<pre><B>Characteristic          Description</B>
Frame size          Width and height (in pixels) of each frame.
Frame rate          Number of frames over a certain interval<P>          (usually seconds).
Data rate          Average number of bytes in a second of video.
Computational complexity          Amount of processing power required to deliver<P>          the video at its authored size and rate.
Compression complexity          Amount of time required to compress a second<P>          of video vs. its decompression time.
Playback scalability          Degree to which video playback can be degraded<P>          when the video is too complex for the system<P>          on which it's played.
Image quality          How well the original detail of the frame<P>          is retained.</pre><P>
<h4><a name="0201_000c"><B>Table 2:</B> Characteristics of a movie and how it can scale during playback.<a name="0201_000c"></h4><P>
<pre><B>Characteristic          How it Scales</B>
Frame Rate          Frames can be dropped to keep up with audio track.
Frame Size          The output window can be reduced so less<P>          processing is required.
Resolution          Image detail can be skipped so that less<P>          processing is required.
Color Depth          Movies with more colors than are available can<P>          be mapped to displays with fewer colors.</pre><P>
<h4><a name="0201_000d"><B>Table 3:</B> (a) Ultimotion's characteristics on a 150-Kbyte-per-second CD-ROM drive for 320x240 frame size; (b) Ultimotion's characteristics on a 150-<P>Kbyte-per-second CD-ROM drive for 640x480 frame size; (c) Ultimotion's characteristics on a 300-Kbyte-per-second CD-ROM drive for 320x240 frame size.<a name="0201_000d"></h4><P>
<pre><B>Characteristic          Description</B>
(a)
Frame Size          320x240
Frame Rate          5 frames per second
Data Rate          150 Kbytes per second
Computational Complexity          25-MHz 386
Compression Complexity          Both off-line (8 seconds per frame) and real-time
Scalability          Scales from 65,535 to 16 colors; frame rate: up<P>          to the authored rate; frame size: half, normal,<P>          and double size
(b)
Frame Size          640x480
Frame Rate          5 frames per second
Data Rate          150 Kbytes per second
Computational Complexity          25-MHz 486
Compression Complexity          Off-line (5 seconds per frame)
Scalability          Scales from 65,535 to 16 colors; frame rate: up<P>          to the authored rate; frame size: half, normal,<P>          and double size
(c)
Frame Size          320x240
Frame Rate          30 frames per second
Data Rate          300 Kbytes per second
Computational Complexity          50-MHz 486DX
Compression Complexity          Off-line (approximately 5 seconds per frame) and<P>          real-time
Scalability          Scales from 65,535 to 16 colors; frame rate: up<P>          to the authored rate; frame size: half, normal,<P>          and double size</pre><P>
<h3><a name="0201_000e">About IBM's Ultimotion<a name="0201_000e"></h3><P>
Ultimotion is a video-compression algorithm optimized for software playback on a general-purpose microprocessor. From its inception, Ultimotion was designed to break through the &quot;small-video-window&quot; barrier (160x120 pixel window size) and deliver video at four times that size. The resulting algorithm delivers 320x240 movies playable from 150-Kbyte CD-ROM drives. Typical Ultimotion movies need only a 25-MHz 386 processor and SVGA or XGA display adapter.<P>
One of the factors that help achieve these levels of performance is that OS/2 uses a direct video-access technique now beginning to emerge in other systems. When supported by a display adapter's device driver, the video decompressor is given direct access to the display adapter. The system automatically detects the presence of the support and uses it without the knowledge of the decompressor. Using this high-speed access, 486-based machines are able to play Ultimotion's larger 320x240 movies at 30 frames per second.<P>
Ultimotion is a software-only, video-compression algorithm that averages 18:1 compression. It uses both spatial and temporal compression and was designed to run on processors as low as a 25-MHz 386. On a single-spin CD-ROM drive (150 Kbytes per second), it exhibits the characteristics summarized in <a href="#0201_000d">Table 3(a)</A>. <a href="#0201_000d">Table 3(c)</A> shows the characteristics on a double-spin CD-ROM drive (300 Kbytes per second).<P>
Ultimotion delivers a respectable frame size and frame rate at relatively low data rates and processing power. Its organization of the compressed data enables efficient output display, clipping, doubling, and halving of the movie's frame size. Ultimotion movies can be created using either off-line or real-time algorithms across a wide range of frame sizes and frame rates.<P>
--L.W.<P>

<h4><B> <a href="19940208.htm">Figure 3</A>: </B>Logic flow of audio/video synchronization algorithm.</h4>

<h4><a name="0201_000f"><a name="0201_0010"><B>[LISTING ONE]</B></H4>

<PRE>

RC CalcNewFrameIval  ( PSIB         psib,
                       PMOVIE_STR  pMovie )
{
   LONG     AudioSynchError;
   LONG     VideoTimeError;
   LONG     lmsTimeError;
   BOOL     fVideoTooSlow = FALSE;
   BOOL     fVideoBehindAudio = FALSE;
   BOOL     fSynchPulse = psib-&gt;syncEvcb.ulSyncFlags&amp;(SYNCPOLLING+SYNCOVERRUN);
   ULONG    CurrentTime;
   MMTIME   mmtimeMaster = psib-&gt;syncEvcb.mmtimeMaster;

   // get current time
   DosQuerySysInfo (QSV_MS_COUNT,QSV_MS_COUNT,&amp;CurrentTime,sizeof(ULONG));

   // Update frame time
   pMovie-&gt;TimeNextFrame += pMovie-&gt;FrameInterval;


      //*********************************************
      // Determine if the video is ahead or behind
      // the frame rate specified for this stream.
      //*********************************************
      if (CurrentTime &lt;= pMovie-&gt;TimeNextFrame) {

         //*****************************************************
         // Video is ahead according to system clock
         // Compute Video Error
         //*****************************************************
         VideoTimeError = (pMovie-&gt;TimeNextFrame - CurrentTime);
         fVideoTooSlow = FALSE;

      } else {
         //***************************************************
         // Video is behind according to system clock
         // Compute Video Error
         //***************************************************
         VideoTimeError = (CurrentTime - pMovie-&gt;TimeNextFrame);
         fVideoTooSlow = TRUE;

      } /* endif - who is ahead? */


      //*************************************
      // Is SSM reporting &quot;Out of Tolerance&quot;
      // Check for a Synch Pulse
      //*************************************
      if (psib-&gt;fSyncFlag == SYNC_ENABLED) {

         if (fSynchPulse &amp;&amp; mmtimeMaster) {
            pMovie-&gt;ulSynchPulseCount++;   /* Accumulate count of sync pulses


            /***********************************************************/
            /* Is SSM reporting Video Behind Audio?
            /***********************************************************/
            if (mmtimeMaster &gt;
           (psib-&gt;syncEvcb.mmtimeStart + psib-&gt;syncEvcb.mmtimeSlave))
            {  // Video is behind audio


               fVideoBehindAudio = TRUE;

               // Compute Audio error
               AudioSynchError = mmtimeMaster -
                    (psib-&gt;syncEvcb.mmtimeStart + psib-&gt;syncEvcb.mmtimeSlave);

               // Is Video behind according to system clock?
               //
               if (fVideoTooSlow) {
                   if ( AudioSynchError &gt; VideoTimeError ) {
                    // Set the next frame time behind the current time
                    // so that the delta to the cur time = SSM Audio Error
                    // This will cause the video to speed up

                    pMovie-&gt;TimeNextFrame -=
                    ( AudioSynchError - VideoTimeError );


                  } else {
                    // Set the next frame time ahead of the current time
                    // so that the delta to the cur time = SSM Audio Error
                    // This will cause the video to slow down
                     pMovie-&gt;TimeNextFrame +=
                            ( VideoTimeError - AudioSynchError );

                  }

               } else { // Video OK by System Clock but SSM reports otherwise
                        // Set the next frame time behind the current time so
                        // that the delta to the current time = SSM Audio Error
                        // This will cause the video to speed up
                  pMovie-&gt;TimeNextFrame -= (AudioSynchError + VideoTimeError);

               } /* endif */

            } else {  // SSM reports Video ahead of Audio

               fVideoBehindAudio = FALSE;
               AudioSynchError =  (psib-&gt;syncEvcb.mmtimeStart +
               psib-&gt;syncEvcb.mmtimeSlave) -
                                        mmtimeMaster;

               // Is video behind according to system clock?
               if (fVideoTooSlow) {
                  //*********************************************************
                  // Video is behind according to system time, but video is
                  // running ahead of the audio (the audio must have started
                  // late or somehow broken up, fallen behind and can't get up
                  //*********************************************************
                  // Set the next frame time ahead of the current time
                  // so that the delta to the cur time = SSM Audio Error
                  // This will cause the video to slow down
                  pMovie-&gt;TimeNextFrame += AudioSynchError + VideoTimeError;

               } else {  // Video ahead according to system clock and SSM
                  //*********************************************************
                  // Video is keeping up or is ahead according to system time
                  // AND video is running ahead of audio.
                  //*********************************************************

                  if ( AudioSynchError &gt; VideoTimeError ) {
                     // Video is further ahead than system clock indicated
                     // Set the next frame time ahead of the current time
                     // so that the delta to the cur time = SSM Audio Error
                     // This will cause the video to slow down
                     pMovie-&gt;TimeNextFrame += AudioSynchError-
                                                    VideoTimeError;
                  } else {
                     // Video not as far ahead as system clock indicated
                     // Set the next frame time behind the current time
                     // so that the delta to the cur time = SSM Audio Error
                     // This will cause the video to speed up
                     pMovie-&gt;TimeNextFrame -= VideoTimeError-
                                                    AudioSynchError;
                  }


               } /* endif */

            } /* endif */

            psib-&gt;syncEvcb.ulSynchFlags = 0;

            //*************************************************************
            // Recompute video time error based on updated TimeNextFrame
            //*************************************************************
            if (CurrentTime &lt;= pMovie-&gt;TimeNextFrame) {
               VideoTimeError = (pMovie-&gt;TimeNextFrame -
               CurrentTime);
               fVideoTooSlow = FALSE;

            } else {
               VideoTimeError = (CurrentTime -
               pMovie-&gt;TimeNextFrame);
               fVideoTooSlow = TRUE;

            } /* endif - time exceeded. */

         } /* endif - SSM reporting &quot;Out of Tolerance&quot; */
      } /* endif - Listening to SSM */

      /***********************************
      /* Take action based on whether the
      /* video is running ahead or behind
      /***********************************
      if (!fVideoTooSlow) {

         lmsTimeError = VideoTimeError / 3;  //Convert error to milliseconds
         if (lmsTimeError &gt; 32L) {
            // Block till next time to display a frame
            DosSleep(lmsTimeError);
            pMovie-&gt;ulLastBlockTime = CurrentTime;
         } else {
            // Too close to next frame time for system clock to be used
            // Be good and yield to higher priority thread if one around
            DosSleep(0);
            pMovie-&gt;ulLastBlockTime = CurrentTime;
         }

      } else {

         /********************************/
         /* Drop some frames if behind!  */
         /********************************/
                      :
                      :
       } /* endif - video too slow */

   // Update Frame Count
   pMovie-&gt;ulFrameNumber++;


   return (NO_ERROR);
}
End Listing<P>
</pre><HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
