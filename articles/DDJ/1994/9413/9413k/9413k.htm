<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>SP 94: Build Your Own RS-232 Sound System</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Build Your Own RS-232 Sound System<a name="0246_0002"></h1><P>
<h2><a name="0246_0001"><a name="0246_0000">Digital audio from your RS-232 port</h2><P>
<h3>Dennis Cronin</h3><P>
<p><i>Dennis almost completed an EE degree before being lured into the sordid world of fast computers, easy money, and loose connections. He currently specializes in UNIX driver development for Solaris and HP-UX operating systems and can be contacted at denny@cd.com.</i></p><hr><P>
Have you ever thought about using the extra RS-232 port on your computer as an audio output? Probably not, right? However, it can be done. This article describes a rather unique method of coding data that will produce an audio signal when streamed to a speaker attached to the RS-232 port. Granted, the sound isn't CD quality, but it's still quite intelligible. I'll start by examining how to get an audio signal from what was only designed to be a serial data port. Then I'll look at a program that outputs a Microsoft Windows .WAV audio file to the comm port of your PC. Finally, I'll provide the wiring diagrams necessary to build your own speaker to attach to the comm port of your PC.<P>
<h3><a name="0246_0003">From ASCII to Audio<a name="0246_0003"></h3><P>
To understand how to turn a mundane ASCII character stream into music, you need to look beneath the characters, at the underlying serial bit stream coming from the UART. Although a complete primer on asynchronous communications is beyond the scope of this article, I'll cover some basics of where the audio comes from.<P>
An RS-232 asynchronous communications line idles at a state defined as being the &quot;1&quot; state of the line. This is also referred to as a &quot;marking&quot; state. When you shove, say, the letter <I>A</I> into the transmit register of the UART, it generates a start bit. A start bit is always a 0, and the transition from the marking state of 1 to that first start bit of 0 is the critical point of synchronization whence all the rest of the bit stream is referenced.<P>
After the start bit, the UART proceeds to send the bits of the character, starting with the least-significant bit (LSB). An <I>A</I> is 0x41, so the LSB is a 1. Assuming that the line settings are for 8 bits and no parity, you'll see the UART crank out all 8 bits of the character, immediately followed by a stop bit, which is always a 1. The stop bit is also a critical point, since the receiving UART uses it as a simple check to make sure synchronization was maintained throughout the reception of the character. If it doesn't see a 1 in the stop-bit slot, it reports the familiar &quot;framing error&quot; status. <a href="19940248.htm">Figure 1</A> shows what the letter <I>A</I> looks like as it emerges from the UART, all framed up with start and stop bits.<P>
While the letter <I>A</I> is interesting enough, the character <I>U</I> is <I>really</I> interesting. As you can see in <a href="19940249.htm">Figure 2(a)</A>, <I>U</I> (defined as 0x55) happens to generate a completely alternating bit pattern, including the start and stop bits. When a steady stream of characters is transmitted, the stop bits are immediately followed by the start bit of the next character. <a href="1994024a.htm">Figure 2(b)</A> shows that a steady stream of <I>U</I> characters is actually just a continuous square wave, the frequency of which is simply half the baud rate programmed at the UART.<P>
If you were to hook up your speaker to a UART while it generated a steady stream of <I>U</I>s, you'd hear a high-pitched tone as this square wave wiggled the speaker back and forth. But suppose you set the baud rate up very high, say at 115,200 baud, which is the fastest baud rate commonly available on PCs. Well, the speaker can't wiggle that fast, nor can we humans hear a frequency that high. Instead, the speaker just sees the effective average value of the waveform, in this case, 0 volts, since there is an equal distribution of 1s and 0s<P>
Now, suppose you pop a character with an extra bit turned on into the stream of <I>U</I>s every once in a while. Your trusty <I>U</I>s contain four 1s and four 0s, so pick a character that has five 1s and three 0s--a <I>W</I> (0x57), for instance. When you shove the <I>W</I> in, the speaker briefly sees an imbalance in the quick, alternating tugs the stream of <I>U</I>s provides. The response to this brief imbalance manifests itself as an exciting &quot;click&quot; every time you shift out a <I>W</I>. But this isn't quite music yet.<P>
What happens when you turn on six 1s, and only do two 0s? The speaker will be a little more imbalanced and will move a little farther. How about seven 1s and one 0? It turns out that you can &quot;unbalance&quot; that speaker by four distinct values on each side of the center value created by the steady stream of <I>U</I>s. Thus, you have nine &quot;positions&quot; you can ask the speaker to assume depending on the mix of 1s and 0s you send it. It's a little DAC (digital-to-analog converter), albeit a humble, 3-bit one (plus the zero position). By picking the right character, you can control the movement of the speaker.<P>
So how many &quot;samples&quot; per second can your DAC do? With 8 bits per character, plus the start and the stop bit, you have a total of 10 bits for each character. At the 115,200-baud rate, this works out to 11,520 characters (or samples) per second. So your DAC is capable of sustaining a sample rate of just over 11K samples per second, which isn't quite CD quality, but is still good enough for voice-grade audio.<P>
In most digital-audio systems, the DAC is immediately followed by a sharp-cutoff lowpass filter. This prevents aliasing and provides the necessary smoothing function to turn the discrete steps back into smooth analog. You're going to have to forgo this luxury and settle for the simple lowpass action resulting from the speaker's mechanical inertia. It doesn't matter that much. The three bits, plus 0 output resolution is still the biggest limiting factor in terms of overall &quot;fidelity&quot; (and I use that term very loosely).<P>
Now that you have an understanding of how to coax some audio out of the RS-232 port, let's look at what you have to do to actually play the Microsoft Windows WAV files.<P>
<h3><a name="0246_0004">Playing WAV Files Over RS-232<a name="0246_0004"></h3><P>
The most common WAV file format contains 8-bit mono audio data in linear pulse code modulation (PCM) format using a sample rate of 11,000 samples per second. Other formats are possible, but so far this is the most common. The 11-kHz sample rate happens to be close enough to our own 11,520 DAC sample rate, that a sample-rate conversion isn't even necessary. Sounds will play back slightly less than a semitone too high, but that's close enough for rock 'n' roll.<P>
Information about the actual file format is contained in a RIFF header at the front of the file. For simplicity's sake, you're just going to ignore that header and assume the previously stated sound-file parameters. Well, you're not going to completely ignore the header_in fact, you're going to &quot;play&quot; it. The header is so short (in terms of audio data) that the click it adds to the beginning of the sound is almost imperceptible. Since the program is, by definition, not particularly hi-fi, it's just not worth the extra effort to parse that header, so we're going to make a KISS design decision right off that bat. (Header? I don't see no header.)<P>
Linear PCM is probably the simplest audio format to deal with, as each instantaneous value of the audio waveform is directly represented by a number. In this case, with 8 bits of resolution, the numbers vary from 0 to 255, with 128 used as the zero reference. As these numbers swing above and below the zero reference, you need to assign ranges to the nine possible output values provided by your cheesy DAC.<P>
<h3><a name="0246_0005">COMAUDIO.C<a name="0246_0005"></h3><P>
The program that makes it possible for you to blast sound out of your RS-232 port is COMAUDIO.C (<a href="#0246_0008">Listing One</A>, page 73). The area of COMAUDIO.C that's of interest is in the conversion of the 8-bit PCM value to the character for output to the serial chip. As you read the audio file in, the <I>convert()</I> subroutine is called to map each input byte of the audio file onto a value which will ultimately be used to index the nine-slot array of actual output characters. The <I>convert()</I> routine applies a bias and a scaling factor to cause each input value to land in one of these nine possible output zones. If necessary, the signal will be clipped to guarantee that it stays within the range of 0--8. Later during output, this index will select one of the output characters from the <I>dac[9]</I> array.<P>
The characters in the <I>dac[9]</I> array are arranged in order of increasing numbers of 1s. Except for the values for all 0s (0x00) and all 1s (0xff), there are several possible candidates for each position. The choice was based on minimizing the low-frequency content of the character, so as to reduce subharmonic squeal from the 115,200 carrier as much as possible.<P>
Prior to commencing actual playback, interrupts are disabled. This is necessary, since even the brief disturbance of a timer tick will pose enough interruption that the CPU can fall behind the serial chip. If this happens, the line drops into the marking state, yielding a very audible clicking sound.<P>
The COMAUDIO.C program was compiled and tested under Borland Turbo C 2.0 and Borland C++ 1.0. Although the program was coded on a 486/33 under DOS and Windows 3.1, I also tested it successfully on 286-class PCs. Similar versions of COMAUDIO.C have been tested on a SPARC 1+ under SunOS 4.1.3. If you have a slower machine, you might need to do some optimizing of the output function. (Or better yet, you might just buy a new computer. Jeez, get into the '90s.) After you compile the program, the only thing left to do is hook up a speaker. Sample data files in .WAV, .C3P, and .AU (Sun) format are available electronically; see &quot;Availability,&quot; page 2.<P>
<h3><a name="0246_0006">Attaching the Speaker<a name="0246_0006"></h3><P>
<a href="1994024b.htm">Figure 3</A> is a wiring diagram for the speaker. While just about any speaker will work, a cheap replacement 8-ohm speaker (Radio Shack 40-1208 or equivalent) is ideal. You actually want the frequency response to be somewhat limited in order to help filter out some of the nasty, high-frequency digital hash.<P>
A capacitor of at least 100 mf, with a voltage rating of at least 16 WVDC is put in series with the speaker to block DC. Polarity is important; make sure you get the negative terminal of the capacitor attached to the speaker and the positive terminal attached to pin 7 of the DB-25 connector.<P>
The speaker will sound somewhat better if you enclose it in something. A simple cardboard box works well enough; see <a href="1994024c.htm">Figure 4</A>. Plus, this keeps your friends guessing about what complex circuitry, that's capable of magically turning the RS-232 into audio, lurks inside.<P>
Hook the speaker up to one of the comm ports on your PC and give it a whirl. Unless you've been living on a deserted isle, you can probably locate a copy of TADA.WAV, a small sound file that ships with Windows 3.1, to use as a test. Run COMAUDIO with TADA.WAV as an argument, specifying the proper comm port if necessary, and you should hear delightful, although brief, strains of music emanating from your proud little speaker.<P>
<h3><a name="0246_0007">ARPEGGIO.C<a name="0246_0007"></h3><P>
In addition to the WAV files that are available electronically, there are plenty of places you can download more. But if you want something a little more melodious to play right away, ARPEGGIO.C (<a href="#0246_000a">Listing Two</A>, page 74) can be used to generate a sample audio file for playback through COMAUDIO. Simply invoke it with a destination filename, and it will write out an audio file containing a catchy little ditty. If your machine doesn't have a math coprocessor, it can take a couple of minutes or more to generate the output file, so be patient. ARPEGGIO.C is easy to modify, and you can change it to generate electronic compositions of your own.<P>
<h4><B> <a href="1994024d.htm">Figure 1</A>:</B> The letter A, as seen emerging from the UART, all framed up with start and stop bits.</h4><P>
<h4><B> <a href="1994024e.htm">Figure 2</A>:</B> (a) The letter U (defined as 0x55) generates a completely alternating bit pattern, including the start and stop bits; (b) a steady stream of U characters is a continuous square wave, the frequency of which is half the baud rate programmed at the UART.</h4><P>
<h4><B> <a href="1994024f.htm">Figure 3</A>:</B> Wiring diagram for the speaker.</h4><P>
<h4><B> <a href="19940250.htm">Figure 4</A>: </B>New highs in low-fi: a roll-your-own speaker.</h4><P>

<h4><a name="0246_0008"><a name="0246_0009"><B>[LISTING ONE]</B></H4>

<PRE>

/*
    COMAUDIO.C - uses PC com port to generate audio
*/
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;alloc.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;dos.h&gt;

/* defs for low level access to serial chip */
#define SCC_DATA    0
#define SCC_INTCTRL 1
#define SCC_CTRL    3
#define SCC_STATUS  5
#define TXRDY       0x20
#define comout(scc_base,c)                                  \
{                                                           \
    while((inportb(scc_base + SCC_STATUS) &amp; TXRDY) == 0);   \
    outportb(scc_base + SCC_DATA,c);                        \
}

/* farinc - macro to increment far ptr */
#define farinc(p) {                                         \
                    p++;                                    \
                    if(FP_OFF(p) == 0)                      \
                        p = MK_FP(FP_SEG(p) + 0x1000,0);    \
                  }

/* digital to ASCII analog conversion table */
unsigned char dac[9] = {0x00,0x08,0x12,0x29,0x55,0x6b,0xb7,0xef,0xff};

/* protos */
void main(int argc, char **argv);
int line_setup(int linenum);
void set_vol(int volume);
unsigned char convert(int c);

/*
                        main
*/
void
main(int argc,char **argv)
{
    FILE *fp;
    unsigned char far *p, far *bufp;
    long i;
    int port = 1, volume = 5;
    register c,scc_base;
    struct stat statbuf;

    /* check arg cnt for sanity */
    if(argc &lt; 2 || argc &gt; 4) {
        printf(&quot;Usage: comaudio [wavfile] [[port]] [[volume]]\n&quot;);
        exit(1);
    }

    /* if com port spec'd */
    if(argc &gt; 2) {
        port = atoi(argv[2]);
        if(port &lt; 0 || port &gt; 1) {
            printf(&quot;Use 0 or 1 to select com1 or com2 respectively.\n&quot;);
            exit(1);
        }
    }

    /* see if volume is spec'd */
    if(argc &gt; 3) {
        volume = atoi(argv[3]);
        if(volume &lt; 1 || volume &gt; 9) {
            printf(&quot;Volume should be in range 1-9.\n&quot;);
            exit(1);
        }
    }
    set_vol(volume);

    /* get length of sound file */
    if(stat(argv[1],&amp;statbuf) != 0) {
        printf(&quot;Cannot stat sound file '%s'\n&quot;,argv[1]);
        exit(1);
    }

    /* try to alloc mem to hold entire (nibble packed) file */
    bufp = farmalloc(statbuf.st_size / 2);
    if(bufp == NULL) {
        printf(&quot;Cannot allocate %lu bytes of memory for sound file\n&quot;,
            statbuf.st_size / 2);
        exit(1);
    }

    /* open sound file */
    fp = fopen(argv[1],&quot;rb&quot;);
    if(fp == NULL) {
        printf(&quot;Cannot open sound file '%s'\n&quot;,argv[1]);
        exit(1);
    }

    /* read entire file into mem */
    for(i = statbuf.st_size / 2, p = bufp; i--; ) {
        /* pack 2 converted vals per byte */
        c = convert(fgetc(fp));
        *p = c | (convert(fgetc(fp)) &lt;&lt; 4);
        farinc(p);
    }

    /* set up port */
    scc_base = line_setup(port);

    /* grab from buf and shove out com port */
    disable();      /* ints must be off for full &quot;fidelity&quot; */
    for(i = statbuf.st_size / 2, p = bufp; i--; ) {
        /* unpack to vals per byte */
        c = *p;
        comout(scc_base,dac[c &amp; 0xf]);
        comout(scc_base,dac[c &gt;&gt; 4]);
        farinc(p);
    }
    enable();       /* turn interrupts back on */
    exit(0);
}

/*
                        line_setup

    Sets up spec'd line for 115200, returns ptr to
    assoc'd chip channel.
*/
int
line_setup(int linenum)
{
    union REGS regs;
    int scc_base;

    scc_base = linenum ? 0x2f8 : 0x3f8;

    /* BIOS call does most of it */
    regs.h.ah = 0;
    regs.h.al = 0xe3;               /* 9600,N,8,1 */
    regs.x.dx = linenum;
    int86(0x14,&amp;regs,&amp;regs);

    /* now talk nasty to the chip, write baud div = 1 for 115200 */
    outportb(scc_base + SCC_CTRL,inportb(scc_base + SCC_CTRL) | 0x80);
    outportb(scc_base + SCC_DATA,1);        /* write least sig */
    outportb(scc_base + SCC_INTCTRL,0);     /* write most sig */
    outportb(scc_base + SCC_CTRL,inportb(scc_base + SCC_CTRL) &amp; 0x7f);
    return(scc_base);
}

static atten,bias;

/*
                        set_vol

    Sets conversion factors for spec'd volume.
*/
void
set_vol(int volume)
{
    atten = (10 - volume) * 3;
    bias = (256 - (9 * atten)) / 2;
}

/*
                        convert

    Converts 8 bit PCM value to index into ASCII lookup table
    by attenuating and clipping as necessary.

*/
unsigned char
convert(int c)
{
    c -= bias;
    if(c &lt; 0) c = 0;    /* clip negative peaks */
    c /= atten;
    if(c &gt; 8) c = 8;    /* clip positive peaks */
    return(c);
}


</PRE>

<h4><a name="0246_000a"><a name="0246_000b"><B>[LISTING TWO]</B></H4>

<PRE>


/*
    ARPEGGIO.C - generates test sound file
*/
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;

#define SAMPRATE    11520           /* for 115.2 kbaud */
#define DURATION    (SAMPRATE/15)   /* 1/15 sec units */
#define MAX_NOTES   73              /* six octaves */

FILE *fp;       /* output file */

/* protos */
void init_notes(void);
void note(int note_num, int duration, int decay);
void arpeggio(int basenote, int step);

/*
                        main
*/
main(int argc, char **argv)
{
    if(argc != 2) {
        printf(&quot;Usage: arpeggio [outfile]\n&quot;);
        exit(1);
    }
    if((fp = fopen(argv[1],&quot;wb&quot;)) == NULL) {
        printf(&quot;Can't open output file '%s'\n&quot;,argv[1]);
        exit(1);
    }
    init_notes();

    arpeggio(24,0);
    arpeggio(15,12);
    arpeggio(22,12);
    arpeggio(19,0);
    arpeggio(24,0);
    note(24,10,8);
    exit(0);
}

/*
                        arpeggio

    Recursively generates a pretty little arpeggio.
*/
void
arpeggio(int basenote, int step)
{
    note(basenote + step,1,2);  /* plinky going up */
    if(step == 24)              /* 2 octave arpeggio */
        return;
    else if(step % 12 == 4 || step % 12 == 9)
        arpeggio(basenote,step + 3);
    else
        arpeggio(basenote,step + 2);
    note(basenote + step,1,8);  /* legato coming down */
}

static double notetab[60], rad_per_samp;

/*
                        init_notes

    Builds note frequency table and calcs radians/sample.
*/
void
init_notes(void)
{
    double twlfth_root2,freq;
    int i;

    twlfth_root2 = pow(2.0,1.0 / 12.0); /* compute semitone interval */
    for(i = 0, freq = 110.0 ; i &lt; MAX_NOTES; i++) {
        notetab[i] = freq;
        freq *= twlfth_root2;           /* up a semitone */
    }
    rad_per_samp = 2.0 * M_PI / SAMPRATE;
}

/*
                        note

    Looks up note in frequency table and performs.
*/
void
note(int note_num, int duration, int decay)
{
    int c;
    long i,cnt;
    double freq,val,env,vol = 50.0;

    freq = notetab[note_num];               /* look up note frequency */
    cnt = duration * DURATION;              /* calc count for duration */
    env = 0.999 + decay * 0.0001;           /* calc envelope decay factor */
    for(i = 0; i &lt; cnt; i++) {
        val = sin(rad_per_samp * freq * i); /* compute sine wave val */
        c = (int)(vol * val) + 128;         /* convert to 8 bit PCM */
        fputc(c,fp);                        /* write to output file */
        vol *= env;                         /* make note decay */
    }
}


</pre><HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
