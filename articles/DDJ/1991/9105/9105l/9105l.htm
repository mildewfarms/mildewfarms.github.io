<HTML>
<META NAME="year" CONTENT="1991">
<HEAD>
<TITLE>MAY91: GRAPHICS PROGRAMMING</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>GRAPHICS PROGRAMMING<a name="012b_0003"></h1><P>
<h2><a name="012b_0001"><a name="012b_0000">Further Ruminations of the Edsun CEG/DAC</h2><P>
<h3>Michael Abrash</h3><P>
<a name="012b_0002"><a name="012b_0000">Of late, I find myself asking many questions, but finding few easy answers.  How do lawyers manage to innovate without the incentive and protection of patents for their work? Why is this nation capable of mounting an awesome attack half a world away in just a couple of months, but unable to devise a coherent energy policy in ten years?  Why does anyone buy a 386+387 machine when a 486 costs just about the same and is two to five times faster at floating-point operations?  I wonder about these things, I do.  And, for lo these many weeks since last we spoke, I have wondered this: What is the place, in the grand scheme of things, of the Edsun Continuous Edge Graphics Digital-to-Analog-Converter (CEG/DAC)?  What is it that this chip can and cannot do?<P>
<h3><a name="012b_0004">The CEG/DAC<a name="012b_0004"></h3><P>
As I discussed last month, the CEG/DAC is a VGA DAC substitute that makes a VGA capable of displaying graphics of near 24-bit-per-pixel (bpp) quality.  This is accomplished via two features: Embedding in the bitmap information that reprograms the palette (EDP), and specifying pixel colors as mixes of the colors of neighboring pixels (pixel weighting).  I stated last month that I think that Super VGA-plus-CEG/DAC may well be the next PC graphics standard.  I still think that.  The question I now have is: What sorts of graphics are the features of the CEG/DAC good for, out of the many things a PC programmer might wish for?<P>
Were the CEG/DAC a true 24-bpp device, there'd be no question; it would be able to display any sort of graphics at all, limited only by the speed of the graphics code.  However, the CEG/DAC is not a true 24-bpp device, and although sometimes it is a good substitute, sometimes it clearly is not--and often it is somewhere in between.  I have come to think that the CEG/DAC is more useful for static images than for dynamic images (animation, real-time screen updates, and the like); in particular, the limitations of pixel weighting must be attended to carefully when animating.<P>
For example, consider the simple task of drawing a line.<P>
<h3><a name="012b_0005">Drawing Lines Through Space<a name="012b_0005"></h3><P>
The standard technique for drawing lines rapidly is Bresenham's Algorithm.  Bresenham-style lines suffer from one flaw: They tend to look jagged, because the line jumps abruptly from one pixel to the next.<P>
The traditional cure for jaggies is antialiasing.  Technically, antialiasing is the process of removing spurious signals resulting from undersampling, typically with a low-pass filter, but in the context of graphics, antialiasing has come to mean any process that helps eliminate jaggies.  The CEG/DAC's pixel weighting feature is designed to do exactly that, by allowing you to mix the colors of horizontally neighboring pixels.<P>
Pixel weighting works very well for smoothing jaggies in a single, static image.  Run <a href="#012b_000c">Listing Two</A> (page 149), which when linked to <a href="#012b_0009">Listing One</A> (page 149) draws a rotating nonantialiased line (floating point rather than Bresenham's is used for clarity and to save space, but the same points are drawn), and press a key to freeze the image; you will see prominent jaggies along the length of the line.  Now run <a href="#012b_000e">Listing Three</A> (page 150) linked to <a href="#012b_0009">Listing One</A> (if you have a CEG/DAC) or <a href="#012b_0010">Listing Four</A> (page 150) linked to <a href="#012b_0009">Listing One</A> (if you don't) to draw an antialiased line, and press a key to freeze the image.  (<a href="#012b_000e">Listing Three</A> antialiases using CEG/DAC pixel weighting, as described later, and Listing Four emulates pixel weighting by setting up the VGA palette with 32 weighted mixes of the line and background colors.)  The jaggies are gone, replaced with smooth edges.<P>
There are two sorts of aliasing in graphics, though.  What we've just seen is spatial aliasing--aliasing over space, in this case over the pixels of the screen.  There's also temporal aliasing, aliasing from one image to the next as animation is performed.  When <a href="#012b_000c">Listing Two</A> is allowed to run freely, temporal aliasing is clearly visible in the form of jaggies crawling wildly along the edges of the line.  It is this distracting and often hideous effect that drives the need for temporal antialiasing.<P>
<h3><a name="012b_0006">Drawing Lines Over Time<a name="012b_0006"></h3><P>
Pixel weighting doesn't serve particularly well for temporal antialiasing, for a number of reasons.  The line animation performed by <a href="#012b_000e">Listings Three</A> and <a href="#012b_0010">Four</A> looks better than that of <a href="#012b_000c">Listing Two</A>, but there are still shifting patterns in the line, the line's brightness varies, and the line's motion appears less than perfectly smooth.  There are several reasons for this, two of which have nothing to do with the CEG/DAC: The aspect ratio in 320 x 200 mode isn't 1:1, and the fineness and accuracy of motion is limited by the use of integer coordinates.  (Then again, pixel weighting is poorly suited to drawing based on fractional coordinates, because such drawing must often represent three or more color influences on a single pixel.)  However, a number of other problems are directly related to the nature of the CEG/DAC.<P>
For one thing, the line's brightness varies with angle.  This is a side effect of the way the CEG/DAC handles Y-major lines (lines that are longer along the Y axis than the X axis). Normally, the CEG/DAC requires at least three pixels in a row to specify a single weighted pixel: Two colors to average between and a pixel weighting, which averages between the two colors, as shown in <a href="1991012d.htm">Figure 1</A>.  (I'm speaking of Advanced-8 mode here, the mode in which the maximum number of colors is available.)  Requiring three or more pixels across for pixel weighting in this fashion would make it impossible to draw thin lines, especially in close proximity.<P>
Edsun solved this by introducing a special case.  If a pixel color is followed by a pixel mix and then by another color, the first color is taken to specify a line color, and the mix is taken to specify the weighting between the line color and the background color for the two pixels of the line, as shown in <a href="1991012e.htm">Figure 2</A>.  The mix itself is applied to the pixel that specified the line color, and the complement of the mix is applied to the pixel that specified the mix.  In other words, a color-mix pair in the middle of a line of colors is taken to be a standalone unit specifying a cross-section of a two-pixel-wide line, and the mix is applied to spread the color across the two pixels in such a way that the intensity of the line color totals 100 percent.  (Neither is this the only special case; CEG/DAC programming is not trivial.)<P>
A total line intensity of 100 percent on each scan line sounds good, but in fact it is rarely correct.  A vertical line should indeed have 100 percent intensity across each scan line.  However, as the line tilts toward 45 degrees, the intensity per scan line should increase toward square root of two, because the line is covering more ground from one scan line to the next.  With pixel weighting, however, the intensity per scan line remains the same, so the overall brightness of the line decreases.<P>
Also, the width of a line drawn with 100 percent-sum pixel weighting varies with angle; horizontal and vertical lines are only one pixel wide, but all other lines spread across two pixels along the minor axis (the axis along which the line's length is less).  The line's width, measured along the normal, also varies along the length of the line; this shows up as motion along the edges of the line as it turns, although it is more subdued than normal jaggies.<P>
The above caveats are also true of static images drawn with pixel weighting, but there they are not nearly as noticeable.  I've said before that graphics is the art of fooling the eye and the brain.  They're easily fooled for many things; for example, they're quite willing to interpret a sequence of slightly different images, displayed at a rate of 30 images per second, as motion.  By the same token, however, disturbances in the smooth progression of change over time stick out like red flags.  Don't ask me why; probably it was a handy trait to have when spotting prey or avoiding being prey was a full time job.  At any rate, consistency from one frame to the next is essential.<P>
Unfortunately, temporal consistency requires more than simply smoothing edges; it requires filtering the image so that spurious elements are removed -- that is, true antialiasing.  With true antialiasing, a consistent representation of the image can be obtained from one frame to the next, no matter how the image is rotated or shifted, or what it is bordered by.  I'd love to show you true antialiasing in action, but I'm well and truly running out of space; I promise to return to the topic soon.<P>
True antialiasing requires that colors be settable as arbitrary mixes of the surrounding primitives in all directions.  Pixel weighting does not make that possible.  Therefore, except under special circumstances, pixel weighting is a dejagging rather than antialiasing tool, and is useful primarily for smoothing static images (where it surely does look good), rather than for smoothing dynamic images.<P>
<h3><a name="012b_0007">Further Limitations of Pixel Weighting<a name="012b_0007"></h3><P>
There are other problems with dynamic pixel weighting.  Programming is a cumbersome process, for starters.  Consider <a href="#012b_000e">Listing Three</A>.  For Y-major lines, the weighting between the two pixels on each scan line has to be calculated; while that can certainly be done without floating-point calculations, I do not see how it can be done without either an integer divide or a table search.  Either way, lines drawn with pixel weighting are going to be considerably slower than Bresenham's lines.<P>
X-major lines have their complications, too.  Here the minor axis is vertical, so we must split the 100 percent brightness at each step between two scan lines.  Unfortunately, the CEG/DAC is strictly a horizontally oriented device, so we are obliged to make sure that the line color precedes the mix sequence on each scan line, as shown in <a href="1991012f.htm">Figure 1</A>.  (The pixel establishing the line color actually displays in the previous pixel's color; the line color doesn't show up until the first mix pixel, in the form of the specified mix.)  There's another complication; if any scan line has only one mix command, then that mix and the preceding color are interpreted as a special-case two pixel line mix, as described earlier, rather than a normal mix sequence, and the colors displayed for the pixels are quite different.  These complications could have been handled as special cases in <a href="#012b_000e">Listing Three</A>; however, I decided that the code would be simpler and the operation of the CEG/DAC would be clearer if I just drew all the mix pixels, then processed the buffer afterward to insert leading line color pixels and clean up one-mix sequences.<P>
If you think all this sounds involved and slow, well, it is.  It's by no means unmanageable, and certainly much more efficient implementations are possible, but CEG drawing does, nonetheless, generally require additional coding and execution time.  Moreover, I didn't have to worry about handling intersections with other lines and graphics objects in <a href="#012b_000e">Listing Three</A>; normally, such intersections have to be checked for and potentially patched up, because they can generate unintended results by disrupting existing mix sequences.  In addition, there are potential problems with left-side clipping of pixel weighting sequences.<P>
There are, of course, workarounds for many of these limitations.  If no rotation is performed and all moves are by an integral number of pixels, edge crawling largely vanishes. Careful construction of animation so that objects don't overlap can eliminate the complications of checking the bitmap for intersections.  Also, many primitives, such as rectangle fills, don't require any antialiasing, and antialiased text can be predefined, then simply copied to the screen as needed.<P>
In fact, predefining antialiased images and avoiding troublesome situations such as rotated polygons, intersections with other objects, and clipping may be keys to high-performance CEG/DAC code.  When such conditions are unavoidable, you may want to consider EDP (on-the-fly palette loading), which is probably the best bet for high-color-content dynamic drawing with the CEG/DAC.  (Basic-8 mode is simpler and faster when only a few colors are required.)<P>
Consider this: EDP does not suffer from clipping problems.  Neither must drawing that relies only on EDP concern itself with intersections; every pixel is independent.  The only remaining problem lies in making available all the colors needed for drawing.  Suppose that in 640 x 480 256-color mode, you choose to allocate 160 pixels at the left and right edges of the screen (about 25 percent of the width of the screen) to static images, composed of mostly solid colors.  EDP requires five pixels to load a single palette location, so about 30 colors could be changed per scan line during the static edges.  Additional colors could be set in the active portion of the display, with the EDP commands embedded in areas of solid color.<P>
Now, there would be 480 pixels in the active region across each scan line.  223 independent colors (the number available in Advanced-8 mode), with at least 30 changeable from line to line, could often serve quite nicely to draw whatever it is that those 480 pixels across are supposed to represent.  No, it wouldn't be the same as drawing with 24 arbitrary bpp, but, properly structured, it might not look a whole lot different; <a href="#012b_0010">Listing Four</A>, which uses only careful palette loading, antialiases just as well as the CEG hardware in <a href="#012b_000e">Listing Three</A>, and, with the help of EDP, would be considerably more flexible.  (Not coincidentally, the photorealistic images in the Edsun demo have large blank borders.)  Best of all, the only complications with EDP-based drawing would be figuring out which colors to change and where for maximum effect; the far greater complications of pixel weighting are avoided.<P>
Of course, reliance on EDP is not a technique that a general-purpose driver can use; it's necessary that the application be CEG/DAC-aware.  Long ago, all graphics applications were hardware-aware; now quasi-hardware-independence, through general interfaces such as Windows and X Window System, is the mainstream.  I suspect that the truly mind-blowing CEG/DAC applications will be throwbacks to that earlier era.  In the end, what I'm saying is that if you want to do spectacular animation on the CEG/DAC, you might do well to ignore pixel weighting altogether, at least for images that must be generated in realtime or might intersect, and focus on EDP.  That was obviously not Edsun's intent, for they didn't make it possible to enable only EDP; that's a shame, because then we'd have 255 main colors to work with.<P>
Overall, I think the CEG/DAC is better suited to static images than dynamic; as the Edsun demo illustrates, the CEG/DAC is stunningly good at static displays, and as the examples in this column illustrate, there are significant complications and limitations associated with dynamic displays.  One of the tricks is converting as much drawing as possible from dynamic to static; that's what predefining images and keeping them from intersecting is all about. Although the CEG/DAC is a powerful resource, in some respects it comes up short; it should be fascinating to watch as techniques evolve to work around its limitations.<P>
<h3><a name="012b_0008">Book of the Month<a name="012b_0008"></h3><P>
This month's book is The RenderMan Companion, by Steve Upstill (Addison-Wesley, 1990). RenderMan is a comprehensive programming interface specification for 3-D graphics; implementations of the RenderMan interface have been the basis for stunning photorealistic imaging and special effects.  (For background information on RenderMan, see Upstill's article &quot;Photorealism in Computer Graphics,&quot; in DDJ, November 1988).  Companion takes you on a wide-ranging tour of the RenderMan interface, with plenty of sample code and output; even if you never program RenderMan directly, this book provides worthwhile insight into the nature of 3-D rendering.  At the very least, read the foreword, a brief history of computer graphics and the development of RenderMan; it provides a sense of the dizzying pace of progress in computer graphics, and of the people behind the wonders.<P>
Which brings a thought to mind.  I don't know how many, if any, of the techniques discussed in Companion and in the various standard graphics references are patented, but I've never seen a mention of such.  How is it, I ask all you software patent proponents, that all this invention, publishing, and sharing of knowledge for the public benefit happened without the &quot;necessary&quot; incentive and protection of patents?<P>
Think about it, that's all I ask.<P>

<PRE>

_GRAPHICS PROGRAMMING COLUMN_
by Michael Abrash

<a name="012b_0009">
<a name="012b_000a"></pre><B>[LISTING ONE]</B><pre><a name="012b_000a">

/* Animates a line rotating about its center. 180 frames are constructed
offscreen, one for each 1 degree rotation, and then copied to the screen to
produce animation. Edsun CEG antialiasing or emulated CEG antialiasing may
optionally be performed. To compile for Edsun CEG antialiasing, define
USE_CEG on the compiler command line (/DUSE_CEG for MSC, -DUSE_CEG for Turbo C)
and link this code with Listing 3. To compile for emulated CEG antialiasing,
define EMULATE_CEG on the compiler command line and link this code with
<a name="012b_000b"></pre><B>[LISTING 4.]</B><pre><a name="012b_000b">
All C code tested with Microsoft C 5.0. Requires a large data model
(the compact model was used for testing). */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;conio.h&gt;
#include &lt;math.h&gt;
#include &lt;dos.h&gt;
#ifdef __TURBOC__
#include &lt;mem.h&gt;
#else
#include &lt;memory.h&gt;
#endif

/* Size of frames drawn to system memory, and size of the circle
   formed by the rotation of the line segment around its center */
#define FRAME_WIDTH     49
#define FRAME_HEIGHT    49
#define FRAME_CENTER_X  (FRAME_WIDTH/2)
#define FRAME_CENTER_Y  (FRAME_HEIGHT/2)
#define X_RADIUS        (FRAME_WIDTH/2-1)
#define Y_RADIUS        (FRAME_HEIGHT/2-1)
#define SCREEN_WIDTH    320
#define SCREEN_HEIGHT   200
#define SCREEN_SEGMENT  0xA000
#define X_OFFSET_ADJUST ((SCREEN_WIDTH/2) - FRAME_CENTER_X)
#define Y_OFFSET_ADJUST ((SCREEN_HEIGHT/2) - FRAME_CENTER_Y)
#define PI              3.141592

int main(void);
extern void DrawLine(unsigned char *,int,int,int,int,int,int,int);
extern int SetCEGMode(int);
extern void SetAAPalette(void);

int main() {
   unsigned char *FramePtr[180], *ScreenPtr, *TempPtr;
   int angle, X1, Y1, X2, Y2, temp, i;
   union REGS regset;

   /* Generate 180 frames, one for each 1 degree rotation of the line
      segment about its center; store the results in system memory */
   printf(&quot;Precalculating frames. Please wait...&quot;);
   /* First, allocate space for the frames */
   for (angle = 0; angle &lt; 180; angle++) {
      if ((FramePtr[angle] = (unsigned char *)
            malloc(FRAME_WIDTH * FRAME_HEIGHT)) == NULL) {
         printf(&quot;Out of memory\n&quot;);
         return(1);
      }
      /* Clear the frame to black */
      memset(FramePtr[angle], 0, FRAME_WIDTH * FRAME_HEIGHT);
   }

   /* Generate the frames, one for each 1 degree rotation of the line
      segment about its center */
   for (angle = 0; angle &lt; 180; angle++) {
      /* Calculate upper end of line as a counterclockwise rotation from right
         end of a horizontal line and lower end of line as a counterclockwise
         rotation from left end of a horizontal line */
      temp = cos((double)angle * PI / 180.0) * X_RADIUS + 0.5;
      X1 = FRAME_CENTER_X + temp;
      X2 = FRAME_CENTER_X - temp;
      temp = sin((double)angle * PI / 180.0) * Y_RADIUS + 0.5;
      Y1 = FRAME_CENTER_Y - temp;
      Y2 = FRAME_CENTER_Y + temp;
      /* Draw the line in white */
      DrawLine(FramePtr[angle], FRAME_WIDTH, FRAME_HEIGHT, X1, Y1,
            X2, Y2, 15);
   }

   /* Set to the standard 256-color VGA mode, mode 0x13, 320x200 */
   regset.x.ax = 0x0013; int86(0x10, &amp;regset, &amp;regset);

#ifdef USE_CEG
   /* Enable Advanced-8 CEG mode */
   if (!SetCEGMode(13)) {
   /* Restore text mode and we're done */
      regset.x.ax = 0x0003;
      int86(0x10, &amp;regset, &amp;regset);
      fprintf(stderr, &quot;CEG/DAC not installed\n&quot;);
      return(1);     /* no CEG/DAC installed */
   }
#endif

#ifdef EMULATE_CEG
   /* Set the palette up for antialiasing */
   SetAAPalette();
#endif

   /* Draw the frames, at a rate of 1 frame per screen refresh
      interval, until a key is pressed */
   for (angle = 0;;) {
    do {
      /* Point to the destination area of display memory */
#ifdef __TURBOC__
      ScreenPtr = MK_FP(SCREEN_SEGMENT, (Y_OFFSET_ADJUST*SCREEN_WIDTH)
            + X_OFFSET_ADJUST);
#else
      FP_SEG(ScreenPtr) = SCREEN_SEGMENT;
      FP_OFF(ScreenPtr) =
            (Y_OFFSET_ADJUST * SCREEN_WIDTH) + X_OFFSET_ADJUST;
#endif
      /* Wait for the start of the vertical non-display portion of the
         frame */
      while (inp(0x3DA) &amp; 0x08) ;
      while (!(inp(0x3DA) &amp; 0x08)) ;
      /* Copy over the current frame, a scan line at a time */
      for (i = 0, TempPtr = FramePtr[angle]; i &lt; FRAME_HEIGHT;
            i++, ScreenPtr += SCREEN_WIDTH, TempPtr += FRAME_WIDTH) {
         memcpy(ScreenPtr, TempPtr, FRAME_WIDTH);
      }
      angle = (angle + 1) % 180; /* wrap back every 180 frames */
    } while (!kbhit());
    if (getch() == 0x1B)   /* pause if a key was pressed */
      break;               /* exit if the key was Esc */
    getch();               /* wait for another key and resume */
   }

   /* Return the CEG/DAC to standard VGA operation by writing to
      palette location 223, restore text mode and we're done */
#ifdef USE_CEG
   while (inp(0x3DA) &amp; 0x08) ;      /* wait for the start of */
   while (!(inp(0x3DA) &amp; 0x08)) ;   /* vertical non-display */
   outp(0x3C8, 223); outp(0x3C9, 0); outp(0x3C9, 0); outp(0x3C9, 0);
#endif
   regset.x.ax = 0x0003; int86(0x10, &amp;regset, &amp;regset);
   return(0);
}






<a name="012b_000c">
<a name="012b_000d"></pre><B>[LISTING TWO]</B><pre><a name="012b_000d">

/* Draws a non-antialiased line from (X1,Y1) to (X2,Y2) into the buffer
pointed to by BufferPtr, of width BufferWidth and height BufferHeight. */

#include &lt;dos.h&gt;
#include &lt;math.h&gt;
#define SWAP(a,b) {temp = a; a = b; b = temp;}

void DrawLine(unsigned char *BufferPtr, int BufferWidth,
      int BufferHeight, int X1, int Y1, int X2, int Y2, int color)
{
   int X, Y, DeltaX, DeltaY, temp;
   double Slope, InverseSlope;

   /* Calculate the X and Y lengths of the line */
   DeltaX = X2 - X1;
   DeltaY = Y2 - Y1;

   /* Determine the major axis */
   if (abs(DeltaY) &gt; abs(DeltaX)) {
      /* Y is the major axis */
      if (DeltaY &lt; 0) {    /* make sure DeltaY is positive */
         SWAP(X1, X2);
         SWAP(Y1, Y2);
         DeltaX = -DeltaX;
         DeltaY = -DeltaY;
      }
      InverseSlope = (double)DeltaX / (double)DeltaY;
      /* Scan out the line, stepping along the Y axis one pixel at a
         time and calculating the corresponding X coordinates */
      for (Y = Y1; Y &lt;= Y2; Y++) {
         X = X1 + (int)floor(((double)(Y - Y1) * InverseSlope) + 0.5);
         *(BufferPtr + BufferWidth * Y + X) = color;
      }
   } else {
      /* X is the major axis */
      if (DeltaX &lt; 0) {    /* make sure DeltaX is positive */
         SWAP(X1, X2);
         SWAP(Y1, Y2);
         DeltaX = -DeltaX;
         DeltaY = -DeltaY;
      }
      Slope = (double)DeltaY / (double)DeltaX;
      /* Scan out the line, stepping along the X axis one pixel at a
         time and calculating the corresponding Y coordinates */
      for (X = X1; X &lt;= X2; X++) {
         Y = Y1 + (int)floor(((double)(X - X1) * Slope) + 0.5);
         *(BufferPtr + BufferWidth * Y + X) = color;
      }
   }
}







<a name="012b_000e">
<a name="012b_000f"></pre><B>[LISTING THREE]</B><pre><a name="012b_000f">

/* Draws an Advanced-8 CEG-antialiased line from (X1,Y1) to (X2,Y2) into buffer
pointed to by BufferPtr, of width BufferWidth and height BufferHeight. */

#include &lt;dos.h&gt;
#include &lt;math.h&gt;
#define SWAP(a,b) {temp = a; a = b; b = temp;}

void DrawLine(unsigned char *BufferPtr, int BufferWidth,
      int BufferHeight, int X1, int Y1, int X2, int Y2, int color)
{
   int X, Y, DeltaX, DeltaY, temp, WeightingIndex, i, MixLength;
   double Slope, InverseSlope, XFloat, YFloat;

   /* Calculate X and Y lengths of the line */
   DeltaX = X2 - X1;
   DeltaY = Y2 - Y1;

   /* Determine the major axis */
   if (abs(DeltaY) &gt; abs(DeltaX)) {
      /* Y is the major axis */
      if (DeltaY &lt; 0) {    /* make sure DeltaY is positive */
         SWAP(X1, X2);
         SWAP(Y1, Y2);
         DeltaX = -DeltaX;
         DeltaY = -DeltaY;
      }
      InverseSlope = (double)DeltaX / (double)DeltaY;
      /* Scan out line, stepping along the Y axis 1 pixel at a time and
         calculating corresponding pair of X coordinates, 1 on each side of
         ideal line, with the mix between background color and line color at
         each of the two X coordinates proportional to proximity of line to
         that pixel, and with line color intensities of the two X coordinates
         summing to 100% */
      for (Y = Y1; Y &lt;= Y2; Y++) {
         /* Exact X coordinate at this Y coordinate */
         XFloat = (double)X1 + ((double)(Y - Y1) * InverseSlope);
         /* Nearest X coordinate on or to the left of the line */
         X = (int)floor(XFloat);
         /* Draw the color to the left pixel */
         *(BufferPtr + BufferWidth * Y + X) = color;
         /* Draw the weighting index for the desired color mix for the
            left pixel to the right pixel; the CEG/DAC uses this to
            mix the color we just wrote with the background color and
            draw that for the left pixel, then uses the complementary
            mix to draw the right pixel (this pixel). Confusing, but
            that's the way the CEG/DAC works! */
         *(BufferPtr + BufferWidth * Y + X + 1) =
               (int)((XFloat - X) * 32.0) + 192;
      }
   } else {
      /* X is the major axis */
      if (DeltaX &lt; 0) {    /* make sure DeltaX is positive */
         SWAP(X1, X2);
         SWAP(Y1, Y2);
         DeltaX = -DeltaX;
         DeltaY = -DeltaY;
      }
      Slope = (double)DeltaY / (double)DeltaX;
      /* Scan out the line, stepping along the X axis one pixel at a
         time and calculating the corresponding pair of Y coordinates,
         one on each side of the ideal line, with the mix between the
         background color and the line color at each of the two Y
         coordinates proportional to the proximity of the line to that
         pixel, and with the line color intensities of the two Y
         coordinates summing to 100% */
      for (X = X1; X &lt;= X2; X++) {
         /* Exact Y coordinate at this X coordinate */
         YFloat = (double)Y1 + ((double)(X - X1) * Slope);
         /* Nearest Y coordinate on or above the line */
         Y = (int)floor(YFloat);
         /* Calculate the weighting index for the percentage of this
            pixel that's on the top scan line of the pair this pixel
            is split between */
         WeightingIndex = (int)((YFloat - Y) * 32.0);
         /* Set the weighting for the top pixel */
         *(BufferPtr + BufferWidth * Y + X) =
               WeightingIndex + 192;
         /* Set the weighting for the bottom pixel, with the top and
            bottom weightings summing to 100% */
         *(BufferPtr + BufferWidth * (Y + 1) + X) =
               31 - WeightingIndex + 192;
      }

      /* Finally, post-process the buffer to put leading mix color
         bytes on mix sequences (so the weighting indexes have
         something to mix), and to turn one-pixel-wide sequences
         (artifacts of the above drawing approach, which will not
         display properly) into two-pixel-wide sequences by appending
         an additional mixed pixel 100% weighted to the background color */
      for (i = 0, MixLength = 0; i &lt; (BufferWidth*BufferHeight); i++) {
         if (*(BufferPtr + i) != 0) {
            /* Part of a mix sequence; increment sequence length */
            MixLength++;
         } else {
            if (MixLength &gt; 0) {
               /* Mix sequence just ended; set the line color to start
                  the mix sequence */
                  *(BufferPtr + i - MixLength - 1) = color;
               if (MixLength == 1)
                  /* This is a 1-long mix sequence; pad it to a 2-long
                     sequence with an all-background mixed pixel, so
                     the mix sequence will display properly, rather
                     than as a special 2-wide color/mix line case */
                  *(BufferPtr + i) = 0xDF;
               MixLength = 0;
            }
         }
      }
   }
}

/* Sets the desired CEG/DAC mode, enabling CEG graphics. Returns 1 for
   success, 0 if no CEG/DAC is installed. */
int SetCEGMode(int mode) {
   /* Wait for the start of the vertical non-display portion of the
      frame */
   while (inp(0x3DA) &amp; 0x08) ;
   while (!(inp(0x3DA) &amp; 0x08)) ;

   outp(0x3C7, 222);    /* write the CEG enable sequence */
   outp(0x3C9, 'C'); outp(0x3C9, 'E'); outp(0x3C9, 'G');
   outp(0x3C7, 222);
   outp(0x3C9, 'E'); outp(0x3C9, 'D'); outp(0x3C9, 'S');
   outp(0x3C7, 222);
   outp(0x3C9, 'U'); outp(0x3C9, 'N');
   outp(0x3C9, mode);   /* write the CEG mode */

   /* CEG mode should be enabled. Make sure this is a CEG/DAC */
   outp(0x3C6, 0xFF);   /* enable all DAC mask bits */
   if ((inp(0x3C6) &amp; 0x70) == 0x70)
      return(0);  /* no version # bit is 0; this is not a CEG/DAC */
   else
      return(1);  /* this is a CEG/DAC, and it's ready to go */
}




<a name="012b_0010">
<a name="012b_0011"></pre><B>[LISTING FOUR]</B><pre><a name="012b_0011">

/* Draws an antialiased line from (X1,Y1) to (X2,Y2) into the buffer pointed
to by BufferPtr, of width BufferWidth and height BufferHeight. White on black
is the only supported color combination. */

#include &lt;dos.h&gt;
#include &lt;math.h&gt;
#define SWAP(a,b) {temp = a; a = b; b = temp;}

void DrawLine(unsigned char *BufferPtr, int BufferWidth,
      int BufferHeight, int X1, int Y1, int X2, int Y2, int color)
{
   int X, Y, DeltaX, DeltaY, temp, WeightingIndex, i, MixLength;
   double Slope, InverseSlope, XFloat, YFloat;

   /* Calculate X and Y lengths of the line */
   DeltaX = X2 - X1;
   DeltaY = Y2 - Y1;

   /* Determine the major axis */
   if (abs(DeltaY) &gt; abs(DeltaX)) {
      /* Y is the major axis */
      if (DeltaY &lt; 0) {    /* make sure DeltaY is positive */
         SWAP(X1, X2);
         SWAP(Y1, Y2);
         DeltaX = -DeltaX;
         DeltaY = -DeltaY;
      }
      InverseSlope = (double)DeltaX / (double)DeltaY;
      /* Scan out line, stepping along the Y axis one pixel at a time and
         calculating corresponding pair of X coordinates, 1 on each side of
         ideal line, with the mix between background color and line color at
         each of the two X coordinates proportional to proximity of line to
         that pixel, and with line color intensities of two X coordinates
         summing to 100% */
      for (Y = Y1; Y &lt;= Y2; Y++) {
         /* Exact X coordinate at this Y coordinate */
         XFloat = (double)X1 + ((double)(Y - Y1) * InverseSlope);
         /* Nearest X coordinate on or to the left of the line */
         X = (int)floor(XFloat);
         /* Calculate the weighting index for the percentage of this
            pixel that's in the left column of the pair this pixel is
            split between */
         WeightingIndex = (int)((XFloat - X) * 32.0);
         /* Draw the left pixel with the desired color weighting */
         *(BufferPtr + BufferWidth * Y + X) = WeightingIndex + 16;
         /* Draw the right pixel with the complement of the left pixel
            color weighting, so that the line color intensities sum to 100% */
         *(BufferPtr + BufferWidth * Y + X + 1) =
               31 - WeightingIndex + 16;
      }
   } else {
      /* X is the major axis */
      if (DeltaX &lt; 0) {    /* make sure DeltaX is positive */
         SWAP(X1, X2);
         SWAP(Y1, Y2);
         DeltaX = -DeltaX;
         DeltaY = -DeltaY;
      }
      /* Scan out the line, stepping along the X axis one pixel at a
         time and calculating the corresponding pair of Y coordinates,
         one on each side of the ideal line, with the mix between the
         background color and the line color at each of the two Y
         coordinates proportional to the proximity of the line to that
         pixel, and with the line color intensities of the two Y
         coordinates summing to 100% */
      Slope = (double)DeltaY / (double)DeltaX;
      for (X = X1; X &lt;= X2; X++) {
         /* Exact Y coordinate at this X coordinate */
         YFloat = (double)Y1 + ((double)(X - X1) * Slope);
         /* Nearest Y coordinate on or above the line */
         Y = (int)floor(YFloat);
         /* Calculate the weighting index for the percentage of this
            pixel that's on the top scan line of the pair this pixel
            is split between */
         WeightingIndex = (int)((YFloat - Y) * 32.0);
         /* Draw the top pixel with the desired color weighting */
         *(BufferPtr + BufferWidth * Y + X) =
               WeightingIndex + 16;
         /* Draw the bottom pixel with the complement of the top pixel
            color weighting, so that the line color intensities sum to
            100% */
         *(BufferPtr + BufferWidth * (Y + 1) + X) =
               31 - WeightingIndex + 16;
      }
   }
}

/* Sets palette entries 16-47 for antialiasing, stepping from solid white to
solid black (increments of 1/31st.) Steps are corrected for a gamma of 2.3. */
void SetAAPalette() {
   union REGS regset;
   struct SREGS sregs;
   static unsigned char AASettings[32*3] = {
      63,63,63, 62,62,62, 61,61,61, 60,60,60, 59,59,59, 58,58,58,
      57,57,57, 56,56,56, 55,55,55, 54,54,54, 53,53,53, 52,52,52,
      51,51,51, 50,50,50, 49,49,49, 47,47,47, 46,46,46, 45,45,45,
      43,43,43, 42,42,42, 40,40,40, 39,39,39, 37,37,37, 35,35,35,
      33,33,33, 31,31,31, 28,28,28, 26,26,26, 23,23,23, 19,19,19,
      14,14,14,  0, 0, 0
   };

   regset.x.ax = 0x1012;
   regset.x.bx = 0x0010;
   regset.x.cx = 0x0020;
   regset.x.dx = (unsigned int) AASettings;
   segread(&amp;sregs);
   sregs.es = sregs.ds;       /* point ES:DX to AASettings */
   int86x(0x10, &amp;regset, &amp;regset, &amp;sregs);
}
</pre>

<HR><P>Copyright &copy; 1991, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
