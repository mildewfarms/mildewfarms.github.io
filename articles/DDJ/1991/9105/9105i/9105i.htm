<HTML>
<META NAME="year" CONTENT="1991">
<HEAD>
<TITLE>MAY91: PROGRAMMING PARADIGMS</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>PROGRAMMING PARADIGMS<a name="0125_0003"></h1><P>
<h2><a name="0125_0001"><a name="0125_0000">Windows and Gates</h2><P>
<h3>Michael Swaine</h3><P>
<a name="0125_0002"><a name="0125_0000">Last August, I wrote a column titled &quot;Windows 3.0 Challenges All the Talent in the Room.&quot;  Time has given me some second thoughts about things I wrote then.<P>
Windows vs. MS-DOS.  A pseudo-conflict, to be sure.  Windows requires DOS, and the success of Windows ensures the continued existence of DOS.  My point was that, if Windows does everything that most people want from an operating system and does it better than DOS, then DOS may wane as a development platform.  What I should have realized is that the processing power and memory capacity of the typical machine in use will not grow as fast as the demands that Windows will make.  So as long as Windows supports DOS applications, there will probably be a market for them.<P>
Windows vs. OS/2.  I didn't really have anything to say about OS/2 in that column, and that still seems appropriate, but I do hear of developers converting OS/2 applications to Windows.<P>
Windows 3.0 vs. Macintosh System 7.0. System 7.0 still has a much better user interface, is a more complete product, and has a better file system.  But Win 3 is gaining ground, because the System 7.0 released this month will be less than the product shown to developers more than a year ago.  While Microsoft is adding features to Windows, Apple has been stripping features out of System 7.0 to get it out the door.<P>
ToolBook vs. HyperCard.  In the area of user programming, I didn't reckon with ToolBook's limitations, or with another contender.  Unless Asymetrix can speed up ToolBook significantly, we are not likely to see it used for a lot of user programming, nor are we going to see a &quot;bookware&quot; market spring up, except as ports from the stackware market on the Mac side. Heizer Software, the leading name on the Mac side in the generally marginal market of spreadsheet macros and stackware and such, has converted many of its HyperCard stacks to ToolBook using ConvertIt, a tool Heizer distributes.  This allows Heizer to list in its catalog Macintosh and Windows versions of many of its stackware products, which looks impressive.  But now that Spinnaker has released the Windows version of Plus, its HyperCard clone, there is a more direct stackware connection between the platforms.  Plus reads and runs HyperCard stacks, and Plus stacks written for the Mac run on the Windows version without modification.  This would seem to be a cleaner porting path than what ToolBook has.<P>
Now the hedges: Spinnaker doesn't think of Plus as a HyperCard clone, but any unbiased observer would.  And I haven't reviewed Plus, so I can't say how complete its platform independence is, but the demonstrations I've seen have been very impressive.<P>
<h3><a name="0125_0004">Windows in the Rooms, Windows on the Floor<a name="0125_0004"></h3><P>
At the Windows &amp; OS/2 Conference in San Jose this spring, I followed up on this user programming thread.  I was also trying to catch another session on &quot;Development Using High-productivity Programming Languages.&quot;  It seems that there are a lot of ways to do Windows besides Microsoft's way; that is, by using the Software Developer's Kit (SDK).<P>
Out on the exhibit floor, this same preoccupation with alternatives to SDK was apparent. Blue Sky Software's WindowsMAKER Professional lets you point and click to produce C code. Blythe's Omnis 5 and Enfin Software's Enfin/2 are 4GLs.  GUIdance Choreographer is a shortcut to Windows apps that was getting a lot of attention at the show.  Knowledge Garden's KnowledgePro Windows is an environment for rapid development under Windows or DOS.  Viewpoint Systems' I/F Builder is an interface builder.  There were also a lot of CASE and flowcharting tools.  And of course Borland's C++, in a class by itself.  (Unintended puns get less and less avoidable as computer terminology takes over more and more of the English language.  I'd say it's spreading like a virus, but that word's been taken, too.)<P>
I had lunch on the last day of the conference with Alan Cooper, who has been supporting himself for years as an independent software author.  (That's exactly the phrase he always uses; not developer or programmer, but software author.)  Alan is the author of Super-Project, Microphone II for Windows, and an application written for Microsoft and not published.  He has been using the Windows SDK since Day One, and was skeptical about the shortcut products.<P>
Alan was chairing the last panel session of the conference, on using the SDK.  He told me that he had brought together people who had the experience to talk about the benefits and drawbacks of the SDK, and the independence to talk freely.  Too many sessions at shows like these, he told me, are thinly-veiled product advertisements.  His panelists had no products to hawk.  I had already planned to attend his session, and said so.<P>
<h3><a name="0125_0005">Outmoded, Old-fashioned, and a Waste of Time<a name="0125_0005"></h3><P>
The first question Alan asked his panelists had to do with these indirect Windows programming tools.  What they had to say is worth repeating.<P>
Cooper: &quot;I keep seeing [these 4GLs and other high-level Windows programming tools] and hearing that Windows development using SDK is outmoded, old-fashioned, and just a waste of time.  I want you guys to tell me why this is wrong.  Or right.&quot;<P>
Jim Weiler, Director, Windows User Group, Boston Computer Society: &quot;One of the key things is that you can't specify your application well enough ahead of time to know if you are going to need ... this subclass or something.  And if you can't know that, then it's hard to know that you can do everything you need to do with some of these tools.  They all say you can write your own p-code.  The next question you ask should be, 'Can I get a window handle to a window that you created in my p-code?'  If the answer is no, then that tells you something about what you can't do with your extensions to their stuff.<P>
&quot;I think it's good to break them up into different categories.  There are fast prototypers that aren't designed to write the whole app, but to get the screen [designs done].  And then there are ones that are designed to replace the whole thing, and ones that are languages, and ones that are just dynamic link libraries.  It depends on the use you put it to and the use it was designed for.  They don't all replace the SDK.&quot;<P>
Kevin Welch, President, Eikon Systems: &quot;We ran through all the tools we could get our hands on and ended up with the SDK because we found that they were not really saving us that much time.&quot;<P>
John Zicker, Viewpoint Systems: &quot;One of the things that we found after a couple of years of development is that some of these tools are very good for prototyping.  What we typically run into is the flexibility issue and the executable [speed issue].  Those were the two main things we ran into with these indirect development tools.  But you also need to look at what problem you're trying to solve.  There are some tools out there [that are useful], but I have yet to see [a mainstream app written with one of them].&quot;<P>
Cooper: &quot;That's a very interesting observation.  Does anybody know of a mainstream application available today that was written using anything other than the SDK?&quot;  (Nobody could, really, on the panel or in the audience.)  &quot;So empirically, it doesn't work.&quot;<P>
Alan also asked for a definition of the SDK.  Jim Weiler's was the most succinct: &quot;Those 20 files that you get in the box.&quot;<P>
<h3><a name="0125_0006">William H. Gates 3.0<a name="0125_0006"></h3><P>
I've been poking some fun at Bill Gates lately, and a press release that recently crossed my desk announcing a forthcoming book reminded me of the reason for my preoccupation.<P>
The book, a 500-page hardback &quot;independent investigative biography&quot; of Microsoft's founder, CEO, chairman, largest stockholder, and arguably hardest-working employee, is called Billion Dollar Gates.  It's being written by PC/Computing columnist Stephen Manes and Seattle Times writer Paul Andrews, and is due out from Doubleday next year.<P>
It's time for a book like this, although it will no doubt increase Gates's power and influence in the industry.  In the press release, Manes characterizes Gates quite correctly as &quot;the most influential person in the computer business.&quot;  The press release also speaks of attitudes toward Gates running the gamut &quot;from acclaim and respect to envy and suspicion over his growing ability and desire to influence the direction of the computer industry.&quot;  Put me down for one from column A and one from column B.  Respect, by all means.  And suspicion.<P>
What follows here are some of the reasons for and evidence of that power and influence, presented here in the belief that these things are simply useful to know.<P>
Of the 60 or 70 billionaires in the U.S., five of them are in the computer industry, and two, Gates and partner Paul Allen, made their money from Microsoft.  (The others are William Hewlett, David Packard, and EDS's H. Ross Perot.)  Gates became the youngest self-made billionaire in history when Microsoft went public in 1986.  He was 30 then; today his personal worth is somewhere between $2 and $3 billion, nearly all in Microsoft stock.  His salary and fringe benefits as CEO are comparatively modest: $207,000 in 1989.<P>
Gates's influence and power have not gone unnoticed.  He was the subject of some 50 magazine cover stories in 1990.  Publications such as Computer Retail News, Electronic Business, Personal Computing, and Upside regularly rank him as one of the most influential executives in the industry, often as the most influential.  PC Magazine gave him its Lifetime Achievement Award in 1986, when he was 30.<P>
He had been through a few lifetimes by age 30, if you credit Lee Felsenstein, who also lived through the wild years of the beginning of the personal computer industry.  &quot;A year was a lifetime in those days,&quot; Felsenstein once told me.  And Gates -- but we all know that story: Dropped out of Harvard; with Paul Allen and Marty Davidoff wrote a Basic for the just-released MITS Altair computer, and moved to Albuquerque with Allen to do software for MITS; moved MicroSoft (as it was spelled then) back home to Seattle where he edged out Digital Research for the contract to do the operating system for IBM's PC and then bought Tim Paterson's QDOS (Quick-and-Dirty Operating System) for $50,000 as the basis for MS-DOS.<P>
Upside magazine, a magazine for venture capitalists obsessed with sports metaphors, quotes early Microsoft venture backer and board member David Marquand on Gates the manager: &quot;Of all the CEOs I've worked with, Bill is the brightest, hardest working, most focused -- an unbeatable combination.&quot;<P>
Then there's Bill's company.  Upside editor-in-chief Rich Karlgaard characterizes Gates as &quot;at least a 20-percent factor in his company's prospects.&quot;  This is not about his financial holding in the company; actually, Gates owns something like 38 percent of Microsoft stock. It's an assessment of his significance to the company; a valuation of Bill Gates as a Microsoft asset.  Karlgaard is saying that whatever Microsoft does, whatever it is capable of doing, a fifth of that is embodied in one person.<P>
One of the best lines I ever got out of Bill Gates was his dead-pan &quot;IBM is a big company,&quot; delivered while sitting in the bleachers overlooking the 1983 West Coast Computer Faire, and recalling the negotiations between then-tiny Microsoft and enormous IBM three years earlier. Microsoft is now a pretty big company itself, with 5000 to 6000 employees and annual sales in excess of a billion dollars.  It is one of the most profitable big companies in the computer industry, if not the most profitable.  Investors care about things like a 31 percent sustainable growth rate, $6.5 billion in public wealth created since going public in 1986, a compound return of 22.3 percent to shareholders over the past five years.  And it's influential, although the 60 million computers running Microsoft software are only the visible manifestation of that influence.  Pen-based computing, CD-ROM standards, multimedia, interapplication communication, you name it, there's a Microsoft way to approach it. Generally involving the payment of royalties to Redmond.<P>
And none of these Microsoft ways get established without the input and perhaps direction of Bill Gates, the 20 percent factor.<P>
As I said, I think it's useful to know these things.<P>


<HR><P>Copyright &copy; 1991, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
