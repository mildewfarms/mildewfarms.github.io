<HTML>
<META NAME="year" CONTENT="1991">
<HEAD>
<TITLE>FEB91: ENTROPY</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>ENTROPY<a name="006c_0003"></h1><P>
<h2><a name="006c_0001"><a name="006c_0000">The key to data compression</h2><P>
<h3>Kas Thomas</h3><P>
<p><i><a name="006c_0002"><a name="006c_0000">Kas is a consultant specializing in the design and implementation of ultrahigh-speed data compression algorithms.  He can be reached at 578 Fairfield Ave., Stamford, CT 06902.</i></p><hr><P>
&quot;Omit needless words!  Omit needless words!  Omit needless words!&quot;<P>
-- Will Strunk, Jr.<P>
Data compression is many times thought of as an exercise in redundancy removal.  Actually, it is much more.  Data compression cuts right to the heart of one of the two classical problems of information theory -- how best to encode a message.  (The other is how best to send a message in the presence of noise.)  &quot;Best&quot; here is taken to mean most efficient, in terms of bits per symbol.  When a message has been expressed in the fewest possible bits per symbol, it is said to be optimally encoded.  No bits are wasted.  This is the goal of data compression.<P>
Claude Shannon was among the first to try to quantify the encoding efficiency of various coding schemes, including ordinary English text.  One of Shannon's favorite investigative techniques was a simple cocktail-party game in which he would pick a page in a book at random and (while reading a portion of text out loud, one letter at a time) have volunteers try to guess what the next letter(s) would be, based solely on the letters that had come before.  If the player could not guess correctly, Shannon would give the player the correct answer, and that would form the &quot;clue&quot; for the next round.  Shannon kept a tally of correct and incorrect guesses as the game went on.  At the end of the game, it was possible to tally the redundancy (or encoding inefficiency) of the given portion of text.  For example, the outcome of one game might be that the player correctly guessed 60 out of 90 letters in a stretch of text.  This would imply that two thirds of the letters were redundant, because the player could predict them in advance, based on conventional spelling rules, grammar, and usage.<P>
Shannon concluded that ordinary English text is anywhere from 70 to 80 percent redundant. This, in turn, implies that only about 2 bits per 8-bit byte of text stored on disk (or in RAM) actually contain information -- the remaining bits are redundant.  Shannon would turn this statement around and say that the average information content of English is 2 bits per symbol, or thereabouts.<P>
Not content to let party-goers determine the information content of data streams, Shannon looked for ways to calculate the information content of various &quot;messages.&quot;  The strategy he used was disarmingly simple.  Let the unit of information be the &quot;bit,&quot; yes or no, one or zero.  Let a message (or event) be deemed informative only to the extent that it resolves uncertainty in the mind of the observer.  If the observer already knows (or can correctly guess) a message, then that message conveys no information.  If the message cannot be guessed, it does convey information.<P>
Suppose our alphabet is only two letters long.  The information conveyed by a stream of bits (each bit representing one letter of our alphabet) is inversely proportional to the predictability of the bits' values.  This is made clearer by imagining that our bit values represent opposite sides of a coin (1 for heads, 0 for tails).  Each toss of the coin resolves an uncertainty of 1 bit -- assuming the coin lands heads-up half the time and tails-up half the time.  But consider the case of a weighted coin: Suppose we know (from experience) that our &quot;dishonest nickel&quot; falls heads-up three-fourths of the time.  How much uncertainty is resolved with each toss?  Clearly, it must be less than 1 bit, because if we simply guess &quot;heads&quot; 100 percent of the time, we'll be correct more often than not when attempting to guess the outcome of successive coin tosses.  What it means is that the information efficiency of the toss has been degraded.  And we can calculate the amount.<P>
Start by reducing everything to its probability of occurrence.  An honest nickel has a 0.50 chance of turning up heads, and an equal chance of turning up tails, and therefore an informational degree of freedom corresponding to -0.50 * log(0.50) for heads, plus -0.50 * log(0.50) for tails, or a total of 1.00 bit per toss.  (Here, we mean base-2 logarithm when we say &quot;log.&quot;)  By contrast, the dishonest nickel is constrained so that its informational degree of freedom is as illustrated in <a href="#006c_0004">Example 1</A>.  In other words, if an honest nickel is telling us 1 bit of information per toss, a dishonest nickel that falls heads-up 75 percent of the time is telling us only 0.811 bits of information per toss.  You could say that each toss is 19.9 percent redundant!<P>
<h4><a name="006c_0004">Example 1: The informational degree of freedom of the dishonest nickel</h4><P>
<pre>
  - (0.75) * log(0.75)        for heads
  +    - (0.25) * log(0.25)   for tails
  -------------------------------------

  TOTAL = - [ 0.25 * (-2) + 0.75 * (-0.415) ] = 0.811 bit per toss</pre><P>
<P>
With English text, we have an alphabet of 26 characters, representing (if you will) 26 possible outcomes for each &quot;toss&quot; (each symbol), and thus 4.76 bits per &quot;toss&quot; if all outcomes are equally probable.  But we know that all outcomes are not equally likely in English text. The 26-sided dice have been weighted so that &quot;e&quot; turns up more often than any other letter, with &quot;x&quot; occurring much less frequently than &quot;s,&quot; and so forth.  To obtain the informational degree of freedom of English text, we need to determine the probability P of occurrence of each of the 26 letters of the alphabet, then sum the terms - Plog(P) for all letters.<P>
Shannon reserved a special name for this quantity, which we've been calling the &quot;informational degree of freedom.&quot;  He called it entropy, in honor of the fact that the equation that expresses it is of the same form as the equation derived by Boltzmann for thermodynamic entropy, namely S = k log(W) where S is entropy, W is the number of ways in which the parts of the system can be rearranged, and k (for computations involving gas molecules, etc.) is a fundamental constant of nature, now known as Boltzmann's constant.<P>
In information theory as well as thermodynamics, entropy is a measure of freedom of choice. It represents the average uncertainty as to which of many states a system might be in.  For a data stream, it's the number of bits per symbol required to encode the message.<P>
Because entropy calculation is a straightforward matter, it's also easy to determine the degree of redundancy in a file.  If a data file is represented as 8-bit bytes, we can obtain the redundancy of the file by subtracting its entropy from 8.  (The answer will be in bits per byte.)  A Turbo C program (called ENTROPY.C) to calculate the entropy and apparent redundancy of a file is shown in <a href="#006c_0006">Listing One</A>.  Note that this program calculates the entropy of a message with respect to a certain model, in this case the order-0 finite context model.  An order-1 finite context model would likely produce a different calculation. Furthermore, there are other ways of modeling data, all of which may generate vastly different calculations.  (As an aside, you can think of Shannon's model as a readily available neural network, the human brain.)<P>
<a href="#006c_0006">Listing One</A> is short and self-explanatory.  It is appropriate to point out, however, that the calculation method used in this program offers a first approximation only.  Shannon himself saw each symbol (indeed, each string) in a message as constituting the &quot;source&quot; of the symbol located immediately downstream of itself.  For instance, in the word &quot;quiet,&quot; the &quot;q&quot; can be considered a message source for the message &quot;u,&quot; just as &quot;qu&quot; can be considered a message source for &quot;i,&quot; and &quot;ui&quot; a source for &quot;e,&quot; and so on.  The central idea here is that context, as well as statistical abundance, determines information content.  A more accurate entropy estimate is obtained when context (upstream and downstream characters) is taken into effect.  This can be done by tallying character frequencies in a two-dimensional array, with one dimension given by an upstream character and the other given by the character currently being read.  (The &quot;alphabet&quot; associated with &quot;q&quot; is just one letter long: namely &quot;u.&quot;  Because there is only one allowable following symbol for &quot;q,&quot; the &quot;u&quot; contributes nothing to the information of the message, and its entropy contribution in the context of &quot;q&quot; is zero.)<P>
Having said all this, the zero-order or static entropy calculation offered in ENTROPY.C nonetheless gives a very good first approximation to entropy.  For example, running ENTROPY on itself (the file ENTROPY.EXE being some 25K in size) yields an entropy estimate of 6.933 bits per byte, for a file redundancy of 13 percent.  Using ARC 6.02 to compress the same file resulted in a 14 percent size reduction.  Running ENTROPY on COMMAND.COM (Compaq DOS 3.3) gave an entropy estimate of 6.436 bits per byte, for an apparent redundancy of 20 percent; ARC reduced the file by 22 percent.<P>
Knowing nothing else about a file other than the frequency of occurrence of its constituent bytes, and using no data compression techniques whatsoever, we are able to calculate its redundancy to an astonishingly accurate degree.  When you think about it, this is pretty amazing.  (It wasn't long after Shannon published his work in this area, of course, that a fellow by the name of Huffman devised an algorithm to exploit statistical redundancy in files, to achieve more efficient coding.)<P>
Understanding entropy is basic to understanding data compression.  Only when data compression is seen in the context of efficient information encoding (as opposed to mere redundancy removal) can true insight into the data compression problem be obtained.<P>
<h3><a name="006c_0005">References<a name="006c_0005"></h3><P>
<OL>
<li>Huffman, D.A. &quot;A Method for the Construction of Minimum Redundancy Codes.&quot;  Proceedings of Institute of Electrical and Radio Engineers 40 (9), 1098-1101.  September, 1952.</li>
<li>Shannon, C.E. &amp; W. Weaver.  The Mathematical Theory of Communication.  Urbana, Illinois: Univ. of Illinois Press, 1949.</li>
<li>Lelewer, Debra A. and Hirschberg, Daniel S. &quot;Data Compression.&quot;  ACM Computing Surveys, vol. 19, no 3. New York, September, 1987.</li>
</OL>

<PRE>

_ENTROPY_
by Kas Thomas


<a name="006c_0006">
<a name="006c_0007"></pre>

<B>[LISTING ONE]</B><pre><a name="006c_0007">

/* * * * * * * * * * * * * * * * * ENTROPY.C * * * * * * * * * * * * * * * */
/*  Calculates zero-order entropy of a file, a la Shannon.                 */
/*  Turbo C version by Kas Thomas                   */
/*  You may distribute this listing to fellow programmers.  Please retain  */
/*  authorship notices, however.                                           */
/*  This program will give an approximate measure of how compressible a    */
/*  given file is using Huffman-type compression techniques. It calculates */
/*  the best compression possible using order-0 finite context modelling.  */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;math.h&gt;

#define LOG(x)  3.32 * log10(x)                        /* base-2 log macro */
#define ENTROPY(x)  -(x * LOG(x))         /* classic definition of entropy */

FILE *in;                                            /* input file pointer */
unsigned int table[256];                           /* count data goes here */

void read_input(void);
double analyze(void);
void usage(void);

       /* ------------------- MAIN ------------------ */
main(int ac, char **av)
{
double      result;                           /* return value of analyze() */

if (ac==1) usage();                        /* explain program usage &amp; exit */

in = fopen(av[1],&quot;rb&quot;);                             /* open the input file */
if (!in)  printf(&quot;\nCouldn't open input file.&quot;);          /* error message */
if (!in)  exit(-1);             /* exit program if file couldn't be opened */

printf(&quot;\n   ** Reading file . . .&quot;);                    /* status message */
read_input();                   /* read file &amp; tally character frequencies */
printf(&quot;\n   ** Calculating . . .\n&quot;);                   /* status message */
result = analyze();                          /* analyze the frequency data */

                              /*  finally, print the results to the screen */
printf(&quot;\n   The file \&quot;%s\&quot; has a zero-order&quot;,av[1]);
printf(&quot;\n   entropy of %3.3f bits per byte.\n&quot;,result);
printf(&quot;\n   Approximate shrinkage potential&quot;);
printf(&quot;\n   using Huffman techniques:&quot;);
printf(&quot; %2.0f%%\n\n\n&quot;,100-(result * 100)/8);

fclose(in);                                                  /* close file */
return (1);                            /* optional, but a good idea anyway */
}                                                   /* end function main() */

     /* ----------------------- read_input() ----------------------- */
void read_input()
{
  int      ch;

  while (( ch = getc(in)) != EOF)               /* until EOF reached . . . */
  table[ch]++;                /* read a byte at a time &amp; tally char counts */
}                                             /* end function read_input() */

    /* ----------------------- analyze() -------------------------- */
double analyze()
{
  double       accum = 0.0;                /* entropy will accumulate here */
  double       freq;               /* frequency of occurrence of character */
  long         fsize = 0L;                            /* input file's size */
  register int z;                                      /* scratch variable */

  fsize = ftell( in );                                    /* get file size */
  for (z = 0; z &lt; 256; z++)                 /* for every position in table */
     if (table[z])                                       /* if data exists */
        {
          freq = (double) table[z]/fsize;           /* calculate frequency */
          accum += (double) ENTROPY(freq);     /* get entropy contribution */
        }
  return accum;
}                                                         /* end analyze() */

  /* --------------------------------- usage() -------------------------- */
                                                /* Explain program &amp; exit. */
void usage()
{
printf(&quot;\n\n&quot;);
printf(&quot;        Entropy v1.00 by Kas Thomas. Public Domain.\n\n&quot;);
printf(&quot;        Syntax:   ENTROPY   {filename}   [Enter]\n\n&quot;);
printf(&quot;        Entropy is a measure of information storage efficiency.\n&quot;);
printf(&quot;        This program calculates a file's entropy, hence its\n&quot;);
printf(&quot;        compressibility, using the entropy equation of Shannon.\n&quot;);
printf(&quot;        (See \&quot;Information Theory: Symbols, Signals, &amp; Noise,\&quot;\n&quot;);
printf(&quot;        by John Pierce, Dover, 1981).\n\n&quot;);
exit(1);
}                                                  /* end function usage() */

</pre>


<HR><P>Copyright &copy; 1991, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
