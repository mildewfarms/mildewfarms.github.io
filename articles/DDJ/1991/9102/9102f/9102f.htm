<HTML>
<META NAME="year" CONTENT="1991">
<HEAD>
<TITLE>FEB91: SCREEN CAPTURING FOR WINDOWS 3.0</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>SCREEN CAPTURING FOR WINDOWS 3.0<a name="007b_0003"></h1><P>
<h2><a name="007b_0001"><a name="007b_0000">A useful utility for grabbing screen images</h2><P>
<h3>Jim Conger</h3><P>
<p><i><a name="007b_0002"><a name="007b_0000">Jim is the author of C Programming For MIDI, MIDI Sequencing In C (M&amp;T Books), and articles for Electronic Musician magazine.  He can be reached via CompuServe (73220,324).</i></p><hr><P>
Snap3 is a program that allows you to grab any part of a Windows 3.0 application screen and paste it to the clipboard.  Once in the clipboard, you can use the Write or Word for Windows Paste command to paste the image directly into your documents.  Not only is the program a handy tool, but understanding how it works is a good introduction into the sometimes mysterious world of Windows 3 programming.<P>
I use Snap3 to grab representative images from the running program I'm documenting, adding the image to the manual as I write.  The utility can also be used to create help screens by letting you cut and paste images from the program into your help source file, created with Windows.  (For more information on the Microsoft Help compiler, refer to &quot;Building an Efficient Help System&quot; by Leo Notenboom and Michael Vose [DDJ, June 1990]).<P>
<h3><a name="007b_0004">Snap3<a name="007b_0004"></h3><P>
The idea for Snap3 came from a similar public domain program called &quot;Snap&quot; available on the CompuServe MSWIN forum.  Because Snap is a Windows 2.x program, it generates those nasty warning messages every time you run it in Windows 3.0 Standard or 386 Enhanced Mode.  I decided to write a 3.0 version, and cut the program down to the bare essentials.<P>
When you run the program, a window (see <a href="1991007d.htm">Figure 1</A>) with two menu items will appear, the first item being &quot;Start Capture.&quot;  When this item is clicked, the mouse cursor turns to a crosshair which you can move to the upper left of the screen area you want to capture.  By pressing the left mouse button and dragging the mouse down, you will &quot;draw&quot; a rectangle on the screen.  You stretch the rectangle to encompass the area you want to capture and then release the button.  The graphics image captured shows up in Snap3's window. The other key function is &quot;Clear Buffer,&quot; which clears the Snap3 window and empties the clipboard.  Snap3 also has an About function and a simple Help screen.<P>
<h3><a name="007b_0005">Snap3 Source Code<a name="007b_0005"></h3><P>
From a programmer's point of view, all Snap3 is doing is grabbing a bitmap off of the screen and pasting it to the Windows clipboard that is common to all Windows applications.  The captured bitmap is then available for a Paste operation from Word For Windows, Paintbrush, or other similar applications.  You can also see the image by clicking open Windows' clipboard viewer.<P>
The Snap3 program is broken up into four files.  The NMAKE file (<a href="#007b_0006">Listing One</A>) calls the C compiler (cl), the resource compiler (rc), and the linker (link) to build the finished program.  All Windows programs have a definition file that provides basic information as to the program's name and organization.  SNAP3.DEF (<a href="#007b_0008">Listing Two</A>) is an example of the simplest possible DEF file.  The resource file SNAP3.RC (<a href="#007b_000a">Listing Three</A>) gives the name of the program's icon and defines the program menu.  Following normal Windows programming practice, the menu items are numbered based on #define statements in the header file SNAP3.H (<a href="#007b_000c">Listing Four</A> ).  The header file also includes the function prototypes.  The actual program code is in SNAP3.C (<a href="#007b_000e">Listing Five</A>).  There are only three functions.  The WinMain( ) function loads the program icon that was created using the SDK Paint application that comes with the Windows 3.0 SDK.<P>
The SNAP3.C WndProc( ) function contains all of the program logic.  Capturing starts when you select the Start Capture menu item, generating a IDM_START message, changing the cursor to IDC_CROSS.  Once capturing starts, WM_MOUSEMOVE messages cause the rectangular region captured by the mouse to be outlined.  The function OutlineBlock( ) at the end of the listing does the drawing.  One sneaky thing here is that the outline rectangle's lines are drawn with the logical R2_NOT operator (function SetROP2( )).  This causes drawing the lines in the same place twice to erase the lines.  Windows includes a number of built-in functions for dealing with bitmap images.  These work at a fairly high level, freeing you from having to worry about how the pixel data is stored or manipulated.  SNAP3 uses several of these functions to do the capture of the screen image.<P>
The transfer of the image to the clipboard happens when you release the mouse button, generating a WM_LBUTTONUP message.  A memory area for the bitmap is created using CreateCompatibleBitmap( ).  StretchBlt( ) copies from the screen device to the memory device. Then SetClipboardData( ) alerts Windows that the clipboard should now look to the bitmap memory area for its data.<P>
If Snap3 is not minimized down to an icon, it will display the captured image in its window.  Any time a WM_PAINT message is received, it copies the clipboard bitmap (if any) to the Snap3 window area.  The Windows function StretchBlt( ) does the copying of the bitmap to the screen image.<P>

<PRE>

_SCREEN CAPTURING FOR WINDOWS 3.0_
by Jim Conger

<a name="007b_0006">
<a name="007b_0007"></pre>

<B>[LISTING ONE]</B><pre><a name="007b_0007">

ALL: snap3.exe

snap3.obj : snap3.c
     cl -AS -c -DLINT_ARGS -Gsw -Oat -W2 -Zped snap3.c

snap3.res:  snap3.rc snap3.ico
     rc -r snap3.rc

snap3.exe : snap3.obj snap3.def snap3.res
     link /NOD snap3, , ,libw slibcew, snap3.def
     rc snap3.res





<a name="007b_0008">
<a name="007b_0009"></pre><B>[LISTING TWO]</B><pre><a name="007b_0009">

NAME           SNAP3
DESCRIPTION    'snap3 program for windows bitmap capture to clipboard'
EXETYPE      WINDOWS
STUB           'WINSTUB.EXE'
CODE           PRELOAD MOVEABLE
DATA           PRELOAD MOVEABLE MULTIPLE
HEAPSIZE       1024
STACKSIZE      4096
EXPORTS        WndProc





<a name="007b_000a">
<a name="007b_000b"></pre><B>[LISTING THREE]</B><pre><a name="007b_000b">

/* snap3.rc */
#include &quot;snap3.h&quot;

snap3   ICON   snap3.ico
snap3 MENU
BEGIN
   MENUITEM &quot;&amp;Start Capture&quot;   IDM_START
   MENUITEM &quot;&amp;Clear Buffer&quot;,   IDM_CLEAR
   MENUITEM &quot;&amp;About&quot;,         IDM_ABOUT
   MENUITEM &quot;\a&amp;Help&quot;,         IDM_HELP
END





<a name="007b_000c">
<a name="007b_000d"></pre><B>[LISTING FOUR]</B><pre><a name="007b_000d">

/* snap3.h */

#define IDM_START   1   /* menu item id values */
#define IDM_CLEAR   2
#define IDM_ABOUT   3
#define IDM_HELP    4

/* function prototypes */
long  FAR PASCAL WndProc (HWND, unsigned, WORD, LONG) ;
void  OutlineBlock (HWND hWnd, POINT beg, POINT end) ;





<a name="007b_000e">
<a name="007b_000f"></pre><B>[LISTING FIVE]</B><pre><a name="007b_000f">

/* snap3.C -- Screen Capture to clipboard -- jim conger  */

#include &lt;windows.h&gt;
#include &lt;stdlib.h&gt;
#include &quot;snap3.h&quot;

int PASCAL WinMain (HANDLE hInstance, HANDLE hPrevInstance, LPSTR lpszCmdLine,
    int nCmdShow)
{
     static char szAppName [] = &quot;snap3&quot; ;
     HWND        hWnd ;
     MSG         msg ;
     WNDCLASS    wndclass ;

     if (!hPrevInstance)
     {
          wndclass.style         = CS_HREDRAW | CS_VREDRAW ;
          wndclass.lpfnWndProc   = WndProc ;
          wndclass.cbClsExtra    = 0 ;
          wndclass.cbWndExtra    = 0 ;
          wndclass.hInstance     = hInstance ;
          wndclass.hIcon         = LoadIcon (NULL, szAppName) ;
          wndclass.hCursor       = LoadCursor (NULL, IDC_ARROW) ;
          wndclass.hbrBackground = GetStockObject (WHITE_BRUSH) ;
          wndclass.lpszMenuName  = szAppName ;
          wndclass.lpszClassName = szAppName ;

          if (!RegisterClass (&amp;wndclass))
              return FALSE ;
    }
    hWnd = CreateWindow (szAppName, &quot;Snap3&quot;,
         WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT,
         GetSystemMetrics (SM_CXSCREEN) / 2,
         8 * GetSystemMetrics (SM_CYMENU),
         NULL, NULL, hInstance, NULL) ;
    ShowWindow (hWnd, nCmdShow) ;
    UpdateWindow (hWnd) ;

    while (GetMessage (&amp;msg, NULL, 0, 0))
    {
        TranslateMessage (&amp;msg) ;
        DispatchMessage (&amp;msg) ;
    }
    return msg.wParam ;
}

long FAR PASCAL WndProc (HWND hWnd, unsigned iMessage, WORD wParam,
    LONG lParam)
{
     static BOOL    bCapturing = FALSE, bBlocking = FALSE, bStarted = FALSE ;
     static POINT   beg, end, oldend ;
     static short   xSize, ySize ;
     static HANDLE  hInstance ;
     HDC            hDC, hMemDC ;
     BITMAP         bm ;
     HBITMAP        hBitmap ;
     HICON          hIcon ;
     PAINTSTRUCT    ps ;
     switch (iMessage)
     {
         case WM_CREATE:    /* get program instance when window is created */
             hInstance = GetWindowWord (hWnd, GWW_HINSTANCE) ;
             break ;
         case WM_COMMAND:   /* one of the menu items has been clicked */
            switch (wParam)
            {
            case IDM_START:             /* the start capture item */
                bCapturing = TRUE ;
                bBlocking = bStarted = FALSE ;
                SetCapture (hWnd) ;                     /* grab mouse */
                SetCursor (LoadCursor (NULL, IDC_CROSS)) ;
                CloseWindow (hWnd) ;                    /* minimize window */
                break ;
            case IDM_CLEAR:     /* clears screen and clipboard */
                OpenClipboard (hWnd) ;
                EmptyClipboard () ;
                CloseClipboard () ;
                InvalidateRect (hWnd, NULL, TRUE) ;     /* forces paint */
                break ;
            case IDM_ABOUT:     /* show about box */
               MessageBox (hWnd, &quot;Snap3 - Windows screen capture to clipboard.
                                                          \nJim Conger 1990.&quot;,
                    &quot;Snap3 About&quot;, MB_OK) ;
                break ;
            case IDM_HELP:
                MessageBox (hWnd, &quot;After you click the Start Capture menu
                                      item, move the mouse to the upper left
                                      of the area you want to copy to the
                                      clipboard. Hold down the left mouse
                                      button while you drag the mouse to the
                                      lower right of the area. Once you release
                                      the mouse button, the area is sent to the
                                      clipboard and shown in Snap3's window.&quot;,
                    &quot;Snap3 Help&quot;, MB_OK) ;
                break ;
            }
        case WM_LBUTTONDOWN:    /* starting capturing screen */
            if (bCapturing)
            {
                if (bStarted)
                {
                    bBlocking = TRUE ;
                    oldend = beg = MAKEPOINT (lParam) ;
                    OutlineBlock (hWnd, beg, oldend) ;
                    SetCursor (LoadCursor (NULL, IDC_CROSS)) ;
                }
                else
                    bStarted = TRUE ;
            }
            break ;
        case WM_MOUSEMOVE:      /* show area as rectangle on screen */
            if (bBlocking)
            {
                end = MAKEPOINT (lParam) ;
                OutlineBlock (hWnd, beg, oldend) ;  /* erase old outline */
                OutlineBlock (hWnd, beg, end) ;     /* draw new one */
                oldend = end ;
            }
            break ;
        case WM_LBUTTONUP:      /* capture and send to clipboard */
            if (bBlocking)
            {
                bBlocking = bCapturing = FALSE ;
                SetCursor (LoadCursor (NULL, IDC_ARROW)) ;
                ReleaseCapture () ;                 /* free mouse */

                end = MAKEPOINT (lParam) ;
                OutlineBlock (hWnd, beg, oldend) ;  /* erase area outline */
                xSize = abs (beg.x - end.x) ;
                ySize = abs (beg.y - end.y) ;
                hDC = GetDC (hWnd) ;
                hMemDC = CreateCompatibleDC (hDC) ;
                hBitmap = CreateCompatibleBitmap (hDC, xSize, ySize) ;

                if (hBitmap)
                {
                    SelectObject (hMemDC, hBitmap) ;
                    StretchBlt (hMemDC, 0, 0, xSize, ySize,
                        hDC, beg.x, beg.y, end.x - beg.x,
                        end.y - beg.y, SRCCOPY) ;
                    OpenClipboard (hWnd) ;
                    EmptyClipboard () ;
                    SetClipboardData (CF_BITMAP, hBitmap) ; /* copy to */
                    CloseClipboard () ;                     /* clipboard */
                    InvalidateRect (hWnd, NULL, TRUE) ;     /* request paint*/
                }
                else
                    MessageBeep (0) ;
                DeleteDC (hMemDC) ;
                ReleaseDC (hWnd, hDC) ;
            }
            ShowWindow (hWnd, SW_RESTORE) ;     /* un-minimize window */
            break ;
        case WM_PAINT:      /* display contents of clipboard if bitmap */
            hDC = BeginPaint (hWnd, &amp;ps) ;
            if (IsIconic (hWnd))    /* if window is iconic, show icon */
            {
                hIcon = LoadIcon (hInstance, &quot;snap3&quot;) ;
                if (hIcon != NULL)
                    DrawIcon (hDC, 1, 1, hIcon) ;
            }
            else                    /* if not, show clipboard contents */
            {
                OpenClipboard (hWnd) ;
                if (hBitmap = GetClipboardData (CF_BITMAP)) /* if bitmap */
                {
                    hMemDC = CreateCompatibleDC (hDC) ;
                    SelectObject (hMemDC, hBitmap) ;
                    GetObject (hBitmap, sizeof (BITMAP), (LPSTR) &amp;bm) ;
                    SetStretchBltMode (hDC, COLORONCOLOR) ;
                    StretchBlt (hDC, 0, 0, xSize, ySize, hMemDC, 0, 0,
                        bm.bmWidth, bm.bmHeight, SRCCOPY) ;
                    DeleteDC (hMemDC) ;
                }
                CloseClipboard () ;
            }

            EndPaint (hWnd, &amp;ps) ;
            break ;
        case WM_DESTROY:
            PostQuitMessage (0) ;
            break ;
        default:
            return DefWindowProc (hWnd, iMessage, wParam, lParam) ;
        }
   return 0L ;
}

/* OutlineBlock() writes a rectangle on screen given two corner points. R2_NOT
   style is used, so drawing twice on the same location erases outline. */
void OutlineBlock (HWND hWnd, POINT beg, POINT end)
{
     HDC   hDC ;

     hDC = CreateDC (&quot;DISPLAY&quot;, NULL, NULL, NULL) ;
     ClientToScreen (hWnd, &amp;beg) ;      /* convert to screen units */
     ClientToScreen (hWnd, &amp;end) ;
     SetROP2 (hDC, R2_NOT) ;            /* use logical NOT brush */
     MoveTo (hDC, beg.x, beg.y) ;       /* draw rectangle */
     LineTo (hDC, end.x, beg.y) ;
     LineTo (hDC, end.x, end.y) ;
     LineTo (hDC, beg.x, end.y) ;
     LineTo (hDC, beg.x, beg.y) ;
     DeleteDC (hDC) ;
}
</pre>


<HR><P>Copyright &copy; 1991, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
