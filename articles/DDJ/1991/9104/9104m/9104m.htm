<HTML>
<META NAME="year" CONTENT="1991">
<HEAD>
<TITLE>APR91: PROGRAMMER'S BOOKSHELF</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>PROGRAMMER'S BOOKSHELF<a name="0106_0003"></h1><P>
<h2><a name="0106_0001"><a name="0106_0000">The Design of Everyday Things -- Including Software</h2><P>
<h3>Ray Duncan</h3><P>
<a name="0106_0002"><a name="0106_0000">With the stunning success of Windows 3.0, a painful phase in the evolution of computer interfaces is coming to a close.  The bitter struggle between the advocates of command line interfaces and graphical user interfaces -- exemplified by wild-eyed Unix shell script hackers on the one hand, and Macintosh desktop publishing zealots on the other -- has been resolved decisively in favor of the GUI camp.  The users have made their choice clear, and the visionary 1970s work of the Xerox PARC pioneers has been vindicated.  Armies of mice march triumphant through the streets of Redmond, Washington, while the guerrilla forces of real-time speech recognition, the stylus, touch screens, and neural networks lurk forlornly in the surrounding hills.<P>
Or so the computer press would have us believe.  But have any fundamental interface issues actually been solved, or is the press occupying itself (as it has all too often in the past) with superficialities?  Ponder with me, gentle reader, a typical slice-of-life for today's computer user, as related in Donald Norman's The Design of Everyday Things:<P>
<B>USER</B>: Remove file &quot;My-most-important work.&quot;<P>
<B>COMPUTER</B>: Are you certain you wish to remove the file &quot;My-most-important work&quot;?<P>
<B>USER</B>: Yes.<P>
<B>COMPUTER</B>: Are you certain?<P>
<B>USER</B>: Yes, of course.<P>
<B>COMPUTER</B>: The file &quot;MY-most-important work&quot; has been removed.<P>
<B>USER</B>: Oops, damn.<P>
What went wrong in this computer-user interaction?  The difficulty goes far beyond the nature of the interface: What we are eavesdropping on here is not a dialogue, but two monologues.  Once the user has embarked on his chosen course of file deletion, he is already thinking ahead to his next goal and his responses to the computer's requests for confirmation verge on the automatic.  Furthermore, the computer's attempts to provide a safety net are largely ineffective, because they are focused on the act of deletion and not on the name (or better yet, the actual contents) of the file that is about to be destroyed.  There's nothing special about a GUI that can prevent this sort of problem, nor is there anything distinctive about a command line interface that promotes it.<P>
This is not to say, however, that such problems cannot be solved -- if we are willing to put aside our preoccupations with pretty icons and pull-down menus, and attend instead to the deep structure of human behavior.  That deep structure is precisely the subject of Norman's book: The seven stages of action, the nature of memory, the focus of attention (or lack of same), the importance of mapping, the taxonomy of errors and their causes, the power of constraints, and the myriad ways in which a designer can go wrong (not the least of which is the designer's inclination to think of himself as an average user).<P>
The discussions in Design of Everyday Things range over a marvelous variety of objects and tasks: from faucets to door handles, from stoves to VCRs, from telephones to movie projectors, from an audio mixing control panel to the console at a nuclear power plant.  Some of the real-life illustrations of poor design values are grotesque to the point of low comedy, such as the British train door that bears the following sign on its inside in lieu of a latch: &quot;To open door, lower the window and use outside handle.  Please close window and shut door after use.&quot;  But Norman saves some of his most telling barbs for personal computers, because, as he points out,<P>
The special powers of the computer can amplify all of the usual problems to new levels of difficulty.  If you set out to make something difficult to use, you could probably do no better than to copy the designers of modern computer systems.  Do you want to do things wrong?  Here is what to do:<P>
<UL>
<li>Make things invisible.  Widen the Gulf of Execution: give no hints to the operations expected.  Establish a Gulf of Evaluation: give no feedback, no visible results of the actions just taken.  Exploit the tyranny of the blank screen.</li>
<li>Be arbitrary.  Computers make this easy.  Use nonobvious command names or actions.  Use arbitrary mappings between the intended action and what must actually be done.</li>
<li>Be inconsistent: change the rules.  Let something be done one way in one mode and another way in another mode.  This is especially effective where it is necessary to go back and forth between the two modes.</li>
<li>Make operations unintelligible.  Use idiosyncratic language or abbreviations.  Use uninformative error messages.</li>
<li>Be impolite.  Treat erroneous actions by the user as breaches of contract.  Snarl.  Insult. Mumble unintelligible verbiage.</li>
<li>Make operations dangerous.  Allow a single erroneous action to destroy invaluable work. Make it easy to do disastrous things.  But put warnings in the manual; then, when people complain, you can ask, &quot;But didn't you read the manual?&quot;</li>
</UL>
There's a lot of wisdom packed in this tiny book, and every software developer should read it; a better investment of two or three hours is hard to imagine.  The chapter entitled &quot;Knowledge in the Head and in the World,&quot; for instance, explains how precise behavior can result from imprecise knowledge in the presence of external cues and constraints.  This chapter crystallized many half-formed notions for me and gave me a whole new perspective on some programs I was developing for my hospital's Neonatal Intensive Care Unit.  But applying the wisdom won't necessarily be easy -- it's all too tempting to laugh in retrospect at the blunders of others, but less trivial to prospectively avoid such &quot;obvious&quot; blunders ourselves.  Norman can offer us no magical answers, only guidelines augmented with the following words of encouragement:<P>
The computer has vast potential, more than enough to overcome all its problems.  Because it has unlimited power, because it can accept almost any kind of control, and because it can create almost any kind of picture or sound, it has the potential to bridge gulfs, to make life easier.  If designed properly, systems can be tailored for (and by) each of us.  But we must insist that computer developers work for us -- not for the technology, not for themselves. Programs and systems do exist that have shown us the potential; they take the user into account, and make it easier for us to do our tasks -- pleasurable, even.  This is how it ought to be.  Computers have the power not only to make everyday tasks easier, but to make them enjoyable as well.<P>


<HR><P>Copyright &copy; 1991, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
