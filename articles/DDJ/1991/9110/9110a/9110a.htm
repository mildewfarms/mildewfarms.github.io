<HTML>
<META NAME="year" CONTENT="1991">
<HEAD>
<TITLE>OCT91: A MINIMAL OBJECT-ORIENTED DEBUGGER FOR C++</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>A MINIMAL OBJECT-ORIENTED DEBUGGER FOR C++<a name="022d_0003"></h1><P>
<h2><a name="022d_0001"><a name="022d_0000">Interesting things can happen at construction time</h2><P>
<h3>William M. Miller</h3><P>
<p><i><a name="022d_0002"><a name="022d_0000">William M. Miller is director of North American Operations for Glockenspiel Ltd. and vice chair of X3J16, the ANSI Standard C++ Committee.  He can be reached via Internet at wmm@world.std.com and on CompuServe at 72105,1744.</i></p><hr><P>
When C++ first appeared outside AT&amp;T Bell Laboratories in 1985, early adopters of the language enjoyed its power and expressiveness, but suffered from a dearth of specialized tools.  The lack of a C++-specific debugger in particular hampered these pioneering programmers.<P>
Happily, those days are mostly past.  In addition to other tools, most C++ compiler vendors now also provide quite serviceable debuggers.  Nevertheless, there remain some platforms for which only a C or assembly-oriented debugger (or even no debugger at all, in some embedded development environments) is available.<P>
With a little foresight, however, C++ source-level debugging is possible even in these tool-poor environments.  That's where MOOD -- the Minimal Object-Oriented Debugger -- comes in.  MOOD, in keeping with its name, makes no pretense of providing every imaginable debugging service.  It does, however, offer the ability to trace through program execution, set breakpoints, and interactively display the values of objects, as well as provide a framework on which more elaborate debugging facilities can be built, as required.<P>
<h3><a name="022d_0004">Theory of Operation<a name="022d_0004"></h3><P>
In essence, MOOD transfers control to a central routine each time an &quot;interesting event&quot; occurs.  Such interesting events include program start and termination, function entry and exit, construction and destruction of objects, and user breakpoints.  Whenever the central routine is invoked, it examines its internal state and the nature of the event to determine whether to initiate an interactive dialogue with the user, or simply to return and allow the program to continue its normal execution.<P>
C++ makes it easy to gain control during these &quot;interesting events&quot; through the semantics of constructor and destructor operation.  Whenever an object is created, its constructor is invoked.  This guarantee by the language holds whether the object is global static (and hence initialized at the very beginning of the program execution), local static or automatic (and therefore initialized when control flows through its declaration), or on the heap (and thus initialized when it is explicitly allocated).  The same is true of destructors whenever an object goes out of existence.  Furthermore, not only are the constructor and destructor of the object itself invoked, but those of all of its base classes as well.<P>
Normally, the purpose of running an object's constructor is to ensure that the object is internally consistent and to acquire any resources -- memory, files, devices, and so on -- it needs; the destructor is responsible for releasing those resources.  However, it is perfectly reasonable for MOOD to piggyback on top of these normal constructor and destructor operations and then transfer control to the MOOD kernel at that time.<P>
The application of constructor and destructor semantics to tracing object creation and destruction is obvious.  If the object being created or destroyed is derived from a class whose constructor and destructor contain calls to the MOOD kernel, MOOD will have the opportunity to display a message or converse with the user at those times.<P>
Using constructors and destructors to transfer control to MOOD at function entry and exit is equally straightforward, but perhaps a bit less obvious.  In this case, a class must be defined whose constructor and destructor call the MOOD kernel indicating function entry and exit, and an auto object of that class must be declared as the first statement in each function whose execution is to be traced.  When that object is created, at the beginning of the function's execution, MOOD will be informed of the function's invocation; when it is destroyed, that is, when the function returns, the destructor will notify MOOD that the function has terminated.<P>
Extending these concepts to the start and finish of the entire program is simply a matter of defining a global static object whose constructor and destructor perform the necessary MOOD calls.<P>
<h3><a name="022d_0005">Programming with MOOD<a name="022d_0005"></h3><P>
As can be inferred from the preceding section, MOOD is an intrusive debugger; that is, it is necessary to make certain changes to the source code of the program in order to debug it (the &quot;foresight&quot; mentioned at the start of this article).  However, these changes are quite minor in nature and extent, as the following paragraphs demonstrate.<P>
The first requirement placed on code to be debugged with MOOD is that it include the header file MOOD.hxx (<a href="#022d_000d">Listing One</A>, page 110).  This file contains all the declarations required by the interface with MOOD.<P>
Function entry and exit tracing is enabled by declaring an object of class trace as the first statement of each traced function.  The trace constructor takes a character string argument specifying the name of the function; this name is displayed whenever MOOD is running in verbose mode and can be used to specify a breakpoint.  For example, a function to be traced would be written as follows:<P>
<pre>  void some_func( ) {
     trace t(&quot;some_func&quot;);
     // ...
     }</pre><P>
Debugging data is a bit more involved but still not terribly burdensome.  Three things are required of each class whose objects are to be made known to MOOD: First, it must declare class monitored as a virtual base class.  Second, it must pass a string, provided in the object declaration, to the monitored constructor.  This string is intended to be the name of the object being constructed; like the function name in class trace, it will be displayed in verbose mode at construction and destruction time, and it can be used for breakpointing.  The third requirement is to provide an override for the virtual function display( ); it should print out the contents of the object on stderr in whatever form is most appropriate.  A sample class and object declaration for MOOD is shown in <a href="#022d_0006">Example 1</A>.<P>
<h4><a name="022d_0006">Example 1: A sample class and object declaration for MOOD</h4><P>
<pre>
  class some_class: public virtual monitored {
  public:
     some_class(const char* obj_name):
     monitored(obj_name) { }
     void display() {
        fprintf(stderr, &quot;i=%d\nj=%d\n&quot;, i, j);
        }
  private:
     int i;
     int j;
  };

  some_class an_object(&quot;an_object&quot;);</pre><P>
<P>
There are two important reasons that derivation from class monitored should be virtual instead of ordinary.  First, in an elaborate inheritance hierarchy, the most-derived class (that is, the class used in the declaration of the object) may have several base classes, each of which is derived from class monitored.  If ordinary inheritance were used, a verbose mode trace would include construction and destruction records for each of those classes when the object was created and destroyed.  Making monitored a virtual base class causes the message to occur only once, because there is only a single instance of monitored in the object.<P>
Second, deriving virtually from class monitored means that the most-derived class's constructor is both permitted and required to supply the argument to the class monitored constructor.  This is important because only the object declaration itself &quot;knows&quot; the name of the object being declared, and virtual inheritance makes it both easy to pass that information along and impossible to forget to do so.<P>
The final feature of MOOD.hxx that can be used by a program is insertion of conditional or unconditional breakpoints.  Normally, MOOD allows user interaction (a &quot;breakpoint&quot;) at any time a message would be printed in verbose tracing mode -- that is, at function entry and exit and object construction and destruction.  If additional breakpoints are required, for instance, at some interesting point in an algorithm that does not correspond to one of the traced events, the programmer can insert explicit calls to the cond_break( ) function.<P>
A call to cond_break( ) with no arguments is an unconditional break; MOOD will notify the user and enter an interactive dialogue, regardless of any other conditions.  To make a breakpoint conditional, use a call that specifies a name (for example, cond_break(USER_BP, &quot;my breakpoint&quot;)).  Then, when the user tells MOOD that execution should proceed to a particular named event, MOOD will ignore conditional breakpoints whose names do not match the specified name.<P>
<a href="#022d_000f">Listing Two</A>, page 110, shows a simple program that illustrates many of the features of interfacing with MOOD.  The foo::display( ) function simply prints out the object name to demonstrate that the mapping from printed address to actual object is correct.<P>
<h3><a name="022d_0007">Getting into the MOOD<a name="022d_0007"></h3><P>
One other feature of MOOD.hxx is worth discussing.  The class init_ctl, declared at the end of <a href="#022d_000d">Listing One</A>, along with its associated object declaration, dbg_init, is vital for enabling the operation of MOOD.  Because dbg_init is global static, it is constructed before program execution begins and destroyed after the program completes.  The constructor of class init_ctl contains the call to cond_break( ) for the start of the program, which allows the user to gain interactive control immediately to turn on verbose mode, go to a particular breakpoint, and so on.<P>
There will be one copy of dbg_init in each compilation unit that includes MOOD.hxx (it's a static variable), so a way must be found to avoid having multiple invocations of cond_break() for program start.  This once-only limitation is implemented by means of the static member_count; the init_ ctl constructor increments _count and only calls cond_break( ) when the very first instance of dbg_init is created.<P>
MOOD will also never be called if the preprocessor variable DEBUGGER_ON is not defined; all the classes in MOOD.hxx are conditionally compiled to do nothing in its absence.  (User code calls to cond_break( ) should be similarly protected.)<P>
<h3><a name="022d_0008">Using MOOD<a name="022d_0008"></h3><P>
MOOD's user interface is primitive but functional.  The available commands are described in <a href="#022d_0009">Table 1</A>, so the description here will be limited to an overview of how to use MOOD.<P>
<h4><a name="022d_0009">Table 1: The MOOD Debugging Commands</h4><P>
<pre>
  In its current form, MOOD recognizes the following commands:

  s           Step to the next &quot;interesting event&quot; and return to
              interactive mode

  g [&lt;name&gt;]  Go until the next event that has the
              specified name (which can be a function, object,
              or user breakpoint).  If no name is specified, go
              until the next user breakpoint or until the end of
              the program.

  d &lt;addr&gt;    Display an object, selected by the address
              printed out at the time the object was
              constructed.  This command calls the display()
              member function for the object whose
              &quot;monitored&quot; subobject is at the referenced
              address, which is displayed at construction time
              if in verbose mode.

  v           Turn on verbose mode.  This sends messages
              to stderr upon function entry and exit, and upon
              object construction and destruction.

  q           Turn off verbose mode.</pre><P>
<P>
All user commands are implemented in MOOD.cxx (<a href="#022d_0011">Listing Three</A>, page 110).  The implementation is rudimentary, and is intended only to provide a foundation of basic functionality.  There are many ways in which this functionality can be extended.  Some suggestions for improvement are described at the end of this article.<P>
When a program compiled for MOOD first begins execution, the user is presented a welcoming banner and a command prompt.  At this point, one possible user action is to type a &quot;v&quot; (for verbose) command, followed by a &quot;g&quot; (go) command with no argument.  The program will then run without pausing, and as it executes, MOOD will print (on stderr, to avoid conflict with ordinary program output on stdout) a descriptive message for each interesting event that occurs.<P>
Another possibility at the opening prompt is to first type v&quot; (or not, depending on the volume of output desired), and then type &quot;g&quot; followed by a name.  The program will execute normally until an interesting event with the specified name occurs, at which time the user will be presented an opportunity for further interaction.  MOOD makes no distinction among object names, function names, and breakpoint names, so any of these can be used with the &quot;g&quot; command.<P>
A third possibility is to &quot;single step&quot; with the &quot;s&quot; command.  Due to MOOD's implementation, the step increment is limited to interesting events,&quot; rather than individual C++ statements.<P>
The commands mentioned so far are all allowed at any MOOD breakpoint, not just at the start of the program.  You can step from one breakpoint to another using the &quot;g&quot; command, then turn off verbose mode using the &quot;q&quot; (quiet) command, and so on.  Furthermore, at any breakpoint, any object that has been constructed but not destroyed can be displayed by passing its address (the one printed by MOOD at construction) to the &quot;d&quot; command.  This command will invoke the object's display( ) member function.  (Note: It is important not to attempt to display an object during the breakpoint resulting from that object's construction!  MOOD is entered from the monitored constructor, and the virtual function table pointing to the derived class's display() member function has not been set up at that point.  Similarly, the breakpoint for an object's destruction occurs after the object has been destroyed and its display( ) member function is no longer available.)<P>
A sample debugging session, using the program in <a href="#022d_000f">Listing Two</A>, is shown in <a href="#022d_000a"> Example 2.</A> Explanatory comments (text following &quot;//&quot; in the listing) were added after the log was made and are not part of the program's input or output.<P>
<h4><a name="022d_000a">Example 2: A sample session with MOOD</h4><P>
This is a transcript of a MOOD debugging session.  The program being debugged is tdbg.cxx, shown in <a href="#022d_0011">Listing Three</A>.  Any remarks preceded by a double-slash (//) are comments which were added after the session was transcribed.<P>
<pre>
  tdbg                  // Start the demo program.
  MOOD:
  Minimal Object-Oriented Debugger version 0.0
  cmd&gt; v                // Verbose mode is on.
  cmd&gt; g y              // Go till we get to y.
  Enter main
  Construct *p @ 27A8
  Enter x               // Entering function x().
  Construct xf @ 2746
  Enter y               // Entering function y().
  cmd&gt; d 27a8           // Ask to display an object.
  *p                    // Yep, that's the right one.
  cmd&gt; d 2746           // Display another object.
  xf                    // Which it does.
  cmd&gt; s                // Single step.
  Construct yf @ 271C
  cmd&gt; s                // Single step again.
  Destruct yf @ 271C
  cmd&gt; g z              // Go till we get to z().
  Exit y
  Destruct xf @ 2746
  Exit x
  Enter z               // Entering function z().
  cmd&gt; g                // Here we are.  So just finish up.
  Construct zf @ 2746
  Destruct zf @ 2746
  Exit z
  Destruct *p @ 27A8
  Exit main
  End of execution</pre><P>
<P>
<h3><a name="022d_000b">Where to Go from Here<a name="022d_000b"></h3><P>
The debugging facilities of MOOD are useful but quite rudimentary.  They can be improved in various ways.  For example, you could, without much effort, allow symbolic lookup of object names by maintaining a dynamic symbol table of live objects.  This would allow display of objects by name rather than by address.  Another suggestion is to allow the user to modify object values interactively during a breakpoint.  A third idea is to allow program execution to be interrupted by a particular keystroke combination.<P>
The MOOD technique requires some cooperation from the program being debugged, but the other side of that coin is that the capabilities of the approach are limited only by the imagination of the programmer.<P>
<h3><a name="022d_000c">Acknowledgment<a name="022d_000c"></h3><P>
The techniques embodied in MOOD were described in &quot;Debugging and Instrumentation of C++ Programs&quot; by Martin O'Riordan, then of Glockenspiel, in the Proceedings of the 1988 USENIX C++ Conference.<P>

<PRE>

_A MINIMAL OBJECT-ORIENTED DEBUGGER FOR C++_
by William M. Miller

<a name="022d_000d">
<a name="022d_000e"></pre><B>[LISTING ONE]</B><pre><a name="022d_000e">

// MOOD.hxx by William M. Miller, 8/3/91. MOOD user declarations.

/* This header file is included in every module which is to be metered
 * by MOOD.  Its actions are controlled by the preprocessor variable
 * DEBUGGER_ON. If not this is not defined, no debugger actions will occur.
 */
#ifndef _DEBUGGER_DEFS
#define _DEBUGGER_DEFS
                      // Conditions under which cond_break may be called:
enum break_condition {
   PROG_START,  PROG_END,  FCN_ENTRY,  FCN_EXIT,  OBJ_CTOR,  OBJ_DTOR,
   USER_BP
   };

/* The cond_break() function is called in all the above contexts for two
 * purposes: 1) to display trace information when verbose mode is on, and
 * 2) to break under the appropriate conditions to allow the user to
 * interact with the debugger.  The default arguments are to allow a user
 * program to contain the call &quot;cond_break();&quot; with no arguments to perform
 * an unconditional breakpoint into the debugger's interactive mode.
 */
void cond_break(break_condition cond = USER_BP, const char* name = 0,
      void* addr = 0);

/* The trace class is intended to allow function tracing.  Each function or
 * block which should be included in the trace should declare an object of
 * class trace at the very beginning.  The result, in verbose mode, will be
 * to display the function/block name at entry and exit; this name can also
 * be used to set a breakpoint from the debugger's interactive mode.
 */
class trace {
public:
#ifdef DEBUGGER_ON
    trace( const char* fcn_name): _name(fcn_name)
                  {  cond_break( FCN_ENTRY, _name);  }
   ~trace( )      {  cond_break( FCN_EXIT,  _name);  }
private:
   const char* _name;
#else
   trace( const char* ) { }
#endif
   };

/* The monitored class is intended for use as a virtual base class of any
 * classes whose construction/destruction is to be traced in verbose mode
 * or whose values are to be displayed interactively.  Derived classes must
 * pass the object or class name to the constructor and must supply an
 * override to the display() member function.
 */
class monitored {
public:
#ifdef DEBUGGER_ON
    monitored( const char* obj_name ): _name(obj_name)
                     {  cond_break(OBJ_CTOR, _name, this);   };
   ~monitored( )     {  cond_break(OBJ_DTOR, _name, this);   }
   virtual void display() = 0;
private:
   monitored() { }  // keep cfront 2.0 happy -- it requires a default
                    // constructor in virtual base classes for no good reason.
   const char* _name;
#else
   monitored( const char* ) { }
   monitored( ) { }
#endif
   };

/* The following class and static object call cond_break exactly once at
 * program start, before any debuggable object is created, to allow the
 * user to set up tracing and breakpoints, and once at the end of execution
 * to allow for any needed cleanup.
 */
#ifdef DEBUGGER_ON
class init_ctl {
public:
    init_ctl( )   { if (_count++ == 0)   cond_break(PROG_START);   }
   ~init_ctl( )   { if (--_count == 0)   cond_break(PROG_END);     }
private:
   static int _count;
};

static init_ctl dbg_init;
#endif
#endif





<a name="022d_000f">
<a name="022d_0010"></pre><B>[LISTING TWO]</B><pre><a name="022d_0010">

// tdbg.cxx by William M. Miller, 8/3/91. This is a sample
// program to be debugged with MOOD. A transcript of the debugging
// session is shown in Example 3, accompanying this article.

extern &quot;C&quot; {
#include &lt;stdio.h&gt;
}
#include &quot;MOOD.hxx&quot;

struct foo: virtual monitored {
   foo( const char* nm ): monitored(nm), my_name(nm) { }
   void display( )        { fprintf(stderr, &quot;%s\n&quot;, my_name);  }
   const char* my_name;
   };
void x();
void y();
void z();

int main() {
   trace tt(&quot;main&quot;);
   foo* p = new foo(&quot;*p&quot;);
   x();
   z();
   delete p;
   return 0;
   }

void x() {
   trace tt(&quot;x&quot;);
   foo xf(&quot;xf&quot;);
   y();
   }

void y() {
   trace tt(&quot;y&quot;);
   foo yf(&quot;yf&quot;);
   }

void z() {
   trace tt(&quot;z&quot;);
   foo zf(&quot;zf&quot;);
   }





<a name="022d_0011">
<a name="022d_0012"></pre><B>[LISTING THREE]</B><pre><a name="022d_0012">

// MOOD.cxx, by William M. Miller, 8/3/91. MOOD kernel definitions.

/* This routine implements the user interface of MOOD, the Minimal Object
 * Oriented Debugger. Example 2 in the accompanying article describes
 * currently available commands: s, g, d, v, and q.
 */
extern &quot;C&quot; {
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
}
#define DEBUGGER_ON 1
#include &quot;MOOD.hxx&quot;

/* The objp() function does a system-dependent conversion of an ASCII pointer
 * specification into a pointer to a monitored object.
 */
monitored* objp(const char* str);

/* The cond_break() function is called under the various circumstances
 * described by the enumeration break_condition.  It prints a message, if
 * required, describing the reason for its call, and optionally enters
 * interactive mode to take commands.
 */
void cond_break(break_condition cond, const char* name, void* addr) {

   static int tracing = 0;          // =&gt; verbose mode
   static char brk_name[128] = &quot;&quot;;  // name on which to break
   static int was_step = 1;         // last cmd was &quot;step&quot; =&gt; go to
                                    // interactive mode
   char buff[128];                  // command line buffer

/* We enter the display and possible interactive mode code under the following
 * conditions:
 * 1) We are tracing (verbose mode).
 * 2) We are stepping.  (Note: this is initially TRUE, which takes care of
 *    getting into interactive mode on the PROG_START call.)
 * 3) The breakpoint name was set and the current name matches it, or this
 *    is a user breakpoint call with no name
 * 4) The breakpoint name was not set and this is a user breakpoint call.
 */
   if (tracing || was_step ||
         (brk_name[0] &amp;&amp; ((strcmp(brk_name, name) == 0) ||
         (cond == USER_BP &amp;&amp; !name))) || (!brk_name[0] &amp;&amp; cond == USER_BP)) {

      switch(cond) {     // Print an appropriate message:

      case PROG_START:
         fprintf(stderr,&quot;MOOD: Minimal Object Oriented Debugger, V. 0.0\n&quot;);
                                                                       break;
      case PROG_END:    fprintf(stderr, &quot;End of execution.\n&quot;);        break;

      case FCN_ENTRY:   fprintf(stderr, &quot;Enter %s\n&quot;, name);           break;

      case FCN_EXIT:    fprintf(stderr, &quot;Exit  %s\n&quot;, name);           break;

      case OBJ_CTOR:    fprintf(stderr, &quot;Construct %s @ %p\n&quot;, name, addr);
                                     break;
      case OBJ_DTOR:    fprintf(stderr, &quot;Destruct  %s @ %p\n&quot;, name, addr);
                                                                       break;
      case USER_BP:     fprintf(stderr, &quot;Breakpoint %s (%p)\n&quot;, name, addr);
                                                                       break;
      }  // switch

/* We enter interactive mode if any of the above conditions other than
 * tracing is met.  (This implies that named user breakpoints are skipped
 * if the user uses a g &lt;name&gt; command in which the name does not match
 * the breakpoint name, but that unnamed user breakpoints are always
 * effective, as are named user breakpoints after a g command with no name.)
 */
      if (was_step || (brk_name[0] &amp;&amp; ((strcmp(brk_name, name) == 0) ||
            (cond == USER_BP &amp;&amp; !name))) ||
            (!brk_name[0] &amp;&amp; cond == USER_BP)) {

// Reset breakpoint conditions
         was_step = 0;
         brk_name[0] = 0;

// Main command loop
         do {
            fprintf(stderr, &quot;cmd&gt; &quot;);
            gets(buff);
            switch(buff[0]) {

            case 'd':  objp(buff + 2)-&gt;display();                  break;
            case 'g':  if (buff[1])  strcpy(brk_name, buff + 2);   break;
            case 'q':  tracing = 0;                                break;
            case 's':  was_step = 1;                               break;
            case 'v':  tracing = 1;                                break;
            }     // switch

         } while(buff[0] != 's' &amp;&amp; buff[0] != 'g');
      }     // if (interactive)
   }     // if (message)
}     // cond_break()

monitored* objp(const char* str) {
        monitored* p;
        sscanf(str, &quot;%p&quot;, &amp;p);
        return p;
        }

int init_ctl::_count;
</pre>

<HR><P>Copyright &copy; 1991, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
