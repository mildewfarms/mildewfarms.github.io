<HTML>
<META NAME="year" CONTENT="1992">
<HEAD>
<TITLE>December 1992 - NEW WORLDS OF DATA</TITLE></HEAD>
<body bgcolor="#FFFFFF">
<H1>December 1992 - NEW WORLDS OF DATA</H1>
<hr>
<h2>FEATURES</h2><P>
<h3><a href="9212a/9212a.htm">SPATIAL DATA AND THE VORONOI TESSELLATION</a><br>by Hrvoje Lukatela and John Russell</h3><P>
Representing data in terms of spatial relationships is becoming increasingly  common.  Our authors use trigonometry, 3-D vector algebra, and Voronoi  tessellation to build a complete geographical information system to explore  spatial data types.<P>
<h3><a href="9212b/9212b.htm">SOUND AS A DATA TYPE</a><br>by Aaron E. Walsh</h3><P>
Programming for sound has never been simple.  QuickTime, Apple's system-wide  architecture for handling dynamic data, is a first step towards audio ease-of-coding.  Aaron presents a technique for converting traditional Macintosh sound  resources to QuickTime sound data samples.<P>
<h3><a href="9212c/9212c.htm">PERSISTENT OBJECTS IN C++</a><br>by Al Stevens</h3><P>
Al discusses persistence, then presents a method for adding persistent objects  to C++ programs by deriving applications classes from a persistent base class.<P>
<h3><a href="9212d/9212d.htm">PERSISTENCE IN A PROGRAMMING ENVIRONMENT</a><br>by Richard P. Gabriel</h3><P>
When Dick's group first started working on a programming environment for C  and C++, there was no commercially available way to add persistence to objects.   He describes what he was trying to do, why he needed persistence, his first  attempts at adding persistence, and finally, his solution.<P>
<h3><a href="9212e/9212e.htm">SPLAY TREES</a><br>by Dean Clark</h3><P>
Splay trees are self-adjusting data structures that rearrange themselves in  response to changing program operations.  They're easy to code and made  maintain, have low overhead, and can improve performance.<P>
<h3><a href="9212f/9212f.htm">A CURMUDGERY ON PROGRAMMING LANGUAGE TRENDS</a><br>by Scott Guthery</h3><P>
In the December 1989 DDJ, Scott presented his highly controversial &quot;Are the  Emperor's New Clothes Object Oriented?&quot;.  Now, three years later, he takes a  second look to see if anything has changed.<P>
<h2>EMBEDDED SYSTEMS</h2><P>
<h3><a href="9212g/9212g.htm">SIMULATION AND TESTBOARD FOR EMBEDDED-SYSTEM DESIGN</a><br>by Michael Kutter</h3><P>
With software simulation and hardware testboards, you can debug and test code  in parallel with hardware development.  Michael explains how these techniques  were applied to the software-development cycle of an embedded controller.<P>
<h2>NETWORKED SYSTEMS</h2><P>
<h3><a href="9212h/9212h.htm">SIMULATING HYPERCUBES IN UNIX, PART I</a><br>by Jeffery W. Hamilton and Eileen M. Ormsby</h3><P>
In this two-part article, our authors describe how you can simulate the execution  of a hypercube program on a standard UNIX system.  This month, they focus on  partitions, the basic building blocks of a hypercube system.  Next month, they  present the source code for the simulator and discuss how to use the system.<P>
<h2>EXAMINING ROOM</h2><P>
<h3><a href="9212i/9212i.htm">INSIDE THE ISO-9660 FILESYSTEM FORMAT</a><br>by William Frederick Jolitz and Lynne Greer Jolitz</h3><P>
For delivering large amounts of data, CD-ROMs give you the biggest bang for  the buck.  Bill and Lynne untangle the ISO-9660 filesystem format and present  utilities to decode a CD-ROM and view a file.<P>
<h2>PROGRAMMER'S WORKBENCH</h2><P>
<h3><a href="9212j/9212j.htm">BLOBS AND OBJECT-ORIENTED DATABASE ENGINES</a><br>by Sam Felton</h3><P>
In today's database parlance, sound and image data are known as &quot;binary large  objects,&quot; or BLOBs for short.  Sam examines one approach to constructing and  storing BLOBs in an object-oriented DBMS system.<P>
<h2>COLUMNS</h2><P>
<h3><a href="9212k/9212k.htm">PROGRAMMING PARADIGMS</a><br>by Michael Swaine</h3><P>
Michael recognizes a good thing when he sees it.  In this month's column, he and  Ronjon Nag, cofounder of a company developing cursive handwriting-recognition tools, talk about ink as a data type.<P>
<h3><a href="9212l/9212l.htm">C PROGRAMMING</a><br>by Al Stevens</h3><P>
A D-Flat++ program starts with an application window on a desktop.  Al presents  the source files that contain the member functions for the desktop and its  devices.<P>
<h3><a href="9212m/9212m.htm">STRUCTURED PROGRAMMING</a><br>by Jeff Duntemann</h3><P>
Until now, Jeff never paid much attention to the notion of Turbo Vision  resources--something akin to an ISAM manager for an ordinary Turbo Vision  stream.  He also uses Blaise's Turbo Vision Development Toolkit to explore  resources.<P>
<h3><a href="9212n/9212n.htm">GRAPHICS PROGRAMMING</a><br>by Michael Abrash</h3><P>
Michael implements a fast assembler version of his run-length slice line-drawing  routine before returning to the subject of page flipping.<P>
<h3><a href="9212o/9212o.htm">PROGRAMMER'S BOOKSHELF</a><br>by Andrew Schulman</h3><P>
One of the best discussions you'll find of demand-page virtual memory is in  Harold Stone's High-Performance Computer Architecture, the book Andrew  examines this month.<P>
<h2>DEPARTMENTS</h2><P>
<h3><a href="9212p/9212p.htm">EDITORIAL</a><br>by Jonathan Erickson</h3><P>
<h3><a href="9212q/9212q.htm">LETTERS</a><br>by you</h3><P>
<h3><a href="9212r/9212r.htm">SWAINE'S FLAMES</a><br>by Michael Swaine</h3><P>
<h2>PROGRAMMER'S SERVICES</h2><P>
<h3><a href="9212s/9212s.htm">OF INTEREST</a><br>by Tami Zemel</h3><P>
<HR><P>Copyright &copy; 1992, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
