<HTML>
<META NAME="year" CONTENT="1992">
<HEAD>
<TITLE>NOV92: PROGRAMMING PARADIGMS</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>PROGRAMMING PARADIGMS<a name="0299_0003"></h1><P>
<h2><a name="0299_0001"><a name="0299_0000">User-interface Worries</h2><P>
<h3>Michael Swaine</h3><P>
<a name="0299_0002"><a name="0299_0000">William F. Buckley always looks so relaxed when he's debating someone on television. It's partly the slouch.  And the smirk.  Posture and posturing as debating tools.<P>
Buckley should really be relaxed these days, since he recently sloughed off a long-time responsibility as editor of National Review.  He claims to have been, at the time of his retirement, the most senior editor in America, in terms of the number of years on the job.  I suspect that he is overlooking some other pretty senior editors, such as William M. Gaines, long-time editor of Mad magazine.<P>
Gaines died this summer, but his magazine continues its policy of cheeky irreverence, as shown in its recent flap with The American Rifleman, the official magazine of the National Rifle Association.<P>
Mad annoyed the NRA by publishing a satirical fake NRA ad in January.  (There was no question about it being a fake ad: Even those naive readers who might be fooled by Mad's rather broad humor ought to have noticed that the magazine has never carried paid advertising.)  An editorial in The American Rifleman fired back by encouraging its readers to write to Mad and express their feelings.  Hundreds did, some threatening to boycott (nonexistent) Mad advertisers; Mad published some sample letters, and made plans to take its next shot at the NRA.<P>
I wasn't there in the Mad offices to see the reaction of co-editor John Ficarra.  I choose to imagine that he slumped in his chair and smirked insufferably, just like William F. Buckley.  I do know what he said.  Expressing the magazine's official response to the threats, he said &quot;What, me worry?&quot;<P>
<h3><a name="0299_0004">What, You Worry?<a name="0299_0004"></h3><P>
Would that we could all be as unworried as Alfred E. Newman or John Ficarra.  But most of us find reasons to worry from time to time.  And some of us should worry more.  I'm thinking of Xerox managers in the late '70s, and graphical user-interface designers in the early '90s.<P>
The official computer-industry history has it that the graphical user interface was mainly invented at Xerox PARC back in the '70s; that it was the result of a lot of research, including research on what users actually did with computers; that Xerox missed their window, so to speak; that Xerox also failed to protect the PARC research and development efforts; and that the company as a result lost all but moral superiority in the user-interface market.<P>
Are there things to worry about in user-interface design in the '90s?  For instance, should you be worried about the fact that certain user-interface techniques have been patented?  For example, combining scrolling with multiple subwindows, or using exclusive-OR to put a cursor on the screen, or saving the contents of an obscured window into off-screen memory for later refresh?  All patented.  All grounds for lawsuit against you if you use them without license.<P>
Or should you be worried by the fact that user interfaces have increasingly become an object of copyright litigation?  Should you worry about protecting your user-interface efforts, or protecting yourself from some litigious patent or copyright holder?<P>
Xerox actually brought its graphical user interface to market in a commercial business machine before Apple introduced the Mac.  But the Star wasn't the right machine at the right time, apparently--in any case, it didn't win the day, even though the technology that did, as the official computer-industry history tells it, was Xerox's.  There are many ways to miss your window.<P>
The Xerox PARC GUI is '80s technology, and we're in the '90s.  Should you worry about the rumors that the desktop metaphor is on its way out?  Is it due to be replaced by the Next Big Thing?  And if so, which Next Big Thing?  Multimedia computing?  The Apple-IBM operating system?  Enterprise Computing?  Is it possible that, by investing time and money in current-paradigm, user-interface design, you will be missing the window into the Next Big Thing?<P>
The argument has been mooted here a couple of months ago that multimedia computing could require--and deliver--a new interface, obsoleting the PARCface.  Or even that it could bring about the demise of user interface entirely in favor of &quot;user experience.&quot;  Taligent has been discussed often enough here, too.  Neither of these Next Big Things seems to represent an immediate threat to the efforts of user-interface designers.  Enterprise computing does raise some questions about who will use computers and for what, and who will buy the software, and what will be expected of applications, and possibly even about user interface.<P>
Should you worry about usability testing?  The user research done at PARC was groundbreaking, but it's old.  User interfaces have evolved since the '70s.  Even the users have changed: Instead of the old naive users of that era, we have new naive users.  Is it worth worrying whether your user-interface design is usable?  Is anybody checking to see whether users appreciate what new user interfaces do for them?  Should you be checking, or at least worrying?<P>
<h3><a name="0299_0005">Rights and Wrongs<a name="0299_0005"></h3><P>
In A Connecticut Yankee in King Arthur's Court, Mark Twain wrote:<P>
The very first official thing I did, in my administration--and it was on the very first day of it, too--was to start a patent office; for I knew that a country without a patent office and good patent laws was just a crab, and couldn't travel any way but sideways or backways.<P>
Much has been said, here and elsewhere, about the value of patents in programming.  One organization that might not agree with Mark Twain is The League for Programming Freedom.  The League opposes the granting of patents for software and copyrights for user interfaces.<P>
I'll try to summarize, fairly but succinctly, the League's position on patents and copyrights.  Although some of the recent lawsuits seem specious to me, I'm not so much promoting the League's position as pointing out that there is a clearly articulated position on the issue.  Defenders of software patents and user-interface copyright, I think, need to address the points raised by the League.<P>
The League's software-patent arguments run something like this:<P>
<UL>
<LI>1.     Software patents are unnecessary.  The protection afforded by trade secrets and implementation copyright was always sufficient before.  There was no evidence, before the Patent Office began granting so many patent applications in the early '80s, that innovation in software was being hampered by lack of patent protection.</LI>
<LI>2.     The system isn't working.  The Patent Office began granting patents with no software-savvy examiners on staff.  Even now, it doesn't pay competitive salaries to get competent examiners.  Many of the decisions of the examiners are questionable even if you believe software patents are a good thing.</LI>
<LI>3.     Software isn't like hardware.  The differences argue for different treatment under the law.</LI>
<LI>4.     Software patents are hampering innovation.  Today, a developer of software should run a series of costly patent searches before releasing a new piece of commercial software, and even that won't guarantee that the developer hasn't violated someone's patent.  This is something to worry about.</LI>
</UL>
Another thing to worry about if you decide to try to patent something these days is the possibility of losing your right to even talk about your invention.  The Patent Office has been passing along patent applications to the Pentagon for a national security check, and record numbers of applications have been coming back stamped &quot;SECRET.&quot;  Seven hundred per year over the past three years.<P>
If your patent application gets stamped &quot;SECRET,&quot; you are enjoined from even talking about it, and you don't get the patent.  The policy is a remnant of cold war paranoia and has been challenged.  There seems to be some reason to believe that the policy will get changed, perhaps by letting the Commerce department fill the Pentagon's role in the process.  Whether that will be an improvement or not is something to worry about.  The whole deal looks like one more argument against applying for a patent.<P>
The League's user-interface copyright arguments run something like this: Copyright is a government-imposed monopoly whose sole purpose under law is to &quot;promote the progress of science and the useful arts.&quot;  In the case of user-interface design, it does not do that. Particularly, it does not protect small, innovative companies from large ones, it discourages meaningful competition, it is costly and inconvenient for users, it prevents much-needed standardization, it promotes incompatibility, it discourages useful incremental innovations, it permits extortionary threats of litigation by large companies, it is not a necessary incentive for the development of new interfaces, and interface developers themselves don't want it.  We ought to oppose the granting of copyrights that do not &quot;promote the progress of science and the useful arts.&quot;<P>
If you find the League's positions interesting, or if you find my summary of them inadequate, you may want to get in touch with the League for Programming Freedom, One Kendall Square, #143, P.O. Box 9171, Cambridge, MA 02139.<P>
Mark Twain really did believe in the Patent Office, and lost a bundle backing the latest publishing technology.  He spent the last years of his life earning back the money to pay back those who had invested in his schemes.  He was more successful as a writer than as a technology analyst.<P>
<h3><a name="0299_0006">Which Next Big Thing?<a name="0299_0006"></h3><P>
Enterprise computing is being touted by some as the Next Big Thing, and the touts claim that it will change the way applications are designed, the way software is marketed and purchased, and yes, the way the user interacts with the applications.<P>
The notion seems to be that, generation #1 having been mainframes, generation #2 minis, and generation #3 personal computers, the platform of choice in generation #4 will be the network.  Shades of Sun.  How long ago was Sun Micro advising us that, &quot;The network is the computer?&quot;<P>
In the world of enterprise computing, emphasis will shift back to enterprise-wide tasks and away from the personal-productivity tasks that have characterized the personal-computer universe.  Away from word processing and spreadsheets and back toward accounts receivable, payroll, inventory, order processing, and manufacturing logistics.  Away from single-user systems and toward multiuser systems, distributed processing, relational-database storage, and standard query language access.<P>
Aside from Lotus, whose Notes product is an enterprisewide application, personal computer software companies are not working on enterprise computing and are not expected by savvy analysts to be big players in that market.<P>
Does that mean that enterprise computing companies, perhaps raised in the mainframe or minicomputer worlds, will be producing the user interfaces of the next generation?<P>
Well, let's reason it out.  Let's assume, and it's a big assumption, that enterprise computing really takes off and sucks investment money away from personal-productivity software and becomes the center of the computing universe.  Even so, the developers of applications for enterprise systems will have to deal with an installed base of personal-productivity applications and operating systems.  There does not seem to be any compelling reason for them to make things difficult for the user by challenging the user-interface assumptions of today.<P>
The inertia of the installed base will carry a lot of weight.<P>
<h3><a name="0299_0007">Usability Testing<a name="0299_0007"></h3><P>
My sources tell me that over 34,000 of you are currently developing GUI applications for Windows.  You may or may not know what Microsoft is doing in the way of user-interface usability testing.<P>
It's impressive.  Users sit in a lab and perform for the Microsoft testers.  They get videotaped.  They are encouraged to think aloud as they work, and their verbalized thoughts are captured on tape.  They are observed through one-way glass.  They are monitored by software external to the applications they are using, and also by instrumented versions of those applications.<P>
The sheer mass of data collected and the variety of means for collecting it aren't alone very impressive.  Exploratory data collection and analysis is fine for generating hypotheses and research questions, but for answering questions the data collection should be theory driven.<P>
In fact, that's how it is at Microsoft.  Specific questions are asked and specific hypotheses are tested in the lab.  The hypotheses and questions arise from lab research and from more anecdotal sources: product support calls, letters, responses to coupon ads, focus groups, and field studies.  The exploratory research leads to models of user interaction or activity structure, and these models produce specific questions to be resolved in the lab.<P>
Microsoft cites several tangible results of its usability testing for user-interface design.  Replacing the cut-and-paste model for text manipulation in Word for Windows 2.0 was a result of such testing.  In a more mundane vein, testers learned how more informative dialog box messages can cut down user errors.  The concept is obvious enough, sure, but by doing the testing they got specific data on cases where it did and didn't work.<P>
So do you need to worry about usability testing?  Probably not, unless that's your job or the product is all yours and you're not content to follow the lead of a company like Microsoft that has done the worrying for you.<P>
<h3><a name="0299_0008">Education Market<a name="0299_0008"></h3><P>
And now for something completely different.<P>
Let's say you've got a friend.  This friend is a an applications or systems programmer for a medium-to-large-sized company.  But that's just his day job.<P>
In the evenings and on weekends, your friend programs.  He can't help himself, he has to do it.  But he isn't just doing it for fun; he dreams of launching his own software company one day.  It's not necessary that he make it big; his day job's secure; but programming is what he does, and there's so much poor software out there, and he keeps coming up with these ideas....<P>
He has a kid, and some of the ideas are ideas for educational products.  But although his kid likes the stuff he writes, he's uncertain about educational software as a market.  Don't you need to be a teacher to write that stuff?  Don't you have to get accepted into the curriculum through some bureaucratic process?  And aren't American schools (at least) so poverty-stricken that they can't buy paper, let alone software?<P>
There is a market for educational products, but it's a good thing that your friend doesn't need to make it big.  He shouldn't try to sell to schools, of course, but to parents like himself.  Many distributors have a good track record with educational software, and if your friend is thinking of products that include some art or music or video, his chances will be better.<P>
Much educational software is not high-investment.  Your friend doesn't have to include video; a good idea, well implemented, could sell well.  And some educational software is serial in nature: A well-received product can open the door for other similar products. Content can be a differentiating factor, and he should note that the price for pressing a CD-ROM has been dropping precipitously over the past years.<P>
There are the well-known distributors: Broderbund, The Bureau of Electronic Publishing, Educorp, Great Wave Software, The Learning Company.  But have you heard of Parsons Technology, Orange Cherry Software, Nordic Software?  MECC is a distributor that actually can get your friend's product into schools.<P>
Information about these distributors and a lot more can be found in a fat book titled Pride's Guide to Educational Software, by Bill and Mary Pride, published in 1992 by Crossway Books, a Division of Good News Publishers, 1300 Crescent Street, Wheaton, IL 60187.  Yes, Good News Publishers appears to be a religious book publishing company, but your friend shouldn't let that bias him.  This is a good book for the irreligious, too.<P>
The authors know their stuff, and this book is a good look at what's out there.  It includes many reviews of educational products in various categories for various levels.  Although it doesn't cover everything or every level or category evenly, I was impressed by its scope and the apparent expertise of the authors, who wrote all the reviews themselves.<P>
If I, like your friend, were thinking about writing some educational software, I'd study this book.  It might help me evaluate the market, size up my chances, price my product, and find a distributor.  On the other hand, it might tell me that the program I planned to write had been written already and could be had for $19.95 through educational-software sources everywhere.  Either way, it would be helpful.<P>
<P>
<P>
<HR><P>Copyright &copy; 1992, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
