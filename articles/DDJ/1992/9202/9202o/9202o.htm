<HTML>
<META NAME="year" CONTENT="1992">
<HEAD>
<TITLE>FEB92: SWAINE'S FLAMES</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>SWAINE'S FLAMES<a name="0080_0003"></h1><P>
<h2><a name="0080_0001"><a name="0080_0000">Usability Testing</h2><P>
<h3>Michael Swaine</h3><P>
<a name="0080_0002"><a name="0080_0000">Microsoft has a lab for it; so does Apple.  IBM probably has several (one for each of the breakaway republics).  Lotus and Tandy and Borland send theirs out.<P>
It's not fundamentally new, this business of testing software for usability.  Human-factors research is the basis of usability testing, and that's been around longer than personal computers.  Usability testing is human-factors research swallowed up by the voracious software development cycle.<P>
But it's not even new as a snack for that time- and energy-swallowing appetite.<P>
<h3><a name="0080_0004">What It Was<a name="0080_0004"></h3><P>
The current trend is the second era of personal computer software usability testing.  There was an earlier, now legendary, era in personal computing when usability testing was used to be sure that the target user could actually use the product.  That was back in the early days of personal computing, or microcomputing, back when the user looked and talked and thought just like the developer because the user was a developer.  Or a hacker.  Or a hobbyist.  Or an enthusiast.  Or, like the customers I dealt with when I did service calls for a computer store back in 1979, a pioneer who, for obscure reasons, was willing to work with a few arrows sticking out of his or her back.<P>
During that wild and innocent era, usability testing meant passing the product around among your friends.  It was beta testing, to give it its proper Greek letter; there was no important difference then between beta testing, usability testing, and showing the product to your pals (that is, to those pals who were in the know).<P>
That era ended in 1981, but for the most part the entire personal computer software industry has continued to rely way too long on beta testing and the feedback of insiders who are not the target audience for its products.<P>
<h3><a name="0080_0005">What It Is<a name="0080_0005"></h3><P>
Usability testing means letting the target users try the software, monitoring their behavior, analyzing their comments, and setting them tasks that test specific aspects of the ease of use and naturalness of the user interface.  Psychologists in lab coats watching their subjects through one-way glass.<P>
But Apple's human interface guy, Bruce &quot;Tog&quot; Tognazzini, says it doesn't all have to be that formal.  In the October 1991 Apple developer newspaper, Apple Direct, he presents a case study of a very casual usability test.  Although Tog has the lab-coated testers available to him, he knows that most developers don't have Apple's resources.  &quot;I believe that you can do your own initial testing if you can overcome your own biases, and if you can find a group of dear friends who will support you.&quot;  One bias that Tog may have had to overcome: One of his dear friends pointed out that the Macintosh control Tog had defined shouldn't be incompatible with the behavior of a similar control in Microsoft Windows.<P>
Informal usability testing is only part of the process, though.  It can identify problems, but it can't identify the absence of them.  For that you need a more formal testing procedure, and a representative sample of your target users.<P>
<h3><a name="0080_0006">What It Ain't<a name="0080_0006"></h3><P>
Here's an example of what not to do with usability testing.<P>
<UL>
<li>Give ten users several tasks to perform and five graphical user interfaces to work in. Don't bother to make the tasks reasonable ones for the GUIs involved, and be sure to define the tasks in computer terms, rather than work-related terms: &quot;Change the name of an icon&quot; for example, or &quot;eject a disk without using the mouse,&quot; rather than &quot;compute your Federal income tax.&quot;</li>
<li>Most readers don't read manuals anyway, so don't give them any.</li>
<li>Weight your user group heavily in favor of DOS users so that judgments regarding usability can be confounded with perceptions of similarity to DOS.</li>
<li>Don't use the results to identify concrete problems with the GUIs, but collect the users' gut reactions.  You're looking for insights such as this one: &quot;For some reason I liked Windows, but I don't know if it was any easier.&quot;</li>
<li>Publish the results in a computer magazine, claiming to &quot;find out--once and for all--which graphical user interface is easiest to use.&quot;</li>
</UL>
The computer magazine that recently did all of the above probably should have run the idea through a usability lab first.<P>
<P>
<P>
<HR><P>Copyright &copy; 1992, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
