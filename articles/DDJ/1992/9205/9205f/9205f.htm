<HTML>
<META NAME="year" CONTENT="1992">
<HEAD>
<TITLE>MAY92: FILE VERIFICATION USING CRC</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>FILE VERIFICATION USING CRC<a name="0117_0003"></h1><P>
<h2><a name="0117_0001"><a name="0117_0000">32-bit cyclical redundancy check</h2><P>
 This article contains the following executables: CRCMAN.ARC<P>
<h3>Mark R. Nelson</h3><P>
<p><i><a name="0117_0002"><a name="0117_0000">Mark is vice president of software development at Greenleaf Software and author of The Data Compression Book (M&amp;T Publishing). Mark can be contacted at 16479 Dallas Parkway, Suite 570, Dallas, TX 75248.</i></p><hr><P>
File verification is the process of determining whether a file on a computer has been modified unexpectedly. No matter whether this happens through hardware failure, program error, or malicious tampering, I like to know when a file has had its contents altered. Likewise, I'd like a convenient way to check the integrity of a file to verify that it hasn't been changed.<P>
The question of file integrity has been on my mind because of several nearly simultaneous incidents. First of all, I recently ran dozens of relatively untested programs through my home system when judging the Dr. Dobb's Data Compression Contest. At least two programs  caused inadvertent damage to the file systems on my PC, one under UNIX  and the other under MS-DOS. In both cases, I was able to spot much of the damage; but after I restored the data that looked bad, I was left  feeling unsure about the rest of my system. Had other files been damaged  in more subtle ways? I suddenly felt as though I couldn't trust my  system.<P>
An even more alarming incident occurred a couple of weeks later. A  programmer who supplies my company (Greenleaf Software) with a product  for resale called and casually mentioned that his office had been  infested with the notorious &quot;Stoned&quot; virus. Had we by any chance noticed  anything funny in our systems? We see funny things on our systems on an hourly basis, so suddenly we again did not trust any of the files on our  PCs. (Fortunately, this turned out to be a false alarm.)<P>
Finally, as part of a recent product release at Greenleaf, we  decided to implement a program that would allow our customers to  download short patch files from our BBS to apply to the source code they  purchased from us. I wrote a small program that could read in the patch file and make modifications to an existing source file, resulting in a  corrected output file. To keep the program simple, however, we had to  have a way to be sure that the input file we were patching was the file we expected it to be, and that it hadn't been modified in any way. Our  patch program would be capable of really fouling up the file if a  programmer had just changed a few lines here and there before trying to  patch it.<P>
The solution to all these problems consists of two parts. The first  is to use the CRC-32 algorithm to provide a &quot;fingerprint&quot; method of file  identification. The second is a general-purpose program called CRCMAN  that can develop a catalog of CRC values for all the files in a  directory tree, and can later check the files in the same directory tree  against the catalog.<P>
<h3><a name="0117_0004">CRC-32<a name="0117_0004"></h3><P>
CRC-32 is an acronym for the &quot;32-bit Cyclical Redundancy Check&quot;  algorithm. CRC-32 generally refers to a specific 32-bit CRC formula  sanctioned by the CCITT, an international standards body primarily concerned with telecommunications. CRC-32 is used in communications protocols such as HDLC and ZMODEM to verify the integrity of blocks of  data being transferred through various media.<P>
CRC calculations are done using a technique with the formidable name  of &quot;polynomial division.&quot; A block of data, regardless of how long, is  treated as if each bit in the block is the coefficient in a long polynomial. For example, a single hexadecimal byte, F0H, would be considered to be the polynomial: 1*X<SUP>7</SUP> + 1*X<SUP>6</SUP> + 1*X<SUP>5</SUP> + 1*X<SUP>4</SUP> +  0*X<SUP>3</SUP> + 0*X<SUP>2</SUP> + 0*X<SUP>1</SUP> + 0*X<SUP>0</SUP>. The terms with coefficients of 0 drop  out, so the polynomial can be expressed as: X<SUP>7</SUP> + X<SUP>6</SUP> + X<SUP>5</SUP> + X<SUP>4</SUP>.  If we are calculating the CRC of an entire file, the exponents will be very  large but this is not a problem. The actual values of the exponents do  not come into play during the calculation of the CRC, so the CRC  values can grow indefinitely without affecting the algorithm.<P>
The calculation of the CRC is done by dividing a second polynomial,  the &quot;generator polynomial,&quot; into the message polynomial, producing a  quotient and a remainder. The generator polynomial used by the CRC-32  is: X<SUP>32</SUP> + X<SUP>26</SUP> + X<SUP>23</SUP> + X<SUP>22</SUP> + X<SUP>16</SUP> + X<SUP>12</SUP> + X<SUP>11</SUP> + X<SUP>10</SUP> + X<SUP>8</SUP> + X<SUP>7</SUP> + X<SUP>5</SUP> + X<SUP>4</SUP> + X<SUP>2</SUP> + X<SUP>1</SUP>. After dividing this generator  polynomial into our message polynomial, we simply discard the  quotient, and use the remainder as our 32-bit CRC.<P>
Polynomial division to create a CRC was originally done using  hardware shift registers and Boolean glue logic. Fortunately, &quot;cookbook&quot;  algorithms now exist to implement the CRC on PCs in a relatively fast and efficient manner. In CRCMAN, I use a table-lookup version of the algorithm that exchanges a small increase in storage space for fast calculation.<P>
The details of how the CRC calculations work have been discussed in many places, so I won't go into further details in this article. Some excellent resources are listed in the References section, if you are interested in exploring this topic further.<P>
<h3><a name="0117_0005">The Qualities of the CRC-32<a name="0117_0005"></h3><P>
CRCMAN uses the CRC-32 algorithm to generate a 32-bit number for  any given file. We then treat this 32-bit number as a somewhat unique &quot;fingerprint&quot; for that file. The fingerprint differs from the human  fingerprint in that while no two people have identical fingerprints, this is not the case for files. More than 4,294,967,296 different files exist in the world, so it is a foregone conclusion that some of them  must have identical checksums. However, the CRC-32 does have attributes  that make it attractive for verification of files. These include the  following:<P>
<UL>
<li>Every bit in the message contributes to the CRC. This means that changing any bit in the message changes the CRC.</li>
<li>Relatively small changes in the message are guaranteed to change in the CRC. Thus, two files that differ by only a few bits are certain to have different CRC values.</li>
<li>The histogram of output CRC values for input messages tends to be flat. For a given input message, the probability of a given CRC being produced is nearly equal across the entire range of possible CRCs from 0  to FFFFFFFFH.</li>
</UL>
These are the attributes that the CCITT had in mind when selecting  the CRC-32 algorithm, and we assume that they made a good choice. The  chances of inadvertently damaging or modifying a file without modifying the CRC is vanishingly small, so for all practical purposes, a program  such as CRCMAN can be considered to be infallible.<P>
Another characteristic we would like to see in the CRC-32 is  noninvertability. Although not really necessary when using the CRC to  simply guard against accidental file corruption, noninvertability  becomes much more important when we want to detect virus infestations  of our files.<P>
A typical virus might operate by modifying the MS-DOS command  interpreter, COMMAND.COM. My version of COMMAND.COM happens to have a  CRC-32 of O2f8690cH. In the event that a virus modifies this file, it  will undoubtedly have a new CRC-32. The challenge to the virus programmer would then be to add new bytes to the end of the file so that the original CRC was restored.<P>
Unfortunately, it is possible to do this through simple brute force. In theory, the virus programmer could just add a limited number  of bytes to the end of COMMAND.COM, and then begin systematically trying  out new values of those bytes until random chance produces a combination that yields the correct checksum. An efficient algorithm that could calculate a new CRC in a millisecond should then never need  more than a few weeks of processing power to come up with a set of  numbers that solves this puzzle. And a programmer with access to hardware with an extra couple of orders of magnitude of CPU power could  solve the same problem in an afternoon.<P>
This means that while CRCMAN will be an excellent judge of  unintentional damage to files, it is possible than an exceptionally  clever virus will be able to defeat it. Further modifications to the  program would improve its ability to fight viruses. For example, just storing the length of the file along with its CRC would make a virus  programmer's job much more difficult, if not impossible.<P>
<h3><a name="0117_0006">Implementation<a name="0117_0006"></h3><P>
CRCMAN was written as a dual-purpose program. It has two operating modes: one for building a list of CRC values, and another for checking  files against that list. The command line for CRCMAN has one of two  forms. The first form is used to create a CRC listing file that has the CRC and filename of every file in a directory tree. The syntax for  invoking CRCMAN in this mode is: CRCMAN-b directory crc-filename. The  directory parameter passed to CRCMAN is the name of a root directory.  CRCMAN will calculate the CRC-32 for every file in and under that directory, and store the results in the CRC file named as the second  parameter. The CRC file created is an ordinary ASCII text file that  can be edited and manipulated using any text editor. All it contains is  a sequence of lines that contain a CRC-32 value followed by a filename.<P>
For example, I ran CRCMAN on the directory that holds my work for  this article on my MS-DOS machine with the following command: CRCMAN-b  . C:\CRCFILES\TEST.CRC. This created a CRC file named TEST.CRC, which  contains the information shown in <a href="#0117_0027">Figure 1</A>. Later  on, I can check the integrity of these files by running CRCMAN in its  second mode, which takes the command line: CRCMAN C:\CRCFILES\TEST.CRC.  In this mode, CRCMAN just reads in each line of the CRC file,  calculates the CRC of the file, and determines if it matches the stored CRC. When working on this article, I changed a few lines in the text  file, then ran CRCMAN. It produced the data in <a href="#0117_0008">Figure  2.</A><P>
<h4><a name="0117_0027"><a name="0117_0007">Figure 1: Sample contents of TEST.CRC</h4><P>
<pre>363476a4 .\CRC.TXT
b97a5169 .\CRC.BAK
d6a5f5f5 .\CRCMAN.C
02f8690c .\TEST\COMMAND.COM
88f2e4d6 .\CRCMAN.EXE
23123e1c .\TEMP.CRC
</pre><P>
<P>
<h4><a name="0117_0008">Figure 2: Sample output from CRCMAN</h4><P>
<pre>    Checking .\CRC.TXT  .
    Error: Expected 76a414c6, got 86793634
    Checking .\CRC.BAK  .
    Error: Expected 516914c6, got 76a4b97a
    Checking .\CRCMAN.C  .  OK
    Checking .\TEST\COMMAND.COM ..  OK
    Checking .\CRCMAN.EXE  .  OK
    Checking .\TEMP.CRC  .  OK</pre><P>
<P>
CRCMAN correctly detected the changes in the two files. In the  current implementation of CRCMAN, when an error is detected, an error  message is printed out to the screen. In a production version of this  program, the action taken can obviously grow to be as sophisticated as  you like.<P>
<h3><a name="0117_0009">The Code<a name="0117_0009"></h3><P>
<a href="#0117_0010">Listing One</A> is the complete listing for CRCMAN. This  version of the program is designed to run with most MS-DOS C compilers, K&amp;R implementations under XENIX, and the hybrid Microsoft C compiler  under UNIX. For the most part, the portability of the program doesn't  intrude when you read the code, but there are a few exceptions. Microsoft C 6.0 generates messages at warning level 4, so this code has to be compiled with /W3 instead of /W4. Additionally, when  compiling for UNIX targets, you will have to define the UNIX macro in  order to turn on the correct directory processing code. A few places in  the code contain code bracketed with #ifdef UNIX statements. This puts  the burden on the programmer compiling under UNIX or XENIX to define the  macro UNIX either in the program or on the command line.<P>
The main() routine of CRCMAN has to first perform initialization of  the table used when calculating CRC-32 values. This routine, found in  BuildCRCTable(), initializes all the values in the array CRCTable[].  These are used later in the program anytime a CRC value is calculated.<P>
Once main() has built the CRC table, it next checks to see which  mode the user has selected, based solely on the number of arguments  passed on the command line. If argc is equal to 2, main() assumes it  has been invoked with a single filename as an argument, and it calls CheckFiles(). If argc is equal to 4 and the first argument is -b, main()  assumes it has been invoked to build a CRC file, and it calls  BuildCRCFiles(). If neither of these turns out to be true, a usage message is printed out and the program exits.<P>
<h3><a name="0117_000a">Building the CRC File<a name="0117_000a"></h3><P>
Of the two possible jobs given to this program, building the CRC  file is the more complex. Both tasks have to calculate the CRC-32  values for one or more files, but building the file has the additional  job of navigating through the directory tree. Complicating this even more, navigating the directory tree has to be done differently under  UNIX and MS-DOS.<P>
BuildCRCFile() sets things up for the task by opening up the output  file that will receive all the filenames and CRC values. It then makes a call to the routine that does all the work, ProcessAllFiles(). This  routine takes two arguments, a path name and a CRC file FILE pointer.<P>
ProcessAllFiles() has the same flow of control under UNIX, XENIX, and various MS-DOS compilers. Unfortunately, the function names and  structures needed to implement the loop vary quite a bit between the  various environments. The pseudocode for this routine looks like that in <a href="#0117_000b">Example 1.</A><P>
<h4><a name="0117_000b">Example 1: Pseudocode for the ProcessAllFiles() routine</h4><P>
<pre>    ProcessAllFiles( path )
         dir = OpenDirectory( path )
          while FilesLeftInDirectory( dir )
               filename = GetNextFile( dir )
               if filename is a directory then
                    ProcessAllFiles( filename )
               else
                    crc = CalculateCRC( filename )
                    write filename and crc
               endif
          end of while
     end of ProcessAllFiles
</pre><P>
<P>
The underlying operating systems primitives to implement this  pseudocode are different under MS-DOS and UNIX. UNIX uses a pair of  functions called opendir() and readdir() to open the directory and get  the next filename. Under MS-DOS, there are a pair of MS-DOS function calls named findfirst() and findnext(). To complicate things under  MS-DOS, Borland has implemented these system calls using different  function and structure names than those selected by other vendors.<P>
The result of all these variations is a routine that has been coded  using a rat's nest of #ifdef statements and macro definitions. However,  if you understand the underlying pseudocode, the C is not too bad. One  nice thing about this particular function is that it provides an excellent example of a job that is truly easier to do using recursion.<P>
Examining the body of ProcessAllFiles() shows that near the bottom  of the routine, a call is made to Calculate CRCFile(). This routine calculates the CRC-32 file for the file. The result is then printed out  along with the filename to the CRC log file. As ProcessAllFiles() does  its work, a complete listing of the entire directory tree is built up, for later use by CRCMAN in its checking mode.<P>
<h3><a name="0117_000c">Calculating the File CRC<a name="0117_000c"></h3><P>
Calculating the CRC-32 for a given file is relatively easy. The  CalculateFileCRC() routine repeatedly reads in blocks of 512 bytes and  passes them through the CalculateBufferCRC() routine. CalculateBufferCRC  takes as an argument the CRC of the file up to that point, and returns  the new CRC for the file so far. This process repeats until the entire  file has been processed.<P>
When calculating the file CRC, this routine initializes the CRC value to all 1s, or 0xFFFFFFFFL. After the file calculation has completed, the bits in the CRC are inverted by XORing with the same value, 0xFFFFFFFFL. This pre- and postconditioning is intended to provide additional error immunity and is used by protocols such as ZMODEM, as well as programs such as PKZIP and ARJ. The CRC values produced by CRCMAN consequently match up with those you would see in the listing of a ZIP file containing the same list of files.<P>
<h3><a name="0117_000d">Checking the Files<a name="0117_000d"></h3><P>
The second mode of operation for this program is the CRC check.  Most of the work here is done in the CheckFiles() routine. It gets to  bypass the directory tree navigation, because all the filenames it needs  to check are already stored in the CRC log file. All this routine does  is repeatedly read in a line from the CRC log file containing a 32-bit  CRC value and a filename. It then calculates the actual CRC for the file  and reports on whether the stored and calculated CRC values match up.<P>
The simple ASCII format of this file makes for easy maintenance of  the CRC log files. For example, if the log file contains the CRC values  for the directory tree containing your Borland C++ compiler, you will  probably regularly get reports from CRCMAN that your configuration file,  TURBOC.CFG, has changed. Because you know this file is supposed to change, it is a simple enough matter to edit the log file and delete the  line that refers to the file.<P>
<h3><a name="0117_000e">Using the Program<a name="0117_000e"></h3><P>
CRCMAN can be set up to provide a quick way to check the integrity  of any or all of the files on your system. By calling CRCMAN with the -b  parameter for every directory full of executables, you create a set of  CRC log files that can be periodically checked with a single call to  CRCMAN. CRCMAN operates quickly enough that you can even include it as  part of your AUTOEXECBAT file under MS-DOS, without letting it slow  down your work too much.<P>
CRCMAN could also be easily modified to provide good virus checking.  To make things a little tougher on the virus programmer, you would  probably want to store the length of the file along with CRC-32, and  perhaps even store the file time stamp. While even these measures don't  give you an iron-clad guarantee against a virus attack, they will  probably detect the vast majority of infestations.<P>
Ultimately, the best way to use CRCMAN would be as a concurrent  process that runs continuously on your machine at low priority. This is fairly easy to implement under OS/2 or UNIX, but is somewhat  problematic under MS-DOS.<P>
<h3><a name="0117_000f">References<a name="0117_000f"></h3><P>
Campbell, Joe. C Programmer's Guide to Serial Communications.  Indianapolis, Ind.: Howard W. Sams, 1988.<P>
Ramabadran, Tenkasi V. and Sunil S. Gaitonde. &quot;A Tutorial on CRC  Computations.&quot; IEEE Micro (August 1988).<P>
DDJ<P>

<PRE>

_FILE VERIFICATION USING CRC_
by Mark R. Nelson


<a name="0117_0010">
<a name="0117_0011"></pre><B>[LISTING ONE]</B><pre><a name="0117_0011">

/************************** Start of CRCMAN.C *************************
 * This program is used to build a list of CRC-32 values for all of files in a
 * given directory tree. After building file, program can be run later to
 * verify CRC values, giving assurance of integrity of files. To build CRC file
 * command line is: CRCMAN -b root-dir crc-file-name
 * To check list of files created, run with: CRCMAN crc-file-name
 * Should work with most 16 and 32-bit compilers under MS-DOS and UNIX. */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;

unsigned long CRCTable[ 256 ];

/* To build this program under UNIX, define UNIX either on the command line or
 * by editing this file. To define it on the command line, program should be
 * built like this: cc -o crcman -DUNIX crcman.c   Code in this program assumes
 * UNIX compiler is K&amp;R variety; does away with real function prototyping. */
#ifdef UNIX

#include &lt;varargs.h&gt;
#ifdef M_XENIX
#include &lt;sys/ndir.h&gt;
#else
#include &lt;sys/dirent.h&gt;
#endif /* M_XENIX */

#define SEPARATOR &quot;/&quot;
#define FILENAME_SIZE 81

void FatalError();
unsigned long CalculateFileCRC();
void ProcessAllFiles();
void BuildCRCFile();
void CheckFiles();
unsigned long CalculateBufferCRC();
void BuildCRCTable();

#else /* not UNIX, must be MSDOS */
/* Most MS-DOS compilers have converged on same names for structures and
 * functions used when searching directories. Borland C implementations use a
 * variant, requiring macro definitions. Functions work in an identical manner,
 * so actual implementation of code is straightforward. Addition of MS-DOS
 * definition helps convince Zortech compiler to use same structure and
 * function names as everyone else. */
#define MSDOS 1
#include &lt;stdarg.h&gt;
#include &lt;dos.h&gt;

#define SEPARATOR &quot;\\&quot;
#define FILENAME_SIZE FILENAME_MAX

#ifdef __TURBOC__

#include &lt;dir.h&gt;
#define FILE_INFO                 struct ffblk
#define FIND_FIRST( n, i )        findfirst( ( n ), ( i ), FA_DIREC )
#define FIND_NEXT( info )         findnext( ( info ) )
#define FILE_NAME( info )         ( ( info ).ff_name )

#else

#define FILE_INFO                 struct find_t
#define FIND_FIRST( n, i )        _dos_findfirst( (n), _A_SUBDIR, (i) )
#define FIND_NEXT( info )         _dos_findnext( ( info ) )
#define FILE_NAME( info )         ( ( info ).name )

#endif

void FatalError( char *fmt, ... );
unsigned long CalculateFileCRC( FILE *file );
void ProcessAllFiles( char *path, FILE *crc_file );
void BuildCRCFile( char *input_dir_name, char *crc_file_name );
void CheckFiles( char *crc_file_name );
unsigned long CalculateBufferCRC( unsigned int count, unsigned long crc,
                                  void *buffer );
void BuildCRCTable( void );

#endif  /* UNIX */

/* Main program checks for valid occurences of two different types of command
 * lines, and executes them if found. Otherwise, it prints out a simple
 * usage statement and exits.  */
int main( argc, argv )
int argc;
char *argv[];
{
    setbuf( stdout, NULL );
    BuildCRCTable();
    if ( argc == 2 )
        CheckFiles( argv[ 1 ] );
    else if ( argc == 4 &amp;&amp; strcmp( argv[ 1 ], &quot;-b&quot; ) == 0 )
        BuildCRCFile( argv[ 2 ], argv[ 3 ] );
    else {
        printf( &quot;Usage: CRCMAN [-b input_dir] crc-file \n&quot; );
        printf( &quot;\n&quot; );
        printf( &quot;Using the -b option checks all files under the input_dir\n&quot; );
        printf( &quot;and appends their data to the crc-file.  Otherwise, the\n&quot; );
        printf( &quot;program checks the CRC data of all of the files in the\n&quot; );
        printf( &quot;crc-file and prints the results\n&quot; );
        return( 1 );
    }
    return( 0 );
}
/* Instead of performing a straightforward calculation of the 32-bit CRC using
 * a series of logical operations, program uses faster table lookup method. */
#define CRC32_POLYNOMIAL     0xEDB88320L

void BuildCRCTable()
{
    int i;
    int j;
    unsigned long crc;

    for ( i = 0; i &lt;= 255 ; i++ ) {
        crc = i;
        for ( j = 8 ; j &gt; 0; j-- ) {
            if ( crc &amp; 1 )
                crc = ( crc &gt;&gt; 1 ) ^ CRC32_POLYNOMIAL;
            else
                crc &gt;&gt;= 1;
        }
        CRCTable[ i ] = crc;
    }
}
/* Routine checks CRC values for a list of files. */
void CheckFiles( crc_file_name )
char *crc_file_name;
{
    FILE *crc_file;
    FILE *test_file;
    unsigned long log_crc;
    unsigned long crc;
    char log_name[ FILENAME_SIZE ];
    int result;

    crc_file = fopen( crc_file_name, &quot;r&quot; );
    if ( crc_file == NULL )
        FatalError( &quot;Couldn't open the log file: %s\n&quot;, crc_file_name );
    for ( ; ; ) {
        result = fscanf( crc_file, &quot;%lx %s&quot;, &amp;log_crc, log_name );
        if ( result &lt; 2 )
            break;
        test_file = fopen( log_name, &quot;rb&quot; );
        if ( test_file != NULL ) {
            printf( &quot;Checking %s &quot;, log_name  );
            crc = CalculateFileCRC( test_file );
            fclose( test_file );
            if ( crc != log_crc )
                printf( &quot;Error:  Expected %08lx, got %08lx\n&quot;,
                        log_name, log_crc, crc );
            else
                printf( &quot;OK\n&quot; );
        } else
            printf( &quot;Could not open file %s\n&quot;, log_name );
    }
}
/* ProcessAllFiles() scans directory. Routine also makes sure that directory
 * name passed on command line is stripped of trailing '/' or '\' character. */
void BuildCRCFile( input_dir_name, crc_file_name )
char *input_dir_name;
char *crc_file_name;
{
    char path[ FILENAME_SIZE ];
    FILE *crc_file;

    strcpy( path, input_dir_name );
    if ( path[ strlen( path ) - 1 ] == SEPARATOR[ 0 ] )
        path[ strlen( path ) - 1 ] = '\0';
    crc_file = fopen( crc_file_name, &quot;w&quot; );
    if ( crc_file == NULL )
        FatalError( &quot;Can't open crc log file: %s\n&quot;, crc_file_name );
    ProcessAllFiles( path, crc_file );
}
/* This routine is responsible for actually performing the calculation of the
 * 32-bit CRC for the entire file. We precondition the CRC value with all 1's,
 * then invert every bit after the entire file has been done. This gives us a
 * CRC value that corresponds with the values calculated by PKZIP and ARJ. */
unsigned long CalculateFileCRC( file )
FILE *file;
{
    unsigned long crc;
    int count;
    unsigned char buffer[ 512 ];
    int i;

    crc = 0xFFFFFFFFL;
    i = 0;
    for ( ; ; ) {
        count = fread( buffer, 1, 512, file );
        if ( ( i++ % 32 ) == 0 )
            putc( '.', stdout );
        if ( count == 0 )
            break;
        crc = CalculateBufferCRC( count, crc, buffer );
    }
    putc( ' ', stdout );
    return( crc ^= 0xFFFFFFFFL );
}
/* This is the routine that is responsible for calculating all of CRC values
 * for files in a given directory. The CRC values and file names are written
 * out to the crc_file. */
void ProcessAllFiles( path, crc_file )
char *path;
FILE *crc_file;
{
#ifdef UNIX
    DIR *dirp;
#ifdef M_XENIX
    struct direct *entry;
#else
    struct dirent *entry;
#endif /* M_XENIX */
#define NAME entry-&gt;d_name
#else
    FILE_INFO fileinfo;
    int done;
#define NAME FILE_NAME( fileinfo )
#endif
    char fullname[ FILENAME_SIZE ];
    struct stat buf;
    unsigned long crc;
    FILE *file;

    printf( &quot;Searching %s\n&quot;, path );
    strcat( path, SEPARATOR );
#ifdef UNIX
    dirp = opendir( path );
    if ( dirp == NULL )
        FatalError( &quot;Error opening directory %s\n&quot;, path );
    entry = readdir( dirp );
    while ( entry != 0 ) {
#else
    strcpy( fullname, path );
    strcat( fullname, &quot;*.*&quot; );
    done = FIND_FIRST( fullname, &amp;fileinfo );
    while ( done == 0 ) {
#endif
        strcpy( fullname, path );
        if ( strcmp( NAME, &quot;.&quot; ) &amp;&amp; strcmp( NAME, &quot;..&quot; ) ) {
            strcat( fullname, NAME );
            if ( stat( fullname, &amp;buf ) == -1 )
                FatalError( &quot;Error reading stat from file %s!\n&quot;, fullname );
            if ( buf.st_mode &amp; S_IFDIR )
                ProcessAllFiles( fullname, crc_file );
            else {
                file = fopen( fullname, &quot;rb&quot; );
                if ( file != NULL ) {
                    printf( &quot;Scanning %s &quot;, fullname  );
                    crc = CalculateFileCRC( file );
                    putc( '\n', stdout );
                    fprintf( crc_file, &quot;%08lx %s\n&quot;, crc, fullname );
                    fclose( file );
               } else
                    printf( &quot;Could not open %s!\n&quot;, fullname );
            }
        }
#ifdef UNIX
        entry = readdir( dirp );
#else
        done = FIND_NEXT( &amp;fileinfo );
#endif
    }
}
/* Routine calculates the CRC for a block of data using table lookup method.
 * It accepts an original value for the crc, and returns the updated value. */
unsigned long CalculateBufferCRC( count, crc, buffer )
unsigned int count;
unsigned long crc;
void *buffer;
{
    unsigned char *p;
    unsigned long temp1;
    unsigned long temp2;

    p = (unsigned char*) buffer;
    while ( count-- != 0 ) {
        temp1 = ( crc &gt;&gt; 8 ) &amp; 0x00FFFFFFL;
        temp2 = CRCTable[ ( (int) crc ^ *p++ ) &amp; 0xff ];
        crc = temp1 ^ temp2;
    }
    return( crc );
}
/* Fatal error handler prints a formatted error message and then exits. */
#ifdef UNIX

void FatalError( va_alist )
va_dcl
{
    char *fmt;
    va_list argptr;

    va_start( argptr );
    fmt = va_arg( argptr, char * );
#else

void FatalError( char *fmt, ... )
{
    va_list argptr;
    va_start( argptr, fmt );
#endif

    printf( &quot;Fatal error: &quot; );
    vprintf( fmt, argptr );
    va_end( argptr );
    exit( -1 );
}
</pre>

<HR><P>Copyright &copy; 1992, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
