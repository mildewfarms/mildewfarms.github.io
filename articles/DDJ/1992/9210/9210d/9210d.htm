<HTML>
<META NAME="year" CONTENT="1992">
<HEAD>
<TITLE>OCT92: A TASTE OF DYLAN</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>A TASTE OF DYLAN<a name="022b_0003"></h1><P>
<h2><a name="022b_0001"><a name="022b_0000">Apple's new object-oriented dynamic language</h2><P>
<h3>David Betz</h3><P>
<p><i><a name="022b_0002"><a name="022b_0000">David is a DDJ contributing editor and the author of XLisp, XScheme, Bob, and numerous other programming languages.  He can be contacted through the DDJ offices.</i></p><hr><P>
Dylan is a new language designed by the Advanced Technology Group at Apple Computer. Like C++, Dylan is an object-oriented language.  Unlike C++, Dylan is a DYnamic LANguage. This means that it provides automatic storage management as well as runtime type checking and dynamic linking.  It shares these features with other dynamic languages such as Lisp and Smalltalk.<P>
In fact, Dylan looks like a cross between Scheme (a small but powerful dialect of Lisp) and CLOS (the Common Lisp Object System).  Like Scheme, Dylan is a compact language.  It is designed to be compiled efficiently and to run on machines with limited resources.  This is in contrast to Common Lisp, which typically requires many megabytes of memory.<P>
<h3><a name="022b_0004">Dylan's Object System<a name="022b_0004"></h3><P>
One of Dylan's most notable features is its object system.  Like CLOS from Common Lisp, it supports multiple inheritance and provides polymorphism through generic function calls.  With Dylan, however, the object system goes all the way down to the primitive data types.  In Common Lisp, the object system was grafted on top of a nonobject-oriented language.  Dylan is &quot;objects all the way down,&quot; like Smalltalk.<P>
<a href="#022b_0005">Example 1</A> shows an example of a Dylan class definition, which creates a class and stores its definition as the value of the symbol &lt;point&gt;.  The class inherits from the class &lt;object&gt; and has slots named x and y.  You can create a new instance of the class &lt;point&gt; by passing it as an argument to the make function along with any initialization keywords.  In this case, x: and y: are used to provide initial values for x and y, respectively.  You can create a point with the coordinates (12,23) using the form: (make &lt;point&gt; x: 12 y: 23).<P>
<h4><a name="022b_0005">Example 1: A Dylan class definition.</h4><P>
<pre>
  (define-class &lt;point&gt; (&lt;object&gt;)
    (x required-init-keyword: x:)
    (y required-init-keyword: y:))</pre><P>
<P>
In addition to defining a new class, the define-class form also creates getter and setter functions for each of the slots.  In Dylan, slot values are always accessed through functions.  The getter function gets the value of a slot and the setter function sets its value.  The default names for these functions are derived from the name of the slot.  The default getter function name is simply the slot name.  The default setter function name is the list (setter &lt;slot-name&gt;).  You can override these defaults using slot options.<P>
In <a href="#022b_0006">Example 2(a)</A>, for instance, setter functions are used to change the value of a slot.  You can call the setter function directly, as in <a href="#022b_0006"> Example 2(b)</A>.  But it is much more common to use the form in <a href="#022b_0006">Example 2(c)</A>.<P>
<h4><a name="022b_0006">Example 2: (a) Using setter functions to change the value of a slot; (b) calling the setter function directly; (c) an alternate use of the setter function.</h4><P>
<pre>
  (a)

  (define foo (make &lt;point&gt; :x 12 y: 23))
  (x foo) =&gt; 12
  (y foo) =&gt; 23

  (b)

  ((setter x) foo 99)

  (c)

  (set! (x foo) 99)</pre><P>
<P>
The symbol required-init-keyword: is called a &quot;slot option.&quot;  It states that the keyword that follows is used to initialize its associated slot and that the keyword must be present in any call to make for the class &lt;point&gt;.  <a href="#022b_0007">Table 1</A> lists other slot options that Dylan supports; <a href="#022b_0008">Table 2</A> lists space-allocation options.<P>
<h4><a name="022b_0007">Table 1: Dylan slot options.</h4><P>
<pre>
  Slot Option     Purpose
  ------------------------------------------------------------------------

  getter:         Specify the getter function name.
  setter:         Specify the getter function name.
  type:           Specify the type of values to be stored in the slot.
  init-value:     Specify the initial value of the slot.
  init-function:  Specify a function to compute the initial value of the
                   slot.
  init-keyword:   Specify the make function keyword used to initialize the
                   slot.
  allocation:     Specify how space for the slot is to be allocated.</pre><P>
<P>
<h4><a name="022b_0008">Table 2: Dylan space-allocation options.</h4><P>
<pre>
  Option         Purpose
  ------------------------------------------------------------------------

  instance       Each instance has storage for the slot.
  class          Every instance of the class and its subclasses share the
                  same storage for the slot.
  each-subclass  The class and each-subclass get their own storage for the
                  slot, each instance uses the storage associated with its
                  direct class.
  constant       The value of the slot is a constant.
  virtual        The slot has no storage allocated for it and its value
                  must be managed by its getter and setter functions.</pre><P>
<P>
A class can be defined as a subclass of several other classes.  In this case, the new class inherits the structure and behavior of all its parent classes.  For instance, you may want to define a subclass of &lt;point&gt; that allows a bunch of points to be linked together into a doubly linked circular list.  You could define a subclass of &lt;point&gt; with two additional fields, next and prev, but this would bury the definition of the doubly linked circular lists in the definition of linked-point.  It would be better to separate out that functionality to make it available for building other types of doubly linked lists.  You can do this by defining a mixin class, a class that isn't really useful by itself but can be mixed into other classes to give them additional functionality.  <a href="#022b_0009">Example 3(a)</A> shows a definition of the doubly linked list mixin.  <a href="#022b_0009">Example 3(b)</A> then defines the &lt;linked-point&gt; class.  Objects of the new class &lt;linked-point&gt; will contain the slots of both &lt;point&gt; and &lt;linked-entity&gt;.  All slot accessors for both classes will work on instances of the new subclass, and any methods that apply to either superclass (or their superclasses) will apply to instances of the subclass.<P>
<h4><a name="022b_0009">Example 3: (a) A definition of the doubly linked list mixin; (b) a definition of the &lt;linked-point&gt; class.</h4><P>
<pre>
  (a)

  (define-class &lt;linked-entity&gt; (&lt;object&gt;)
   next
   prev)

  (b)

  (define-class &lt;linked-point&gt; (&lt;point&gt; &lt;linked-entity&gt;))</pre><P>
<P>
<h3><a name="022b_000a">Polymorphism<a name="022b_000a"></h3><P>
One of the important concepts of object-oriented programming is polymorphism.  Polymorphism makes it possible to customize the behavior of a function based on the type of its arguments.<P>
Dylan implements polymorphism through generic functions, collections of methods that understand how to handle particular types of arguments.  When a generic function is applied to arguments, the generic-function dispatch facility selects an appropriate method based on the classes of the arguments passed in the generic function call.<P>
Unlike message-passing languages such as Smalltalk that only dispatch on the class of the object receiving the message, Dylan takes into account the classes of all of the required arguments to a function.  This is called &quot;multiple dispatch&quot; (or &quot;multimethods&quot;), and makes it much easier to define functions whose behavior depends on more than one of their arguments. For instance, a print function could behave differently based on both its target output device and the type of object being printed.<P>
<h3><a name="022b_000b">Method Definitions<a name="022b_000b"></h3><P>
Now, it's time to look at method definitions.  <a href="#022b_000c">Example 4</A> defines a few methods useful for classes that use the &lt;linked-entity&gt; mixin.  The first method is used to initialize a new instance of the class.  It simply sets the next and prev pointers to the object itself.  This creates a doubly linked circular list of one element.  Note that initialize calls next-method before doing anything else.  The next-method function calls the next applicable method, which would have been called if this initialize method did not exist. This is useful for adding behavior in a subclass since it causes an inherited method to be called.  Dylan doesn't support before, after, and around methods like CLOS, so this is the primary means of method combination.<P>
<h4><a name="022b_000c">Example 4: Defining methods for classes that use the &lt;linked-entity&gt; mixin.</h4><P>
<pre>
  (define-method initialize ((x &lt;linked-entity&gt;))
    (next-method)
    (set! (next x) x)
    (set! (prev x) x))

  (define-method add-after ((e1 &lt;linked-entity&gt;)
                (e2 &lt;linked-entity&gt;))
    (bind ((e3 (next e1)))
      (set! (next e1) e2)
      (set! (next e2) e3)
      (set! (prev e3) e2)

      (set! (prev e2) e1)))</pre><P>
<P>
The second method adds the element e2 to a list immediately after the element e1, updating the links accordingly.<P>
Methods usually have one or more required arguments, whose classes are used to select the method when it is associated with a generic function.  In the add-after method, both e1 and e2 are required arguments.<P>
Each required argument may have a specializer that restricts the objects that can appear as the value of that argument.  In the definition of add-after, the specializer (e1 &lt;linked-entity&gt;) says that the first argument is called e1 and its value must be a general instance of the class &lt;linked-entity&gt;.  (A general instance of a class is an instance of either the class itself or one of its subclasses.)  Even when you call a method directly, the constraints implied by the specializers are enforced.  It's impossible to call a method with arguments that don't match its argument specializers.<P>
In addition to required arguments, methods can have optional keyword arguments and rest arguments.  Keyword arguments are passed in pairs.  The first element of the pair is the keyword, and the second is the value.  You can also specify a default value to be used if the keyword argument isn't specified.<P>
Sometimes it is convenient to allow a function to take an arbitrary number of arguments. This is handled by the rest argument.  When you call a method with a rest argument, all of the arguments beyond the required arguments are collected together and passed as a sequence as the value of the rest argument.  The method is then free to examine these additional arguments using the sequence functions provided by Dylan.  When a method accepts both keyword arguments and a rest argument, the same actual arguments are used to satisfy both.<P>
Dylan allows methods to return more than one value.  For instance, if you want to define a method for &lt;point&gt; that returns both coordinates, you do it as shown in <a href="#022b_000d"> Example 5(a)</A>.  This method will return two values, the x and y coordinates.  To use the two values, you can use the bind form to bind the values to variables; see <a href="#022b_000d">Example 5(b)</A>.<P>
<h4><a name="022b_000d">Example 5: (a) Defining a method for &lt;point&gt; that returns both coordinates; (b) binding the two values in (a) to variables.</h4><P>
<pre>
  (a)

  (define-method coordinates ((p &lt;point&gt;))
  (values (x p) (y p)))

  (b)

  (bind ((x y (coordinates foo)))
    ...  do something with x and y ...
  )</pre><P>
<P>
All object-oriented languages allow instance variables or slots to be associated with a class of objects.  Dylan also allows slots to be associated with particular instances.  This can be handy when you don't want to create a new class that will have only one instance just to allow that instance to have a new slot.  You can also define a method that applies only to a particular instance using what Dylan calls a &quot;singleton.&quot;  A singleton can be used in place of a class in the specializer for an argument to a method and will cause the method to apply only to that particular instance.<P>
<h3><a name="022b_000e">Conclusion<a name="022b_000e"></h3><P>
Dylan has many other interesting features that I haven't discussed here: object-oriented condition handling, a standardized protocol for handling iteration, introspective functions for allowing programs to inspect the way classes and methods work, and so on.  I hope this article has given you a flavor of this new object-oriented, dynamic programming language from Apple.<P>
Incidentally, you can get a copy of the Dylan manual by writing to: Apple Computer Inc., One Main Street, Cambridge, MA 02142.<P>


<HR><P>Copyright &copy; 1992, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
