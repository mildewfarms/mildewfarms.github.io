<HTML>
<META NAME="year" CONTENT="1992">
<HEAD>
<TITLE>October 1992 - OBJECT-ORIENTED PROGRAMMING</TITLE></HEAD>
<body bgcolor="#FFFFFF">
<H1>October 1992 - OBJECT-ORIENTED PROGRAMMING</H1>
<hr>
<h2>FEATURES</h2><P>
<h3><a href="9210a/9210a.htm">SIZING UP APPLICATION FRAMEWORKS AND CLASS LIBRARIES</a><br>by Ray Valdes</h3><P>
In our examination of object-oriented application frameworks and class libraries,  we asked the experts to show us the best way to use their tools--we wrote the  spec, they wrote the code.  Like us, you'll be surprised at some of the results.<P>
<h3><a href="9210b/9210b.htm">OBJECT-ORIENTED PROGRAM CONSTRUCTION</a><br>by William G. Wong</h3><P>
Plugs, an object class used in conjunction with conventional classes, work like  their electrical counterparts, and give you the ability to interconnect and  assemble software components for program construction without resorting to the  usual pointers and functions.<P>
<h3><a href="9210c/9210c.htm">SUPER DISTRIBUTION AND ELECTRONIC OBJECTS </a><br>by Brad Cox</h3><P>
As object-oriented technologies extend our ability to encapsulate functionality  within prefabricated components, superdistribution of electronic objects and  pay-per-use software start to make sense.<P>
<h3><a href="9210d/9210d.htm">A TASTE OF DYLAN</a><br>by David Betz</h3><P>
Dylan, a new object-oriented dynamic language from Apple Computer, provides  automatic storage management, runtime type checking, and dynamic linking,  much like Lisp and Smalltalk.<P>
<h3><a href="9210e/9210e.htm">DPMI MEETS C++</a><br>by Frederick Hewett</h3><P>
DPMI is a programming interface that allows application-level code to run in  protected mode. This article looks at DPMI from an object-oriented perspective,  using C++ class library as the basis for exploration.<P>
<h2>EMBEDDED SYSTEMS</h2><P>
<h3><a href="9210f/9210f.htm">TIMED CALLBACKS IN C++</a><br>by Christian Stapfer</h3><P>
The timed-callback scheme Christian presents here queues functions you want  invoked after a given number of system clock ticks.  This system, which Christian  used as the basis for an embedded moisture controller, uses a bounded priority  queue that's quite efficient.<P>
<h2>NETWORKED SYSTEMS</h2><P>
<h3><a href="9210g/9210g.htm">IMPLEMENTING NLM-BASED CLIENT/SERVER ARCHITECTURES</a><br>by Michael Day</h3><P>
NetWare NLMs take full advantage of the multitasking, multithreaded  architecture of the operating system.  Michael presents a distributed file manager  made up of two modules: ENGINE.NLM, an NLM running on a NetWare 3.x  server, and CLIENT.EXE, a DOS-based front end running on the client.<P>
<h2>EXAMINING ROOM</h2><P>
<h3><a href="9210h/9210h.htm">SAFE PROGRAMMING WITH MODULA-3</a><br>by Sam Harbison</h3><P>
Feature-for-feature, Modula-3 is on a par with Ada and C++, but avoids  complexity by simplifying individual features like inheritance and generics.   Furthermore, Modula-3 is less of a moving target because it already has features  only now being added to those other languages.<P>
<h2>PROGRAMMER'S WORKBENCH</h2><P>
<h3><a href="9210i/9210i.htm">A SOURCE CODE PROFILER</a><br>by Keith W. Boone</h3><P>
Identifying code that must work faster is one of the keys to writing successful  software, and profilers are the right tools for the job.  Keith shows you how to  put profilers to their best use, and gives you the code to build your own profiler  in the process.<P>
<h2>COLUMNS</h2><P>
<h3><a href="9210j/9210j.htm">PROGRAMMING PARADIGMS</a><br>by Michael Swaine</h3><P>
&quot;Subscription Software&quot; is yet another software distribution scheme.  Michael  analyzes this approach and reports on his recent trip to the MacWorld Expo  conference in Boston.<P>
<h3><a href="9210k/9210k.htm">C PROGRAMMING</a><br>by Al Stevens</h3><P>
Al wraps up his D-Flat project by discussing the File Open and Save As dialog  boxes, the application window's status bar, and text compression of the D-Flat  help database.  He then ponders what's right and wrong with C++.<P>
<h3><a href="9210l/9210l.htm">STRUCTURED PROGRAMMING</a><br>by Jeff Duntemann</h3><P>
According to Jeff, the &quot;Parts is Parts&quot; fallacy holds that the kind of tools and  libraries you use don't have any bearing on your design strategy.  Jeff believed  this too--until he came face-to-face with an application framework.<P>
<h3><a href="9210m/9210m.htm">GRAPHICS PROGRAMMING</a><br>by Michael Abrash</h3><P>
Following up on last month's introduction to texture mapping, Michael discusses  orientation independence and mapping textures across multiple polygons.  He  then shows you how to do it fast.<P>
<h3><a href="9210n/9210n.htm">PROGRAMMER'S BOOKSHELF</a><br>by Andrew Schulman</h3><P>
If you've ever wanted to understand how your favorite compiler works, or if you  ever needed to write some form of language processor, Compiler Design in C by  former DDJ columnist Allen Holub is the book for you.<P>
<h2>DEPARTMENTS</h2><P>
<h3><a href="9210o/9210o.htm">EDITORIAL</a><br>by Jonathan Erickson</h3><P>
<h3><a href="9210p/9210p.htm">LETTERS</a><br>by you</h3><P>
<h3><a href="9210q/9210q.htm">SWAINE'S FLAMES</a><br>by Michael Swaine</h3><P>
<h2>PROGRAMMER'S SERVICES</h2><P>
<h3><a href="9210r/9210r.htm">OF INTEREST</a><br>by Tami Zemel</h3><P>
<HR><P>Copyright &copy; 1992, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
