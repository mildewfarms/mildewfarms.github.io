<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>SEP95: Examining C/C++ Compilers</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Examining C/C++ Compilers<a name="0127_0056"><a name="0127_0054"><a name="0127_0000"></h1><P>
<h2>Five compilers, head-to-head</h2><P>
<h3>Tim Parker</h3><P>
<p><i><a name="0127_0055"><a name="0127_0000">Tim, a technical editor for <I>SCO World</I> magazine, is the author of <I>Linux Unleashed</I> (Sams, 1995). He can be contacted at tparker@tpci.com.</i></p><hr><P>
Choosing a C compiler is both simple and difficult: simple, in that most compilers on the market are robust and mature enough to offer solid C handling; difficult, in that certain minor differences between them may be relevant to your needs. To ferret out these fine points, we recently examined five C compilers for the Sparcstation 5.<P>
Each compiler was supplied by the vendor for a Sparcstation 5 machine running Solaris 2.4. We installed the compilers on newly formatted hard drives on which only Solaris was loaded. We compiled five test programs with each compiler, measuring time to compile, problems encountered, and any changes necessary for a clean compilation. The test programs were not of the simple &quot;hello world&quot; ilk, but real-world applications that we use in-house, for tracking project time and inventory, and at client sites, for accounting and time management. <P>
We also wrote SPECint92 programs and ran them against each compiler. This is not, however, a very fair test of a compiler, as it measures only integer performance and programmer skill. We tried to optimize compilation by using compiler flags and options where applicable, but we don't claim to have tweaked each compiler to its optimum performance. Still, the numbers we measured are representative.<P>
<a href="#0127_005e">Table 1</A> and <a href="#0127_005f">Table 2</A> present our findings, which also include extra tools, features, and notable add-ons. In this article, we'll describe these features and our experiences with each compiler.<P>
<h3><a name="0127_0057">MetaWare High C/C++<a name="0127_0057"></h3><P>
The MetaWare High C/C++ compiler is a combination package, offering both C and C++ capabilities. Much of the material included with the High C/C++ system applies to C++ only; to keep the comparison fair, we concentrated only on the C-language portion.<P>
Our version of MetaWare C/C++ was supplied on eight 3.5-inch diskettes: six for the compiler and two for patches. Installation proceeded smoothly, and after the patch diskettes were installed, the system was ready. Installation lasted about ten minutes. A compiler demo file is included to ensure all the components were properly installed. Several environment variables must be massaged to identify paths and libraries.<P>
High C/C++ allows you to turn off extensions in the package with a compiler option, forcing the core ANSI Standard C language only. High C/C++ also complies with proposed C++ standards still under development. MetaWare supplies both an internal ANSI-C preprocessor and the option to use a UNIX external preprocessor (which may be K&amp;R instead of ANSI C). High C/C++ is not K&amp;R compatible, but it can be forced to compile K&amp;R code by relying heavily on external libraries and the preprocessor.<P>
By default, the system supports the extensions MetaWare has added to both C and C++. In many ways, these extensions provide the best features of other languages to C and C++ programmers, albeit at the cost of portability to other compiler products that lack the extensions. For example, High C/C++ lets you nest functions with up-level references and pass nested functions as parameters to other functions (a Pascal strong point). Many in-line library function calls are offered, as well as iterators that help handle and move through data structures.<P>
You can use either the default UNIX system libraries or those provided with High C/C++. The latter is necessary if you use any High C/C++ extensions. Slight problems can occur if you use the MetaWare libraries but need a function in the UNIX library. Dependency problems may arise as one function calls another, or there may be duplicate symbols. Since data structures of the internal and external libraries are different but the names remain the same, these errors are often not caught during compilation and cause core dumps when executed.<P>
High C/C++ uses configuration and profile files to specify values for the compiler. This can save a lot of command-line typing, especially if you maintain several configuration setups for different purposes and copy those you need into the default filenames when necessary. Of course, makefiles can be used to specify most parameters, too.<P>
High C/C++ includes the GNU Debugger (gdb), which is automatically installed with the compilers. gdb is quite good, and is widely used. It did not seem to have been customized for the High C/C++ compiler.<P>
As a C compiler, High C/C++ behaves very well, and is extremely difficult to fluster. In fact, it's about as robust a C compiler as we've seen. It has a few neat features for typical C programmers: Warnings come in a variety of levels and can be set to verbose, brief, or somewhere in between. The warning and error messages are very good, almost invariably pointing you to the problem location. It would be nice if the offending source code were displayed, but that's a minor quibble. (The C++ aspect of the High C/C++ package includes the Rogue Wave Tools.h++ and I/O streams library. As a C++ compiler, MetaWare scores strongly.)<P>
Support for the product is extraordinary in today's market. MetaWare offers lifetime tech support with the package (although the support is restricted to standard business hours and e-mail). <P>
We found High C/C++ very easy to work with, and it gave us no problems at all during testing. However, High C/C++ is relatively slow compared to the rest of the compilers reviewed here, even when heavily optimized. Indeed, it scored lowest on nearly every test. How much of a difference is there? Our large compilation tests revealed several minutes' difference, although with smaller programs, the difference was much less significant. <P>
If you can handle slower speeds and the lack of K&amp;R C, MetaWare High C/C++ is a solid, attractive compiler package. The extensions are useful although not standard, and the combination of a C and C++ compiler in one package may appeal to some. We liked High C/C++, but wonder if the performance would annoy us in the long run.<P>
<h3><a name="0127_0058">Cygnus Developer's Kit (GNU C/C++)<a name="0127_0058"></h3><P>
Cygnus may not be as familiar a name as say, Microsoft, but the company nonetheless has a loyal user base. The Cygnus Developer's Kit is a collection of GNU tools that is bundled together and documented as a complete set, then ported to many different platforms. Indeed, the ported versions have made Cygnus quite a name among cross-platform developers. Cygnus's testing and integration services add value to the GNU tools, and Cygnus is the organization authorized to make general releases of available GNU C tools (although GNU products can be obtained from many different sources). <P>
Our copy of the Cygnus Developer's Kit was supplied on QIC tapes for both Solaris and HP/UX (many other distribution formats are available). Installation is simple, using tar to extract an installation script that does the rest. It's straightforward and applies to all target machines. Considering Cygnus's wide platform support, customizing installation scripts for each platform would probably be a headache.<P>
The Cygnus Developer's Kit includes the GNU C compiler (gcc), the GNU C++ compiler (g++), the GNU debugger (gdn), the GNU assembler (as), GNU assembler preprocessor (gasp), and GNU linker (ld). There is the usual host of GNU utilities (byacc, flex, make, diff, and so on), as well as some text utilities (TeX). Libraries in the package include ANSI C run time (for cross-development platforms), C math subroutines (again for cross development), C++ class library, C++ iostreams, and, for Solaris platforms, a performance analyzer (gprof).<P>
The GNU debugger is good, but not worth getting too excited about. Performance-wise, the GNU C compiler is unremarkable. It was about average in speed tests during our first trials. It has no optimizing capability, so we spent a couple of days playing with flags and options. Eventually, we managed to find several useful tweaks that improved performance a little, but the compiler still didn't win any prizes. <P>
There is more to the Cygnus package than just the GNU material. The C subroutine library supplied by the Free Software Foundation has some nasty licensing restrictions, so Cygnus developed its own freely distributable, royalty-free library. Also, Cygnus's tech support has a reputation for excellence. Many of the Cygnus developers helped write the GNU material in the first place.<P>
For a solid distribution source for the GNU compiler, good documentation, and excellent technical support, Cygnus is probably the place to go. You pay for the add-ons, of course (especially the tech support), but then you don't get much for free these days.<P>
<h3><a name="0127_0059">LanguagePak 1 (GNU C/C++)<a name="0127_0059"></h3><P>
Still closer to the &quot;free&quot; level than Cygnus is Ready to Run Software's LanguagePak 1. LanguagePak 1 comprises gcc, G++, gdb, and a collection of libraries to support the compiler. LanguagePaks are available for over a dozen popular UNIX platforms. Ready to Run Software offers collections of utilities on many subjects besides the C compiler, such as Fax software, X, Internet tools, and utilities.<P>
There's no real documentation with the LanguagePak. It has a few pages of installation notes and a catalog of Ready to Run Software's offerings in a smallish, three-ring binder. A zip-top page insert holds the distribution media. Manuals and documents are provided in soft-copy only. <P>
Installation, which uses tar and an installation script, ran smoothly for us, installing the entire tape's contents.<P>
Ready to Run Software offers no technical support, per se, as it is mainly a bundling company. The GNU software is the same as that offered by Cygnus, but the Cygnus package contains a lot more material (as well as printed documentation and technical support). <P>
If you like warning messages, this compiler will be your favorite. It generated more error and warning messages than any other compiler we've seen. There were also a few compilation problems (mainly portability errors) that required quite a bit of tweaking.<P>
As a bare-bones, easy source of GNU compilers, Ready to Run Software looks promising. You don't have to look for the latest version on the Internet or worry about compatible tools. The GNU compiler is good but not the best. Its price of $275.00, however, is definitely attractive.<P>
<h3><a name="0127_005a">SunSoft SPARCompiler C 3.0.1<a name="0127_005a"></h3><P>
The SunSoft SPARCompiler comes bundled with the SPARCworks GUI-driven development environment. To maintain an even playing field, we limited our examination to the C portion of the SPARCompiler package (which is physically separate from the SPARCworks package).<P>
The documentation for SPARCompiler C is very well written--the best we saw. Some newcomers to C may be overwhelmed by the wealth of material, but good organization and layout make it manageable.<P>
Installation is from a CD-ROM and could be handled with the pkgadd or swmtool utilities. You select the components to be installed from a list of all SunSoft tools, then start the routine. We would have preferred a single installation to worrying whether we got all the parts installed properly, but the entire installation went smoothly and required only a few minutes. The license manager was a pain, but we mastered that, too.<P>
The SPARCompiler is an extension of the older C compiler included as part of the SunOS distribution and should be familiar to Sun users. We compared SPARCompiler to our older Sparcstation 1 installation running a pre-Solaris version of SunOS and found little difference. The error and warning messages are a little better and the performance is improved, but it's still the same beastie in fancier wrapping. Messages are just as cryptic and annoying as they always have been, although you now get a line number.<P>
As far as we can tell, the SPARCompiler uses the same debugger as SPARCworks; it's capable and worth sticking with. Technical support costs extra after the first 30 days, but it's available 24 hours a day. The SPARCompiler's forte is performance, whether optimized or not. Code optimization with SPARCompiler is a bit hit-and-miss: Specific optimization methods tend to yield variable results, and we usually defaulted to the system's basic optimization routines.<P>
We would have considered the SPARCompiler a winner if it hadn't been for the error messages, which were simply annoying. Still, the compiler is very fast and has good documentation, a strong feature set, and a lot of loyal users who still think the compiler should be included free with the operating system.<P>
<h3><a name="0127_005b">Edinburgh Portable Compilers EPC ANSI C 3.1.2<a name="0127_005b"></h3><P>
According to its literature, EPC was started by a group of University of Edinburgh faculty members as a means of selling their compilers and development tools. Although its U.S. presence is still small, the most recent version of its compiler may make people start to pay more attention. This compiler is the only one that struck us as noticeably different from the rest.<P>
The documentation includes a copy of Kenneth Barclay's <I>C Problem Solving and Programming</I> (Prentice-Hall, 1990), a very interesting and worthy addition to the package. <P>
Installation of the EPC C compiler proceeded smoothly from a QIC tape and used tar (some earlier versions used pkgadd). One annoying aspect of tar that applies to many products is that a tarred distribution media doesn't allow you to change destination directories. All you can do is let it extract to the default destination, then manually copy files to your preferred directory, and try to correct all the pointers to the files. We couldn't get this to work with the EPC compiler and finally used the default /opt directory. A license manager must be invoked after the installation to enable the compiler.<P>
The Motif-based debugger is quite talented, and we could easily have been happy with it as our default debugger. It has several advantages over the GNU Debugger, and is somewhat integrated with the compiler. <P>
Technical support is provided for 30 days, with access to both the Scotland and California offices (providing essentially a 16-hour support period). <P>
The compiler itself is very good. We looked at an earlier release in the preliminary stages of this evaluation, and we worked with a much earlier release a couple of years ago. The current version is noticeably faster and more robust. One of the EPC C compiler's most important advantages is its ease of use. There are no 100-character-long command-line options, no digging through cabalistic lists for some magic optimize. A single flag provides all the optimization that EPC considers stable and useful. <P>
Unoptimized, the compiler produced good, tight code quite quickly. When the optimizer was turned on, compilation took a little longer. The code was a little faster, but not by much, which points to a solid compiler design right from the start. The EPC C compiler produces both ANSI and K&amp;R C code and provides some extensions. Other useful features are very good multiprocessing and thread support. The optimizers are quite clever, handling instruction migration, register renaming, redundant-access elimination, and very clean loop analysis.<P>
We found the EPC C compiler the most friendly and easiest to work with, and it is our top choice for a straightforward, command-line driven C compiler. Our only complaint is the inflexible installation routine. <P>
<h3><a name="0127_005c">Summary<a name="0127_005c"></h3><P>
All of the compilers discussed here are solid performers with relatively minor differences. Choosing a C compiler on performance alone is usually folly, as the fastest compiler may not have the library or compilation options that make your task easier. The performance spread averages only a few percent. What makes the difference is the ease of use, compiler options, and availability of different libraries and support tools. <P>
The Cygnus GNU distribution tape contains every type of GNU utility and library, available free of charge (as well as some Cygnus-developed libraries) and is the most cost-effective solution for a full-featured system. <P>
The LanguagePak is a winner from the cost viewpoint: If your only requirement is a compiler with basic support tools (debugger and libraries), LanguagePak is easier than surfing the net to find the GNU system.<P>
MetaWare High C/C++ is definitely the package for those who want top-notch support, libraries, and both C and C++ compilers in one box. Its only poor rating was in performance. It's lack of K&amp;R may be a sore point with some users, but most of the world is now using ANSI C. <P>
The latest version of the SunSoft SPARCompiler C is the fastest compiler we tested. However, the poor error and warning messages may annoy some. On the whole, this is an excellent offering, which makes it difficult to rank second.<P>
Our preference was EPC's compiler. The Motif-based debugger was a winner, and the compiler's pure ease of use and fine handling made it one of the fastest turn-around compilers. We could run through more code-compile-link-debug cycles with EPC C than with any of the others in the same amount of time, and with much less annoyance. The documentation is very good, the performance was top-notch, and the optimizations excellent. As a stand-alone C compiler, we'll stay with EPC C.<P>
<h3><a name="0127_005d">For More Information <a name="0127_005d"></h3><P>
LanguagePak 1<P>
Ready To Run Software<P>
4 Pleasant Street<P>
P.O. Box 2038<P>
Forge Village, MA 01886<P>
508-692-9922<P>
<P>
EPC C Compiler for SPARC v. 3.1.2<P>
Edinburgh Portable Compilers Ltd.<P>
14531 Big Basin Way<P>
Saratoga, CA 95070<P>
408-867-1039<P>
<P>
SPARCompiler C 3.0.1<P>
SunSoft<P>
2550 Garcia Avenue<P>
Mountain View, CA 94043<P>
415-336-6848<P>
<P>
MetaWare High C/C++ 3.2<P>
MetaWare<P>
2161 Delaware Avenue<P>
Santa Cruz, CA 95060<P>
408-429-6382<P>
<P>
Cygnus Developer's Kit<P>
Cygnus<P>
1937 Landings Drive<P>
Mountain View, CA 94043<P>
415-903-1400<P>

<a name="0127_005e"><B>Table 1:</B> Overall compiler ratings. (a) General; (b) C compiler. All ratings are the average of scores from 1 (poor) to 10 (excellent) given by each reviewer. No attempt has been made to weight the individual categories or to total the results based on the categories shown. The overall score is determined by each reviewer based on each category score and personal biases. <a name="0127_005e">
<pre> 
               MetaWare  EPC  Ready to Run  Cygnus  SunSoft
(a)
Documentation      8      9         1          6       9
Installation       9      7         3          4       9
Features           7      8         3          6       8
Support           10      7         1          9       7
User Interface     7      7         3          5       6
Debugger           6      9         6          6       8
Libraries          9      8         6          7       7

(b)
Perf. Unoptimized* 6      8         7          7      10
Perf. Optimized*   8      9         8          8      10
Configurability    9      6         6          6       8
Ease of Use        8      9         6          6       6
Overall Rating:    8      9         6          7       9

<I>*Performance ratings for optimized and unoptimized code determined by averaging five different-sized test program compilation and execution times and assigning a value from 1 to 10. </I>
</pre>
<a name="0127_005f"><B>Table 2:</B> SPECint92 measurements.<a name="0127_005f">
<pre>
                MetaWare     EPC     Ready to Run     Cygnus     SunSoft
                           Compilation Times (SPECint92 tests) 
Unoptimized       52.2      60.6         58.4*         58.4*       61.9
Optimized         56.8      62.7         60.8          60.8        67.4

<I>*These are both GNU compilers, so they're rated the same.</I>
</pre>

<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
