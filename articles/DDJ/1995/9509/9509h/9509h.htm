<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>SEP95: A VBX for UDP</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>A VBX for UDP<a name="0121_0052"><a name="0121_0050"><a name="0121_0000"></h1><P>
<h2>A custom control for network development</h2><P>
<h3>Frank E. Redmond III</h3><P>
<p><i><a name="0121_0051"><a name="0121_0000">Frank is the director of software development for a distributed-information-systems company in Michigan. He can be contacted via CompuServe at 76352,343.</i></p><hr><P>
A variety of communication protocols are available for building network applications: IPX/SPX, NetBIOS, and Named Pipes, to name a few. On a network-related project I was recently involved in, however, we decided to implement TCP/IP, primarily because it is independent of both network topology and platform. <P>
Our job was to facilitate communication over a LAN between several applications; therefore, nearly 70 percent of the code I wrote was communications related. Initially, our applications were to be deployed on Windows-based machines, but since we eventually intend to support platforms such as Macintosh and UNIX, our network communications protocol had to be as platform independent as possible; hence, our decision to support TCP/IP.<P>
To create the user interface on the front end, I turned to Visual Basic (VB), which sped up the development process and allowed me to encapsulate the network-related code into a VB Custom Control (VBX). In this article, I'll present that VBX, along with an overview of TCP/IP protocols. Additionally, I'll briefly describe how to port VBXs to OLE Custom Controls (OCXs) to ensure compatibility with future versions of Visual Basic and other development environments. <P>
<h3><a name="0121_0053">TCP/IP Overview<a name="0121_0053"></h3><P>
Transmission Control Protocol (TCP) and Internet Protocol (IP) are the two most important protocols of the Internet Protocol Suite. TCP/IP is topology independent: It works with bus, ring, and star network topologies, spanning LANs and WANs. Since TCP/IP is freely available for independent implementation, it is also network-operating-system and platform independent. In addition, TCP/IP is independent of the physical network hardware: It can be used with Ethernet, token ring, and others.<P>
Of the two, IP is more important because it's used by all other TCP/IP protocols. IP is responsible for moving data from computer to computer using an &quot;IP address,&quot; a unique 32-bit number assigned to each computer. Other higher-level protocols are used to move data between programs on different computers by way of a &quot;port,&quot; a unique 16-bit number assigned to each program. Combined, an IP address and a program port number constitute a TCP/IP socket, which uniquely identifies every program on every computer. The two most popular protocols that rely on TCP/IP sockets are TCP and User Datagram Protocol (UDP).<P>
TCP is considered &quot;connection oriented,&quot; because the two communicating machines exchange a handshaking dialogue before data transmission begins. TCP uses a checksum to validate received data. If the checksums don't match, the sender automatically resends the data, without programmer intervention; thus TCP guarantees that data is delivered, and delivered in order. TCP is best used for stream-oriented data.<P>
UDP is considered &quot;connectionless.&quot; It requires less overhead since there's no handshaking. However, UDP provides unreliable data delivery: Data may be duplicated, arrive out of order, or not arrive at all. Though unreliable, UDP is very efficient and allows you to utilize your own ACK/NAK. UDP is best suited for record-oriented data where all of the information can be sent in one packet.<P>
TCP/IP supports Windows-based machines via the Windows Sockets (WinSock) API, which lets you write applications to the WinSock specification. Applications will then run on any Winsock-compatible TCP/IP protocol stack. The WinSock API is in the form of a DLL--WINSOCK.DLL for 16-bit applications and WSOCK32.DLL for 32-bit apps. You simply write to the WinSock API and link your applications with the appropriate library. <P>
WinSock API functions fall into one of three categories: Windows Sockets functions, Windows Sockets database functions, and Windows-specific functions. Windows Sockets functions are a subset of the Berkeley sockets routines; see <a href="#0121_0057">Table 1</A>. Windows Sockets database functions convert the human-readable host and client names into a computer-usable format; see <a href="#0121_0058">Table 2</A>. Windows-specific functions are extensions to support the event-driven architecture of Windows; see <a href="#0121_0059">Table 3</A>. (For more information, see <I>Network Interrupts</I>, by Ralf Brown and Jim Kyle, Addison-Wesley, 1994.) <P>
<h3><a name="0121_0054">Control Details<a name="0121_0054"></h3><P>
As previously mentioned, our LAN-based control project called for extensive network communication. To help with code reuse, I implemented the network routines as a VBX. To use the TCP protocol, one socket must be established for every client that the host will communicate with. If a host is connected to 100 clients using TCP, then the host will need to establish 100 sockets, as opposed to establishing one UDP socket on the host and communicating with all 100 clients. In light of this (and because a limited number of TCP sockets can be opened simultaneously for communication), I wrote a UDP-based VBX that is invisible at run time. This VBX establishes and terminates the socket, and asynchronously sends and receives data.<P>
In relation to the WinSock API, you first initialize the underlying WinSock DLL and confirm that the version of the DLL is compatible with the VBX's requirements; see <a href="#0121_005b">Example 1</A>. This is done in the VBINITCC routine, which is called each time an application loads the VBX. <P>
Next, the control's <I>Connected</I> property is set to <I>True</I>, and a socket is established in response. The <I>Connected</I> property can only be set at run time, and before it is set, no read/write activity can take place. <P>
You then call <I>WSAAsyncSelect </I>to set up an asynchronous event notifier that generates a user-defined message (WM_USER_ASYNC_SELECT) whenever data arrives or a request to send data is made; see <a href="#0121_005c">Example 2</A>.<P>
For the VBX, a request to send data is made by setting the control's <I>Send</I> property to True; this is possible only at run time. The control responds by placing a WM_USER_ASYNC_SELECT message in its own queue via <I>PostMessage</I>. Finally, <I>WSACleanup</I> is called to release all resources allocated by <I>WSAStartup</I>. There must be one call to <I>WSACleanup</I> for every call to <I>WSAStartup</I>. In the case of the VBX, <I>WSACleanup</I> is called during the VBTERMCC routine, which in turn is called each time an application unloads the VBX; see <a href="#0121_005d">Example 3</A>. The rest of the code is pretty straightforward C; see the file datagram.c in <a href="#0121_0061">Listing One</A>. The complete VBX (source and binary) is available electronically; see &quot;Availability,&quot; page 3. For more information on WinSock programming, see <I>Programming WinSock</I>, by Arthur Dumas (Sams, 1995).<P>
<h3><a name="0121_0055">VBX-to-OCX Porting <a name="0121_0055"></h3><P>
To be compatible with future versions of Visual Basic and other development environments, I ported the UDP VBX to an OLE Custom Control (OCX). The OLE Control Development Kit (CDK) made porting the UDP control a two-step process:<P>
<OL>
<LI>Use the OLE CDK to create a working skeleton. </LI>
<LI>Appropriately place the code that is specific to the UDP VBX in the newly formed OCX skeleton. </LI>
</OL>
One problem I encountered stemmed from the invisible-at-run-time option. If this is checked in the ControlWizard, the resulting control does not have a window at run time. This is problematic because the second parameter required to set up the asynchronous event notifier is the <I>hwnd</I> of the control window that will receive the user-defined event. To achieve the invisible-at-run-time effect, the control is hidden at run time with a call to <I>ShowWindow</I>; see <a href="#0121_005e">Example 4</A>.<P>
<h3><a name="0121_0056">Conclusion<a name="0121_0056"></h3><P>
To illustrate the use of the UDP control, I've written a simple chat program that's available electronically. As <a href="19950123.htm">Figure 1</A> illustrates, the program allows two users to communicate over a TCP/IP connection. To send a message, the user types a message in the Messages Out box and presses the Send button. Messages received will automatically appear in the Messages In box. The program is simple, thanks to the UDP control. <a href="#0121_005a">Table 4</A> is a list of the properties supported by the UDP control, while <a href="#0121_005f">Example 5</A> is a typical UDP event. These, as well as the sample code for the chat program, can be used as a reference for programming with the UDP control. <P>
<B><a href="19950124.htm">Figure 1</A>: </B>Sample chat program.<P>
<a name="0121_0057"><B>Table 1:</B> Windows Sockets functions.<a name="0121_0057"><P>
<pre>
Function     Description

<I>accept</I>      Accept an incoming connection.
<I>bind</I>        Bind a name to a socket.
<I>closesocket</I> Close a socket.
<I>connect</I>     Initiate a connection.
<I>getsockname</I> Get the name bound to a socket.
<I>getsockopt</I>  Get the settings for a socket.
<I>htonl</I>       Convert <I>u_long</I> to network byte-order.
<I>htons</I>       Convert <I>u_short</I> to network byte-order.
<I>inet_addr</I>   Convert dotted-decimal IP address into 32-bit number.
<I>inet_ntoa</I>   Convert 32-bit number into dotted decimal IP address.
<I>ioctlsocket</I> I/O control of a socket.
<I>listen</I>      Listen for connections to this socket.
<I>ntohl</I>       Convert <I>u_long</I> to host byte-order.
<I>ntohs</I>       Convert <I>u_short</I> to host byte-order.
<I>recv</I>        Receive data on a connected socket.
<I>recvfrom</I>    Receive data on a socket, along with IP address
                     and port number.
<I>select</I>      Synchronous I/O multiplexing.
<I>send</I>        Send data over a connected socket.
<I>sendto</I>      Send data to a specific socket.
<I>setsockopt</I>  Set socket options.
<I>shutdown</I>    Shut down.
<I>socket</I>      Create an endpoint for communication.
</pre>
<a name="0121_0058"><B>Table 2:</B> Windows Sockets database functions.<a name="0121_0058">
<pre>
Function           Description

<I>gethostbyaddr</I>     Return host name, given IP address.
<I>gethostbyname</I>     Return IP address, given host name.
<I>gethostname</I>       Return host name.
<I>getprotobyname</I>    Return protocol name and number, given a protocol name.
<I>getprotobynumber</I>  Return protocol name and number, given a protocol number.
<I>getservbyname</I>     Return service name and port, given name and protocol.
<I>getservbyport</I>     Return service name and port, given port and protocol.
</pre>
<a name="0121_0059"><B>Table 3:</B> Windows Sockets Windows-specific functions.<a name="0121_0059">
<pre>
Function                 Description

<I>WSAAsyncGetHostByAddr</I>   Asynchronous version of <I>gethostbyaddr</I>.
<I>WSAAsyncGetHostByName</I>   Asynchronous version of <I>gethostbyname</I>.
<I>WSAAsyncGetProtoByName</I>  Asynchronous version of <I>getprotobyname</I>.
<I>WSAAsyncGetProtoByNumber</I>Asynchronous version of <I>getprotobynumber</I>.
<I>WSAAsyncGetServByName</I>   Asynchronous version of <I>getservbyname</I>.
<I>WSAAsyncGetServByPort</I>   Asynchronous version of <I>getservbyport</I>.
<I>WSAAsyncSelect</I>          Asynchronous version of <I>select</I>.
<I>WSACancelAsyncRequest</I>   Cancel outstanding <I>WSAAsyncGet</I> call.
<I>WSACancelBlockingCall</I>   Cancel outstanding <I>blocking</I> call.
<I>WSACleanup</I>              Release resources allocated by <I>WSAStartup</I>.
<I>WSAGetLastError</I>         Return details of last API error.
<I>WSAIsBlocking</I>           Determine if there is an outstanding blocking call.
<I>WSASetBlockingHook</I>      &quot;Hook&quot; underlying blocking mechanism.
<I>WSASetLastError</I>         Set error code to be returned by <I>WSAGetLastError</I>.
<I>WSAStartup</I>              Initialize underlying DLL.
<I>WSAUnhookBlockingHook</I>   Restore original blocking mechanism.
</pre>
<a name="0121_005a"><B>Table 4:</B> UDP control properties and usage chart.<a name="0121_005a">
<pre>
Property        Description

<I>Connected</I>      Establishes control's send/receive services;
                        undefinable at design time.
<I>Disconnected</I>   Terminates control's send/receive services;
                        undefinable at design time.
<I>ErrorCode</I>      Displays code representing error status of last UDP operation.
<I>MaxBufferSize</I>  Size in bytes of the largest packet allowed; read-only.
<I>MyAddress</I>      TCP/IP address (in dotted decimal notation) of the
                        hosting computer; read-only.
<I>MyPort</I>         Port number that the control will respond to.
<I>Send</I>           Toggled to True to send data; undefinable at design time.
<I>ToAddress</I>      Destination TCP/IP address (in dotted decimal notation)
                        identifying the computer that data will be sent to.
<I>ToData</I>         Data to be sent.
<I>ToPort</I>         Destination port identifying the application that data
                        will be sent to.
                           </pre>
<a name="0121_005b"><B>Example 1:</B> Confirming DLL version.<a name="0121_005b">       
<pre>
//initialize underlying WinSock DLL
if (WSAStartup(VersionRequested,&amp;wsaData)!=0) return FALSE;
             //make sure that the VBX supports this version of WinSock
if ((LOBYTE(wsaData.wVersion)!=LOBYTE(VersionRequested))||
             (HIBYTE(wsaData.wVersion)!=HIBYTE(VersionRequested)))
    {
      WSACleanup();
      return FALSE;
    }
</pre>
<a name="0121_005c"><B>Example 2:</B> Setting up an asynchronous event notifier.<a name="0121_005c">
<pre>
if (WSAAsyncSelect(DATAGRAMDEREF(hctl)-&gt;mappsocket, hwnd,
             WM_USER_ASYNC_SELECT, FD_READ|FD_WRITE)==SOCKET_ERROR)
DATAGRAMDEREF(hctl)-&gt;mErrorCode=WSAGetLastError();
</pre>
<a name="0121_005d"><B>Example 3:</B> Releasing resources.<a name="0121_005d">
<pre>
void FAR PASCAL _export VBTERMCC(void)
{               
   //terminate the usage of the WinSock DLL
   WSACleanup();
}//VBTERMCC
</pre>
<a name="0121_005e"><B>Example 4:</B> Hiding control at run time.<a name="0121_005e">
<pre>
void CUdpCtrl::OnDraw(CDC* pdc, const CRect&amp; rcBounds, const
Rect&amp; rcInvalid)
{
   CBitmap         bitmap;
   BITMAP          bmp;
   CPictureHolder  picHolder;
   CRect           rcSrcBounds;
   if (AmbientUserMode()==MODE_DESIGN)     
   {
       //load bitmap
bitmap.LoadBitmap(IDB_UDP); bitmap.GetObject(sizeof(BITMAP),&amp;bmp);
   rcSrcBounds.right=bmp.bmWidth;
   rcSrcBounds.bottom=bmp.bmHeight;
//create picture and render picHolder.CreateFromBitmap((HBITMAP)
//   bitmap.m_hObject,NULL,FALSE); picHolder.Render(pdc,rcBounds,rcSrcBounds);
   }
   else ShowWindow(SW_HIDE);
}
</pre>
<a name="0121_005f"><B>Example 5:</B> Definition of UDP control DataIn event.<a name="0121_005f">
<pre>
Sub UDP1_DataIn(FromAddress As String,
           FromPort As Integer, FromData As String)</pre><P>
<P>
<h4><a name="0121_0060"><a name="0121_0061">Listing One<a name="0121_0061"></h4><pre>
#include &quot;datagram.h&quot;
#include &lt;math.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;limits.h&gt;
#define ERR_None                0L
#define ERR_MethodNotSupported  421
#define ERR_ReadOnlyProperty    20000   //should be 383 but I created 
                                        //my own text for the message
#define ERR_NOTCONNECTED        20001
#define HOST_NAME_LEN           50
#define WM_USER_ASYNC_SELECT    (WM_USER+201)
#define MAKEWORD(a, b)     ((WORD)(((BYTE)(a)) | ((WORD)((BYTE)(b))) &lt;&lt; 8))
HANDLE                  hmodDLL;
WSADATA                 wsaData;
BOOL                    initialized=FALSE;
WORD                    VersionRequested=MAKEWORD(1,1); 
                                               //compatible with WinSock 1.1
unsigned int            MaxUDPBufferSize;
char                    hostAddress[16];
int FAR PASCAL WEP(int);
int FAR PASCAL LibMain(hModule, wDataSeg, cbHeapSize, lpszCmdLine)
HANDLE  hModule;
WORD    wDataSeg;
WORD    cbHeapSize;
LPSTR   lpszCmdLine;
{
    hmodDLL = hModule;
    return 1;
}//LibMain
BOOL FAR PASCAL _export VBINITCC(USHORT usVersion,BOOL fRuntime)
{
    // this function is automatically called whenever an instance of the 
    // control loaded into memory
    char        hostName[HOST_NAME_LEN];
    PHOSTENT    phostent;
    IN_ADDR     in;
    //Run-Time-Only
    //uncomment the following lines to make a run-time only control
/*
    if (!fRuntime)
        return FALSE;
*/
    if (WSAStartup(VersionRequested,&amp;wsaData)!=0) return FALSE; 
    //make sure that an appropriate version of WinSock is supported
    if ((LOBYTE(wsaData.wVersion)!=LOBYTE(VersionRequested))||
        (HIBYTE(wsaData.wVersion)!=HIBYTE(VersionRequested)))
    {
        WSACleanup();
        return FALSE;
    }
    if (!initialized)
    {
        //only need to get the host name one time
        gethostname(hostName,HOST_NAME_LEN);
        phostent=gethostbyname(hostName);
        memcpy(&amp;in,phostent-&gt;h_addr,4);
        memcpy(hostAddress,inet_ntoa(in),16);
        //only need to get the max buffer size one time
        MaxUDPBufferSize=(unsigned int)wsaData.iMaxUdpDg;
        //the follwing is done because the calls to recv and sendto 
        //take an integer as their second parameter, not an unsigned int
        if (MaxUDPBufferSize&gt;INT_MAX)
            MaxUDPBufferSize=INT_MAX;
        initialized=TRUE;
    }
    // Register control(s)
    return VBRegisterModel(hmodDLL, &amp;modelDATAGRAM);
}//VBINITCC
int FAR PASCAL WEP(int nShutdownFlag)
{
    return 1;
}//End WEP
void FAR PASCAL _export VBTERMCC(void)
{          
    // this function is automatically called whenever an instance of the 
    // control is unloaded from memory
    WSACleanup();
    return;
}//VBTERMCC
LONG FAR PASCAL _export DataGramCtlProc(HCTL hctl,HWND hwnd,USHORT msg,
    USHORT wp,LONG lp)
{
    HSZ             tempVBString;      
    LPSTR           lpstr=NULL;
    LPSTR           destAddr=NULL;
    char            fromAddr[16];
    char            *tempIn;
    SOCKADDR_IN     addr;
    int             addrLen=sizeof(addr);
    int             fromPort;
    unsigned int    nBytesSent,nBytesRecv;
    unsigned int    stringLen;
    EVENT_PARAMS    params;
    IN_ADDR         inFrom;
    switch (msg)
    {
    case WM_NCCREATE:          
        //default the properties
        DATAGRAMDEREF(hctl)-&gt;mToPort=0;
        tempVBString=VBCreateHsz((_segment)hctl,(LPSTR)hostAddress);
        DATAGRAMDEREF(hctl)-&gt;mMyAddress=tempVBString;
        DATAGRAMDEREF(hctl)-&gt;mMyPort=0;
        DATAGRAMDEREF(hctl)-&gt;mMaxBufferSize=(long int)MaxUDPBufferSize;
        DATAGRAMDEREF(hctl)-&gt;mErrorCode=0;                    
        DATAGRAMDEREF(hctl)-&gt;mSend=FALSE;
        DATAGRAMDEREF(hctl)-&gt;mConnected=FALSE;
        DATAGRAMDEREF(hctl)-&gt;mDisconnected=TRUE;
        DATAGRAMDEREF(hctl)-&gt;mappsocket=INVALID_SOCKET;
        break;
    case WM_NCDESTROY:
        //free string memory allocated with VBCreateHsz
        if (DATAGRAMDEREF(hctl)-&gt;mMyAddress)
        {
            VBDestroyHsz(DATAGRAMDEREF(hctl)-&gt;mMyAddress);
            DATAGRAMDEREF(hctl)-&gt;mMyAddress=NULL;
        }                              
        //close any opened socket
        if (DATAGRAMDEREF(hctl)-&gt;mappsocket!=INVALID_SOCKET)
        {
            if (closesocket(DATAGRAMDEREF(hctl)-&gt;mappsocket)==SOCKET_ERROR)
                DATAGRAMDEREF(hctl)-&gt;mErrorCode=WSAGetLastError();
            DATAGRAMDEREF(hctl)-&gt;mappsocket=INVALID_SOCKET;
        }   
        break;        
    case VBM_METHOD:
        //there are no methods supported
        return VBSetErrorMessage(ERR_MethodNotSupported,
         &quot;Method not applicable for this object.&quot;);
    case WM_USER_ASYNC_SELECT:
        if (WSAGETSELECTERROR(lp)!=0)
            return ERR_None;
        switch(WSAGETSELECTEVENT(lp))
        {
            case FD_READ:
                if (!DATAGRAMDEREF(hctl)-&gt;mSend)
                {
                    tempIn=(char *)calloc(MaxUDPBufferSize,sizeof(char));
                    //read the data
                    nBytesRecv=recvfrom(DATAGRAMDEREF(hctl)-&gt;mappsocket,
                        tempIn,MaxUDPBufferSize,0,(LPSOCKADDR)&amp;addr,&amp;addrLen);
                    if (nBytesRecv==SOCKET_ERROR)
                        DATAGRAMDEREF(hctl)-&gt;mErrorCode=WSAGetLastError();
                    else
                    {
                        //get the from address
                        memcpy(&amp;inFrom,&amp;addr.sin_addr.s_addr,4);
                        memcpy(fromAddr,inet_ntoa(inFrom),16);
                        //get the from port
                        fromPort=ntohs(addr.sin_port);
                        //set the event parameters
                        params.FromPort=&amp;fromPort;
                        params.FromAddr = VBCreateHlstr(fromAddr, 
                                                           lstrlen(fromAddr));
                        params.FromData = VBCreateHlstr(tempIn, 
                                                            lstrlen(tempIn));
                        //fire the event
                        VBFireEvent(hctl,IEVENT_DATAGRAM_DATAIN,&amp;params);
                        //free string memory allocated with VBCreateHlstr
                        VBDestroyHlstr(params.FromData);
                        VBDestroyHlstr(params.FromAddr);
                    }            
                    if (tempIn)
                        free(tempIn);
                }
                break;
            case FD_WRITE:
                //has there been a notification to send data
                if (DATAGRAMDEREF(hctl)-&gt;mSend)
                {
                    //get the destination port
                    addr.sin_family=AF_INET;
                    addr.sin_port=htons(DATAGRAMDEREF(hctl)-&gt;mToPort);
                    //get the destination address
                    destAddr=VBLockHsz(DATAGRAMDEREF(hctl)-&gt;mToAddress);
                    addr.sin_addr.s_addr=inet_addr(destAddr);
                    VBUnlockHsz(DATAGRAMDEREF(hctl)-&gt;mToAddress);
                    if (DATAGRAMDEREF(hctl)-&gt;mToData)
                    {                                     
                        lpstr=VBLockHsz(DATAGRAMDEREF(hctl)-&gt;mToData);
                        stringLen=lstrlen(lpstr);
                        //send the data
                        nBytesSent=sendto(DATAGRAMDEREF(hctl)-&gt;mappsocket,
                            lpstr,stringLen,0,(LPSOCKADDR)&amp;addr,sizeof(addr));
                        if (nBytesSent==SOCKET_ERROR)
                            DATAGRAMDEREF(hctl)-&gt;mErrorCode=WSAGetLastError();
                        //unlock it 
                        VBUnlockHsz(DATAGRAMDEREF(hctl)-&gt;mToData);
                    }   
                    //reset the send flag
                    DATAGRAMDEREF(hctl)-&gt;mSend=FALSE;
                }
                break;
            default:
                break;
        }
        return ERR_None;
    case VBM_SETPROPERTY:
        //called whenever a property is set
        switch(wp)
        {
        case IPROP_DATAGRAM_TOADDRESS:
            return ERR_None;
        case IPROP_DATAGRAM_TOPORT:
            return ERR_None;
        case IPROP_DATAGRAM_TODATA:
            return ERR_None;
        case IPROP_DATAGRAM_MYADDRESS:
            //read-only
            //clear it out
            if (DATAGRAMDEREF(hctl)-&gt;mMyAddress)
                VBDestroyHsz(DATAGRAMDEREF(hctl)-&gt;mMyAddress);
            //then set it to what the default is
            tempVBString=VBCreateHsz((_segment)hctl,(LPSTR)hostAddress);
            DATAGRAMDEREF(hctl)-&gt;mMyAddress=tempVBString;
            return VBSetErrorMessage(ERR_ReadOnlyProperty,
             &quot;Property is read-only.&quot;);
        case IPROP_DATAGRAM_MYPORT:
            return ERR_None;
        case IPROP_DATAGRAM_MAXBUFFERSIZE:
            //read-only
            DATAGRAMDEREF(hctl)-&gt;mMaxBufferSize=(long int)MaxUDPBufferSize;
            return VBSetErrorMessage(ERR_ReadOnlyProperty,
                &quot;Property is read-only.&quot;);
        case IPROP_DATAGRAM_ERRORCODE:
            return ERR_None;
        case IPROP_DATAGRAM_SEND:
            if (VBGetMode()==MODE_DESIGN)      
                //cannot set this property at design-time
                DATAGRAMDEREF(hctl)-&gt;mSend=FALSE;
            else
                //place a FD_WRITE message in the application message que
                PostMessage(hwnd,WM_USER_ASYNC_SELECT,
                              DATAGRAMDEREF(hctl)-&gt;mappsocket, 
                              WSAMAKESELECTREPLY(FD_WRITE,0));
            return ERR_None;
        case IPROP_DATAGRAM_CONNECTED:
            if (VBGetMode()==MODE_DESIGN)      
                //cannot set this property as design-time
                DATAGRAMDEREF(hctl)-&gt;mConnected=FALSE;
            else
            {
                if (DATAGRAMDEREF(hctl)-&gt;mConnected)
                {
                  addr.sin_family=AF_INET;
                  addr.sin_port=htons(DATAGRAMDEREF(hctl)-&gt;mMyPort);
                  addr.sin_addr.s_addr=htonl(INADDR_ANY);             
                  DATAGRAMDEREF(hctl)-&gt;mappsocket=socket(AF_INET,SOCK_DGRAM,0);
                  if (DATAGRAMDEREF(hctl)-&gt;mappsocket==INVALID_SOCKET)
                      DATAGRAMDEREF(hctl)-&gt;mErrorCode=WSAGetLastError();
                    else
                    {
                        if (bind(DATAGRAMDEREF(hctl)-&gt;mappsocket,
                            (LPSOCKADDR)&amp;addr,sizeof(addr))==SOCKET_ERROR)
                            DATAGRAMDEREF(hctl)-&gt;mErrorCode=WSAGetLastError();
                        else
                        {
                           //find out the port number that may have been
                           //automatically assigned if myPort was 0
                           getsockname(DATAGRAMDEREF(hctl)-&gt;mappsocket,
                                (LPSOCKADDR)&amp;addr,&amp;addrLen);
                           DATAGRAMDEREF(hctl)-&gt;mMyPort=ntohs(addr.sin_port);
                           //setup the asynchronous read/write handler
                           if (WSAAsyncSelect(DATAGRAMDEREF(hctl)-&gt;mappsocket,
                             hwnd,WM_USER_ASYNC_SELECT,
                             FD_READ|FD_WRITE)==SOCKET_ERROR)
                             DATAGRAMDEREF(hctl)-&gt;mErrorCode=WSAGetLastError();
                        }
                        //set disconnected to false
                        DATAGRAMDEREF(hctl)-&gt;mDisconnected=FALSE;
                    }
                }
                else
                    //cannot toggle to false
                    DATAGRAMDEREF(hctl)-&gt;mConnected=TRUE;
            }
            return ERR_None;
        case IPROP_DATAGRAM_DISCONNECTED:
            if (VBGetMode()==MODE_DESIGN)      
                //cannot set this property as design-time
                DATAGRAMDEREF(hctl)-&gt;mDisconnected=TRUE;
            else
            {
                if (DATAGRAMDEREF(hctl)-&gt;mDisconnected)
                {
                    //close any opened socket
                    if (DATAGRAMDEREF(hctl)-&gt;mappsocket!=INVALID_SOCKET)
                    {
                        if (closesocket(DATAGRAMDEREF(hctl)-&gt;mappsocket)==
                                                                  SOCKET_ERROR)
                            DATAGRAMDEREF(hctl)-&gt;mErrorCode=WSAGetLastError();
                        DATAGRAMDEREF(hctl)-&gt;mappsocket=INVALID_SOCKET;
                    }   
                    //set connected to false
                    DATAGRAMDEREF(hctl)-&gt;mConnected=FALSE;
                }           
                else
                    //cannot toggle to false
                    DATAGRAMDEREF(hctl)-&gt;mDisconnected=TRUE;
            }
            return ERR_None;
        default:
            break;       
        }
        break;
    }
    return VBDefControlProc(hctl, hwnd, msg, wp, lp);
}//DataGramCtlProc
</pre>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
