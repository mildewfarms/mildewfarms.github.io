<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>SEP95: Visual Basic by Remote Control</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Visual Basic by Remote Control<a name="0112_004a"><a name="0112_0048"><a name="0112_0000"></h1><P>
<h2>Letting custom controls access foreign control properties</h2><P>
<h3>Robert Sardis</h3><P>
<p><i><a name="0112_0049"><a name="0112_0000">Bob is an independent software developer who has implemented many Windows applications. He can be reached at 30 E. Huron, #1310, Chicago, IL 60611.</i></p><hr><P>
Visual Basic continues to establish itself as a popular development tool for Microsoft Windows, and, predictably, developers continue to push the envelope of what Visual Basic and its associated Control Development Kit (CDK) can do.<P>
Recently, I needed to create a Visual Basic custom control that would mimic the standard Data control, but for a non-SQL, non-ODBC database. The control would have to communicate with the database via an API set, and communicate with other Visual Basic controls in order to build queries and display query results. I wanted all communication with the other controls to be handled automatically at the C level, so that the people adding my control to their Visual Basic forms would not have to do any Basic programming.<P>
Communication with the database API was straightforward, but communication with the other controls turned out to be unexpectedly challenging. I finally got my control to work the way I wanted, but only after learning a lot about some unusual and incompletely documented Visual Basic features. I ended up writing a collection of functions to simplify access to control properties; I used these functions to write a diagnostic VBX that acts like a Spy program for Visual Basic controls, displaying a list of properties and their data types, flags, and values.<P>
In this article, I'll describe how to access control properties at run time, and present my collection of access functions. I'll also describe my diagnostic control, CTRLINFO.VBX, which is available electronically; see &quot;Availability,&quot; page 3.<P>
<h3><a name="0112_004b">Foreign-Control Properties<a name="0112_004b"></h3><P>
To make my custom control perform queries by example, I wanted it to poll all <I>TextBox</I> fields on the form, using their <I>DataField</I> property for column name and their <I>Text</I> property for column value. After the query result returned, I wanted my control to replace the <I>Text</I> property with the value for that column in the query result. This process required calling <I>VBGetControlProperty()</I> to get the <I>Text</I> and <I>DataField</I> properties to build the query, and then calling <I>VBSetControlProperty()</I> for the <I>Text</I> property to display the result.<P>
The problem is that <I>VBGetControlProperty()</I> and <I>VBSetControlProperty()</I> require that you know the index of the property being accessed. Property indexes are created as <I>#define</I>s in a control's header file, and generally are not documented or otherwise made available to the outside world. (In particular, the index for a standard property is not the corresponding &quot;IPROP_STD_&quot; constant defined in VBAPI.H.) And even if you do happen to know a property index for a foreign control, the control's designers are free to change the index from one version of the control to the next.<P>
The only reliable way to determine a property index for a foreign control is through direct access to the control's property array.<P>
<h3><a name="0112_004c">The Property Array<a name="0112_004c"></h3><P>
At design time, you define a control's properties by creating an array of 2-byte integers. The array entry for a custom property will be a &quot;true&quot; (near) address of a PROPINFO structure; the entry for a standard property will be a &quot;fake&quot; address defined in VBAPI.H. The array is part of the control's MODEL structure, which is passed to <I>VBRegisterModel()</I> when the control is created. <a href="#0112_0051">Example 1</A> is a code fragment from a control's header file defining an array containing one standard and one custom property.<P>
A property's index, as passed to <I>VBGetControlProperty()</I>, is actually its index in this property array. To get to the property array at run time, you first call <I>VBGetModel()</I> to obtain the address of the control's MODEL structure. The property array is one of the fields of this structure. <a href="#0112_0052">Example 2</A> shows how to walk through the array.<P>
<a href="#0112_0052">Example 2</A> also reveals some subtleties in dealing with near and far pointers. All pointers obtained from the MODEL structure are near pointers, but to data residing in the MODEL structure's segment. An application needs to turn these near pointers into far pointers by using the <I>MAKELONG()</I> macro.<P>
<h3><a name="0112_004d">Getting Property Information<a name="0112_004d"></h3><P>
The last section showed how to obtain entries in a control's property array. The entry for a custom property is the address of a PROPINFO structure, which contains all the information you need about the property, including its name, data type, and flags. However, the entry for a standard property is just a constant defined in VBAPI.H, which your application has to interpret somehow. We need a simple method for obtaining a true PROPINFO structure for any property, either custom or standard; this would allow an application to deal uniformly with all properties.<P>
<a href="#0112_0054">Listing One</A> contains my solution to this problem: I provide a lookup array containing the &quot;PPROPINFO_STD_&quot; constant and a corresponding PROPINFO structure for each of the 42 standard properties defined in VBAPI.H; the PROPINFO structure contains the property's name and data type and has the rest of its fields initialized to 0.<P>
The data types of the standard properties are not specified in the Visual Basic documentation. Some are listed in a technical fax available from Microsoft; I had to discover the rest by trial and error. Some of the data types are surprising: For example, the x- and y-dimensional properties, which are always integers, store their values as floats rather than shorts or longs.<P>
Three data types in my array are left as 0, for &quot;unknown.&quot; The <I>None</I> property really doesn't have a data type, because it only acts as a place holder for a property that was dropped from the array since a prior version of the control. The <I>Name</I> and <I>DataSource</I> properties, which really ought to have useful values, have data types of zero because their values as returned by <I>VBGetControlProperty()</I> don't seem to be meaningful. (A call to Microsoft's technical-support line confirmed that these property values are not available to a VBX at run time.)<P>
<a href="#0112_0054">Listing One</A> contains three functions to access property information. <I>GetPropertyArray()</I> is called once and returns the address of the control's property array. <I>GetProperty()</I> is called for each desired property, and always returns a far pointer to a PROPINFO structure. In the case of a custom property, this pointer is the address of the &quot;real&quot; structure; in the case of a standard property, the pointer is the address of a structure in my lookup array. <I>IsStandardProperty()</I> can be called to determine whether a property is standard or custom.<P>
<h3><a name="0112_004e">Finding a Property by Name<a name="0112_004e"></h3><P>
My original interest in control properties was to get or set their values using <I>VBGetControlProperty()</I> and <I>VBSetControlProperty()</I>. As discussed previously, these functions require a property's index, which is generally unknown for a foreign control. What is known, however, is the property's name. So as a practical application of <a href="#0112_0054">Listing One</A>, <a href="#0112_0056">Listing Two</A> contains a function called <I>GetPropertyIndex()</I>, which returns the index of a named property.<P>
<I>GetPropertyIndex()</I> makes one call to <I>GetPropertyArray()</I> and then uses <I>GetProperty()</I> to examine the name of every property in the array. It returns either the index of the property with the desired name, or -1 if no such property is found.<P>
Note that the near/far pointer problem is still here, but that the segments have changed. The property name is a near pointer to a string living in the same segment as the (far) property address returned by <I>GetProperty()</I>. MAKELONG() is used again, to make a far pointer with the correct segment.<P>
<h3><a name="0112_004f">The CTRLINFO Diagnostic Control<a name="0112_004f"></h3><P>
Getting and setting foreign-control properties really isn't practical without a diagnostic tool for determining the properties available, their data types, the values they take, and how and when these values are set. As a more extensive application of the functions in <a href="#0112_0054">Listing One</A>, I wrote a diagnostic custom control called &quot;CTRLINFO.VBX.&quot; <P>
This control is added to a Visual Basic form at design time. At run time, it creates a dialog box displaying model information and a list of property names for any control under the cursor; double-clicking on one of the listed property names brings up a second dialog box showing in-depth information about the property: whether it is custom or standard, its data type (and flags, for a custom property), and its value. The display is similar to that of Microsoft's Spy program. The code for this VBX is available electronically (see &quot;Availability,&quot; page 3).<P>
<h3><a name="0112_0050">Conclusion<a name="0112_0050"></h3><P>
Accessing foreign-control properties is an underused but extremely effective technique. The utilities in Listings <a href="#0112_0054">One</A> and <a href="#0112_0056">Two</A> and the CTRLINFO.VBX diagnostic tool make this technique simple and practical for anyone writing a custom control. The results can be rewarding. With a lot less work than you think, you can give your existing API-based resources a healthy new life as Visual Basic controls.<P>
<a name="0112_0051"><B>Example 1:</B> Defining a property array containing one standard and one custom property.<a name="0112_0051">
<pre>
// PROPINFO structure for custom property
PROPINFO Property_Session =
{
        &quot;Session&quot;,
        DT_HSZ | PF_fGetData | PF_fSetData,
        OFFSETIN(MYCONTROL, Session), 0, 0, NULL, 0
};
// property indices
#define IPROP_MYCONTROL_NAME      0
#define IPROP_MYCONTROL_SESSION   1
// property array
PPROPINFO MyControl_Properties[] =
{
         PPROPINFO_STD_NAME,     // fake address
         &amp;Property_Session,      // real address
         NULL
};</pre>
<a name="0112_0052"><B>Example 2:</B> Processing a control's property array.<a name="0112_0052">
<pre>
void ProcessPropertyArray (HCTL hctl)
{
        MODEL FAR     *lpModel;
        PPROPINFO FAR *lppPropInfo; // far ptr to array of near pointers
        LPPROPINFO     lpPropInfo;
        lpModel = VBGetControlModel(hctl);
        lppPropInfo = (PPROPINFO FAR*) MAKELONG(
                              lpModel-&gt;npproplist, (_segment)lpModel);
        for (; *lppPropInfo; lppPropInfo++)
        { 
               if (*lppPropInfo &gt;= PPROPINFO_STD_LAST)
               {
                     // process *lppPropInfo as a fake address
                     // for a standard property defined in VBAPI.H
                }
                else
                {
                     lpPropInfo = (LPPROPINFO) MAKELONG(
                                       *lppPropInfo,                                                       (_segment)lpModel);
                     // process lpPropInfo as a real address of a
                     // PROPINFO structure
                }
        }
}</pre><P>
<P>
<h4><a name="0112_0053"><a name="0112_0054">Listing One<a name="0112_0054"></h4><pre>
/************************************************************************
 *  CtrlProp.cpp -- Utilities for getting information about Visual Basic
 *  controls' properties                             by Bob Sardis, 1995
 ************************************************************************/
#include &lt;windows.h&gt;
#include &lt;vbapi.h&gt;
#include &quot;CtrlProp.h&quot;
// StandardPropery -- holds information for a 'PPROPINFO_STD_' property
typedef struct
{
        PPROPINFO FakeAddress;
        PROPINFO  PropInfo;
} StandardProperty;
StandardProperty StandardProperties[] =
{
        PPROPINFO_STD_NAME,              {&quot;Name&quot;,          0},
        PPROPINFO_STD_INDEX,             {&quot;Index&quot;,         DT_SHORT},
        PPROPINFO_STD_HWND,              {&quot;Hwnd&quot;,          DT_SHORT},
        PPROPINFO_STD_BACKCOLOR,         {&quot;BackColor&quot;,     DT_COLOR},
        PPROPINFO_STD_FORECOLOR,         {&quot;ForeColor&quot;,     DT_COLOR},
        PPROPINFO_STD_LEFT,              {&quot;Left&quot;,          DT_XPOS},
        PPROPINFO_STD_TOP,               {&quot;Top&quot;,           DT_YPOS},
        PPROPINFO_STD_WIDTH,             {&quot;Width&quot;,         DT_XSIZE},
        PPROPINFO_STD_HEIGHT,            {&quot;Height&quot;,        DT_YSIZE},
        PPROPINFO_STD_ENABLED,           {&quot;Enabled&quot;,       DT_BOOL},
        PPROPINFO_STD_VISIBLE,           {&quot;Visible&quot;,       DT_BOOL},
        PPROPINFO_STD_MOUSEPOINTER,      {&quot;MousePointer&quot;,  DT_ENUM},
        PPROPINFO_STD_CAPTION,           {&quot;Caption&quot;,       DT_HSZ},
        PPROPINFO_STD_FONTNAME,          {&quot;FontName&quot;,      DT_HSZ},
        PPROPINFO_STD_FONTBOLD,          {&quot;FontBold&quot;,      DT_BOOL},
        PPROPINFO_STD_FONTITALIC,        {&quot;FontItalic&quot;,    DT_BOOL},
        PPROPINFO_STD_FONTSTRIKE,        {&quot;FontStrikeThru&quot;,DT_BOOL},
        PPROPINFO_STD_FONTUNDER,         {&quot;FontUnderline&quot;, DT_BOOL},
        PPROPINFO_STD_FONTSIZE,          {&quot;FontSize&quot;,      DT_REAL},
        PPROPINFO_STD_TABINDEX,          {&quot;TabIndex&quot;,      DT_SHORT},
        PPROPINFO_STD_PARENT,            {&quot;Parent&quot;,        DT_LONG},
        PPROPINFO_STD_DRAGMODE,          {&quot;DragMode&quot;,      DT_ENUM},
        PPROPINFO_STD_DRAGICON,          {&quot;DragIcon&quot;,      DT_SHORT},
        PPROPINFO_STD_BORDERSTYLEOFF,    {&quot;BorderStyleOff&quot;,DT_ENUM},
        PPROPINFO_STD_TABSTOP,           {&quot;TabStop&quot;,       DT_BOOL},
        PPROPINFO_STD_TAG,               {&quot;Tag&quot;,           DT_HSZ},
        PPROPINFO_STD_TEXT,              {&quot;Text&quot;,          DT_HSZ},
        PPROPINFO_STD_BORDERSTYLEON,     {&quot;BorderStyleOn&quot;, DT_ENUM},
        PPROPINFO_STD_CLIPCONTROLS,      {&quot;ClipControls&quot;,  DT_BOOL},
        PPROPINFO_STD_NONE,              {&quot;None&quot;,          0},
        PPROPINFO_STD_HELPCONTEXTID,     {&quot;HelpContextID&quot;, DT_SHORT},
        PPROPINFO_STD_LINKMODE,          {&quot;LinkMode&quot;,      DT_ENUM},
        PPROPINFO_STD_LINKITEM,          {&quot;LinkItem&quot;,      DT_HSZ},
        PPROPINFO_STD_LINKTOPIC,         {&quot;LinkTopic&quot;,     DT_HSZ},
        PPROPINFO_STD_LINKTIMEOUT,       {&quot;LinkTimeout&quot;,   DT_SHORT},
        PPROPINFO_STD_LEFTNORUN,         {&quot;LeftNoRun&quot;,     DT_XPOS},
        PPROPINFO_STD_TOPNORUN,          {&quot;TopNoRun&quot;,      DT_YPOS},
        PPROPINFO_STD_ALIGN,             {&quot;Align&quot;,         DT_ENUM},
        PPROPINFO_STD_IMEMODE,           {&quot;ImeMode&quot;,       DT_BOOL},
        PPROPINFO_STD_DATASOURCE,        {&quot;DataSource&quot;,    0},
        PPROPINFO_STD_DATAFIELD,         {&quot;DataField&quot;,     DT_HSZ},
        PPROPINFO_STD_DATACHANGED,       {&quot;DataChanged&quot;,   DT_BOOL},
        NULL,                            {&quot;&quot;,              0},
};
PROPINFO UnknownStdProp =                {&quot;UNKNOWN_STD&quot;,       0};
/*****************************************************************
 *  Function:     GetPropertyArray()
 *  Description:  Gets property array for a Visual Basic control
 *  Parameters:   hctl -- handle to control
 *  Returns:      far pointer to property array
 *****************************************************************/
 PPROPINFO FAR * GetPropertyArray (HCTL hctl)
{
        PPROPINFO FAR *lppPropInfo = NULL;
        MODEL FAR *lpModel = VBGetControlModel(hctl);
        if (lpModel)
        {
             lppPropInfo = (PPROPINFO FAR*)
                    MAKELONG(lpModel-&gt;npproplist, (_segment)lpModel);
        }
        return lppPropInfo;
}
/*****************************************************************
 *  Function:     GetProperty()
 *  Description:  gets specified property of a Visual Basic control
 *  Parameters:   PropertyArray -- array returned by GetPropertyArray()
 *                index         -- index of control, from 0
 *  Returns:      far pointer to a PROPINFO structure;  for a standard
 *                property, this will be a pointer into StandardProperties[]
 *****************************************************************/
LPPROPINFO GetProperty (PPROPINFO FAR * PropertyArray, short index)
{
        PPROPINFO FAR *lppPropInfo = PropertyArray + index; // offset addr
        if (*lppPropInfo == NULL)
           return NULL;
        if (IsStandardProperty(*lppPropInfo))
        {
               // 'standard' property pointers are not real addresses;
               // need to search StandardProperties[] list
               StandardProperty *pStdProp;
               for ( pStdProp = StandardProperties; 
                     pStdProp-&gt;FakeAddress; 
                     pStdProp++)
               {
                    if (*lppPropInfo == pStdProp-&gt;FakeAddress)
                        return &amp;(pStdProp-&gt;PropInfo);
               }
               return &amp;UnknownStdProp; // standard property not found
        }
        else
        {
               return (LPPROPINFO) MAKELONG(
                                 *lppPropInfo, (_segment)PropertyArray);
        }
}
/*****************************************************************
 *  Function:     IsStandardProperty()
 *  Description:  determines whether a property is a standard property,
 *                as defined in VBAPI.H
 *  Parameters:   lpPropInfo -- pointer to PROPINFO structure
 *  Returns:      TRUE if property is standard, FALSE otherwise
 *****************************************************************/
BOOL IsStandardProperty (LPPROPINFO lpPropInfo)
{
        StandardProperty *pStdProp;
        NPPROPINFO pPropInfo = (NPPROPINFO)LOWORD(lpPropInfo); // near ptr
        
        if (pPropInfo &gt;= PPROPINFO_STD_LAST)
              return TRUE;    // pPropInfo is a 'fake' address in VBAPI.H
           
        for (pStdProp = StandardProperties; pStdProp-&gt;FakeAddress; pStdProp++)
        {
             if (pPropInfo == &amp;(pStdProp-&gt;PropInfo))
                return TRUE; //pPropInfo is contained in StandardProperties[]
        }   
        if (pPropInfo == &amp;UnknownStdProp)
             return TRUE;    // pPropInfo is an 'unknown' standard property
        return FALSE;        // property is not standard
}   
</pre>
<h4><a name="0112_0055"><a name="0112_0056">Listing Two<a name="0112_0056"></h4><pre>
/*****************************************************************
 *  Function:     GetPropertyIndex()
 *  Description:  Gets index of named Visual Basic control property
 *  Parameters:   hctl         -- handle to control
 *                lpszPropName -- property name
 *  Returns:      index of property; returns -1 if property not found
 *****************************************************************/
short GetPropertyIndex (HCTL hctl, LPSTR lpszPropName)
{
       PPROPINFO FAR * PropertyArray;
       LPPROPINFO lpPropInfo;
       short i;
       LPSTR lpsz;
       PropertyArray = GetPropertyArray(hctl);
       if (!PropertyArray)
              return -1;
       for (i = 0; ; i++)
       {
              lpPropInfo = GetProperty(PropertyArray, i);
              if (!lpPropInfo)
                     break;  // have reached end of PropertyArray[]
              lpsz = (LPSTR) MAKELONG(
                           lpPropInfo-&gt;npszName, (_segment)lpPropInfo);
              if (!lstrcmp(lpsz, lpszPropName))
                     return i;
       }
       return -1;
</pre>


<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
