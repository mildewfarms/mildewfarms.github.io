<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>SEP95: MIME and Internet Mail</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>MIME and Internet Mail<a name="0114_004c"><a name="0114_004a"><a name="0114_0000"></h1><P>
<h2>Making e-mail work</h2><P>
<h3>Tim Kientzle</h3><P>
<p><i><a name="0114_004b"><a name="0114_0000">Tim is the author of The Working Programmer's Guide To Serial Protocols (Coriolis Group, 1995) and can be contacted at kientzle@netcom.com.</i></p><hr><P>
While Internet mail is a wonderful tool, it currently has a major shortcoming. Because it was developed to handle 7-bit text messages, Internet mail is unsuitable for transferring binary data such as word-processor files, audio, graphics, and other useful data. In particular, the 8-bit character sets now in use in most of the world aren't supported by the standard mail transport protocol (SMTP).<P>
Clearly, the handling of Internet mail needs to change, but there are many obstacles. Any major change to the Internet mail transport would take years. During that interval, &quot;islands&quot; of enhanced mail capability would be unable to exchange mail over the sea of existing 7-bit mail transport.<P>
In lieu of an enhanced mail capability, savvy users have for years been encoding their binary data into a form compatible with existing 7-bit mail systems. The Multipurpose Internet Mail Extensions standard (MIME) formalizes and automates this process, augmenting existing mail programs to automatically encode and decode data with a minimum of user intervention. Since only the programs used to read and compose messages require modification, MIME provides enhanced mail facilities without rewiring the Internet.<P>
The basic definition of Internet mail is contained in RFC822, which states that a mail message consists of header lines followed by a message body. While RFC822 describes the syntax of header lines in considerable detail, it is less precise about the body: &quot;The body is simply a sequence of lines containing ASCII characters.&quot; MIME augments this by adding five new headers which, among other things, specify the precise format of the message body; see <a href="#0114_0052">Table 1</A>.<P>
<h3><a name="0114_004d">MIME Content Types<a name="0114_004d"></h3><P>
MIME specifies the format of the message body in three layers. The first is a broad type, which identifies the general kind of data. By itself, the type doesn't provide enough information for the reader to do anything useful, but it does help the reader select a default handling for certain classes of messages (for example, <I>text</I> formats might be simply listed to the screen, while unrecognized <I>image</I> formats would not).<P>
The second layer is the subtype. The type and subtype together specify the exact kind of data in the message; for example, <I>image/gif</I>. The third layer specifies how the data is encoded into 7-bit ASCII for transfer.<P>
The Content-Type header contains a type and subtype separated by a &quot;/&quot; character, followed by a list of <I>keyword=value</I> pairs. For example, the Content-Type <I>text/plain; charset=iso-8859-8</I> might be used for a plaintext file containing characters in the ISO Roman/Hebrew character set. If the display supported Hebrew characters, the mail reader could (after decoding) display the text as it was intended by the sender.<P>
As <a href="#0114_0053">Table 2</A> illustrates, there are currently seven defined types. The first four types in <a href="#0114_0053">Table 2</A> indicate a single data file in a single format; their subtypes are listed in <a href="#0114_0054">Table 3</A>. These basic content types are an improvement over text-only mail, allowing messages to contain graphics, sound, or other data types. They are also easy to support; mail readers only need to parse the Content-Type and Content-Transfer-Encoding headers, decode one of two simple data formats, and pass the result to a separate viewer program.<P>
<h3><a name="0114_004e">Complex Messages<a name="0114_004e"></h3><P>
The <I>message</I> and <I>multipart</I> types provide features that can reduce mail-delivery costs and allow single messages to combine different kinds of data.<P>
The <I>message</I> content type provides three important capabilities. <I>Message/rfc822</I>, for instance, allows an RFC822-compliant message (which may also be a MIME message) to be embedded within a MIME message. This provides improved support for returning or forwarding messages. The <I>message/external-body</I> type saves on transfer costs by specifying that the actual message body is contained elsewhere. Keywords define exactly how the message body can be retrieved (for example, via anonymous ftp or as a local file).  <a href="#0114_0056">Figure 1</A> gives some examples. The <I>message/partial</I> type allows a single large message to be split and sent as several smaller messages. This is important when dealing with mail systems that limit the size of messages. The <I>message/partial</I> has three keywords: <P>
<UL>
<li><I>id</I>, which specifies a unique identifier used to match different pieces of the same message.</li>
<li><I>number</I>, which specifies which part this is (parts are numbered starting with 1).</li>
<li><I>total</I>, which gives the total number of parts. </li>
</UL>
The <I>id</I> and <I>number</I> keywords are required on all parts; <I>total</I> is required only on the last part.<P>
The <I>multipart</I> content type allows a single message to contain several pieces, each in a different format. The most common multipart message is <I>multipart/mixed</I>, which indicates that the message consists of multiple pieces, each with its own separate Content-Type header. There are also <I>multipart/alternative</I>, in which the parts are alternative formats of the same information (such as a plaintext and a word-processor file with the same content); <I>multipart/parallel</I>, in which the parts are intended to be displayed simultaneously (such as an audio recording and a photograph of the speaker); and <I>multipart/digest</I>, which is the same as <I>multipart/mixed</I> except that the default content type for each part is <I>message/rfc822</I> rather than <I>text/plain</I>.<P>
All <I>message</I> and <I>multipart</I> types allow (indeed, often require) the embedded data to have its own headers. Technically, the embedded data is <I>not</I> an RFC822 message (for example, it may lack a From header), even though it has the same general format. For example, if a message has type <I>message/external-body</I>, the body contains a series of lines that look like RFC822 headers, including Content-Type, Content-Transfer-Encoding, and Content-ID (required for <I>message/external-body</I>). Like RFC822, a blank line indicates the end of the headers.<P>
Multipart messages must have some way to separate the different parts. The <I>boundary</I> keyword specifies a string that <I>does not occur anywhere else in the message</I>. The actual separators consist of the specified string preceded by &quot;-&quot;. The end of the multipart message is marked by the boundary string preceded and followed by &quot;-&quot;. <a href="#0114_0057">Figure 2</A> shows this mechanism in action. This displays a text message while retrieving and playing audio data from a local file. A minimal MIME-compliant mail reader would show the text part and inform the user of the type and location of the external-file data.<P>
<h3><a name="0114_004f">Encoding<a name="0114_004f"></h3><P>
Transparent handling of binary data is one of the primary goals of MIME. It does this by specifying the encoding in the Content-Transfer-Encoding header field. <a href="#0114_0055">Table 4</A> lists the five currently defined encodings. The first three indicate that the data is unencoded. The <I>8bit</I> and <I>binary</I> types are used primarily for parts contained in <I>message/external-body</I> and occasionally with mail systems that do support 8-bit messages.<P>
The <I>Quoted-Printable</I> encoding is intended for data that is primarily 7 bit, with occasional 8-bit values. For example, text messages in ISO character sets are often predominantly 7 bit. <I>Quoted-Printable </I>allows most 7-bit text characters to represent themselves. The remaining characters are encoded as three-character sequences consisting of &quot;=&quot; followed by a hexadecimal number. In particular, &quot;=&quot; is encoded as &quot;=3D&quot;.<P>
The advantage of the <I>Quoted-Printable </I>encoding is that it allows any part of the data that is in 7-bit US-ASCII to be read without decoding. However, for raw binary data, it can introduce excessive overhead. The preferred encoding for raw binary data is <I>Base64</I>, which encodes each three bytes of binary data as four characters. The 24-bit value is considered four 6-bit numbers, which are then encoded from the characters A--Z, a--z, 0--9, +, and /. Thus, &quot;the&quot; becomes &quot;dGhl&quot;. The result is padded with &quot;=&quot; to a multiple of four characters and broken into 72-character lines. <a href="#0114_0059">Listing One</A> presents a simple encoder/decoder program for this encoding method. This encoding is similar to the one used by the popular uuencode utility, but avoids using punctuation characters that are lost or altered by certain mail gateways.<P>
In some cases, no encoding is necessary. In particular, the <I>multipart</I> type always uses <I>7bit</I>, as does <I>message/partial</I> and <I>message/external-body</I>. Under certain circumstances, other <I>message</I> types can use <I>binary</I> or <I>8bit</I>. The remaining content types can use any available encoding. The point of these restrictions on <I>message</I> and <I>multipart</I> is to avoid nested encodings, which can unnecessarily bloat the message. Remember that a Content-Transfer-Encoding of <I>7bit</I> for a <I>multipart</I> message means that the individual parts have all been encoded for 7-bit transport.<P>
<h3><a name="0114_0050">Security<a name="0114_0050"></h3><P>
Many projects have used mail to transfer scripts that are automatically executed on the receiving machine. MIME's <I>application/postscript</I> is one example, and other such content types are being proposed. Any system that allows a received program to be executed automatically is a potential security risk. PostScript includes the ability to modify files, and even without that, it is possible to crash many systems by consuming excessive memory or disk space. Security-conscious systems may need to restrict the handling of these content types. For example, it is usually more secure to send PostScript files to a printer than to interpret and display the data on the host machine.<P>
<h3><a name="0114_0051">More Information<a name="0114_0051"></h3><P>
The current MIME specification, RFC1521, is available from the mail server at RFC-INFO@isi.edu. When requesting the spec, be sure to include the lines <P>
retrieve: RFC<P>
doc-id: RFC1521 <P>
in the body of the message. Other RFC documents can be retrieved in a similar fashion.<P>
MIME does not extend RFC822 to allow the use of non-ASCII characters in mail headers, but a related proposal, documented in RFC1522, does. An extended text subtype <I>text/enriched</I> is described in RFC1563. This replaces the <I>text/richtext</I> type proposed in an earlier MIME draft (the name change was to reduce confusion with Microsoft's RTF).<P>
You can obtain the specification--in both text and PostScript form--and the free MetaMail implementation of MIME at ftp://thumper.bellcore.com/pub/nsb.<P>
<a name="0114_0052"><B>Table 1:</B> MIME headers.<a name="0114_0052">
<pre>
Header             Description

Content-Type       Specifies the type of data contained in the
                    message. For example, a Content-Type of
                    <I>audio/basic</I> indicates a
                    particular audio format that the mail reader
                    should decode and play.
Content-Transfer-  Specifies how the (binary) data is encoded
 Encoding           into 7-bit text.
MIME-Version       Indicates MIME compliance. Was omitted from
                    early drafts of MIME, so isn't yet used by
                    all encoders.
Content-ID         Uniquely identifies the body of the message.
Content-           Provides an additional human-readable
 Description        description.
</pre>
<a name="0114_0053"><B>Table 2:</B> MIME content types.<a name="0114_0053">
<pre>
Type          Description

<I>text</I>         Human-readable text, possibly with
              textual markup. Any file with type <I>text</I>
              should be intelligible if simply listed to the
              screen. In particular, binary word-processor
              formats are not<I> text</I>.
<I>audio</I>        Sound data.
<I>image</I>        Still image.
<I>video</I>        Movie or animated image.
<I>application</I>  Application-specific data file.
              Includes script files in certain text languages.
<I>message</I>      Wrapper for an embedded message.
<I>multipart</I>    Multipart message. Each part may be
              in a different format. Subtypes indicate
              relationships between different parts.
</pre>
<a name="0114_0054"><B>Table 3:</B> Simple MIME data types.<a name="0114_0054">
<pre>
Type/Subtype           Description

<I>text/plain</I>            Plaintext with no special formatting.
                       The key <I>charset</I> is used to
                       specify US-ASCII or one of the ISO-8859
                       character sets.
<I>text/enriched</I>         An alternate format specified in
                       RFC1563.
<I>application/</I>          Binary data of an unspecified format.
<I>octet-stream</I>          The <I>type</I> key can be
                       used to give additional, human-readable information.
                       The <I>padding</I> key can be used to specify
                       0--7 bits of padding added to round a
                       bit-oriented file to a whole number of 8-bit
                       bytes.
<I>application/</I>          A PostScript file.
<I>postscript</I>
<I>image/gif</I>             A still image in GIF format.
<I>image/jpeg</I>            A still image in JPEG format.
<I>audio/basic</I>           A single-channel 8000-Hz audio file in
                       8-bit ISDN m-law (PCM) format.
<I>video/mpeg</I>            A video image in MPEG format. Video
                       images may or may not contain an associated
                       soundtrack.
</pre>
<a name="0114_0055"><B>Table 4:</B> MIME encoding types.<a name="0114_0055">
<pre>
Encoding      Description

<I>7bit</I>         Unencoded 7-bit text.
<I>8bit</I>         Unencoded 8-bit text.
<I>binary</I>       Unencoded binary data.
<I>Quoted-</I>      Most 7-bit characters are unencoded;
 <I>Printable</I>      other characters are represented as
               &quot;=&quot; followed by a hexadecimal number.
<I>Base64</I>       Encoded in Base64 using digits A-Z,
               a-z, 0-9, +, and /.
</pre>
<a name="0114_0056"><B>Figure 1:</B> Examples of message/external-body Content-Type headers. As with all RFC822-compliant headers, these are single lines.<a name="0114_0056">
<pre>
Content-Type: message/external-body; access-type=local-file; name=&quot;/pub/LargeFile&quot;
Content-Type: message/external-body; access-type=anon-ftp; size=12345678;
     site=somehost.com; name=LargeFile; directory=pub/other; mode=image
</pre>
<a name="0114_0057"><B>Figure 2:</B> Sample multipart message.<a name="0114_0057">
<pre>
From: tim@humperdinck (Tim Kientzle)
To: tim@humperdinck
Subject: A Sample Multipart message
MIME-Version: 1.0
Content-Type: multipart/parallel; boundary=SoMeBoUnDaRyStRiNg
Any text preceding the first boundary string is ignored
by MIME-compliant mail readers.  This area usually holds
a short message informing a person using a non-compliant
reader that this is a MIME message that they may not be
able to read.
-SoMeBoUnDaRyStRiNg
The preceding blank line ends the headers for this part.
Since there were none, this is assumed to be plain text
in US-ASCII.  The boundary cannot occur in the actual
text, so that mailers can quickly scan the text to
locate the boundaries.
-SoMeBoUnDaRyStRiNg
Content-Type: message/external-body; access-type=local-file;
name=/pub/file.audio
Content-Transfer-Encoding: 7bit
Content-Type: audio/basic
Content-Transfer-Encoding: binary
This text is ignored, the actual audio comes from the
file /pub/file.audio.  Both blank lines above are
important.  Also note the different encodings.
The 7bit encoding means that this embedded message is
in 7bit (which is mandatory for message/external-body),
while the actual audio data is stored in binary in the
local file.
-SoMeBoUnDaRyStRiNg-
This text follows the closing boundary marker above,
and is therefore ignored by compliant mail readers.</pre><P>
</pre>
<P>
<h4><a name="0114_0058"><a name="0114_0059">Listing One<a name="0114_0059"></h4><pre>
/****************************************************************************
    MIMECODE - encode/decode binary data using MIME's base64 method
    Definition: ``radix encoding'' is the process of encoding data
    by treating the input data as a number or sequence of numbers
    in a particular base. The most common example is base-16 (hexadecimal)
    encoding, although other bases are possible.
    This program encodes and decodes data using the base 64 encoding
    used by MIME. Output is broken into lines every 72 characters.
    Decoding ignores control characters.  Base 64 encoding adds 33% to
    the size of the input file.
    Usage: mimecode &lt;options&gt;
    Description: reads from stdin and writes encoded/decoded data to stdout.
    Options: -e  Encode
             -d  Decode
****************************************************************************/
#include &lt;stdio.h&gt;
/* This digit string is used by MIME's base-64 encoding */
/* MIME also deliberately ignores `=' characters */
#define BASE64DIGITS \
   &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;
static unsigned long bitStorage = 0;
static int numBits = 0;
/* Masks for 0-8 bits */
static int mask[] = { 0, 1, 3, 7, 15, 31, 63, 127, 255 };
/****************************************************************************
    ReadBits: reads a fixed number of bits from stdin
    If insufficient bits are available, the remaining bits are
    returned left-justified in the desired width.
*/
unsigned int ReadBits(int n, int *pBitsRead)
{
    static int eof = 0;
    unsigned long scratch;
    while ((numBits &lt; n) &amp;&amp; (!eof)) {
        int c = getchar();
        if (c == EOF) eof = 1;
        else {
            bitStorage &lt;&lt;= 8;
            bitStorage |= (c &amp; 0xff);
            numBits += 8;
        }
    }
    if (numBits &lt; n) {
        scratch = bitStorage &lt;&lt; (n - numBits);
        *pBitsRead = numBits;
        numBits = 0;
    } else {
        scratch = bitStorage &gt;&gt; (numBits - n);
        *pBitsRead = n;
        numBits -= n;
    }
    return scratch &amp; mask[n];
}
/****************************************************************************
    WriteChar: output character to stdout, breaking lines at 72 characters.
*/
static count = 0;
void WriteChar(char c)
{
    putchar(c);
    count++;
    if (count &gt;= 72) { /* Chop after 72 chars */
        putchar('\n');
        count = 0;
    }
}
/****************************************************************************
    PadMimeOutput: pad output for MIME base64 encoding
*/
void PadMimeOutput(void)
{
  while ((count % 4) != 0) {
    putchar('=');
    count++;
  }
}
/****************************************************************************
    ReadChar: Get next non-control character from stdin, return EOF at
        end-of-file
*/
int ReadChar(void)
{
    int c;
    do {
        c = getchar();
        if (c==EOF) return c;
    } while ( (((c+1) &amp; 0x7f) &lt; 33) ); /* Skip any control character */
    return c;
}
/****************************************************************************
    WriteBits: Write bits to stdout
    Note: assumes `bits' is already properly masked.
*/
void WriteBits(unsigned bits, int n)
{
    bitStorage = (bitStorage &lt;&lt; n) | bits;
    numBits += n;
    while (numBits &gt; 7) {
        unsigned scratch = bitStorage &gt;&gt; (numBits - 8);
        putchar(scratch &amp; 0xff);
        numBits -= 8;
    }
}
/****************************************************************************
    Base64Encode: encode stdin to stdout in base64
    The encoding vector used here is the one used by MIME.
*/
void Base64Encode(void)
{
    int numBits = 6; /* Encode 6 bits at a time */
    int digit;
    const char *digits = BASE64DIGITS;
    digit = ReadBits(numBits,&amp;numBits);
    while (numBits &gt; 0) { /* Encode extra bits at the end */
        WriteChar(digits[digit]);
        digit = ReadBits(numBits,&amp;numBits);
    }    
    PadMimeOutput(); /* Pad to multiple of four characters */
    putchar('\n');
}
/****************************************************************************
    Base64Decode: decode stdin to stdout in base64
    The `decode' array specifies the value of each digit character.
    -2 indicates an illegal value, -1 for a value that should be
    ignored.  ReadChar() already ignores control characters.
    Ignores parity.
*/
void Base64Decode(void)
{
    int c, digit;
    int decode[256];
    { /* Build decode table */
        int i;
        const char *digits = BASE64DIGITS;
        for (i=0;i&lt;256;i++) decode[i] = -2; /* Illegal digit */
        for (i=0;i&lt;64;i++) {
            decode[digits[i]] = i;
        decode[digits[i]|0x80] = i; /* Ignore parity when decoding */
    }
    decode['='] = -1; decode['='|0x80] = -1; /* Ignore '=' for MIME */
    }    
    c = ReadChar();
    while (c != EOF) {
        digit = decode[c &amp; 0x7f];
        if (digit &lt; -1) {
        fprintf(stderr,&quot;Illegal base 64 digit: %c\n&quot;,c);
        exit(1);
    } else if (digit &gt;= 0) 
        WriteBits(digit &amp; 0x3f,6);
    c = ReadChar();
    }
}
/****************************************************************************
    Usage: print usage message to stderr
*/
void Usage(char * progname)
{
    fprintf(stderr,&quot;Usage: %s &lt;options&gt;\n&quot;,progname);
    fprintf(stderr,&quot;Options:  -e   Encode\n&quot;);
    fprintf(stderr,&quot;          -d   Decode\n&quot;);
}
/****************************************************************************
    main: parse arguments, call appropriate encode/decode function
*/
int main(int argc, char **argv)
{
    int encode = 1;
    if (argc &lt; 2) { Usage(argv[0]); exit(1);}
    while (argc &gt; 1) {
        char *p=argv[--argc];
        switch(*p) {
            case '-':
                {
                    switch(*++p) {
                        case 'e': case 'E': encode = 1; break;
                        case 'd': case 'D': encode = 0; break;
                        default:
                            fprintf(stderr,&quot;Unrecognized option: %s\n&quot;,p);
                            Usage(argv[0]);
                            exit(1);
                    }
                }
                break;
            default:
                fprintf(stderr,&quot;Unrecognized option: %s\n&quot;,p);
                Usage(argv[0]);
                exit(1);
        }
    }
    if (encode) Base64Encode();
    else Base64Decode();
    exit(0);
}
</pre>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
