<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>SEP95: Clickable Images in HTML</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Clickable Images in HTML<a name="00f0_0044"><a name="00f0_0042"><a name="00f0_0000"></h1><P>
<h2>The WWW can be more than a pretty face</h2><P>
<h3>Andrew Davison</h3><P>
<p><i><a name="00f0_0043"><a name="00f0_0000">Andrew is a lecturer in the department of computer science at the University of Melbourne, Australia. He can be reached at ad@cs.mu.oz.au.</i></p><hr><P>
One of the nice things about the World Wide Web (WWW) is the ease with which you can add images to WWW pages. However, much more can be done with pictures than simply using them for decoration. For instance, you might want to use &quot;clickable&quot; graphics, where something happens when users click on an image. The HTML code in <a href="#00f0_004c">Example 1</A>, for instance, specifies a page that uses a picture (the Marx Brothers in marx.gif) as a link to the document marx-info.html. On your screen, this looks something like <a href="199500f2.htm">Figure 1</A>. When users click anywhere on the picture, the hypertext (or &quot;hyper-picture&quot;) link is followed to marx-info.html (see <a href="#00f0_0050">Listing One</A>), which looks like <a href="199500f3.htm">Figure 2</A> on your screen.<P>
The drawback to this example is that clicking only causes one thing to happen, no matter where on the picture the cursor is located. A more interesting capability would be a clickable image with &quot;hot spots&quot; linking different regions in a picture to different actions. For instance, in the Marx Brothers picture, you could make the faces of Harpo, Groucho, and Chico hot spots, so that when someone clicks on them, only information about that individual will appear. Other common uses of hot spots are interactive maps, where clicking on a particular building brings up relevant information, or role-playing games, where clicking on an item (a whiskey bottle, a corpse, and so on) returns a clue.<P>
The two basic approaches to implementing clickable images with hot spots in HTML involve either forms or environment variables. <P>
<h3><a name="00f0_0045">Clickable Images Using Forms<a name="00f0_0045"></h3><P>
When implementing clickable images using forms, the key is to use a form INPUT tag with an IMAGE attribute. <a href="#00f0_004d">Example 2</A> shows a small WWW page that uses these features. On screen, this looks like <a href="199500f4.htm">Figure 3</A>. The code between FORM and &lt;/FORM&gt; defines the form, with the METHOD attribute determining the means by which the form information is sent to the WWW server. The ACTION attribute names the program that will be invoked. The NAME attribute of the INPUT tag specifies an arbitrary string used to identify the picture. The TYPE attribute states that the input of the form is from an image. SRC gives the location of the marx.gif picture.<P>
The form in <a href="199500f5.htm">Figure 3</A> looks somewhat odd because the usual Send or Transmit button is missing. Instead, the form details are sent when the cursor is over the image and the mouse is clicked. As described in my article &quot;Coding with HTML Forms,&quot; (<I>DDJ</I>, June 1995), the details are output as a string with the format <I>name=value&amp;name=value&amp;...</I>, where <I>name</I> is the name of the form's data-input field, and <I>value</I> is its associated data.<P>
In this example, the only data-entry &quot;field&quot; is the picture named &quot;Marx.&quot; However, since the input type is image, the two fields <I>Marx.x=&lt;X-character&gt; </I>and<I> Marx.y=&lt;Y-character&gt;</I> are transmitted. X and Y are the coordinates of the cursor over the image when the mouse was clicked. The axes for an image start at (0,0) in the top-left corner, with X increasing across and Y increasing downwards. The coordinates of various parts of an image can be obtained using most graphics packages; xv is the easiest to use under UNIX.<P>
When the form string arrives at the application, it can be manipulated using the techniques described in my previous article. In this example, however, <I>qgp</I> echoes the field values; see <a href="199500f6.htm">Figure 4</A>. A more-useful application would return different WWW pages depending on the (X,Y) coordinates, perhaps using the NAME attribute to access a file holding relevant hot-spot information for marx.gif. <P>
<h3><a name="00f0_0046">Clickable Images Using Environment Variables<a name="00f0_0046"></h3><P>
In the early days of HTML, many browsers and servers did not support forms. This is rapidly changing, making the entry of information through WWW pages much easier. However, the full power of forms is not necessary for clickable images since the data passed to the application is relatively simple. <P>
In non-forms-based HTML programming, two environment variables are commonly utilized: PATH_INFO and QUERY_  STRING. Many other environment variables are also available; see http://hoohoo.ncsa.uiuc.edu/cgi/primer.html and http://  hoohoo.ncsa.uiuc.edu/cgi/env.html for a complete list.<P>
The application which services clickable images with hot spots uses the variables PATH_INFO, QUERY_STRING, and PATH_  TRANSLATED, and it is actually possible to manage without the (explicit) use of QUERY_STRING. <a href="#00f0_0052">Listing Two</A> presents the WWW page that acts as the interface to this application. The file is also at http://www.cs.mu.oz.au/~ad/code/visuals/mxi.html. In a browser, it looks like <a href="199500f7.htm">Figure 5</A>.<P>
The target location (the string assigned to <I>href</I>) is composed of two parts: <I>http://www.cs.mu.oz.au/cgi-bin/mapper</I>, the application location, and <I>/~ad/code/visuals/marx.map</I>, a string that will be assigned to PATH_INFO by the WWW server. The server can divide the string because it &quot;knows&quot; that cgi-bin is the WWW application directory. This knowledge is stored in the configuration file for the http daemon (called http.conf) as the line: <I>Exec /cgi-bin/* /local/dept/wwwd/scripts/*. </I>This acts as a kind of rewrite rule that determines the actual location of the application <I>/local/dept/wwwd/scripts/mapper</I>. The PATH_INFO value should be a string representing a partial path to a file, although it could be any kind of string without spaces. In this example, the partial path is <I>~ad/code/visuals</I>, the path from the home directory of the author. The filename is marx.map.<P>
The partial path in PATH_INFO is automatically translated into a full path and assigned to the PATH_TRANSLATED environment variable. The translation strategy is again determined by rewrite rules in http.conf. For partial paths starting at a home directory, the relevant rule is <I>UserDir www-public,</I> which states the location of WWW directories beneath each individual's home directory. Thus, PATH_TRANSLATED is assigned <I>/home/staff/ad/  www-public/code/visuals/marx.map</I>. This is the file holding the hot-spot information for the marx.gif picture.<P>
When the image in <a href="199500f8.htm">Figure 5</A> is clicked upon, information is sent to the server in the form of a long URL. The URL consists of the string assigned to <I>href</I>, with a string of the form <I>?X,Y</I> appended to the end. <P>
X and Y will be the characters representing the (X,Y) coordinate where the image was clicked, using the coordinate system just described. The characters are appended by the inclusion of the <I>ismap</I> tag in the IMG attribute.<P>
To summarize, the string delivered to the WWW server has the form <I>application-name/filename-with-partial-path?X,Y</I>. The server processes the X,Y tail of the string in two ways: It is assigned to the QUERY_STRING environment variable, and the string is space separated into parts and assigned to the C command-line arguments <I>argv[1], argv[2],.... argv[0]</I> always contains the application name. In this example, X,Y contains no spaces, so it is completely assigned to <I>argv[1]</I>. <P>
Once the command line is built, the server uses it to invoke the application, and also makes the various environment variables available to the executing program. Thus, for the HTML code in <a href="#00f0_0052">Listing Two</A> (displayed in <a href="199500f9.htm">Figure 5</A>), the mapper application will be called with <I>argv[1]</I> assigned some X,Y string (for example, &quot;152,149&quot;). Mapper will also have PATH_INFO and PATH_TRANSLATED available, and will therefore be able to access the hot-spot information file marx.map. It could also read the X,Y string through QUERY_STRING, but this is unnecessary. <P>
<h3><a name="00f0_0047">The Mapper Application<a name="00f0_0047"></h3><P>
Mapper.c is a C program which implements clickable images with hot spots. It has three main duties:<P>
<UL>
<li>Read the hot-spot information for a picture from a file.</li>
<li>Find the hot spot that contains (X,Y).</li>
<li>Deliver the WWW page associated with the hot spot to the user.</li>
</UL>
<a href="#00f0_0054">Listing Three</A> presents the code for mapper.c. (This code is also available at http://www.cs.mu.oz.au/~ad/code/visuals/mapper.c and electronically from <I>DDJ</I>; see &quot;Availability,&quot; page 3.) This program is based closely on a program called imagemap.c, available at http://hoohoo.ncsa.uiuc.edu/docs/setup/admin/NewImagemap.html. Also at that site is a small example with a clickable image of the Taj Mahal. A longer imagemap.c tutorial can be found at http://www.ora.com/gnn/bus/ora/features/miis/  index.html.<P>
Mapper.c has similar functionality to imagemap.c except that mapper.c assumes that the hot-spot information filename can be located solely by examining PATH_TRANSLATED. Imagemap.c also looks in a predefined configuration file that holds other hot-spot information filenames. The extra functionality is useful but inessential for this discussion, so the code for it has been excluded from mapper.c.<P>
The other changes in mapper.c are cosmetic: Prototype declarations have been included, extra comments have been added, and the code has been restructured to use more functions.<P>
<h3><a name="00f0_0048">The Hot-Spot Information-File Format<a name="00f0_0048"></h3><P>
Mapper.c uses the hot-spot information-file format designed for imagemap.c. Using the terminology of that program, hot-spot information files are called image-map files. An image map consists of lines of the form <I>&lt;hot-spot-shape-type&gt; &lt;associated-URL&gt; &lt;shape outline co-ordinates&gt;</I>. There are five hot-spot shape types: <I>circle</I>, <I>poly</I> (polygons), <I>rect</I> (rectangles), <I>point</I>, and <I>default</I>. For instance, marx.map contains the information in <a href="#00f0_004e">Example 3</A>. Note that the # lines are comments. The <I>default</I> line specifies what URL should be returned when a clicked (X,Y) point is in none of the hot spots. The three circles correspond to the faces of Harpo, Groucho, and Chico. A circle is specified by a center and another coordinate that indirectly gives the radius. The two <I>poly</I> hot spots match the suitcases labeled &quot;Blondes&quot; and &quot;Gags&quot; in marx.gif.<P>
A complication is the interaction between the <I>default</I> and <I>point</I> hot-spot types. A <I>point</I> hot spot specifies an (X,Y) coordinate, which is compared with the clicked point. If there are several <I>point</I> hot spots, then the one nearest to the clicked point is deemed active. You cannot have a <I>point</I> hot spot and use default in the same image, since they each achieve the same thing. <P>
For more details on the image-map file format, see http://  hoohoo.ncsa.uiuc.edu/docs/setup/admin/NewImagemap.html.<P>
<h3><a name="00f0_0049">Mapper.c Details<a name="00f0_0049"></h3><P>
The mapper.c program first reads the PATH_TRANSLATED environment variable that contains the location of the image-map file for the clickable picture. <I>get_map()</I> does this and, if successful, assigns the string to map. Errors are dealt with by calling <I>servererr()</I>, which prints a WWW error page such as the one in <a href="199500fa.htm">Figure 6</A> and then causes the application to terminate.<P>
If the image-map file can be opened, then the X and Y values in the <I>argv[1]</I> string are extracted by <I>get_clickpt()</I>, which stores them in the <I>clickpt</I> array.<P>
<I>process_map()</I> has three jobs: It reads in and parses the image-map file, locates the (X,Y) coordinate in one of the hot spots, and transmits the associated URL to the user. <P>
It reads the image-map file a line at a time inside a While loop, skipping # comment lines and blank lines. The first call to <I>get_word()</I> stores the hot-spot shape type in the <I>type </I>array, the second call stores its URL in <I>url</I>.<P>
The default case has its associated URL stored in <I>deflt</I> unless any <I>point</I> hot spots have already been processed. <P>
<I>get_coords()</I> reads in the series of coordinates that specify a hot-spot outline and stores them in the <I>coords</I> array.<P>
A series of <I>strcmp()</I> tests follow to determine the hot-spot shape type. Then a function is called to test if the clicked point is inside the shape area specified by the coordinates in the <I>coords</I> array.<P>
The test for a <I>point</I> hot spot is different because the final choice of <I>point</I> hot spot must wait until all have been tested against the clicked point. In the meantime, the URL of the hot spot currently closest to the clicked point is stored in <I>deflt</I>.<P>
The URL associated with the chosen hot spot is sent to the user by calling <I>sendmesg()</I>. This function prints the URL of a WWW page instead of its text. This is intercepted by the server, which sends the actual document to the user. URLs are printed using the format <I>Location: &lt;URL&gt;</I> followed by a blank line. <P>
sendmesg() is complicated by its ability to deal with full URLs (for example, http://www.cs.mu.oz.au/~ad/index.html) and partial URLs (/~ad/code/visuals/mgm.html). The former is printed immediately, the latter is expanded into a full URL by prefixing it with the server's host name (for instance, www.cs.mu.oz.au) to make http://www.cs.mu.oz.au/~ad/code/visuals/mgm.html. Details about the printing of URLs can be found at http://  hoohoo.ncsa.uiuc.edu/cgi/primer.html and http://hoohoo.ncsa  .uiuc.edu/cgi/env.html. <P>
<h3><a name="00f0_004a">Clickable Images in Action<a name="00f0_004a"></h3><P>
To illustrate the implementation and use of clickable images, let's start with the example in <a href="199500fb.htm">Figure 5</A> (the corresponding code is shown in <a href="#00f0_0052">Listing Two</A> and at http://www.cs.mu.oz.au/  ~ad/code/visuals/mxi.html). The hot spots for the image are specified in marx.map as the faces of Harpo, Groucho, and Chico, and the &quot;Blondes&quot; and &quot;Gags&quot; suitcases. Marx.map also includes URLs for each hot spot and for the default case.<P>
When Groucho's face is clicked upon, <a href="199500fc.htm">Figure 7</A> appears on the screen, which is defined at http://www.cs.mu.oz.au/~ad/  code/visuals/groucho.html. Similarly, clicking on the &quot;Gags&quot; suitcase produces <a href="199500fd.htm">Figure 8</A>, which is at http://www.cs.mu.oz.au/  ~ad/code/visuals/gags.html. The default case is linked to http://www.cs.mu.oz.au/~ad/code/visuals/mgm.html, displayed in <a href="199500fe.htm">Figure 9</A>.<P>
The layout of the various pages is meant to give the impression that the picture stays on the screen continuously while the text around it changes.<P>
<h3><a name="00f0_004b">Conclusion<a name="00f0_004b"></h3><P>
Clickable images with hot spots are a helpful WWW technique, especially for guide books (see, for example, the University of California Museum of Paleontology pages starting at http://  ucmp1.berkeley.edu/), role-playing games, and maps (for instance, the Internet resources &quot;map&quot; at http://www.ncsa.uiuc.edu/  SDG/Software/Mosaic/Demo/metamap.html). They can also enliven contents pages (such as with the HotWired WWW pages at http://www.hotwired.com).<P>
<B><a href="199500ff.htm">Figure 1</A>: </B>WWW page with image.<P>
<B><a href="19950100.htm">Figure 2</A>: </B>WWW page linked to <a href="19950101.htm">Figure 1</A>.<P>
<B><a href="19950102.htm">Figure 3</A>:</B> Page generated by HTML code in <a href="#00f0_004d">Example 2</A>.<P>
<B><a href="19950103.htm">Figure 4</A>:</B> Echoing the field values.<P>
<B><a href="19950104.htm">Figure 5</A>: </B>WWW page which acts as the interface to an application.<P>
<B><a href="19950105.htm">Figure 6</A>: </B>Typical WWW error page.<P>
<B><a href="19950106.htm">Figure 7</A>: </B>Clicking on Groucho's face generates this screen.<P>
<B><a href="19950107.htm">Figure 8</A>: </B>Image produced by clicking on the &quot;Gags&quot; suitcase.<P>
<B><a href="19950108.htm">Figure 9</A>: </B>Clicking on the default link generates this screen.<P>
<a name="00f0_004c"><B>Example 1:</B> HTML code specifying a page that uses a picture as a link.label.<a name="00f0_004c"><P><pre>
&lt;html&gt;
&lt;head&gt;
&lt;TITLE&gt;The Marx Brothers (image as anchor label)&lt;/TITLE&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;H1&gt;The Marx Brothers (image as anchor label)&lt;/H1&gt;

&lt;br&gt;
&lt;img src=&quot;gball.gif&quot; alt=&quot;&quot;&gt; Click on the picture for more
on the Marx Brothers. &lt;p&gt;

&lt;a href=&quot;marx-info.html&quot;&gt;&lt;img src=&quot;marx.gif&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;p&gt;

&lt;hr&gt;
&lt;address&gt;&lt;a href=&quot;http://www.cs.mu.oz.au/~ad&quot;&gt;Andrew Davison&lt;/a&gt;&lt;/address&gt;
&lt;/body&gt;
&lt;/html&gt;</pre><P>
<a name="00f0_004d"><B>Example 2:</B> Typical WWW page.<a name="00f0_004d"><P><pre>
&lt;html&gt;
&lt;head&gt;
&lt;TITLE&gt;The Marx Brothers (using forms)&lt;/TITLE&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;H1&gt;The Marx Brothers (using forms)&lt;/H1&gt;

&lt;br&gt;
&lt;img src=&quot;gball.gif&quot; alt=&quot;&quot;&gt; Click on the picture to find
out more: &lt;p&gt;

&lt;FORM METHOD=&quot;POST&quot;
      ACTION=&quot;http://www.cs.mu.oz.au/cgi-bin/qgp&quot;&gt;

&lt;INPUT NAME=&quot;Marx&quot; TYPE=&quot;image&quot;
      SRC=&quot;http://www.cs.mu.oz.au/~ad/code/visuals/marx.gif&quot;&gt; &lt;p&gt;

&lt;/FORM&gt;

&lt;hr&gt;
&lt;address&gt;&lt;a href=&quot;http://www.cs.mu.oz.au/~ad&quot;
                                   &gt;Andrew Davison&lt;/a&gt;&lt;/address&gt;
&lt;/body&gt;
&lt;/html&gt;</pre><P>
<a name="00f0_004e"><B>Example 3:</B> Using hot-spot shape types.<a name="00f0_004e"><P><pre>
# image map for Marx Brothers image

default  /~ad/code/visuals/mgm.html

# left head
circle  /~ad/code/visuals/harpo.html  52,33 52,10

# middle head
circle  /~ad/code/visuals/groucho.html  142,33 142,10

#right head
circle  /~ad/code/visuals/chico.html  230,46 230,26

# blondes suitcase
poly  /~ad/code/visuals/blondes.html  19,74 92,62 101,101 31,109

# gags suitcase
poly  /~ad/code/visuals/gags.html  219,86 309,44 310,87 251,110</pre><P>
<P>
<h4><a name="00f0_004f"><a name="00f0_0050">Listing One<a name="00f0_0050"></h4><pre>
&lt;html&gt;
&lt;head&gt;
&lt;TITLE&gt;The Marx Brothers&lt;/TITLE&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;H1&gt;The Marx Brothers&lt;/H1&gt;
A family of Jewish-American comics whose zany
humour convulsed minority audiences in its time and influenced later
comedy writing to an enormous extent. &lt;p&gt;
&lt;h2&gt;Groucho (1890-1977)&lt;/h2&gt;
(Julius Marx) had a painted moustache, a cigar, a
loping walk and the lion's share of the wisecracks. &lt;p&gt;
&lt;h2&gt;Harpo (1888-1964)&lt;/h2&gt;
(Adolph Marx) was a child-like mute who also played a harp. &lt;p&gt;
&lt;h2&gt;Chico (1886-1961)&lt;/h2&gt;
(Leonard Marx) played the piano eccentrically and
spoke with an impossible Italian accent. &lt;p&gt;
&lt;h2&gt;The Other Brothers&lt;/h2&gt;
Aside from Chico, Groucho and Harpo (shown above),
there were two other brothers: &lt;i&gt;Gummo (1893-1977)&lt;/i&gt;
(Milton Marx) and &lt;i&gt;Zeppo (1901-1979)&lt;/i&gt; (Herbert Marx)
who left the team early on. &lt;p&gt;
&lt;hr&gt;
&lt;address&gt;&lt;a href=&quot;mx0.html&quot;&gt;To Start&lt;/a&gt;&lt;/address&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<h4><a name="00f0_0051"><a name="00f0_0052">Listing Two<a name="00f0_0052"></h4><pre>
&lt;html&gt;
&lt;head&gt;
&lt;TITLE&gt;The Marx Brothers&lt;/TITLE&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;H1&gt;The Marx Brothers&lt;/H1&gt;
&lt;br&gt;
&lt;img src=&quot;gball.gif&quot; alt=&quot;&quot;&gt; Click on the picture to find out more: &lt;p&gt;
&lt;a href=&quot;http://www.cs.mu.oz.au/cgi-bin/mapper/~ad/code/visuals/marx.map&quot;&gt;
&lt;img src=&quot;marx.gif&quot; alt=&quot;&quot; ismap&gt;&lt;/a&gt; &lt;p&gt;
&lt;hr&gt;
&lt;h2&gt;The Marx Brothers&lt;/h2&gt;
A family of Jewish-American comics whose zany
humour convulsed minority audiences in its time and influenced later
comedy writing to an enormous extent. &lt;p&gt;
Aside from Chico, Groucho and Harpo (shown above),
there were two other brothers: &lt;i&gt;Gummo (1893-1977)&lt;/i&gt;
(Milton Marx) and &lt;i&gt;Zeppo (1901-1979)&lt;/i&gt; (Herbert Marx)
who left the team early on. &lt;p&gt;
&lt;hr&gt;
&lt;address&gt;&lt;a href=&quot;http://www.cs.mu.oz.au/~ad&quot;&gt;Andrew Davison&lt;/a&gt;&lt;/address&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<h4><a name="00f0_0053"><a name="00f0_0054">Listing Three<a name="00f0_0054"></h4><pre>
/* Simplified version of mapper 1.2
** Based on work by: Kevin Hughes,
** Eric Haines, Rob McCool, Chris Hyams, Rick Troth,
** Craig Milo Rogers, Carlos Varela
** Original version at 
** http://hoohoo.ncsa.uiuc.edu/docs/setup/admin/NewImagemap.html
** Andrew Davison (ad@cs.mu.oz.au) January 1995
** Available at http://www.cs.mu.oz.au/~ad/code/visuals/mapper.c
*/
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;ctype.h&gt;
#define MAXLINE 500       /* max length of line in image map file */
#define MAXVERTS 100      /* max num of coords in a shape */
#define NUMLEN 10         /* max num of digits in a X or Y number */
#define LF 10
#define X 0
#define Y 1
void get_map(char map[]);
void get_clickpt(char *arg, double clickpt[]);
void process_map(FILE *fp, double clickpt[]);
void get_word(char *input, int *pi, char *word);
void get_num(char *input, int *pi, char *num);
void get_coords(char *input, int *pi, double coords[][2], int size, FILE *fp);
void servererr(char *msg);
void sendmesg(char *url);
double sdist_apart(double clickpt[], double coords[][2]);
int clickpt_in_rect(double clickpt[], double coords[][2]);
int clickpt_in_circle(double clickpt[], double coords[][2]);
int clickpt_in_poly(double clickpt[], double pgon[][2]);
int main(int argc, char *argv[])
{
  char map[MAXLINE];         /* name of image map file with full path */
  double clickpt[2];         /* for the (X,Y) coord clicked upon */
  FILE *fp;
  if (argc != 2)
    servererr(&quot;Wrong number of arguments, client may not support ISMAP.&quot;);
  get_map(map);
  if((fp = fopen(map,&quot;r&quot;)) == NULL)
    servererr(strcat(&quot;Couldn't open image map file:&quot;, map));
  else {
    get_clickpt(argv[1], clickpt);
    process_map(fp, clickpt);
    fclose(fp);
  }
  return 0;
}
void get_map(char map[])
/* obtain the image map file name with a full UNIX path */
{
  char *name;        /* name of image map file with partial path */
  name = getenv(&quot;PATH_INFO&quot;);
  if((!name) || (!name[0]))
    servererr(&quot;No image map name given. Please read the 
     &lt;A HREF=\&quot;http://hoohoo.ncsa.uiuc.edu/docs/setup/admin/NewImagemap.html\&quot;&gt;
     instructions&lt;/A&gt;.&lt;P&gt;&quot;);
  name++;          /* ignore first '/' */
  /* if the name contains a '/' then it represents a partial UNIX path */
  if (strchr(name,'/'))
    strcpy(map, getenv(&quot;PATH_TRANSLATED&quot;));
  else
    servererr(&quot;Map name must include a partial UNIX path.&quot;);
}
void get_clickpt(char *arg, double clickpt[])
/* extract the (X,Y) coord clicked upon */
{
  char *t;
  if((t = strchr(arg,',')) == NULL)
    servererr(&quot;Your client doesn't support image mapping properly.&quot;);
  *t++ = '\0';
  clickpt[X] = (double) atoi(arg);
  clickpt[Y] = (double) atoi(t);
}
void process_map(FILE *fp, double clickpt[])
/* parse the image map file, locate clickpt inside a hot shape,
   invoke the associated URL */
{
  char input[MAXLINE];          /* a line from the image map file */
  char type[MAXLINE];           /* type of hot spot shape */
  char url[MAXLINE];            /* URL associated with shape type */
  char deflt[MAXLINE];          /* the URL for the default case */
  double coords[MAXVERTS][2];   /* the coordinates of a shape */
  int num_ptshapes = 0;         /* number of point hot spots used */
  double dist, min_dist;        /* for nearest point hot spot calc */
  int i;
  while((fgets(input, MAXLINE, fp)) != NULL) {
    i = 0;
    if((input[i] == '#') || (!input[i]))
      continue;
    get_word(input, &amp;i, type);
    while(isspace(input[i])) 
      i++;
    get_word(input, &amp;i, url);
    if((strcmp(type,&quot;default&quot;) == 0) &amp;&amp; (num_ptshapes == 0)) {
      strcpy(deflt,url);
      continue;
    }
    get_coords(input, &amp;i, coords, MAXVERTS, fp);
    if(strcmp(type,&quot;poly&quot;) == 0)             /* poly type */
      if(clickpt_in_poly(clickpt,coords))
        sendmesg(url);
    if(strcmp(type,&quot;circle&quot;) == 0)           /* circle type */
      if(clickpt_in_circle(clickpt,coords))
        sendmesg(url);
    if(strcmp(type,&quot;rect&quot;) == 0)             /* rect type */
      if(clickpt_in_rect(clickpt,coords))
        sendmesg(url);
    if(strcmp(type,&quot;point&quot;) == 0) {          /* point type */
      dist = sdist_apart(clickpt, coords);
      /* If first point hot spot, or the nearest, set the default. */
      if ((num_ptshapes == 0) || (dist &lt; min_dist)) {
        min_dist = dist;
        strcpy(deflt,url);
      }
      num_ptshapes++;
    }
  }
  if(deflt[0])
    sendmesg(deflt);
  else 
    servererr(&quot;No default specified.&quot;);
}
void get_word(char *input, int *pi, char *word)
/* extract a word from an input line */
{
  int i;
  for(i=0; ((!isspace(input[*pi])) &amp;&amp; (input[*pi])); i++) {
    word[i] = input[*pi];
    (*pi)++;
  }
  word[i] = '\0';
}
void get_num(char *input, int *pi, char *num)
/* extract a number (as characters) from an input line */
{
  int i = 0;
  while ((isspace(input[*pi])) || (input[*pi] == ','))   /* find char */
    (*pi)++;
  while (isdigit(input[*pi]))
    num[i++] = input[(*pi)++];
  num[i] = '\0';
}
void get_coords(char *input, int *pi, double coords[][2], int size, FILE *fp)
/* extract the (X,Y) coords from an input line,
   and store them in the coords array */
{
  char num[MAXLINE];            /* a X or Y part of a coord */
  int k=0;
  while ((input[*pi]) &amp;&amp; (k &lt; size)) {
    get_num(input, pi, num);
    if (num[0] != '\0')
      coords[k][X] = (double) atoi(num);    /* X part of a coord */
    else
      break;
    get_num(input, pi, num);
    if (num[0] != '\0') {
      coords[k][Y] = (double) atoi(num);    /* Y part of a coord */
      k++;
    }
    else {
      fclose(fp);
      servererr(&quot;Missing Y value in a co-ordinate.&quot;);
    }
  }
  if (k &lt; size)
    coords[k][X] = -1;        /* sentinel */
  else
    coords[k-1][X] = -1;      /* overwrite last coord */
}
/* HTML print utilities */
void servererr(char *msg)
{
  printf(&quot;Content-type: text/html%c%c&quot;,LF,LF);
  printf(&quot;&lt;title&gt;Mapping Server Error&lt;/title&gt;&quot;);
  printf(&quot;&lt;h1&gt;Mapping Server Error&lt;/h1&gt;&quot;);
  printf(&quot;This server encountered an error:&lt;p&gt;&quot;);
  printf(&quot;%s&quot;, msg);
  exit(-1);
}
void sendmesg(char *url)
{
  if (strchr(url, ':'))        /* It is a full URL */
    printf(&quot;Location: &quot;);
  else                         /* It is a virtual URL */
    printf(&quot;Location: http://%s&quot;, getenv(&quot;SERVER_NAME&quot;)); 
  printf(&quot;%s%c%c&quot;,url,LF,LF);
  exit(0);
}
/* clickpt locating functions */
double sdist_apart(double clickpt[2], double coords[MAXVERTS][2])
/* Find the square of the distance between the click point
   and the coords of a point hot spot. 
   Don't need to take square root */
{
   return ((clickpt[X] - coords[0][X]) * (clickpt[X] - coords[0][X])) + 
          ((clickpt[Y] - coords[0][Y]) * (clickpt[Y] - coords[0][Y]));
}
int clickpt_in_rect(double clickpt[2], double coords[MAXVERTS][2])
/* is the clickpt inside a rectangle? */
{
  return ((clickpt[X] &gt;= coords[0][X] &amp;&amp; clickpt[X] &lt;= coords[1][X]) &amp;&amp;
          (clickpt[Y] &gt;= coords[0][Y] &amp;&amp; clickpt[Y] &lt;= coords[1][Y]));
}
int clickpt_in_circle(double clickpt[2], double coords[MAXVERTS][2])
/* is the clickpt inside a circle? */
{
  int radius1, radius2;
  radius1 = ((coords[0][Y] - coords[1][Y]) * (coords[0][Y] - coords[1][Y])) +
            ((coords[0][X] - coords[1][X]) * (coords[0][X] - coords[1][X]));
  radius2 = ((coords[0][Y] - clickpt[Y]) * (coords[0][Y] - clickpt[Y])) +
            ((coords[0][X] - clickpt[X]) * (coords[0][X] - clickpt[X]));
  return (radius2 &lt;= radius1);
}
int clickpt_in_poly(double clickpt[2], double pgon[MAXVERTS][2])
/* is the clickpt inside a polygon? */
{
  int i, numverts, inside_flag, xflag0;
  int crossings;
  double *p, *stop;
  double tx, ty, y;
  for (i = 0; pgon[i][X] != -1 &amp;&amp; i &lt; MAXVERTS; i++)
    ;
  numverts = i;
  crossings = 0;
  tx = clickpt[X];
  ty = clickpt[Y];
  y = pgon[numverts - 1][Y];
  p = (double *) pgon + 1;
  if ((y &gt;= ty) != (*p &gt;= ty)) {
    if ((xflag0 = (pgon[numverts - 1][X] &gt;= tx)) ==
        (*(double *) pgon &gt;= tx)) {
      if (xflag0)
        crossings++;
    }
    else {
      crossings += (pgon[numverts - 1][X] - (y - ty) *
          (*(double *) pgon - pgon[numverts - 1][X]) /
          (*p - y)) &gt;= tx;
    }
  }
  stop = pgon[numverts];
  for (y = *p, p += 2; p &lt; stop; y = *p, p += 2) {
    if (y &gt;= ty) {
      while ((p &lt; stop) &amp;&amp; (*p &gt;= ty))
        p += 2;
      if (p &gt;= stop)
        break;
      if ((xflag0 = (*(p - 3) &gt;= tx)) == (*(p - 1) &gt;= tx)) {
        if (xflag0)
          crossings++;
      }
      else {
        crossings += (*(p - 3) - (*(p - 2) - ty) *
            (*(p - 1) - *(p - 3)) / (*p - *(p - 2))) &gt;= tx;
      }
    }
    else {
      while ((p &lt; stop) &amp;&amp; (*p &lt; ty))
        p += 2;
      if (p &gt;= stop)
        break;
      if ((xflag0 = (*(p - 3) &gt;= tx)) == (*(p - 1) &gt;= tx)) {
        if (xflag0)
          crossings++;
      }
      else {
        crossings += (*(p - 3) - (*(p - 2) - ty) *
            (*(p - 1) - *(p - 3)) / (*p - *(p - 2))) &gt;= tx;
      }
    }
  }
  inside_flag = crossings &amp; 0x01;
  return (insid
</pre>



<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
