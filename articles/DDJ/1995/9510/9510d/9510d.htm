<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>OCT95: Object-Oriented Programming in S</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Object-Oriented Programming in S<a name="0151_0069"><a name="0151_0067"><a name="0151_0000"></h1><P>
<h2>More than just data analysis</h2><P>
<h3>Richard Calaway</h3><P>
<p><i><a name="0151_0068"><a name="0151_0000">Rich can be contacted at rich@amtec.com.</i></p><hr><P>
The S language is a high-level, object-oriented system designed for data analysis and graphics. Originally written by Richard A. Becker, John M. Chambers, and Allan R. Wilks of AT&amp;T Bell Laboratories' Statistics Research Department, the S language is useful for a wide range of applications. In fact, most current S users aren't involved with statistics, and most S applications focus on basic quantitative computations and graphics.<P>
S is relatively easy to work with. In its simplest form, you type an expression, and S evaluates it and displays the answer (something like a desk calculator). However, S can operate with large collections of data at once, so one expression might produce a graph, fit a line to a set of points, or carry out similarly complex operations.<P>
A commercial implementation of the S language can be found in the S-Plus data analysis and statistics software from Mathsoft's StatSci Division (Seattle, WA). (The source code for S is licensed by Bell Labs, but distributed exclusively by StatSci.) S is available for systems ranging from Windows-based PCs to UNIX-based workstations (HP, SGI, Next, Sun, and others).<P>
The S-Plus system consists of the S language, 1200 or so language extensions that deal with statistical mathematical and analysis functions, and a development environment. More specifically, the major areas in which S-Plus extends S are time series, survival analysis, &quot;modern regression&quot; (including LMS regression and projection-pursuit regression), classical statistical tests, graphic-device drivers, and dynamic loading. All of the examples presented in this article are based on the S-Plus implementation.<P>
The real advantage of the object-oriented approach is evident when designing a large system that will do similar, but not identical, things to a variety of data objects. By specifying classes of data objects for which identical effects will occur, you can define a single generic function that embraces the similarities across object types, but permits individual implementations or methods for each defined class. For example, if you type a <I>print(object)</I> expression, you expect S to print the object in a suitable format. If all the various predefined printing routines were combined into a single function, the <I>print</I> function would need to be modified every time a new class of objects was created. With object-oriented programming, however, <I>print</I> is truly generic; it need not be modified to accommodate new classes of objects. Instead, the objects carry their own methods with them. Thus, when you create a class of objects, you can also create a set of methods to specify how those objects will behave with respect to certain generic operations.<P>
In S, both character vectors and factors are originally created from vectors of character strings, and when printed, both give essentially the same information; see <a href="#0151_0074">Listing One</A>. The distinct look of the printed factor arises because factors are a distinct class of object, with their own printing method, the function <I>print.factor</I>. <P>
<h3><a name="0151_006a">Generic Functions <a name="0151_006a"></h3><P>
Generic functions (that is, functions such as <I>print</I> or <I>plot</I> that take an arbitrary object as argument) in S tend to be extremely simple thanks to the utility function <I>UseMethod,</I> an internally implemented function that finds the appropriate method and evaluates a call to it. As shown in <a href="#0151_0076">Listing Two</A> (a), the typical generic function consists of a single call to <I>UseMethod</I>. When the generic function is called, <I>UseMethod</I> determines the class of the argument <I>x</I>, finds the appropriate method, then constructs and evaluates a call of the form <I>method (x, ... )</I>, where &quot;...&quot; represents additional arguments to the method.<P>
Although most generic functions have the simple structure in <a href="#0151_0076">Listing Two</A> (a) for <I>print</I> and <I>plot</I>, a slightly more complicated definition may be needed. For example, the <I>assign</I> generic function stores objects in different classes of databases; therefore, it's important to assign not the class of the assigned object but the class of the assigned database. The call to <I>UseMethod</I> has a second argument specifying which <I>assign</I>ed argument is to be searched for its class attribute; see <a href="#0151_0076">Listing Two</A> (b).<P>
The <I>browser</I> function acts generically when called with an argument, but has a specific action when called with no arguments (in part because you need an argument to find a method). This is embodied in its definition, as in <a href="#0151_0076">Listing Two</A> (c).<P>
<h3><a name="0151_006b">Classes and Methods <a name="0151_006b"></h3><P>
In S, an object's class attribute determines its method. If the class attribute is missing, the <I>default</I> class is assumed. For example, factors are of class <I>factor</I>, while vectors, having no class attribute, are of class <I>default</I>. (Data types that existed before S-Plus 3.0 have no class attribute, because classes and methods were new with that release. Thus, vectors, matrices, arrays, lists, and time-series objects are classless.) <P>
A class attribute is just a character vector of any length. The first element in the class attribute is the most-specific class of the object. For example, an ordered factor has class attribute <I>c(&quot;ordered&quot;, &quot;factor&quot;)</I>, and is said to be class &quot;ordered.&quot; (Ordered factors have a specific level ordering.) Subsequent elements in the class attribute denote classes from which the specific class inherits.<P>
Methods are named using the convention <I>action.class</I>, where <I>action</I> is the name of the generic function, and <I>class</I> is the class to which the method is specific. For example, <I>plot.factor</I> is the <I>plot</I> method for factors, and <I>is.na.data.frame</I> is the missing-value test method for data frames.<P>
If the most-specific class of an object has no method, S searches the classes from which the object inherits for the appropriate method. Every class inherits from class <I>default</I>, so the default method is used if no more-specific method exists.<P>
Inheritance lets you define a new class using only those features that distinguish it from classes from which it inherits. To take full advantage of this, you must define methods incrementally so that a specific method can act like a pre- or postprocessor to a more general method. For example, a method for printing ordered factors should be able to draw on an existing method for printing factors. This is done via <I>NextMethod</I>, which finds the next most-specific method after the current method and creates and evaluates a call to it. Like <I>UseMethod</I>, <I>NextMethod</I> is internally implemented.<P>
For instance, <a href="#0151_0078">Listing Three</A> (a) is the definition of <I>print.ordered</I>. Like all <I>print</I> methods, <I>print.ordered</I> returns its first argument. Values for all methods should be compatible. In this case, the call to <I>NextMethod</I> finds the function <I>print.factor</I>. <I>print.ordered</I> appends the ordered levels to its output. The specific method for ordered factors is a postprocessor to the method for factors in general, and most of <I>print.factor</I> is preprocessing for <I>print.default</I>; see <a href="#0151_0078">Listing Three</A> (b). <P>
To build objects of a specific class, you need to define a constructor (or generator) function. Typically, generator functions have the name of the object they create--vector, factor, and so on. <a href="#0151_0078">Listing Three</A> (c) is the definition of the <I>factor</I> generator function. Here, the generator function explicitly sets the class attribute. Not all generator functions produce objects with a nonnull class attribute. For example, <I>numeric</I> generates numeric vectors, which have no class attribute. You can view the class of any object with the <I>class</I> function, as in <a href="#0151_0078">Listing Three</A> (d), or you can modify it by using <I>class</I> on the left side of an assignment, as in <a href="#0151_0078">Listing Three</A> (e). However, modifying the class attribute should not be done lightly: Assigning a class implies that the object is a compatible-value object of that class.<P>
<h3><a name="0151_006c">Public and Private Views of Methods<a name="0151_006c"></h3><P>
Object-oriented programming often distinguishes between the public (or external) view and the private (or internal) view of a class implementation. The public view is the conceptual view of the object and the functions that operate on it. Ideally, the casual user should not be concerned with the private view--the public view should be adequate for most situations.<P>
When developing new methods, you must be clear at all times about which view you are using, because the private view, unlike the public view, is implementation dependent. If the implementation of a class changes, examine methods that use the private view to see if they are still valid. The private view is generally more efficient, particularly for the most commonly used methods, but public methods are easier to maintain.<P>
<h3><a name="0151_006d">Defining New S Classes <a name="0151_006d"></h3><P>
New classes in S are created by identifying one or more defining attributes (or, for objects derived from S's list type, defining components) shared by all members of the class, and then assigning a class attribute to all objects containing those attributes. The class attribute allows the new class to use the S generic dispatch mechanism.<P>
As with many programming tasks, the key to successfully defining new classes is to abstract the identifying features of a given data object, clearly distinguishing objects within the class from those outside it. For example, a data object with the attribute <I>dim</I> is necessarily an array. Testing for this attribute is equivalent to testing for membership in the class.<P>
<h3><a name="0151_006e">S-Plus Classes<a name="0151_006e"></h3><P>
To illustrate new S-Plus classes, I'll define a class of graphical shapes. In this model, shapes are specified as a sequence of points. Open shapes, such as line segments and arcs, are specified by their endpoints. Closed shapes, such as circles and squares, are specified by starting points and points that uniquely determine the shape. A circle is specified as a center and a point on the circle. A square is specified by one corner and a side length, while a rectangle is specified by two diagonal corners.<P>
The goal of defining these shapes is to create a rudimentary freehand drawing using a graphics window. For this reason, I'll define the classes so that objects can be created easily using a sequence of mouse clicks via the <I>locator</I> function. <a href="#0151_007a">Listing Four</A> (a) is a <I>generator</I> function for circles. The <I>circle</I> function lets you express the circle in several natural ways, thanks to the <I>helper</I> function <I>as.point</I>, defined in <a href="#0151_007a">Listing Four</A> (b). You can give the center as either a list containing x,y components, as you might get from the <I>locator</I> function, or you can give it as an -xy vector. You can give the radius as a scalar, or give a second point from which the radius can be calculated. <a href="#0151_007c">Listing Five</A> (a) shows how to define a simple circle from the S-Plus command line.<P>
You store the circle as a list for ease of access to individual elements; however, the default printing for lists seems rather formal for a circle, where we only need to see a center and radius. Thus, it makes sense to define a method for use with the print generic function; see <a href="#0151_007c">Listing Five</A> (b). <a href="#0151_007c">Listing Five</A> (c) is a simpler method that provides the same results.<P>
When a method is defined, its arguments should match those of the generic. It may have extra arguments (hence the &quot;...&quot; built into every generic).<P>
You define the <I>draw</I> function as a generic function; you can draw shapes with <I>draw</I>, and as long as you define appropriate methods for all classes of shapes, draw will operate correctly; see <a href="#0151_007c">Listing Five</A> (d). The call to <I>UseMethod</I> signals the evaluator that <I>draw</I> is generic. The evaluator should therefore first look for a specific method based on the class of the object, starting with the most-specific class and moving up through less-specific classes until the most-general class is reached. All S-Plus objects share the same general class, class <I>default</I>. <a href="#0151_007c">Listing Five</A> (e), for example, is a version of the method <I>draw.circle</I>. If you call <I>draw</I> with an object of class <I>circle</I> as its argument, the S evaluator finds the appropriate method and draws a circle on the current graphics device.<P>
<h3><a name="0151_006f">Group Methods<a name="0151_006f"></h3><P>
Three groups of S functions, all defined as calls to <I>.Internal</I>, are treated specially by the methods mechanism: the Ops group, containing standard operators for arithmetic, comparison, and logic; the Math group, containing the elementary, vectorized mathematics functions (<I>sin</I>, <I>exp</I>, and so on); and the Summary group, containing functions (such as <I>max</I> and <I>sum</I>) that take a vector and return a single summary value. <a href="#0151_0072">Table 1</A> lists the functions in each group.<P>
Rather than writing individual methods for each function in a group, you can define a single method for the group as a whole. There are 17 functions in the Ops group (19 if you count both the unary and infix forms of + and -) and 26 in the Math group, so the savings in programming can be significant. Of course, in writing a group method, you must ensure that it gives the appropriate answer for all functions in the group. <P>
Group methods have names of the form <I>group.class</I>. Thus, <I>Math.factor</I> is the <I>Math</I> group method for objects of class <I>factor</I>, and <I>Summary.data.frame</I> is the <I>Summary</I> group method for objects of class <I>data.frame</I>. If the method handles all the functions in the group in the same way, it can be quite simple; see <a href="#0151_007e">Listing Six</A> (a). (One caution: The <I>Summary</I> group does not include either mean or median, both of which are implemented as S-Plus code.)<P>
The economy of the group method is still significant even if a few of the functions need to be handled separately. As an example of a nontrivial group method, I'll define a group of operators for the finite field <I>Z<SUB>7</SUB></I>, which consists of the elements <I>{a7=0,b7=1,c7=2,d7=3,e7=4,f7=5,g7=6}$</I> (0 to 6). The usual operations are defined so that any operation on two elements of the set yields an element of the set; for example, <I>c7*e7=b7=1,d7/f7=c7=2...</I>. Addition, subtraction, and multiplication are simply the usual arithmetic operations performed modulo 7, but division requires extra work to determine each element's multiplicative inverse. Also, elements of the field can be meaningfully combined with integers, but not with other real numbers or complex numbers. <P>
You can define a new class, <I>zseven</I>, to represent the finite field <I>Z<SUB>7</SUB></I>. <a href="#0151_007e">Listing Six</A> (b) shows the <I>generator</I> function for this. <a href="#0151_007e">Listing Six</A> (c) shows the value returned by a typical input vector. You suppress the printing of the class attribute by defining a method for <I>print</I>, as in <a href="#0151_007e">Listing Six</A> (d). But the significant part of the work is to define a group method <I>Ops.zseven</I> that will behave correctly for all 17 functions in the Ops group. Most of these are binary operations, so you define your method to have two arguments, <I>e1</I> and <I>e2</I>, as in <I>&gt; Ops.zseven &lt;--function(e1,e2){}</I>. While performing calculations, you want to ignore the class of your operands, so you begin with the assignment <I>e1 &lt;-- unclass(e1)</I>. You do not unclass <I>e2</I> immediately, because the operation may be one of the unary operators (+, -, and !). You also test that <I>e1</I> is a value that makes sense in <I>Z<SUB>7</SUB></I> arithmetic; see <a href="#0151_0080">Listing Seven</A> (a). (The object <I>.Generic</I> is created in the evaluation frame, and contains the name of the function being called.)<P>
You can now include <I>e2</I> in your calculations; division must be treated specially, but everything else passes on to the generic methods incorporated in S-Plus's internal code; see <a href="#0151_0080">Listing Seven</A> (b). Finally, ensure that numeric results are of class <I>zseven</I>, while logical results are passed back unchanged, as in <a href="#0151_0080">Listing Seven</A> (c). The complete method looks like <a href="#0151_0080">Listing Seven</A> (d). Alternatively, you can ignore the special case of division in the group method and write an individual method for division, as in <a href="#0151_0082">Listing Eight</A>.<P>
Individual methods override group methods. In this example, the overhead of testing makes it simpler to incorporate the special case within the group method. A working version can be defined as <a href="#0151_0084">Listing Nine</A>. Listings <a href="#0151_0086">Ten</A> (a) and (b) test a few examples of this, and produce the expected answers.<P>
<h3><a name="0151_0070">Replacement Methods<a name="0151_0070"></h3><P>
Replacement functions typically replace either an element or attribute of their arguments and appear on the left side of an S assignment arrow. S interprets the expression <I>f(x) &lt;-- value </I>as <I>x &lt;--&quot;f&lt;--&quot;(x, value)</I>, so that the replacement function to be defined has a name of the form <I>f&lt;</I>--. All replacement functions act generically: Methods can be written for them. <P>
In class <I>zseven,</I> you define a replacement to ensure that any new value remains in the class, that is, that all elements in an object of class <I>zseven</I> are from the set <I>{0, 1, 2, 3, 4, 5, 6}</I>. The public method in <a href="#0151_0088">Listing Eleven</A> accomplishes this; it does not use any special knowledge of the implementation of the class <I>zseven</I>, just the public view that <I>zseven</I> is simply the integers mod 7.<P>
<h3><a name="0151_0071">References<a name="0151_0071"></h3><P>
Becker, R.A., J.M. Chambers, and A.R. Wilks. <I>The New S Language</I>. London, U.K.: Chapman and Hall, 1988 (the &quot;Blue Book&quot;).<P>
Chambers, J.M. and T.J. Hastie. <I>Statistical Models in S</I>. London, U.K.:<B> </B>Chapman and Hall, 1992 (the &quot;White Book&quot;).<P>
Spector, P. An Introduction to S and S-Plus. Belmont, CA: Duxbury Press, 1994.<P>
<a name="0151_0072"><B>Table 1:</B> Functions affected by group methods.<a name="0151_0072">
<pre>
Group   Functions in Group 

Ops     +(unary and infix), - (unary and infix), *, /, !
        (unary not), sign, ^,  %%, %/%, &lt;, &gt;, &lt;=, &gt;=, ==, !=, |, &amp;.

Math    abs, acos, acosh, asin, asinh, atan, atanh,
        ceiling, cos, cosh, cummax, cumsum, cumprod, exp,
        floor, gamma, lgamma, log, log10, round,
        signif, sin, sinh, tan, tanh, trunc

Summary all, any, max, min, prod, range, sum.</pre><P>
<P>
<h4><a name="0151_0073"><a name="0151_0074">Listing One<a name="0151_0074"></h4><pre>
&gt; xxx &lt;- c(&quot;White&quot;, &quot;Black&quot;, &quot;Gray&quot;,&quot;Gray&quot;, &quot;White&quot;,&quot;White&quot;)
&gt; yyy &lt;- factor(xxx)
&gt; print(xxx)
[1] &quot;White&quot; &quot;Black&quot; &quot;Gray&quot;  &quot;Gray&quot;  &quot;White&quot; &quot;White&quot;
&gt; print(yyy)
[1] White Black Gray  Gray  White White
</pre>
<h4><a name="0151_0075"><a name="0151_0076">Listing Two<a name="0151_0076"></h4><pre>
<B>(a)</B>
&gt; plot
function(x, ...)
UseMethod(&quot;plot&quot;)
&gt; print
function(x, ...)
UseMethod(&quot;print&quot;)

<B>(b)</B>
&gt; assign
function(x, value, frame, where = NULL)
UseMethod(&quot;assign&quot;, where)

<B>(c)</B>
&gt; browser
function(object, ...)
if(nargs()) UseMethod(&quot;browser&quot;) else {
    nframe &lt;- sys.parent()
    msg &lt;- paste(deparse(sys.call(nframe)), collapse = &quot; &quot;)
    if(nchar(msg) &gt; 30)
        msg &lt;- paste(substring(msg, 1, 30), &quot;. . .&quot;)
    browser.default(nframe, 
            message = paste(&quot;Called from:&quot;, msg))
}
</pre>
<h4><a name="0151_0077"><a name="0151_0078">Listing Three<a name="0151_0078"></h4><pre>
<B>(a)</B>
&gt; print.ordered
function(x, ...)
{
    NextMethod(&quot;print&quot;)
    cat(&quot;\n&quot;, paste(levels(x), collapse = &quot; &lt; &quot;), &quot;\n&quot;)
    invisible(x)
}

<B>(b)</B>
     &gt; print.factor
function(x, quote = F, abbreviate.arg = F, ...)
{
    if(length(xx &lt;- check.factor(x)))
        stop(paste(
            &quot;cannot be interpreted as a factor:\n\t&quot;, xx))
    xx &lt;- x
    l &lt;- levels(x)
    class(x) &lt;- NULL
    if(abbreviate.arg)
        l &lt;- abbreviate(l)
    if(any(is.na(x))) {
        l &lt;- c(l, &quot;NA&quot;)
        x[is.na(x)] &lt;- length(l)
    }
    else x &lt;- l[x]
    NextMethod(&quot;print&quot;, quote = quote)
    if(any(is.na(match(l, unique(x))))) {
        cat(&quot;Levels:\n&quot;)
        print.atomic(l)
    }
    invisible(xx)
}

<B>(c)</B>
&gt; factor
function(x, levels = sort(unique(x)), 
    labels = as.character(levels), exclude = NA)
{
    if(length(exclude) &gt; 0) {
            storage.mode(exclude) &lt;- storage.mode(levels)
    # levels &lt;- complement(levels, exclude)
            levels &lt;- levels[is.na(match(levels,exclude))]
    }
    y &lt;- match(x, levels)
    names(y) &lt;- names(x)
    levels(y) &lt;- if(length(labels) == length(levels))
                    labels else if(length(labels) == 1
            )
            paste(labels, seq(along = levels), sep = &quot;&quot;
                    )
    else stop(paste(&quot;invalid labels argument, length&quot;,
                    length(labels), &quot;should be&quot;, length(
                    levels), &quot;or 1&quot;))
    class(y) &lt;- &quot;factor&quot;
    y
}

<B>(d)</B>
&gt; class(kyphosis)
[1] &quot;data.frame&quot;

<B>(e)</B>
&gt; class(myobject) &lt;- &quot;myclass&quot;
</pre>
<h4><a name="0151_0079"><a name="0151_007a">Listing Four<a name="0151_007a"></h4><pre>
<B>(a)</B>
circle &lt;-
function(center, radius, point.on.edge)
{
    center &lt;- as.point(center)
    val &lt;- NULL
    if(length(center$x) == 2) {
            val &lt;- list(center = list(x = center$x[1],
                    y = center$y[1]), radius = sqrt(
                    diff(center$x)^2 + diff(center$y)^2
                    ))
    }
    else if(length(center$x) == 1) {
            if(missing(radius)) {
                    point.on.edge &lt;- as.point(point.on.edge)
            }
            else if(is.atomic(radius)) {
                    val &lt;- list(center = center, radius = abs(radius))
            }
            else {
                    point.on.edge &lt;- as.point(radius)
            }
            if(is.null(val)) {
                    val &lt;- list(center = list(x =
                            center$x[1], y = center$y[1]), radius = sqrt((
                            point.on.edge$x - center$x)^
                            2 + (point.on.edge$y - center$y)^2))
            }
    }
    class(val) &lt;- &quot;circle&quot;
    val
}

<B>(b)</B>
as.point &lt;- 
function(p)
{
        if(is.numeric(p) &amp;&amp; length(p) == 2)
                list(x = p[1], y = p[2])
        else if(is.list(p) &amp;&amp; !is.null(p$x) &amp;&amp; !is.null(p$y))
                p
        else if(is.matrix(p))
                list(x = p[, 1], y = p[, 2])
        else stop(&quot;Cannot interpret input as point&quot;)
}
</pre>
<h4><a name="0151_007b"><a name="0151_007c">Listing Five<a name="0151_007c"></h4><pre>
<B>(a)</B>
&gt; simple.circle &lt;- circle(center = c(0.5, 0.5), radius = 0.25) 
&gt; simple.circle
$center:
$center$:
[1] 0.5
$center$y:
[1] 0.5
$radius:
[1] 0.25
attr(, &quot;class&quot;):
[1] &quot;circle&quot; &quot;closed&quot;

<B>(b)</B>
print.circle &lt;-
function(x, ...)
{
        cat(&quot; Center: x =&quot;, x$center$x, &quot;\n&quot;, 
            &quot;        y =&quot;, x$center$y, &quot;\n&quot;, 
            &quot;Radius:&quot;, x$radius, &quot;\n&quot;)
}

<B>(c)</B>
&gt; simple.circle
 Center: x = 0.5
         y = 0.5
 Radius: 0.25

<B>(d)</B>
draw &lt;-
function(x, ...)
UseMethod(&quot;draw&quot;)

<B>(e)</B>
     draw.circle &lt;-
function(x, ...)
{
        center &lt;- x$center
        radius &lt;- x$radius
        symbols(center, circles = radius, add = T, inches = F, ...)
}
</pre>
<h4><a name="0151_007d"><a name="0151_007e">Listing Six<a name="0151_007e"></h4><pre>
<B>(a)</B>
&gt; Summary.data.frame
function(x, ...)
{
    x &lt;- as.matrix(x)
    if(!is.numeric(x))
        stop(&quot;not defined on a data frame with non-numeric variables&quot;)
    NextMethod(.Generic)
}

<B>(b)</B>
zseven &lt;-
function(x)
{
    if(any(x %% 1 != 0)) {
        x &lt;- as.integer(x)
        warning(&quot;Non-integral values coerced to integer&quot;
                )
    }
    x &lt;- x %% 7
    class(x) &lt;- &quot;zseven&quot;
    x
}

<B>(c)</B>
&gt; zseven(c(5,10,15))
[1] 5 3 1

<B>(d)</B>
print.zseven &lt;-
function(x,...)
{
        x &lt;- unclass(x)
        NextMethod(&quot;print&quot;)
}
</pre>
<h4><a name="0151_007f"><a name="0151_0080">Listing Seven<a name="0151_0080"></h4><pre>
<B>(a)</B>
# Test that e1 is a whole number
    if(is.complex(e1) || any(e1 %% 1 != 0)) stop(
                &quot;Operation not defined for e1&quot;) #
# Allow for unary operators
    if(missing(e2)) {
        if(.Generic == &quot;+&quot;)
                value &lt;-  e1
        else if (.Generic == &quot;-&quot;)
                value &lt;-  - e1
        else value &lt;- !e1
    }

<B>(b)</B>
    else {
        e2 &lt;- unclass(e2)       #
# Test that e2 is a whole number
        if(is.complex(e2) || any(e2 %% 1 != 0)) stop(
                    &quot;Operation not defined for e2&quot;) #
# Treat division as special case
        if(.Generic == &quot;/&quot;)
            value &lt;- e1 * inverse(e2, base = 7)
        else value &lt;- NextMethod(.Generic)
    }

<B>(c)</B>
switch(mode(value),
  numeric = zseven(value),
  logical = value)

<B>(d)</B>
Ops.zseven &lt;-
function(e1, e2)
{
    e1 &lt;- unclass(e1)       #
# Test that e1 is a whole number
    if(is.complex(e1) || any(e1 %% 1 != 0)) stop(
                &quot;Operation not defined for e1&quot;) #
# Allow for unary operators
    if(missing(e2)) {
        if(.Generic == &quot;+&quot;)
                value &lt;-  e1
        else if(.Generic == &quot;-&quot;)
                value &lt;-  - e1
        else value &lt;- !e1
    }
    else {
        e2 &lt;- unclass(e2)       #
# Test that e2 is a whole number
        if(is.complex(e2) || any(e2 %% 1 != 0)) stop(
                    &quot;Operation not defined for e2&quot;) #
# Treat division as special case
        if(.Generic == &quot;/&quot;)
                value &lt;- e1 * inverse(e2, base = 7)
        else value &lt;- NextMethod(.Generic)
    }
    switch(mode(value),
        numeric = zseven(value),
        logical = value)
}
</pre>
<h4><a name="0151_0081"><a name="0151_0082">Listing Eight<a name="0151_0082"></h4><pre>
&quot;/.zseven&quot; &lt;- 
function(e1, e2)
{
    e1 &lt;- unclass(e1)       
    e2 &lt;- unclass(e2)       #
# Test that e1 is a whole number
    if(is.complex(e1) || any(e1 %% 1 != 0)) stop(
                &quot;Operation not defined for e1&quot;) #
# Test that e2 is a whole number
    if(is.complex(e2) || any(e2 %% 1 != 0)) stop(
                &quot;Operation not defined for e2&quot;) #
    zseven(e1 * inverse(e2, base = 7)
}
</pre>
<h4><a name="0151_0083"><a name="0151_0084">Listing Nine<a name="0151_0084"></h4><pre>
inverse &lt;-
function(x, base = 7)
{
        set &lt;- 1:base
        # Find the element e2 of the set such that e2*x=1
        n &lt;- length(x)
        set &lt;- outer(x, set) %% base
        return.val &lt;- numeric(n)
        for(i in 1:n) {
                return.val[i] &lt;- min(match(1, set[i,  ]))
        }
        return.val
}
</pre>
<h4><a name="0151_0085"><a name="0151_0086">Listing Ten<a name="0151_0086"></h4><pre>
<B>(a)</B>
&gt; x7 &lt;- zseven(c(3,4,5))
&gt; y7 &lt;- zseven(c(2,5,6))
&gt; x7 * y7
[1] 6 6 2
&gt; x7 / y7
[1] 5 5 2
&gt; x7 + y7
[1] 5 2 4
&gt; x7 - y7
[1] 1 6 6
&gt; x7 == y7
[1] F F F
&gt; x7 &gt;= y7
[1] T F F
&gt; -x7
[1] 4 3 2

<B>(b)</B>
&gt; -x7 + x7
[1] 0 0 0
</pre>
<h4><a name="0151_0087"><a name="0151_0088">Listing Eleven<a name="0151_0088"></h4><pre>
&quot;[&lt;-.zseven&quot; &lt;- 
function(x, ..., value)
{
    if (is.complex(value) || value %% 1 != 0) 
        stop(&quot;Replacement not meaningful for this value&quot;)
    x &lt;- NextMethod(&quot;[&lt;-&quot;)
    x &lt;- x %% 7
    x
}
</pre>

<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
