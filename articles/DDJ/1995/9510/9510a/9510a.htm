<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>OCT95: Automating Association Implementation in C++</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Automating Association Implementation in C++<a name="0139_0063"><a name="0139_0061"><a name="0139_0000"></h1><P>
<h2>Pointer-based association implementation</h2><P>
<h3>David M. Papurt</h3><P>
<p><i><a name="0139_0062"><a name="0139_0000">David, who is chief technologist at Terasoft Technology (Milford, MA), is the author of Inside the Object Model: The Sensible Use of C++ (SIGS Books, 1995). David can be contacted on CompuServe at 75310,1621.</i></p><hr><P>
Most elements of the object model have parallel C++ language counterparts: The class mechanism maps to abstract data type, const and reference types enforce immutability, inheritance implements generalization, virtual functions correspond to polymorphism, and templates realize metatype. But association, a fundamental component of the object model, has no direct C++ language counterpart. Consequently, you have to implement this capability yourself.<P>
In this article, I'll describe and compare several unidirectional and bidirectional pointer-based alternatives for implementing one-to-one associations: a direct, handwritten implementation; a modular approach that exploits inheritance; and a template-based implementation that eliminates replication of programming steps and corresponds to association implementation by declaration. <P>
My examples implement an analysis model of a one-to-one association between type <I>Inventor</I> (playing the role of creator) and type <I>Contraption</I> (playing the role of invention); see <a href="1995013b.htm">Figure 1</A>. (All figures in this article follow the Object Modeling Technique, or OMT, notation described by Rumbaugh et al. in <I>Object-Oriented Modeling and Design</I>, Prentice-Hall, 1991.) <a href="1995013c.htm">Figure 1</A> indicates that exactly one <I>Contraption</I> object participates (or links) with every <I>Inventor</I> object, and vice versa.<P>
<h3><a name="0139_0064">Unidirectional Implementation<a name="0139_0064"></h3><P>
The first implementation of the <I>Inventor/Contraption</I> one-to-one association is unidirectional. Only one class (<I>Inventor</I>) contains a pointer to the other (<I>Contraption</I>); no reverse pointer is present. <a href="1995013d.htm">Figure 2</A> shows the design model for the uni-directional implementation using pointer-design notation. Class definitions and implementations appear in <a href="#0139_006f">Listing One</A>.<P>
In the unidirectional implementation, association traversal is convenient in the forward direction only, from <I>Inventor</I> to <I>Contraption</I>. The benefits of this implementation include simplicity, minimal storage, and minimal link-update cost (link creation and termination overhead). The class without a pointer is decoupled from the class with a pointer, and maintenance of the reverse pointer is unnecessary.<P>
Backward traversal is complex and inefficient: It requires maintaining and searching a list all <I>Inventor</I> objects. If backward traversal never occurs, of course, the <I>Inventor</I> list is unnecessary.<P>
<h3><a name="0139_0065">Bidirectional Implementation<a name="0139_0065"></h3><P>
In the bidirectional implementation of the <I>Inventor/Contraption</I> one-to-one association, each class contains a pointer to the other participant, making traversal convenient and efficient in either direction; see <a href="1995013e.htm">Figure 3</A>. No artifactual object list must be maintained or searched. Class definitions and implementations appear in <a href="#0139_0071">Listing Two</A>.<P>
Despite the necessary data members, the association's functional interface is poorly designed; simply shielding association-implementation member pointers will not preserve referential integrity: When an <I>Inventor</I>'s pointer addresses a <I>Contraption</I>, there's no mechanism to ensure the <I>Contraption</I>'s pointer addresses that <I>Inventor</I> and no other. Any benefits of bidirectional implementation pale compared with the complexity of link management and the near certainty of incorrect link termination, dangling pointers, and corrupt programs.<P>
These problems can, however, be minimized by adhering to the following criteria:<P>
<UL>
<li>Users should not have direct access to pointer <I>set() </I>functions.</li>
<li>In place of accessible pointer <I>set() </I>functions, the association should have a link-management interface with a function for creating a link between two otherwise unconnected objects and functions for terminating existing links. Users should only be able to modify pointers--in pairs--via link-management functions.</li>
<li>Functions should be available to test for link existence and to traverse the link.</li>
<li>A complete implementation should manage the link correctly upon linked-object construction, destruction, copy construction, and assignment.</li>
</UL>
<h3><a name="0139_0066">Bidirectional Implementation with Link Management<a name="0139_0066"></h3><P>
The third implementation of the <I>Inventor/Contraption</I> one-to-one association is bidirectional with link-management functions. Each class contains a pointer to the other, but functions guaranteed to maintain referential integrity manipulate the pointers.<P>
The design model of this managed implementation is identical to that of the unmanaged implementation in <a href="1995013f.htm">Figure 3</A>; language features not easily expressed by the graphical notation realize the aforementioned design criteria. Class definitions and member-function implementations appear in <a href="#0139_0073">Listing Three</A> with link-management interface-function prototypes. Pointer <I>set() </I>functions are private, so they are inaccessible to users, but the <I>friend </I>link-management functions <I>link()</I> and <I>unlink()</I> manage the pointers and create and terminate links. Pointer <I>get() </I>functions are public, enabling tests for link existence and traversal. Constructors initialize objects as unlinked, and destructors call <I>unlink(),</I> so preserve referential integrity upon object termination. <a href="#0139_006a">Example 1</A> illustrates creating, traversing, and terminating a link.<P>
<B>Link-management function implementation.</B> If, at entry, both argument objects are unlinked, <I>link()</I> sets pointers; if the argument is linked, the two <I>unlink()</I> functions reset pointers; see <a href="#0139_0075">Listing Four</A>. All three link-management functions are written in terms of <I>Inventor</I> and <I>Contraption</I> member functions and do not manipulate pointers directly. This convention enhances order and minimizes the costs of an implementation change.<P>
<B>Copy functions.</B> Generated copy functions violate the inverse-mapping constraint. Copy functions can be overridden three different ways. The simplest is to make copy functions private and not write implementations; see <a href="#0139_0077">Listing Five</A>. If an object participates in associations, it may be appropriate to eliminate assignment, pass by value, and return by value.<P>
<a href="#0139_006b">Example 2</A> shows that a multiplicity of one prevents copy target and source from linking to the same object. Consequently, the second approach implements public copy functions that do not disturb links; see <a href="#0139_0079">Listing Six</A>. The functions copy other source-object information--besides the link--to the target.<P>
In the third method, copy functions copy an entire constellation of linked objects; for example, copying an <I>Inventor</I> also copies its linked <I>Contraption</I>. (This strategy incorporates &quot;deep copy,&quot; a topic beyond the scope of the present discussion. See <I>Data Abstraction and Object-Oriented Programming in C++</I>, by Gorlen, Orlow, and Plexico; John Wiley &amp; Sons, 1990.)<P>
These methods of overriding copy functions for one-to-one associations hold true for any multiplicity association: No matter what the association multiplicity, participating classes can prohibit object copy, implement copy so that links are undisturbed, or copy an entire constellation of linked objects.<P>
<B>Benefits and costs.</B> A managed, bidirectional implementation maintains referential integrity by eliminating the possiblity of incorrect pointer manipulation. Traversal is efficient in both directions. Of course, bidirectional implementation has higher storage and link-update costs than unidirectional implementation, but it is more powerful.<P>
<h3><a name="0139_0067">Modularization via Inheritance<a name="0139_0067"></h3><P>
In general, isolating functionally distinct parts of a program engenders a modular, well-organized program. In this case, it also prepares for type parameterization, a more powerful association-implementation technique described later. <P>
Because an association is independent of the functionality in its associated classes, its implementation can usually be separate, as well. I do this via public inheritance. Normally, the separation is introduced during design: Derived classes and allied <I>friend</I>s implement only the association, and base classes implement all other functionality.<P>
In <a href="19950140.htm">Figure 4</A>, the attributes <I>name </I>and <I>title </I>demonstrate placement of non-association-related functionality in the analysis model. In <a href="19950141.htm">Figure 5</A>, the analysis-model characteristics are distributed over base and derived classes, and the association is implemented bidirectionally with link-management functions. All non<I>-</I>association-related characteristics (here, <I>name</I> and <I>title</I>) go in base classes. Pointers and association functionality are immediate members and friends of derived classes.<P>
<B>Base functionality.</B> Base classes <I>IOther</I> and <I>COther</I> (&quot;Inventor Other&quot; and &quot;Contraption Other&quot;), which implement non<I>-</I>association-related functionality, appear in <a href="#0139_007b">Listing Seven</A>, along with a simple class <I>String</I> containing <I>get()</I> and <I>set()</I> access functions. These classes implement <I>name()</I> and <I>title()</I> attributes. Any functionality, including participation in other associations, is possible in classes <I>IOther</I> and <I>COther</I>.<P>
The objective is to engage <I>IOther</I> and <I>COther</I> in an association without disturbing them, while preserving access to <I>IOther</I> and <I>COther</I> functionality.<P>
<B>Derived classes.</B> The derived classes <I>Inventor</I> and <I>Contraption</I> appear in <a href="#0139_007d">Listing Eight</A> with link-management, interface-function prototypes. Pointer <I>set()</I> functions are private, so they are inaccessible to users. But <I>friend</I>s <I>link()</I> and <I>unlink()</I> manage the pointers and create and terminate links. Pointer <I>follow()</I> functions are public, enabling tests for link existence and traversal. Constructors initialize objects as unlinked, and destructors <I>unlink() </I>objects at termination, before embedded-base-class-object deinitialization.<P>
Derived classes store (and member functions <I>set()</I> and <I>follow()</I> take and return) derived-class pointers, not base-class pointers. Public inheritance enables the selection of base-class members through derived-class pointers, so base-class and derived-class functionality is accessible upon link traversal. For example, <I>Inventor::follow()</I> yields a <I>Contraption *</I>, through which both <I>COther</I> and <I>Contraption</I> member functions can be called.<P>
Base-class constructor arguments propagate and become derived-class constructor arguments. Derived-class constructors simply pass the propagated arguments to base-class constructors in the initialization list.<P>
<B>Link-management-function implementation.</B> Link-management-function implementations appear in <a href="#0139_007f">Listing Nine</A>. If, at entry, both argument objects are unlinked, <I>link()</I> sets pointers; if the argument is linked, the two <I>unlink()</I> functions reset pointers. All three link-management functions are written in terms of <I>Inventor</I> and <I>Contraption</I> member functions; they do not manipulate pointers directly.<P>
<B>Use.</B> <a href="#0139_006c">Example 3</A> demonstrates the <I>Inventor/Contraption</I> one-to-one association-independent implementation. Function <I>print()</I> in <a href="#0139_006c">Example 3(a)</A> calls base class <I>IOther</I> and derived class <I>Inventor</I> member functions on derived class <I>Inventor</I> reference argument <I>I</I>. <I>I.name()</I> executes <I>IOther::name()</I>. <I>I.follow()</I> executes <I>Inventor::follow()</I>, and yields a <I>Contraption*</I> derived-class pointer. Base class <I>COther</I> member function <I>title()</I> is called through this pointer. Function <I>main()</I> in <a href="#0139_006c">Example 3(b)</A> builds a constellation of objects and calls <I>print()</I>. The program generates the output in <a href="#0139_006c">Example 3(c)</A>.<P>
The scheme described here can append a one-to-one association onto any pair of classes, without disturbing existing classes, while maintaining access to existing functionality. Similar schemes can implement other multiplicity and typed associations.<P>
<h3><a name="0139_0068">Association by Declaration with Templates<a name="0139_0068"></h3><P>
An even more modular and reusable method of association implementation incorporates templates. As in the previous approach, association implementation is separated from other functionality during design. But, whereas previously, each association implementation was written by hand, here, association functionality is written once in cooperating templates and instantiated later.<P>
This powerful method enables association implementation by declaration. Once preserved in modules of cooperating templates, an association can be implemented as simply as other object-model components that have direct language support, like generalization or polymorphism, for example.<P>
<a href="19950142.htm">Figure 6</A> shows analysis-model characteristics distributed over base and derived classes. All <I>Inventor/Contraption</I> characteristics except the association go in base classes. Pointers and association functionality are immediate members and <I>friend</I>s of derived classes. Here, <I>Inventor</I> and <I>Contraption</I> are instances of the <I>Left</I> and <I>Right</I> association templates, as well as derived classes.<P>
<B>Base functionality.</B> Revised base classes <I>IOther</I> and <I>COther</I>, which implement non<I>-</I>association-related functionality, appear in <a href="#0139_0081">Listing Ten</A>. Except for the required default constructors (discussed later), these classes are identical to <a href="#0139_007b">Listing Seven</A>. Again, any functionality is possible in classes <I>IOther</I> and <I>COther</I>.<P>
The objective is to engage <I>IOther</I> and <I>COther</I> in an association by the two-line declaration in <a href="#0139_006d">Example 4(a)</A>, without disturbing <I>IOther</I> and <I>COther</I>, while preserving access to <I>IOther</I> and <I>COther</I> functionality. In the code, <I>Inventor</I> and <I>Contraption</I> are <I>typedef</I>s of cooperating template instances.<P>
<B>Parameterized derived-class templates.</B> Cooperating class templates <I>L1to1</I> and <I>R1to1</I> (short for left and right one-to-one) and link-management interface-function template prototypes appear in <a href="#0139_0083">Listing Eleven</A>. <I>L1to1</I>, <I>R1to1</I>, <I>link()</I>, and <I>unlink()</I> are parameterized versions of the nontemplates in <a href="#0139_007d">Listing Eight</A>. Besides parameterization, the templates work like the nontemplates.<P>
Declarations that bind actual types to formal parameters <I>LB </I>and <I>RB </I>(short for left and right base class) instantiate the class templates. An actual class <I>L1to1&lt;LB,RB&gt;</I> inherits from the actual class bound to <I>LB</I>. Similarly, <I>R1to1&lt;LB,RB&gt;</I> inherits from <I>RB</I>. <I>L1to1&lt;LB,RB&gt;</I> contains a pointer member to <I>R1to1&lt;LB,RB&gt;</I>, and vice versa. Derived-class pointers enable access to derived- and base-class functionality.<P>
The class templates constrain the actual types that can bind to formals <I>LB</I> and <I>RB</I>: <I>LB</I> and <I>RB</I> must be class types and have default constructors and destructors. Since the class templates are written separately from any base class eventually used for instantiation, base-class constructor arguments cannot be propagated into derived-class constructor signatures.<P>
<B>Parameterized link-management-function implementation.</B> Implementations of link-management interface-function templates appear in <a href="#0139_0085">Listing Twelve</A>. If, at entry, both argument objects are unlinked, function template <I>link()</I> sets pointers; if the argument is linked, the two <I>unlink()</I> function templates reset pointers.<P>
<B>Use.</B> Any pair of classes bound to formals <I>LB </I>and <I>RB </I>that have default constructors and destructors can instantiate <I>L1to1</I> and <I>R1to1</I>. Thus, <I>typedef</I>s like those in <a href="#0139_006d">Example 4(a)</A> can create an association between an arbitrary pair of classes. Since <I>Inventor</I> is an alternate name for actual class <I>L1to1&lt;IOther,COther&gt;</I>, it inherits from <I>IOther</I> and implements one side of the <I>Inventor/Contraption</I> association. Similarly, <I>Contraption</I> inherits from <I>COther</I>, and implements the other side of the association.<P>
The <I>print()</I> function in <a href="#0139_006d">Example 4(b)</A> executes base class <I>IOther</I> functionality on derived class <I>Inventor</I> reference argument <I>I</I>. The function tests <I>I.follow()</I> and traverses the link. The member function <I>title()</I> of the base class <I>COther</I> is called through the derived class <I>Contraption *</I> pointer returned from <I>I.follow()</I>. The <I>main()</I> function in <a href="#0139_006d">Example 4(c)</A> builds a constellation of objects and calls <I>print()</I>. The program generates the output in <a href="#0139_006d">Example 4(d)</A>.<P>
<h3><a name="0139_0069">Conclusion<a name="0139_0069"></h3><P>
Template-based associations yield well-designed, declaration-generated bidirectional implementations. Once a template module is written, the templates can implement an arbitrary number of associations between arbitrary classes. The scheme can even append multiple associations onto a single class.<P>
On the downside, the actual types that bind to template formal parameters are constrained: Any base class to which an association is appended must have a default constructor, and type-specific base-class constructor arguments cannot be propagated into derived-class constructor signatures. This, in turn, forces separate &quot;initialization&quot; after associated-object creation, reducing the utility of constructors and effectively returning the responsibility of object initialization to the programmer.<P>
The scheme I've described here can append a one-to-one typed association onto arbitrary classes. Other multiplicity and style associations can be implemented similarly. The approach is useful for quickly solving many programming problems in a variety of contexts.<P>
<B><a href="19950143.htm">Figure 1</A>:</B> Analysis model of sample one-to-one association for demonstrating association implementation.<P>
<B><a href="19950144.htm">Figure 2</A>:</B> Design model of Inventor/Contraption one-to-one association unidirectional implementation.<P>
<B><a href="19950145.htm">Figure 3</A>:</B> Design model of Inventor/Contraption one-to-one association bidirectional implementation.<P>
<B><a href="19950146.htm">Figure 4</A>:</B> Analysis model of Inventor/Contraption one-to-one association for demonstrating independent association implementation.<P>
<B><a href="19950147.htm">Figure 5</A>:</B> Design model of Inventor/Contraption one-to-one association-independent implementation.<P>
<B><a href="19950148.htm">Figure 6</A>:</B> Design model of Inventor/Contraption one-to-one association implementation by declaration.<P>
<a name="0139_006a"><B>Example 1:</B> Sample code demonstrating link creation, traversal, and termination.<a name="0139_006a"><P><PRE>
int main()
{
    Inventor edison;            // unlinked
    Contraption lightbulb;      // unlinked
    link( edison, lightbulb );  // create
    Contraption * p = edison.invention();
                               // traverse
    . . .
    unlink( edison );           // terminate
    return 0;
}</PRE>
<a name="0139_006b"><B>Example 2:</B> Sample code illustrating that copy target and source cannot link to the same object.<a name="0139_006b"><PRE>
Inventor edison;
Contraption lightbulb;
link( edison, lightbulb );
Inventor bell = edison;
   // bell and edison cannot both link to
   // lightbulb after copy construction
Inventor salk;
Contraption polioVaccine;
link( salk, polioVaccine );
salk = edison;
    // salk and edison cannot both link to
    // lightbulb after assignment</PRE>
<a name="0139_006c"><B>Example 3:</B> Sample code demonstrating use of inheritance-based association.<a name="0139_006c"><PRE>
(a)
void print( Inventor &amp; I )
{
    cout  &lt;&lt;&quot;Inventor: &quot;
          &lt;&lt; I.name()    // Base class member
          &lt;&lt; '\n'
          &lt;&lt; &quot;Invention: &quot;;
    if ( I.follow() )
    {
        cout &lt;&lt; I.follow()-&gt;title();
            // Base class member function
            // title() called through pointer
    }
    else
    {
        cout  &lt;&lt;&quot;None!&quot;;
    }
    cout &lt;&lt; &quot;\n\n&quot;;
}

(b)
int main()
{
    Inventor i( &quot;Aaron&quot; );
    Inventor j( &quot;Dave&quot; );
    Contraption c( &quot;Measurement Device&quot; );
    link( i, c );
    print( i );
    print( j );
    return 0;
}


(c)
Inventor: Aaron
Invention: Measurement Device

Inventor: Dave
Invention: None!
</PRE>
<a name="0139_006d"><B>Example 4:</B> Sample code demonstrating use of template-based association.<a name="0139_006d"><PRE>
(a)
typedef L1to1&lt;IOther,COther&gt; Inventor;
typedef R1to1&lt;IOther,COther&gt; Contraption;

(b)
void print( Inventor &amp; I )
{
    cout  &lt;&lt;&quot;Inventor: &quot;
          &lt;&lt; I.name()    // Base class member
          &lt;&lt;'\n'
          &lt;&lt;&quot;Invention: &quot;;
    if ( I.follow() )
    {
        cout &lt;&lt; I.follow()-&gt;title();
            // Base class member function
            // title() called through pointer
    }
    else
    {
        cout  &lt;&lt; &quot;None!&quot;;
    }
    cout  &lt;&lt; &quot;\n\n&quot;;
}

(c)
int main()
{
    Inventor i, j;
    i.name( &quot;Dave&quot; );
    j.name( &quot;Aaron&quot; );
    Contraption c;
    c.title( &quot;Protective Device&quot; );
    link( i, c );
    print( i );
    print( j );
    return 0;
}


(d)
Inventor: Dave<P>Invention: Protective Device<P><P>Inventor: Aaron<P>Invention: None!</pre><P>
<P>
<h4><a name="0139_006e"><a name="0139_006f">Listing One<a name="0139_006f"></h4><pre>
// *****************************************
// Unidirectional association implementation
// *****************************************
class Contraption;
class Inventor
{
    Contraption * c;
public:
    Inventor( Contraption * cr ) : c(cr) {}
        // Forward traversal
    Contraption * invention() { return c; }
    void invention(Contraption * cr) { c=cr; }
};
class Contraption
{
    . . .
public:
    Contraption();
    // Reverse traversal difficult
    // Inventor * creator();
    // void creator( Inventor * );
};
</pre>
<h4><a name="0139_0070"><a name="0139_0071">Listing Two<a name="0139_0071"></h4><pre>
// ****************************************
// Bidirectional association implementation
// ****************************************
class Contraption;
class Inventor
{
    Contraption * c;
public:
    Inventor() : c(0) {}
        // Forward traversal
    Contraption * invention() { return c; }
    void invention(Contraption * cr) { c=cr; }
};
class Contraption
{
    Inventor * i;
public:
    Contraption() : i(0) {}
        // Reverse traversal
    Inventor * creator() { return i; }
    void creator( Inventor * ir ) { i = ir; }
};
</pre>
<h4><a name="0139_0072"><a name="0139_0073">Listing Three<a name="0139_0073"></h4><pre>
// *************************************************************
// Bidirectional association implementation with link management
// *************************************************************
class Contraption;
class Inventor
{
    Contraption * c;
    void invention(Contraption * cr) { c=cr; }
public:
    Inventor() : c(0) {}
    ~Inventor() { unlink(*this); }
    Contraption * invention() { return c; }
        // link management interface
    friend void link( Inventor &amp;, Contraption &amp; );
    friend void unlink( Inventor &amp; );
    friend void unlink( Contraption &amp; );
};
class Contraption
{
    Inventor * i;
    void creator( Inventor * ir ) { i = ir; }
public:
    Contraption() : i(0) {}
    ~Contraption() { unlink(*this); }
    Inventor * creator() { return i; }
        // link management interface
    friend void link( Inventor &amp;, Contraption &amp; );
    friend void unlink( Inventor &amp; );
    friend void unlink( Contraption &amp; );
};
</pre>
<h4><a name="0139_0074"><a name="0139_0075">Listing Four<a name="0139_0075"></h4><pre>
// ****************************************
// Link management function implementations
// ****************************************
void link( Inventor &amp; I, Contraption &amp; C )
{
    if( !I.invention() &amp;&amp; !C.creator() )
    {
        I.invention( &amp;C );
        C.creator(   &amp;I );
    }
}
void unlink( Inventor &amp; I )
{
    if ( I.invention() )
    {
        I.invention()-&gt;creator(0);
        I.invention(0);
    }
}
void unlink( Contraption &amp; C )
{
    if ( C.creator() )
    {
        C.creator()-&gt;invention(0);
        C.creator(0);
    }
}
</pre>
<h4><a name="0139_0076"><a name="0139_0077">Listing Five<a name="0139_0077"></h4><pre>
// *****************************
// Prohibition of copy functions
// *****************************
class Inventor
{
private:
    Inventor( const Inventor &amp; );
    Inventor &amp; operator=( const Inventor &amp; );
        // COPY FUNCTIONS NOT IMPLEMENTED!
    . . .
};
</pre>
<h4><a name="0139_0078"><a name="0139_0079">Listing Six<a name="0139_0079"></h4><pre>
// *******************************************
// Copy functions that leave links undisturbed
// *******************************************
Inventor::Inventor( const Inventor &amp; r )
: c(0)
  // Initialize other members
{}
Inventor &amp; Inventor::operator=( const Inventor &amp; r )
{
    if ( this != &amp;r )
    {
        // Do not call link(), or unlink(), or otherwise disturb c or r.c.
        //
        // Assign other members
    }
    return *this;
}
</pre>
<h4><a name="0139_007a"><a name="0139_007b">Listing Seven<a name="0139_007b"></h4><pre>
// *******************************************************************
// Base functionality for inheritance based association implementation
// *******************************************************************
class String
{
    . . .
public:
    String( char * );
    ~String();
    char * get();
    void set( char * );
};
class IOther    // Inventor Other functionality
{
    String nm;
    . . .
public:
    IOther(char * p) : nm(p) {}
    ~IOther() {}
    char * name() { return nm.get(); }
    void name(char * p) { nm.set(p); }
    . . .
};
class COther    // Contraption Other functionality
{
    String tl;
    . . .
public:
    COther(char * p) : tl(p) {}
    ~COther() {}
    char * title() { return tl.get(); }
    void title(char * p) { tl.set(p); }
    . . .
};
</pre>
<h4><a name="0139_007c"><a name="0139_007d">Listing Eight<a name="0139_007d"></h4><pre>
// ******************************************************
// Derived classes implementing association functionality
// ******************************************************
class Contraption;
class Inventor : public IOther
{
    Contraption * c;
    void set(Contraption * cr)  { c = cr; }
public:
        // Base class constructor arguments
        // propagate to derived class constructor
    Inventor(char * p)
    : IOther(p),
      c(0)
    {}
    ~Inventor() { unlink(*this); }
    Contraption * follow() { return c; }
        // link management interface
    friend void link( Inventor &amp;, Contraption &amp; );
    friend void unlink( Inventor &amp; );
    friend void unlink( Contraption &amp; );
};
class Contraption : public COther
{
    Inventor * i;
    void set( Inventor * ir ) { i = ir; }
public:
    Contraption(char * p)
    : COther(p),
      i(0)
    {}
    ~Contraption() { unlink(*this); }
    Inventor * follow() { return i; }
        // link management interface
    friend void link( Inventor &amp;, Contraption &amp; );
    friend void unlink( Inventor &amp; );
    friend void unlink( Contraption &amp; );
};
</pre>
<h4><a name="0139_007e"><a name="0139_007f">Listing Nine<a name="0139_007f"></h4><pre>
// ********************************************
// Link management function implementations for
// inheritance based association implementation
// ********************************************
void link( Inventor &amp; I, Contraption &amp; C )
{
        // link only if both arguments are
        // unlinked at entry
    if( !I.follow() &amp;&amp; !C.follow() )
    {
        I.set( &amp;C );
        C.set( &amp;I );
    }
}
void unlink( Inventor &amp; I )
{
        // unlink only if linked
    if ( I.follow() )
    {
        I.follow()-&gt;set(0);
        I.set(0);
    }
}
void unlink( Contraption &amp; C )
{
        // unlink only if linked
    if ( C.follow() )
    {
        C.follow()-&gt;set(0);
        C.set(0);
    }
}
</pre>
<h4><a name="0139_0080"><a name="0139_0081">Listing Ten<a name="0139_0081"></h4><pre>
// ****************************************************************
// Base functionality for template-based association implementation
// ****************************************************************
class IOther    // Inventor Other functionality
{
    String nm;
    . . .
public:
    IOther(char * p = &quot;&quot;) : nm(p) {}
    ~IOther() {}
    char * name() { return nm.get(); }
    void name(char * p) { nm.set(p); }
    . . .
};
class COther    // Contraption Other functionality
{
    String tl;
    . . .
public:
    COther(char * p = &quot;&quot;) : tl(p) {}
    ~COther() {}
    char * title() { return tl.get(); }
    void title(char * p) { tl.set(p); }
    . . .
};
</pre>
<h4><a name="0139_0082"><a name="0139_0083">Listing Eleven<a name="0139_0083"></h4><pre>
// **************************************************************
// Derived class templates implementing association functionality
// **************************************************************
template &lt;class LB, class RB&gt; class L1to1;
template &lt;class LB, class RB&gt; class R1to1;
    // Forward declarations
template &lt;class LB, class RB&gt;
void link(L1to1&lt;LB,RB&gt; &amp; L,R1to1&lt;LB,RB&gt; &amp; R);
template &lt;class LB, class RB&gt;
void unlink( L1to1&lt;LB,RB&gt; &amp; L );
template &lt;class LB, class RB&gt;
void unlink( R1to1&lt;LB,RB&gt; &amp; R );
    // Function template prototypes
template &lt;class LB, class RB&gt;
class L1to1 : public LB
{
    R1to1&lt;LB,RB&gt; * r;
    void set( R1to1&lt;LB,RB&gt; * p ) { r = p; }
public:
    L1to1() : LB(), r(0) {}
    ~L1to1() { unlink(*this); }
    R1to1&lt;LB,RB&gt; * follow() { return r; }
    friend void  link( L1to1&lt;LB,RB&gt; &amp;,  R1to1&lt;LB,RB&gt; &amp; );
    friend void unlink( L1to1&lt;LB,RB&gt; &amp; );
    friend void unlink( R1to1&lt;LB,RB&gt; &amp; );
};
template &lt;class LB, class RB&gt;
class R1to1 : public RB
{
    L1to1&lt;LB,RB&gt; * l;
    void set( L1to1&lt;LB,RB&gt; * p ) { l = p; }
public:
    R1to1() : RB(), l(0) {}
    ~R1to1() { unlink(*this); }
    L1to1&lt;LB,RB&gt; * follow() { return l; }
    friend void  link( L1to1&lt;LB,RB&gt; &amp;,  R1to1&lt;LB,RB&gt; &amp; );
    friend void unlink( L1to1&lt;LB,RB&gt; &amp; );
    friend void unlink( R1to1&lt;LB,RB&gt; &amp; );
};
</pre>
<h4><a name="0139_0084"><a name="0139_0085">Listing Twelve<a name="0139_0085"></h4><pre>
// ******************************************************
// Parameterized link management function implementations
// for template based association implementation
// ******************************************************
template &lt;class LB, class RB&gt;
void link(L1to1&lt;LB,RB&gt; &amp; L, R1to1&lt;LB,RB&gt; &amp; R)
{
        // link only if both objects are unlinked at entry
    if( !L.follow() &amp;&amp; !R.follow() )
    {
        L.set( &amp;R );
        R.set( &amp;L );
    }
}
template &lt;class LB, class RB&gt;
void unlink( L1to1&lt;LB,RB&gt; &amp; L )
{
        // unlink only if linked at entry
    if ( L.follow() )
    {
        L.follow()-&gt;set(0);
        L.set(0);
    }
}
template &lt;class LB, class RB&gt;
void unlink( R1to1&lt;LB,RB&gt; &amp; R )
{
        // unlink only if linked at entry
    if ( R.follow() )
    {
        R.follow()-&gt;set(0);
        R.set(0);
    }
}
</pre>

<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
