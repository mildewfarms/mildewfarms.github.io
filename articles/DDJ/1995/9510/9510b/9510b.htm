<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>OCT95: Object-Oriented Facilities in Ada 95</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Object-Oriented Facilities in Ada 95<a name="0149_0065"><a name="0149_0063"><a name="0149_0000"></h1><P>
<h2>Safety plus object-oriented capabilities</h2><P>
<h3>David L. Moore</h3><P>
<p><i><a name="0149_0064"><a name="0149_0000">David is a compiler writer of long standing. He was a proselytizer of Pascal, worked on the Apex Ada development environment at Rational Corp., and is the author of FTL Modula-2.</i></p><hr><P>
After programming in both Ada and C++, I've come to appreciate the power, safety, and maintainability of Ada programs as well as the advantages of C++ object-oriented paradigm. With the Ada 95 standard, I no longer have to choose between the two.<P>
C++ programmers may not realize that the new Ada standard provides object-oriented facilities. In Ada 95, polymorphism is implicit: It is a result of the way you call functions, not how you declare them. Also, there are no &quot;classes&quot;--object types now appear as &quot;Tagged Records&quot; (structures), while subclasses are created using type derivation.<P>
In <a href="#0149_006e">Example 1</A>, for instance, <I>Point</I> is an old-fashioned, non-object-oriented Ada record from which a type <I>Size</I> has been derived. Size is identical to <I>Point</I>, but it is a different type. If you attempted to assign a <I>Point </I>to a<I> Size</I>, you would get a compilation error. To make the assignment work, you would have to cast the <I>Point </I>to a <I>Size</I>, like so: <I>s:=Size(p);</I>.<P>
Type derivation is very useful for separating objects that are represented the same way but are logically different. In most languages, when building tables in arrays, only pointers can protect against use of a wrong index. In Ada 95, deriving index types from integer achieves the same result. The new standard extends this type-derivation concept to provide full object orientation.<P>
<h3><a name="0149_0066">Ada's OO Facilities<a name="0149_0066"></h3><P>
<a href="#0149_006f">Example 2(a)</A> defines a type <I>Object</I> with two varieties of a <I>Move</I> routine and a function that determines the extent (in <I>x</I> and <I>y</I>) of an <I>Object</I>. The functions are primitive operations of the tagged type because they immediately follow the declaration. (Actually, the rule is a little looser, but it's good practice to declare all user-defined primitive operations immediately after the type declaration.)<P>
As <a href="#0149_006f">Example 2(b)</A> illustrates, Ada supports named parameters. This is useful for procedures with default parameters. The last of the calls in <a href="#0149_006f">Example 2(b)</A> uses the construct <I>Size'(1,1),</I> the Ada syntax for an aggregate constant. That is, it creates a constant of type <I>Size</I> with field values of 1.<P>
<a href="#0149_006f">Example 2(c)</A> shows the derivation of a <I>Line</I> type from the <I>Object</I> type. The record type <I>Line</I> contains the fields of <I>Object,</I> together with a new field. The <I>Move</I> and <I>Extent</I> procedures are primitive operations of the <I>Object</I> type because they are defined immediately after the type declaration. The <I>Move</I> routines will work just as well for a <I>Line</I> as for a base <I>Object</I>, but the extent of a Line is different, so you have to override the Extent function.<P>
<h3><a name="0149_0067">Class-Wide Objects<a name="0149_0067"></h3><P>
Suppose that the implementation of <I>Move</I> needed to determine the extent of an object. If, inside <I>Move</I>, you call <I>Extent(obj)</I>, the extent for <I>Object </I>will be called. You want to call the <I>Extent</I> belonging to the type of object actually passed to <I>Move</I>. You do this with a class-wide type; see <a href="#0149_0070">Example 3(a)</A>.<P>
The phrase <I>Object'class</I> demonstrates type conversion. The <I>Object'class</I> type covers all the types in the derivation tree of which <I>Object</I> is a member. Note that <I>Line'class</I> and <I>Object'class</I> represent the same type; there is one class-wide type for any tree of derivations, rather than one for every subtree.<P>
Whenever a parameter in a call to a primitive operation has a class-wide type, as in the call to <I>Extent</I> in <a href="#0149_0070">Example 3(a)</A>, the procedure call becomes a dispatching call and the function associated with the actual type of <I>obj</I> will be called. Therefore, you could write it like <a href="#0149_0070">Example 3(b)</A>, where <I>o_c</I> is a local variable of class-wide type. Because it has a class-wide type and is of indeterminate size until given a value, the call must be initialized at the time of declaration. Any calls that use <I>o_c</I> will be dispatching. (Notice that <I>o_c</I> is a stack-based variable, not a pointer to some object on the heap.)<P>
Of course, you can also declare a parameter to a subroutine to be a class-wide type; in this case, an object of any type in the derivation tree can be passed as a parameter.<P>
<h3><a name="0149_0068">Private Types and Child Packages<a name="0149_0068"></h3><P>
All of the fields and subprograms I've declared to this point have been public. Ada also supports private fields and subprograms. In Ada, a private object is private to the package in which it is declared, not to the type itself. to make all the fields of <I>Object</I> and <I>Line</I> private, the previous declarations should look like <a href="#0149_0071">Example 4(a)</A>, which is a complete specification package for these types. In addition, a package body would contain implementations for all the procedures declared in the specification. <I>Line</I> is derived directly from <I>Object</I> in both the public and the private parts of the package specification. In fact, you could derive <I>Line</I> from a type derived from <I>Object</I> in the private part, even though <I>Line</I> was declared as derived directly from <I>Object</I> in the public part. This means that the actual hierarchy of derivation, and the internals of the types themselves, can be hidden from the package's clients.<P>
You could declare additional primitive subprograms immediately following the completion of the declarations in the private parts. The subprograms would be private to the package, but primitive on the declared types and so would take part in dispatching when appropriate.<P>
In Ada, it is an error if there is no implementation in the package body for anything declared in the package specification: You never have to hunt for a missing definition when a program fails to link. In some languages, if the parameter profiles in the declaration and definition of a procedure do not match, you will also get an undefined external at link time. In Ada, the problem will be found when you attempt to compile the package body.<P>
However, because private parts of a record are visible only in the package in which they are declared, package bodies can grow very large. Further, any derived type that needs access to those private details must be in the same package as the original declaration. This would also tend to make packages large and produce large recompilations every time a new type was added or any derived type was changed.<P>
Ada 95 overcomes this with the concept of a &quot;child package,&quot; which is physically separate from its parent package, but logically part of it.<P>
For example, suppose you want to derive a type for a circle from the <I>Object</I> type, and you need access to the private part of <I>Object</I>. Without touching the <I>Graphical_Objects</I> package, you can declare the type as in <a href="#0149_0071">Example 4(b)</A>. This child package will act as if it were a package nested inside the <I>Graphical_Objects</I> package. Nested packages are common, but in this case, both the specification and the body can be in separate files. A change made in the specification of this child package will not cause recompilation of packages that use only the parent package.<P>
The child package also provides convenient support for third-party libraries. A user can extend a supplied package without the entire source.<P>
<h3><a name="0149_0069">Constructors and Destructors<a name="0149_0069"></h3><P>
The types I've examined so far do not have constructors or destructors. Types that have the Ada equivalent of constructors and destructors are called &quot;controlled types.&quot;<P>
To declare a controlled type, you derive from a predefined type from the standard package <I>System.Finalization</I>. Suppose you want to keep all instances of a type chained together. The code would look like <a href="#0149_0072">Example 5</A>. For the moment, examine the public part of the specification that derives a new type from the type <I>Controlled,</I> which is imported from the predefined package <I>Finalization</I>. In Ada, all classes that have constructors and destructors are derived from a type in <I>Finalization</I> that is a child package of the System package<I>,</I> which contains information about a particular implementation of Ada and is always implicitly available. <P>
I've declared three procedures: <I>Initialize</I>, called immediately after an object is initialized with default values; <I>Duplicate</I>, called immediately after an object is assigned a new value; and <I>Finalize</I>, called immediately before an object is destroyed. <P>
Consequently, if both <I>a</I> and <I>b</I> are chained objects and you assign <I>a</I> to <I>b</I> (<I>b:=a;</I>), <I>Finalize</I> will first be called for <I>b</I> to finalize the value about to be overwritten. The value is copied, and <I>Duplicate</I> is called to clean it up. The procedures are, of course, called implicitly by the compiler.<P>
Remember that in Ada you can specify a record statically, as illustrated in <a href="#0149_0070">Example 3</A> in the last call to <I>move,</I> which passed a constant Size record as a parameter using the construct <I>Size'(1,1)</I>. You could also do this for the <I>Object</I> and <I>Line</I> types. In <a href="#0149_0073">Example 6</A>, for instance, you can omit the type mark <I>(Object')</I> when it is known from the context. In this case, the values would be assigned to the object, and then <I>Initialize</I> would be called. Obviously, <I>Duplicate</I> and <I>Initialize</I> will often be the same (as in <a href="#0149_0073">Example 6</A>), so you can just rename <I>Duplicate</I> to <I>Initialize</I>. The ability to declare a procedure and define it as a rename of another was added as part of the new standard.<P>
Alternatively, you can give fields in records default values. This is also done before <I>Initialize</I> is called. <P>
<h3><a name="0149_006a">Multiple Inheritance<a name="0149_006a"></h3><P>
Multiple inheritance is not part of the Ada 95 standard because it is expensive. It can also cause unexpected surprises with dispatching.<P>
However, some benefits of multiple inheritance can be achieved in other ways. One example is &quot;mixins.&quot; If you want a list of some object, you mix in the object with a list class to produce a new class that is both a list and the original class.<P>
Even in C++, this is better done with a template than with multiple inheritance, because types derived from the original type can also be included in the list. With a mixin, only objects inherited from the mixin can be contained in the list. Also, the original type can be held in many different containers.<P>
Another facility that can model some of the semantics of multiple inheritance is an &quot;access discriminant.&quot; This allows an object that is a field in a record to access that record. It does not mix the primitive operations of two types together, but this can be made easier with a suitable generic.<P>
<h3><a name="0149_006b">Other Ada Additions<a name="0149_006b"></h3><P>
While object orientation is the Ada 95 feature that's likely to be of greatest interest to non-Ada programmers, the language has also improved in other ways:<P>
Access types. &quot;Access type&quot; is the Ada term for a pointer. <a href="#0149_0072">Example 5</A> uses an access type to reference a variable, as in <I>chn.prev.next</I>. You do not need a special symbol between the fields (as with C and Pascal), so you can change an object with a record type into an object containing a pointer to that record type without editing large amounts of code. <P>
This &quot;locality of maintenance&quot; principle  is important in Ada, especially in large projects. The goal is that local changes to code should be both easy and safe. In some cases, this happens automatically. In others, it requires extra work when the code is originally written; for example, using named parameters to subroutines, or avoiding &quot;others&quot; clauses in case statements and array definitions, so that a compilation error will be raised when new arms need to be added.<P>
An alternative to referencing a variable is to create an access variable for a procedure. This is an improvement over Ada 83, where to pass a procedure as a parameter, you created a generic and instantiated it with that procedure as a parameter. (This was fine for Ada code but afforded no standard way to pass callback procedures to APIs like X.)<P>
Finally, some changes support object orientation. You can declare access types to class-wide types (<I>type T is access Object'class</I>). You can also declare parameters to procedures (type <I>access to Object</I>) and have dispatching occur on the actual operand. In other words, dispatching will work for procedures that pass around pointers, as well as procedures that pass the actual objects.<P>
Decimal Types. Ada has always had fixed-point types that allow the expression of fractional numbers without using floating point. A typical declaration looked like this: <I>type hundredths is delta 0.01 range -10.0 .. 10.0</I>, which seems ideal for money calculations.<P>
Unfortunately, the values of this type were represented in binary, essentially as an integer with an implied binary point seven bits from the right. So the value 0.01 was represented as 1/128. From here on, it is steadily downhill if you want results accurate to the penny.<P>
With the new standard, you can declare types that do decimal arithmetic accurately. Instead of the previous declaration, you would write: <I>type Money is delta 0.01 digits 8;,</I> which will perform money calculations correctly. It will hold values up to (but not including) one million dollars. Multiplication of money values can be either truncated (the default) or rounded using the form <I>Money'round(a*b),</I> where <I>a</I> and <I>b</I> can be any decimal types.<P>
Such values can also be formatted using pictures similar to those found in Cobol, making Ada a serious alternative to Cobol for business applications.<P>
Modular Types. Traditional Ada lacked unsigned values that could take on any value allowed by the size of a word. That is, unsigned types could only be a subrange of integer values. With Ada 95, full unsigned types are available. Because their main use is in system programming, they differ from traditional integral types in that:<P>
<UL>
<li>They do not overflow--they wrap around. Adding 1 to the largest value will produce 0, rather than raising an exception.</li>
<li>And, Or, and Xor are defined so that bit operations can be performed. Ada has always had other facilities to do bit operations. For example, you could map record structures to bit-exact addresses to directly access hardware-control registers. Even so, these new types are a useful addition.</li>
</UL>
Generic formal packages. Ada has always had a powerful generic capability, but the number of parameters to a generic could grow very long when a generic was used to extend the operations on a type created by instantiating another generic. You sometimes ended up passing as a parameter every subroutine exported from the first generic into the second.<P>
Ada 95 allows a generic package to be passed as a parameter to another generic. When this second generic is instantiated, the name of an instantiation of the first generic is supplied for the parameter. <P>
New tasking constructs. Ada has always had tasking built into the language. This makes it attractive for applications that need to take advantage of multithreaded operating systems. The original tasking was rather cumbersome, but a new &quot;protected type&quot; simplifies control of concurrency in tasking programs. Although it has its own syntax, it is essentially a package; it has a specification and a body. <P>
In a package, any number of procedures and functions can be executed simultaneously by different tasks. In a protected type, one procedure must complete before another can be entered, so any task that tries to make such a call will be queued until the procedure can be entered. Any number of functions in the protected type can be active at once, but a function cannot be active while a procedure is active. Hence, protected types allow us to implement the classic &quot;n readers, 1 writer&quot; protection mechanism.<P>
The second facility is the ability to execute code that is to be aborted, either after a given interval or when some other event occurs. <a href="#0149_0074">Example 7</A>, for instance, spends ten seconds trying to prove Fermat's last theorem, then aborts and grumbles about the tightness of the margin.<P>
<h3><a name="0149_006c">Conclusion<a name="0149_006c"></h3><P>
This article covers only the highlights of the new standard. There are also detailed interfaces to other languages, including C, Fortran, and Cobol. Other annexes include distributed computing, real time, systems programming, and numerics for scientific programming.<P>
<h3><a name="0149_006d">References<a name="0149_006d"></h3><P>
Barnes, J.G.P. <I>Programming in Ada</I>, Fourth Edition. Reading, MA: Addison-Wesley, 1994.<P>
GNU Ada compiler (GNAT). Available from cs.nyu.edu /pub/gnat. http://lgl-www.epfl.ch/Ada/.<P>
<I>Information Technology: Programming Language Ada, ISO/IEC 8652:1995.</I><P>
Netnews conference on Ada.comp.lang.ada.<P>
<a name="0149_006e"><B>Example 1:</B> An old-fashioned Ada record (not object oriented).<a name="0149_006e"><PRE>
type Point is record
    x : integer;
    y : integer;
    end record;
type Size is new Point;</PRE>
<a name="0149_006f"><B>Example 2:</B> (a) Defining a type Object; (b) supporting named parameters; (c) deriving a Line type from the Object type.<a name="0149_006f"><PRE>
(a)
- Base type for objects desplayed on screen<P>type Object is tagged record<P>    pos:Point;<P>    end record;<P><P><P>procedure Move(Offset:Size;obj:in out Object);<P>procedure Move(x : integer :=0;y : integer:=0;obj: in out Object);<P>function Extent(obj:Object) return Size;<P><P>

(b)
origin : Object;<P>  ...<P>Move(1,1,origin);<P>Move(obj=&gt;origin,x=&gt;1,y=&gt;1);<P>Move(obj=&gt;origin,y=&gt;1);  - x defaults to 0<P>Move(Size'(1,1),origin);<P><P>

(c)
type Line is new Object with record<P>    offset:Size;<P>    end record;<P>function Extent(obj:Object) return Size;</PRE>
<a name="0149_0070"><B>Example 3:</B> (a) Class-wide type; (b) an alternative to (a).<a name="0149_0070"><PRE>
(a)
procedure Move (Offset:Size;obj:in out Object) is<P>    s : Size := Extent(Object'class(obj));<P> ....<P><P>

(b)
procedure Move (Offset:Size;obj:in out Object) is<P>    o_c: Object'class:=obj;<P>    s : Size := Extent(o_c);<P> ...</PRE>
<a name="0149_0071"><B>Example 4:</B> (a) A specification package; (b) declaring a child package.<a name="0149_0071"><PRE>
(a)
package Graphical_Objects is<P><P>    - declarations of Point and Size omitted<P>    type Object is tagged private;<P>    - procedure declarations here<P>    type Line is new Object with private;<P>    - Overriding definition of Extent here<P>private<P>    type Object is tagged record<P>        pos:Position;<P>        end record;<P>    type Line is new Object with record<P>        offset : Size;<P>        end record;<P>end Graphical_Objects;<P><P>

(b)
package Graphical_Objects.Conics is<P>    type Circle is new Object with private;<P>private<P>    type Circle is new Object with record<P>        radius:integer;<P>        end record;<P>    end Graphical_Objects.Conics;</PRE>
<a name="0149_0072"><B>Example 5:</B> Declaring a controlled type.<a name="0149_0072"><PRE>
with Finalization;
package Chained_Objects is
    type Chained_Object is new Finalization.Controlled with private;
    procedure Initialize(Object:in out Chained_Object);
    procedure Duplicate (Object:in out Chained_Object);
    procedure Finalize  (Object:in out Chained_Object);
private
    type Chain;
    type Chain_Ptr is access Chain;
    type Chain is record
            next,prev:Chained_Ptr;
    end record;
    type Chained_Object is new Finalization.Controlled with record
            The_Chain: aliased Chain;
    end record;
end Chained_Objects;
package body Chained Objects is
    head : Chain_Ptr:=null;  - global variables
    tail   : Chain_Ptr:=null;
procedure Initialize(Object:in out Chained_Object) is
    chn:chain renames object.the_chain;
begin
    chn.next:=null;
    chn.prev:=tail;
    if tail/=null then
        tail.next:=chn'access;
    else
        head:=chn'access;
    end if;
    tail:=chn'access;
    end Initialize;
procedure Duplicate(Object:in out Chained_Object) renames Initialize;
procedure Finalize(Object:in out Chained_Object) is
    chn:chain renames object.the_chain;
begin
    if chn.prev=null then
        head:=chn.next;
    else
        chn.prev.next:=chn.next;
    end if;
    if chn.next=null then
        tail:=chn.prev;
    else
        chn.next.prev:=chn.prev;
        end if;
end Finalize;
end Chained_Object;</PRE>
<a name="0149_0073"><B>Example 6:</B> Omitting the type mark (Object') when it is known from the context.<a name="0149_0073"><PRE>
O:Object:=(Pos=&gt;(1,1));
L:Line:=(O with offset=&gt;(1,1));</PRE>
<a name="0149_0074"><B>Example 7:</B> Code that will abort unless some other event occurs.<a name="0149_0074"><PRE>
select
   delay 10.0;
   Put_Line(&quot;Margin too small&quot;);
then abort
   Prove_Fermats_Last_Theorem;
end select;
</pre>

<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
