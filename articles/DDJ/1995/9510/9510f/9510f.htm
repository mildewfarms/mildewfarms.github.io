<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>OCT95: File-Streaming Classes in C++</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>File-Streaming Classes in C++<a name="0155_006d"><a name="0155_006b"><a name="0155_0000"></h1><P>
<h2>Sidestepping cyclic dependencies</h2><P>
<h3>Kirit Saelensminde</h3><P>
<p><i><a name="0155_006c"><a name="0155_0000">Kirit works for Motion Graphics Limited in London. He can be contacted at kgs@mgl.win-uk.net.</i></p><hr><P>
Smalltalk provides a mechanism that lets you stream simple objects, then reload them later. Because Smalltalk has only one class hierarchy that manages its own internal representation, the top-level class handles the streaming automatically. Consequently, you can avoid extra coding only if your program does not have cyclic dependencies--virtually impossible for many real-world applications.<P>
The Microsoft Foundation Class (MFC) Library (and Borland's OWL, for that matter) provides a similar mechanism for C++. However, the streaming mechanism (which can handle cyclic structures) requires that you derive your streamable classes from a common superclass. After using the MFC streaming system to manage our object structures for a raytracing engine, we identified a few problems with the MFC implementation:<P>
<UL>
<li>It requires the use of the MFC hierarchy. Since we wanted our engine to be platform independent, we had to wean it from MFC.</li>
<li>You can't use schema numbering to automatically load older object maps from the stream.</li>
<li>All streamable classes must be derived from a single superclass. For classes that are used in calculations (in our application matrices and vectors), the overhead of the extra constructor and destructor code can be very high. </li>
<li>It can only handle up to 32,000 objects in one file. This is not enough to save complex 3-D data for rendering.</li>
</UL>
To address these shortcomings, we decided to implement our own file-streaming system. Our main goal was the removal of the common superclass. Since the raytracer needed to be as fast as possible, the extra constructor and destructor code became unacceptable overhead. A secondary goal was to enable portability of both the file-streaming code and the binary files it produced, which limited us to C++ features available across current compilers. This meant we could not use run-time class identification or rely on any exception mechanism to return error conditions. Since we also wanted to load binary files on different architectures, we needed a mechanism to allow for format and endian-mode translation of the base data types (integers, doubles, and the like). Listings <a href="#0155_0073">One</A> and <a href="#0155_0075">Two</A> enable these features.<P>
Still, the file-streaming class does not achieve all of our goals. For example, the MFC <I>CMapPtrToPtr</I> class limits the number of objects it can write. However, since this limitation is internal to our <I>KSaver</I> class, we can update the KSaver class without changing its interface or protocol. The same can be said about the <I>CFile</I> dependency; here, the <I>KSaver</I> constructor requires updating, but the change isn't major.<P>
<a href="19950157.htm">Figure 1</A> shows a binary tree built by a sample program called tree.cpp (available electronically; see &quot;Availability,&quot; page 3). This example provides a basis for discussing issues surrounding file streaming, such as:<P>
<UL>
<li>Saving the object attribute information as base data types or other classes; for example, <I>Value::m_Value</I>.</li>
<li>Saving the links between the objects; see, for example, <I>Tree::m_Parent</I>. The problem with this is that you must be able to deal with NULL links.</li>
<li>Identifying the saved classes. The code that implements streaming generally will not know what class it is saving; see <I>Tree::File</I> in tree.cpp, which treats all <I>FormulaElement</I> subclasses in the same way. The problem is that the <I>Tree::File</I> method will be expected to work with classes (such as <I>Minus</I>) that have not been defined by the time the compiler reaches it.</li>
</UL>
To implement our approach to streaming, we use the familiar, object-oriented technique of having a third class arbitrate links between two other objects. In this case, the object to be streamed talks to an instance of the <I>KSaver</I> class, which, in turn, talks to the streaming object (here, an instance of <I>CFile</I>). <I>KSaver</I> is responsible for the actual format of the data that goes onto the stream. When saving, you simply save all the data members for the class and the superclasses and let the <I>KSaver</I> instance sort out what to do with them.<P>
Only the <I>KSaver</I> class needs to be intelligent. To help <I>KSaver</I> identify what it is working on, you need two keys--one for the object, the other for its class. Individual objects will always be at distinct addresses, allowing you to identify them uniquely. However, to identify the class of the object, you need metaclasses.<P>
<h3><a name="0155_006e">Metaclasses<a name="0155_006e"></h3><P>
Metaclasses describe other classes, so for each streamable class, you have an instance of <I>KMetaClass</I>. You use these instances to provide a unique key value for each streamed class and to create an instance of the class when loading. To do this, each <I>KMetaClass</I> instance gets a unique identifier that identifies it in the stream. Because the class identifiers must persist between different platforms and invocations of the application, you use the class name. (When using namespaces or local nested classes, you may have to mangle the names to keep each class identifier unique.) <P>
The metaclasses are created by the macros in <a href="#0155_0073">Listing One</A>, which hide the process from the users of the streaming system. The way C++ handles typing of classes makes it messy. It's easy to identify a particular <I>KMetaClass</I> associated with the class being pulled from the stream (just walk a list looking for it), but getting a new instance of that class requires a virtual function whose return type must be known. This means that you have to subclass <I>KMetaClass</I> for each class that is to be streamable. <I>KMetaClass</I> then becomes an abstract base class. It is still responsible for generating an image of the object hierarchy at run time, but object instances must be created by subclasses.<P>
Take a look at the BASE_CLASS_SAVE and CLASS_SAVE macros. (All the new metaclasses are local classes.) The base-class macro creates <I>Make</I>, a new virtual method used to create the actual instance. Each meta-subclass then overrides this method to return an instance of its associated class. A useful side effect of this is that you can use the <I>Class</I> method for the object to identify its class at run time.<P>
<h3><a name="0155_006f">The Rest of the Story<a name="0155_006f"></h3><P>
A closer look at the CLASS_SAVE macros (<a href="#0155_0073">Listing One</A>) shows that all the <I>Load</I> and <I>Save</I> methods are static. Static members are the closest C++ equivalent of Smalltalk class members; that is, they are associated with a class, not with instances of a class. Members must be static so they will work correctly with NULL pointers. It is very unsafe to dereference any pointer that may be NULL to get at a virtual function, but doing the check in a static member and then moving on to a separate virtual function is always safe.<P>
When it comes to loading, it is more obvious why the method must be static: Until you have an object instance, you cannot send it a message. I could have used an overloaded function with global scope, but I preferred to have the class stated explicitly.<P>
The <I>main()</I> function in the sample program tree.cpp illustrates saving and loading a data structure. Once the data structure is created and the file successfully opened, you only need to use the static <I>Save</I> method associated with the class you wish to save. Because each <I>Tree</I> instance saves all its data members, it doesn't matter which one you save--<I>KSaver</I> correctly deals with instances that have already gone onto the stream. Upon loading, the structure is created in the same order. This means that if you save <I>tAdd,</I> then the pointer to the structure when loaded will also be through <I>tAdd</I>. When tree.cpp is executed, it produces a file (available electronically) that shows the class name storage, how the unique object identifiers work, and the implicit nature of the file format.<P>
<h3><a name="0155_0070">Using the Streamer<a name="0155_0070"></h3><P>
Using the file-streaming class is easier than figuring out the protocol details. You simply include the correct CLASS_SAVE macro in your class declaration and use the correct IMPLEMENT_CLASS_SAVE macro in the definition. The only other thing that you need is the <I>File</I> method. This is declared automatically in the header file by the CLASS_SAVE macro, so you must supply an implementation for it. This forces you to send a schema number onto the stream in case you need to add attributes to the class later.<P>
Note the call to <I>Attach</I> at the beginning of <I>main()</I>. This ties the metaclass hierarchy together so that the run-time type checking will work. This cannot be done in the metaclass constructors because it is impossible to determine the order in which they will execute when stored in different modules.<P>
<h3><a name="0155_0071">Conclusion<a name="0155_0071"></h3><P>
The most notable improvement to the file-streaming class would be to reduce the amount of redundant data stored on the stream. For all the base items (class-name lengths and unique identifiers) you need not write out schema numbers. The unique identifier that introduces an object instance could also be implicit.<P>
Currently, the <I>KSaver</I> class does not support translation between the base data types across platforms. The <I>KSaver::Read</I> and <I>KSaver::Write</I> methods would need to be changed from the simple macro implementation to a more complex system that could switch on the incoming schema number. This could even include automatic type promotion and demotion for different-sized data types between platforms. Because it uses MFC classes, the file-streaming class is not really portable. Still, the <I>CFile</I> and <I>CMapPtrToPtr</I> classes are reasonably easy to rewrite for any platform.<P>
<B><a href="19950158.htm">Figure 1</A>: </B>An example binary tree for the formula 4x6+5.<P>
<P>
<h4><a name="0155_0072"><a name="0155_0073">Listing One<a name="0155_0073"></h4><pre>
/*   saver.h -- Handles meta classes and saving.
  Copyright (c) Motion Graphics Ltd, 1994-95. All rights reserved.
  Defines the macros used when creating streamable classes. It is assumed a
  byte is 8 bits, a word is 16 bits and a double word (DWORD) is 32 bits. A 
  float is 4 bytes and a double is 8 bytes. Endian mode and floating point 
  representations are based on those for Intel 80x86 processors.
*/
#define UBYTE unsigned char
#define SBYTE signed char
#define UWORD unsigned int
#define SWORD signed int
#define UDWORD unsigned long
#define SDWORD signed long
#define OP_IO( type, sn ) \
    BOOL Read( type &amp;v ) { \
        if ( Schema() == sn ) {\
            return Read( &amp;v, sizeof( type ) ); \
        } else { \
            TRACE( &quot;KFiler::Read( &quot; #type &quot; ) - &quot; \
                    &quot;Bad schema number.\n&quot; ); \
            return FALSE; \
        } \
    } \
    BOOL Write( type v ) { \
        Schema( sn ); \
        return Write( &amp;v, sizeof( type ) ); \
    }
class KFiler {
    public:     // Methods.
    // Constructors/destructor.
    KFiler( CFile *file, BOOL save );
    ~KFiler( void );
    // Find status of filer.
    BOOL Saving( void ) { return m_save; };
    // Essential book keeping chores.
    BOOL Schema( SWORD number );
    SWORD Schema( void );
    void *ReadUID( void *loc );
    BOOL WriteUID( void * p );
    // Read/Write values.
    BOOL Write( void __huge *p, UDWORD n );
    BOOL Read( void __huge *p, UDWORD n );
    // Write a null pointer.
    BOOL Null( void );
    // Return the error status for the file.
    BOOL Error( void ) {
        return m_error;
    };
    // Base cases.
    OP_IO( double, -16 );
    OP_IO( UBYTE, -17 );
    OP_IO( SBYTE, -18 );
    OP_IO( UWORD, -19 );
    OP_IO( SWORD, -20 );
    OP_IO( UDWORD, -21 );
    OP_IO( SDWORD, -22 );
    OP_IO( float, -23 );
    
    protected:  // Instance variables.
    
    BOOL        m_error;    // TRUE if there has been an error.
    BOOL        m_save;     // TRUE if the archive is saving.
    CFile       *m_file;    // The file that is to be used.
    UDWORD      m_uid;      // Unique object id.
    CMapPtrToPtr    m_map;      // The map containing already 
                            //               written/read objects.
};
#undef OP_IO
class KMetaClass {
    public:     // Methods.
    // Constructors/destructor.
    KMetaClass( char *name );
    KMetaClass( char *name, char *super_class );
    virtual ~KMetaClass( void );
    // Run through all classes and attach them together.
    static BOOL Attach( void );
    // Allow it to save/load.
    BOOL Save( KFiler &amp;f );
    BOOL CheckNextStrict( KFiler &amp;f );
    static KMetaClass *LoadNext( KFiler &amp;f );
    // Checks on the object hierarchy.
    BOOL IsSubClass( char *name );
    protected:  // Methods.
    // Find a class.
    static KMetaClass *Find( char *name, BOOL search_alias = TRUE );
    // Join classes together.
    void AttachSubClass( KMetaClass *kc );
    void AttachSibling( KMetaClass *kc );
    
    protected:  // Instance variables.
    
    char        *m_name;        // The class name.
    char        *m_super_name;      // The name of the super class.
    KMetaClass  *m_next_class;      // The next class.
    KMetaClass  *m_super_class;     // The super class.
    KMetaClass  *m_sub_class;       // The first sub class.
    KMetaClass  *m_sibling_class;   // The next sibling class.
};
class KMetaClassAlias
{
    public:     // Constructors.
    KMetaClassAlias( char *class_name, char *alias_name );
    ~KMetaClassAlias( void );
    public:     // Instance variables.
    char            *m_alias_name;  // The name of the alias.
    char            *m_class_name;  // The name of the class.
    KMetaClassAlias *m_next_alias;      // The next alias in the list.
};
#define CLASS_NAME( c ) \
    c::n_##c
#define BASE_CLASS_SAVE( c ) \
    static BOOL Save( KFiler &amp;f, c &amp;Ob ); \
    static BOOL Save( KFiler &amp;f, c *Ob ); \
    static BOOL Load( KFiler &amp;f, c &amp;Ob ); \
    static BOOL Load( KFiler &amp;f, c *&amp;pOb ); \
    static char *n_##c; \
    class KMeta##c : public KMetaClass { public: \
        KMeta##c( void ) : KMetaClass( n_##c ) {}; \
        KMeta##c( char *name, char *super_class ) \
                : KMetaClass( name, super_class ) {}; \
        virtual ~KMeta##c( void ) {}; \
        virtual c *Make( void ); \
    }; \
    static KMeta##c c_##c; \
    virtual BOOL File( KFiler &amp;f ); \
    virtual KMeta##c *Class( void );
#define CLASS_SAVE( c, b, t ) \
    static BOOL Save( KFiler &amp;f, c &amp;Ob ); \
    static BOOL Save( KFiler &amp;f, c *Ob ); \
    static BOOL Load( KFiler &amp;f, c &amp;Ob ); \
    static BOOL Load( KFiler &amp;f, c *&amp;Ob ); \
    static char *n_##c; \
    class KMeta##c : public b::KMeta##b { public: \
        KMeta##c( void ) \
                : KMeta##b( n_##c, CLASS_NAME( b ) ) {}; \
        KMeta##c( char *name, char *super_class ) \
                : KMeta##b( name, super_class ) {}; \
        virtual ~KMeta##c( void ) {}; \
        t *Make( void ); \
    }; \
    static KMeta##c c_##c; \
    BOOL File( KFiler &amp;f ); \
    t::KMeta##t *Class( void );
#define SAVE_LOAD( c ) \
    BOOL __export c::Save( KFiler &amp;f, c &amp;Ob ) { \
        Ob.Class()-&gt;Save( f ); \
        if ( f.WriteUID( &amp;Ob ) ) { \
            return Ob.File( f ); \
        } else { \
          TRACE( #c &quot;::Save - Cannot save pointer to instance\n&quot; ); \
          return FALSE; \
        } \
    } \
    BOOL __export c::Save( KFiler &amp;f, c *pOb ) { \
        if ( pOb == NULL ) { \
            return f.Null(); \
        } else { \
            pOb-&gt;Class()-&gt;Save( f ); \
            if ( f.WriteUID( pOb ) ) return pOb-&gt;File( f ); \
            else return TRUE; \
        } \
    } \
    BOOL __export c::Load( KFiler &amp;f, c &amp;Ob ) { \
        if ( Ob.Class()-&gt;CheckNextStrict( f ) ) { \
            if ( f.ReadUID( &amp;Ob ) == NULL ) { \
                return Ob.File( f ); \
            } else { \
             TRACE( #c &quot;::Load - Cannot load instance to object &quot; \
                   &quot;pointer already loaded\n&quot; ); \
                return FALSE; \
            } \
        } else { \
        TRACE( #c &quot;::Load - Input class not exactly the same.\n&quot; ); \
        return FALSE; \
        } \
    } \
    BOOL __export c::Load( KFiler &amp;f, c *&amp;pOb ) { \
        KMetaClass *k = KMetaClass::LoadNext( f ); \
        void *pp; \
        if ( k != NULL ) { \
            if ( k-&gt;IsSubClass( n_##c ) ) { \
                pOb = (c *)((KMeta##c *)k)-&gt;Make(); \
                if ( (pp = f.ReadUID( pOb )) == NULL ) { \
                    return pOb-&gt;File( f ); \
                } else { \
                    delete pOb; \
                    pOb     = (c *)pp; \
                    return !f.Error(); \
                } \
            } else { \
                return FALSE; \
            } \
        } else { \
            pOb     = NULL; \
            return !f.Error(); \
        } \
    }
#define IMPLEMENT_BASE_CLASS_SAVE( c ) \
    SAVE_LOAD( c ); \
    c * __export c::KMeta##c::Make( void ) { return new c(); }; \
    c::KMeta##c * __export c::Class( void ) { return &amp;c_##c; }; \
    char * __export c::n_##c = #c; \
    c::KMeta##c __export c::c_##c;
#define IMPLEMENT_CLASS_SAVE( c, b, t ) \
    SAVE_LOAD( c ); \
    t * __export c::KMeta##c::Make( void ) { return new c(); }; \
    t::KMeta##t * __export c::Class( void ) { return &amp;c_##c; }; \
    char * __export c::n_##c = #c; \
    c::KMeta##c __export c::c_##c;
#define CLASS_ALIAS( c, a ) \
    extern KMetaClassAlias a_##a; \
    KMetaClassAlias a_##a( CLASS_NAME( c ), #a );
</pre>
<h4><a name="0155_0074"><a name="0155_0075">Listing Two<a name="0155_0075"></h4><pre>
/*  saver.cpp -- Handles meta classes and saving.
    Copyright (c) Motion Graphics Ltd, 1994-95. All rights reserved.
    This code has been tested using MS Visual C++ 1.5 with MFC 2.5 under both 
    MS-DOS and Windows 3.1. There are still MFC dependencies in the code: 
    CFile handles basic file i/o; CMapPtrToPtr handles the UID and pointer 
    mapping; ASSERT macro used for debug only error checks; TRY, CATCH, 
    END_CATCH are MFC exception handlers. CException is the only exception 
    class MSVC handles. When not used in a Windows DLL then remove __export 
    references. Assumes that both pointers and the UID type (UDWORD) are the 
    same size (32 bit) for storing in the map.
*/
#include &lt;afx.h&gt;        // MFC core and standard components.
#include &lt;afxcoll.h&gt;        // MFC collections.
#define __export
#include &quot;saver.h&quot;
__export KFiler::KFiler( CFile *file, BOOL save )
{
    m_error = FALSE;
    m_save  = save;
    m_uid   = 0L;
    m_file  = file;
    
    if ( Saving() ) {
        Schema( 1 );
    } else {
        switch ( Schema() ) {
            case 1:
                // There is no additional information.
            break;
            default:
                m_error = TRUE;
            break;
        }
    }
}
__export KFiler::~KFiler( void )
{
    TRY {
        m_file-&gt;Close();
        delete m_file;
    } CATCH( CException, e ) {
        TRACE( &quot;KFiler::~KFiler - File close failed\n&quot; );
    } END_CATCH;
}
BOOL __export KFiler::Schema( SWORD number )
{
    return Write( &amp;number, sizeof( SWORD ) );
}
SWORD __export KFiler::Schema( void )
{
    SWORD   sw;
    BOOL    s;
    s   = Read( &amp;sw, sizeof( SWORD ) );
    if ( !s ) {
        sw = -1;
        TRACE( &quot;KFiler::Schema - returning -1 as failed to read schema&quot;
                &quot; number.\n&quot; );
    }
    return sw;
}
BOOL __export KFiler::Write( void __huge *p, DWORD n )
{
    ASSERT( m_save );
    if ( m_error ) {
        return FALSE;
    } else {
        TRY {
            m_file-&gt;WriteHuge( p, n );
        } CATCH( CException, e ) {
            TRACE( &quot;KFiler::Write - Write failed\n&quot; );
            m_error = TRUE;
            return FALSE;
        } END_CATCH;
        return TRUE;
    }
}
BOOL __export KFiler::Read( void __huge *p, DWORD n )
{
    ASSERT( !m_save );
    if ( m_error ) {
        return FALSE;
    } else {
        TRY {
            m_file-&gt;ReadHuge( p, n );
        } CATCH( CException, e ) {
            TRACE( &quot;KFiler::Read - Read failed\n&quot; );
            m_error = TRUE;
            return FALSE;
        } END_CATCH;
        return TRUE;
    }
}
BOOL __export KFiler::Null( void )
{
    return Write( (SDWORD)0 );
}
void * __export KFiler::ReadUID( void *loc )
{
    DWORD       dw;
    void        *p;
    
    Read( dw );
    if ( m_map.Lookup( (void *)dw, p ) ) {
        // Filed in before.
        return p;
    } else {
        // Filed in for the first time.
        m_map.SetAt( (void *)dw, loc );
        return NULL;
    }
}
BOOL __export KFiler::WriteUID( void * p )
{
    void        *id;
    
    if ( m_map.Lookup( p, id ) ) {
        // Has been filed out.
        Write( (DWORD)id );
        return FALSE;
    } else {
        // Filed out for the first time.
        m_uid++;
        m_map.SetAt( p, (void *)m_uid );
        Write( m_uid );
        
        return TRUE;
    }
}
/* KMetaClass. */
KMetaClass *k_class_list    = NULL;
KMetaClassAlias *k_alias_list   = NULL;
#ifdef _DEBUG
    BOOL  k_attached        = FALSE;
#endif
__export KMetaClass::KMetaClass( char *name )
{
    m_name      = name;
    m_super_name    = NULL;
    m_next_class    = k_class_list;
    m_super_class   = NULL;
    m_sub_class = NULL;
    m_sibling_class = NULL;
    k_class_list    = this;
}
__export KMetaClass::KMetaClass( char *name, char *super_class )
{
    m_name      = name;
    m_super_name    = super_class;
    m_next_class    = k_class_list;
    m_super_class   = NULL;
    m_sub_class = NULL;
    m_sibling_class = NULL;
    k_class_list    = this;
}
__export KMetaClass::~KMetaClass( void )
{
}
BOOL __export KMetaClass::Attach( void )
{
    KMetaClass      *kc, *sc;
    if ( kc != NULL ) {
        for( kc = k_class_list; kc != NULL; kc = kc-&gt;m_next_class ) {
            ASSERT( kc-&gt;m_name != NULL );
            ASSERT( kc-&gt;m_name != kc-&gt;m_super_name );
            ASSERT( strlen( kc-&gt;m_name ) &gt; 0 );
            if ( kc-&gt;m_super_name != NULL ) {
                sc  = Find( kc-&gt;m_super_name, FALSE );
                ASSERT( sc != NULL );
                sc-&gt;AttachSubClass( kc );
            }
        }
        #ifdef _DEBUG
            k_attached  = TRUE;
        #endif
        return TRUE;
    } else {
        return FALSE;
    }
}
BOOL __export KMetaClass::Save( KFiler &amp;f )
{
    SDWORD  len;
    ASSERT( k_attached );
    len     = strlen( m_name );
    return f.Write( len ) &amp;&amp; f.Write( m_name, len + 1 );
}
KMetaClass * __export KMetaClass::LoadNext( KFiler &amp;f )
{
    SDWORD      len;
    char        *p;
    KMetaClass  *d;
    ASSERT( k_attached );
    if ( !f.Read( len ) ) len = 0;
    if ( len != 0 ) {
        p   = (char *)malloc( (size_t)len + 1 );
        if ( f.Read( p, len + 1 ) ) {
            d   = Find( p );
            free( p );
            return d;
        } else {
            return NULL;
        }
    } else {
        return NULL;
    }
}
BOOL __export KMetaClass::CheckNextStrict( KFiler &amp;f )
{
    ASSERT( k_attached );
    return KMetaClass::LoadNext( f ) == this;
}
BOOL __export KMetaClass::IsSubClass( char *name )
{
    // Relationship is 'receiver IsSubClassOf name'
    if ( name == m_name ) {
        return TRUE;
    } else if ( m_super_class != NULL ) {
        return m_super_class-&gt;IsSubClass( name );
    } else {
        TRACE( &quot;KMetaClass::IsSubClass - %s is not a sub-class of&quot;
                &quot; %s.\n&quot;, m_name, name );
        return FALSE;
    }
}
KMetaClass * __export KMetaClass::Find( char *name, BOOL search_alias )
{
    KMetaClass      *k  = k_class_list;
    KMetaClassAlias *a  = k_alias_list;
    BOOL            f   = FALSE;
    //ASSERT( k_attached );
    while ( k != NULL &amp;&amp; !f ) {
        if ( k-&gt;m_name == name || strcmp( k-&gt;m_name, name ) == 0 ) {
            f   = TRUE;
        } else {
            k   = k-&gt;m_next_class;
        }
    }
    if ( k == NULL &amp;&amp; search_alias ) {
        // Search aliases.
        while ( a != NULL &amp;&amp; !f ) {
            if ( strcmp( name, a-&gt;m_alias_name ) == 0 ) {
                k = Find( a-&gt;m_class_name, FALSE );
                f   = TRUE;
            } else {
                a = a-&gt;m_next_alias;
            }
        }
    }
    #ifdef _DEBUG
        if ( k == NULL ) {
            if ( search_alias ) {
                TRACE( &quot;KMetaClass::Find - Failed to find class:&quot;
                &quot; %s in class list or in alias list\n&quot;, name );
            } else {
                TRACE( &quot;KMetaClass::Find - Failed to find class:&quot;
                &quot;%s in class list\n&quot;, name );
            }
        }
    #endif
    return k;
}
void __export KMetaClass::AttachSubClass( KMetaClass *kc )
{
    kc-&gt;AttachSibling( m_sub_class );
    kc-&gt;m_super_class   = this;
    m_sub_class     = kc;
}
void __export KMetaClass::AttachSibling( KMetaClass *kc )
{
    m_sibling_class     = kc;
}
/* Meta class alias code. */
__export KMetaClassAlias::KMetaClassAlias( char *class_name, char *alias_name )
{
    m_alias_name    = alias_name;
    m_class_name    = class_name;
    m_next_alias    = k_alias_list;
    k_alias_list    = this;
}
__export KMetaClassAlias::~KMetaClassAlias( void )
{
}
</pre>

<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
