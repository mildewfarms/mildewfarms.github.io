<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>OCT95: ALGORITHM ALLEY</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>ALGORITHM ALLEY<a name="0196_007d"><a name="0196_007b"><a name="0196_0000"></h1><P>
<h2>Common-Fraction Approximation of Real Numbers </h2><P>
<h3>Louis J. Plebani</h3><P>
<p><i><a name="0196_007c"><a name="0196_0000">Louis is a member of the Department of Industrial and Manufacturing Systems Engineering at Lehigh University. He can be contacted at ljp2@lehigh.edu.</i></p><hr><P>
In integer arithmetic, a common practice for calculating a fractional part of a value is to multiply by the numerator of some fraction and divide by the denominator. This is such a common operation for Forth programmers (who frequently work on small, integer-only machines) that one of the most basic Forth words is <I>*/</I>, which does a multiplication followed by a division with a double-precision intermediate result. But even in the current age of sophisticated, single-chip computers with floating-point instructions, the need to apply the old chestnut can arise. Thus, to calculate 0.6 of some quantity, you would multiply by 3 and divide by 5. In this case, the choice of a common fraction is trivial, but it isn't always: Accuracy and magnitude may be of concern.<P>
Suppose you need to multiply by the fractional part of <img src="sqrt12.gif">3=1.7320508<SUP>+</SUP>. A simplistic approach would be to multiply by 732 and divide by 1000 for an accuracy of 5E-5, but this might not be the best solution. Unless a double-precision intermediate result is provided, overflow can occur. For example, if a multiplication routine with an unsigned 16-bit product was preferred, overflow would occur for any number greater than 2<SUP>16</SUP>/732=89. Slightly better accuracy with less overflow complication can be achieved by multiplying by 112/153=0.732026<SUP>+</SUP>, which has an approximation error of 2.5E-5. To restrict the numerator to two or even one decimal digit, the best common fractions would be 71/97=0.7319587<SUP>+</SUP> for an error of 9.2E5 or 8/11=0.72727<SUP>+</SUP> for an error of 4.8E3. If the denominator were restricted to an 8-bit binary number so that an 8-bit divisor routine could be used, then the best common fraction would be 153/209=0.7320574<SUP>+</SUP> for an error of 6.61E-6.<P>
Even if multiple-precision multiplication and division are available, it is often necessary to obtain a better approximation. For instance, to multiply by the decimal part of <img src="pi12.gif" alt="pi">=3.141592653<SUP>+</SUP> with an accuracy of 1E-6, the simple approach would be to multiply by 141,593 and divide by 100,000, which would give an accuracy of 3.54E-7. However, the fraction 16/113 approximates the decimal part of <img src="pi12.gif" alt="pi"> to an error of 2.67E-7: the same order of magnitude of error without the need for multiple-precision arithmetic. If you don't mind using 16-bit divisors, 4703/33215=0.1415926539<SUP>+</SUP> is accurate to within 3.32E-10. Most programmers prefer the latter two approximations.<P>
The question, What is the best common fraction to use for a particular application? is most likely to take one of three slightly different forms:<P>
<OL>
<LI>What is the common fraction with the smallest numerator and denominator that will approximate a given real number to within a specified tolerance?</LI>
<LI>What is the common fraction with a numerator less than <I>N</I> that best approximates a given real number?</LI>
<LI>What is the common fraction with a denominator less than <I>N</I> that best approximates a given real number?</LI>
</OL>
In this article, I'll describe some simple search procedures to determine the fractions that answer these questions. But first I'll briefly turn to elementary number theory, specifically, Farey Sequences.<P>
Farey was a mineralogist who, in 1816, made observations about common fractions and published them without proof. The mathematician Cauchy published the proofs for Farey's observations shortly thereafter. Farey wrote down the sequence of all reduced fractions between 0 and 1 whose denominators are limited by a number <I>N</I>, the &quot;order&quot; of the Farey Sequence. <a href="#0196_007f">Figure 1</A> shows the Farey Sequences of orders 1, 2, 3, 4, and 5.<P>
Farey observed (and Cauchy proved) that for two consecutive fractions <I>a/b&lt;c/d</I> of the Farey Sequence of order <I>N</I>, <I>ad-bc=-1</I>. This theorem is proved by induction. By inspection, it can be seen that it is true for orders 1, 2, 3, 4, and 5. Assuming that it is true for a series of order <I>N</I>, it can be proved that it is true for a series of order <I>N</I>+1, thus completing the inductive proof. <P>
The &quot;mediants&quot; of a Farey Sequence are also interesting. The fraction <I>(a+c)/(b+d)</I> is called the mediant of two consecutive terms of a sequence <I>a/b</I> and <I>c/d</I>. For instance, <I>a/b&lt;(a+c)/(b+d)&lt;c/d</I> since <I>a(b+d)&lt;b(a+c)</I><img src="tf12.gif" alt="=&gt;"><I>ad&lt;bc</I><img src="tf12.gif" alt="=&gt;"><I>a/b&lt;c/d</I> and <I>(a+c)d&lt;(b+d)c</I><img src="tf12.gif" alt="=&gt;"><I>ad&lt;bc</I><img src="tf12.gif" alt="=&gt;"><I>a/b&lt;c/d</I>. Assume that <I>a/b</I> and <I>c/d</I> are consecutive terms of a Farey Sequence of order <I>N</I>. Now consider a Farey Sequence of order <I>N</I>+1 with a subsequence <I>{a/b,h/k,c/d}</I> contained in the sequence of order <I>N</I>+1 but not of order <I>N</I>. If this is true, then <I>ak</I>-<I>bh=-1, hd</I>-<I>kc=-1</I>. Solving these equations for <I>h</I> and <I>k</I> yields <I>h=(a+c)/</I>(bc-ad)<I> and </I>k=(b+d)/(bc-ad)<I>. But since </I>a/b<I> and </I>c/d<I> are consecutive terms of a Farey Sequence of order </I>N<I>, </I>ab-bc=1<I>, which reduces the expressions for </I>h<I> and </I>k<I> to </I>h=a+c <I>and </I>k=c+d<I>. This illustrates a second theorem associated with Farey Sequences: Fractions that belong to the Farey Sequence of order </I>N<I>+1 but not of order </I>N<I> are mediants of the Farey Sequence of order </I>N<I>.</I><P>
This important theorem means that starting from the Farey Sequence <I>[0/1,1/1]</I>, sequences of a higher order can be constructed by successively inserting mediants with appropriate denominators. This enables efficient search procedures to be defined for answering the three questions posed earlier. I'll describe the answer to Question 1; the procedures for the other two questions are simple modifications to the first.<P>
Question 1 seeks a common fraction that will approximate a real number <img src="gamma12.gif" alt="gamma"> to within a given tolerance <img src="e12.gif" alt="epsilon">. We need an efficient way to search all possible Farey Sequences. Suppose you know that <img src="gamma12.gif" alt="gamma"> is contained in some interval <I>[a/b,c/d]</I> of a Farey Sequence. If neither endpoint approximates <img src="gamma12.gif" alt="gamma"> to within the desired tolerance <img src="e12.gif" alt="epsilon">, another approximation to <img src="gamma12.gif" alt="gamma"> can be made by calculating the mediant of this Farey interval. This will divide the interval into the two intervals <I>[a/b,h/k]</I> and <I>[h/k,c/d]</I>, where <I>h/k=(a+c)/(c+d)</I>. If <I>|<img src="gamma12.gif" alt="gamma"></I>-h/k|<I><img src="lteq12.gif" alt="&lt;="><img src="e12.gif" alt="epsilon">, </I>h/k<I> yields the desired common fraction, and you are finished. Otherwise, you need only determine which interval contains <img src="gamma12.gif" alt="gamma">, replace the appropriate interval limit with </I>h/k<I>, and repeat the procedure. </I><P>
This search procedure examines those intervals containing <img src="gamma12.gif" alt="gamma"> of successively higher-order Farey Sequences until an interval limit is found that approximates <img src="gamma12.gif" alt="gamma"> to the desired tolerance. Assuming that neither 0 or 1 are a satisfactory approximation to <img src="gamma12.gif" alt="gamma">, the steps of the search procedure are:<P>
<OL>
<LI>Initialize endpoints of the first Farey Sequence <I>[a/b,c/d]</I> to <I>a=0,b=c,d=1</I>.</LI>
<LI>Calculate an approximation <I>h/k</I>, where <I>h=a+c,k=b+d</I>.</LI>
<LI>Calculate <I>error=(h/k)</I>-<img src="gamma12.gif" alt="gamma">. If <I>|error|</I><img src="lteq12.gif" alt="&lt;="><img src="e12.gif" alt="epsilon">, stop. <I>h/k</I> is the desired common fraction.</LI>
<LI>If <I>error&lt;0</I>, change the lower limits to <I>a=h,b=k</I>. Go to step 2.</LI>
<LI>If <I>error&gt;0</I>, change the upper limits to <I>c=h,d=k</I>. Go to step 2.</LI>
</OL>
<a href="#0196_0081">Listing One</A> is a C function to perform the search. On a 486-based PC, the function executes instantly for any reasonable values of <img src="gamma12.gif" alt="gamma"> and <img src="e12.gif" alt="epsilon">. When programmed on a programmable calculator, the execution time ranges from a second to a minute or more.<P>
Answering the maximum-numerator question is nearly as straightforward. Intervals on successively higher Farey Sequences are searched until either the numerator of the new interval boundary in the next-higher sequence exceeds the limit <I>N</I> or the desired tolerance is achieved. If the absolute best approximation is desired with the magnitude constraint, a tolerance of 0 can be specified. The major modification is that if the search loop is exited due to the numerator magnitude constraint, both endpoints of the interval <I>[a/b,c/d]</I> must be checked for the best approximation. <a href="#0196_0083">Listing Two</A> is a C function that implements this procedure.<P>
The procedure for the maximum-denominator problem is similar to that of the maximum numerator. Intervals on successively higher Farey Sequences are searched until either the denominator of the new interval boundary in the next-higher sequence exceeds the limit <I>max_denominator</I> or the desired tolerance is achieved; see <a href="#0196_0085">Listing Three</A>.<P>
<h3><a name="0196_007e">Reference<a name="0196_007e"></h3><P>
Rademacher, Hans. <I>Lectures on Elementary Number Theory</I>. New York, NY: Blaisdell Publishing Company, 1964.<P>
<a name="0196_007f"><B>Figure 1:</B> Farey Sequences of orders 1, 2, 3, 4, and 5<a name="0196_007f">
<pre>
               0  1
               -  -
               1, 1
              0  1  1
              -  -  -
              1, 2, 1
           0  1  1  2  1
           -  -  -  -  -
           1, 3, 2, 3, 1
        0  1  1  1  2  3  1
        -  -  -  -  -  -  -
        1, 4, 3, 2, 3, 4, 1
  0  1  1  1  2  1  3  2  3  4  1
  -  -  -  -  -  -  -  -  -  -  -
  1, 5, 4, 3, 5, 2, 5, 3, 4, 5, 1</pre><P>
<P>
<h4><a name="0196_0080"><a name="0196_0081">Listing One<a name="0196_0081"></h4><pre>
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
void Fraction( double realnum, double maxerror, double* num, double* denom) {
    double a,b,c,d,h,k,error;
    a = 0;
    b = c = d = 1;
    for( ;; ) {
        h = a + c;
        k = b + d;
        error = h/k - realnum;
        if ( fabs(error) &lt;= maxerror )
            break;
        if ( error &lt; 0 ) {
            a = h;
            b = k;
        }else{
            c = h;
            d = k;
        }
    }
    *num = h;
    *denom = k;
}
void main() {
    double realnum, maxerror, num, denom;
    printf( &quot;\nEnter real number to be approximated &gt; &quot;);
    scanf(&quot;%lf&quot;, &amp;realnum);
    printf( &quot;\nEnter maximum allowable error &gt; &quot;);
    scanf(&quot;%lf&quot;,&amp;maxerror);
    Fraction( realnum, maxerror, &amp;num, &amp;denom);
    printf( &quot;\n            real number = %e&quot;,   realnum);
    printf( &quot;\n              numerator = %.0f&quot;,  num);
    printf( &quot;\n            denominator = %.0f&quot;,  denom);
    printf( &quot;\nnumerator / denominator = %e&quot;,   num/denom);
    printf( &quot;\n        error in approx = %e&quot;,   num/denom - realnum);
}
</pre>
<h4><a name="0196_0082"><a name="0196_0083">Listing Two<a name="0196_0083"></h4><pre>
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
void FractionLimitNumerator( double realnum, double maxerror,
                                   double* num, double* denom, double maxnum) {
    double a,b,c,d,h,k,error;
    a = 0;
    b = c = d = 1;
    for( ;; ) {
        h = a + c;
        k = b + d;
        if ( h &gt; maxnum ) {
            if ( fabs(a/b - realnum) &lt; fabs(c/d - realnum) ) {
                h = a;
                k = b;
            }else{
                h = c;
                k = d;
            }
            break;
        }
        error = h/k - realnum;
        if ( fabs(error) &lt;= maxerror )
            break;
        if ( error &lt; 0 ) {
            a = h;
            b = k;
        }else{
            c = h;
            d = k;
        }
    }
    *num = h;
    *denom = k;
}
void main() {
    double realnum, maxerror, num, denom, maxnum;
    printf( &quot;\nEnter real number to be approximated &gt; &quot;);
    scanf(&quot;%lf&quot;, &amp;realnum);
    printf( &quot;\nEnter maximum allowable error &gt; &quot;);
    scanf(&quot;%lf&quot;,&amp;maxerror);
    printf( &quot;\nEnter maximum allowable numerator &gt; &quot;);
    scanf(&quot;%lf&quot;,&amp;maxnum);
    FractionLimitNumerator( realnum, maxerror, &amp;num, &amp;denom, maxnum);
    printf( &quot;\n            real number = %e&quot;,   realnum);
    printf( &quot;\n              numerator = %.0f&quot;,  num);
    printf( &quot;\n            denominator = %.0f&quot;,  denom);
    printf( &quot;\nnumerator / denominator = %e&quot;,   num/denom);
    printf( &quot;\n        error in approx = %e&quot;,   num/denom - realnum);
}
</pre>
<h4><a name="0196_0084"><a name="0196_0085">Listing Three<a name="0196_0085"></h4><pre>
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
void FractionLimitDenominator( double realnum, double maxerror,
                                 double* num, double* denom, double maxdenom) {
    double a,b,c,d,h,k,error;
    a = 0;
    b = c = d = 1;
    for( ;; ) {
        h = a + c;
        k = b + d;
        if ( k &gt; maxdenom ) {
            if ( fabs(a/b - realnum) &lt; fabs(c/d - realnum) ) {
                h = a;
                k = b;
            }else{
                h = c;
                k = d;
            }
            break;
        }
        error = h/k - realnum;
        if ( fabs(error) &lt;= maxerror )
            break;
        if ( error &lt; 0 ) {
            a = h;
            b = k;
        }else{
            c = h;
            d = k;
        }
    }
    *num = h;
    *denom = k;
}
void main() {
    double realnum, maxerror, num, denom, maxdenom;
    printf( &quot;\nEnter real number to be approximated &gt; &quot;);
    scanf(&quot;%lf&quot;, &amp;realnum);
    printf( &quot;\nEnter maximum allowable error &gt; &quot;);
    scanf(&quot;%lf&quot;,&amp;maxerror);
    printf( &quot;\nEnter maximum allowable denominator &gt; &quot;);
    scanf(&quot;%lf&quot;,&amp;maxdenom);
    FractionLimitDenominator( realnum, maxerror, &amp;num, &amp;denom, maxdenom);
    printf( &quot;\n            real number = %e&quot;,   realnum);
    printf( &quot;\n              numerator = %.0f&quot;,  num);
    printf( &quot;\n            denominator = %.0f&quot;,  denom);
    printf( &quot;\nnumerator / denominator = %e&quot;,   num/denom);
    printf( &quot;\n        error in approx = %e&quot;,   num/denom - realnum);
}
</pre>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
