<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>OCT95: Cobol '97: A Status Report</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Cobol '97: A Status Report<a name="0153_006b"><a name="0153_0069"><a name="0153_0000"></h1><P>
<h2>Cobol gets object oriented</h2><P>
<h3>Henry Saade and Ann Wallace</h3><P>
<p><i><a name="0153_006a"><a name="0153_0000">Henry is a senior application-development programmer at IBM. He is the lead designer and an architect of the mainframe IBM VS Cobol II and COBOL/370, and is presently a participant in the X3J4 Cobol committee. He can be contacted at IBM's Software Solutions Division, Santa Teresa Laboratory, San Jose, CA. Ann is a senior programmer in the COBOL Solutions area of IBM's Software Solutions Division, Santa Teresa Lab, San Jose, CA.  She is an active member of X3J4 and the chairperson of the international Cobol working group.</i></p><hr><P>
If you think that Cobol is a language for days past, consider that, according to the Datapro Information Services Group, an estimated 150 billion lines of Cobol source code are at work in mission-critical business applications worldwide, and programmers add about five billion lines each year. Likewise, International Data Corp. reports that revenues for Cobol desktop development are expected to increase to $176.4 million by 1998, up from $86.3 million in 1993. These figures indicate a solid average growth rate of about 15.4 percent a year. In medium-size and large U.S. companies, 42.7 percent of all applications-development staffs use Cobol. Thirty-five percent of such companies report that the language is used for more than two-thirds of their applications.<P>
While languages such as C++ and Smalltalk garner the lion's share of attention from the object-oriented community, Cobol has also been making object-oriented strides. In particular, a proposed revision of the Cobol standard includes object-oriented extensions. The draft standard is being developed jointly by the International Organization for Standardization (ISO) and Accredited Standards Committee X3 (ASC X3), the latter operating under the procedures of the American National Standards Institute (ANSI). The target date for completion of the proposed standard is 1997. <P>
While we will focus in this article on the object-oriented extensions to Cobol, we will also highlight other features proposed in the draft.<P>
<h3><a name="0153_006c">Historically Speaking<a name="0153_006c"></h3><P>
Cobol's early acceptance can be traced to the fact that it was the first stable, portable business language. Since the language was conceived in 1959 by the Conference on Data Systems Languages (CODASYL), committees have continually refined and improved it, incorporating innovative programming methods. CODASYL, ANSI, and ISO have regularly published the agreed-upon standards emerging from these committees. <P>
With the incorporation of structured programming, the 1985 standard (ANSI X3.23-1985) introduced major enhancements to Cobol. Structured-programming concepts were part of a movement in programming methodology toward replacing unwieldy, multibranching &quot;spaghetti&quot; code with a more tightly controlled flow of logic. As part of Cobol, it gave users more readable and maintainable programs. <P>
Standardization has given Cobol a high degree of reliability and portability. From the beginning, programmers wanted Cobol to be a robust language that they could use on any platform or computer. This need expanded as multiplatform installations became more common in the 1980s. Vendors met the challenge by making standard-compliant implementations of Cobol available on many platforms and systems, including mainframe and midrange computers, DOS, UNIX, Windows, and OS/2. (IBM, for example, uses the same Cobol compiler technology on MVS, VM, VSE, AIX, and OS/2.) <P>
Today, the 1985 Cobol standard is widely accepted, and most industry and government organizations rely on adherence to it. In order to bid on government jobs, for instance, Cobol implementations must conform to the Federal Information Processing Standard for Cobol (FIPS 21-4), which is based on Cobol standards. <P>
<h3><a name="0153_006d">A New Standard<a name="0153_006d"></h3><P>
The draft 1997 proposal for Cobol incorporates the basic object-oriented programming capabilities found in C++ and Smalltalk (see <a href="#0153_0073">Table 1</A>): inheritance, which allows objects to inherit data and behaviors from other objects; polymorphism, which simplifies coding by letting programmers use a single interface to access objects of different classes; and encapsulation, which hides the implementation of data and methods from clients (user code), thereby protecting clients from the effects of implementation change. <P>
However, object-oriented extensions are just one piece of the new standard. It also includes a common method of handling exceptions, to facilitate error discovery; an option for increased portability of arithmetic, which lends consistency and portability to certain computations: bit-string handling, to allow manipulation of bits of data; compiler directives, for portable specification of processing options; automatically expanded tables; dynamic file allocation; and support for large character sets (for applications that use data in languages other than English). <P>
The schedule for the new standard depends, among other factors, on the changes vendors and users request during the review processes. A draft of the proposed 1997 standard underwent informal public review in spring of 1995, and the resulting comments are presently being considered for incorporation into the draft. A formal public review will take place in early 1996. <P>
Meanwhile, the draft 1997 standard is generating interest among vendors. Hitachi, IBM, Ryan-McFarland, and Micro Focus have already incorporated subsets, or partial implementations, of the object-oriented programming proposals into their Cobol products, and IBM is committed to supporting the final adopted standard. <P>
<h3><a name="0153_006e">Object-Oriented Extensions<a name="0153_006e"></h3><P>
To ease the transition to object orientation, the committees are keeping the standard as close as possible to Cobol 85. The fundamental elements are classes, methods, interfaces, inheritance, and a few standard system classes. A class defines the layout of object instance data and the methods for accessing the data; see <a href="#0153_0071">Example 1</A>. The code for a method follows the form of a program; see <a href="#0153_0072">Example 2</A>. <P>
The idea is to add just enough features to make Cobol a rich, object-oriented model, while allowing Cobol shops and their existing skills to transition easily into the object-oriented environment.<P>
Cobol provides basic classes with methods for creating and initializing objects (Base class); and saving, retrieving, and deleting persistent objects (System-Object class).<P>
Vendors are looking at other emerging standards in order to maximize object-oriented Cobol's portability and flexibility in a client/server environment, such as the Object Management Group (OMG) Common Object Request Broker Architecture (CORBA). IBM's object-oriented Cobol is based on its System Object Model (SOM), which implements CORBA. IBM's direct-to-SOM object-oriented Cobol compiler enables programmers to sidestep learning the SOM Interface Definition Language (IDL). The distributed features of SOM/DSOM let applications access objects across multiple systems, enabling users to create client/server applications with object-oriented Cobol.<P>
<a href="#0153_0075">Listing One</A> is a simple banking application written in IBM Cobol. <a href="#0153_0075">Listing One</A> defines an Account with four methods: <I>OpenAccount</I>, <I>Balance</I>, <I>Deposit</I>, and <I>Withdraw</I>. <I>Account</I> uses the INHERIT keyword to derive from <I>SomObject</I>. <a href="#0153_0075">Listing One</A> also creates <I>SavingAccount</I>, a subclass of <I>Account</I>, which shows how to use the OVERRIDE keyword to override methods inherited from the parent class. In this case, <I>SavingAccount</I> overrides the <I>Deposit</I> and <I>Withdraw</I> methods. <I>SavingAccount</I> also introduces one new method, <I>GetInterest. </I>Finally, <a href="#0153_0075">Listing One</A> shows how these methods can be invoked from a client program.<P>
<h3><a name="0153_006f">Conclusion<a name="0153_006f"></h3><P>
Cobol's cautious evolution has allowed it to incorporate inventive software-development technologies at a pace that protects its integrity and stability. And with recent object-oriented language extensions and the availability of visual programming tools, Cobol has become a robust tool for object-oriented application development. <P>
For information on obtaining future U.S. review copies of the draft Cobol standard, contact Don Schricker, Chairman, Technical Committee X3J4 at das@mfltd.co.uk. For details on future international reviews, contact Ann Wallace, Convenor, IS0/IEC JTC1/SC22/WG4-Cobol at AnnWallace@vnet.ibm.com. <P>
<h3><a name="0153_0070">Bibliography <a name="0153_0070"></h3><P>
<I>The Desktop 3GL Market: Review and Forecast</I>, 1993-1998. Framingham, MA: International Data Corp., December 1994.<P>
IBM World Wide Web. URL http://www.torolab.ibm.com/software/ad/ad3gl.html. <P>
FAQ on Cobol. Micro Focus World Wide Web. URL http://www.mfltd.co.uk/FAQ/cobol-faq.html.<P>
Internet Usenet Newsgroup: comp.lang.cobol. <P>
Kain, Brad. &quot;Distributed Architecture is Mission of OMG.&quot; <I>Application Development Trends</I>  (August 1994).<P>
McClure, Steve. <I>Object Technology into the Mainstream: The Adoption and Assimilation of Object Technologies by the MIS Community in the United States</I>. Framingham, MA: International Data Corp., September 1994. <P>
Obin, Raymond. <I>Object-Orientation: An Introduction for Cobol Programmers</I>. Palo Alto, CA: Micro Focus Press, 1993. <P>
<a name="0153_0071"><B>Example 1:</B> Defining a BankAccount class in Cobol. BankAccount inherits from the standard Cobol system class Base.<a name="0153_0071"><pre>
CLASS-ID.  BankAccount INHERITS Base.
OBJECT.
DATA DIVISION. 
       *&gt;  instance data for BankAccount objects
METHOD-ID.  Create-BankAccount. 
       *&gt;  code for a method to create a<P>       *&gt;  BankAccount object
END METHOD Create-BankAccount.
END OBJECT.
END CLASS BankAccount.</pre>
<a name="0153_0072"><B>Example 2:</B> Defining a Cobol method. The INVOKE statement acts like the call statement in Cobol 85. The name of the method and the parameters on the procedure division statement define the interface for the method.<a name="0153_0072"><pre>
METHOD-ID.  Create-BankAccount.
DATA DIVISION.
LINKAGE SECTION.
01  New-Account OBJECT REFERENCE BankAccount.
PROCEDURE DIVISION USING New-Account.
INVOKE SELF &quot;new&quot; RETURNING New-Account.
END METHOD Create-BankAccount.</pre>
<a name="0153_0073"><B>Table 1:</B> Comparing object-oriented language features.<a name="0153_0073">
<pre>
Feature                 Smalltalk     C++      Cobol
Pure object orientation    Yes      Hybrid     Hybrid
Inheritance               Single   Multiple   Multiple
Encapsulation             Total    Limited     Total
Polymorphism               Yes       Yes        Yes
Classes as objects         Yes       No         Yes
Type checking              No        Yes        Yes
Class libraries         Excellent   Good      Limited
Persistent objects         Yes       No       Simple</pre><P>
<P>
<h4><a name="0153_0074"><a name="0153_0075">Listing One<a name="0153_0075"></h4><pre>
                         ACCOUNT CLASS DEFINITION
 IDENTIFICATION DIVISION.
 CLASS-ID. Account INHERITS SomObject.
 ENVIRONMENT DIVISION.
 CONFIGURATION SECTION.
 REPOSITORY.                                          | Linkage to
      CLASS SomObject is &quot;SomObject&quot;                  | SOM Interface
       CLASS Customer.                                | Repository
  DATA DIVISION. 
 WORKING-STORAGE SECTION.
   01 AccountNumber PIC 9(8) USAGE BINARY.            | Instance
   01 CustomerObject USAGE OBJECT REFERENCE Customer. | Data
   01 AccountBalance PIC 9(9)V99 VALUE ZERO.          | or
   01 AccountType PIC X(10).                          | Object Data
 PROCEDURE DIVISION.
 IDENTIFICATION DIVISION.                             | OpenAccount
 METHOD-ID. OpenAccount.                              |
 DATA DIVISION.                                       | Method
 LINKAGE SECTION.                                     | Definition
   01 CustObj USAGE IS OBJECT REFERENCE Customer.     |
   01 AccNum PIC 9(8) USAGE IS BINARY.                |
 PROCEDURE DIVISION USING CustObj AccNum.             | 
   SET CustomerObject TO CustObj                      |
   MOVE AccNum TO AccountNumber.                      |
 END METHOD OpenAccount.                                   
 IDENTIFICATION DIVISION.                             | Balance
 METHOD-ID. Balance.                                  | Account 
 DATA DIVISION.                                       | Method
 LINKAGE SECTION.                                     | Definition
   01 AccBal PIC 9(9)V99.                             |
 PROCEDURE DIVISION RETURNING AccBal.                 |
   MOVE AccountBalance TO AccBal.                     |
 END METHOD Balance.                                       
 IDENTIFICATION DIVISION.                             | Deposit
 METHOD-ID. Deposit.                                  | Account
 DATA DIVISION.                                       | Method
 LINKAGE SECTION.                                     | Definition
   01 DepositAmount PIC 9(9)V99.                      |
   01 NewBalance PIC 9(9)V99.                         |
 PROCEDURE DIVISION USING DepositAmount RETURNING NewBalance.
   ADD DepositAmount TO AccountBalance                |
   MOVE AccountBalance TO NewBalance.                 |
 END METHOD Deposit.
 IDENTIFICATION DIVISION.                             | Withdraw
 METHOD-ID. Withdraw.                                 | Account
 DATA DIVISION.                                       | Method
 LINKAGE SECTION.                                     | Definition
   01 TransAmount PIC 9(9)V99.                        |
   01 NewBalance PIC 9(9)V99.                         |
 PROCEDURE DIVISION USING TransAmount RETURNING NewBalance.
   SUBTRACT TransAmount FROM AccountBalance           |
   MOVE AccountBalance TO NewBalance.                 |
 END METHOD Withdraw.
 END CLASS Account.
                 SUBCLASS OF THE ACCOUNT CLASS DEFINITION
                             (SAVINGS ACCOUNT)
 IDENTIFICATION DIVISION.
 CLASS-ID. SavingAccount INHERITS Account.
 ENVIRONMENT DIVISION.
 CONFIGURATION SECTION.
 REPOSITORY.
     CLASS Account is &quot;Account&quot;.
 DATA DIVISION.
 WORKING-STORAGE SECTION.
   01 WithdrawPerDay PIC S9(8) USAGE BINARY.          | Instance and
   01 MinBalance PIC 9(9)V99 VALUE 250.               | Object Data
   01 MinDeposit PIC 9(9)V99 VALUE 100.               |
   01 InterestRate PIC 9V99 VALUE 0.05.               |
 PROCEDURE DIVISION.
 IDENTIFICATION DIVISION.
 METHOD-ID. Deposit IS METHOD OVERRIDE.               | Override of the
 DATA DIVISION.                                       | Original Deposit
 WORKING-STORAGE SECTION.                             | Method
   01 PenaltyAmount PIC 9(9)V99 VALUE 10.
 LINKAGE SECTION.
   01 DepositAmount PIC 9(9)V99.
   01 NewBalance PIC 9(9)V99.
 PROCEDURE DIVISION USING DepositAmount RETURNING NewBalance.
     IF DepositAmount LESS THAN MinDeposit THEN
* SELF and SUPER refer to the current object.
     INVOKE SELF &quot;Withdraw&quot; USING PenaltyAmount RETURNING NewBalance.
 END METHOD Deposit.
 IDENTIFICATION DIVISION.
 METHOD-ID. Withdraw IS METHOD OVERRIDE.              | Override of the
 DATA DIVISION.                                       | Original Withdraw
 LINKAGE SECTION.                                     | Method
   01 TransAmount PIC 9(9)V99.
   01 NewBalance PIC 9(9)V99.
 PROCEDURE DIVISION USING TransAmount RETURNING NewBalance.
     INVOKE SELF &quot;Balance&quot; RETURNING NewBalance.
     IF NewBalance - TransAmount IS GREATER THAN MinBalance THEN
       INVOKE SUPER &quot;Withdraw&quot; USING TransAmount RETURNING NEWBalance.
     ELSE
       DISPLAY &quot;Transaction was not performed for lack of funds&quot;.
 END METHOD Withdraw.
 IDENTIFICATION DIVISION.
 METHOD-ID. GetInterest.                              | GetInterest Method
 ENVIRONMENT DIVISION.                                | Definition
 DATA DIVISION.
 WORKING-STORAGE SECTION.
   01 NewBalance PIC 9(9)V99.
 LINKAGE SECTION.
   01 TransAmount PIC 9(9)V99.
   01 InterestAmount PIC 9(9)V99.
 PROCEDURE DIVISION RETURNING InterestAmount.
     INVOKE SELF &quot;Balance&quot; RETURNING NewBalance.
     MULTIPLY NewBalance BY InterestRate GIVING InterestAmount.
 END METHOD GetInterest.
 
 END CLASS SavingAccount.
                         CLIENT PROGRAM DEFINITION
This program is using the methods and classes defined above to
open a savings account.
 IDENTIFICATION DIVISION
 PROGRAM-ID. Client.
 ENVIRONMENT DIVISION.
 CONFIGURATION SECTION.
 REPOSITORY.
     CLASS Customer
     CLASS SavingAccount IS &quot;Bank-Saving-Account&quot;.
 DATA DIVISION
 WORKING STORAGE SECTION.
   01 CustomerObj USAGE IS OBJECT REFERENCE Customer.
   01 anAccount USAGE OBJECT REFERENCE SavingAccount.
   01 AccountNum Pic 9(8).
   01 DepositAmount Pic 9(9)V99.
   01 NewAccountBalance Pic 9(9)V99.
 PROCEDURE DIVISION.
     INVOKE SavingAccount &quot;somNew&quot; RETURNING anAccount
     INVOKE anAccount &quot;OpenAccount&quot; USING CustomerObj AccountNum
     INVOKE anAccount &quot;Deposit&quot; USING DepositAmount
                                RETURNING NewAccount Balance.
 END PROGRAM Client.
                       ****************************
</pre>

<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
