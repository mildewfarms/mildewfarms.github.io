<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>OCT95: Environment Variables and Windows 3.1</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Environment Variables and Windows 3.1<a name="0178_0073"><a name="0178_0071"><a name="0178_0000"></h1><P>
<h2>Manipulating variables and running tasks </h2><P>
<h3>John (Fritz) Lowrey</h3><P>
<p><i><a name="0178_0072"><a name="0178_0000">Fritz is a PC consultant and developer for the University of Southern California University Computer Services department working in C, Visual Basic, and Borland Delphi. He can be contacted at jlowrey@ucs.usc.edu.</i></p><hr><P>
What do you do if you have several hundred networked computers (like we do at the University of Southern California student computer lab) running software that demands a customized run-time environment? If you are using DOS, the usual solution is to set aside enough space for the environment (in CONFIG.SYS), then add the program's settings (such as <I>FOOBAR=/a /s /d /f:2</I>) to an entry in the AUTOEXEC.BAT file. You can even create a separate batch file that sets this variable before running the program, then clears it after the program exits. <P>
At USC, several programs installed on a network need a pointer to themselves in either the PATH statement or the Novell search path. This isn't simple, as some PATHs are already approaching the maximum allowable length (127 characters in DOS 6.2), and we are mapping several servers to satisfy the needs of the lab's users. Imagine trying to get the PATH to hold a number of directory names such as <I>F:\PROGRAMS\CLASS\BIO\BIGAPP\</I> or <I>F:\PROGRAMS\WP\WINWORD\WFW6.0\</I>. You approach critical mass pretty fast! Consequently, I needed to write a program that would alter a program's environment values (PATH and TEMP mostly) on a &quot;per run&quot; basis, so that we would need to set only a few universal values in AUTOEXEC.BAT. Essentially my program would &quot;wrap&quot; the target program, changing the environment as needed, then exit once the target program was run. Since this sort of thing is trivial under DOS and UNIX, I figured it would also be easy under Windows. I was wrong. <P>
Most operating systems have some concept of an &quot;environment&quot; for a particular program. DOS and UNIX (and Windows, for that matter) use a set of strings in an array (<I>char *envp[]</I> or <I>char **environ</I> in C/C++) that designates certain program options, such as search path and temporary directory. These strings are manipulated by the standard library calls; <I>char *getenv(char *search)</I> which gets environment string identified by <I>search, </I>and <I>intputenv(char *putstr),</I> which changes or adds an environment variable.<P>
A program uses and changes its variables as it sees fit. Child programs, however, get copies of the parent's environment variables; see <a href="1995017a.htm">Figure 1</A>. Thus, variables for a given child task can be altered from that of the parent. Examples are the search path (<I>PATH=c:\;c:\dos;c:\windows</I>) and the temporary directory (<I>TEMP=c:\temp</I>); see <a href="1995017b.htm">Figure 2</A>.<P>
Windows programs exhibit behavior based upon environment settings; for instance, using the TEMP and PATH values to locate files and components. This DOS-like behavior may lead you to assume that if an environment variable is modified, a child would then inherit it, but this isn't the case.<P>
By default, Windows programs get a pointer to--rather than a copy of--an environment space; see <a href="1995017c.htm">Figure 3</A>. To me, this meant that though <I>getenv()</I> should work, <I>putenv()</I> must be either very dangerous or totally ineffectual. The problem is that if all programs get a pointer to the same chunk of memory and each of them is able to alter it, then any alteration to the environment space will affect all tasks unpredictably. Books such as <I>Undocumented Windows</I>, by Andrew Schulman et al. (Addison-Wesley, 1992), describe the Windows application-startup process; however, no mention is made of environment-related behavior. To make things more confusing, both Visual C++ 1.5 and Borland C++ 4.5 include <I>getenv()</I> and <I>putenv()</I> calls that <I>seem</I> to work; that is, <I>getenv(&quot;PATH&quot;)</I> returns the value of the PATH from your AUTOEXEC.BAT file, and <I>putenv(&quot;FOO=BAR&quot;)</I> followed by <I>getenv(&quot;FOO&quot;)</I> returns BAR. But if you then run a child program, it inherits the unchanged DOS environment. How can this be?<P>
The Borland and Microsoft Windows C/C++ run-time startup code appears to make a copy of the default environment into an internal array that is then accessed by <I>envp[]</I>, <I>getenv()</I>, and <I>putenv()</I>; see <a href="#0178_007b">Listing One</A>. While useful within a single program, this is pretty useless for making functional changes to the environment used by child tasks; see <a href="1995017d.htm">Figure 4</A>.<P>
Working my way through assorted documents in the Windows 3.1 API reference, I found <I>HINSTANCE LoadModule(LPCSTR lpszModuleName, LPVOID lpvParameterBlock)</I>. The <I>lpvParameterBlock</I> structure must be user defined; <a href="#0178_0076">Example 1</A> identifies its fields.<P>
It seemed to me that the <I>segEnv</I> field would run a child with a modified environment, but I had to make the changes without ruining the rest of the system. I first attempted to pass the segment value of the <I>char **_environ</I> array maintained by the Borland run-time code, but this induced a GPF. The next logical step was to make a memory buffer the same size as the environment and filling it with my own data. To determine how much space to allocate, I created an integer value called &quot;ENVSIZE.&quot; This value was determined by hand, as there seems to be no straightforward way to get it from Windows. In the demonstration code the size is passed to <I>EnvInit()</I> as an argument. (To find your environment size, look at the &quot;SHELL&quot; line in CONFIG.SYS. If you are using command.com, the /e: parameter sets the environment size; mine is set to 1024 bytes.) To ensure the child task access to this memory, I made it sharable within the <I>GlobalAlloc()</I> API call, as shown in <a href="#0178_0077">Example 2</A>.<P>
To get all of the DOS environment strings into this buffer, you can loop through <I>envp[]</I> and copy all of the strings (and NULLs) or use the <I>LPSTR GetDOSEnvironment()</I> API call, which returns a pointer to the first address of either the default Windows environment or an environment space created for (and passed to) this program. While <I>LPSTR GetDOSEnvironment()</I> is documented in the help system, there is no mention or warning about the dangers of altering such a globally accessible memory space. I made my copy this way: <I>memcpy(pNewEnv, GetDOSEnvironment(), ENVSIZE);</I>. <P>
Once you have a copy of the environment, you can manipulate it as you see fit. For instance, <a href="#0178_0078">Example 3(a)</A> gives you a print-out of your environment strings in Windows. Under DOS or UNIX, the loop would look like <a href="#0178_0078">Example 3(b)</A>.<P>
At this point, you can write into your memory block without affecting the rest of the system. I reimplemented <I>getenv()</I> and <I>putenv()</I> to use my memory buffer, emulating the documented functionality of the original routines as closely as possible; see <a href="#0178_007d">Listing Two</A> (winenv.c).<P>
Next I wanted to run a program so that it got my new environment variables rather than the Windows defaults. To run a child, most people use <I>UINT WinExec(LPCSTR lpszCmdLine, UINT fuCmdShow)</I> since it is easy to construct a command line with the program name and command-line parameters; for example, <I>WinExec(&quot;notepad c:\autoexec.bat&quot;, SW_SHOWNORMAL);</I>. However, if you want the child to inherit the new environment, this won't work because <I>WinExec()</I> enters the kernel module and runs the child program using the kernel defaults, including the environment pointer; see <a href="1995017e.htm">Figure 5</A>.<P>
To pass the new environment to the child task, call <I>LoadModule()</I>. <a href="#0178_0079">Example 4</A> is the code I use to run my child. The resulting new program gets a pointer to the memory space filled with environment strings created by the parent program when it calls <I>GetDOSEnvironment()</I>; see <a href="1995017f.htm">Figure 6</A>. The Windows 3.1 API reference alludes to this behavior but does not document it.<P>
The result of all this is that I can now use my versions of <I>getenv()</I> and <I>putenv()</I> and run a program that inherits a new set of environment values. The only caveat is that the memory buffer must exist when the child needs it. Because the startup code is executed before the <I>LoadModule()</I> call returns, this is not a problem if the child is a C/C++ program (but not a DLL--these don't get run-time environment pointers and may be unloaded, then loaded by a different task). Once the startup code has run, the child has the environment space buffered internally for use by <I>envp[]</I>/<I>environ</I>. If the child does not use this startup-code mechanism (or the child was written in a language like Borland Delphi that does not initialize an environment arena), it is critical not to free the environment memory buffer before exiting the parent. If the parent frees the new buffer, then, when the child tries to access its environment, it will GPF due to an invalid pointer access.<P>
<h3><a name="0178_0074">Summing Up<a name="0178_0074"></h3><P>
Environment handling under Windows 3.1 is poorly documented, and using a single environment space in the Windows system area for all programs is dangerous. Although the Borland C++ and Microsoft C/C++ <I>getenv()</I> and <I>putenv()</I> routines appear to work under Windows, they do not affect the behavior of child tasks as might be expected, and this should be documented.<P>
Solving this problem was a merry chase, and I enjoyed it (though I lost quite a bit of hair in the process). I regret only that I have not found a way to create a program that can build an altered environment buffer, run a child, and then exit without worrying about whether or not the child will crash when trying to find its PATH. Perhaps you can help out here.<P>
<h3><a name="0178_0075">Acknowledgments<a name="0178_0075"></h3><P>
Thanks to C.J. Zinngrabe, Chuck Hellier, Frank Callaham, Steve Bridges, and Mike Beatrice.<P>

<B><a href="19950180.htm">Figure 1</A>:</B> The child gets a copy of the parent environment.<P>
<B><a href="19950181.htm">Figure 2</A>:</B> If Child 1 changes the environment, Child 2 will get a copy of the changes.<P>
<B><a href="19950182.htm">Figure 3</A>:</B> Windows programs get a pointer to--not a copy of--the environment variables.<P>
<B><a href="19950183.htm">Figure 4</A>:</B> Since envp[], getenv(), and putenv() work on a buffered environment, the child program doesn't see any changes.<P>
<B><a href="19950184.htm">Figure 5</A>:</B> A WinExec()ed child will get the default Windows environment pointer.<P>
<B><a href="19950185.htm">Figure 6</A>:</B> LoadModule() lets you point the child at a new environment space.<P>
<a name="0178_0076"><B>Example 1:</B> lpvParameterBlock fields.<a name="0178_0076">
<pre>
struct lpvParameterBlock  {
    WORD      segEnv;         /* child environment  */
    LPSTR     lpszCmdLine;    /* child command tail */
    UINT FAR* lpShow;         /* how to show child  */
    UINT FAR* lpReserved;     /* must be NULL       */
} LOADPARMS;
</pre>
<a name="0178_0077"><B>Example 2:</B> Allocating sharable memory for environment information.<a name="0178_0077">
<pre>
hNewEnv = GlobalAlloc(GPTR | GMEM_SHARE, ENVSIZE);/* get the memory */
pNewEnv = GlobalLock(hNewEnv);     /* lock it down to get a pointer */
</pre>
<a name="0178_0078"><B>Example 3:</B> (a) Printing out environment strings; (b) loop for DOS or UNIX.<a name="0178_0078">
<pre>
(a)
char    *tempstr;
tempstr = pNewEnv;
while (*tempstr != NULL) {
    printf(&quot;%s\n&quot;, tempstr);
    tempstr += strlen(tempstr) + 1; /* move to the next string */
}
(b)
int   i;
for(i=0; envp[i] != NULL; i++) 
    printf(&quot;%s\n&quot;, envp[i]);
</pre>
<a name="0178_0079"><B>Example 4:</B> Code to run a child that can access its parent's environment.<a name="0178_0079">
<pre>
struct  LOADPARMS parms;         /* needed for LoadModule */
char    *progname = &quot;envtst.exe&quot;; /* see included source */
word    show[2] = {2, SW_SHOWNORMAL];
parms.segEnv = FP_SEG(pNewEnv);   /* BC++ macro to get seg address */
parms.lpszCmdLine   = (LPSTR) &quot;&quot;; /* No command line options */
parms.lpShow    = &amp;show;         /* address of show state array */
parms.lpReserved = (LPSTR) 0;
result = LoadModule(progname, &amp;parms);</pre><P>
<P>
<h4><a name="0178_007a"><a name="0178_007b">Listing One<a name="0178_007b"></h4><pre>
/* envtst.c : This prints out the current envp[] set and the current Windows 
   default environment settings. I used this to determine if a change to the 
   environment settings had taken place. Build this as a Borland EasyWin 
   (Windows command line) executable. 5/95 Fritz Lowrey
*/
#include &lt;stdio.h&gt;
int main(int argc, char *argv[], char *envp[]) {
    int i;
    char    *denv;  /* default environment */
    printf(&quot;Program environment array:\n&quot;);
    for (i=0; envp[i] != NULL; i++)
            printf(&quot;%s\n&quot;, envp[i]);
    printf(&quot;\nWindows default environment:\n&quot;);
    denv = GetDOSEnvironment();
    while (*denv != NULL) {
        printf(&quot;%s\n&quot;, denv);
        denv += strlen(denv) + 1;   /* move to the next string */
    }
    exit(0);
}
</pre>
<h4><a name="0178_007c"><a name="0178_007d">Listing Two<a name="0178_007d"></h4><pre>
/* winenv.c:  Build using Borland C++ EasyWin environment to allow for stdio
 function calls. Copyright John &quot;Fritz&quot; Lowrey, 24 May, 1995. This code and 
 research that made it possible were done in conjunction with the University of
 Southern California University Computer Services Dept.
*/
#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;dos.h&gt;
#define DEMO
/* static variable for environment manipulation, not visible to other modules*/
static char    *lpNewEnv; /* pointer to environment space */
static HGLOBAL  hNewEnv;   /* handle to environment memory */
static int  ENVSIZE;       /* size of environment space */
/* LOADPARMS stucture needed by LoadModule */
struct LOADPARMS{
     WORD      segEnv;         /* child environment  */
     LPSTR     lpszCmdLine;    /* child command tail */
     UINT FAR* lpShow;         /* how to show child  */
     UINT FAR* lpReserved;     /* must be NULL       */
} ;
/* Initialize the environment space, ENVSIZE is the size of the environment
region (defined on the SHELL line of CONFIG.SYS */
/* returns -1 on error or 0 on sucess */
int EnvInit(int esize) {
    ENVSIZE = esize;
    if((hNewEnv = GlobalAlloc(GPTR | GMEM_SHARE, ENVSIZE)) == NULL)
        return -1;
    if ((lpNewEnv = GlobalLock(hNewEnv)) == NULL)
        return -1;
    /* we now have a pointer to the memory, fill it from the env space */
    if (memcpy(lpNewEnv, GetDOSEnvironment(), ENVSIZE) == NULL)
        return -1;
    /* environment space is initialized, return 0 */
    return 0;
}
/* definitions for new getenv and putenv routines */
/* Simple new getenv() routine.  Seach must be a label only */
LPSTR   NewGetEnv(LPSTR search) {
    LPSTR   tmpstr;
    /* point tmpstr at the environment space */
    tmpstr = lpNewEnv;
    /* scan through the space */
    while (tmpstr[0] != NULL) {
        /* if &quot;search&quot; is found at begining of tmpstr, return tmpstr */
        if (strstr(tmpstr, search) == tmpstr)
            return tmpstr;
        tmpstr += strlen(tmpstr) + 1;   /* move to next string */
    }
    /* if we fall through to here, return NULL */
    return NULL;
}
/* new putenv(): returns 0 on sucess -1 on failure */
int NewPutEnv(LPSTR putstr) {
    LPSTR   currentloc; /* currentlocation in the buffer */
    LPSTR   tmpstr;         /* used to move through buffer */
    char    label[30];  /* the lable portion of putstr */
    HGLOBAL hHoldEnv;
    char    *pHoldEnv;  /* holding area for the environment */
    int deleting = 0;
    /* if there's nothing to do, return failure */
    if(putstr == NULL)
        return -1;
    /* if the = in input is in 1st position, or there is no '=', fail */
    if((strchr(putstr, '=') == 0) || (strchr(putstr, '=') == putstr))
        return -1;
    /* create holding area for the new environment */
    if((hHoldEnv = GlobalAlloc(GPTR, ENVSIZE)) == NULL)
        return -1;
    if((pHoldEnv = GlobalLock(hHoldEnv)) == NULL)
        return -1;
    /* assume we're OK, get the label */
    memset(label, '\0', 30);
    memcpy(label, putstr, strchr(putstr, '=') - putstr);
    /* check to see if were deleting */
    if(putstr[strlen(putstr)-1] == '=')
        /* '=' is last character, were deleting */
        deleting = 1;
    /* now move through the input, trying to find the label */
    tmpstr = lpNewEnv;
    currentloc = pHoldEnv;
    while(tmpstr[0] != NULL) {
        if(strstr(tmpstr, label) == tmpstr) {
            if(!deleting) {
                /* string found, copy in new string */
                /* be sure to get the NULL */
                memcpy(currentloc, putstr, strlen(putstr) +1);
                currentloc += strlen(putstr) + 1;
            }
        }
        else {
            /* not found. copy current string to holding area */
            memcpy(currentloc, tmpstr, strlen(tmpstr) + 1);
            currentloc += strlen(tmpstr) + 1;
        }
        tmpstr += strlen(tmpstr) + 1;   /* get next string */
    }
    currentloc[0] = NULL;   /* ensure a trailing NULL */
    /* now copy all of this stuff back on top of the envspace */
    memcpy(lpNewEnv, pHoldEnv, ENVSIZE);
    /* free up the hold environment */
    GlobalUnlock(hHoldEnv);
    GlobalFree(hHoldEnv);
    return 0;
}
/* NewWinExec  will run a program using the new environment values */
int NewWinExec(char *progname, char *cmdline, int showstate) {
    UINT         shows[2];
    struct LOADPARMS  parms;
    shows[0] = 2;
    shows[1] = showstate;
    parms.segEnv = FP_SEG(lpNewEnv);
    parms.lpszCmdLine = cmdline;
    parms.lpShow = &amp;shows[0];
    parms.lpReserved = NULL;
    return LoadModule(progname, &amp;parms);
}
/* free up the environment memory space */
void EnvClose(void) {
    GlobalUnlock(hNewEnv);
    GlobalFree(hNewEnv);
}
#ifdef DEMO
int main(int argc, char *argv[], char *envp[]){
    LPSTR tmpstr;
    int i;
    FILE *outfile;
    outfile = fopen(&quot;c:\\temp\\envfile.txt&quot;, &quot;w&quot;);
    printf(&quot;Environment from envp:\n&quot;);
    for (i =0; envp[i] != NULL; i++) {
        printf(&quot;%s\n&quot;, envp[i]);
        fprintf(outfile, &quot;%s\n&quot;, envp[i]);
    }
    /* initialize the holding environment */
    if(EnvInit(1024) == -1) {
        printf(&quot;Environment failure!\n&quot;);
        exit(-1);
    }
    printf(&quot;\nEnvironment from pNewEnv:\n&quot;);
    fprintf(outfile, &quot;\nEnvironment from pNewEnv:\n&quot;);
    tmpstr = lpNewEnv;
    while(tmpstr[0] != NULL) {
        printf(&quot;%s\n&quot;, tmpstr);
        fprintf(outfile, &quot;%s\n&quot;, tmpstr);
        tmpstr += strlen(tmpstr) + 1;
    }
    printf(&quot;\nPATH from NewGetEnv = %s\n&quot;, NewGetEnv(&quot;PATH&quot;));
    fprintf(outfile, &quot;\nPATH from NewGetEnv = %s\n&quot;, NewGetEnv(&quot;PATH&quot;));
    printf(&quot;\nTEMP from NewGetEnv = %s\n&quot;, NewGetEnv(&quot;TEMP&quot;));
    fprintf(outfile, &quot;\nTEMP from NewGetEnv = %s\n&quot;, NewGetEnv(&quot;TEMP&quot;));
    printf(&quot;\nSetting PATH and TEMP...\n&quot;);
    fprintf(outfile, &quot;\nSetting PATH and TEMP...\n&quot;);
    if(NewPutEnv(&quot;TEMP=c:\\fritz&quot;) == -1) {
        printf(&quot;NewPutEnv error!\n&quot;);
        fprintf(outfile, &quot;NewPutEnv error!\n&quot;);
    }
    if(NewPutEnv(&quot;PATH=c:\\;c:\\dos;c:\\windows&quot;) == -1) {
        printf(&quot;NewPutEnv error!\n&quot;);
        fprintf(outfile, &quot;NewPutEnv error!\n&quot;);
    }
    printf(&quot;\nPATH from NewGetEnv = %s\n&quot;, NewGetEnv(&quot;PATH&quot;));
    fprintf(outfile, &quot;\nPATH from NewGetEnv = %s\n&quot;, NewGetEnv(&quot;PATH&quot;));
    printf(&quot;\nTEMP from NewGetEnv = %s\n&quot;, NewGetEnv(&quot;TEMP&quot;));
    fprintf(outfile, &quot;\nTEMP from NewGetEnv = %s\n&quot;, NewGetEnv(&quot;TEMP&quot;));
    fclose(outfile);
    EnvClose();
    exit(0);
}
#endif DEMO
</pre>



<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
