<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>OCT95: LETTERS</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>LETTERS<a name="0137_0001"></h1><P>
<h3><a name="0137_0002">GOST Encryption<a name="0137_0002"></h3><P>
Dear <I>DDJ</I>,<P>
I really enjoyed Bruce Schneier's article &quot;The GOST Encryption Algorithm&quot; (<I>DDJ</I>,  &quot;Algorithm Alley&quot; January 1995). Indeed, after taking a cryptography course, I decided to further investigate GOST. In a copy of (the translation of) the Russian standard, I noticed a slight error in Schneier's description of the algorithm. Schneier notes that:<P>
...the outputs of the eight S-boxes are recombined into a 32-bit word, and then the entire word undergoes an 11-bit circular shift left, towards the higher-order bits. Finally, the result is added modulo 2<SUP>32</SUP> to the left half to become the new right half, and the right half becomes the new left half.<P>
And later on, that:<P>
...DES uses XOR to add the key to the right half and to add the right half to the left half; GOST uses addition modulo 2<SUP>32</SUP> for both these operations.<P>
However, according to the standard, although addition modulo 2<SUP>32</SUP> is indeed used to add the key to the right half, the result of the S-box substitution rotated left is XORed with the left half, and not added modulo 2<SUP>32</SUP>.<P>
Please note that the code included with the article is correct. A copy of the standard is available at gopher://idea.sec.dsi.unimi.it/11/crypt/docs<P>
Riccardo Pucella<P>
McGill University<P>
pucella@cs.mcgill.ca<P>
<h3><a name="0137_0003">Creative Concepts<a name="0137_0003"></h3><P>
Dear <I>DDJ</I>,<P>
I enjoyed Michael Swaine's &quot;Programming Paradigms&quot; column (<I>DDJ</I>, June 1995) that discussed Douglas Hofstadter's book <I>Fluid Concepts and Creative Analogies</I>. I am looking forward to finding enough time to read the book. I have wondered for decades about the significance of problems which have an infinite number of logically correct solutions but only one &quot;agreeable&quot; solution. My favorite is to ask someone to give the next number in the sequence: 1,2,4,8,16,.... If your subjects give the agreeable solution 32, you then tell them that their answer is pretty good, but you will help them by giving them the generator for this sequence so that they may work it out for themselves.<P>
The generator for this sequence is the &quot;cutting the cake problem.&quot; You begin with a perfectly round cake. You mark off <I>n</I> equispaced points on the perimeter, then make perfectly straight cuts between every pair of points, then count the number of pieces of cake.<P>
If your subjects bother to do this, they will get the solution:<P>
Number of points:123456<P>
Number of pieces:12481630<P>
It isn't difficult to prove that 32 is the wrong solution; simple symmetry requires that the solution be divisible by 6.<P>
W.R. Ayers<P>
Los Altos Hills, California<P>
<h3><a name="0137_0004">Ada Corrections<a name="0137_0004"></h3><P>
Dear <I>DDJ</I>,<P>
I entered, compiled, and executed the PList program by Paul Pukite published in the &quot;Letters&quot; section (<I>DDJ</I>, July 1995) and found line 4 in error. It should read: <I>type Element is access all Item</I>'<I>Class; </I>in the original, <I>all </I>was missing.<P>
I look forward to seeing Ada 95 articles and programs in future issues.<P>
John J. Cupak, Jr.<P>
Nashua, New Hampshire <P>
jcupak@isd99.sanders.LOCKHEED.COM<P>
<I>DDJ responds</I>: Thanks for the correction, John. For information on Ada 95, be sure to check out David Moore's article in this issue.<P>
<h3><a name="0137_0005">Lightweight Tasks<a name="0137_0005"></h3><P>
Dear <I>DDJ</I>,<P>
I would like to make a few comments about Jonathan Finger's article &quot;Lightweight Tasks in C&quot; (<I>DDJ</I>, May 1995). Although the approach Jonathan used will probably be sufficient in most cases, I find it to have some major disadvantages:<P>
<UL>
<li>The stack is changed by copying the stack of each thread to and from the main stack. On many platforms this excessive copying is inefficient and will result in poor performance, especially  since lightweight threads are often tightly coupled and task switching is therefore frequent.</li>
<li>As Jonathan also notes, the implementation is not portable, since it depends on the stack growing in a particular direction.</li>
<li>Objects cannot be shared between threads if they are residing in a stack. For instance, if a thread passes a pointer to an object in its own stack to another thread, the object will not be referenced correctly because the stack has been moved when the other thread is running.</li>
</UL>
<a href="#0137_000a">Example 1</A> shows an alternative method that solves these problems. The idea is to let all stacks reside in the main stack area. When a new thread is to be started, a recursive function is used to wind down the stack and reserve room for the stack of the currently running thread. The size of the original main stack must be set large  enough to accommodate all of the stacks in the program. <a href="#0137_000a">Example 1(a)</A> shows a program where the main thread starts another thread using this method. The program then performs a few taskswitches and terminates. <a href="#0137_000a">Example 1(b)</A> is the output of the program.<P>
This scheme may be elaborated into a complete module for starting and stopping threads with stacks of user-definable sizes. In fact, I  have used it to implement a portable version of a C++-based multitasking kernel.<P>
Stig Kofoed<P>
Herlev, Denmark<P>
stk@craycom.dk<P>
<I>DDJ responds</I>: Watch for Stig's article &quot;Portable Multitasking in C++&quot; in an upcoming issue of <I>DDJ.</I><P>
<h3><a name="0137_0006">Combinatorial Problems <a name="0137_0006"></h3><P>
Dear <I>DDJ</I>,<P>
In the August 1995 &quot;Algorithm Alley,&quot; Peter Pearson reports on Leonard M. Adleman's article &quot;Molecular Computation of Solutions to Combinatorial Problems&quot; (<I>Science</I>, November 11, 1994). From my perspective, there appear to be several holes in Adleman's research, at least as described by Pearson.<P>
For instance, Adleman's approach to the Directed Hamiltonian Path Problem is described as: &quot;Given a map showing many cities and many one-way roads connecting cities, find the shortest itinerary that starts at City A, ends at City Z, and passes through every other city exactly once.&quot; The usual assumption is that the one-way roads are of different lengths. While this is not always true (consider subway or bus fares as the &quot;length&quot;), without it the task becomes almost trivial: Any complete path is the same length as any other. There is no mention of encoding length in the DNA (might &quot;introns&quot; be used? [Is the giant sea slug the solution to a problem?] If so, Adleman would have to do the steps in reverse order: First isolate the strings that pass through all the cities, then use electrophoresis to find the shortest. Another step would be needed to check that no city was duplicated).<P>
Another difficulty is that, at heart, the procedure is still a search through randomly generated cases. If all of the DNA fails the testing, it may be that incomplete stirring is to blame and not the lack of a solution (pun intended). The large number of molecules simply provides a feasible way of generating an immense number of cases quickly.<P>
Finally, doesn't the difficulty still favor the code maker over the code breaker? If the code maker uses one gram of DNA, wouldn't the code breaker need 10**18 grams?<P>
Maybe the secret of the Universe is 43.<P>
James Pendzick<P>
nsrjwp4@mgic.com<P>
Dear <I>DDJ</I>,<P>
If I correctly understand Peter Pearson's article &quot;Biochemical Techniques Take on Combinatorial Problems&quot; (&quot;Algorithm Alley,&quot; <I>DDJ</I>, August 1995), the technique might be summarized as &quot;make really a lot of candidate molecules, and then select the ones that might be solutions.&quot; To quote from the article, &quot;the number of guesses that can be tested...is limited....by the number of DNA molecules you can handle. Since a gram of DNA might contain 10<SUP>18</SUP> smallish molecules...&quot; it sounds like a lot, but the Knapsack Problem mentioned has 10<SUP>30</SUP> or so possible solutions, meaning 10<SUP>9</SUP> kilograms of DNA for one solution, given an even distribution. I don't know the density of a DNA solution, but 10<SUP>9</SUP> kilograms of water would be a cube 100 meters on a side if I recall the physical constants approximately. It might not be enough for your pet whale, but probably too big for the back yard.<P>
Of course, the Knapsack Problem for 100 points is small as such problems go. How about a Traveling Salesman problem for 1000 points (easily found in circuit-board assembly)? This is roughly 4e2567; that is, &quot;4&quot; followed by 2500 zeros. This problem can routinely be solved within a few percent of optimality by the best algorithms on a fairly fast computer in a few seconds.<P>
David X. Callaway<P>
dxc@mitron.com<P>
<h3><a name="0137_0007">E-mail Correction<a name="0137_0007"></h3><P>
Dear <I>DDJ</I>,<P>
I am a hardware design engineer from Topmax and an avid reader of <I>DDJ</I>. Our company develops ICE, plotters, printers, and network boards.<P>
I particularly enjoyed the article &quot;68HC05-based System Design,&quot; by Willard J. Dickerson (<I>DDJ,</I> August 1995). However, when I tried to get in touch with Willard using the e-mail address in his bio, mail returned the message &quot;Unknown user.&quot; Could you please give me Willard's correct e-mail address.<P>
Joel Carvajal<P>
Topmax Philippines Inc.<P>
joel@polgas.tds.pfi.net<P>
<I>DDJ Responds:</I> Thanks for pointing out that we dropped an &quot;l&quot; from the e-mail address, Joel. Our apologies to you, Willard, and to other readers. Willard's correct e-mail address is willd@amcu-tx.sps.mot.com.<P>
<h3><a name="0137_0008">Writer's Block (WB)<a name="0137_0008"></h3><P>
Dear <I>DDJ</I> (DDDJ),<P>
Lately, I see an increase (INC) in the use of nonsensical abbreviations (NAs) in computer &quot;literature&quot; (CL). I read an issue of <I>Hewlett-Packard</I> (HP) <I>Professional</I> (a BS sales 'zine): I (I) counted about 43 uses of NAs on two (2) pages. The writer actually defined an NA without using it subsequently!<P>
For examples, MDD (multidimensional database), non-MDD (nonmultidimensional database), SI (systems integrator), IT (undefined), VAR (undefined), ISV (undefined), GUI (graphical/generic? user interface), BPR (business process reengineering), and SFA (sales force automation).<P>
My question is this: Are these articles not meant to (2 too (2 2 eh ...)) be read, or are these people just showing off? And if the latter, what is it they are showing off?<P>
I'm not sure why people do this, but I will suggest a few answers:<P>
<OL>
<LI>The era of the White-coated ENIAC Priests (WEPs, or is it WENIACPs? sorry, English is my fourth (4th) language), is over: Computers (Cs) have become very common, everybody thinks they know about Cs. WEPs have become ordinary people (OP). So these OP are trying 2 find a way 2 become WEPs again: by inventing a New Language Nobody Speaks, Nor Understands (NLNSNU, what do I do with the comma?).</LI>
<LI>The price of a PKZIP license reached seven (7) figures so the typesetter (TS) doesn't unzip the text files anymore he got e-mailed from the writers.</LI>
<LI>The OP-writer wants 2 hide the fact that she doesn't really understand the subject either behind Self-Made Mumbo-Jumbo (SMMJ (= NLNSNU)).</LI>
<LI>Paper = gold.</LI>
<LI>OPs are lazy and as word processors (WP) are 2 complex 2 fully use, OPs still can't figure out how 2 build a macro 2 insert a Frequently Used Phrase (FUP).</LI>
<LI>Most OP-writers stole their WP and can't call the helpdesk (HD) 2 figure out how 2 build a FUP-macro.</LI>
<LI>We are not supposed 2 read the articles, just 2 stand in awe and swallow the SOB's conclusion.</LI>
<LI>These same writers have written a <I>Dictionary of Computer Terms and Abbreviations</I> and are generating their own market.</LI>
</OL>
DDDJ, may I make some suggestions for (4) OP writers? <P>
<OL>
<LI>Just keep using NAs 4 FUPs, but, when ready, use the FaR function of your WP 2 expand all FUPs.</LI>
<LI>Do not use PD PKZIP any more.</LI>
<LI>If you steal a WP, steal a good book about the WP 2, 2 learn macros. Steal the serial number 2. 4 AT&amp;Ting the HD.</LI>
<LI><I>if (WEP &amp;&amp; write(CL)) { get_a_real_job(time(NULL)); };</I></LI>
</OL>
Erik Terwiel (ET)<P>
Utrecht, Holland (NL) <P>
E.H.Terwiel@inter.NL.net<P>
<h3><a name="0137_0009">Cover Credits<a name="0137_0009"></h3><P>
Dear <I>DDJ</I>,<P>
We really enjoyed seeing a photo of our game <I>Blood</I> on the cover of <I>Dr. Dobb's Sourcebook of Games Programming</I> (May/June 1995). As you can imagine, Kevin Kilstrom, our senior artist, was particularly thrilled.<P>
Readers might be interested in details about <I>Blood</I> (which should be published by Apogee's 3D Realms Division and FormGen later this year). <I>Blood</I> is a 3-D action/horror game using rendering technology similar to <I>DOOM</I>'s, but with overlapping map areas, bridges, sliding and rotating walls and floors, translucencies, mirrors, and numerous other effects. The commercial version of the game will likely contain over 15 MBs of 256-color artwork. <I>Blood</I> will also have a top-end resolution of 1600x1200 for those happy Pentium owners.<P>
Nick Newhard <P>
Q Studios <P>
Redmond, WA 98052<P>
nnewhard@qstudios.com<P>
<pre><a name="0137_000a"><B>Example 1:</B> Lightweight tasks.<a name="0137_000a">
(a)
#include &lt;setjmp.h&gt;
#include &lt;stdio.h&gt;
jmp_buf jmp_main, jmp_cor;
void cor_to_main( void )
  {
  if( setjmp( jmp_cor ) == 0 )
    {
    longjmp( jmp_main, 1 );
    }
  }
void main_to_cor( void )
  {
  if( setjmp( jmp_main ) == 0 )
    {
    longjmp( jmp_cor, 1 );
    }
  }
void coroutine( int n )
  {
    int i;
  if( n &gt; 0 )
    {
    coroutine( n - 1 );
    }
  else
    {
    i = 0;
    printf( &quot;coroutine start\n&quot;
          );
    for( ;; )
      {
      cor_to_main();
      printf( &quot;%d. coroutine\n&quot;,i++ );
      }
    }
  }
int main( void )
  {
    int i;
  printf( &quot;main start\n&quot; );
  if( setjmp( jmp_main ) == 0 )
    {
    coroutine( 200 );
    }
  else
    {
    for( i = 0; i &lt; 5; i++ )
      {
      printf( &quot;%d. main\n&quot;, i );
      main_to_cor();
      }
    printf( &quot;main stop\n&quot; );
    }
  return( 0 );
  }
(b)
main start
coroutine start
0. main
0. coroutine
1. main
1. coroutine
2. main
2. coroutine
3. main
3. coroutine
4. main
4. coroutine
main stop

</pre>

<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
