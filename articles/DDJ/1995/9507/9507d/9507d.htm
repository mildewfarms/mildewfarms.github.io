<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>JUL95: Implementing and Using BSP Trees</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Implementing and Using BSP Trees<a name="0034_000a"><a name="0034_0008"><a name="0034_0000"></h1><P>
<h2>Fast 3-D sorting</h2><P>
<h3>Nathan Dwyer</h3><P>
<p><i><a name="0034_0009"><a name="0034_0000">Nathan is a programmer at Starware in Bellevue, WA and can be reached at nate@netcom.com.</i></p><hr><P>
With the arrival of graphic-intensive applications like <I>DOOM</I>, high-speed 3-D display engines are becoming a necessity for PC systems. These 3-D engines owe their speed, in part, to binary space partitioning (BSP) trees, data structures that provide an extremely fast method for one component of the rendering process. <P>
Rendering 3-D shapes usually consists of several steps. First, the shape is oriented by rotation about its center. Next, its location is determined relative to a viewpoint and view direction. Finally, the shape's component polygons are sorted, and each is projected and rendered. Writing a fast 3-D engine consists of speeding up each step as much as possible. BSP trees address the issue of sorting. <P>
Sorting the polygons may seem trivial, but is usually fairly complicated. The difficulty is in determining which polygons lie behind which. If all the polygons are small and far apart, the task is simple. In that case, it's usually sufficient to compute the distance from the viewpoint to the center of each polygon, rendering the farther polygons first. This technique is called the &quot;painter's algorithm&quot; because polygons are rendered in the same order a painter would paint them on a flat wall. Consider <a href="19950036.htm">Figure 1</A>, however. In the first case, the center of the large polygon is closest to the viewpoint, yet the large polygon should clearly be drawn before the small one. In the second case, where the three polygons overlap in a circular manner, the painter's algorithm will be incorrect, no matter what order the polygons are drawn in. <P>
A number of algorithms have been developed to attack this problem, but the most popular rely on two techniques: z-buffering and subdivision. <P>
Z-buffering algorithms represent each display pixel by one element in an array. The array is used to keep track of the distance from the viewpoint to the polygon to be drawn at that point. As a polygon is drawn to the screen, the distance at each pixel is computed and compared with its corresponding array element. A new polygon pixel is rendered only if it is closer to the viewpoint than the last polygon drawn at that pixel. While this is an extremely elegant solution, it requires a lot of memory. Each pixel may require 16 or 32 bits to accurately represent the distance, and the extra distance computation can be time intensive. <P>
Subdivision algorithms analyze a group of polygons, breaking them into smaller pieces that don't overlap. This may entail drawing the polygons concurrently, splitting each scanline into nonoverlapping, horizontal sections. Alternatively, each polygon may be checked against every other polygon for overlap. Both approaches require significant extra processing. <P>
BSP trees were developed to determine the visibility of surfaces. They were later adapted to represent arbitrary 3-D shapes. BSP trees trade some (possibly expensive) preprocessing for very fast polygon sorting, making them best suited to static shapes: floor plans, walls, and other objects that don't change. <P>
Generating a BSP tree is straightforward. From a list of polygons, choose one to be the root. Then separate the remaining polygons into two groups: those in front and those behind the plane of the root polygon, with respect to the root polygon's normal vector. Next, recursively build BSP trees out of each group. The root of each subgroup becomes a child of the root containing it. If any polygon isn't completely in front of or behind the plane of the root, split it into two polygons that are. This defines the criteria for choosing a root polygon: The best choice causes the fewest number of splits in the remaining polygons. <P>
Almost all the difficulty in creating the BSP tree lies in splitting the polygons intersected by a root plane. Three pieces of code bear examination: the plane-plane intersection code, the code that tests for inaccurate intersections, and the code that actually splits a polygon. <P>
Plane-plane intersection can be a bear. If brute-force linear algebra is applied, much complexity results. Luckily, plane-plane intersection can be simplified to line-plane intersection, which is much easier. The function <I>BSPNode::_SplitPoly()</I> in node.cpp (<a href="#0034_0010">Listing Two</A>) tests each line segment in the boundary of a polygon to see if it intersects the plane of a second (<a href="#0034_000e">Listing One</A> is the bsp.h include file.) The math involved is described in the accompanying text box entitled, &quot;Intersecting a Line and a Plane.&quot; The complete source code, including sample data files, that implements this approach to BSP is provided electronically; see &quot;Availability,&quot; page 3.<P>
If a single vertex or edge from the polygon is contained in the plane, the polygon need not be split. If the variable <I>t</I> is very close to 1.0 or 0.0, a vertex is contained in the plane. While it would be nice to simply skip these occurrences, a plane may cut across the polygon and just happen to pass through a vertex. To guard against this possibility, the Boolean variable <I>LastSideParallel</I> indicates whether the last polygon edge was parallel to the plane. If so (and <I>t</I> equals 0.0), the intersection can be safely ignored. <P>
The function <I>BSPNode::Split()</I> in node.cpp contains the code that creates two polygons from one. It calls <I>BSPNode::_SplitPoly()</I> to fill in a sparse array of <I>CPoint</I> objects with intersection points. <I>BSPNode::_SplitPoly()</I> returns a set of flags that indicates which boundary segments were split. <I>BSPNode::Split()</I> builds two polygons from this information by following the original list of points around the polygon and adding them to the first new polygon. When an intersection point is encountered, it's added to both new polygons. Subsequent points are added to the second new polygon until another intersection point is encountered. Once again, the intersection point is added to both new polygons, and the first polygon becomes the destination for subsequent points. Once the point list is exhausted, the new polygons have complete point lists of their own. The two new polygons have the same original normal, but their centers must be recalculated. <P>
Sorting the polygons contained in a BSP tree is simply an in-order, depth-first traversal of the tree. At each node, a dot product is computed to determine if the viewpoint is in front of or behind the node's polygon. If in front, the polygons behind the node are drawn first, then the node's polygon, then the polygons in front of the node. If behind, the node's children are visited in reverse order. <P>
To see how this works, look at <a href="19950037.htm">Figure 2</A>. If the viewpoint is at position A, it's behind polygon 1. Therefore, polygon 2 is drawn first, then polygon 1, and finally polygon 3, which is correct. If the viewpoint is at position B, the polygon order becomes 3, 1, 2, which is also correct. <P>
All of the code to traverse the tree is contained in the function <I>BSPNode::Traverse()</I> in node.cpp. The vector from each polygon's center to the viewpoint is computed first. The dot product between this vector and the polygon's normal vector indicates the side on which the viewpoint is located. Here, the center point is used for clarity, but any vertex of the polygon may be used with the same result.<P>
Let's take a moment to discuss file formats. The code reads and writes text files so the input and output may be understood easily. An input file of unprocessed polygons has the format shown in <a href="#0034_000b">Example 1(a)</A>. Once the BSP tree has been created, it's saved in the format shown in <a href="#0034_000b">Example 1(b)</A>, which can also be read back in. <P>
There are many extensions to this basic data structure that can further increase rendering speed. Polygons can be back-face culled very easily. If the viewpoint is behind a node, that node's polygon should not be drawn. Bounding boxes can be generated for each level of the tree, allowing branches which don't intersect the viewcone to be skipped entirely. It should also be noted that limited polygon movement is possible, as long as the polygon never leaves its original plane and doesn't cross the plane of a root polygon. <P>
While BSP trees are primarily limited to static shapes and require extra preprocessing, they provide a substantial speed increase without a lot of memory overhead. Preprocessing is fine if the goal is speed in the final presentation. Finally, since the implementation of BSP-tree algorithms is not overly difficult, the result is easy maintenance, as well as a large speed increase for a small amount of work. <P>
<h2>Intersecting a Line and a Plane</h2><P>
A plane is defined by a point A and a normal N. Given a point X, X is  in the plane if it satisfies the requirement in <a href="#0034_000c">Example 2(a)</A>. A line is defined as <a href="#0034_000c">Example 2(b)</A>, which can be rewritten as the set of equations in <a href="#0034_000c">Example 2(c)</A>. Substituting these equations into the plane equation and solving for <I>t</I> results in <a href="#0034_000c">Example 2(d)</A>. If <I>t</I> is in the interval [0, 1], then the line intersects the plane. If the denominator is 0, it is because the dot product of the plane's normal and the direction of the line is 0. This means the line and the plane are parallel. Either the line is contained in the plane or it doesn't intersect it at all. <P>
--N.D.<P>

<P><B><a href="19950038.htm">Figure 1</A>: </B>Sorting polygons.</P>

<P><B><a href="19950039.htm">Figure 2</A>: </B>In-order, depth-first traversal of the tree.</P>

<P><a name="0034_000b"><B>Example 1:</B> (a) Format of input file of unprocessed polygons; (b) format after BSP tree has been created.<a name="0034_000b"></P>

<pre>
(a) ushort NumPolygons
    for each polygon:
    ushort NumPoints
           for each point:
                    long X Y Z

(b) for each node:
    ushort NodeIndex
    ushort FrontIndex, BackIndex
    ushort NumPoints
           for each point:
                    long X Y Z
</pre><P>

<P><a name="0034_000c"><B>Example 2:</B> Math required to intersect a line and a plane.<a name="0034_000c"></P>
<PRE>

(a) N&#183;(X-A)=0
    N&#183;X-N&#183;A=0
    n1*x+n2*y+n3*z-(N&#183;A)=0

(b) X=X1+t(X2-X1)

(c) x=x1+t*i
    y=y1+t*j
    z=z1+t*k

(d) t=-(n1*x1+n2*y1+n2*z1+(-(N&#183;A)))
       ____________________________
         (n1*i+n2*j+n3*k )
</pre><P>

<P>
<h4><a name="0034_000d"><a name="0034_000e">Listing One<a name="0034_000e"></h4>
<pre>
/*  BSP.H -- Type definitions for BSP code */
#include &lt;fstream.h&gt;
#define TRUE    1
#define FALSE   0
typedef unsigned char bool;
typedef unsigned short ushort;
typedef unsigned long ulong;
class CPoint
{
    public:
        double x, y, z;
    public:
        CPoint( void );
        void Read( ifstream&amp; Input );
        void Write( ofstream&amp; Output ) const;
        double Magnitude( void ) const;
        void Normalize( void );
        double DotProduct( const CPoint&amp; Pnt ) const;
        CPoint CrossProduct( const CPoint&amp; Pnt ) const;
        short operator==( const CPoint&amp; Pnt ) const;
        CPoint operator-( const CPoint&amp; Pnt ) const;
};
class BSPNodeList;
class BSPNode
{
    private:
        ushort Index;
        BSPNode *FrontNode, *BackNode;
        short PntCnt;
        CPoint *PntList;
        CPoint Center;
        CPoint Normal;
        double D;
        
        ulong _SplitPoly( BSPNode *Plane, CPoint *SplitPnts );
        void _ComputeCenter( void );
        void _ComputeNormal( void );
        void _ComputeD( void );
    public:
        BSPNode( void );
        ~BSPNode( void );
        void ReadPoly( ifstream&amp; Input );
        void ReadNode( ifstream&amp; Input, const BSPNodeList&amp; NodePool );
        void WriteNode( ofstream&amp; Output, short&amp; CurIndex );
        CPoint GetCenter( void )    { return Center; }
        CPoint GetNormal( void )    { return Normal; }
        bool Intersects( BSPNode *Plane );
        BSPNode *Split( BSPNode *Plane );
        BSPNode *GetFront( void )   { return FrontNode; }
        BSPNode *GetBack( void )    { return BackNode; }
        void SetFront( BSPNode *Node )      { FrontNode = Node; }
        void SetBack( BSPNode *Node)        { BackNode = Node; }
        void Traverse( const CPoint&amp; CameraLoc );
};
class BSPNodeHeader
{
    friend class BSPListIterator;
    friend class BSPNodeList;
    private:
        BSPNodeHeader *Next;
        BSPNode *Data;
        BSPNodeHeader( BSPNode *DataNode ) { Data=DataNode; Next=NULL;}
        void SetNext( BSPNodeHeader *NextNode )  { Next = NextNode; }
        BSPNodeHeader *GetNext( void )       { return Next; }
        BSPNode *GetData( void )                 { return Data; }
};
class BSPNodeList
{
    friend class BSPListIterator;
    private:
        BSPNodeHeader *FirstNode, *LastNode;
    public:
        BSPNodeList( void );
        ~BSPNodeList( void );
        void ReadPolys( ifstream&amp; Input );
        bool Empty( void )      { return FirstNode == NULL; }
        void Insert( BSPNode *Node );
        void Remove( BSPNode *Node );
};
class BSPListIterator
{
    private:
        BSPNodeHeader *Current;
    public:
        BSPListIterator( void );
        BSPNode *First( const BSPNodeList *List );
        BSPNode *Next( void );
};
class BSPTree
{
    private:
        BSPNodeList Nodes;
        BSPNode *Root;
        BSPNode *_FindRoot( BSPNodeList *List );
        BSPNode *_BuildBSPTree( BSPNodeList *List );
    public:
        void ReadPolyList( ifstream&amp; Input );
        void ReadTree( ifstream&amp; Input );
        void WriteTree( ofstream&amp; Output );
        void BuildTree( void );
        void Traverse( const CPoint&amp; CameraLoc );
};
</pre>

<h4><a name="0034_000f"><a name="0034_0010">Listing Two<a name="0034_0010"></h4><pre>
/* BSPNode.cpp -- Implementation of BSPNode class */
#include &lt;assert.h&gt;
#include &quot;bsp.h&quot;
//-------------- Private Functions
ulong BSPNode::_SplitPoly( BSPNode *Plane, CPoint *SplitPnts )
// This is limited to convex polygons with no more than 32 sides
{
    ulong Sides = 0;
    bool LastSideParallel = FALSE;
    if( !( Normal == Plane-&gt;Normal ) )
    {
        CPoint EdgeDelta;
        double numer, denom, t;
        for( ushort vertex=0; vertex&lt;PntCnt; vertex++ )
        {
            ushort prevVertex = vertex ? vertex - 1 : PntCnt - 1;
            EdgeDelta = PntList[ vertex ] - PntList[ prevVertex ];
            denom = EdgeDelta.DotProduct( Plane-&gt;Normal );
            if( denom )
            {
                numer = PntList[ prevVertex ].DotProduct
                                                 ( Plane-&gt;Normal ) + Plane-&gt;D;
                t = - numer / denom;
                if( !( LastSideParallel &amp;&amp; t == 0.0 ) )
                {
                    if( t &gt;= 0.0 &amp;&amp; t &lt; 0.999999 )
                    {
                    Sides |= 1 &lt;&lt; vertex;
                    if( SplitPnts )
                    {
                      SplitPnts[ vertex ].x = PntList[ 
                                            prevVertex ].x + SplitPnts[ 
                                            vertex ].y = PntList[ 
                                            prevVertex ].y + t * EdgeDelta.y;
                      SplitPnts[ vertex ].z = PntList[ 
                                            prevVertex ].z + t * EdgeDelta.z;
                        }
                    }
                }
            }
            LastSideParallel = ( denom == 0 );
        }
    }
    return Sides;
}
void BSPNode::_ComputeCenter( void )
{
    Center.x = Center.y = Center.z = 0.0;
    for( ushort i=0; i&lt;PntCnt; i++ )
    {
        Center.x += PntList[ i ].x;
        Center.y += PntList[ i ].y;
        Center.z += PntList[ i ].z;
    }
    Center.x /= PntCnt;
    Center.y /= PntCnt;
    Center.z /= PntCnt;
}
void BSPNode::_ComputeNormal( void )
{
    CPoint a, b;
    assert( PntCnt &gt;= 3 );
    a = PntList[ 0 ] - PntList[ 1 ];
    b = PntList[ 2 ] - PntList[ 1 ];
    Normal = a.CrossProduct( b );
    Normal.Normalize();
}
void BSPNode::_ComputeD( void )
{
    D = -Normal.DotProduct( Center );
}
//-------------- Public Functions
BSPNode::BSPNode( void ) :
    FrontNode( NULL ),
    BackNode( NULL ),
    Index( 0 ),
    PntCnt( 0 ),
    PntList( NULL )
{
}
BSPNode::~BSPNode( void )
{
    if( PntList )
        delete[] PntList;
};
void BSPNode::ReadPoly( ifstream&amp; Input )
{
    Input &gt;&gt; PntCnt;
    assert( PntCnt &gt;= 3 );
    PntList = new CPoint[ PntCnt ];
    for( ushort i=0; i&lt;PntCnt; i++ )
        PntList[ i ].Read( Input );
    _ComputeCenter();
    _ComputeNormal();
    _ComputeD();
}
void BSPNode::ReadNode( ifstream&amp; Input, const BSPNodeList&amp; NodePool )
{
    short FrontIndex, BackIndex;
    Input &gt;&gt; Index &gt;&gt; FrontIndex &gt;&gt; BackIndex;
    if( !Input )
        return;
    Input &gt;&gt; PntCnt;
    PntList = new CPoint[ PntCnt ];
    for( short i=0; i&lt;PntCnt; i++ )
        PntList[ i ].Read( Input );
    _ComputeCenter();
    _ComputeNormal();
    _ComputeD();
    // Find Children
    BSPListIterator Iter;
    BSPNode *TestNode = Iter.First( &amp;NodePool );
    FrontNode = BackNode = NULL;
    while( TestNode )
    {
        if( TestNode-&gt;Index == FrontIndex )
            FrontNode = TestNode;
        else if( TestNode-&gt;Index == BackIndex )
            BackNode = TestNode;
        if( FrontNode &amp;&amp; BackNode )
            return;
        TestNode = Iter.Next();
    }
}
void BSPNode::WriteNode( ofstream&amp; Output, short&amp; CurIndex )
{
    if( FrontNode )
        FrontNode-&gt;WriteNode( Output, CurIndex );
    if( BackNode )
        BackNode-&gt;WriteNode( Output, CurIndex );
    // write index and child indices
    Index = CurIndex++;
    Output &lt;&lt; Index &lt;&lt; '\n';
    Output &lt;&lt; ( FrontNode ? FrontNode-&gt;Index : -1 ) &lt;&lt; ' ';
    Output &lt;&lt; ( BackNode ? BackNode-&gt;Index : -1 ) &lt;&lt; '\n';
    // write point list
    Output &lt;&lt; PntCnt &lt;&lt; '\n';
    for( short i=0; i&lt;PntCnt; i++ )
    {
        Output &lt;&lt; '\t';
        PntList[ i ].Write( Output );
    }
    Output &lt;&lt; '\n';
}
bool BSPNode::Intersects( BSPNode *Plane )
{
    return ( _SplitPoly( Plane, NULL ) != 0 );
}
BSPNode *BSPNode::Split( BSPNode *Plane )
{
    BSPNode *NewNode;
    CPoint *SplitPnts;
    ulong Splits;
    SplitPnts = new CPoint[ PntCnt ];
    Splits = _SplitPoly( Plane, SplitPnts );
    if( Splits )
    {
        CPoint *NewPoly1, *NewPoly2;
        ushort Poly1Index = 0, Poly2Index = 0;
        ushort Destination = 0;
        NewPoly1 = new CPoint[ PntCnt ];
        NewPoly2 = new CPoint[ PntCnt ];
        for( ushort i=0; i&lt;PntCnt; i++ )
        {
            // Handle split points
            if( Splits &amp; ( 1 &lt;&lt; i ) )
            {
                NewPoly1[ Poly1Index++ ] = SplitPnts[ i ];
                NewPoly2[ Poly2Index++ ] = SplitPnts[ i ];
                Destination ^= 1;
            }
            if( Destination )
                NewPoly1[ Poly1Index++ ] = PntList[ i ];
            else
                NewPoly2[ Poly2Index++ ] = PntList[ i ];
        }
        // Make New node
        NewNode = new BSPNode;
        NewNode-&gt;PntCnt = Poly1Index;
        NewNode-&gt;PntList = NewPoly1;
        NewNode-&gt;Normal = Normal;
        NewNode-&gt;_ComputeCenter();
        delete[] PntList;
        PntCnt = Poly2Index;
        PntList = NewPoly2;
        _ComputeCenter();
    }
    delete SplitPnts;
    return NewNode;
}
void BSPNode::Traverse( const CPoint&amp; CameraLoc )
{
    CPoint VecToCam = CameraLoc - Center;
    if( VecToCam.DotProduct( Normal ) &lt; 0 )
    {
        if( FrontNode )
            FrontNode-&gt;Traverse( CameraLoc );
        // Process 'this'  i.e. render it to screen
        if( BackNode )
            BackNode-&gt;Traverse( CameraLoc );
    }
    else
    {
        if( BackNode )
            BackNode-&gt;Traverse( CameraLoc );
        // Process 'this'  i.e. render it to screen
        if( FrontNode )
            FrontNode-&gt;Traverse( CameraLoc );
    }
}
</pre>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
