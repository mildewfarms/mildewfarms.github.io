<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>APR95: Borland C++ 4.5 and OLE 2.0 Programming</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Borland C++ 4.5 and OLE 2.0 Programming<a name="0184_0070"></h1><P>
<h2><a name="0184_006e"><a name="0184_0000">Upgrading a familiar toolset</h2><P>
<h3>Ted Faison</h3><P>
<p><i><a name="0184_006f"><a name="0184_0000">Ted, who has written several books and articles on C++ and Windows, is president of Faison Computing, a firm that develops C++ applications, class libraries, and custom controls for Windows. Ted can be reached on CompuServe at 76350,1013.</i></p><hr><P>
In the C++ wars, Watcom, Symantec, Borland, Microsoft, and others have been battling for the hearts, minds, and pocketbooks of programmers. Since the release of Microsoft's Visual C++, the primary weapon in this battle has been the addition of code-generation tools and increased functionality within application frameworks. Borland C++ 4.0, for example, featured a revamped ObjectWindows Application Framework (OWL) and eliminated nonstandard C++ notation to support Windows event-handling. However, Visual C++ 1.5 included features such as database and OLE support that Borland C++ wouldn't have for some time. With the introduction of Borland C++ 4.5 (BC++ 4.5), Borland is back on the front lines, particularly when it comes to creating OLE-enabled applications. In fact, BC++ 4.5 allows you to create OLE servers and containers with the same ease as non-OLE applications. For developers writing database applications in 4.5, Borland is providing an add-on database package. In this article, however, I'll focus on the OLE additions to BC++ 4.5, along with other interesting changes to the toolset. In doing so, I'll draw occasional parallels to Microsoft's recently released Visual C++ 2.0 and provide a comparison of OWL and the Microsoft Foundation Class (MFC) library. (For details on VC++ 2.0, see &quot;Building an OLE Server Using Visual C++ 2.0,&quot; by John LaPlante, <I>DDJ</I>, February 1995.) Finally, I'll show how easy it is to develop a simple OLE server.<P>
<h3><a name="0184_0071">BC++ 4.5 Arsenal<a name="0184_0071"></h3><P>
Borland C++ 4.5 requires about 100 Mbytes of disk space and is delivered on CD-ROM (or 28 3.5-inch diskettes). It includes everything you need to create fully polished Windows applications--an integrated development environment, profilers, several text-editor environments (Borland Classic, Brief, or Epsilon), and the Resource Workshop resource editor. Resource Workshop allows you to work with standard Windows controls, enhanced Borland controls, 16- and 32-bit VBX controls, and third-party custom-control DLLs. (In comparison, Microsoft's AppStudio supports only standard Windows controls and 16-bit VBX controls.) Although Resource Workshop can be invoked from the integrated environment, it runs as a separate program. (In contrast, the version of AppStudio that ships with VC++ 2.0 runs in-place. When you run AppStudio, you don't leave the Visual Workbench environment at all.)<P>
Borland also provides several debugging tools: an integrated debugger that lets you debug programs without leaving the development environment; the stand-alone Turbo Debugger; and a remote debugger requiring a separate computer connected by a serial link. Another postmortem utility, Winspector, allows you to track down problems when a general-protection fault (GPF) occurs. Winspector captures the information that leads to the fault and creates a report indicating the modules and functions involved. Winspector works with an application's symbol table, translating arcane addresses into symbols.<P>
New to BC++4.5 is the OpenHelp system, which lets you configure how the various help files are searched. With over a dozen help files to deal with--Windows, DOS, OWL, OLE, Resource Workshop, and so on--it's nice to be able to configure the IDE help system to search only specific files. OpenHelp is a help-system manager that uses named groups of help files called &quot;search ranges.&quot; The default search range, called &quot;BC 4.5,&quot; includes all the help files. You can create your own search ranges to use only selected help files. For example, you might create a range called &quot;OWL and OCF&quot; that includes only C++, OWL, and OCF help files. You can create as many search ranges as you want. To run OpenHelp, you bring up the regular Help system by using the Help menu or clicking Control-F1 on a selected word. From the Help toolbar, you click SelectAll, and the OpenHelp dialog box appears. Perhaps the most useful feature of OpenHelp is its ability to handle searches of regular expressions. To find all the occurrences of words beginning with the string WM_GET, click the Regular Expression option and specify the search string WM_GET.<P>
<h3><a name="0184_0072">The ObjectComponents Framework<a name="0184_0072"></h3><P>
For Windows programmers, the single most-useful component of BC++ 4.5 (apart from the compiler) is OWL 2.5, with its support for OLE 2.0. Although it is backward compatible with OWL 2.0, OWL 2.5 lets you create OLE servers, containers, server/containers, and automated OLE programs. You can create servers both as DLLs and as EXEs. DLL servers are handy when you want to minimize the overhead of function calls between your application and a stand-alone OLE server running as a separate EXE application. With a DLL server, the OLE server runs in the same process space as your application, obviating the need for function calls to cross process boundaries.<P>
OWL 2.5 was extended to support OLE by enlisting the services of an entirely new OLE class hierarchy, the &quot;ObjectComponents Framework&quot; (OCF). OCF completely encapsulates low-level OLE interfaces and details, providing an exterior C++ look-and-feel that lets you work at a much-higher level of abstraction than the OLE API. Using OCF, Borland was able to incorporate full OLE support into OWL 2.5 with relatively minimal additions to OWL itself. (In comparison, MFC was OLE empowered by adding some 20,000 lines of code to MFC.)<P>
OWL was extended by creating a few new classes, such as <I>TOleDocument</I> and <I>TOleWindow</I> and by using code that manipulated a series of OCF objects. The hierarchy of the OCF classes used by OWL is shown in <a href="19950186.htm">Figure 1</A>. (OCF has several other classes used internally, but since OWL has no knowledge of them, I won't discuss them.) OCF doesn't completely encapsulate OLE on its own. Borland also provides BOCOLE (Borland ObjectComponents OLE), a DLL that wraps some of the lower-level details of OLE. BOCOLE allows you to access all of the OLE interfaces and functionality, but in addition defines a set of interfaces of its own. The idea was to alleviate the so-called &quot;impedance mismatch&quot; between applications objects and OLE objects. Applications deal with entities like documents, views, and windows. OLE is concerned with class factories, data objects, and memory allocators. Borland created interfaces in BOCOLE that match some of the abstractions used in applications. Consequently, BOCOLE has interfaces like <I>IBApplication,</I> <I>IBDocument</I>, and <I>IBContainer</I>. All the interfaces are derived from the standard OLE interface <I>IUnknown</I> and begin with the letters IB (Interface Borland). <a href="19950187.htm">Figure 2</A> shows the entire class for the BOCOLE interfaces.<P>
When you create OLE servers and containers using the AppExpert facility, you get OWL applications that use new OWL classes like <I>TOleDocument</I> and <I>TOleWindow</I>. These classes have internal OCF objects to handle OLE. The OCF classes make calls to BOCOLE, which in turn calls OLE interfaces. The good news is that everything is transparent to you; you never need to get involved with the OLE details unless you want to change one of the OLE mechanisms built into OWL.<P>
<h3><a name="0184_0073">MFC versus OWL <a name="0184_0073"></h3><P>
New C++ programmers frequently ask questions about application frameworks. The bottom line is that the framework you prefer depends on the tasks your application performs, your programming style, and how object oriented you are. In short, the choice is subjective. I prefer OWL because of its excellent container classes, great GDI encapsulation, multiple inheritance, and the large number of classes it supports. On the other hand, MFC 3.0 supports a few things OWL doesn't--ODBC database programming, OCX controls, mini-framed windows, dockable windows, and tabbed dialog boxes. Those differences may be important to you. Listings <a href="#0184_0079">One</A> through <a href="#0184_0097">Thirty-one</A> show a number of common programming operations, coded in both MFC and OWL code. In each listing, &quot;(a)&quot; refers to MFC code, while &quot;(b)&quot; refers to OWL.<P>
From the outset, MFC was designed with C programmers in mind. It provides a relatively thin encapsulation of underlying Windows API functions, often foregoing C++ features that would have made life easier. Consider creating a pen. Using Windows API code with C, you do something like <a href="#0184_0077">Example 1(a)</A>. Because pens are most often created with the PS_SOLID style, a width of &quot;1,&quot; and the color &quot;black,&quot; it would have made sense for MFC to use C++ default arguments. Instead, a pen must be created as in <a href="#0184_0077">Example 1(b)</A>. The OWL approach shown in <a href="#0184_0077">Example 1(c)</A> exemplifies how default arguments allow you to use a simpler notation. Declaring a <I>TPen</I> object creates not only the object, but also a corresponding Windows pen. The pen is automatically initialized with default arguments, which you can always change if necessary. <P>
When you use a pen to draw a line, Windows API code looks something like <a href="#0184_0078">Example 2(a)</A>. Note that the MFC code in <a href="#0184_0078">Example 2(b)</A> is almost identical. When you are done using the pen, MFC requires you to deselect it from the device context, before the pen is destroyed by going out of scope. By comparison, OWL GDI objects are smart, because they track the <I>TDC</I> object they are selected into and automatically deselect themselves before destroying the associated Windows GDI object; see <a href="#0184_0078">Example 2(c)</A>. If you have a lot of GDI code in your application, using OWL will simplify things considerably, saving you from tracking GDI memory leaks due to undeleted objects.<P>
<h3><a name="0184_0074">Creating an OLE Application<a name="0184_0074"></h3><P>
To show how to get an OLE app up and running, I've created a simple OLE server which I'll test by embedding in it into a Word for Windows 6.0 document. Developing an OLE server or container with BC++ 4.5 couldn't be easier. AppExpert has been beefed up to include support for all OLE application types. You can create servers, containers, server/containers, and automated applications. The first step in creating any OLE app is always AppExpert. Using the menu Project|AppExpert, bring up the AppExpert Options dialog (see <a href="19950188.htm">Figure 3</A>) from which you can create servers as either DLLs or EXEs. The latter are more versatile, because they can be used from both 16- and 32-bit applications. 16-bit server DLLs can only be used with 16-bit applications. 32-bit DLLs are restricted to 32-bit applications. By clicking the Generate button, I created a new project named MYTEST, containing nearly 40 files.<P>
Building a project with AppExpert is only the starting point; invariably, you will need to add some code of your own to make a useful application. AppExpert allows you to create applications with or without the Doc/View model. By default, AppExpert will use the Doc/View model, whereby the data used in a window is stored in a class derived from the OWL class <I>TDocument</I>. The data is not displayed by the document object, but by a viewer object, derived from the OWL class <I>TView</I>. A document manager is created by the application object to handle the connection between a document and a view. The viewer is actually a child window that occupies the client area of a parent window. In an MDI app, the parent window is an MDI child window derived from class <I>TMDIChild</I>. In an SDI app, the parent window is a regular window derived from <I>TFrameWindow</I>.<P>
If you select one of the OLE options with AppExpert, your application will use the Doc/View model regardless of whether you checked the Doc/View option or not, because OLE requires an application to support independent entities for its data and the displaying of the data.<P>
I tested MYTEST by embedding it in a Word 6.0 document. Using Word's Insert|Object menu, I opened the OLE dialog box, selected the OLE object type MYTEST, and inserted it into my document. Double-clicking the MYTEST object to activate it in place, Word's menus are merged with those of MYTEST. The text inside the embedded MYTEST object is painted by the default code created by AppExpert. To change what MYTEST objects display, you need to add your own code to the <I>Paint</I> function in the server's <I>TOleView</I>-derived class. <P>
The painting code created by AppExpert for the MYTEST example program is shown in <a href="#0184_0098">Listing Thirty-two</A> . Note the statement <I>dc.TextOut(0, 30, &quot;mytest OLE Server&quot;);</I> at the end of the listing. To change what MYTEST objects display, replace this statement with whatever code you need. Typically, the data contained in the view's document is accessed, using the <I>TDocument</I> pointer data member <I>Doc</I>.<P>
<h3><a name="0184_0075">Final Comments<a name="0184_0075"></h3><P>
Although most developers are still shying away from OLE 2.0 support in their programs, I think that will begin to change later this year, with the release of Windows 95. Borland C++ 4.5 gives you all the support you need for OLE, with one exception: OLE controls. The good news is that OLE controls aren't used by any applications I know of yet. However, this will soon change, and they will become essential with Windows 95. Presumably, Borland will update OWL to support not only OLE controls, but all the new gadgets and widgets in Windows 95.<P>
<h3><a name="0184_0076">For More Information<a name="0184_0076"></h3><P>
Borland C++ 4.5<P>
Borland International<P>
100 Borland Way<P>
Scotts Valley, CA 95066-3249<P>
408-431-1000<P>
$499.95<P>
<a href="19950189.htm">Figure 1</A>  The OCF classes used directly by OWL.
<a href="1995018a.htm">Figure 2</A>  The complete BOCOLE hierarchy.
<h4><a name="0184_0077"><B>Example 1:</B> (a) Creating a pen using C and the Windows API; (b) MFC does not take advantage of default arguments; (c) OWL's use of default arguments allows for simpler notation.<a name="0184_0077"></h4><P>
<pre>(a)
HPEN pen;
pen = CreatePen(PS_SOLID, 1,
             RGB(0, 0, 0) );

(b)
Cpen pen;
pen.Create(PS_SOLID, 1,
             RGB(0, 0, 0) );

(c)
 TPen pen;</pre><P>
<h4><a name="0184_0078"><B>Example 2:</B> (a) Making Windows API calls from C to draw a line; (b) drawing a line using MFC; (c) drawing a line using OWL.<a name="0184_0078"></h4><P>
<pre>(a)
void DrawLine(HDC dc)
{
  HPEN pen;
  pen=CreatePen(PS_SOLID, 1, RGB(0,0,0) );
  HPEN pOldPen = SelectObject(dc, pen);
  MoveTo(dc, 10, 10);
  LineTo(dc, 20, 30);
  SelectObject(dc, oldPen);
}

(b)
void CMyWnd::DrawLine(CDC&amp; dc)
{
  CPen pen;
  pen.CreatePen(PS_SOLID, 1, RGB(0,0,0) );
  CPen* pOldPen = dc.SelectObject(&amp;pen);
  dc.MoveTo(10, 10);
  dc.LineTo(20, 30);
  dc.SelectObject(pOldPen);
}

(c)
void TMyWnd::Line(TDC&amp; dc)
{
 TPen pen;
 dc.SelectObject(pen);
 dc.MoveTo(0, 100);
 dc.LineTo(100, 20);
}</pre><P>
<a href="1995018b.htm">Figure 3</A>  The AppExpert Options dialog box.
<P>
<h4><a name="0184_0079">Listing One: Creating a window. <a name="0184_0079"></h4><pre>

(a)     CMyWnd* myWnd = new CMyWnd;<P>myWnd-&gt;Create(...);

(b)     TMyWindow* w = new <P>TMyWindow(...);


</pre>
<h4><a name="0184_0108"><a name="0184_007a">Listing Two: Creating an MDI frame window.<a name="0184_007a"></h4><pre>

(a)     class CMyWnd : <P> public CMDIFrameWnd {...};<P>class CMyApp : <P>    public CWinApp {<P>public:<P>// ...<P> virtual BOOL InitInstance() {<P>   CMyWnd* w = new CMyWnd;<P>   if (!w)-&gt;LoadFrame(IDRES) )<P>     return FALSE;<P>   w-&gt;ShowWindow(m_nCmdShow);<P>   w-&gt;UpdateWindow();<P>   m_pMainWnd = w;<P>   return TRUE;<P>  }<P>};

(b)     class TMyWnd : <P>  public TMDIFrame {...};<P>class TMDIFileApp : <P>    public TApplication {<P>public:<P> void InitMainWindow() {<P>  Frame = new TMDIFrame(..);<P>  Frame-&gt;Attr.AccelTable = IDRES;<P>  Frame-&gt;SetMenuDescr(...);<P> }<P>};


</pre>
<h4><a name="0184_0109"><a name="0184_007b">Listing Three: Creating an SDI frame window.<a name="0184_007b"></h4><pre>

(a)     class CMyWnd : <P>  public CFrameWnd {...};<P>class CMyApp : public CWinApp {<P>public:<P>// ...<P>  virtual BOOL InitInstance(){<P>    CMyWnd* w = new CMyWnd;<P>    if (!w-&gt;LoadFrame(IDRES) )<P>      return FALSE;<P>    w-&gt;ShowWindow(m_nCmdShow);<P>    w-&gt;UpdateWindow();<P>    m_pMainWnd = w;<P>    return TRUE;<P>  }<P>};

(b)     class TMyWnd :<P>  public TFrameWindow {...};<P>class TSDIFileApp : public<P>TApplication {<P>public:<P> void InitMainWindow() {<P>  Frame = new <P>TFrameWindow(...);<P>  Frame-&gt;Attr.AccelTable = IDRES;<P>  Frame-&gt;SetMenuDescr(...);<P> }<P>};


</pre>
<h4><a name="0184_010a"><a name="0184_007c">Listing Four: Creating Doc/View templates.<a name="0184_007c"></h4><pre>

(a)     class CMyWnd : public<P>   CMDIChildWnd {..};<P>class CMyApp : public CWinApp {<P>public:<P>// ...<P> virtual BOOL InitInstance() {<P>  AddDocTemplate(new<P>   CMultiDocTemplate(IDRES,<P>    RUNTIME_CLASS(CMyDoc),<P>    RUNTIME_CLASS(CMyWnd),<P>    RUNTIME_CLASS(CMyView)));<P>  CMyWnd* w = new CMyWnd;<P>  if (!w-&gt;LoadFrame(IDRES) )<P>    return FALSE;<P>  w-&gt;ShowWindow(m_nCmdShow);<P>  w-&gt;UpdateWindow();<P>  m_pMainWnd = w;<P> }<P>};

(b)     DEFINE_DOC_TEMPLATE_CLASS(<P>  TMyDocument, TMyView, MyTemplate);<P>MyTemplate btpl(&quot;My files&quot;, &quot;*.txt&quot;, 0, &quot;TXT&quot;, dtAutoDelete);<P>class TMyApp : public <P>TApplication {<P>public:<P>// ...<P>void  InitMainWindow() {<P>  DocManager = new <P>TDocManager(dmSDI | dmMenu);<P>  }<P>};


</pre>
<h4><a name="0184_010b"><a name="0184_007d">Listing Five: Iterating over child windows.<a name="0184_007d"></h4><pre>

(a)     void CMyWnd::Iterate()<P>{<P> for (CWnd* w = GetTopWindow();<P>      w != NULL;<P>      w = w-&gt;GetNextWindow()) {<P>   // use child window 'w<P> }<P>}

(b)     static void f(TWindow* w, void*)<P>{...do something with 'w'}<P>void TMyWindow::g()<P>{   ForEach(f); }<P>

</pre>
<h4><a name="0184_010c"><a name="0184_007e">Listing Six: Locating a child window.<a name="0184_007e"></h4><pre>

(a)     CWnd* CMyWnd::FindChild()<P>{<P> for (CWnd* w = GetTopWindow();<P>      w != NULL;<P>      w = w-&gt;GetNextWindow()) {<P>  // see if child window found<P>  if (w is the right window)<P>    return w;<P> }<P> return 0;<P>}

(b)     static BOOL f(TWindow* win, void*)<P>{<P>  if (win satisfies some condition)<P>    return TRUE;<P>  else<P>    return FALSE;<P>}<P>void TMyWindow::g()<P>{<P>  TWindow* first = FirstThat(f);<P>  TWindow* last  = LastThat(f);<P>}


</pre>
<h4><a name="0184_010d"><a name="0184_007f">Listing Seven: Finding active MDI child window.<a name="0184_007f"></h4><pre>

(a)     class CMyWnd: public <P>CMDIFrameWnd {<P>// ...<P>public:<P>  void f() {<P>    CMDIChildWnd* w = MDIGetActive();<P>    if (!w) return;<P>    // use w ...<P>  }<P>};

(b)     class TMDIFileApp : public <P>TApplication {<P>public:<P>// ...<P>  MDIClient* Client;<P>protected:<P>  void f() {<P>  TMDIChild* w = Client-&gt;GetActiveMDIChild();<P>  if (!w) return;<P>  // use w..<P>}<P>};


</pre>
<h4><a name="0184_010e"><a name="0184_0080">Listing Eight: Initializing controls in a dialog box.<a name="0184_0080"></h4><pre>

(a)     class CMyDlg : public CDialog {<P>public:<P>// ...<P>  //{{AFX_DATA(CMyDlg)<P>    int m_Value1;<P>    int m_Value2;<P>  //}}AFX_DATA<P>protected:<P>  DECLARE_MESSAGE_MAP()<P>};<P>void CMyDlg::DoDataExchange(CDataExchange* pDX)<P>{<P> CDialog::DoDataExchange(pDX);<P> DDX_Text(pDX, IDC_EDIT1, m_Value1);<P> DDV_MinMaxInt(pDX, m_Value1, -10, 20);<P> DDX_Text(pDX, IDC_EDIT2, m_Value2);<P> DDV_MinMaxInt(pDX, m_Value2, 0, 100);<P>}

(b)     struct {<P>  // transfer buffer<P>  // ...<P>} Buffer<P>class TMyDlg : public <P>TDialog {<P>public:<P>  // ...<P>  TMyDlg(...) {<P>  // .. create controls<P>  TransferBuffer = &amp;Buffer;<P> }<P>};


</pre>
<h4><a name="0184_010f"><a name="0184_0081">Listing Nine: Bitmapped buttons.<a name="0184_0081"></h4><pre>

(a)     ass CMyDlg : public CDialog {<P>public:<P>  enum {IDD = IDD_BITMAPDLG};<P>  CMyDlg();<P>// ...<P>protected:<P>  CBitmapButton button1;<P>};<P>CMyDlg::CMyDlg() : CDialog(CMyDlg::IDD) <P>{<P>  if (!button1.LoadBitmaps(&quot;Up&quot;,&quot;Down&quot;,&quot;Focus&quot;)) {<P>   TRACE(&quot;Problem!&quot;);<P>   AfxThrowResourceException();<P>  }<P>}

(b)     no code necessary


</pre>
<h4><a name="0184_0110"><a name="0184_0082">Listing Ten: Creating a pen.<a name="0184_0082"></h4><pre>

(a)     CPen pen;<P>pen.CreatePen(PS_SOLID, 1, RGB(0,0,0));

(b)     TPen pen(TColor(0, 0, 0) );


</pre>
<h4><a name="0184_0111"><a name="0184_0083">Listing Eleven: Drawing a line.<a name="0184_0083"></h4><pre>

(a)     void CMyWnd::Line(CDC&amp; dc)<P>{<P>  CPen pen;<P>  pen.CreatePen(PS_SOLID, 1, RGB(0,0,0) );<P>  CPen* pOldPen = dc.SelectObject(&amp;pen);<P>  dc.MoveTo(10, 10);<P>  dc.LineTo(20, 30);<P>  dc.SelectObject(pOldPen);<P>}

(b)     void TMyWnd::Line(TDC&amp; dc)<P>{<P> TPen pen(TColor(0, 0, 0) );<P> dc.SelectObject(pen);<P> dc.MoveTo(0, 100);<P> dc.LineTo(100, 20);<P> dc.RestorePen();<P>}


</pre>
<h4><a name="0184_0112"><a name="0184_0084">Listing Twelve: Painting with a brush.<a name="0184_0084"></h4><pre>

(a)     void CMyWnd::Box(CDC&amp; dc)<P>{<P>  CBrush brush(RGB(0, 0, 0) );<P>  CBrush* pOldBrush = pDC-&gt;SelectObject(&amp;brush);<P>  dc.Rectangle(30, 30, 100, 100);<P>  dc.SelectObject(pOldBrush);<P>}

(b)     void TMyWnd::Box(TDC&amp; dc)<P>{<P> dc.SelectObject(<P>   TBrush(Color(0,0,0)));<P> dc.Rectangle(0,20,30,400);<P> dc.RestoreBrush();<P>}


</pre>
<h4><a name="0184_0113"><a name="0184_0085">Listing Thirteen: Creating fonts.<a name="0184_0085"></h4><pre>

(a)     void CMyWnd::Font(CDC&amp; dc)<P>{<P> LOGFONT lf;<P> memset(&amp;lf, 0, sizeof(lf));<P> lf.lfHeight = 20;<P> lf.lfWeight = FW_BOLD;<P> strcpy(lf.lfFaceName, &quot;Arial&quot;);<P> CFont font;<P> font.CreateFontIndirect(&amp;lf));<P>}

(b)     void TMyWnd::Font(TDC&amp; dc)<P>{<P> LOGFONT lf;<P> memset(&amp;lf, 0, sizeof(lf));<P> lf.lfHeight = 20;<P> lf.lfWeight = FW_BOLD;<P> strcpy(lf.lfFaceName, &quot;Arial&quot;);<P> TFont font(&amp;lf);<P>}


</pre>
<h4><a name="0184_0114"><a name="0184_0086">Listing Fourteen: Displaying bitmaps.<a name="0184_0086"></h4><pre>

(a)     void CMyWnd::DrawBM(CDC&amp; dc)<P>{<P> CBitmap bm;<P> bm.Create(&quot;MYBITMAP&quot;);<P> CBitmap* pbmOld;<P> CDC dcMem;<P> dcMem.CreateCompatibleDC(&amp;dc);<P> pbmOld = dcMem.SelectObject(&amp;bm);<P> dc.BitBlt(100, 100, 50, 50, &amp;dcMem, 0, 0, SRCCOPY);<P> dcMem.SelectObject(pbmOld);<P> dcMem.DeleteDC();<P>}



(b)     void TMyWnd::Draw(TDC&amp; dc)<P>{<P>  TBitmap* bm = new <P>TBitmap(*GetModule(), &quot;ID&quot;);<P>  TMemoryDC memoryDC(dc);<P>  memoryDC.SelectObject(*Bitmap);<P>  TRect rect(0, 0, 40, 40);<P>  dc.BitBlt(rect, memoryDC, TPoint(0,0), SRCCOPY);<P>}


</pre>
<h4><a name="0184_0115"><a name="0184_0087">Listing Fifteen: Creating an array.<a name="0184_0087"></h4><pre>

(a)     CByteArray myArray;

(b)     TIArrayAsVector&lt;int&gt;myArray(5,0,5);;


</pre>
<h4><a name="0184_0116"><a name="0184_0088">Listing Sixteen: Copying an array.<a name="0184_0088"></h4><pre>

(a)     CByteArray myArray;    // array to be copied<P>CByteArray copyArray;  // array copied into<P>    for (int i=0; i &lt; <P>myArray.GetSize(); i++)<P>      copyArray [i] = myArray [i];<P>
(b)     TVectorImp&lt;int&gt; myArray;<P>TVectorImp&lt;int&gt; copyArray;<P>for (int i = 0; <P>     i &lt; myArray.Count();<P>     i++)<P> copyArray [i] = myArray [i];


</pre>
<h4><a name="0184_0117"><a name="0184_0089">Listing Seventeen: Adding elements to an array.<a name="0184_0089"></h4><pre>

(a)     CByteArray myA;<P>BYTE value = 2;<P>myA.Add(value);

(b)     TIArrayAsVector&lt;int&gt; myA(5,0,5);<P>int value = 5;<P>myA.AddAt(&amp;value, 5);


</pre>
<h4><a name="0184_0118"><a name="0184_008a">Listing Eighteen: Removing elements from an array.<a name="0184_008a"></h4><pre>

(a)     CByteArray myArray;<P>myArray.RemoveAt(10);<P>
(b)     TIArrayAsVector&lt;int&gt; myArray(5,0,5);<P>myArray.Detach(3);


</pre>
<h4><a name="0184_0119"><a name="0184_008b">Listing Nineteen: Searching an array for an item.<a name="0184_008b"></h4><pre>

(a)     CByteArray myArray;<P>int FindItem(BYTE value)<P>{<P>  for (int i=0; i &lt; <P>myArray.GetSize(); i++) {<P>     if (myArray [i] == value)<P>        return i;<P>  }<P>  return -1;<P>}

(b)     TIArrayAsVector&lt;int&gt; myArray(5,0,5);<P>int value = 5;<P>int index = myArray.Find(&amp;value);


</pre>
<h4><a name="0184_011a"><a name="0184_008c">Listing Twenty: Deleting the items in an array.<a name="0184_008c"></h4><pre>

(a)     CStringArray myArray;<P>void DeleteArray()<P>{<P>  for (int i=0; i &lt; <P>myArray.GetSize(); i++) delete myArray [i];<P>  myArray.RemoveAll();<P>}

(b)     TIArrayAsVector&lt;int&gt; myArray(5,0,5);<P>myArray.Flush();


</pre>
<h4><a name="0184_011b"><a name="0184_008d">Listing Twenty-one: Creating a list.<a name="0184_008d"></h4><pre>

(a)     CStringList myList;

(b)     TListImp&lt;string&gt; myList();


</pre>
<h4><a name="0184_011c"><a name="0184_008e">Listing Twenty-two: Copying a list.<a name="0184_008e"></h4><pre>

(a)     CStringList myList;  // list to copy<P>CStringList copyList; // list copied to<P>void CopyList()<P>{<P>  POSITION pos = myList.GetHeadPosition();<P>  while (pos)<P>     copyList.AddTail(myList.GetNext(pos) <P>);<P>}

(b)     TListImp&lt;string&gt; myList;<P>TListImp&lt;string&gt; copyList;<P>static void DoCopy(string&amp; s, void*)<P>{copyList.Add(s);}<P>void f()<P>{ myList.ForEach(DoCopy, 0); }

</pre>
<h4><a name="0184_011d"><a name="0184_008f">Listing Twenty-three: Adding items to a list.<a name="0184_008f"></h4><pre>

(a)     CStringList myList;<P>myList.AddTail(&quot;Hello&quot;);<P>myList.AddHead(&quot;Good-bye&quot;);

(b)     TListImp&lt;string&gt; myList;<P>string s(&quot;Test&quot;);<P>myList.Add(s);


</pre>
<h4><a name="0184_011e"><a name="0184_0090">Listing Twenty-four: Removing items from a list.<a name="0184_0090"></h4><pre>

(a)     CStringList myList;<P>void RemoveItem(CString&amp; target)<P>{<P>  POSITION pos = myList.GetHeadPosition();<P>  while (pos) {<P>     CString&amp; str = myList.GetNext(pos);<P>     if (str == target)<P>    myList.RemoveAt(pos);<P>        delete str;<P>  }<P>}<P>
(b)     TListImp&lt;string&gt; myList;<P>string s(&quot;Test&quot;);<P>myList.Detach(s);


</pre>
<h4><a name="0184_011f"><a name="0184_0091">Listing Twenty-five: Searching a list for an item.<a name="0184_0091"></h4><pre>

(a)     CStringList myList;<P>BOOL HasString(CString&amp; target)<P>{<P>  POSITION pos = myList.GetHeadPosition();<P>  while (pos) {<P>     CString&amp; str = myList.GetNext(pos);<P>     if (str == target)<P>        return TRUE;<P>  }<P>  return FALSE;<P>}

(b)     TListImp&lt;string&gt; myList;<P>string s(&quot;Test&quot;);<P>if (myList.Find(s) ) {<P>  // the item was found...<P>}<P>

</pre>
<h4><a name="0184_0120"><a name="0184_0092">Listing Twenty-six: Deleting all the items in a list.<a name="0184_0092"></h4><pre>

(a)     CStringList myList;<P>void DeleteList()<P>{<P>  POSITION pos = myList.GetHeadPosition();<P>  while (pos)<P>     delete <P>myList.GetNext(pos);<P>  myList.RemoveAll();<P>}

(b)     TListImp&lt;string&gt; myList;<P>myList.Flush();


</pre>
<h4><a name="0184_0121"><a name="0184_0093">Listing Twenty-seven: Creating a dictionary.<a name="0184_0093"></h4><pre>

(a)     CMapStringToOb myMap;

(b)     // create a hashable class<P>class HashString : public <P>string {<P>public:<P> HashString() : string() {}<P> HashString(const char* s) : string(s) {}<P> unsigned HashValue() const <P>{ return hash(); }<P>};<P>void f()<P>{   typedef<P> TDDAssociation&lt;HashString, HashString&gt; symbol;<P>TDictionaryAsHashTable &lt;symbol&gt; Dictionary;


</pre>
<h4><a name="0184_0122"><a name="0184_0094">Listing Twenty-eight: Copying a dictionary.<a name="0184_0094"></h4><pre>

(a)     CMapStringToOb myMap;  // map to copy<P>CMapStringToOb myCopy; // map copied to<P>POSITION pos = myMap.GetStartPosition();<P>while (pos) {<P>  CString string;<P>  CObject* pObject;<P>  myMap.GetNextAssoc(pos, string, pObject);<P>  copyMap.SetAt(string, pObject);<P>}

(b)     typedef TDDAssociation<P>&lt;HashString, HashString&gt; symbol;<P>typedef <P>  TDictionaryAsHashTable &lt;symbol&gt; dictionary;<P>dictionary myTable;<P>dictionary copyTable;<P>static void DoCopy(symbol&amp; s, void*)<P>{ copyTable.Add(s); }<P>void f()<P>{ myTable.ForEach(DoCopy, 0);<P>}


</pre>
<h4><a name="0184_0123"><a name="0184_0095">Listing Twenty-nine: Adding items to a dictionary.<a name="0184_0095"></h4><pre>

(a)     CMapStringToOb myMap;<P>CString string;<P>CObject* pObject;<P>myMap.SetAt(string, pObject);

(b)     symbol s(HashString(&quot;K&quot;), HashString(&quot;V&quot;));<P>myTable.Add(s);


</pre>
<h4><a name="0184_0124"><a name="0184_0096">Listing Thirty: Removing items from a dictionary.<a name="0184_0096"></h4><pre>

(a)     CMapStringToOb myMap;<P>void RemoveItem(CString&amp; str)<P>{<P>  CObject* pObject;<P>  if (!myMap.Lookup(str,&amp;pObject))<P>     return;<P>  myMap.RemoveKey(str);<P>  delete str;<P>  delete *pObject;<P>}

(b)     symbol s(HashString(&quot;K&quot;), HashString(&quot;V&quot;) );<P>myTable.Detach(s);


</pre>
<h4><a name="0184_0097">Listing Thirty-one: Searching a dictionary for an item.<a name="0184_0097"></h4><pre>

(a)     CMapStringToOb myMap;<P>BOOL HasItem(CString&amp; str)<P>{<P>  CObject* pObj;<P>  return myMap.Lookup(str,&amp;pObj) ;<P>}

(b)     symbol s(HashString(&quot;K&quot;), HashString(&quot;V&quot;) );<P>symbol* r = myTable.Find(s);<P>if (r) {<P>   // found...<P>}

</pre>
<h4><a name="0184_0098">Listing Thirty-two:<a name="0184_0098"></h4><pre>

// Paint routine for Window, Printer, and PrintPreview for a TOleView client.
void mytestOleView::Paint (TDC&amp; dc, bool erase, TRect&amp; rect)
{
    mytestApp *theApp = TYPESAFE_DOWNCAST(GetApplication(), mytestApp);
    if (theApp) {
        // Only paint if we're printing and we have something 
        // to paint, otherwise do nothing.
        if (theApp-&gt;Printing &amp;&amp; 
            theApp-&gt;Printer &amp;&amp; 
            !rect.IsEmpty()) {
            // Use pageSize to get the size of the window to render into.
            // For a Window it's the client area; for a printer, it's the
            // printer DC dimensions; for print preview, it's layout window.
            TSize pageSize(rect.right - rect.left, rect.bottom - rect.top);
            TPrintDialog::TData &amp;printerData = theApp-&gt;Printer-&gt;GetSetup();
            // Compute the number of pages to print.
            printerData.MinPage = 1;
            printerData.MaxPage = 1;
            TOcView* ocView = GetOcView();
            // Default TOcPart painting
            TRect clientRect = GetClientRect();
            TRect logicalRect = clientRect + (Tsize&amp;) ocView-&gt;GetOrigin();
            for (TOcPartCollectionIter i(GetOcDoc()-&gt;GetParts()); 
                 i; 
                 i++) {
                TOcPart&amp; p = *i.Current();
                if (p.IsVisible(logicalRect)) {
                TRect r = p.GetRect();
                r -= ocView-&gt;GetOrigin();
                 // Draw the embedded object
                p.Draw(dc, r, clientRect);
                if (p.IsSelected()) {
                TUIHandle handle(r, TUIHandle::HandlesIn |
                                        TUIHandle::Grapples    |
                            TUIHandle::HatchBorder, 5);
                handle.Paint(dc);
                } 
                 else {
                  TUIHandle handle(r, TUIHandle::HatchBorder, 5);
                  handle.Paint(dc);
                }
                }
            }
            // INSERT&gt;&gt; Special printing code goes here.
        } else {
            TOleView::Paint(dc, erase, rect);
            // INSERT&gt;&gt; Normal painting code goes here.
        }
        dc.TextOut(0, 30, &quot;mytest OLE Server&quot;);
    }
}

</pre>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
