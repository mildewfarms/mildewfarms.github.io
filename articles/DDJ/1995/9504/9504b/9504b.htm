<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>APR95: The Detrimental Wire Exclusion Heuristic</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>The Detrimental Wire Exclusion Heuristic<a name="0155_0066"></h1><P>
<h2><a name="0155_0064"><a name="0155_0000">A new approach to combinatorial optimization</h2><P>
<h3>Paul J. Martino</h3><P>
<p><i><a name="0155_0065"><a name="0155_0000">Paul is a computer-science major at Lehigh University and president of Ahpah Software, a company working on the upcoming graphics adventure game, &quot;Vengeance.&quot; Paul can be contacted on CompuServe at 73340,3456.</i></p><hr><P>
The problem of computer wiring belongs to the field of combinatorial optimization. It is analogous to the shortest-Hamiltonian-path problem except that a source/terminator rule dictates where the tour must begin and end. The computer-wiring problem is classified as NP-Hard (Lawler et al.). In order to find the optimal solution with 100 percent assurance, branching and bounding techniques must typically be used. These processes usually require inordinate program run times and are prohibitive for large numbers of pins. Therefore, heuristics that create good tours are desirable, even if the tours are sometimes suboptimal.<P>
The two main classes of heuristics for combinatorial-optimization problems are tour creation and tour improvement. The first produces a tour without having a tour as a starting point (nearest neighbor, for example); the second improves upon an initial tour (like Lin-Kernighan). Some heuristics, such as Krolak, Felts, and Marble's man-machine approach, incorporate both classes of heuristics. This is the type of heuristic I present in this article. This new heuristic can be applied to combinatorial-optimization problems, including the traveling-salesman and vehicle-routing problems. <P>
<h3><a name="0155_0067">Computer-Wiring Theory<a name="0155_0067"></h3><P>
Underlying the computer-wiring problem is the assumption that, given a set of <I>n</I> pins, there are <I>n</I>(<I>n</I>--1)/2 distances between any two pins in the set. These individual distances are referred to as &quot;wires&quot; or &quot;edges.&quot; The <I>n</I>x<I>n</I> matrix of wires is called the &quot;cost matrix&quot; and represents any notion of distance such as time, length, or cost. The value of the wire between locations <I>i</I> and <I>j</I> is noted as C<I><SUB>ij</SUB></I>. The objective of the computer-wiring problem is to find the set of <I>n</I>-1 wires in C that creates the minimum-valued serial tour through all pins. Symmetric problems have C<I><SUB>ij</SUB></I>=C<I><SUB>ji</SUB></I> for all <I>i</I> and <I>j</I> and C<I><SUB>ii</SUB></I>=0 for all <I>i</I>. <P>
The concept of this heuristic is that although a wire is short, it is not necessarily effective to use in the tour. This notion was derived through numerous runs of the nearest-neighbor heuristic, which works as follows:<P>
<OL>
<LI>Choose a pin, <I>i,</I> from the set of all pins to connect.</LI>
<LI>Select the smallest C<I><SUB>ij</SUB></I> in which pin <I>j</I> has not been visited. Add this wire to the end of the connection order. </LI>
<LI>Set <I>i</I>=<I>j</I> and repeat step 2 until all pins are connected. </LI>
</OL>
The nearest-neighbor heuristic is classified as &quot;greedy&quot; because it always attempts to use the shortest remaining wire. This process typically results in the use of extremely long wires toward the end of the tour. <a href="19950157.htm">Figure 1</A>(a) illustrates how the early use of the short Wire A leads to the use of the long Wire E. <a href="19950158.htm">Figure 1</A>(b) illustrates a much better tour that initially uses Wire F instead of Wire A. The new heuristic isolates and eliminates these short wires (like Wire A) that are detrimental to the overall tour. This isolation and elimination of specific wires is called &quot;detrimental-wire exclusion.&quot; <P>
Many of the short but detrimental wires are part of a minimum spanning tree (MST) for the set of pins. The MST is the set of the shortest <I>n</I>-1 wires that form a jointed net that includes all pins; see <a href="19950159.htm">Figure 2</A>. The lengths of the edges in this figure are a measure of the C<I><SUB>ij</SUB></I> values.<P>
Kruskal proves a polynomial algorithm for the MST problem. This and other algorithms do not enforce the restriction that each pin can touch a maximum of two others. To enforce this restriction, Held and Karp and Christofides use Lagrangian multipliers. Later work with Lagrangian multipliers is done by Volgenant and Jonker. Note that an MST is not always unique--problems with several wires of the same length typically have a few MSTs. <P>
To find a pattern in the short but detrimental wires, we examined both classic and new, randomly generated problems. We found that many of the detrimental wires are MST wires that include multiply connected pins (those which have more than one wire attached to them). Wires A, B, E, G, H, J, and K in <a href="1995015a.htm">Figure 2</A> are examples of these. <P>
<h3><a name="0155_0068">The Detrimental-Wire-Exclusion Heuristic<a name="0155_0068"></h3><P>
The concepts I've discussed lead to the following heuristic for the computer-wiring problem:<P>
<UL>
<Li>1.     If not given the cost matrix C, create it based on an appropriate cost function. </LI>
<LI>2.     Sort the wires of the matrix from shortest to longest and mark all wires as eligible for use in the tour.</LI>
<LI>3.     Using the <I>n</I>--1 shortest wires that include all <I>n</I> pins, create an MST for the set of pins. Any optimal MST algorithm can be used. This tree will serve as a model for wire exclusion in later steps. </LI>
<LI>4.     Create a tour using this subheuristic: </LI>
<LI>     (a) Pick the shortest eligible wire from the wire list that does not cause any pin to be connected to more than two wires and does not create a closed circuit within the current subtour. Add the selected wire to the list of wires to be used in the tour. </LI>
<LI>     (b) Repeat step 4(a) until a tour of <I>n</I>--1 wires is created. Disjoint wires can be selected during all but the final repetition of step 4(a). </LI>
<LI>5.     Starting at any pin <I>i</I>, mark a possibly detrimental wire that connects to pin <I>i</I> as ineligible for use in the tour. Then create a new tour as in step 4. Recall that a possibly detrimental wire is a member of the MST found in step 3, and it connects to a pin that has at least one other minimum-tree wire connected to it. Note that pin <I>i</I> does not always have a possibly detrimental wire connected to it. </LI>
<LI>6.     If the new tour is shorter than any previously seen tour, permanently mark that wire as ineligible and store this tour as the best one seen.</LI>
<LI>7.     Repeat steps 5 and 6 for each pin in the tour. Some possibly detrimental wires may be excluded twice because both pins the wire connects may be multiply connected.</LI>
<LI>8.     The shortest tour found by steps 4--7 is the one the heuristic produces.</LI>
</UL>
<h3><a name="0155_0069">An Example<a name="0155_0069"></h3><P>
<a href="1995015b.htm">Figure 3</A> illustrates the use of the detrimental-wire-exclusion heuristic on a set of six pins labeled p<SUB>1</SUB> through p<SUB>6</SUB>. The 15 wires are noted as w<SUB>1</SUB> through w<SUB>1</SUB>5, where w<SUB>1</SUB> is the shortest wire and w<SUB>15</SUB> is the longest. Tables <a href="#0155_0070">1</A> and <a href="#0155_0071">2</A> list the pins and wires used in this example. Distances in this example are computed by the Manhattan metric (discussed on the following page.) <a href="1995015c.htm">Figure 3</A>(a) shows a minimum spanning that uses wires w<SUB>1</SUB>, w<SUB>2</SUB>, w<SUB>3</SUB>, w<SUB>4</SUB>, and w<SUB>7</SUB> to include all 6 of the pins. The number in brackets at the bottom left of the diagrams is the total length of all the wires used in the diagram. After a tree is found, all wires are marked as eligible and the subheuristic is called. The resulting tour is shown in <a href="1995015d.htm">Figure 3</A>(b). <P>
Since p<SUB>1</SUB> is not multiply connected, move to p<SUB>2</SUB>. Exclude w<SUB>1</SUB>, w<SUB>4</SUB>, and w<SUB>7</SUB> one at a time because they all multiply connect to p<SUB>2</SUB>. <a href="1995015e.htm">Figure 3</A>(c) is the tour created without w<SUB>1</SUB>. Since this tour is shorter than any seen previously, w<SUB>1</SUB> is permanently marked as ineligible. <a href="1995015f.htm">Figure 3</A>(d) is the tour created without the use of w<SUB>4</SUB> or w<SUB>1</SUB>. Since it is longer than the shortest tour, w<SUB>4</SUB> is again made eligible. <a href="19950160.htm">Figure 3</A>(e) is the tour created without w<SUB>7</SUB> or w<SUB>1</SUB>. Since it is the same length as the shortest seen tour, the conditions prior to the exclusion of w<SUB>7</SUB> are restored. All the wires that multiply connect p<SUB>2</SUB> have been tested; since p3 is not multiply connected, move to p<SUB>4</SUB>. Now exclude w<SUB>1</SUB>, w<SUB>2</SUB>, and w<SUB>3</SUB> one at a time because they all multiply connect to p<SUB>4</SUB>. Since w<SUB>1</SUB> is already permanently marked as ineligible, there is no need to create a new tour. Move to the next wire. <a href="19950161.htm">Figure 3</A>(f) is the tour created without w<SUB>2</SUB> or w<SUB>1</SUB>. It is longer than the shortest tour, so w<SUB>2</SUB> is again made eligible. <a href="19950162.htm">Figure 3</A>(g) is the tour created without w<SUB>3</SUB> or w<SUB>1</SUB>. Since this tour is longer than the best tour seen, w<SUB>3</SUB> is again made eligible. Since p<SUB>5</SUB> and p<SUB>6</SUB> are not multiply connected and p<SUB>6</SUB> is the last pin, end the heuristic and return the best tour. <P>
This example is typical of the behavior of the heuristic. A fairly good starting point, <a href="19950163.htm">Figure 3</A>(b), is improved upon by deleting wire w<SUB>1</SUB>. The more pins, the greater the improvement that can be expected, because the accuracy of the starting tour decreases as the number of pins increases. <P>
<h3><a name="0155_006a">Coding Considerations<a name="0155_006a"></h3><P>
When implementing this new heuristic, you must consider several points. For instance, when given a set of pins to connect, the pin location should be stored in the pin-data structure (when minimizing a cost matrix, this is unnecessary). The first component of the pin-data structure is a three-dimensional coordinate system for routing multilayer circuit boards. The second component should be an array of wire indexes to which each pin is connected in the minimum tree. Storing this information directly in the pin structure avoids look-up time and decreases program run time. The third component of the structure should be a ring index. <P>
To prevent short circuits in the connection order, assign each pin its own ring index at the beginning of the heuristic. Now each wire connects to two pins, and each pin has an index. When a wire is selected, all pins with a ring index the same as that of the pin with the lower ring index of the two are set equal to the higher ring index. Prior to a wire being selected, enforce the rule that pins with the same ring index cannot be connected. <P>
The wire structure should contain the indexes of the two pins that the wire connects, the cost of the wire, a permanent-ineligibility flag, and a temporary-ineligibility flag. Placing these flags here will avoid look-up time. <P>
Listings <a href="#0155_00fd">One</A> and <a href="#0155_00fe">Two</A>  provide a C implementation of this algorithm. The program compiles with Borland C without any modifications using <I>bcc -ml -etspheur *.c</I>. Changing &lt;alloc.h&gt; to &lt;malloc.h&gt; allows you to compile with Microsoft C. Provided electronically are the files PROB56.CTY, problem #56, and TSPHEUR.C and TSPHEUR.H, the command-line interface to the algorithm; see &quot;Availability,&quot; page 3.<P>
<h3><a name="0155_006b">Building Cost Matrixes<a name="0155_006b"></h3><P>
In many combinatorial-optimization problems, the cost matrix is known. In others, only a set of locations is given. The simplest way to build the cost matrix for a set of points is to use the traditional distance formula on all point pairs. In many cases, this is not an accurate indicator of the cost of traveling between the two points. Therefore, other techniques for building cost matrices are needed. <P>
One technique is the Manhattan distance. Given any two points in three-dimensional space, the Manhattan distance between (x<SUB>1</SUB>, y<SUB>1</SUB>, z<SUB>1</SUB>) and (x<SUB>2</SUB>, y<SUB>2</SUB>, z<SUB>2</SUB>) is defined as M(p1, p<SUB>2</SUB>)=|x<SUB>1</SUB>-x<SUB>2</SUB>|+|y<SUB>1</SUB>-y<SUB>2</SUB>|+|z<SUB>1</SUB>-z<SUB>2</SUB>|.<P>
This calculation is frequently used in the routing of multilayer circuit boards. In order to restrict the usage of vias (movement from one layer to another), a sufficiently large coefficient must be used on the |z<SUB>1</SUB>-z<SUB>2</SUB>| term.<P>
Another technique involves weighted bitmaps. Given two locations on a bitmap in which each cell of the map indicates the cost and/or plausibility of using that cell, the distance between those points can be found by using a minimum-cost routing algorithm. A routing algorithm is needed when the locations to be connected have blockages between them or if certain places on the bitmap are inherently more expensive than others. For example, certain parts of a circuit board are made of more expensive material than others. Therefore, placing an etch on the less expensive space lowers the total cost of the etch.<P>
<h3><a name="0155_006c">Computational Results<a name="0155_006c"></h3><P>
Lower- and upper-bounding techniques are used to quantify the usefulness of the heuristic. The minimum spanning distance is the absolute lower bound; that is, a tour can never be shorter than the minimum spanning distance. The nearest-neighbor heuristic is used as an upper bound for two reasons: First, a heuristic that creates tours longer than those of the nearest-neighbor heuristic is usually not effective. Second, many circuit boards are designed so that pins that need to be connected are placed sufficiently close to one another; hence, tours created by the nearest neighbor are normally ample solutions. <P>
In addition to the problems listed in <a href="#0155_0072">Table 3</A>, a series of 945 trials has been performed that includes varying densities of cities. Half of the trials include the enforcement of a source/terminator rule. Half of the trials used the Manhattan-distance calculation, and the other half used the traditional distance formula. In addition, several trials use air mileage between cities in the United States. On average, the tours generated by the detrimental-wire-exclusion heuristic were 19.1 percent longer than the minimum spanning distance; the tours generated by the nearest neighbor were 16.4 percent longer than those created by the new heuristic. <P>
The pin locations for the listed problems have been randomly generated with an X and Y range of 30 to 830 in multiples of 10. The pin locations used in problem 56 are listed in <a href="#0155_0073">Table 4</A>. The tour generated for problem 56 has a length of 6161. In this problem, distances between cities are computed by the traditional distance formula. <P>
The problems listed in <a href="#0155_0072">Table 3</A> were computed on an Intel 386/25 CPU. The complete list of data indicates a run-time growth with about <I>n</I><SUp>2.6</SUp>. This can be explained by the fact that the creation of a tour by the subheuristic usually does not require O(<I>n</I>2<SUP></SUP>) time. Our research indicates that, typically, only the first <I>n</I><SUP>1.6 </SUP>wires of a <I>n</I><SUP>2</SUP> wire list need to be examined to create a connection order for Euclidean and real-world problems. <P>
<h3><a name="0155_006d">Multiple-Wire Exclusion<a name="0155_006d"></h3><P>
The heuristic as described thus far excludes one wire at a time. In some cases, however, multiple-wire exclusion may lead to a slight improvement in tour length, and it can be incorporated easily. Once all wires have been excluded one at a time, they can be excluded two at a time and so forth. A loop around the calling of the subheuristic makes for a simple implementation.<P>
The main problem with multiple-wire exclusion is that run time increases dramatically. Excluding wires one at a time has a worst case run time of O(<I>n</I><SUP>3</SUP>). If the maximum wires to be excluded at one time is <I>k</I>, then there will be at least <I><SUB>n</SUB></I>C<I><SUB>k</SUB></I> calls to the subheuristic. For a fixed <I>k</I> of less than half of <I>n</I>, the worst-case run time will be O(<I>n<SUP>k</I>+2</SUP>). For instance, excluding two wires at a time leads to the number of calls to the subheuristic in <a href="19950164.htm">Example 1</A>. Since the worst-case run time of the subheuristic is O(<I>n</I><SUP>2</SUP>), the total run time will be O(<I>n</I><SUP>4</SUP>). <P>
<h3><a name="0155_006e">Conclusions<a name="0155_006e"></h3><P>
Although problems with only 175 pins or less were tackled, the heuristic presented here is portable and can be implemented on more powerful machines. Therefore, problems with thousands of pins can be quickly solved. Since the computer-wiring problem is similar to other combinatorial optimization problems, the heuristic can be applied to many other optimization applications.<P>
Acknowledgments<P>
I'd like to thank John and Charles Martino for their assistance in writing this paper. <P>
<h3><a name="0155_006f">References<a name="0155_006f"></h3><P>
Christofides, N. &quot;The Shortest Hamiltonian Chain of a Graph.&quot; <I>SIAM Journal of Applied Mathematics</I>. Vol. 19, 1970.<P>
Felts, W., P. Krolak, and G. Marble. &quot;A Man-Machine Approach Toward Solving the Traveling Salesman Problem.&quot; <I>Communications of the ACM</I>. Vol. 14, 1971.<P>
Held, M. and R.M. Karp. &quot;The Traveling-Salesman Problem and Minimum Spanning Trees.&quot; <I>Operations Research</I>. Vol. 18, 1970.<P>
------. &quot;The Traveling-Salesman Problem and Minimum Spanning Trees: Part II.&quot; <I>Operations Research</I>. Vol. 19, 1971.<P>
Kruskal, J.B., Jr. &quot;On the Shortest Spanning Subtree of a Graph and the Traveling Salesman Problem.&quot; <I>Proceedings of the American Mathematical Society</I>. Vol. 7, 1956.<P>
Lawler, E.L., J.K. Lenstra, A.H.G. Rinnooy Kan, and D.B. Shmoys (eds.). <I>The Traveling Salesman Problem: A Guided Tour of Combinatory Optimization.</I> New York, NY: John Wiley, 1990. <P>
Lin, S. and B.W. Kernighan. &quot;An Effective Heuristic Algorithm for the Traveling Salesman Problem.&quot; <I>Operations Research</I>. Vol. 21, 1973.<P>
Volgenant, T. and R. Jonker. &quot;A Branch and Bound Algorithm for the Symmetric Traveling Salesman Problem Base on the 1-Tree Relaxation.&quot; <I>European Journal of Operations Research</I>. Vol 9, 1982.<P>
<a href="19950165.htm">Figure 1</A>  (a) A nearest-neighbor tour; (b) a much more effective tour.<P>
<a href="19950166.htm">Figure 2</A>  A minimum-spanning tree.<P>
<a href="19950167.htm">Figure 3</A>  (a) A minimum-spanning tree; (b) all wires are eligible; (c) exclude w<SUB>1</SUB>; (d) exclude w<SUB>4</SUB> and w<SUB>1</SUB>; (e) exclude w<SUB>7</SUB> and w<SUB>1</SUB>; (f) exclude w<SUB>2</SUB> and w<SUB>1</SUB>; (g) exclude w<SUB>3</SUB> and w<SUB>1</SUB>.<P>
<h4><a name="0155_0070"><B>Table 1:</B> Pin locations.<a name="0155_0070"></h4><P>
<pre>
Num  X    Y   
1   46    28
2   33    16
3   7     9
4   31    29
5   45    4
6   18    34</pre><P>
<h4><a name="0155_0071"><B>Table 2:</B> Sorted wire list.<a name="0155_0071"></h4><P>
<pre>
Num  Pins   Len   
1    2--4    15
2    1--4    16
3    4--6    18
4    2--5    24
5    1--2    25
6    1--5    25
7    2--3    33
8    2--6    33
9    1--6    34
10   3--6    36
11   4--5    39
12   3--5    43
13   3--4    44
14   5--6    57
15   1--3    58</pre><P>
<h4><a name="0155_0072"><B>Table 3:</B> Computational results and bounds (time in seconds).<a name="0155_0072"></h4><P>
<pre>
Problem  Pin     Min-Tree       DWE Heuristic    Nearest Neighbor
Number   Count  Time   Length   Time    Length   Time      Length
1        50     0.39   4103     2.97    4717     0.55      5293
2        50     0.33   4131     2.80    4698     0.49      5682
3        50     0.33   3618     3.24    4328     0.50      4583
4        50     0.33   3661     2.86    3948     0.49      4585
55       100    1.48   5202     23.56   5941     2.20      7091
56       100    1.54   5571     20.43   6161     2.04      6846
57       100    1.54   5459     19.33   6175     2.14      6871
58       100    1.54   5662     20.66   6428     2.14      7531
117      150    3.74   6709     64.65   7728     5.17      8605
118      150    3.74   6885     61.19   7774     5.39      9188
119      150    3.68   6550     60.15   7452     5.66      9086
120      150    3.68   6756     57.95   7702     5.49      9375</pre><P>
<h4><a name="0155_0073"><B>Table 4:</B> Problem 56 pin locations.<a name="0155_0073"></h4><P>
<pre>
Num    X     Y      
1     370    820
2     610    360
3     260    220
4     120    70
5     490    30
6     770    280
7     540    70
8     690    560
9     260    470
10    300    240
11    570    250
12    490    510
13    610    530
14    230    470
15    810    170
16    600    700
17    70     690
18    50     740
19    620    280
20    680    390
21    790    370
22    570    400
23    70     80
24    270    770
25    730    450
26    70     110
27    370    410
28    80     360
29    680    260
30    400    250
31    210    220
32    540    620
33    770    470
34    410    770
35    580    570
36    520    290
37    410    310
38    420    190
39    410    30
40    190    90
41    320    530
42    640    790
43    280    690
44    280    800
45    280    280
46    670    230
47    800    240
48    390    650
49    140    70
50    170    210
51    70     230
52    370    170
53    410    740
54    570    540
55    220    310
56    550    550
57    530    630
58    800    770
59    70     220
60    200    310
61    290    350
62    800    320
63    90     810
64    70     100
65    660    220
66    200    420
67    270    600
68    300    270
69    380    140
70    290    80
71    370    380
72    760    440
73    810    690
74    160    120
75    630    660
76    80     560
77    320    220
78    380    130
79    710    70
80    770    140
81    160    680
82    260    50
83    320    320
84    400    40
85    560    190
86    150    490
87    770    460
88    130    340
89    130    450
90    70     680
91    740    810
92    330    30
93    750    630
94    130    530
95    200    30
96    810    710
97    820    90
98    120    770
99    600    290
100   580    190</pre><P>
<a href="19950168.htm">Example 1</A> Excluding two wires at a time.
<P>
<h4><a name="0155_00fd"><a name="0155_0074">Listing One <a name="0155_0074"></h4><pre>
/***** CONORDER.H (TSPHEUR.EXE) Connection order routines in this unit. *****/
/* connection order pin record type  */
typedef struct {
    INT x, y, z;
    INT conns[9];
    INT ring, level;
    INT srctrm;
} CON_CITYTYPE;
/* connection order wire record type */
typedef struct {
    INT cfrom, cto;
    INT distance;
    CHAR eligible, exclude;
} CON_WIRETYPE;
/* length macros */
#define CON_CITYMAX 150
#define CON_WIREMAX 12000
#define CON_MAXLEN  9999999L
/* prototypes */
VOID  con_alloc( VOID );
VOID  con_dealloc( VOID );
LONG  con_heuristic( INT );
LONG  con_hookup( INT );
VOID  con_initcities( INT );
INT   con_levelok( INT, INT );
VOID  con_makewires( VOID );
LONG  con_mintree( VOID );
LONG  con_neighbor( VOID );
VOID  con_randcities( VOID );
VOID  con_reset( VOID );
VOID  con_setring( INT, INT );
VOID  con_sortwires( VOID );
VOID  con_sortshift( INT, INT );
INT   con_wireok( INT, INT, INT );


</pre>
<h4><a name="0155_00fe"><a name="0155_0075">Listing Two<a name="0155_0075"></h4><pre>
/***** CONORDER.C (TSPHEUR.EXE) Connection order routines in this unit. *****/
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#include &quot;defs.h&quot;
#include &quot;conorder.h&quot;
#include &quot;tspheur.h&quot;
/* variables */
CON_CITYTYPE *con_cities[CON_CITYMAX + 1]; /* city records */
CON_WIRETYPE *con_wires[CON_WIREMAX + 1];  /* wire records */
INT con_citycount, con_wirecount;          /* number of cities and wires */
INT con_numexclude;                        /* number of excluded wires */
INT con_wireorder[CON_CITYMAX + 1];        /* global order of wires */
INT con_order[CON_CITYMAX + 1];            /* order of wires */
INT con_sterm[3];                          /* source term vars */
FLOAT con_lwtot = 0;                       /* total of wires used in hookup */
INT con_hookcount = 0;                     /* number of calls to hookup */
/* imports */
EXTERN INT   tsp_stflag;
EXTERN INT   tsp_disttype;
EXTERN INT   tsp_3d;
EXTERN INT   tsp_randx;
EXTERN INT   tsp_randy;
EXTERN INT   tsp_randz;
/* con_alloc() allocates memory for the connection order algorithm */
VOID con_alloc( VOID )
    {
    INT ws, ps;
    LONG i;
    ps = sizeof( CON_CITYTYPE );
    for( i = 0; i &lt; CON_CITYMAX + 1; i++ )
    con_cities[i] = (CON_CITYTYPE *) mem_alloc( ps );
    ws = sizeof( CON_WIRETYPE );
    for( i = 0; i &lt; CON_WIREMAX + 1; i++ )
    con_wires[i] = (CON_WIRETYPE *) mem_alloc( ws );
    }
/* con_dealloc() deallocates memory from the connection order algorithm */
VOID con_dealloc()
    {
    LONG i, li;
    for( i = 0; i &lt;= con_citycount; i++ )
     mem_free( (CHAR *) con_cities[i] );
    li = con_citycount * (con_citycount - 1L) / 2L + 1L;
    for( i = 0; i &lt; li; i++ )
     mem_free( (CHAR *) con_wires[i] );
    }
/* con_heuristic() creates a net with only clim connects to each city */
LONG con_heuristic( INT clim )
    {
    LONG templen, newlen;
    INT i, k, j;
    tsp_printf( &quot;Running heuristic.&quot; );
    fprintf( stdout, &quot;    &quot; );
    con_initcities( 0 );
    con_numexclude = 0;
    templen = 0;
    newlen = con_hookup( con_citycount - 1 );
    for( i = 1; i &lt;= con_citycount - 1; i++ )
    con_wireorder[i] = con_order[i];
    for( i = 1; i &lt;= con_citycount; i++ )
    {
    if( i % 7 == 6 )
        fprintf( stdout, &quot;\b\b\b%2d%%&quot;, (i * 100) / con_citycount );
    if( con_cities[i]-&gt;conns[0] &gt;= clim )
        {
        k = 1;
        while( k &lt;= con_cities[i]-&gt;conns[0] )
        {
        con_initcities( 0 );
        if( !con_wires[con_cities[i]-&gt;conns[k]]-&gt;exclude )
            {
            con_wires[con_cities[i]-&gt;conns[k]]-&gt;eligible = 0;
            templen = con_hookup( con_citycount - 1 );
            if( templen &lt; newlen )
            {
            con_numexclude++;
            con_wires[con_cities[i]-&gt;conns[k]]-&gt;exclude = 1;
            newlen = templen;
            for( j = 1; j &lt;= con_citycount - 1; j++ )
                con_wireorder[j] = con_order[j];
            }
            }
        k++;
        }
        }
    }
    fprintf( stdout, &quot;\b\b\b\b&quot; );
    return( newlen );
    }
/* con_hookup() creates a serial route order and places it in con_order[] */
LONG con_hookup( INT wcount )
    {
    LONG netlen = 0;
    INT i = 1, ti, cf, ct;
    con_hookcount++;
    while( i &lt;= con_wirecount )
     {
     if( con_wires[i]-&gt;eligible &amp;&amp; con_wires[i]-&gt;distance != 0 )
         {
         cf = con_wires[i]-&gt;cfrom;
         ct = con_wires[i]-&gt;cto;
         ti = 0;
         if( tsp_stflag )
         ti = (wcount &gt; 1);
         if( con_wireok( cf, ct, ti ) )
         {
         if( con_levelok( cf, ct ) )
             {
             con_setring( con_cities[cf]-&gt;ring, con_cities[ct]-&gt;ring );
             con_order[wcount--] = i;
             con_wires[i]-&gt;eligible = 0;
             con_cities[cf]-&gt;level++;
             con_cities[ct]-&gt;level++;
             netlen += con_wires[i]-&gt;distance;
             if( wcount &lt; 1 )
             {
             con_lwtot += i;
             i = con_wirecount;
             }
             }
         }
         }
     i++;
     }
    if( wcount &gt; 0 )
    {
    con_lwtot += con_wirecount;
    return( CON_MAXLEN );
    }
    else
    return( netlen );
    }
/* con_initcities() reinitializes the all the cities in the net */
VOID con_initcities( INT unc )
    {
    INT j;
    for( j = 1; j &lt;= con_wirecount; j++ )
    {
    if( unc )
        con_wires[j]-&gt;exclude = 0;
    if( !con_wires[j]-&gt;exclude )
        con_wires[j]-&gt;eligible = 1;
    }
    for( j = 1; j &lt;= con_citycount; j++ )
    {
    con_cities[j]-&gt;ring = j;
    con_cities[j]-&gt;level = 0;
    }
    }
/* con_levelok() insures that no city has more than n connections on it */
INT con_levelok( INT cf, INT ct )
    {
    INT cfl, ctl, ret;
    cfl = con_cities[cf]-&gt;level;
    ctl = con_cities[ct]-&gt;level;
    if( con_cities[cf]-&gt;srctrm == 0 &amp;&amp; con_cities[ct]-&gt;srctrm == 0 )
    {
    if( cfl &lt; 2 &amp;&amp; ctl &lt; 2 )
        return( 1 );
    }
    else
    {
    if( con_cities[cf]-&gt;srctrm )
        if( con_cities[ct]-&gt;srctrm )
        ret = ((cfl &lt; 1) &amp;&amp; (ctl &lt; 1));
        else
        ret = ((cfl &lt; 1) &amp;&amp; (ctl &lt; 2));
    else
        ret = ((cfl &lt; 2) &amp;&amp; (ctl &lt; 1));
    return( ret );
    }
    return( 0 );
    }
/* con_makewires() creates a sorted list of interconnection wire lengths */
VOID con_makewires()
    {
    FLOAT tf;
    LONG i, j;
    INT tlen;
    LONG xd, yd, zd;
    tsp_printf( &quot;Building cost matrix.&quot; );
    con_wirecount = 0;
    for( i = 1; i &lt;= con_citycount; i++ )
    {
    for( j = i + 1; j &lt;= con_citycount; j++ )
        {
        switch( tsp_disttype )
        {
        case 2: xd = (SIGNED) con_cities[i]-&gt;x - (SIGNED) con_cities[j]-&gt;x;
            yd = (SIGNED) con_cities[i]-&gt;y - (SIGNED) con_cities[j]-&gt;y;
            zd = (SIGNED) con_cities[i]-&gt;z - (SIGNED) con_cities[j]-&gt;z;
            tf = sqrt( xd * xd + yd * yd + zd * zd ) + 0.5;
            tlen = (INT) tf;
            break;
        default: tlen = abs( con_cities[i]-&gt;x - con_cities[j]-&gt;x ) +
                abs( con_cities[i]-&gt;y - con_cities[j]-&gt;y ) +
                abs( con_cities[i]-&gt;z - con_cities[j]-&gt;z );
             break;
        }
        con_wirecount++;
        con_wires[con_wirecount]-&gt;cfrom = i;
        con_wires[con_wirecount]-&gt;cto = j;
        con_wires[con_wirecount]-&gt;distance = tlen;
        con_wires[con_wirecount]-&gt;eligible = 1;
        con_wires[con_wirecount]-&gt;exclude = 0;
        }
    }
    }
/* con_mintree() finds the minimum tree of the sorted list of wires */
LONG con_mintree()
    {
    LONG len = 0;
    INT i = 1, k, w = 0;
    tsp_printf( &quot;Creating minimum tree.&quot; );
    con_initcities( con_citycount );
    while( i &lt;= con_wirecount )
    {
    if( con_wireok( con_wires[i]-&gt;cfrom, con_wires[i]-&gt;cto, 0 ) &amp;&amp;
        con_wires[i]-&gt;distance != 0 )
        {
        con_setring( con_wires[i]-&gt;cfrom, con_wires[i]-&gt;cto );
        len += con_wires[i]-&gt;distance;
        con_wires[i]-&gt;eligible = 0;
        k = ++(con_cities[con_wires[i]-&gt;cfrom]-&gt;conns[0]);
        con_cities[con_wires[i]-&gt;cfrom]-&gt;conns[k] = i;
        k = ++(con_cities[con_wires[i]-&gt;cto]-&gt;conns[0]);
        con_cities[con_wires[i]-&gt;cto]-&gt;conns[k] = i;
        w++;
        }
    if( w == con_citycount - 1 )
        i = con_wirecount;
    i++;
    }
    return( len );
    }
/* con_neighbor() creates a connect order by nearest city algorithm */
LONG con_neighbor()
    {
    INT cf = 1, ct = 1, cn = 1;
    INT wlim, wc = 0, p, ti;
    LONG nlen = 0L;
    tsp_printf( &quot;Running neighbor.&quot; );
    if( tsp_stflag )
    cn = con_sterm[1];
    con_initcities( 1 );
    wlim = con_citycount - 1;
    while( wc &lt; wlim )
    {
    p = 1;
    while( p &lt;= con_wirecount )
        {
        if( con_wires[p]-&gt;eligible )
        {
        cf = con_wires[p]-&gt;cfrom;
        ct = con_wires[p]-&gt;cto;
        ti = 1;
        if( wc == con_citycount - 2 )
            ti = 0;
        if( con_wireok( cf, ct, ti ) )
            if( con_levelok( cf, ct ) )
            {
            if( cf == cn || ct == cn )
                {
                wc++;
                con_setring( con_cities[cf]-&gt;ring, con_cities[ct]-&gt;ring );
                con_wireorder[wc] = p;
                con_cities[cf]-&gt;level++;
                con_cities[ct]-&gt;level++;
                nlen += con_wires[p]-&gt;distance;
                if( cn == cf )
                cn = ct;
                else
                cn = cf;
                p = con_wirecount;
                }
            }
        }
        p++;
        }
    }
    return( nlen );
    }
/* con_randcities() creates n random cities */
VOID con_randcities()
    {
    INT i, j, x1, y1, z1, ok, done;
    for( i = 1; i &lt;= con_citycount; i++ )
     {
     done = 0;
     while( !done )
         {
         ok = 1;
         x1 = ((INT) rand() % tsp_randx) * 10 + 30;
         y1 = ((INT) rand() % tsp_randy) * 10 + 30;
         z1 = 0;
         if( tsp_3d )
         z1 = ((INT) rand() % tsp_randz) * 10;
         for( j = 1; j &lt; i; j++ )
         if( con_cities[j]-&gt;x == x1 &amp;&amp; con_cities[j]-&gt;y == y1 &amp;&amp;
             con_cities[j]-&gt;z == z1 )
             ok = 0;
         if( ok )
         {
         con_cities[i]-&gt;x = x1;
         con_cities[i]-&gt;y = y1;
         con_cities[i]-&gt;z = z1;
         done = 1;
         }
        }
    }
    }
/* con_reset() resets the traveling salesman hueristic */
VOID con_reset()
    {
    INT i;
    for( i = 1; i &lt; CON_CITYMAX + 1; i++ )
    {
    con_cities[i]-&gt;x = 0;
    con_cities[i]-&gt;y = 0;
    con_cities[i]-&gt;z = 0;
    con_cities[i]-&gt;conns[0] = 0;
    con_cities[i]-&gt;ring = 0;
    con_cities[i]-&gt;level = 0;
    con_cities[i]-&gt;srctrm = 0;
    }
    }
/* con_setring() sets the members of dest ring to src ring */
VOID con_setring( INT src, INT dest )
    {
    INT sw, i;
    sw = con_cities[dest]-&gt;ring;
    for( i = 1; i &lt;= con_citycount; i++ )
    if( con_cities[i]-&gt;ring == sw )
        con_cities[i]-&gt;ring = con_cities[src]-&gt;ring;
    }
/* con_sortwires() sorts the list of wires via a heap sort */
VOID con_sortwires()
    {
    CON_WIRETYPE temp;
    INT root, last;
    tsp_printf( &quot;Sorting wires.&quot; );
    root = con_wirecount / 2;
    last = con_wirecount;
    while( root &gt; 0 )
    {
    con_sortshift( root, last );
    root--;
    }
    root = 1;
    while( last &gt; 1 )
    { temp = *con_wires[1];*con_wires[1] = *con_wires[last];
    *con_wires[last] = temp; last--; con_sortshift( root, last ); }
    }
/* con_sortshift() is needed for the heap sort of the wires */
VOID con_sortshift( INT root, INT last )
    {
    CON_WIRETYPE temp;
    INT ptr, succ, key;
    ptr = root;
    succ = 2 * root;
    if( succ &lt; last )
    if( con_wires[succ + 1]-&gt;distance &gt; con_wires[succ]-&gt;distance )
        succ++;
    key = con_wires[root]-&gt;distance;
    temp = *con_wires[root];
    while( succ &lt;= last &amp;&amp; con_wires[succ]-&gt;distance &gt; key )
    {
    *con_wires[ptr] = *con_wires[succ];
    ptr = succ;
    succ = 2 * ptr;
    if( succ &lt; last )
        if( con_wires[succ + 1]-&gt;distance &gt; con_wires[succ]-&gt;distance )
        succ++;
    }
    *con_wires[ptr] = temp;
    }
/* con_wireok() reports if it is ok use a specific wire */
INT con_wireok( INT cf, INT ct, INT doit )
    {
    INT fr, tr;
    fr = con_cities[cf]-&gt;ring;
    tr = con_cities[ct]-&gt;ring;
    if( tr != fr )
    {
    if( tsp_stflag )
        if( doit )
        if( con_cities[con_sterm[1]]-&gt;ring == fr )
            if( con_cities[con_sterm[2]]-&gt;ring == tr )
            return( 0 );
            else ;
        else
            if( con_cities[con_sterm[1]]-&gt;ring == tr )
            if( con_cities[con_sterm[2]]-&gt;ring == fr )
                return( 0 );
    return( 1 );
    }
    return( 0 );
    }

</pre>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
