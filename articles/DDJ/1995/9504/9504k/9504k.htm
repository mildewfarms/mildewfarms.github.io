<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>APR95: ALGORITHM ALLEY</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>ALGORITHM ALLEY<a name="0194_0078"></h1><P>
<h2><a name="0194_0076"><a name="0194_0000">Computing the Day of the Week</h2><P>
<h3>Kim S. Larsen</h3><P>
<p><i><a name="0194_0077"><a name="0194_0000">Kim has a PhD in computer science and is primarily interested in databases, algorithmics, and data structures. He can be contacted at &AElig;rtebjergg&aring;rdvej 31, DK-5270 Odense N, Denmark or at kslarsen@imada.ou.dk.</i></p><hr><P>
Introduction <P>
<h3><I>by Bruce Schneier</I></h3><P>
Thirty days have September, April, June, and November.... So the song goes. Or did you learn to count the months forward and backwards on your fingers, with even-numbered fingers being the short months? Mnemonics such as these work well for people (I recited that silly song well into adulthood) but are less intuitive for computers. Of course, you can write a program that manually computes the day of the week for any date, using a whole lot of If-Then-Elses, or a few Case statements.<P>
However, I like the technique Kim Larsen presents in this month's &quot;Algorithm Alley&quot; because it approaches the problem from another direction. There isn't really a mathematical formula for computing the day of the week for any given date, but maybe we can cobble one together. The formula works, and you have an easy-to-program mathematical formula for computing the day of the week automatically.<P>
By the way, if you've developed a clever new algorithm, or come up with a new twist on an old idea, I'd love to hear from you. Please contact me at schneier@chinet.com, or just drop a note to me at the <I>DDJ</I> offices.<P>
Have you ever wondered how your computer knows that today is Wednesday? Even if your machine has been down and you specify a new date when starting it up again, it immediately knows which day of the week it is.<P>
When you were a kid, you probably saw tables with entries for the date, the month, and the year. You added up a few numbers and another table gave you the day of that date. Of course, such tables could be hardwired into your computer's operating system. However, there exists a simple formula for computing the correct day of the week. This formula takes up very little space, whereas a collection of tables covering just a few hundred years would take up quite a bit.<P>
If your machine is not capable of computing the day of the week, then you can use this formula in your own programs and applications.<P>
<h3><a name="0194_0079">Creating a Formula<a name="0194_0079"></h3><P>
The starting point for the formula is a date represented by the variables D, M, and Y. For example, for the date March 1, 1994, D=1, M=3, and Y=1994. Our goal is to compute a number between 0 and 6, where 0 represents Monday, 1 represents Tuesday, 2 represents Wednesday, and so on.<P>
It turns out that March 1, 1994 is a Tuesday, so the formula <I>D mod 7</I> would actually work for the rest of the month of March. For example, the 18th is a Friday, and <I>18 mod 7=4</I>, which represents Friday. (Remember that integer division and modulo are closely connected. For example, 26 divided by 7 is 3 with the remainder 5. This means that the integer division of 26 by 7 equals 3, and 26 modulo 7 (abbreviated <I>26 mod 7</I>) equals 5. This also implies that <I>19 mod 7=12 mod 7=5 mod 7=5</I>. In fact, this works similarly for negative numbers, so <I>--2 mod 7=5, --9 mod 7=5</I>, and so on.<P>
More formally, it can be shown that for any integers <I>n</I> and <I>k</I>, <I>n</I> can be written as <I>n=qk+r</I> in <I>exactly</I> one way, where <I>q</I> and <I>r</I> are also integers and 0 <img src="lteq12.gif" alt="&lt;=:><I>r</I>&lt;<I>k</I>. Now <I>q</I> is defined to be the integer division of <I>n</I> and <I>k</I> (written <I>n</I>/<I>k</I>), and <I>r</I> is defined to be <I>n mod k</I>).<P>
What about April? Well, if March 1 is a Tuesday, then April 1 is a Friday. So, the formula needs to be shifted. There are 31 days in March, and since <I>31 mod 7=3</I>, the formula that would work in April is <I>(D+3) mod 7</I>. Of course, the same problem arises when we go from April to May, except that the shift will be 2, since April has only 30 days. <a href="#0194_007b">Table 1</A> lists the shift information for all months. Note that in order to obtain as much regularity as possible, the short month of February (and, hence, also January) has been moved to the end.<P>
<a href="19950196.htm">Example 1(a)</A> is a formula that imitates the pattern depicted in the shift column. The division is <I>integer</I> division, so the result is rounded down to the nearest integer. The interesting values for this function are given in <a href="19950197.htm">Table 2</A>. Intuitively, when M increases with one (going from one month to the next), 2M increases with two, and 3(M+1)/5 increases three out of five times, which is what we need to imitate this repeated pattern 3,2,3,2,3 of shifts (indicated by the curly brackets to the right of the table). Notice that since we are working modulo 7, going from 6 to 2 is an increase of 3 (counting 6,0,1,2).<P>
We have now found a formula to adjust our calculations correctly when we go from one month to the next, and we want to add this formula to our first attempt, namely <I>D mod 7</I>. The only problem is getting it to start out right. Again using March 1, 1994 (that is, M=3), notice that in <a href="19950198.htm">Example 1</A>(b) <I>8 mod 7=1</I>, so we must subtract 1 when the whole formula is put together. Working modulo 7, this is the same as adding 6, since <I>-1 mod 7=6 mod 7=6</I>.<P>
Now the formula in <a href="19950199.htm">Example 1</A>(c) will work for the rest of the year. In fact, since we have placed January and February at the end of <a href="#0194_007b">Table 1</A>, the formula will also work for these two months in 1995, provided that we refer to these as months 13 and 14. This is because they start a new, though incomplete, 3,2,3,2,3 sequence. To make a nicer formula, we adopt the convention from now on of treating January and February as the months 13 and 14 of the previous year.<P>
<h3><a name="0194_007a">Incorporating the Year<a name="0194_007a"></h3><P>
In going from one year to the next, we observe that March 1, 1995 is a Wednesday. This means that changing to a new year should have the effect of adding one to our formula. That is easy: We simply add Y to what we already have. Again, we have to make sure things start out right. Since 1994 <I>mod 7=6</I>, we must subtract 6 when we combine Y with the formula we already have. <a href="1995019a.htm">Example 2</A>(a) then becomes a new and better formula.<P>
Our next problem occurs with 1996--a leap year. March 1 is a Friday, not a Thursday, as our formula would currently predict. So we need to add one every time we enter a leap year. The rule is that a year is a leap year if it is divisible by four, except that years divisible by 100 are only leap years if they are also divisible by 400. In effect, we add <I>Y/4--Y/100+Y/400</I> to what we already have. Again, we must make sure that we start out correctly. Since <I>(1994/4--1994/100+1994/400) mod 7=(498--19+4) mod 7=483 mod 7=0</I>, no adjustments need to be made, and <a href="1995019b.htm">Example 2</A>(b) is our final formula. This formula works indefinitely (unless we change calendar systems). As an example, let us try July 4, 2000: <I>(4+2*7+3(7+1)/5+2000+2000/4--2000/100+2000/400) mod7=(4+14+4+2000+500--20+5) mod 7=2507 mod 7=1</I>, so it is a Tuesday.<P>
This also works backwards in time; however, we switched to the current calendar system on Thursday, September 14, 1752, so it does not work for dates earlier than this. But if we try the standard &quot;where were you when...&quot; date of November 22, 1963, we find: <I>(22+2*11+3(11+1)/5+1963+1963/4--1963/100+1963/400)mod7=(22+22+7+1963+490--19+4)mod 7=2489 mod 7=4</I>, which is a Friday.<P>
These formulas have been implemented in <a href="#0194_007c">Example 3</A>, a C program for computing the day of the week automatically.<P>
<h4><a name="0194_007b"><B>Table 1:</B> Shift information for each month.<a name="0194_007b"></h4><P>
<pre>Month   # Days  Shift
March   31       --
April   30        3
May     31        2
June    30        3
July    31        2
Aug.    31        3
Sept.   30        3
Oct.    31        2
Nov.    30        3
Dec.    31        2
Jan.    31        3
Feb.    28        3</pre><P>
<a href="1995019c.htm">Table 2</A>  A function for imitating the shift pattern.
<a href="1995019d.htm">Example 1</A>  Creating a formula that works for the year 1994.
<a href="1995019e.htm">Example 2</A>  Extending the formula to account for different years.
<h4><a name="0194_007c"><B>Example 3:</B> The formula expressed as a C program.<a name="0194_007c"></h4><P>
<pre>/* Computing day of the week from the date. It is assumed that input */
/* represents a correct date.                                      */
#include &lt;stdio.h&gt;
char *name[] = { &quot;Monday&quot;,
                 &quot;Tuesday&quot;,
                 &quot;Wednesday&quot;,
                &quot;Thursday&quot;,
                &quot;Friday&quot;,
                &quot;Saturday&quot;,
                &quot;Sunday&quot;
               };
void main(){
  int D,M,Y,A;
  printf(&quot;Day: &quot;); fflush(stdout);
  scanf(&quot;%d&quot;,&amp;D);
  printf(&quot;Month: &quot;); fflush(stdout);
  scanf(&quot;%d&quot;,&amp;M);
  printf(&quot;Year: &quot;); fflush(stdout);
  scanf(&quot;%d&quot;,&amp;Y);
/* January and February are treated as month 13 and 14, */
/* respectively, from the year before.                  */
  if ((M == 1) || (M == 2)){
    M += 12;
    Y--;
  }
  A = (D + 2*M + 3*(M+1)/5 + Y + Y/4 - Y/100 + Y/400) % 7;
  printf(&quot;It's a %s.\n&quot;,name[A]);
}
</pre>

<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
