<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>APR95: Serialization and MFC</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Serialization and MFC<a name="018c_0072"></h1><P>
<h2><a name="018c_0070"><a name="018c_0000">Extending MFC for cross-platform portability </h2><P>
<h3>Chane Cullens</h3><P>
<p><i><a name="018c_0071"><a name="018c_0000">Chane is the product manager for Wind/U at Bristol Technology and can be contacted at chane@bristol.com.</i></p><hr><P>
Serialization is the process of writing or reading one or more objects to or from a persistent-storage medium, such as a disk file, which is generally referred to as the &quot;application database.&quot; The Microsoft Foundation Class Library (MFC) supplies built-in support for serialization in the class <I>CObject</I>. Thus, all classes derived from <I>CObject</I> can take advantage of <I>CObject</I>'s serialization protocol. <P>
The basic idea of serialization is that an object should be able to write its current state, usually indicated by the value of its member variables, to persistent storage. Later, the object can be re-created by reading (or &quot;deserializing&quot;) the object's state from the storage. Serialization handles all the details of object pointers and circular references to objects that are used when you serialize an object. A key point is that the object itself is responsible for reading and writing its own state; thus, the object is responsible for implementing most of the cross-platform portability.<P>
MFC uses an object of the <I>CArchive</I> class as an intermediary between the object to be serialized and the storage medium. This object is always associated with a <I>CFile</I> object, from which it obtains the necessary information for serialization, including the filename and whether or not the requested operation is a read or write. The object that performs a serialization operation can use the <I>CArchive</I> object without regard to the nature of the storage medium. A <I>CArchive</I> object uses overloaded insertion (&lt;&lt;) and extraction (&gt;&gt;) operators to perform writing and reading operations.<P>
In this article, I'll examine how MFC's serialization mechanism allows objects to persist between runs of the program in a cross-platform environment. While the MFC serialization mechanism was not specifically designed to support cross-platform development, it has been extended by Microsoft and other WinAPI/MFC suppliers (including Wind/U on UNIX from Bristol Technology, the company I work for) to support a wide variety of non-Intel platforms.<P>
<h3><a name="018c_0073">Cross-Platform Issues<a name="018c_0073"></h3><P>
The big problem in designing a cross-platform application database is coping with the byte-ordering differences (Little-versus Big-endian) of various operating systems and CPUs. Since some newer CPUs allow byte ordering to be specified by the operating system, you should never assume a byte ordering based only on the CPU type. For example, when running NT on the MIPS CPU, byte ordering matches Intel x86 style; when running UNIX, byte ordering is swapped. <a href="#018c_007d">Table 1</A> lists the processors on which Win32 is available, along with their byte ordering, and other CPU/OScombinations.<P>
Little-endian byte order places the least-significant byte (LSB) first and the most-significant byte (MSB) last. In <a href="#018c_007b">Figure 1</A>, which shows the bit and byte layout for four bytes of data, a pointer to a 4-byte integer contains the address of the LSB of that integer (bits 0--7). Adding 1 to the pointer value causes it to point to the next-higher byte of the value (bits 8--15), and so forth. <P>
Big-endian byte ordering places the MSB first, followed by the next MSB, and so on, with the LSB last. In <a href="#018c_007c">Figure 2</A>, which shows this Big-endian layout, a pointer to an integer value contains the address of the integer's MSB. The individual ordering of bits within each byte does not differ between processors. Therefore, writing a single byte of data is the same on each machine, but if you write a larger object (such as a 4-byte integer) the bytes will be swapped.<P>
There are several ways to address the byte-ordering issue. One is to write ASCII data to tagged streams, where every item is marked with type, size, and byte-ordering information. Another option is to convert the binary data to an architecture-neutral format in the application database. Then, convert the data to an architecture-specific format in the application. In an MFC application, a variation of this architecture-neutral format can be used where the neutral format is Little-endian byte ordering. This way, no additional code is needed for Windows NT or Windows 95 applications, but UNIX or Macintosh applications rely on MFC to byte-swap data that is being read or written.<P>
<h3><a name="018c_0074">MFC Objects and Serialization<a name="018c_0074"></h3><P>
MFC supports serialization of <I>CObject</I>-derived objects, MFC objects not derived from <I>CObject</I>, and most native C++ types. <a href="#018c_007e">Table 2</A> lists the MFC objects that support serialization.<P>
On the Macintosh and UNIX RISC systems, MFC archives are byte-swapped by default. Byte-swapped archives are always kept in Little-endian order. Byte-swapping is performed whenever a WORD, DWORD, LONG, <I>float</I>, or <I>double</I> is read from or written to an archive--unless the <I>Read</I> or <I>Write</I> member functions are used. <I>Read</I> and <I>Write</I> never byte-swap. To prevent archives from being byte-swapped, use the <I>bNoByteSwap</I> mode flag when creating the archive; for instance, <I>CArchive ar(pfile, CArchive::store | CArchive::bNoByteSwap);</I>. Using this statement on UNIX or the Macintosh creates an archive that stores data in the Big-endian byte order, rather than swapping bytes and storing them in the Little-endian order.<P>
<h3><a name="018c_0075">Fundamental Types<a name="018c_0075"></h3><P>
On Little-endian architectures, the serialization functions for the fundamental types are implemented as inline functions in afx.inl; see <a href="#018c_0083">Listing One</A> . Thus, on Little-endian architectures, the bytes for the fundamental types are efficiently inserted or extracted into the archive buffer. Since BYTE data is not impacted by the architecture, it is always inlined. <P>
For Big-endian architectures, most serialization functions are implemented in arccore.cpp, and the bytes must be swapped both before the data is inserted into the archive buffer and after the data is extracted from it. To improve efficiency and readability, static arrays are defined at the top of arccore.cpp to serve as temporary storage for the swapped bytes; see <a href="#018c_0084">Listing Two</A> . <P>
The 16-bit WORD type is byte-swapped using the functions in <a href="#018c_0085">Listing Three</A> . In both functions, the statement <I>*(WORD*)&amp;wAfx=w;</I> fills the static structure with the unswapped bytes. Then the bytes are swapped one at a time using the <I>WordBits</I> array within the static structure. <P>
The 32-bit LONG type is byte-swapped using the functions in <a href="#018c_0086">Listing Four</A> , in which the DWORD <I>CArchive</I> operator is called, since the DWORD is also a 32-bit integer. <P>
The 32-bit DWORD type is byte-swapped using the two functions in <a href="#018c_0087">Listing Five</A> . As with the WORD implementations, the statement <I>*(DWORD*)</I>&amp;dwAfx=dw; is used to fill the static structure with the four unswapped bytes. Then the bytes are swapped one at a time using the <I>DwordBits</I> array within the static structure. <P>
The 32-bit <I>float</I> type is byte-swapped using the two functions in <a href="#018c_0088">Listing Six</A> . Like the DWORD implementations, the statement <I>*(float*)&amp;fAfx=f;</I> fills the static structure with the four unswapped bytes. Then the bytes are swapped one at a time using the <I>FloatBits</I> array within the static structure. <P>
The 64-bit <I>double </I>type is byte-swapped using the two functions in <a href="#018c_0089">Listing Seven</A> . Again, the statement <I>*(double*)&amp;dAfx=d;</I> fills the static structure with the four unswapped bytes. Then the bytes are swapped one at a time using the <I>DoubleBits</I> array within the static structure. This code allows you to create cross-platform apps with the major fundamental data types: WORD, LONG, DWORD, <I>float</I>, and <I>double</I>. <P>
<h3><a name="018c_0076">MFC Simple Value Types<a name="018c_0076"></h3><P>
Along with the fundamental data types, most framework applications use MFC-supplied simple value types; see <a href="#018c_007f">Table 3</A>. To archive these simple value types, the framework builds on the byte-swapped fundamental types already discussed. This layering on top of the fundamental types is the key to serializing your own objects in a cross-platform application database.<P>
The <I>CPoint</I> class is derived from the POINT structure, and the archive operators are implemented for the Windows C POINT <I>struct</I>. Since <I>CPoint</I> objects are derived from POINT structures, <I>CPoint</I> objects are archived using the POINT operators. <a href="#018c_008a">Listing Eight</A> contains the portable POINT input and output operators. <P>
The portable version of these operators simply serializes two 4-byte LONG types (x and y) instead of directly serializing eight bytes of untyped data using the <I>CArchive</I> <I>Read</I> and <I>Write</I> members. The implementations of RECT and SIZE are similar to POINT in <a href="#018c_008b">Listing Nine</A> . The portable version for RECT structures simply serializes four 4-byte LONG types; the nonportable version serializes 16 bytes of untyped data. Similarly, the portable version of SIZE serializes two 4-byte LONG types, and the nonportable version serializes eight bytes of untyped data. <P>
At first glance, <I>CString</I> objects seem inherently portable, but the object contains a length that needs to be byte-swapped, and serialization must deal with the interoperability of ANSI and Unicode strings. (See arccore.cpp on the MFC source distribution for the nifty serialization implementation of <I>CString</I>.)<P>
The header in a serialized <I>CString</I> contains information on both the length and type of the string, ANSI or Unicode. This information is encoded in the first few bytes of the archive as in <a href="#018c_0080">Table 4</A>. Unicode strings contain a leading 0xFF, 0xFFFe before the length information. (Unicode generally should not be used in cross-platform applications since it is not supported all on architectures.)<P>
The <I>CTime</I> and <I>CTimeSpan</I> objects contain the time component <I>time_t type</I>, which is defined as a <I>long</I>. Thus, serializing these time objects is as easy as casting the time component to a portable fundamental data type, DWORDs.<P>
When serializing these MFC simple value types, your application database remains cross-platform compatible. Any required byte-swapping is handled by the framework, hidden from the application developer.<P>
<h3><a name="018c_0077">MFC Collection Classes<a name="018c_0077"></h3><P>
Collection classes (including serialization), are used throughout MFC  and by most developers using MFC. MFC has a wide variety of collection classes--arrays, lists, and maps--in both template-based (MFC 3.0) and non-template-based implementations. The cross-platform serialization portability of these classes varies. <a href="#018c_0081">Table 5</A> enumerates the template classes, noting if they should be used for architecture-independent application databases. Note that all MFC 3.0 collection classes typecast the integer number of elements in the collection <I>m_nSize</I> to a 16-bit unsigned <I>short</I> (WORD) when archiving. Therefore, serialization of collections with more than 64K items will fail.<P>
<h3><a name="018c_0078">Template Collection Classes<a name="018c_0078"></h3><P>
Template-based collection classes introduced with MFC 3.0 can hold a variety of objects in arrays, lists, and maps. These collection classes are templates whose parameters determine the types of the objects stored in the aggregates. To make these classes serializable, the <I>Serialize</I> and <I>SerializeElements</I> helper functions have been incorporated into the template implementations. <a href="#018c_0082">Table 6</A> lists the MFC template collection classes.<P>
The <I>CArray</I>, <I>CList</I>, and <I>CMap</I> classes call <I>SerializeElements</I> to store collection elements to or read them from an archive. The default implementation of the <I>SerializeElements</I> helper function is not portable and does either a bitwise write from the objects to the archive or a bitwise read from the archive to the objects, depending on whether the objects are being stored in or retrieved from the archive. For a cross-platform application database, you must override <I>SerializeElements</I>. <a href="#018c_008c">Listing Ten</A> is the default, nonportable <I>SerializeElements</I> function from afxtempl.h. <P>
When serializing <I>CObject</I>-derived objects that include IMPLEMENT_SERIAL, an implementation modeled after <a href="#018c_008d">Listing Eleven</A> will keep your database portable. Instead of a single untyped <I>ar.Read</I> or <I>ar.Write</I>, each object in <a href="#018c_008d">Listing Eleven</A> is serialized using its own serialization ability. In this case, the overridden input or output operator is used to create a portable database for each object in the array. While <a href="#018c_008d">Listing Eleven</A> makes sense for <I>CArray</I> template collections where <I>pKids</I> is the head of the array, it is not obvious that this could work for <I>CList</I> or <I>CMap</I> collections where there is not an array of elements. Yet, work it does! The implementations of <I>CArray</I>, <I>CList</I>, and <I>CMap Serialize</I> are good examples of portable <I>Serialize</I> functions. For a closer look on how <I>SerializeElements</I> can work for <I>CList</I> and <I>CMap</I> and demonstrate portable <I>Serialize</I> functions, see <a href="#018c_008e">Listing Twelve</A> and afxtempl.cpp in the MFC source directory.<P>
The three basic steps in <I>CArray::Serialize</I> are: <P>
<UL>
<li>Serialize the parent class, <I>CObject,</I> for <I>CArray</I>.</li>
<li>Serialize local member data, the array size <I>m_nSize</I>.</li>
<li>Serialize the element data using <I>SerializeElements</I>.</li>
</UL>
While <I>SerializeElements</I> is called a different number of times for each collection type (<I>CArray</I>=once, <I>CList</I>=number of items, <I>CMap</I>=2xthe number of items), the purpose is the same--to let you control what is archived. Thus, a cross-platform database can be created using the MFC template-based collections.<P>
<h3><a name="018c_0079">Modifying Scribble for Cross-Platform Serialization<a name="018c_0079"></h3><P>
Scribble is a sample application found in the samples/mfc/scribble/step6 directory on the MFC 3.0 distribution. Since Scribble uses the MFC serialization architecture, you can modify it for portability. The main change required is to override the <I>SerializeElements</I> helper function for the <I>CArray&lt;CPoint, CPoint&gt;</I> template array; see <a href="#018c_008f">Listing Thirteen</A> . Since the standard Scribble application does not define a <I>SerializeElements</I> for a <I>CArray</I> of <I>CPoints</I>, the default <I>SerializeElements</I> is used. It simply saves an untyped, nonportable byte stream. The locations in the <I>CPoint</I> structures need to be byte-swapped. Creating the <I>SerializeElements</I> function to serialize the <I>CPoint</I> array point-by-point allows for byte-swapping. While this function has no direct dependencies to Scribble, it can be added to the bottom of scripdoc.cpp.<P>
With the addition of a single function, Scribble's application database has become a cross-platform application database. Now, scribbles created on Windows 95, Windows NT, Macintosh, and UNIX share a common database format--one that the Windows versions have already been writing. Furthermore, this format requires no changes in the MFC DLL shipped with Visual C++ on Windows.<P>
<h3><a name="018c_007a">Summary<a name="018c_007a"></h3><P>
Creating a cross-platform application database has always been a tedious task full of trade-offs. However, using the MFC serialization functions and creating a compact binary database with Little-endian byte ordering has never been easier. Not only can you create a portable database with MFC serialization on Windows with few changes to your source code, but you can also use that same portable database for UNIX and Macintosh applications.<P>
<h4><a name="018c_007b"><B>Figure 1:</B> Little-endian byte ordering for four bytes of data.<a name="018c_007b"></h4><P>
<pre>
bits: [  7  6  5  4  3  2  1  0 ]  Byte 0    &lt; Address
bits: [ 15 14 13 12 11 10  9  8 ]  Byte 1
bits: [ 23 22 21 20 19 18 17 16 ]  Byte 2
bits: [ 31 30 29 28 27 26 25 24 ]  Byte 3</pre><P>
<h4><a name="018c_007c"><B>Figure 2:</B> Big-endian byte ordering for four bytes of data.<a name="018c_007c"></h4><P>
<pre>
bits: [ 31 30 29 28 27 26 25 24 ]  Byte 0    &lt; Address
bits: [ 23 22 21 20 19 18 17 16 ]  Byte 1
bits: [ 15 14 13 12 11 10  9  8 ]  Byte 2
bits: [  7  6  5  4  3  2  1  0 ]  Byte 3</pre><P>
<h4><a name="018c_007d"><B>Table 1:</B> Byte-ordering for different CPU/OS combinations.<a name="018c_007d"></h4><P>
<pre>
Processor        OS          Order   
Alpha            All         Little-endian
HP-PA            NT          Little-endian
HP-PA            UNIX        Big-endian
Intel x86        All         Little-endian
Motorola 680x0   All         Big-endian
MIPS             NT          Little-endian
MIPS             UNIX        Big-endian
PowerPC          NT          Little-endian
PowerPC          non-NT      Big-endian
RS/6000          UNIX        Big-endian
SPARC            UNIX        Big-endian</pre><P>
<h4><a name="018c_007e"><B>Table 2:</B> MFC Objects that support serialization. (The initial version of MFC 3.0 for the Macintosh does not support byte-swapping in the CPoint, CRect, or CSize serialization functions.) <a name="018c_007e"></h4><P>
<pre>
Object                   Win32    Macintosh UNIX  
BYTE (unsigned char)     Yes      Yes       Yes
double                   Yes      Yes       Yes
DWORD (unsigned long)    Yes      Yes       Yes
float                    Yes      Yes       Yes
LONG (long)              Yes      Yes       Yes
WORD (unsigned short)    Yes      Yes       Yes
int                      No       No        No
CObject                  Yes      Yes       Yes
CPoint                   Yes      Partial   Yes
CRect                    Yes      Partial   Yes
CSize                    Yes      Partial   Yes
CString                  Yes      Yes       Yes
CTime                    Yes      Yes       Yes
CTimeSpan                Yes      Yes       Yes</pre><P>
<h4><a name="018c_007f"><B>Table 3:</B> MFC simple value types. <a name="018c_007f"></h4><P>
<pre>
Function    Description       
CPoint      Encapsulates the Window POINT structure which
            contains x- and y-coordinates.
CRect       Encapsulates the Window RECT structure which
            contains left, top, right, and bottom coordinates.
CSize       Encapsulates the Window SIZE structure which
            contains a relative coordinate or position.
CString     A variable-length sequence of characters. The
            characters are of type TCHAR, which is a 16-bit
            character for Unicode and an 8-bit character
            for normal ASCII applications.
CTime       Represents an absolute time and date.
CTimeSpan   Represents a relative time span of approximately
            68 years.</pre><P>
<h4><a name="018c_0080"><B>Table 4:</B> CString header information.<a name="018c_0080"></h4><P>
<pre>
String length        Encoding   
Less than 255        Byte 1 contains string length.
Less than 65535      Byte 1=0xFF; bytes 2 and 3 are a WORD
                     containing the string length.
Greater than 65534   Byte 1=0xFF; bytes 2 and 3=0xFFFF;
                     bytes 4, 5, 6, and 7 are a DWORD
                     containing the string length.</pre><P>
<h4><a name="018c_0081"><B>Table 5:</B> Template classes.<a name="018c_0081"></h4><P>
<pre>
Type                 Portable  Reason   
CByteArray           Yes       Reads/writes byte-array bits. Since
                               the data is bytes, it is not
                               impacted by byte-swapping.
CDWordArray          Partial   Reads/writes DWORD array bits. Since
                               DWORD storage is architecture
                               dependent, data must be
                               byte-swapped.*
CObArray             Yes       Loops through all objects in the
                               array serialization, each
                               object in turn.
CPtrArray            NA        Does not support serialization.
CStringArray         Yes       Loops through all CString objects
                               in the array serialization,
                               each object in turn.
CDWordArray          Partial   Reads/writes WORD array bits. Since
                               WORD storage is architecture
                               dependent, data must be
                               byte-swapped.
CUIntArray           NA        Does not support serialization.
CObList              Yes       Loops over all CObject pointers
                               in the list serialization,
                               each object in turn. The
                               CObject-derived object is
                               responsible for portability.
CStringList          Yes       Loops through all CString objects
                               in the arrayserialization,
                               each object in turn.
CPtrList             NA        Does not support serialization.
CMapPtrToPtr         NA        Does not support serialization.
CMapPtrToWord        NA        Does not support serialization.
CMapStringToOb       Yes       Loops over all elements in the
                               map, serializing each key and
                               value individually. The CObject
                               value object relies on object's
                               serialization to the portable.
CMapStringToPtr      NA        Does not support serialization.
CMapStringToString   Yes       Loops over all elements in the
                               map, serializing each key and
                               value CString individually.
CMapWordToOb         Yes       Loops over all elements in the
                               map, serializing each key and
                               value CString individually.
CMapWordToPtr        NA        Does not support serialization.
* Check latest production documentation. The initial release of MFC 3.0 on the Macintosh did not byte-swap the array, but MFC 3 on UNIX did.</pre><P>
<h4><a name="018c_0082"><B>Table 6:</B> MFC template collection classes.<a name="018c_0082"></h4><P>
<pre>
Class            Description  
CArray           Stores elements in an array.
CMap             Maps keys to values.
CList            Stores elements in a linked list.
CTypedPtrList    Typesafe collection that stores pointers to
                 objects in a linked list.
CTypedPtrArray   Typesafe collection that stores pointers to
                 objects in an array.
CTypedPtrMap     Typesafe collection that maps keys to values;
                 both keys and values are pointers.</pre><P>
<P>
<h4><a name="018c_0083">Listing One <a name="018c_0083"></h4><pre>

_AFX_INLINE CArchive&amp; CArchive::operator&lt;&lt;(BYTE by)
 { if (m_lpBufCur + sizeof(BYTE) &gt; m_lpBufMax) Flush();
  *(UNALIGNED BYTE*)m_lpBufCur = by; m_lpBufCur += sizeof(BYTE); return *this;}
#ifndef _MAC || _WU_BIG_ENDIAN
_AFX_INLINE CArchive&amp; CArchive::operator&lt;&lt;(WORD w)
 { if (m_lpBufCur + sizeof(WORD) &gt; m_lpBufMax) Flush();
  *(UNALIGNED WORD*)m_lpBufCur = w; m_lpBufCur += sizeof(WORD); return *this; }
_AFX_INLINE CArchive&amp; CArchive::operator&lt;&lt;(LONG l)
 { if (m_lpBufCur + sizeof(LONG) &gt; m_lpBufMax) Flush();
  *(UNALIGNED LONG*)m_lpBufCur = l; m_lpBufCur += sizeof(LONG); return *this; }
_AFX_INLINE CArchive&amp; CArchive::operator&lt;&lt;(DWORD dw)
 { if (m_lpBufCur + sizeof(DWORD) &gt; m_lpBufMax) Flush();
  *(UNALIGNED DWORD*)m_lpBufCur=dw;m_lpBufCur += sizeof(DWORD); return *this;}
_AFX_INLINE CArchive&amp; CArchive::operator&lt;&lt;(float f)
 { if (m_lpBufCur + sizeof(float) &gt; m_lpBufMax) Flush();
  *(UNALIGNED _AFX_FLOAT*)m_lpBufCur = *(_AFX_FLOAT*)&amp;f; 
                                     m_lpBufCur += sizeof(float); return *this;
    }
_AFX_INLINE CArchive&amp; CArchive::operator&lt;&lt;(double d)
 { if (m_lpBufCur + sizeof(double) &gt; m_lpBufMax) Flush();
  *(UNALIGNED _AFX_DOUBLE*)m_lpBufCur = *(_AFX_DOUBLE*)&amp;d; 
                                  m_lpBufCur += sizeof(double); return *this; }
#endif
_AFX_INLINE CArchive&amp; CArchive::operator&gt;&gt;(BYTE&amp; by)
 { if (m_lpBufCur + sizeof(BYTE) &gt; m_lpBufMax)
            FillBuffer(sizeof(BYTE) - (UINT)(m_lpBufMax - m_lpBufCur));
 by = *(UNALIGNED BYTE*)m_lpBufCur; m_lpBufCur += sizeof(BYTE); return *this; }
#ifndef _MAC || WU_BIG_ENDIAN
_AFX_INLINE CArchive&amp; CArchive::operator&gt;&gt;(WORD&amp; w)
 { if (m_lpBufCur + sizeof(WORD) &gt; m_lpBufMax)
            FillBuffer(sizeof(WORD) - (UINT)(m_lpBufMax - m_lpBufCur));
  w = *(UNALIGNED WORD*)m_lpBufCur; m_lpBufCur += sizeof(WORD); return *this; }
_AFX_INLINE CArchive&amp; CArchive::operator&gt;&gt;(DWORD&amp; dw)
  { if (m_lpBufCur + sizeof(DWORD) &gt; m_lpBufMax)
            FillBuffer(sizeof(DWORD) - (UINT)(m_lpBufMax - m_lpBufCur));
  dw = *(UNALIGNED DWORD*)m_lpBufCur;m_lpBufCur += sizeof(DWORD);return *this;}
_AFX_INLINE CArchive&amp; CArchive::operator&gt;&gt;(float&amp; f)
 { if (m_lpBufCur + sizeof(float) &gt; m_lpBufMax)
            FillBuffer(sizeof(float) - (UINT)(m_lpBufMax - m_lpBufCur));
 *(_AFX_FLOAT*)&amp;f = *(UNALIGNED _AFX_FLOAT*)m_lpBufCur; 
                                   m_lpBufCur += sizeof(float); return *this; }
_AFX_INLINE CArchive&amp; CArchive::operator&gt;&gt;(double&amp; d)
 { if (m_lpBufCur + sizeof(double) &gt; m_lpBufMax)
            FillBuffer(sizeof(double) - (UINT)(m_lpBufMax - m_lpBufCur));
  *(_AFX_DOUBLE*)&amp;d = *(UNALIGNED _AFX_DOUBLE*)m_lpBufCur; 
                                  m_lpBufCur += sizeof(double); return *this; }
_AFX_INLINE CArchive&amp; CArchive::operator&gt;&gt;(LONG&amp; l)
  { if (m_lpBufCur + sizeof(LONG) &gt; m_lpBufMax)
            FillBuffer(sizeof(LONG) - (UINT)(m_lpBufMax - m_lpBufCur));
  l = *(UNALIGNED LONG*)m_lpBufCur; m_lpBufCur += sizeof(LONG); return *this; }
#endif


</pre>
<h4><a name="018c_0084">Listing Two<a name="018c_0084"></h4><pre>

#ifdef _MAC || WU_BIG_ENDIAN
struct _AFXWORD
{
    BYTE WordBits[sizeof(WORD)];
};
struct _AFXDWORD
{
    BYTE DwordBits[sizeof(DWORD)];
};
struct _AFXFLOAT
{
    BYTE FloatBits[sizeof(float)];
};
struct _AFXDOUBLE
{
    BYTE DoubleBits[sizeof(double)];
};


</pre>
<h4><a name="018c_0085">Listing Three<a name="018c_0085"></h4><pre>

CArchive&amp; CArchive::operator&lt;&lt;(WORD w)
{
    if (m_lpBufCur + sizeof(WORD) &gt; m_lpBufMax)
        Flush();

    if (!(m_nMode &amp; bNoByteSwap))
    {
        _AFXWORD wAfx;
        *(WORD*)&amp;wAfx = w;

        ASSERT(sizeof(WORD) == 2);

        BYTE* pb = m_lpBufCur;
        *pb++ = wAfx.WordBits[1];
        *pb = wAfx.WordBits[0];
    }
    else
    {
        *(WORD FAR*)m_lpBufCur = w;
    }
    m_lpBufCur += sizeof(WORD);
    return *this;
}
CArchive&amp; CArchive::operator&gt;&gt;(WORD&amp; w)
{
    if (m_lpBufCur + sizeof(WORD) &gt; m_lpBufMax)
        FillBuffer(sizeof(WORD) - (UINT)(m_lpBufMax - m_lpBufCur));
    w = *(WORD FAR*)m_lpBufCur;
    m_lpBufCur += sizeof(WORD);

    if (!(m_nMode &amp; bNoByteSwap))
    {
        _AFXWORD wAfx;
        *(WORD*)&amp;wAfx = w;

        ASSERT(sizeof(WORD) == 2);

        (*(_AFXWORD*)&amp;w).WordBits[0] = wAfx.WordBits[1];
        (*(_AFXWORD*)&amp;w).WordBits[1] = wAfx.WordBits[0];
    }
    return *this;
}


</pre>
<h4><a name="018c_0086">Listing Four<a name="018c_0086"></h4><pre>

CArchive&amp; CArchive::operator&lt;&lt;(LONG l)
{
    ASSERT(sizeof(LONG) == sizeof(DWORD));
    return operator&lt;&lt;((DWORD) l);
}
CArchive&amp; CArchive::operator&gt;&gt;(LONG&amp; l)
{
    ASSERT(sizeof(LONG) == sizeof(DWORD));
    return operator&gt;&gt;((DWORD&amp;) l);
}


</pre>
<h4><a name="018c_0087">Listing Five<a name="018c_0087"></h4><pre>

CArchive&amp; CArchive::operator&lt;&lt;(DWORD dw)
{
    if (m_lpBufCur + sizeof(DWORD) &gt; m_lpBufMax)
        Flush();

    if (!(m_nMode &amp; bNoByteSwap))
    {
        _AFXDWORD dwAfx;
        *(DWORD*)&amp;dwAfx = dw;

        ASSERT(sizeof(DWORD) == 4);

        BYTE* pb = m_lpBufCur;
        *pb++ = dwAfx.DwordBits[3];
        *pb++ = dwAfx.DwordBits[2];
        *pb++ = dwAfx.DwordBits[1];
        *pb = dwAfx.DwordBits[0];
    }
    else
    {
        *(DWORD FAR*)m_lpBufCur = dw;
    }
    m_lpBufCur += sizeof(DWORD);
    return *this;
}
CArchive&amp; CArchive::operator&gt;&gt;(DWORD&amp; dw)
{
    if (m_lpBufCur + sizeof(DWORD) &gt; m_lpBufMax)
        FillBuffer(sizeof(DWORD) - (UINT)(m_lpBufMax - m_lpBufCur));

    dw = *(DWORD FAR*)m_lpBufCur;
    m_lpBufCur += sizeof(DWORD);

    if (!(m_nMode &amp; bNoByteSwap))
    {
        _AFXDWORD dwAfx;
        *(DWORD*)&amp;dwAfx = dw;

        ASSERT(sizeof(DWORD) == 4);

        (*(_AFXDWORD*)&amp;dw).DwordBits[0] = dwAfx.DwordBits[3];
        (*(_AFXDWORD*)&amp;dw).DwordBits[1] = dwAfx.DwordBits[2];
        (*(_AFXDWORD*)&amp;dw).DwordBits[2] = dwAfx.DwordBits[1];
        (*(_AFXDWORD*)&amp;dw).DwordBits[3] = dwAfx.DwordBits[0];
    }

    return *this;
}


</pre>
<h4><a name="018c_0088">Listing Six<a name="018c_0088"></h4><pre>

CArchive&amp; CArchive::operator&lt;&lt;(float f)
{
    if (m_lpBufCur + sizeof(float) &gt; m_lpBufMax)
        Flush();

    if (!(m_nMode &amp; bNoByteSwap))
    {
        _AFXFLOAT fAfx;
        *(float*)&amp;fAfx = f;

        ASSERT(sizeof(float) == 4);

        BYTE* pb = m_lpBufCur;
        *pb++ = fAfx.FloatBits[3];
        *pb++ = fAfx.FloatBits[2];
        *pb++ = fAfx.FloatBits[1];
        *pb = fAfx.FloatBits[0];
    }
    else
    {
        *(_AFXFLOAT FAR*)m_lpBufCur = *(_AFXFLOAT FAR*)&amp;f;
    }
    m_lpBufCur += sizeof(float);
    return *this;
}
CArchive&amp; CArchive::operator&gt;&gt;(float&amp; f)
{
    if (m_lpBufCur + sizeof(float) &gt; m_lpBufMax)
        FillBuffer(sizeof(float) - (UINT)(m_lpBufMax - m_lpBufCur));

    *(_AFXFLOAT FAR*)&amp;f = *(_AFXFLOAT FAR*)m_lpBufCur;
    m_lpBufCur += sizeof(float);

    if (!(m_nMode &amp; bNoByteSwap))
    {
        _AFXFLOAT fAfx;
        *(float*)&amp;fAfx = f;

        ASSERT(sizeof(float) == 4);

        (*(_AFXFLOAT*)&amp;f).FloatBits[0] = fAfx.FloatBits[3];
        (*(_AFXFLOAT*)&amp;f).FloatBits[1] = fAfx.FloatBits[2];
        (*(_AFXFLOAT*)&amp;f).FloatBits[2] = fAfx.FloatBits[1];
        (*(_AFXFLOAT*)&amp;f).FloatBits[3] = fAfx.FloatBits[0];
    }

    return *this;
}


</pre>
<h4><a name="018c_0089">Listing Seven<a name="018c_0089"></h4><pre>

CArchive&amp; CArchive::operator&lt;&lt;(double d)
{
    if (m_lpBufCur + sizeof(double) &gt; m_lpBufMax)
        Flush();

    if (!(m_nMode &amp; bNoByteSwap))
    {
        _AFXDOUBLE dAfx;
        *(double*)&amp;dAfx = d;

        ASSERT(sizeof(double) == 8);

        BYTE* pb = m_lpBufCur;
        *pb++ = dAfx.DoubleBits[7];
        *pb++ = dAfx.DoubleBits[6];
        *pb++ = dAfx.DoubleBits[5];
        *pb++ = dAfx.DoubleBits[4];
        *pb++ = dAfx.DoubleBits[3];
        *pb++ = dAfx.DoubleBits[2];
        *pb++ = dAfx.DoubleBits[1];
        *pb = dAfx.DoubleBits[0];
    }
    else
    {
        *(_AFXDOUBLE FAR*)m_lpBufCur = *(_AFXDOUBLE FAR*)&amp;d;
    }

    m_lpBufCur += sizeof(double);
    return *this;
}
CArchive&amp; CArchive::operator&gt;&gt;(double&amp; d)
{
    if (m_lpBufCur + sizeof(double) &gt; m_lpBufMax)
        FillBuffer(sizeof(double) - (UINT)(m_lpBufMax - m_lpBufCur));

    *(_AFXDOUBLE FAR*)&amp;d = *(_AFXDOUBLE FAR*)m_lpBufCur;
    m_lpBufCur += sizeof(double);

    if (!(m_nMode &amp; bNoByteSwap))
    {
        _AFXDOUBLE dAfx;
        *(double*)&amp;dAfx = d;

        ASSERT(sizeof(double) == 8);

        (*(_AFXDOUBLE*)&amp;d).DoubleBits[0] = dAfx.DoubleBits[7];
        (*(_AFXDOUBLE*)&amp;d).DoubleBits[1] = dAfx.DoubleBits[6];
        (*(_AFXDOUBLE*)&amp;d).DoubleBits[2] = dAfx.DoubleBits[5];
        (*(_AFXDOUBLE*)&amp;d).DoubleBits[3] = dAfx.DoubleBits[4];
        (*(_AFXDOUBLE*)&amp;d).DoubleBits[4] = dAfx.DoubleBits[3];
        (*(_AFXDOUBLE*)&amp;d).DoubleBits[5] = dAfx.DoubleBits[2];
        (*(_AFXDOUBLE*)&amp;d).DoubleBits[6] = dAfx.DoubleBits[1];
        (*(_AFXDOUBLE*)&amp;d).DoubleBits[7] = dAfx.DoubleBits[0];
    }

    return *this;
}


</pre>
<h4><a name="018c_008a">Listing Eight<a name="018c_008a"></h4><pre>

_AFXWIN_INLINE CArchive&amp; AFXAPI operator&lt;&lt;(CArchive&amp; ar, POINT point)
{
#ifndef _MAC || WU_BIG_ENDIAN
    ar.Write(&amp;point, sizeof(POINT));
#else 
    ar &lt;&lt; point.x &lt;&lt; point.y;
#endif
    return ar; 
}
_AFXWIN_INLINE CArchive&amp; AFXAPI operator&gt;&gt;(CArchive&amp; ar, POINT&amp; point)
{
#ifndef _MAC || WU_BIG_ENDIAN
    ar.Read(&amp;point, sizeof(POINT));
#else
    ar &gt;&gt; point.x &gt;&gt; point.y;
#endif
    return ar;
}


</pre>
<h4><a name="018c_008b">Listing Nine<a name="018c_008b"></h4><pre>

_AFXWIN_INLINE CArchive&amp; AFXAPI operator&lt;&lt;(CArchive&amp; ar, RECT rect)
{
#ifndef _MAC || WU_BIG_ENDIAN
    ar.Write(&amp;rect, sizeof(RECT));
#else 
    ar &lt;&lt; rect.left &lt;&lt; rect.top &lt;&lt; rect.right &lt;&lt; rect.bottom;
#endif
    return ar; 
}
_AFXWIN_INLINE CArchive&amp; AFXAPI operator&gt;&gt;(CArchive&amp; ar, RECT&amp; rect)
{
#ifndef _MAC || WU_BIG_ENDIAN
    ar.Read(&amp;rect, sizeof(RECT));
#else
    ar &gt;&gt; rect.left &gt;&gt; rect.top &gt;&gt; rect.right &gt;&gt; rect.bottom;
#endif
    return ar;
}
_AFXWIN_INLINE CArchive&amp; AFXAPI operator&lt;&lt;(CArchive&amp; ar, SIZE size)
{
#ifndef _MAC || WU_BIG_ENDIAN
    ar.Write(&amp;size, sizeof(SIZE));
#else 
    ar &lt;&lt; size.cx &lt;&lt; size.cy;
#endif
    return ar; 
}
_AFXWIN_INLINE CArchive&amp; AFXAPI operator&gt;&gt;(CArchive&amp; ar, SIZE&amp; size)
{
#ifndef _MAC || WU_BIG_ENDIAN
    ar.Read(&amp;size, sizeof(SIZE));
#else
    ar &gt;&gt; size.cx &gt;&gt; size.cy;
#endif
    return ar;
}


</pre>
<h4><a name="018c_008c">Listing Ten<a name="018c_008c"></h4><pre>

template&lt;class TYPE&gt;
void AFXAPI SerializeElements(CArchive&amp; ar, TYPE* pElements, int nCount)
{
    ASSERT(AfxIsValidAddress(pElements, nCount * sizeof(TYPE)));

    // default is bit-wise read/write
    if (ar.IsStoring())
        ar.Write((void*)pElements, nCount * sizeof(TYPE));  // untyped write
    else
        ar.Read((void*)pElements, nCount * sizeof(TYPE)); // untyped read
}


</pre>
<h4><a name="018c_008d">Listing Eleven<a name="018c_008d"></h4><pre>

CStroke : public CObject { . . . };
CArray&lt; CMyKidsObject, CMyKidsObject&amp; &gt; kidsArray;

void SerializeElements( CArchive&amp; ar, CMyKidsObject* pKids, int nCount )
{
    for ( int i = 0; i &lt; nCount; i++, pKids++ )
    {
        // Serialize each CMyKidsObject object
        if ( ar.IsStoring() )
            ar &lt;&lt; pKids;
        else
            ar &gt;&gt; pKids;
    }
}


</pre>
<h4><a name="018c_008e">Listing Twelve<a name="018c_008e"></h4><pre>

template&lt;class TYPE, class ARG_TYPE&gt;
void CArray&lt;TYPE, ARG_TYPE&gt;::Serialize(CArchive&amp; ar)
{
    ASSERT_VALID(this);

    CObject::Serialize(ar);
    if (ar.IsStoring())
    {
        ar &lt;&lt; (WORD) m_nSize;
    }
    else
    {
        WORD nOldSize;
        ar &gt;&gt; nOldSize;
        SetSize(nOldSize);
    }
    SerializeElements(ar, m_pData, m_nSize);
}


</pre>
<h4><a name="018c_008f">Listing Thirteen<a name="018c_008f"></h4><pre>

void SerializeElements( CArchive&amp; ar, CPoint* pPoints, int nCount )
{
    for ( int i = 0; i &lt; nCount; i++, pPoints++ )
    {
        // Serialize each CPoint object
        if ( ar.IsStoring() )
            ar &lt;&lt; pPoints;
        else
            ar &gt;&gt; pPoints;
    }
}

</pre>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
