<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>Special Issue 1995 - C++ PROGRAMMING</TITLE></HEAD>
<body bgcolor="#FFFFFF">
<H1>Special Issue 1995 - C++ PROGRAMMING</H1>
<hr>
<h2>FEATURES</h2><P>
<h3><a href="9515a/9515a.htm">Programming with the Standard Template Library</A></h3><P>
<i>by Thomas Keffer </i><P>
Now part of the Standard C++ Library, the Standard Template Library goes against the object-oriented grain by separating data structures from algorithms. As Tom shows, this allows you to combine algorithms and data structures in novel and useful ways. <P>
<h3><a href="9515b/9515b.htm">Associative Arrays in C++</A></h3><P>
<i>by David Weber</i><P>
With associative arrays, you can create a database indexed by a single, unique text key that is both fast and space efficient. David presents his templatized version, which handles objects, pointers to objects, pointers to functions, deep copying, and more.<P>
<h3><a href="9515c/9515c.htm">A Portable C++ String Class</A></h3><P>
<i>by William Hill</i><P>
The string class William presents here is both lean and mean. More importantly, it provides the underpinning for creating generic, reusable code that is portable across platforms.<P>
<h3><a href="9515d/9515d.htm">A C++ Framework for DCE Threads</A></h3><P>
<i>by Michael Yam</i><P>
DCE threads (&quot;pthreads&quot;) allow you to create multitasking applications under UNIX. But with more than 50 function calls, programming with the DCE API is a nontrivial task. Michael's class library will take the pain out of your next pthread project.<P>
<h3><a href="9515e/9515e.htm">A Generic Parsing Engine in C++</A></h3><P>
<i>by Todd D. Esposito and Andrew K. Johnson</i><P>
The generic parser our authors present requires no specific knowledge of the source language and is independent of the underlying application. <P>
<h2>COLUMNS</h2><P>
<h3><a href="9515f/9515f.htm">Ramblings in Real Time</A></h3><P>
<i>by Michael Abrash </i><P>
Michael reflects on the last decade before he continues his discussion of BSP trees.<P>
<h3><a href="9515g/9515g.htm">DTACK Revisited</A></h3><P>
<i>by Hal W. Hardenbergh</i><P>
Hal examines some hard data on hard disks as he considers the need for speed and size when it comes to storage requirements.<P>
<h3><a href="9515h/9515h.htm">Programmer's Bookshelf</A></h3><P>
<i>by Robin Rowe</i><P>
Robin examines <I>Design Patterns: Elements of Reusable Object-Oriented Software</I>, by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides; <I>Metrics and Models in Software Quality Engineering</I>, by Steven H. Kan; <I>Computer Related Risks</I>, by Peter G. Neumann; <I>Safeware, System Safety and Computers</I>, by Nancy G. Leveson; and <I>Four Days with Dr. Deming,</I> by William J. Latzko and David M. Saunders.<P>
<h3><a href="9515i/9515i.htm">Software and the Law</A></h3><P>
<i>by Marc E. Brown</i><P>
Leaving a job to compete with your former employer can be risky business, especially if the angry employer sues. For employers, losing employees shouldn't mean losing trade secrets, as well. Knowing your legal rights can help make the transition easier.<P>
<h3><a href="9515j/9515j.htm">Editorial</A></h3><P>
<i>by Michael Floyd</i><P>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
