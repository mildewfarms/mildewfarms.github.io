<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>SP95: RAMBLINGS IN REAL TIME</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>RAMBLINGS IN REAL TIME<a name="0285_00ca"><a name="0285_00c8"><a name="0285_0000"></h1><P>
<h2>Compiling a BSP Tree</h2><P>
<h3>Michael Abrash</h3><P>
<p><i><a name="0285_00c9"><a name="0285_0000">Michael is the author of <I>Zen of Graphics Programming</I> and <I>Zen of Code Optimization</I>. He is currently pushing the envelope of real-time 3-D on Quake at id Software. He can be reached at mikeab@idsoftware.com.</i></p><hr><P>
As long-time readers of my columns know, I tend to move my family around the country. Change doesn't come out of the blue, so there's some interesting history to every move, but the roots of the latest move go back even farther than usual. To wit:<P>
In 1986, just after we moved from Pennsylvania to California, I started writing a column for <I>Programmer's Journal</I>. I was paid peanuts for writing it, and I doubt if even 5000 people saw some of the first issues the columns appeared in, but I had a lot of fun exploring fast graphics for the EGA and VGA.<P>
By 1991, I was in Vermont and writing the &quot;Graphics Programming&quot; column for <I>DDJ</I> (and having a great time doing it, even though it took all my spare nights and weekends to stay ahead of the deadlines). In those days I received a lot of unsolicited evaluation software, including a PC shareware game called <I>Commander Keen</I>, a side-scrolling game that was every bit as good as the hot Nintendo games of the day. I loved the way the game looked, and actually drafted a column opening about how for years I'd been claiming that the PC could be a great game machine in the hands of the right programmers, and here, finally, was the proof, in the form of <I>Commander Keen</I>. In the end, though, I decided that would be too close to a product review, an area that I've observed to inflame passions in unconstructive ways, so I went with a different opening.<P>
In 1992, I wrote a series of columns about my X-Sharp 3-D library and hung out on <I>DDJ</I>'s bulletin board. There was another guy who hung out there who knew a lot about 3-D, a fellow named John Carmack who was surely the only game programmer I'd ever heard of who developed under NextStep. When I moved to Redmond, I didn't have time for BBSs any more, though.<P>
In early 1993, I hired Chris Hecker. Later that year, Chris showed me an alpha copy of <I>DOOM</I>, and I nearly fell out of my chair. About a year later, Chris forwarded me a newsgroup posting about NextStep, and said, &quot;Isn't this the guy you used to know on the <I>DDJ</I> bulletin board?&quot; Indeed it was John Carmack; what's more, it turned out that John was the guy who had written <I>DOOM</I>. I sent him a congratulatory piece of mail, and he sent back some thoughts about what he was working on, and somewhere in there I asked if he ever came up my way. It turned out he had family in Seattle, so he stopped in and visited, and we had a great time.<P>
Over the next year, we exchanged some fascinating mail, and I became steadily more impressed with John's company, id Software. Eventually, John asked if I'd be interested in joining id, and after a good bit of thinking, I decided that nothing would be as much fun or teach me as much, and the upshot is that here we all are in Dallas, our fourth move of 2000 miles or more since I've starting writing computer articles, and I'm writing some seriously cool 3-D software.<P>
Now that I'm here, it's an eye-opener to look back and see how the events of the last decade fit together. You see, when John started doing PC game programming, he learned fast graphics programming from those early <I>Programmer's Journal</I> articles of mine. The copy of <I>Commander Keen</I> that validated my faith in the PC as a game machine was the fruit of those articles, for that was an id game (although I didn't know that then). When John was hanging out on the <I>DDJ</I> BBS, he had just done &quot;Castle Wolfenstein 3D,&quot; the first great indoor 3-D game, and was thinking about how to do <I>DOOM</I>. (If only I'd known that then!) And had I not hired Chris, or had he not somehow remembered me talking about that guy who used NextStep, I'd never have gotten back in touch with John, and things would surely be different. (At the very least, I wouldn't be hearing jokes about my daughter saying <I>y'all</I>.)<P>
I think there's a worthwhile lesson to be learned from all this: If you do what you love, and do it as well as you can, good things will eventually come of it. Not necessarily quickly or easily, but if you stick with it, they will come. Threads run through our lives, and by the time we've been adults for a while, practically everything that happens has roots that run far back in time. The implication should be clear: If you want good things to happen in your future, stretch yourself and put in extra effort now at whatever you care passionately about, so those roots will have plenty to work with down the road.<P>
All this is surprisingly closely related to this month's topic, BSP trees, because John is the fellow who brought BSP trees into the spotlight by building <I>DOOM</I> around them. He also got me started with BSP trees by explaining how <I>DOOM</I> worked and getting me interested enough to want to experiment; the BSP compiler in this article is the direct result. Finally, John has been an invaluable help to me as I've learned about BSP trees, as will become evident when we discuss BSP optimization.<P>
Onward to compiling BSP trees.<P>
<h3><a name="0285_00cb">Compiling BSP Trees<a name="0285_00cb"></h3><P>
As you'll recall from last time, a BSP tree is nothing more than a series of binary subdivisions that partition space into ever-smaller pieces. That's a simple data structure, and a BSP compiler is a correspondingly simple tool. First, it groups all the surfaces (lines or polygons) together into a single subspace that encompasses the entire world of the database. Then it chooses one of the surfaces as the root node, and uses its line or plane to divide the remaining surfaces into two subspaces, splitting surfaces into two parts if they cross the line or plane of the root. Each of the two resultant subspaces is then processed in the same fashion, and so on, recursively, until all surfaces have been assigned to nodes, and each leaf surface subdivides a subspace that is empty except for that surface. Put another way, the root node carves space into two parts, and the root's children carve each of those parts into two more parts, and so on, with each surface carving ever-smaller subspaces, until all surfaces have been used. (Actually, a BSP tree can use many other lines or planes to carve up space, but this is the approach I'll use this month.)<P>
If you find any of this confusing (it would be understandable; BSP trees are not easy to get the hang of), you might want to refer to my previous column (&quot;Ramblings in Real Time,&quot; <I>DDJ Sourcebook</I>, May/June 1995). It would also be a good idea to get hold of the visual BSP compiler I'll discuss shortly; when it comes to understanding BSP trees, there's nothing quite like seeing one built.<P>
So the two interesting operations in building a BSP tree are: choosing a root node for the current subspace (a &quot;splitter&quot;) and assigning surfaces to one side or the other of the current root node (splitting any that straddle the splitter). First, let's look at splitting and assigning, for which you need to understand parametric lines.<P>
<h3><a name="0285_00cc">Parametric Lines<a name="0285_00cc"></h3><P>
While we're all familiar with lines described in slope-intercept form, with <I>y</I> as a function of <I>x</I>, as in <a href="#0285_00d0">Example 1(a)</A>, another sort of line description is useful for clipping (and for a variety of 3-D purposes, such as curved surfaces and texture mapping): parametric lines. In parametric lines, <I>x</I> and <I>y</I> are decoupled from one another, and are instead described as a function of the parameter <I>t</I>; see <a href="#0285_00d0">Example 1(b)</A>. This can be summarized as <a href="#0285_00d0">Example 1(c)</A>, where <I>L=(x,y)</I>.<P>
<a href="19950287.htm">Figure 1</A> shows how a parametric line works. The <I>t</I> parameter describes how far along a line segment the current <I>x</I> and <I>y</I> coordinates are. Note that this description is valid not only for the line segment, but also for the entire infinite line; however, only points with <I>t</I> values between 0 and 1 are actually on the line segment.<P>
In our 2-D BSP compiler (as you'll recall from last time, we're working with 2-D trees for simplicity, but the principles generalize to 3-D), we'll represent walls (all vertical) as line segments viewed from above. The segments will be stored in parametric form, with the endpoints of the original line segment and two <I>t</I> values describing the endpoints of the current (possibly clipped) segment, providing a complete specification for each segment; see <a href="19950288.htm">Figure 2</A>.<P>
What does that do for us? For one thing, it keeps clipping errors from creeping in, because clipped line segments are always based on the original line segment, not derived from clipped versions. Also, it's potentially more compact, because you need to store the endpoints only for the original line segments; for clipped line segments, you can just store pairs of <I>t</I> values, along with a pointer to the original line segment. The biggest win, however, is that it allows us to use parametric line clipping, a very clean form of clipping.<P>
<h3><a name="0285_00cd">Parametric Line Clipping<a name="0285_00cd"></h3><P>
To assign a line segment to one subspace or the other of a splitter, you must somehow figure out whether the line segment straddles the splitter or falls on one side or the other. To determine that, you first plug the line segment and splitter into the parametric line-intersection equation in <a href="#0285_00d1">Example 2</A>, where <I>N</I> is the normal of the splitter, <I>S<SUB>start</SUB></I> is the start point of the splitting line segment in standard (x,y) form, and <I>L<SUB>start</SUB></I> and <I>L<SUB>end</SUB></I> are the endpoints of the line segment being split, again in (x,y) form. <a href="19950289.htm">Figure 3</A> illustrates the intersection calculation. Due to space constraints, I'm just going to present this equation and its implications as fact, rather than deriving them; if you want to know more, there's an excellent explanation on page 117 of <I>Computer Graphics: Principles and Practice</I>, by Foley and van Dam (Addison Wesley, ISBN 0-201-12110-7), a book that you should certainly have in your library.<P>
If the denominator is 0, you know that the lines are parallel and don't intersect, so you don't do the divide, but rather check the sign of the numerator, which tells you which side of the splitter the line segment is on. Otherwise, you do the division, and the result is the <I>t</I> value for the intersection point, as shown in <a href="1995028a.htm">Figure 3</A>. You then simply compare the <I>t</I> value to the <I>t</I> values of the endpoints of the line segment being split; if it's between them, that's where you split the line segment; otherwise, you can tell which side of the splitter the line segment is on according to which side of the line segment's <I>t</I> range it's on. Simple comparisons do all the work, and there's no need to generate actual <I>x</I> and <I>y</I> values. If you look closely at <a href="#0285_00d3">Listing One</A>, the core of the BSP compiler, you'll see that the parametric clipping code itself is exceedingly short and simple.<P>
One interesting point about <a href="#0285_00d3">Listing One</A> is that it generates normals to splitting surfaces simply by exchanging the <I>x</I> and <I>y</I> lengths of the splitting line segment and negating the resultant <I>y</I> value, thereby rotating the line 90 degrees. In 3-D, it's not that simple to come by a normal; you could calculate the normal as the cross-product of two of the polygon's edges, or precalculate it when you build the world database.<P>
<h3><a name="0285_00ce">The BSP Compiler<a name="0285_00ce"></h3><P>
<a href="#0285_00d3">Listing One</A> shows the code that actually builds the BSP tree. (<a href="#0285_00d3">Listing One</A> is from a .CPP file, but it is very close to straight C. It may even compile as a .C file, though I haven't checked.) The compiler first sets up an empty tree, then passes that tree and the complete set of line segments from which a BSP tree is to be generated to <I>SelectBSPTree()</I>. <I>SelectBSPTree()</I> chooses a root node and calls <I>BuildBSPTree()</I> to add that node to the tree and generate child trees for each of the node's two subspaces. <I>BuildBSPTree()</I> calls <I>SelectBSPTree()</I> recursively to select a root node for each of those child trees, and this continues until all lines have been assigned nodes. <I>SelectBSP()</I> uses parametric clipping to decide on the splitter, and <I>BuildBSPTree()</I> uses parametric clipping to decide which subspace of the splitter each line belongs in, and to split lines, if necessary.<P>
<a href="#0285_00d3">Listing One</A> isn't very long or complex, but it's somewhat more complicated than it could be because it's structured to allow visual display of the ongoing compilation process. That's because <a href="#0285_00d3">Listing One</A> is actually just a part of a BSP compiler for Win32 that visually depicts the progressive subdivision of space as the BSP tree is built. (<a href="#0285_00d3">Listing One</A> might not compile as printed; I may have missed copying some global variables that it uses.) The code is too large to present here in its entirety, but you can ftp it from ddjbsp.zip in the /mikeab directory on ftp.idsoftware.com; see &quot;Availability,&quot; page 3, as well.<P>
<h3><a name="0285_00cf">Optimizing the BSP Tree<a name="0285_00cf"></h3><P>
Last time, I promised I'd discuss how to choose the wall to use as the splitter at each node in constructing a BSP tree. This is a difficult problem, but you can't ignore it, because the choice of splitter can make a huge difference.<P>
Consider, for example, a BSP in which the line or plane of the splitter at the root node splits every single other surface in the world, doubling the total number of surfaces to be dealt with. Contrast that with a BSP built from the same surface set in which the initial splitter doesn't split anything. Both trees provide a valid ordering, but one is much larger than the other, with twice as many polygons after the selection of just one node. Apply the same difference again to each node, and the relative difference in size (and, correspondingly, in traversal and rendering time) soon balloons astronomically. So you need to do something to optimize the BSP tree--but what? Before you try to answer that, you need to know exactly what you'd like to optimize.<P>
There are several possible optimization objectives in BSP compilation. We might choose to balance the tree as evenly as possible, thereby reducing the average depth to which the tree must be traversed. Alternatively, we might try to approximately balance the area or volume on either side of each splitter. That way you don't end up with huge chunks of space in some tree branches and tiny slivers in others, and overall processing time is more consistent. Or you might choose to select planes aligned with the major axes, because such planes can help speed up our BSP traversal.<P>
The BSP metric that seems most useful to me, however, is the number of polygons that are split into two polygons in the course of building a BSP tree. Fewer splits is better; the tree is smaller with fewer polygons, and drawing will go faster with fewer polygons to draw, due to per-polygon overhead. There's a problem with the fewest-splits metric, though: There's no sure way to achieve it.<P>
The obvious approach to minimizing polygon splits would be to try all possible trees to find the best one. Unfortunately, the order of that particular problem is <I>N</I>!, as I found to my dismay when I implemented brute-force optimization in the first version of my BSP compiler. Take a moment to calculate the number of operations for the 20-polygon set I originally tried brute-force optimization on. I'll give you a hint: There are 19 digits in 20!, and if each operation takes only one microsecond, that's over 70,000 years (or, if you prefer, over 500,000 dog years). Now consider that a single game level might have 5000 to 10,000 polygons; there aren't anywhere near enough dog years in the lifetime of the universe to handle that. We're going to have to give up on optimal compilation and come up with a decent heuristic approach, no matter what optimization objective we select.<P>
In <a href="#0285_00d3">Listing One</A> I've applied the popular heuristic of choosing as the splitter at each node the surface that splits the fewest of the other surfaces being considered for that node. In other words, I choose the wall that splits the fewest of the walls in the subspace it's subdividing. There's nothing wrong with this technique, but it's time-consuming to perform all those trial splits, and this test doesn't guarantee anything about the total number of resulting splits in the subspace. John reports that when he switched from that approach to the considerably faster approach of using the splitter that divided the subspace most evenly, he sometimes got fewer splits overall, although in other cases the fewest-split heuristic worked better. So, although the approach used in <a href="#0285_00d3">Listing One</A> will generally improve matters, it's only one of many techniques, all imperfect but certainly better than nothing. John's rule of thumb is, &quot;Do something, but make it something fast.&quot;<P>
Although BSP trees have been around for at least 15 years now, they're still only partially understood, and are a ripe area for applied research and general ingenuity. You might want to try your hand at inventing new BSP optimization approaches; it's an interesting problem, and you might strike pay dirt. There are many things that BSP trees can't do well, because it takes so long to build them--but what they do, they do exceedingly well, so a better compilation approach that would allow BSP trees to be used for more purposes would be valuable indeed.<P>
Next time: Drawing from a BSP tree.<P>

<a name="0285_00d0"><a name="0285_00d0"><B>Example 1:</B> (a) Describing lines in slope-intercept form, where y is a function of x; (b) describing lines in parametric form, where x and y are decoupled from one another and described as a function of the parameter t; (c) summarizing parametric lines.
<pre>
(a)
y=mx+b

(b)
x=x<SUB>start</SUB>+t(x<SUB>end</SUB>-x<SUB>start</SUB>)<P>y=y<SUB>start</SUB>+t(y<SUB>end</SUB>-y<SUB>start</SUB>)

(c)
L=L<SUB>start</SUB>+t(L<SUB>end</SUB>-L<SUB>start</SUB>)
</pre><P>

<a name="0285_00d1"><a name="0285_00d1"><B>Example 2:</B> The parametric line-intersection equation.
<pre>
Equation 1: numer     =N&#183;(L<SUB>start</SUB>-S<SUB>start</SUB>)
Equation 2: denom     =-N&#183;(L<SUB>end</SUB>-L<SUB>start</SUB>)
Equation 3: tintersect     =numer/denom
</pre>
<B><a href="1995028b.htm">Figure 1</A>: </B>A sample parametric line; x=100+t(150-100), y=50+t(150-50).<P>
<B><a href="1995028c.htm">Figure 2</A>: </B>Line-segment storage in the BSP compiler. Segments are stored as t start and end points relative to the original, unclipped line segment, which is (100,50), (150,150), from t=0 to t=1.<P>
<B><a href="1995028d.htm">Figure 3</A>: </B>The result of applying Equation 3 to two parametric lines; L= the line being split, S=the splitting line, N=Normal.<P>
<P>
<h4><a name="0285_00d2"><a name="0285_00d3"><a name="0285_00d3">Listing One</h4><pre>
#define MAX_NUM_LINESEGS 1000
#define MAX_INT          0x7FFFFFFF
#define MATCH_TOLERANCE  0.00001
// A vertex
typedef struct _VERTEX
{
   double x;
   double y;
} VERTEX;
// A potentially split piece of a line segment, as processed from the
// base line in the original list
typedef struct _LINESEG
{
   _LINESEG *pnextlineseg;
    int startvertex;
    int endvertex;
    double walltop;
    double wallbottom;
    double tstart;
    double tend;
    int color;
    _LINESEG *pfronttree;
    _LINESEG *pbacktree;
} LINESEG, *PLINESEG;
static VERTEX *pvertexlist;
static int NumCompiledLinesegs = 0;
static LINESEG *pCompiledLinesegs;
// Builds a BSP tree from the specified line list. List must contain
// at least one entry. If pCurrentTree is NULL, then this is the root
// node, otherwise pCurrentTree is the tree that's been build so far.
// Returns NULL for errors.
LINESEG * SelectBSPTree(LINESEG * plineseghead,
    LINESEG * pCurrentTree, LINESEG ** pParentsChildPointer)
{
    LINESEG *pminsplit;
    int minsplits;
    int tempsplitcount;
    LINESEG *prootline;
    LINESEG *pcurrentline;
    double nx, ny, numer, denom, t;
    // Pick a line as the root, and remove it from the list of lines
    // to be categorized. The line we'll select is the one of those in
    // the list that splits the fewest of the other lines in the list
    minsplits = MAX_INT;
    prootline = plineseghead;
    while (prootline != NULL) {
        pcurrentline = plineseghead;
        tempsplitcount = 0;
        while (pcurrentline != NULL) {
            // See how many other lines the current line splits
            nx = pvertexlist[prootline-&gt;startvertex].y -
                    pvertexlist[prootline-&gt;endvertex].y;
            ny = -(pvertexlist[prootline-&gt;startvertex].x -
                    pvertexlist[prootline-&gt;endvertex].x);
            // Calculate the dot products we'll need for line
            // intersection and spatial relationship
            numer = (nx * (pvertexlist[pcurrentline-&gt;startvertex].x -
                    pvertexlist[prootline-&gt;startvertex].x)) +
                    (ny * (pvertexlist[pcurrentline-&gt;startvertex].y -
                    pvertexlist[prootline-&gt;startvertex].y));
            denom = ((-nx) * (pvertexlist[pcurrentline-&gt;endvertex].x -
                    pvertexlist[pcurrentline-&gt;startvertex].x)) +
                    ((-ny) * (pvertexlist[pcurrentline-&gt;endvertex].y -
                    pvertexlist[pcurrentline-&gt;startvertex].y));
            // Figure out if the infinite lines of the current line
            // and the root intersect; if so, figure out if the
            // current line segment is actually split, split if so,
            // and add front/back polygons as appropriate
            if (denom == 0.0) {
                // No intersection, because lines are parallel; no
                // split, so nothing to do
            } else {
                // Infinite lines intersect; figure out whether the
                // actual line segment intersects the infinite line
                // of the root, and split if so
                t =  numer / denom;
                if ((t &gt; pcurrentline-&gt;tstart) &amp;&amp;
                        (t &lt; pcurrentline-&gt;tend)) {
                    // The root splits the current line
                    tempsplitcount++;
                } else {
                    // Intersection outside segment limits, so no
                    // split, nothing to do
                }
            }
            pcurrentline = pcurrentline-&gt;pnextlineseg;
        }
        if (tempsplitcount &lt; minsplits) {
            pminsplit = prootline;
            minsplits = tempsplitcount;
        }
        prootline = prootline-&gt;pnextlineseg;
    }
    // For now, make this a leaf node so we can traverse the tree
    // as it is at this point. BuildBSPTree() will add children as
    // appropriate
    pminsplit-&gt;pfronttree = NULL;
    pminsplit-&gt;pbacktree = NULL;
    // Point the parent's child pointer to this node, so we can
    // track the currently-build tree
    *pParentsChildPointer = pminsplit;
    return BuildBSPTree(plineseghead, pminsplit, pCurrentTree);
}
// Builds a BSP tree given the specified root, by creating front and
// back lists from the remaining lines, and calling itself recursively
LINESEG * BuildBSPTree(LINESEG * plineseghead, LINESEG * prootline,
    LINESEG * pCurrentTree)
{
    LINESEG *pfrontlines;
    LINESEG *pbacklines;
    LINESEG *pcurrentline;
    LINESEG *pnextlineseg;
    LINESEG *psplitline;
    double nx, ny, numer, denom, t;
    int Done;
    // Categorize all non-root lines as either in front of the root's
    // infinite line, behind the root's infinite line, or split by the
    // root's infinite line, in which case we split it into two lines
    pfrontlines = NULL;
    pbacklines = NULL;
    pcurrentline = plineseghead;
    while (pcurrentline != NULL)
    {
      // Skip the root line when encountered
      if (pcurrentline == prootline) {
        pcurrentline = pcurrentline-&gt;pnextlineseg;
      } else  {
        nx = pvertexlist[prootline-&gt;startvertex].y -
                pvertexlist[prootline-&gt;endvertex].y;
        ny = -(pvertexlist[prootline-&gt;startvertex].x -
                pvertexlist[prootline-&gt;endvertex].x);
        // Calculate the dot products we'll need for line intersection
        // and spatial relationship
        numer = (nx * (pvertexlist[pcurrentline-&gt;startvertex].x -
                 pvertexlist[prootline-&gt;startvertex].x)) +
                (ny * (pvertexlist[pcurrentline-&gt;startvertex].y -
                 pvertexlist[prootline-&gt;startvertex].y));
        denom = ((-nx) * (pvertexlist[pcurrentline-&gt;endvertex].x -
                 pvertexlist[pcurrentline-&gt;startvertex].x)) +
                (-(ny) * (pvertexlist[pcurrentline-&gt;endvertex].y -
                 pvertexlist[pcurrentline-&gt;startvertex].y));
        // Figure out if the infinite lines of the current line and
        // the root intersect; if so, figure out if the current line
        // segment is actually split, split if so, and add front/back
        // polygons as appropriate
        if (denom == 0.0) {
            // No intersection, because lines are parallel; just add
            // to appropriate list
            pnextlineseg = pcurrentline-&gt;pnextlineseg;
            if (numer &lt; 0.0) {
                // Current line is in front of root line; link into
                // front list
                pcurrentline-&gt;pnextlineseg = pfrontlines;
                pfrontlines = pcurrentline;
            } else {
                // Current line behind root line; link into back list
                pcurrentline-&gt;pnextlineseg = pbacklines;
                pbacklines = pcurrentline;
            }
            pcurrentline = pnextlineseg;
        } else {
            // Infinite lines intersect; figure out whether the actual
            // line segment intersects the infinite line of the root,
            // and split if so
            t =  numer / denom;
            if ((t &gt; pcurrentline-&gt;tstart) &amp;&amp;
                    (t &lt; pcurrentline-&gt;tend)) {
                // The line segment must be split; add one split
                // segment to each list
                if (NumCompiledLinesegs &gt; (MAX_NUM_LINESEGS - 1)) {
                    DisplayMessageBox(&quot;Out of space for line segs; &quot;
                                 &quot;increase MAX_NUM_LINESEGS&quot;);
                    return NULL;
                }
                // Make a new line entry for the split part of line
                psplitline = &amp;pCompiledLinesegs[NumCompiledLinesegs];
                NumCompiledLinesegs++;
                *psplitline = *pcurrentline;
                psplitline-&gt;tstart = t;
                pcurrentline-&gt;tend = t;
                
                pnextlineseg = pcurrentline-&gt;pnextlineseg;
                if (numer &lt; 0.0) {
                    // Presplit part is in front of root line; link
                    // into front list and put postsplit part in back
                    // list
                    pcurrentline-&gt;pnextlineseg = pfrontlines;
                    pfrontlines = pcurrentline;
                    psplitline-&gt;pnextlineseg = pbacklines;
                    pbacklines = psplitline;
                } else {
                    // Presplit part is in back of root line; link
                    // into back list and put postsplit part in front
                    // list
                    psplitline-&gt;pnextlineseg = pfrontlines;
                    pfrontlines = psplitline;
                    pcurrentline-&gt;pnextlineseg = pbacklines;
                    pbacklines = pcurrentline;
                }
                pcurrentline = pnextlineseg;
            } else {
                // Intersection outside segment limits, so no need to
                // split; just add to proper list
                pnextlineseg = pcurrentline-&gt;pnextlineseg;
                Done = 0;
                while (!Done) {
                    if (numer &lt; -MATCH_TOLERANCE) {
                        // Current line is in front of root line;
                        // link into front list
                        pcurrentline-&gt;pnextlineseg = pfrontlines;
                        pfrontlines = pcurrentline;
                        Done = 1;
                    } else if (numer &gt; MATCH_TOLERANCE) {
                        // Current line is behind root line; link
                        // into back list
                        pcurrentline-&gt;pnextlineseg = pbacklines;
                        pbacklines = pcurrentline;
                        Done = 1;
                    } else {
                        // The point on the current line we picked to
                        // do front/back evaluation happens to be
                        // collinear with the root, so use the other
                        // end of the current line and try again
                        numer =
                            (nx *
                             (pvertexlist[pcurrentline-&gt;endvertex].x -
                              pvertexlist[prootline-&gt;startvertex].x))+
                            (ny *
                             (pvertexlist[pcurrentline-&gt;endvertex].y -
                              pvertexlist[prootline-&gt;startvertex].y));
                    }
                }
                pcurrentline = pnextlineseg;
            }
        }
      }
    }
    // Make a node out of the root line, with the front and back trees
    // attached
    if (pfrontlines == NULL) {
        prootline-&gt;pfronttree = NULL;
    } else {
        if (!SelectBSPTree(pfrontlines, pCurrentTree,
                          &amp;prootline-&gt;pfronttree)) {
            return NULL;
        }
    }
    if (pbacklines == NULL) {
        prootline-&gt;pbacktree = NULL;
    } else {
        if (!SelectBSPTree(pbacklines, pCurrentTree,
                          &amp;prootline-&gt;pbacktree)) {
            return NULL;
        }
    }
    return(prootline);
}
End Listing

</pre>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
