<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>SP95: Programming with the Standard Template Library</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Programming with the Standard Template Library<a name="0277_00c0"><a name="0277_00be"><a name="0277_0000"></h1><P>
<h2>Sage advice for coping with STL</h2><P>
<h3>Thomas Keffer</h3><P>
<p><i><a name="0277_00bf"><a name="0277_0000">Tom is the founder and CEO of Rogue Wave Software. He has served on the C++ ANSI/ISO Committee and is actively involved in working to evolve C++ into an even more practical and elegant object-oriented language.</i></p><hr><P>
In terms of algorithms, data structures, internationalization, and language support, the Standard C++ Library could well be the single most powerflibrary ever incorporated into a standardized language. The Standard C++ Library includes an <I>iostream</I> facility, a locale facility, a templatized string class, a templatized class for representing complex numbers, a class for numerical arrays, support for memory management (<I>new</I> and <I>delete</I>), and language support (<I>terminate()</I>, <I>unexpected()</I>, and so on). It also includes one other important component--the Standard Template Library.<P>
The Standard Template Library (STL) was developed by Alexander Stepanov and Meng Lee at HP Labs. In July of last year, HP proposed to the ANSI/ISO Standardization Committee that the STL be included as part of the Standard C++ Library. This addition was approved by the committee, and last August Hewlett-Packard offered a freely copyable version of the STL (available for anonymous FTP at butler.hpl.hp.com and mirror sites). Earlier this year, <I>DDJ</I> named Stepanov as a recipient of the &quot;Excellence in Programming Award&quot; for his work on the STL; see &quot;<I>Dr. Dobb's Journal</I> Excellence in Programming Awards&quot; (<I>DDJ</I>, March 1995).<P>
The STL is a large set of templatized classes and has an unusual and elegant architecture. A key concept of the STL is that it separates data structures from algorithms. This prevents it from being very object oriented, but it also gives it unusual flexibility. While this library is currently known informally as &quot;STL,&quot; it will eventually lose its distinct identity as it becomes subsumed by the rest of the Standard C++ Library. Eventually, it will all be known as the &quot;Standard C++ Library.&quot;<P>
<h3><a name="0277_00c1">Algorithms and the STL<a name="0277_00c1"></h3><P>
Algorithms in the STL are written in generic terms, without regard for the data structure that might be used to hold the elements upon which they will operate. This allows you to add additional data structures that can immediately leverage existing algorithms. Conversely, you can add new algorithms that will work with any data structure. Of course, different data structures have different time/space characteristics, which, after all, is why more than one data structure is useful. Hence, for this approach to work, the time/space characteristics of both data structures and algorithms must be recorded and standardized. This is what the STL does, allowing structures and algorithms to be combined in highly predictable ways.<P>
Algorithms can be generalized to work on any data type and any STL-compliant data structure. Consider, for example, the linear-search algorithm in <a href="#0277_00c8">Figure 1(a)</A>, which searches an array of integers for an element with a particular value. <a href="#0277_00c8">Figure 1(b)</A> shows how you might use such a function to find the integer value 5 in a given array. Note that if the search fails, the algorithm will return a pointer to one past the end of the array (address <I>a+20</I>, in this case). While there is no element there, both C and C++ guarantee that this is always a valid address. You can't dereference such an address, but you can build a pointer that contains it.<P>
Hence, this is a completely general algorithm for finding an element within a C-like array of like-typed elements. You can generalize the algorithm to work with any data type using templates as in <a href="#0277_00c8">Figure 1(c)</A>. This will work not only with integers, but with linear arrays of any type that supports an inequality operator; see <a href="#0277_00c8">Figure 1(d)</A>. Our templatized algorithm, <I>find2()</I>, requires:<P>
<UL>
<li>That for a variable <I>a</I> of type T and a variable <I>q</I> of type pointer to T, the expression <I>*q!=a</I> be convertible to type <I>bool</I>. </li>
<li>That the second parameter be reachable from the first; that is, that you be able to continually increment the first pointer and eventually reach the second pointer.</li>
</UL>
In return, our algorithm promises to:<P>
<UL>
<li>Return a pointer <I>pos</I> for which the expression <I>*pos!=value</I> evaluates False. </li>
<li>Return the value <I>end </I>if no such pointer can be found. </li>
<li>Take linear time.</li>
</UL>
This last promise states that as elements are added, the time taken for the algorithm to execute will expand linearly (as opposed to quadratically, logarithmically, and so on).<P>
This is as precise a statement as we can make about the algorithm. Given types and values that satisfy the input requirements of the algorithm, you can make very strong statements about the output variables. These strong statements make it possible to combine types and STL algorithms in new and novel ways, while making strong guarantees about the outcome.<P>
<h3><a name="0277_00c2">Generalizing an Algorithm<a name="0277_00c2"></h3><P>
As general as our algorithm is, it can be made still more general. Right now, it will work only with linear arrays. But other kinds of linear searches are possible, through a linked list, for example. How might you accommodate these? The problem is that our first attempt at an algorithm advances to the next element by incrementing a pointer. To advance down a linked list, you need to chase a pointer. <P>
You can generalize to any kind of linear search by introducing a kind of abstract pointer called an &quot;iterator.&quot; The iterator is incremented by the familiar <I>p++</I> notation, but the actual implementation might involve chasing a pointer or taking even more exotic actions. <a href="#0277_00c9">Figure 2</A> presents the most general kind of linear-search <I>find</I> algorithm, as provided in the STL. <P>
Like the previous algorithm, <a href="#0277_00c9">Figure 2</A> has been templatized on type T, but it has also been templatized on the type of pointer. It performs a linear search between the element pointed to first and the element just before <I>end</I>, looking for value. If successful, it returns an iterator that points to the matching element. If unsuccessful, it returns an iterator equal to <I>end</I>. The actual type of the pointer parameterized by the type <I>InputIterator </I>pointer is left unspecified. <P>
I find it useful to think of an iterator as a kind of pointer but, really, all they have in common with pointers is a similar interface. As a minimal requirement, you need to be able to apply a dereferencing operator (<I>*p</I>) to an iterator and be able to increment it (<I>p++</I>). These operators can be either the native operators for built-in pointer types or overloaded operators that you have supplied for nonnative types.<P>
Remember, algorithms are written in terms of a &quot;signature&quot; on types. So long as your iterator offers the correct signature, it will work. For example, <a href="#0277_00ca">Figure 3(a)</A> presents a linked-list class. Because a simple pointer type will not suffice for traversing this list, I also supply the list iterator shown in <a href="#0277_00ca">Figure 3(b)</A>.<P>
Note that the iterator supports a dereferencing interface through an overloaded &quot;*&quot; operator. You can also increment the iterator through an overloaded &quot;++&quot; operator. Finally, an overloaded &quot;!=&quot; operator tests for inequality of iterators. With these supported interfaces, the list iterator is indistinguishable from a built-in pointer, as far as the <I>find()</I> algorithm is concerned. <P>
Because the relationship between iterators and the data structure over which they traverse can be complicated, STL data structures supply simplified interfaces for the most common iterator values: the start of the structure (member function <I>begin()</I>) and one past the end of the structure (<I>end()</I>). The class in <a href="#0277_00ca">Figure 3(a)</A> shows sample implementations of <I>begin()</I> and <I>end()</I>; <a href="#0277_00ca">Figure 3(b)</A> shows the <I>ListIterator </I>used by these functions.<P>
Finally, given a data structure type, it is useful to know the type of its corresponding iterator. This is supplied by a public <I>typedef</I>, also shown in <a href="#0277_00ca">Figure 3(a)</A>. <a href="#0277_00cb">Figure 4</A> shows how you use the results. Note how our <I>find</I> algorithm is completely comfortable using either built-in arrays or linked lists, of any type. Provided that we have included sensible iterators, it will also be just as efficient as any algorithm coded with a particular data structure in mind.<P>
Many other algorithms are offered by the STL. For example, there is a binary-search algorithm for sorted sequences, as well as algorithms for sorting, merging, copying, and shuffling sequences. <P>
<h3><a name="0277_00c3">STL Data Structures<a name="0277_00c3"></h3><P>
So far, all we have looked at only one STL algorithm, with a hint of how a data structure might be written. While the focus of the STL is algorithms, it also includes a modest set of data structures; see <a href="#0277_00cf">Table 1</A>. All data structures include an interface necessary to support the algorithms. Hence, the same algorithm can be used on many data structures. Conversely, the same data structure can be used by many algorithms. But, things cannot be combined willy-nilly. For example, many algorithms (<I>sort</I> comes to mind) require iterators more capable than the simple <I>InputIterator</I> examined earlier. For example, the iterator may have to support random indexing <I>p[i]</I>, which would be insufferably slow with a linked list. For this reason, the iterator associated with the STL data-structure <I>list </I>does not support random indexing.<P>
All the information you need for deciding which algorithms can be usefully combined with which data structures has been carefully recorded as part of the standardization process. However, it is up to you to look up this information (perhaps in online help pages) and to be aware of the hazards.<P>
<h3><a name="0277_00c4">Limitations of the STL<a name="0277_00c4"></h3><P>
While the STL is powerful, it has its limitations, the biggest being that it is not very object oriented. Object orientation depends on data and algorithms being combined under one interface. The whole premise of the STL is at odds with this: The STL separates data and algorithms, allowing their recombination in novel and useful ways. This exposes the programmer to a host of programming errors. For example, consider the code in <a href="#0277_00cc">Figure 5(a)</A>. If the ending iterator is not reachable from the starting iterator, that is, if they refer to different data structures (perhaps because the programmer accidentally passed in the wrong iterator), results are unpredictable. This example could lead to a program crash.<P>
This is a danger of the STL. The algorithms bristle with pointer-like iterators, none of which have any relationship to each other that the compiler can check. The result is code that is less object oriented and more prone to errors that go undetected at compile time. <P>
In <a href="#0277_00cc">Figure 5(b)</A>, we start by filling two <I>list</I> data structures, <I>a</I> and <I>b</I>, with ten elements, the numbers 0 through 9. At this point, the two lists are identical. We then use the STL <I>remove </I>algorithm to erase all instances having the value 5 from list <I>a</I>. We might expect the resultant data structure to have nine elements, but it still has ten. This is because, in general, the algorithm is handed only iterators. Given an iterator, there is no way for the algorithm to figure out into which data structure it points. Hence, the algorithm is unable to adjust the size of the resultant data structure. You must do this yourself. The correct answer is obtained by calling the special and (arguably) more object-oriented member function <I>list&lt;T&gt;::remove(const T</I>&amp;<I>)</I>, as in <a href="#0277_00cc">Figure 5(b)</A>, where it has been applied to list <I>b</I>.<P>
<h3><a name="0277_00c5">Multithreading<a name="0277_00c5"></h3><P>
The inability of an iterator to be bound to a specific data structure is a general problem and can lead to other limitations. For example, the STL cannot be made multithread safe. A multithread-safe data structure ensures proper synchronization between accessing threads. One way to do this, pioneered by the C++ Booch Components, is to have each thread, upon entry to a member function, lock the data structure, preventing its access by another thread. This lock is then released when the thread returns from the function.<P>
Unfortunately, it is impossible to write a multithreaded STL algorithm that uses standard STL iterators. For example, suppose you wanted to find an element in a vector while locking it from access by another thread that could potentially modify the vector while the search is being performed. The <I>find()</I> function accepts <I>InputIterator</I>s to do its work. <I>InputIterator</I>s do not have any locking concept in their interface. One could lock the data structure to which an iterator refers, but given an STL iterator, there is no way to get a reference to the data structure into which it points.<P>
Again, this problem arises because of the STL's approach of separating data from the algorithm. Because of this separation, there is no way for the algorithm to control state (a synchronization lock) that is not directly related to iterators.<P>
<h3><a name="0277_00c6">Making the Best of the STL<a name="0277_00c6"></h3><P>
With its flexible design, the STL is a powerful resource. However, for all its power, it can be quite complicated and error prone. To avoid errors, consider subclassing the STL data structures (<I>vector&lt;T&gt;</I>, <I>list&lt;T&gt;</I>, and so on) and putting the algorithms you most commonly use (such as <I>find()</I>) directly in the subclass interface. For example, you can create the class in <a href="#0277_00cd">Figure 6(a)</A>. With this approach, we put the algorithm right into the interface. The context of the search is fully known: The search will be done within the data structure. You don't have to break the vector apart to supply starting and ending iterators. There is no possibility of the ending iterator being unreachable from the starting iterator. Hence, the results are simpler and less error prone, as shown in <a href="#0277_00cd">Figure 6(b)</A>.<P>
Because <I>MyVector&lt;T&gt;</I> publicly derives from its corresponding STL class, all of the iterator facilities will be available. It can be used anywhere an STL data structure can be used, allowing you the full use of the STL algorithms; see <a href="#0277_00ce">Figure 7</A>. <P>
This approach also allows you to offer a multithread-safe version. Note how this class does not publicly inherit from its STL equivalent (an implementation could, however, inherit privately). This is because STL iterators cannot be used safely in a multithread-safe environment. Hence, they have not been exposed. Instead, access must be gained through member functions, so they can ensure that a lock has been acquired. For example, the implementation of <I>sort()</I> would look like <a href="#0277_00ce">Figure 7(d)</A>.<P>
<h3><a name="0277_00c7">Summary<a name="0277_00c7"></h3><P>
I've presented some of the fundamental ideas behind the Standard Template Library and shown how its design can lead to great flexibility. The STL represents a breakthrough in the genericity of data structures and algorithms, but it can be tedious and tricky to use. <P>
I believe the STL will eventually be most useful in the hands of component writers who will use its powerful facilities to build components with larger granularity. Internally, these components can take advantage of the algorithms and efficiencies of the STL, while offering a more object-oriented interface to their clients.<P>

<a name="0277_00c8"><a name="0277_00c8"><B>Figure 1:</B> (a) Linear-search algorithm; (b) using find1() to locate the integer 5 in an array; (c) using templates to generalize the linear-search algorithm; (d) find2() will work for type that supports an inequality operator.
<pre>
(a)
int* find1(int* first, int* end, const int&amp; value)
{
  while(first != end &amp;&amp; *first != value)
    first++;
  return first;
}

(b)
int a[20];
// ... fill the array &quot;a&quot; ...
int* pos = find1(a, a+20, 5);  // Searches a[0] through a[19]
                             // Returns &amp;a[20] on failure
assert( pos==a+20 || *pos == 5 );

(c)
template &lt;class T&gt; T* find2(T* first, T* end, const T&amp; value)
{
  while(first != end &amp;&amp; *first != value)
    first++;
  return first;
}

(d)
class Foo { ... };
bool operator!=(const Foo&amp;, const Foo&amp;);
Foo fa[20];
// ... fill the array &quot;fa&quot; ...
Foo f;
Foo* pos = find2(fa, fa+20, f);
assert( pos==fa+20 || !(*pos!=f) );
</pre>

<a name="0277_00c9"><a name="0277_00c9"><B>Figure 2:</B> General linear-search algorithm as presented in the STL.
<pre>
template &lt;class InputIterator, class T&gt; InputIterator
find(InputIterator first, InputIterator end, const T&amp; value)
{
  while(first != end &amp;&amp; *first != value)
    first++;
  return first;
}
</pre>

<a name="0277_00ca"><a name="0277_00ca"><B>Figure 3:</B> (a) A template class for linked lists; (b) a list-iterator class.
<pre>
(a)
// Forward declaration:
template &lt;class T&gt; class ListIterator&lt;T&gt;;
template &lt;class T&gt; struct Link
{
  Link&lt;T&gt;* next_;
  T val_;
  Link(T p) : val_(p), next_(0) {;}
};
template &lt;class T&gt; class List
{
  Link&lt;T&gt;* head_;
public:
  typedef ListIterator&lt;T&gt; iterator;
  List() : head_(0) {;}
  void addLink(Link&lt;T&gt;* link)
    {link-&gt;next_=head_; head_=link;}
  ListIterator&lt;T&gt; begin() const
    {return ListIterator&lt;T&gt;(head_);}
  ListIterator&lt;T&gt; end() const
    {return ListIterator&lt;T&gt;(0);}
  friend class ListIterator&lt;T&gt;;
  };

(b)
template &lt;class T&gt; class ListIterator
{
  Link&lt;T&gt;* current_;
public:
  ListIterator(Link&lt;T&gt;* link) : current_(link) {;}
  T operator*()
    {return current_-&gt;val_;}
  void operator++(int)
    { current_ = current_-&gt;next_; }
  int operator!=(const ListIterator&lt;T&gt;&amp; it)
    {return current_!=it.current_;}
};
</pre>

<a name="0277_00cb"><a name="0277_00cb"><B>Figure 4:</B> Using an iterator's type information.
<pre>
int main()
{
  List&lt;int&gt; list;
  list.addLink(new Link&lt;int&gt;(1));
  list.addLink(new Link&lt;int&gt;(2));
  list.addLink(new Link&lt;int&gt;(3));
  list.addLink(new Link&lt;int&gt;(4));
  List&lt;int&gt;::iterator pos  = find(list.begin(), list.end(),2);
  assert(*pos == 2);
  List&lt;int&gt;::iterator pos2 = find(list.begin(), list.end(),6);
  assert(!(pos2 != list.end()));
  return 0;
}
</pre>

<a name="0277_00cc"><a name="0277_00cc">
<pre><B>Figure 5:</B> STL's separation of data structures from algorithms exposes the programmer to a number of potential programming errors.
(a)
vector&lt;int&gt; v(10), x(10);
// ...
// Oops!
vector&lt;int&gt;::const_iterator<P>position =
  find(v.begin(), x.end(), 5);
assert(*position == 5);

(b)
void main()
{
  list&lt;int&gt; a, b;
  for(int i=0; i&lt;10; i++)
  {
    a.push_front(i);
    b.push_front(i);
  }
  remove(a.begin(), a.end(), 5);
  assert(a.size()==9); // fails
  b.remove(5);
  assert(b.size()==9);  // OK
}
</pre>

<a name="0277_00cd"><a name="0277_00cd"><B>Figure 6:</B> (a) Subclassing an STL data structure, such as vector &lt;T&gt;, and encapsulating STL algorithms such as find()<I>;</I> <I>(b)</I> the result is a much simpler class interface.
<pre>
(a)
template &lt;class T&gt; class MyVector : public vector&lt;T&gt;
{
public:
size_t index(const T&amp; val) const;
void sort();
};
template &lt;class T&gt; size_t
MyVector&lt;T&gt;::index(const T&amp; val) const
{
  const_iterator pos = ::find(begin(), end(), val);
  return pos==end() ? (size_t)(-1) : pos-begin();
}
template &lt;class T&gt; void MyVector&lt;T&gt;::sort()
{
  sort(begin(), end());
}

(b)
MyVector&lt;int&gt; v(10);
size_t position = v.index(5);   // Much simpler interface
assert(v[position] == 5);
</pre>

<a name="0277_00ce"><a name="0277_00ce"><B>Figure 7:</B> (a) Because MyVector&lt;T&gt; publicly derives from its corresponding STL class, it can be used anywhere an STL data structure can be used; (b) this includes being passed by reference where an STL structure is expected; (c)  this approach also allows a multithread-safe version; (d) implementing a multithread-safe sort().
<pre>
(a)
MyVector&lt;int&gt; v(10);
// Sort only the first 7 elements, using the STL sort
// algorithm:
sort(v.begin(), v.begin()+7);

(b)
void foo(const vector&lt;int&gt;&amp;);
void main() {
  MyVector&lt;int&gt; v(10);
  foo(v);   // OK
}

(c)
template &lt;class T, class Lock&gt; class MyVector_MT {
private:
  Lock lock_;
  MyVector&lt;T&gt; vec_;
public:
  ...
size_t index(const T&amp;) const;
void sort();
};

(d)
template &lt;class T, class Lock&gt; void MyVector_MT::sort()
{
  lock_.lock();     // Acquire lock
  vec_.sort();      // Call non MT-hot algorithm
  lock_.unlock();   // Release lock
}
</pre>

<a name="0277_00cf"><a name="0277_00cf"><B>Table 1:</B> STL data structures.
<pre>
<b>
Data         Description
Structure</b>
vector       Linear sequence.
list         Doubly linked list.
deque        Linear sequence, with constant time prepend and append.
set          Associative array of unique keys.
multiset     Associative array of (possibly) nonunique keys.
map          Associative array of unique keys and associated values.
multimap     Associative array of (possibly) nonunique keys and values.</pre><P>

<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
