<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>SP95: Programming HotJava Applets</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Programming HotJava Applets<a name="02f7_00e6"><a name="02f7_00e4"><a name="02f7_0000"></h1><P>
<h2>Executable content becomes a reality</h2><P>
<h3>John Rodley</h3><P>
<p><i><a name="02f7_00e5"><a name="02f7_0000">John is an independent consultant. You can reach him at john.rodley@channel1.com or visit his home page at http://www.channel1.com/users/ajrodley.</i></p><hr><P>
From HTML 2.0 to Netscape extensions to VRML, a slew of new technologies have popped up that promise to flesh out a Web that is still more flash than cash. Among these new developments, none is more eagerly anticipated than executable content--Web content that actually executes  on the local computer. Java, a programming language from Sun Microsystems, makes executable content a reality. <P>
HTML is essentially a &quot;flat&quot; technology--static text with hyperlinks to other lumps of static text. Current Web browsers take a stream of static text and display it on screen. The only logic embedded in HTML text consists of text formatting and image/sound file-loading commands. The combination of the HotJava browser and the Java programming language changes all of this. <P>
<h3><a name="02f7_00e7">HotJava is Not Java<a name="02f7_00e7"></h3><P>
A Java program (myprogram.java, for example) is compiled into bytecodes that are interpreted at run time by the Java interpreter. HotJava, a Web browser written in the Java language, supports &lt;APP&gt;, a new HTML tag that allows you to load an applet located at an arbitrary URL and run it locally. With appropriate limitations, this applet has broad access to the resources of the local machine--screen (via the browser window), mouse, keyboard, sound, and network cards. Applets are written in Java and compiled into Java bytecodes. You could write a stand-alone application in Java without involving the Web or HotJava in any way. In short, as Tim Lindholm of Sun said, HotJava is just a novel way of delivering Java applications. For more information on Java, see &quot;Java and Internet Programming,&quot; by Arthur van Hoff (<I>DDJ</I>, August 1995); &quot;Net Gets a Java Buzz,&quot; by Ray Vald&eacute;s (<I>Dr. Dobb's Developer Update</I>, August 1995); and &quot;Programming Paradigms,&quot; by Michael Swaine (<I>DDJ</I>, October 1995).<P>
Java's raison d'etre is architecture neutrality. The language itself contains no platform dependencies. All types have a fixed size (8/16/32/64 bytes) that may or may not correspond to the norm on whatever platform you're running. But you pay a price for that neutrality. Java and its packages attempt to supply all the mechanisms of the native GUI APIs for systems such as X, Macintosh OS, and Windows through a common syntax. That search for common ground sometimes means throwing out features (the middle and right mouse buttons, for example) not supported on all platforms. Thus, the key to Java's eventual usefulness for developers is not so much its level of functionality (which will always lag behind that of native GUIs), but how many platforms it runs on. <P>
<h3><a name="02f7_00e8">The Application<a name="02f7_00e8"></h3><P>
Java makes it possible to quickly write big, portable, robust, graphical, network apps. To illustrate what you can do with Java, I've developed a WAN-based, multiuser game called &quot;Battle of the Java Sea,&quot; a variant of the old board game &quot;Battleship.&quot; Players on a 40x40 grid fire at each other, scoring points for hits on other players and losing points for being hit.<P>
Battle of the Java Sea contains three parts: <P>
<UL>
<li>The HTML source, which merely provides entry to the applet via the &lt;APP ...&gt; tag. </li>
<li>The Java applet, which provides the interface to the game and most of its logic. </li>
<li>The game-server daemon, which is a C++ program that runs on a remote host. </li>
</UL>
<a href="199502f9.htm">Figure 1</A> shows where the various pieces of the application run. <a href="#02f7_00f0">Listing One</A> shows the HTML code for the page on which the applet appears. The applet is placed in-line where the &lt;APP ...&gt; tag appears. The applet sizes itself within the <I>init </I>method, and all the HTML code following the applet appears below the applet. If the applet fails to load, a placeholder appears where the applet would have been. The HotJava frame, title bar, menu bar, URL edit field, vertical scroll bar, and navigation buttons remain on the screen. The applet scrolls seamlessly with the HTML text. You can place as many applets as you want on the page. Our HTML page has the game applet and another applet for displaying the high scores.<P>
<h3><a name="02f7_00e9">Code Organization<a name="02f7_00e9"></h3><P>
To provide a manageable namespace, Java lumps classes into packages. In the Java source, you can import a package or a single class within a package. The compiler identifies classes as <I>mypackage.myclass. </I>My application defines a new package, <I>Ship</I>, and four classes within it: <I>GameSrv</I>, <I>Ship</I>, <I>Explosion</I>, and <I>PortThread</I>. There is still considerable debate as to the proper use of package and class names, given the distributed nature of the Java/HotJava developer community. The most sensible suggestion I've seen is to incorporate the company and project name into the package name, leaving classes unique on a per-project basis.<P>
For the most part, my program uses only three of the packages delivered with HotJava: <I>awt</I>, <I>browser</I>, and <I>net</I>. <I>awt </I>encompasses all the graphics and drawing functionality, <I>browser </I>contains the applet wrapper class that our applet subclasses, and <I>net </I>implements the socket class that provides our connection to the game server.<P>
<h3><a name="02f7_00ea">Taking Out the Garbage<a name="02f7_00ea"></h3><P>
C/C++ programmers used to chasing down and trying to prevent memory leaks will enjoy Java's automatic garbage collection. In this program, you'll see plenty of <I>new</I>s, but no <I>delete</I>s. There's no need to call the garbage collector in your program, because it runs automatically in a separate thread.<P>
<h3><a name="02f7_00eb">Arrays<a name="02f7_00eb"></h3><P>
Java requires a novel syntax when declaring arrays. <a href="#02f7_00f2">Listing Two</A> shows the declaration of the array of <I>Explosion</I>s. The class variable <I>xp</I> is declared as an array of <I>Explosion</I> objects with no dimension. <I>xp</I> exists as a symbol with a type, but its actual <I>Explosion</I> objects are not instantiated until the <I>new</I> statement in the body of the <I>init</I> method. No memory is allocated for an array until it is created with <I>new</I>. In the Java hierarchy, arrays are objects, not simple types, and thus embody more intelligence than C/C++ arrays. All array references are bounds checked, and the <I>length</I> variable gives the size of the array.<P>
Arrays bring up another key feature of Java: <I>Exception</I>s. The Java language package (java.lang) defines a few dozen <I>Exception</I>s which have default behaviors and can be caught and thrown as necessary. Bad array references throw an <I>ArrayIndexOutOfBoundException</I>, and bad arguments to the Integer constructor throw a <I>NumberFormatException</I>. You'd do well to understand <I>Exception</I>s before proceeding with Java coding. I went to considerable trouble in the message-parsing routines (PortThread.java) to avoid throwing a <I>NumberFormatException</I>. A better approach would have been to catch the <I>Exception</I> and deal with the problem then.<P>
<h3><a name="02f7_00ec">Interfaces<a name="02f7_00ec"></h3><P>
In Java, interfaces allow you to define a type of object without subclassing. <a href="#02f7_00f4">Listing Three</A> shows the <I>PortThread</I> class, an implementation of the <I>Runnable </I>interface. Unlike a subclass, which attaches all the baggage of the superclass (class variables, un-overridden methods, and so on), an interface only requires the implementation to supply the methods specified by the interface. Unlike classes, interfaces can be multiply inherited. Often the interface system is a much more natural solution. For instance, for debugging purposes, I'd like to read a stream of game-server messages from a file, rather than opening a network socket. In that case, I'd define two new classes, <I>FileStream</I> and <I>SocketStream</I>, and one new interface, <I>MyStream</I>, which would define four methods: <I>open</I>, <I>read</I>, <I>write</I>, and <I>close</I>. <I>FileStream</I> and <I>SocketStream</I> would implement both <I>Runnable </I>(to get their own thread) and <I>MyStream</I>.<P>
The application starts with the <I>GameSrv</I> class which subclasses <I>Applet </I>and implements the <I>Runnable </I>interface. Subclassing <I>Applet </I>allows <I>GameSrv</I> to be loaded as an applet by HotJava. <I>GameSrv</I>'s implementation of the <I>Runnable </I>interface's <I>run</I> method and <I>Thread</I> classes' <I>start</I> and <I>stop</I> methods allow <I>GameSrv </I> to run in its own thread. The thread is actually created by allocating a <I>Thread</I> object and passing this as the sole parameter. Then, we can do whatever we want in the <I>run</I> method, in this case repainting the applet window at 100-ms intervals to reflect the changing game state.<P>
<I>GameSrv</I> overrides four <I>Applet </I>methods: <I>mouseUp</I>, <I>mouseMove</I>, <I>keyDown</I>, and <I>update</I>. Of these, the most interesting is <I>update</I> (along with <I>repaint</I>), familiar to Windows coders as the WM_PAINT case in your message-processing switch. As with any GUI app, most of the detail work goes into the <I>paint</I> routine. Applets can override either <I>paint</I> or <I>update</I> to do their painting. If you choose <I>paint</I>, the window is cleared before <I>paint</I> gets called. That was no good for my application, as it gave the window an annoying, flickering appearance. <I>update</I>, on the other hand, leaves all window management up to the programmer, so each time a ship is moved, we have to erase the old ship, and each time a status string is changed, we have to erase the old one. <a href="#02f7_00f6">Listing Four</A> shows the <I>update</I> method and one of the <I>paint</I> methods it calls.<P>
The thorniest problem in implementing the <I>update </I>method was a by-product of Java's inherent multithreadedness. In Windows 3.1 SDK programming, you can process your WM_PAINT message without worrying that globals or statics outside the paint routine will change unexpectedly. Not so in a multithreaded environment. <P>
The <I>paintShip</I> method needs to erase the old ship and draw the new ship. This requires three steps: erasing the current ship, painting the new ship, and saving the new ship's coordinates as the current ship's. <a href="#02f7_00f8">Listing Five</A> shows the original <I>update</I> method. The <I>keyDown</I> method changes the ship's coordinates by calling <I>Move</I>. The bug in this is that during the X method invocations between <I>clearRect</I>, which erases the current ship, and the call to <I>Ship.setLastLoc</I>, the <I>keyDown</I> method can be invoked, setting <I>LastXLoc</I> and <I>LastYLoc</I> to values other than those at which that ship is currently painted. This occurs because <I>update</I> and <I>keyDown</I> can be called from separate threads. <a href="199502fa.htm">Figure 2</A> illustrates the problem.<P>
Veteran painters will also notice that <I>update </I>contains an important cheat--it doesn't repaint the background. Were we to use an image background or a color other than the default browser background, we'd have to clear all the background sections of the window. As it is, we get a good visual effect for very little code.<P>
The <I>Applet </I>class provides <I>start</I> and <I>stop</I> methods that are called whenever the applet becomes visible or invisible. Though this version of the game doesn't use them, future versions will skip repainting and stop all network communications when the applet is invisible, to minimize CPU load and network traffic.<P>
The <I>PortThread</I> class, which reads input from the game server, uses the <I>run</I> method a little differently. Given an IP address and port number, the <I>run</I> method creates an instance of a socket and sits in a loop doing blocking reads of the socket's <I>inputStream</I> member. <I>PortThread</I> also illustrates that a Java application doesn't exit until all nondaemon threads are killed. The <I>PortThread</I> thread calls <I>setDaemon</I> so that the app can exit without explicitly killing the <I>PortThread</I>. <a href="#02f7_00f2">Listing Two</A> shows the <I>PortThread</I> use of the <I>Runnable </I>interface.<P>
The fixed-message-size, fixed-field-length message protocol I started with was surprisingly painful to implement, mostly due to the difficulty of creating the necessary Java object from an array of bytes. I chose that message style because I've implemented it a hundred times in C. Having done it once in Java, I'll never do it again. There are no pointers in Java and you can't cast between different types, including <I>char</I> (16-bit Unicode) and <I>byte</I> (8 bit). Whereas in C I'd have written a couple of <I>memmove</I>s (with appropriate casts), in Java I had to create various objects from copied sections of the array. The next version will undoubtedly go with a variable-message-length, variable-field-length, character-delimited protocol. This will complicate the socket-reading routine a little, but will allow me to use the supplied <I>StringTokenizer</I> class to parse the message. <P>
For someone who's built GUI apps with Java before, one of the greatest temptations is to just go wild--creating windows left and right, changing the menu bar, and so on--but you're often limited by the visibility (or lack thereof) of variables. For instance, to change the menu bar, you need access to <I>mbar </I>in <I>browser .hotjava. </I>Access to such components is an architectural issue within HotJava that is not really settled yet.<P>
<h3><a name="02f7_00ed">Debugging<a name="02f7_00ed"></h3><P>
Since there's no Java debugger yet, debugging Java code is problematic--you're left with the tried and true &quot;print to standard out&quot; style. Java encapsulates some of the common system functions in a <I>System</I> object, so a module under development will be sprinkled with <I>System.out.println() </I>calls.<P>
<h3><a name="02f7_00ee">Conclusion<a name="02f7_00ee"></h3><P>
In general, the Java-language documentation is very good. The class documentation, on the other hand, is very frustrating. I often followed a package-class-method documentation trail that left me at a page that contained only the method's name. You really have to follow the mailing lists (including the archives and the soon-to-be-created HotJava newsgroup) to get the most out of the Java/HotJava class packages. That said, for anyone who's spent time writing C++ code for the current crop of GUIs, awt's classes will seem like a very intuitive and straightforward abstraction of the native GUI capabilities.<P>
I built Ship using HotJava Alpha 2 running under Windows NT 3.51. While Java itself is relatively stable and well mannered, HotJava and the <I>awt </I>package are still moving targets. There is already an Alpha 3 running under Sun Solaris, and ports to Windows 95 and the Macintosh should be available as you read this. If you have HotJava, you can run Battle of the Java Sea by checking into http://www.channel1.com/users/ajrodley.<P>
Special thanks to Dennis Foley for his help with this article.<P>
<pre><B><a href="199502fb.htm">Figure 1</A>:</B>The various pieces of a Java application and where they run.
<B><a href="199502fc.htm">Figure 2</A>:</B> Calling update and keyDown from separate threads could cause an error.</pre><P>
<P>
<h4><a name="02f7_00ef"><a name="02f7_00f0">Listing One <a name="02f7_00f0"></h4><pre>
&lt;!doctype html public &quot;-//IETF//DTD HTML//EN&quot;&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Battleship&lt;/TITLE&gt;
&lt;META NAME=&quot;GENERATOR&quot; CONTENT=&quot;Internet Assistant for Word 1.0Z&quot;&gt;
&lt;META NAME=&quot;AUTHOR&quot; CONTENT=&quot;John Rodley&quot;&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Battleship&lt;/H1&gt;
&lt;P&gt;
Naval free-for-all.  You're the green square, everyone else is
red.  Place the mouse over your opponent and hit &amp;lt;space&amp;gt;
to fire.&lt;HR&gt;
&lt;P&gt;
&lt;APP class=&quot;GameSrv&quot;&gt; &lt;HR&gt;
&lt;ADDRESS&gt;
&lt;APP class = &quot;Scores&quot;&gt;
&lt;/ADDRESS&gt;
&lt;HR&gt;
&lt;P&gt;
Click  &lt;A HREF=&quot;GameSrv.java&quot;&gt;here&lt;/A&gt; to see the Battleship Java applet source.
&lt;P&gt;
Click  &lt;A HREF=&quot;Scores.java&quot;&gt;here&lt;/A&gt; to see the Scoring applet source.
&lt;P&gt;
Click  &lt;A HREF=&quot;socket.c&quot;&gt;here&lt;/A&gt; to see the game server C source.&lt;HR&gt;
&lt;ADDRESS&gt;
&lt;A href=&quot;http://www.channel1.com/ajrodley&quot;&gt;&lt;IMG SRC=&quot;images/jvr.gif&quot;&gt;&lt;/A&gt;
John Rodley - john.rodley@channel1.com 
&lt;/ADDRESS&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
<a name="02f7_00f2">
<h4><a name="02f7_00f1"><a name="02f7_00f2">Listing Two</h4><pre>
public class GameSrv extends Applet implements Runnable {
    ...
Explosion xp[] = new Explosion[0];
    ...
public void init() {
    ...
    Explosion axp[] = new Explosion[StartAmmo];
    xp = axp;
    for( i = 0; i &lt; StartAmmo; i++ )
        xp[i] = new Explosion();
    ...
</pre>
 <a name="02f7_00f4">
<h4><a name="02f7_00f3"><a name="02f7_00f4">Listing Three</h4><pre>
package ship;
import awt.*;
import java.util.*;
import java.io.*;
import net.*;
import browser.*;
import browser.audio.*;
import ship.*;
// PortThread class - implements a socket reading daemon thread class 
public class PortThread extends Thread {
public Socket s;    // Our connection to the server
GameSrv g;      // The game server that created us
public String MyID;
public final String ServerID = new String( &quot;0001&quot; );
// The maximum number of messages we can read at one time.
int maxMessages = 100;
// The fixed size of the messagr
int messagesize = 25;
public PortThread( GameSrv game ) {
    // ID gets set to 0000 initially, then game server sets it to &gt; 1 
    MyID = new String( &quot;0000&quot; );
    // Save this so that we can do callbacks to our game
    g = game;
    // Turn this into a daemon thread so that the program 
    // doesn't hang on exit waiting for this thread to terminate
    setDaemon( true );
    }
public void run() {
    s = new Socket( &quot;0.0.0.0&quot;, 1099 );
    sendStart( g.Mine.getXLoc(), g.Mine.getYLoc());
    int ret = 0;
    byte buffer[] = new byte[maxMessages*messagesize];
    while( ret != -1 )
        {
        ret = s.inputStream.read( buffer );
        if( ret &gt; 0 )
            {
            parse( buffer, ret );
            }
        }
    }
// sendStart - this is the message we send to the server to tell him we're
// here.  The server responds with the ID__ message that tells us what
// ID we need to prepend to all our send messages
public void sendStart( int x, int y ) {
    String Xm = new String( &quot;00&quot; + x );
    System.out.println( &quot;Xm = &quot; + Xm );
    String Ym = new String( &quot;00&quot; + y );
    System.out.println( &quot;Ym = &quot; + Ym );
    int xStart = Xm.length() - 3;
    int yStart = Ym.length() - 3;
    System.out.println( &quot;xStart = &quot; + xStart + &quot; yStart = &quot; + yStart );
    String Msg = new String( MyID + &quot;:&quot; + &quot;NEW_:&quot; + &quot;+&quot; +
        Xm.substring(xStart) + &quot;,&quot; + &quot;+&quot; + 
                Ym.substring( yStart ) + &quot;:    &quot; );
    System.out.println( &quot;Msg = &quot; + Msg );
    byte msg[] = new byte[messagesize];
    Msg.getBytes( 0, messagesize-1, msg, 0 );
    msg[messagesize-1] = 0;
    s.outputStream.write( msg );
    }
// sendMove - tell the game server that we moved x byte right and y bytes up
public void sendMove( int x, int y ) {
    byte msg[] = new byte[messagesize];
    msg[messagesize-1] = 0;
    String Xm = new String( &quot;00&quot; + x );
    String Ym = new String( &quot;00&quot; + y );
    int xStart = Xm.length() - 3;
    int yStart = Ym.length() - 3;
    String Msg = new String( MyID + &quot;:&quot; + &quot;MOVE:&quot; + &quot;+&quot; + 
                     Xm.substring(xStart) + &quot;,&quot; + &quot;+&quot; + 
                     Ym.substring( yStart ) + &quot;:    &quot; );
    Msg.getBytes( 0, messagesize-1, msg, 0 );
    s.outputStream.write( msg );
    }
// sendShot - We took a shot, tell the game server
public void sendShot( int x, int y ) {
    byte msg[] = new byte[messagesize];
    msg[messagesize-1] = 0;
    String Xm = new String( &quot;00&quot; + x );
    String Ym = new String( &quot;00&quot; + y );
    int xStart = Xm.length() - 3;
    int yStart = Ym.length() - 3;
    String Msg = new String( MyID + &quot;:&quot; + &quot;FIRE:&quot; + &quot;+&quot; + 
                     Xm.substring( xStart ) + &quot;,&quot; + &quot;+&quot; + 
                     Ym.substring(yStart ) + &quot;:    &quot; );
    Msg.getBytes( 0, messagesize-1, msg, 0 );
    s.outputStream.write( msg );
    }
// sendHitBy - tell the game server that we got hit by a shot
public void sendHitBy( int x, int y, String whoGotMe ) {
    byte msg[] = new byte[messagesize];
    msg[messagesize-1] = 0;
    String Xm = new String( &quot;00&quot; + x );
    String Ym = new String( &quot;00&quot; + y );
    int xStart = Xm.length() - 3;
    int yStart = Ym.length() - 3;
    String Msg = new String( MyID + &quot;:&quot; + &quot;HIT_:&quot; + &quot;+&quot; + 
                     Xm.substring( xStart ) + &quot;,&quot; + &quot;+&quot; + 
                     Ym.substring( yStart) + &quot;:&quot; + whoGotMe );
    Msg.getBytes( 0, messagesize-1, msg, 0 );
    s.outputStream.write( msg );
}
// parse -  message format is:
//  ID    4 bytes - a string representing integer id of sender 0000 to 9999
//          :   1 byte  b[4]
//  type        4 bytes - either MOVE or FIRE NEW_ or ID______LINEEND____
//  colon       :   1 byte  b[9]
//          +/- 1 byte  b[10]
//  XCoord      3 bytes - 0 padded ASCII number 00 through 99
//  coma        ,   1 byte  b[14]
//          +/- 1 byte  b[15]
//  YCoord      3 bytes - 0 padded
//  terminator  0   1 byte  b[19]
//  Example:
//      MOVE:+01,+00
//      says to move enemy 1 in the x direction
// for now, this is a lossy protocol - if we get out of sync we throw
// out all data until we resync.  We can afford to lose the MOVE messages,
// but losing a FIRE message that would have hit us is bad news.  Oh
// well, Fog of War and all that ...
public void parse( byte b[], int numbytes ) {
    Integer modifier;
    for( int i = 0; (i+5) &lt; numbytes; i++ )
        {
        if( i+messagesize &gt; numbytes )
            {
            System.out.println(&quot;sync error - numbytes &quot;+numbytes );
            break;
            }
        switch( b[i+5] )
            {
            case 'N':   // this is a NEW_ message
            case 'M':   // this is a MOVE message
            case 'F':   // this is a FIRE message
                int ret = parsePositionMessage(b, i, numbytes);
                i += ret;
                break;
            case 'I':       // This is the ID__ message
                {
                boolean bBadNum = false;
    
                char msg[] = new char[messagesize+1];
                for( int j = 0; j &lt; messagesize &amp;&amp; 
                                                   ((i+j) &lt; messagesize); j++ )
                    msg[j] = (char )b[i+j];
                msg[messagesize] = 0;
                String s = new String( msg );
                System.out.println( s );
                char imsg[] = new char[4];
                // If data errors go through to the point of
                // trying to initialize a java.Integer with 
                                // non-integer data, then we'll throw an
                // exception which kills the 
                                // thread--so catch them here
                imsg[0] = (char )msg[0];
                imsg[1] = (char )msg[1];
                imsg[2] = (char )msg[2];
                imsg[3] = (char )msg[3];
                for( int k = 0; k &lt; 4; k++ )
                    if( imsg[k] &lt; '0' || imsg[k] &gt; '9' )
                        bBadNum = true;
                if( !bBadNum )
                    {
                    MyID = new String( imsg );
                    System.out.println(&quot;ID set to &quot;+ MyID);
                    }
                else
                System.out.println( &quot;Bad ID message&quot; );
                }
                break;
            default:
                System.out.println( &quot;bad message: &quot; );
                break;
            }
        }
    }
// parsePositionMessage - all messages are position messages except ID message
public int parsePositionMessage( byte b[], int i, int numbytes ) {
    Integer modifier;
    char msg[] = new char[messagesize+1];
    for( int j = 0; j &lt; messagesize &amp;&amp; ((i+j) &lt; messagesize); j++ )
        msg[j] = (char )b[i+j];
    msg[messagesize] = 0;
    String s = new String( msg );
    System.out.println( s );
    char xmsg[] = new char[3];
    if( msg[10] == '+' )
        modifier = new Integer( 1 );
    else
        modifier = new Integer( -1 );
    // If we let data errors go through to the point of
    // trying to initialize a java.Integer with non-integer data then we'll
    // throw an exception which kills the thread, so catch them here
    xmsg[0] = (char )msg[11];
    xmsg[1] = (char )msg[12];
    xmsg[2] = (char )msg[13];
    if( xmsg[0] &lt; '0' || xmsg[0] &gt; '9' )
        {
        System.out.println( &quot;data error &quot; + xmsg[0] );
        return( 1 );
        }
    if( xmsg[1] &lt; '0' || xmsg[1] &gt; '9' )
        {
        System.out.println( &quot;data error &quot; + xmsg[1] );
        return( 1 );
        }
    if( xmsg[2] &lt; '0' || xmsg[2] &gt; '9' )
        {
        System.out.println( &quot;data error &quot; + xmsg[2] );
        return( 1 );
        }
    String xstr = new String(xmsg);
    System.out.println( &quot;X = &quot; + xstr );
    Integer xMove = new Integer( xstr );
    xMove = new Integer( xMove.intValue() * modifier.intValue());
    char ymsg[] = new char[3];
    if( msg[10] == '+' )
        modifier = new Integer( 1 );
    else
        modifier = new Integer( -1 );
    ymsg[0] = (char )msg[16];
    ymsg[1] = (char )msg[17];
    ymsg[2] = (char )msg[18];
    if( ymsg[0] &lt; '0' || ymsg[0] &gt; '9' )
        return( 1 );
    if( ymsg[1] &lt; '0' || ymsg[1] &gt; '9' )
        return( 1 );
    if( ymsg[2] &lt; '0' || ymsg[2] &gt; '9' )
        return( 1 );
    String ystr= new String(ymsg);
    System.out.println( &quot;Y = &quot; + ystr );
    if( msg[15] == '+' )
        modifier = new Integer( 1 );
    else
        modifier = new Integer( -1 );
    Integer yMove = new Integer( ystr );
    yMove = new Integer( yMove.intValue() * modifier.intValue());
    if( b[i+5] == 'M' )
        g.moveTheirs( xMove.intValue(), yMove.intValue());
    if( b[i+5] == 'F' )
        {
        char id[] = new char[4];
        for( int j = 0; j &lt; 4; j++ )
            id[j] = b[i+j];
        String FromID = new String( id );
        g.shotByLandedAt(FromID, xMove.intValue(),yMove.intValue());
        }
    if( b[i+5] == 'N' )
        g.newEnemy( xMove.intValue(),yMove.intValue());
    return( messagesize-1 );
    }
}
</pre>
<h4><a name="02f7_00f5"><a name="02f7_00f6">Listing Four<a name="02f7_00f6"></h4><pre>
    /**
    * Paint it.
     */
    public void update(Graphics g) {
    if( bGameGoing == true )
        {
        paintBorder( g );
        paintShip( g, Theirs );
        paintShip( g, Mine );
        paintExplosions( g, txp );
        paintExplosions( g, xp );
        paintStatusStrings( g );
        }
    }
public void paintShip( Graphics g, Ship s ) {
    Image shipImage;
    Color MyColor = new Color( g.wServer, 0, 255, 0 );
    Color TheirColor = new Color( g.wServer, 255, 0, 0 );
// Do everything having to do with position.  We have to get loc and
// lastloc and reset lastloc right here together because we can get a
// keypress (which changes ship.loc) while this function is executing
// which will cause orphan/ghost ships to remain on the screen. 
// Theoretically, we could still get a keypress amongst those four calls
// that would screw things up, but the chances are dramatically reduced.
    int xLoc = s.getXLoc();
    int yLoc = s.getYLoc();
    int LastXLoc = s.getLastXLoc();
    int LastYLoc = s.getLastYLoc();
    s.setLastLoc();
    g.clearRect(leftMargin + (LastXLoc*GridSize)-(ImageSize-GridSize)/2,
                       topMargin+(LastYLoc*GridSize)-(ImageSize-GridSize)/2, 
                       ImageSize,ImageSize);
    if( s == Mine )
        {
        g.setForeground( MyColor );
        shipImage = shipImages[Mine.direction];
        }
    else
        {
        g.setForeground( TheirColor );
        shipImage = shipImages[Theirs.direction];
        }
    g.drawImage( shipImage,leftMargin +(xLoc*GridSize)-
                   (ImageSize-GridSize)/2,topMargin+(yLoc*GridSize)-
                   (ImageSize-GridSize)/2 );
    if( s == Mine )
        {
        g.setForeground( MyColor );
        int sw = g.drawStringWidth( &quot;Position: &quot;, leftMargin + width +
                         GridSize+scoreMargin, topMargin+(height*6)/6);
        if( LastXLoc != xLoc || LastYLoc != yLoc )
    else
        {
        g.setForeground( TheirColor );
        shipImage = shipImages[Theirs.direction];
        }
    g.drawImage( shipImage,leftMargin +(xLoc*GridSize)-
                   (ImageSize-GridSize)/2,topMargin+(yLoc*GridSize)-
                   (ImageSize-GridSize)/2 );
    if( s == Mine )
        {
        g.setForeground( MyColor );
        int sw = g.drawStringWidth( &quot;Position: &quot; , leftMargin + 
                         width+GridSize+scoreMargin, topMargin+(height*6)/6);
        if( LastXLoc != xLoc || LastYLoc != yLoc )
            g.clearRect( leftMargin + width+GridSize+scoreMargin+
                                sw, topMargin+((height*6)/6)-statusHeight, 
                                statusWidth-sw-scoreMargin, statusHeight );
        g.drawStringWidth( &quot;&quot; + xLoc + &quot;:&quot; + yLoc,leftMargin +
            width+GridSize+scoreMargin+sw,topMargin+(height*6)/6);
        }
}
</pre>
<h4><a name="02f7_00f7"><a name="02f7_00f8">Listing Five<a name="02f7_00f8"></h4><pre>
    /** Paint it.***/
    public void update(Graphics g) {
    if( bGameGoing == true )
        {
        paintBorder( g );
        paintShip( g, Theirs );
        paintShip( g, Mine );
        paintExplosions( g, txp );
        paintExplosions( g, xp );
        paintStatusStrings( g );
        }
    }
public void paintShip( Graphics g, Ship s ) {
    Image shipImage;
    Color MyColor = new Color( g.wServer, 0, 255, 0 );
    Color TheirColor = new Color( g.wServer, 255, 0, 0 );
    int xLoc = s.getXLoc();
    int yLoc = s.getYLoc();
    int LastXLoc = s.getLastXLoc();
    int LastYLoc = s.getLastYLoc();
    g.clearRect(leftMargin + (LastXLoc*GridSize)-(ImageSize-GridSize)/2,
                   topMargin+(LastYLoc*GridSize)-(ImageSize-GridSize)/2, 
                   ImageSize,ImageSize);
    if( s == Mine )
        {
        g.setForeground( MyColor );
        shipImage = shipImages[Mine.direction];
        }
    else
        {
        g.setForeground( TheirColor );
        shipImage = shipImages[Theirs.direction];
        }
    g.drawImage( shipImage,leftMargin +(xLoc*GridSize)-
                       (ImageSize-GridSize)/2,topMargin+(yLoc*GridSize)-
                       (ImageSize-GridSize)/2);
    ...
    s.setLastLoc();
}
</pre>



<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
