<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>SP95: Client/Server Development and the World Wide Web</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Client/Server Development and the World Wide Web<a name="0319_00ee"><a name="0319_00ec"><a name="0319_0000"></h1><P>
<h2>Writing interactive programs for the Web</h2><P>
<h3>Jim Lawless</h3><P>
<p><i><a name="0319_00ed"><a name="0319_0000">Jim is a lead programmer/analyst for a financial institution, and specializes in Windows software development. He teaches C and Visual Basic, and can be contacted at 74217.531@compuserve.com.</i></p><hr><P>
The World Wide Web is a collection of documents and programs spread across a multitude of computers connected to the Internet. Web documents on one computer can cross-reference Web documents on any other computer on the Web. These documents are constructed in HyperText Markup Language (HTML). Embedded in each document are special indicators called &quot;tags&quot; that direct the Web browser or server to perform a special action. In addition to documents, HTML contains tags that allow the browser to gather data on formatted, GUI input screens (&quot;forms&quot;).<P>
The location of each document or program is specified by a Uniform Resource Locator (URL), a construct that determines the server on which the documents reside. To include a link to another document in a Web page, you simply build the appropriate URL reference coupled with the appropriate HTML anchor tags in the text.<P>
A URL reference to a program causes the server to activate the program and route the console output to the browser client. The output must be specially formatted to include the Multipurpose Internet Mail Extensions (MIME) type. If your program is sending an HTML document to the client, the first line that the client usually sees consists of <I>Content-Type: text/html,</I> followed by a blank line to indicate that no further MIME information will follow. The Content-Type description is enough to indicate that an HTML script will follow in the data stream.<P>
<h3><a name="0319_00ef">Designing a Game for the Web<a name="0319_00ef"></h3><P>
To add some fun to my Web home page, I recently wrote a trivia game that's typical of interactive client/server Web applications. You can find it at http://www.gonix.com/cjbr/wtriv.html. I wanted to keep the game simple. Consequently, it's designed to do the following: <P>
<OL>
<LI>Ask the user a question.</LI>
<LI>Get the answer.</LI>
<LI>If the user wants to quit, stop the game.</LI>
<LI>Issue a message to the user indicating whether or not an answer is correct.</LI>
<LI>If the user answers all questions, stop the game.</LI>
<LI>Otherwise, repeat the process.</LI>
</OL>
What could be simpler, right? While this concept is easily implemented in familiar programming environments, the Web introduces a new dimension. On the Web, the game actually runs on an external machine. The local computer simply runs a Web browser that provides a graphical interface to the game server.<P>
Due to the client/server nature of Web interaction, each of these steps would need to be broken down into a completely autonomous process, which would come to life on the server and terminate immediately after performing its specific function.<P>
As I worked on my page, the roles of the client browser program and the server program became more evident. The server delivers HTML files and graphics files to the browser, which displays them. When the user activates a URL anchor, the browser requests a connection to another document (possibly on another server). The browser is doing a lot of work and does not try to contact the server until the user requests a document change or similar action.<P>
Between each of the steps outlined in the rough pseudocode, the browser temporarily stops talking to the server. Each time it contacts the server to invoke the program, the program must be able to invoke any of the outlined processes separately. Thus, I would have to pass information to the server each time the trivia program was to be invoked so that the appropriate function would be executed. The server program would function using finite-state machine logic, controlled by state variables received from the client.<P>
<h3><a name="0319_00f0">Building Input and Response Forms<a name="0319_00f0"></h3><P>
To understand exactly what states my game would be required to handle, I first composed my game's input and response forms. The first form asks the client a question; see <a href="1995031b.htm">Figure 1</A>. The second form indicates the correctness of the user's choice (<a href="1995031c.htm">Figure 2</A>). The final form smoothly navigates the user back to the Web page after either the questions have been exhausted or the user chooses to exit the game; see <a href="1995031d.htm">Figure 3</A>.<P>
<a href="1995031e.htm">Figure 1</A>, the question form, contains the following HTML elements:<P>
<OL>
<LI>A heading and title. This is created by enclosing text within the &lt;HEAD&gt; &lt;TITLE&gt; and &lt;/TITLE&gt;&lt;/HEAD&gt; tags.</LI>
<LI>A secondary heading in &quot;strong&quot; heading type number two. The text is enclosed within the &lt;H2&gt;&lt;STRONG&gt; and &lt;/STRONG&gt;&lt;/H2&gt; tags.</LI>
<LI>A form definition beginning with the  &lt;FORM ACTION=&quot;/cgi-bin/webtriv&quot;&gt; tag. This indicates that the form is to run the program &quot;webtriv&quot; from a special area on the server.</LI>
<LI>Text for the question and all three choices.</LI>
<LI>Three radio buttons to select an answer.</LI>
<LI>One radio button to indicate that the user is done playing.</LI>
<LI>A push button to trigger the form's action.</LI>
</OL>
The ACTION portion of the form tag refers to a Common Gateway Interface (CGI) script--a special file on the server that is either a binary executable application or a script that can be interpreted by language interpreters such as Perl. The server must be able to distinguish a CGI script from an ordinary document. Otherwise, the server would simply transmit the contents of the CGI script file to the client.<P>
When the server recognizes that the CGI script is an executable file, it invokes the script and routes the output to the client. Using this mechanism, a program can dynamically construct HTML scripts and return them to the client.<P>
<h3><a name="0319_00f1">Writing the Game<a name="0319_00f1"></h3><P>
Many options exist for developing CGI scripts. Although many CGI programs are constructed in Perl, I chose C (K&amp;R style) because it is the language I'm most familiar with, and I wanted to ensure that my game program was extremely efficient.<P>
As <a href="#0319_00f4">Listing One</A> illustrates, I saved time by storing my questions as an array internal to the program. To create a second trivia game, you would have to change the array elements and the control variable <I>_maxq</I> that defines the maximum number of questions.<P>
I needed to generate a random number to determine the initial question. Rather than muck about with the random-number functions in the standard library, I simply called the <I>ctime()</I> function to generate a time/date string and used the number of seconds as a pseudorandom number.<P>
Establishing a random question order was easy. The only difficulty was that my trivia game would have to know which questions had been asked so that it did not repeat them.<P>
My first thought was to create a shared file on the server that would house information for each client to access; however, a client could quit at any time by exiting their browser without the server knowing. Using this technique, the shared file could grow enormously and would require regular manual cleaning by a special program to prune old information. The ideal methodology would be to keep the game-context information on the client's side.<P>
After poring over my HTML reference material, I discovered that HTML forms support a special kind of element called a &quot;hidden field.&quot; The purpose of this element type is to enable data to be stored on the client browser. I would simply have to encode my game-context information into a text format that could be stored in hidden-field elements.<P>
I used a simple bitmap to indicate the questions (by ordinal value) that had already been asked. I encoded this bitmap as a series of hexadecimal digits. Tools such as UUENCODE/UUDECODE use a larger alphabet to encode binary data (base-64), but if I'd used this, future revisions to the HTML specification might possibly invalidate characters that I would use to denote data. Simple hexadecimal notation would suffice. The function <I>encode_ flags()</I> uses <I>sprintf()</I> to encode a fixed-length series of bytes into a hexadecimal string. The complementary function <I>decode_flags()</I> uses <I>sscanf()</I> to translate the string of hexadecimal digits into a set of binary data. <P>
In addition to the bitmap of questions asked, I needed to track the number of questions asked and the number answered correctly. Again, I chose to use hidden HTML elements for this task. The <I>main()</I> function of the WEBTRIV.C file serves as a finite-state function processor.<P>
The first task that WEBTRIV performs is to analyze the current game context. The game context is delivered to the program during each invocation via the environment variable QUERY_STRING. The values for each form element are encoded into the single string, using the ampersand character to separate each element's string-data value. The function <I>parse_query_string()</I> utilizes the <I>strtok()</I> function to separate the input data and appropriately sets a series of global variables with the information.<P>
During the initial invocation of the game program, the QUERY_STRING environment variable is empty. This simply causes all internal data items to be left in their default empty state. The <I>main()</I> function then checks to see if the global flag <I>_mode</I> has the value of an uppercase letter &quot;A.&quot; If so, the user has answered the question, and the WEBTRIV needs to assess the validity of the answer and issue a form to the user via the function <I>process_answer()</I>. If the <I>_mode</I> flag was not an uppercase A, WEBTRIV checks to see if the global variable <I>_answer</I> has a value of 100. I used this magic number to indicate that users selected the No option on the form that indicates the correctness of their answer. Choosing No indicates that they no longer wish to continue playing. In this case, WEBTRIV invokes the <I>no_more()</I> function to terminate the game.<P>
If processing has not yet terminated, WEBTRIV issues a form asking a question. It then terminates. When the user transmits an answer, the whole process occurs again.<P>
The function <I>ask_question()</I> gets a pseudorandom question number that has not already been used. The function <I>new_num()</I> handles the chore of coming up with a unique pseudorandom number.<P>
Before attempting to derive a new number, <I>ask_question()</I> determines if all questions have been answered. If so, it displays the final form via the function <I>no_more()</I> and supplies a means of navigating back to a known Web page.<P>
If the pseudorandom number has not yet been used, <I>ask_question()</I> sets the appropriate bit in the bitmap and encodes the bitmap into a string of hexadecimal digits. The function <I>ask_question()</I> then builds a form based on the nature of the random question and sends it to the user. The function <I>process_answer()</I> processes the user's input and dynamically builds an HTML form indicating whether the user was correct. It then transmits this form to the user.<P>
If the user requests to terminate the game, <I>process_answer()</I> calls the function <I>no_more()</I> to terminate the game and return to the regular Web page.<P>
<h3><a name="0319_00f2">Conclusion<a name="0319_00f2"></h3><P>
Client browser programs will play an increasingly important role in future Web-oriented programs. Although I'd like to create my own programming-language translator that would abstract the finite-state nature of programming tasks similar to those mentioned, Web programming tools have already evolved that are superior to my unrealized utility.<P>
Programming systems such as Java (see &quot;Java and Internet Programming,&quot; by Arthur van Hoff, <I>DDJ</I>, August 1995 and &quot;Net Gets a Java Buzz,&quot; by Ray Vald&eacute;s, <I>Dr. Dobb's Developer Update</I>, August 1995) will allow the client to perform the bulk of the processing chores while the server distributes programs and data. This is the foundation upon which more complex programs will be created.<P>
As you have seen, even simple tasks from familiar environments can be a little more difficult to implement in a client/ server environment. However, after getting your feet wet, I'm certain you'll find that the effort isn't terribly painful.<P>
<pre><B><a href="1995031f.htm">Figure 1</A>:</B> Input form.
<B><a href="19950320.htm">Figure 2</A>:</B> Form that indicates the correctness of user's input.
<B><a href="19950321.htm">Figure 3</A>:</B> Form that takes the user back to the Web page at end of the game.</pre><P>
<P><P>

<h4><a name="0319_00f4"><a name="0319_00f3"><a name="0319_00f4">Listing One</h4><pre>
/* WEBTRIV.C
 * by Jim Lawless
 * cjbr@gonix.com
 * http://www.gonix.com/cjbr/wtriv.html
 * A simple trivia game for a World Wide Web page.
 */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;time.h&gt;
#include &lt;ctype.h&gt;
/* Information structure for array of questions */
struct info_t {
   /* Question */
   char *quest;
   /* Three possible answer strings */
   char *ans[3];
   /* Which answer is correct (1-based) */
   int  answer;
} ;
/* A populated question array */
struct info_t _info[]={
   /* 1 */
   {&quot;Who played Spock in Star Trek?&quot;,
   &quot;Leonard Nimoy&quot;,
   &quot;Lenny Bruce&quot;,
   &quot;Adam West&quot;,
   1},
   /* 2 */
   {&quot;Who invented the Forth language?&quot;,
   &quot;Niklaus Wirth&quot;,
   &quot;Bjarne Stroutstrup&quot;,
   &quot;Charles Moore&quot;,
   3},
   /* 3 */
   {&quot;Who is buried in Grant's tomb?&quot;,
   &quot;Lincoln&quot;,
   &quot;Grant&quot;,
   &quot;Washington&quot;,
   2},
} ;
/* Maximum number of questions */
int _maxq=3;
/* This array contains the bitmap information for questions asked. */
unsigned short _flags[5];     /* 80 bits */
/* Work string for bitmap functions */
char _flag_str[21];
/* The following globals will be populated with data from an HTML form. */
char _mode;
int  _answer;
int  _qnum;
int  _num_asked;
int  _num_correct;
/* Constants for bit-manipulation */
unsigned short pow[]={32768,16384,8192,4096,2048,1024,
                      512,256,128,64,32,16,8,4,2,1};
/* Environment variable used to retrieve form info */
char *_qs=&quot;QUERY_STRING&quot;;
/* Get the seconds value from the ctime() function */
short getsec()
{
   time_t t;
   char time_str[3];
   char *time_wrk;
   time(&amp;t);
   time_wrk=ctime(&amp;t);
   time_str[0]=time_wrk[17];
   time_str[1]=time_wrk[18];
   time_str[2]=0;
   return(atoi(time_str));
}
/* Encode _flags into _flag_str */
void encode_flags()
{
   sprintf(_flag_str,&quot;%04x%04x%04x%04x%04x&quot;,
      _flags[0],_flags[1],_flags[2],
      _flags[3],_flags[4]);
}
/* Decode _flag_str into _flags */
void decode_flags()
{
   sscanf(_flag_str,&quot;%04x%04x%04x%04x%04x&quot;,
      _flags,_flags+1,_flags+2,
      _flags+3,_flags+4);
}
/* Set a bit in _flags */
void bit_set( bitnum )
unsigned short bitnum;
{
   unsigned short arr,offs;
   arr=bitnum/16;
   offs=pow[bitnum%16];
   _flags[arr] |= offs;
}
/* Read a bit from _flags */
unsigned short bit_get( bitnum )
unsigned short bitnum;
{
   unsigned short arr,offs;
   arr=bitnum/16;
   offs=pow[bitnum%16];
   return( ( _flags[arr] &amp; offs) == offs );
}
/* Get a pseudo-random number based on the value of getsec(). If the number has
 * already been used, search for the next open spot in the bitmap, wrapping 
 * around to the beginning of the array as necessary.
 */
short new_num()
{
   short num;
   num=getsec()%_maxq;
   while( bit_get( num )) {
      num=(num+1)%_maxq;
   }
   return(num);
}
/* Parse the QUERY_STRING environment variable based on the ampersand 
 * character. Fill global variables based on data from the input form.
 */
void parse_query_string(s)
char *s;
{
   char *p;
   p=strtok(s,&quot;&amp;&quot;);
   while(p!=NULL) {
      if(!memcmp(p,&quot;Data=&quot;,5)) {
         strcpy(_flag_str,p+5);
         decode_flags();
      }
      else
      if(!memcmp(p,&quot;Mode=&quot;,5)) {
         _mode=*(p+5);
      }
      else
      if(!memcmp(p,&quot;Answer=&quot;,7)) {
         _answer=atoi(p+7);
      }
      if(!memcmp(p,&quot;QNum=&quot;,5)) {
         _qnum=atoi((p+5));
      }
      if(!memcmp(p,&quot;NAsk=&quot;,5)) {
         _num_asked=atoi((p+5));
      }
      if(!memcmp(p,&quot;NCor=&quot;,5)) {
         _num_correct=atoi((p+5));
      }
      p=strtok(NULL,&quot;&amp;&quot;);
   }
}
/* Issue a form that will resume a known Web page. */
void no_more()
{
   /* Send HTML MIME-type */
   printf(&quot;Content-TYPE: text/html\n\n&quot;);
   /* HTML document header */
   printf(&quot;&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Web Trivia&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;\n&quot;);
   printf(&quot;&lt;H2&gt;&lt;STRONG&gt;Web Trivia&lt;/STRONG&gt;&lt;/H2&gt;\n&quot;);
   printf(&quot;&lt;H2&gt;&quot;);
   printf(&quot;Thanks for playing!!!&lt;/H2&gt;&quot;);
   if(_num_asked&gt;=_maxq) {
      printf(&quot;&lt;P&gt;We're all out of questions!&quot;);
   }
   printf(&quot;&lt;P&gt;You answered %d of %d questions correctly.&quot;,_num_correct,
      _num_asked);
   /* Create an anchor to get back to the first page */
   printf(&quot;&lt;P&gt;&lt;A HREF=\&quot;http://www.gonix.com/cjbr/wtriv.html\&quot;&gt;&quot;);
   printf(&quot;Go back to where you started...&lt;/A&gt;&quot;);
   printf(&quot;&lt;/BODY&gt;&lt;/HTML&gt;\n&quot;);
}
/* Ask a pseudo-random question */
void ask_question()
{
   unsigned short i;
   _num_asked++;
   if(_num_asked&gt;_maxq) {
      _num_asked--;
      no_more();
      return;
   }
   i=new_num();
   bit_set( i );
   encode_flags();
   /* Send HTML MIME-type */
   printf(&quot;Content-TYPE: text/html\n\n&quot;);
   /* HTML document header */
   printf(&quot;&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Web Trivia&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;\n&quot;);
   printf(&quot;&lt;H2&gt;&lt;STRONG&gt;Web Trivia&lt;/STRONG&gt;&lt;/H2&gt;\n&quot;);
   /* Form definition */
   printf(&quot;&lt;FORM ACTION=\&quot;/cgi-bin/webtriv\&quot;&gt;\n&quot;);
   /* Ask question*/
   printf(&quot;&lt;P&gt;%s\n&quot;,_info[i].quest);
   /* Provide radio-buttons as choices */
   printf(&quot;&lt;P&gt;&lt;INPUT NAME=\&quot;Answer\&quot; TYPE=\&quot;radio\&quot; VALUE=\&quot;1\&quot;&gt;\n&quot;);
   printf(&quot;%s\n&quot;,_info[i].ans[0]);
   printf(&quot;&lt;P&gt;&lt;INPUT NAME=\&quot;Answer\&quot; TYPE=\&quot;radio\&quot; VALUE=\&quot;2\&quot;&gt;\n&quot;);
   printf(&quot;%s\n&quot;,_info[i].ans[1]);
   printf(&quot;&lt;P&gt;&lt;INPUT NAME=\&quot;Answer\&quot; TYPE=\&quot;radio\&quot; VALUE=\&quot;3\&quot;&gt;\n&quot;);
   printf(&quot;%s          &quot;,_info[i].ans[2]);
   printf(
      &quot;&lt;P&gt;&lt;INPUT NAME=\&quot;Answer\&quot; TYPE=\&quot;radio\&quot; VALUE=\&quot;4\&quot;&gt;&lt;B&gt;Quit &lt;/B&gt;\n&quot;);
   printf(&quot;&lt;INPUT NAME=\&quot;Go\&quot; TYPE=\&quot;submit\&quot; VALUE=\&quot;Send\&quot;&gt;\n&quot;);
   printf(&quot;&lt;P&gt;&lt;INPUT NAME=\&quot;Data\&quot; TYPE=\&quot;hidden\&quot; VALUE=\&quot;%s\&quot;&gt;\n&quot;,_flag_str);
   printf(&quot;&lt;INPUT NAME=\&quot;Mode\&quot; TYPE=\&quot;hidden\&quot; VALUE=\&quot;A\&quot;&gt;\n&quot;);
   printf(&quot;&lt;INPUT NAME=\&quot;QNum\&quot; TYPE=\&quot;hidden\&quot; VALUE=\&quot;%d\&quot;&gt;\n&quot;,i);
   printf(&quot;&lt;INPUT NAME=\&quot;NAsk\&quot; TYPE=\&quot;hidden\&quot; VALUE=\&quot;%d\&quot;&gt;\n&quot;,_num_asked);
   printf(&quot;&lt;INPUT NAME=\&quot;NCor\&quot; TYPE=\&quot;hidden\&quot; VALUE=\&quot;%d\&quot;&gt;\n&quot;,_num_correct);
   /* Closing FORM and HTML tags */
   printf(&quot;&lt;/FORM&gt;&lt;/BODY&gt;&lt;/HTML&gt;\n&quot;);
}
/* Process the response from an &quot;ask_question&quot; form. */
void process_answer()
{
   /* Did the user select Quit? */
   if(_answer==4) {
      no_more();
      return;
   }
   /* Send HTML MIME-type */
   printf(&quot;Content-TYPE: text/html\n\n&quot;);
   /* HTML document header */
   printf(&quot;&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Web Trivia&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;\n&quot;);
   printf(&quot;&lt;H2&gt;&lt;STRONG&gt;Web Trivia&lt;/STRONG&gt;&lt;/H2&gt;\n&quot;);
   printf(&quot;&lt;H2&gt;&quot;);
   if(_answer==_info[_qnum].answer) {
      printf(&quot;&lt;P&gt;You are correct!&lt;/H2&gt;&quot;);
      _num_correct++;
   }
   else {
      printf(&quot;&lt;P&gt;Wrong!&lt;/H2&gt;\n&quot;);
      printf(&quot;&lt;P&gt;The correct answer was %d &lt;B&gt;%s&lt;/B&gt;&quot;,_info[_qnum].answer,
             _info[_qnum].ans[_info[_qnum].answer-1]);
   }
   printf(&quot;&lt;P&gt;You have answered %d of %d questions correctly.&quot;,_num_correct,
      _num_asked);
   /* Form definition */
   printf(&quot;&lt;FORM ACTION=\&quot;/cgi-bin/webtriv\&quot;&gt;\n&quot;);
   printf(&quot;&lt;P&gt;Play again?&quot;);
   printf(&quot;&lt;P&gt;&lt;INPUT NAME=\&quot;Answer\&quot; TYPE=\&quot;radio\&quot; VALUE=\&quot;0\&quot;&gt;\n&quot;);
   printf(&quot;Yes&quot;);
   /* Magic value 100 used here to indicate &quot;NO&quot; */
   printf(&quot;&lt;INPUT NAME=\&quot;Answer\&quot; TYPE=\&quot;radio\&quot; VALUE=\&quot;100\&quot;&gt;\n&quot;);
   printf(&quot;No&quot;);
   printf(&quot;&lt;P&gt;&lt;INPUT NAME=\&quot;Go\&quot; TYPE=\&quot;submit\&quot; VALUE=\&quot;Send\&quot;&gt;\n&quot;);
   printf(&quot;&lt;P&gt;&lt;INPUT NAME=\&quot;Data\&quot; TYPE=\&quot;hidden\&quot; VALUE=\&quot;%s\&quot;&gt;\n&quot;,_flag_str);
   printf(&quot;&lt;INPUT NAME=\&quot;Mode\&quot; TYPE=\&quot;hidden\&quot; VALUE=\&quot;R\&quot;&gt;\n&quot;);
   printf(&quot;&lt;INPUT NAME=\&quot;QNum\&quot; TYPE=\&quot;hidden\&quot; VALUE=\&quot;%d\&quot;&gt;\n&quot;,_qnum);
   printf(&quot;&lt;INPUT NAME=\&quot;NAsk\&quot; TYPE=\&quot;hidden\&quot; VALUE=\&quot;%d\&quot;&gt;\n&quot;,_num_asked);
   printf(&quot;&lt;INPUT NAME=\&quot;NCor\&quot; TYPE=\&quot;hidden\&quot; VALUE=\&quot;%d\&quot;&gt;\n&quot;,_num_correct);
   /* Closing FORM and HTML tags */
   printf(&quot;&lt;/FORM&gt;&lt;/BODY&gt;&lt;/HTML&gt;\n&quot;);
}
/* Main flow */
int main()
{
   char *p;
   p=getenv(_qs);
   if(p!=NULL) {
      parse_query_string(p);
   }
   /* Mode will contain A only if an answer is present. */
   if(_mode=='A')
      process_answer();
   else {
      /* Check to see if the user selected &quot;No&quot;
       * when asked if they want to play again.
       */
      if( _answer==100) {
         no_more();
      }
      else {
         /* ask a question */
         ask_question();
      }
   }
   return(0);
}

</pre>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
