<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>NOV95: Using MAPI for Interapplication Communication</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Using MAPI for Interapplication Communication<a name="01d3_0092"><a name="01d3_0090"><a name="01d3_0000"></h1><P>
<h2>Delphi and VB do lunch</h2><P>
<h3>William Stamatakis</h3><P>
<p><i><a name="01d3_0091"><a name="01d3_0000">Bill is a Windows application developer at a major investment bank in New York City and can be reached on CompuServe at 72274,1165.</i></p><hr><P>
Windows programmers are finding it increasingly necessary to develop applications that communicate with one another. These applications are not of the exotic, embedded-systems variety, but straightforward commercial applications like sales-order tracking. Methods available for implementing interprocess communication in Windows applications include facilities provided by the Windows environment, such as DDE (Dynamic Data Exchange) and NDDE (Network Dynamic Data Exchange), as well as a few third-party add-ons. DDE lets Windows applications establish a conversation that permits a continuous, automatic data exchange. DDE is limited to applications running locally in your Windows environment; NDDE lets your application establish a conversation with another app across a LAN.<P>
App-Link, a VBX control from Synergy Technologies (Essex Junction, VT), is a third-party add-on that is similar to Microsoft's NDDE, but easier to program. However, App-Link is currently unable to route across a LAN because it is limited to using NETBIOS for remote communication.<P>
As an alternative interprocess-communication technique, the Messaging Application Program Interface (MAPI) is underrated and often overlooked, yet it is one of the easiest to work with. MAPI is an API developed by Microsoft that has garnered widespread industry support. MAPI is not for everyone, especially if you need high-bandwidth, low-latency, or fine-granularity interapplication communications. But in many situations, the communications requirements are modest, and therefore MAPI is a good fit.<P>
In this article, I'll discuss using MAPI for interapplication communication, and present two programs, one written in Microsoft Visual Basic and the other in Borland's Delphi, that can communicate via the MAPI interface.<P>
<h3><a name="01d3_0093">About MAPI<a name="01d3_0093"></h3><P>
When the topic of MAPI arises, three APIs are usually mentioned: The Common Messaging Call Application Program Interface (CMC API), Simple MAPI, and Extended MAPI. CMC API contains ten high-level messaging functions that let you create a mail-enabled application. It is a cross-platform API; therefore, it is designed to be independent of the messaging service (Microsoft Mail, IBM Profs, and the like), the operating system, and the underlying hardware. As a result, applications on UNIX, OS/2, Windows, DOS, and Macintosh can implement this technology. It was developed in alliance with the X.400 API Association standards organization and e-mail vendors and users. For more on MAPI, see &quot;Using the Microsoft Mail API,&quot; by Jim Conger (<I>DDJ</I>, August 1994).<P>
Simple MAPI contains a set of 12 messaging functions for creating mail-enabled Windows applications. Simple MAPI functions make available capabilities such as sending, receiving, and addressing messages. Messages can contain file attachments and OLE objects.<P>
Extended MAPI contains a richer set of messaging functions for more-complex messaging schemes. It includes features like smart forms, which can replace the standard send and receive forms, plus functionality to link information entered in smart-form fields with other applications.<P>
Using MAPI in your applications has a number of advantages: <P>
<UL>
<li>If your organization already has an e-mail system that supports MAPI, the additional cost may be zero. Microsoft Mail is of course MAPI compliant; other popular e-mail systems, such as Lotus cc:Mail, are also MAPI compliant or will be within the next year. If your organization does not have MAPI-compliant e-mail, the startup cost is reasonable: less than $50 per user for a ten-user license.</li>
<li>Unlike most other interapplication messaging alternatives, the size of the message is unlimited. Just as you can send a 20-page memo to your colleagues via e-mail, so can your Windows app send a long list of SQL transactions to another program.</li>
<li>In most of the other messaging systems, the application enters a busy state while a message is being sent; the user must wait until the transmission is complete before continuing to work. MAPI offloads message management to the Mail Server, freeing up the application almost immediately after the message is sent. Your Windows app almost instantly receives a response from the Mail Server indicating success or failure.</li>
<li>Due to the messaging infrastructure, the recipient application does not have to be running at the time the source application is sending the message. Just like an e-mailed memo, the message goes to the intended recipient's mailbox. Once the intended recipient application logs in, it will immediately receive all messages, and can act on them at that time.</li>
</UL>
Using MAPI lets you send messages to a recipient app whose mailbox resides in a different post office in some distant location. Within the mail server, the Message Transfer Agent (MTA) ensures delivery of a message to another post office across a wide area network (WAN). For instance, an application in New York could communicate with one in London. The beauty of MAPI is that the underlying mechanisms are transparent to both the end user and the developer.<P>
Yet another worthwhile consequence of relying on your company's e-mail infrastructure is the remote dial-up capability that is now an option with most e-mail systems. With remote dial-up, users working off-site can login through a dial-up line, then download e-mail to portable computers, disconnect from the e-mail server, and read and write messages off-line. Your applications can follow a similar scenario. For example, in the case of a sales-tracking application, a salesperson out in the field can book orders on a laptop, and the database app running on the laptop can transparently call headquarters, upload new data and receive updated inventory information from the host.<P>
<h3><a name="01d3_0094">A Language-Independent Approach <a name="01d3_0094"></h3><P>
MAPI is designed to be independent of all Windows-based programming/macro languages and almost all currently available e-mail services (Microsoft Mail, IBM Profs, Lotus cc:Mail, and so on). Thus, multiple Windows apps written in dissimilar programming/macro languages and using different e-mail services can communicate with each other through MAPI. Obviously, there are many ways to mix and match front-end and/or mail-enabled clients to back-end e-mail services.<P>
To demonstrate, I've written two simple Windows applications--one in Visual Basic, the other in Borland Delphi. In the remainder of this article, I'll describe their implementation.<P>
The basic principle in creating a MAPI-compliant application is that almost all the API calls require a valid session handle as one of the parameters. Therefore, a MAPI session must first be established by logging into an e-mail service. If successful, a session handle will be returned. <P>
Creating a mail-enabled application in Visual Basic is straightforward. The online help is complete, and there is no need to refer to the hard-copy documentation. Obviously, you must first have a MAPI-compliant e-mail service installed on your network and access to valid user accounts. Microsoft Visual Basic 3.0 Professional comes with a VBX called &quot;MSMAPI.VBX,&quot; which contains two controls: a session control (<I>MAPIsession</I>) and a message control (<I>MAPImessage</I>). <I>MAPIsession</I> establishes a mail session by logging in. Once logged in, your program uses <I>MAPImessage</I> to perform all e-mail functions (compose a message, send a message, get new messages, and so on). No methods or events are associated with these controls; all actions are performed through the setting of properties on them. &quot;Sender,&quot; the application I've written, simply sends messages to valid user accounts on a given e-mail service; see <a href="#01d3_0099">Listing One</A>.<P>
The code in the <I>Form_Load</I> event handler establishes a MAPI session. It first sets the <I>MapiSession1.LoginUI</I> property to True, which activates the default message-login dialog when the MAPI Session control attempts to connect to the e-mail service. Next, the default user ID and password are set to null. Then, the code attempts a MAPI session login, via the statement <I>MapiSession1.Action=SESSION_SIGNON</I>. After the session is established, the MAPI message control is informed of the <I>SessionID</I>, via <I>MapiMessages1.SessionID=MapiSession1.SessionID</I>.<P>
Once the message control is enabled, the application can successfully send messages to any valid user account. If the end user enters a valid user in the To: field, plus the desired Subject and Message, and clicks on the Send button, the <I>cmdSend_Click</I> event is invoked.<P>
In the <I>cmdSend_Click</I> event, several steps are taken prior to sending a message. First, a Visual Basic error handler is activated to trap all errors caused during the steps to send a message. Any time an error is encountered, it automatically goes to the <I>ErrHandler</I> label, where a dialog box is displayed, showing the description of the error in the body of the dialog and the error number in the dialog title bar. The message-sending procedure is terminated at this point. This error handling is minimal; you'll likely want to implement a more graceful sequence.<P>
To create a message, set the <I>MapiMessages1.Action</I> variable to MESSAGE_COMPOSE, the type of recipient to RECIPTYPE_TO, and the recipient name to the name typed in by the end user in the To: field. Follow the same sequence for the Subject: field.<B> </B>The body of the message is set by the statement <I>MapiMessages1.MsgNoteText=txtMessage.Text</I>. Finally, the message is sent to the intended recipient: <I>MapiMessages1.Action=MESSAGE_SEND</I>.<P>
When the user exits the Sender application, the <I>Query_Unload</I> event is invoked. Here, the code in the event handler must disconnect the MAPI session, as shown in the listing. <P>
<h3><a name="01d3_0095">The Delphi Counterpart<a name="01d3_0095"></h3><P>
The application I've written in Delphi, &quot;Receiver,&quot; shows messages sent to the mailbox that Receiver logs on to, and, if the user requests it, the body of a given message. Creating a mail-enabled application with Delphi is not quite as easy as with Visual Basic, but simple nevertheless. Although some VBXs on the market work with Delphi, this particular one doesn't. Therefore, I developed a Delphi &quot;unit&quot; that contains wrapper functions for all the API calls found in the MAPI SDK. Although my initial effort was a bit tedious, any Delphi application that I develop from this point on will be built as easily as with a VBX. It is quite possible that the Delphi wrapper will outperform the MAPI VBX, because the wrapper lacks the typical VBX overhead. <P>
The code discussed here is shown in <a href="#01d3_009b">Listing Two</A>. To establish a session with an e-mail service, the end user clicks on the Logon button, which in turn triggers the <I>btnLogClick</I> event handler. As with the VB application, the code must establish a MAPI session--in this case, by calling the <I>MAPILogon()</I> function shown in <a href="#01d3_0096">Example 1(a)</A>. Two of the parameters are worthy of note. The fourth parameter in the list specifies options for the MAPI session. In this case, the default e-mail service logon dialog will appear as an attempt to connect to an e-mail service is made (MAPI_LOGON_UI). Once a session is activated, all new messages pending for the account will be downloaded into its mailbox (MAPI_FORCE_DOWNLOAD). <P>
The sixth parameter, <I>hSess</I>, is assigned a valid session handle, if the login to the e-mail service was successful. All subsequent MAPI message calls will require this session handle.<P>
Next, if <I>MAPILogon()</I> returns SUCCESS_SUCCESS, the application fills in the <I>Messages</I> list box with subjects from all the messages in the current account. This happens in the procedure <I>PopulateMessageListBox</I>, which makes two MAPI calls. The first, <I>MAPIFindNext</I>, searches for the next message to put in the list box, starting at message ID <I>CurrMsgId</I> and stores it in <I>MsgId</I>; see <a href="#01d3_0096">Example 1(b)</A>. <P>
The message is then read into a MAPI message structure that contains all pertinent information relating to the message, such as the Subject, Message Body, Sender, and so on; see <a href="#01d3_0096">Example 1(c)</A>. The <I>MsgId</I> is the key parameter here. The <I>MAPIReadMail</I> function expects a pointer to a pointer to a MAPI message structure, which in this case is represented as <I>@pMMsg</I>.<P>
The code can then access the different components of the message. In this application, the Subject section of this message is added to the Messages list box via the statement <I>lstMessages.Items.Add(StrPas(pMMsg^.lpszSubject))</I>.<P>
To see the details of a message, the end user invokes the Show Details dialog, which triggers the <I>btnShowDetailsClick</I> event handler. A specified message must first be located using the <I>MAPIFindNext()</I> function. Once found, the message is read into a MAPI message structure using the <I>MAPIReadMail()</I> function. Now, all components of the message are available to the application; in this case the Receiver, Sender, Subject, and Message Body are displayed in a Show Details dialog. The code that populates the dialog is shown in <a href="#01d3_0097">Example 2</A>.<P>
Finally, to terminate a MAPI Session, the end user must click on the Logoff button, which triggers the <I>btnLogClick</I> event handler. This event handler calls the <I>MAPILogoff</I> function to terminate the session.<P>
<a name="01d3_0096"><B>Example 1:</B> (a) Establishing a MAPI session in Delphi; (b) locating the message; (c) reading the message into a structure.<a name="01d3_0096">
<pre>
(a)
MAPILogon(0, '', '', MAPI_LOGON_UI or MAPI_FORCE_DOWNLOAD, 0, hSess)

(b)
MAPIFindNext(hSess, 0, nil, @CurrMsgId, MAPI_GUARANTEE_FIFO, 0, @MsgId)

(c)
MAPIReadMail(hSess, 0, @MsgId, MAPI_PEEK or MAPI_ENVELOPE_ONLY, 0, @pMMsg)
</pre>
<a name="01d3_0097"><B>Example 2:</B> Populating the Show Details dialog.<a name="01d3_0097">
<pre>
with dlgDetails do
      begin
          edtTo.Text      := StrPas(pMMsg^.lpRecips^.lpszName);
          edtFrom.Text    := StrPas(pMMsg^.lpOriginator^.lpszName);
          edtSubject.Text := StrPas(pMMsg^.lpszSubject);
          edtText.Text    := StrPas(pMMsg^.lpszNoteText);
          ShowModal;
      end</pre><P>
<P>
<h4><a name="01d3_0098"><a name="01d3_0099">Listing One<a name="01d3_0099"></h4><pre>
' -----------------------------------------------------------------------
' Sender App -- MAPI sender app written in VB by William Stamatakis, 1995.
' -----------------------------------------------------------------------
Option Explicit
' ------------------------------------------------------------------------
Sub cmdExit_Click ()
    Unload Me
End Sub
' ------------------------------------------------------------------------
Sub cmdSend_Click ()
    On Error GoTo ErrHandler:
    ' Compose a new message
    MapiMessages1.Action = MESSAGE_COMPOSE
    ' The recipient is the primary recipient (To:)
    MapiMessages1.RecipType = RECIPTYPE_TO
    ' Set Recipient Name
    MapiMessages1.RecipDisplayName = txtTo.Text
    ' Store the Subject section of the message
    MapiMessages1.MsgSubject = txtSubject.Text
    ' Store the main body of the message
    MapiMessages1.MsgNoteText = txtMessage.Text
    ' Send the message recipients specified
    MapiMessages1.Action = MESSAGE_SEND
    Exit Sub
    ErrHandler:
    MsgBox Error$, , &quot;Error#: &quot; &amp; Err
    Exit Sub
End Sub
' ------------------------------------------------------------------------
Sub Form_Load ()
    ' Use the default Mail Login Dialog
    MapiSession1.LogonUI = True
    MapiSession1.UserName = &quot;&quot;
    MapiSession1.Password = &quot;&quot;
    ' Login
    MapiSession1.Action = SESSION_SIGNON
    ' Set the Session ID in the MapiMessage control equal to
    ' the new valid Session ID established by the MapiSession
    ' login, resulting in activating all message function
    ' capability on the current session id.
    MapiMessages1.SessionID = MapiSession1.SessionID
End Sub
' ------------------------------------------------------------------------
Sub Form_QueryUnload (Cancel As Integer, UnloadMode As Integer)
    ' Logoff before exiting Sender
    MapiSession1.Action = SESSION_SIGNOFF
End Sub
</pre>
<h4><a name="01d3_009a"><a name="01d3_009b">Listing Two <a name="01d3_009b"></h4><pre>
{----------------------------------------------------------------------}
{ Receiver App, written in Borland Delphi by William Stamatakis, 1995. }
{----------------------------------------------------------------------}
unit Receive;
interface
uses
      SysUtils, WinTypes, WinProcs, Messages, Classes, Graphics, Controls,
      Forms, Dialogs, MAPI, ExtCtrls, StdCtrls, Buttons, Tobclist, Details;
type
      TfrmReceiver = class(TForm)
          lstMessages: TOBCListBox;
          Label1: TLabel;
          btnLogon: TBitBtn;
          Bevel1: TBevel;
          btnLogoff: TBitBtn;
          btnShowDetails: TBitBtn;
          btnExit: TBitBtn;
          procedure btnLogClick(Sender: TObject);
          procedure FormCreate(Sender: TObject);
          procedure btnShowDetailsClick(Sender: TObject);
          procedure btnExitClick(Sender: TObject);
      private
          procedure PopulateMessageListBox;
      public
          { Public declarations }
      end;
var
      frmReceiver: TfrmReceiver;
      hSess: LHANDLE;           { MAPI session handle                    }
      slstMsgIds: TStringList;  { var of type String list                }
      MMsg: TMapiMessage;       { var of type MAPI message structure     }
      pMMsg: ^TMapiMessage;     { pointer of type MAPI message structure }
implementation
{$R *.DFM}
{------------------------------------------------------------------------}
procedure InitMsgStruct;             { Initialize MAPI message structure }
begin
    with MMsg do
      begin
      ulReserved := 0;
      lpszSubject := '';
      lpszNoteText := '';
      lpszMessageType := nil;
      lpszDateReceived := nil;
      lpszConversationID := nil;
      flFlags := 0;
      lpOriginator := nil;
      nRecipCount := 0;
      lpRecips := nil;
      nFileCount := 0;
      lpFiles := nil;
      end;
      new(pMMsg);
      pMMsg := @MMsg;
end;
{------------------------------------------------------------------------}
procedure TfrmReceiver.PopulateMessageListBox;
      { Fill Messages listbox with the Subject section of all messages
        from the currently logged in account's mailbox.               
      }
var
    MsgId, CurrMsgId: string;
    i: Shortint;
begin                                              { Intialize variables }
    MsgId := '';
    CurrMsgId := '';
    slstMsgIds := TStringList.Create;
    { Loop through all messages in account's mailbox }
    while MAPIFindNext(hSess, 0, nil, @CurrMsgId, MAPI_GUARANTEE_FIFO,
      0, @MsgId) = SUCCESS_SUCCESS do
      begin
          { Read messages into the MAPI message structure pointer, pMMsg. }
          if MAPIReadMail(hSess, 0, @MsgId, MAPI_PEEK or
          MAPI_ENVELOPE_ONLY, 0, @pMMsg) = SUCCESS_SUCCESS then
          begin
                { Add message subject to Messages listbox }
                lstMessages.Items.Add(StrPas(pMMsg^.lpszSubject)); 
                { Add corresponding message id to string list object }
                slstMsgIds.Add(MsgId);
          end;
          CurrMsgId := MsgId;
      end;
end;
{------------------------------------------------------------------------}
procedure TfrmReceiver.btnLogClick(Sender: TObject);
{ Event handler proc for Logon and Logoff buttons }
begin
    { Logon button pressed}
    if (Sender = btnLogon) then
       begin
       { Logon to E-Mail Service }
       if MAPILogon(0, '', '', MAPI_LOGON_UI or MAPI_FORCE_DOWNLOAD, 0, 
          hSess) = SUCCESS_SUCCESS then
          begin
                PopulateMessageListBox;         
                { Fill Messages listbox with the Subject section of 
                  all messages from the account's mailbox that was 
                  just logged into.
                }
                btnLogon.Enabled := False;      { Disable Logon Button       }
                btnShowDetails.Enabled := True; { Enable Show Details Button }
                btnLogoff.Enabled := True;      { Enable Logoff Button       }
          end;
       end
    else    { Logoff button pressed}
       { Logoff from E-Mail Service }
       if (MAPILogoff(hSess, 0, 0, 0) = SUCCESS_SUCCESS) then
       begin
             hSess := 0;                    { Reset MAPI session handle   }
             lstMessages.Clear;             { Empty out Messages listbox  }
             slstMsgIds.Clear;              { Empty string list object    }
             btnShowDetails.Enabled := False;{ Disable Show Details button}
             btnLogoff.Enabled := False;    { Disable Logoff button       }
             btnLogon.Enabled := True;      { Enable Logon button         }
       end;
end;
{---------------------------------------------------------------------}
procedure TfrmReceiver.FormCreate(Sender: TObject);
begin
      InitMsgStruct; { Initialize MAPI message structure }
end;
{---------------------------------------------------------------------}
procedure TfrmReceiver.btnShowDetailsClick(Sender: TObject);
      { When &quot;Show Details&quot; button is clicked, show Details Dialog, 
        which contains the details of the currently selected message 
        in the lstMessages listbox.
      }
var
      MsgId: string;         { Message Id of currently selected message }
      i: LongInt;            { subcript var } 
begin                        { Set MsgId to the message id that corresponds }
                             { to the message being sought }
      i := lstMessages.ItemIndex - 1;   
      { Set i = to the list item index
        of the currently selected item in
        the lstMessages listbox }
      if i &lt; 0 then
          MsgId := ''{ Based on i set MsgId to message id located in        }
      else           { slstMsgIds which corresponds directly with list item }
          MsgId := slstMsgIds.Strings[i]; { in the lstMessages listbox      }
      { Locate the message based on the message id selected.  If found
        then read the message. If read successfully, then fill in the Detail
        Dialog prior to showing it.  
       }
      if MAPIFindNext(hSess, 0, nil, @MsgId, MAPI_GUARANTEE_FIFO, 0,
         @MsgId) = SUCCESS_SUCCESS then
         if MAPIReadMail(hSess, 0, @MsgId, MAPI_PEEK or MAPI_SUPPRESS_ATTACH, 
            0, @pMMsg) = SUCCESS_SUCCESS then
            begin
            with dlgDetails do
            begin
            edtTo.Text := StrPas(pMMsg^.lpRecips^.lpszName);       { To:     }
            edtFrom.Text := StrPas(pMMsg^.lpOriginator^.lpszName); { From:   }
            edtSubject.Text := StrPas(pMMsg^.lpszSubject);         { Subject:}
            edtText.Text := StrPas(pMMsg^.lpszNoteText);           { Text:   }
            ShowModal;                                         { Show dialog }
            end;
        end;
end;
{------------------------------------------------------------------------}
procedure TfrmReceiver.btnExitClick(Sender: TObject);
begin
    if btnLogoff.Enabled then
          btnLogClick(btnLogoff);
          self.Close;
    end;
end.ODBC DRIVERS
}
</pre>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
