<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>NOV95: Your Own Endian Engine</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Your Own Endian Engine<a name="01b0_0086"><a name="01b0_0084"><a name="01b0_0000"></h1><P>
<h2>Solving memory-order and addressing challenges in C</h2><P>
<h3>John Rogers</h3><P>
<p><i><a name="01b0_0085"><a name="01b0_0000">John, a programmer in the Seattle area, can be contacted on CompuServe at 72634,2402.</i></p><hr><P>
Back in the days before heterogeneous networks and client/server architectures, life was relatively simple for programmers. IBM-supplied mainframes ruled the roost, a byte was eight bits, and numbers were always in Big-endian order. Now, however, there are C compilers in which <I>char</I> takes nine bits. There are even rumors of 10-bit byte machines. It wouldn't surprise me to see 16-bit <I>char</I> implementations (for Unicode) in a couple of years. Furthermore, today's computers can switch between Big- and Little-endian at boot time, and even juggle different byte orders between data and program space. Moreover, Big- and Little-endian aren't the only byte-ordering schemes--there are also Middle-endian systems, such as the DEC VAX.<P>
Most computers address memory by byte, although word-addressable computers have been around for decades. For C programmers, the term &quot;byte&quot; has become shorthand for &quot;the smallest chunk of addressable memory.&quot; The best alternative term I've seen for this is &quot;minimum addressable unit&quot; (MAU), from the IEEE standard for a portable object file format (MUFOM). Consequently, I now use the term &quot;MAU order&quot; in place of &quot;byte order.&quot; <P>
To alleviate the confusion caused by differing orders and sizes, I've developed an &quot;endian engine&quot; that handles every byte order (including every possible Middle-endian order) and every byte size, native or not. I've even used this engine to simulate a 36-bit machine with 9-bit bytes on a 32-bit machine with 8-bit bytes. In this article, I'll show how the engine can be used to implement big-integer routines. The engine and the routines are building blocks for a simulator I hope to write that would emulate Knuth's upcoming 64-bit computer (MMIX) with just about any ANSI/ISO C compiler.<P>
<h3><a name="01b0_0087">Two Things Not To Do<a name="01b0_0087"></h3><P>
There are a couple of familiar workarounds for the byte-ordering problems; neither is recommended, however. The first is the <I>swab</I> (swap bytes) function provided in many versions of UNIX, as far back as Version 7 (1979) and as recently as 4.4BSD-Lite (1994). The <I>swab</I> function only exchanges pairs of adjacent <I>char</I> values--useful in the days of the 16-bit PDP-11, but it's a relic now.<P>
The other method is to use a union in C. However, the ANSI C standard says, &quot;if a member of a union object is accessed after a value has been stored in a different member of the object, the behavior is implementation-defined.&quot; (Section 3.3.2.3, which also lists one exception that doesn't help this particular problem.) Elsewhere, ANSI C says that strictly conforming programs shall not depend on any implementation-defined behavior.<P>
<h3><a name="01b0_0088">BSD Notation<a name="01b0_0088"></h3><P>
Several schemes exist for byte-ordering notation. Both Bolsky and Plauger notations, for instance, can have a leading zero (0123 is a 4-byte, Little-endian value in Plauger notation). This can cause subtle problems in C, where a leading 0 indicates an octal value.<P>
&quot;BSD notation&quot; is my name for the byte orders returned by the 4.4BSD <I>sysctl</I> library function. In BSD notation, 4321 is a 4-byte, Big-endian value. Leading zeros are not possible, so octal confusion is avoided. The 4.4BSD-Lite source CD-ROM (available from O'Reilly &amp; Associates) includes various endian.h header files that define equates in this notation. (The files are for kernel use only.)<P>
Unfortunately, since the three notations I've mentioned are all in decimal, none work well with 16-byte entities. BSD notation is handy for simple things and is available from a 4.4BSD library routine (<I>sysctl</I>), but it isn't powerful enough to completely describe the format of something in memory. For convenience, I've provided a way to use BSD notation with the endian engine, via a routine that accepts BSD notation.<P>
<a href="#01b0_0092">Table 1</A> is a list of the byte orders for a number of systems. The list uses BSD notation where necessary. Please e-mail me any additions or corrections to the list.<P>
<h3><a name="01b0_0089">Describing Memory Format<a name="01b0_0089"></h3><P>
<a href="#01b0_0097">Listing Two</A>, end.h, contains <I>Memory_Format_T</I>, a structure that describes the format of the memory for a given entity. <I>Memory_Format_T </I>has<I> </I>four members:<P>
<UL>
<li>The size of a minimum addressable unit (MAU) in bits. </li>
<li><I>MAU_Order_T</I>, an <I>enum</I> type that is shorthand for the MAU order. <I>MAU_Order_T </I>is declared in the rep.h header, and its values are <I>BigEndian</I>, <I>LittleEndian</I>, and <I>MiddleEndian</I>; see <a href="#01b0_0095">Listing One</A>. </li>
<li>The number of MAUs in the entity.</li>
<li>A pointer to an array of references indicating exactly which MAU goes where. This is necessary only if <I>MAU_Order_T</I> is <I>MiddleEndian</I>.</li>
</UL>
In BSD notation, the byte order for a 4-byte, Big-endian value would be 4321. The equivalent array of MAU references is <I>{4,3,2,1}</I>. The DEC PDP-11 (a Middle-endian machine) would have an array of MAU references of <I>{3,4,1,2}</I> for a 32-bit integer on that machine. (The pointer to this array must be NULL for the <I>BigEndian</I> and <I>LittleEndian</I> <I>MAU_Order_T</I> values.)<P>
<a href="#01b0_0093">Example 1</A> is C code that initializes <I>Memory_Format_T</I> structures for four different systems, including the Middle-endian PDP-11 and the 36-bit Honeywell 6000 (which has 9-bit <I>char </I>values).<P>
<h3><a name="01b0_008a">Swapping &quot;Bytes&quot;: <I>EndSwap</I><a name="01b0_008a"></h3><P>
The main routine in the endian engine (<I>EndSwap</I>) copies data and swaps MAUs as it goes. <I>EndSwap</I> requires two memory formats: one for the destination and another for the source. All the routines I declared in end.h can be used outside the endian engine, but <I>EndSwap</I> is the only one an application must call. <a href="#01b0_0097">Listing Two</A> is the end.h source. <I>EndSwap</I> is in <a href="#01b0_0099">Listing Three</A>. A call to it appears in <a href="#01b0_009b">Listing Four</A> (the <I>BigSwap</I> routine).<P>
<h3><a name="01b0_008b">Other Ways to Build Memory Formats<a name="01b0_008b"></h3><P>
Besides building them directly in the application, I've provided two other means to create <I>Memory_Format_T</I> values. Given a byte order in BSD notation, <I>EndBSDByteOrderToFormat</I> will allocate and fill in a <I>Memory_Format_T</I> structure. <I>EndLearnNativeUnsignedLongFormat</I> will build a <I>Memory_Format_T</I> structure for the native <I>unsigned</I> <I>long </I>type in data space; this order may not apply in program space or to other data types. Both routines return NULL if out of memory or an error occurs. Callers should deallocate the memory allocated by those routines via the standard C <I>free</I> function. The source code for these functions is available electronically; see &quot;Availability,&quot; page 3.<P>
<h3><a name="01b0_008c">Big-Integer Routines<a name="01b0_008c"></h3><P>
Eventually, I want the assembler and simulator that I write for the 64-bit Big-endian MMIX computer to run on my 32-bit Little-endian computer. In the middle, I envision a set of big-integer routines that would perform (at least) 64-bit integer math on any ANSI/ISO C system. The big-integer routines would be useful for compilers, debuggers, encryption, and the like. (Contact me at 72634.2402@compuserve.com if you'd like to examine the &quot;draft standard&quot; for these routines.) My implementation of the big-integer library uses the endian engine; other implementations may vary.<P>
Sample big-integer routines are available electronically. The <I>BigAdd</I> routine adds two big integers using an optional layout. <I>BigAdd</I> calls <I>BigSwap</I> to convert each number to native layout. <I>BigSwap</I> uses the endian engine (<I>EndSwap</I>) to do the actual swap. Then <I>BigAdd</I> does the addition and calls <I>BigSwap</I> to convert the sum from native layout back to the caller's layout. The current version of <I>BigAdd</I> only supports one of the four usual representations for integers. In the future, I'll add support for two's complement, one's complement, and signed magnitude.<P>
The rep.h header (<a href="#01b0_0095">Listing One</A>) is shared between the big-integer routines and the endian engine. bigimpl.h (available electronically) and anything beginning with the prefix <I>Big_</I> are not intended for use outside my big-integer code.<P>
<h3><a name="01b0_008d">Endian-Engine Limitations<a name="01b0_008d"></h3><P>
I faced a dilemma when I wrote the endian engine. What should it do if asked to process an entity that isn't an exact multiple of the number of bits in a <I>char </I>in that implementation of C? Consequently, if, when swapping data, a destination is not an integral number of <I>char</I> values, then: <P>
<UL>
<li>Destination size is rounded up to an integral number of <I>char</I> values.</li>
<li>Additional bits of the destination have unspecified values after the swap.</li>
<li>Additional bits are located as if they were simply more high-order bits in their usual positions.</li>
</UL>
Also, the total number of bits (MAU sizexMAU count) for the destination and source must be identical.<P>
<h3><a name="01b0_008e">Design Decisions<a name="01b0_008e"></h3><P>
This version of the endian engine includes optimizations for the most common combinations of formats. <I>EndSwap</I> uses <I>EndSameFormat</I> (available electronically) to determine if a straight memory copy would be correct; if so, <I>EndSwap</I> calls <I>EndCopy</I> (also available electronically). The next optimization <I>EndSwap</I> tries is for simply reversed <I>char </I>order; it uses routines in <I>EndRev.c</I> (see &quot;Availability&quot;) to check for and handle that case.<P>
If it can't use either of those optimizations for a given case, <I>EndSwap</I> calls <I>EndSmallestMoveSize</I> to determine the maximum number of bits that it can move together in a single chunk. <I>EndSmallestMoveSize</I> bases this computation on the number of bits in a destination MAU, the source MAU size, and the native <I>char </I>size in bits. The smallest size into which those three things can be divided is the greatest common denominator (GCD) of those three numbers. <I>EndSwap</I> loops for each chunk of this number of bits. For the actual bit processing (such as moving groups of bits in the <I>EndSwap</I> routine), I use the bit-operation macros I described in my article &quot;Bit Operations with C Macros&quot; (<I>Dr. Dobb's Sourcebook of PowerPC Programming</I>, September/October 1995). The MVBITS (move bits) bitops.h macro is one used in the endian engine.<P>
Another possible optimization would be to build a table of &quot;moves&quot; for any given pair of formats. Each &quot;move&quot; would describe a set of contiguous bits in the source and how and where that set of bits would end up in the destination. Finally, the resulting table could be ordered so that only one pass over the destination would be necessary. (Perhaps this use of fewer writes would speed up some hardware caches.) Having built the moves table for a given pair of formats, I would cache it for later use. All this may seem like a lot of work, but it would probably only need to be done once.<P>
<h3><a name="01b0_008f">Picking Up the Pieces<a name="01b0_008f"></h3><P>
The only missing piece of the endian engine is a routine to compute the GCD of two unsigned numbers. The book <I>C: A Reference Manual</I>, Third Edition, by Samuel P. Harbison and Guy L. Steele, Jr. (Prentice-Hall, 1991), provides listings of GCD functions in C. The endimpl.h header (available electronically) declares <I>EndGCD</I> as a function. I suspect you could &quot;#define EndGCD gcd&quot; or whatever the name of your GCD routine is.<P>
You'll also need the bitops.h header (described in my previous article, which contains the MVBITS (move bits), BTEST (bit test), and IBSET (bit set) bit-operation macros.<P>
<h3><a name="01b0_0090">The Future: Prevention<a name="01b0_0090"></h3><P>
If you design a computer architecture, file formats, I/O interface, protocol, or the like, I strongly recommend you specify Big-endian order. In his classic paper &quot;On Holy Wars And A Plea For Peace,&quot; Danny Cohen said:<P>
<cite>To the best of my knowledge only the Big-Endians...have built systems with a consistent order which works across chunk-boundaries, registers, instructions and memories. I failed to find a Little-Endians' system which is totally consistent.</cite><P>
<h3><a name="01b0_0091">References<a name="01b0_0091"></h3><P>
ANSI X3.159-1989. American National Standard for Information Systems--Programming Language--C.<P>
<I>4.4BSD-Lite Berkeley Software Distribution CD-ROM</I>. Sebastopol, CA: O'Reilly &amp; Associates, 1994. <P>
Bolsky, M.I. <I>The C Programmer's Handbook</I>. Englewood Cliffs, NJ: Prentice-Hall, 1985. <P>
Cohen, Danny. &quot;On Holy Wars And A Plea For Peace.&quot; <I>USC Information Sciences Institute (ISI) IEN 137</I>. (April 1, 1980).<P>
Cullens, Chane. &quot;Serialization and MFC.&quot; <I>Dr. Dobb's Journal</I> (April 1995). <P>
Erdelsky, Philip J. &quot;Portable Byte Ordering in C++.&quot; <I>C/C++ Users Journal</I> (January 1995).<P>
Fairman, William and Randal Hoff. &quot;Cross-Platform Database Programming.&quot; <I>Dr. Dobb's Journal</I> (March 1995).<P>
Gillig, James R. &quot;Endian-Neutral Software.&quot; <I>Dr. Dobb's Journal</I> (October andNovember 1994).<P>
Harbison, Samuel P. and Guy L. Steele, Jr. <I>C: A Reference Manual</I>, Third Edition. Englewood Cliffs, NJ: Prentice-Hall, 1991. <P>
IEEE Std 695-1990. IEEE Standard for Microprocessor Universal Format for Object Modules. <P>
Plauger, P.J. &quot;You Must be Joking.&quot; <I>Computer Language</I> (April 1987). <P>
Rogers, John. <I>Draft Standard for Big Integer Routines for the C Programming Language</I>. Draft 0.1 (December, 1994). E-mail at 72634.2402@compuserve.com.<P>
--------. &quot;Bit Operations with C Macros.&quot; <I>Dr. Dobb's Sourcebook of PowerPC Programming </I>(September/October 1995).<P>
<a name="01b0_0092"><B>Table 1: Byte-order master list. Notation:</B> 4321 is Big-endian, and so on.<a name="01b0_0092">
<pre>
Processor          OS      Order          References

AT&amp;T 3B            Any     Big-endian     Bolsky
AT&amp;T 3B2           Any     *              Plauger
DEC PDP-11         Any     **             Bolsky, 4.4BSD-Lite source, Cohen, Plauger
DECsystem-10       Any     Big-endian     Cohen
DEC VAX            Any     ***            Bolsky, Cohen, DEC VAX-11 Programming Card, Plauger
Honeywell 6000     All     ****           Bolsky
HP-PA 7100         NT      Little-endian  Cullens
HP-PA 7100         UNIX    Big-endian     Cullens
IBM AS/400         Any     Big-endian     Gillig
IBM System/360     Any     Big-endian     Cohen
IBM System/370     Any     Big-endian     Cohen, Gillig, Plauger
Intel 80x86        Any     Little-endian  Bolsky, Cullens, Erdelsky, Fairman, Gillig
MIPS               NT      Little-endian  Cullens
MIPS               UNIX    Big-endian     Cullens
MMIX               Any     Big-endian     Knuth (1992 draft)
Motorola 680x0     Any     Big-endian     Cohen, Cullens, Erdelsky, Fairman, Gillig, Plauger
NSC16000           Any     Little-endian? Bolsky
NSC32016           Any     *****          Plauger
PowerPC            NT      Little-endian  Cullens, Gillig
PowerPC            Any     Big-endian     Cullens, Gillig
RS/6000            Any     Big-endian     Cullens, Fairman
SPARC              UNIX    Big-endian     Cullens
Zilog 8000         Any     Big-endian     Bolsky
*AT&amp;T 3B2: Depends on where data is stored:      32-bit integer (data space)     4321
                                                 32-bit integer (program space)  1234
**DEC PDP-11: Middle-endian:     16-bit integer     12
                                 32-bit integer     3412
                                 32-bit float (F)   3412
                                 64-bit float (D?)  78563412
***DEC VAX: Middle-endian:       16-bit integer     12
                                 32-bit integer     1234
                                 64-bit integer     12345678
                                 128-bit integer    123456789(10)(11)(12)(13)(14)(15)(16)
                                 32-bit float (F)   3412
                                 64-bit float (D)   78563412
                                 64-bit float (G)   ?
                                 128-bit float (H)  ?
                                 Packed decimal     78563412
****Honeywell: Big-endian, 36-bit system, with 9-bit characters!
*****NSC32016: Depends on where data is stored:     32-bit integer (data space)     1234
                                                    32-bit integer (program space)  4321
                                                    </pre>
<a name="01b0_0093"><B>Example 1:</B> Initializing Memory_Format_T structures for four different systems. <a name="01b0_0093">                           <pre> 
Memory_Format_T    BE_36_Format;  /* Big-endian 36-bit format. */
Memory_Format_T    Intel_32_Bit_Format;
Memory_Format_T    Motorola_32_Bit_Format;
Memory_Format_T    PDP11_Format;
MAU_Number_T       PDP11_Order[4] = {3,4,1,2};
/* Fill in big-endian 36-bit format, with 9-bit MAUs.
 * The Honeywell 6000 uses this format.
 */
BE_36_Format.MAU_Size_In_Bits = (Bit_Number_T) 9;
BE_36_Format.MAU_Order = BigEndian;
BE_36_Format.MAU_Count = (MAU_Number_T) 4;
BE_36_Format.MAU_References_Array = NULL;
/* Fill in Intel 32-bit (little-endian) format. */
Intel_32_Bit_Format.MAU_Size_In_Bits = (Bit_Number_T) 8;
Intel_32_Bit_Format.MAU_Order = LittleEndian;
Intel_32_Bit_Format.MAU_Count = (MAU_Number_T) 4;
Intel_32_Bit_Format.MAU_References_Array = NULL;
/* Fill in Motorola 32-bit (big-endian) format. */
Motorola_32_Bit_Format.MAU_Size_In_Bits = (Bit_Number_T) 8;
Motorola_32_Bit_Format.MAU_Order = BigEndian;
Motorola_32_Bit_Format.MAU_Count = (MAU_Number_T) 4;
Motorola_32_Bit_Format.MAU_References_Array = NULL;
/* Fill in PDP-11 middle-endian format. */
PDP11_Format.MAU_Size_In_Bits = (Bit_Number_T) 8;
PDP11_Format.MAU_Order = MiddleEndian;
PDP11_Format.MAU_Count = (MAU_Number_T) 4;
PDP11_Format.MAU_References_Array = PDP11_Order;</pre><P>
<P>
<h4><a name="01b0_0094"><a name="01b0_0095">Listing One<a name="01b0_0095"></h4><pre>
/* Rep.h -- Copyright (c) 1995 by JR (John Rogers). All rights reserved.
 * AUTHOR - JR (John Rogers), 72634.2402@CompuServe.com */
/* Gracefully allow multiple includes of this file. */
#ifndef REP_H
#define REP_H
typedef enum {
   NoSign, OnesComplement, SignedMagnitude, TwosComplement
} Int_Rep_T;
typedef enum {
   BigEndian, LittleEndian, MiddleEndian
} MAU_Order_T;
/* This must have a range of at least 0..64 */
typedef unsigned char  Bit_Number_T;
/* This must have a range of at least 0..64 */
typedef unsigned char  MAU_Number_T;
typedef struct {
   MAU_Order_T     MauOrder;
   Int_Rep_T       IntRep;
   Bit_Number_T    BitsPerMau;
   /* This next field must be NULL if MauOrder is
    * BigEndian or LittleEndian. */
   MAU_Number_T *  MAU_References_Array;
} Int_Rep_And_Format_T;
#endif
</pre>
<h4><a name="01b0_0096"><a name="01b0_0097">Listing Two<a name="01b0_0097"></h4><pre>
/* End.h -- Copyright (c) 1995 by JR (John Rogers). All rights reserved.
 * AUTHOR - JR (John Rogers) 72634.2402@CompuServe.com */
/* Gracefully allow multiple includes of this file. */
#ifndef END_H
#define END_H
/******************* I N C L U D E S *****************/
#include &lt;boolean.h&gt;    /* Boolean_T. */
#include &lt;rep.h&gt;        /* MAU_Number_T, etc. */
/************************ T Y P E S ******************/
typedef struct {
   MAU_Order_T     MAU_Order;
   Bit_Number_T    MAU_Size_In_Bits;
   MAU_Number_T    MAU_Count;
   /* This next field must be NULL if MAU_Order is BigEndian or LittleEndian.
    * A big-endian value would be treated as equivalent as an array of
    * {4,3,2,1} values for this, if MAU_Count happens to be 4. */
   MAU_Number_T *  MAU_References_Array;
} Memory_Format_T;
/******************* R O U T I N E S  ****************/
Memory_Format_T *    /* Return NULL on error. Use free() when done. */
EndBSDByteOrderToFormat(
   int  Byte_Order_Digits); /* 4321 = big-endian. */
Memory_Format_T *    /* Return NULL on error. Use free() when done. */
EndLearnNativeUnsignedLongFormat(
   void);
/* Boolean_T
 * EndMAUReferenceValid(
 *    MAU_Number_T       ref,
 *    MAU_Number_T       number_of_MAUs);
 */
#define EndMAUReferenceValid( ref, number_of_MAUs ) \
      ( \
         ( (ref) &gt; (MAU_Number_T) 0 )  \
         &amp;&amp; ( (ref) &lt;= (number_of_MAUs) ) \
      )
Boolean_T
EndSameFormat(
   const Memory_Format_T * One,
   const Memory_Format_T * Another);
void
EndSwap(
   void *                   Dest,
   const void *             Src,
   const Memory_Format_T *  Dest_Format,
   const Memory_Format_T *  Src_Format);
/* Bit_Number_T
 * EndTotalBits(
 *    Memory_Format_T *  Format);
 */
#define EndTotalBits(Format) \
   ( (Bit_Number_T) ( \
      ((Format)-&gt;MAU_Count) \
      * ((Format)-&gt;MAU_Size_In_Bits) ) )
Boolean_T
EndValidFormat(
   const Memory_Format_T * Format);
#endif
</pre>
<h4><a name="01b0_0098"><a name="01b0_0099">Listing Three<a name="01b0_0099"></h4><pre>
/* EndSwap.c -- Copyright (c) 1995 by JR (John Rogers). All rights reserved.
 * POLICIES - This version of the endian engine implements the
 *    following policies when swapping data: If a destination is not an 
 *    integral number of parts (chars), then:
 *       a) the destination size is rounded up to an integral number of parts.
 *       b) the additional bits have unspecified values after the swap.
 *    The total number of bits (MAU size times MAU count) for the destination 
 *    and source must be identical.
 * AUTHOR - JR (John Rogers) 72634.2402@CompuServe.com
 */
#include &lt;assert.h&gt;     /* assert */
#include &quot;bitops.h&quot;     /* MVBITS(). */
#include &lt;end.h&gt;        /* EndSameFormat(). */
#include &quot;endimpl.h&quot;    /* Moves_T, etc. */
#include &lt;stddef.h&gt;     /* NULL */
void
EndSwap(
   void *                   Dest,
   const void *             Src,
   const Memory_Format_T *  Dest_Format,
   const Memory_Format_T *  Src_Format)
{
   Bit_Number_T    Bits_Left;
   Part_T *        Dest_Parts = (Part_T *) Dest;
   Bit_Number_T    Dest_Total_Bits;
   Bit_Number_T    Low_Logical_Bit_Of_Chunk;
   Bit_Number_T    Smallest_Move;
   const Part_T *  Src_Parts = (Part_T *) Src;
   Bit_Number_T    Src_Total_Bits;
   /* Validate caller's arguments. */
   assert( EndValidFormat( Dest_Format ) );
   Dest_Total_Bits = EndTotalBits(Dest_Format);
   assert( Dest_Total_Bits &gt; (Bit_Number_T) 0 );
   assert( EndValidFormat( Src_Format ) );
   Src_Total_Bits = EndTotalBits(Src_Format);
   assert( Src_Total_Bits &gt; (Bit_Number_T) 0 );
   assert( Src_Total_Bits == Dest_Total_Bits );
   assert( Src != Dest );
   /* Handle easiest case: same format. */
   if (EndSameFormat( Dest_Format, Src_Format)) {
      EndCopy( Dest, Src, Dest_Format );
      return;
   }
   /* Handle next most easy case: one format is reverse of the other. */
   if (EndIsReversePartsFormat(Dest_Format, Src_Format)) {
      EndReverseParts(
            Dest, Src, EndNumberOfParts(Dest_Format) );
      return;
   }
   /* Compute smallest chunk size we can move and not overlap two MAUs 
    * or two parts. */
   Smallest_Move = EndSmallestMoveSize(
         Dest_Format, Src_Format);
   assert( Smallest_Move &gt; (Bit_Number_T) 0 );
   /* Loop for each same-size chunk. */
   Low_Logical_Bit_Of_Chunk = (Bit_Number_T) 0;
   for (Bits_Left = Dest_Total_Bits;
         Bits_Left &gt; (Bit_Number_T) 0;
         Bits_Left = Bits_Left - Smallest_Move) {
      Bit_Number_T  Dest_Raw_Bit_Number_In_Part;
      MAU_Number_T  Dest_Raw_Part_Index;
      Bit_Number_T  Src_Raw_Bit_Number_In_Part;
      MAU_Number_T  Src_Raw_Part_Index;
      assert( Low_Logical_Bit_Of_Chunk &lt; Src_Total_Bits );
      /* Find this dest bit. */
      EndFindRawBit(
            Low_Logical_Bit_Of_Chunk, &amp; Dest_Raw_Part_Index,
            &amp; Dest_Raw_Bit_Number_In_Part, Dest_Format);
      /* Find this source bit. */
      EndFindRawBit(
            Low_Logical_Bit_Of_Chunk, &amp; Src_Raw_Part_Index,
            &amp; Src_Raw_Bit_Number_In_Part, Src_Format);
      /* At last, move a chunk! */
      MVBITS(
            Src_Parts[Src_Raw_Part_Index],      /* src */
            Src_Raw_Bit_Number_In_Part,         /* srcindex */
            Smallest_Move,                      /* len */
            &amp; Dest_Parts[Dest_Raw_Part_Index],  /* destptr */
            Dest_Raw_Bit_Number_In_Part,        /* destindex */
            Part_T);                            /* type */
      /* Bump to next chunk. */
      Low_Logical_Bit_Of_Chunk += Smallest_Move;
   }
}
</pre>
<h4><a name="01b0_009a"><a name="01b0_009b">Listing Four <a name="01b0_009b"></h4><pre>
/* BigSwap.c -- Copyright (c) 1995 by JR (John Rogers). All rights reserved.
 * POLICIES - This version of the endian engine implements the
 *    following policies when swapping data: If a destination is not an 
 *    integral number of parts (chars), then:
 *       a) the destination size is rounded up to an integral number of parts.
 *       b) the additional bits have unspecified values after the swap.
 *          The total number of bits (MAU size times MAU count) for the 
 *          destination and source must be identical.
 * AUTHOR - JR (John Rogers) 72634.2402@CompuServe.com */
#include &lt;assert.h&gt;     /* assert */
#include &quot;bigimpl.h&quot;    /* Big_LayoutToFormat(). */
#include &lt;bigint.h&gt;     /* Big_Int_T, my prototype, etc. */
#include &lt;end.h&gt;        /* EndSameFormat(). */
#include &lt;stddef.h&gt;     /* NULL */
void BigSwap(
   Big_Int_T * Dest, const Big_Int_T * Src,
   const Int_Rep_And_Format_T * Dest_Layout,
   const Int_Rep_And_Format_T * Src_Layout)
{
   Memory_Format_T  Dest_Format;
   Memory_Format_T  Src_Format;
   /* Set global native format, just in case. */
   if ( !Big_Done_Global_Setup ) {
      Big_GlobalSetup();
   }
   assert( Big_Native_Layout != NULL );  /* out of memory? */
   assert( Big_End_Native_Format != NULL );
   /* Need format (for dest) that endian engine can handle. */
   if (Dest_Layout != NULL) {
      Big_LayoutToFormat( &amp;Dest_Format, Dest_Layout );
   } else {
      Dest_Format = *Big_End_Native_Format;
   }
   assert( EndValidFormat( &amp;Dest_Format ) );
   /* Repeat that for the source. */
   if (Src_Layout != NULL) {
      Big_LayoutToFormat( &amp;Src_Format, Src_Layout );
   } else {
      Src_Format = *Big_End_Native_Format;
   }
   assert( EndValidFormat( &amp;Src_Format ) );
   /* Call endian engine to swap the bits. */
   EndSwap(
         Dest, Src, &amp;Dest_Format, &amp;Src_Format);
}
ORACLE CALL INTERFACE
</pre>
<h4><a name="01b0_009c"><a name="01b0_009d">Listing One<a name="01b0_009d"></h4><pre>
//////////////////////////////////////////////////////////////////////
//  DBConnection Implementation
//////////////////////////////////////////////////////////////////////
#include &lt;dbobject.h&gt;
// Default Constructor
DBConnection::DBConnection()
{  
   m_pLoginCursor = 0;
   Reset();
}
// Constructor with access string
DBConnection::DBConnection(const char *AccessString)
{
   m_pLoginCursor = 0;
   Connect(AccessString);
}  
DBConnection::~DBConnection()
{
  if (IsConnected()) {
     Disconnect();
  }
  delete m_pLoginCursor;
}
short DBConnection::Disconnect()
{
  if (IsConnected()) {
      if (ologof(m_pLoginCursor)) {
         SetDBError(m_pLoginCursor-&gt;csrarc,DBErrorMsg(m_pLoginCursor-&gt;csrrc));
         SetError(-210, m_pUserName); 
     return 0;
      }
      else {
         Reset();
         m_nIsConnected = 0;
         return 1;
      }
  }
  else {
     SetError(-203, NOLOGIN_CURSOR );
     return 0;
  }
}
short DBConnection::Connect(const char *pAccess)
{
    if (! m_pLoginCursor) { 
       m_pLoginCursor = new DBOBJLOGIN;
       if (!m_pLoginCursor) {
          SetError(-100, ALLOCATION_ERROR); 
          return 0;
       }
    }
    if (!*pAccess) {
       SetError(-200, NULLACCESSS_STRING);
       return 0;
    }
    char *pPassWrd = strchr(pAccess, '/');
    if (!pPassWrd) {
       SetError(-201, NOPASSWORD);
       return 0;
    }
    pPassWrd++; // past the '/'
    int  UserLen = strlen(pAccess) - strlen(pPassWrd);
    char User[30];
    if (UserLen &gt; 30) UserLen = 30; // truncate
    strncpy(User, pAccess, UserLen-1 );
    User[UserLen-1] = 0;     
     
    // Copy to member 
    strcpy(m_pUserName, User);
    if (orlon(m_pLoginCursor, hda, (char*)pAccess)) {
        SetDBError(m_pLoginCursor-&gt;csrarc, DBErrorMsg(m_pLoginCursor-&gt;csrrc) );
        SetError(-205, m_pUserName);
        return 0;
    }
    Reset();
    m_nIsConnected = 1;
    return 1;
}
short DBConnection::Commit()
{
    if (m_pLoginCursor) {
        if (ocom(m_pLoginCursor)) {
      SetDBError(m_pLoginCursor-&gt;csrarc,DBErrorMsg(m_pLoginCursor-&gt;csrrc));
          SetError(-206, m_pUserName); 
          return 0;
        }
        Reset();
        return 1;       
     }
     else {
      SetDBError(m_pLoginCursor-&gt;csrarc,DBErrorMsg(m_pLoginCursor-&gt;csrrc));
          SetError(-202, m_pUserName);
     }    
     Reset();
     return 1;
}
short DBConnection::SetAutoCommit(short OnOrOff)
{
   if (m_pLoginCursor) {
      if (OnOrOff == 1) {
         if (ocon(m_pLoginCursor)) {
      SetDBError(m_pLoginCursor-&gt;csrarc,DBErrorMsg(m_pLoginCursor-&gt;csrrc));
          SetError(-206, m_pUserName); 
          return 0;
         }
         else {
           Reset();
           return 1;
         } 
      }
      else {
         if (ocof(m_pLoginCursor)) {
      SetDBError(m_pLoginCursor-&gt;csrarc,DBErrorMsg(m_pLoginCursor-&gt;csrrc));
          SetError(-206, m_pUserName); 
          return 0;
         }
         else {
           Reset();
           return 1;
         }
      }
   }
   else {
      SetDBError(m_pLoginCursor-&gt;csrarc, DBErrorMsg(m_pLoginCursor-&gt;csrrc) );
      SetError(201, &quot;No Oracle Login Object Defined&quot;);
      return 0;
    }
}
short DBConnection::Rollback()
{
   if (m_pLoginCursor) {
      if (orol(m_pLoginCursor)) {
      SetDBError(m_pLoginCursor-&gt;csrarc,DBErrorMsg(m_pLoginCursor-&gt;csrrc));
          SetError(-206, m_pUserName); 
          return 0;
      }
      else {
          Reset();
          return 1;
      }
   }
   else {
      SetDBError(m_pLoginCursor-&gt;csrarc, DBErrorMsg(m_pLoginCursor-&gt;csrrc));
      SetError(201, NOLOGIN_CURSOR);
      return 0;
   }
}
const char* DBConnection::DBErrorMsg(int ErrorNo)
{
    if (m_pLoginCursor) {
       static char ExceptionBuffer[MAX_DBMSG];
       memset(ExceptionBuffer,0, MAX_DBMSG);
       oerhms(m_pLoginCursor, ErrorNo, ExceptionBuffer, MAX_DBMSG-1);
       return ExceptionBuffer;
    }
    else {
       SetError(-203, NOLOGIN_CURSOR);
       return &quot;&quot;;
    }        
}
</pre>

<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
