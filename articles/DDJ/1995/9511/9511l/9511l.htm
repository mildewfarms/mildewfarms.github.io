<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>NOV95: C PROGRAMMING</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>C PROGRAMMING<a name="01e6_009a"><a name="01e6_0098"><a name="01e6_0000"></h1><P>
<h2>A C++ Ray-Casting Engine</h2><P>
<h3>Al Stevens</h3><P>
<a name="01e6_0099"><a name="01e6_0000">Last spring's <I>Dr. Dobb's Sourcebook of Games Programming</I> (May/June 1995) included the article &quot;Ray Casting in C++,&quot; by Mark Seminatore. The article was timely for me, because at the time I was casting about (har, har) for a ray-casting algorithm to use in a C++ book about Windows games programming.<P>
Ray casting is the technique that many 3-D game programs use to render and animate scenes that occur within a maze of perpendicular walls of a uniform height. The algorithm uses texture mapping to render walls, doors, props, and sprites. The ray-casting algorithm Mark implemented supports scenes similar to those in Wolfenstein, an early 3-D maze game. More-contemporary games use more-complex and better-optimized algorithms to support texture-mapped floors and ceilings, stairs, sloping and angular hallways, and player movement in three axes (pitch, yaw, and roll). My requirements are satisfied by the earlier technology, which is fortunate, since those techniques have been published and are widely understood.<P>
Mark's article addressed the concepts behind ray casting in some detail. He also explained how to use assembly language to optimize the algorithm. Two books, <I>Tricks of the Game Programming Gurus</I>, by LaMothe, Ratcliff, Seminatore, and Tyler (Sams Publishing, 1994) and <I>Gardens of Imagination</I>, by Christopher Lampton (Waite Group Press, 1994) also provide explanations of ray casting and source code that implements the algorithm. Mark's ray caster and the one in the <I>Gurus</I> book are similar, although he did not write the chapter on ray casting.<P>
I downloaded Mark's program and dissected it to see how adaptable it was to my needs. The algorithm is well implemented, but I wanted to change or add several things. Mark built his ray caster as a C library with functions that you can call from a C or C++ program. I wanted mine to be pure C++ because I wanted to make many modifications and I am more comfortable with C++. I also made changes to the following items:<P>
<UL>
<li>The program supports only one size viewport, a 240x120 window in a 320x 200 graphics resolution display, and I wanted a resizable viewport up to full-screen.</li>
<li>Mark's ray caster does not support doors that open and close in the maze.</li>
<li>There is no support for props in the maze scene, such as potted plants, tables, and so on.</li>
<li>The player is confined to the inner corridors of the maze. My program needs to take the player outside the maze to view the outer walls.</li>
<li>There is no provision for displaying a map of the maze, which I need, at least for testing.</li>
<li>There is no support for inserting animated characters in the scene. In fact, none of the published algorithms include that feature, which limits the kind of game you can design. What fun is wandering around an unpopulated maze? You need monsters, bad guys, and banjo players, and that implies support for animated sprites.</li>
<li>The ray caster in the <I>Gurus</I> book uses matching pairs of wall tiles with one of each pair being darker than the other. I modified the maze logic to include this feature. The darker tiles display on the x walls, and the lighter tiles display on the y walls. This adds to the effect of depth in the maze.</li>
<li>Finally, the C ray caster does not support corridors longer than some maximum length, which depends on the current viewing angle. I corrected that problem at the expense of CPU cycles by using floating-point math for the distance computation. If you build a maze with short corridors and no large outside spaces, you can recover those cycles by removing the LONGCORRIDORS global variable in consts.h.</li>
</UL>
I used Wolfenstein as a model for a 3-D maze engine to allow programmers to design game programs with all of its features. It's not there yet, but it's close, close enough to be the subject of a &quot;C Programming&quot; column project.<P>
I used Mark's code only to determine how the algorithms work. My code is a complete rewrite in C++ rather than a wrapper around a C library. This decision was not meant to diminish his achievement, which is significant, but rather to produce an enhanced library, one with the features that I need in my simulation.<P>
My first objective was to match the performance of the C version of the ray caster by implementing only the features that Mark supports. In addition to the C ray caster, he published an optimized version with the time-critical functions rewritten in assembly language. It's really fast, but his C version is plenty fast enough on my 4DX2-66V. That configuration, which was leading-edge technology not long ago, has sunk to the low end of mainstream hardware in these days of behemoth operating systems and compilers. I figure that with the old 486 as a target, I'll be okay. The project will eventually be ported to a Windows 95 program, and anyone with anything much slower than a 486/66 won't like Windows 95, anyway. For that reason, I decided to hand code only those optimizations that I can do in C++.<P>
The first version of &quot;Raycast,&quot; my unimaginative name for the project, matched the frames-per-second performance reported by Mark's C program when it terminates. By tweaking some loops, I was able to outrun the earlier program, but as I add features, the engine is becoming progressively slower. My objective is to achieve a rate of frames per second fast enough that a game has sufficient residual processing cycles between frames to do game-specific chores, such as keeping score, moving sprites around, playing sound effects, and so on.<P>
The Raycast engine published here supports DOS programs. The final version, to be published in the book, will run under Windows, probably with the fast video drivers that come with the new Microsoft Game SDK. I'll discuss the engine's interface from a programmer-user's point of view. The code published with this column shows how to use the engine. The code for the engine itself can be downloaded or sent for.<P>
<h3><a name="01e6_009b">The Maze<a name="01e6_009b"></h3><P>
<a href="#01e6_00a7">Listing One</A> is maze.dat. Each character position represents a cell in the maze. The &quot;1&quot; characters are wall tiles. In this example I use only one wall tile, although there could be many. If you wanted tapestries, walls with graffiti, walls with pictures, and walls with textures other than the dull, prison-like concrete block walls in my example, you would build appropriate PCX files and add them to the game. The &quot;D,&quot; &quot;d,&quot; &quot;E,&quot; and &quot;e&quot; characters in the maze represent doors. The &quot;D&quot; and &quot;E&quot; doors are those that you face in the y direction; the &quot;d&quot; and &quot;e&quot; doors are faced in the x direction. There is one &quot;G&quot; character in the maze, which represents a flower pot. The logic for displaying this flower pot and other props and characters with transparent qualities is not yet complete. I'll update the library when I finish that part.<P>
The maze consists of 64 lines of text with 64 characters each. The blank lines in the maze have 64 space characters.<P>
<h3><a name="01e6_009c">Modifying System Parameters<a name="01e6_009c"></h3><P>
<a href="#01e6_00a9">Listing Two</A> is consts.h. This file contains constant values and some inline functions that the program uses. You can modify some of these values to change how the program operates. I've already discussed the LONGCORRIDORS global constant. The <I>viewangle</I> variable defines the width of the scene that you can see. It can be any value between 30 and 90, but 60 seems to provide a realistic rendering.<P>
There are four values for specifying the default viewport, which I have set to a full-screen view. The values identify the screen coordinates for the upper-left corner of the viewport and its height and width. The program uses the <I>videomode</I>, <I>screenheight</I>, and <I>screenwidth</I> constants. To use a different mode and resolution, you must modify the VGA class to operate with those parameters.<P>
Four constants specify the closest you can get to a wall when moving around and the furthest you can be from a door and still open it. There are constants that identify bitmap numbers associated with texture tiles. Those constants figure prominently in some inline functions later in the file.<P>
The <I>mazewidth</I> and <I>mazeheight</I> constants specify the dimensions of the maze in tiles. The <I>tilewidth</I> and <I>tileheight</I> constants specify the dimensions of each texture-mapping tile in pixels. All those values are 64 in the existing implementation.<P>
There are three constants each for the number of increments of movement for each step and the number of degrees of rotation for each turn when the game player moves around in the maze. There are <I>Faster</I> and <I>Slower</I> functions in the <I>RayCaster</I> class that use these values.<P>
The algorithm uses the inline functions <I>isWall</I>, <I>isDoor</I>, <I>isProp</I>, <I>isAutomaticDoor</I>, and <I>isTransparent</I> to determine the properties of a tile. If you add texture-mapping tiles to the game beyond those in the example, you must modify not only the bitmap numbers mentioned earlier, but also the inline functions. A prop is a stationary tile with transparent parts. The image for a prop is cast as a flat surface positioned in the center of the tile space. A prop always faces the player. An automatic door is one that opens when you move close to it. Other doors must be opened and closed by a call to the <I>RayCaster::OpenCloseDoor</I> function. The <I>isTransparent</I> function returns True if the tile has transparent properties. Doors, props, and (later) sprites have transparent properties. The <I>Maze</I> class is sensitive to the bitmap numbers that you assign, so if you add texture tiles, you must look into that code as well. It should be obvious what code needs to be modified.<P>
<h3><a name="01e6_009d">The Keyboard<a name="01e6_009d"></h3><P>
The <I>RayCaster</I> class encapsulates only the video parts of a game program. To demonstrate the engine, you need to use the keyboard. Keyboard operations in a game program usually differ from those in other programs. The player can hold down several keys at once and the program must acknowledge them appropriately. To support that kind of keyboard operation, I built a <I>Keyboard</I> class. <a href="#01e6_00ab">Listing Three</A> is keyboard.h, which declares the class. The listing begins with a number of constants to define key values that are not in the ASCII character set. For example, there is no ASCII value for the Alt key. After declaring an object of type <I>Keyboard</I>, the program can call two functions to interrogate the keyboard.<P>
The <I>wasPressed</I> function tests to see if the key specified in the argument is now being pressed. If so, the function waits until the key is no longer being pressed and then returns True; otherwise it returns False.<P>
The <I>isKeyDown</I> function returns True immediately if the key is being held down at the time of the call. The function does not wait for the key to be released before returning.<P>
<h3><a name="01e6_009e">The Ray Caster<a name="01e6_009e"></h3><P>
<a href="#01e6_00ad">Listing Four</A> is raycast.h, the header file that declares the <I>RayCaster</I> class. It's a complicated class, and I'll describe its public interface. You construct a <I>RayCaster</I> object by passing the name of the maze file, a pointer to an array of <I>char</I> pointers that specify the PCX files of the texture-mapping tiles, the initial x- and y-coordinates, and viewing angle of the player. You can also specify a <I>ViewPort</I> object as the last argument to start out with other than the default full-screen ray caster. Many games use part of the screen to display other things.<P>
The <I>DrawFrame</I> function displays one frame on the screen based on those values. The <I>SetPosition</I> function changes those values, and <I>GetPosition</I> retrieves the current settings. Four functions move the player one step through the maze in the four cardinal directions relative to the player's current view angle. Two functions rotate the player a specified number of degrees to the right or left. If the degrees argument is 0, the functions use the values from consts.h. The <I>ToggleMap</I> function displays and hides the maze map. The <I>OpenCloseDoor</I> function opens or closes a door if the player is close enough to one. The <I>isInDoorway</I> function returns True if the player is in the specified doorway. The <I>Slower</I> and <I>Faster</I> functions change the player's speed of motion. If you are debugging, the <I>TraceFrame</I> function enables <I>trace</I> and <I>tracend</I> macros to display values on the standard output device during the next execution of <I>DisplayFrame</I>.<P>
<h3><a name="01e6_009f">The Game Program<a name="01e6_009f"></h3><P>
<a href="#01e6_00af">Listing Five</A> is main.cpp, which, together with maze.dat and a set of PCX files, constitutes an example game. An array of character pointers in main.cpp identifies the PCX files. The order of this array must correspond with the constants defined in consts.h. Therefore, WALL01.PCX represents bitmap tile number 1, and so on. The array of <I>ViewPort</I> objects represents a set of viewport sizes that this game allows the user to step through.<P>
The program starts by declaring a <I>RayCaster</I> object from the free store. Then it loops until the player presses the Esc key. Each time through the loop, the program calls the <I>DisplayFrame</I> function. Then it tests to see if the player has pressed any important keys. The up- and down-arrow keys move the player forward and backward. The right- and left-arrow keys rotate the player one increment unless the Alt key is also being pressed, in which case the player moves sideways. The spacebar opens and closes doors, the Ins key toggles the map display, the F and S keys make the player move faster and slower, and the plus and minus keys increase and decrease the size of the viewport. Changing the viewport size involves a lot of recalculating, so the program simply deletes the current <I>RayCaster</I> object and constructs a new one with the new <I>ViewPort</I> object.<P>
The try/catch mechanism is compiled only when you are debugging. Otherwise, exception handling is disabled by the makefile to avoid the overhead that exceptions impose on each function with automatic class objects.<P>
The game program calls <I>VGA::ResetVideo</I> when the game is over to depart from graphics mode. The <I>RayCaster</I> destructor does not do this automatically: This prevents changes in viewport size from invoking video mode resets and the attendant flicker.<P>
<h3><a name="01e6_00a0">The PCX Files<a name="01e6_00a0"></h3><P>
The PCX files are built with a paint program. They have a resolution of 64x64 pixels and 256 colors. They should all use compatible palettes. Palette color 0 is reserved for transparent parts of the image.<P>
<h3><a name="01e6_00a1">Another Reason to Avoid <I>goto</I>s<a name="01e6_00a1"></h3><P>
One of the unavoidable aspects of teaching C involves the dreaded <I>goto</I> statement. For many years now, programmers have been conditioned to shrink in horror from any code that uses <I>goto</I>. Language gurus preach loudly that <I>goto</I> is unnecessary, unstructured, and unwise. Structured programming zealots assert with authority that any algorithm known to mankind and other species can be expressed using only the three constructs of structured programming: sequence, selection, and iteration. I and many others have fallen sway to that ideology, yet, most modern programming languages, including Pascal, which was designed to teach structured programming, support a <I>goto</I> statement, implying that there must be a reason for it. Therefore, when we teach those languages, we first teach the behavior of the <I>goto</I> statement, then we teach caution in its use.<P>
Many books teach that <I>goto</I> in C can be used to jump out of nested loops, where a simple break statement would break out of only the innermost loop. To preserve structure, you can cause the outer loops to respond to the breaking condition, but that usually requires extra Boolean variables or tests that a simple <I>goto</I> can avoid. <a href="#01e6_00a3">Example 1</A> illustrates this point. If there are situations where you want to break out of the j loop without breaking out of the i loop, <a href="#01e6_00a3">Example 1</A> does not work. You need to contrive a Boolean variable and test it, as in <a href="#01e6_00a4">Example 2</A>.<P>
There is nothing wrong with either of these programming idioms. They preserve structure, avoid <I>goto</I>s, and work. However, when optimization and performance are your goals, the propriety of structure can help to defeat your purpose. If the loops exist in a time-critical operation, such as the sweeps in a ray caster, such code can seriously degrade performance in the name of structure. The initialization and testing of that <I>bool</I> variable in <a href="#01e6_00a4">Example 2</A> costs processor cycles. A peek at the assembly-language code generated by the compiler illustrates this point. <a href="#01e6_00a5">Example 3</A> shows that using a <I>goto</I> produces tighter code, which might make the difference between a successful time-critical program and a turkey.<P>
Last week, I taught an introductory C course to a class of 15 aerospace engineers. The course is the first in a series of two one-week sessions that teach C and C++ to people who already understand programming. Presumably, they will take the intervening three weeks to practice C and become familiar with its syntax so that they can tackle the C++ extensions comfortably.<P>
When we got to the <I>goto</I> exercises, I discussed what I just presented in the three examples and then reinforced the structured-programming position by stating that in over ten years of publishing code, I had used the <I>goto</I> statement only in exercises that illustrate its behavior.<P>
Then I added that my experiences with the ray caster might necessarily change that track record. I explained that I might finally have found a valid reason for using the <I>goto</I> statement in a C or C++ program, and pointed to one such statement on the projected screen. I said, however, that if the structured-programming gods could hear me say that, they would no doubt strike me down with a lightning bolt. At that very moment, the bulb burned out in the overhead projector.<P>
You have been warned.<P>
<h3><a name="01e6_00a2">Source Code<a name="01e6_00a2"></h3><P>
The source-code files for the Raycast project are free. You can download them from the DDJ Forum on CompuServe, on the Internet by anonymous ftp, and from DDJ Online; see &quot;Availability,&quot; page 3.<P>
If you cannot get to one of the online sources, send a 3.5-inch diskette and an addressed, stamped mailer to me at <I>Dr. Dobb's Journal</I>, 411 Borel Avenue, San Mateo, CA 94402, and I'll send you the source code. Make sure to include a note specifying which project you want. The code is free, but if you care to support my Careware charity, include a dollar for the Brevard County Food Bank.<P>
<a name="01e6_00a3"><B>Example 1:</B> Causing outer loops to respond to the breaking condition.<a name="01e6_00a3"><pre>
for (i = 0; i &lt; MAXI; i++)   {
  for (j = 0; j &lt; MAXJ; j++   {
    if ( breaking_condition )
// whatever it is
      break;
    // ...
  }
  if (j &lt; MAXJ)  
// contrived condition
    break;
  // ...
}</pre>
<a name="01e6_00a4"><B>Example 2:</B> Testing a Boolean variable.<a name="01e6_00a4"><pre>
for (i = 0; i &lt; MAXI; i++)   {
  bool breaking = false; 
// contrived variable
  for (j = 0; j &lt; MAXJ; j++   {
    if ( breaking_condition )   {
      breaking = true;
      break;
    }
    // ...
  }
  if (breaking == true)
    break;
  // ...
}</pre>
<a name="01e6_00a5"><B>Example 3:</B> A goto can produce tight code for time-critical programs<a name="01e6_00a5"><pre>
  for (i = 0; i &lt; MAXI; i++)   {
    for (j = 0; j &lt; MAXJ; j++   {
      if ( breaking_condition }
         goto breakout;
      // ...
    }
    // ...
  }
breakout:
  // ...</pre><P>
<P>
<h4><a name="01e6_00a6"><a name="01e6_00a7">Listing One<a name="01e6_00a7"></h4><pre>
                                                                
   11111111111111111111111111E1111111111111111111111111111111   
   1                                                        e   
   111D111111111111111111111   111111111111111111111111111111   
   1     1                                            1     1   
   1     1                                            1     1   
   1     d   11111111111111     1111111111111111111   d     1   
   1     1               11                      11   1     1   
   1     1   11111  1111111     111111111111111  11   1     1   
   1111111   11     111111111D111                11   1111111   
   1     1   111111     111     1  1111111111111111   1     1   
   1     1   111111111 1111     1                11   1     1   
   e     d   11111111  111111   1111111111111 11111   d     1   
   1     1   1111                       1  1   1111   1     1   
   1     1   1111                       1  1   1111   1     1   
   1111111   1111        111D111        1  d   1111   1111111   
   1     1   1111        1     1        1  1    1     1     1   
   1     1   1111        1     1        1  1    1     1     1   
   1     d   1111        1     1        1  1    1     d     1   
   1     1   1111        111G111        d  1    1     1     1   
   1     1   1111           1           1  1    d     1     1   
   1111111   1111           1           1  1    1     1111111   
   1     1   1111111111111111111D111111111111 11111   1     1   
   1     1   1111  1                           1111   1     1   
   1     d   1111                              1111   d     e   
   1     1   1111111111111111111D111111111111111111   1     1   
   1     1   1111                1  1     1    1111   1     1   
   1111111   1111 1111111111111111  1  1 1   1 1111   1111111   
   1     1   1111      1            1  1 11  1 1111   1     1   
   1     1   111111111 1 111111111111  1 1  11 1111   1     1   
   1     d   1111      1               1   111 1111   d     1   
   1     1   111111 111111 11D111111111111 11111111   1     1   
   1     1   111111        11 1                   1   1     1   
   1111111   1111111111111111 11111111D111111111111   111D111   
   1111111                                                111   
   1111111                                            1111111   
   1111111111111111111111111111111E11111111111111111111111111   
                                                                
 11111111111                                                    
 1         1                                                    
 1         d                                                    
 1         1                                                    
 1         1                                                    
 11111111111                                                    
                                                                
</pre>
<h4><a name="01e6_00a8"><a name="01e6_00a9">Listing Two<a name="01e6_00a9"></h4><pre>
// ------------ consts.h
#ifndef CONSTS_H
#define CONSTS_H
// data types
typedef short INT;              // 16 bits
typedef unsigned short UINT;    // 16 bits
typedef long LONG;              // 32 bits
typedef unsigned long DWORD;    // 32 bits
typedef unsigned short int bool;
const bool false = 0;
const bool true  = 1;
// these are values to change to modify the raycasting algorithm
#define LONGCORRIDORS
const INT viewangle      =    60;   // viewing angle
const INT defx           =     0;   // default x
const INT defy           =     0;   // default y
const INT defviewwidth   =   320;   // default viewing width
const INT defviewheight  =   200;   // default viewing height
const INT videomode   = 0x13;   // 320 x 200 x 256
const INT screenwidth =  320;   // horizontal screen resolution
const INT screenheight = 200;   // vertical screen resolution
const INT hitwallforward   =  64;    // closest you can get to a wall
const INT hitwallsideways  =   8;    // closest you can get to a wall
const INT hitwallbackwards =  64;    // closest you can get to a wall
const INT doordistance     = 128;    // furthest from door to open door
const INT maxoverlays =   20;   // maximum transparent tile overlays
const INT mindistance =   10;   // minimum distance cast to wall
const INT maxdistance = 2048;   // maximum distance cast to wall
const INT maxheight   = 1024;
const INT bitmapcount  =  30;   // maximum number of tile bitmaps
const INT doorjam1     =   3;   // bitmap # for doorjam
const INT doorjam2     =   5;   // bitmap # for doorjam
const INT door1        =   7;   // bitmap # for door1
const INT door2        =  16;   // bitmap # for door2
const INT flowerpot    =  25;   // bitmap # for flowerpot
const INT openinterval =   8;   // pixels per open interval
const INT autoclose    =  25;   // frames until auto door close
const INT transparencies = door1;   // this and higher can be transparent
const INT mazewidth      =   64;    // maze width
const INT mazeheight     =   64;    // maze height
const INT tilewidth      =   64;    // width of a bitmap tile
const INT tileheight     =   64;    // height of a bitmap tile
const INT fastspeed      =   10;    // increments per step
const INT mediumspeed    =   12;
const INT slowspeed      =   15;
const INT fastrotation   =    6;    // degrees of rotation per turn const INT mediumrotation =    4;
const INT slowrotation   =    1;
const INT ceilingcolor   =  90;
const INT floorcolor     = 139;
// self-adjusting values
const INT   mazexmax  = mazewidth * tilewidth;
const INT   mazeymax  = mazeheight * tilewidth;
const LONG  mazexmaxl = ((LONG)mazexmax &lt;&lt; 16); 
const LONG  mazeymaxl = ((LONG)mazeymax &lt;&lt; 16);
inline bool isWall(INT bmpno)
{
    // ---- modify this function if wall tiles are added
    return bmpno &gt; 0 || bmpno &lt; doorjam1;
}
inline bool isDoor(INT bmpno)
{
    // ---- modify this function if door tiles are added
    return bmpno &gt;= door1 &amp;&amp; bmpno &lt;= door2 + 8;
}
inline bool isProp(INT bmpno)
{
    // ---- modify this function if prop tiles are added
    return bmpno &gt;= flowerpot;
}
inline bool isAutomaticDoor(INT doorno)
{
   // ---- modify this function if door tiles are added
    return doorno &gt;= door2 &amp;&amp; doorno &lt;= door2 + 8;
}
inline bool isTransparent(INT tileno)
{
    return tileno &gt;= transparencies;
}
#ifdef NDEBUG
#define Assert(p)   ((void)0)
#else
void MyAssert(char* cond, char* file, int line);
#define Assert(p)   ((p) ? (void)0 : MyAssert(#p, __FILE__, __LINE__))
#endif
#endif
</pre>
<h4><a name="01e6_00aa"><a name="01e6_00ab">Listing Three<a name="01e6_00ab"></h4><pre>
// -------- keyboard.h
#ifndef KEYBOARD_H
#define KEYBOARD_H
#include &lt;dos.h&gt;
#include &quot;consts.h&quot; 
const int homekey  = 71+128;
const int pgupkey  = 73+128;
const int endkey   = 79+128;
const int pgdnkey  = 81+128;
const int f1key    = 59+128;
const int f2key    = 60+128;
const int f3key    = 61+128;
const int f4key    = 62+128;
const int f5key    = 63+128;
const int f6key    = 64+128;
const int f7key    = 65+128;
const int f8key    = 66+128;
const int f9key    = 67+128;
const int f10key   = 68+128;
const int f11key   = 87+128;
const int f12key   = 88+128;
const int uparrow  = 72+128;
const int dnarrow  = 80+128;
const int rtarrow  = 77+128;
const int lfarrow  = 75+128;
const int inskey   = 82+128;
const int delkey   = 83+128;
const int altkey   = 56+128;
const int pluskey  = 78+128;
const int minuskey = 74+128;
const int esckey   = 27;
class Keyboard  {
    static void interrupt (*oldkbint)(...);
    static void interrupt newkbint(...);
    static bool kys[128];
    static int scancodes[256];
    static unsigned char scancode;
public:
    Keyboard();
    ~Keyboard();
    bool wasPressed(int ky);
    bool isKeyDown(int ky);
};
inline bool Keyboard::isKeyDown(int ky)
{
    return kys[scancodes[ky]];
}
#endif
</pre>
<h4><a name="01e6_00ac"><a name="01e6_00ad">Listing Four<a name="01e6_00ad"></h4><pre>
// ------------- raycast.h
#ifndef RAYCAST_H
#define RAYCAST_H
#include &quot;trigtabl.h&quot; #include &quot;tables.h&quot;
#include &quot;maze.h&quot;
#include &quot;pcx.h&quot;
#include &quot;vga.h&quot;
#include &quot;map.h&quot;
#include &quot;consts.h&quot;
// ----- one vertical ray-cast slice
struct Slice {
    UINT bmptile;   // tile number
    UINT distance;  // distance from player
    UINT column;    // tile column to render
    INT mazeindex;  // index into maze of tile position
};
// ------ ray caster viewport
struct ViewPort {
    INT x, y;           // upper left origin
    INT viewwidth, viewheight;  // viewport dimensions
};
// ------ default viewport values (defined in consts.h)
const ViewPort fullscreenviewport = {
    defx,
    defy,
    defviewwidth,
    defviewheight
};
// ---- ray caster class
class RayCaster {
    VGA vga;                    // video object
    TrigTables trigtables;      // trig tables
    HeightTable heighttable;    // height table
    ScaleTable scaletable;      // vertical scale table
    Maze maze;                  // the game's maze
    Map map;                    // displayable map
    Slice slice;                // one ray-cast slice
    Slice* slices;              // -&gt; an array of slices
    INT  overlaycount;          // nbr of transparent tiles hit
    PCXBitmap bmps[bitmapcount];
    INT  *ocounts;              
    char *screenbuffer;         // -&gt; the screen buffer
    INT  x, y, angle;           // player's position
    INT viewwidth, viewheight;  // viewport dimensions
    LONG sinangle, cosangle;    // 
    INT  rayangle;              // angle of the ray
    INT  itilex, itiley;        // coordinates of tile
    LONG ltilex, ltiley;        // coordinates of tile
    DWORD raylength;            // length of ray
    bool mapon;                 // true if map is displaying
    INT xmazeindex;             // index into x maze
    INT ymazeindex;             // index into y maze
    INT hitwallmargin;          // margin for hit detection
    INT speed, rotation;        // movement speed controls
    // --- private functions
    INT  EastWest(INT angle);   // true if facing due east or west
    INT  NorthSouth(INT angle); // true if facing due north or south     bool CastSlice(INT i);      // cast one slice
    UINT CastXRay();            // cast an X ray
    UINT CastYRay();            // cast a Y ray
    enum direc { forward, backward, rightward, leftward };
    void Move(direc dir);       // move the player 1 step
    void CvtRayLength(DWORD&amp; raylength);
    void SetAngles();
    bool SameCell(INT mazeindex1, INT mazeindex2);
    bool SameCoord(INT c1, INT c2);
    INT Degree(INT x);          // cvt degrees to viewport angle
    INT unDegree(INT d);        // cvt viewport angle to degrees
public:
    RayCaster(char* mazename, char* pcxs[],
        INT px,
        INT py,
        INT pangle,
        ViewPort vp = fullscreenviewport);
    ~RayCaster();
    // ---- draw one frame of the maze
    void DrawFrame();
    // ---- set the player's position and angle facing
    void SetPosition(INT xp, INT yp, INT angl);
    // ---- get the player's current position and angle facing
    void GetPosition(INT&amp; xp, INT&amp; yp, INT&amp; angl);
    // ---- functions to move the player
    void MoveForward();
    void MoveBackward();
    void MoveLeftward();
    void MoveRightward();
    // --- functions to rotate the player
    void RotateRight(INT degrees = 0);
    void RotateLeft(INT degrees = 0);
    // ---- turn the map on and off
    void ToggleMap();
    // ----- open or close the door immediately in front of player
    void OpenCloseDoor();
    // ----- test if player is in the doorway of specified door
    bool isInDoorway(INT doorid);
    // ----- command player to change speed
    void Slower();
    void Faster();
#ifndef NDEBUG
    bool tracing;
    void TraceFrame();
#endif
};
inline INT RayCaster::Degree(INT x)
{
    return trigtables.Degree(x);
}
inline INT RayCaster::unDegree(INT d)
{
    return (INT)((LONG)d * viewangle / viewwidth);
}
inline INT RayCaster::EastWest(INT angle) {
    return (angle == Degree(90) ||
        angle == Degree(270));
}
inline INT RayCaster::NorthSouth(INT angle)
{
    return (angle == Degree(0) ||
        angle == Degree(180));
}
inline void RayCaster::MoveForward()
{
    Move(forward);
}
inline void RayCaster::MoveBackward()
{
    Move(backward);
}
inline void RayCaster::MoveLeftward()
{
    Move(leftward);
}
inline void RayCaster::MoveRightward()
{
    Move(rightward);
}
inline void RayCaster::RotateRight(INT degrees)
{
    if (degrees == 0)
        degrees = rotation;
    angle += Degree(degrees);
    if (angle &gt;= Degree(360))
        angle -= Degree(360);
}
inline void RayCaster::RotateLeft(INT degrees)
{
    if (degrees == 0)
        degrees = rotation;
    angle -= Degree(degrees);
    if (angle &lt; 0)
        angle += Degree(360);
}
inline void RayCaster::ToggleMap()
{
    mapon ^= true;
}
inline void RayCaster::SetAngles()
{
    sinangle = trigtables.SinAngle(angle);
    cosangle = trigtables.CosAngle(angle);
}
// ------- debugging slice tracing functions
#ifndef NDEBUG
    #define trace(x) if(tracing)cout&lt;&lt;(#x &quot;: &quot;)&lt;&lt;(x)&lt;&lt;' '
    #define tracend() if(tracing)cout&lt;&lt;endl
inline void RayCaster::TraceFrame() {
    tracing = true;
}
#else
    #define trace(x) ((void)0)
    #define tracend() ((void)0)
#endif
#endif
</pre>
<h4><a name="01e6_00ae"><a name="01e6_00af">Listing Five<a name="01e6_00af"></h4><pre>
// ---------- main.cpp
#ifndef NDEBUG
#include &lt;time.h&gt;
#include &lt;iostream.h&gt;
#endif
#include &quot;raycast.h&quot;
#include &quot;keyboard.h&quot;
// ---- pcx files
// ---- the order of these entries must match consts in consts.h
static char *pcxs[] = {
    &quot;wall01.pcx&quot;,
    &quot;wall02.pcx&quot;,
    &quot;doorjam1.pcx&quot;,
    &quot;doorjam1.pcx&quot;,
    &quot;doorjam2.pcx&quot;,
    &quot;doorjam2.pcx&quot;,
    &quot;door1.pcx&quot;,
    &quot;door2.pcx&quot;,
    &quot;door3.pcx&quot;,
    &quot;door4.pcx&quot;,
    &quot;door5.pcx&quot;,
    &quot;door6.pcx&quot;,
    &quot;door7.pcx&quot;,
    &quot;door8.pcx&quot;,
    &quot;door9.pcx&quot;,
    &quot;door10.pcx&quot;,
    &quot;door11.pcx&quot;,
    &quot;door12.pcx&quot;,
    &quot;door13.pcx&quot;,
    &quot;door14.pcx&quot;,
    &quot;door15.pcx&quot;,
    &quot;door16.pcx&quot;,
    &quot;door17.pcx&quot;,
    &quot;door18.pcx&quot;,
    &quot;flpot1.pcx&quot;,
    &quot;flpot2.pcx&quot;,
};
// ---- view ports: changed by pressing + and -
static ViewPort vps[] = { //      x   y   ht   wd   (position and size)
//    ---  --  ---  ---   
    { 120, 75,  80,  50 },
    { 110, 69, 100,  62 },
    { 100, 62, 120,  74 },
    {  90, 57, 140,  86 },
    {  80, 50, 160, 100 },
    {  70, 52, 180, 112 },
    {  60, 45, 200, 124 },
    {  50, 37, 220, 136 },
    {  40, 30, 240, 150 },
    {  30, 23, 260, 162 },
    {  20, 15, 280, 174 },
    {   0,  0, 320, 200 },
};
const int nbrvps = sizeof vps / sizeof(ViewPort);
int vpctr = nbrvps - 1;  // viewport subscript
int main()
{
    RayCaster* rp = 0;
    INT x = 360, y = 950, angle = 0;
#ifndef NDEBUG
    char* errcatch = 0;
    // ---- for computing frames/per/second
    long framect = 0;
    clock_t start = clock();
    try {
#endif
       // ----- ray caster object
        rp = new RayCaster(&quot;maze.dat&quot;, pcxs, x, y, angle, vps[vpctr]);
        // ---- keyboard object
        Keyboard kb;
        while (!kb.wasPressed(esckey))  {
            // ----- draw a frame
            rp-&gt;DrawFrame();
#ifndef NDEBUG
            framect++;
#endif
            // ----- test for player movement commands
            if (kb.isKeyDown(uparrow))
                rp-&gt;MoveForward();
            if (kb.isKeyDown(dnarrow))
                rp-&gt;MoveBackward();
            if (kb.isKeyDown(rtarrow))  {
                if (kb.isKeyDown(altkey))
                    rp-&gt;MoveRightward();
                else
                    rp-&gt;RotateRight();
            }
            if (kb.isKeyDown(lfarrow))  {
                if (kb.isKeyDown(altkey))
                    rp-&gt;MoveLeftward();
                else
                    rp-&gt;RotateLeft();             }
            // -------- open and close door commands
            if (kb.wasPressed(' '))
                rp-&gt;OpenCloseDoor();
            // ----- command to turn the map on and off
            if (kb.wasPressed(inskey))
                rp-&gt;ToggleMap();
            // ----- commands to change player movement speed
            if (kb.wasPressed('f'))
                rp-&gt;Faster();
            if (kb.wasPressed('s'))
                rp-&gt;Slower();
            // ----- commands to change the size of the viewport
            if (kb.wasPressed(pluskey)) {
                if (vpctr &lt; nbrvps-1)   {
                    rp-&gt;GetPosition(x, y, angle);
                    delete rp;
                    rp = new RayCaster(&quot;maze.dat&quot;,
                            pcxs, x, y, angle, vps[++vpctr]);
                }
            }
            if (kb.wasPressed(minuskey))    {
                if (vpctr &gt; 0)  {
                    rp-&gt;GetPosition(x, y, angle);
                    delete rp;
                    rp = new RayCaster(&quot;maze.dat&quot;,
                            pcxs, x, y, angle, vps[--vpctr]);
                }
           }
#ifndef NDEBUG
            if (kb.wasPressed(delkey))
                // ------- turn on tracing for one frame
                rp-&gt;TraceFrame();
#endif
        }
#ifndef NDEBUG
    }
    catch (char* errmsg)    {
        errcatch = errmsg;
    }
    // ---- get current position to report for testing
    if (rp)
        rp-&gt;GetPosition(x, y, angle);
    clock_t stop = clock();
#endif
    delete rp;
    VGA::ResetVideo();
#ifndef NDEBUG
    cout &lt;&lt; &quot;Frames/sec: &quot;
         &lt;&lt;  (int) ((CLK_TCK*framect) / (stop-start)) &lt;&lt; endl;
    cout &lt;&lt; &quot;Position (x, y, angle) :&quot;
         &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; ' ' &lt;&lt; angle &lt;&lt; endl;
    if (errcatch)
        cerr &lt;&lt; errcatch &lt;&lt; endl;
#endif     return 0;
}
</pre>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
