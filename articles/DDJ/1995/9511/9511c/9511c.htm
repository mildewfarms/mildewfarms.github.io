<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>NOV95: The Oracle Call Interface and C++</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>The Oracle Call Interface and C++<a name="01b2_0088"><a name="01b2_0086"><a name="01b2_0000"></h1><P>
<h2>High-level abstractions for database developers</h2><P>
<h3>Jeremy Woo-Sam and Tony Murphy</h3><P>
<p><i><a name="01b2_0087"><a name="01b2_0000">Jeremy is the project leader of SQL*C++, and Tony is the project leader for SQR at MITI. They can be reached at jeremyw@ miti.com and tonym@miti.com, respectively. </i></p><hr><P>
The Oracle Call Interface (OCI) allows C applications to access and manipulate data in an Oracle database. Unfortunately, using the C API functions requires extensive knowledge of your tables and their data types. You must also know how to access columns inside a table and efficiently retrieve database rows into an application. By creating abstractions for database access and manipulation, you can wrap the C API into C++ classes. This provides database access in an easy-to-use and easy-to-maintain form, promotes code reuse, and bridges RDBMS concepts to an object-oriented paradigm.<P>
In this article, we will present DBObject, a C++ class library that provides database connectivity and query access to an Oracle RDBMS. In doing so, we will examine the interface classes that are used within a C++ application, and the implementation classes that support array fetching within the interface classes. We will use an example that supports some primary data types: variable character strings, fixed-length character strings, numerics, and date types. Our abstraction of a database connection allows both local and remote connectivity, while our abstraction of database columns provides the mechanism for accessing data in the query.<P>
The object-oriented approach offers database developers several benefits. For instance, users not familiar with cursors, array fetching, and other OCI concepts often find retrieving data from Oracle a time-consuming task. Object orientation lets users focus on solving their domain problems rather than on retrieving data.<P>
Oracle data types are substantially different from those supported in C. This causes problems when converting between the database and C data types. For example, the Oracle NUMBER data type can have a value of NULL or 0. In the Oracle world, these values are different. This means no primitive C data type can entirely represent an Oracle NUMBER, because <I>float</I>, <I>double</I>, and <I>int</I> cannot represent both NULL and 0. This problem is commonly referred to as the &quot;impedance mismatch&quot; between RDBMS and C data types.<P>
The common solution is to map the Oracle NUMBER data type to a C <I>struct</I>. However, this creates a new problem because you cannot use the C arithmetic operators with user-defined <I>struct</I>s. (Note that C++ classes do allow <I>struct</I>s to have operators.)<P>
Finally, using high-level database abstractions lets you extend a class library's functionality without impacting existing applications. For example, the first version of our class did not implement array fetching; this was added later to improve efficiency. Likewise, obsolete OCI calls can be replaced with their newer counterparts without changing any application code. And, since our abstractions are valid on most SQL databases, our class library can easily be ported to other relational databases. <P>
<h3><a name="01b2_0089">The DBObject Classes<a name="01b2_0089"></h3><P>
The DBObjects database class library has two layers: the interface layer and the implementation layer. Interface-layer classes are routinely used to retrieve information from Oracle; implementation-layer classes are used internally by the interface layer. <a href="199501b4.htm">Figure 1</A> shows the class hierarchy for DBObjects, while <a href="199501b5.htm">Figure 2</A> shows the implementation and interface layers.<P>
The <I>DBObject</I> class is the base class. It handles local and database errors. The <I>DBConnection</I> class is an abstraction of a database connection; see <a href="#01b2_0095">Listing One</A>. <I>DBConnection</I> encapsulates the OCI functions that let you log into an Oracle RDBMS; see <a href="#01b2_0090">Table 1</A>. Multiple <I>DBConnection</I> objects can be created to access different local or remote data sources within a single application. Each time a <I>DBConnection</I> object is instantiated, it in turn creates and maintains an Oracle Login Cursor. The Oracle Login Cursor is deleted when the <I>DBConnection </I>object is destroyed.<P>
Class <I>DBSQLEngine</I> encapsulates the database cursor and the OCI functions for parsing SQL statements. The class also describes column information in SELECT statements, defines the output buffers, and fetches rows from the database. The <I>DBQuery</I> class, which inherits from <I>DBSQLEngine</I>, takes a valid SELECT statement and retrieves rows for the SELECT statement. The member function <I>MoveNext()</I> provides the means of navigating through the rows of the query.<P>
The abstract <I>DBCol</I> class provides the interface to the data in the <I>DBQuery</I> object. The derived type-specific classes format the data within <I>DBQuery</I> so that it can be manipulated or printed.<P>
The <I>DBColumnBuffer</I> classes are implementation classes that support array fetching, which allows multiple rows to be fetched with a single database access. This technique greatly reduces network traffic and improves access to database rows. The <I>DBColumnBuffer</I> classes also contain information about the column, such as its position, name, width, data type, scale, and precision. <P>
<h3><a name="01b2_008a">The Interface Layer<a name="01b2_008a"></h3><P>
The interface layer is comprised of <I>DBConnection</I>, <I>DBQuery</I>, <I>DBCol</I>, <I>DBColNumber</I>, <I>DBColDate</I>, and <I>DBColString</I>. Each class is a well-defined abstraction of some aspect of the Oracle interface. <P>
<I>DBConnection</I> manages the database connection. You simply instantiate an instance of the class by passing an Oracle connect string to the constructor to establish a connection with the database. When the object is destroyed (either explicitly or when it goes out of scope), the destructor severs the connection with the database. Behind the scenes, the OCI functions ORLON and OLOGOF are used to log on to and off of the Oracle server.<P>
<I>DBQuery</I> abstracts the concept of an SQL query. Its constructor accepts an SQL string as a parameter. To execute the query, invoke the <I>Execute()</I> member function. The rows of data returned by the query can be sequenced using the <I>MoveNext()</I> member function. <P>
Internally, the <I>DBQuery</I> object uses an instance of <I>DBSQLEngine</I> to parse the SQL statement. It allocates <I>DBColumnBuffer</I>s to hold the columns retrieved from the database by the SQL string. <I>DBQuery</I> uses the OCI function ODESCR to decide which type of column buffer to use: <I>DBNumberBuff</I>, <I>DBDateBuff</I>, or <I>DBBufferInfo</I>.<P>
<I>DBCol</I> classes are used to interface and manipulate the actual data returned from the database. <I>DBColNumber</I>, <I>DBColDate</I>, and <I>DBColString</I> implement the C++ equivalents to the Oracle NUMBER, DATE, and CHAR data types, respectively.<P>
<I>DBCol</I> is an abstract base class for the column classes that implements services required by <I>DBColNumber</I>, <I>DBColDate</I>, and <I>DBColString</I>. Such services include maintaining a pointer to the <I>DBQuery</I> object, identifying the corresponding <I>DBColumnBuffer</I> that contains the physical data, and implementing an <I>IsNull()</I> member function to tell if a column's value is set to NULL. <P>
<h3><a name="01b2_008b">Interoperability of Column Objects<a name="01b2_008b"></h3><P>
Implementing a cast to <I>double</I> in <I>DBColNumber</I> lets you use instances of this type with C arithmetic operators. For example, <I>Total=A+B</I> is legal in C++, where <I>A</I> and <I>B</I> are of type <I>DBColNumber</I> or <I>double</I>, and <I>Total</I> is of type <I>double</I>. During arithmetic operations, a NULL column is assumed to be of value 0. However, if you prefer a value other than 0, simply inherit from <I>DBColNumber</I> and redefine the cast.<P>
<I>DBColString</I> implements a cast to <I>char</I>*, which allows its instances to interoperate with functions that require null-terminated strings. For example, <I>strcmp(A,B)</I> is acceptable in C++ if <I>A</I> and <I>B</I> are either of type <I>DBColString</I> or are pointers to null-terminated strings. During string function calls, a NULL value is converted to a null-terminated string of length 0. Users can implement their own representation of NULL by overloading the <I>DBColString::GetString()</I> member function.<P>
<h3><a name="01b2_008c">The Implementation Layer<a name="01b2_008c"></h3><P>
Implementation classes include <I>DBSQLEngine</I>, <I>DBColumnBuffer</I>, <I>DBStringBuffer</I>, <I>DBNumberBuffer</I>, and <I>DBDateBuffer</I>. They represent the internal structure and implementation of handling the rows retrieved from the database.<P>
The <I>DBSQLEngine</I> class encapsulates the OCI functions that handle database cursors. These OCI functions handle fetching rows from the database, parsing the SQL statement, describing columns from a SELECT statement, and defining the memory area to hold rows returned from a database fetch. <I>DBSQLEngine</I> can be easily extended to support DML and DDL statements.<P>
<I>DBColumnBuffer</I> is an abstract base class for <I>DBStringBuffer</I>, <I>DBNumberBuffer</I>, and <I>DBDateBuffer</I>. It represents the static and dynamic information of a database column and is responsible for gathering and maintaining information about it, including column type, external type, width, position, name, scale, and precision. <I>DBColumnBuffer</I> also contains information about the return length and NULL status for each row of the column. The pure virtual member functions <I>GetData()</I> and <I>GetBufferAddress()</I> are defined in the derived classes. This allows the derived classes to manage, maintain, and index their rows.<P>
<h3><a name="01b2_008d">The Big Picture<a name="01b2_008d"></h3><P>
The <I>DBConnection</I>, <I>DBQuery</I>, and <I>DBCol</I> classes work together to access data from the database. Separating these classes into complete, distinct abstractions allows greater flexibility than folding connectivity, query capabilities, and column handling into one class. Once a successful connection to the database is established, the <I>DBConnection </I>object can be used by multiple <I>DBQuery</I> objects. The <I>DBQuery</I> constructor takes the SELECT string and a reference to a <I>DBConnection</I> object as its arguments. When a <I>DBQuery</I> object has been successfully created, <I>DBCol</I> objects can be associated to the <I>DBQuery</I> internal columns. The <I>DBCol</I> objects take a reference to a <I>DBQuery</I> object and the column number that it wants to reference. Once &quot;attached&quot; to the <I>DBQuery</I> internal column, you can print and manipulate the <I>DBCol</I> object. <P>
The <I>DBQuery</I> object constructs and maintains the <I>DBColumnBuffer</I> objects. It parses the SELECT statement and creates a linked list of <I>DBBufferInfo</I> objects for each column in the SELECT statement by calling the <I>DBSQLEngine::Describe()</I> function. A linked list is preferable to an array of <I>DBColumnBuffer</I> objects because Oracle does not provide any functions to determine the number of columns in a SELECT statement. To determine the number of columns in the query, the ODESCR function is called until it returns the end-of-select error status. While calling <I>DBSQLEngine::Describe()</I>, we gather information about the column to populate the <I>DBQuery</I> object's <I>DBColumnBuffer</I> array. <P>
The <I>DBQuery</I> object now allocates an array of <I>DBColumnBuffer</I> pointers that reference a data-type-specific <I>DBColumnBuffer</I> object such as a <I>DBStringBuffer</I> or a <I>DBDateBuffer</I>. The <I>DBQuery</I> object walks the linked list, allocates a data-type-specific <I>DBColumnBuffer</I> object, copies the information from the linked list, and sets the proper width and external type.<P>
After the array has been populated, the <I>DBQuery</I> object passes each <I>DBColumnBuffer</I> object in the array to the <I>DBSQLEngine</I> member function <I>Define(). </I>This is done to determine the destination address for the rows retrieved. <P>
<a href="#01b2_0091">Example 1</A> is a typical C++ application that establishes a connection and performs a SELECT on a table called &quot;EMP&quot; (see <a href="#01b2_0092">Example 2</A>). When <a href="#01b2_0091">Example 1</A> is executed, the output shown in <a href="#01b2_0093">Example 3</A> is generated. The source code for <I>DBConnection</I>, <I>DBQuery</I>, and other classes is available electronically; see &quot;Availability,&quot; page 3.<P>
<h3><a name="01b2_008e">Possible Extensions<a name="01b2_008e"></h3><P>
To extend the DBObject class library, you could, for example, add enhanced data types. The DBObjects database class library demonstrates how to abstract a limited number of Oracle data types in C++. The same techniques can be applied to simulate other Oracle data types such as LONG and LONG RAW.<P>
The current implementation utilizes double-precision floating-point numbers to represent the numeric values of NUMBER columns. This is sufficient for applications that don't require more than 15 digits of precision. Oracle itself supports a maximum precision of 38 digits. For more than 15 digits of precision, a high-precision column class could be developed. Client-application writers could then manage the efficiency-versus-precision trade-offs using the column class that most closely corresponds with their needs.<P>
Additional member functions could be added to <I>DBColString</I>, <I>DBColNumber</I>, and <I>DBColDate</I>, resulting in more complete data types. This might include more operators and perhaps more advanced date manipulation. <P>
Since most member functions are declared virtual, new column classes can be inherited from existing implementations. This technique can be used to add or modify behavior. For example, to change the way a column type prints its output, override the <I>PrintValue()</I> member function.<P>
The <I>DBObject</I> class currently contains member functions to let derived classes set and get errors. A possible extension would be to throw an exception after the error message is copied into the buffer. Another extension could have the <I>SetError()</I> function terminate the application if the error were severe. Because all errors are processed in the <I>DBObject</I> class, your error-handling strategy can be implemented in this class.<P>
<h3><a name="01b2_008f">Conclusion<a name="01b2_008f"></h3><P>
Class libraries like DBObjects will play a substantial role in reducing complexity and enhancing interoperability between the C++ language and relational-database technology. The benefits don't just end here, however. By-products of our approach are portability, efficient database access at low cost, and reduced maintenance. Who knows? This type of technology may even aid a migration from RDBMS to the great nirvana of OODBMS.<P>
<B><a href="199501b6.htm">Figure 1</A>: </B><I>DBObjects </I>library architecture.<P>
<B><a href="199501b7.htm">Figure 2</A>: </B>The <I>DBObjects </I>class library.<P>
<a name="01b2_0090"><B>Table 1:</B> OCI functions.<a name="01b2_0090"><P>
<pre>
Function  Description
<I>orlon</I>    Establishes concurrent communication between an
                          OCI program and an Oracle database.
<I>ologof</I>   Disconnects a login data area from the Oracle program
                          global area and frees all Oracle resources owned by the Oracle
                          user process.
<I>ocom</I>     Commits the current transaction.
<I>ocon</I>     Enables autocommit.
<I>ocof</I>     Disables autocommit.
<I>orol</I>     Rolls back current transaction.
<I>oopen</I>    Opens specified cursor.
<I>oparse</I>   Parses an SQL statement or PL/SQL block and associates it
                          with a cursor.
<I>ocan</I>     Cancels a query after the desired number of rows
                          have been fetched.
<I>oclose</I>   Disconnects a cursor from the data area in the Oracle
                          server with which it is associated.
<I>ofen</I>     Fetches on multiple rows into arrays of variables, taking
                          advantage of the Oracle array interface.
<I>oexec</I>    Executes the SQL statement associated with a cursor.
<I>odescr</I>   Describes select-list items for SQL queries.
<I>odefin</I>   Defines an output variable for a specified select-list
                          item of an SQL query.
<I>oerhms</I>   Returns the text of an Oracle error message, given
                          the error code.</pre>
<a name="01b2_0091"><B>Example 1:</B> Typical C++ app.<a name="01b2_0091"><pre>
#include &lt;iostream.h&gt;
#include &lt;dbobject.h&gt;
#include &lt;dbcol.h&gt;
int main()
{
    DBConnection TestConn(&quot;scott/tiger@t:cire-ss2:oracle7&quot;);
    DBQuery TestQuery(&quot;SELECT ename,empno,job,hiredate from EMP&quot;,&amp;TestConn);
    TestQuery.Execute();
    DBColString colEname(&amp;TestQuery, 1);
    DBColNumber colEmpno(&amp;TestQuery, 2);
    DBColString colJob(&amp;TestQuery, 3);
    DBColDate colHiredate(&amp;TestQuery, 4);
    while(TestQuery.MoveNext())
    {
    cout    &lt;&lt; &quot;EName:  &quot; &lt;&lt; colEname &lt;&lt; endl
            &lt;&lt; &quot;Empno:  &quot; &lt;&lt; colEmpno  &lt;&lt; endl
        &lt;&lt; &quot;Job:    &quot; &lt;&lt; colJob    &lt;&lt; endl
        &lt;&lt; &quot;Hired   &quot; &lt;&lt; colHiredate &lt;&lt; endl &lt;&lt; endl;
    }
}
</pre>
<a name="01b2_0092"><B>Example 2:</B> Contents of EMP table.<a name="01b2_0092"><pre>
ENAME  EMPNO JOB       HIREDATE
------ ----- ----      ---------
SMITH  7369  CLERK     17-DEC-80
ALLEN  7499  SALESMAN  20-FEB-81
WARD   7521  SALESMAN  22-FEB-81
JONES  7566  MANAGER   02-APR-81
MARTIN 7654  SALESMAN  28-SEP-81
BLAKE  7698  MANAGER   01-MAY-81
CLARK  7782  MANAGER   09-JUN-81
SCOTT  7788  ANALYST   09-DEC-82
KING   7839  PRESIDENT 17-NOV-81
TURNER 7844  SALESMAN  08-SEP-81
ADAMS  7876  CLERK     12-JAN-83
JAMES  7900  CLERK     03-DEC-81</pre>
<a name="01b2_0093"><B>Example 3:</B> Output generated by Example 1.<a name="01b2_0093"><pre>
EName:  SMITH
Empno:  7369
Job:    CLERK
Hired   17-DEC-1980 00:00:00
EName:  ALLEN
Empno:  7499
Job:    SALESMAN
Hired   20-FEB-1981 00:00:00
EName:  WARD
Empno:  7521
Job:    SALESMAN
Hired   22-FEB-1981 00:00:00
EName:  JONES
Empno:  7566
Job:    MANAGER
Hired   02-APR-1981 00:00:00
EName:  MARTIN
Empno:  7654
Job:    SALESMAN
Hired   28-SEP-1981 00:00:00
EName:  BLAKE
Empno:  7698
Job:    MANAGER
Hired   01-MAY-1981 00:00:00
EName:  CLARK
Empno:  7782
Job:    MANAGER
Hired   09-JUN-1981 00:00:00
EName:  SCOTT
Empno:  7788
Job:    ANALYST
Hired   09-DEC-1982 00:00:00
EName:  KING
Empno:  7839
Job:    PRESIDENT
Hired   17-NOV-1981 00:00:00
EName:  TURNER
Empno:  7844
Job:    SALESMAN
Hired   08-SEP-1981 00:00:00
EName:  ADAMS
Empno:  7876
Job:    CLERK
Hired   12-JAN-1983 00:00:00
EName:  JAMES
Empno:  7900
Job:    CLERK
Hired   03-DEC-1981 00:00:00</pre><P>
<P>
<h4><a name="01b2_0094"><a name="01b2_0095">Listing One<a name="01b2_0095"></h4><pre>
//////////////////////////////////////////////////////////////////////
//  DBConnection Implementation
//////////////////////////////////////////////////////////////////////
#include &lt;dbobject.h&gt;
// Default Constructor
DBConnection::DBConnection()
{  
   m_pLoginCursor = 0;
   Reset();
}
// Constructor with access string
DBConnection::DBConnection(const char *AccessString)
{
   m_pLoginCursor = 0;
   Connect(AccessString);
}  
DBConnection::~DBConnection()
{
  if (IsConnected()) {
     Disconnect();
  }
  delete m_pLoginCursor;
}
short DBConnection::Disconnect()
{
  if (IsConnected()) {
      if (ologof(m_pLoginCursor)) {
         SetDBError(m_pLoginCursor-&gt;csrarc,DBErrorMsg(m_pLoginCursor-&gt;csrrc));
         SetError(-210, m_pUserName); 
     return 0;
      }
      else {
         Reset();
         m_nIsConnected = 0;
         return 1;
      }
  }
  else {
     SetError(-203, NOLOGIN_CURSOR );
     return 0;
  }
}
short DBConnection::Connect(const char *pAccess)
{
    if (! m_pLoginCursor) { 
       m_pLoginCursor = new DBOBJLOGIN;
       if (!m_pLoginCursor) {
          SetError(-100, ALLOCATION_ERROR); 
          return 0;
       }
    }
    if (!*pAccess) {
       SetError(-200, NULLACCESSS_STRING);
       return 0;
    }
    char *pPassWrd = strchr(pAccess, '/');
    if (!pPassWrd) {
       SetError(-201, NOPASSWORD);
       return 0;
    }
    pPassWrd++; // past the '/'
    int  UserLen = strlen(pAccess) - strlen(pPassWrd);
    char User[30];
    if (UserLen &gt; 30) UserLen = 30; // truncate
    strncpy(User, pAccess, UserLen-1 );
    User[UserLen-1] = 0;     
     
    // Copy to member 
    strcpy(m_pUserName, User);
    if (orlon(m_pLoginCursor, hda, (char*)pAccess)) {
        SetDBError(m_pLoginCursor-&gt;csrarc, DBErrorMsg(m_pLoginCursor-&gt;csrrc) );
        SetError(-205, m_pUserName);
        return 0;
    }
    Reset();
    m_nIsConnected = 1;
    return 1;
}
short DBConnection::Commit()
{
    if (m_pLoginCursor) {
        if (ocom(m_pLoginCursor)) {
      SetDBError(m_pLoginCursor-&gt;csrarc,DBErrorMsg(m_pLoginCursor-&gt;csrrc));
          SetError(-206, m_pUserName); 
          return 0;
        }
        Reset();
        return 1;       
     }
     else {
      SetDBError(m_pLoginCursor-&gt;csrarc,DBErrorMsg(m_pLoginCursor-&gt;csrrc));
          SetError(-202, m_pUserName);
     }    
     Reset();
     return 1;
}
short DBConnection::SetAutoCommit(short OnOrOff)
{
   if (m_pLoginCursor) {
      if (OnOrOff == 1) {
         if (ocon(m_pLoginCursor)) {
      SetDBError(m_pLoginCursor-&gt;csrarc,DBErrorMsg(m_pLoginCursor-&gt;csrrc));
          SetError(-206, m_pUserName); 
          return 0;
         }
         else {
           Reset();
           return 1;
         } 
      }
      else {
         if (ocof(m_pLoginCursor)) {
      SetDBError(m_pLoginCursor-&gt;csrarc,DBErrorMsg(m_pLoginCursor-&gt;csrrc));
          SetError(-206, m_pUserName); 
          return 0;
         }
         else {
           Reset();
           return 1;
         }
      }
   }
   else {
      SetDBError(m_pLoginCursor-&gt;csrarc, DBErrorMsg(m_pLoginCursor-&gt;csrrc) );
      SetError(201, &quot;No Oracle Login Object Defined&quot;);
      return 0;
    }
}
short DBConnection::Rollback()
{
   if (m_pLoginCursor) {
      if (orol(m_pLoginCursor)) {
      SetDBError(m_pLoginCursor-&gt;csrarc,DBErrorMsg(m_pLoginCursor-&gt;csrrc));
          SetError(-206, m_pUserName); 
          return 0;
      }
      else {
          Reset();
          return 1;
      }
   }
   else {
      SetDBError(m_pLoginCursor-&gt;csrarc, DBErrorMsg(m_pLoginCursor-&gt;csrrc));
      SetError(201, NOLOGIN_CURSOR);
      return 0;
   }
}
const char* DBConnection::DBErrorMsg(int ErrorNo)
{
    if (m_pLoginCursor) {
       static char ExceptionBuffer[MAX_DBMSG];
       memset(ExceptionBuffer,0, MAX_DBMSG);
       oerhms(m_pLoginCursor, ErrorNo, ExceptionBuffer, MAX_DBMSG-1);
       return ExceptionBuffer;
    }
    else {
       SetError(-203, NOLOGIN_CURSOR);
       return &quot;&quot;;
    }        
}
</pre>

<P>
<P>
<P>
<P>
<P>

<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
