<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>NOV95: ALGORITHM ALLEY</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>ALGORITHM ALLEY<a name="01e8_009c"><a name="01e8_009a"><a name="01e8_0000"></h1><P>
<h2>Permutation Generation Using Matrices</h2><P>
<h3>Mani G. Iyer</h3><P>
<p><i><a name="01e8_009b"><a name="01e8_0000">Mani is a senior programmer/analyst at a mutual-funds company in Boston. He has a masters degree in Computer Science from the University of Bombay, India and is a CCP. Mani can be reached at iyer@usa1.com.</i></p><hr><P>
In his classic paper &quot;Permutation Generation Methods&quot; (<I>Computing Surveys 9</I>, 1977), Robert Sedgewick surveys the various permutation generation methods published until then, categorizing them as follows:<P>
<UL>
<li>Methods based on exchanges in which the <I>n</I>! permutations of <I>n</I> are obtained by a series of (<I>n</I>!-1) exchanges. Algorithms proposed by M.B. Wells, J. Boothroyd, B.R. Heap, S.M. Johnson, H.F. Trotter, and F.M. Ives fall into this category.</li>
<li>Algorithms not based on exchanges. Some algorithms, for instance, use cyclic rotations to obtain the n! permutations. One such algorithm is by G.W. Langdon (I arrived at his method independently). Other algorithms proposed by Fischer and Krause and R.J. Ord-Smith generate lexicographic permutations.</li>
</UL>
Sedgewick discusses the different classes of algorithms and details the analysis and implementation of the most prominent. For example, Langdon's cyclic method can be implemented with only a few computer instructions and can be made to run very fast on computers with hardware-rotation capabilities.<P>
The algorithm I propose here generates permutations in a novel way, using cyclic rotations (implemented without hardware dependencies) and matrices. The only restrictions on the implementation language are the availability of a &quot;string copy&quot; function and efficient pointer manipulations.<P>
<h3><a name="01e8_009d">The Algorithm<a name="01e8_009d"></h3><P>
The first step toward generating all <I>n</I>! permutations of 1,2,...,<I>n</I> is to generate the pivot permutations. A pivot permutation is obtained by certain rules and is used to generate an <I>n</I>x<I>n </I>matrix, which in turn yields 2<I>n</I> permutations. Consequently, you need <I>n</I>!/2<I>n</I> pivot permutations. Before discussing pivot-permutation generation, however, certain definitions are in order.<P>
A &quot;permutation&quot; is a sequence of <I>p<SUB>i</SUB></I>, where <I>i</I>=1,2,...,<I>n</I> and <I>p<SUB>i</SUB></I> is a unique integer between 1 and <I>n</I>, inclusive. The function <I>right rotate(f,l)</I> of a permutation yields a sequence where <I>p<SUB>f</SUB>=p<SUB>l</SUB></I> and <I>p<SUB>i</SUB>=p<SUB>i-1</SUB></I> for <I>i=f</I>+1,...,<I>l</I>.<P>
The function <I>left rotate(f,l)</I> of a permutation yields a sequence where <I>p<SUB>l</SUB>=p<SUB>f</SUB></I> and <I>p<SUB>i</SUB>=p<SUB>i+1</SUB></I> for <I>i=f</I>,...,<I>l</I>-1. A &quot;full-right rotate&quot; and a &quot;full-left rotate&quot; are special cases where <I>f</I>=1 and <I>l=n</I>. <P>
A &quot;cyclic-permutation matrix&quot; is an <I>n</I>x<I>n </I>matrix whose first row is a pivot permutation and whose <I>i</I>th row is obtained by a full-right rotate of the (<I>i</I>-1)th row for <I>i</I>=2,...,<I>n</I>. In all rotations, <I>f</I> (first) is <img src="lteq12.gif" alt="&lt;="><I>l</I> (representing last).<P>
Pivot permutations are obtained by performing rotations, right or left, but only in one direction throughout the process. For the purpose of this discussion, I'll stick with right rotate, although left works equally well.<P>
Successive pivot permutations are generated using (<I>n</I>-1) right rotates with <I>l</I>=(<I>n</I>-1). The <I>n</I>th right rotate will yield the starting sequence; you can refer to these as (<I>n</I>-1)th order pivots. Using each of the (<I>n</I>-1) pivots, generate the (<I>n</I>-2)th order pivots using (<I>n</I>-2) right rotates with <I>l</I>=(<I>n</I>-2). Continue the process until <I>l</I>=2, at which point no more pivot permutations can be generated, leaving you with <I>n</I>!/2<I>n</I> pivot permutations. The fact that the <I>n</I>th right rotate of an <I>n</I>th order pivot permutation yields the original sequence in the (<I>n</I>+1)th order implies that the third-order pivots are the ones actually used to generate the <I>n</I>x<I>n </I>matrices.<P>
For a given third-order pivot permutation, using this pivot permutation as the first row of an <I>n</I>x<I>n </I>matrix, generate the other (<I>n</I>-1) rows of the cyclic-permutation matrix by performing (<I>n</I>-1) full-right rotates. After creating the matrix, read the rows and columns of the matrix to yield 2<I>n</I> permutations. Repeating the process for the other pivot permutations will yield (<I>n</I>!/2<I>n</I>)x2<I>n=n</I>! permutations.<P>
<a href="#01e8_00a0">Figure 1</A> and <a href="#01e8_00a1">Figure 2</A> show the algorithm generating all permutations of 1,2,3,4, and 5 (that is, <I>n</I>=5). Reading the rows and the columns of the 12 matrices in <a href="#01e8_00a1">Figure 2</A> yields the 120 permutations of {1,2,3,4,5}. Consequently, the algorithm can be coded recursively in an elegant manner; see <a href="#01e8_00a2">Example 1</A>. <a href="#01e8_00a5">Listing One</A> is the complete C implementation of the permutation-generation algorithm. The array <I>num</I>, which is one relative, is defined as a character array to facilitate using character pointers in the <I>memcpy</I> functions and building the cyclic-permutation matrices via an array of pointers.<P>
In <I>rightRotate(f,l)</I>, the right rotates are performed by cloning the substring of <I>num</I> indexed by <I>f</I> and having length <I>l</I> into the array <I>temp</I>, which is zero relative. The final result is obtained by getting the string from <I>temp</I>, indexed by (<I>l</I>-1) and having length <I>l</I>. For example, if <I>num</I>={0,3,2,4,1,5} and a <I>rightRotate (1,4)</I> needs to be performed, then the first and second <I>memcpy</I> functions from <I>num</I> to <I>temp</I> would yield <I>temp</I> equal to <I>{3,2,4,1,3,2,4,1}</I>. The string indexed by 3 and having length 4 in <I>temp</I> is copied back into <I>num</I> indexed by 1, thus yielding <I>num</I> as equal to <I>{0,1,3,2,4,5}</I>.<P>
In <I>createCyclicMatrix()</I>, the entire array <I>num</I> is cloned into <I>temp</I>, and the pointer array <I>p</I> is created by pointing to the different indexes of <I>temp</I>. Since a cyclic-permutation matrix is created by performing (<I>n</I>-1) full-right rotates on the pivot permutation, it is only natural to create the matrix as an array of pointers. For example, if a cyclic-permutation matrix needs to be created for the pivot permutation stored in <I>num</I> as <I>{0,2,4,1,3,5}</I>, then <I>temp</I> would be equal to <I>{2,4,1,3,5,2,4,1,3,5}</I> and <I>p</I> would be created as described in <a href="#01e8_00a3">Table 1</A>. The permutations are obtained by reading the <I>n</I> rows and <I>n</I> columns of the cyclic-permutation matrix stored in <I>p</I>.<P>
<h3><a name="01e8_009e">Salient Features of the Algorithm<a name="01e8_009e"></h3><P>
Any of the <I>n</I>! permutations of <I>n</I> can be used as an initial permutation to generate the <I>n</I>! permutations of <I>n</I>. This is because every permutation of <I>n</I> must be either a row or a column of a cyclic-permutation matrix and any row or column of the matrix can be used as a pivot permutation to generate the matrix.<P>
The cyclic-permutation matrix can be created using full-left rotates, but the matrix will have to be created bottom up; that is, the pivot permutation is the <I>n</I>th row of the matrix, and for <I>i</I>=(<I>n</I>-1),...,1, the <I>i</I>th row is created by performing a full-left rotate on the (<I>i</I>+1)th row.<P>
The <I>i</I>th order pivot permutations can be created using one of the following:<P>
<UL>
<li>Right rotate (1,<I>i</I>).</li>
<li>Left rotate (1, <I>i</I>).</li>
<li>Right rotate (<I>n</I>-<I>i</I>+1, <I>n</I>).</li>
<li>Left rotate (<I>n</I>-<I>i</I>+1, <I>n</I>).</li>
</UL>
In fact, between different orders of pivot permutations, the direction of rotates can be changed. The direction cannot be changed within the same order.<P>
In the cyclic-permutation matrix, the primary diagonals or the secondary diagonals, depending on the direction of rotates used (primary for right and secondary for left), have the same number. This is true for the <I>i</I>x<I>i</I> matrix obtained by the <I>i</I>th order pivot permutations; for example, the matrix obtained by (1,<I>i</I>) elements or (<I>n</I>-<I>i</I>+1) elements of the <I>i</I> pivot permutations. The uniqueness of the permutations can be attributed to this property.<P>
<h3><a name="01e8_009f">Conclusion<a name="01e8_009f"></h3><P>
Sedgewick notes that the exchange method by B.R. Heap will run fastest on most computers. In <I>Data Structures and Program Design in C</I> (Prentice-Hall, 1991), Robert L. Kruse, Bruce P. Leung, and Clovis L. Tondo claim that the linked-list, or simple-exchange algorithm is at least as efficient as the Heap method. Both the Heap and linked-list algorithms have been implemented using the C programs supplied by Kruse et al. in their book. I've used these programs for performance comparisons to the Matrix method, on a 486-based PC running under DOS and a Sun workstation under Solaris. The results are as follows:<P>
<UL>
<li>If the processing of a given permutation is implemented as a simple <I>printf</I> function resulting in mere enumeration of the permutations, the Matrix method is only slightly faster than the Heap and linked-list methods. This slight difference may be attributed to the integer conversion involved in the printing of a character.</li>
<li>If the processing of a given permutation is implemented as a dummy function, the Matrix method is faster than the other two methods by a factor of two.</li>
</UL>
If parallelism were available, the algorithm could be made to run much faster, since the generation of cyclic-permutation matrices from the pivot permutations would be treated as independent processes, thus making larger values of <I>n</I> tractable.<P>
<a name="01e8_00a0"><B>Figure 1:</B> Generating pivot permutations<a name="01e8_00a0"><pre>
     Fifth-order   Fourth-order   Third-order
        Pivot         Pivot          Pivot
        
      1 2 3 4 5     4 1 2 3 5      2 4 1 3 5
                                   1 2 4 3 5
                                   4 1 2 3 5
                    3 4 1 2 5      1 3 4 2 5
                                   4 1 3 2 5
                                   3 4 1 2 5
                    2 3 4 1 5      4 2 3 1 5
                                   3 4 2 1 5     
                                   2 3 4 1 5
                    1 2 3 4 5      3 1 2 4 5
                                   2 3 1 4 5
                                   1 2 3 4 5</pre>
<a name="01e8_00a1"><B>Figure 2:</B> Cyclic-permutation matrices generated by the 12 pivot permutations.<a name="01e8_00a1"><pre>

[ 2 4 1 3 5 ]  [ 1 2 4 3 5 ]  [ 4 1 2 3 5 ]  [ 1 3 4 2 5 ]  [ 4 1 3 2 5 ]
[ 5 2 4 1 3 ]  [ 5 1 2 4 3 ]  [ 5 4 1 2 3 ]  [ 5 1 3 4 2 ]  [ 5 4 1 3 2 ]
[ 3 5 2 4 1 ]  [ 3 5 1 2 4 ]  [ 3 5 4 1 2 ]  [ 2 5 1 3 4 ]  [ 2 5 4 1 3 ]
[ 1 3 5 2 4 ]  [ 4 3 5 1 2 ]  [ 2 3 5 4 1 ]  [ 4 2 5 1 3 ]  [ 3 2 5 4 1 ]
[ 4 1 3 5 2 ]  [ 2 4 3 5 1 ]  [ 1 2 3 5 4 ]  [ 3 4 2 5 1 ]  [ 1 3 2 5 4 ]

[ 3 4 1 2 5 ]  [ 4 2 3 1 5 ]  [ 3 4 2 1 5 ]  [ 2 3 4 1 5 ]  [ 3 1 2 4 5 ]
[ 5 3 4 1 2 ]  [ 5 4 2 3 1 ]  [ 5 3 4 2 1 ]  [ 5 2 3 4 1 ]  [ 5 3 1 2 4 ]
[ 2 5 3 4 1 ]  [ 1 5 4 2 3 ]  [ 1 5 3 4 2 ]  [ 1 5 2 3 4 ]  [ 4 5 3 1 2 ]
[ 1 2 5 3 4 ]  [ 3 1 5 4 2 ]  [ 2 1 5 3 4 ]  [ 4 1 5 2 3 ]  [ 2 4 5 3 1 ]
[ 4 1 2 5 3 ]  [ 2 3 1 5 4 ]  [ 4 2 1 5 3 ]  [ 3 4 1 5 2 ]  [ 1 2 4 5 3 ]

[ 2 3 1 4 5 ]  [ 1 2 3 4 5 ]
[ 5 2 3 1 4 ]  [ 5 1 2 3 4 ]
[ 4 5 2 3 1 ]  [ 4 5 1 2 3 ]
[ 1 4 5 2 3 ]  [ 3 4 5 1 2 ]
[ 3 1 4 5 2 ]  [ 2 3 4 5 1 ]
</pre>
<a name="01e8_00a2"><B>Example 1:</B> Recursive algorithm for generating permutations by the matrix method.<a name="01e8_00a2"><pre>
matrixPermute (n)
{
    if  (n = 3) createCyclicMatrix
and return;
    for  (n - 1) times
         {
          rightRotate  (1, n - 1);
          matrixPermute (n - 1);
         }
}</pre>
<a name="01e8_00a3"><B>Table 1:</B> Simulation of the cyclic-permutation matrix by an array of pointers.<a name="01e8_00a3"><pre>
i  p[i]    *(p[i]+0)  *(p[i]+1)  *(p[i]+2)  *(p[i]+3)  *(p[i]+4) 
0  temp+5      2          4          1          3          5
1  temp+4      5          2          4          1          3
2  temp+3      3          5          2          4          1
3  temp+2      1          3          5          2          4
4  temp+1      4          1          3          5          2</pre><P>
<P>
<h4><a name="01e8_00a4"><a name="01e8_00a5">Listing One<a name="01e8_00a5"></h4><pre>
#include    &lt;stdio.h&gt;
#include    &lt;stdlib.h&gt;
#include    &lt;memory.h&gt;
#define     MAX 20
char        num[MAX + 1];
int         n; 
main (int argc, char *argv[])
{
    int     i;
    void    matrixPermute (), createCyclicMatrix (), rightRotate ();
    if  (argc != 2)
        {
        fprintf (stderr, &quot;Usage: permute &lt;string&gt;\n&quot;);
        exit (1);
        }
    n = atoi (argv [1]);
    if  (n &lt; 3 || n &gt; MAX)
        {
        fprintf (stderr, &quot;number must be between 3 and %d\n&quot;, MAX);
        exit (1);
        }
    for (i = 1; i &lt;= n; ++i)
        num [i] = i;
    matrixPermute (n);
}
void matrixPermute (int k)
{
    int     i, temp;
    if  (k == 3) 
        {
        createCyclicMatrix ();
        return;
        }
    temp = k - 1;
    for (i = 0; i &lt; temp ; ++i) 
        {
        rightRotate (1, temp);
        matrixPermute (temp);
        } 
}
void createCyclicMatrix ()
{
    char    *p[MAX], temp[2*MAX];
    int     i, j;
    /* create the cyclic permutation matrix P as an array of pointers */ 
    memcpy (temp, num + 1, n);
    memcpy (temp + n , num + 1, n);
   
    for (i = 0; i &lt; n; ++i)
        p[i] = temp + n - i;
   
    /* generate the 2n permutations from the cyclic permutation matrix P */
    for (i = 0; i &lt; n; ++i)
        {
        /* print the ith row */
        for (j = 0; j &lt; n; ++j)
            printf (&quot;%d &quot;, *(p[i] + j));
        printf (&quot;\n&quot;);
        /* print the ith column */
        for (j = 0; j &lt; n; ++j)
            printf (&quot;%d &quot;, *(p[j] + i));
        printf (&quot;\n&quot;);
        }
}
void rightRotate (int f, int l)
{
    char    temp [2*MAX], *saveptr;
    int     i;
    saveptr = num + f;
    memcpy (temp , saveptr, l);
    memcpy (temp + l, saveptr, l);
    memcpy (saveptr, temp + l - 1, l);
}
</pre>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
