<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>MAR95: Cross-Platform Communication Classes</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Cross-Platform Communication Classes<a name="00f6_0047"></h1><P>
<h2><a name="00f6_0045"><a name="00f6_0000">C++ semaphore classes for OS/2, AIX, and Windows NT</h2><P>
<h3>Richard B. Lam</h3><P>
<p><i><a name="00f6_0046"><a name="00f6_0000">Dick is a member of the research staff at IBM's T.J. Watson Research Center. He can be contacted at rblam@watson.ibm.com.</i></p><hr><P>
Numerous C++ libraries are available that ease the burden of programming graphical user interfaces (GUIs) in a cross-platform environment. However, few libraries address the interprocess communications (IPC) facilities built into today's sophisticated PC and workstation operating systems. Interprocess communication is a vital part of client/server computing, and processes and threads running on the same system can communicate in many ways other than the familiar clipboard, DDE, and OLE standards.<P>
In this article, I'll summarize the common techniques for IPC and present one way to build cross-platform C++ libraries. In doing so, I'll write an example library that implements semaphores in a platform-independent manner to allow signaling or controlling of shared resources between processes and threads. Implementations are presented for OS/2, AIX, and Windows NT. <P>
<h3><a name="00f6_0048">Communication Mechanisms<a name="00f6_0048"></h3><P>
Clipboard, DDE, and OLE facilities are familiar to many programmers because they are supported by Windows. However, Windows does not support the IPC capabilities built into 32-bit operating systems such as AIX, OS/2, and Windows NT. These powerful APIs enable sophisticated access to and sharing of information between processes and threads running in the same environment. The most common of these communication mechanisms are semaphores, shared memory, queues, and named pipes. <P>
A semaphore is really just a flag indicating that an event has occurred or that data is locked and should not be changed by another process. While you can certainly define your own flag as a global variable in a DLL that other processes can use for signaling or resource locking, problems can arise. For instance, in a preemptive-multitasking environment, a task may be preempted at any time, even while trying to access or change a flag. This can cause synchronization problems unless the flag is controlled at the kernel level of the operating system in cooperation with the task scheduler. Thus, operating systems provide a semaphore API for creating and controlling semaphores.<P>
There are two basic types of semaphores: mutex (mutual exclusion) and event. Mutex semaphores are used primarily to control access to some kind of shared resource: shared memory, database records, files, and the like. Event semaphores signal that an event has occurred, allowing other processes waiting on that event to continue. This facilitates synchronizing tasks that need to cooperate or allowing a process to wait until some kind of required initialization is complete.<P>
Shared-memory address space is a block of memory created by one process or thread and made available to other running processes. Any process or thread that has access to the memory can use it just as if the memory were a part of the application's own address space. Memory is usually accessed through a unique name known to all processes needing to use it. Obviously, if two or more processes are writing to the shared-memory space simultaneously, the resulting data could be garbled, so a mutex semaphore is typically used to ensure that access is sequential.<P>
<a href="199500f8.htm">Figure 1</A> schematically shows how two processes share the same address space. Shared memory typically offers the best performance in sharing data among applications, but other techniques may be more appropriate for client/server programming.<P>
Message queues are familiar to GUI programmers who use event-driven message loops to dispatch messages to window procedures. Windowing systems typically provide functions for posting messages to windows in the same or other applications, but these functions do not work for character-mode programs. However, a message-queue communication mechanism exists that is valid for both character-mode and window-mode applications: A queue may be created by a server application, which then reads messages from the queue and processes them one at a time. Multiple client applications can then access the queue and write messages to the server, and the operating system synchronizes the queue so that messages originating from different sources will not intermingle; see <a href="199500f9.htm">Figure 2</A>.<P>
The server can examine the queue to see if any messages are waiting and can optionally purge all messages from the queue. Because this queue API is separate from the underlying window-system API, both window-message loops and queue-message loops may be running in the same application, possibly in different threads.<P>
Pipes are buffer areas which allow processes to communicate with each other just as if they were reading and writing files. Pipes can be either named or unnamed. Some operating systems (such as OS/2) allow named-pipe communications not only between applications on the same system, but also between applications running on different systems connected via a network. A server process creates a named pipe, and one or more client processes open it and establish connections; see <a href="199500fa.htm">Figure 3</A>. Once the connection is established, the pipe is treated as a regular file handle, and the standard file I/O methods are used to transfer data across the pipe.<P>
<h3><a name="00f6_0049">Writing Cross-Platform Classes<a name="00f6_0049"></h3><P>
OS/2, AIX, and Windows NT implement the IPC features described up to this point. Unfortunately, there is no standard for these features' functional interface, so each vendor provides a custom API. What programmers need is an API that is consistent across all platforms to minimize the operating-system-dependent part of their code.<P>
The preprocessor definitions, macros, and data types for each operating system are all different. To avoid having users of your communication library deal with this at the API level, you can separate the library-class APIs from the implementation of the classes, which must necessarily be different on each platform. While there are many ways of doing this in C++, I'll undertake the separation for this library by defining a single interface class (<I>InterfaceClass</I>) that contains an instance of the operating-system-specific implementation class (<I>ImplementationClass</I>).<P>
<I>InterfaceClass</I> is packaged as a class declaration (in ifclass.h) as in <a href="#00f6_0050">Example 1(a)</A>. The file ifclass.C contains method invocations which call the corresponding method in the <I>ImplementationClass</I> instance; see <a href="#00f6_0050">Example 1(b)</A>. Now the implementation-class header (defined in imclass.h) can still be operating-system independent (or <I>#ifdef</I>s can be included to encapsulate the dependent parts); see <a href="#00f6_0050">Example 1(c)</A>. Furthermore, as <a href="#00f6_0050">Example 1(d)</A> shows, you can define three separate implementations of the constructor and destructor <I>ImplementationClass</I> to handle the individual operating systems (see os2impl.C, aiximpl.C, and winimpl.C). <P>
To package the class library for distribution, compile the ifclass.C module and the appropriate implementation module for the current operating system (for OS/2, compile os2impl.C). You then either link the modules as a DLL or make a static library. The distribution files are simply the ifclass.h file and the library module for each operating system. Each platform uses the same header file containing the class declaration, so platform-independent applications can be written using the <I>InterfaceClass</I>. <P>
<h3><a name="00f6_004a">Semaphores<a name="00f6_004a"></h3><P>
To illustrate, I'll implement named semaphores because AIX requires a name for the <I>ftok()</I> function I'll use later. Also, you may need to query for the name and type of semaphore and perhaps access the semaphore id created by the underlying operating system. You can implement all of these generic methods in an abstract base class, and derive specialty classes for the mutex and event semaphores from the base class.<P>
<h3><a name="00f6_004b">The Abstract Base Class<a name="00f6_004b"></h3><P>
<a href="#00f6_0051">Listing One</A> shows the class declaration for the abstract base class <I>ipcSemaphore</I>. All of the interface classes and data types are given an <I>ipc</I> prefix to avoid possible namespace collisions when linking with other libraries. Two enumerated types are defined in this file: <I>ipcSemaphoreType</I> holds the type of semaphore (mutex or event), and <I>ipcSemaphoreOp</I> defines whether the semaphore is being created by the owner of the semaphore (<I>semcreate</I>) or already exists and is being accessed (<I>semaccess</I>).<P>
The base-class constructor takes arguments corresponding to a unique name for the semaphore, type, and operation. Processes or threads that access the semaphore only need to know the name and type of the semaphore to use it.<P>
Methods are also defined for returning the semaphore name, underlying operating-system semaphore id (as an unsigned long), semaphore type, and whether the current process or thread is the owner (creator) of the semaphore. The last method, <I>Query()</I>, is a pure virtual method that queries the semaphore and returns the number of requests pending on it.<P>
The last member is a pointer to the <I>osSemaphore </I>class. This friend class has its declaration in ossem.h (<a href="#00f6_0052">Listing Two</A>). <I>osSemaphore</I> is the operating-system-independent implementation class corresponding to the imclass.h mentioned earlier.<P>
<a href="#00f6_0053">Listing Three</A> is the interface class. The <I>ipcSemaphore</I> constructor simply creates an instance of <I>osSemaphore</I> that is deleted by the destructor. The other member functions use this instance of the implementation class to call the corresponding function in that class. For example, the <I>ipcSemaphore::Name()</I> method calls <I>myImpl--&gt;Name()</I>.<P>
<h3><a name="00f6_004c">Mutex Semaphores<a name="00f6_004c"></h3><P>
Mutex semaphores control access to some resource. They have two basic functions which our class must implement--request and release. When a process (or thread) requests a mutex semaphore, the process either obtains &quot;ownership&quot; of the semaphore immediately or is blocked until another process releases the semaphore. <P>
The semaphore is then &quot;owned&quot; by the requesting process, and requests for the semaphore by other processes are blocked until the &quot;owner&quot; releases the semaphore.<P>
<a href="#00f6_0054">Listing Four</A> shows the class declaration for <I>ipcMutexSemaphore</I>, which is derived from our abstract base class. The <I>Query()</I> method provides an implementation for the pure virtual method in the base class, and <I>Request()</I> and <I>Release()</I> methods for the allowed operations on mutex semaphores.<P>
The implementation of this class is given in ipcmutex.C (<a href="#00f6_0055">Listing Five</A>). In the constructor, the <I>ipcSemaphoreOp</I> operation is checked and used to call either <I>CreateMutex()</I> or <I>OpenMutex()</I> in the <I>osSemaphore</I> class instance <I>myImpl</I> (defined as &quot;protected&quot; in the base class). The destructor calls the <I>myImpl--&gt;CloseMutex()</I> method, and the other three methods call their corresponding methods in <I>myImpl</I>. <a href="#00f6_0052">Listing Two</A> shows prototypes for these five member functions included in the public section of <I>osSemaphore</I>.<P>
<h3><a name="00f6_004d">Event Semaphores<a name="00f6_004d"></h3><P>
Event semaphores synchronize operations between processes or threads. The terminology is different from mutex semaphores, and there are three basic operations instead of two. For example, if application A wants to start application B and wait for B to perform some operation before continuing, A first creates and resets an event semaphore. B is then started, and A does a wait on the event semaphore. When B is done with its operation, it accesses the event semaphore and posts it, causing A to unblock and continue execution.<P>
Listings <a href="#00f6_00fb">Six</A> and <a href="#00f6_00fc">Seven</A>  show the declaration and implementation for <I>ipcEventSemaphore</I>. This closely parallels the structure of <I>ipcMutexSemaphore</I>, except that the <I>Request()</I> and <I>Release()</I> methods are replaced by <I>Reset()</I>, <I>Wait()</I>, and <I>Post()</I>. The constructor also tests the operation flag argument and calls either <I>CreateEvent()</I> or <I>OpenEvent()</I>, and the destructor calls <I>CloseEvent()</I>. Note that all of these functions are also included in the public section of the declaration for <I>osSemaphore</I>. Now that the interface to the two semaphore types has been defined, we are ready to look at the actual implementations on each operating system.<P>
<h3><a name="00f6_004e">The <I>osSemaphore</I> Implementations<a name="00f6_004e"></h3><P>
The modules that implement the <I>osSemaphore</I> class for OS/2 (os2sem.C), AIX (aixsem.C), and Windows NT (winsem.C) are available electronically; see &quot;Availability,&quot; page 3. Each module includes the header files specific to that operating system, plus ossem.h, the class declaration for <I>osSemaphore</I>. Because the operating-system dependencies are buried here, users of these classes need not compile with complicated preprocessor definitions and <I>include</I> files that specify the target operating environment.<P>
The constructors for all three implementations are almost identical. OS/2 requires system semaphores to have a pathname such as <I>\SEM32\name</I>, and AIX requires a name for the <I>ftok()</I> function, which returns a key required to obtain UNIX interprocess-communication identifiers. Therefore, both os2sem.C and aixsem.C define a <I>semPath</I> string constant at the top of the module, and <I>semPath</I> and the name argument are used to form the full semaphore name stored in the <I>myName</I> instance variable. Also, a file with the name of the semaphore must exist on AIX, and it is created in aixsem.C if the <I>ipcSemaphoreOp</I> type is <I>semcreate</I>.<P>
Note that the constructor takes a pointer to the <I>ipcSemaphore</I> interface instance that creates the <I>osSemaphore</I>. Because <I>osSemaphore</I> is also declared as a friend of <I>ipcSemaphore</I>, the <I>osSemaphore</I> methods can change the <I>myState</I> variable (declared in ipcsem.h). The user can then call <I>rdstate()</I> (or use the ! operator) to get information on the state of the semaphore.<P>
The destructors delete the memory allocated in the constructors for the full semaphore pathname, and the AIX destructor also deletes the file and removes the semaphore using a call to <I>semctl()</I>. The other methods for returning the name, id, type, and owner are all the same in each file, and could arguably be put in the interface base-class implementation. However, this would require exposing the protected variables representing these values to the user of the semaphore classes. You could have also placed the common code in an abstract implementation base class and derived specific implementation classes from it, but the current structure is adequate for our needs.<P>
<I>CreateMutex()</I>, <I>OpenMutex()</I>, and the like are the remaining methods, and they simply call the API functions appropriate for each operating system. For example, <I>DosCreateMutexSem()</I> is the OS/2 function that creates a mutex semaphore, while the <I>ftok()</I> and <I>semget()</I> functions are required under AIX. For Windows NT, macros are defined in winbase.h that must be undefined to avoid conflicts with the <I>CreateMutex()</I>, <I>OpenMutex()</I>, <I>CreateEvent()</I>, and <I>OpenEvent()</I> methods. Then the Win32 functions <I>::CreateMutexA()</I>, <I>::OpenMutexA()</I>, and the like are called directly.<P>
<h3><a name="00f6_004f">Conclusion<a name="00f6_004f"></h3><P>
I have defined a cross-platform implementation of mutex and event semaphores with an interface class that has no operating-system dependencies. You only need to compile the modules on the appropriate system and distribute the object module or DLL and the three header files ipcsem.h, ipcmutex.h, and ipcevent.h.<P>
The test programs semtest1.C and semtest2.C (available electronically) can be compiled on all three systems using the code presented in this article. These programs illustrate how the mutex and event semaphores can synchronize two processes.<P>
<a href="199500fb.htm">Figure 1</A>  Shared memory between two processes (P1 and P2).
<a href="199500fc.htm">Figure 2</A>  A message queue with a server and two client processes.
<a href="199500fd.htm">Figure 3</A>  A named-pipe connection between two processes.
<h4><a name="00f6_0050"><B>Example 1:</B> (a) InterfaceClass packaged as a class declaration; (b) method invocations which call the corresponding method in ImplementationClass; (c) implementation of class header can still be operating-system independent; (d) defining three separate implementations of the constructor and destructor ImplementationClass.<a name="00f6_0050"></h4><P>
<pre>(a)
// forward declaration
class ImplementationClass;
// interface class declaration
class InterfaceClass {
friend class ImplementationClass;
public:
   // constructor and destructor
   InterfaceClass();
   virtual ~InterfaceClass();
   void SomeMethod();           // invoked by class user
protected:
   ImplementationClass *myImpl; // pointer to implementation
};

(b)
void InterfaceClass::SomeMethod()
{
  myImpl-&gt;SomeMethod();
}

(c)
class ImplementationClass {
public:
   // constructor and destructor
   ImplementationClass();
   virtual ~ImplementationClass();
   void SomeMethod();   // invoked by InterfaceClass
};

(d)
// os2impl.C
#define INCL_DOS
#include &lt;os2.h&gt;
void ImplementationClass::SomeMethod()
{
   // call OS/2 specific functions
}
// aiximpl.C
#define &lt;sys/ipc.h&gt;
void ImplementationClass::SomeMethod()
{
   // call AIX specific functions
}
// winimpl.C
#define &lt;windows.h&gt;
void ImplementationClass::SomeMethod()
{
   // call Windows NT specific functions
}</pre><P>
<P>
<h4><a name="00f6_0051">Listing One <a name="00f6_0051"></h4><pre>

// ****************************************************************************
// Module:  ipcsem.h   --  Author:  Dick Lam
// Purpose: C++ class header file for ipcSemaphore
// Notes:  This is an abstract base class.  It is the interface class for
//     semaphores used in signalling between processes and threads.
// ****************************************************************************

#ifndef MODULE_ipcSemaphoreh
#define MODULE_ipcSemaphoreh

// semaphore type designation and operation type
enum ipcSemaphoreType { unknown = 0, mutex = 1, event = 2 };
enum ipcSemaphoreOp { semcreate = 0, semaccess = 1 };

// forward declaration
class osSemaphore;

// class declaration
class ipcSemaphore {

friend class osSemaphore;

public:
   // constructor and destructor
   ipcSemaphore(const char *name,         // unique name for semaphore
         ipcSemaphoreType type,       // mutex or event
         ipcSemaphoreOp operation);   // create or access the semaphore
   virtual ~ipcSemaphore();

   // methods for getting semaphore parameters [name, semaphore id, type of 
   // semaphore (mutex or event) and whether this is the owner (creator)
    // of the semaphore]
   char *Name() const;
   unsigned long ID() const;
   ipcSemaphoreType Type() const;
   int Owner() const;

   // pure virtual query method for number of requests made for the semaphore
   // (must be redefined in derived classes)
   virtual unsigned long Query() = 0;

   // class version and object state data types
   enum version { MajorVersion = 1, MinorVersion = 0 };
   enum state { good = 0, bad = 1, badname = 2, notfound = 3 };

   // methods to get the object state
   inline int rdstate() const { return myState; }
   inline int operator!() const { return(myState != good); }
protected:
   osSemaphore *myImpl;    // implementation
   state myState;     // (object state (good, bad, etc.)
private:
   // private copy constructor and operator= (define these and make them
   // public to enable copy and assignment of the class)
   ipcSemaphore(const ipcSemaphore&amp;);
   ipcSemaphore&amp; operator=(const ipcSemaphore&amp;);
};
#endif


</pre>
<h4><a name="00f6_0052">Listing Two<a name="00f6_0052"></h4><pre>

// ****************************************************************************
// Module:  ossem.h  --  Author:  Dick Lam
// Purpose: C++ class header file for osSemaphore
// Notes:   This is a base class.  It contains general implementation methods
//      for semaphores used in signalling between processes and threads.
// ****************************************************************************

#ifndef MODULE_osSemaphoreh
#define MODULE_osSemaphoreh
#include &quot;ipcsem.h&quot;
// class declaration
class osSemaphore {

public:
   // constructor and destructor
   osSemaphore(ipcSemaphore *interface, const char *name, 
                              ipcSemaphoreType type, ipcSemaphoreOp operation);
   virtual ~osSemaphore();
   // methods for getting semaphore parameters [name, semaphore id, type of 
   // semaphore (mutex or event) and whether this is the owner (creator)
   // of the semaphore]
   char *Name() const;
   unsigned long ID() const;
   ipcSemaphoreType Type() const;
   int Owner() const;

   // mutex semaphore methods
   void CreateMutex();
   void OpenMutex();
   void RequestMutex();
   void ReleaseMutex();
   unsigned long QueryMutex();
   void CloseMutex();

   // event semaphore methods
   void CreateEvent();
   void OpenEvent();
   void PostEvent();
   void ResetEvent();
   void WaitEvent();
   unsigned long QueryEvent();
   void CloseEvent();
protected:
   ipcSemaphore *myInterface;    // pointer to the interface instance
   char *myName;        // semaphore name, id and type
   unsigned long myID;
   ipcSemaphoreType myType;
   int isOwner;         // flag indicating whether this is owner
private:
   // private copy constructor and operator= (define these and make them
   // public to enable copy and assignment of the class)
   osSemaphore(const osSemaphore&amp;);
   osSemaphore&amp; operator=(const osSemaphore&amp;);
};
#endif


</pre>
<h4><a name="00f6_0053">Listing Three<a name="00f6_0053"></h4><pre>

// ****************************************************************************
// Module:  ipcsem.C   --  Author:  Dick Lam
// Purpose: C++ class source file for ipcSemaphore
// Notes:  This is an abstract base class.  It is the interface class for
//     semaphores used in signalling between processes and threads.
// ****************************************************************************
#include &quot;ipcsem.h&quot;
#include &quot;ossem.h&quot;
// ****************************************************************************
// ipcSemaphore - constructor
ipcSemaphore::ipcSemaphore(const char *name, ipcSemaphoreType type,
                                          ipcSemaphoreOp operation)
{
   // init instance variables
   myState = good;
   myImpl = new osSemaphore(this, name, type, operation);
   if (!myImpl)
   myState = bad;
}
// ----------------------------------------------------------------------------
// ~ipcSemaphore - destructor
ipcSemaphore::~ipcSemaphore()
{
   delete myImpl;
}
// ----------------------------------------------------------------------------
// Name - returns the name of the semaphore
char *ipcSemaphore::Name() const
{
   if (!myImpl)
     return 0;
   return myImpl-&gt;Name();
}
// ----------------------------------------------------------------------------
// ID - returns the semaphore id
unsigned long ipcSemaphore::ID() const
{
   if (!myImpl)
      return 0L;
   return myImpl-&gt;ID();
}
// ----------------------------------------------------------------------------
// Type - returns the type of semaphore
ipcSemaphoreType ipcSemaphore::Type() const
{
   if (!myImpl)
    return unknown;
   return myImpl-&gt;Type();
}
// ----------------------------------------------------------------------------
// Owner - returns 1 if this is the owner (creator), and 0 otherwise
int ipcSemaphore::Owner() const
{
   if (!myImpl)
     return 0;
   return myImpl-&gt;Owner();
}


</pre>
<h4><a name="00f6_0054">Listing Four<a name="00f6_0054"></h4><pre>

// ****************************************************************************
// Module:  ipcmutex.h  -- Author:  Dick Lam
// Purpose: C++ class header file for ipcMutexSemaphore
// Notes:  This class is derived from ipcSemaphore.  It is an interface class
//     for mutex semaphores that can be used to control access to a shared
//     resource across processes or threads.
// ****************************************************************************

#ifndef MODULE_ipcMutexSemaphoreh
#define MODULE_ipcMutexSemaphoreh
#include &quot;ipcsem.h&quot;
// class declaration
class ipcMutexSemaphore : public ipcSemaphore {

public:
   // constructor and destructor
   ipcMutexSemaphore(const char *name, ipcSemaphoreOp operation = semcreate);
   virtual ~ipcMutexSemaphore();

   // query method for number of requests made
   virtual unsigned long Query();

   // request and release methods (to lock and unlock resources)
   virtual void Request();
   virtual void Release();
private:
   // private copy constructor and operator= (define these and make them
   // public to enable copy and assignment of the class)
   ipcMutexSemaphore(const ipcMutexSemaphore&amp;);
   ipcMutexSemaphore&amp; operator=(const ipcMutexSemaphore&amp;);
};
#endif


</pre>
<h4><a name="00f6_0055">Listing Five<a name="00f6_0055"></h4><pre>

// ****************************************************************************
// Module:  ipcmutex.C  -- Author:  Dick Lam
// Purpose: C++ class source file for ipcMutexSemaphore
// Notes:  This class is derived from ipcSemaphore.  It is an interface class
//     for mutex semaphores that can be used to control access to a shared
//     resource across processes or threads.
// ****************************************************************************
#include &quot;ipcmutex.h&quot;
#include &quot;ossem.h&quot;
// ****************************************************************************
// ipcMutexSemaphore - constructor
ipcMutexSemaphore::ipcMutexSemaphore(const char *name,ipcSemaphoreOp operation)
   : ipcSemaphore(name, mutex, operation)
{
   // check the state of the object
   if (myState != good)
        return;
   // create or open the semaphore
   if (operation == semcreate)
     myImpl-&gt;CreateMutex();
   else if (operation == semaccess)
    myImpl-&gt;OpenMutex();
}
// ----------------------------------------------------------------------------
// ~ipcMutexSemaphore - destructor
ipcMutexSemaphore::~ipcMutexSemaphore()
{
   // close the semaphore
   if (myState == good)
        myImpl-&gt;CloseMutex();
}
// ----------------------------------------------------------------------------
// Query - returns the number of requests made of the semaphore
unsigned long ipcMutexSemaphore::Query()
{
   if (myState == good)
      return myImpl-&gt;QueryMutex();
   return 0L;
}
// ----------------------------------------------------------------------------
// Request - requests the semaphore
void ipcMutexSemaphore::Request()
{
   if (myState == good)
     myImpl-&gt;RequestMutex();
}
// ----------------------------------------------------------------------------
// Release - releases the semaphore
void ipcMutexSemaphore::Release()
{
   if (myState == good)
         myImpl-&gt;ReleaseMutex();
}


</pre>
<h4><a name="00f6_0056"><a name="00f6_00fb">Listing Six<a name="00f6_0056"></h4><pre>

// ****************************************************************************
// Module:  ipcevent.h -- Author:  Dick Lam
// Purpose: C++ class header file for ipcEventSemaphore
// Notes:   This class is derived from ipcSemaphore.  It is an interface class
//      for event semaphores that can be used to signal events across
//      processes or threads.
// ****************************************************************************

#ifndef MODULE_ipcEventSemaphoreh
#define MODULE_ipcEventSemaphoreh

#include &quot;ipcsem.h&quot;

// class declaration
class ipcEventSemaphore : public ipcSemaphore {

public:
   // constructor and destructor
   ipcEventSemaphore(const char *name, ipcSemaphoreOp operation = semcreate);
   virtual ~ipcEventSemaphore();
   // query method for number of requests made
   virtual unsigned long Query();
   // post, reset and wait methods
   virtual void Post();
   virtual void Reset();
   virtual void Wait();
private:
   // private copy constructor and operator= (define these and make them
   // public to enable copy and assignment of the class)
   ipcEventSemaphore(const ipcEventSemaphore&amp;);
   ipcEventSemaphore&amp; operator=(const ipcEventSemaphore&amp;);
};
#endif


</pre>
<h4><a name="00f6_00fc"><a name="00f6_0057">Listing Seven<a name="00f6_0057"></h4><pre>

// ****************************************************************************
// Module:  ipcevent.C  -- Author:  Dick Lam
// Purpose: C++ class source file for ipcEventSemaphore
// Notes:  This class is derived from ipcSemaphore.  It is an interface class
//     for event semaphores that can be used to signal events across
//     processes or threads.
// ****************************************************************************
#include &quot;ipcevent.h&quot;
#include &quot;ossem.h&quot;
// ****************************************************************************
// ipcEventSemaphore - constructor
ipcEventSemaphore::ipcEventSemaphore(const char *name,ipcSemaphoreOp operation)
   : ipcSemaphore(name, event, operation)
{
   // check the state of the object
   if (myState != good)
      return;
   // create or open the semaphore
   if (operation == semcreate)
      myImpl-&gt;CreateEvent();
   else if (operation == semaccess)
      myImpl-&gt;OpenEvent();
}
// ----------------------------------------------------------------------------
// ~ipcEventSemaphore - destructor
ipcEventSemaphore::~ipcEventSemaphore()
{
   // close the semaphore
   if (myState == good)
      myImpl-&gt;CloseEvent();
}
// ----------------------------------------------------------------------------
// Query - returns the number of requests made of the semaphore
unsigned long ipcEventSemaphore::Query()
{
   if (myState == good)
    return myImpl-&gt;QueryEvent();
   return 0L;
}
// ----------------------------------------------------------------------------
// Post - posts the semaphore
void ipcEventSemaphore::Post()
{
   if (myState == good)
        myImpl-&gt;PostEvent();
}
// ----------------------------------------------------------------------------
// Reset - resets the semaphore
void ipcEventSemaphore::Reset()
{
   if (myState == good)
        myImpl-&gt;ResetEvent();
}
// ----------------------------------------------------------------------------
// Wait - waits for a semaphore event to be posted
void ipcEventSemaphore::Wait()
{
   if (myState == good)
      myImpl-&gt;WaitEvent();
}
</pre>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
