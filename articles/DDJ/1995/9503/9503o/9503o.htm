<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>MAR95: EDITORIAL</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>EDITORIAL<a name="00ee_0043"></h1><P>
<h2><a name="00ee_0042"><a name="00ee_0000">Logo No-Go</h2><P>
One way to go about defining the future is to present a vision so crystalline, so compelling that anyone encountering it is moved to action. Over 20 years ago, I listened to Buckminster Fuller, author of <I>Operating Manual for Spaceship Earth</I> and inventor of the geodesic dome, speak of the future as he envisioned it. Although I didn't move into a dome that night, what he said has served as a beacon for me ever since.<P>
Other approaches to defining the future are more heavy-handed. A case in point is Microsoft's move to sculpt the face of computing. From compilers to comm ports, Microsoft wants to dictate the PC platforms we'll be using in the years to come, and it's dangling the Windows 95 logo as bait. <P>
Microsoft opened the logo-licensing door years ago by making available, under relatively relaxed terms, a variety of logos denoting Windows-compatible products. Why? Because both Microsoft and licensees benefited from what amounted to a business partnership. Claiming customer confusion, Microsoft has instituted a new program that lumps all the old logos under a single Win95 flag, but with some very specific licensing terms.<P>
For starters, an application developer wanting to promote a Win32-targeted word processor (or any other application capable of opening, saving, or closing a file) must create the app with a 32-bit compiler that generates a PE format executable, register 16x16 and 32x32 icons, use system metrics for sizing, use the right mouse button for context menus, and so forth. Although extensive, these requirements are reasonable since they do lead to well-behaved and consistently presented applications, something end users doubtlessly appreciate. <P>
But wait, there's more. Win95 applications must also run on Windows NT, use long filenames, support universal naming-convention pathnames, support OLE 2.0 features such as drag-and-drop and container/objects, and be mail enabled via the Common Messaging Call API. <P>
Compilers and other development tools must support OLE drag-and-drop, provide point-and-click means of creating apps with OLE-container/object support, and support OLE Automation (although OLE Automation itself isn't required). Furthermore, tool vendors must provide class libraries that support OLE functionality, including container/object, drag-and-drop, compound files, and Automation.<P>
Hardware manufacturers aren't off the hook either. System vendors have to provide Plug and Play BIOS 1.0a (or better), permanent icon labels on the PC case, option ROMs with Plug and Play header format, an IEEE-P1284-I parallel port, a 1-16550A serial port, and so on. For their part, subsystem vendors hawking everything from network adapters to floppy-disk controllers have their own set of requirements, down to the I/O addresses and IRQs they can use. <I>PC Week</I> reports that OEM customers are even being offered discounts on licensing fees at below Win3.1 levels if they sign logo-licensing contracts prior to March 1, 1995 and install Win95 on at least 50 percent of systems shipped within one month after Win95 ships.<P>
But what if your app doesn't really need NT, OLE, or mail support? Write it anyway, but don't expect Microsoft to let you use its logo to promote your software. In short, it isn't enough that hardware and software systems be Win95 <I>compatible</I>. Microsoft will only grant logo licenses for products that are <I>specifically designed</I> from the ground up to meet Microsoft's requirements for Win95. In fairness, Microsoft is showing some flexibility. If hardware architectures dictate non-Win95 compliant features (such as device support), the company will still grant a license.<P>
The basic assumption in all this is that the Win95 logo--like the now familiar &quot;Intel Inside&quot; label--has value in the first place. Microsoft obviously thinks so, stating flat out that &quot;We feel strongly that the Windows Logo [sic] is a valuable marketing tool_.&quot; In truth, the logo does have value, particularly in a market dominated by less-sophisticated users. If two word processors are side-by-side on the store shelf and one has a perceived Microsoft seal-of-approval, which do you think the first-time buyer of a Packard Bell multimedia PC is going to pick up? <P>
Adopting a Newt Gingrich-like stance when defending the logo program in an <I>Infoworld</I> interview, Bill Gates said: &quot;We're not forcing [ISVs] to do anything_. It's our logo. We own the logo, but they don't need the logo. They can sell their software without the logo. So what's the big deal? You can be a player [in the Win95 market]. Here's how you play: You write good software. You sell it.&quot;<P>
Uhh, what's the big deal? Well for one thing, some companies may not have the resources or desire to add the extra baggage of OLE, mail, or NT support if they don't need it. Secondly, third-party developers are being used as cannon fodder in a marketing war that pits Microsoft object models (COM) and compound-document architectures (OLE) against competitors, such as SOM or OpenDoc, respectively. Furthermore, the logo program appears as an attempt to promote Microsoft development tools which &quot;automatically&quot; generate the necessary code. And, if nothing else, the policy is a means of forcing developer support for a relatively small NT market. <P>
Microsoft's scheme calls for developer self-testing of every product before submitting it to an independent testing house for another round of evaluation. If new-product confidentiality is of concern, test results will be held in escrow until a vendor-specified date. In any event, the results will eventually go to Microsoft's logo-licensing group. Developers will then have to choose between putting a new product on the shelf without the logo, or restructuring their marketing plans to accommodate a clumsy licensing process. Again in fairness, Microsoft apps must go to the independent testing lab along with third parties.<P>
To enforce proper use of the logo, Microsoft's new logo police (the &quot;gestaplogo?&quot;) will routinely pull software and hardware off the retail shelf to check compliance and ensure that papers are in order. <P>
In the past, I've lauded Microsoft for its willingness to hang in there with projects it believes in, without regard to next quarter's return on investment. Windows is the best example of this tenaciousness. However, there's nothing admirable about Microsoft's Win95 logo program. Windows is a success because of the thousands of third-party applications that run on it, not because of its technical superiority. Maybe it's time Microsoft remembered that it's sometimes best, as the old saying goes, to dance with those who brung ya' and start treating third-party developers as partners, rather than serfs.<P>
<h3>Jonathan Erickson<P>editor-in-chief</h3><P>
<P>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
