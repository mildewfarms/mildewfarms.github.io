<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>MAR95: LETTERS</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>LETTERS<a name="00f0_0001"></h1><P>
<h3><a name="00f0_0002">DAN Revisited<a name="00f0_0002"></h3><P>
Dear <I>DDJ,</I><P>
I just read &quot;DAN,&quot; by Reginald B. Charney (<I>DDJ</I>, August 1994), and I enjoyed it greatly. The code that would come up is wonderfully clear but...<P>
Wouldn't using DAN discourage the reuse of code? In Reg's example, the basics of the classes <I>Cost</I> and <I>List</I> would be the same. In fact, it is conceivable that the code modules would be identical except for a Search-and-Replace of all instances of <I>Cost</I> with <I>List</I>.<P>
The first answer that I see to that is &quot;inheritance.&quot; However, although I've programmed in C++ classes for the last three years, I've never had to be concerned with speed and only a little concerned with size, so I've never checked whether or not inheritance (without virtual functions) adds any negative effects. I know virtual functions add space (the V-Table) and time (lookup in the table).<P>
Darren <P>
Germany<P>
<I>Reg responds:</I> Thank you for the complement and questions. Both are very much appreciated. I will try to answer the two questions you raised.<P>
First, &quot;Does DAN discourage reuse of code?&quot;; and second, &quot;Does inheritance without virtual functions add any overhead?&quot;<P>
It is my experience and belief that DAN improves the reuse of code. Code is re-used when its purpose is clear and its interface is clean. Since DAN maps closely to your own requirements, it is easy to use a DAN class as a base for further specialization. Also, a DAN class's member functions tend to be simple and intuitive since most are based on the attributes of the class. For example, let us assume you sell a line of software and you intend to extend the line to include a &quot;lite&quot; and &quot;pro&quot; version. Let the class SKU (Stock Keeping Unit) be the base for all your products, and let us say it is defined as in <a href="#00f0_0003">Example 1</A>.<P>
As you can see, the base DAN class SKU has been used to build the derived DAN class <I>CostedSKU</I>. This simple example does not use virtual member functions, but in real life it probably would.<P>
I was delayed in answering your question by a &quot;problem&quot; that I preceived with this solution. I needed to duplicate the operators &lt;&lt; and &gt;&gt; from the base class SKU in the derived class <I>CostedSKU</I>. This seemed ugly. However, it is needed for two reasons. <P>
The first reason is that while the operators &lt;&lt; and &gt;&gt; are defined for base class <I>B</I>, they must return values of the type <I>D&amp;,</I> where <I>D</I> is the derived-class type. For example, <a href="#00f0_0004">Example 2</A> would be invalid for two reasons. First, the result of d&lt;&lt;x1 would be a <I>B&amp;</I> (not a <I>D&amp;,</I> as desired); and second, the operator &lt;&lt; in the preceding example is a member function, and the type of the first operand of the operator &lt;&lt; would not be converted from a <I>D&amp;</I> to a <I>B&amp;</I>; thus, the operator <I>B::operator &lt;&lt;()</I> would not be invoked and we would have an undefined operation. (Making the <I>operator&lt;&lt;</I> a friend function is possible and at first glance overcomes the conversion problem; however, it involves so much extra work for a limited return that it was not viewed as a viable solution.)<P>
The second reason for the &quot;problem&quot; is philosophical. Should the attributes of a base class be <I>implicitly</I> accessible in a derived class? While mechanically we may want to say yes, in general we want to say no, since the attributes making up the base class are usually hidden by the derived-class encapsulation. In the preceding example, is it normal to want to know the packing list on a <I>CostedSKU</I> as opposed to a basic SKU? If a car is composed of an Engine and Body, is it normal to ask the number of Cylinders the car has without first referring to the Engine of the Car. That is, while the expression <I>Cylinders(Car)</I> is possible, the expres-sion <I>Cylinders(Engine(Car))</I> makes more sense. If the former is desired, then an explicit definition can be provided to convert a <I>Car</I> instance to the number of <I>Cylinders</I> the car engine has.<P>
You also asked if classes do not contain virtual functions, is there any overhead? Under ideal conditions, the answer is no. However, this translates into a quality-of-implementation issue, and different compilers may produce slightly different results. However, it is my belief that eventually, optimized code for all major vendors will produce derived classes with no overhead if no virtual inheritance is used. (Compiling in debug information into a module may result in more overhead for derived classes, regardless of the presence or absence of virtual functions.)<P>
Dear <I>DDJ</I>,<P>
I just read the article, &quot;Data Attribute Notation Relationships,&quot; by Reginald Charney (<I>DDJ</I>, January 1995), which is a follow-up on a prior article describing DAN. Neither article explores the downside to DAN's Generating Encapsulation Redundancy, or &quot;DANGER.&quot; <P>
As for data, a &quot;root&quot; class (or attribute class) contains a single data attribute. Non-root classes are used to provide additional data attributes, but no data attributes are allowed in nonroot classes. Therefore, a root class is defined (or redefined in this case) as a data attribute. Each nonroot <I>Object</I> must instantiate all of its encapsulated <I>Object</I>s, and each subsequent encapsulated <I>Object</I> then instantiates all of its <I>Object</I>s until a root <I>Object</I> is encountered. This could create quite a call stack for &quot;actual&quot; applications and would definitely create longer execution times.<P>
Next, the original article stated a DAN benefit of not polluting the namespace as badly as with access functions. First, access functions are encapsulated within a class (if properly designed) and are available only to objects as defined in the interface, but classes are &quot;global.&quot; Second, DAN pollutes the environment with classes which jeopardizes inheritance and reusability, not to mention conflicting class names for libraries and programs. For example, (DAN) <I>Class X</I> is the x coordinate of a point defined as a FLOAT, and by itself means what? Furthermore, defining <I>Class X</I> as an INTEGER doesn't make it more/less meaningful. (Non-DAN) <I>Class X</I> defined as the x chromosome does have meaning by itself. Continuing, (DAN) <I>Class XYPoint</I> is a class encapsulating two classes, <I>Class X</I> and <I>Class Y,</I> rather than containing two attributes, <I>FLOAT x</I> and <I>FLOAT y</I>. Of course, <I>Class X</I> and <I>Class Y</I> are entirely redundant as defined (to show the <I>Class X</I> conflict), so we change (DAN) <I>Class X/Class Y</I> to <I>Class Point,</I> and <I>XYPoint</I> now encapsulates <I>Class Point x</I> and <I>Class Point y</I>.<P>
Some of the disadvantages to using DAN are: <P>
<UL>
<li>If the data attribute of <I>Class Point</I> is inappropriate, we cannot overload the class name to implement a different data type (that is, DOUBLE LONG).</li>
<li>DAN is linear (flat) in nature, so inheritance does not make much sense. After all, all data attributes are in attribute classes and multiple inheritance may be obscured.</li>
<li>Operators (&gt;&gt; &amp; &lt;&lt;) rely on the internals of the classes violating encapsulation (increasing maintenance costs) for simple access to data attributes,</li>
<li>Overloading an access function (such as <I>calcSalary()</I>) to calculate a salary for various employees is not possible; there are no &quot;real&quot; access functions. DAN does support additional classes to simulate access functions, but again, more classes mean more objects, additional memory consumption, and longer execution times. Consider this example: A small application contains 42 user-defined classes. An average of 4 data attributes for 30 of the classes gives us 120 attribute classes plus additional classes for &quot;Boolean functions&quot; such as <I>isTrainServiced(),</I> plus nonattribute classes which amount to 178 additional classes. Total: 298 classes versus 42. Or, (DAN) <I>Class List</I> is an attribute class containing a DOUBLE. Wouldn't you consider the class <I>List</I> to be a container type class and not a variable? What about class <I>Cost</I>? Think of the problems [that arise] if any of the attribute classes contain a class variable and pure virtual class cannot exist. Notation should not affect software design or execution time; however, DAN certainly does. Data abstraction is but one element of the OO puzzle (inheritance, polymorphism, data abstraction, encapsulation, reusability_), and no element can be isolated. Therefore, a complete understanding of each element is required along with an understanding of how all the elements are put together to create OO programs.</li>
</UL>
Timothy D. Nestved<P>
Orlando, Florida<P>
<h4><a name="00f0_0003"><B>Example 1:</B> Test DAN and inheritance.<a name="00f0_0003"></h4><P>
<pre>// test.cpp - test DAN and inheritance
#include &lt;iostream.h&gt;
#include &lt;string.h&gt;
class PartNumber {
    long n;
public:
    PartNumber(long nn=0) : n(nn) { }
    operator long() const { return n; }
};
class Media {
    char *cp;
public:
    Media(char* ccp=0) : cp(ccp) { }
    operator const char*() const { return cp; }
    // ... should also define copy constructor &amp; assignment op
};
class PackingList {
    char *cp;
public:
    PackingList(char* ccp=0) : cp(ccp) { }
    operator const char*() const { return cp; }
    // ... should also define copy constructor &amp; assignment op
};
class SKU {         // simplified Stock Keeping Class
protected:
    PartNumber pn;
    Media m;
    PackingList pl;
public:
    operator const PartNumber&amp;() const  { return pn; }
    operator const Media&amp;() const       { return m; }
    operator const PackingList&amp;() const { return pl; }
    SKU&amp; operator &lt;&lt;(const PartNumber&amp; ppn){ pn = ppn; return *this; }
    SKU&amp; operator &lt;&lt;(const Media&amp; mm)      { m = mm; return *this; }
    SKU&amp; operator &lt;&lt;(const PackingList&amp; ppl){ pl = ppl; return *this; }
    SKU&amp; operator &gt;&gt;(PartNumber&amp; ppn)      { ppn = pn; return *this; }
    SKU&amp; operator &gt;&gt;(Media&amp; mm)            { mm = m; return *this; }
    SKU&amp; operator &gt;&gt;(PackingList&amp; ppl)     { ppl = pl; return *this; }
    friend ostream&amp; operator &lt;&lt;(ostream&amp; os, SKU&amp; ss);
    // ... other public member functions
};
// Now let us define a CostedSKU class for use in sales and costing.
class Cost {
    double c;
public:
    Cost(double cc=0.0) : c(cc) { }
    operator double() const { return c; }
    friend ostream&amp; operator&lt;&lt;(ostream&amp; os, const Cost&amp; cc);
};   // cost in some standard currency (dollars, DeutschMarks, etc.)
ostream&amp; operator &lt;&lt;(ostream&amp; os, const Cost&amp; cc) { return os &lt;&lt; cc.c; }
class SRP {
    double s;
public:
    SRP(double ss=0.0) : s(ss) { }
    operator double() const { return s; }
    friend ostream&amp; operator&lt;&lt;(ostream&amp; os, const SRP&amp; s);
};    // Suggested Retail Price in some standard currency
ostream&amp; operator &lt;&lt;(ostream&amp; os, const SRP&amp; ss) { return os &lt;&lt; ss.s; }
class CostedSKU : public SKU {
    Cost c;
    SRP s;
public:
  operator const Cost&amp;() const { return c; }
  operator const SRP&amp;() const  { return s; }
  operator SKU&amp;() const { return (SKU&amp;)*this; }
  CostedSKU&amp; operator &lt;&lt;(const Cost&amp; cc)    { c = cc;   return *this; }
  CostedSKU&amp; operator &lt;&lt;(const SRP&amp; ss)     { s = ss;   return *this; }
  CostedSKU&amp; operator &gt;&gt;(Cost&amp; cc)          { cc = c;   return *this; }
  CostedSKU&amp; operator &gt;&gt;(SRP&amp; ss)           { ss = s;   return *this; }
  CostedSKU&amp; operator &lt;&lt;(const PartNumber&amp; ppn){ pn = ppn; return *this; }
  CostedSKU&amp; operator &lt;&lt;(const Media&amp; mm)    { m = mm;   return *this; }
  CostedSKU&amp; operator &lt;&lt;(const PackingList&amp; ppl){ pl = ppl; return *this; }
  CostedSKU&amp; operator &gt;&gt;(PartNumber&amp; ppn)    { ppn = pn; return *this; }
  CostedSKU&amp; operator &gt;&gt;(Media&amp; mm)          { mm = m;   return *this; }
  CostedSKU&amp; operator &gt;&gt;(PackingList&amp; ppl)    { ppl = pl; return *this; }
  // ... other public member functions
};
int main()
{
    CostedSKU cs;
    cs &lt;&lt; PartNumber(123);
    cs &lt;&lt; Media(&quot;3.5&quot;);
    cs &lt;&lt; PackingList(&quot;Users' Guide&quot;);
    cs &lt;&lt; PartNumber(123) &lt;&lt; Media(&quot;3.5&quot;) &lt;&lt; PackingList(&quot;Users' Guide&quot;);
    cs &lt;&lt; Cost(18.34);
    if (strcmp(Media(cs),&quot;CD-ROM&quot;) == 0)
        cs &lt;&lt; SRP(Cost(cs)+5.00);  // SRP based on cost of CD-ROM
    else
        cs &lt;&lt; SRP(Cost(cs)+10.00); // diskettes are more expensive than CD-ROM
    cerr &lt;&lt; &quot;SRP of SKU is &quot; &lt;&lt; SRP(cs) &lt;&lt; endl;
        return 0;
}</pre><P>
<h4><a name="00f0_0004"><B>Example 2:</B> DAN #2.<a name="00f0_0004"></h4><P>
<pre>class X;
class B { X x; public:
            B&amp; operator &lt;&lt;(X); };
class D : public B { /* ... */ };
D d;
X x1, x2;
d &lt;&lt; x1 &lt;&lt; x2;</pre><P>
<P>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
