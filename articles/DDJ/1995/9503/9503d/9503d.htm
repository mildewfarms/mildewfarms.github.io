<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>MAR95: Cross-Platform Database Programming</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Cross-Platform Database Programming<a name="0104_004b"></h1><P>
<h2><a name="0104_0049"><a name="0104_0000">Here's how one developer supports more than 100 platforms</h2><P>
<h3>William Fairman and Randal Hoff</h3><P>
<p><i><a name="0104_004a"><a name="0104_0000">William is the founder of FairCom Corp. and senior developer of c-tree, c-tree Plus, r-tree, and the FairCom Server. Randal is FairCom's director of technical operations. They can be contacted on CompuServe at 71333,72.</i></p><hr><P>
How many different combinations of operating systems and hardware platforms are used today? Fifty, a hundred--does anyone really know? How many are in the mainstream? DOS, Windows, NT, OS/2, Solaris, UNIX--Intel, Motorola, DEC, SunSPARC, IBM. With all of these choices, how are you to develop truly portable applications? <P>
The good news is that if an application is approached correctly and with foresight, writing portable code does not have to be a chore. In this article, we'll discuss coding strategies for developing truly portable database applications. In doing so, we'll focus on the strategies you can implement to ease the movement of code and data between computer platforms. The topics include code portability, function wrappers, size and alignment of data objects, binary word order, and true multiplatform portability. All of the techniques we'll cover here are real world--they're what FairCom uses to make its c-tree Plus File Handler highly portable. c-tree Plus is a C-function library of database calls designed from the ground up with portability in mind. The c-tree family has been ported to well over 100 platforms ranging from Cray supercomputers to embedded systems and virtually all machines in between. <P>
<h3><a name="0104_004c">Code Portability<a name="0104_004c"></h3><P>
The way you organize modules which comprise your application can greatly affect the time required to port it. We suggest explicitly organizing your application modules into two sets: one that is system independent and one that is system dependent. For example, in c-tree Plus, about 98 percent of the code resides in system-independent modules which are not changed when we port from platform to platform. Not one line of code in these modules has to be touched. The remaining code--the system-dependent modules--contains those aspects of c-tree Plus which depend on system specifics. For c-tree, virtually all the system-specific code relates to low-level file operations. <P>
To achieve this degree of separation, certain sections of a system-independent module may depend on a configuration setting in a system-dependent header file. However, these dependencies should reflect generic concepts, not platform-specific issues. In c-tree Plus for instance, there are <I>#ifdef</I>s in the system-independent modules which depend on the word order of binary values. Each system-dependent configuration header specifies the type of word order found on that platform; then the system-independent code need only have <I>#ifdef</I>s for the word-order choices, not for each platform. <P>
To minimize unexpected problems when moving your C source code from one platform to another, it is advisable to utilize a well-defined set of <I>typedef</I>s for the basic computational objects as well as for application-specific objects. For example, in c-tree Plus we use three different <I>typedef</I>s for integers: COUNT, LONG, and NINT. They are, respectively, 2-byte integers, 4-byte integers, and the platform's natural integer. (Of course, we also support unsigned versions of these integers.) Then on any platform, c-tree can always rely on a COUNT to be two bytes and a LONG to be four bytes. This is implemented in a manner typical of our portability strategy: Default <I>typedef</I>s are supplied in a system-independent header module, and an optional entry in a system-dependent module can override the default. For example, default <I>typedef</I>s like <a href="#0104_0051">Example 1</A> are found in a system-independent header file. In those few platforms where a <I>short int</I> is not two bytes or a <I>long int</I> is not four bytes, these <I>typedef</I>s can be specifically coded in the system-dependent header file, and the <I>#ifndef</I> will be false in the system-independent module.<P>
To shorten the porting time and avoid problems which are difficult to isolate, we use the C program in <a href="#0104_0054">Listing One</A> , which tests each of the system-specific dependencies found in c-tree Plus. By compiling and executing this module (which does not require any of the c-tree API) you can determine, among many other things, if your definition of COUNT really results in 2-byte integers, or whether the <I>memcmp</I> function performs signed or unsigned byte-wise comparisons. When we port to a new environment, executing this test program is one of the first steps we take.<P>
C lends itself to run-time library support. Many developers turn to third-party libraries to assist with database I/O, report generation, and other application necessities. When examining a third-party library, it is important to investigate its portability. If the library is developed and used properly, it can be a tremendous timesaver to the development and port of the application. Of course, if the library is not portable or available on different platforms, it may prove detrimental.<P>
<h3><a name="0104_004d">Function Wrappers<a name="0104_004d"></h3><P>
Another way to isolate your application from the specifics of the system or of third-party run-time libraries is to use function wrappers. These act as a layer between what your application needs to accomplish (say, adding a record to a database) and the particular function which will perform the desired action. <P>
By placing all the wrapper functions in one module, you can change the underlying operations without affecting the many application modules which use these functions. However, while C++ makes it easy to modify the parameters used to invoke an action, C is more rigid. Therefore, to keep your application well insulated from the underlying functions, you must carefully select the parameters used in your wrapper functions. While you cannot ignore the parameter requirements of the underlying functions, you must make sure that the wrapper function parameters reflect the essential nature of your application and the function being called. A wrapper should not simply repeat the exact parameters used in the underlying function.<P>
For example, in c-tree Plus <I>AddRecord</I> uses a small integer value to identify the data file involved. You may wish to use symbolic names to refer to data files. In this case, you would pass the symbolic name to the wrapper function, which would in turn call your own function to translate the name to a c-tree Plus file number. This same translation function would be used in many of the wrapper functions which call the c-tree Plus library.<P>
Carefully selecting a naming convention for your wrapper functions simplifies the task of locating them if they must be modified. We would suggest, for example, that all your database wrapper functions begin with <I>dbw_,</I> followed by the desired action; say, <I>dbw_AddRecord</I> for the function to add a record.<P>
<h3><a name="0104_004e">Size and Alignment of Data Objects<a name="0104_004e"></h3><P>
The three most pressing issues related to moving data across platforms are structure alignment, size of data objects, and byte order of binary values. <P>
Different hardware architectures and different C compilers enforce different alignment restrictions on various data types. An alignment restriction refers to the legitimate addresses at which a data object can be referenced. For instance, if a CPU can only address integers on even boundaries, integers are &quot;word-aligned.&quot; Attempting to reference an integer on an odd boundary (that is, its beginning address is odd) would probably cause a system exception. Generally, a data object is at most restricted to an address boundary no larger than the data object itself. For instance, a 4-byte integer will at most be required to be aligned on a 4-byte (double-word aligned) boundary while a 2-byte integer on the same machine will, at worst, be restricted to a 2-byte boundary.<P>
For information which only exists temporarily in memory, alignment restrictions are not a concern. But if your data structures are not carefully planned, then information stored on disk may not be usable across different platforms: The position of members within a data structure will change between platforms, and/or the size of the data structures will be different across platforms. To avoid these dilemmas, we:<P>
<OL>
<LI>Create a set of constant size <I>typedef</I>s for basic data items (as discussed earlier for COUNT and LONG).</LI>
<LI>Place members in structures to encourage &quot;automatic&quot; alignment, and use explicit padding between members as necessary.</LI>
<LI>Add padding to the end of a structure, if necessary, to keep the size of the structure a multiple of its largest-sized data type.</LI>
</OL>
The first step implies that we discourage the use of natural integers as part of data structures used for permanent storage. If moving your data across platforms is not important, then this is not an issue. (Some application developers will be more than satisfied if the application is portable, with no regard to the portability of the data. They do not expect the data to be moved from platform to platform.)<P>
The second step implies that the largest data items be placed first in the structure, or that shorter data objects be grouped together to form clusters, the size of the most restricted alignment requirement. For example, if the largest member of a data structure is a 4-byte integer, then the 4-byte integers should be at the beginning of the structure. If you wish to place shorter members at the beginning, then group them in clusters which are multiples of four bytes. Note that character arrays are treated (along with individual characters) as the smallest data types, and should occur at the end of the structures.<P>
The third step is necessary to ensure no size difference across platforms regardless of whether padding was required between structure members.<P>
Two good examples of proper alignment techniques are shown in <a href="#0104_0052">Example 2</A>. (Note that UTEXT represents a 1-byte unsigned character and TEXT, a signed character.)<P>
If you do not follow this strategy, compilers on various platforms may be forced to insert padding bytes in front of some structure members to force the required alignment. Further, the size of the structures may vary from platform to platform. The structure in <a href="#0104_0053">Example 3</A> may result in an 8-byte structure on a byte-aligned platform and a 12-byte structure on a double-word-aligned platform. On a double-word platform, three bytes of padding would be inserted before the <I>customer_acc_rcv</I> member and one byte of padding before the <I>customer_zone</I> member. <P>
Finally, we strongly suggest omitting pointers to other structures within data structures used for permanent disk storage. While the use of pointers within structures is a very powerful and useful technique in C programming, we discourage it for actual data-storage structures. The size of pointers varies across platforms from as small as two bytes to as large as eight bytes, and the values of address pointers lose their meaning once the structure is placed on disk.<P>
<h3><a name="0104_004f">Binary Word Order<a name="0104_004f"></h3><P>
CPUs differ in the manner in which integers and floating-point values are stored in memory. On Little-endian machines, the lowest-order byte is stored in the first byte of the integer, and the most significant byte is stored last. Such CPUs include the Intel family of processors and the new DEC Alpha processors. On Big-endian machines, the highest-order byte is stored in the first byte, and the least-significant byte is stored last. These CPUs include the Motorola 68000 family of processors and the IBM RS/6000 family. (In some unusual circumstances, a binary value may be a mixture of these strategies.)<P>
While most application code is totally independent of the internal word ordering, this difference does pose a problem when moving application data across platforms. Such a move results in invalid binary values if the binary word ordering is different. c-tree Plus uses two different strategies to deal with this problem. One is to store the binary data on disk in the same order regardless of the platform's internal order. c-tree Plus uses this approach for its nonserver implementations, and stores the data in the Little-endian order (because of the great preponderance of Intel processors). The second strategy, employed with client/server implementations of c-tree Plus, stores the data in the server's native ordering. This places the burden for transforming byte ordering onto the client processors, relieving the server processor of this overhead.<P>
To permit c-tree Plus to automatically perform the byte-order transformations on application data, we take advantage of c-tree's ability to store resources in data files. c-tree Plus allows you to specify the field types of your data records in a resource stored within the data file. When the data is accessed, the field type information directs any necessary transformations. Also, if the data file is moved, it is still possible to interpret the data properly.<P>
<h3><a name="0104_0050">Summary<a name="0104_0050"></h3><P>
Careful organization and isolation of your application code from user and file-handling interfaces can significantly reduce the effort required to move your application code from one platform to another. Creating a test program sensitive to the platform-dependent elements of your application will further reduce the time and problems encountered in moving the code. With each port, you become more attuned to the issues of portability, and can further refine your strategy.<P>
By defining basic computational data objects which are size invariant across platforms, and by constructing stable, well organized data structures, your applications will even be able to share data across different platforms, or use data stored on different platforms.<P>
<h4><a name="0104_0051"><B>Example 1:</B> Default typedefs like this are found in a system-independent header file.<a name="0104_0051"></h4><P>
<pre>#ifndef INTEGER_OVERRIDE
  typedef short int COUNT;
  typedef long  int LONG;
#endif</pre><P>
<h4><a name="0104_0052"><B>Example 2:</B> Techniques for maintaining proper alignment.<a name="0104_0052"></h4><P>
<pre>(a)
typedef struct invent_record {
      LONG       invent_id;
      LONG       invent_level;
      LONG       invent_reorder;
      COUNT      invent_status;
      COUNT      invent_bin;
} INVENT_RECORD;
(b)
typedef struct vendor_record {
      COUNT      vendor_type;       /* The first three members  */
      UTEXT      vendor_status;     /* of this structure use    */
      UTEXT      vendor_reserved;   /* precisely four bytes.    */
      LONG       vendor_acc_pay;
      TEXT       vendor_name[58];
      TEXT       vendor_padding[2]; /* Keep struct multiple of 4*/
} VENDOR_RECORD;</pre><P>
<h4><a name="0104_0053"><B>Example 3:</B> The structure size in this example depends upon the byte alignment of the platform.<a name="0104_0053"></h4><P>
<pre>typedef struct customer_record {
     UTEXT     customer_status;
     LONG      customer_acc_rcv;
     UTEXT     customer_priority;
     COUNT     customer_zone;
} CUSTOMER_RECORD;</pre><P>
<P>
<h4><a name="0104_0054">Listing One <a name="0104_0054"></h4><pre>

/* Copyright (c) 1984 - 1994 FairCom Corporation. ALL RIGHTS RESERVED 
 * FairCom Corporation, 4006 West Broadway, Columbia, MO 65203.
 * 314-445-6833
 */

#include &quot;ctstdr.h&quot;
#include &quot;ctoptn.h&quot;

#define CTF &quot; 1 3 &quot;
#define S377    &quot;'\\377'&quot;

typedef struct {
    TEXT    mb1;
    } MB;
TEXT getbuf[128];
TEXT *align[5] = {
    &quot;strange: call FairCom (314) 445-6833&quot;,
    &quot;byte&quot;,
    &quot;word (2 bytes)&quot;,
    &quot;strange: call FairCom (314) 445-6833&quot;,
    &quot;double word (4 bytes)&quot;
    };
#ifdef PROTOTYPE
main ()
#else
main ()
#endif
{
    TEXT   buffer[8];
    TEXT   t255,*tp;
    COUNT  i,done,d[4],afactor;
    UCOUNT tu;

    TEXT *th,*tl;
    MB    mb[2];
    struct {
        ctRECPT pa1;
        TEXT    pa2;
        ctRECPT pp;
        ctRECPT pa3;
        ctRECPT pa4;
    } p;
    struct {
        ctRECPT ca1;
        TEXT    ca2;
        COUNT   cc;
    } c;
    struct {
        ctRECPT aa1;
        TEXT    aa2;
        TEXT    aa[3];
    } a;
    struct {
        ctRECPT ta1;
        TEXT    ta2;
        TEXT    tt;
    } t;

    if (SIZEOF(COUNT) != 2 ||
        SIZEOF(UCOUNT) != 2 ||
        SIZEOF(LONG) !=4 ||
        SIZEOF(VRLEN) != 4) {
        printf(
&quot;\n\nBefore continuing with CTTEST be sure that the following types are&quot;);
        printf(
  &quot;\ncorrectly sized. Make the necessary changes in CTPORT.H.\n\n&quot;);
        printf(&quot;              COUNT     UCOUNT    LONG     VRLEN\n&quot;);
        printf(&quot;              -------   -------   -------  -------\n&quot;);
        printf(&quot;  Should be:  2 bytes   2 bytes   4 bytes  4 bytes\n&quot;);
        printf(&quot;Actual size:  %d         %d         %d        %d\n\n&quot;,
             SIZEOF(COUNT),SIZEOF(UCOUNT),SIZEOF(LONG),SIZEOF(VRLEN));
        exit(0);
    } else {
        printf(&quot;\n\nCOUNT, UCOUNT, LONG &amp; VRLEN are properly sized.&quot;);
        tu = 40000;
        if (!(tu &gt; 0)) {
            printf(
&quot;\n\nBefore continuing with CTTEST, be sure that UCOUNT is an&quot;);
            printf(&quot;\nunsigned short integer. See CTPORT.H\n\n&quot;);
            exit(0);
        }
    }
    t255 = '\377';
    printf(&quot;\n\nC255 Test for CTCMPL.H:&quot;);
    printf(&quot;\n\tUse the following setup in CTCMPL.H - \t#define C255\t&quot;);
    if (t255 == -1)
        printf(&quot;%d&quot;,t255);
    else
        printf(S377);
    printf(&quot;\n\t\t\t    Current setting - \t#define C255\t&quot;);
    if (C255 == 0x00ff)
        printf(S377);
    if (C255 == -1)
        printf(&quot;%d&quot;,C255);
    i  = 0x0201;
    tp = (TEXT *) &amp;i;
    printf(&quot;\n\nLOW HIGH Test for CTOPTN.H:&quot;);
    printf(&quot;\n\tUse the following setup in CTOPTN.H - \t#define &quot;);
    if ((*tp &amp; 0x00ff) &gt; (*(tp + 1) &amp; 0x00ff))
        printf(&quot;HIGH_LOW&quot;);
    else
        printf(&quot;LOW_HIGH&quot;);
    printf(&quot;\n\t\t\t    Current setting - \t#define &quot;);
#ifdef LOW_HIGH
    printf(&quot;LOW_HIGH&quot;);
#endif
#ifdef HIGH_LOW
    printf(&quot;HIGH_LOW&quot;);
#endif
    /* NULL size test */
    printf(&quot;\nNULL Size Test: &quot;);
    if (SIZEOF(NULL) == SIZEOF(tp))
        printf(&quot;ok (%d bytes)&quot;,SIZEOF(NULL));
    else
        printf(&quot;inconsistent (NULL is %d bytes &amp; ptr's are %d bytes)&quot;,
            SIZEOF(NULL),SIZEOF(tp));
    /* test of compar function for byte-wise comparisons */
    for (i = 0; i &lt; 4; i++) {
        buffer[i]   = 'A';
        buffer[i+4] = '\377';
    }
    tp   = buffer;
#ifndef FASTCOMP
#ifdef ctDS
    done = ((COUNT) *tp &amp; 0x00ff) - ((COUNT) *(tp + 4) &amp; 0x00ff);
#else
    done = (*tp &amp; 0x00ff) - (*(tp + 4) &amp; 0x00ff);
#endif
    if (done &gt;= 0) {
        printf(
&quot;\n\n\nBefore continuing with CTTEST, call FairCom (314) 445-6833 concerning&quot;);
        printf(
&quot;\nthe critical compar function in CTCOMP.C. Please report the following&quot;);
        printf(
&quot;\nthree numbers to FairCom: %d %d %d\n&quot;,(*tp &amp; 0x00ff),(*(tp + 4) &amp; 0x00ff),
            done);
        exit(0);
    } else
#endif /* ~FASTCOMP */
        printf(&quot;\n\ncompar function (CTCOMP.C) test is successful.&quot;);
#ifndef ctNOMEMCMP
    done = ctrt_memcmp(tp,tp + 4,1);
    if (done &gt;= 0) {
        printf(
&quot;\n\n\nBefore continuing with CTTEST, add '#define ctNOMEMCMP' to ctcmpl.h.&quot;);
        printf(
&quot;\nThis indicates that your memcmp function cannot be used in our high speed&quot;);
        printf(
&quot;\nkey loading routine since its treats bytes as signed quantities.\n&quot;);
        exit(0);
    }
#endif
    /* PAUSE IN OUTPUT */
    printf(&quot;\n\nHit RETURN (or ENTER) to continue...&quot;);
    gets(getbuf);

       printf(&quot;\n\nAlignment test for help in computing key segment offsets.&quot;);

    th = (TEXT *) &amp;p.pa4;
    tl = (TEXT *) &amp;p.pa3;
    i  = th - tl;
    if (i == 1) {
        printf(
&quot;\n\n*** This machine addresses 32 bit words (not bytes). Call        ***&quot;);
        printf(
  &quot;\n*** FairCom at (314) 445-6833. STATUS &amp; HDRSIZ must be changed.  ***&quot;);
        afactor = 4;
    } else if (i == 2) {
        printf(
&quot;\n\n*** This machine addresses words (not bytes). Add 2 to STATUS in ***&quot;);
        printf(
  &quot;\n*** CTOPTN.H and add 4 to HDRSIZ in CTOPTN.H. Also each member   ***&quot;);
        printf(
  &quot;\n*** of a structure will be at least word aligned. In particular,&quot;);
        afactor = 2;
    } else
        afactor = 1;
    printf(&quot;  Members of\nstructures will be aligned as follows:\n\n&quot;);
    printf(&quot;\tMember Type      Alignment\n&quot;);
    printf(&quot;\t-----------      -----------------\n&quot;); 

    th = (TEXT *) &amp;p.pp;
    tl =          &amp;p.pa2;
    i  = (th - tl) * afactor;
    if (i &gt; 4) i = 0;
    printf(&quot;\t4 byte int       %s\n&quot;,align[i]);

    th = (TEXT *) &amp;c.cc;
    tl =          &amp;c.ca2;
    i  = (th - tl) * afactor;
    if (i &gt; 4) i = 0;
    printf(&quot;\t2 byte int       %s\n&quot;,align[i]);
    if (i &gt; 2)
        printf(
&quot;\nCall FairCom (314) 445-6833 concerning 2 byte integer alignment.\n&quot;);

    th = (TEXT *)  a.aa;
    tl =          &amp;a.aa2;
    i  = (th - tl) * afactor;
    if (i &gt; 4) i = 0;
    printf(&quot;\tchar array       %s\n&quot;,align[i]);

    th = &amp;t.tt;
    tl = &amp;t.ta2;
    i  = (th - tl) * afactor;
    if (i &gt; 4) i = 0;
    printf(&quot;\tchar             %s\n&quot;,align[i]);

    printf(&quot;\n\nStructure 'SIZEOF' Test: &quot;);
    i = SIZEOF(MB);
    th = &amp;mb[1].mb1;
    tl = &amp;mb[0].mb1;
    if (i == (th - tl))
        printf(&quot; OK&quot;);
    else
        printf(
&quot;\nCall FairCom at (314) 445-6833 to report these two numbers: %d %d\n&quot;,
            i, (th - tl));
    printf(&quot;\n\nShort Integer Input Test for CTOPTN.H:&quot;);

    done = NO;
    d[1] = d[3] = 5;
    if (sscanf(CTF,&quot;%h %h&quot;,d,d+2) == 2 &amp;&amp;
        d[0] == 1 &amp;&amp; d[2] == 3 &amp;&amp; d[1] == 5 &amp;&amp; d[3] == 5) {
        printf(
&quot;\n\tUse the PERC_H option in CTOPTN.H.\n&quot;);
        done = YES;
    }
    if (!done) {
        d[1] = d[3] = 5;
        if (sscanf(CTF,&quot;%d %d&quot;,d,d+2) == 2 &amp;&amp;
            d[0] == 1 &amp;&amp; d[2] == 3 &amp;&amp; d[1] == 5 &amp;&amp; d[3] == 5) {
            printf(
&quot;\n\tUse the PERC_D option in CTOPTN.H.\n&quot;);
            done = YES;
        }
    }
    if (!done) {
        d[1] = d[3] = 5;
        if (sscanf(CTF,&quot;%hd %hd&quot;,d,d+2) == 2 &amp;&amp;
            d[0] == 1 &amp;&amp; d[2] == 3 &amp;&amp; d[1] == 5 &amp;&amp; d[3] == 5) {
            printf(
&quot;\n\tUse the PERC_HD option in CTOPTN.H.\n&quot;);
            done = YES;
        }
    }
    if (!done)
        printf(
&quot;\n\n*** COMPILER DOES NOT CONFORM TO KNOWN CONVENTIONS ***\n&quot;);

    printf(&quot;\tCurrent setting - &quot;);
#ifdef PERC_H
    printf(&quot;PERC_H&quot;);
#endif
#ifdef PERC_D
    printf(&quot;PERC_D&quot;);
#endif
#ifdef PERC_HD
    printf(&quot;PERC_HD&quot;);
#endif
    /* PAUSE IN OUTPUT */
    printf(&quot;\n\nHit RETURN (or ENTER) to continue...&quot;);
    gets(getbuf);

    printf(&quot;\n\nCTOPTN.H SUMMARY -\n&quot;);

#ifdef FPUTFGET
    printf(&quot;\nFPUTFGET:\tnon-server, multi-user application&quot;);
#endif
#ifdef NOTFORCE
    printf(&quot;\nNOTFORCE:\tsingle-user or server based application&quot;);
#endif

#ifdef RESOURCE
    printf(&quot;\nRESOURCE:\tresources are supported&quot;);
#else
    printf(&quot;\nNO_RESOURCE:\tresources are NOT supported&quot;);
#endif

#ifdef CTBATCH
    printf(&quot;\nCTBATCH:\tbatch retrieval is supported&quot;);
#else
    printf(&quot;\nNO_BATCH:\tbatch retrieval is NOT supported&quot;);
#endif

#ifdef CTSUPER
    printf(&quot;\nCTSUPER:\tsuperfiles are supported&quot;);
#else
    printf(&quot;\nNO_SUPER:\tsuperfiles are NOT supported&quot;);
#endif

#ifdef LOW_HIGH
    printf(&quot;\nLOW_HIGH:\tLSB to MSB ordering (ala Intel 8086 family)&quot;);
#endif
#ifdef HIGH_LOW
    printf(&quot;\nHIGH_LOW:\tMSB to LSB ordering (ala Motorola 68000 family)&quot;);
#endif

#ifdef VARLDATA
    printf(&quot;\nVARLDATA:\tvariable length data records are supported&quot;);
#else
    printf(&quot;\nNO_VARLD:\tvariable length data records are NOT supported&quot;);
#endif

#ifdef PERC_H
    printf(&quot;\nPERC_H:\t\t%%h&quot;);
#endif
#ifdef PERC_D
    printf(&quot;\nPERC_D:\t\t%%d&quot;);
#endif
#ifdef PERC_HD
    printf(&quot;\nPERC_HD:\t%%hd&quot;);
#endif
    printf(&quot; short integer format specification&quot;);

#ifdef VARLKEYS
    printf(&quot;\nVARLKEYS:\tkey compression supported&quot;);
#else
    printf(&quot;\nNO_VARLK:\tkey compression is NOT supported&quot;);
#endif

#ifdef PARMFILE
    printf(&quot;\nPARMFILE:\tISAM parameter files are supported&quot;);
#else
    printf(&quot;\nNO_PARMF:\tISAM parameter files are NOT supported&quot;);
#endif

#ifdef RTREE
    printf(&quot;\nRTREE:\t\tr-tree supported&quot;);
#else
    printf(&quot;\nNO_RTREE:\tr-tree is NOT supported&quot;);
#endif

#ifdef CTS_ISAM
    printf(&quot;\nCTS_ISAM:\tISAM functionality supported&quot;);
#else
    printf(&quot;\nNO_ISAM:\tISAM functionality is NOT supported&quot;);
#endif

#ifdef CTBOUND
    printf(&quot;\nCTBOUND:\tnon-server mode of operation&quot;);
#else
    printf(&quot;\nNO_BOUND:\tserver mode of operation&quot;);
#endif

#ifdef PROTOTYPE
    printf(&quot;\nPROTOTYPE:\tfunction prototypes are supported&quot;);
#else
    printf(&quot;\nNO_PROTOTYPE:\tfunction prototypes are NOT supported&quot;);
#endif
    printf(&quot;\n\nEnd Of CTTEST\n&quot;);
    exit(0);
}


</pre>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
