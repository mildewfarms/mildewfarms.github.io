<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>MAR95: Simulation Compilation and Portability</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Simulation Compilation and Portability<a name="0113_0051"></h1><P>
<h2><a name="0113_004f"><a name="0113_0000">Translating code from one machine to another for rapid development</h2><P>
<h3>Marc Hoffman</h3><P>
<p><i><a name="0113_0050"><a name="0113_0000">Marc is a senior software engineer for Analog Devices. He can be contacted at marc.hoffman@analog.com.</i></p><hr><P>
Simulation compilation is a technique that lets you compile a simulation, then run an executable that represents the original code instead of simulating the code directly. By translating the code from the instructions of one machine to the instructions of another and compiling all the semantics of the machine's instruction into a set of instructions that execute equivalently on another processor, you can speed up simulation execution by up to three orders of magnitude.<P>
The major difference between a simulation compiler and other simulators is that other simulators use interpretation at run time. A simulation compiler compiles the set of instructions needed for the simulation into another machine's machine code. <P>
In this article, I'll examine how machine code is converted from one target to another. To illustrate, I'll create a simple machine and build a set of tools that create running simulations of it. I'll then discuss how you can extend the environment to provide debugging tools.<P>
<h3><a name="0113_0052">Building a Simulation Compiler<a name="0113_0052"></h3><P>
In April 1994, I had to create a set of development tools for a next-generation digital-signal processor (DSP). Although I had already written the assembler, linker, and disassembler, I needed to define the run-time model before getting the compiler to work. Tired of waiting for a simulator, I asked a colleague: &quot;What if we converted the object modules from binary code into low-level C code?&quot; <P>
Ultimately, I wrote a minimal simulation compiler similar to <a href="#0113_005d">Listing One</A> . Although crude, it did most of the job. It was extremely fast--approximately 300 times faster than our previous simulators. Additionally, I was able to prototype my run-time environment, and I got a debugger for free.<P>
A simulation compiler takes an executable image for one machine and translates it such that it can be executed on another machine. In a sense, you are compiling or translating the instructions of one machine into a set of instructions for another, while maintaining the exact semantics of the original machine. You achieve this by reading the contents of the executable image and mapping each instruction of the original machine (the &quot;source&quot;) to a set of instructions that emulate the same functionality on the target machine. <P>
Instead of writing machine code for a particular target machine, you can write code for an abstract machine--say, &quot;machine C&quot;--suitable for running on any workstation or PC. By targeting C, you can run the executable source on any machine that has a C compiler. <a href="#0113_0055">Figure 1</A> defines the abstract C machine.<P>
The machine model creates an infinite loop that iterates over the machine state of the source machine's program counter (PC). BEFORE_CYCLE is a function or macro that causes the PC to get the next valid PC and set up and check any pre-existing conditions of the machine state that need to be serviced. AFTER_CYCLE finishes any work left after the machine executes an instruction; in some cases, it could be defined to &quot;do nothing.&quot; INVALID_PC_HANDLER is invoked whenever the PC is out of range: It could issue an error or perhaps emulate a trap. Each case of the <I>switch</I> statement is used to implement the TEXT address space of the source machine. (TEXT is the code space in the UNIX world.) The switch makes it indexable, because the machine I'm interested in (like most machines) has indirect jumping. This means you must be able to directly address the entire TEXT address space at run time. <P>
BEFORE_CYCLE is responsible for generating the next PC. The PC is modified by a primitive called TICK, which BEFORE_CYCLE invokes to step the PC to the next address. You can't just add 1 to the PC--you need to be able to handle branches. To implement this logic, you need something similar to a multiplayer used in hardware, which multiplexes the next address that the PC gets. This next address could be a branch or an interrupt-vector address, or the machine might have variable-size instructions. To multiplex the next address, you'll use a variable in C, called <I>nextaddr</I>. To implement a <I>jump</I> instruction, set <I>nextaddr</I> to the target of the jump; to get the destination address, just extract the correct bits from the source executable.<P>
To build a simulation compiler, you need a loader--software that knows how to read the contents of an executable. Because C code is generated as the target machine, you simply disassemble (decode) the executable. In other words, you use a loader to read the machine code and a disassembler to transform that code into C. To build the simulation compiler, I integrate the two programs: The loader reads each instruction and calls on the disassembler to produce the C code that represents the semantics of the machine instruction. This is a fairly straightforward algorithm; the difficult part is generating the correct C code. To illustrate how this is done, I'll build a simple little machine (SLM), then define a disassembler and a loader for the SLM. Keep in mind that my motivation for creating the SLM is instructive; it keeps the details of a big processor out of this article.<P>
<a href="#0113_0056">Figure 2</A> shows a simple machine with an 8-bit address space for data and a separate address space for the program, which is characteristic of a Harvard architecture (the more common von Neumann architecture of a conventional processor uses a single address space for both data and program). To keep my example clean, I've used this dual address space and kept all the instructions the same size. <a href="#0113_0057">Example 1(a)</A> is a simple program using SLM.<P>
First the C machine needs to define the registers as global variables so that you can look at their contents with any ordinary source-level debugger; see <a href="#0113_0057">Example 1(b)</A>. Since the machine is an 8-bit machine, you can declare a suitable vector to represent memory; see <a href="#0113_0057">Example 1(c)</A>. (I won't worry about size problems here, but you wouldn't want to do this for machines with 4-gigabyte address spaces!) Now look at each instruction and write a chunk of C code that behaves the same way. For the ALU operations, you will need a <I>scratch</I> register (see <a href="#0113_0058">Example 2</A>) that has a wider mode than the size of the word you're operating on; for this machine it is any <I>int</I>. If you don't have a larger data type, you'll have to do a little more work to get the status bits set correctly.<P>
The trick to building a disassembler that generates the appropriate C code for the SLM is to reuse the disassembler. The disassembler works much like <I>printf</I>: It takes a string and prints each character in turn until it sees a percent sign (<I>%</I>), where its subsequent action will be determined by the next character. <a href="#0113_0059">Figure 3</A> defines the disassembler for the SLM.<P>
Next, you need to define the function shown in <a href="#0113_005a">Figure 4</A>, <I>disassm,</I> which takes as its argument the instruction right-justified as an <I>int</I>. (This wouldn't work if the machine instruction word were variable or bigger than the largest integral data type for the machine you are running on. This problem is easy to solve, but is beyond the scope of this article.)<P>
Now it's time to build a simulation compiler that generates C code for the disassembler. First, simplify the C code a little by macroizing (creating a preprocessor macro) or functionalizing the MOVES. This minimizes the number of tools needed to rebuild when you change the simulator's semantics; that is, you can just rebuild the simulation and not the compiler. Also, macroization allows the writes to be hooked (which lets the macro do its work and then some). <a href="#0113_005b">Figure 5</A> shows a simulation, including a header file that describes the machine; <a href="#0113_005c">Figure 6</A> applies the simulation compiler to the program. The simulation compiler compiles this code into a simulation and examines each instruction in turn, calling the disassembler on the instruction code representing each word. Here I've used an array of <I>short</I>s to represent the object-code file, making implementation simple. In a more realistic example, you would need to read the information from the file.<P>
<h3><a name="0113_0053">A Commercial Implementation<a name="0113_0053"></h3><P>
At Analog Devices, we have developed a simulation-compiler tool that enables any processor to simulate our DSP instruction set. The scheme provides a flexible, rapid-prototyping environment intended to decrease a developer's time to market. Typical hardware simulators are slow, running at about 1000 instructions per second, and have limited debugging capabilities. <P>
The simulation environment we are exploring is two to three orders of magnitude faster than conventional simulators. Consider, for example, a typical speech-compression algorithm requiring computing power of approximately 12 million instructions/sec. A fully interpretive simulator running at 1000 cycles/sec takes roughly 3.3 hours to process one second of speech, while the compiled simulation with the speed of 240,000 cycles/sec takes only 50 seconds for the same task (numbers based on a 486DX66 CPU).<P>
The design of the DSP simulation compiler allows developers to write not only DSP code, but also develop simulations of the hardware peripherals that make up an entire system. Since the simulation is compiled into C code, you can mix host C code into the simulation, resulting in a truly customizable development environment. Furthermore, you can find bugs that occur after millions of instructions have executed.<P>
The debugging environment is constructed around the host C compiler's debugging environment so the user needn't learn how to use a new debugger. The simulation compiler generates special bookkeeping information that allows symbolic debuggers to trace through the preconverted source code. Hence, your favorite source-level debugger can be used to debug DSP applications. <P>
<h3><a name="0113_0054">Conclusion<a name="0113_0054"></h3><P>
The simulation-generation techniques presented here don't address the problem of self-modifying code. In fact, you can't handle it without the aid of an interpreter and a scheme that flags modified instructions. However, once the simulation compiler tables are created, you can generate an interpreter directly from the tables. This technique of compiling simulations makes the build or load time of a simulation quite expensive. For debugging environments, the conversion is done only a few times, and the compiled simulation is used more than once before it is regenerated. Thus, the speed and extensibility of the simulation environment outweigh the technique's drawbacks.<P>
<h4><a name="0113_0055"><B>Figure 1:</B> Defining the abstract C machine.<a name="0113_0055"></h4><P>
<pre>while (1) {
  BEFORE_CYCLE ();
  switch (PC) {
  case ADDR: instruction; break ;
  default:
    INVALID_PC_HANDLER ();
  }
  AFTER_CYCLE ();
}</pre><P>
<h4><a name="0113_0056"><B>Figure 2:</B> Definition of SLM.<a name="0113_0056"></h4><P>
<pre>SLM:
registers: rX,      rY,  rZ,  rI,  rJ,  rK,  PC,  ss{z,n,v,c}
          0,   1,   2,   3,   4,   5,   6,   7
addr: is 8bit
000       nop
1sd       mov rsrc, rdst
2id       mov (ri), rdst
3si       mov rsrc, (ri)
4kk       mov k, rx
5kk       mov k, ry
6xx       add src, dst
7xx       sub src, dst
8xx       mul src, dst
9xx       jmp addr
Axx       jz  addr
Bxx       jc  addr
Cxx       halt</pre><P>
<h4><a name="0113_0057"><B>Example 1:</B> (a) Simple SLM program; (b) defining registers as global variables; (c) declaring a vector of memory.<a name="0113_0057"></h4><P>
<pre>(a)
     mov 5, rx
     mov 3, ry
     mul rx, ry
     mov 15, rx
     sub rx, ry
     jmp ok
     halt
ok   add rx, ry
     halt
(b)
     unsigned char rx,ry,ri,rj,rk,
     pc, ss;
(c)
      unsigned char mem[1&lt;&lt;8];</pre><P>
<h4><a name="0113_0058"><B>Example 2:</B> A scratch register.<a name="0113_0058"></h4><P>
<pre>  unsigned int scratch;
000  -- nop
     /* nothing */
1sd  -- mov rsrc, rdst
     rdst = rsrc;
     ss.z = (rdst == 0) ? 1:0;
     ss.n = ((signed)rdst &lt; 0) ? 1:0;
2id  -- mov (ri), rdst
     rdst = mem[ri];
     ss.z = (rdst == 0) ? 1:0;
     ss.n = ((signed)rdst &lt; 0) ? 1:0;
3si  -- mov rsrc, (ri)
     mem[ri] = rsrc;
4kk  -- mov k, rx
     rx = k;
     ss.z = (k == 0) ? 1:0;
5kk  -- mov k, ry
     ry = k;
     ss.z = (k == 0) ? 1:0;
6xx  -- add src, dst
     rdst = scratch = rdst + rsrc;
     ss.v = (scratch &gt; 0x1ff) ? 1 : 0;
     ss.c = (scratch &amp; 0x1ff) ? 1 : 0;
     ss.n = (scratch &amp; 0x80) ? 1 : 0;
7xx  -- sub src, dst
     rdst = scratch = rdst - rsrc;
     ss.v = (scratch &gt; 0x1ff) ? 1 : 0;
     ss.c = (scratch &amp; 0x1ff) ? 1 : 0;
     ss.n = (scratch &amp; 0x80) ? 1 : 0;
8xx  -- mul src, dst
     rdst = scratch = rdst * rsrc;
     ss.v = (scratch &gt; 0x1ff) ? 1 : 0;
     ss.c = (scratch &amp; 0x1ff) ? 1 : 0;
     ss.n = (scratch &amp; 0x80) ? 1 : 0;
9xx  -- jmp addr
          nextaddr = addr;
Axx  -- jz  addr
     if (ss.z)
               nextaddr = addr;
Bxx  -- jc  addr
     if (ss.c)
               nextaddr = addr;
Cxx  -- halt
     return;</pre><P>
<h4><a name="0113_0059"><B>Figure 3:</B> The SLM disassembler.<a name="0113_0059"></h4><P>
<pre>char *regs[] = { &quot;rx&quot;,&quot;ry&quot;,&quot;ri&quot;,
       &quot;rj&quot;,&quot;rk&quot;, &quot;pc&quot;, &quot;ss&quot; };
char *distemp[] = {
        &quot;nop&quot;,
        &quot;mov %1, %2&quot;,
        &quot;mov (%1), %2&quot;,
        &quot;mov %1, (%2)&quot;,
        &quot;mov %k, rx&quot;,
        &quot;mov %k, ry&quot;,
        &quot;add %1, %2&quot;,
        &quot;sub %1, %2&quot;,
        &quot;mul %1, %2&quot;,
        &quot;jmp %a&quot;,
        &quot;jz %a&quot;,
        &quot;jc %a&quot;,
        &quot;halt&quot;,
        0,
        0,
        0,
};</pre><P>
<h4><a name="0113_005a"><B>Figure 4:</B> Defining the disassm function.<a name="0113_005a"></h4><P>
<pre>disasm (int inst)
{
   char *template = distemp[(inst&gt;&gt;8)&amp;0xF];
   char *p = template;
   if (template) {
      while (*p) {
        if (*p == '%') decode_operand (inst, ++p);
        else putchar (*p);
        p++;
      }
   }
}
decode_operand (int inst, char *p)
{
   switch (*p++) {
   case '1':  printf (&quot;%s&quot;, regs[(inst&gt;&gt;4)&amp;0xF]);      break;
   case '2':  printf (&quot;%s&quot;, regs[inst&amp;0xF]);           break;
   case 'k':  printf (&quot;%d&quot;, (singed char)(inst&amp;0xFF));  break;
   case 'a':  printf (&quot;%u&quot;, inst&amp;0xFF);                break;
   default:
     abort ();
   }
}</pre><P>
<h4><a name="0113_005b"><B>Figure 5:</B> Typical simulation, including a header file that describes the machine.<a name="0113_005b"></h4><P>
<pre>#define SETR(x,y)\
   x = y;\
   ss.z = (x == 0) ? 1:0; ss.n = ((signed)x &lt; 0) ? 1:0
#define SETMEM(x,y) x = y;
#define ALUOP(op, rdst,rsrc)\
   rdst = scratch = rdst op rsrc;\
   ss.v = (scratch &gt; 0x1ff) ? 1 : 0;\
   ss.c = (scratch &amp; 0x1ff) ? 1 : 0;\
   ss.n = (scratch &amp; 0x80)  ? 1 : 0
char *distemp[] = {
        &quot;/* nothing */&quot;,
        &quot;SETR (%2, %1);&quot;,
        &quot;SETR (%1, mem [%2]);&quot;,
        &quot;SETMEM (mem [%2], %1);&quot;,
        &quot;SETR (rx, %k);&quot;,
        &quot;SETR (ry, %k);&quot;,
        &quot;SETR (%2, ALUOP (+, %2, %1));&quot;,
        &quot;SETR (%2, ALUOP (-, %2, %1));&quot;,
        &quot;SETR (%2, ALUOP (*, %2, %1));&quot;,
        &quot;nextaddr = %a;&quot;,
        &quot;if (ss.z) nextaddr = %a;&quot;,
        &quot;if (ss.c) nextaddr = %a;&quot;,
        &quot;return&quot;,
        0,
        0,
        0,
};</pre><P>
<h4><a name="0113_005c"><B>Figure 6:</B> Applying the simulation compiler to a program.<a name="0113_005c"></h4><P>
<pre>0000 405       mov 5, rx
0001 503       mov 3, ry
0002 801       mul rx, ry
0003 40F       mov 15, rx
0004 701       sub rx, ry
0005 A07       jz ok
0006 C00       halt
0007 601  ok   add rx, ry
0008 C00       halt</pre><P>
<P>
<h4><a name="0113_005d">Listing One <a name="0113_005d"></h4><pre>

::::::::::::::
simcc.c
::::::::::::::
/* Simulation compiler for SLM */

char *regs[] = { &quot;rx&quot;,&quot;ry&quot;,&quot;ri&quot;,&quot;rj&quot;,&quot;rk&quot;, &quot;pc&quot;, &quot;ss&quot; };
char *distemp[] = {
        &quot;nop&quot;,
        &quot;mov %1, %2&quot;,
        &quot;mov (%1), %2&quot;,
        &quot;mov %1, (%2)&quot;,
        &quot;mov %k, rx&quot;,
        &quot;mov %k, ry&quot;,
        &quot;add %1, %2&quot;,
        &quot;sub %1, %2&quot;,
        &quot;mul %1, %2&quot;,
        &quot;jmp %a&quot;,
        &quot;jz %a&quot;,
        &quot;jc %a&quot;,
        &quot;halt&quot;,
        0,
        0,
        0, 
};
char *simtemp[] = {
        &quot;/* nothing */&quot;,
        &quot;SETR (%2, %1);&quot;,
        &quot;SETR (%1, mem [%2]);&quot;,
        &quot;SETMEM (mem [%2], %1);&quot;,
        &quot;SETR (rx, %k);&quot;,
        &quot;SETR (ry, %k);&quot;,
        &quot;SETR (%2, ALUOP (+, %2, %1));&quot;,
        &quot;SETR (%2, ALUOP (-, %2, %1));&quot;,

        &quot;SETR (%2, ALUOP (*, %2, %1));&quot;,
        &quot;nextaddr = %a;&quot;,
        &quot;if (ss.z) nextaddr = %a;&quot;,
        &quot;if (ss.c) nextaddr = %a;&quot;,
        &quot;return;&quot;,
        0,
        0,
        0, 
};
disasm (int inst, char **templates)  
{
   char *template = templates[(inst&gt;&gt;8)&amp;0xF];
   char *p = template;
   if (template) {
      while (*p) {
        if (*p == '%') decode_operand (inst, ++p);
        else putchar (*p);
        p++;
      }
   }
}
decode_operand (int inst, char *p)
{
   switch (*p++) {
   case '1':  printf (&quot;%s&quot;, regs[(inst&gt;&gt;4)&amp;0xF]);      break;
   case '2':  printf (&quot;%s&quot;, regs[inst&amp;0xF]);           break;
   case 'k':  printf (&quot;%d&quot;, (signed char)(inst&amp;0xFF)); break;
   case 'a':  printf (&quot;%u&quot;, inst&amp;0xFF);                break;
   default:
     abort ();
   }
}
genc (int addr, int inst)
{
  printf (&quot;      case 0x%04x: T(\&quot;&quot;, addr); disasm (inst, distemp); 
    printf (&quot;\&quot;);\n&quot;);
  printf (&quot;        &quot;); disasm (inst, simtemp);  printf (&quot;\n&quot;);
  printf (&quot;        break;\n&quot;);
}
int prog[] = {9, 0x405,0x503,0x801,0x40F,0x701,0xA07,0xC00,0x601,0xC00};
main ()
{

  int i;
  printf (&quot;#include \&quot;slm.h\&quot;\n&quot;
       &quot;main ()\n&quot;
       &quot;{\n&quot;
       &quot;  while (1) {\n&quot;
       &quot;    BEFORE_CYCLE ();\n&quot;
       &quot;    switch (pc) {\n&quot;);
  for (i=0; i&lt;prog[0];i++)
    genc (i, prog[i+1]);

  printf (&quot;    default:\n&quot;
       &quot;      INVALID_PC_HANDLER ();\n&quot;
       &quot;      break;\n&quot;
       &quot;    }\n&quot;
       &quot;    AFTER_CYCLE ();\n&quot;
       &quot;  }\n&quot;
       &quot;}\n&quot;);
}
::::::::::::::
slm.h
::::::::::::::
/* SLM definitions.  simulator header file. */
  unsigned char rx,ry,ri,rj,rk, pc;
  struct { unsigned z:1, n:1, v:1, c:1; } ss;
  unsigned char mem[1&lt;&lt;8];
  unsigned int scratch;
  unsigned char nextaddr;

#define SETR(x,y)   x = y; ss.z = (x == 0) ? 1:0; ss.n = ((signed)x &lt; 0) ? 1:0;
#define SETMEM(x,y) x = y;
#define ALUOP(op, rdst,rsrc)\
   rdst = scratch = rdst op rsrc;\
   ss.v = (scratch &gt; 0x1ff) ? 1 : 0;\
   ss.c = (scratch &amp; 0x1ff) ? 1 : 0;\
   ss.n = (scratch &amp; 0x80)  ? 1 : 0;
#define BEFORE_CYCLE() pc = nextaddr; nextaddr++
#define AFTER_CYCLE()
#define INVALID_PC_HANDLER() abort ()
#define T(x) printf (&quot;%04x: %s\n&quot;, pc, x)

</pre>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
