<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>MAR95: Dr. Dobb's Journal Excellence in Programming Award</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1><I>Dr. Dobb's Journal</I> Excellence in Programming Award<a name="00f2_0045"></h1><P>
<h3><a name="00f2_0043"><a name="00f2_0000">Jonathan Erickson</h3><P>
<a name="00f2_0044"><a name="00f2_0000">In conjunction with the 20th anniversary of <I>Dr. Dobb's Journal</I>, we're proud to announce an annual award recognizing achievement and excellence in the field of computer programming. Selected by a special editorial committee of <I>Dr. Dobb's Journal</I>, this year's recipients--Alexander Stepanov and Linus Torvalds--are being honored for the significant contributions they have made to the advancement of software development. <P>

<H3><a name="stepanov"><a href="199500f5.htm">Alexander Stepanov</A></H3>

<a href="199500f5.htm"><img src="stepsml.gif" align=left hspace="6"></A>

In developing the C++ Standard Template Library (STL), Alexander has created a body of work that in all likelihood will touch most mainstream programmers for years to come. Likewise, Linus, in creating the Linux operating system, has shown that powerful, sophisticated, innovative system software can be built out of sheer will and raw talent, succeeding where many others have failed.<P>
It's also significant that, in keeping with the spirit and philosophy that has guided <I>Dr. Dobb's Journal</I> since its Tiny Basic days, the development of both STL and Linux was based on the principles of openness, cooperation, and technical superiority: STL has been placed into the public domain, and from its inception, Linux has been freely distributable.<P>
In addition to being acknowledged at the Software Development '95 Conference in San Francisco, <I>Dr. Dobb's Journal</I> and the Miller Freeman Community Connection program are granting $1000 scholarships--in Linus and Alexander's names--to university programs of their choice. At Alexander's behest, the grant will be given to the Department of Mathematics at his alma mater, Moscow State University, Russia, to a graduate student doing research in applying mathematical methods to C++ software. For his part, Linus has designated that a scholarship be awarded to a deserving computer-science student at the University of Helsinki in Finland.<P>
Alexander Stepanov currently heads up the Generic Programming Project at Hewlett-Packard Research Laboratories in Palo Alto, California. A graduate of Moscow State University, Alexander studied mathematics, obtaining a diploma of Teacher of Mathematics from Moscow District Educational Institute. However, it wasn't until 1972, when he was designing computers for controlling hydroelectric power stations at the Research Institute of Complex Automation (TzNIIKA), that Alexander became enamored with computers and computer programming. <P>
Upon emigrating to the U.S., Alexander joined the computer-science staff at General Electric's Research Center in Schenectady, New York, where he established an ongoing research collaboration with Dave Musser and worked with Vladimir Lumelsky on path-planning algorithms for mobile robots.<P>
After teaching at Polytechnic University in Brooklyn, New York (where he developed Ada Generic Library), Alexander found himself at AT&amp;T Bell Laboratories, learning C/C++ from Andrew Koenig and Bjarne Stroustrup. From there, Alexander moved to HP Labs in Palo Alto, where, along with Meng Lee, he developed the C++ Standard Template Library. Andrew's current projects include coauthoring, with Stroustrup, a paper on the language foundations STL, another paper (with Mary Loomis) on generic programming as a programming methodology, and a book on STL with P.J. Plauger, Meng Lee, and Dave Musser.<P>
As Alexander explains in an in-depth interview with Al Stevens beginning on page 115 of this issue, the Standard Template Library is a generic implementation of a suite of template containers which has been adopted by the ANSI C++ committee as a model for virtually the entire C++ library. STL implements a programming model which provides an orthogonal view of data structures and algorithms, as opposed to object-oriented encapsulation. Although the ideas behind STL are not new, it took someone with Alexander's vision, perseverance, and experience--along with the new generation of C++ tools--to turn the promise of generic programming into reality.<P>

<H3><a name="torvalds"><a href="199500f4.htm">Linus Torvalds</A></H3>

<a href="199500f4.htm"><img src="linussml.gif" align=left hspace="6"></A>

Linus Torvalds is the force behind Linux, a UNIX-like, 32-bit, protected-mode, preemptive multitasking operating system that runs on 386/486 PCs. Although a full-time student and part-time instructor at the University of Helsinki, Linus continues to manage the Linux project--which involves hundreds of programmers worldwide, all of whom are donating their time and efforts in the further development of Linux. Currently, most of Linus's time is devoted to handling the kernel development and shepherding the overall project.<P>
Interestingly, Linux didn't start out to be an operating system, as Linus tells us in a May 1994 <I>DDJ</I> interview. Upon buying his first 386-based PC in early 1991, Linus didn't want to run MS-DOS and wasn't satisfied with Minix, a small UNIX-like system developed by Andrew Tanenbaum. Consequently, he began tinkering with the 386's memory management and process switching, ultimately realizing that what he was developing was looking more and more like a real operating system. <P>
After switching development from assembly language to C, Linus made an &quot;unofficial&quot; release of Linux 0.01 in September of 1991. This was followed in early October 1991 with the first &quot;official&quot; release to the Internet of Linux 0.02, which could run the GNU Bourne Shell and GNU C compiler. Shortly thereafter, Version 0.03 arrived, then Linux 0.10. By this time, programmers around the world realized that something special was happening, as evidenced by the exchanges on comp.os.minix, and later, the comp.os.linux hierarchy. Before long, Version 0.95 was released, then 1.0 in March 1992, and finally, today's Linux 1.1, patch level 72.<P>
The current implementation of Linux is quite powerful, running everything from the X Window system and TCP/IP to Emacs, UUCP, mail and news. The full distribution consists of kernel sources, C, C++, man pages, basic utilities, networking support, X Window, XView/OpenLook, DOS emulators, and more. <P>
In addition to being a worldwide development project, Linux has spawned a veritable cottage industry of programming tools and resources. The operating system is distributed both at ftp sites (such as MCC in England and SLC in Canada) and on CD-ROMs published by companies such as Slackware, Yggrdasil, InfoMagic, and Walnut Creek. A number of books, including <I>Running Linux</I>, by Andy Oram and Matt Welsh, and magazines such as the <I>Linux Journal</I> have been published about the system, with many more on the way.<P>
Still, the real significance of Linus's work is that almost single-handedly, he was able to implement true innovation in kernel design (particularly when it comes to features such as on-demand loading of system services) while achieving 100 percent UNIX System V compatibility when no other systems could. It is significant that Linus's work has been somewhat validated by Novell (who acquired UNIX from AT&amp;T), which is evaluating Linux as the foundation for its proposed new-generation &quot;Corsair&quot; project. <P>
Please join us in congratulating both Alexander and Linus. In developing their respective projects, they've demonstrated that individual programmers can make a difference, and innovation can flourish in a cooperative environment--reminding us once again of why we got into this business in the first place.<P>
<P>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
