<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>MAR95: Building a SOM OpenDoc Part</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Building a SOM OpenDoc Part<a name="0108_004f"></h1><P>
<h2><a name="0108_004d"><a name="0108_0000">No fancy tools or wizards, just the bare API</h2><P>
<h3>Robert Orfali and Dan Harkey</h3><P>
<p><i><a name="0108_004e"><a name="0108_0000">Bob and Dan are the authors of Client/Server Programming with OS/2 (VNR, 1993) and the Essential Client/Server Survival Guide (VNR, 1994), coauthored with Jeri Edwards. Bob and Dan have developed client/server systems for the last eight years and are affiliated with IBM. They can be reached at harkey@vnet.ibm.com.</i></p><hr><P>
Component-software technology holds great promise. One instance of this technology is OpenDoc, which allows developers to build independently created &quot;parts&quot; that can collaborate on the desktop, across networks, and across operating-system platforms. At this writing, OpenDoc technology is in alpha, and will be released later this year for Windows, Macintosh, OS/2, and, eventually, UNIX. OpenDoc was originally designed at Apple, but is now being promulgated by Component Integration Laboratories (CI Labs), a consortium consisting principally of Apple, IBM, and WordPerfect. For a more complete background on OpenDoc technology, see the article, &quot;OpenDoc,&quot; by Jeff Rush (<I>Dr. Dobb's Special Report on Interoperable Objects</I>, Winter 1994/95).<P>
OpenDoc allows the user to open up &quot;stationery&quot; for a document container, populate it with parts from a parts bin, lay out the parts in some visually pleasing arrangement, create data links, and save the document. The document can serve as the integration point for data from local or remote sources. The parts can be linked to external data sources anywhere on the enterprise through CORBA-compliant Object Request Brokers (ORBs). A scripting facility allows parts to collaborate in customized arrangements. <P>
How much effort does it take to create one of these components? It depends on which component technology you choose. For all practical purposes, the component technology choices today have narrowed to OLE versus OpenDoc. However, if OpenDoc lives up to its promise, you should be able to create an OpenDoc part that's also an OLE container/server. WordPerfect has demonstrated this technology on Windows since May 1994. In this article, we'll examine what it takes to create an OpenDoc part, particularly as compared to an OLE Custom Control (also known as OCX).<P>
<h3><a name="0108_0050">The Great Smiley Shoot-out<a name="0108_0050"></h3><P>
In his article, &quot;Building Component Software with Visual C++ and the OLE Custom Control Developer's Kit&quot; (<I>Microsoft Systems Journal</I>, September 1994), Eric Lang described how to create a Smiley-face OLE Custom Control using Microsoft Visual C++, Microsoft Foundation Classes (MFC), and a beta version of the Custom Control Developer's Kit (CDK). In this article, we'll implement the same Smiley part using an alpha version of OpenDoc for OS/2. Unfortunately, we can't use wizards and frameworks (these tools will come later). Consequently, our Smiley is built with raw OpenDoc, as compared to Eric's OCX, which was implemented with deluxe tools.<P>
What does the Smiley part do? <a href="1995010a.htm">Figure 1(a)</A> is the part running in a test container. Clicking on Smiley (a right-mouse click) turns it into the sad face in <a href="1995010b.htm">Figure 1(b)</A>. Click again and the smile returns. This is in-place editing; as you can see, OpenDoc lets you interact with any visible part directly. The mouse clicks demonstrate how OpenDoc parts handle events. Smiley is a persistent OpenDoc part: It knows how to save itself when you close the document. When you open the document again, everything looks the same (the smiling/sad state and document position are preserved). To sum up, Smiley is a simple OpenDoc part that knows how to visually embed itself in a container, draw itself, process events in place, and save and restore its contents from a Bento document file. <P>
<h3><a name="0108_0051">What SOM Brings to the Party<a name="0108_0051"></h3><P>
With its most recent release, the OpenDoc developer's kit supports IBM System Object Model (SOM), so we implemented Smiley as a SOM object. As a result, its methods can be invoked using any language that supports SOM bindings (in our case, IBM's C++). SOM allows objects written in different languages to communicate in the same address space, across address spaces, and across dissimilar operating systems over networks, through the services of a CORBA-compliant ORB. (For more on SOM, see &quot;Interoperable Objects,&quot; by Mark Betz, <I>DDJ</I>, October 1994.) <P>
SOM lets you package OpenDoc parts in binary class libraries and ship them as DLLs. In addition, SOM supports implementation inheritance, which means that you can subclass OpenDoc parts and either reuse or override their method implementations delivered in the DLL binaries. Also, by providing an external language for defining interfaces, the OpenDoc part handler binaries can be distributed independently of the client and, even more importantly, can be modified or replaced without having to recompile the client code that interacts with the part.<P>
Using SOM, the typical OpenDoc part editor will inherit most of its behavior from the <I>ODPart</I> base class--OS/2's OpenDoc provides a class called <I>SimplePart</I> derived from <I>ODPart</I> to make it easier for you. In any case, you must override the methods that need to be customized to provide your part's behavior. At a minimum, your part must be able to allocate storage for its persistent data, initialize its data from a persistent store, draw its contents inside an area provided by its container, handle events, and externalize its data to the persistent store when the document is closed.<P>
<h3><a name="0108_0052">To IDL or Not to IDL<a name="0108_0052"></h3><P>
In CORBA, an Interface Definition Language (IDL) is the means by which objects tell their clients what interfaces are available and how to invoke them. Using IDL, you can define the types of objects, the methods they export, and their parameters. The IDL also lets you specify the parent classes. Like C++, CORBA supports multiple inheritance. Note that CORBA IDL only specifies a class's interface, not its implementation. You can think of IDL as a contract that binds the providers of a component service to their clients.<P>
Many C++ programmers hate to deal with IDL because this introduces an extra step in class construction. On the other hand, programmers experienced in client/server RPCs know that IDL is the cleanest way to specify program services that live on different machines or in separate address spaces. Classes in C++ are single-address-space constructs, so a mechanism like IDL is needed to extend these across process boundaries. The good news for C++ programmers is that you don't have to deal with IDL if you don't want to. Simply write your classes in C++ and let a direct-to-SOM C++ compiler (like MetaWare's C++ or IBM's CSet++) generate the IDL for you by capturing the C++ class information from your headers. In our example, we'll use IDL explicitly, even though our part is written in C++, to give you a feel for programming with SOM and CORBA. <P>
The steps in creating the Smiley part are:<P>
<OL>
<LI>Define the interface for a <I>SmileyPart</I> class by creating the IDL source file smiley.idl (see <a href="#0108_005a">Listing One</A>).</LI>
<LI>Run the SOM precompiler on the IDL file. It produces an implementation template--smiley.cpp--of the <I>SmileyPart</I> class (shaded lines in <a href="#0108_005b">Listing Two</A>).</LI>
<LI>Add the body of the code (in C++) to the template of <I>SmileyPart</I> (non-shaded lines in <a href="#0108_005b">Listing Two</A>).</LI>
<LI>Compile the class and create the part DLL--smiley.dll.</LI>
</OL>
<h3><a name="0108_0053">The Smiley IDL<a name="0108_0053"></h3><P>
In smiley.idl, we <I>#include</I> the file SimplPrt.idl, which is the interface definition for the parent class. Our Smiley part is derived from class <I>SimplePart</I>. Next, we define private data types for <I>xSmiley</I> by enclosing them with <I>#ifdef __PRIVATE__</I> and <I>#endif</I> directives. The <I>interface</I> statement specifies the name of the part, its parent classes, and the name of the part's methods and their parameters. Smiley defines three new methods, all of which are private.<P>
CORBA IDL is a purely declarative language; it is used solely to describe the interface to an object. SOM extends IDL with constructs that let you specify helpful implementation information. This information is bracketed within <I>#ifdef __SOMIDL__</I> and <I>#endif</I> directives. The first line in the <I>implementation</I> section is the prefix that SOM will append to the method names (and other macros) it generates for that class. This is followed by the version number of the class. The <I>releaseorder</I> allows you to add new functions to a class without having to recompile the client programs that use it. It's a SOM feature that helps you maintain backward binary compatibility. All you need to do is list every method name introduced by the class, and not change the order. If you need to introduce new methods in the future, simply add them to the end of the list. However, if you decide to remove a method, you must still leave its name on the list.<P>
Smiley's functionality results from overriding six methods of its parent class <I>SimplePart</I>, specified in the override section of the IDL. Notice that you don't need to specify the parameters for these methods. The SOM precompiler obtains the interface definitions for these methods from the parent's IDL. The last section in the IDL contains declarations for private instance data that is only of interest to the class members.<P>
<h3><a name="0108_0054">The SOM Precompiler's Output<a name="0108_0054"></h3><P>
The next step in creating the Smiley part is to run the IDL through the SOM precompiler, which reads the IDL, creating a .cpp skeleton implementation (see <a href="#0108_005b">Listing Two</A>). Notice that the precompiler introduces some include files and creates stubs for all the methods you declared in the IDL. It also generates stubs (with parameter declarations) of all the parent methods you are going to override. The precompiler automatically appends the prefix <I>SmileyPart</I> to all your method names--it's trying to be helpful in maintaining unique names within your class's implementation. Your clients don't have to know about the prefix; to the outside world, the method calls are polymorphic.<P>
The terms <I>SOM_Scope</I> and <I>SOMLINK</I> appear in the prototype of all the stub methods. Ignore them. They're used by SOM to represent internal information. Notice that the first parameter in each method is always <I>somSelf</I>, which is a pointer to the target object--in this case, <I>SmileyPart</I>. Again, the precompiler is being helpful because CORBA requires that the first parameter in each method invocation be the target object. The precompiler also introduces a second strange parameter: <I>ev</I>. This is a pointer to the CORBA environment structure and is used to return error information.<P>
The first statement in the method initializes a local variable, <I>somThis</I>, to point to a structure representing the instance variables introduced by Smiley. The second statement, <I>SmileyPartMethodDebug</I>, is a macro used for tracing. You can turn it off by setting the <I>SOM_TraceLevel</I> flag to a nonzero value. If you need to invoke another method that's introduced in your class, use the notation <I>somSelf</I>--<I>&gt;&lt;methodName&gt;</I>. To access an instance variable created by this object, use <I>somThis</I>--<I>&gt;&lt;variableName&gt;</I>, or simply precede the variable name with an underscore.<P>
<h3><a name="0108_0055">Programming OpenDoc Style<a name="0108_0055"></h3><P>
The OpenDoc run time is a collection of objects which belong to a set of about 50 classes. You interact with these objects by invoking methods on them whenever your part needs a service. Most of the time OpenDoc will call your part's class (or object) when it needs something from you. The trick is to figure out which of these methods will be called during the lifetime of your part, and then write code for them. You provide the part behavior by overriding the methods you're interested in.<P>
Smiley will be called when it is first created or initialized in a container, when it needs to draw its contents, when it receives some event, and finally when the document is closed and Smiley is asked to save its contents in a Bento file. We can do all of this by overriding six methods from the <I>SimplePart</I> base class (see <a href="#0108_005b">Listing Two</A>). The complete listing is available electronically; see &quot;Availability,&quot; page 3.<P>
<h3><a name="0108_0056">Initialize Smiley<a name="0108_0056"></h3><P>
OpenDoc asks Smiley to initialize itself by invoking either <I>InitPart</I>, if Smiley is being embedded for the first time in a container (for instance, a document), or <I>InitPartFromStorage, </I>if an existing document is opened with Smiley already embedded in it. Both methods invoke <I>CommonInit</I>--a private method of our class--to perform some common initialization functions.<P>
<I>CommonInit</I> first records the <I>StorageUnit</I> object that was passed to it. A <I>StorageUnit</I> is the basic unit of persistent storage for a part. It contains a list of properties, identified by a unique name within the storage unit. Each property can have one or more values, which can be raw byte streams or multiple data types. The <I>StorageUnit</I> class is an abstraction on top of the Bento persistent-storage system (OpenDoc is layered over and does not expose the Bento APIs). <a href="1995010c.htm">Figure 2</A> shows the OpenDoc storage model. A Bento document can have multiple drafts or versions. Each draft contains multiple storage units, which in turn contain properties and their values. These entities are analogous to those in a conventional file system: A storage unit is like a directory, properties are like filenames, values like byte streams. Values can have pointers to other storage units. So, in essence, each OpenDoc part gets to manage its own file system within a file. Storage units can also reside in memory, on the clipboard, or as links--these are all just different instances of the same class. <P>
In the Smiley code, the <I>CommonInit</I> method then records its &quot;session&quot; object, which is an instance of an OpenDoc class that encapsulates access to OpenDoc globals and maintains context for a root document. After that, it goes after a &quot;focus set.&quot; A focus set is a mechanism that OpenDoc provides to allow parts to negotiate for resources atomically--you either get all the resources you're asking for or nothing. This all-or-nothing proposition helps avoid deadlocks and makes parts thread safe. <P>
Smiley is interested in grabbing the focus for mouse selection, menu, and keyboard events. To accomplish this, <I>CommonInit</I> creates an instance of class <I>ODFocusSet</I>, an OpenDoc class that will store the desired foci. <I>CommonInit</I> then requests a session object to return some unique tokens for a particular OpenDoc type; this is done because the elements of the set are tokenized strings. Then, <I>CommonInit</I> adds the specified focus to the focus set via the <I>add</I> method.<P>
After invoking <I>CommonInit</I>, the <I>InitPart</I> method creates a new property, <I>KODPropSmile,</I> in the <I>StorageUnit</I> received from OpenDoc. Notice the naming convention OpenDoc uses for properties (<I>KODPropSmile</I> is a string constant &quot;SmileyPart:Property:Smile&quot;). We assign to this property a value type of Boolean (<I>KODBoolean</I>). This value will be used to store the persistent state of our Smiley face. <P>
The <I>InitPartFromStorage</I> method does not have to create a property because the property and its value are already there in the existing document. The method simply needs to find the <I>Smile</I> property and read its value. To do that, we must first invoke a <I>Focus</I> method on the <I>StorageUnit</I> object to get to the specified property and value, then invoke <I>GetValue</I> to read the contents of the value (that is, the stored Smiley state). At a later time, when the document contents need to be saved, the state of the Smiley face is written to persistent storage. This happens when OpenDoc invokes the <I>Externalize </I>method (see <a href="#0108_005b">Listing Two</A>), which calls <I>Focus </I>on the <I>storageUnit </I>object to target the <I>KODPropSmile </I>property, and then writes its value to storage using <I>SetValue.</I><P>
<h3><a name="0108_0057">Drawing Smiley<a name="0108_0057"></h3><P>
When a part needs to render its contents, OpenDoc invokes the part's <I>Draw</I> method and passes it a &quot;facet&quot; and a &quot;shape.&quot; Facets are OpenDoc objects that represent the visible area of a part's frame at run time. A visible part can have one or more facets. Facets are constructed on-the-fly for the visible frames when a document is opened. The <I>draw</I> method is called for each facet object in a part (the facet object is passed as an input parameter of the draw method). &quot;Canvas&quot; objects are platform-dependent presentation spaces or device contexts. The canvas is where the facets of a part render themselves. The shape is a description of space on a canvas. Shapes can be scaled, rotated, and transformed without having to know what's inside of them. A part gets a default amount of real estate when created but can later negotiate with its container for more space. The container always wins in space negotiations. OpenDoc provides the mechanisms for allowing parts to negotiate for space and to seamlessly coexist within a common visual container. The actual rendering is done by platform-specific API calls (in our case, OS/2 Presentation Manager calls). <P>
The OpenDoc rendering model is shown in <a href="1995010d.htm">Figure 3</A>. Every document must contain at least one part--the root part--which initially owns all the document's visual real estate in a single &quot;frame.&quot; Frame objects are used for space-layout negotiations between containing parts and embedded parts. An OpenDoc part is not required to embed other parts, but most useful OpenDoc parts will (Smiley does not). In <a href="1995010e.htm">Figure 3</A>, root part A has two embedded parts: B and C. Each part has its own frame. When a document is saved, the set of frames it contains are made persistent. These frames contain the geometry information that will be used to recreate the visual look of the document.<P>
The <I>Draw</I> method implementation:<P>
<UL>
<li>Obtains a canvas area and platform-specific presentation space. This requires obtaining the frame associated with this facet, which is returned by the <I>GetFrame</I> method on the facet object. From the frame, we can get the rectangular region that Smiley occupies (note that, with a little more code, this region could be nonrectangular), and from that, the presentation space.</li>
<li>Sets up the clipping region to make Smiley fit into its presentation space.</li>
<li>Positions Smiley's presentation space within the canvas, by using <I>SetOrigin</I>, a private method of the <I>SmileyPart</I> class.</li>
<li>Draws the Smiley face. This is done by invoking <I>DrawSmileyFace</I>--another private method of the <I>SmileyPart</I> class. Even though the method is long, it does not introduce any new OpenDoc constructs. We use ordinary Presentation Manager GPI calls to draw either a smiling or sad face, depending on whether the value in the <I>_smile</I> instance variable is true or false.</li>
<li>Cleans up and returns. We must restore the picture and environment space to avoid memory leaks.</li>
</UL>
<h3><a name="0108_0058">Handling Events<a name="0108_0058"></h3><P>
The OpenDoc run time includes an event dispatcher which routes user interface and semantic events to the correct part handler. The part handler helps out by negotiating for resources using the <I>FocusSet</I>.<P>
The semantic service also provides powerful APIs for event dispatch resolution. The OpenDoc run time invokes a <I>Handle-Event</I> method on our part when it wants us to do something. As you can see from the code, we can treat these events like normal PM messages. The <I>HandleEvent</I> method processes two events: W_BUTTON1DOWN and WM_BUTTON2DOWN. The first of these activates the part. Here, we acquire the <I>FocusSet</I> resources that were specified when the part was first initialized. The second event is used to toggle the Smiley face, accomplished by toggling the <I>_smile</I> instance variable and issuing an <I>invalidate </I>method on the frame object.<P>
<h3><a name="0108_0059">Conclusion<a name="0108_0059"></h3><P>
Smiley is admittedly a minimalist OpenDoc part, but you can add more interesting behaviors, such as drag-and-drop, clipboard support, linking, embedding, irregular-shape support, multiple levels of undo/redo, reference counting, extensions, menus, property editing, and scripting.<P>
<h4><B>Figure 1:</B> <a href="1995010f.htm">(a)</A> The Smiley OpenDoc part; <a href="19950110.htm">(b)</A> the Smiley OpenDoc part with a sad face.</h4><P>
<a href="19950111.htm">Figure 2</A>  OpenDoc document storage structure.
<a href="19950112.htm">Figure 3</A>  The OpenDoc rendering model.
<P>
<h4><a name="0108_005a">Listing One <a name="0108_005a"></h4><pre>

/*-------- Smiley.IDL for Smiley OpenDoc part  (Excerpted)  -------------*/

#ifndef _SMILEYPRT_ 
#define _SMILEYPRT_ 
#ifndef _SIMPLPRT_ 
#include &lt;SimplPrt.idl&gt; 
#endif 
#ifdef __PRIVATE__                  // Implementation Types
   typedef long Rect;
#endif
interface SmileyPart : SimplePart
{
#ifdef __PRIVATE__
        void CommonInit(in ODStorageUnit storageUnit);
        void DrawSmileyFace(in HPS hpsDraw, in Rect frameRect);
        void SetOrigin(in ODFacet facet);
#endif
#ifdef __SOMIDL__
        implementation
        {
                functionprefix = SmileyPart;
                majorversion = 1;
                minorversion = 0;
#ifdef __PRIVATE__
        releaseorder:
                CommonInit,DrawSmileyFace,SetOrigin;
#endif
        override:
           InitPart,  InitPartFromStorage,  Draw,
           Externalize,  HandleEvent,  RemoveDisplayFrame;
#ifdef __PRIVATE__           //Instance Variables
             ODSession                  session;
             ODStorageUnit              storageUnit;
             ODFocusSet                 focusSet;
             ODTypeToken                selectionFocus;
             ODTypeToken                menuFocus;
             ODTypeToken                keyFocus;
             ODBoolean                  smile;
#endif
        };
#endif
};
#endif  // _SMILEYPRT_



</pre>
<h4><a name="0108_005b">Listing Two<a name="0108_005b"></h4><pre>

/*---- Smiley example implemented in OpenDoc for OS/2. (Excerpted code.) --- */
#include &quot;os2.h&quot;
#include &quot;smiley.xih&quot;
const ODPropertyName kODPropSmile = &quot;SmileyPart:Property:Smile&quot;;
//---- InitPart (OD Method): Called when part first created ----
SOM_Scope void SOMLINK SmileyPartInitPart(SmileyPart *somSelf,
                                Environment *ev,ODStorageUnit* storageUnit)
{   SmileyPartData *somThis = SmileyPartGetData(somSelf);
    SmileyPartMethodDebug(&quot;SmileyPart&quot;,&quot;SmileyPartInitPart&quot;);
    if (somSelf-&gt;IsInitialized(ev))
       return;
    SmileyPart_parent_SimplePart_InitPart(somSelf, ev, storageUnit);
    somSelf-&gt;CommonInit(ev, storageUnit);
    _smile = TRUE;
    storageUnit-&gt;AddProperty(ev, kODPropSmile)-&gt;AddValue(ev, kODBoolean);
}
//---- InitPartFromStorage (OD Method): Called during part internalization ----
SOM_Scope void SOMLINK SmileyPartInitPartFromStorage(SmileyPart *somSelf,
{                                Environment *ev,ODStorageUnit* storageUnit)
    SmileyPartData *somThis = SmileyPartGetData(somSelf);
    SmileyPartMethodDebug(&quot;SmileyPart&quot;,&quot;SmileyPartInitPartFromStorage&quot;);
    if (somSelf-&gt;IsInitialized(ev))
      return;
    somSelf-&gt;InitPersistentObjectFromStorage(ev, storageUnit);
    somSelf-&gt;CommonInit(ev, storageUnit);
    storageUnit-&gt;Focus(ev, kODPropSmile,kODPosUndefined,
                       kODBoolean,0,kODPosUndefined);
    storageUnit-&gt;GetValue(ev, sizeof(_smile), &amp;_smile);
}
//-CommonInit (Private Method) Called by InitPart/InitPartFromStorage
SOM_Scope void SOMLINK SmileyPartCommonInit(SmileyPart *somSelf,
                                Environment *ev,ODStorageUnit* storageUnit)
{   SmileyPartData *somThis = SmileyPartGetData(somSelf);
    SmileyPartMethodDebug(&quot;SmileyPart&quot;,&quot;SmileyPartCommonInit&quot;);
    _session = storageUnit-&gt;GetSession(ev); // Record session and
    _storageUnit = storageUnit;            //  storage unit for later
    // create and initialize the focus set
    _focusSet = new ODFocusSet();
    _focusSet-&gt;InitFocusSet(ev);
    _selectionFocus = _session-&gt;Tokenize(ev, kODSelectionFocus);
    _menuFocus      = _session-&gt;Tokenize(ev, kODMenuFocus);
    _keyFocus       = _session-&gt;Tokenize(ev, kODKeyFocus);
    _focusSet-&gt;Add(ev, _selectionFocus);
    _focusSet-&gt;Add(ev, _menuFocus);
    _focusSet-&gt;Add(ev, _keyFocus);
}
//---- Draw (OD Method): Called to Render Part -----
SOM_Scope void SOMLINK SmileyPartDraw(SmileyPart *somSelf,
                    Environment *ev, ODFacet* facet, ODShape* invalidShape)
{   SmileyPartData *somThis = SmileyPartGetData(somSelf);
    SmileyPartMethodDebug(&quot;SmileyPart&quot;,&quot;SmileyPartDraw&quot;);
    // get presentation space
    HPS hpsDraw = facet-&gt;GetCanvas(ev)-&gt;GetPlatformCanvas(ev);
    GpiSavePS(hpsDraw);
    GpiResetPS(hpsDraw, GRES_ATTRS);
    // get frame and determine part rectangle
    ODFrame* displayFrame = facet-&gt;GetFrame(ev);
    HRGN frameRgn = displayFrame-&gt;GetFrameShape(ev)-&gt;GetRegion(ev);
    Rect frameRect;
    GpiQueryRegionBox(hpsDraw, frameRgn, &amp;frameRect);
    // set up clipping
    HRGN saveClip;
    ODShape* clipShape = new ODShape;
    clipShape-&gt;CopyFrom(ev, facet-&gt;GetAggregateClipShape(ev));
    clipShape-&gt;Transform(ev, facet-&gt;GetContentTransform(ev));
    HRGN clip = clipShape-&gt;GetRegion(ev);
    GpiSetClipRegion(hpsDraw, clip, &amp;saveClip);
    // set part origin
    somSelf-&gt;SetOrigin(ev, facet);
    // Draw the Smiley Face
    somSelf-&gt;DrawSmileyFace(ev, hpsDraw, frameRect);
    // Cleanup and return
    GpiRestorePS(hpsDraw, -1);
    GpiSetClipRegion(hpsDraw, 0, &amp;saveClip);
    facet-&gt;GetCanvas(ev)-&gt;ReleasePlatformCanvas(ev);
    delete clipShape;
}
//--- DrawSmileyFace (Private Method): Called by Draw to render SmileyFace ---
SOM_Scope void SOMLINK SmileyPartDrawSmileyFace(SmileyPart *somSelf,
                                Environment *ev,HPS hpsDraw,Rect frameRect)
{   SmileyPartData *somThis = SmileyPartGetData(somSelf);
    SmileyPartMethodDebug(&quot;SmileyPart&quot;,&quot;SmileyPartDrawSmileyFace&quot;);
    // determine part center and smiley radius
    POINTL ptlCenter = {frameRect.xRight/2, frameRect.yTop/2};
    LONG   radius    = min(frameRect.xRight/2, frameRect.yTop/2)*.97;
    // paint white background for smiley face part
    GpiSetColor ( hpsDraw, CLR_WHITE );
    POINTL ptlBox = {frameRect.xRight, frameRect.yTop};
    GpiBox(hpsDraw, DRO_FILL, &amp;ptlBox, 0, 0);
    // Draw Smiley Face Background
    GpiSetColor ( hpsDraw, CLR_YELLOW );
    GpiSetCurrentPosition(hpsDraw , &amp;ptlCenter);
    GpiFullArc(hpsDraw , DRO_OUTLINEFILL , MAKEFIXED (radius , 0 ) ) ;
    // Initialize Line Characteristics
    GpiSetColor ( hpsDraw, CLR_BLACK);
    GpiSetPattern(hpsDraw, PATSYM_SOLID);
    GpiSetLineWidthGeom(hpsDraw, radius*.07);
    GpiSetLineEnd(hpsDraw, LINEEND_ROUND);
    // Draw Smiley Face Outline
    GpiBeginPath(hpsDraw, 1);
    GpiFullArc(hpsDraw , DRO_OUTLINE, MAKEFIXED (radius , 0 ) ) ;
    if (_smile)      // Draw a Smiling Mouth
    { POINTL ptlSmileY&quot; = {ptlCenter.x-(radius*.6), ptlCenter.y-(radius*.3),
                           ptlCenter.x,             ptlCenter.y-(radius*.7),
                           ptlCenter.x+(radius*.6), ptlCenter.y-(radius*.3)};
      GpiSetCurrentPosition(hpsDraw , &amp;ptlSmile[0]);
      GpiPointArc(hpsDraw, &amp;ptlSmile[1]);
    }
    else   // Draw a Sad Mouth
    { POINTL ptlSad[]   = {ptlCenter.x-(radius*.6), ptlCenter.y-(radius*.6),
                           ptlCenter.x,             ptlCenter.y-(radius*.5),
                           ptlCenter.x+(radius*.6), ptlCenter.y-(radius*.6)};
      GpiSetCurrentPosition(hpsDraw , &amp;ptlSad[0]);
      GpiPointArc(hpsDraw, &amp;ptlSad[1]);
    }
    GpiEndPath(hpsDraw);
    GpiStrokePath(hpsDraw, 1, 0);
    // Draw Eyes/Nose
    POINTL ptlLEye = {ptlCenter.x-radius*.3, ptlCenter.y+radius*.3};
    GpiSetCurrentPosition(hpsDraw , &amp;ptlLEye);
    GpiFullArc(hpsDraw , DRO_OUTLINEFILL , MAKEFIXED (radius*.07, 0 ) ) ;
    POINTL ptlREye = {ptlCenter.x+radius*.3, ptlCenter.y+radius*.3};
    GpiSetCurrentPosition(hpsDraw , &amp;ptlREye);
    GpiFullArc(hpsDraw , DRO_OUTLINEFILL , MAKEFIXED (radius*.07, 0 ) ) ;
    POINTL ptlNose = {ptlCenter.x, ptlCenter.y-radius*.2};
    GpiSetCurrentPosition(hpsDraw , &amp;ptlNose);
    GpiFullArc(hpsDraw , DRO_OUTLINEFILL , MAKEFIXED (radius*.07, 0 ) ) ;
}
//---- SetOrigin (Private Method): Called by Draw to position Smiley Face ----
SOM_Scope void SOMLINK SmileyPartSetOrigin(SmileyPart *somSelf,
                                         Environment *ev,ODFacet* facet)
{   SmileyPartData *somThis = SmileyPartGetData(somSelf);
    SmileyPartMethodDebug(&quot;SmileyPart&quot;,&quot;SmileyPartSetOrigin&quot;);
    ODTransform* localToGlobal = facet-&gt;GetContentTransform(ev);
    HPS hps = facet-&gt;GetCanvas(ev)-&gt;GetPlatformCanvas(ev);
    MATRIXLF mtx;
    facet-&gt;GetContentTransform(ev)-&gt;GetMATRIXLF(ev, &amp;mtx);
    GpiSetModelTransformMatrix(hps, 9, &amp;mtx, TRANSFORM_REPLACE);
    facet-&gt;GetCanvas(ev)-&gt;ReleasePlatformCanvas(ev);
}
//--- HandleEvent (OD Method): Called when the part receives a UI event ----
SOM_Scope ODBoolean  SOMLINK SmileyPartHandleEvent(SmileyPart *somSelf,
       Environment *ev,ODEventData* event,ODFrame* frame,ODFacet* facet)
{   SmileyPartData *somThis = SmileyPartGetData(somSelf);
    SmileyPartMethodDebug(&quot;SmileyPart&quot;,&quot;SmileyPartHandleEvent&quot;);
    ODDraft*draft;
    switch (event-&gt;msg)
    {  case WM_BUTTON1DOWN:      // Activate the Part
           if (_session-&gt;GetArbitrator(ev)-&gt;
                                 RequestFocusSet(ev, _focusSet,frame))
              somSelf-&gt;FocusAcquired(ev, _selectionFocus, frame);
           return kODTrue;
      case WM_BUTTON2DOWN:             // Toggle Smile/Sad Face
           _smile = !_smile;
           draft = _storageUnit-&gt;GetDraft(ev);
           draft-&gt;SetChangedFromPrev(ev);
           frame-&gt;Invalidate(ev, kODNULL);
           return kODTrue;
      default: return kODFalse;
    }
}
SOM_Scope void SOMLINK SmileyPartExternalize(SmileyPart *somSelf,
                                             Environment *ev)
{   SmileyPartData *somThis = SmileyPartGetData(somSelf);
    SmileyPartMethodDebug(&quot;SmileyPart&quot;,&quot;SmileyPartExternalize&quot;);
    _storageUnit-&gt;Focus(ev, kODPropSmile,kODPosUndefined,kODBoolean,0,
                            kODPosUndefined);
    _storageUnit-&gt;SetValue(ev, sizeof(_smile), &amp;_smile);
}

</pre>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
