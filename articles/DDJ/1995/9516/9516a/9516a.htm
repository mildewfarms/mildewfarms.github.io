<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>SP95: Porting to the PowerMac</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Porting to the PowerMac<a name="029f_00d3"><a name="029f_00d1"><a name="029f_0000"></h1><P>
<h2>A tale of two operating systems</h2><P>
<h3>Paul Kaplan</h3><P>
<p><i><a name="029f_00d2"><a name="029f_0000">Paul is a staff engineer with Symantec's Development Tools Group and works on Macintosh and Windows development tools. He can be contacted at pkaplan@symantec.com.</i></p><hr><P>
Apple's new generation of Macs is based on the Motorola PowerPC RISC processor. The PowerMac offers extremely high performance for applications that are compiled and linked for it. However, to preserve the investment users may have in existing software, the PowerMac supports legacy 68K applications. This support is accomplished through software emulation of the 68K instruction set and operating-system support for the 68K run-time model. In addition, new and old code (as well as run-time architectures) can be mixed within an application. Apple developed the PowerMac OS this way--some of System 7.5 is still 68K code.<P>
In this article, I'll describe the main similarities and differences between the old and new OSs and the process of porting Macintosh 68K applications to the PowerMac. I'll also present an application that illustrates using code resources to mix new and old code within an application.<P>
<h3><a name="029f_00d4">68K versus PowerMac<a name="029f_00d4"></h3><P>
On a PowerMac, two operating systems coexist in parallel --the original 68K system and the new PowerMac system. They run on top of a &quot;nanokernel,&quot; which provides the lowest-level services such as memory management and interrupt handling. The magic of coexisting 68K and PowerPC software is worked by the Mixed Mode Manager.<P>
When an application is launched, the PowerMac OS looks for the special Code Fragment Resource, type <I>cfrg</I>, which specifies a PowerMac application. If a valid <I>cfrg</I> resource exists, the application is handed to the Code Fragment Manager (CFM). This subsystem manages the loading and execution of applications and shared libraries. In addition to handling the default load format, the CFM allows the use of custom loaders. A 68K application has no <I>cfrg </I>resource and is therefore handed to the 68K Segment Manager.<P>
After an application has been launched as either 68K or PowerMac, it can switch modes while running. To switch modes and run unmodified, 68K applications call the Mixed Mode Manager implicitly; PowerMac applications can call it implicitly or explicitly.<P>
In order to run 68K applications, the PowerMac OS has retained a number of components of the 68K OS. In fact, the PowerMac toolbox calls are a superset of the 68K system. The file system is the same, so &quot;well-behaved&quot; applications can be ported with little more than recompiling and linking--the development system will take care of run-time details. The System 7 MacOS, on the other hand, retains a single address space for all running applications, and the multitasking model is still cooperative and non-preemptive. Future releases of the MacOS, beginning with System 8 (code named &quot;Copland&quot;) will provide multiple, virtual address space, preemptive multitasking, memory-mapped I/O, and object-oriented user-interface components.<P>
The run-time model for PowerMac applications is completely new. Now, only one code and one data segment are required, and the segment manager is no longer used.<P>
The code segment has no relocations, which makes it sharable, and all the relocations are in the data segment. Each application has a Table Of Contents (TOC) that serves the same function as the 68K &quot;A5 world&quot; and greatly simplifies access to global data. The TOC is created by your development system and is transparent to C or C++ code. Also, the new OS supports, and depends heavily on, shared libraries. In fact, the PowerMac toolbox is a shared library. Finally, the application file format has been completely reorganized.<P>
<h3><a name="029f_00d5">Porting Your Application<a name="029f_00d5"></h3><P>
Porting to the PowerPC can be as simple as recompiling if your source code meets the requirements listed in the next few paragraphs. For example, Symantec C++ 8.0 automatically converts your existing 7.0 (68K) project; recompile and link it, and it's ready to go. On the other hand, legacy applications that take shortcuts to system features will need some porting work.<P>
The first step in porting any application is to ensure that your code runs under 68K System 7. Such an application should use only &quot;32-bit clean&quot; addresses. Older Mac applications sometimes used the high byte of an address for purposes other than the address. PowerPC addresses use all 32 bits. In compiling your code, use ANSI C or C++, which will force stronger type checking and function prototypes. Also, compile with Apple's Universal Headers, which are shipped with your development system. Universal Headers are appropriate for both 68K and PowerPC applications and will make your code portable between them. In addition, either rewrite inline assembly in C, or place the inline code in separate assembler files. If you insist on keeping the 68K code, it should be isolated in a separate code resource.<P>
Don't make assumptions about registers, especially passing parameters, as they are all different. And try to use data types with 4-byte alignment. Although the PowerPC processor allows alignment anywhere, 4-byte alignment produces more- efficient code. However, if you're writing structures to a file, using 4-byte alignment can waste disk space.<P>
Beyond these steps, you can use <I>#pragma</I>s to force 68K alignment where it is necessary for toolbox routines. Check that the alignment is correct when reading data from an existing disk file. Also, use <I>int</I> and <I>long</I> data types. On the PowerPC, <I>int </I>and <I>long</I> are 32 bits, and <I>short</I> is 16 bits. The 32-bit integer is the most efficient data type.<P>
Use the <I>double</I> data type for floating-point variables. The PowerPC FPU supports only the IEEE 4-byte (f<I>loat</I>) and 8-byte (<I>double</I>) floating-point formats. <I>Double</I> is more efficient. The 10- and 12-byte <I>double</I>s used on 68K are not supported by the processor. <I>Long double</I>s are supported with two <I>double</I>s. (Note that the Symantec compiler does not support <I>long double</I>s.) Check all <I>#pragma</I>s and dependencies on <I>#define</I>s to ensure they still have meaning in the new environment. Do not put data in code. This would affect pipelined-instruction performance. And if you have Pascal code, convert it to C either by hand or with the MPW p2c Pascal-to-C converter (available on Apple's ETO #17 CD-ROM).<P>
When porting the system interface portion of your application, you should generally use system calls instead of accessing the hardware directly. In addition, convert callbacks to universal procedure pointers. These are available in the Universal Headers. If you're passing a callback procedure's address to the operating system, you must create a <I>UniversalProcPtr</I> with the <I>NewRoutineDescriptor</I> function (the actual data structure that describes the function is called a &quot;routine descriptor&quot;). You need to use <I>UniversalProcPtr</I>s because the OS makes no assumption about the callback's architecture. Strictly speaking, routine descriptors are not required for 68K builds (they are compiled into addresses), but using them will make your code completely portable between the two environments.<P>
Another thing to watch for is direct access of low memory. Don't do it! Rather, use the <I>LMSetxxx</I> and <I>LMGetxxx</I> calls in LowMem.h. Finally, don't explicitly use the 68K run-time model. The 68K run-time-specific calls are not supported. For example, a call to the Segment Manager would return with no action.<P>
<h3><a name="029f_00d6">Linking Your PowerMac Application<a name="029f_00d6"></h3><P>
Your linker will create a &quot;fragment,&quot; which is the atomic load unit and contains code and static data. Fragments are managed by the CFM. Most PowerMac applications and shared libraries use the Preferred Executable Format (PEF) to house fragments. PEF specifies the file header, segments for code and data, import- and export-symbol tables, and relocations. Normally, the application resides in the data fork of its file, although fragments can be resources as well. The linker in your development system will handle the details of fragments and the PEF.<P>
Your linker should support the xcoff format, which is an extension of the coff format found in UNIX. This is important because the only stub libraries Apple supplies to link to the toolbox and shared-library extensions such as the Drag Manager are in xcoff format. The stubs are supplied with your development system. The xcoff format can also be used to link third-party static libraries and object modules from a single translation unit. Normally, the Symantec development environment skips the step of writing object files; the compiler passes them directly to the linker in memory.<P>
Dividing applications into shared libraries will make your code reusable and smaller by eliminating redundantly loaded code. Your development environment will help you create and manage shared libraries.<P>
<h3><a name="029f_00d7">Under the Application Hood<a name="029f_00d7"></h3><P>
As mentioned, the run-time model of an application running on the PowerMac OS is quite different from that of the 68K. The PowerMac run-time model has one code and one data segment, which are normally loaded in memory. The code segment is read only, which makes it suitable to run in ROM, but unsuitable to store writable data. Code and data elements may be exported from the fragment, which means their symbols are made public and may be linked dynamically. With the Symantec environment, symbols are exported with a <I>#pragma</I>.<P>
Within the data segment resides the TOC, which is like a personal address book. It provides linkage to symbols inside and outside the fragment. The TOC has linkage to imported routines, imported data, global variables, and the pool (or pools) of static variables. When loading the application and its shared libraries, CFM resolves imported symbols and fills in the appropriate TOC entries. The TOC is 64 KB, so there is a maximum of 16K TOC entries. Your development system will warn you of a TOC overflow.<P>
Applications should have a <I>main()</I> entry point and may additionally have user-initialization and termination routines. CFM will call the <I>main()</I> entry point of an application after it is loaded. CFM may also call an initialization routine as part of loading the fragment, and it may call a termination routine when it unloads the fragment. Your development system will help you define these entry points.<P>
<h3><a name="029f_00d8">Shared-Library Details<a name="029f_00d8"></h3><P>
Although common in UNIX, shared libraries are probably best known as DLLs in Microsoft Windows. Originally, shared libraries were available as an add-on to older MacOS versions with Apple Shared Library Manager (ASLM), but they are now a standard feature and are in common use on the PowerMac. Shared libraries are similar to applications. The main differences are that the file type for a shared library is <I>shlb</I>, not APPL, and that there is no <I>main()</I> entry point. Initialization and termination routines are allowed.<P>
When the PowerMac system starts up, its shared libraries are registered with CFM and made available to all calling applications. Other shared libraries can be loaded and called at application startup if specified in the PEF file, or loaded on request by the application. Shared libraries can be loaded automatically by specifying them as import libraries to your development environment. Your linker will resolve external symbols to a shared library as though they were part of a statically linked library. However, the linker knows they've been imported and will put them in the import list for the appropriate library. As CFM loads your application, it will also attempt to load shared libraries specified by the application.<P>
Shared libraries can also be loaded explicitly with the toolbox call <I>GetDiskFragment</I>. In this case, imports should be specified as &quot;weak&quot; so the linker won't be unhappy with the unresolved references. If you load a shared library explicitly, your code should be able to handle a failed load or an unresolved import (which will have a null address at run time). Shared libraries also have version capabilities. CFM checks the version number of a shared library against the version number required by the application and fails on load if it is not compatible. Version numbers can be specified by your development system.<P>
<h3><a name="029f_00d9">Code Resource Examples<a name="029f_00d9"></h3><P>
MacOS System 7 code resources such as CDEF and MDEF do not need to be immediately ported to PowerPC. However, there are performance penalties for mixed-mode switching and for running 68K-emulated code. If the performance of a code resource is critical, you should convert that resource to a native, or &quot;accelerated,&quot; resource.<P>
To illustrate the process of gradually porting to the PowerMac, I've included a sample project and the required modifications. Listings <a href="#029f_00dd">One</A> and <a href="#029f_00df">Two</A> show the project source files from a 68K program that calls a 68K resource. This project is a simple application that creates a window, has a standard event loop, and calls the <I>main()</I> routine in the code resource to handle the <I>Update</I> Event. The examples don't use any C++ features, although they were compiled with the Symantec C++ compiler. The <I>InitToolboxStuff()</I> and <I>MouseDownProc()</I> routines are standard Mac idioms and aren't shown. Also, the error checking that would be in commercial-grade code is omitted.<P>
The first modification is the same project ported to the PowerMac. Note that the code-resource routine is still 68K and therefore unchanged. The main-project routine (see <a href="#029f_00e1">Listing Three</A>) requires a few changes to call the code resource through the Mixed Mode Manager. Note the use of the Toolbox routine <I>CallUniversalProc()</I>, which has a varargs parameter list, and the two required parameters, <I>ProcInfoType</I> and <I>UniversalProcPtr</I>. <I>ProcInfoType</I> has been initialized to describe the interface of the routine so that <I>CallUniversalProc()</I> will use the parameters correctly.<P>
The second modification illustrates the changes required to port the resource to the PowerMac. This time, the main project routine has not changed because it was ported in the first modification. <a href="#029f_00e3">Listing Four</A> illustrates the accelerated resource code. There are new calls to <I>__cplusrsrcinit()</I> and <I>__cplusterm()</I>; the calls to <I>RememberA0()</I>, <I>SetupA4()</I>, and <I>RestoreA4()</I> have been deleted.<P>
Normal, nonresource applications always follow the <I>main(argc, argv)</I> convention. The standard run-time library contains hidden code to set up any arguments to <I>main()</I>, and initialize static constructors and destructors. Code resources, by tradition, do not necessarily conform to an entry-point standard.<P>
The Symantec solution for code resources in C++ requires explicit calls to the run-time routines <I>__cplusrsrcinit()</I> and <I>__cplusterm()</I> within the <I>main()</I> routine of the code resource. The run-time routines call any static constructors and destructors, and make the QuickDraw globals available to the code resource. Code resources also require routine descriptors, which play a similar role to the <I>ProcInfoType</I> parameter used in <I>CallUniversalProc</I>.<P>
Another feature of the PowerMac is support for a &quot;fat application&quot;--a single Mac app that contains a 68K version in the resource fork and a PowerMac version in the data fork. Many of the resources, such as menus and icons, can be directly shared. With a little work, code resources can be shared as well. A fat application is backward compatible with 68K, System-7 machines. Although they take up more disk space, fat applications neatly solve the packaging problem for some vendors.<P>
<h3><a name="029f_00da">Conclusion<a name="029f_00da"></h3><P>
Porting standard applications from 68K to PowerPC is relatively simple. The tools you have to work with--the Mixed Mode Manager, CFM, and your development system--will allow you to gradually port your application, develop an application that will run on both the PowerMac and 68K systems, and create an application exclusively for the PowerMac.<P>
<h3><a name="029f_00db">Acknowledgments<a name="029f_00db"></h3><P>
I'd like to thank Jim Laskey, Yuen Li, John Micco, and Susan Rona, all from Symantec, for their help with this article.<P>
<P>
<h4><a name="029f_00dc"><a name="029f_00dd"><a name="029f_00dd">Listing One</h4><pre>
// Macintosh application to create a very simple window and do basic 
// event handling. Paul Kaplan - Symantec Corporation
#include &quot;InitToolboxStuff.h&quot;
#include &quot;MouseDownProc.h&quot;
#include &quot;UpdateWinProc.h&quot;
#define WIN_RESID 128
#define CODE_RESID 128
void main()
    {
    static WindowPtr theWindow, foundWindow;
    static EventRecord theEvent;
    Handle UpdateWinProcHandle;
    InitToolboxStuff();
    // Setup Window and mouse tracking region
    theWindow = GetNewWindow(WIN_RESID, nil, (GrafPtr)-1);
    RgnHandle mouseRgn = NewRgn();
    // Get code resource and lock its handle
    UpdateWinProcHandle = GetResource('CODE', CODE_RESID);
    HLock(UpdateWinProcHandle);
    Boolean more2do = TRUE;
    while (more2do)     // Standard event loop processing
        {
        if (WaitNextEvent(everyEvent, &amp;theEvent, 0xffffffff, mouseRgn))
            {
            switch(theEvent.what)
                {
                case updateEvt: // Call the code resource !!
                
                (*(UpdateWinProcPtr)(*UpdateWinProcHandle))(theWindow);
                break;
                case mouseDown: // Standard Mac Toolbox handling of Mouse Down
                    more2do = MouseDownProc(&amp;theEvent, &amp;foundWindow);
                default:
                    break;
                }
            }       
        }
    // Free all allocated memory
    HUnlock(UpdateWinProcHandle);
    ReleaseResource(UpdateWinProcHandle);
    DisposeRgn(mouseRgn);
    DisposeWindow(theWindow);
}
</pre>
<h4><a name="029f_00de"><a name="029f_00df"><a name="029f_00df">Listing Two</h4><pre>
// Code resource procedure to draw text in a window
#include &lt;SetUpA4.h&gt;
#define HORIZ 65
#define VERT 95
void main(WindowPtr myWin)
    {
    static char msg[] = &quot;68K Code Resource&quot;;
    GrafPtr savedPort;
    RememberA0();               // Save value of A0 for next macro
    SetUpA4();                  // Set up A4 for resource globals
    GetPort(&amp;savedPort);        // Save current GrafPort
    SetPort(myWin);             // Make mine the current GrafPort
    BeginUpdate(myWin); 
    MoveTo(HORIZ, VERT);            // Move cursor to position
    DrawText(msg, 0, sizeof(msg));  // Draw the string
    EndUpdate(myWin);
    SetPort(savedPort);         // restore current GrafPort
    RestoreA4();                // Restore A4
    }
</pre>
<h4><a name="029f_00e0"><a name="029f_00e1"><a name="029f_00e1">Listing Three</h4><pre>
// Macintosh application to create a simple window and do basic event handling.
// Paul Kaplan - Symantec Corporation
#include &quot;InitToolboxStuff.h&quot;
#include &quot;MouseDownProc.h&quot;
#include &quot;UpdateWinProc.h&quot;
#define WIN_RESID 128
#define CODE_RESID 128
void main()
    {
    static WindowPtr theWindow, foundWindow;
    static EventRecord theEvent;
    Handle UpdateWinProcHandle;
    // Variable to hold Universal Proc Pointer
    UniversalProcPtr theUPP;
    // Proc Info Type - describes the called procedure's interface
    ProcInfoType theProcInfo = kCStackBased | 
                                     STACK_ROUTINE_PARAMETER(1,kFourByteCode);
    InitToolboxStuff();
    // Setup Window and mouse tracking region
    theWindow = GetNewWindow(WIN_RESID, nil, (GrafPtr)-1);
    RgnHandle mouseRgn = NewRgn();
    // Get code resource and lock its handle
    UpdateWinProcHandle = GetResource('CODE', CODE_RESID);
    HLock(UpdateWinProcHandle);
    Boolean more2do = TRUE;
    while (more2do)     // Standard event loop processing
        {
        if (WaitNextEvent(everyEvent, &amp;theEvent, 0xffffffff, mouseRgn))
            {
            switch(theEvent.what)
                {
                case updateEvt: // Call the code resource using 
                                // CallUniversalProc instead of 
                                // calling routine directly
                    theUPP = (UniversalProcPtr)*UpdateWinProcHandle;
                    // Convert dereferenced handle to UPP
                    CallUniversalProc(theUPP, theProcInfo, theWindow);
                    // Call MixedMode Manager
                    break;
                case mouseDown: // Standard Mac Toolbox handling of Mouse Down
                    more2do = MouseDownProc(&amp;theEvent, &amp;foundWindow);
                default:
                    break;
                }
            }       
        }
    // Free all allocated memory
    HUnlock(UpdateWinProcHandle);
    ReleaseResource(UpdateWinProcHandle);
    DisposeRgn(mouseRgn);
    DisposeWindow(theWindow);
}
</pre>
<h4><a name="029f_00e2"><a name="029f_00e3"><a name="029f_00e3">Listing Four</h4><pre>
// Code resource procedure to draw text in a window
#include &lt;new.h&gt;
#define HORIZ 65
#define VERT 95
void main(WindowPtr myWin)
    {
    static char msg[] = &quot;PPC Code Resource&quot;;
    static GrafPtr savedPort;
// Call any static constructors in this link unit. Also make 
// QDGlobals available
    __cplusrsrcinit();
    GetPort(&amp;savedPort);        // Save current GrafPort
    SetPort(myWin);             // Make mine the current GrafPort
    BeginUpdate(myWin); 
    MoveTo(HORIZ, VERT);                // Move cursor to position
    DrawText(msg, 0, sizeof(msg));      // Draw the string
    EndUpdate(myWin);
    SetPort(savedPort);         // restore current GrafPort
    __cplusrsrcterm();          // Call any destructors in this link unit
    }
End Listings
</pre>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
