<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>SP95: PATTERNS & SOFTWARE DESIGN</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>PATTERNS &amp; SOFTWARE DESIGN<a name="02e6_00e3"><a name="02e6_00e1"><a name="02e6_0000"></h1><P>
<h2>Observations on Observer</h2><P>
<h3>Richard Helm</h3><P>
<p><i><a name="02e6_00e2"><a name="02e6_0000">Richard is a consultant with DMR Group, an international information-technology consulting firm. He can be reached at Richard.Helm@dmr.ca. Erich is a software engineer with Taligent Inc. He can be reached at Erich_ Gamma@Taligent.com. Erich and Richard are coauthors of the award-winning book Design Patterns: Elements of Reusable Object-Oriented Software (Addison-Wesley, 1994).</i></p><hr><P>
Partitioning a system into objects is a key activity during object-oriented design. As a result of this partitioning, we may create objects that depend on other objects. Changes in one object must be reflected into others. There are many different ways to ensure that these dependencies are maintained.<P>
For example, consider the timer object in <a href="199502e8.htm">Figure 1</A>, which keeps the current time, and a digital-display object that shows the current time. Whenever the timer ticks, this time-display object has to be updated. In other words, the time-display object has to maintain the constraint to always reflect the timer's current time. A simple solution is to connect the timer object directly to the time-display object. Whenever the timer changes, it explicitly tells the display object to update itself. <a href="199502e9.htm">Figure 2</A> shows the corresponding class diagram for directly coupling the timer with its observer. <a href="#02e6_00ec">Listing One</A> is one way to implement this in C++. While this direct coupling of two objects is simple to implement, it can also introduce problems in different areas:<P>
<UL>
<li>Reusability. It is not possible to reuse the timer independently of the time display. The two objects are strongly coupled and must always be used together, even when the client is only interested in the timer. </li>
<li>Maintainability. The direct coupling makes maintenance more difficult. It is not possible to test or port the timer to a different platform independently of the time display.</li>
<li> Extensibility. Whenever you want to add another kind of timer display (say, an analog display) that needs to be synchronized with the timer, you have to modify the <I>Timer</I> class to also update this new kind of time display.</li>
</UL>
These problems are clearly not serious in this simple example. However, in the context of a larger system we have to be more alert when introducing dependencies among objects. In fact, it is a key design activity to control and manage the dependencies between objects. Badly managed dependencies can result in a tangled system that is hard to reuse, maintain, or extend. A common theme of several patterns in our book <I>Design Patterns: Elements of Reusable Object-Oriented Software</I> is how to break hard dependencies by decoupling the involved objects. The Observer pattern is one of them.<P>
The intent of the Observer pattern is to define dependency relationships between objects so that when one changes, its dependents are notified and can update themselves accordingly. The Observer pattern enables objects to observe and stay synchronized with another object without coupling the observed object with its observers. The pattern has two participants:  1. a subject, and 2. the subject's dependent observers. Each time the subject changes, it is responsible for notifying its observers that it changed. Observers must ensure that whenever they are notified, they in turn make themselves consistent with their subject. A subject needs an interface that allows observers to subscribe and register their interest in changes to the subject. <P>
The subject usually maintains a list of subscribed observers. <a href="199502ea.htm">Figure 3</A> illustrates these class relationships in OMT notation. Notice that we introduced two new base classes. The <I>Subject</I> class defines the mechanism for registering and notifying observers and the <I>Observer </I>class defines the update interface. This diagram illustrates how the Observer pattern breaks the direct coupling between <I>Subject</I> and <I>Observer</I>. The <I>Subject</I> knows nothing about its <I>Observer</I>s except that they can be sent <I>Update </I>requests. This is because the reference from <I>Subject</I> points to the abstract class <I>Observer</I>. For this reason, we refer to this kind of coupling as &quot;abstract.&quot; The abstract coupling between <I>Subject</I> and <I>Observer </I>resolves the problems mentioned previously:<P>
<UL>
<li>Reusability. The timer object can now be reused and distributed without the time-display object. It only has to be bundled with the abstract Observer class. <a href="199502eb.htm">Figure 4</A> illustrates the resulting class coupling.</li>
<li>Maintainability. The objects are no longer directly coupled, and the timer object can be tested independently of the time display. For example, when you port the <I>Timer</I> class to another platform, you can test it as soon as you've ported it and Observer. You no longer have to wait for the testing until the time display and its associated graphical infrastructure are ported as well.</li>
<li>Extensibility. It is easy to add additional objects that need to be synchronized with the timer. For example, an analog time display only needs to inherit from Observer, implement the <I>Update</I> interface, and register itself with the timer.</li>
</UL>
<a href="199502ec.htm">Figure 4</A> shows that the concrete observer knows the class of the subject it is observing, and it can rely on this interface to query the subject's current state. <P>
The <I>Subject</I> and <I>Observer </I>classes (Listings <a href="#02e6_00ee">Two</A> and <a href="#02e6_00f0">Three</A>, respectively) illustrate how you could implement <I>Observer </I>in the context of the timer example. The key point about <I>Timer</I> is that its <I>Tick</I> member function calls <I>Notify,</I> which will call <I>update</I> on all its <I>Observer</I>s.<P>
<a href="#02e6_00f2">Listing Four</A> presents the classes <I>Observer </I>and <I>DigitalTimeDisplay</I>. <I>DigitalTimeDisplay</I> maintains a reference to the timer. Whenever the <I>Timer</I> ticks, it calls <I>Notify,</I> which in turn calls <I>Update</I> on its attached <I>Observer</I>s. In this case, <I>DigitalTimeDisplay</I> receives the <I>Update</I> request, reads the time from the timer, and displays the time.<P>
Notice how the <I>Timer</I> has no knowledge of how it is displayed. In fact, you could add another timer, say an <I>AnalogTimeDisplay</I>, and it would also be updated whenever the <I>Timer</I> ticked.<P>
<h3><a name="02e6_00e4">Absorbing the <I>Subject </I>and <I>Observer </I>Classes <a name="02e6_00e4"></h3><P>
One possible simplification of the canonical observer-class structure is to absorb the <I>Subject</I> and <I>Observer</I> classes into existing classes. For example, the Microsoft Foundation Classes (MFC) use this kind of simplification. MFC supports multiple views observing a document (see &quot;Adding Auxiliary Views for Windows Apps,&quot; by Robert Rosenberg, <I>Dr. Dobb's Sourcebook of Windows Programming</I>, March/April 1995). In MFC, the subject functionality is absorbed into <I>Document,</I> and <I>Observer</I> is absorbed into the <I>View</I> class. This solution is simpler since it requires fewer classes, but the dependency relationships can only be defined between instances of <I>Document</I> and <I>Views</I>. <P>
<h3><a name="02e6_00e5">Inheritance Variations<a name="02e6_00e5"></h3><P>
There are also several variations in how inheritance is used to implement the Observer pattern. As <a href="199502ed.htm">Figure 2</A> shows, the interfaces for notifying and observing are defined by two classes. The <I>Observer</I> base class defines an interface consisting of an <I>Update</I> operation. In a language supporting multiple inheritance, <I>Observer </I>is often not a primary base class (that is, it is mixed in as an auxiliary base class). For example, in the timer example, <I>AnalogTimeDisplay</I> might need to inherit from a graphical base class like <I>View</I>. In this case, <I>AnalogTimeDisplay</I> mixes in the <I>Observer</I> class as an auxiliary class. Another variation is not to separate the notifying and observing interfaces into two separate classes. For example, in the Smalltalk-80 implementation of <I>Observer</I>, these two interfaces are supported by the universal <I>Object</I> class. Thus, each object in the system can act as both subject and observer. This is particularly convenient in a language that does not support multiple inheritance or in class libraries that don't want to rely on it. Using separate classes for subject and observer would require you to inherit from both subject and observer when an object needs to act as both.<P>
In <a href="199502ee.htm">Figure 3</A>, the <I>Timer</I> subclass inherits the <I>Subject</I> interface without any overriding. This is not always the case. For example, it is possible that a <I>Subject</I> subclass wants to customize how observers are maintained. In Smalltalk-80 the <I>Subject</I> base class (<I>Object</I>) implements the subject interface in a space-efficient way. Instead of storing the list of observers in each subject, the subject/observer mapping is maintained in a central dictionary. Only subjects that actually have observers are stored in the dictionary and have to pay for the subject service. However, this approach trades space for time: Accessing a subject's observers requires a dictionary look-up. For subjects that often notify observers, eliminate this inefficiency by storing the observers directly in an instance variable. The subject interface can then be implemented by accessing this list directly. In Smalltalk-80, this kind of <I>Subject</I> implementation is provided by the <I>Object</I> subclass <I>Model</I>. Consequently, the client has the choice between subject implementations with different trade-offs by inheriting from either <I>Object</I> or <I>Model</I>. As an aside, the <I>Subject</I> interface is an example of so-called &quot;coupled overrides.&quot; If you override one of the subject operations, you should also override the others. <P>
<h3><a name="02e6_00e6">Push versus Pull Update Protocols<a name="02e6_00e6"></h3><P>
In the timer example, the <I>Timer</I> makes no assumptions about what objects are observing it. Instead it relies on the various timer displays querying it to retrieve the current time. The observers &quot;pull&quot; the state of the subject to them. An alternative is for the timer to send, or &quot;push,&quot; the time to its observers whenever it updates them. Pushing the time requires extending the interface of Observers to accept the time in seconds. To do this, you replace the <I>Observer</I> class with a <I>TimerObserver</I> class; see <a href="#02e6_00f6">Listing Six</A>. The <I>TimerSubject</I> class would now have to maintain a List of <I>TimerObserver</I>s and its <I>Notify</I> function would look like <a href="#02e6_00f8">Listing Seven</A>. The observers are now more tightly coupled to the timer, but they no longer need to query the timer for the time. It is still possible to have arbitrary <I>Timer</I> observers by subclassing from <I>TimerObserver</I>. However, <I>TimerSubject</I> and <I>TimerObserver</I>s can no longer be used to maintain general dependency relationships.<P>
The decision to use push or pull update protocols depends on many trade-offs: the amount of data being pushed and the expense of pushing it, the difficulty of determining what changed in the subject, the cost of notification and subsequent updates (whether subjects and observers are in the same address space), and dependencies introduced by observers being dependent on the pushed data. <P>
The push model is more appropriate when editing text. Consider an implementation where a <I>TextSubject</I> stores the textual data and a <I>TextView</I> acting as its observer presents the text in window. When the user changes the text by entering a character, the pull model requires that the <I>TextView</I> completely reformat the text and refresh the window or that it somehow can determine which range of characters really changed. Both of these operations can be quite time consuming.<P>
A more satisfactory approach is for the <I>TextSubject</I> to provide a &quot;hint&quot; of its changed text. The <I>TextView</I> uses this hint to update itself more efficiently. Hints can be simple, enumerated constants that provide general indications of what changed in the <I>Subject</I>, or more sophisticated, specific information to aid the <I>TextView</I>. <I>TextView</I> is interested in <I>how</I> the <I>TextSubject</I> changed--whether characters were added or removed, and where. <P>
The hint can package information about the actual changes (&quot;deleted range 12-27&quot;) and push it to the observers. The hint essentially sends the deltas that have occurred in the subject. In practice, not all observers will be interested in every hint; they may ignore some and act as if they had received a simple update request.<P>
A hint can be extended with additional information by making it a first-class object. This enables subjects to bundle the additional information by subclassing from a <I>Hint</I> base class. At the receiving end, the observer downcasts the hint to the desired type and extracts the additional information. This downcast should of course not be done in a &quot;hard&quot; way, and it should by guarded by using the C++ run-time type identification facilities (<I>dynamic_cast</I>). <P>
<h3><a name="02e6_00e7">Who Sends Out Notifications<a name="02e6_00e7"></h3><P>
When notifications are sent, the subject must be in a consistent state. If it is not, strange results may occur in the observers as they try to update themselves from a nonsensical subject. <P>
Which object has the responsibility to actually send the notification is also important. In our example, it is the <I>Timer</I> object that sends notifications in its <I>Tick</I> operation. This works fine as long as the subject is simple. <P>
In <a href="#02e6_00fa">Listing Eight</A>, the <I>Tick</I> operation is overridden in a special kind of timer that allows you to set alarms. See the problem? When subjects have the responsibility to send notifications, overriding operations in the subject may cause spurious and inconsistent notifications. By overriding <I>Tick,</I> the first notification (sent from <I>Timer:: Tick</I>) is sent while the <I>AlarmedTimer</I> is in an inconsistent state (the <I>_alarm</I> variable should be set at that time but isn't until the second notification). Some observers could set off alarms by testing the result of <I>AlarmSet</I> and some could do so by testing the equality of <I>AlarmTime</I> and <I>CurrentTime</I>. <P>
There are simple fixes for this problem. But for more complex subjects with derived classes, overriding operations that send notifications in the subject could make the subject inconsistent or cause duplicate notifications to be sent.<P>
One solution to sending notifications to the subject is making clients change the subject to initiate the notifications. Whenever the client makes a change, it must call <I>Notify</I> on the subject. This solution is practical, but places extra burden on the clients. It is easy to forget to call <I>Notify</I> on the subject. Another solution is to define <I>Tick</I> as a template method (see the Template Method pattern from our book) that first just calls the operation <I>DoTick </I>and <I>Notify. </I>The <I>Timer </I>class defines <I>DoTick </I>to increment the current time. Subclasses can override this operation to provide their own extensions to the <I>Tick </I>operation. <P>
<h3><a name="02e6_00e8">Subscribing to Specific Aspects of Observers<a name="02e6_00e8"></h3><P>
When a subject has complex internal state, observers may spend much effort to determine exactly what changed in the subject. Along with using hints, you can reduce this burden by relying on intrinsic properties of the subject itself. Complex subjects may only change their state in predefined ways. Changes in part of a subject's state may be independent of changes in other parts. <P>
Such properties can be exploited by having the subject define independent aspects and having observers only subscribe to the aspects they are interested in.<P>
In the <I>Timer</I> example, suppose that the <I>Timer</I> class were implemented with three distinct counters that maintained the time in seconds, minutes, and hours. Now the various timer displays will usually be defined in terms of hours, minutes, and seconds. Clearly, not all of these need to be updated each second. In fact, the hour, minute, and second counters change almost independently of each other. You can exploit this by defining aspects that represent changes in hours, minutes, and seconds and defining our displays as consisting of three independent parts, each subscribing to a particular part of the <I>Timer</I>.<P>
In this example, assume that the aspects are simply defined as integer constants that are passed as a parameter to <I>Notify</I>; see <a href="#02e6_00fc">Listing Nine</A>. The class <I>Timer</I> makes its aspects available to the clients as class-scoped constants. In <a href="#02e6_00fe">Listing Ten</A>, for example, the changed aspect is passed as a hint to the <I>Observer</I>'s<I> Update</I> operation in <a href="#02e6_0100">Listing Eleven</A>. If there are many different aspects, the update operation becomes a lengthy conditional statement that maps an aspect to a piece of code. Such conditional code is not very elegant. There are different techniques to avoid this kind of manual-dispatching code. One technique is demonstrated in VisualWorks Smalltalk, wherein the dispatching problem is solved with a <I>DependencyTransformer</I> object that implements the Observer interface. It knows which aspect it is interested in and keeps track of the actual receiver of the notification and the operation to be executed by the receiver when the aspect changes. <a href="199502ef.htm">Figure 5</A> shows a possible class structure for a <I>DependencyTransformer</I>.<P>
When a <I>DependencyTransformer</I> receives the update, it checks the aspect. If the aspect matches, <I>DependencyTransformer</I> invokes the operation on the Receiver. <I>DependencyTransformer</I>s are created by the subject when an observer expresses its interest in a changed aspect. This requires a way to specify the operation to be called. In Smalltalk, the operation's selector name is specified; <I>#updateSeconds</I>, for example. <P>
<I>DependencyTransformer</I>s act as an intermediary between the subject and its dependent object. They map the Observer interface to an operation of the dependent object. A <I>DependencyTransformer</I> is therefore an example of the <I>Adapter</I> pattern.<P>
<h3><a name="02e6_00e9">Making an Arbitrary Class a Subject<a name="02e6_00e9"></h3><P>
Sometimes classes are not designed to be subjects, but later, you realize that instances of these classes might have dependent objects. How do you make such classes into subjects? You could change the class by mixing in the <I>Subject</I> interface, but this is not always possible. The class you wish to make a subject may not be modifiable--it may reside in a class library over which you have no control.<P>
An elegant way to allow arbitrary classes to become subjects is to wrap the object in another object that adds the <I>Subject</I> behaviors and interfaces. This decorator object (this is an example of the <I>Decorator</I> pattern) intercepts and forwards all requests to the wrapped object, and notifies clients after operations which are likely to change the wrapped object.<P>
Suppose the class <I>Timer</I> was in fact not designed to be a subject and was defined as in <a href="#02e6_0102">Listing Twelve</A>. You could make <I>Timer</I> a subject by defining a <I>TimerDecorator</I> class as in <a href="#02e6_0104">Listing Thirteen</A>. The <I>TimerDecorator</I> has the same interface as the <I>Timer</I>, so it looks like a timer to clients. Every request made of the <I>TimerDecorator</I> is forwarded on to the timer, and then the timer calls <I>Notify</I> on itself to update its observers; see <a href="#02e6_0106">Listing Fourteen</A>.<P>
Making objects be subjects by using decorators is only practical when the decorated object's interface is relatively small, because you have to duplicate the subject's interface in the decorator. If the subject's interface is large, this approach can become unwieldy. <P>
<h3><a name="02e6_00ea">Conclusion<a name="02e6_00ea"></h3><P>
In one form or another, the Observer pattern occurs in many object-oriented systems. While most commonly used for decoupling user interfaces from data to be displayed on the user interface, often it is used to manage dependencies between objects. The Observer pattern has many more possible variations than the few we've examined. For example, we did not look at batching notifications, concurrency and distribution, or observing more than one subject.<P>
Finally, a description of the Observer pattern would not be complete without mentioning its origin in the Smalltalk's Model-View-Controller (MVC) framework. In this design, the Model encapsulates application data. The View presents the model to the user. The controller is responsible for handling user input. From a dependency-management view, MVC provides the idea of decoupling the application data from the user interface. The benefit of this decoupling is that the application data can be presented by different user interfaces. In MVC terminology, the timer object becomes the &quot;model&quot; and the time display becomes a &quot;view.&quot; If we supported manipulation of the time display by the user, then this behavior would be assigned to the <I>Controller</I>.<P>
<pre><B><a href="199502f0.htm">Figure 1</A>:</B> Simple timer object.
<B><a href="199502f1.htm">Figure 2</A>:</B> Class diagram for directly coupling the timer with its observer.
<B><a href="199502f2.htm">Figure 3</A>:</B> Class relationships in OMT notation.
<B><a href="199502f3.htm">Figure 4</A>:</B> Resulting class coupling. 
<B><a href="199502f4.htm">Figure 5</A>:</B> Possible class structure for a DependencyTransformer.</pre><P>
<P>
<h4><a name="02e6_00eb"><a name="02e6_00ec"><a name="02e6_00ec">Listing One</h4><pre>
class DigitalTimeDisplay;
class Timer {
public:
   Timer(DigitalTimeDisplay*);
   long CurrentTime() const;
   void Tick();
private:
   DigitalTimeDisplay* _display;
   long _currentTime;
};
class DigitalTimeDisplay {
public:
   DigitalTimeDisplay();
   void DisplayTime();
   void UpdateTime(long time);
};
void Timer::Tick()
{
  _currentTime++;
  _display-&gt;UpdateTime(_currentTime);
}
</pre>
<h4><a name="02e6_00ed"><a name="02e6_00ee"><a name="02e6_00ee">Listing Two</h4><pre>
class Subject {
public:
  void Attach(Observer*);
  void Detach(Observer*);
  void Notify();
protected:
  Subject();
private:
  List&lt;Observer*&gt; *_observers;
};
void Subject::Notify () {
  ListIterator&lt;Observer*&gt; i(_observers);
  for (i.First(); !i.IsDone(); i.Next() ) {
        i.CurrentItem()-&gt;Update();
  }
}
</pre>
<h4><a name="02e6_00ef"><a name="02e6_00f0"><a name="02e6_00f0">Listing Three</h4><pre>
class Timer : public Subject {
public:
    Timer();
    virtual void Tick();
    long CurrentTime()
const;
private:
    long _currentTime;
}
void Timer::Tick() 
{
   _currentTime++;
   Notify();
}
</pre>
<h4><a name="02e6_00f1"><a name="02e6_00f2"><a name="02e6_00f2">Listing Four</h4><pre>
class Observer {
public:
   virtual void Update() = 0;
protected:
   Observer();
};
class DigitalTimeDisplay : public Observer {
public:
   DigitalTimeDisplay(Timer*);
   virtual void Update();
void DisplayTime(long time);
private:
   Timer* _timer;
};
DigitalTimeDisplay::DigitalTimeDisplay(Timer* t) : _timer(t) 
{
}
void DigitalTimeDisplay::Update() 
{
   DisplayTime( _timer-&gt;CurrentTime() );
}
</pre>
<h4><a name="02e6_00f3"><a name="02e6_00f4"><a name="02e6_00f4">Listing Five</h4><pre>
class AnalogTimeDisplay : public Observer {
public:
   AnalogTimeDisplay(Timer*);
   virtual void Update();
   void DisplayTime(long time);
private:
   Timer* _timer;
};
AnalogTimeDisplay::AnalogTimeDisplay(Timer* t) : _timer(t) 
{
}
void AnalogTimeDisplay::Update() 
{
   DisplayTime( _timer-&gt;CurrentTime() );
}
</pre>
<h4><a name="02e6_00f5"><a name="02e6_00f6"><a name="02e6_00f6">Listing Six</h4><pre>
class TimerObserver {
public:
   virtual void Update(long) = 0;
protected:
   TimerObserver();
};
</pre>
<h4><a name="02e6_00f7"><a name="02e6_00f8"><a name="02e6_00f8">Listing Seven</h4><pre>
void TimerSubject::Notify (long time)
{
    ListIterator&lt;TimerObserver*&gt; i(_observers);
    for (i.First(); !i.IsDone(); i.Next() ) {
        i.CurrentItem()-&gt;Update(time);
    }
}
</pre>
<h4><a name="02e6_00f9"><a name="02e6_00fa"><a name="02e6_00fa">Listing Eight</h4><pre>
class AlarmedTimer : public Timer {
public:
   AlarmedTimer();
   virtual void Tick();
   long AlarmTime();
   bool AlarmSet();
private:
   long _alarmTime;
   bool _alarm;
};
AlarmedTimer::AlarmedTimer() 
   : _alarmTime(0), _alarm(false) 
{
}
void AlarmedTimer::Tick() 
{
   Timer::Tick();
   if ( CurrentTime() == _alarmTime ) {
       _alarm = true;
   } else {
      _alarm = false;
   }
}
</pre>
<h4><a name="02e6_00fb"><a name="02e6_00fc"><a name="02e6_00fc">Listing Nine</h4><pre>
class Subject {
   //...
   void Notify(int aspect);
  //...
};
</pre>
<h4><a name="02e6_00fd"><a name="02e6_00fe"><a name="02e6_00fe">Listing Ten</h4><pre>
class Timer: public Subject {
public:
   //...
   static const int ASPECT_SECONDS;
   static const int ASPECT_MINUTES;
   static const int ASPECT_HOURS;
   //...
   int Seconds() const;
   int Minutes() const;
   int Hours() const;
private:
   int _seconds;
   int _minutes;
   int _hours;
};
void Timer::Tick() 
{
   _seconds = ++_seconds % 60;
   Notify(ASPECT_SECONDS);
   if ( _seconds == 0 ) {
       _minutes = ++_minutes % 60;
       Notify(ASPECT_MINUTES);
   }
   if ( _seconds ==0 &amp;&amp; _minutes == 0 ) {
      _hours = ++_hours % 24;
      Notify(ASPECT_HOURS);
   }
}
</pre>
<h4><a name="02e6_00ff"><a name="02e6_0100"><a name="02e6_0100">Listing Eleven</h4><pre>
class AnalogTimeDisplay : public Observer {
public:
   AnalogTimeDisplay(Timer*);
   virtual void Update(int aspect);
   void DisplayTime(long time);
private:
   Timer* _timer;
};
void AnalogTimeDisplay::Update(int aspect) 
{
   if (aspect == Timer::ASPECT_SECONDS)
        // update second hand ...
   else if (aspect == Timer::ASPECT_MINUTES)
       // update minute hand ...
   else if (aspect == Timer::ASPECT_HOURS)
      // update hour hand ...
   else
      // full update
}
</pre>
<h4><a name="02e6_0101"><a name="02e6_0102"><a name="02e6_0102">Listing Twelve</h4><pre>
class Timer {
public:
   virtual void Tick();
   long CurrentTime() const; 
private:
   long _currentTime;
};
void Timer::Tick() 
{
   _currentTime++;
}
</pre>
<h4><a name="02e6_0103"><a name="02e6_0104"><a name="02e6_0104">Listing Thirteen</h4><pre>
class TimerDecorator : public Timer, public Subject {
public:
   TimerDecorator(Timer*);
   virtual void Tick();
private:
   Timer* _timer;
};
</pre>
<h4><a name="02e6_0105"><a name="02e6_0106"><a name="02e6_0106">Listing Fourteen</h4><pre>
void TimerDecorator::Tick () 
{
  _timer-&gt;Tick();
  Notify();
}
</pre>

<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
