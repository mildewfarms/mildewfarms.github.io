<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>SP95: SOFTWARE AND THE LAW</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>SOFTWARE AND THE LAW<a name="02e4_00e1"><a name="02e4_00df"><a name="02e4_0000"></h1><P>
<h2>Patents: Best Protection for Software Today?</h2><P>
<h3>Marc E. Brown</h3><P>
<p><i><a name="02e4_00e0"><a name="02e4_0000">Marc is a patent attorney and shareholder of the intellectual-property law firm of Poms, Smith, Lande &amp; Rose in Los Angeles, CA. Marc specializes in computer law and can be contacted on CompuServe at 73414,1226.</i></p><hr><P>
Patents and software used to be words that were not spoken of together. Today, that's changing--and fast. Recent court decisions have expanded the availability of patents for software. Furthermore, the U.S. Patent Office has just gotten in line by issuing new proposed guidelines for the examination of &quot;computer-implemented&quot; inventions. The procedures for enforcing software patents are also being trimmed down to make them less expensive and faster.<P>
At the same time, other forms of legal protection for software are becoming less attractive. Copyrights provide only limited protection. This is known only too well to Lotus, which recently was told by an appellate court that the copyrights on its famous 1-2-3 spreadsheet program do not bar Borland from copying the entire 1-2-3 menu tree. Trade-secret protection is also often lost inadvertently, particularly with publicly distributed software.<P>
Unless you are planning to develop your software in a cave during the next decade, therefore, you need to be able to determine when software can be patented, how to patent it, and how to deal with patent-infringement allegations. Let's begin by taking take a look at three tests for patentability.<P>
<h3><a name="02e4_00e2">Statutory Subject Matter<a name="02e4_00e2"></h3><P>
I usually like to leave out the legal jargon in my column. But if you want to be knowledgeable in this area, remember the phrase &quot;Statutory subject matter.&quot; This concept addresses whether the &quot;subject matter&quot; of the invention is listed in the &quot;statute&quot; (35 U.S.C. section 101) that defines the types of inventions entitled to a patent. It is this requirement that has developed into an impediment to software patents. <P>
This statute states that a patent may be obtained on &quot;any new and useful process, machine, manufacture, or composition of matter, or any new and useful improvement thereof....&quot; Software clearly falls within at least one of these broad areas. Nevertheless, the U.S. Supreme Court refused a patent on a software-driven process for converting a BCD number into pure binary. In its 1972 decision of <I>Gottschalk v. Benson</I>, the Court said that a patent could not be obtained on &quot;laws of nature, physical phenomena and abstract ideas.&quot; <P>
Again in 1978, the Supreme Court refused to issue a software-related patent, this time on a method of updating numerical alarm limits using a computer. In <I>Parker v. Flook</I>, the Court expressed concern that such a patent consisted merely of a new formula and the computer that implemented it.<P>
But in 1981, the Supreme Court changed tacks. In <I>Diamond v. Diehr,</I> the Court approved a patent on a process for curing rubber that implemented a well-known mathematical equation (the Arrhenius equation) in a computer to calculate optimum cure time. Although the Court reiterated that laws of nature, natural phenomena, and abstract ideas are not patentable, it said that a patent could be granted on a practical application of a concept, even if it included a programmed, digital computer.<P>
At about the same time, Congress created a new court to handle all appeals in patent cases. It is called the &quot;United States Court of Appeals for the Federal Circuit.&quot; In a series of recent decisions, the Federal Circuit has made clear that patents may be granted on a broad variety of inventions containing software.<P>
Perhaps most important is its 1994 decision in <I>In Re Alappat</I>. <I>Alappat</I> involved a software program that implemented a series of algorithms to clarify the picture that is displayed on an oscilloscope. In support of its conclusion that such an invention was &quot;statutory,&quot; the Federal Circuit stated that the invention was &quot;not a disembodied mathematical concept..., but rather a specific machine to produce a concrete and tangible result.&quot; The court noted that &quot;a general-purpose computer in effect becomes a special purpose computer once it is programmed to perform particular functions pursuant to instructions from program software....&quot;<P>
About two weeks later in <I>In Re Warmerdam</I>, the Federal Circuit ruled that a patent could be issued in connection with an algorithm that created a data structure that controlled moving objects, such as robots, so that they would not collide with other objects.<P>
On July 31, 1995, the U.S. Patent and Trademark Office followed suit by issuing proposed guidelines for &quot;computer-implemented&quot; inventions. &quot;These guidelines respond to recent changes in the law that govern the patentability of computer-implemented inventions,&quot; the Office said. The proposed guidelines essentially provided that all software-related inventions constitute patentable subject matter, except when the invention falls within one of the following categories:<P>
<UL>
<li>A compilation or arrangement of data, independent of any physical elements.</li>
<li>A known, machine-readable storage medium encoded with data representing creative or artistic expression (for example, a work of music, art, or literature).</li>
<li>A &quot;data structure&quot; independent of any physical element (that is, not as implemented on a physical component of a computer such as a computer-readable memory to render that component capable of causing a computer to operate in a particular manner).</li>
<li>A process that does nothing more than manipulate abstract ideas or concepts (for example, a process consisting solely of the steps one would follow in solving a mathematical problem).</li>
</UL>
Significantly, none of the excluded categories appear to embrace a general-purpose computer running a software program. Does this mean that all software can be patented by simply claiming a general-purpose computer running the new software program? The proposed guidelines appear to address this question in the following way:<P>
<cite>[I]n rare situations, a claim classified as a statutory machine or article of manufacture may define nonstatutory subject matter. Nonstatutory subject matter (i.e., abstract ideas, laws of nature, and natural phenomena) does not become statutory merely through a different form of claim presentation.</cite><P>
<cite>Such a claim will (a) define the &quot;invention&quot; not through characteristics of the machine or article of manufacture claimed but exclusively in terms of a nonstatutory process that is to be performed on or using that machine or article of manufacture, and (b) encompass any product in the stated class (e.g., computer, computer-readable memory) configured in any manner to perform that process.</cite><P>
To avoid this exclusion, it seems as though the invention must be defined &quot;through characteristics of the machine or article of manufacture claimed.&quot; But what does this mean? Is this different from the second requirement that the invention not &quot;encompass any product in the stated class?&quot; I really don't know! But I do know that the guidelines are intended to conform the practices of the Patent Office with the more liberal views of the courts. If the guidelines are interpreted to preclude patents on all general-purpose computers running new software, that goal seemingly will not be reached.<P>
These guidelines may already have been clarified by the time you read this column. They were issued in June of this year for &quot;public comment.&quot; Final guidelines were promised for July 31, 1995. Check my next column for an update.<P>
<h3><a name="02e4_00e3">Novelty<a name="02e4_00e3"></h3><P>
The second requirement for a patent is that the invention be &quot;novel.&quot; This is usually a very easy test to pass. It simply means that the invention is <I>in some way new</I>. Any distinction whatsoever from what was done before is sufficient.<P>
An invention's &quot;novelty&quot; is usually lost in the United States if an application for patent is not filed within one year after certain activity has begun. (Many foreign countries have no such grace period.) <P>
Three major types of activity usually start the one-year clock.<P>
<UL>
<li>When a product embodying the invention is offered for sale by anyone, even someone other than the inventor. The offer need not result in an actual sale. </li>
<li>When the invention is described in a &quot;printed publication.&quot; There is no requirement that the publication be widely distributed. Indeed, papers distributed at conferences are usually sufficient.</li>
<li>When the invention is used for its intended purpose in a nonexperimental environment. If you invent a superior database system and allow your spouse to use it to manage the groceries, you had better start the one-year clock. Even your own use of the invention can start the clock running. The clock will usually not begin while the primary purpose of the use is to determine whether the invention works.</li>
</UL>
<h3><a name="02e4_00e4">Nonobviousness <a name="02e4_00e4"></h3><P>
The third requirement for obtaining a patent is that the invention not be &quot;obvious&quot; in view of what has been done before. This is the <I>only</I> qualitative test that is applied.<P>
&quot;Nonobviousness&quot; does not mean that the software has to be great or achieve a remarkable result. It merely means that the underlying concepts of the software are not obvious in view of what was known before.<P>
Most software is simply combinations of previously known routines. In determining &quot;obviousness,&quot; therefore, the real question is whether it would have been obvious to have combined these routines to make the software.<P>
The determination of &quot;obviousness&quot; is necessarily subjective. But several objective factors will be considered:<P>
<UL>
<li>The art taught away from the approach that the software took. </li>
<li>Widespread efforts to obtain the benefits of the software were previously unsuccessful.</li>
<li>The software has received widespread recognition.</li>
<li>The software achieves new and unexpected results.</li>
<li>The software has been a commercial success.</li>
<li>Nothing in the prior art suggests combining the routines contained in the software.</li>
</UL>
<h3><a name="02e4_00e5">The Patent-Application Process<a name="02e4_00e5"></h3><P>
The first step in patenting your software is to document it by preparing block diagrams, flowcharts, specifications, data-structure maps, screen layouts, and the like. While source code is obviously the most precise formulation of the software, it is usually not perfected until well after the software is conceived. Also, it does not usually communicate the broad concepts implemented by the software.<P>
It's wise to corroborate the date on which the documentation was prepared. At the very least, it should be signed and dated by the developer. It is also good practice to have people not involved with the development read, date, and sign the documentation. Above each signature, the document should state that the witness has read and understood the information, as well as the number of pages it contains. It is also a good idea to keep a bound invention notebook and to date each new entry.<P>
A patentability search is usually performed next. Although not required by law, it is very useful, as it may reveal that the software is not sufficiently different from previous work to justify the expense of a patent. Even when you are sure about the distinctiveness of your new software, knowledge of the closest prior art will help to frame the patent application in the broadest possible way.<P>
The next step is to prepare the application. A patent application usually contains drawings, a written description of the invention, and a set of &quot;claims&quot; (English descriptions of the invention's elements). You are not required to build a working model of your invention before filing the application.<P>
Unless you have considerable experience with patents, it is unlikely that you will be able to prepare the application yourself. Normally, applications are prepared by a patent attorney or patent agent, both of whom must first pass a proficiency test. But, you can do certain things to assist in its preparation:<P>
<UL>
<li>You are legally bound to provide the attorney or agent with copies or a description of the closest prior art of which you are aware.</li>
<li>Identify the specific differences--steps, components, results--between your software and the prior art.</li>
<li>Disclose the &quot;best mode&quot; you are aware of for implementing your invention. If you don't disclose certain features with the thought of keeping them secret and this is later discovered, your patent will be declared invalid. For marketed software this is usually easy to prove. To easily satisfy the &quot;best mode&quot; requirement, provide the Patent Office with a complete copy of your source code. If this makes you feel uneasy, a patent may not be for you!</li>
<li>Include sufficient information to enable a person of ordinary skill in the art to which your invention pertains to make and use the invention without undue experimentation. Submitting the source code will often fulfill this requirement, too. The more detail, the better. The only downside is the cost of documenting such detail.</li>
</UL>
After your application is filed, it will be assigned to a Patent Office &quot;examiner&quot;--a person knowledgeable in the field of your invention and in the principles of patent law.<P>
Approximately six months to a year after the application is filed, you will receive an &quot;office action,&quot; a written response to your application from the Patent Office examiner. The office action will either allow your application or explain why it is being rejected.<P>
Rejected applications may be amended  to try and overcome the grounds of rejection.Alternatively, you can argue that the rejection is unjustified.<P>
A second rejection is usually final. You will usually have to pay an additional fee  to submit further amendments or arguments. You can also appeal the examiner's final rejection to the Board of Patent Appeals and, as thereafter necessary, to the federal courts.<P>
<h3><a name="02e4_00e6">Enforcement<a name="02e4_00e6"></h3><P>
The first step in enforcing a patent is to determine whether the software of the accused party is infringing.<P>
Those unfamiliar with patent law usually don't make this determination correctly. Inventors often feel that there is an infringement when the competing software incorporates features described in the patent. Accused infringers, on the other hand, often conclude that there is no infringement because their software does not contain <I>every</I> feature described in the patent.<P>
Neither approach is correct. The drawings and detailed descriptions in a patent are usually merely examples of the invention, not the invention itself. Not utilizing every feature in an example does not necessarily avoid infringement. Conversely, using a few of the features does not necessarily imply infringement.<P>
The true test of infringement is whether the software in question contains every feature documented in any single claim at the end of the patent. This is the rule: A patent is infringed when the software in question contains every element recited in any single patent claim.<P>
When determining the scope of each element, the words describing it should be given their ordinary meaning in the art, except when a contrary meaning is expressed in the patent. The words should also be given their broadest reasonable meaning, not restricted to the specific examples described in the patent.<P>
In three circumstances, an infringement will be found, even if the infringer's software does not contain all of the claim's elements.<P>
<UL>
<li>The software contains the equivalent of each missing element, usually a corresponding element that performs substantially the same function in substantially the same way, to achieve substantially the same result. The precise reach of this &quot;doctrine of equivalents&quot; is expected to be the subject of a decision by the Federal Circuit in <I>In Re Hilton</I>.</li>
<li>The missing elements are found in the computer system in which the infringer's software is installed. If the software has no substantial use other than in a system that infringes the patent claim, the person making or selling the software will usually be liable as a &quot;contributory infringer.&quot;</li>
<li>The accused infringer did not actually commit the infringement, but encouraged the person who did by distributing promotional material or product manuals that promote the software as useful in a configuration that infringes the patent claim. This is known as &quot;inducing infringement.&quot; An officer or employee of a company who actively participates in infringing activity of that company can also be held personally liable under this theory.</li>
</UL>
Charges of infringement should be made carefully, as they give the alleged infringer the right to sue the person charging infringement for a &quot;declaratory judgment&quot; that the patent is not infringed or is not enforceable. Unless defended at typically great expense, the patent could be lost.<P>
It is particularly risky to charge customers of a manufacturer with infringement. If the claim turns out to be unmeritorious, the person charging infringement can be exposed to counterclaims for libel, slander, disparagement, interference with contract, and violation of the antitrust laws.<P>
Responding to a charge of patent infringement requires even greater care. All too often, the accused infringer denies the infringement allegation without having the allegation analyzed by a competent patent attorney. Be warned: A company that continues infringing activity without having first received a favorable legal opinion will often be assessed treble damages and attorney's fees if it loses the case.<P>
Patent litigation has traditionally been very expensive, but this may also be changing. The Federal Circuit just held in <I>Markman v. Westview Investments</I> that disputes over the scope of a patent should be determined by a judge, not a jury. Thus, many cases will now be resolved far short of an expensive jury trial.<P>
The right to a jury trial in patent cases is also now being questioned. In <I>American Airlines v. Lockwood</I>, the Supreme Court has agreed to decide whether the U.S. Constitution gives an alleged infringer a right to a jury trial. Abolishing jury trials in patent cases entirely would result in additional savings. <P>
In many cases, the alleged infringer is aware of prior art that is closer to the invention than that which the Patent Office knew about when it was issued. He may then challenge the validity of the patent, arguing that the invention was &quot;obvious.&quot; Although this can be done in court, it also can often be done in a separate Petition for Reexamination in the Patent Office. Seeking reexamination of the patent in the Patent Office is far less expensive than court litigation. Unfortunately, the alleged infringer is usually not permitted to participate during reexamination. Therefore, alleged infringers who have the financial resources often opt to have their invalidity allegation determined by a court.<P>
<h3><a name="02e4_00e7">Conclusion<a name="02e4_00e7"></h3><P>
Considerable dispute continues over the type of software entitled to a patent. While some are arguing, others are applying for and receiving software patents.<P>
Don't be left behind! And remember, software can be simultaneously protected by a patent and a copyright. Indeed, until the patent is granted (typically, not until at least a year after the application is filed), the software can also be protected as a trade secret.<P>

<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
