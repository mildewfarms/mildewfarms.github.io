<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>MAY95: ALGORITHM ALLEY</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>ALGORITHM ALLEY<a name="020c_009d"></h1><P>
<h2><a name="020c_009b"><a name="020c_0000">Constrained Optimization</h2><P>
<h3>Rainer Storn</h3><P>
<p><i><a name="020c_009c"><a name="020c_0000">Rainer, who studied at the University of Stuttgart, received his PhD for his dissertation, &quot;Algorithms and Architectures for the Discrete Fourier Transform for the Fast Convolution of Real-Valued Signals.&quot; Currently, he is a postdoctoral fellow at the International Computer Science Institute in Berkeley, CA and can be contacted at storn@icsi.berkeley.edu or rainer.storn@zfe.siemens.de.</i></p><hr><P>
Optimization problems appear in virtually every field of analysis, design, and production. For example, an electronic circuit contains numerous components (resistors, capacitors, and the like), the properties of which dither around a certain nominal value. This dithering is a direct result of the production process of these components and cannot be kept below a certain bound. Due to these imperfections, a certain percentage of electronic circuits don't meet the specifications. Here, the goal of optimization is to determine the nominal value of the critical components such that the production yield is maximized. <P>
Another example might involve a city wanting to set up a data network that connects the computer centers of many companies and universities. The budget to build such a data network may not exceed a certain amount and depends, among other factors, upon the topology of the network, the data load introduced by the different computer sites, and the capacity of the connecting lines. The goal in this case might be to maximize the throughput in the network and minimize the average delay of a message, given the budget constraints. <P>
Yet another example is an electric motor subjected to geometric constraints in order to fulfill certain company standards. There are some degrees of freedom to alter the shape of the ring magnet. Here, the goal is to alter the ring-magnet geometry in such a way that the efficiency of the motor is maximized.<P>
In all these examples, an optimum must be found while operating within certain constraints. These kinds of problems fall under the heading of &quot;constrained optimization.&quot; To optimize such problems using the computer, you must first formulate them mathematically. Many algorithms are capable of tackling constrained-optimization problems. Most require the problem to be formulated by means of an objective (or &quot;cost&quot;) function that has to be minimized. Objective functions are a playground for deterministic algorithms, which often make use of gradient computations. Such algorithms, however, run into problems if the objective function is nondifferentiable. Furthermore, they usually look for an improvement after each step they perform and hence are liable to get stuck in a local optimum. Apart from that, devising a good objective function can cause a lot of headaches, especially if you have more than one objective. <P>
For example, consider an integrated circuit for which both the power consumption and the signal delay have to be minimized. Minimizing the power consumption, however, often means minimizing the current, which in turn may increase the signal delay. In such a case, it is difficult to weight the different objectives properly. <P>
Other optimization problems don't have anything to minimize or to maximize. They merely look for a set of parameters that fulfill certain constraints. With such problems, an artificial objective function must be formulated; minimizing this artificial function fulfills the constraints. An example is the magnitude of the transfer function of an electronic filter, which has to fit inside a tolerance scheme but can adopt any shape inside the tolerance scheme. Contriving a good objective function is far from trivial and more often than not requires considerable expertise in the details of the optimization problem. But what if you are no expert and your boss still wants you to do the optimization? The algorithm I propose here doesn't require the formulation of an objective function. You just formulate the constraints that must not be violated (must-constraints) and the properties that have to be maximized or minimized (may-constraints). <P>
The algorithm is based on some new, as-yet-unpublished ideas. It belongs to the so-called Monte Carlo methods, which lavishly utilize random numbers. Due to the statistical nature of these methods, the chances are quite good for finding the global optimum, as opposed to getting stuck in a local one. The price is an enlarged computational effort in comparison to deterministic optimization procedures. In light of ever-increasing computing power, however, this disadvantage is vanishing for many practical problems. If large-scale optimization problems have to be dealt with, it is advantageous to distribute the calculations among many computers; an example is a high-speed computer network, to which the proposed optimization algorithm lends itself perfectly.<P>
<h3><a name="020c_009e">The Optimization Principle<a name="020c_009e"></h3><P>
Consider a system with <I>n</I> parameters, <I>p<SUB>1</SUB></I>, <I>p<SUB>2</SUB></I>, ..., <I>p<SUB>n</SUB></I>, which influence whether the system meets its imposed requirements. The parameters <I>p<SUB>i</SUB></I> can be interpreted as the elements of an <I>n</I>-dimensional parameter vector <U>P</U>. If the parameters are chosen appropriately, the system will meet the requirements, which can be visualized as the parameter vector <U>P</U> pointing inside a &quot;region of acceptability&quot; (ROA) in the parameter space. This scenario is illustrated in Figures <a href="1995020e.htm">1</A> and <a href="1995020f.htm">2</A> for an example with two parameters.<P>
In <a href="19950210.htm">Figure 1</A>, the shaded areas constitute the must-constraints. The function <I>f(x,p1,p2)</I> is not allowed to run through, let alone touch, those areas. Choosing the parameters <I>p1=p11</I> and <I>p2=p21</I> makes the function fulfill the constraints. If you choose <I>p1=p10</I> and <I>p2=p20</I>, the function violates the constraints. A may-constraint could be the requirement of <I>f(x,p1,p2)</I> to be as linear as possible for <I>x</I> in the range from 0 to 15000. For the sake of simplicity, I'll disregard may-constraints for the moment. The situation in <a href="19950211.htm">Figure 1</A> can also be viewed in the parameter space defined by the coordinates <I>p1</I> and <I>p2</I> in <a href="19950212.htm">Figure 2</A>. The ROA in <a href="19950213.htm">Figure 2</A> corresponds to the blank area in <a href="19950214.htm">Figure 1</A>. The parameter vector <I>(p10,p20)</I> causes the function in <a href="19950215.htm">Figure 1</A> to violate the imposed constraints (the ROA is not hit). The parameter vector <I>(p11,p21)</I> causes the function in <a href="19950216.htm">Figure 1</A> to satisfy the imposed constraints (ROA is hit). If <I>f(x,p1,p2)</I> fulfills the constraints, the parameter vector <U>P</U><I>=(p1,p2)</I> lies inside the ROA. If <I>f(x,p1,p2)</I> violates the constraints, the parameter vector is located outside the ROA.<P>
The ROA of a system can be quite complicated and usually isn't known in advance. If it were, it would be trivial to choose the right parameter values for the dimensioning of the system. The optimization process can be interpreted as a way of finding a parameter vector, <U>P</U>, which lies inside the ROA. The task now is to estimate (at least parts of) the ROA's shape by producing a cloud of statistically distributed parameter vectors in the neighborhood of your starting (or &quot;nominal&quot;) vector. Vectors which hit the ROA provide the desired estimate of the ROA's shape (at least partly); see <a href="19950217.htm">Figure 3</A>.<P>
Initially, the vector may be so far from pointing anywhere near the ROA that even hours of computing time will not produce a hit. To escape this trap, you initially relax the constraints just enough to allow your nominal vector to meet them. Now, Gaussian, distributed, random deviations from the nominal vector are generated. They produce a cloud of new parameter vectors that gather around the nominal vector, as in <a href="19950218.htm">Figure 3</A>.<P>
The algorithm I'm proposing tries to generate <I>3*dim</I> hits when <I>dim</I> parameters make up a parameter vector (in our example, <I>dim=2</I>). If this can't be achieved, the current iteration will stop after <I>mxvecs</I> tries. Setting <I>mxvecs=20*dim</I> is a reasonable starting point. If the optimization gets stuck in a local optimum or no hits are found, increase <I>mxvecs</I>. At the end of an iteration the mean value of the hit vectors is calculated and defined to be the new nominal vector for the next iteration. Before the next iteration is started, the constraints are tightened, but only to the point that the new nominal vector lies on the rim of the new ROA. The optimization algorithm continues with this mechanism until the original constraints are met. The entire optimization process will be accompanied by a successive shrinking of the ROA; see <a href="19950219.htm">Figure 4</A>. Note that the ROA need not maintain its general shape, as might be suggested by <a href="1995021a.htm">Figure 4</A>. In fact, the shape can change significantly, and this sometimes hinders the algorithm in finding the desired optimum.<P>
Although the idea behind the proposed optimization procedure is fairly simple, you need a bag of tricks to make it actually work. A central problem is finding the proper standard deviations to drive your multivariate, Gaussian, random-number generator. It is good to start the program with large standard deviations; for example, three times the corresponding parameter value itself (unless the value is 0, of course). During an iteration of the optimization process, the maximum distances in each coordinate direction between the current nominal vector and the hit vectors have yielded good values for the standard deviations of the next iteration. In Monte Carlo optimization, a major issue is preventing the standard deviations from becoming too small. Otherwise, the program will run into the next-best local optimum as quickly as it can. Therefore, my proposed algorithm tries to increase the maximum deviations by reusing the difference vector of the nominal vector and a hit vector. Such a &quot;successful&quot; difference vector is applied as often as possible--as long as new hits can be generated. At the first occurrence of a no-hit, the mechanism stops and the maximum deviation in each coordinate direction is evaluated. The reusage strategy shown in <a href="1995021b.htm">Figure 5</A> is implemented via a linear-search strategy (an input-file that illustrates this is available electronically; see &quot;Availability,&quot; page 3). Of course, the search strategy could be improved to get closer to the rim of the ROA faster, but this has been left out of the current implementation for the sake of simplicity.<P>
Although the standard deviations should remain large enough to increase the chance of leaving local optima, the algorithm will produce no hit at all if the deviations are too large. Hence if no hit occurs, the standard deviations are reduced by a factor of 0.7 for the next iteration. The factor 0.7 is not mandatory; you can experiment with it. <P>
On one hand, the control strategy just described helps the program reduce its standard deviations when it has to ooze through a narrow valley of the ROA. On the other hand, the strategy expands them again when the valley has been passed. It is this control strategy that is new, at least compared to existing Monte Carlo optimization methods; control is crucial for the robustness of the algorithm.<P>
There are other pitfalls to be considered. The larger the problem size (that is, the more parameters you want to include in your optimization), the more difficult it becomes to generate hits because there are so many different vectors to choose from. To alleviate this general problem, it helps to keep a record of successful search directions from the current iteration. These directions are the first ones to be tested in a new iteration before the random-number generator takes over. This assumes that the shape of the ROA doesn't change too much from one iteration to the next; hence, the desired number of hits can be generated faster by &quot;looking into the right direction.&quot; In fact, this assumption has turned out to be true in many cases.<P>
Now let's look at must-constraints and may-constraints. Try to meet your must-constraints first. After that you can start to work on the may-constraints while maintaining the must-constraints. There is a little problem concerning the criterion for making the whole optimization come to an end. If the nominal vector doesn't change much over several iterations, you could stop the program. This, however, can result in aborting the optimization during a stagnation phase. A sure-fire criterion is to stop the program after a prescribed maximum amount of iterations and see if you are satisfied with the results. But then you might be satisfied with results that could have been surpassed significantly had you just waited long enough. As a third variant, you could set up a fixed goal for the may-constraints and stop when this goal is reached. However, you often don't know whether this goal can be reached at all. Maybe it's impossible to satisfy even the must-constraints. From the previous discussion, it is clear that each criterion has its drawbacks. As a compromise, the last two criteria are implemented in <a href="#020c_00a3">Listing One</A> , leaving the decision up to you whether you go for one or more restarts to improve your results.<P>
<h3><a name="020c_009f">Examples<a name="020c_009f"></h3><P>
I'll now examine some practical examples, starting with one taken from electronic-filter theory. Consider a polynomial <I>p(x)</I> of degree 4 that must fit the tolerance scheme in <a href="1995021c.htm">Figure 6</A> such that the polynomial does not run through any parts of the shaded area. The polynomial itself can take on arbitrary shapes inside the tolerance scheme, which makes the whole problem exhibit only must-constraints but no may-constraints. An arbitrary starting solution for <I>p(x) </I>is <I>p0(x)=1.0+1.0*x+0.2*x<SUP>2</SUP>+0.0*x<SUP>3</SUP>+0.0*x<SUP>4</SUP></I> (which, by the way, is not a &quot;solution&quot; because it violates the tolerance scheme). After several iterations, the statistical-optimization program arrives at the true solution, which can also be seen in <a href="1995021d.htm">Figure 6</A>.<P>
Now consider an example from operations research, which uses the variables <I>x</I> and <I>y</I> with the constraints: maximize <I>x+y </I>while keeping <I>(x-3)<SUP>2</SUP>+(y-2)<SUP>2</SUP><img src="lteq12.gif" alt="&lt;=">16 </I>and <I>x*y<img src="lteq12.gif" alt="&lt;=">14, </I>as well as <I>x,y&gt;0. </I>The maximization constitutes a may-constraint, while the others are must-constraints. The optimization should render the result <I>x=7 </I>and <I>y=2.</I><P>
In the next example (from computer science), the task is to approximate the function <I>f(x)=sin(x)</I> by a polynomial in the range <I>x</I> from 0 to <img src="pi12.gif" alt="pi">/2; see <a href="1995021e.htm">Figure 7</A>. The approximation should be equally good over the entire range of <I>x</I>. Because of speed requirements, the degree of the polynomial is restricted to 3. Most mathematicians will tell you to perform a Chebyshev instead of a Taylor approximation. In fact, you don't need to because the optimization finds the pertinent polynomial coefficients for you. The mean squared error (mse) taken at, say, 100 discrete points in the range <I>x</I> from 0 to <img src="pi12.gif" alt="pi">/2, provides a sensible measure for the quality of the curve fit. Actually, the mse is nothing but an objective function that one tries to minimize. Although our optimization algorithm doesn't need objective functions, it can deal with them by regarding them simply as a may-constraint. Since you usually don't know which value the may-constraint will take on when the global optimum has been found, it makes sense to choose a &quot;goal value&quot; for the may-constraint that can never be reached and to control the termination of the optimization via the number of allowed iterations.<P>
The last example is a capacity-assignment problem taken from computer networking. In <a href="1995021f.htm">Figure 8</A>, programmable concentrators in each of the five boroughs of New York City are to be connected to a large computer in lower Manhattan. Teletype terminals are in turn connected to the concentrators. Each terminal transmits at a rate of 100 bits per second (bps). Messages are, on the average, 1000 bits long and exhibit exponential length distribution. A typical terminal transmits a message on the average of once a minute according to a Poisson process. The number of terminals in each borough is: Bronx, 10; Brooklyn, 15; Manhattan, 20; Queens, 10; and Richmond, 5. Given that the minimum average time delay should not exceed 4 seconds, the task is to find the optimum capacity assignment for each link that yields minimum cost. The underlying cost function, <I>K</I>, is assumed to be the equation in <a href="19950220.htm">Example 1</A>(a), where <I>C<SUB>i</SUB></I> is the line capacity that connects site <I>i</I> with the central computer and <I>l<SUB>i</SUB></I> is the corresponding line length. The partial cost, <I>K<SUB>i</SUB></I>, is defined as <a href="19950221.htm">Example 1</A>(b) with <a href="19950222.htm">Example 1</A>(c) denoting the step function.<P>
The step functions in <I>K<SUB>i</SUB>(C<SUB>i</SUB>,l<SUB>i</SUB>) </I>model fixed costs, repeater costs that appear after 12 km of line length and a cost increase due to a change of the line type for line capacities greater than 400 bps. (Queuing is the basic theory required for solving this problem; see Schwartz's <I>Computer Communication Network Design and Analysis</I>.)<P>
There are many constraints in this nonlinear optimization problem--the <I>C<SUB>i</SUB> </I>and the queuing delays must all be positive, and the minimum average time delay must not exceed four seconds--which makes my proposed algorithm suitable. The result after rounding off to integer values is:<P>
<pre>C1=792 bps
C2=397 bps
C3=576 bps
C4=400 bps
C5=248 bps</pre><P>
<h3><a name="020c_00a0">The MCO.C Program <a name="020c_00a0"></h3><P>
<a href="#020c_00a3">Listing One</A> is an excerpt from mco.c, the program that implements the Monte Carlo optimization. While the complete program includes the functions <I>rnd_uni()</I>, <I>rnd_gauss()</I>, <I>accept()</I>, and <I>main()</I>, this excerpt illustrates only the <I>accept()</I> function, which describes your optimization problem and must be rewritten each time a new problem has to be solved. <I>rnd_uni()</I> is a basic random-number generator which yields equally distributed random numbers in the range between 0 and 1. <I>rnd_gauss()</I> makes use of <I>rnd_uni()</I> to construct a vector of <I>dim</I> elements with each element being a random number stemming from a Gaussian distribution with zero mean and unit standard deviation. Finally, the function <I>main()</I>, which performs the general optimization strategy, reads the input file and writes the results to the output file. <a href="#020c_00a4">Listing Two</A> is the input file for the filter design in <a href="19950223.htm">Figure 6</A>, while <a href="#020c_00a5">Listing Three</A> is the output file. The complete source code, executables, and sample data files are available electronically.<P>
The input file reads the variable <I>itermax</I>, which defines the maximum number of iterations. It also contains the variable <I>mxvecs</I>, which defines the maximum allowable number of parameter vectors to be generated in one iteration. As mentioned earlier, it is reasonable to choose <I>mxvecs=20*dim</I> as a default value with <I>dim</I> being the dimension of the parameter vector--the number of parameters that you want to consider in your optimization problem. <I>dim</I> is the third item in the input file, followed by the variable <I>reduct</I>, the factor by which all standard deviations are multiplied if no hit is achieved during the current iteration. The standard value of <I>reduct</I> is 0.7. The next items are the <I>dim</I> starting values of your initial parameter vector, followed by the <I>dim</I> corresponding standard deviations. There is no generic requirement for choosing those values except that the standard deviations shouldn't be set to 0. If the optimization problem is not too difficult, the program will find the solution from virtually any starting point. Nevertheless it helps to decrease computing time if the starting vector is as close as possible to the expected vector and if the standard deviations are not too small. Choose standard deviations in the range of the corresponding parameter values for sound initial operating conditions. To call the program, type: <I>mco &lt;input-file&gt; &lt;output-file&gt;.</I><P>
<h3><a name="020c_00a1">Conclusion<a name="020c_00a1"></h3><P>
The optimization program introduced here is suited for many constrained optimization problems. You just have to provide a mathematical formulation of your constraints, but you don't need to worry about devising an appropriate objective function. You can then let the program run and do the work for you. Of course, there are problems for which virtually no optimization strategy will find an easy answer; when the ROA consists of many disjunct islands, for instance. The only chance then is to try different starting vectors to find the optimum.<P>
<h3><a name="020c_00a2">References<a name="020c_00a2"></h3><P>
Lueder, E. <I>Optimization of Circuits with a Large Number of Parameters</I>. AE&Uuml;, Band 44, Heft 2, 1990.<P>
Kjellstrm, G. and L. Taxen. &quot;Stochastic Optimization in System Design.&quot; <I>IEEE Trans. CAS</I> (July 1981).<P>
Kreutzer, H. &quot;Entwurfszentrierung zur Erh&ouml;hung der Ausbeute und zur Verbesserung der Eigenschaften von Schaltungen.&quot; Dissertation, University of Stuttgart, 1984.<P>
Eckstein, T. &quot;Statistische Optimierung von Systemen mit einer hohen Zahl von Parametern.&quot; Dissertation, University of Stuttgart, 1989.<P>
Moebus, D. &quot;Algorithmen zur Optimierung von Schaltungen und zur L&ouml;sung nichtlinearer Differentialgleichungen.&quot; Dissertation, University of Stuttgart, 1989.<P>
Press, W.H. et al. <I>Numerical Recipes in C</I>. Cambridge: Cambridge University Press, 1992.<P>
Schwartz, M. <I>Computer Communication Network Design and Analysis</I>. Englewood Cliffs, NJ: Prentice Hall, 1977.<P>
<a href="19950224.htm">Figure 1</A>  The goal for function f(x,p1,p2) is to stay apart from the blue-shaded areas that constitute the must-constraints.
<a href="19950225.htm">Figure 2</A>  The situation in Figure 1 can also be viewed in the parameter space, the coordinates of which are p1 and p2.
<a href="19950226.htm">Figure 3</A>  Estimation of the ROA by a cloud of random parameter vectors which gather around the nominal vector.
<a href="19950227.htm">Figure 4</A>  With each iteration of the optimization process, the ROA shrinks until the final constraints are met.
<a href="19950228.htm">Figure 5</A>  The reusage of successful directions helps investigate the ROA more thoroughly and better estimate the standard deviations of your random-number generator.
<a href="19950229.htm">Figure 6</A>  Polynomial of degree 4 before and after optimization. 
<a href="1995022a.htm">Figure 7</A>  Best-fit approximation of f(x)=sin(x) in the interval [0, _/2] by a polynomial of the third degree.
<a href="1995022b.htm">Figure 8</A>  Topology of the data network in New York.
<a href="1995022c.htm">Example 1</A>  (a) Underlying cost of function K; (b) partial cost of Ki; (c) step function of 1(b).
<P>
<h4><a name="020c_00a3">Listing One <a name="020c_00a3"></h4><pre>

int accept(int dim,float par_vec[],int adapt,int *finish_ptr,
                                                float constraint[],int *nocont)
/**C*F************************************************************************
** SRC-FUNCTION   :accept()                                                 **
** LONG_NAME      :accept                                                   **
** AUTHOR         :Dr. Rainer Storn                                         **
** DESCRIPTION    :accept() tests whether a parameter vector par_vec[]      **
**                 falls into the region of acceptability (ROA). If it does **
**                 hit=1 is returned, otherwise hit=0.                      **
** FUNCTIONS      :none                                                     **
** GLOBALS        :none                                                     **
** PARAMETERS     :dim          number of vector elements.                  **
**                 par_vec[]    contains the vector with dim                **
**                              gaussian distributed variables.             **
**                 adapt        control variable.                           **
**                              0 : no adaptation of ROA                    **
**                              1 : adaptation of ROA permitted (shrinkage) **
**                              2 : adaptation of ROA permitted             **
**                                  (relaxation, expansion)                 **
**                 finish_ptr   indicates meeting of requirements.          **
**                              0 : goals not yet reached.                  **
**                              1 : goals has been reached.                 **
**                 constraint[] contains current constraints of ROA.        **
**                 *nocont      contains number of constraints.             **
** PRECONDITIONS  :par_vec[] must contain valid parameter vector.           **
** POSTCONDITIONS :Elements of constraint[] will probably be altered.       **
**                 nocont returns number of constraints to assist           **
**                 printing routine of main().                              **
***C*F*E**********************************************************************/
{
  int   hit, i, n;
  float goal[NARY], z0, z1, x, y;
/*------Set up constraints----------------------------------------------*/
/*------goal[0] : Maximum absolute value of polynomial for x ex [0,1]-----
--------goal[1] : Maximum absolute value of polynomial for x = +/- 1.2--*/
  goal[0] = 1.001;    /* must-constraint */
  goal[1] = 5.9;      /* must-constraint */
  *nocont = 2;        /* two constraints */
/*------Calculate function values and initializations-------------------*/
/*------Passband. Compute maximum magnitude of ordinate value.----------*/
  z0 = 0.;
  for (i=0; i&lt;=100; i++)
  {
    y = 0.0;
    x = -1.0 + (float)i/50;
    for (n=dim-1; n&gt;0; n=n-1)
      {
        y = (y + par_vec[n])*x;
      }
    y = y + par_vec[0];
    if (fabs(y) &gt; z0) z0 = fabs(y);  /* z0 contains maximum magnitude */
  }
/*--------Stopband. Compute ordinate value at the edges x = (+/- 1.2).--*/
/*--------Save the lowest ordinate value.-------------------------------*/
  y  = 0.0;
  x  = 1.2;
  for (n=dim-1; n&gt;0; n=n-1)
  {
    y = (y + par_vec[n])*x;
  }
  y = y + par_vec[0];
  z1 = y;
  y = 0.0;
  x = -1.2;
  for (n=dim-1; n&gt;0; n=n-1)
  {
    y = (y + par_vec[n])*x;
  }
  y = y + par_vec[0];
  if (y &lt; z1) z1 = y;
  hit  = 1;   /* Preset hit-flag to &quot;hit&quot; */
/*------Relax constraints if adapt equals 2.---------------------------------*/
  if (adapt == 2)
  {
    for (i=0; i&lt;=1; i++)  /* Initialize constraints to goal values */
    {
      constraint[i] = goal[i];
    }
/*--Relax must-constraints as required---------------------------------------*/
    if (z0 &gt; constraint[0]) constraint[0] = z0;
    if (z1 &lt; constraint[1]) constraint[1] = z1;
  }
  else if (adapt == 1)    /*--------adapt must-constraints (shrinkage)-------*/
  {
    if (z0 &lt;= constraint[0])
    {
      if (z0 &gt; goal[0]) constraint[0] = z0; /* adapt must-constraint only if */
      else constraint[0] = goal[0];           /* goal is not reached yet.    */
    }
    else
    {
      hit = 0;
    }
    if (z1 &gt;= constraint[1])              /* adapt must-constraint only if */
    {                                     /* goal is not reached yet.      */
      if (z1 &lt; goal[1]) constraint[1] = z1;
      else constraint[1] = goal[1];
    }
    else
    {
      hit = 0;
    }
  }
  else
  {
    if (z0 &gt; constraint[0]) hit = 0;
    if (z1 &lt; constraint[1]) hit = 0;
  }
  *finish_ptr = 0;
  if ((constraint[0] &lt;= goal[0]) &amp;&amp; (constraint[1] &gt;= goal[1])) *finish_ptr=1;
  return(hit);
}


</pre>
<h4><a name="020c_00a4">Listing Two<a name="020c_00a4"></h4><pre>

200
100
5
0.7
10.00000
10.00000
-6.00000
10.00000
80.00000
3.00100
3.00100
3.00100
3.00100
3.00100


</pre>
<h4><a name="020c_00a5">Listing Three<a name="020c_00a5"></h4><pre>

Iteration: 134
---------------
xnominal[0] = 0.993562
xnominal[1] = -0.043474
xnominal[2] = -7.870154
xnominal[3] = 0.050184
xnominal[4] = 7.859358
sigma[0]    = 0.012818
sigma[1]    = 0.009166
sigma[2]    = 0.035221
sigma[3]    = 0.014853
sigma[4]    = 0.040397
constraint[0]    = 1.001000
constraint[1]    = 5.900000
Number of random points = 100
Number of hits          = 3
Yield in percent        = 3.000000

</pre>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
