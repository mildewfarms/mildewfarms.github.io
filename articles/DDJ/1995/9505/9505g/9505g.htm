<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>MAY95: Bob as a Macro Processor Library</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Bob as a Macro Processor Library<a name="01f2_008d"></h1><P>
<h2><a name="01f2_008b"><a name="01f2_0000">Turning a tiny OO language into a macro language</h2><P>
<h3>Brett Dutton</h3><P>
<p><i><a name="01f2_008c"><a name="01f2_0000">Brett recently completed his studies at Queensland University of Technology in Brisbane, Australia. He now heads RAX Information Systems, a consulting firm specializing in application software, and can be contacted at bdutton@gil.ipswichcity.qld.gov.au.</i></p><hr><P>
How many applications have you written that have never needed modifications because of user demands, suggestions, or customization? Not many, I'll bet. Luckily, application macro languages give you and users a way of modifying and customizing the application without recompiling. <P>
Macro languages are user-programmable interfaces to applications. They allow users (and developers) to access internal functionality and to customize or extend the application. Macro languages are used in many applications, including emacs, AutoCAD, Brief, WordPerfect, Excel, and Lotus 1-2-3, to name a few.<P>
Besides adding the ability to customize, macro languages also provide benefits such as easy prototyping, automated testing, distribution of multiple configurations, smaller executables, better application design, and easier upgrades. <P>
I recently added a macro language to a Syntax Directed Text Editor (STex) as part of a project at Queensland University of Technology (QUT) in Brisbane, Australia. Since STex will be used by first-year undergraduates, many factors influenced the choice of macro language: ease of programming, ease of implementation, and consistency with the programming models supported by university teaching methods. <P>
Among the macro languages we considered were: <P>
<UL>
<li>XLisp. Originally written by David Betz and available on most archive sites, XLisp made the list because it has a proven track record with AutoCAD. However, Lisp is considered a little difficult for first-year undergraduates to understand. </li>
<li>ReXX. The scripting language for VM/CMS, OS/2, and Amiga, ReXX has implementations available on most platforms, and again, a proven track record. However, the project coordinator did not want to use ReXX.</li>
<li>Bob. Also written by David Betz and presented in <I>Dr. Dobb's Journal</I> (&quot;Your Own Tiny Object-Oriented Language,&quot; <I>DDJ</I>, September 1991), Bob is a readily available language with a C/C++ syntax implemented in ANSI C. The modularity concepts native to C/C++ made Bob particularly desirable to the university. That the language is object oriented was also a bonus. </li>
</UL>
<h3><a name="01f2_008e">Changes to Bob <a name="01f2_008e"></h3><P>
Bob was originally designed by David as a stand-alone interpreter. In 1994, it was extended into a language for building online conferencing systems (see &quot;An Online Conferencing System Construction Kit,&quot; by David Betz in <I>Dr. Dobb's Information Highway Sourcebook</I>, Winter 1994). Furthermore, David has since written a version of Bob that runs as a Windows DLL; see the accompanying text box entitled, &quot;Callable Bob.&quot; By adding an API to the original Bob, my extensions take a different course. However, to make my implementation of Bob complete, I had to modify the original code. This article focuses on the changes I made to the stand-alone Bob interpreter to turn it into a macro processor library, and on how you can use that library. The complete source code to the Bob macro processor library is available electronically; see &quot;Availability,&quot; page 3. For details on the Bob language and syntax, refer to David's 1991 article. <P>
Originally, Bob was only meant to be run once. One of my first changes was to make Bob reentrant. The ability to initialize on load-up lets you load up another file, which in turn will run another initialization, and so on. The position on the stack is now maintained by the call-return set of functions rather than set up on the first call.<P>
In addition, I provided remote function access by creating the new data type DT_RCODE for remote functions. Data values of this type are handled in the same way as strings, but are used to interface with application functions. The remote functions are available to Bob after they have been registered with the Bob API.<P>
Next I made the Bob macro processor its own process so that it works independently of the application. Communication with the interface is by socket communication. It uses two sockets: one error socket that interrupts processing; and a general socket for normal communication.<P>
To extend internal functionality, I extended the number of internal functions to include a useful subset of C functions; see <a href="#01f2_0094">Table 1</A>. <P>
I also added the ability to initialize on load-up by using a function of the same name as the file being loaded up. Finally, I maintained backward compatibility so that saying &quot;make Bob&quot; will build an executable that works as originally designed.<P>
<a href="199501f4.htm">Figure 1</A> represents a model of how the Bob macro processor library works. Although complicated, it is not necessary for you to fully understand it unless you would like to modify the Bob library. Luckily, my API hides all the complexity within a few functions.<P>
<h3><a name="01f2_008f">Bob API <a name="01f2_008f"></h3><P>
<a href="#01f2_0095">Listing One</A> is a sample application that demonstrates use of the Bob API. (The API itself is fully documented in the bob.h source file.) Although this particular example was written with the X Toolkit Intrinsics (Xt), you do not need an X Window-based system to use it. All of Bob's processing is done through the function <I>BobCheckClient</I>, which polls the Bob communications socket for traffic and processes any packets that have come through. It returns True if there is a packet to process, and False if not. In the Xt library, the function <I>XtAppAddInput</I> &quot;listens&quot; on a socket. Bob has a similar function, <I>BobBlockWait</I>, that can be passed a socket to listen on. <I>BobBlockWait</I> returns when traffic arrives on either the Bob comms socket or the passed socket.<P>
The power of Bob is in the external functions defined by the application. This application defines two functions (message and error), but unlimited external functions can be added. External function arguments are limited to three data types: <I>number</I>, <I>string</I>, and NIL. This limitation arises because the data-packet has only been made to transfer these data types across the socket.<P>
Because Bob is a typeless language, a variable is defined as a VALUE. It is up to the function to test the type of the values being passed to it and either coerce the value or reject it as an error.<P>
In examining <a href="#01f2_0095">Listing One</A>, note that:<P>
<UL>
<li><I>int BobInitialize (void)</I> initializes the Bob macro processor and returns either the socket on which to listen or --1 on failure.</li>
<li><I>int BobLoadFile (char *fname)</I> sends a request for Bob to load and compile a file. The filename is passed in <I>fname</I> and needs neither a suffix of .bob nor a path if it is in either the home directory or the path pointed to by the environment variable BOBLIB. Errors in the compilation are reported to <I>stderr</I>, and the processing stops. If the file loads successfully, Bob looks for the function of the same name as the file (illegal characters are replaced by underscores). If this function exists, it is executed and deleted upon completion. This function is considered the initialization function. </li>
<li><I>int BobAddFunction (char *fname,BobExternFunc func)</I> adds an external function to Bob. When that function is called by Bob or the application, the function will execute. The definition of <I>BobExternFunc</I> is <I>typedef int (*BobExternFunc)(int, VALUE *args, VALUE *etval);.</I> </li>
<li><I>int BobExecute (char *name,int cnt,_)</I> executes the passed function name, passing the arguments to the function. The argument list is in pairs, indicating the type of the argument and the value. The exception to this case is when NIL is passed. It has type only, no value. An example of running the <I>print</I> function with a number of arguments would be <I>BobExecute (&quot;print&quot;, 4, DT_ STRING, &quot;Hi&quot;, DT_INTEGER, 20, DT_NIL, DT_STRING, &quot; World\n&quot; );</I> and the result would be <I>Hi 20nil World</I>. </li>
<li><I>char *BobGetString (char *buf, int len, VALUE *val)</I> is a utility function to extract a string from a value. It is used in remote functions.</li>
<li><I>int BobGetInteger(VALUE *val)</I> is a utility function to extract the integer part of a VALUE. </li>
<li><I>int BobCheckClient(void)</I> polls the socket, checking if there is anything to read, and processes one waiting packet. If there are more packets, they will be ignored until the next call to <I>BobCheckClient</I>.</li>
<li><I>int BobExtArgs(int argc, int mn, int mx,VALUE *retval)</I> checks the number of passed arguments. <I>mn</I> is the minimum number of arguments that this function needs, while <I>mx</I> is the maximum. If there is no minimum number of arguments for the function, set <I>mn</I> to --1. If there is no maximum, set <I>mx</I> to --1. If <I>mn</I> or <I>mx</I> is set to --1, the external function must verify argument counts.</li>
<li><I>int BobExtCheckType(VALUE *arg, int type,VALUE*retval)</I> checks the type of the passed VALUE and handles or checks the type of arguments. </li>
<li><I>int BobReturnValue(VALUE *retval, int type,_</I>) returns a value to the function that invoked the Bob function call. The use of this function is similar to <I>BobExecute</I>. </li>
<li><I>int BobTalkTerm(void)</I> terminates the Bob macro processor. It's sufficient to simply exit, but using this function is a little cleaner. </li>
<li><I>int BobBreak(char *fmt,_)</I> sends a break signal to Bob. If Bob encounters a break, it stops any processing and returns to the <I>EventLoop</I>. This function is useful to break large, slow functions. Its arguments are the same as those for <I>sprintf</I>-type functions.</li>
<li><I>void BobBlockWait(int fd)</I> waits for activity on either the Bob sockets or on the passed socket and returns when activity is detected. None of the packets are processed. This function was originally used when the application was written using Xlib, and it was difficult to add a socket to the application. It was easier to have Bob keep an eye on the X socket and return if there was activity on the passed socket or on the Bob socket.</li>
</UL>
When you execute the program in <a href="#01f2_0095">Listing One</A> (its makefile is included with the complete source code), you'll be presented with a dialog box similar to <a href="199501f5.htm">Figure 2</A>. The Message dialog shows the output of the <I>External</I> function message defined in the application and registered with Bob using <I>BobAddFunction</I>. The Error dialog shows the output of the <I>External</I> function error, also defined in the application and registered with Bob using <I>BobAddFunction</I>. Every application should define an error function so that Bob has a place to display errors. The <I>Load</I> file dialog lets the user enter a filename, load the file, and execute the initialization function. Finally, the <I>Exec</I> function lets the user type in the function name to execute.<P>
When you start the example application, it will give you a list of functions to execute and files to load. Try these by typing them into the appropriate dialog box, then selecting OK (but don't press Return; the application isn't that smart).<P>
<h3><a name="01f2_0090">Limitations and Future Enhancements<a name="01f2_0090"></h3><P>
Bob is not without its limitations. For instance, it currently has limited memory. The memory size is defined by the macro <I>SMAX (Stack Max Size) </I>defined in bob.h but it could be changed to use virtual memory. Memory is currently statically allocated because of garbage collection requirements. <P>
Bob currently does not support floating-point arithmetic, although this could be implemented via classes. The internal functions are only a subset of C-type functions. It is possible to extend the number of internal functions, but it would be better if the Bob macro processor library stayed free from application-dependent code. The file bobfcn.c contains all the internal functions; see <a href="#01f2_0094">Table 1</A>. It may also be necessary in the future to extend the data types that external functions can handle. <P>
You can now link Bob into your applications and get all the benefits that a macro language provides.<P>
<h2>Callable Bob</h2><P>
<h3>David Betz</h3><P>
<cite>David is a DDJ contributing editor and can be contacted through the DDJ offices.</cite><P>
Last fall I presented a version of my Bob programming language that was extended to support an object store designed for use as the basis for building an online conferencing system (see &quot;An Online Conferencing System Construction Kit,&quot; <I>Dr. Dobb's Information Highway Sourcebook</I>, Winter 1994). While that Bob interpreter was easy to extend with additional built-in functions, it was essentially a stand-alone interpreter. Bob was the main program, and extensions were called as subroutines. This works well in many applications but falls short when trying to use Bob as an extension language for an existing application.<P>
To solve this problem, I recently designed a version of Bob that runs as a Windows DLL. Along the way, I separated Bob into several modules so that each could be used independently. The memory manager is now an independent module that can be used as the basis for other languages that need a heap with automatic garbage collection. I've also separated the Bob interpreter from the Bob compiler, since some applications only need to run already-compiled code. In fact, I've separated the run-time library from the rest of the interpreter so it is possible to run programs that only need the intrinsic functions without any library at all. To make things simpler, I've included all of these modules in the Bob DLL even though they are logically separate. The complete source code to this version of Bob is available electronically; see &quot;Availability,&quot; page 3.<P>
Windows DLLs have only a single data segment, even though several applications may be linked to them at the same time. This was a problem, since Bob had many global variables, most having to do with the memory manager. My first step in turning Bob into a callable library was to move all of the globals into context structures and add a parameter to every function to explicitly pass in the appropriate context. I created two context structures: the interpreter context, which contains the bytecode interpreter variables as well as the memory manager variables; and the compiler context, which contains the compiler and scanner variables. The compiler context also points to an interpreter context so that the compiler has access to the memory manager for creating objects.<P>
Passing the compiler and interpreter contexts into each function explicitly makes it possible to create more than one context at a time. This allows a multithreaded program to have multiple threads, all executing Bob programs independently. It also means several programs linked to the same Bob DLL can operate without interfering with each other.<P>
Now I'll show how to invoke the Bob DLL to create a simple <I>read</I>/<I>eval</I>/<I>print</I> loop for Bob expressions. First, it is necessary to create an interpreter context, as in <a href="#01f2_0091">Example 1(a)</A>. The first parameter is the size of the heap, and the second is the size of the stack. The second line sets up an error handler. Bob will call this error handler whenever an error occurs passing it an error code and relevant data.<P>
If you need access to the run-time library functions, that is arranged by <a href="#01f2_0091">Example 1(b)</A>. The second line sets up a handler that the interpreter will call to get the address of a function handler, given a function name. This is necessary when the interpreter restores a saved workspace because the saved workspace format on disk contains only the names of library functions, not their addresses. This allows saved workspaces to work correctly even after the DLL has been rebuilt, causing the function-handler addresses to change.<P>
It's now necessary to initialize the compiler, as in <a href="#01f2_0091">Example 1(c)</A>. This creates a compiler context with the specified interpreter context. The numeric parameters are the sizes of the compiler-bytecode staging buffer and the literal staging buffer.<P>
The Bob memory manager is a compacting, stop-and-copy garbage collector and can change the address of objects when a garbage collection occurs. Because of this, the memory manager must know about all variables that could contain a pointer to an object in the heap. The variables that the interpreter uses are contained within the interpreter context structure and can therefore be located by the memory manager. However, it is sometimes useful for a memory-manager client to maintain its own pointers into the heap. The Bob memory manager allows for this by providing the function <I>ProtectPointer</I> to register an object pointer with the memory manager. This registers the specified pointer with the memory manager and guarantees that its value is updated whenever the garbage collector moves the object it points to.<P>
This leaves the <I>read</I>/<I>eval</I>/<I>print</I> loop itself; see <a href="#01f2_0092">Example 2</A>. Bob does all of its I/O through &quot;streams.&quot; A stream is an object with some data and a pointer to a dispatch table. The dispatch table has pointers to handlers to carry out various stream operations. At the moment, there are handlers for getting and putting characters and a handler for closing the stream. The call to <I>CreateStringStream</I> creates a stream that allows the Bob compiler to read characters from the string. The interpreter context structure contains pointers to the standard I/O streams that must be set up by the client of the Bob DLL. These streams should arrange for characters to be read and written to the standard input and output of the application.<P>
The call to <I>CompileExpr</I> compiles a single Bob expression and returns a compiled function which, when called with no arguments, will cause the expression to be evaluated.<P>
<I>CallFunction</I> calls a function with arguments; see <a href="#01f2_0093">Example 3(a)</A>. The arguments after <I>argumentCount</I> are passed to the specified Bob function. They are of type <I>ObjectPtr</I> (a pointer to a Bob heap object), and <I>argumentCount</I> indicates their number. You can also call a Bob function by name, using <a href="#01f2_0093">Example 3(b)</A>. <P>
Of course, the Bob DLL has many other functions. It contains a full compliment of object-creation and access functions for creating and manipulating objects of type <I>ObjectPtr</I>, as well as functions to control the interpreter.<P>
This is just my first step in making Bob easier to embed in applications. I plan to extend the Bob language to support full function closures and optional arguments. I'll also add a &quot;fast load&quot; format for storing precompiled Bob code in disk files. This would make it possible to distribute Bob functions without including the source code, a necessary feature for using Bob to build commercial applications.<P>
<h4><a name="01f2_0091"><B>Example 1:</B> (a) Bob interpreter context; (b) accessing the run-time library functions; (c) initializing the compiler.<a name="01f2_0091"></h4><P>
<pre>(a) InterpreterContext *ic = NewInterpreterContext(16384,1024);
    ic-&gt;errorHandler = ErrorHandler;

(b) EnterLibrarySymbols(ic);
    ic-&gt;findFunctionHandler = FindLibraryFunctionHandler;

(c) CompilerContext *c = InitCompiler(ic,4096,256);

(d) ObjectPtr val;
    ProtectPointer(ic,&amp;val);</pre><P>
<h4><a name="01f2_0092"><B>Example 2:</B> The read/eval/print loop.<a name="01f2_0092"></h4><P>
<pre>for (;;) {
    printf(&quot;\nExpr&gt; &quot;);
    if (gets(lineBuffer)) {
        Stream *s = CreateStringStream(lineBuffer, strlen(lineBuffer));
        if (s) {
            val = CompileExpr(c,s);
            val = CallFunction(ic,val,0);
            printf(&quot;Value: &quot;);
            PrintValue(ic,val,ic-&gt;standardOutput);
            CloseStream(s) ;
        }
    }
    else
        break;
}</pre><P>
<h4><a name="01f2_0093"><B>Example 3:</B> Calling a Bob function (a) by reference; (b) by name. <a name="01f2_0093"></h4><P>
<pre>(a) ObjectPtr CallFunction(InterpreterContext ic, ObjectPtr function, int argumentCount,...);

(b) ObjectPtr CallFunctionByName(InterpreterContext ic, char *functionName, int argumentCount,...);</pre><P>
<a href="199501f6.htm">Figure 1</A>  How the Bob macro library works.
<a href="199501f7.htm">Figure 2</A>  Sample dialog box.
<h4><a name="01f2_0094"><B>Table 1:</B> Bob internal functions.<a name="01f2_0094"></h4><P>
<pre><b>Function                       Description   </b>
char chr (ascii_value);             Converts the ASCII value into a string.
string date_time ();                Returns the current date and time in
                                    the format &quot;Mon Nov 21 11:31:54 1983&quot;
string downcase (string);           Converts the passed string to lowercase.
string editcase (string);           Converts the passed string to edit case.
                                    Edit case is where the first character
                                    after a space is uppercase and the rest
                                    are lowercase.
val exec_function (fname[,arg1      Executes the passed function name with
                                    the arguments. The number of arguments
                                    must be consistent with the function
                                    that is being called. This function returns
                                    the value that the function would have
                                    returned.
int fclose (file);                  Closes the passed file.
file fopen (fname,mode);            Opens the passed file in the mode: r
                                    for read, w for write.
int gc ();                          Does a garbage collection.
int getc (file);                    Returns the next character from the file.
string getenv (envname);            Returns the string associated with passed
                                    environment variable name.
bool keyboard_quit ();              Stops the current processing. Returns NIL.
list list_functions ();             Returns a list (vector) of function names.
bool load_bob (filename);           Loads the Bob macro file. If the file
                                    is not available, then returns NIL.
                                    The file is not compiled into memory
                                    until the current function is processed.
string newstring (size);            Returns a blank string of the passed size.
vector newvector (size);            Returns a vector of the passed size.
bool nothing ();                    This function does nothing. It could be
                                    used for disabling key translations.
int print (val1 [,val2              Prints the passed values to stdout.
  [,...valn]]);
int putc (file,char);               Puts the passed character to the file.
int sizeof (value);                 Returns the number of elements in a
                                    vector or the length of a string,
                                    or 1 for any other type of value.
int str_to_nam (string);            Returns the passed string as a number.
int strchr (string,char);           Returns the position of char in
                                    string. If returns &lt; 0, then
                                    the string was not found.
int strlen (string);                Returns the length of the passed
                                    string. This is an alias for sizeof.
int strstr (string1,string2);       Returns the position of string2
                                    in string1. If &lt; 0 is returned, then
                                    the string was not found.
string substring                    Returns the substring starting at
  (string,start-pos,[len]);         the position pos for the length len.
                                    If the length arg is not there, then
                                    returns the rest of the string. Pos of
                                    0 is the beginning of the string.
int system (command);               Sends a command to the operating
                                    system. Returns the OS exit code.
string typeof (value);              Returns the type of the passed
                                    string, which is one of the following: 
                                    NIL, CLASS, OBJECT, VECTOR, INTEGER, 
                                    STRING, BYTECODE, CODE, DICTIONARY, VAR, FILE.
string upcase (string);             Converts the passed string to all uppercase.
string val_to_string (value);       Converts any value to the equivalent string
                                    and returns it.
string version ();                  Returns the current version string of Bob.</pre><P>
<P>
<h4><a name="01f2_0095">Listing One <a name="01f2_0095"></h4><pre>

/* example.c: Exemplifies the use of the Bob macro processor library
 * Copyright (c) 1994 Brett Dutton
 *** Revision History:  * 13-Dec-1994 Dutton      Initial coding
 */

/* Description: */
/* includes */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &quot;bob/bob.h&quot;
#include &lt;X11/Intrinsic.h&gt;
#include &lt;X11/StringDefs.h&gt;
#include &lt;X11/Xaw/Label.h&gt;
#include &lt;X11/Xaw/Command.h&gt;
#include &lt;X11/Xaw/Box.h&gt;
#include &lt;X11/Xaw/Dialog.h&gt;

/* macros */
#define APPNAME &quot;example&quot;
#define VERSION APPNAME &quot; 1.0 By Brett Dutton&quot;

/* typedefs */

/* prototypes */
void AppCheckBob ( XtPointer cl_data, int *fid, XtInputId *id );
void Quit ( Widget w, XtPointer cl_data, XtPointer call_data );
void Break ( Widget w, XtPointer cl_data, XtPointer call_data );
void LoadOk ( Widget w, XtPointer cl_data, XtPointer call_data );
void ExecuteOk ( Widget w, XtPointer cl_data, XtPointer call_data );
int Message ( int argc, VALUE *arg, VALUE *retval );
int Error ( int argc, VALUE *arg, VALUE *retval );
void ShowError ( char *msg );

/* variables */
/* these resources are usually external */
static String resources[] = {
    &quot;*example.width: 300&quot;,
    &quot;*example.height: 400&quot;,
    &quot;*quit*label: Quit&quot;,
    &quot;*break*label: Break&quot;,
    &quot;*Command*background: green&quot;,
    &quot;*message*label: Message:&quot;,
    &quot;*message*width: 275&quot;,
    &quot;*error*label: Error:&quot;,
    &quot;*error*width: 275&quot;,
    &quot;*value: &quot;,
    &quot;*load*label: Load file:&quot;,
    &quot;*load*loadok*label: Ok&quot;,
    &quot;*load*width: 275&quot;,
    &quot;*execute*label: Execute function:&quot;,
    &quot;*execute*executeok*label: Ok&quot;,
    &quot;*execute*width: 275&quot;,
};

/* global widgets */
Widget message, errordia, load, loadok, executedia, executeok;

/* functions */
 * Function: main -- main function
 * Returns: Nothing   
 */
void main ( int argc, char *argv[] ) 
{
    XtAppContext        app_context;
    Widget              topLevel;
    Widget              box, quit, brkwid;
    int                 bobSock;
    /* create a application */
    topLevel = XtVaAppInitialize ( &amp;app_context, APPNAME, NULL, 0, 
                                  &amp;argc, argv, resources, NULL ); 
    /* create all the buttons and dialogs for the application */
    box = XtVaCreateManagedWidget ( &quot;box&quot;, boxWidgetClass, topLevel, NULL ); 
    quit = XtVaCreateManagedWidget ( &quot;quit&quot;, commandWidgetClass, box, NULL ); 
    brkwid = XtVaCreateManagedWidget (&quot;break&quot;, commandWidgetClass, box, NULL); 
    message = XtVaCreateManagedWidget ( &quot;message&quot;,dialogWidgetClass,box,NULL );
    errordia = XtVaCreateManagedWidget (&quot;error&quot;, dialogWidgetClass,box, NULL );
    load = XtVaCreateManagedWidget ( &quot;load&quot;, dialogWidgetClass, box, NULL ); 
    loadok = XtVaCreateManagedWidget ( &quot;loadok&quot;,commandWidgetClass,load,NULL );
    executedia = XtVaCreateManagedWidget ( &quot;execute&quot;, dialogWidgetClass, box, 
                                                                        NULL );
    executeok = XtVaCreateManagedWidget ( &quot;executeok&quot;, commandWidgetClass, 
                                                           executedia, NULL );
    /* set up all the callbacks for the buttons */
    XtAddCallback ( quit, XtNcallback, Quit, 0 );
    XtAddCallback ( brkwid, XtNcallback, Break, 0 );
    XtAddCallback ( loadok, XtNcallback, LoadOk, 0 );
    XtAddCallback ( executeok, XtNcallback, ExecuteOk, 0 );
    /* initialize the bob interface language */
    if ( ( bobSock = BobInitialize ( ) ) &lt; 0 ) {
        fprintf (stderr,&quot;Unable to initialize Bob\n&quot; );
        exit(1);
    }
    /* add this socket to the event loop for monitoring */
    XtAppAddInput ( app_context, bobSock, (XtPointer)XtInputReadMask, 
                    AppCheckBob, NULL );
    /* register the external functions with BOB */
    BobAddFunction ( &quot;message&quot;, Message );
    BobAddFunction ( &quot;error&quot;, Error );
    /* load up the application defaults macros */
    BobLoadFile ( &quot;.&quot; APPNAME &quot;rc&quot; );  /* user definitions */
    /* this has just been put in to demonstrate calling BOB functions */
    BobExecute ( &quot;print&quot;, 4, DT_STRING, &quot;Hi &quot;, DT_INTEGER, 20,
                 DT_NIL, DT_STRING, &quot; World\n&quot; );
    /* create windows for widgets and map them */
    XtRealizeWidget ( topLevel );
    /* loop for events */
    XtAppMainLoop ( app_context );
}
 * Function: AppCheckBob -- The is the work proc called when there is  * input from Bob
 * Returns: Nothing   
 */
void AppCheckBob ( XtPointer cl_data, int *fid, XtInputId *id )
{
    /* Call bob to get the events of the Bob comms socket */
    BobCheckClient ( );
}
 * Function: Quit -- Exits from the windows system
 * Returns: Nothing   
 */
void Quit ( Widget w, XtPointer cl_data, XtPointer call_data )
{
    BobTalkTerm ();     /* shutdown comms with Bob */
    exit ( 0 );
}
 * Function: Break -- Exits from the windows system
 * Returns: Nothing   
 */
void Break ( Widget w, XtPointer cl_data, XtPointer call_data )
{
    BobBreak ( &quot;BOB Inturrupted&quot; );
}
 * Function: LoadOk -- The load dialog is complete and to load up file
 * Returns: Nothing   
 */
void LoadOk ( Widget w, XtPointer cl_data, XtPointer call_data )
{
    String      str;            /* filename to load */
    char        msg[500];       /* Error message */
    Arg         xargs[1];       /* New value */
    /* get the string and try to load it */
    str = XawDialogGetValueString ( load );
    if ( BobLoadFile ( str ) ) {
        /* clear the box if no error */
        XtSetArg ( xargs[0], XtNvalue, (XtArgVal)&quot;&quot; );
        XtSetValues ( load, xargs, 1 );
    } else {
        /* send an error to the error box */
        sprintf ( msg, &quot;Unable to load file: %s&quot;, str );
        ShowError ( msg );
    }
}
 * Function: ExecuteOk -- Execute dialog is complete 
 * Returns: Nothing   
 */
void ExecuteOk ( Widget w, XtPointer cl_data, XtPointer call_data )
{
    String      str;            /* function to execute */
    char        msg[500];       /* error message */
    Arg         xargs[1];       /* New value */
    /* get the string and try to load it */
    str = XawDialogGetValueString ( executedia );
    if ( BobExecute ( str, 0 ) ) {
        /* clear the box if no error */
        XtSetArg ( xargs[0], XtNvalue, (XtArgVal)&quot;&quot; );
        XtSetValues ( executedia, xargs, 1 );
    } else {
        /* send an error to the error box */
        sprintf ( msg, &quot;Unable to execute function: %s&quot;, str );
        ShowError ( msg );
    }
}
 * Function: Message --  Displays a message in the dialog boc
 * Returns: Tells Bob if it is an error or not
 */
int Message ( int argc, VALUE *arg, VALUE *retval  )
{
    char                msg[500]; /* message to put in dialog */
    Arg                 xargs[1]; /* New value */
    /* make sure that there is 1 args */
    /* make sure that it is a string */
    if ( ! BobExtArgs ( argc, 1, 1, retval ) ) return ( FALSE );
    if ( ! BobExtCheckType ( &amp;arg[0], DT_STRING, retval ) ) return ( FALSE );
    
    BobGetString ( msg, sizeof ( msg ), &amp;arg[0] );
    XtSetArg ( xargs[0], XtNvalue, (XtArgVal)msg );
    XtSetValues ( message, xargs, 1 );
    return ( BobReturnValue ( retval, DT_INTEGER, TRUE ) );
}
 * Function: Error --  Displays a error in the dialog boc
 * Returns: Tells Bob is there is an error or not
 */
int Error ( int argc, VALUE *arg, VALUE *retval  )
{
    char                msg[500]; /* error to put in dialog */
    Arg                 xargs[1]; /* New value */
    /* make sure that there is 1 args */
    /* make sure that it is a string */
    if ( ! BobExtArgs ( argc, 1, 1, retval ) ) return ( FALSE );
    if ( ! BobExtCheckType ( &amp;arg[0], DT_STRING, retval ) ) return ( FALSE );
    BobGetString ( msg, sizeof ( msg ), &amp;arg[0] );
    ShowError ( msg );
    return ( BobReturnValue ( retval, DT_INTEGER, TRUE ) );
}
 * Function: ShowError --  Displays the passed message in the error dialog box
 * Description:
 * Returns: Nothing   
 */
void ShowError ( char *msg )
{
    Arg                 xargs[1]; /* New value */
    XtSetArg ( xargs[0], XtNvalue, (XtArgVal)msg );
    XtSetValues ( errordia, xargs, 1 );
}

</pre>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
