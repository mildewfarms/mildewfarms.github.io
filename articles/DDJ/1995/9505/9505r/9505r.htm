<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>MAY95: LETTERS</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>LETTERS<a name="01bf_0001"></h1><P>
<h3><a name="01bf_0002">FFTs: Fast, Faster, and Wow! <a name="01bf_0002"></h3><P>
Dear <I>DDJ</I>,<P>
In reference to &quot;Faster FFTs&quot; (&quot;Algorithm Alley,&quot; February 1995). I would like to offer a slightly faster version of the <I>ShuffleIndex()</I> function.<P>
The new function <I>rbi</I> (reverse binary index) takes the <I>fbi</I> (forward binary index) as it first parameter and <I>pTable </I>(a pointer to a table of bit masks) as its second parameter. It operates by:<P>
<UL>
<li> Isolating each pair of symmetric bits    { AND with each MASK in the table}</li>
<li> Testing to see if the bits are the same { compare with MASK and ZERO }</li>
<li> If both 0 or both 1 then nothing to do  { continue }</li>
<li> Else we need to flip the bits { EXCLUDE OR with MASK }</li>
</UL>
The table of bit masks is specific to each length of the binary index; see the tables for length of 8 and 9 in <a href="#01bf_0005">Example 1(a)</A>. I would expect that in any particular application, the length of the index would be fixed. If not, then an array of pointers to bit-mask tables (indexed by the length of the ftt binary index) could easily be built. The function <I>rbi</I> in <a href="#01bf_0005">Example 1(b)</A> is about 20 percent faster than <I>ShuffleIndex()</I>.<P>
Ken Allen<P>
pgmkra@ibi.com<P>
Dear <I>DDJ</I>,<P>
I enjoyed Iwan Dobbe's article on FFTs. I like to really squeeze cycles out of algorithms, too. <a href="#01bf_0005">Example 1(c)</A> is a faster way to do the bit-reverse shuffle. <P>
The basic idea is that the inner loop (where most of the time is spent) simply toggles the 512 bit, the next-to-inner loop toggles the 256 bit, and so on. Some more time could be saved by unrolling the inner loop and using pointers instead of index arithmetic. I have never seen this method published.<P>
Mike Dunlavey<P>
70363.27@compuserve.com<P>
Dear <I>DDJ</I>,<P>
In &quot;Faster FFTs,&quot; D.G.G. Dobbe gives a good overview of the factors affecting numeric performance. However, there are two cheap tricks for improving FFT speed even more, without resorting to assembly language. These tricks are most useful for large FFTs (more than 16,384 points) and fast CPUs coupled to slow RAM. <P>
The first trick is to improve the &quot;locality of reference&quot; so the L1 cache gets used more efficiently. To do so, you can replace the separate <I>Re[]</I>, <I>Im[]</I> arrays with an array of structures; see <a href="#01bf_0005">Example 1(d)</A>. The inner loop of the butterfly then becomes <a href="#01bf_0005">Example 1(e)</A>.<P>
For pure compiled code (Watcom C 9.5), this change increases the speed of the forward FFT by a factor of 1.46 on a 90-MHz Pentium. The main reason for the improvement: When the <I>Re</I> and <I>Im</I> components are packed into a structure, a read from slow DRAM is very likely to put both components on the same L1 cache line, where they will be available for subsequent (fast) fetches. <P>
The second trick is to use less math. The &quot;split radix&quot; FFT (Duhamel and Hollman, <I>Electronics</I> magazine, &quot;Letters,&quot; January 1984) modifies the butterfly to use fewer multiplications and additions. Combined with trick number 1, the split radix is about 1.88 times faster than the classic butterfly for single precision, and 1.68 times faster in double precision, even when sine and cosine are explicitly calculated. A nice implementation of the split radix method can be found in the file tfftdp.c at ftp.nosc.mil, in the /pub/aburto directory. <P>
Harlan W. Stockman<P>
hwstock@abq-ros.com<P>
<h3><a name="01bf_0003">VC++ and NT<a name="01bf_0003"></h3><P>
Dear <I>DDJ</I>,<P>
I would like to comment on John LaPlante's article, &quot;Building an OLE Server Using Visual C++ 2.0&quot; (<I>DDJ</I>, February 1995). First, I would like to say that Visual C++ 2.0 is a good product, but I am sure we will see as many bug fixes with it as with the Visual C++ 1.x series. <P>
John's statements, &quot;NT's responsiveness and robustness_&quot; and &quot;NT's crash resistance_&quot;, don't give 2.0 the credit it deserves. Since installing NT 3.5 and VC++ 2.0, I've written three separate apps. In doing so, I've had eight crashes in two weeks due to VC++. One crash was from trying to open a source file. These crashes would not be so bad if they didn't take the source files out with them. NT leaves them with size 0 bytes. A chkdsk will turn them up at the root (This is <I>very</I> helpful!).<P>
As for the ClassWizard, it sometimes chokes up if the source files are not saved prior to invoking it from the resource editor. This is especially disheartening after you have added several members and functions, only to get the pop-up error!<P>
Anyway, for those who struggle through it, I have a few helpful hints:<P>
<UL>
<li> Install on a FAT file system, so you can recover easily from a crash.</li>
<li> After a crash, delete the PAGEFILE.SYS, run chkdsk /f, and save the FILE*.CHKs; you can recover any 0-byte files from these.</li>
<li> NT will also trash your &lt;username&gt;.LOG, so it should also be deleted.</li>
<li> Also, save all files before running ClassWizard.</li>
</UL>
Generally, it takes two reboots in a row to get the system fully back; however, my hints usually help the first time. <P>
Jon Friedline<P>
76557.1643@compuserve.com<P>
<h3><a name="01bf_0004">The Win95 Logo<a name="01bf_0004"></h3><P>
Dear <I>DDJ</I>, <P>
Isn't it true that IBM doesn't have rights to any of the Win32 source? If so, then I think this might be the strongest reason yet for Microsoft's new logo rules described by Jonathan Erickson in his March 1995 &quot;Editorial.&quot; If Microsoft can convince all the major players to release only Win32 versions of their apps using OLE, long filenames, and other Windows 95- and NT-specific features, then suddenly IBM and OS/2 are in trouble. IBM will have to choose between clean-room engineering Win32 support (no mean feat) or living with fewer new and supported apps that run under OS/2.  <P>
Microsoft would clearly like to see more NT apps, but I'd bet it's even more interested in cutting OS/2's supply lines. If it wanted to push NT, it could announce a 50 percent price cut, and sales would surge overnight.<P>
Lou Grinzo <P>
71055.1240@compuserve.com<P>
Dear <I>DDJ</I>,<P>
I read with much interest Jonathan Erickson's editorial on Microsoft's Win95 logo issue. I am a small developer of vertical-market database applications. All of my clients are 20 to 50 workstations on Novell networks. My clients understand the demand of workgroup applications, and I have a good track record of delivering applications that fill this need.<P>
Although many of these clients use Windows for word processing or spreadsheets, none have their workgroup apps under Windows. The applications I have developed are under Clipper, Clipper with Btrieve, C with Btrieve, C with c-tree plus, and Foxpro for DOS.<P>
The area Erickson is talking about in his article is the rarefied world of mass-market applications--those spreadsheets, word processors, or e-mail packages that can sell tens of thousands of packages.<P>
In a nutshell, his beef has little or nothing to do with me and my client base. The fact that Microsoft is prodding the marketplace to be more streamlined just makes it easier for my clients to make a thousand-dollar decision. This represents the everyday level of pain for the small businessman, myself included.<P>
I would like to get a Windows database project. Visual Basic, Foxpro for Windows, dBase for Windows, the new CA Visual- Objects would be great. But my clients don't see this as a cost-effective option for their workgroup needs. Oracle, Sybase, Powerbuilder, are you kidding?<P>
We are talking about workgroups with 30 386/16s with 4 Mbytes of RAM. We are talking about a learning curve of months (with the associated downtime). I am helping my clients move over to Windows one step at a time, replacing a few machines with 486/33s and 8 Mbytes of RAM as budgets and time permit.<P>
If Microsoft can give the warm and fuzzy that a move to a new machine will be reasonably painless, just add some money and plug-n-play, all the better. Better for my clients and better for me.<P>
I'm paying for my own learning curve with my time and energy (and missed opportunity). My clients expect me to have answers when they need the question answered. Windows 95 is not yet a question they need answered. If Microsoft can make the answer easier to live with (read &quot;pay for&quot;), my clients and I are all the better served.<P>
Just remember a few years ago; the landscape had a lot of mainframe and mini iron, all incompatible with each other. They are being slowly squeezed out of existence because of the leveling of the playing field with the PC revolution.<P>
I can only see the same thing happening with software. And I am one application developer that likes what I see.<P>
Name Withheld<P>
Dear <I>DDJ</I>,<P>
Upon reading the &quot;Editorial&quot; in the March issue, I was struck by the similarity of Microsoft's logo requirements with Apple's Macintosh development-partner requirements of February 1984.  <P>
Apple said that to qualify, your company had to have <I>x</I> amount of dollars in the bank and <I>y</I> number of existing apps sitting on store shelves to &quot;qualify&quot; to become a certified Macintosh development partner. This policy closed the door on many early would-be Mac developers and, in my opinion, is a major reason why the Mac never became the platform of choice.<P>
Gee, I sure would have thought that Bill Gates would be smart enough to learn from Steve Job's mistakes.<P>
Andy Bentley   <P>
71055.3060@compuserve.com<P>
Dear <I>DDJ</I>,<P>
I just got my copy of <I>DDJ </I>(March 1995), and already I'm smiling. First off, I commend you in including Linus Torvalds in your &quot;Excellence in Programming Award.&quot; I am calling my provider with Minicom, a Telix-like communications program running under Linux 1.1.59. I believe this operating system to be a wonderful thing, and join you in congratulating the winners.<P>
Also, Jonathan Erickson's &quot;Editorial&quot; made me smile. Why? Because finally someone is talking about Windows and Microsoft without being afraid. One magazine, which I will not name, called OS/2 better Windows than Windows, rated it &quot;Good,&quot; and went on to rate Windows better than OS/2. Weird. Erickson notes that Microsoft should &quot;start treating third-party developers as partners, rather than serfs.&quot; I think that Windows is dead, and Bill doesn't seem to realize that he's killing it. No matter, I develop only for DOS, OS/2, and Linux. I commend you on your honest and great magazine!<P>
Martin Brown  <P>
martin@nezumi.demon.co.uk<P>
<h4><a name="01bf_0005"><B>Example 1: FFTs:</B> Fast, faster, and wow!<a name="01bf_0005"></h4><P>
<pre>(a)
static unsigned int MaskTable08[] =
{
   0x81,  /*  10000001  */
   0x42,  /*  01000010  */
   0x24,  /*  00100100  */
   0x18,  /*  00011000  */
   0x00   /*end of table*/
};
static unsigned int MaskTable09[] =
{
   0x101, /* 100000001  */
   0x082, /* 010000010  */
   0x044, /* 001000100  */
   0x028, /* 000101000  */
   0x00   /*end of table*/
};

(b)
unsigned int rbi(unsigned int fbi, unsigned int * pTable)
{
   unsigned int result, mask, temp;
   result = fbi;
   for(mask = *pTable; mask; mask = *(++pTable))
   {
     temp = fbi &amp; mask;             /* isolate symetric bits pair     */
     if (temp == 0 || temp == mask) /* are the symetric bits the same ?*/
         continue;                /* if so, then don't need to change */
      result ^= mask;              /* bits differ, so flip them       */
   }
   return(result);
}

(c)
float real[1024], imag[1024], temp;
#define SWAP(a,i,j)(temp=a[i], a[i]=a[j], a[j]=temp)
int i=0, j=0, i0,i1,i2,i3,i4,i5,i6,i7,i8,i9;
#define TWICE(k)
 for(i##k = 2; -- i##k &gt;= 0; j ^= (1&lt;&lt;k) )
TWICE(0) TWICE(1) TWICE(2) TWICE(3) TWICE(4)
TWICE(5) TWICE(6) TWICE(7) TWICE(8) TWICE(9)
{       if (j &gt; i){
                      SWAP(real,i,j);
                      SWAP(imag,i,j);
                  }
       i++;
       }

(d)
struct cmplx {float Re; float Im;} xc[SIZE], *cp;

(e)
tempr =  Qr * (cp+index2)-&gt;Re  -  Qi * (cp+index2)-&gt;Im;
tempi =  Qr * (cp+index2)-&gt;Im  +  Qi * (cp+index2)-&gt;Re;

(cp+index2)-&gt;Re = (cp+index1)-&gt;Re - tempr;   /* For Re-part */
(cp+index1)-&gt;Re = (cp+index1)-&gt;Re + tempr;
(cp+index2)-&gt;Im = (cp+index1)-&gt;Im - tempi;   /* For Im-part */
(cp+index1)-&gt;Im = (cp+index1)-&gt;Im + tempi;</pre><P>
<P>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
