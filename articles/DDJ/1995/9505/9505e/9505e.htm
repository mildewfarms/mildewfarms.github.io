<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>MAY95: Lightweight Tasks in C</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Lightweight Tasks in C<a name="01cf_0089"></h1><P>
<h2><a name="01cf_0087"><a name="01cf_0000">A robust implementation in a few lines of code</h2><P>
<h3>Jonathan Finger</h3><P>
<p><i><a name="01cf_0088"><a name="01cf_0000">Jonathan is a Boston-area consultant with many years of experience programming in C and Mumps. He can be reached at jfinger@hmm.com.</i></p><hr><P>
Modern operating systems allow multiple processes to exist at the same time, and each process can contain more than one thread of execution. For operating systems that do not explicitly support threads, you can build a multithreading package in a high-level language such as C, which allows for cooperatively multitasked threads within a single process. <P>
One good commercial implementation of this is the Multi-C package from MIX Software, which provides process scheduling, process synchronization, and message passing. However, for a variety of reasons, you may want to roll your own lightweight tasker in C. For instance, one project I was involved in required porting a multiuser mailing-list management system from its original minicomputer platform to a PC/DOS system. I decided to implement a multitasking system in C to work in place of the original minicomputer operating system. My system serves as the foundation for the multiuser application, which consists of thousands of lines of production code. In this article, I'll present a simplified version of my multithreading code. This code is not a toy--the original version has been used extensively in a commercial environment for several years. The code runs over DOS and can be compiled with either the Watcom 10.0 32-bit compiler using the Tenberry Software (formerly Rational Systems) DOS extender or the Microsoft C7.0 16-bit compiler. <P>
<h3><a name="01cf_008a">Processes and Tasks<a name="01cf_008a"></h3><P>
Conceptually, a process is a program in execution, plus its associated environment. The operating system isolates processes so they don't interfere with each other; often, processes can communicate with each other using primitives provided by the operating system. Because of this, you can completely define the state of a process by specifying the values of its variables (global and local) and a unique point in the executing code.<P>
In a multithreading system, each thread is effectively a copy of its original process, but, unlike heavyweight processes, threads share resources and global variables (and can therefore interfere with each other). On a multiprocessor machine, different processors can run threads simultaneously. <P>
Switching between threads can be either cooperative or preemptive. In cooperative task switching, a thread runs until it makes an explicit call to <I>swap_thread()</I>, which allows other threads to run, eventually returning to its caller. From the point of view of the calling thread, there is no perceptible effect, except for the passage of time.<P>
In preemptive task switching, a thread runs until some external event (such as a timer interrupt or a device interrupt) causes the thread to be suspended and another thread resumed.<P>
<h3><a name="01cf_008b">Implementing Cooperative Task Switching<a name="01cf_008b"></h3><P>
The trick to cooperative task switching in C is that for most machines and compilers, only three things need to be set properly: the instruction pointer, C stack, and machine registers.<P>
The instruction pointer or program counter marks the current place in the running code. The C functions <I>setjmp()</I> and <I>longjmp()</I> take care of the instruction pointer and the registers, but they unwind the stack. To handle the stack properly, our code must explicitly copy it to a &quot;save&quot; region for each thread. In my version, these routines assume that the C stack is in contiguous memory and that it grows from the bottom; see <a href="#01cf_008f">Listing One</A> .<P>
As you can see in the listing, the <I>threads</I> struct contains information about individual threads. The <I>start_new_thread (*program)</I> function creates a new thread and stores a pointer to the program in the <I>threadp</I>&gt;function<I> element of the </I>threads<I> struct.</I><P>
For this code to work, the compiler must implement local variables on a stack, the stack must be contiguous, and the stack must grow down. Fortunately, these conditions are satisfied on most machines and C compilers, but they are not part of the C specification. It is pretty straightforward to modify my implementation to account for stacks that grow up; your code can also test the direction of stack growth and act accordingly.<P>
The routines <I>start_new_thread()</I> and <I>queue_thread()</I> can be called from an interrupt service routine as long as mutual exclusion is ensured. (For example, if an interrupt occurs during execution of <I>queue_thread</I> and you call <I>queue_thread</I>, the queues may get corrupted.) In MS-DOS, you can accomplish simple mutual exclusion by masking out interrupts during critical sections of code.<P>
<h3><a name="01cf_008c">Implementing Preemptive Task Switching<a name="01cf_008c"></h3><P>
Preemptive task switching is implemented by simply switching tasks at predefined intervals. Usually, the process receives periodic interrupts from a timer, and the multitasker arranges things so that the interrupt returns to the next task. There are several ways of implementing this:<P>
<UL>
<li>Under 16-bit MS-DOS, you can use assembly language to directly manipulate the stack.</li>
<li>Under 32-bit MS-DOS, such stack manipulation may or may not be possible, depending on the DOS extender you use.</li>
<li>On systems with C compilers that implement signal(SIGALRM,_), the signal is usually implemented as a call, meaning that you can use the <I>setjmp()/longjmp() </I>stack-copy tricks in <a href="#01cf_008f">Listing One</A>.</li>
</UL>
<h3><a name="01cf_008d">Context Switch Walkthrough<a name="01cf_008d"></h3><P>
To clarify the implementation, I'll walk through a context switch. For simplicity, I'll assume two threads (A and B) are running and that all task-switches occur with calls to <I>swap_thread()</I>. You should also assume that thread A is running and thread B is waiting to run. The run-time stack is shown in <a href="199501d1.htm">Figure 1</A>.<P>
The part of the run-time stack colored light pink contains thread A's local variables and function return address. If thread B were running, B's local variables and function return addresses would occupy the area colored light or dark pink, but this area of memory has been copied to thread B's <I>thread[B].c_stack</I>. (For this example, assume thread B is currently using more stack than thread A.)<P>
Thread A calls <I>swap_thread()</I> to allow other threads to run. <I>swap_thread()</I> returns if there is no other runable thread. Finding thread B as the next thread in the run queue, thread A gets moved from the head of the run queue to the tail.<P>
Next, <I>swap_out_thread()</I> is called. It saves any thread globals and copies the area of the run-time stack colored light pink in <a href="199501d2.htm">Figure 1</A> to thread A's stack save-area (<I>thread[A].c_stack</I>). Next, <I>setjmp()</I> sets the point where thread A will resume execution. <I>setjmp</I> returns 0, so the return value from <I>swap_out_thread()</I> is 0 and <I>swap_in_thread()</I> is then called.<P>
The <I>swap_in_thread()</I> function sets up any global variables for thread B and then copies the saved run-time-stack data to the run-time stack, so that the area in <a href="199501d3.htm">Figure 1</A> colored light or dark pink now contains thread B's stack info. This is why <I>swap_in_thread()</I> has a local variable called <I>UCHARbuffer[thread_SWAP_STACK _SIZE]</I>. This guarantees that the locals used by <I>setup_thread_globals()</I> are in a portion of the stack not overwritten by the <I>memcpy()</I>. This area is a breeding ground for potential bugs, since an optimizing compiler may realize that <I>buffer[]</I> is not used and leave the stack pointer unchanged. If the compiler inlines <I>setup_thread_globals()</I> into <I>swap_in _thread()</I>, it becomes apparent that <I>buffer[]</I> is not used.<P>
The <I>swap_in_thread()</I> function now executes <I>longjmp()</I>. The <I>cpr</I>--<I>&gt;swap _thread_buff</I> structure element was previously set for thread B by the <I>setjmp()</I> call in <I>swap_in_thread()</I>, so control is transferred to the <I>setjmp()</I> in <I>swap _out_thread()</I>. The <I>setjmp()</I> returns a nonzero value, so <I>swap_out_thread()</I> returns to <I>swap_thread()</I> with a nonzero value.  Since the run-time stack now returns thread B's stack, <I>swap_thread()</I> returns to thread B.<P>
<h3><a name="01cf_008e">Conclusion<a name="01cf_008e"></h3><P>
The <I>setjmp()</I> and <I>longjmp()</I> functions in C allow implementing a bare-bones multitasker in only a few lines of code. This straightforward code can serve as the basis for more full-featured implementations.<P>
<a href="199501d4.htm">Figure 1</A>  Diagram of the run-time stack when two threads are created.
<P>
<h4><a name="01cf_008f">Listing One <a name="01cf_008f"></h4><pre>

/* Lightweight Multitasker in C -- by Jonathan Finger, 1995   (reformatted) */

#include &lt;setjmp.h&gt;
#include &lt;conio.h&gt;
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;
#include &lt;string.h&gt;
#include &lt;dos.h&gt;
#include &lt;setjmp.h&gt;

#define MAX_THREAD              10
#define THREAD_SWAP_STACK_SIZE  10000
typedef short    int            THREAD_NUM;
typedef unsigned char           UCHAR;
typedef unsigned long           ULONG;
typedef unsigned int            UINT;
typedef unsigned short int      USHORT;
typedef unsigned char *         STR;

/*----------------------the threads structure-------------------------------*/
struct threads 
{
        THREAD_NUM thread_number;
        jmp_buf    swap_thread_buff;
        UCHAR      c_stack[THREAD_SWAP_STACK_SIZE];/* save area for c stack */
        size_t     c_stack_size;                   /* save state info       */

        THREAD_NUM volatile next_thread;   /* forward chain for queues      */
        THREAD_NUM volatile prev_thread;   /* backward chain for some queues*/
        UCHAR      volatile queue;         /* current queue that thread is  */
                                           /* on: 'R'means RUN, 'F'is Free  */
        void (*function)(void);
        /* other info can be added here as needed */
};
typedef struct threads thrd;
thrd thread[MAX_THREAD];
thrd *cpr; /* pointer to the current running thread */
/*------------------------------------------------------------------------*/
jmp_buf   new_thread_start_buff;
#define NO_THREAD           (MAX_THREAD+100)
THREAD_NUM  current_thread = NO_THREAD;
STR  stack_swap_start;
/* note that the following variables have been declared volatile, since 
 * they may be altered by an interrupt service routine  */
static THREAD_NUM volatile run_queue_head;
static THREAD_NUM volatile run_queue_tail;
/*------------------------Function prototypes-------------------------*/
void     init_thread_table     (void);
int      start_new_thread      (void (*program)(void));
void     free_current_thread   (void);
void     setup_thread_globals  (THREAD_NUM thread_no, STR buff);
void     save_thread_globals   (void);
int      swap_out_thread       (void);
void     swap_in_thread        (void);
void     swap_thread           (void);
void     swap_thread_block     (void); /*put curr thread to sleep on event*/
void     queue_thread          (THREAD_NUM thread_number);
void     unqueue_thread        (UCHAR new_queue);
void thread1(void)
{       while (1)
        {       printf(&quot;\n\rthread 1&quot;);
                swap_thread();
        }
}
void thread2(void)
{       while (1)
        {       printf(&quot;\n\rthread 2&quot;);
                swap_thread();
        }
}
void thread3(void)
{       while (1)
        {       if (kbhit()) exit(0);

                printf(&quot;\n\rthread 3&quot;);
                swap_thread();
        }
}
main()
{       int i = 0;
        init_thread_table();
        run_queue_head = run_queue_tail = NO_THREAD;
        stack_swap_start = (STR) &amp;i;
        if (!setjmp(new_thread_start_buff))
        {       
                /* starts three threads */
            start_new_thread(thread1);/*should error-check return value*/
                start_new_thread(thread2);
                start_new_thread(thread3);
                swap_thread_block();
        }
        (*(cpr-&gt;function))();
        free_current_thread();
}
void init_thread_table()
{       int i = 0;
        while (i &lt; MAX_THREAD)
        {       thread[i].thread_number = i;
                thread[i].queue         = 'F';
                thread[i].next_thread   = i + 1;
                thread[i].prev_thread   = i - 1;
                i++;
        };
        thread[MAX_THREAD].next_thread = NO_THREAD;
}
int start_new_thread(void *(program)(void))
{
        THREAD_NUM thread_num;
        thrd *threadp;
        thread_num = get_free_thread_id();
        if (thread_num == NO_THREAD) return(NO_THREAD);
        threadp = &amp;thread[thread_num];
        threadp-&gt;c_stack_size = 0;
        threadp-&gt;next_thread  = NO_THREAD;
        threadp-&gt;function     = program;
        memcpy(threadp-&gt;swap_thread_buff,
                new_thread_start_buff, sizeof(jmp_buf));
        /* the memcpy copies the contents of new_thread_start_buff 
        * to the thread's swap buff so that when swap_in_thread() 
        * calls longjmp(), control returns from the setjmp in main()  */
        queue_thread(thread_num);
        return(thread_num);
}
static int get_free_thread_id()

{       int i = 0;
        do 
    {       while ((i &lt; MAX_THREAD) &amp;&amp; (thread[i].queue != 'F')) 
                    i++;
                if (i &lt; MAX_THREAD) return(i);
        } while (i &lt; MAX_THREAD);
        return(NO_THREAD);
}
void setup_thread_globals(THREAD_NUM thread_num, STR buff)
{       /*STR buff; needed to defeat optimizer */
        cpr = &amp;thread[thread_num];
}
void save_thread_globals()
{
}
int swap_out_thread()
{       long int i;
        if (current_thread == NO_THREAD) return(0);
        save_thread_globals();     
        i = stack_swap_start - ((STR)&amp;i);
        cpr-&gt;c_stack_size = (size_t) i;
        memcpy(cpr-&gt;c_stack, ((STR)&amp;i)+1, (size_t) i);
        return(setjmp(cpr-&gt;swap_thread_buff));
        /* the setjmp sets the return point where the thread will 
     * resume execution when longjmp() in swap_in_thread()  */
}
void swap_in_thread()
{       UCHAR buffer[thread_SWAP_STACK_SIZE];
        /* make sure we are above (below) the swap stack */
        current_thread = run_queue_head;
        setup_thread_globals(current_thread, &amp;buffer[0]);
        memcpy(stack_swap_start - cpr-&gt;c_stack_size + 1,
                cpr-&gt;c_stack, cpr-&gt;c_stack_size);
        longjmp(cpr-&gt;swap_thread_buff, 1);
        /* lonjmp() transfers control back to setjmp() in swap_out_thread */
}
void swap_thread()
{       int next_thread;
        next_thread = thread[run_queue_head].next_thread;
        if (next_thread != NO_THREAD)
        {       run_queue_head = next_thread;
                thread[run_queue_tail].next_thread = current_thread;
                run_queue_tail = current_thread;
                thread[current_thread].next_thread = NO_THREAD;
                if (!swap_out_thread()) swap_in_thread();
                /* if swap_out_thread() returns 0, this is a return from the
                 * call to swap_out_thread and we call swap_in_thread. If it 
                 * returns !0 then swap_out_thread is returning from longjmp()
                 * in swap_in_thread and task switch has already occurred */
        }
}
void swap_thread_block() /*put current thread to sleep on event*/
{       while (run_queue_head == NO_THREAD) 
                continue;
        /* if this loop is encountered and run queue is empty, process idles
         * until a process is queue either in an interrupt service routine or 
         * signal handler */
        if (current_thread != run_queue_head
                &amp;&amp; !swap_out_thread()) 
        {
                swap_in_thread();
        }
}
void queue_thread(THREAD_NUM thread_number)
{
        /* If run queue can be modified by an interrupt service routine or
     * signal handler then code must be added to assure mutual exclusion */
        if (run_queue_tail != NO_THREAD) 
    {
                thread[run_queue_tail].next_thread = thread_number;
        }
        else 
    {
            run_queue_head = thread_number;
    }
        run_queue_tail = thread_number;
        thread[thread_number].next_thread = NO_THREAD;
        thread[thread_number].queue = 'R';
}
void unqueue_thread(UCHAR new_queue)
{       THREAD_NUM thread_num;
        thread_num = run_queue_head;
        if ((run_queue_head =  thread[thread_num].next_thread) == NO_THREAD)
                run_queue_tail = NO_THREAD;
        thread[thread_num].queue = new_queue;
}
void free_current_thread()
{       free_thread(current_thread);                    
        unqueue_thread('F');
        swap_thread_block(); /* this will never return */
}
int free_thread(THREAD_NUM thread_num)

{       thrd *threadp = &amp;thread[thread_num];
        if (threadp-&gt;queue == 'F') return(0);
        if (current_thread == thread_num) current_thread = NO_THREAD;
        return(1);
}

</pre>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
