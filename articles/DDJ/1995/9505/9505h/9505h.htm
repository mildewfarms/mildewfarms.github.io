<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>MAY95: Portable Screen Handling</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Portable Screen Handling<a name="01f8_008f"></h1><P>
<h2><a name="01f8_008d"><a name="01f8_0000">ANSI escape sequences for portable screen operations</h2><P>
<h3>Matt Weisfeld</h3><P>
<p><i><a name="01f8_008e"><a name="01f8_0000">Matt is a senior system test engineer at Allen-Bradley Company and is responsible for the development of test software on VAX/VMS, UNIX, DOS, and other platforms. He can be contacted at 1938 Aldersgate Dr., Lyndhurst, OH 44124.</i></p><hr><P>
The term &quot;portable screen interface&quot; is, in most cases, an oxymoron. Of all the areas relating to software portability, screen handling is quite possibly the least portable. This is not surprising, since screen operations are very hardware (terminal) dependent. Although standards such as X Window are available, programming in any windowing environment is anything but trivial. Even curses, a text-based screen-handling package portable to many platforms, requires some overhead. However, in many applications, simple screen operations (such as bolding, underlining, and the like) are all that is required. <P>
In this article, I'll present methods for using ANSI escape sequences to make screen operations easier while increasing portability in the process. On the software side, I'll focus on C; for the hardware, I'll include Intel 386/486, DEC VAX, Sun, and HP. Source code and programmer notes for Basic, Fortran, and Pascal are available electronically; see &quot;Availability,&quot; page 3.<P>
The C code presented here operates on DOS, VAX/VMS, and UNIX (Sun SLC and HP-UX). These platforms represent a wide variety of configurations: The VAX and the Sun SLC use VT100/200/300 terminal emulation, the Sun SLC C compiler is non-ANSI, and the HP-UX workstation (Apollo series 700) does not support ANSI escape sequences. While ANSI mode applies to the VT100/200/300 terminals, VT52 mode is not ANSI compatible. The Fortran, Basic, and Pascal examples were compiled and executed in the VAX/VMS environment.<P>
<h3><a name="01f8_0090">Using ANSI Escape Sequences<a name="01f8_0090"></h3><P>
Escape sequences are at the heart of these screen-handling functions, and I rely on the ANSI standard whenever possible. (See <a href="#01f8_0097">Table 1</A> for a list of ANSI escape sequences.) For example, the ANSI escape sequence for reverse video is <I>ESC[7m</I>. For C, ESC is <I>\033. </I>Thus the sequence for reverse video is <I>&quot;\033[7m</I>&quot;. The escape sequence, which is an octal value, is set from C by <I>printf (</I>&quot;<I>\033[7m</I>&quot;<I>);</I>. All ANSI escape sequences in C begin with the escape character (\033) and the left bracket. Following the bracket are the parameters specific to the particular sequence with a semicolon (;) separating one parameter from another. Finally, there is a single-letter, case-sensitive command name. In the reverse-video sequence, the <I>m</I> sets graphics mode on. Graphics mode has the text attributes listed in <a href="#01f8_0097">Table 1(d)</A>. Other parameters include foreground and background colors. <P>
Creating header-file definitions makes the sequences more readable, as in scrlibs.h (<a href="#01f8_009e">Listing One</A>). For example, the definition for reverse video is <I>static char reverse[]={</I>&quot;<I>\033[7m&quot;};</I> so that the code to set reverse video now reads <I>printf (reverse);</I>. <a href="#01f8_0098">Figure 1</A> illustrates graphics-mode definitions.<P>
On platforms with a color monitor (in this case, only my DOS machine supports color), various color options are available. To bold characters with the foreground color cyan, for example, use <I>static char bold[]={&quot;\033[36;1m&quot;;</I> where <I>36</I> represents the color cyan. Check the DOS manual for the color codes. <P>
The flexibility of this approach is evident when commands such as <I>printf (&quot;Here %swe%s go again\n&quot;, bold, normal);</I> are used to print the word <I>we</I> in bold.<P>
<h3><a name="01f8_0091">Non-ANSI Escape Sequences<a name="01f8_0091"></h3><P>
Not all platforms support the ANSI standard--the HP-UX system, for example, does not--and the header files and the code must use <I>#ifdef</I>s. HP-UX definitions are listed in <a href="#01f8_0099">Figure 2</A>. Though different, the HP-UX escape sequences behave in a manner similar to the ANSI sequences. However, beware of subtle but significant differences. Some HP-UX platforms do not provide a bolding mechanism, so this implementation substitutes the half-bright attribute. Blink-attribute support also depends on the platform. <P>
<h3><a name="01f8_0092">Designing the Screen Library<a name="01f8_0092"></h3><P>
While using <I>printf()</I> to set escape sequences works in many applications, they sometimes become cumbersome or even unclear. This is especially true when the screen function requires more than one sequence to perform its task. For example, suppose you need to set the bold attribute (on and off). In <a href="#01f8_009a">Example 1(a)</A>, a call to <I>do_bold()</I> sets the bold attribute for all output to the screen. Likewise, <I>do_normal()</I> clears all attributes to normal. <P>
It is important to remember that output is not limited to <I>stdout</I> or even the screen for that matter. By passing the stream as a parameter, you can use any stream (such as <I>stderr</I>) for output. Be aware that printing these attribute sequences to a file will not produce the same effects as printing to the screen. Try using a filename for the stream and view the results with an editor or on paper. Instead of getting the anticipated graphics attribute, the sequences <I>[1mbold video, [0m</I> appear in the file. <a href="#01f8_009a">Example 1(b)</A> is the code for <I>do_bold()</I>. The file scrlibs.c (<a href="#01f8_009f">Listing Two</A>) contains this and the other functions that make up the C library described here. The other graphics functions are almost identical to <I>do_bold()</I>. <P>
Since C buffers I/O, it is important to include <I>fflush()</I>. Without it, the attributes may not appear as expected. Not having to execute an <I>fflush()</I> after each <I>printf()</I> is yet another reason for using functions to set screen attributes. <P>
<h3><a name="01f8_0093">Absolute Cursor Movement<a name="01f8_0093"></h3><P>
Nongraphics attributes behave in a manner consistent with the graphics attributes. For example, the ANSI definition to clear the physical screen (<I>stdout</I>) is &quot;<I>\033[nJ&quot;, </I>where <I>n</I> is: 0 (the default), to erase from the cursor position to the end of the display; 1, to erase from the beginning of the display to the cursor (inclusive); or 2, to erase the entire display and return the cursor to home position. <P>
On some platforms (specifically, the non-ANSI), the screen is cleared from the current cursor position. If the cursor is halfway down the screen, only the bottom half of the screen is cleared. To clear the entire screen, the cursor must be at screen location (0,0). The ANSI escape sequence, in <I>printf</I> format, for moving the cursor to an absolute screen position is <I>&quot;\033[%d;%dH</I>&quot;. Note that the string includes two <I>%d</I> escape sequences, specifying the screen's line and column numbers, respectively. For portability, the routines will all place the cursor at the home position prior to clearing the screen. The ANSI definitions to clear the screen are in <a href="#01f8_009b">Example 2(a)</A>, while the HP-UX definitions are in <a href="#01f8_009b">Example 2(b)</A>.<P>
Another difference between ANSI and HP-UX sequences is the order of the parameters. In the ANSI sequence, the screen location is mapped by the coordinates (<I>row,col</I>). However, the HP-UX sequence maps to (<I>col,row</I>). Fortunately, this is addressed in the function called <I>cursor_pos()</I> and is hidden from you; see <a href="#01f8_009c">Example 3(a)</A>. To place the cursor in position (0,0), <I>cursor_home()</I> is built; see <a href="#01f8_009c">Example 3(b)</A>. The <I>erase_display()</I> function that clears the screen must use either <I>cursor_home()</I> or <I>cursor_pos(0,0)</I> to place the cursor in the proper position; see <a href="#01f8_009c">Example 3(c)</A>.<P>
<h3><a name="01f8_0094">Relative Cursor Movement<a name="01f8_0094"></h3><P>
The <I>cursor_pos()</I> function represents absolute addressing. This means that the cursor will go directly to the x,y screen coordinates specified. Relative addressing operates with respect to the current cursor position--either up, down, left, or right. For example, if the cursor is at row 5, moving the cursor up two relative positions places the cursor at row 3. <a href="#01f8_009d">Example 4(a)</A> lists the ANSI sequences for relative addressing, while <a href="#01f8_009d">Example 4(b)</A> lists the HP-UX sequences. <P>
The code for <I>cursor_up</I> is in <a href="#01f8_009d">Example 4(c)</A>. The parameter move is simply the number of coordinates that the cursor moves in the up direction. The other relative addressing functions are similar (see <a href="#01f8_009f">Listing Two</A>).<P>
<h3><a name="01f8_0095">The C Test Program<a name="01f8_0095"></h3><P>
<a href="#01f8_00a0">Listing Three</A> is test.c, a simple test program that illustrates how the screen functions operate. After clearing the screen, the program tests the reverse, bold, and blink attributes. The <I>do_normal()</I> function clears each one prior to calling the next. Finally, calls to the relative addressing functions move the cursor around the screen. The C function <I>sleep()</I> provides time to view the cursor movements.<P>
When building the executable, you must specify the platform by defining either VMS, HP-UX, SLC, or BCC in the build file (the DCL procedure, makefile, or integrated environment). Some platforms, like VMS, define these by default. <P>
All definitions are found in scrlibs.h (<a href="#01f8_009e">Listing One</A>). If a compiler is ANSI-compliant, then use the directive <I>#define ANSI_COMPLIANT; </I>otherwise, use the directive<I> #define K_R_COMPILER</I>. Likewise, if the platform supports ANSIescape sequences, you should use <I>#define ANSI_SEQUENCES.</I> For the HP-UX platform, however, the directive is <I>#define HPUX_ SEQUENCES. </I>Finally if the terminal used is a VT100, then use the directive <I>#define VT100.</I><P>
Keeping all this information in the header file ensures that no definitions will be omitted or incorrect. It also provides the needed portability.<P>
<h3><a name="01f8_0096">Conclusion<a name="01f8_0096"></h3><P>
Although screen-handling operations are not very portable, building screen libraries can overcome many portability problems. The libraries presented here give you the flexibility to use the escape sequences in a more straightforward manner. <P>
Each platform supports different levels of functionality. For example, the VT100 terminals support double-height and double-width capabilities, while DOS does not support character insertions and deletions. In this case, you would have to write code to perform this task. As always, your specific needs, and the capabilities of each platform, dictate what must be included in the library.<P>
Regardless of the implementation, building screen libraries makes basic, text-based screen operations more portable, more readable, and much easier to manage.<P>
<h4><a name="01f8_0097"><B>Table 1:</B> Subset of ANSI escape sequences (p1=integer). (a) Cursor-control escape sequences; (b) editing escape sequences; (c) page-control escape sequences; (d) graphics escape sequences (ESC[p1m).<a name="01f8_0097"></h4><P>
<pre>(a)
Cursor Forward (CUF)                   ESC[p1C
Cursor Backward (CUB)                  ESC[p1D
Cursor Down (CUD)                      ESC[p1B
Cursor UP (CUU)                        ESC[p1A
Cursor Position (CUP)                  ESC[p1;p2H
Horizontal &amp; Verticle Position (HVP)   ESC[p1;p2f
Save Cursor Position (SCP)             ESC[s
Restore Cursor Position (RCP)          ESC[u
Cursor Position Report (CPR)           ESC[p1;p2R
Device Status Report (DSR)             ESC[6p1
Wrap at End-of-Line                    (wrap) ESC[7h
                                       (no wrap) ESC[7l
(b)
Insert Line (IL)            ESC[p1L
Insert/Replace Mode (IRM)   (insert) ESC[4h
                            (replace) ESC[4l
Delete Character (DCH)      ESC[p1P
Delete Line (DL)            ESC[p1M
Erase Line (EL)             ESC[p1K
Erase Display (ED)          ESC[p1J
(c)
Next Page (NP)              ESC[p1U
Previous Page (PP)          ESC[p1V
(d)
0     All attributes off
1     Bold on
4     Underscore (monochrome display)
5     Blink on
7     Reverse video on
8     Concealed on</pre><P>
<h4><a name="01f8_0098"><B>Figure 1:</B> Graphics-mode definitions.<a name="01f8_0098"></h4><P>
<pre>static char normal[] = {&quot;\033[0m&quot;};
static char bold[]   = {&quot;\033[1m&quot;};
static char blink[]  = {&quot;\033[5m&quot;};</pre><P>
<h4><a name="01f8_0099"><B>Figure 2:</B> HP-UX definitions.<a name="01f8_0099"></h4><P>
<pre>static char bold[]      = {&quot;\033&amp;dH&quot;};
static char reverse[]   = {&quot;\033&amp;dK&quot;};
static char underline[] = {&quot;\033&amp;dD&quot;};
static char blink[]     = {&quot;\033&amp;dA&quot;};
static char normal[]    = {&quot;\033&amp;d@&quot;};</pre><P>
<h4><a name="01f8_009a"><B>Example 1:</B> (a) Setting the bold attribute for screen output; (b) code for do_bold().<a name="01f8_009a"></h4><P>
<pre>(a)
printf (&quot;this is not bold\n&quot;);
do_bold(stdout);
printf (&quot;this is bold\n&quot;);
do_normal(stdout)
printf (&quot;this is not bold again\n&quot;);
(b)
void do_bold(stream)
FILE *stream;
{
    fprintf (stream, bold);
    fflush(stream);
    return;
}</pre><P>
<h4><a name="01f8_009b"><B>Example 2:</B> (a) ANSI definitions to clear the screen; (b) HP-UX definitions.<a name="01f8_009b"></h4><P>
<pre>(a)
static char curpos[]    = {&quot;\033[%d;%dH&quot;};
static char erasedisp[] = {&quot;\033[J&quot;};
(b)
static char curpos[]    = {&quot;\033&amp;a%dx%dY&quot;};
static char erasedisp[] = {&quot;\033J&quot;};</pre><P>
<h4><a name="01f8_009c"><B>Example 3:</B> (a) The cursor_pos() function; (b) positioning the cursor to the home position using cursor_home(); (c) erase_display() clears the screen.<a name="01f8_009c"></h4><P>
<pre>(a)
void cursor_pos(row,col)
int row, col;
#ifdef HPUX
    printf (curpos, col,row);
#else
    printf (curpos, row,col);
#endif
    fflush(stdout);
    return;
}
(b)
void cursor_home()
{
    cursor_pos(0,0);
    fflush(stdout);
    return;
}
(c)
void erase_display()
{
    cursor_home();
    printf (clear);
    fflush(stdout);
    return;
}</pre><P>
<h4><a name="01f8_009d"><B>Example 4:</B> (a) ANSI sequences for relative addressing; (b) the HP-UX sequences; (c) code for cursor_up.<a name="01f8_009d"></h4><P>
<pre>(a)
static char curfor[]    = {&quot;\033[%dC&quot;};
static char curback[]   = {&quot;\033[%dD&quot;};
static char curdown[]   = {&quot;\033[%dB&quot;};
static char curup[]     = {&quot;\033[%dA&quot;};
(b)
static char curfor[]    = {&quot;\033&amp;a+%dC&quot;};
static char curback[]   = {&quot;\033&amp;a-%dC&quot;};
static char cursedown[] = {&quot;\033&amp;a+%dR&quot;};
static char curseup[]   = {&quot;\033&amp;a-%dR&quot;};
(c)
void cursor_up(move)
int move;
{
   int i;
    printf (curup, move);
    fflush(stdout);
    return;
}</pre><P>
<P>
<h4><a name="01f8_009e">Listing One <a name="01f8_009e"></h4><pre>

/***************************************************
  FILE NAME   : scrlibs.h                         
  AUTHOR      : Matt Weisfeld                     
  DESCRIPTION : header file for scrlibs.c         
***************************************************/
#ifdef VMS
#define ANSI_COMPILER
#define ANSI_SEQUENCES
#define VT100
#endif

#ifdef SLC
#define UNIX
#define K_R_COMPILER
#define ANSI_SEQUENCES
#define VT100
#endif

#ifdef BCC
#define DOS
#define ANSI_COMPILER
#define ANSI_SEQUENCES
#endif

#ifdef HPUX
#define UNIX
#define ANSI_COMPILER
#define HPUX_SEQUENCES
#endif

#ifdef ANSI_COMPILER

void do_bold(FILE *);
void do_normal(FILE *);
void do_blink(FILE *);
void do_reverse(FILE *);

void cursor_right(int);
void cursor_left(int);
void cursor_down(int);
void cursor_up(int);
void cursor_pos(int, int);
void cursor_home(void);

void erase_display(void);

#else

void do_bold();
void do_normal();
void do_blink();
void do_reverse();

void cursor_right();
void cursor_left();
void cursor_down();
void cursor_up();
void cursor_pos();
void cursor_home();
void cursor_bottom();

void erase_display();

#endif

#ifdef ANSI_SEQUENCES

#ifdef DOS
static char bold[]  = {&quot;\033[36;1m&quot;};
#else
static char bold[]  = {&quot;\033[1m&quot;};
#endif
static char normal[]    = {&quot;\033[0m&quot;};
static char blink[]     = {&quot;\033[5m&quot;};
static char reverse[]   = {&quot;\033[7m&quot;};

static char curright[]  = {&quot;\033[%dC&quot;};
static char curleft[]   = {&quot;\033[%dD&quot;};
static char curdown[]   = {&quot;\033[%dB&quot;};
static char curup[]     = {&quot;\033[%dA&quot;};
static char curpos[]    = {&quot;\033[%d;%dH&quot;};
static char erasedisp[] = {&quot;\033[2J&quot;};

#endif

#ifdef HPUX_SEQUENCES

static char bold[]  = {&quot;\033&amp;dH&quot;};
static char normal[]    = {&quot;\033&amp;d@&quot;};
static char blink[]     = {&quot;\033&amp;dA&quot;};
static char reverse[]   = {&quot;\033&amp;dK&quot;};
static char underline[] = {&quot;\033&amp;dD&quot;};

static char curfor[]    = {&quot;\033&amp;a+%dC&quot;};
static char curback[]   = {&quot;\033&amp;a-%dC&quot;};
static char curdown[]   = {&quot;\033&amp;a+%dR&quot;};
static char curup[]     = {&quot;\033&amp;a-%dR&quot;};
static char curpos[]    = {&quot;\033&amp;a%dx%dY&quot;};

static char erasedisp[] = {&quot;\033J&quot;};

#endif


</pre>
<h4><a name="01f8_009f">Listing Two<a name="01f8_009f"></h4><pre>

/***************************************************
  FILE NAME   : scrlibs.c                         
  AUTHOR      : Matt Weisfeld                     
  DESCRIPTION : screen handling libraries         
***************************************************/
#include &lt;stdio.h&gt;
#include &quot;scrlibs.h&quot;

void do_bold(stream)
FILE *stream;
{
    fprintf (stream, bold);
    fflush(stream);
    return;
}
void do_normal(stream)
FILE *stream;
{
    fprintf (stream, normal);
    fflush(stream);
    return;
}
void do_blink(stream)
FILE *stream;
{
    fprintf (stream, blink);
    fflush(stdout);
    return;
}
void do_reverse(stream)
FILE *stream;
{
    fprintf (stream, reverse);
    fflush(stdout);
    return;
}
void cursor_right(move)
int move;
{
    int i;

    printf (curright, move);
    fflush(stdout);
    return;
}
void cursor_left(move)
int move;
{
    int i;

    printf (curleft, move);
    fflush(stdout);
    return;
}
void cursor_down(move)
int move;
{
    int i;

    printf (curdown, move);
    fflush(stdout);
    return;
}
void cursor_up(move)
int move;
{
    int i;

    printf (curup, move);

    fflush(stdout);
    return;
}
void cursor_pos(row,col)
int row,col;
{

#ifdef HPUX
    printf (curpos, col,row);
#else
    printf (curpos, row,col);
#endif
    fflush(stdout);
    return;
}
void cursor_home()
{
    cursor_pos(0,0);
    fflush(stdout);
    return;
}
void cursor_bottom()
{
    cursor_pos(23,0);
    fflush(stdout);
    return;
}
void erase_display()
{
    int i;

    cursor_home();
    printf (erasedisp);
    fflush(stdout);
    return;
}


</pre>
<h4><a name="01f8_00a0">Listing Three<a name="01f8_00a0"></h4><pre>

/***************************************************
  FILE NAME   : test.c                            
  AUTHOR      : Matt Weisfeld                     
  DESCRIPTION : test file for screen libraries    
***************************************************/
#include &lt;stdio.h&gt;
#include &quot;scrlibs.h&quot;
#ifdef DOS
#include &lt;dos.h&gt;
#endif

main()
{
    erase_display();
    do_bold(stdout);
    printf (&quot;bold video\n&quot;);
    do_normal(stdout);
    do_reverse(stdout);
    printf (&quot;reverse video\n&quot;);

    do_normal(stdout);
    do_blink(stdout);
    printf (&quot;blink video\n&quot;);
    do_normal(stdout);
    printf (&quot;normal video\n&quot;);

    printf (&quot;\n&quot;);

    cursor_right(20);
    printf (&quot;Right&quot;);
    cursor_left(10);
    printf (&quot;Left&quot;);
    cursor_down(10);
    printf (&quot;Down&quot;);
    cursor_up(5);
    printf (&quot;Up&quot;);

    cursor_bottom();
    return;
}


</pre>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
