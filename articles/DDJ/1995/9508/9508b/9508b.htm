<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>AUG95: Standard C: An Update</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Standard C: An Update<a name="008a_0023"><a name="008a_0021"><a name="008a_0000"></h1><P>
<h2>Whither goest Standard C?</h2><P>
<h3>Rex Jaeschke</h3><P>
<p><i><a name="008a_0022"><a name="008a_0000">Rex is the chair of X3J11, the committee responsible for the ANSI C Standard. Rex can be reached at rex@aussie.com.</i></p><hr><P>
ANSI and ISO rules require that standards be reviewed five years after their adoption. Because the original ANSI C Standard was adopted in 1989 and replaced by the ANSI/ISO C Standard in 1990, the standard must be reviewed this year. There are three possible outcomes from such a review:<P>
<UL>
<li>Withdraw the standard because it no longer is applicable.</li>
<li>Re-endorse the standard as is. That is, determine that it still meets the needs of industry and requires no enhancements at this time.</li>
<li>Revise the standard, primarily to incorporate features deemed necessary or useful. These features might reflect new demands in the industry, for example, or they may be the result of experimentation through vendor extensions.</li>
</UL>
In 1994, at the request of national member bodies, P.J. Plauger, convener of SC22/WG14 (the committee responsible for the ISO C Standard), obtained permission to begin a review of ISO C prior to the required review. Serious discussion regarding a review began at the Tokyo meeting in June 1994, where the committee decided to revise the standard. The committee also decided not to let C be constrained to a subset of C++. To paraphrase an unofficial C++ Standard principle, we want to be as compatible with C++ as possible, but no more so.<P>
Consequently, we re-endorsed the guiding principles used in defining the original ANSI C Standard:<P>
<UL>
<li>Existing code is important, existing implementations are not.</li>
<li>C code can be portable.</li>
<li>C code can be nonportable.</li>
<li>Avoid quiet changes.</li>
<li>A standard is a treaty between implementor and programmer.</li>
<li>Keep the spirit of C.</li>
</UL>
To these, we added some new principles:<P>
<UL>
<li>Support international programming.</li>
<li>Codify existing practice to address evident deficiencies.</li>
<li>Minimize incompatibilities with C90.</li>
<li>Minimize incompatibilities with C++.</li>
<li>Maintain conceptual simplicity.</li>
</UL>
Although there has been no real opposition within the standard's committee, more than a few have criticized our decision to revise the C Standard. The most common complaint I hear is: &quot;Why bother? It is obvious that C++ is <I>the</I> future of C!&quot; Our response is: &quot;Regarding our relationship with C++, we are content to let C++ be the big and ambitious language. While we may well embrace some features of C++, it is not our intention that C become C++.&quot;<P>
At a previous meeting, I volunteered to draft the charter for C9X (as the revision is unofficially known). This charter was refined at the Tokyo meeting, then again at the Plano, Texas, meeting in December 1994.<P>
To help us focus on the job at hand and give the user community a good idea of our timetable, we propose to spell out, in detail, what C9X will look like, by December 1996, and to have a revised standard adopted within three years of that date.<P>
To help reduce the amount of pure invention, we adopted the principle &quot;Codify existing practice to address evident deficiencies.&quot; That is, we accept only those concepts that have some prior art (not necessarily from C implementations). Unless some proposed new feature addresses a deficiency felt by more than a few C programmers, we will not entertain it. To achieve this essential goal, some good (but inventive) proposals will probably have to be rejected.<P>
By the time you read this, we will have met in Copenhagen, Denmark (June 12-16, 1995) to debate technical proposals for C9X. At this stage, eight major proposals are expected: <P>
<UL>
<li>Restricted pointers.</li>
<li>Variable-length arrays.</li>
<li>Designated initializers.</li>
<li>Compound literals.</li>
<li>Floating-point extensions.</li>
<li>Complex arithmetic.</li>
<li>Extended integer support.</li>
<li>Some form of C++-like class support.</li>
</UL>
The first seven are the result of the Numerical C Extensions Group work I started back in 1989. Eventually, this project became part of X3J11's charter. This project has been completed and is in the process of being accepted by ANSI as a Technical Report (TR). The &quot;Data Parallel C Extensions&quot; component of the TR was not proposed for inclusion in C9X. We felt this field was rapidly evolving and that a standard for these features was premature.<P>
<h3><a name="008a_0024">Restricted Pointers<a name="008a_0024"></h3><P>
The proposal concerning restricted pointers involves the addition of a type qualifier called <I>restrict</I>. In some sense, <I>restrict</I> is complementary to <I>volatile</I>; whereas <I>volatile</I> inhibits certain optimizations, <I>restrict</I> explicitly allows some optimizations. <P>
A significant obstacle to optimization is aliases to objects, via the use of pointers. Often, the information available in a function, or even within a compilation unit, is insufficient to determine whether two pointers can point to the same object.<P>
By declaring a pointer restrict-qualified, we indicate that it points to a unique object, as if that object were allocated by a call to <I>malloc</I>. Note that the restrict qualifier can only be applied to a data pointer; it is a constraint violation to apply it to a nonpointer object or to a function pointer.<P>
Late in the development process for the original ANSI C Standard, the keyword <I>noalias</I> was added to the draft; three months later, it was withdrawn. The definitions of <I>noalias</I> and <I>restrict</I> overlap, but <I>restrict</I> is a more conservative approach that, for those vendors that have already implemented it, provides a good deal of bang for their buck.<P>
<h3><a name="008a_0025">Variable-Length Arrays<a name="008a_0025"></h3><P>
The proposal for variable-length arrays allows the size of an array dimension to be specified at run time, provided that array has automatic storage duration or is a formal parameter; see <a href="#008a_002e">Example 1</A>. A variable-length array cannot be a member of a structure or union. <P>
If an array is declared using a size of * (as in <I>int i[</I>*<I>];</I>), then it is a variable-length array type of unspecified size, which can only be used in declarations with function-prototype scope. If the size is a nonconstant expression, that expression must have some integer type, and shall evaluate to a value greater than 0 at run time. The expression may contain side effects. The size of a variable-length array does not change until the execution of the block containing its declaration has ended. Because the size of a variable-length array cannot normally be determined until run time, <I>sizeof</I> usually must determine its size at run time.<P>
<h3><a name="008a_0026">Designated Initializers<a name="008a_0026"></h3><P>
This designated-initializers proposal extends initializer syntax to allow two new forms. It allows specific elements of an array or specific members of a structure to be initialized without regard to their relative position within the array or structure. For instance, <a href="#008a_002f">Example 2(a)</A> initializes elements 0, 1, 17, and 18 explicitly, with elements 2-16 and 19 taking on the value 0; <a href="#008a_002f">Example 2(b)</A> allows new enumeration constants to be added at the front or middle of the list, or the list order to be rearranged, without requiring the array's initializer list to be changed. As <a href="#008a_002f">Example 2(c)</A> illustrates, structure members can be initialized in a like manner.<P>
<h3><a name="008a_0027">Compound Literals<a name="008a_0027"></h3><P>
The proposed compound literals allow an unnamed object to be constructed at run time using syntax like that of a <I>cast</I>, providing a capability similar to a C++ constructor; see <a href="#008a_0030">Example 3</A>.<P>
In case 1, you construct an array at run time from the expression list shown. The <I>const</I> qualifier prohibits write access to that array.<P>
In case 2, you construct two unnamed <I>Point</I> structures, which you then pass by address to <I>drawline</I>.<P>
In the case of array and structure compound literals, this proposal can take advantage of designated initializers.<P>
<h3><a name="008a_0028">Floating-Point Extensions<a name="008a_0028"></h3><P>
The floating-point extensions proposal provides machinery to achieve more predictable floating-point arithmetic in general, as well as a binding for IEEE-based implementations. It achieves this via the addition of numerous operator-like macros, several pragmas, some predefined macros, and an extensive library of functions declared in several headers. While the library portion proposes support for overloaded functions, this mechanism is not intended for general use by programmers.<P>
<h3><a name="008a_0029">Complex Arithmetic<a name="008a_0029"></h3><P>
The proposal for complex arithmetic specifies a set of extensions to support <I>float</I>, <I>double</I>, and <I>long double</I> complex types and arithmetic operations on expressions having those types. For C++ compatibility, the type names are <I>float_complex</I>, <I>double_complex</I>, and <I>long_double_complex</I> rather than <I>float complex</I>, <I>double complex</I>, and <I>long double complex</I>. A family of imaginary types is also proposed, with names <I>float_imaginary</I>, <I>double_imaginary</I>, and <I>long_double_imaginary</I>. The imaginary constant <I>i</I> is available via the macro <I>I</I>, defined in complex.h. The standard math library is extended to support complex arguments. <P>
<h3><a name="008a_002a">Extended Integer Support<a name="008a_002a"></h3><P>
The extended-integer-support proposal defines a header inttypes.h, containing a family of macros and type synonyms that allow the programmer to find out the available set of integer precisions and to define objects of a minimum precision. <a href="#008a_0031">Table 1</A> provides a sampling of the type synonyms.<P>
A family of macros similar to those in limits.h defines the minima and maxima for these types. If a type is not supported, its corresponding macros will be undefined, allowing code to be conditionally compiled.<P>
Another family of macros allows portable calls to <I>printf</I> and <I>scanf</I>, even though different implementations may define different conversion specifiers.<P>
<h3><a name="008a_002b">C++-like Class Support<a name="008a_002b"></h3><P>
The initial discussion has focused primarily on encapsulation and the addition of the keywords <I>class</I>,<I> private, </I>and<I> public</I>, with some discussion of single inheritance and virtual functions. At the time of writing, the latest revision of this proposal has not yet been finalized. However, previous versions excluded constructors and destructors, which eliminated a number of technical problems, as well as some benefits.<P>
<h3><a name="008a_002c">Miscellaneous Proposals<a name="008a_002c"></h3><P>
The following issues have been debated via our e-mail reflector and/or are on the agenda for the Copenhagen meeting:<P>
<UL>
<li>Allow <I>#line</I> lines within macro calls to help programs that mechanically generate C source code. (The proposal was rejected.)</li>
<li>Improve random-number guidelines to enhance the quality of number sequences generated by the <I>rand</I> function.</li>
<li>Add a Boolean type.</li>
<li>Add string classification and conversion functions. This proposes the addition of equivalent string functions for the <I>ctype</I> character routines.</li>
<li>Add signed-integer division. Currently, if either operand is negative, signed-integer division has implementation-defined semantics. This proposal suggests we make them well defined, using the same rules as Fortran.</li>
<li>Add a big-integer library, a specification for an extensive set of functions that provide support for at least 64-bit integers. This includes issues such as representation and Endianness.</li>
<li>Add the predefined identifier __FUNC__ to allow access to the name of the enclosing function for use in debugging statements and the <I>assert</I> macro.</li>
<li>Deprecate the keyword <I>auto</I>. This keyword is never needed, so why do we continue to support it?</li>
<li>Allow empty arguments in macro replacement. Allowing macro calls such as M(10,) or M(,20) is useful, particularly when used with the preprocessor operators.</li>
<li>Add //-style comments. Mainstream C compilers provide these as an extension and many C programmers think these comments are already part of Standard C.</li>
<li>Deprecate implicit <I>int</I> in declarations. Currently, if a type specifier is omitted, <I>int</I> is assumed (for example, in static <I>i;</I>). Also, in an old-style function definition such as <I>void f(i){}, i</I> has an implied type of <I>int</I>.</li>
<li>Move toward a single type for character. This is an attempt to somehow combine <I>char</I> and <I>wchar_t</I>. The whole issue of <I>bytes</I> versus <I>chars</I> versus <I>characters</I> needs to be reexamined, particularly in light of the expanding support for and standardization of large character sets.</li>
<li>Add nested functions.</li>
<li>Extend the integer-type system. Define syntax to allow an open-ended scheme for specifying the minimum or exact bit width desired for an integer object.</li>
<li>Add tag compatibility to address issues relating to the compatibility of multiple structure, union, or enumeration types declared in separate translation units.</li>
</UL>
<h3><a name="008a_002d">Conclusion<a name="008a_002d"></h3><P>
It is too early to predict just what will be in C9X. However, the seven proposals arising from the ANSI TR have been under development for three to five years, and all have been implemented by one or more vendors. Therefore, it seems reasonable that at least some of these will make the final cut, but not necessarily in their current form. As to the adoption of something substantial from C++, I think that the considerable sentiment for such proposals will generate the most controversy and animated debate. No doubt there will also be numerous wording improvements and minor additions, such as the inclusion of //-style comments. In any event, it's a safe bet that the resulting language will still look like the C we currently know and love.<P>
<a name="008a_002e"><B>Example 1:</B> Variable-length arrays.<a name="008a_002e">
<pre>
extern int n;
void f(int m, int x[m][n])
{
    char c[m];
    int (*p)[n];
}
</pre>
<a name="008a_002f"><B>Example 2:</B> (a) Initializing elements; (b) adding new enumeration constants; (c) initializing structure members.<a name="008a_002f">
<pre>
(a)
int i[20] = {5, 10, [17] = 50, 60};

(b)
enum color { red, green, blue };
unsigned int total[] = {
    [red]   = 100,
    [blue]  = 200,
    [green] = 50
};

(c)
struct date {
    int year;
    int month;
    int day;
};
struct date birthday = {
    [month] = 1,
    [day]   = 2,
    [year]  = 1950
};
</pre>
<a name="008a_0030"><B>Example 3:</B> Compound literals.<a name="008a_0030">
<pre>
struct Point {
    int x;
    int y;
};
void drawline(struct Point *, struct Point *);
void f(int x2, int y2)
{
/*1*/   const int *p = (int []){x2, 5, y2, 4};
/*2*/   drawline(&amp;(struct Point){0,0}, &amp;(struct Point){x2,y2});
}</pre>
<a name="008a_0031"><B>Table 1:</B> Extended integer support.<a name="008a_0031">
<pre>
Macro           Description

<I>int8_t</I>         8-bit signed integer.
<I>int16_t</I>        16-bit signed integer.
<I>int32_t</I>        32-bit signed integer.
<I>int64_t</I>        64-bit signed integer.
<I>intptr_t</I>       Signed integer type capable of holding a void.
<I>uintfast_t</I>     Most-efficient unsigned integer type.
<I>uint_least8_t</I>  Smallest unsigned integer having at least 8 bits.
</pre><P>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
