<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>AUG95: The C++ Standard Library</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>The C++ Standard Library<a name="00bb_002f"><a name="00bb_002d"><a name="00bb_0000"></h1><P>
<h2>An extensible collection of software components</h2><P>
<h3>Michael J. Vilot</h3><P>
<p><i><a name="00bb_002e"><a name="00bb_0000">Michael, who is president of ObjectCraft and a columnist for <I>The C++Report</I>, chairs the Library Working Group of the ANSIX3J16. He can be contacted at mjv@objects.mv.com.</i></p><hr><P>
After five years of discussion, the ANSI and ISO C++ Committees have released the Committee Draft (CD), their first official document. The CD has recently been circulated for review and comment by the international C++ development community. The CD, which X3J16/WG21 released, can be found at the following addresses: ftp://research.att.com/dist/stdc++/WP, http://www.cygnus.com/~mrs/wp-draft/~mrs, http://www.maths  .warwick.ac.uk/c++ and ftp://maths.warwick.ac.uk/pub/c++/std/wp.<P>
If you're familiar with Ellis and Stroustrup's <I>The Annotated C++ Reference Manual</I> (ARM), you'll find few surprises. While somewhat wordier, the CD describes the C++ language using essentially the same organization and format as the ARM. Namespaces, run-time type identification, and the new cast notation are probably the most significant additions to the language not anticipated in the ARM.<P>
The biggest differences between &quot;ARM C++&quot; and &quot;Standard C++&quot; are not in the language, however, but in the available library facilities. Over half the CD text explains the many components in the C++ Standard Library.<P>
Instead of trying to cover every aspect of the library in this article, I'll focus on the most commonly used components: <I>iostream</I>s, strings, and some of the containers, iterators, and algorithms included in the C++ Standard Library from the HP C++ Standard Template Library (STL).<P>
<h3><a name="00bb_0030">Library Overview<a name="00bb_0030"></h3><P>
Unlike GUI components or application frameworks, the C++ Standard Library provides general-purpose components for common programming tasks. Its main value is in providing efficient and reliable templates, classes, and functions that eliminate the need to handcraft low-level data structures and algorithms. As such, it can be used both by nontrivial C++ programs and as the foundation for more-ambitious libraries.<P>
The essential structure of the C++ Standard Library can be represented by <a href="199500bd.htm">Figure 1</A>. Each of the ten categories provide definitions for the following types of Standard entities: macros, values, types, templates, classes (and <I>struct</I>s), functions (including operators), and objects. Since many of the nonmember functions operate upon instances of the specified classes, the collection of such functions and their associated class is often referred to as a &quot;component.&quot;<P>
The Language Support components are required by certain parts of the C++ language, such as dynamic-memory allocation and exception processing. The Diagnostics category includes the definition of the standard exceptions thrown by other library components, providing support for uniform error reporting by the library. General Utilities components are used by other standard-library components (including the memory allocator used throughout the STL components) but can also be used directly by C++ programs.<P>
The Strings category provides basic text representation and manipulation, while Localization components provide locale-dependent formatting facilities.<P>
The Containers, Iterators, and Algorithms categories incorporate the essential elements of the STL library. The Numerics category includes the STL generalized numeric algorithms, complex numbers, and support for array-based (<I>n</I>-at-a-time) computations. The Input/Output category is the largest, and it contains the <I>iostream</I>'s components.<P>
The C++ Standard Library also provides the facilities of the amended ISO Standard C library, suitably adjusted to ensure static type safety. The components of this library are referenced, as needed, from the various categories.<P>
<h3><a name="00bb_0031">Headers<a name="00bb_0031"></h3><P>
As with C, a C++ program gains access to standard-library facilities by <I>#include</I>ing the appropriate header(s). The C++ Standard defines 68 headers. These additional headers are the result of reconciling two conflicting goals: C++ namespace organization, and compatibility with existing C++ source code. <a href="#00bb_0035">Table 1</A> lists the 32 new C++ headers.<P>
In Standard C++, all library entities (except preprocessor macros) are defined within the namespace <I>std</I>. In C, all library entities are defined in the global namespace. To retain the advantages of an organized namespace, yet preserve the meaning of existing C library <I>#include</I> directives, the facilities of the Standard C Library are provided in additional headers; see <a href="#00bb_0036">Table 2</A>.<P>
The contents of each header <I>cname </I>are essentially the same as the corresponding C header name.h, as specified in the ISO C standard. In the C++ Standard Library, however, these declarations and definitions are within the scope of the <I>std</I> namespace.<P>
Therefore, the C++ Standard Library also supports the 18 name.h (C header) forms. Each of these headers <I>#include</I>s the corresponding <I>cname</I> header and the appropriate using declarations in order to place all of its declarations and definitions into the global namespace.<P>
Thus, a C++ program can be ported quickly from its C version, as shown in <a href="#00bb_003d">Listing One</A>. Conversely, the program could be written as a C++ program that is meticulous about its namespaces; see <a href="#00bb_003f">Listing Two</A>.<P>
These programs illustrate some of the most common tasks performed in C and C++ programs: handling string text to and from files in secondary storage. The C++ Standard Library provides components that simplify these tasks.<P>
<h3><a name="00bb_0032">Strings and <I>iostream</I>s<a name="00bb_0032"></h3><P>
Consider the relatively straightforward programming task of displaying the contents of a text file. <a href="#00bb_0041">Listing Three</A> uses the facilities of the Standard C library to open the file named in its command-line argument, read the file a line at a time, and print out each line on the standard output (preceded by the number of characters in the line). The essential part of this program involves only four lines: those containing <I>fopen()</I>, <I>feof()</I>, <I>fgets()</I>, and <I>printf()</I>. The rest is error handling and recovery. Given a simple text file (such as a daily &quot;to-do&quot; list), the program produces the output in <a href="#00bb_0043">Listing Four</A>. <a href="#00bb_0045">Listing Five</A> performs the same task, using the string and <I>iostream </I>components from the C++ Standard Library. It is noticeably shorter, mostly because the <I>iostream</I> components encapsulate much of the file-related error checking. <I>iostream</I>s are the preferred mechanism for C++ program input and output. The components in the C++ Standard Library (such as strings, locales, and complex numbers) overload the &gt;&gt; and &lt;&lt; operators to provide formatted input and output using <I>iostream</I>s. The Standard <I>iostream</I>s are much the same as those that  C++ developers have been using for the past ten years. <a href="#00bb_0037">Table 3</A> summarizes only the components provided in the standard headers <I>&lt;iosfwd&gt;</I>, <I>&lt;iostream&gt;</I>, <I>&lt;ios&gt;</I>, <I>&lt;streambuf&gt;</I>, <I>&lt;istream&gt;</I>, <I>&lt;ostream&gt;</I>, <I>&lt;iomanip&gt;</I>, <I>&lt;sstream&gt;</I>, and <I>&lt;fstream&gt;</I>.<P>
The <I>iostream</I> facilities have been generalized to accommodate both <I>char</I>- and <I>wchar_t</I>-based character sequences (and others). The older C library facilities are also available, in <I>&lt;cstdio&gt; </I>(for <I>char</I>s) and <I>&lt;cwchar&gt;</I> (for <I>wchar_t</I>s).<P>
The C++ Standard Library also provides components for manipulating sequences of <I>characters</I>, where <I>characters</I> may be of type <I>char</I>, <I>wchar_t</I>, or of a type defined in a C++ program. It provides both the C++ string classes and null-terminated sequence utilities from the C library. <a href="#00bb_0038">Table 4</A> summarizes the string components from the standard header <I>&lt;string&gt;</I>.<P>
The library provides a <I>basic_string</I> template, which defines the semantics of strings. The string and wstring types are predefined template instantiations (of <I>basic_string&lt;char&gt;</I> and <I>basic_string&lt;wchar_t&gt;</I>, respectively) provided by the library.<P>
The older C library facilities are also available, provided by the standard headers <I>&lt;cctype&gt;</I>, <I>&lt;cwctype&gt;</I>, <I>&lt;cstring&gt;</I>, <I>&lt;cwchar&gt;</I>, and the multibyte conversions from <I>&lt;cstdlib&gt;</I>.<P>
<h3><a name="00bb_0033">Containers, Iterators, and Algorithms<a name="00bb_0033"></h3><P>
A more interesting application involving to-do lists might sort them according to certain criteria. It would be handy to first read the list in from the file and then keep it around in memory. The C++ program in <a href="#00bb_0047">Listing Six</A> uses the most obvious representation: a simple list of strings. <P>
This program uses two more components from the C++ Standard Library: an instance of the <I>list</I> template to hold the strings describing things to do, and an <I>iterator</I> type to step through the list and print each item.<P>
Lists are just one component that C++ programs may use to organize collections of information. <a href="#00bb_0039">Table 5</A> summarizes the standard sequences and associative containers. The &lt; and == relations are defined so that these containers can be used with the standard iterator and algorithm components. A C++ program may define additional container components. With suitably defined relational operations, they can also be used with the standard iterator and algorithm components.<P>
Iterators are the &quot;glue&quot; between the standard containers and the algorithms that operate upon them. <a href="#00bb_003a">Table 6</A> summarizes the components for iterator tags, predefined iterators, stream iterators, and streambuf iterators from the standard header <I>&lt;iterator&gt;</I>. <P>
C++ programs are not restricted to using the specific predefined iterator components. For example, pointers and pointer arithmetic can be used as iterators over many sequences. The standard algorithms work equally well with both kinds of iterators. <a href="#00bb_003b">Table 7</A> lists the algorithm components from the standard header <I>&lt;algorithm&gt;</I>.<P>
<a href="#00bb_0049">Listing Seven</A> uses iterators to invoke the standard <I>sort()</I> algorithm on the to-do list. Since <I>sort()</I> requires random access to the elements to be sorted, this version of the program uses a vector instead of a list. The rest of the program is the same as before. This program uses the default ordering relation on strings (<I>operator&lt;</I>) to sort the to-do list. While this works well as a default, it is subject to the vagaries of local string representation. For example, <a href="#00bb_004b">Listing Eight</A> shows how this program can be led into making a mistake when the input has some unfortunate spaces (in the default ASCII collation, spaces sort before other characters).<P>
The next version of the program takes a more comprehensive approach to prioritizing to-do items. In addition to a numerical ranking, each item can have a due date. <a href="#00bb_004d">Listing Nine</A> contains the necessary scaffolding.<P>
With these definitions in place, it requires very little change to support relatively sophisticated to-do-list processing. <a href="#00bb_004f">Listing Ten</A> is essentially the same as the previous version, requiring only the substitution of the new representation of the items on the list.<P>
Given the correct handling of date input and ordering (via <I>struct when</I>), the program will now correctly sort the to-do list items. <a href="#00bb_0051">Listing Eleven</A> shows the result, sorting by date and ordinal priority within each date.<P>
The final version of this program is only slightly more clever. Rather than waiting until it reads all the to-do items to explicitly sort the list, it sorts the list as it reads each item. <a href="#00bb_0053">Listing Twelve</A> uses a self-organizing data structure, the standard <I>priority_queue</I>, to keep the list sorted.<P>
<h3><a name="00bb_0034">Conclusion<a name="00bb_0034"></h3><P>
The C++ Standard Library is large, providing dozens of classes and hundreds of functions--most of them templates. Although larger than the Standard C Library, it is still smaller than many commercial C++ class libraries in widespread use today. The C++ Standard Library provides an extensible collection of flexible, general-purpose software components that can be used directly by a C++ program or extended and combined as the basis for even more ambitious C++ class libraries.<P>
The library has a clear organization, which makes it easier to describe, understand, extend, and use its components. In this article, I've provided a glimpse of the powerful capabilities contained in the library. C++ developers will be finding creative uses for these components--especially the standard data structures and algorithms--for many years to come.<P>
<B><a href="199500be.htm">Figure 1</A>:</B> The major functional areas of the C++Standard Library.<p>
<a name="00bb_0035"><B>Table 1:</B> C++ Standard Library headers.<a name="00bb_0035"><p><pre>
&lt;algorithm&gt;     &lt;new&gt;
&lt;bitset&gt;        &lt;numeric&gt;
&lt;complex&gt;       &lt;ostream&gt;
&lt;deque&gt;         &lt;queue&gt;
&lt;exception&gt;     &lt;set&gt;
&lt;fstream&gt;       &lt;sstream&gt;
&lt;functional&gt;    &lt;stack&gt;
&lt;iomanip&gt;       &lt;stdexcept&gt;
&lt;ios&gt;           &lt;streambuf&gt;
&lt;iosfwd&gt;        &lt;string&gt;
&lt;iostream&gt;      &lt;typeinfo&gt;
&lt;istream&gt;       &lt;utility&gt;
&lt;iterator&gt;      &lt;valarray&gt;
&lt;limits&gt;        &lt;vector&gt;
&lt;list&gt;          &lt;set&gt;
&lt;locale&gt;        &lt;sstream&gt;
&lt;map&gt;           &lt;stack&gt;
&lt;memory&gt;        &lt;stdexcept&gt;</pre>
<a name="00bb_0036"><B>Table 2:</B> C++ headers for C library facilities.<a name="00bb_0036"><p><pre>
&lt;cassert&gt;
&lt;cctype&gt;
&lt;cerrno&gt;
&lt;cfloat&gt;
&lt;ciso646&gt;
&lt;climits&gt;
&lt;clocale&gt;
&lt;cmath&gt;
&lt;csetjmp&gt;
&lt;csignal&gt;
&lt;cstdarg&gt;
&lt;cstddef&gt;
&lt;cstdio&gt;
&lt;cstdlib&gt;
&lt;cstring&gt;
&lt;ctime&gt;
&lt;cwchar&gt;
&lt;cwctype&gt;
&lt;cmath&gt;
&lt;csetjmp&gt;
&lt;csignal&gt;
&lt;cstdarg&gt;
&lt;cstddef&gt;
&lt;cstdio&gt;
&lt;cstdlib&gt;
&lt;cstring</pre>
<a name="00bb_0037"><B>Table 3:</B> iostream synopsis. (a) Template classes; (b) classes; (c) types; (d) objects.<a name="00bb_0037"><p><pre>
(a)
basic_ios
ios_traits
basic_streambuf
basic_istream
basic_ostream
basic_stringbuf
basic_istringstream
basic_ostringstream
basic_filebuf
basic_ifstream
basic_ofstream
(b)
ios_base
(c)
ios
wios
streambuf
istream
wistream
wstreambuf
ostream
wostream
stringbuf
istringstream
wistringstream
wstringbuf
ostringstream
wostringstream
filebuf
ifstream
wifstream
wfilebuf
ofstream
wofstream
(d)
cin
cout
win
cerr
clog
wout
werr
wlog</pre>
<a name="00bb_0038"><B>Table 4:</B> String synopsis. (a) Template class; (b) types; (c) operations; (d) iterator access; (e) capacity; (f) element access; (g) modifiers; (h) string operations.<a name="00bb_0038"><p><pre>
(a)     basic_string
(b)     string
        wstring
(c)     Construct, copy, assign
(d)     begin(), end()
        rbegin(), rend()
(e)     empty(), size(), length()
        max_size(), capacity()
        resize(), reserve()
(f)     at(), operator[]
        c_str(), data()
(g)     append(), operator+=
        assign(), insert()
        remove(), replace()
        copy(), swap()
(h)     find()
        rfind()
        find_first_of()
        find_last_of()
        find_first_not_of()
        find_last_not_of()
        compare()
        getline()</pre>
<a name="00bb_0039"><B>Table 5:</B> Container synopsis.<a name="00bb_0039"><p><pre>
Header    Component(s)

&lt;bitset&gt;  bitset
&lt;deque&gt;   deque
&lt;list&gt;    list
&lt;map&gt;     map, multimap
&lt;queue&gt;   queue, priority_queue
&lt;set&gt;     set, multiset
&lt;stack&gt;   stack
&lt;vector&gt;  vector, vector&lt;bool&gt;</pre>
<a name="00bb_003a"><B>Table 6:</B> Iterator synopsis. (a) Template classes; (b) template structs.<a name="00bb_003a"><p><pre>
(a)
istream_iterator<P>back_insert_iterator<P>ostream_iterator<P>front_insert_iterator<P>reverse_bidirectional_iterator<P>insert_iterator<P>reverse_iterator<P>istreambuf_iterator<P>ostreambuf_iterator
(b)
bidirectional_iterator<P>input_iterator<P>forward_iterator<P>random_access_iterator</pre>
<a name="00bb_003b"><B>Table 7:</B> Algorithm synopsis.<a name="00bb_003b"><p><pre>
adjacent_find
pop_heap
binary_search
prev_permutation
copy
push_heap
copy_backward
random_shuffle
count
remove
count_if
remove_copy
equal
remove_copy_if
equ-al_range
remove_if
fill
replace
fill_n
replace_copy
find
replace_copy_if
find_if
replace_if
for_each
reverse
generate
reverse_copy
generate_n
rotate
includes
rotate_copy
inplace_merge
search
lexicographical_compare
set_difference
lower_bound
set_intersection
make_heap
set_symmetric_difference
max
set_union
max_element
sort
merge
sort_heap
min
stable_partition
min_element
stable_sort
mismatch
swap
next_permutation
swap_ranges
nth_element
transform
partial_sort
unique
partial_sort_copy
unique_copy
partition
upper_bound</pre><P>
<P>
<h4><a name="00bb_003c"><a name="00bb_003d">Listing One <a name="00bb_003d"></h4><pre>
#include &lt;string.h&gt; // C library functions
#include &lt;stdio.h&gt;  // are in the global namespace
int main()
{
  char h[] = &quot;hello, &quot;;
  char w[] = &quot;world\n&quot;;
  char hw[sizeof h + sizeof w];
  strcpy(hw, h);    // catenate strings
  strcat(hw, &quot; &quot;);
  strcat(hw, w);
  printf(hw);   // output
  return 0;
}
</pre>
<h4><a name="00bb_003e"><a name="00bb_003f">Listing Two <a name="00bb_003f"></h4><pre>
#include &lt;cstring&gt;  // same C library functions
#include &lt;cstdio&gt;   // in namespace std
int main()
{
  char h[] = &quot;hello,&quot;;
  char w[] = &quot;world\n&quot;;
  char hw[sizeof h + sizeof w];
  std::strcpy(hw, h);
  std::strcat(hw, &quot; &quot;);
  std::strcat(hw, w);
  std::printf(hw);
  return 0;
}
</pre>
<h4><a name="00bb_0040"><a name="00bb_0041">Listing Three<a name="00bb_0041"></h4><pre>
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt; // for EXIT_FAILURE
int main(int argc, char* argv[])    // copy file to stdout
{
  FILE* file = fopen(argv[1], &quot;r&quot;);
  char errbuf[80];  // just in case
  if (!file) {
    sprintf(errbuf, &quot;%s no good&quot;, argv[1]);
    perror(errbuf);
    return EXIT_FAILURE;
  }
  while ( !feof(file) ) {
    char line[256]; // hopefully large enough
    char* ok = fgets(line, sizeof line, file);
    if (!ok) {
      sprintf(errbuf, &quot;read error on %s&quot;, argv[1]);
      perror(errbuf);
      return EXIT_FAILURE;
    }
    printf(&quot;[%2d]\t%s&quot;, strlen(line), line);    // has '\n' already
  }
  return 0;
}
</pre>
<h4><a name="00bb_0042"><a name="00bb_0043">Listing Four<a name="00bb_0043"></h4><pre>
[18]    End the arms race
[ 6]    Floss
</pre>
<h4><a name="00bb_0044"><a name="00bb_0045">Listing Five<a name="00bb_0045"></h4><pre>
#include &lt;string&gt;
#include &lt;fstream&gt;
#include &lt;iomanip&gt;  // for setw
int main(int argc, char* argv[])    // copy file to cout
{
  using namespace std;
  ifstream in(argv[1]);
  while (in.good()) {
    string line;
    if (getline(in, line))
      cout &lt;&lt; '[' &lt;&lt; setw(2) &lt;&lt; line.size()&lt;&lt; ']' &lt;&lt; '\t' &lt;&lt; line &lt;&lt; endl;
  }
  return 0;
}
</pre>
<h4><a name="00bb_0046"><a name="00bb_0047">Listing Six<a name="00bb_0047"></h4><pre>
#include &lt;string&gt;
#include &lt;fstream&gt;
#include &lt;list&gt;
int main(int argc, char* argv[])
{
  using namespace std;
  ifstream in(argv[1]);
  typedef list&lt;string&gt; ToDo_List;
  ToDo_List to_do;
  while (in.good()) {
    string buf;  getline(in, buf);  to_do.push_back(buf);
  }
  typedef ToDo_List::iterator iter;
  for (iter i = to_do.begin(); i != to_do.end(); ++i)
    cout &lt;&lt; *i &lt;&lt; endl;
  return 0;
}
</pre>
<h4><a name="00bb_0048"><a name="00bb_0049">Listing Seven<a name="00bb_0049"></h4><pre>
#include &lt;string&gt;
#include &lt;fstream&gt;
#include &lt;vector&gt;   // for random access via operator[]
#include &lt;algorithm&gt;    // for sort()
int main(int argc, char* argv[])
{
  using namespace std;
  ifstream in(argv[1]);
  typedef vector&lt;string&gt; ToDo_List;
  ToDo_List to_do;
  while (in.good()) {
    string buf;  getline(in, buf);  to_do.push_back(buf);
  }
  typedef ToDo_List::iterator iter;
  for (iter i = to_do.begin(); i != to_do.end(); ++i)
    cout &lt;&lt; *i &lt;&lt; endl;
  sort(to_do.begin(), to_do.end());
  cout &lt;&lt; &quot;\nSorted:&quot; &lt;&lt; endl;
  for (iter j = to_do.begin(); j != to_do.end(); ++j)
    cout &lt;&lt; *j &lt;&lt; endl;
  return 0;
}
</pre>
<h4><a name="00bb_004a"><a name="00bb_004b">Listing Eight<a name="00bb_004b"></h4><pre>
Input:
1. End the arms race
 2. Floss
Output:
 2. Floss
1. End the arms race
</pre>
<h4><a name="00bb_004c"><a name="00bb_004d">Listing Nine<a name="00bb_004d"></h4><pre>
// todo.h
#ifndef TODO_H
#define TODO_H
#include &lt;string&gt;
#include &lt;iosfwd&gt;   // for istream&amp;, ostream&amp;
struct when {
  int month;    // range 1..12
  int day;      // range 1..31
};
struct to_do {
  when        date;
  int         priority;
  std::string what;
};
int operator&lt;(const to_do&amp; td1, const to_do&amp; td2);
int operator&gt;(const to_do&amp; td1, const to_do&amp; td2);
std::istream&amp; operator&gt;&gt;(std::istream&amp; in,  to_do&amp; td);
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const to_do&amp; td);
#endif
</pre>
<h4><a name="00bb_004e"><a name="00bb_004f">Listing Ten<a name="00bb_004f"></h4><pre>
#include &lt;string&gt;
#include &lt;fstream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;    // for sort()
#include &quot;todo.h&quot;
int main(int argc, char* argv[])
{
  using namespace std;
  ifstream in(argv[1]);
  typedef vector&lt;to_do&gt; ToDo_List;
  ToDo_List td;
  while (in.good()) {
    to_do buf;  in &gt;&gt; buf;  td.push_back(buf);
  }
  typedef ToDo_List::iterator iter;
  for (iter i = td.begin(); i != td.end(); ++i)
    cout &lt;&lt; *i &lt;&lt; endl;
  sort(td.begin(), td.end());
  cout &lt;&lt; &quot;\nSorted:&quot; &lt;&lt; endl;
  for (iter j = td.begin(); j != td.end(); ++j)
    cout &lt;&lt; *j &lt;&lt; endl;
  return 0;
}
</pre>
<h4><a name="00bb_0050"><a name="00bb_0051">Listing Eleven<a name="00bb_0051"></h4><pre>
Input:
Mar 31  3  Get April Fool's jokes
Mar 31  1  Pick up laundry
Jun  3  2  Dentist appointment
Jan  1  1  Stop the arms race
Jun  2  1  Floss
Output:
Jan  1  1  Stop the arms race
Mar 31  1  Pick up laundry
Mar 31  3  Get April Fool's jokes
Jun  2  1  Floss
Jun  3  2  Dentist appointment
</pre>
<h4><a name="00bb_0052"><a name="00bb_0053">Listing Twelve<a name="00bb_0053"></h4><pre>
#include &lt;string&gt;
#include &lt;fstream&gt;
#include &lt;vector&gt;
#include &lt;queue&gt;    // for priority_queue
#include &lt;functional&gt;   // for greater
#include &quot;todo.h&quot;
int main(int argc, char* argv[])
{
  using namespace std;
  ifstream in(argv[1]);
  typedef
    priority_queue&lt; vector&lt;to_do&gt;, greater&lt;to_do&gt; &gt;
      ToDo_List;
  ToDo_List td;
  while (in.good()) {
    to_do buf;  in &gt;&gt; buf;
    td.push(buf);   // sorts as it stores
  }
  while (td.size()) {   // get each item, in sorted order:
    cout &lt;&lt; td.top() &lt;&lt; endl;
    td.pop();
  }
  return 0;
}
DDJ
</pre>

<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
