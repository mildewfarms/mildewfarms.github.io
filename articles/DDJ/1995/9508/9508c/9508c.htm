<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>AUG95: A Pooling Memory Manager for C++</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>A Pooling Memory Manager for C++<a name="008c_0025"><a name="008c_0023"><a name="008c_0000"></h1><P>
<h2>Plugging memory leaks and chasing null pointers</h2><P>
<h3>Kirit Saelensminde</h3><P>
<p><i><a name="008c_0024"><a name="008c_0000">Kirit works for Motion Graphics Limited in London. He can be contacted at kgs@mgl.win-uk.net.</i></p><hr><P>
Raytracers make huge demands on memory. In the process of rendering a 96x128-pixel image, for instance, a ray-tracing program was allocating and deallocating small blocks of memory (between 20 and 100 bytes) millions of times, although the maximum memory needed at any one time was typically less than 11 KB; see <a href="#008c_002a">Figure 1</A>. Most implementations of <I>new</I> and <I>malloc</I> are not designed to cope with this many memory allocations and deallocations.<P>
Applications such as raytracers can also have trouble detecting memory leaks. If a leak is introduced, the program can munch its way through 10 MB of memory, causing severe thrashing when the program starts to use virtual memory. Although the MFC debugging memory allocator I was using checked for memory leaks, it didn't work with the memory pooling that I had added. Consequently, I had to implement my own<B> </B>memory-allocation facility. In this article, I'll focus on the strategy and tools that I developed to handle dynamic-memory allocation in the process of writing an object-oriented raytracer.<P>
<h3><a name="008c_0026">A Memory Strategy<a name="008c_0026"></h3><P>
Since the memory-management problems the raytracer introduced are complex, I'll describe the strategy I implemented in relatively simple terms of classes that deal with &quot;companies&quot; and their &quot;addresses.&quot;<P>
When first designing classes, a declaration of the <I>Company</I> and <I>Address</I> classes (see <a href="#008c_002b">Example 1</A>) makes it possible to store and retrieve addresses, as well as reuse the <I>Address</I> class in other places. Clearly, <I>Company</I> will contain an instance of each of the classes <I>String</I> and <I>Address</I>. This causes no problem until you want to add international addresses, where each address may have a slightly different format. In the U.S., you would store a zip code, while the U.K. requires a post code. Each address has a different format and should appear differently in dialog boxes and when printed. To do this, you could subclass <I>Address</I> for both U.S. and U.K. addresses, as in <a href="#008c_002c">Example 2</A>.<P>
Because of the way C++ handles polymorphism, you would also need to change <I>Company</I> so that it uses a pointer to (rather than an instance of) the <I>Address</I> class (<a href="#008c_002d">Example 3</A>). This is not a trivial change. There is no longer an instance of <I>Address</I> in <I>Company</I>, but a reference--and this means you must now change every single line of code that uses the <I>Company</I> or <I>Address</I> classes so they will work properly!<P>
You may argue that changing part of the object hierarchy is bound to create a need to change other parts of the code. This need not be the case, however. It is possible to design the class from the outset so that this sort of change does not mean reworking thousands of lines of code. <a href="#008c_002e">Example 4</A> gives an alternative to the implementation in <a href="#008c_002b">Example 1</A>. In <a href="#008c_002e">Example 4</A> you use object pointers at all times. When you find that more flexibility is needed in the address storage, then all you do is change the internal implementation of address to accommodate it. All the client objects are already using pointers.<P>
This does lead to another problem: When designing the classes, you must consider what is going to happen to all these new instances you are creating. The strategy I use comes from considering the differences in <a href="#008c_002d">Example 3</A> and <a href="#008c_002e">Example 4</A> and remembering that the changes should remain transparent to all client objects.<P>
To achieve this transparency, constructors and member functions that set values or command changes from a receiving object must pass pointers to new object instances, for which the receiver then becomes responsible. The only exception is when a pointer is declared as <I>const</I>. In this case, I assume that the function that constructs the object should keep hold of it.<P>
The other element of the memory-management strategy involves querying messages. Whenever an object's state is questioned, a pointer to a new object containing the answer is returned, which the querying function is then responsible for deleting.<P>
This approach strengthens the data hiding that you achieve through the use of objects, because you make no assumptions about any subclassing of the <I>Address</I> class. Neither do you assume anything about the storage of the address within instances of the <I>Company</I> class. Overall, this weakens the coupling between object classes, which allows reuse of objects in the long term.<P>
Unfortunately, there is a caveat to this strategy involving the number of memory allocations: Every time an object wants to find or change the address of a customer instance, a new instance of <I>Address</I> must be created on the heap.<P>
<h3><a name="008c_0027">The Memory Manager<a name="008c_0027"></h3><P>
The files mempool.h and mempool.cpp (available electronically; see &quot;Availability,&quot; page 3) implement a pooling memory manager. To provide diagnostic services during code debugging that can be disabled during a release compile, the mempool.cpp program uses conditional compilation. All this debugging help is turned on by the MEMDIAG symbol.<P>
The memory-pooling strategy itself is straightforward. <I>MemoryPool,</I> an array of <I>MemHeader</I> pointers, is created by the <I>PoolOn</I> function. Due to the <I>MemLink</I> member's constant presence in the <I>MemHeader</I>, you can chain <I>MemHeader</I>s together into a simple list. <a href="1995008e.htm">Figure 2</A> shows the different forms of the structure. <I>MemoryPool</I> is just an array of these lists.<P>
When a request for memory is generated, it is passed to <I>ARAlloc</I> (see the version implemented in mempool.cpp), which checks that the memory pool is turned on and that there is a memory block of the correct size in the memory pool. If both these conditions are met, the head of the list is removed and that memory block will be used to satisfy the request. If the pool is not on or there are no spare blocks of the correct size, one is taken from the operating system. Either way, the size of the memory block is written to the size part of the <I>MemLink</I> union just before the memory block is handed out.<P>
When a block is <I>free</I>d, it is passed to <I>ARFree</I>. It finds the <I>MemHeader</I> associated with the memory block, through which it finds the size of the memory block. If the memory pool has been turned off, then the block is simply <I>free</I>d back to the operating system; if the pool is on, it is placed at the head of the correct list in the <I>MemoryPool</I> array.<P>
<h3><a name="008c_0028">Memory-Pooling Diagnostics<a name="008c_0028"></h3><P>
All of the diagnostics for the memory pool are controlled through the MEMDIAG symbol, which should be defined project wide whenever you do a debug compile. <a href="#008c_002f">Table 1</A> describes the <I>#define</I>s at the beginning of mempool.cpp that control aspects of the manager that are important for both debug and release compiles. <a href="#008c_0030">Table 2</A> gives descriptions of the symbols used only for debug compiles. Switching between options is usually just a matter of commenting out lines in mempool.cpp.<P>
The header file is arranged so that all the debugging constructs automatically turn themselves off when MEMDIAG is not <I>define</I>d. This means that you can use the OUTP and ASSERT macros in your code and only have them produce compiled code when debugging. You can include support for the memory system by just including the header file in your implementation files.<P>
<a href="1995008f.htm">Figure 2</A> shows the difference in the structures created by this conditional compilation. When the diagnostics are disabled, you only get a small overhead (usually four bytes on a 32-bit system) for each memory allocation.<P>
To see how the conditional compilation works, look at one of the most useful diagnostics that the memory manager produces--file and line numbers for all leaked memory blocks.<P>
To output this information, you need to first pass it on to the memory manager. Second, you must keep a separate record of all the blocks passed out and tick them off when they are returned. This will slow down each <I>free </I>because you must find the <I>free</I>d block among all the outstanding blocks of memory. Because of this performance hit, you usually use this diagnostic as a last resort.<P>
In turning on this diagnostic, you don't want to have to recompile all the code after encountering a memory leak. Consequently, special macros in the header file map to two versions of the <I>ARAlloc</I> function. One <I>ARAlloc</I> is passed a pointer to the name of the file and line number of the allocation, as well as the size of the requested block. The other <I>ARAlloc</I> is only given the size. When you are not using the full memory tracking (controlled by the MEMTRACKING symbol), the three-argument version of <I>ARAlloc</I> calls the single-argument version. When MEMTRACKING is defined, it retrieves the start of the <I>MemHeader</I> block from in front of the returned memory block so that the filename and the line number will be stored in the header.<P>
The single-argument version of <I>ARAlloc</I> and <I>ARFree</I> handle the other part of the work. When full-memory tracking is turned on, a second <I>MemHeader</I> list store (<I>MemoryAlloced</I>) is set up. Before the address of the requested memory block is returned, the <I>MemHeader</I> is placed on the head of the correct MemoryAlloced list and default values are given to the filename and line number; this is why you need two <I>next</I> pointers in <a href="19950090.htm">Figure 2(a)</A>.<P>
At this point, <I>ARFree</I> walks down this list until it finds the correct memory block, which is removed from the list and the hole plugged. Also check for blocks of memory allocated before the memory pooling was turned on, because they may not be in the list.<P>
The final part of the story is in <I>PoolOff,</I> which must check through <I>MemAlloced</I> when the memory pool is finally turned off. It can now report the size, line number, and filename where the memory allocation took place.<P>
<h3><a name="008c_0029">Conclusion<a name="008c_0029"></h3><P>
Although this pooling memory manager is reasonably complete, it can still be improved upon. The use of the Windows <I>GlobalAlloc</I> is dangerous because of the limited number of available handles (at least in the 16-bit version). Also, there is no checking for failed memory allocations (the assumption is that a memory exception would bypass our code altogether), which can cause problems during stress testing. You can also add a lot more diagnostic and performance information to the implementation.<P>
For a more-detailed discussion of memory pooling with a look at performance issues, I recommend Arthur Applegate's article &quot;Rethinking Memory Management&quot; (<I>DDJ</I>, June 1994).<P>

<a name="008c_002a"><B>Figure 1:</B> The memory report from a 96x128-pixel render in the raytracer. Note the number of allocations handled (more than 2 million) and the amount of memory taken from the system (less than 11 KB) compared with the reuse of that memory (92.3 MB).<a name="008c_002a">
<pre>
Pooling off 1. Alloced:      11222 (0.0Mb) Freed:   0 (0.0Mb)
Mem ARAllocs: 2283781 ARFrees: 2283781
bytes     allocs       hits      frees  left over
   14          4      47205      47209          0
   18          3          0          3          0
   22         75      71905      71980          0
   26          1          1          2          0
   30         51      73180      73231          0
   32          7     151042     151049          0
   38         34    1512071    1512105          0
   54          5     222752     222757          0
   82          4     140799     140803          0
  100          7      64537      64544          0
  134         38         60         98          0
Check total: alloc: 11222 (0.0Mb) hits: 96766114 (92.3Mb)
</pre>
<B><a href="19950091.htm">Figure 2</A>: </B>The layout of the memory created by the memory manager with (a) full diagnostics; and (b) no diagnostics. The first part of the block is a union called link, which contains the next and size elements. A pointer to the start of memory block is returned in both cases.<p>
<a name="008c_002b"><B>Example 1:</B> Initial design of the Company and Address classes.<a name="008c_002b"><p>
<pre>
class Address {
   ...
   String    line1, line2, city;
   long      zip_code;
   ...
};
class Company {
   public:
   // Constructor
   Company( String aname, Address
          anAddress );
   // Get/Set address
   Address GetAddress( void );
   void SetAddress( Address
          newAddress );
   protected:
   String    name;
   Address   address;
};</pre>
<a name="008c_002c"><B>Example 2:</B> Subclassing Address to handle international addresses.<a name="008c_002c"><p><pre>
class Address {
   ...
   String    line1, line2, city;
   ...
};
class AddressUS : public Address {
   ...
   long       zip_code;
   ...
};
class AddressUK : public Address {
   ...
   String     post_code;
   ...
};</pre>
<a name="008c_002d"><B>Example 3:</B> Changing Company so that it uses a pointer to (rather than an instance of) the Address class.<a name="008c_002d"><p><pre>
class Company {
   public:
   // Constructor/Destructor
   Company( String aname, Address
          *anAddress );
   ~Company( void );
   // Get/Set address
   Address *GetAddress( void );
   void SetAddress( Address
          *newAddress );
   protected:
   String     name;
   Address    *address;
};</pre>
<a name="008c_002e"><B>Example 4:</B> An alternative to Example 1.<a name="008c_002e"><p><pre>
class Address {
   ...
   String     line1, line2, city;
   long       zip_code;
   ...
};
class Company {
   public:
   // Constructor/Destructor
   Company( String aname, Address
          *anAddress );
   ~Company( void );
   // Get/Set address
   Address *GetAddress( void );
   void SetAddress( Address
          *newAddress );
   protected:
   String     name;
   Address    address;
};</pre>
<a name="008c_002f"><B>Table 1:</B> #defines used within mempool.cpp to control its execution in both release and debug modes.<a name="008c_002f"><p><pre>
#define         Description

MEMALLOC        Defines how the memory is allocated whenever a
                 new block is needed.
MEMNOFREENULL   When defined, a NULL pointer is never freed or
                 <I>delete</I>d. This will remove a
                 check that is made on every <I>free</I>.
MEMLARGEALLOC   Allows allocation requests for blocks of memory
                 larger than <I>g_memory_size</I> to be
                 passed through the memory manager.
MEMALLNEW       When defined, new versions of global
                 <I>new</I> and <I>delete</I>
                 operators are defined that pass all memory
                 allocations through the memory pool. This
                 option is not compatible with MFC because it
                 defines its own global <I>new</I> and
                 <I>delete</I> operators.
</pre>
<a name="008c_0030"><B>Table 2:</B> #defines used within mempool.cpp to control its diagnostic functions. These are only activated when MEMDIAG is defined.<a name="008c_0030"><p><pre>
#define        Description

MEMBOUNDS      Adds an 8-byte block to the beginning and the
                end of the memory block. If any of the bytes
                within this checking area have been changed,
                then the entire block is discarded.
MEMFREENULL    When not defined, reports every time a NULL
                pointer is <I>free</I>d.
MEMDOUBLEFREE  Adds a check for each <I>free</I> to
                make sure that the memory block has not been
                <I>free</I>d before.
MEMMINE        Adds a magic number in the memory header so that
                <I>ARFree</I> can check that the memory
                block was allocated by <I>ARAlloc</I>.
MEMTRACKING    Turns on the full memory-tracking service. Stores
                line numbers and filenames when known. To get
                this information for all <I>new</I>s,
                add <I>#define new</I> MEMTRACKNEW
                after you have included all header files and
                defined your classes.
</pre>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
