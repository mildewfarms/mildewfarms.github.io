<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>DEC95: VToolsD for VxD Development</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>VToolsD for VxD Development<a name="025b_00b1"><a name="025b_00af"><a name="025b_0000"></h1><P>
<h2>A VxD toolkit for C/C++ programmers</h2><P>
<h3>Charles Mirho</h3><P>
<p><i><a name="025b_00b0"><a name="025b_0000">Charles works in Silicon Valley, specializing in communications, multimedia, and games. He can be reached at 70563.2671@compuserve.com.</i></p><hr><P>
VToolsD for Windows from Vireo Software is a C/C++ toolkit for writing virtual device drivers (VxDs). It is designed as a replacement for Microsoft's Device Driver Kit (DDK). In addition to a visual-programming environment, the toolkit provides a code generator for dynamically loaded/unloaded device drivers. VToolsD supports VxD development for Windows 3.1 and Windows for Workgroups 3.11 under both Microsoft Visual C++ and Borland C++. In addition, Vireo recently released VToolsD for Windows 95, which supports features of the new OS-like plug and play.<P>
VToolsD comes with libraries that &quot;wrap&quot; calls to the Virtual Machine Manager (VMM) and other VxDs into a C calling syntax. It includes header files with useful macros and definitions, and a C run-time library that implements VxD-safe versions of the most-useful C functions (<I>malloc</I>, <I>strcpy</I>, <I>sscanf</I>, and the like). The toolkit also includes source code to the libraries and a wizard that creates a skeleton VxD. For C++ programmers, there are class libraries to access VMM and other VxD services in an object-oriented way, as well as classes to simplify VxD programming. <P>
To examine the VToolsD toolkit, I'll develop a Windows 3.1 VxD that implements a simple autocorrect feature like those in word processors. The VxD looks for the keyboard sequence <I>&lt;space&gt;adn&lt;space&gt;</I> in any VM, assumes the user made an error, and replaces it with <I>&lt;space&gt;and&lt;space&gt;</I>. In other words, the VxD assumes that the user meant to type the word &quot;and&quot; but transposed two of the characters. I call this VxD &quot;Spellx&quot; because it imparts even the lowliest text editor with autocorrect capability. I wrote the VxD entirely in C, compiled it with Microsoft Visual C++ Compiler Version 2.0 (C9 compiler), and debugged it with the Nu-Mega Soft-ICE resident debugger. <P>
<h3><a name="025b_00b2">QuickVxD Wizard<a name="025b_00b2"></h3><P>
When writing VxDs with VToolsD, you'll likely start with the QuickVxD wizard. QuickVxD is simply a pair of dialog boxes for entering information about the VxD you're creating. Once you provide the information, QuickVxD generates a skeleton VxD, a header file for it, and a make file. You can't run QuickVxD on the skeleton after making manual changes to it because your changes will not be saved by QuickVxD. Of course, you can make them to a second skeleton, then copy the changes over to your working copy. <P>
<a href="1995025d.htm">Figure 1</A> is the main dialog. The collection of controls in the upper left is called &quot;Device&quot; and defines information in the VxD device-descriptor block. This information includes the name of the VxD (which also becomes the VxD filename, header filename, and make filename), the VxD ID value (if the VxD exports services), the initialization order when VMM loads the VxD at Windows launch time, and the major and minor version numbers of the VxD. The result of completing this section is the line <I>Declare_Virtual_Device(SPELLX)</I> in the VxD skeleton; see <a href="#025b_00c0">Listing One</A>. <a href="#025b_00c2">Listing Two</A> is the equivalent skeleton in C++.<P>
The name SPELLX appears in the declaration. QuickVxD creates a header file for the VxD containing declarations for the major and minor version numbers, the device id, and the initialization order. These definitions are used to expand the <I>Declare_Virtual_Device</I> macro. For Spellx, the major and minor versions are 1 and 0, the device id is undefined, and the initialization order is VKD_INIT_ORDER+1. This produces the header file in <a href="#025b_00c4">Listing Three</A>. These definitions are used to expand the declaration of the device-descriptor block as in <a href="#025b_00b9">Example 1</A>. (The complete source code for the SPELLX.386 VxD is provided electronically; see &quot;Availability,&quot; page 3.) <P>
The main dialog includes options for creating the skeleton in C or C++ and including or excluding debug information in the build. The debug symbols supported are for Soft-ICE and WinDeb386 (the same as for the Microsoft C8 and C9 compilers). The source code for the VxD did not exactly match up with the executable instructions, but this is likely a problem with Soft-ICE, and the discrepancies were minor. The dialog includes options for which entry points the VxD should have: vendor-specific V86 mode, vendor-specified protected mode, and the V86 and PM entry points called by VMM when the VxD registers a device id with VMM. Checking off these boxes saves work because QuickVxD will create empty entry points in the skeleton for you to fill in. If the VxD exports any services, QuickVxD can list the prototypes for these exported services in the skeleton.<P>
Clicking on the Control Messages button causes the QuickVxD Control Messages dialog to be displayed. Each check box corresponds to a VMM message for the control dispatch routine to trap and process. For each box checked, a trap is inserted into the control dispatch routine in the VxD skeleton. The trap will call an (initially) empty handler function to process the event message. It's your job to fill in these handlers with useful code.<P>
Next, clicking the Generate Now button creates the C or C++ skeleton, header file, and make file for the VxD. QuickVxD will ask you for the pathnames under which to save these files. To build the VxD, open a DOS box and run <I>nmake  -f &lt;name of make file&gt;</I>. When I was writing Spellx, the example skeleton built on the first try without warnings or errors.<P>
<h3><a name="025b_00b3">The Spellx VxD<a name="025b_00b3"></h3><P>
The Spellx VxD monitors all VMs for the keyboard sequence <I>&lt;space&gt;adn&lt;space&gt;</I> and replaces the assumed erroneous characters. Of course, this can cause problems if you really meant to type <I>&lt;space&gt;adn&lt;space&gt;</I>, but you could modify the VxD to disable itself when another key sequence is typed. <P>
Spellx requires the exported services of the virtual keyboard driver (VKD). Because it depends on keyboard services, Spellx should be loaded after VKD. I set the initialization order equal to <I>VKD_INIT_ORDER</I>+<I>1</I> to make sure Spellx is loaded after VKD. Next, I opened the Control Messages dialog by clicking on the Control Messages button. Spellx traps five control messages: DEVICE_INIT, for one-time initializations when the VxD is loaded; SYS_VM_INIT, to create a context for the virtual machine; VM_INIT, to create a context for each additional VM that is created; SYS_VM_TERMINATE, to clean up the system VM context; and VM_TERMINATE, to clean up a VM context when the VM is closed. Spellx needs a context for each VM, because otherwise the program confuses sequential keystrokes from different VMs and assumes the user was typing &quot;adn&quot; when the user was actually just switching between several applications in a way that looked like the offending sequence. Spellx records the keyboard history for each VM separately, so that it can compare each VM's keyboard activity to the offending pattern. This makes Spellx less prone to mistakes. I generate output in C, with Soft-ICE debugging symbols.<P>
<a href="#025b_00c0">Listing One</A> is the skeleton generated by QuickVxD as a result of these settings. After the device declaration, macros contained in the skeleton declare control handlers for the five VMM control messages that the VxD processes. The <I>DefineControlHandler(MessageType, HandlerName);</I> macro expands to <I>extern MessageType_type HandlerName;</I>. For example, <I>DefineControlHandler(VM_INIT, OnVmInit);</I> expands to <I>extern VM_INIT_type OnVmInit;</I>. Parameter checking is not done by the prototype. This isn't a problem because the call to the control handler is also generated by the Wizard. Next comes the VxD control dispatcher, whose entry point has the declaration <I>BOOL ControlDispatcher (DWORD dwControlMessage, DWORD EBX, DWORD EDX, DWORD ESI, DWORD EDI)</I>. <P>
The actual entry point to the control dispatch routine is in the VToolsD prologue code, which is linked to the skeleton automatically by the make file. The prologue code reformats the register information passed from VMM to the control dispatcher into C parameters and then calls the skeleton entry point <I>ControlDispatcher</I>.<P>
Within the body of the control dispatcher, calls to the various event handlers are implemented with message-cracker macros. <a href="#025b_00ba">Example 2</A> lists the five VMM message traps Spellx requires. The START_CONTROL_DISPATCH and END_CONTROL_DISPATCH macros expand into a switch statement on <I>dwControlMessage</I>. Each ON_xxx macro expands into a case statement and call to the appropriate handler for the message. For instance, the statement in <a href="#025b_00bb">Example 3(a)</A> expands to <a href="#025b_00bb">Example 3(b)</A>.<P>
Of course, the wizard only creates skeleton code--it can't write the code that makes a VxD do something useful. However, the toolkit contains two libraries that facilitate writing useful code. The first is a C run-time library full of the functions that made C popular in the first place: <I>calloc</I>, <I>sprintf</I>, <I>itoa</I>, <I>strcpy</I>, and so on. The second is a library of wrapper functions for calling VMM and VxD services from C or C++. <P>
<h3><a name="025b_00b4">C Run-Time Library<a name="025b_00b4"></h3><P>
The C run-time library is one of the more useful VToolsD features. The library contains only a subset of the routines in a typical C library. The available routines are those most useful for VxD programming--memory allocation, port I/O, string manipulation, data-type conversion, and the like. I used the memory functions <I>calloc</I> and <I>free</I> to create a linked list of keyboard contexts for each VM in the system, including the system VM. I could have used the VMM linked-list functions for this purpose, but the code is easier to understand and maintain if standard linked-list routines are used instead of arcane calls to VMM services.<P>
The function to add a node to the list (<I>AddVMContext</I>) is called when the system VM is created and whenever a new VM is created. Thus, <I>AddVMContext</I> is called to create a new context whenever the control dispatcher receives a VM_INIT or SYS_VM_INIT message from VMM. <I>AddVMContext</I> calls <I>calloc</I> to allocate a new context node; see <a href="#025b_00bc">Example 4</A>.<P>
Each VM context contains the VM handle, key history buffer, buffer index, and link to the next context. Each context also contains a field to record the global shift state when each character N, D, and Space is pressed. The key history buffer contains a record of the last MAXVMKEYS pressed in the VM. MAXVMKEYS is defined as 5, which is just enough space to record the five-key sequence of <I>&lt;space&gt;adn&lt;space&gt;</I> that the VxD wants to detect. The buffer index <I>wNextKey</I> indicates the next space in the buffer to place a key. The shift state fields are <I>dwDShift</I>, <I>dwNShift</I>, and <I>dwSShift</I>. When the keys D, N, or Space are pressed, the VxD records the global shift-state of the keyboard in these fields. <P>
<I>AddVMContext</I> takes a VM handle, allocates a new context using <I>calloc</I>, and puts the VM handle into the context. It then links the context into the linked list and returns a pointer to the new context. The complementary function <I>DeleteVMContext</I> is called whenever any VM is destroyed. <I>DeleteVMContext</I> is called to delete a VM context whenever the control dispatcher receives a VM_TERMINATE or SYS_VM_TERMINATE message from VMM. <I>DeleteVMContext</I> <I>free</I>s the context node associated with a VM; see <a href="#025b_00bd">Example 5</A>. <I>DeleteVMContext</I> calls the local function <I>ThisVMContext</I> to get a pointer to the node associated with the given VM handle.<P>
The C run-time library allowed me to replace the VMM linked-list services with my own using <I>calloc</I> and <I>free</I>. Of course, most VMM services cannot be easily replaced, and so an easy method of calling VMM and VxD services in C is necessary. That's where the wrapper functions come in.<P>
<h3><a name="025b_00b5">Wrapper-Function Libraries<a name="025b_00b5"></h3><P>
VToolsD comes with wrapper functions for most of the VMM and standard VxD services--no more pushing arguments into high and low registers. VMM and other VxD services are available through C function calls. These wrapper functions are written in assembler, and the ones I examined take the C parameters off the stack, put them in registers, call the VMM services, and place the return value in EAX. Using the VKD virtual keyboard driver, I trapped the A, N, D, Space, and Backspace keys with the wrapper functions. The wrapper function <I>VKD_Define_Hot_Key</I> tells VKD to notify the VxD when a particular key is pressed. Like most wrapper functions, <I>VKD_Define_Hot_Key</I> corresponds to the service of the same name. <a href="#025b_00be">Example 6(a)</A> illustrates its syntax. <a href="#025b_00be">Example 6(b)</A> will trap the A key.<P>
The first parameter is the scan code of the key to trap, and the second is the type of scan code to trap. Some keyboards have keys with extended scan codes. I set the value of the second parameter to SCAN_EITHER, which traps both normal and extended scan codes. The third parameter is the shift state of the key to trap. The shift state defines, with great precision, the combination of a regular key and Shift key (left shift, right shift, left or right control key, left or right Alt key, caps lock, scroll lock, and other keys that shift the value of a key). The shift state works like this: When a key is pressed, the states of all shift keys on the keyboard are collected into a 16-bit word called the &quot;global shift state.&quot; This global shift state is ANDed with the high word of the <I>shiftstate</I> parameter, and the result of the AND is compared with the low-order 16 bits of the <I>shiftstate</I> parameter. If the result of the AND matches the lower 16 bits, VKD calls the VxD's hot-key handler (defined in the fifth parameter); otherwise, the handler is not called. I set <I>shiftstate</I> (for both high and low words) to 0. That way, the global shift state is always ANDed with 0, resulting in 0. This value is then compared with the low word, which is also 0. In other words, the hot-key handler will always be called, regardless of the keyboard's shift state.<P>
After the <I>shiftstate</I> parameter, the flags further define which keyboard events will result in a callback to the hot-key handler. The flags specify whether VKD will call the handler when a key is pressed, released, or autorepeated, and when a <I>shiftstate</I> ends. I had problems with this parameter. I specified <I>CallOnPress|CallOnRepeat</I> which, according to the documentation, should have resulted in calls to the hot-key handler when a key was pressed or autorepeated. However, the hot-key handler is called only when the key is pressed. I'm not an expert on the VKD services, so I don't know if this is a VKD bug, a bug in the VToolsD documentation or wrapper function, or my own ignorance. Whatever the case, the VxD won't detect and reflect autorepeat presses of the trapped keys.<P>
The parameters <I>RefData</I> and <I>MaxDelay</I> define, respectively, data that can be passed transparently during the callback (for example, a pointer to a unique context for each hot key), and the maximum delay time allowed between occurrence of the event and notification of the event handler. I didn't use either parameter, so both are set to 0. <I>VKD_Define_Hot_Key</I> returns a handle which uniquely identifies the hot key for calls to other VKD services.<P>
The fifth parameter specifies a pointer to the hot-key handler that VKD will call when the trapped keys are pressed. The wrapper libraries implement event handlers using thunks, which are nothing more than chunks of a locked data segment used as the entry point for the event handler. When VMM or a VxD calls an event handler in another VxD, the arguments to the event handlers are passed in registers. When the event handler is a C function, the register arguments must be translated into stack-based arguments compatible with C. To accomplish this, VToolsD uses thunks. To trap hot-key events, I passed the address of my C event handler to <I>VKD_Define_Hot_Key</I>, and I also passed the address of a thunk (in the last parameter). All wrapper functions that define event handlers take a thunk argument, which is a pointer to an area of locked memory. The wrapper function modifies this locked memory area with the code necessary to translate the register arguments in C stack parameters. It also inserts into the thunk a call to the entry point of the event handler in the VxD. The wrapper function then passes the address of the thunk to VMM or the other VxD, which detects the event to trap and calls the thunk. The thunk reformats the register arguments into C stack arguments and calls the VxD event handler. After the call, the VxD event handler returns to the next instruction in the thunk. The thunk reformats any return values into the appropriate registers and returns to VMM or the calling VxD.<P>
I declared the thunk for <I>VKD_Define_Hot_Key</I> in the locked data segment. Because different event handlers require different arguments, the wrapper library contains a unique template for each type of event handler available from VMM and other VxDs. Unfortunately, the template for <I>VKD_Define_Hot_Key</I> did not match the function prototype in the VToolsD documentation: Two of the parameters were switched. <P>
In particular, the documentation defines the event handler for <I>VKD_Define_Hot_Key</I> as <I>VOID __stdcall HotKeyHandler(DWORD scancode, DWORD hotkeyhandle, DWORD shiftstate, DWORD data, DWORD delaytime)</I>. The first parameter is the scan code of the key that caused the event, the second is the hot-key handle returned from <I>VKD_Define_Hot_Key</I>, the third is the global shift state, the fourth is the reference data passed to <I>VKD_Define_Hot_Key</I>, and the fifth is the delay between the event and the handler being called (this is normally 0 unless you specifically request delay notification). However, the thunk was reversing the order of the first two parameters, <I>scancode</I> and <I>hotkeyhandle</I>, on the C stack, which created a lot of confusion. This bug was especially frustrating because the thunk comprises code executing in the data segment, so I could not set a break point on it when debugging. I talked to the support staff at Vireo, who were very helpful and claimed this would be fixed in the next release.<P>
<h3><a name="025b_00b6">Processing Hot Keys<a name="025b_00b6"></h3><P>
When called, the event handler first calls <I>VKD_Get_Kbd_Owner</I>, another wrapper function, which returns the handle of the VM that currently owns the keyboard. Because <I>VKD_Get_Kbd_Owner</I> is called from the event handler, it must be asynchronous; that is, VKD must be reentrant with regard to this function. The returned VM handle is used to locate the context for the VM by calling the local function <I>ThisVMContext</I>. The key and global shift state are then reflected into the VM with a call such as <I>VKD_Reflect_Hot_Key (hVM, hHotKey, dwShiftState);</I>. The first parameter to <I>VKD_Reflect_Hot_Key</I> is the VM handle, the second is the hot-key handle returned by <I>VKD_Define_Hot_Key</I>, and the third is the global shift state passed to the event handler by VKD. The trapped key is saved into the VM key-history buffer, which is analyzed in a circular fashion, using a simple state machine, to determine if the sequence <I>&lt;space&gt;adn&lt;space&gt;</I> has been typed. If this sequence is detected, then the sequence <I>&lt;backspace&gt;&lt;backspace&gt;nd&lt;space&gt;</I> is reflected into the VM. Reflecting these keys into the VM replaces the erroneous &quot;dn&quot; sequence with the correct &quot;nd&quot; sequence without disturbing the cursor position.<P>
Before saving a key into the VM key buffer, I check the global shift state. If either the Alt key or the Ctrl key is pressed, the key is not saved into the key buffer. Thus, key presses such as Ctrl-A and Alt-N will not be saved or analyzed. The result is that sequences like Ctrl-A,N,Alt-D will not trigger the replacement sequence, which could have potentially unpleasant results. It is relatively simple to check the global shift state before saving and analyzing the trapped keys. I simply mask the global shift state against the value <I>(SS_Alt|SS_Ctrl)</I>. If the result is nonzero, one or both of the Ctrl and Alt keys are pressed and the key is not saved. The values of <I>SS_Alt</I> and <I>SS_Ctrl</I> correspond to the bits VKD sets in the global shift-state variable when Alt or Ctrl is pressed. I could not find documentation for <I>SS_Alt</I> or <I>SS_Ctrl</I> in either the manual or the online help. They turned up in a file called VKD.H in the VToolsD header files.<P>
<h3><a name="025b_00b7">Conclusion<a name="025b_00b7"></h3><P>
Although VToolsD proclaims itself as a tool for all levels of VxD designers, it is more suited to beginner or intermediate developers. Even experts who don't want to lose intimacy with their VxD may want to buy the toolkit just to get the source code to the C run-time routines and the wrapper functions. Of course, if you want to create object-oriented VxDs, VToolsD is a real blessing. I'm somewhat skeptical that the benefits of object-oriented design outweigh the negatives of larger code size and increased abstraction in a VxD environment. I'm also skeptical that C++ is appropriate for VxDs at all, most of which don't use enough objects or methods to make C++ worthwhile. But then again, I'm more comfortable with C; programmers raised on C++ may have an entirely different point of view.<P>
Overall, VToolsD and other high-level environments for coding VxDs should help open up the field of VxD development. If you have stayed away from VxDs until now, you may find this just the opening you've been waiting for.<P>
<h3><a name="025b_00b8">For More Information<a name="025b_00b8"></h3><P>
VToolsD <P>
Vireo Software<P>
385 Long Hill Road <P>
Bolton, MA 01740 <P>
508-779-8352<P>
vireo@vireo.com.<P>

<B><a href="1995025e.htm">Figure 1</A>: </B>The main dialog of QuickVxD.<P>
<a name="025b_00b9"><a name="025b_00b9"><B>Example 1:</B> Expanding the declaration of the device-descriptor block.
<pre>
DDB The_DDB = {0,           /* used by VMM */
        DDK_VERSION,        /* version of the DDK used */
        SPELLX_DeviceID,    /* device id entered by QuickVxD */
        SPELLX_Major,       /* major version number */
        SPELLX_Minor,       /* minor version number */
        0,                  /* flags */
        {' ', ' ', ' ', ' ',' ', ' ', ' ', ' '},   
          /* eight spaces where VToolsD prologue code fills in VxD name */
        SPELLX_Init_Order,             /* in the order device should be 
                                         loaded at Windows launch time */
        (DWORD)LocalControlDispatcher,  /* points to entry point in VToolsD 
               prologue code linked to VxD. This is what VMM calls with 
               control events. Prologue calls VxD control dispatcher */
        (DWORD) LocalV86handler,        /* entry point in VToolsD prologue 
               code which VMM calls to implement V86 services. 
               Prologue calls VxD V86 service entry point */
        (DWORD) LocalPMhandler,        /* entry point in VToolsD prologue 
               code which VMM calls to implement protected mode services. 
               Prologue calls the VxD protected mode service entry point */
        0,                            /* used by VMM */
        0,                            /* used by VMM */
        0,                            /* used by VMM */
        (DWORD) VXD_SERVICE_TABLE,      /* points to VxD service table */
        0}                            /* size of service table */
</pre>
<a name="025b_00ba"><a name="025b_00ba"><B>Example 2:</B> VMM message traps that Spellx requires.
<pre>
START_CONTROL_DISPATCH
   ON_DEVICE_INIT(OnDeviceInit);
   ON_VM_INIT(OnVmInit);
   ON_VM_TERMINATE(OnVmTerminate);
   ON_SYS_VM_INIT(OnSysVmInit);

ON_SYS_VM_TERMINATE(OnSysVmTerminate);
END_CONTROL_DISPATCH
</pre>
<a name="025b_00bb"><B>Example 3:</B> The statement in (a) expands to (b).<a name="025b_00bb">
(a)
ON_DEVICE_INIT(OnDeviceInit)

(b)
case DEVICE_INIT:<P>     return OnDeviceInit((VMHANDLE)EBX,
            (PCHAR) ESI);
</pre>
<a name="025b_00bc"><a name="025b_00bc"><B>Example 4:</B> AddVMContext calls calloc to allocate a new context node.
<pre>
#define MAXVMKEYS   5
typedef struct tag_VMContext {
    VMHANDLE hVM;
    BYTE btKeyHistory[MAXVMKEYS];
    DWORD dwDShift;
    DWORD dwNShift;
    DWORD dwSShift;
    WORD wNextKey;
    struct tag_VMContext *pNext;
} VMContext;
VMContext *AddVMContext (VMHANDLE hVM)
{
    VMContext *NewVM=calloc
(1, sizeof(VMContext));
    if (!NewVM)
        return NULL;
    NewVM-&gt;hVM = hVM;
    NewVM-&gt;pNext = VMListHead;
    VMListHead = NewVM;
    return NewVM;
}
</pre>
<a name="025b_00bd"><a name="025b_00bd"><B>Example 5:</B> DeleteVMContext calls free to free the context node associated with a VM.
<pre>
VOID DeleteVMContext (VMHANDLE hVM)
{
    VMContext **PrevVM = NULL;
    VMContext *ThisVM =
ThisVMContext (hVM, PrevVM);
    if (ThisVM)
    {
        *PrevVM= ThisVM-&gt;pNext;
        free (ThisVM);
    }
}
</pre>
<a name="025b_00be"><a name="025b_00be"><B>Example 6:</B> (a) Syntax of the wrapper function; (b) trapping the A key.
<pre>
(a)
HOTKEYHANDLE VKD_Define_Hot_Key (BYTE ScanCode, BYTE ScanType, DWORD ShiftState,
  DWORD Flags, PVXDHotkey_HANDLER Callback, CONST VOID *Refdata, DWROD MaxDelay, 
                                                      PVKD_Hotkey_THUNK pThunk).

(b)
#define CHAR_A       0x1E<P>VKDHotkey_THUNK      HKThunk<P> ..<P> ..<P>hCHAR_A=VKD_Define_Hot_Key (CHAR_A, SCAN_NORMAL, 0, CallOnPress|CallOnRepeat,
                              HotKeyHandler, 0, &amp;HKThunk);
</pre><P>
<P>
<h4><a name="025b_00bf"><a name="025b_00c0"><a name="025b_00c0">Listing One</h4><pre>
// SPELLX.C - main module for VxD SPELLX
#define   DEVICE_MAIN
#include  &quot;spellx.h&quot;
#undef    DEVICE_MAIN
Declare_Virtual_Device(SPELLX)
DefineControlHandler(DEVICE_INIT, OnDeviceInit);
DefineControlHandler(SYS_VM_INIT, OnSysVmInit);
DefineControlHandler(SYS_VM_TERMINATE, OnSysVmTerminate);
DefineControlHandler(VM_INIT, OnVmInit);
DefineControlHandler(VM_TERMINATE, OnVmTerminate);
BOOL ControlDispatcher(
    DWORD dwControlMessage, DWORD EBX, DWORD EDX, DWORD ESI, DWORD EDI)
{
    START_CONTROL_DISPATCH
        ON_DEVICE_INIT(OnDeviceInit);
        ON_SYS_VM_INIT(OnSysVmInit);
        ON_SYS_VM_TERMINATE(OnSysVmTerminate);
        ON_VM_INIT(OnVmInit);
        ON_VM_TERMINATE(OnVmTerminate);
    END_CONTROL_DISPATCH
    return TRUE;
}
BOOL OnDeviceInit(VMHANDLE hVM, PCHAR CommandTail)
{
    return TRUE;
}
BOOL OnSysVmInit(VMHANDLE hVM)
{
    return TRUE;
}
VOID OnSysVmTerminate(VMHANDLE hVM)
{
}
BOOL OnVmInit(VMHANDLE hVM)
{
    return TRUE;
}
VOID OnVmTerminate(VMHANDLE hVM)
{
}
</pre>
<h4><a name="025b_00c1"><a name="025b_00c2"><a name="025b_00c2">Listing Two</h4><pre>
// SPELLXP.CPP - main module for VxD SPELLXP
#define DEVICE_MAIN
#include &quot;spellxp.h&quot;
Declare_Virtual_Device(SPELLXP)
#undef DEVICE_MAIN
SpellxVM::SpellxVM(VMHANDLE hVM) : VVirtualMachine(hVM) {}
BOOL SpellxDevice::OnDeviceInit(VMHANDLE hSysVM, PCHAR pszCmdTail)
{
    return TRUE;
}
BOOL SpellxVM::OnSysVMInit()
{
    return TRUE;
}
VOID SpellxVM::OnSysVMTerminate()
{
}
BOOL SpellxVM::OnVMInit()
{
    return TRUE;
}
VOID SpellxVM::OnVMTerminate()
{
}
</pre>
<h4><a name="025b_00c3"><a name="025b_00c4"><a name="025b_00c4">Listing Three</h4><pre>
// SPELLX.H - include file for VxD SPELLX
#include &lt;vtoolsc.h&gt;
#define SPELLX_Major        1
#define SPELLX_Minor        0
#define SPELLX_DeviceID     UNDEFINED_DEVICE_ID
#define SPELLX_In
it_Order   VKD_INIT_ORDER+1
</pre>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
