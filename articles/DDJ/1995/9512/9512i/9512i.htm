<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>DEC95: Visual Programming with Reusable Objects</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Visual Programming with Reusable Objects<a name="025f_00b3"><a name="025f_00b1"><a name="025f_0000"></h1><P>
<h2>Construction-from-parts can simplify development</h2><P>
<h3>Carol Jones and Morgan Kinne</h3><P>
<p><i><a name="025f_00b2"><a name="025f_0000">Carol and Morgan are software engineers for IBM. Morgan can be contacted at kinnem@carvm3.vnet.ibm.com, and Carol, at cjones@carvm3.vnet.ibm.com. </i></p><hr><P>
Although well-known in other industries, the idea of construction from parts is just now catching on in the software industry. To build a house, for example, you wouldn't consider designing and manufacturing every piece from scratch. Likewise, rather than designing and developing every bit of software for an application, it's much easier to assemble standard, prebuilt parts. <P>
Parts are software objects that support a simple, standard interface protocol. Parts can vary widely in capabilities, ranging from simple (buttons and arrays, for example) to complex (forms or even entire applications). Complex parts are typically built by combining a number of simple parts into one.<P>
IBM's VisualAge is an object-oriented development environment that uses this construction-from-parts paradigm. With this environment, you build applications by visually arranging and connecting the prefabricated parts (objects) found on the VisualAge parts palette. Furthermore, you can extend the environment by adding any Smalltalk object to the palette.<P>
VisualAge provides a set of primitive, visual parts that are basic building blocks for user interfaces--a push button or list box, for example. Any of these primitive visual parts can be combined to form reusable composite parts such as a form or window. These composite parts can then be added to the parts palette, so that they are available for other development projects.<P>
VisualAge also provides primitive nonvisual parts, such as arrays and digital audio players, which work the same as visual parts. You can write your own nonvisual parts in Smalltalk, such as a customer object (or rule) that sends a reminder notice whenever a customer's payment is overdue. These nonvisual parts can also be combined to form composite parts that can be added to the palette. Combining parts into new, composite reusable parts is what differentiates construction-from-parts technology from concepts such as software modularity.<P>
<h3><a name="025f_00b4">Public Interfaces<a name="025f_00b4"></h3><P>
The basic principle of visual programming in VisualAge is defining an application's behavior by connecting the actions, events, and attributes of the parts. These elements are the part's public interface. Actions are the functions or methods that a part knows how to perform. A part can notify other parts of the occurrence of an event. The simplest example is a push button, which notifies other parts when it is pressed by signaling its clicked event. Attributes are the data stored by a part, such as a balance for a bank-account part, or a result for a database-query part.<P>
When you build parts for VisualAge, you write Smalltalk code defining these actions, events, and attributes. For example, actions are simply methods that VisualAge calls. Attributes are usually stored in instance variables, and you write Smalltalk methods that return, compute, or set the values of attributes.<P>
<h3><a name="025f_00b5">Building a Timer Part<a name="025f_00b5"></h3><P>
To illustrate how construction-from-parts works, we'll design and implement a timer, which is a nonvisual part that runs for a certain length of time, then notifies other parts when the time limit has expired. The timer is able to automatically restart after each expiration. <P>
First, we'll use the VisualAge tools to create a new application that contains a nonvisual part named <I>Timer</I>. The result is an empty part that we enhance using the appropriate VisualAge editors. The next, and most important step is to construct <I>Timer</I>'s public interface.<P>
You define a part's public interface using VisualAge's Public Interface Editor. The editor, which uses a notebook metaphor (see <a href="19950261.htm">Figure 1</A>), includes separate pages for attributes, actions, and events.<P>
The public interface of <I>Timer</I> has an integer-length attribute that contains the number of milliseconds that will elapse before the timer expires. It also has a Boolean repeat attribute indicating whether the timer automatically restarts. The actions needed are <I>start</I> and <I>stop</I>. A <I>timerFired</I> event is needed to notify other parts when the timer has expired.<P>
Once the definition is complete, VisualAge generates much of the Smalltalk code for you; see <a href="#025f_00b9">Listing One</A>. You can generate code as often as you wish to accommodate changes in a part's public interface, although retaining any code changes involves some manual steps.<P>
The timer part's definition causes the generation of both get and set selectors for each attribute. A generated set selector stores an input value in the attribute variable and notifies VisualAge that the value has changed. VisualAge can then notify other parts of the new value. Typically, a generated set selector needs no modifications. Get selectors, on the other hand, are normally modified to use lazy initialization to establish a default value for the attribute. Action methods are always modified and frequently notify other parts of events. You can also add other variables and methods as required to complete the part's logic (<a href="#025f_00bb">Listing Two</A>).<P>
At this point, the timer can be used as is. However, you can refine it by implementing class methods in the part that integrate it more tightly into the VisualAge development environment. (If you don't implement any of these methods, VisualAge uses appropriate default values.)<P>
VisualAge parts typically provide a settings view, which is a visual part that allows a user to specify attribute values for a particular instance of the part. For <I>Timer</I>, it would allow you to set the length and repeat values. You create the view by adding a variable part from the palette to a new visual part named <I>TimerSettingsView</I>. You change the variable part to indicate it is a placeholder for <I>Timer</I>. You tear-off a &quot;quick form&quot; for <I>Timer</I> and drop it in the window part that VisualAge automatically provides. You can add two push buttons and connect the clicked event of one of them to the <I>execute</I> action of the variable part. The clicked event of the other push button is connected to the window's <I>closeWidget</I> action. You tell VisualAge to use this settings view by implementing the <I>customSettingsView</I> class method in <I>Timer</I>. <a href="19950262.htm">Figure 2</A> shows the implementation of the custom settings view.<P>
For <I>Timer</I>, we'll also implement class methods that add the part to the parts palette (<I>addPartToCatalog</I>), provide a custom icon for the part (<I>abtInstanceGraphicsDescriptor</I>), provide a descriptive name for the part (<I>displayName</I>), and customize its connection pop-up menu (<I>preferredConnectionFeatures</I>). See <a href="#025f_00bd">Listing Three</A> for the implementation of these class methods.<P>
The fully implemented <I>Timer</I> is now available for reuse in any VisualAge application.<P>
<h3><a name="025f_00b6">Building the Image Viewer<a name="025f_00b6"></h3><P>
To illustrate how to use <I>Timer</I> in a typical application, we'll build a slide-show application that's based on the part. This application, however, requires another reusable part--a form that displays bitmaped images, with an attribute to hold a collection of bitmap filenames, and actions to step forward or backward through the files. You start by creating a new visual part called <I>SlideCarousel</I>. Unlike the timer part, this has a user interface. Another difference is that it is a composite part, which means it has other parts contained inside it.<P>
When you create a composite, visual part like this one, VisualAge automatically adds a main window. Since this visual part is intended for use inside other windows, delete the main window and replace it with a form part. This is where the image will be displayed.<P>
For the public interface, define one attribute, <I>images</I>, and two actions: <I>displayNext</I> and <I>displayPrevious</I> (<a href="#025f_00bf">Listing Four</A>). As with the timer part, define a suitable icon and descriptive name for this new part, and add it to the parts palette.<P>
Now that you have some useful parts, you assemble them into an application. Begin by creating another visual part named <I>SlideShow</I>. Note that this is also a reusable part: Just like any other VisualAge part, you can add it to the parts palette.<P>
Inside the window, place a <I>SlideCarousel</I> part and size it to fill most of the window. Below this, add two buttons for moving forward and backward through the slides. Next, add <I>Timer</I> from the palette. You use <I>Timer</I> to advance the slides after five seconds, if no button is pressed.<P>
Since visual programming is all about connecting parts, you visually add connections that start the timer when the window opens and stop it when the window closes. Make connections between the timer and each button, to stop and restart the timer when the button is clicked. To advance the slides, connect the timer's <I>timerFired</I> event to the carousel's <I>displayNext</I> action. To make the buttons work, connect their clicked events to the carousel's <I>displayNext</I> action and <I>displayPrevious</I> action.<P>
To complete the application, you need to set initial values for certain attributes. One of them is the carousel's <I>images</I> attribute. To set this, write a Smalltalk script that runs when the window first opens, and adds several filenames to the list of images (see <a href="#025f_00c1">Listing Five</A>). <P>
The last step is setting the attributes for the timer. Set the length to 5000 milliseconds and the repeat attribute to True. <a href="19950263.htm">Figure 3</A> shows the finished application and its connections. <a href="19950264.htm">Figure 4</A> shows the running application.<P>
<h3><a name="025f_00b7">Summary<a name="025f_00b7"></h3><P>
Your success depends on a sufficient supply of standard parts that you can draw upon. As more parts are developed, they will become increasingly useful and require less new code. Reusing code saves time and reduces the chance of introducing new errors.<P>
<B><a href="19950265.htm">Figure 1</A>: </B>Constructing the Timer part's public interface.<P>
<B><a href="19950266.htm">Figure 2</A>: </B>Timer custom settings view with connections.<P>
<B><a href="19950267.htm">Figure 3</A>: </B>Visually constructed slide-show application.<P>
<B><a href="19950268.htm">Figure 4</A>: </B>Executing the slide-show application.<P>
<P>
<h4><a name="025f_00b8"><a name="025f_00b9"><a name="025f_00b9">Listing One</h4><pre>
&quot;Generated IBM Smalltalk code for the Timer part&quot;
AbtAppBldrPart subclass: #Timer
  instanceVariableNames: 'length repeat'
  classVariableNames: ''
  poolDictionaries: ''
eventTimerFired: anObject
  &quot;Notify other parts that the timer has expired.&quot;
  self signalEvent: #timerFired.
length
  &quot;Return the value of length.&quot;
  ^length
length: anInteger
  &quot;Save the value of length.&quot;
  length := anInteger.
  self signalEvent: #length with: anInteger.
repeat
  &quot;Return the value of repeat.&quot;
  ^repeat
repeat: aBoolean
  &quot;Save the value of repeat.&quot;
  repeat := aBoolean.
  self signalEvent: #repeat with: aBoolean.
start
  &quot;Perform the start action.&quot;
stop
  &quot;Perform the stop action.&quot;
</pre>
<h4><a name="025f_00ba"><a name="025f_00bb"><a name="025f_00bb">Listing Two</h4><pre>
&quot;Modified and added code for the Timer part&quot;
AbtAppBldrPart subclass: #Timer
  instanceVariableNames: 'length repeat timer'
    classVariableNames: ''
    poolDictionaries: ''
eventTimerFired: anObject
  &quot;Notify other parts that the timer has expired.&quot;
  self signalEvent: #timerFired.
  timer := nil.
  self repeat ifTrue: [self start].
length
  &quot;Return the value of length.&quot;
  length isNil ifTrue: [self length: 0].
  ^length
length: anInteger
  &quot;Save the value of length.&quot;
  length := anInteger.
  self signalEvent: #length with: anInteger.
repeat
  &quot;Return the value of repeat.&quot;
  repeat isNil ifTrue: [self repeat: false].
  ^repeat
repeat: aBoolean
  &quot;Save the value of repeat.&quot;
  repeat := aBoolean.
  self signalEvent: #repeat with: aBoolean.
start
  &quot;Perform the start action.&quot;
  timer := CwAppContext default
             addTimeout: self length
             receiver: self 
             selector: #eventTimerFired:
             clientData: nil.
stop
  &quot;Perform the stop action.&quot;
  timer notNil
    ifTrue: [CwAppContext default removeTimeout: timer].
</pre>
<h4><a name="025f_00bc"><a name="025f_00bd"><a name="025f_00bd">Listing Three</h4><pre>
&quot;Timer class methods&quot;
addPartToCatalog
  &quot;Adds the part to the VisualAge parts palette&quot;
  | category |
  category := AbtPartsCatalog current categoryNamed: 'Models'.
  category isNil
    ifFalse: [category addPart: (self symbol)].
customSettingsView
  &quot;Answer an instance of the custom settings view&quot;
  ^TimerSettingsView newPart.
displayName
   &quot;Answers the default name for this kind of part&quot;
  ^'Timer'
preferredConnectionFeatures
  &quot;Answer an array of items to place on the connection pop-up menu&quot;
  ^#(length repeat start stop timerFired)
abtInstanceGraphicsDescriptor
      &quot;Answer the icon for the part on the palette&quot;
  ^(AbtIconDescriptor new
      moduleName: 'abticons';
      id: 277)
</pre>
<h4><a name="025f_00be"><a name="025f_00bf"><a name="025f_00bf">Listing Four</h4><pre>
&quot;Code for the SlideCarousel part&quot;
AbtAppBldrView subclass: #SlideCarousel
    instanceVariableNames: 'images index '
    classVariableNames: ''
    poolDictionaries: ''
displayNext
    &quot;Perform the displayNext action.&quot;
    | i | 
    i := (self index + 1).
    (i &gt; self images size) ifFalse: [
          self index: i.
          (self subpartNamed: 'Label1') graphicsDescriptor: (self images at: i)
          ].
displayPrevious
      &quot;Perform the displayPrevious action.&quot;
    | i | 
    i := (self index - 1).
    (i &lt;= 0) ifFalse: [
          self index: i.
         (self subpartNamed: 'Label1') graphicsDescriptor: (self images at: i)
          ].
images
      &quot;Return the value of images.&quot;
    images isNil ifTrue: [images := OrderedCollection new].
    ^images
images: anOrderedCollection
    &quot;Save the value of images.&quot;
    images := anOrderedCollection.
    self signalEvent: #images
             with: anOrderedCollection. 
index
  &quot;Return the value of index&quot;
    index isNil ifTrue: [index := 0].
    ^index
index: aNum
  &quot;Save the value of index&quot;
    index := aNum
</pre>
<h4><a name="025f_00c0"><a name="025f_00c1"><a name="025f_00c1">Listing Five</h4><pre>
&quot;Code for the SlideShow application&quot;
AbtAppBldrView subclass: #SlideShow
    instanceVariableNames: ''
    classVariableNames: ''
    poolDictionaries: ''
initializeBitmaps
  &quot;set up the collection of images&quot;
  (self subpartNamed: 'Slide Carousel') images
    add: (AbtBitmapDescriptor new
                moduleName: 'ABTBMP30'; id: 416);
    add: (AbtBitmapDescriptor new
                moduleName: 'ABTBMP30'; id: 417);
    add: (AbtBitmapDescriptor new
                moduleName: 'ABTBMP30'; id: 418).
  (self subpartNamed: 'Slide Carousel') displayNext
DDJ
</pre>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
