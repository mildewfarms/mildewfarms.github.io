<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>DEC95: A C++ Integrator Class</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>A C++ Integrator Class<a name="021c_00a9"><a name="021c_00a7"><a name="021c_0000"></h1><P>
<h2>C++ classes for solving differential equations</h2><P>
<h3>Darrel J. Conway</h3><P>
<p><i><a name="021c_00a8"><a name="021c_0000">Darrel, who holds a PhD in physics, has worked in educational and industrial settings building numerical models of gravitating systems ranging from black holes to Earth-orbiting spacecraft. He can be contacted at 71203.1415@compuserve.com.</i></p><hr><P>
When modeling the behavior of systems, scientists and engineers must frequently solve differential equations. In this article, I'll present a C++ implementation of a class hierarchy that facilitates this process by allowing for rapid incorporation of new integration methods as they become available. As an example of this hierarchy, I'll focus on adaptive stepsize Runge-Kutta integrators. The resulting code contains two integrators: a fifth-order integrator with fourth-order error control (discussed in <I>Numerical Recipes in C,</I> by William Press, et al.), which I refer to as a &quot;Runge-Kutta 4(5) integrator,&quot; and the &quot;Runge-Kutta 7(8) integrator&quot; derived by J.H. Verner. (Verner presents several different sets of coefficients for Runge-Kutta integrators, along with a description of the methodology used to produce them.) As you'll see, incorporation of the second integrator into the class structure is a simple matter of entering the number of stages and the coefficients for the integration algorithm.<P>
The general problem I'll address involves a system of <I>i</I> variables, <I>r</I>, in some initial configuration that can be represented by a set of differential equations of the form in <a href="1995021e.htm">Example 1</A>. In this case, <I>t</I> is the independent parameter for the system, and <I>r<SUP>(i)</SUP></I> is the <I>i</I>th variable of the system. I'll solve for the values of the variables <I>r</I> at some other value of <I>t</I>. To illustrate how the integrator classes can be used to solve this problem, I'll set up and integrate the Newtonian three-body problem (see the accompanying text box).<P>
I designed the integration-class structure to be reusable without modification by implementing the following features:<P>
<UL>
<li>The integrators do not contain details about the system being integrated. These details are passed to the integrator after an instance of the class is created. Among other things, this means that the integrator classes do not know the dimensions of the system being integrated until an integrator object is instantiated.</li>
<li>The differential equations that provide derivative information to the integrators are specified outside of the integrator classes. </li>
<li>The integrator-class structure is flexible. For instance, if someone derives a new integration implementation for one of the techniques implemented in the class hierarchy, the new derivation can be incorporated into the class structure with minimal coding. </li>
<li>The integrators are reusable for many different sets of differential equations. </li>
</UL>
<h3><a name="021c_00aa">The Class Hierarchy<a name="021c_00aa"></h3><P>
As <a href="1995021f.htm">Figure 1</A> illustrates, the integration algorithms can be divided into three levels. All integration schemes share several features, including information about the derivatives (represented generically by <a href="19950220.htm">Example 1</A>), the initial conditions at the start of the integration, and a function to take the desired integration step. These features are defined in the <I>Integrator</I> base class.<P>
The integrators need access to information about the system being integrated. This information is provided through the <I>Derivative</I> class and its children; see <a href="19950221.htm">Figure 2</A>. Each type of integration scheme is derived from the <I>Integrator</I> class; <a href="19950222.htm">Figure 1</A> shows two such classes: the <I>AdaptiveRungeKutta</I> class and <I>PredictorCorrector </I>class. Each class contains algorithm-specific details of the integrator; for instance, the <I>AdaptiveRungeKutta </I>class contains pointers to the arrays of coefficients needed for the Runge-Kutta algorithms, along with functions used to evaluate the error incurred during a step and the implementation of the integration stepping routine.<P>
Specific integrators are derived from these intermediate classes. A typical implementation at this level contains the coefficients and descriptions needed to create an instance of the integrator. All of the code required to step the integrator, including error control, is encapsulated in the intermediate class. This formulation allows you to rapidly build multiple, yet different, integrators of a given type. <P>
The code presented here, although written and tested using Borland C++ 4.5, is &quot;vanilla&quot; C++, which should port easily to other development systems and platforms. However, I haven't defined the functions for the copy constructor or the assignment operator for the classes, so you'll have to write them if you need them. <P>
<h3><a name="021c_00ab">The <I>Integrator</I> and <I>Derivative</I> Classes<a name="021c_00ab"></h3><P>
<a href="#021c_00b3">Listing One</A> is the class definition for the <I>Integrator</I> class and <a href="#021c_00b5">Listing Two</A> presents the <I>Integrator</I> base class. The <I>Integrator</I> class can be used as the skeleton for any integrators you implement. It provides pointers to the memory used by the initial state of the variables and the memory location for the integrated variables, along with functions to set these pointers. The <I>Integrator</I> class tracks the number of variables being integrated in the <I>dimension </I>variable, which is set by the constructor for the class. Finally, the <I>Integrator</I> class contains a pointer to <I>Derivative</I>, a base class that provides the framework needed to obtain the derivative information in <a href="19950223.htm">Example 1</A>.<P>
<I>Integrator</I> is a pure virtual class. Each integrator derived from it needs the <I>Step()</I> function to initiate an integration. This function takes one parameter: a floating-point value for the size of the integration step. Each integration scheme performs different mechanizations to calculate the integration step. <I>Step()</I> is included in the base class to make the interface to the integration consistent across the integrators.<P>
The <I>Integrator</I> class cannot be used without corresponding derivative information. This can be problematic if the resulting <I>Integrator</I> is specific to the set of equations contained in the class. Consequently, I decided to create the <I>Derivative</I> class. Like <I>Integrator</I>, the <I>Derivative</I> class is a skeleton used to make the interface to the derivative information consistent; see <a href="#021c_00b7">Listing Three</A>. <I>Derivative</I> does not contain any data, and (aside from the empty constructor and destructor) consists of a single pure virtual function interface, <I>GetDerivatives()</I>, that takes as its input the state of the independent variable and a pointer to the array of dependent variables whose derivatives need to be calculated. The array of dependent variables is replaced by the corresponding derivatives in <I>GetDerivatives()</I>. Thus, classes derived from the <I>Derivative</I> class write the calculated information to a data array owned by <I>Integrator</I>. This violates the encapsulation of the integrator's internal data, but I decided to implement the integrator this way to improve performance.<P>
The connection between the derivative classes and the integrators makes them logical members of a larger entity: the class that represents the physical or mathematical system being modeled. Once created, the tight coupling between the integrator and the derivatives is hidden from the rest of the program. (This is the type of entity which I'll implement for the three-body system.)<P>
Listings <a href="#021c_00b9">Four</A> and <a href="#021c_00bb">Five</A> present the <I>ThreeBody</I> class, a sample method for the implementation of derivative information. <I>ThreeBody</I> is derived from the <I>Derivative</I> class and inherits <I>GetDerivatives()</I>. The code implements the derivatives needed for the three-body problem.<P>
You still need to specify where the starting and ending data are stored at each integration step. These data are set using the <I>initState</I> and <I>finalState</I> pointers; pointers are set using <I>InitState()</I> and <I>FinalState()</I>. The memory needed for these data is controlled outside of the <I>Integrator</I> class hierarchy.<P>
<h3><a name="021c_00ac">The Adaptive Step Runge-Kutta and Runge-Kutta 4(5) Classes<a name="021c_00ac"></h3><P>
Once you've set up the derivative information, the dimension of the integration, and the memory locations for the integration data, the external interfaces for the integrator are set. Next, you need to create a class that captures the essence of an integration technique, but leaves out the implementation details. I've implemented the adaptive stepsize Runge-Kutta integrators in the <I>AdaptiveRungeKutta</I> class to illustrate this middle layer of the class structure (see Listings <a href="#021c_00bd">Six</A> and <a href="#021c_00bf">Seven</A>).<P>
Runge-Kutta integrators work by taking a series of substeps (or stages) from the initial point and evaluating the derivatives of the variables at these stages. The accumulated data calculated across the stages is used to generate the final integrated data. For a total step of size <I>h</I>, you can write the <I>i</I>th stage <I>k<SUB>i</SUB><SUP>(n)</SUP></I> for the <I>n</I>th variable <I>y<SUP>(n)</SUP></I> in the integration scheme as in <a href="19950224.htm">Example 2</A>.<P>
The arrays <I>a<SUB>i</SUB></I> and <I>b<SUB>ij</SUB></I> contain constants specific to a particular implementation of the Runge-Kutta algorithm. <a href="19950225.htm">Example 2</A> describes how to generate the <I>i</I>th stage when you have the preceding <I>i</I>-1 stages. The first stage is generated using <a href="19950226.htm">Example 3</A>. After all of the stages have been generated, the integration step is given by <a href="19950227.htm">Example 4</A>, where <I>s</I> is the number of stages in the implementation and c<I><SUB>i</SUB></I> is a third set of constant coefficients. <a href="19950228.htm">Example 2</A> through <a href="19950229.htm">Example 4</A> are implemented in <a href="#021c_00bf">Listing Seven</A> (see the <I>Step()</I> function).<P>
You can control the accuracy of a Runge-Kutta implementation by performing two independent integrations of the starting state across the same interval. If you then subtract the results of these integrations, you will get a local estimate of the error incurred by the numerical integration. This estimate can be used to adapt the stepsize for the integration, and thus to control the error at each step. <I>Numerical Recipes</I> provides a good summary of this form of stepsize control, so I won't go into details. <P>
The error estimate <img src="delta10.gif"><I><SUP>(n)</SUP></I> for the <I>n</I>th variable can be calculated from two Runge-Kutta steps of order <I>m </I>and <I>m</I>-1. If the implementation is performed appropriately, the <I>m</I>th order step and the (<I>m</I>-1)th order step will use identical Runge-Kutta stages. The error estimate will be simple to calculate from the already determined values of the stages using <a href="1995022a.htm">Example 5</A>, where <I>c<SUB>i</SUB>*</I> is the coefficient needed for the (<I>m</I>-1)th order Runge-Kutta step. <I>GetError()</I> uses this equation to determine the largest component of <img src="delta10.gif"> and returns the value of this component; see <a href="#021c_00bf">Listing Seven</A>.<P>
Suppose you want to control error to some local accuracy <img src="alpha14.gif">. You perform an integration across a step of size <I>h</I> and find that the achieved accuracy was <img src="delta10lc.gif">. If <img src="delta10lc.gif">&gt;<img src="alpha14.gif">, you need to decrease the requested step and repeat the integration from the same initial state in order to preserve the desired accuracy of the integration. On the other hand, if <img src="delta10lc.gif">&lt;<img src="alpha14.gif">, the step was good. You may want to increase the stepsize the next time you take an integration step so that you do not accumulate error from the addition of many small steps. (You may also want to increase the stepsize to make the integration proceed more rapidly!) In either case, you need a way to adapt the step. This adaptation is performed using <a href="1995022b.htm">Example 6</A>, where <img src="sigma12.gif"> is a &quot;safety&quot; factor, used to keep the new step <I>h<SUB>new</SUB></I> from growing too large. A typical value for <img src="sigma12.gif"> is 0.9. <I>NewStep()</I> (<a href="#021c_00bf">Listing Seven</A>) performs this calculation and returns the new step.<P>
One wrinkle to this algorithm that I've included in the implementation is the ability to take fixed-size Runge-Kutta steps with full error control. I needed a way to perform accurate integration and still produce integration steps that are evenly spaced in time so that simulations would run correctly. A typical implementation of a Runge-Kutta integrator allows the steps to adjust freely, producing integrated steps that are not evenly distributed in time. If you are interested in simulating gravitating systems, such a procedure will produce large steps when the gravitating bodies are far apart and small steps when they are close together. When the resulting points are plotted, the bodies appear to move rapidly when they are far apart and slowly when they are close together. In reality, the bodies move most rapidly when they are closest together. More raw integrated points are produced in this region because the forces are stronger, so the integrator needs to take smaller steps to preserve the accuracy of the integration. The <I>AdaptiveRungeKutta</I> class uses a flag named <I>fixedStep</I> to determine if the integrator should take fixed steps with full error control. When <I>fixedStep</I> is true, <I>Step()</I> will loop through the integration, taking multiple integration steps if necessary, and return results when the requested total step has been performed. If <I>fixedStep</I> is false, <I>Step()</I> will return the &quot;raw&quot; integration step taken by the integrator.<P>
The <I>AdaptiveRungeKutta</I> class is pure virtual because the coefficients <I>a<SUB>i</SUB></I>, <I>b<SUB>ij</SUB></I>, and <I>c<SUB>j</SUB></I> are never specified at this level of the class hierarchy. <I>SetCoefficients()</I> is provided for this function but not implemented at this level. Specific implementations of the adaptive Runge-Kutta integrators are left to the third layer of the class hierarchy.<P>
Each implementation of a Runge-Kutta integrator must set the powers used to adjust the stepsize (see <a href="1995022c.htm">Example 6</A>), the value of the safety factor <img src="sigma12.gif">, and the coefficients used to perform the integration. The file rk45.cpp (available electronically; see &quot;Availability,&quot; page 3) illustrates this procedure for the <I>RungeKutta45</I> class. The constructor for the class is called with an integer specifying the dimension of the problem being integrated. The Runge-Kutta 4(5) implementation is a six-stage integrator, so this parameter is passed along with the dimension to the <I>AdaptiveRungeKutta</I> constructor. The <I>RungeKutta45</I> constructor sets the exponents and the safety factor, and then calls <I>SetCoefficients()</I> to set up the coefficients <I>a<SUB>i</SUB></I>, <I>b<SUB>ij</SUB></I>, and <I>c<SUB>j</SUB></I>. The coefficients used by this implementation were derived by Cash and Karp; see <a href="#021c_00b0">Table 1</A>. Most of the work needed to implement the Runge-Kutta integrator is contained in the <I>AdaptiveRungeKutta</I> class. The implementation-specific classes function primarily to set up the implementation details. rk45.cpp is an example of this technique. For the <I>RungeKutta45</I> class, the class constructor sets the tables of coefficients needed to perform the integration.<P>
<h3><a name="021c_00ad">Solving the Three-Body Problem<a name="021c_00ad"></h3><P>
The program starsys.cpp (available electronically) implements the <I>Trinary</I> class used to collect the <I>Derivative</I> and <I>Integrator</I> classes together with the arrays of initial- and final-state data into one class for integration. The <I>Trinary</I> class is the &quot;entity&quot; discussed earlier. The driving program creates an instance of this class and calls <I>TakeAStep()</I> with the desired stepsize in order to tell the <I>Trinary </I>system to perform an integration step. <P>
The <I>Trinary</I> constructor initializes the initial state array with data appropriate to a system consisting of three equal-mass bodies located equally distant from each other, moving tangentially to the circle that passes through the masses. This configuration is the starting point for one of the few known analytic solutions to the three-body problem, so it is a good test case for the integrators. The masses should move in such a way as to maintain the symmetry of the initial conditions: Lines connecting the masses should always form an equilateral triangle.<P>
The symmetric problem is a good test case for the integrators, but it can be rather boring. The <I>Trinary</I> class contains <I>Star1()</I>, <I>Star2()</I>, and <I>Star3()</I> to change the initial conditions of the problem. Each function takes a pointer to arrays of positions and velocities, along with a variable for the mass, so that you can experiment with different configurations of the system.<P>
stars.cpp (available electronically) is a simple driver for the <I>Trinary</I> system. As it stands, this driver integrates the default configuration for about an orbit and a half. <a href="1995022d.htm">Figure 3</A> shows the results of such an integration. The conditions needed for a more-complicated three-body system are included in the code in stars.cpp, but are commented out. You can generate the data for this system by removing the comment tokens.<P>
The file rk78.cpp incorporates the 7(8) integrator into the class structure. Since the lowest level of the integrator hierarchy consists of the implementation details, this class contains the same function calls as the <I>RungeKutta45</I> class. The <I>Trinary</I> class can use this integrator by changing the preprocessor definition of RKTYPE in starsys3.h (available electronically) from <I>RungeKutta45</I> to <I>RungeKutta78</I>. <a href="#021c_00b1">Table 2</A> shows the results of integration of the test problem through 750,000 simulated seconds for both of these integrators.<P>
<h3><a name="021c_00ae">Conclusions<a name="021c_00ae"></h3><P>
The class structure here can be adapted to many different types of differential equations. I have applied it to two- and three-body gravitating systems, and to the Lorenz equations found in Chaos theory. Any continuous, differentiable system that can be modeled using equations of the form given in <a href="1995022e.htm">Example 1</A> can be solved using the integrators presented here. Finally, the structure used to separate the Runge-Kutta algorithm from the implementation-specific details can be extended to other types of integrators.<P>
<h3><a name="021c_00af">References<a name="021c_00af"></h3><P>
Cash, R. and A.H. Karp. &quot;A Variable Order Runge-Kutta Method for Initial Value Problems with Rapidly Varying Right-Hand Sides.&quot; <I>ACM Transactions on Mathematical Software</I>, 16 (1990), 201.<P>
Press, W.H., S.A. Teukolsky, W.T. Vetterling, and B.P. Flannery. <I>Numerical Recipes in C</I>, Second Edition. Cambridge, U.K.: Cambridge University Press, 1992. <P>
Verner, J.H. &quot;Explicit Runge-Kutta Methods with Estimates of the Local Truncation Error.&quot; <I>SIAM Journal of Numerical Analysis</I>, 15 (1978). <P>
<h2>The Three-Body Problem</h2><P>
The three-body problem can be stated as follows: Given three gravitating bodies in an initial configuration in space (for instance, the configuration in <a href="1995022f.htm">Figure 4</A>) with some specified initial velocities, find how these bodies move over time. <P>
This problem is sufficiently complicated that no analytic solution exists for the general problem. Special cases of initial conditions have solutions that provide a good framework for testing integrators. For the three-body problem in this article, the parameter <I>t</I> in <a href="19950230.htm">Example 1</A> is time, and the integrator is used to make the system evolve in time. The variables for the problem are the positions <I>x</I>, <I>y</I>, and <I>z</I> and velocities <I>v<SUB>x</SUB></I>, <I>v<SUB>y</SUB></I>, and <I>v<SUB>z</SUB></I> of these bodies, represented in a Cartesian system. The state of each body can be represented by the current value of <I>t</I> and six components representing the position and velocity in space. <a href="19950231.htm">Example 7</A> presents the differential equations for the <I>i</I>th body.<P>
These equations exist for each of the three bodies in the problem. <I>G </I>is Newton's gravitational constant, the distance between body <I>i</I> and body <I>j</I> is given by <I>r<SUB>ij</SUB></I>, and each body <I>i</I> has mass <I>m<SUB>i</SUB></I>. We need to take the equations in <a href="19950232.htm">Example 7</A> along with an initial set of values for the positions and velocities (<I>x<SUB>1</SUB></I>, <I>y<SUB>1</SUB></I>, <I>z<SUB>1</SUB></I>, <I>v<SUB>x1</SUB></I>, <I>v<SUB>y1</SUB></I>, <I>v<SUB>z1</SUB></I>, and so on) and integrate these equations numerically to obtain the new values for the variables after a time step <img src="delta10.gif"><I>t</I>. One sample integration of this system is presented in this article. A second solution is shown in <a href="19950233.htm">Figure 5</A>.<P>
--D.J.C.<P>
<B><a href="19950234.htm">Figure 1</A>:</B> Integrator class hierarchy.<P>
<B><a href="19950235.htm">Figure 2</A>:</B> Derivative class structure.<P>
<B><a href="19950236.htm">Figure 3</A>:</B> Results of integration of the symmetric three-body system.<P>
<B><a href="19950237.htm">Figure 4</A>:</B> The three-body system.<P>
<B><a href="19950238.htm">Figure 5</A>:</B> Results of integration of an asymmetric three-body system.<P>
<B><a href="19950239.htm">Example 1</A>:</B> Differential equations solved by the integrator class.<P>
<B><a href="1995023a.htm">Example 2</A>:</B> Generating the ith stage when you have the preceding i-1 stages.<P>
<B><a href="1995023b.htm">Example 3</A>:</B> First stage generated (from Example 2). <P>
<B><a href="1995023c.htm">Example 4</A>:</B> Integration step. <P>
<B><a href="1995023d.htm">Example 5</A>:</B> Calculating the error estimate. <P>
<B><a href="1995023e.htm">Example 6</A>:</B> Performing adaptation.<P>
<B><a href="1995023f.htm">Example 7</A>:</B> Differential equations for the ith body of the three-body problem.<P>

<a name="021c_00b0"><a name="021c_00b0"><B>Table 1:</B> Coefficients for the RungeKutta45 class.
<PRE>
<b>i =   1     2     3     4     5     6</b>
a<SUB>i</SUB>    0     1/5     3/10     3/5     1     7/8
b<SUB>i1</SUB>
b<SUB>i2</SUB>   1/5
b<SUB>i3</SUB>   3/40     4/40
b<SUB>i4</SUB>   3/10     -9/10     6/5
b<SUB>i5</SUB>   -11/54     5/2     -70/27     35/27
b<SUB>i6</SUB>   1631/55296     175/512     575/13824     44275/110592     253/4096
c<SUB>i</SUB>    37/378     0     250/621     125/594     0     512/1771
c<SUB>i</SUB>*   2825/27648     0     18575/48384     13525/55296     277/14336     1/4
</PRE>
<a name="021c_00b1"><a name="021c_00b1"><B>Table 2:</B> Comparison of final position from Runge-Kutta 4(5) and Runge-Kutta 7(8) integrations.
<PRE>
<b>    Runge-Kutta 4(5)    Runge-Kutta 7(8)    Difference</b>

x<SUB>1</SUB>    4697.00964137395    4697.00964144131    -0.00000006736
y<SUB>1</SUB>    36.5844745040766    36.5844743862259    0.0000001178507
z<SUB>1</SUB>           0                   0                   0 
x<SUB>2</SUB>    -2316.82173637934   -2316.82173651791   0.00000013857
y<SUB>2</SUB>    -4086.02190850241   -4086.02190850171   -0.0000000007
z<SUB>2</SUB>           0                   0                   0
x<SUB>3</SUB>    -2380.18790499465   -2380.18790492343   -0.00000007122
y<SUB>3</SUB>    4049.43743399842    4049.43743411535    -0.00000011693
z<SUB>3</SUB>           0                   0                   0</pre><P>
<P>
<h4><a name="021c_00b2"><a name="021c_00b3"><a name="021c_00b3">Listing One</h4><pre>
// integrat.h  -- Integrator class definition
#ifndef         INTEGRAT_H
#define         INTEGRAT_H
#include        &lt;math.h&gt;
#include        &lt;stdio.h&gt;
#include        &quot;derivs.h&quot;
#define         FALSE       0
#define         TRUE        1
class           Integrator {
    protected:
        int dimension;  // Size of the &quot;state&quot; vector
        double  *initState; // Pointer to state for integration
        double  *finalState;// Pointer to integrated state
        // Pointer to derivative class
        Derivative      *ddt;
    public:
                        Integrator(int dim);
        virtual         ~Integrator(void);
        // Access to the integration variables
        void            InitState(double *istate)
        { initState = istate; }
        void            FinalState(double *fstate)
        { finalState = fstate; }
        void            Derivatives(Derivative *deriv);
        virtual double  Step(double h) = 0;
};
#endif
</pre>
<h4><a name="021c_00b4"><a name="021c_00b5"><a name="021c_00b3">Listing Twox</h4><pre>
// integrat.cpp  -- Integrator class functions
#include            &quot;integrat.h&quot;
Integrator::Integrator(int dim)
{
    dimension = dim;
}
Integrator::~Integrator(void)
{
    return;
}
void        Integrator::Derivatives(Derivative *deriv)
{
    ddt = deriv;
}
</pre>
<h4><a name="021c_00b6"><a name="021c_00b7"><a name="021c_00b7">Listing Three</h4><pre>
// derivs.h  -- Class for derivative skeleton for the integrator class
#ifndef         DERIVS_H
#define         DERIVS_H
#define         TRUE        1
#define         FALSE       0
#include        &lt;math.h&gt;
class           Derivative {
  private:
      // No private data or functions in the skeleton
  public:
                Derivative(void)
                { }
    virtual     ~Derivative(void)
                { }
    virtual int GetDerivatives(double dt, double *where) = 0;
};
#endif
</pre>
<h4><a name="021c_00b8"><a name="021c_00b9"><a name="021c_00b9">Listing Four</h4><pre>
// 3body.h -- Class for gravitational forces for the example problem
#ifndef           THREEBODY_H
#define           THREEBODY_H
#include          &quot;derivs.h&quot;
class             ThreeBody : public Derivative {
    private:
        double      mu1, mu2, mu3;
        double      r1[3], r2[3], r3[3];
        double      v1[3], v2[3], v3[3];
    public:
                    ThreeBody(void);
                    ~ThreeBody(void);
        int         GetDerivatives(double dt, double *where);
        void        Mu1(double m1) { mu1 = m1; }
        void        Mu2(double m2) { mu2 = m2; }
        void        Mu3(double m3) { mu3 = m3; }
};
#endif
</pre>
<h4><a name="021c_00ba"><a name="021c_00bb"><a name="021c_00bb">Listing Five</h4><pre>
// 3body.cpp -- gravitational forces for the example problem; provides 
// 1st derivative  information of the state. Tailor code to match your problem.
#include            &quot;3body.h&quot;
ThreeBody::ThreeBody(void)
{
    mu1 = 100;
    mu2 = 100;
    mu3 = 100;
}
ThreeBody::~ThreeBody(void)
{
    return;
}
int     ThreeBody::GetDerivatives(double dt, double *where)
// Note: dt is not used here; it may be needed in other systems
{
    double      d12, d23, d13;    // Distances from origin
    double      d12cubed, d23cubed, d13cubed;
                                  // Distances from origin cubed
    // where comes in with positions and velocities
    r1[0] = where[0];   r1[1] = where[1];   r1[2] = where[2];
    v1[0] = where[3];   v1[1] = where[4];   v1[2] = where[5];
    r2[0] = where[6];   r2[1] = where[7];   r2[2] = where[8];
    v2[0] = where[9];   v2[1] = where[10];  v2[2] = where[11];
    r3[0] = where[12];  r3[1] = where[13];  r3[2] = where[14];
    v3[0] = where[15];  v3[1] = where[16];  v3[2] = where[17];
    d12 = sqrt((r1[0] - r2[0]) * (r1[0] - r2[0]) +
                (r1[1] - r2[1]) * (r1[1] - r2[1]) +
                (r1[2] - r2[2]) * (r1[2] - r2[2]));
    d12cubed = d12 * d12 * d12;
    if (d12cubed == 0.0)    // masses must be separated
        return FALSE;
    d23 = sqrt((r2[0] - r3[0]) * (r2[0] - r3[0]) +
                  (r2[1] - r3[1]) * (r2[1] - r3[1]) +
                  (r2[2] - r3[2]) * (r2[2] - r3[2]));
    d23cubed = d23 * d23 * d23;
    if (d23cubed == 0.0)    // masses must be separated
        return FALSE;
    d13 = sqrt((r1[0] - r3[0]) * (r1[0] - r3[0]) +
                 (r1[1] - r3[1]) * (r1[1] - r3[1]) +
                 (r1[2] - r3[2]) * (r1[2] - r3[2]));
    d13cubed = d13 * d13 * d13;
    if (d13cubed == 0.0)    // masses must be separated
        return FALSE;
    // and returns with velocities...
    where[0] = v1[0];   where[1]  = v1[1];  where[2]  = v1[2];
    where[6] = v2[0];   where[7]  = v2[1];  where[8]  = v2[2];
    where[12] = v3[0];  where[13] = v3[1];  where[14] = v3[2];
    // and accelerations
    // m1
    where[3] = - mu2 * (r1[0] - r2[0]) / d12cubed
               - mu3 * (r1[0] - r3[0]) / d13cubed;
    where[4] = - mu2 * (r1[1] - r2[1]) / d12cubed
               - mu3 * (r1[1] - r3[1]) / d13cubed;
    where[5] = - mu2 * (r1[2] - r2[2]) / d12cubed
               - mu3 * (r1[2] - r3[2]) / d13cubed;
    // m2
    where[9]  = - mu1 * (r2[0] - r1[0]) / d12cubed
                - mu3 * (r2[0] - r3[0]) / d23cubed;
    where[10] = - mu1 * (r2[1] - r1[1]) / d12cubed
                - mu3 * (r2[1] - r3[1]) / d23cubed;
    where[11] = - mu1 * (r2[2] - r1[2]) / d12cubed
                - mu3 * (r2[2] - r3[2]) / d23cubed;
    // m3
    where[15] = - mu1 * (r3[0] - r1[0]) / d13cubed
                - mu2 * (r3[0] - r2[0]) / d23cubed;
    where[16] = - mu1 * (r3[1] - r1[1]) / d13cubed
                - mu2 * (r3[1] - r2[1]) / d23cubed;
    where[17] = - mu1 * (r3[2] - r1[2]) / d13cubed
                - mu2 * (r3[2] - r2[2]) / d23cubed;
    return TRUE;
}
</pre>
<h4><a name="021c_00bc"><a name="021c_00bd"><a name="021c_00bd">Listing Six</h4><pre>
// adapt_rk.h -- Runge-Kutta class definition
#ifndef         ADAPT_RK_H
#define         ADAPT_RK_H
#include        &quot;integrat.h&quot;
class           AdaptiveRungeKutta : public Integrator {
    protected:
        int         stages;    // Number deriv. evals in algorithm
        double      *ai;       // Portion of step at ith stage
        double      **bij;     // Portions of previous stages to use
        double      *cj;       // For RK step taken
        double      *errorest; // Estimate of the error
        int         fixedStep; // Boolean flag for fixed step mode
        double      accuracy;  // Maximum errorest for good step
        double      safety;    // Safety factor for adaptive steps
        double      goodpower; // 1/(RK order)
        double      badpower;  // 1/(RK order - 1)
      // The following are internal workspaces for the algorithm
      double          *accumulated;
      double          *workstate;
      double          **stepk;
      double          GetError(double **stepk);
      double          NewStep(double maxError, double h);
      double          independent;// indep. variable (e.g. time)
    public:
                        AdaptiveRungeKutta(int st, int dim);
        virtual         ~AdaptiveRungeKutta(void);
        virtual void    SetCoefficients(void) = 0;
        double          Step(double h);
        void            Accuracy(double goodness)
        { accuracy = goodness; }
        void                FixedStep(int tf)
        { if (tf == 0) fixedStep = FALSE; else fixedStep = TRUE; }
};
#endif
</pre>
<h4><a name="021c_00be"><a name="021c_00bf"><a name="021c_00bf">Listing Seven</h4><pre>
// adapt_rk.cpp  -- Runge-Kutta functions
#include            &quot;adapt_rk.h&quot;
AdaptiveRungeKutta::AdaptiveRungeKutta(int st, int dim) : Integrator(dim)
{
    int         i;
    stages = st;
    fixedStep = TRUE;
    accuracy  = 1e-7;
    independent = 0.0;
    // Set the pointers to the arrays to NULL for now
    ai       = new double[stages];
    cj       = new double[stages];
    errorest = new double[stages];
    bij      = new double*[stages];
    for (i = 0; i &lt; stages; i++)
        bij[i] = new double[stages];
    accumulated = new double[dimension];   // Working arrays
    workstate = new double[dimension];
    stepk = new double*[stages];
    for (i = 0; i &lt; stages; i++)
        stepk[i] = new double[dimension];
}
AdaptiveRungeKutta::~AdaptiveRungeKutta(void)
{
    int         i;
    if (ai)
        delete [] ai;
    if (bij) {
        for (i = 0; i &lt; stages; i++)
            delete [] bij[i];
        delete [] bij;
    }
    if (cj)
        delete [] cj;
    if (errorest)
        delete [] errorest;
   if (accumulated)
        delete [] accumulated;
   if (workstate)
      delete [] workstate;
   if (stepk) {
      for (i = 0; i &lt; stages; i++)
           delete[] stepk[i];
      delete [] stepk;
   }
}
double          AdaptiveRungeKutta::Step(double h)
{
    double          stepsize = h;      // Next stepsize to take
    double          desiredStep = h;
    double          stepSoFar = 0.0;   // Step taken to date
    double          stepTaken;     // Current step
    double          maxErrorFound = 0.0;
    int             i, j, k;
    int             fixedPassed = TRUE;
    if (fixedStep)              // If in fixed step mode, don't
        fixedPassed = FALSE;    // break loop until desired step
    for (i = 0; i &lt; dimension; i++)
        workstate[i] = initState[i];
    do {
        stepTaken = stepsize;
        for (i = 0; i &lt; stages; i++) {
            // Fill accumulated with info from the previous stages
            for (j = 0; j &lt; dimension; j++) {
                accumulated[j] = workstate[j];
                for (k = 0; k &lt; i; k++) {
                    accumulated[j] += bij[i][k] * stepk[k][j];
                }
            }
            // Calculate the data for the current stage
            if (!ddt -&gt; GetDerivatives(independent + stepTaken * ai[i],
                                         accumulated))
                return 0.0;             // Bad derivative ==&gt; No step taken
            for (j = 0; j &lt; dimension; j++)
                stepk[i][j] = stepTaken * accumulated[j];
        }
        // Here's the step used:
        for (j = 0; j &lt; dimension; j++) {
            finalState[j] = workstate[j];
            for (i = 0; i &lt; stages; i++)
                finalState[j] += cj[i] * stepk[i][j];
        }
        // Here we test the step
        maxErrorFound = GetError(stepk);
        // And calculate the next step to be taken
        stepsize = NewStep(maxErrorFound, stepTaken);
        // Now accumulate for fixed step mode
        if (fixedStep) {
            // Step was good
            if (maxErrorFound &lt; accuracy) {
                stepSoFar += stepTaken;
                if (stepsize &gt; desiredStep - stepSoFar)
                    stepsize = desiredStep - stepSoFar;
                // Update the working state if not at the end
                if (stepSoFar &lt; desiredStep)
                    for (i = 0; i &lt; dimension; i++)
                        workstate[i] = finalState[i];
                // If at end, set flag
                else
                    fixedPassed = TRUE;
            }
        }
    // Stop if step is good, else try again with the new step.
    } while ((maxErrorFound &gt; accuracy) || !fixedPassed);
    if (fixedStep)
        return stepSoFar;
    return stepTaken;
}
double          AdaptiveRungeKutta::GetError(double **stepk)
{
    int             i, j;
    double      biggestError = 0.0, currentError;
    for (i = 0; i &lt; dimension; i++) {
        currentError = 0.0;
        for (j = 0; j &lt; stages; j++)
            currentError += errorest[j] * stepk[j][i];
        currentError = fabs(currentError);
        if (currentError &gt; biggestError)
            biggestError = currentError;
    }
    return biggestError;
}
double          AdaptiveRungeKutta::NewStep(double maxError, double h)
{
    double      newstep;
    if (accuracy &gt;= maxError)           // Step was good
        newstep = safety * h * fabs(pow(accuracy/maxError, goodpower));
    else                               // Step was too big
        newstep = safety * h * fabs(pow(accuracy/maxError, badpower));
    return newstep;
}
</pre>
<P>
<P>
<P>
<P>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
