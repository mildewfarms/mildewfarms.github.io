<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>DEC95: PROGRAMMING PARADIGMS</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>PROGRAMMING PARADIGMS<a name="0269_00b5"><a name="0269_00b3"><a name="0269_0000"></h1><P>
<h2>Cheapo Bizarre Languages</h2><P>
<h3>Michael Swaine</h3><P>
<a name="0269_00b4"><a name="0269_0000">There are way too many Mikes in this world. There are even too many Mikes writing about the computer and electronics industries. I don't like to complain, but Jeez.<P>
And in almost every case, I note that I was using the name first.<P>
Mike Malone is known for his eponymous Public Television interview program (&quot;Malone,&quot; I'm happy to say, not &quot;Mike&quot;), his book <I>The Big Score</I> (a history of Silicon Valley), and his pioneering investigative work on high-tech stories like the black market in chips and espionage in the electronics industry. His latest book, <I>The Microprocessor: A Biography</I>, dropped over the transom here at Stately Swaine Manor recently, and I couldn't put it down.<P>
Not, at least, until I had enough material for the first third of this column. <P>
<h3><a name="0269_00b6">The Microprocessor, a Biography<a name="0269_00b6"></h3><P>
I don't know about you, but I read history for the stories. Fortunately for me, Malone writes history as a bunch of stories. All the memorable stories of the birth and twenty-something life of the microprocessor are here, usually gleaned from Malone's many interviews with all the movers and most of the shakers, but a few no doubt overheard at the legendary Wagon Wheel restaurant, which often played the role of the Ryder van in the moving and shaking in Silicon Valley's wild early years.<P>
The book provides some interesting wrinkles on the founding of Silicon Valley. Most of that story is familiar: How William Shockley took his Nobel Prize, left Bell Labs, and went home to Palo Alto. How he founded Shockley Laboratories to make himself rich and attracted the best scientists in the field. How he quickly drove out his eight best scientists, including Gordon Moore and Bob Noyce, all of whom went out and founded Fairchild. Or were these scientists at fault? Were they &quot;the Traitorous Eight,&quot; as they have been called? Malone more than hints at the answer when he speaks of Shockley's paranoia and labels him a &quot;rotten boss.&quot;<P>
Malone wades right into the credit thing: the recurring debates over who actually created the microprocessor. I needed some reminding, at least, as to the role of Federico Faggin vs. Ted Hoff at Intel. Faggin, who left Intel in 1974 to start a competing company (Zilog), more or less faded out of Intel's official history of the microprocessor. Malone sets the record straight, telling who did what and concluding diplomatically by labeling Faggin the creator, and Hoff the inventor, of the microprocessor.<P>
That, of course, is only the intra-Intel credit controversy. The fact remains that two Texas Instruments scientists, Michael (another one) Cochran and Gary Boone, were granted the first &quot;microcomputer&quot; patent. Why Malone, and most of the world, gives credit for the invention of the microprocessor to Intel's effort is something Malone covers.<P>
And suddenly in 1990, from out of nowhere, comes one Gilbert Hyatt, a virtual unknown, who claims to have invented the microprocessor over twenty years earlier, and has the patent to prove it. As it turns out, he was not unknown to Bob Noyce and Gordon Moore. Malone covers it all.<P>
Malone writes knowledgeably of the crazy period when the bottom fell out of the calculator market. Although Hewlett-Packard doesn't normally break out revenues or profits for particular product lines, Malone was working for HP's calculator group from 1977 to 1979, so he is able to detail exactly how HP managed to ride out the storm and face down TI's &quot;scorched-earth policy.&quot; That was the same scorched-earth policy, incidentally, that drove MITS out of the calculator business and inspired Ed Roberts to build the Altair computer that launched the personal-computer revolution.<P>
You'll find Moore's Law in <I>The Microprocessor: A Biography</I> in several forms, and neatly graphed. It looks good to me, but I'll defer to <I>DDJ</I> contributor Hal Hardenbergh on the question of whether or not Malone got it right. Hal, who has documented many misinterpretations of Moore's Law over the years, may or may not be the absolute final authority on the issue, but I wouldn't dare contradict him.<P>
Malone's book tells its stories with a proper appreciation for their drama. Probably the most dramatic moment in the book comes, believe it or not, during a slide presentation by an HP exec at a trade show. The speaker started his presentation slowly, then dropped the bomb. In Malone's words, &quot;Based on its testing of U.S. semiconductor deliveries versus those from the Japanese, the latter were not just superior in quality, but shockingly so.&quot; The difference in failure rates was on the order of 5 percent from U.S. vendors versus no failures at all from Japanese vendors.<P>
The period that followed this revelation was not pleasant. Former antiprotectionists in the U.S. ran crying to the government for help. Japanese executives began speaking of the U.S. as a dying and decadent society. Ugly.<P>
How the American semiconductor companies responded is a fascinating story, one of many good stories Malone tells. Not only did I enjoy this and the other stories in this book, I also found that I learned a lot that I didn't know from Malone. Say, brother, you can't beat that with a stick.<P>
Although Malone occasionally mentions his own history (like his HP job) in a footnote, the book is never in danger of becoming <I>The Microprocessor: An Autobiography</I>. Don't you just hate authors who are always inserting themselves into their writing? I know I do.<P>
Here are the vital statistics: <I>The Microprocessor: A Biography</I>, by Michael S. Malone, 1995, Springer-Verlag (TELOS, Santa Clara, CA), 333 pages, $29.95.<P>
<h3><a name="0269_00b7">Cheapo Bizarre Languages<a name="0269_00b7"></h3><P>
What follows is the first installment of an ongoing survey of cheapo bizarre languages. Okay, some of these are cheap, some are free, and some are less bizarre than others. Basic, for example, can hardly be called bizarre, although the implementation described here may qualify. Forth is bizarre enough, but I want you Forth fanatics to know that I mean that in the nicest possible way.<P>
This installment might be called more accurately &quot;The State of Programming Paradigms: Part I: Public Domain and Shareware Languages for the Macintosh that Embody Alternative Programming Models; Section A: Basic and Forth; Including Some Historical Background.&quot;<P>
In any event, this is a very selective overview. It won't deal with, say, the special needs of embedded-systems programmers. It will present evidence that there's more to programming than C, more than C++ even. The languages I am examining in this installment all exist on the Mac, though some that I'll discuss in later installments are available on other platforms as well.<P>
<h3><a name="0269_00b8">Cheapo Basic<a name="0269_00b8"></h3><P>
Before the Mac was released in 1984, it was clear to any right-thinking person that the first high-level programming language for the Mac would be Basic. In the early 1980s, it was a foregone conclusion that you supplied a Basic with any new machine. The only questions were, interpreted or compiled, disk-based or in ROM, Microsoft's or your own or somebody else's.<P>
Apple decided to pursue two routes: It encouraged Microsoft to develop a Basic for the Mac, and it put Donn Denman to work on Apple's own MacBasic. Microsoft's Basic was delivered on time, but it was godawful. MacBasic, which was due for delivery within a few months of the Mac's release, was clearly going to kill Microsoft's Basic dead.<P>
Microsoft took immediate action: Using the leverage of its licensing agreement over AppleSoft Basic for the Apple II, Microsoft demanded that Apple kill MacBasic. This may not have been a very bright move for Microsoft, since it could have renegotiated its AppleSoft license for almost any amount at that point, a fact that Bill Gates has since acknowledged. But instead it pressured Apple to kill MacBasic, and Apple caved.<P>
It's easy to paint Microsoft as the heavy in this (although Apple management looks worse for knuckling under), but the story of Microsoft's influence on the Mac is too complex for such simple characterizations. One example: A key feature of the original Mac file system was apparently actually taken, with Bill's blessing, from his file-allocation scheme for Standalone DOS.<P>
Let the dead past stay buried, you say? Ah, but like a rodent from the grave rises Chipmunk Basic, described by its author, Ronald Nicholson (rhn@netcom.com), as &quot;a simple Basic interpreter...similar to the line-number based MumbleSoft BASIC interpreters of circa 1980.&quot; Yes, friends, here's that Basic interpreter for the Mac that you've been wanting all these years, accelerated for the PowerMac.<P>
Understand, this is not a language for producing fast, bullet-proof, commercial-quality code. It began life in humble circumstances, out of the need for a Pascal program to test a Pascal-to-C translator called &quot;p2c.&quot; The Pascal program, basic.p, was part of the test input suite to p2c.<P>
But while it's not what you'd call fast, Chipmunk Basic runs 150 to 200 times faster on a PowerMac 7100/80 than Microsoft Basic 1.0 did on the original, 128K Mac.<P>
If you need a relatively traditional Basic, this one is fairly solid and it's free. It has some features that make sense in a 1980-vintage Basic, like sprite graphics, an old-fashioned line-number-based editor, a predictable collection of numeric and string operators and functions, and file I/O statements. Its two variable types are <I>long float</I> and <I>string</I>, the latter with a maximum length of 254 characters.<P>
But seriously, why would you ever want to use Chipmunk Basic?<P>
Well, it also has some features you wouldn't expect. It supports AppleScript's <I>DoScript</I> command, for example, so you can drive your Chipmunk Basic programs with scripts. And you can do an <I>open &quot;SFGetFile&quot; for input as #2</I> to use Apple's <I>sfGetFile</I>; ditto for <I>SFPutFile</I> for output. Or you can do an <I>open &quot;COM1:&quot; for input as #3</I> or an <I>open f$ for data input as #4</I> where <I>f$</I> references a data file. <P>
There's a <I>say</I> command that speaks strings if you have the Speech Manager installed, and you can save and restore variables with <I>push(x,y,a$) : gosub 200 : pop 3</I>. There's also a construct similar to awk fields: <I>a$ = field$(&quot;aa bb cc dd&quot;, 2, &quot; &quot;)</I>, which suggests one purpose for which you might use any of these cheapo bizarre languages--as a so-called little language.<P>
In his &quot;Programming Pearls&quot; columns and books, Jon Bentley has popularized both the term and the concept of little languages, those small programming systems that you use for just-bigger-than-back-of-the-envelope calculations, quick tests of ideas, aides to thought. Bentley's little language of choice, is, of course, awk. Bentley evidently thinks in awk. But if you're one of us who were once warped by Basic and never altogether recovered, maybe, in unguarded moments, you still think in Basic. If so, maybe Basic should be one of your little languages of choice.<P>
<h3><a name="0269_00b9">Cheapo Forth<a name="0269_00b9"></h3><P>
Although there was no Basic on the first Mac, this was no great handicap, since Apple didn't intend for anyone to write programs for the Mac on the Mac anyway. The development platform for the early 128K Mac was a Lisa.<P>
There was, however, in the early months of Mac availability in 1984, a programming language that allowed developers to write programs for the Mac on the Mac. It produced fast code and gave access to nearly every routine in the then-64K ROM. The language was MacForth, from Creative Solutions.<P>
Forth lives on today on the Mac in various implementations. Two free versions are MacQForth and Pocket Forth.<P>
MacQForth is a voice from the apparently-not-quite-dead past. Its author, Ronald T. Kneusel (rkneusel@post.its.mcw.edu or kneusel@msupa.pa.msu.edu or rkneusel@carroll1.cc.edu, take your pick), claims that its chief use is as a tool for teaching Forth, and he has included some excellent tutorial materials.<P>
It has another use, however, due to its heritage: It's also a decent tool for learning 6502 assembler. QForth itself was written for the Apple IIe by Toshiyasu Morita. MacQForth is basically QForth plus a 65C02-microprocessor simulator. For the most part, the code in MacQForth is identical to the code in the Apple II version. MacQForth programs think they're running on an Apple II. <P>
Running QForth on the simulator has the advantages that the system is small and easy to learn, and not only is all of Forth available, but an entire microcomputer environment is available as well, including a system monitor and 6502 assembler.<P>
An aside: The 6502, Chuck Peddle's invention and Steve Wozniak's obsession, lives on. MOS Technologies passed it on to Synertek, which passed it on to Rockwell, which passed it on to Western Design Center, which lists among its current customers AT&amp;T, ITT, Sony, and Siemens. Who'da thunk the 6502 would be among the survivors of the chip wars? This data courtesy of Mr. Malone's aforementioned book.<P>
Return from aside: Pocket Forth is a Forth implementation that requires the MDS assembler. MDS, Macintosh Development System, is Apple's now-discontinued 68000 assembler. Consulair apparently also sold an assembler that is compatible with MDS.<P>
Pocket Forth is interesting because it supports the required suite of Apple Events and can define new Apple Events. This means that Pocket Forth can be scripted by scripts running in Userland Frontier, HyperCard, and AppleScript. Its author, Chris Heilman (heilman@pc.maricopa.edu), sees this as important. To show off Pocket Forth scripting, he has supplied a text file to define three new events, a HyperCard stack to demonstrate the events, and a Frontier install script that facilitates writing Frontier scripts to control Pocket Forth.<P>
<h3><a name="0269_00ba">Cheapo Neon<a name="0269_00ba"></h3><P>
One of my all-time favorite languages was Chuck Duff's Neon, an object-oriented language based on a kernel written in Forth and assembly language, sold by Kriya Systems between 1985 and 1989. Chuck learned a lot in writing Neon, and brought that experience to the more sophisticated language Actor some time later. Despite some rough edges, though, Neon was a fun language, combining the speed and extensibility of Forth with (some of) the virtues of Smalltalk.<P>
Neon lives on, too, since Kriya Systems released all the source code to the public domain. Two free descendants of Neon are Mops and Yerk.<P>
Mops is an object-oriented programming system derived from Neon. The latest Mops release includes various ex-Neon classes that author Michael Hore (mikeh@zeta.org.au) converted, as well as a number of other classes he wrote over the years. He has released all original Mops material into the public domain. If you want to use it commercially, that's fine, although he'd like you to let him know about it.<P>
Yerk is a Neon derivative, too. It has been maintained by several programmers at The University of Chicago since the demise of Neon as a product. The name Yerk is not an acronym for anything, but rather stands for Yerkes Observatory, part of the Department of Astronomy and Astrophysics at U of C. Bob Loewenstein at Yerkes Observatory (rfl@yerkes.uchicago.edu) distributes Yerk under Kriya's release statement:<P>
<cite>Kriya Systems, Inc. gives you [me] the permission to freely distribute for scientific and educational purposes the programming language formerly known as Neon, including the distribution of the source which has been released to you. You do not have the right to use the name Neon, as it apparently had prior use by another company and is not a valid trademark of Kriya Systems. All commercial distribution rights are reserved by Kriya Systems, Inc.</cite><P>
He takes this to mean that Yerk can't be sold.<P>
Appealing features of Yerk, some of which are shared by Mops, include:<P>
<UL>
<li>Defaulted early binding, with the ability to late bind in almost any circumstance.</li>
<li>Dynamic instantiation of objects on the heap.</li>
<li>Single inheritance.</li>
<li>Floating point (SANE).</li>
<li>Many system classes and objects for Mac interfacing.</li>
<li>Module (overlay) creation that is loaded only when necessary and may be purged from the application's heap memory.</li>
</UL>
Loewenstein has a number of general classes for color Quickdraw interfaces, MacTCP classes, and the like, that he's willing to make available to people who contact him.<P>
All current languages discussed in this column are available on various online services and on the Apprentice CD series from Celestin Company (Port Townsend, WA).<P>
Next month, even more bizarre languages.<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
