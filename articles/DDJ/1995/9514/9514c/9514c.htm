<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>SP95: A Visual Basic Form Generator</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>A Visual Basic Form Generator<a name="0307_00dc"></h1><P>
<h2><a name="0307_00da"><a name="0307_0000">Speeding up the Windows development process</h2><P>
<h3>Wei Xiao</h3><P>
<p><i><a name="0307_00db"><a name="0307_0000">Wei is currently a research assistant in the computer-science department at the University of Wisconsin-Madison and can be reached at wei@cs.wisc.edu.</i></p><hr><P>
At the commercial auto-insurance company where I work, I was assigned the task of developing a Windows-based insurance-policy system using Visual Basic (VB). Because of the wide range of options available on the insurance policies, hundreds of pages of documents had to be converted to VB forms. It took hours to draw one form using the interface designer that came with Visual Basic, because there were usually hundreds of labels and text boxes to draw. Changing the font or character size for all the controls also took a lot of effort. Realizing that end users can easily enter the form using a text editor (with certain special symbols to specify fill-in blanks and check boxes), I wrote a program to parse a text file and generate a VB form that can be loaded into the project file directly. An end user can also scan the paper form and use an OCR program to generate the text file. With this approach, it takes less than ten minutes to edit the form's text file to make sure the OCR gets it right. My form-generator program handles text boxes, combo boxes, check boxes, and form attributes such as font, margin, and color.<P>
This article describes how I designed the form-description-file format and the form-generator program. The format of the form-description file is simple enough for end users to edit, yet powerful enough for professional programmers who need to quickly generate GUIs with end-user involvement. I'll also discuss how to combine the benefits of both the WYSIWYG interface designer and the form generator.<P>
The form generator is a C program that converts a text file into a VB form file (.FRM file). The program converts a text string in the text file into a label in the .FRM file and converts a series of underscores (often used as fill-in blanks) into a text box. If there are hundreds of labels and text boxes in the form, it is easier and faster to enter or modify the text file rather than to draw the form using the Visual Basic interface designer. The end user can edit the text file or scan the paper forms. When I converted the insurance-policy forms into VB forms, using the form generator was ten times faster than drawing the forms manually.<P>
A form can be as simple as <a href="#0307_00de">Figure 1</A>, which has three fill-in blanks and three words describing the information requested. When this form is converted to a VB .FRM file, there will be three labels and three text boxes. For the format of the .FRM file, see the <I>Visual Basic Programmer's Reference Manual</I>. The form-generator program reads the text file in <a href="#0307_00de">Figure 1</A>(the &quot;form-description file&quot;) and generates the VB .FRM file; see <a href="#0307_00df">Figure 2</A>. The .FRM file can be loaded into a Visual Basic project directly.<P>
Check boxes and combo boxes are often used in forms. The form-description file requires a special symbol to tell the form-generator program where those special boxes are. I use an asterisk (*) to denote a check box. For example, the line in <a href="19950309.htm">Example 1</A>(a) in a form-description file becomes the line in <a href="1995030a.htm">Example 1</A>(b) in the generated VB Form.<P>
Combo boxes need special symbols to specify their locations and default options. In the beginning of the form-description file, a command section is needed which includes the command that defines the options of a combo box. The command section is enclosed in a pair of braces, { }. The command I use is <I>ComboSet</I>. For example, <a href="#0307_00e0">Figure 3</A> defines two combo-box types: &quot;car-make&quot; with the options &quot;Ford,&quot; &quot;Honda,&quot; and &quot;Chevy;&quot; and &quot;fruit-type&quot; with the options &quot;apple,&quot; &quot;orange,&quot; and &quot;grape.&quot; The <I>ComboSet</I> command takes one argument. If the argument starts with an @ character, the string after the @ character is the type name of a combo box. Otherwise, it is one of the options of a combo box. The type name of the combo box always immediately follows the box's options. This syntax simplifies the form-generator program. In the form-description file, a combo box is denoted by *@, followed by the type name. The form defined by the file in <a href="#0307_00e0">Figure 3</A> has two questions, with combo boxes providing default answers.<P>
The command section contains a few other commands: <I>FormName</I> and <I>FormCaption</I> specify the form's name and caption, respectively. <I>FormSet</I> and <I>ControlSet</I> specify some of the form's properties and all of its controls. In <a href="#0307_00e1">Figure 4</A>, the form is set to be an <I>MDIChild</I>, with a border style of 0 (NONE), and with all the controls on the form in bold fonts. The <I>LeftMargin </I>command specifies how much space is on the left side of the form. Notice that all these commands are optional. Even the command section is optional. Users do not have to learn the commands until they need to use them. The last command in <a href="#0307_00e1">Figure 4</A>, <I>Summary</I>, puts appropriate values for five variables in the Visual Basic <I>Form_Load()</I> procedure: <I>nCheckBox, nTextBox, nComboBox, nFormWidth</I>, and <I>nFormHeight</I>, so that programmers can write some routines using these properties of the generated form.<P>
<h3><a name="0307_00dd">The Program<a name="0307_00dd"></h3><P>
<a href="#0307_00e2">Listing One</A> is a C implementation of the form-generator program. It scans the form-description file twice. (An executable version of the program, plus associated forms, is available electronically; see &quot;Availability,&quot; page 3.) The first pass counts the number of lines and maximum line width in the form-description file in order to calculate the form width and height, because these two values are needed in the beginning of the VB .FRM file. The second pass generates the .FRM file as it scans the form-description file, following these three steps:<P>
<OL>
<LI>The command section is processed, and the header of the form is generated. Three stacks are used to store arguments of the <I>FormSet</I>, <I>ControlSet</I>, and <I>ComboSet</I> commands. Some flags and values are also stored in this step. </LI>
<LI>The rest of the form-description file is scanned. For underscores, text boxes are generated; for strings that start with an asterisk (*), check boxes are generated; for strings that start with *@, combo boxes are generated. The rest of the text is converted to labels. For each control, the stack that stores the arguments of <I>ControlSet</I> is dumped as part of the attribute list for that control. Thus, <I>ControlSet</I> sets attributes for all the controls on the form. </LI>
<LI>The <I>Form_Load()</I> function is written to the end of the .FRM file. This function includes initialization statements for the summary variables if the <I>Summary</I> command is in the command section. It also includes the initialization code for combo boxes if they are used in the form.</LI>
</OL>
The syntax of the form-description file can be extended into a form-description language in which you can define new objects and write application code. Based on the same form-description file, the form generator may also generate forms and code for other GUI development environments. Visual GUI designers (like the one that comes with Visual Basic) are great for beginners, but they may not fully satisfy the needs of professional programmers. The best solution may be to use the visual GUI designer for designs that need immediate interaction, and to use a form generator to eliminate tedious drawing jobs.<P>
<a name="0307_00de"><a name="0307_00de"><B>Figure 1:</B> Simple form-description file.<P>
<pre>Name _______________
Age ______________
Address ____________</pre><P>

<a name="0307_00df"><a name="0307_00df"><B>Figure 2:</B> The beginning of the .FRM file for the file in <a href="#0307_00de">Figure 1</A>.<P>
<pre>VERSION 2.00
Begin Form form1
      Caption = &quot;form1&quot;
      Width = 2100
      Height = 1275
      Top = 100
      Left = 100
      Begin Label Label1
         Index = 0
         Caption = &quot;Name&quot;
         FontUnderline   =   0   'False
         FontBold        =   0   'False
         FontItalic      =   0   'False
         FontName        =   &quot;Courier New&quot;</pre><P>
         
<a name="0307_00e0"><a name="0307_00e0"><B>Figure 3:</B> Form-description file with combo boxes.<P>
<pre>{
   ComboSet: apple
   ComboSet: orange
   ComboSet: grape
   ComboSet:  @fruit-type
   ComboSet: Ford
   ComboSet: Honda
   ComboSet: Chevy
   ComboSet:  @car-make
}
What kind of fruit do you like? *@fruit-type
What kind of car do you drive?  *@car-make</pre><P>

<a name="0307_00e1"><a name="0307_00e1"><B>Figure 4:</B> Sample command section.<P>
<pre>{
FormName: MF1
     FormCaption: Optional Coverage
     FormSet: MDIChild = -1
     FormSet: BorderStyle = 0
     ControlSet: FontBold = -1
     LeftMargin: 100
     Summary
}</pre><P>

<a href="1995030b.htm">Example 1</A>  (a) Form-description file; (b) generated Visual Basic form.
<P>
<h4><a name="0307_00e2"><a name="0307_00e2">Listing One </h4><pre>

/* Visual Basic Form Generator -- Wei Xiao -- 1994 COPYRIGHT -- MS C700 */
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

#define    DEF_ClientWidth        8400          /* default window width
                                                   80 column, 8.25 Courier New,
                                                   105 twips per char*/
#define    DEF_ClientHeight       6435          /* default window height*/
#define    DEF_ControlHeight      255           /* default control height*/
#define    LINE_LEN_MAX           200           /* maximum line length*/
#define    DEF_LINE_LEN           80
#define    DEF_PAGE_LEN           25
#define    FORM_NAME_LEN          30            /* maximum form name length*/
#define    FORM_CAPTION_LEN       80            /* &quot;       form caption &quot;*/
#define    DEF_FontBold           0             /* 0 = false */
#define    DEF_FontItalic         0   
#define    DEF_FontName           &quot;Courier New&quot;
#define    DEF_FontSize           8.25
#define    DEF_FontStrikethru     0   
#define    DEF_FontUnderline      0   
#define    DEF_CHECK_BOX_ADJ      200

int  nCheckBox=0,                /*check box count*/
     nTextBox=0,                 /*text box count*/
     nLabel=0,                   /*label count*/
     nLine=0,                    /*line count */
     nPerChar,                   /*average char width in twips*/
     nPerLine,                   /*Line Height in twips  */
     nComboBox=0,                /*number of combo boxes */
     fSummary=0,                 /* 1 if Summary command appears */
     nLeftMargin=0,              /*leftmargin in twips*/
     fFormNameSpec = 0,          /* 1 if form name is on command line */
     firstLine=1,                /* 1 if the first line has not been read*/
     fHeaderNotWritten=1;        /* assigned 0 in write_header() */
     nNumOfLines=DEF_PAGE_LEN,   /* total # of lines in input file */
     nNumOfCmdLines=0,           /* total # of lines in commad part */
     nMaxLineLength=DEF_LINE_LEN;/* maximum line length in input file */     

long nFormWidth,
     nFormHeight;                 /*dimention of the VB form */

char sFormName[FORM_NAME_LEN]= &quot;form1&quot;;
char sFormCaption[FORM_CAPTION_LEN] = &quot;form1&quot;;
char buf[LINE_LEN_MAX];
char buf2[LINE_LEN_MAX];        

char sFrmName[80];               /* form name */
FILE *fIn, *fOut;                

struct stack {
    char * pStr;
    struct stack *next;
}   *stForm = 0,                /* form settings */ 
    *stCntl = 0,                /* control settings */
    *stCobDef=0,                /* combo box type definitions items for the
                                   same type of combo are pushed into the 
                                   stack followed by the type name. Different
                                   types of combo are pushed into the stack 
                                   one after another. See form.txt for a 
                                   sample of definition*/
    *stCobList=0;               /* combo box control types on the form the 
                                   combo box on the form are indexed by 
                                   0, 1, 2, ... Their types are stored in this
                                   order in a stack, with last combo on top*/

push_stack(char *buf, struct stack**pst)   /* &amp; *st is better :-) */
{
 char *p;
 struct stack *st1;
 if((p=strdup(buf)) &amp;&amp;
     (st1=(struct stack *)malloc(sizeof(struct stack)))) {
      st1-&gt;pStr = p;
      st1-&gt;next = *pst;
      *pst = st1;
    }else
        printf(&quot;heap space out:%s not processed&quot;,buf);
}

dump_stack(struct stack*st)         /*for control setting or form   
                                        setting only */
{
while(st){
   fprintf(fOut,&quot;     %s\n&quot;,st-&gt;pStr);
   st = st-&gt;next;
 }
}

dump_combos(struct stack *st)       /* for combos */
{
 int n;

 n=nComboBox;
 while(st) {
 fprintf(fOut,&quot; ' %s\n&quot;,st-&gt;pStr);
 dump_combo(stCobDef,st,--n);
 st = st-&gt;next;
 }
}

dump_combo(struct stack *stCobDef, struct stack *st,int n)
{
 while (stCobDef &amp;&amp; (strcmp(stCobDef-&gt;pStr+1,st-&gt;pStr))) 
    stCobDef = stCobDef-&gt;next; 
 if (stCobDef)     
    stCobDef = stCobDef-&gt;next; 
 while (stCobDef &amp;&amp; (stCobDef-&gt;pStr[0]!='@' )) {
    fprintf(fOut, &quot;Combo1(%d).AddItem \&quot;%s\&quot;\n&quot;,n, stCobDef-&gt;pStr);
    stCobDef= stCobDef-&gt;next;
 }
}
char * trail_sp(char *p)            /* take out spaces at the end of string*/
{
 int n;
 n=strlen(p)-1;
 while((n&gt;=0) &amp;&amp; isspace(p[n]))
   p[n--]='\0';
 return p;
}
    
print_pos(char *p, int left,int wAdj)    /* p: the string left: starting pos
                                            wAdj: adjustment for strlen(p) */
{

      fprintf(fOut,&quot;         FontBold        =   0   'False\n&quot;);
      fprintf(fOut,&quot;         FontItalic      =   0   'False\n&quot;);
      fprintf(fOut,&quot;         FontName        =   \&quot;Courier New\&quot;\n&quot;);
      fprintf(fOut,&quot;         FontSize        =   8.25\n&quot;);
      fprintf(fOut,&quot;         FontStrikethru  =   0   'False\n&quot;);
      fprintf(fOut,&quot;         Width  =  %d\n&quot;, strlen(p)*nPerChar+wAdj);
      fprintf(fOut,&quot;         Top    =  %d\n&quot;, (nLine)*nPerLine);
      fprintf(fOut,&quot;         Height =  %d\n&quot;, DEF_ControlHeight);
      fprintf(fOut,&quot;         Left   =  %d\n&quot;, left*nPerChar+nLeftMargin);
      dump_stack(stCntl);
      fprintf(fOut,&quot;      End\n&quot;);

}

proc_form(char *buf)                    /* processing text part*/
{
 char *p,*p1;
 int n;

 p = buf;
 while(*p) {
    p1=p;
    switch (*p) {
        case ' ':
            p+=strspn(p,&quot; &quot;);
            break;
        case '_':
            n=strspn(p,&quot;_&quot;);
            memcpy(buf2,p,n);
            buf2[n]='\0';
            p+=n;
            fprintf(fOut,&quot;      Begin TextBox Text1\n&quot;);
            fprintf(fOut,&quot;        BorderStyle  =   0   \n&quot;);
            fprintf(fOut,&quot;        Index = %d\n&quot;,nTextBox++);
            fprintf(fOut,&quot;        FontUnderline   =   -1 \n&quot;);
            fprintf(fOut,&quot;        Text  = \&quot;%*s\&quot;\n&quot;,strlen(buf2),&quot; &quot;);;
            print_pos(buf2,p1-buf,0);
            break;

        case '*':
            n = strcspn(p+1, &quot;~_*&quot;);
            n++;
            memcpy(buf2,p,n);
            if (*(p+n)=='~') p++;
            buf2[n]='\0';
            p+=n;
            if ((n&gt;2) &amp;&amp; (buf2[1]=='@')) {
            trail_sp(buf2+2);
            fprintf(fOut,&quot;      Begin ComboBox Combo1\n&quot;);
            push_stack(buf2+2,&amp;stCobList);
            fprintf(fOut,&quot;         Text = \&quot;%s\&quot;\n&quot;, buf2+2);
            fprintf(fOut,&quot;         Index = %d\n&quot;,nComboBox++);
            print_pos(buf2,p1-buf,DEF_CHECK_BOX_ADJ);   
            break;
            }else {
            trail_sp(buf2+1);
            fprintf(fOut,&quot;      Begin CheckBox CheckBox1\n&quot;);
            fprintf(fOut,&quot;         Caption = \&quot;%s\&quot;\n&quot;, buf2+1);
            fprintf(fOut,&quot;         Index = %d\n&quot;,nCheckBox++);
            fprintf(fOut,&quot;         FontUnderline   =   0   'False\n&quot;);
            print_pos(buf2,p1-buf,DEF_CHECK_BOX_ADJ);   
            break;
            }

        default:
            n = strcspn(p, &quot;_*~&quot;); 
            memcpy(buf2,p,n);
            if (*(p+n)=='~') p++;
            p+=n;
            buf2[n]='\0';
            if (n-- &gt;0) 
              while(n&gt;=0 &amp;&amp; (buf2[n] == ' '))
                buf2[n--]='\0';          
            fprintf(fOut,&quot;      Begin Label Label1\n&quot;);
            fprintf(fOut,&quot;         Index = %d\n&quot;,nLabel++);
            fprintf(fOut,&quot;         Caption = \&quot;%s\&quot;\n&quot;, buf2);
            fprintf(fOut,&quot;         FontUnderline   =   0   'False\n&quot;);
            print_pos(buf2,p1-buf,0);
            break;
    }
 }
 nLine++;
}

write_header()
{    
  fHeaderNotWritten =0;

  printf(&quot;%d Lines, %d Command lines, %d Chars per line max\n&quot;,
     nNumOfLines, nNumOfCmdLines, nMaxLineLength);  

  fprintf(fOut, &quot;Begin Form %s\n&quot;,sFormName);
  fprintf(fOut, &quot;      Caption = \&quot;%s\&quot;\n&quot;,sFormCaption);
  nFormWidth= (long) DEF_ClientWidth* (long) nMaxLineLength/DEF_LINE_LEN;
  fprintf(fOut, &quot;      Width = %d\n&quot;,nFormWidth);

  nFormHeight= (long) DEF_ControlHeight* 
               (long)(nNumOfLines-nNumOfCmdLines + 2); 

  fprintf(fOut, &quot;      Height = %d\n&quot;,nFormHeight);

  fprintf(fOut, &quot;      Top = 100\n&quot;);
  fprintf(fOut, &quot;      Left = 100\n&quot;);
  dump_stack(stForm);
}

int proc_command(char *buf)                     /* command part*/
{
 char *vars, *value;

 if (!buf)
   return 0;
 
 nNumOfCmdLines++;

 value = buf + strcspn(buf, &quot;:&quot;) + 1;

 trail_sp(value);
 
 vars= strtok(buf, &quot; :&quot;);

 
 if (vars){
    if (!strcmp(vars,&quot;}&quot;)){
        sFormName[FORM_NAME_LEN -1 ] ='\0';
        sFormCaption[FORM_CAPTION_LEN -1] = '\0';
        write_header();
        return 1;
    } 

  if (!fFormNameSpec) {
    if (!_stricmp(vars, &quot;FormName&quot;))
        strncpy(sFormName,value,FORM_NAME_LEN);
    else if (!_stricmp(vars, &quot;FormCaption&quot;))
        strncpy(sFormCaption, value, FORM_CAPTION_LEN);
    }
    if(!_stricmp(vars, &quot;FormSet&quot;)) 
      push_stack(value, &amp;stForm);
    else if (!_stricmp(vars,&quot;ControlSet&quot;))
      push_stack(value, &amp;stCntl);
    else if (!_stricmp(vars,&quot;ComboSet&quot;))
      push_stack(value + strspn(value,&quot; &quot;), &amp;stCobDef);
    else if (!_stricmp(vars,&quot;Summary&quot;))
      fSummary =1;
    else if (!_stricmp(vars,&quot;LeftMargin&quot;)) 
      nLeftMargin=atoi(value);
    else if (!_stricmp(vars,&quot;CharWidth&quot;))
      nPerChar = atoi(value);
    else if (!_stricmp(vars,&quot;LineHeight&quot;))
     nPerLine = atoi(value);
 }  
 return 0;
}
 

fatal(char *msg) 
{
  perror(msg);
  exit(1);
}

count_lines()
{

 fgets(buf, LINE_LEN_MAX-1,fIn);

 nNumOfLines =0;
 nMaxLineLength = 0;

 while (! feof(fIn)) {
   nNumOfLines++;
   buf[LINE_LEN_MAX -1]='\0';
   if (nMaxLineLength &lt; strlen(buf))
    nMaxLineLength = strlen(buf);
    fgets(buf, LINE_LEN_MAX-1,fIn);
 }

}

main(int argc, char *argv[])
{
 char *rest;
 int fFormPart = 0;

 nPerChar = DEF_ClientWidth/DEF_LINE_LEN;
 nPerLine = DEF_ControlHeight;

 if (argc&lt;3){
    printf(&quot;Usage: %s &lt;form description file&gt; &lt;VB form file name&gt; [options] \n&quot;,argv[0]);
    printf(&quot;Options: &lt;form name&gt;, -f fast mode, &quot;);
    exit(1);
 }

 if (argc==4){
    strncpy(sFormName, argv[3], FORM_NAME_LEN);
    sFormName[FORM_NAME_LEN -1] = '\0';
    strncpy(sFormCaption, argv[3], FORM_CAPTION_LEN);
    sFormName[FORM_CAPTION_LEN -1] = '\0';
    fFormNameSpec = 1;
 }
    
 if ((fIn=fopen(argv[1],&quot;rt&quot;)) == NULL) 
    fatal(argv[1]);
  
 count_lines();

 if (fseek(fIn, 0L, SEEK_SET))
    fatal(&quot;fseek Input&quot;);
 
 if ((fOut=fopen(argv[2],&quot;wt&quot;)) == NULL) 
    fatal(argv[2]);

 fprintf(fOut,&quot;VERSION 2.00\n&quot;);

 fgets(buf, LINE_LEN_MAX-1,fIn);
 while (! feof(fIn)) {
 
    if(rest=strchr(buf,'\n'))
        *rest = '\0';               
    if (firstLine &amp;&amp; (strcmp(buf,&quot;{&quot;))) {
        fFormPart = 1;
        write_header();
    }
    firstLine = 0;
    if (! fFormPart) {
        if (proc_command(buf))
            fFormPart = 1; /* form started */
    }else
        proc_form(buf);    

    fgets(buf, LINE_LEN_MAX-1,fIn);   
 }
 
 if (fHeaderNotWritten)
    write_header();

 fprintf(fOut, &quot;End\n&quot;);

 fprintf(fOut, &quot;Sub Form_Load()\n&quot;);
 if (fSummary){
    fprintf(fOut, &quot;nTextBox = %d\n&quot;,nTextBox);
    fprintf(fOut, &quot;nComboBox = %d\n&quot;,nComboBox);
    fprintf(fOut, &quot;nCheckBox = %d\n&quot;,nCheckBox);
    fprintf(fOut, &quot;nFormHeight = %d\n&quot;,nFormHeight);
    fprintf(fOut, &quot;nFormWidth = %d\n&quot;,nFormWidth);
 }
 if (nComboBox) 
       dump_combos(stCobList);
 fprintf(fOut, &quot;End Sub\n&quot;); 

 fclose(fIn);
 fclose(fOut);
 printf(&quot;%d Labels, %d TextBoxes, %d Checkboxes, %d Combos\n&quot;,
     nLabel,nTextBox,nCheckBox, nComboBox);
 return 0;
}
</PRE>

<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
