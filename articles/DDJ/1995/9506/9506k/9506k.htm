<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>JUN95: C PROGRAMMING</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>C PROGRAMMING<a name="02a0_00b8"></h1><P>
<h2><a name="02a0_00b6"><a name="02a0_0000">The Check is in the IMail</h2><P>
<h3>Al Stevens</h3><P>
<a name="02a0_00b7"><a name="02a0_0000">This month's column describes the IMail application, a communications program that I designed specifically for sending and receiving electronic mail through a modem connected to an Internet site. I came up with the IMail application when <I>DDJ</I> established an Internet host with accounts for the editors. (I'm astevens@ddj.com, for instance.) Before that, I used the CompuServe Information Service (CIS) for most of my online activities (71101,1262). My satisfaction with that arrangement was being strained. When I needed to discuss something with the powers at CIS, I tried several times to get through to their middle management, and failed--even though I frequently mention the service in this column and in my books. They don't return phone calls, even to important journalists like yours truly. No respect.<P>
Then came the GIF patent debacle. By now you know that CIS and Unisys struck an agreement based on a 1985 patent that Unisys holds on the LZW compression algorithm, an integral part of CIS's GIF graphical file format. As a consequence of that agreement, CIS put the money squeeze on (mostly) small developers who use GIF in their applications. The industry is still reacting to that unseemly turn of events, and most developers are abandoning GIF in favor of other formats, such as the recently defined &quot;Portable Network Graphic Format&quot; (PNG). The way CIS has handled this affair sets my teeth on edge. <P>
Sometimes you just have to grit those teeth and hang in there. Despite my disapproval of their treatment of programmers, I needed the services of CIS, mainly as a way to communicate with readers electronically. CIS's e-mail service is virtually universal; there are CIS gateways to most other mail services. The ddj.com connection offered me an acceptable alternative. Internet mail is even more universal.<P>
The mail system at ddj.com uses the UNIX mail program, a primitive command-line interface that lets you write, read, reply to, and save mail messages in text files. The program works, but is not what you would call feature-laden. To use the mail services of ddj.com routinely, I needed a better mail-management program, and so I wrote the first version of IMail. You might recall from last month that I wrote that first version in C so that I could use D-Flat. That experience had me groaning at every turn. A little C++ angel sat on my shoulder and whispered into my ear every time I coded a C construct that would have been easier in C++. Once the program was working, I heeded that whisper and rewrote the program in C++, first building C++ wrapper classes around D-Flat. Last month I described the wrapper. This month I'll talk about the C++ application.<P>
<h3><a name="02a0_00b9">IMail: The Requirements<a name="02a0_00b9"></h3><P>
First let's consider the requirements for the program. It should store and remember configuration items such as login identification, password, telephone number, baud rate, communications port, data format, and modem-command strings. The program should be a multiple-window application with windows to display incoming and outgoing messages. It should remember how the user (me) positions and sizes those windows, and it should preserve those settings between executions. The program should maintain an address book of people to whom I send mail and let me select from that book as a function of addressing messages. The program should hold incoming and outgoing messages in their respective mailboxes until they have been read or sent. An option should permit me to automatically save copies of outgoing messages. The program should allow me to reply to and forward messages that I am reading. There should be user-defined file folders into which I can file mail messages. The mail-creation editor should support the usual text-editing functions. The program should be able to dial the host computer and upload and download all pending mail messages without my interaction or intervention. The program should support automatic message uploads and downloads, as well as interactive logins with the ability to upload and download binary files by using the XModem file-transfer protocol.<P>
<h3><a name="02a0_00ba">IMail: The Implementation<a name="02a0_00ba"></h3><P>
The IMail application uses the features of the D-Flat wrapper classes to define menus and dialog boxes and to associate member functions with those user-interface items. Listings <a href="#02a0_00c2">One</A> and <a href="#02a0_00c3">Two</A> are mailappl.h and mailappl.cpp, the source-code files that implement the <I>MailAppl</I> class, which is derived from the <I>dfApplication</I> class (listings begin on page 135). The class seems big, but it consists mostly of member functions associated with menu commands through the MSGMAP table. Many of these member functions do little more than open dialog boxes, which do most of the work of managing mail messages. Those dialog boxes are implemented in their own source-code files. I'm publishing only the application class this month, but I'll discuss generally how the whole program works.<P>
<h3><a name="02a0_00bb">Scripts<a name="02a0_00bb"></h3><P>
Interaction with the host--logging in, reading mail, sending mail, logging off--is managed by a set of scripts. IMail watches for prompting strings from the host and sends UNIX commands accordingly. The scripts are coded in a C++ source-code file named scripts.cpp. By isolating them there, I can change the scripts to work with other mail protocols if I want. They are not scripts in the truest sense of the word, however: They are not interpreted like the scripts of other communications programs. Since this program is for programmers who can be expected to have compilers, the scripts are written to be compiled into the program along with the rest of the code.<P>
<h3><a name="02a0_00bc">Mailboxes<a name="02a0_00bc"></h3><P>
IMail uses mailbox classes that store messages and display lists of the messages. Mail-reader classes display the contents of messages. The user can read messages, delete them, and file them in other mailboxes. The program uses two default mailboxes for incoming and outgoing messages: INBOX and OUTBOX. Other mailboxes are implemented as folders into which the user files messages to be saved. The user can establish and delete folders. The program maintains folders as subdirectories under a fixed subdirectory named CABINET. Any subdirectory under CABINET without a file extension is automatically treated as a folder. One such folder is named SENT and optionally holds copies of all the messages that the user sends. Another folder is named GENERAL, to be used as needed. The user may delete the GENERAL folder but not the SENT folder.<P>
Messages in the mailboxes are text-file copies of the messages as written by the user or received from the user's correspondents. Each message is its own text file, and the program assigns a unique filename to each message file. The message filename has this format: MAILnnnn.MSG. The first message written to a folder is named MAIL0000.MSG, the next is MAIL0001.MSG, and so on. When messages are deleted or moved to other folders, their names can be reused for new messages in the folder.<P>
I don't save a lot of mail. If I did, putting every message into its own text file would get expensive. Not only would each message consume a directory entry, but every message would also use disk space in multiples of the file system's cluster factor, which on my computer is 8K. If I were a heavy mail user and saver, I'd build an indexing system and concatenated message files, perhaps even with conversation-thread management.<P>
<h3><a name="02a0_00bd">Incoming Messages<a name="02a0_00bd"></h3><P>
IMail receives mail messages when it sees the text string &quot;you have mail&quot; in the input stream from the host. The UNIX system displays that message when you log in if mail is indeed waiting. The program waits for the $ prompt and then issues the following command as if you had typed it: <I>cat $MAIL</I>. The UNIX cat command displays a text file on the screen, and the <I>$MAIL</I> environment variable expands to the name of the logged-on user's incoming mail file in the UNIX environment. IMail captures the input stream into a disk file named IMAIL.TMP. When the messages are copied, IMail sends this command to delete the mail text file from the UNIX system: <I>rm $MAIL</I>.<P>
After IMail logs off and hangs up, it converts the messages in IMAIL.TMP into message files in the incoming-mailbox folder. Each received message is stored in the incoming mailbox in this format: a line of text with the sender's mail address, a second line of text with the subject, and a third line with the date the message was written. Subsequent lines of text constitute the message body.<P>
By reacting to the UNIX mail program's format for incoming messages, IMail is able to preserve only those three lines from the typically abundant, verbose message headers that are created by Internet mail transport programs and that are meaningless to most people. This one feature is worth the whole program. It removes one of my principal gripes about Internet mail--all that junk up front that nobody reads. The program parses the first lines of text, watching for lines with the strings &quot;From:&quot;, &quot;Subject:&quot;, and &quot;Date:&quot; in the first characters of the line. The program extracts the pertinent fields from those lines, ignoring all others until it sees a blank line, which marks the end of the message header and the start of the message text.<P>
<h3><a name="02a0_00be">Outgoing Messages<a name="02a0_00be"></h3><P>
For each outgoing message, the IMail script simulates an interactive session with the UNIX mail program. The script sends the &quot;mail&quot; command, a space character, the recipient's mail address, and a carriage return. Then the script waits for a &quot;ject:&quot; string that prompts for the subject, whereupon it sends the subject text and a carriage return. Next, it sends the message text, a final carriage return, and the Ctrl-D character to tell the mail program that the message is complete. When the $ prompt comes back, the script copies the message to the SENT folder if that option is selected and deletes the message from the outgoing message box.<P>
Both scripts have a lot of one-second delays built in between interchanges with the host. These delays reflect what I have determined works best. Without them, some incoming data characters are lost, and the program goes into a timeout loop waiting for an expected string from the host.<P>
<h3><a name="02a0_00bf">The Communications Classes<a name="02a0_00bf"></h3><P>
To support the dial-up connection, I encapsulated the operations of the serial port and the modem in two classes. The <I>CommPort</I> class includes a lot of low-level stuff to connect to the input interrupt vector, read and write the serial device's data and status ports, and manage things like XON/XOFF protocols. The <I>Modem</I> class manages modem operations--dialing, hanging up, sending modem commands, and watching the carrier-detect signal. An <I>XModem</I> class handles uploads and downloads of binary files with the XModem file-transfer protocol. These operations allow me to use ddj.com for FTP downloads and for exchanging files with the staff at <I>DDJ</I>.<P>
<h3><a name="02a0_00c0">IMail: The Future<a name="02a0_00c0"></h3><P>
I developed IMail and the D-Flat wrapper classes with an objective: Like the rest of the world, I'm gradually becoming more of a Windows user and less of a DOS user. The architecture of this software leans toward that of a program written under the Microsoft Foundation Classes. Eventually IMail will be a Win32 application.<P>
<h3><a name="02a0_00c1">Source Code and Database<a name="02a0_00c1"></h3><P>
The source-code files for IMail and the D-Flat libraries are free. You can download them from the DDJ Forum on CompuServe and on the Internet by anonymous FTP; see &quot;Availability,&quot; page 3.<P>
If you cannot get to one of the online sources, send a 3.5-inch diskette and an addressed, stamped mailer to me at <I>Dr. Dobb's Journal</I>, 411 Borel Avenue, San Mateo, CA 94402, and I'll send you the source code. Make sure that you include a note that says which project you want. The code is free, but if you care to support my Careware charity, include a dollar for the Brevard County Food Bank.<P>
<P>
<h4><a name="02a0_00c2">Listing One <a name="02a0_00c2"></h4><pre>

// ------- mailappl.h
#ifndef MAILAPPL_H
#define MAILAPPL_H

#include &lt;fstream.h&gt;

#define MAILPREFIX &quot;MAIL&quot;
#define MAILSUFFIX &quot;MSG&quot;
#define SENTFOLDER &quot;SENT&quot;
#define GENERALFOLDER &quot;GENERAL&quot;
#define INBOXSUBDIRECTORY &quot;INBOX&quot;
#define OUTBOXSUBDIRECTORY &quot;OUTBOX&quot;
#define CABINETSUBDIRECTORY &quot;CABINET&quot;
#define SENTSUBDIRECTORY CABINETSUBDIRECTORY &quot;\\&quot; SENTFOLDER
#define GENERALSUBDIRECTORY CABINETSUBDIRECTORY &quot;\\&quot; GENERALFOLDER
#define ADDRBOOK &quot;ADDRBOOK.DAT&quot;

#include &lt;cstring.h&gt;
#include &quot;dfwrap.h&quot;
#include &quot;icmds.h&quot;
#include &quot;mailbox.h&quot;
#include &quot;contents.h&quot;
#include &quot;modem.h&quot;

extern MBAR MainMenu;
extern DBOX ReadMailDB;
extern DBOX CreateMailDB;

class CreateMail;
class OnLineWnd;
class Modem;

// ------------ configuration items
struct IMailConfig  {
    // ----- login configuration
    char phoneno[25];    // phone number
    char loginid[35];    // user's remote login id
    char password[15];   // user's remote password (encrypted)
    bool viewlogin;      // true to view login scripts as they run
    bool saveoutgoing;   // true to save outgoing mail in SENT
    // ----- communications configuration
    CommParameters commparms;
    // ----- modem configuration
    ModemParameters modemparms;
};
class MailAppl : public dfApplication    {
    bool m_connected;
    bool m_closing;
    bool m_EscPressed;
    ofstream logfile;
    ofstream mailfile;
    CreateMail *mp_CreateMail;
    OnLineWnd *mp_OnLineWnd;
    InBox m_inbox;
    OutBox m_outbox;
    Folder m_folder;
    Modem *mp_Modem;
    bool LoadConfig();
    void SaveConfig();
    void EnDeCryptPassword();
    bool OnDownload();
    bool OnUploadXmodem();
    bool OnUploadASCII();
    bool OnViewLogin();
    bool OnDeliver();
    bool OnLogin();
    bool OnManual();
    bool OnHangup();
    bool OnLogTransmissions();
    bool OnCreateMail();
    bool OnAddrBook();
    bool OnKeyboard();
    bool OnAbout();
    bool OnInBox();
    bool OnOutBox();
    bool OnOpenFolder();
    bool OnFileCabinet();
    bool OnLoginOptions();
    bool OnCommOptions();
    bool OnModemOptions();
    bool OnClose();
    void LoginScript();
    void CollectMailScript();
    void DeliverMailScript();
    void ConvertMailScript();
    void GoInteractive(const CommParameters&amp; cp,
                const char *phone, bool autolog);
    bool GetCommOptions(const string&amp; ttl,
            CommParameters&amp; commparms, char *phoneno);
    void DisableMenuCommands();
    void EnableMenuCommands();
    friend class ReadMail;
protected:
    MAPDEF(dfApplication)
public:
    static IMailConfig iCfg;
    // ----- document window configurations
    static DialogConfig CreateMailCfg;
    static DialogConfig ReadMailCfg;
    MailAppl();
    virtual ~MailAppl();
    bool isConnected()
        { return m_connected; }
    bool isModemDeclared()
        { return mp_Modem != 0; }
    const InBox&amp; InBoxRef() const
        { return m_inbox; }
    const MailBox&amp; OutBoxRef() const
        { return m_outbox; }
    Folder&amp; FolderRef()
        { return m_folder; }
    void IMailPath(string&amp; path) const;
    void AddrBookPath(string&amp; path) const;
    void ConfigPath(string&amp; path) const;
    void TempMailPath(string&amp; path) const;
    void LogSerialInput(int ch);
};
extern MailAppl *mailappl;
#endif


</pre>
<h4><a name="02a0_00c3">Listing Two<a name="02a0_00c3"></h4><pre>

// -------- mailappl.cpp
#include &lt;fstream.h&gt;
#include &lt;strstrea.h&gt;
#include &quot;mailappl.h&quot;
#include &quot;addrbook.h&quot;
#include &quot;crmail.h&quot;
#include &quot;modem.h&quot;
#include &quot;loginopt.h&quot;
#include &quot;commopt.h&quot;
#include &quot;modemopt.h&quot;
#include &quot;fcabinet.h&quot;
#include &quot;onlinewn.h&quot;

extern &quot;C&quot; {
char DFlatApplication[] = &quot;IMail&quot;;
}
IMailConfig MailAppl::iCfg = {
    // ----- login configuration
    &quot;&quot;,          // phone number
    &quot;&quot;,          // user's remote login id
    &quot;&quot;,          // user's remote password (encrypted)
    true,        // true to view login scripts as they run
    true,        // true to save outgoing mail in SENT
    // ----- communications configuration
    {
        1,       // serial port (1,2)
        0,       // parity       (0=N, 2=E)
        1,       // stop bits   (1)
        8,       // data bits   (7,8)
        9600     // baud rate
    },
    // ----- modem configuration
    {
        RESETMODEM, // reset string
        INITMODEM,  // initialize string
        DIAL,       // dial command
        HANGUP      // hangup string
    }
};
// --- dialog box configurations to be saved and restored
DialogConfig MailAppl::CreateMailCfg;
DialogConfig MailAppl::ReadMailCfg;

MSGMAP(MailAppl)
    MSG(KEYBOARD,          OnKeyboard)
    MSG(ID_DOWNLOAD,       OnDownload)
    MSG(ID_UPLOADASCII,    OnUploadASCII)
    MSG(ID_UPLOADXMODEM,   OnUploadXmodem)
    MSG(ID_VIEWLOGIN,      OnViewLogin)
    MSG(ID_DELIVER,        OnDeliver)
    MSG(ID_LOGIN,          OnLogin)
    MSG(ID_MANUAL,         OnManual)
    MSG(ID_HANGUP,         OnHangup)
    MSG(ID_LOGTRX,         OnLogTransmissions)
    MSG(ID_CREATE,         OnCreateMail)
    MSG(ID_ADDRBOOK,       OnAddrBook)
    MSG(ID_LOGINOPTIONS,   OnLoginOptions)
    MSG(ID_COMMUNICATIONS, OnCommOptions)
    MSG(ID_MODEMOPTIONS,   OnModemOptions)
    MSG(ID_INBOX,          OnInBox)
    MSG(ID_OUTBOX,         OnOutBox)
    MSG(ID_FILECABINET,    OnFileCabinet)
    MSG(ID_ABOUT,          OnAbout)
    MSG(CLOSE_WINDOW,      OnClose)
ENDMAP
// -------- construct the mail application
MailAppl::MailAppl() : dfApplication(string(), MainMenu),
                m_connected(false),
                m_closing(false),
                m_EscPressed(false),
                mp_CreateMail(0),
                mp_OnLineWnd(0),
                mp_Modem(0)
{
    string path;
    m_inbox.MailBoxPath(path);
    mkdir(path.c_str());
    m_outbox.MailBoxPath(path);
    mkdir(path.c_str());
    MailBox::CabinetPath(path);
    mkdir(path.c_str());
    mkdir((path+GENERALSUBDIRECTORY).c_str());
    mkdir((path+SENTSUBDIRECTORY).c_str());
}
// ---- destroy the mail application
MailAppl::~MailAppl()
{
    if (logfile.rdbuf()-&gt;is_open())
        logfile.close();
    delete mp_CreateMail;
    delete mp_OnLineWnd;
    delete mp_Modem;
}
// ---- encrypt and decrypt the password for the the configuration
void MailAppl::EnDeCryptPassword(void)
{
    char *pwd = iCfg.password;
    srand(62490U);
    while (*pwd &amp;&amp; pwd &lt; iCfg.password + sizeof iCfg.password)
        *pwd++ ^= (rand() % 256);
}
// ---- load the program's configuration from the last run
bool MailAppl::LoadConfig()
{
    dfApplication::LoadConfig();
    string path;
    ConfigPath(path);
    ifstream cfgfile(path.c_str(), ios::binary);
    if (!cfgfile.fail())    {
        cfgfile.seekg(sizeof(CONFIG));
        cfgfile.read(reinterpret_cast&lt;char*&gt;(&amp;iCfg), sizeof(iCfg));
        cfgfile.read(reinterpret_cast&lt;char*&gt;(&amp;ReadMailCfg),
            sizeof(ReadMailCfg));
        cfgfile.read(reinterpret_cast&lt;char*&gt;(&amp;CreateMailCfg),
            sizeof(CreateMailCfg));
        EnDeCryptPassword();
    }
    if (iCfg.viewlogin)
        SetCommandToggle((commands)ID_VIEWLOGIN);
    return true;
}
// ---- save the program's configuration for the next time
void MailAppl::SaveConfig()
{
    dfApplication::SaveConfig();
    string path;
    ConfigPath(path);
    ofstream cfgfile(path.c_str(), ios::ate | ios::binary);
    if (!cfgfile.fail())    {
        EnDeCryptPassword();
        cfgfile.write(reinterpret_cast&lt;char*&gt;(&amp;iCfg), sizeof(iCfg));
        cfgfile.write(reinterpret_cast&lt;char*&gt;(&amp;ReadMailCfg),
            sizeof(ReadMailCfg));
        cfgfile.write(reinterpret_cast&lt;char*&gt;(&amp;CreateMailCfg),
            sizeof(CreateMailCfg));
        EnDeCryptPassword();
    }
}
// ---- build a path to the IMAIL application
void MailAppl::IMailPath(string&amp; path) const
{
    path = _argv[0];
    int wh = path.find_last_of(&quot;\\&quot;);
    path.resize(wh+1);
}
// ---- build a path and filename for the configuration file
void MailAppl::ConfigPath(string&amp; path) const
{
    IMailPath(path);
    path += DFlatApplication;
    path += &quot;.cfg&quot;;
}
// ---- build a path and filename for the address book
void MailAppl::AddrBookPath(string&amp; path) const
{
    IMailPath(path);
    path += ADDRBOOK;
// ---- build a path and filename for the temporary mail file
void MailAppl::TempMailPath(string&amp; path) const
{
    IMailPath(path);
    path += DFlatApplication;
    path += &quot;.tmp&quot;;
}
// ---- File/Download... command
bool MailAppl::OnDownload()
{
    if (mp_Modem != 0)    {
        char FileName[128] = &quot;*.*&quot;;
        while (SaveAsDialogBox(FileName, &quot;*.*&quot;, FileName))    {
            if (access(FileName, 0) == 0)    {
                strstream ermsg;
                ermsg &lt;&lt; FileName
                      &lt;&lt; &quot; exists. Replace it?&quot;
                      &lt;&lt; ends;
                bool rtn = YesNoBox(ermsg.str());
                delete ermsg.str();
                if (!rtn)
                    continue;
            }
            ofstream downfile(FileName, ios::binary);
            mp_Modem-&gt;DownloadXmodem(downfile);
            break;
        }
    }
    return false;
}
// ---- get a file name to upload from the user
bool MailAppl::GetUploadFile(ifstream&amp; upfile, int mode)
{
    char FileName[128] = &quot;*.*&quot;;
    while (OpenFileDialogBox(FileName, FileName))    {
        upfile.open(FileName, mode);
        if (upfile.fail())    {
            strstream ermsg;
            ermsg &lt;&lt; &quot;No such file as &quot; &lt;&lt; FileName &lt;&lt; ends;
            ErrorMessage(ermsg.str());
            delete ermsg.str();
            continue;
        }
        return true;
    }
    return false;
}
// ---- File/Upload/Xmodem... command
bool MailAppl::OnUploadXmodem()
{
    if (mp_Modem != 0)    {
        ifstream upfile;
        if (GetUploadFile(upfile, ios::binary))
            mp_Modem-&gt;UploadXmodem(upfile);
    }
    return false;
}
// ---- File/Upload/ASCII... command
bool MailAppl::OnUploadASCII()
{
    if (mp_Modem != 0)    {
        ifstream upfile;
        if (GetUploadFile(upfile))
            mp_Modem-&gt;UploadASCII(upfile);
    }
    return false;
}
// ---- View/View login script command
bool MailAppl::OnViewLogin()
{
    iCfg.viewlogin = GetCommandToggle((commands)ID_VIEWLOGIN);
    return false;
}
// ---- CLOSE_WINDOW message
bool MailAppl::OnClose()
{
    if (m_connected)    {
        if (YesNoBox(&quot;Log off and exit?&quot;))    {
            m_connected = false;
            m_closing = true;
        }
        return false;
    }
    return true;
}
// ---- command codes to be disabled during on-line session
static int dcmds[] = {
    ID_ADDRBOOK,
    ID_VIEWLOGIN,
    ID_DELIVER,
    ID_DOS,
    ID_CUT,
    ID_COPY,
    ID_PASTE,
    ID_DELETETEXT,
    ID_PARAGRAPH,
    ID_REPLACE,
    ID_SEARCHNEXT,
    ID_INTERACTIVE,
    ID_CREATE,
    ID_INBOX,
    ID_OUTBOX,
    ID_FILECABINET,
    ID_LOGINOPTIONS,
    ID_COMMUNICATIONS,
    ID_MODEMOPTIONS,
    ID_DISPLAY,
    ID_CLOSEALL,
    ID_WINDOW,
    0
};
// ----- disable menu commands during on-line session
void MailAppl::DisableMenuCommands()
{
    for (int i = 0; i &lt; *(dcmds+i) != 0; i++)
        DeactivateCommand(&amp;MainMenu, *(dcmds+i));
}
// ----- enable menu commands following on-line session
void MailAppl::EnableMenuCommands()
{
    for (int i = 0; i &lt; *(dcmds+i) != 0; i++)
        ActivateCommand(&amp;MainMenu, *(dcmds+i));
}
// ---- log onto the host for an interactive session
void MailAppl::GoInteractive(const CommParameters&amp; cp,
            const char *phone, bool autolog)
{
    DisableMenuCommands();
    mp_Modem = new Modem(cp, iCfg.modemparms);
    if (iCfg.viewlogin || !autolog)
        mp_OnLineWnd = new OnLineWnd(mp_Modem);
    m_connected = mp_Modem-&gt;Dial(phone);
    if (m_connected &amp;&amp; autolog)
        LoginScript();
    if (mp_OnLineWnd == 0)
        mp_OnLineWnd = new OnLineWnd(mp_Modem);
    while (m_connected)    {
        dispatch_message();
        if (mp_Modem-&gt;InputCharReady())
            LogSerialInput(mp_Modem-&gt;ReadChar());
        else if (!m_closing)
            m_connected = mp_Modem-&gt;TestCarrier();
    }
    delete mp_OnLineWnd;
    mp_OnLineWnd = 0;
    delete mp_Modem;
    mp_Modem = 0;
    WriteStatus(&quot;Off line&quot;);
    EnableMenuCommands();
    if (m_closing)
        CloseWindow();
}
// ---- Connect/Send-receive Mail command
bool MailAppl::OnDeliver()
{
    DeactivateCommand(&amp;MainMenu, ID_EXIT);
    DisableMenuCommands();
    mp_Modem = new Modem(iCfg.commparms, iCfg.modemparms);
    if (iCfg.viewlogin)
        mp_OnLineWnd = new OnLineWnd(mp_Modem);
    m_connected = mp_Modem-&gt;Dial(iCfg.phoneno);
    if (m_connected)    {
        LoginScript();
        CollectMailScript();
        DeliverMailScript();
    }
    mp_Modem-&gt;HangUp();
    m_connected = false;
    delete mp_Modem;
    mp_Modem = 0;
    delete mp_OnLineWnd;
    mp_OnLineWnd = 0;
    WriteStatus(&quot;Off line&quot;);
    EnableMenuCommands();
    ConvertMailScript();
    ActivateCommand(&amp;MainMenu, ID_EXIT);
    if (m_inbox.filecount)    {
        WriteStatus(&quot;You have mail in your Inbox&quot;);
        beep();
    }
    return false;
}
// ---- Connect/Interactive Session/Automatic Login... command
bool MailAppl::OnLogin()
{
    GoInteractive(iCfg.commparms, iCfg.phoneno, true);
    return false;
}
// ---- get communications options from user
bool MailAppl::GetCommOptions(const string&amp; ttl,
            CommParameters&amp; commparms, char *phoneno)
{
    bool rtn = p_commoptions-&gt;doModal();
    delete p_commoptions;
    return rtn;
}
// ---- Connect/Interactive Session/Manual Login... command
bool MailAppl::OnManual()
{
    static CommParameters commparms;
    static char phone[25] = &quot;&quot;;
    static bool doneit = false;

    if (!doneit)    {
        commparms = iCfg.commparms;
        doneit = true;
    }
    if (GetCommOptions(&quot;Manual Dial&quot;, commparms, phone))
        GoInteractive(commparms, phone, false);
    return false;
}
// ---- Log serial input stream from host
void MailAppl::LogSerialInput(int ch)
{
    if (mp_OnLineWnd != 0)    {
        mp_OnLineWnd-&gt;WriteChar(ch);
        if (logfile.rdbuf()-&gt;is_open())
            logfile.put(static_cast&lt;char&gt;(ch));
    }
    if (mailfile.rdbuf()-&gt;is_open())
        mailfile.put(static_cast&lt;char&gt;(ch));
}
// ---- Connect/Hang up command
bool MailAppl::OnHangup()
{
    if (m_connected &amp;&amp; mp_Modem != 0)    {
        mp_Modem-&gt;HangUp();
        m_connected = false;
    }
    return false;
}
// ---- File/Log Transmissions... command
bool MailAppl::OnLogTransmissions()
{
    if (logfile.rdbuf()-&gt;is_open())
        logfile.close();
    else    {
        char *FileName = new char[128];
        strcpy(FileName, &quot;*.log&quot;);
        if (OpenFileDialogBox(FileName, FileName))
            logfile.open(FileName, ios::app);
        else
            ClearCommandToggle((commands) ID_LOGTRX);
        delete[] FileName;
    }
    return false;
}
// ---- Messages/Create New... command
bool MailAppl::OnCreateMail()
{
    if (mp_CreateMail &amp;&amp; mp_CreateMail-&gt;isRunning())
        mp_CreateMail-&gt;SetControlFocus(ID_MESSAGE);
    else    {
        delete mp_CreateMail;
        mp_CreateMail = new CreateMail(m_outbox, &quot;New Mail&quot;, true);
        mp_CreateMail-&gt;doModeless();
    }
    return false;
}
// ---- KEYBOARD message
bool MailAppl::OnKeyboard()
{
    if (p1 == ESC)
        m_EscPressed = true;
    return true;
}
// ---- File/Address Book... command
bool MailAppl::OnAddrBook()
{
    if (mp_CreateMail &amp;&amp; mp_CreateMail-&gt;isRunning())
        mp_CreateMail-&gt;OnAddrBook();
    else    {
        AddrBook *p_addrbook = new AddrBook;
        p_addrbook-&gt;doModal();
        delete p_addrbook;
    }
    return false;
}
// ---- Messages/Out Box... command
bool MailAppl::OnOutBox()
{
    m_outbox.OpenMailBox(&quot;OutBox&quot;);
    return false;
}
// ---- Messages/In Box... command
bool MailAppl::OnInBox()
{
    m_inbox.OpenMailBox(&quot;InBox&quot;);
}
// ---- open a mail folder
bool MailAppl::OnOpenFolder()
{
    if (!m_folder.FolderName().is_null())    {
        static string title;
        title = &quot;Folder: &quot; + m_folder.FolderName();
        m_folder.OpenMailBox(title);
    }
    return false;
}
// ---- Messages/File Cabinet... command
bool MailAppl::OnFileCabinet()
{
    FolderReader* p_fr = new FolderReader();
    if (p_fr-&gt;doModal())
        OnOpenFolder();
    delete p_fr;
    return false;
}
// ---- Options/Login... command
bool MailAppl::OnLoginOptions()
{
    LoginOptions *p_loginoptions = new LoginOptions;
    p_loginoptions-&gt;doModal();
    delete p_loginoptions;
    return false;
}
// ---- Options/Communications... command
bool MailAppl::OnCommOptions()
{
    GetCommOptions(&quot;Communications Options&quot;, iCfg.commparms, iCfg.phoneno);
    return false;
}
// ---- Options/Modem... command
bool MailAppl::OnModemOptions()
{
    ModemOptions *p_modemoptions = new ModemOptions;
    p_modemoptions-&gt;doModal();
    delete p_modemoptions;
    return false;
}
// ---- Help/About command    
bool MailAppl::OnAbout()
{
    MessageBox(
            &quot;About IMail&quot;,
        &quot;   |------------------------------------------------| \n&quot;
        &quot;   |     zzz   zzz      z    | \n&quot;
        &quot;   |     z  z  z  z     z    | \n&quot;
        &quot;   |     z  z  z  z     z    | \n&quot;
        &quot;   |     z  z  z  z  z  z    | \n&quot;
        &quot;   |     zzz   zzz    zzz     | \n&quot;
        &quot;   |------------------------------------------------| \n&quot;
        &quot;  IMail Manages ddj.com Mail   &quot;);
    return false;
}


</pre>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
