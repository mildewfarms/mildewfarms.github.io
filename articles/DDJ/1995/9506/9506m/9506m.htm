<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>JUN95: PROGRAMMER'S BOOKSHELF</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>PROGRAMMER'S BOOKSHELF<a name="02a8_00bc"></h1><P>
<h2><a name="02a8_00ba"><a name="02a8_0000">Software Engineering and Z</h2><P>
<h3>Reginald B. Charney</h3><P>
<p><i><a name="02a8_00bb"><a name="02a8_0000">Reg is president of Charney &amp; Day. He can be reached on CompuServe at 70272,3427 or at charney@pipeline.com.</i></p><hr><P>
<I>Software Development with Z</I>, by J.B. Wordsworth, is an introduction to modern-day formal methods and their practicality for software development. Although Wordsworth uses only the Z specification language (supported by a variant of Dijkstra's guarded command language), you still get a good sense for strongly typed specification languages. The book also serves as a tutorial on formal methods in general and the Z language in particular.<P>
While the book is easily read and understood, you do need to familiarize yourself with set theory and its notation, since Z uses more than 90 different symbols, most of which are nonmnemonic and unavailable in any normal typeface. Some operators are overloaded, and the naming conventions are not always helpful. For example, names like <I>je1</I> and <I>k1</I> are used instead of <I>b1</I> and <I>b2</I>.<P>
<I>Software Development with Z</I> starts out by covering the basics of discrete mathematics: sets, logic, and relationships. It then examines Z schema and the guarded command language and finally discusses design and implementation issues.<P>
Wordsworth uses two examples throughout the book. One discusses a library, its books, and the people borrowing them, while the second is based on school classes and people enrolled in them. The examples are discussed informally at first, and are developed more rigorously as the book progresses. This approach maintains coherence and makes the book easy to follow. A complete application appears at the end of the book, less the actual code. <P>
There are exercises at the end of each chapter, with answers for most of the questions. There's also an appendix containing a bibliography and a complete list of all special symbols used in Z.<P>
<h3><a name="02a8_00bd">Z Language Specification<a name="02a8_00bd"></h3><P>
Z lets you record software specifications, data design, and algorithmic implementation decisions. It is not a programming language, and is best used for defining specifications, rather than designs.<P>
More specifically, Z is a mathematical software-specification language developed in the 1970s at Oxford University in England. In the early 1980s, software developers at IBM's Hursley Research Centre started working on Z, releasing commercial CICS online-transaction software for banks and airlines in the early 1990s. Wordsworth was a part of IBM's original Z development team.<P>
Figures <a href="199502aa.htm">1</A> through <a href="199502ab.htm">4</A> show schema specifications in Z. The first line always declares the schema name. The remaining lines in the upper part of the schema declare data types used in the schema. The lower part of the schema consists of the predicates that must be true for the schema to be valid.<P>
<a href="199502ac.htm">Figure 1</A> is a typical schema specification. It defines the starting conditions that must exist for an oil-terminal control system. The following are the interpretations of the code by line number:<P>
<OL>
<LI><I>OTCSys </I>is the schema name. </LI>
<LI><I>waiting</I> is of the type &quot;sequence of Tankers.&quot;</LI>
<LI><I>docked</I> is of the type &quot;operation of relating a Tanker to a unique Berth.&quot; </LI>
<LI><I>known</I> is of the type &quot;one set out of all possible sets of Tankers.&quot; </LI>
<LI>No Tanker can be waiting and docked at the same time. </LI>
<LI>The number of waiting Tankers is the number of Tankers in the sequence of Tankers. </LI>
<LI>If Tankers are waiting, then all Berths are filled by docked Tankers. </LI>
<LI>Docked Tankers are a subset of the Berths.</LI>
<LI>All known Tankers are either docked or waiting.</LI>
</OL>
<a href="199502ad.htm">Figure 2</A> shows that the precondition for any arriving Tanker is that it is not yet known.<P>
<OL>
<LI><I>Arrive0</I> is the name of the schema. </LI>
<LI>The declarations used in <I>OTCSys</I> apply here as well. </LI>
<LI><I>t</I> is an input variable of the type &quot;Tanker.&quot; </LI>
<LI><I>t</I> is not already known.</LI>
</OL>
When a Tanker arrives at the oil terminal, either Berths are available and it is docked (see <a href="199502ae.htm">Figure 3</A>) or all Berths are occupied and the Tanker must be queued (see <a href="199502af.htm">Figure 4</A>).<P>
For <a href="199502b0.htm">Figure 3</A>:<P>
<OL>
<LI><I>Docked</I> is the name of the schema. </LI>
<LI>The contents of schema <I>Arrive0</I> are inserted into schema <I>Docked</I>. </LI>
<LI><I>b</I> is an output variable of the type &quot;Berth.&quot;</LI>
<LI><I>r</I> is an output variable of the type &quot;Response&quot; (there either is or is not room for the Tanker).</LI>
<LI>A Berth is available.</LI>
<LI>If line 5 is true, the output response is <I>ok </I>for this schema. </LI>
<LI>An unoccupied Berth is output.</LI>
<LI>The list of docked tankers is updated by appending the current tanker to the set of those already docked (<I>x </I>and <I>x</I>' represent the before and after states of variable <I>x</I>). </LI>
<LI>There is no change in the state of those waiting.</LI>
</OL>
For <a href="199502b1.htm">Figure 4</A>:<P>
<OL>
<LI><I>Queued</I> is the name of the schema. </LI>
<LI>The complete contents of schema <I>Arrive0</I> is inserted into schema <I>Queued</I>. </LI>
<LI><I>r</I> is an output variable of type &quot;Response.&quot; </LI>
<LI>Tankers are docked at all Berths. </LI>
<LI>If line 4 is true, then the response is <I>wait</I>.</LI>
<LI>The current Tanker is appended to the sequence of waiting Tankers.</LI>
<LI>There is no change in the state of the docked Tankers.</LI>
</OL>
<h3><a name="02a8_00be">Guarded Command Language<a name="02a8_00be"></h3><P>
Given these schema, you can write this logical equation in Z:<I>ArrivedOK<img src="tribar12.gif">Docked <img src="vee12.gif" alt="v"> </I>Queued<I>. Because Z is only a specification language, Dijkstra's guarded command language is used to implement the specifications. This language consist of statements having two parts, a guard and a command, separated by a </I><img src="arrow12.gif" alt="--&gt;"><I> sign. The command is executed only if the guard expression is true. For example, to increment a variable </I>x<I> by 1, we would normally write </I>x:=x+1<I>. In the guarded command language, you would write </I>x&lt;MAX_INT<img src="arrow12.gif" alt="--&gt;">x:=x+1<I>, which states that the increment operation is valid only if the current value of </I>x<I> is less than the maximum allowable integer value.</I><P>
The guarded command language has three control structures: sequence, alternation, and iteration. These control structures are made up of constructs, each of which consists of a guard expression and a body. A guard expression must be true for the body of the statement to be executed. Either the guard or the body can be omitted.<P>
<h3><a name="02a8_00bf">The Social Side<a name="02a8_00bf"></h3><P>
Wordsworth emphasizes that formal methods are part of a social process of software development, which should include a group of people representing various parts of the development cycle. Formal methods are not means for developing software without difficult decisions, says Wordsworth, but are methods for recording those decisions once made. Z documents consist principally of English text with small pieces of mathematical formalisms.<P>
I highly recommend the beautifully written section on writing good specifications, as well as Wordsworth's description of how to verify a specification. Verification is part of the testing process. His comments on testing are reminiscent of one of Edward Yourdon's main points in <I>Decline and Fall of the American Programmer</I> (Prentice Hall, 1991): Tracking bugs is important, not just to fix problems, but to modify the processes that created them.<P>
<I>Software Development with Z</I> achieves its three principal aims: To encourage programmers to explore the use of formal methods in perfecting their craft, to provide an insight into the practical problems of applying mathematics to real software development, and to explain the features of Z. <P>
<h4>Software Development with Z</h4><P>
<h4><I>J.B. Wordsworth</I></h4><P>
<h4>Addison-Wesley, 1992, 334 pp.</h4><P>
<h4>$32.25 </h4><P>
<h4>ISBN 0-201-627-57-4</h4><P>
<a href="199502b2.htm">Figure 1</A>  Starting conditions for an oil-terminal control system.<P>
<a href="199502b3.htm">Figure 3</A>  Tanker is docked.<P>
<a href="199502b4.htm">Figure 2</A>  Condition for arriving Tankers.<P>
<a href="199502b5.htm">Figure 4</A>  Tanker is queued.<P>
<P>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
