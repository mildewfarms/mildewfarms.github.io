<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>JUN95: A Practical Strategy for OO Design</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>A Practical Strategy for OO Design<a name="025f_00a6"></h1><P>
<h2><a name="025f_00a4"><a name="025f_0000">A hybrid methodology for C++ development</h2><P>
<h3>Kanchan Kumar</h3><P>
<p><i><a name="025f_00a5"><a name="025f_0000">Kanchan is a software developer for Vedika Software in Calcutta, India. He can be contacted at kanchan@vedika.ernet.in.</i></p><hr><P>
One goal of object-oriented languages and methods is to enable problems and solutions to see eye-to-eye more naturally than procedural languages and conventional design methods. Most object-oriented design methodologies, however, are largely theoretical, and those that are practical often aren't comprehensive enough to help a designer/programmer from start to finish. As a result, much is left to the imagination of the programmers actually implementing the project. <P>
In this article, I'll present a methodology that is practical, easy to understand, and can serve as a reference in solving problems. This methodology consists of two phases: The first presents an abstract model of the problem, and the second prepares an implementation model. <P>
While the abstract model is language independent, the implementation model is based on C++. Essentially, the abstract model is a collation of practical ideas from different methodologies. The implementation model is a rule-based approach to class design for the objects specified in the abstract model.<P>
<h3><a name="025f_00a7">Statement of Problem<a name="025f_00a7"></h3><P>
Before the design process begins, it is important to clearly define your goals. This is done during the analysis phase and presented in a document called the &quot;statement of problem.&quot; The statement should be complete enough that it doesn't leave room for further assumptions about system functionality during design.<P>
The statement of problem starts with an introduction to the problem, its context, and the skills of the eventual users of the system being designed. This includes:<P>
<UL>
<li>Major components of the problem. </li>
<li>Desired behavior/features of the system. </li>
<li>Undesirable behavior.</li>
<li>Kind of interface.</li>
<li>Volume of transaction.</li>
<li>Performance expectations.</li>
<li>Sequence of tasks.</li>
</UL>
Naturally, the format of the documentation and issues it covers vary from one problem to another. <P>
<h3><a name="025f_00a8">Abstract Model<a name="025f_00a8"></h3><P>
The most important part of the abstract model is identification of objects. The abstract model assumes that the problem was defined well during analysis, but it can also point out flaws in the statement of problem, and thereby improve it. (The abstract model draws heavily on the first chapter of Robert Murray's <I>C++ Strategies and Tactics</I>, &quot;Abstraction.&quot;) <P>
The goals of the abstract model are to:<P>
<UL>
<li>Identify objects.</li>
<li>Establish object attributes.</li>
<li>Define relationships between different objects.</li>
<li>Identify each object's interface.</li>
</UL>
In almost every real-life situation, you start from the top-most problem object, then begin breaking it down. This is the same process you should follow during the abstract-model phase of software design. The steps for preparing the abstract model of any problem are: <P>
<B>Step 1.</B> Identify the single, top-most problem object in a system. In most cases, this is easy: The top-most object is found in the first line of the statement of problem. Likely candidates for such an object include the system/application itself. <P>
<B>Step 2.</B> Determine the functions performed by this object. This statement of functionality is the &quot;executive summary.&quot; Minute details aren't necessary, just a broad description of the functionality. The basic goal of this step is to establish the behavior of the object. <P>
In a point of sale (POS) system, for instance, the functionality might be to let customers enter purchase instructions for a product. The executive summary could address such issues as obtaining credit-card details and invoice printing, as well as anything the statement of problem may have overlooked; inventory maintenance or credit-card validation, for instance.<P>
Executive summaries must be crisp and clear, and thus require revision and refinement. Anything vague is best left out. The summary is a description: You need to think about how the object fits in and interacts with its context. Since what you write for the first time may not be the most suitable executive summary, be prepared to revise it.<P>
If you are not able to find a role for an object, categorize it as a placeholder (<I>Product quantity</I>, <I>Currency</I>, and the like) and call it a &quot;primitive object.&quot;<P>
<B>Step 3.</B> Find the component objects and determine which combined objects they include. Refer to the statement of problem and the executive summary of a given object for the terms used. <P>
If the executive summary is well written, finding objects isn't difficult. For instance, if the executive summary of a POS system focuses on customers, products, invoices, credit cards, and the like, then these elements are likely object candidates.<P>
The process of identifying objects is called &quot;discovering.&quot; At times, however, discovery is not sufficient and objects must be invented. Such inventions are based solely on your judgment and appreciation of the problem.<P>
For example, for a POS system, you might invent product-table objects. If the problem needs to track customer history, then you will also need a customer-table object. However, you should avoid inventing a process as an object. In such cases, you should find the object on (or by) which this function is performed and mark it as another component object.<P>
The components in this step, along with the behavior in Step 2, comprise the &quot;attributes&quot; of the object.<P>
<B>Step 4.</B> Establish the relationship between the problem object and the component objects (not vice versa). Evaluate the relations according to the following criteria: <P>
<UL>
<li>Classify the relation as either Is-A, Has-A, or Uses-A.</li>
<li>Is the relation one-to-one or one-to-many? With one-to-many, you need to define &quot;many&quot; as a constant number, range, or infinite number.</li>
<li>Is the relation established at the time the problem object is created or anytime during the lifetime of the problem object?</li>
<li>Is the relation one- or two-way? If the problem object can be reached through the component object, it is a two-way relation; in all other cases, it is one-way.</li>
<li>Is the relation required? If the relation could not be established, what functionality will be affected? </li>
</UL>
<B>Step 5.</B> Apply steps 2-4 to each component object until no more component objects can be found, or until a primitive object is encountered. <P>
<B>Step 6.</B> Finalize the interface of each object. Questions will arise, such as &quot;How can this object be used?&quot;, &quot;What is required to create the object?&quot;, or &quot;What is the functionality expected of this object?&quot; Answering them gives you a list of parameters without which the object is not useful. The answers must be derived from the context of the statement of problem.<P>
Putting yourself in the shoes of someone using your objects and asking, &quot;How do I use this?&quot; will make it easier to establish the interface. This holds true, regardless of whether the user is a fellow team member, someone who buys your library, or you yourself.<P>
Go through the abstract model repeatedly until you are confident that it represents the problem correctly and completely. It's important to document each step. Make sure that you list all the &quot;discovered&quot; objects and then those that were &quot;invented.&quot; Since the invention of objects is based on certain inferences, these inferences should also be prominently noted. This will help if anyone other than you goes through the design later. You can represent the model in terms familiar to you and your team. You may want to use a CASE tool to represent it visually. In any case, it should be easy to refer to.<P>
<h3><a name="025f_00a9">Implementation Model<a name="025f_00a9"></h3><P>
The implementation model takes the abstract model and turns it into a C++ class declaration. Many methodologies leave this to programmers who, if inexperienced, can compromise an elegant design. With this in mind, I'll now describe a set of rules which takes the guesswork out of class design. These rules may not always produce the best class designs, but they can save you from costly mistakes.<P>
For the implementation model, the relationship among the objects is critical. The rules will help you in converting the relations table into a class hierarchy (assuming that <I>ObjectA</I> is the problem object, and <I>ObjectB</I>, the component object).<P>
<B>Rule 1.</B> Is-A. <I>ObjectA</I> is derived from <I>ObjectB</I>.<P>
Has-A. <I>ObjectA</I> keeps the complete object of <I>ObjectB</I>. It could keep it as a pointer or nonpointer but not as a reference.<P>
Uses-A. <I>ObjectA</I> keeps the pointer or reference of <I>ObjectB</I> but not a complete data member. Choice between a pointer and reference is governed by Rule 3.<P>
<B>Rule 2.</B> One:One. <I>ObjectA</I> keeps only one instance of <I>ObjectB</I>. Whether the data member is pointer, reference, or complete object is determined by Rule 1.<P>
One:Many. <I>ObjectA</I> keeps a list of instances of <I>ObjectB</I>. Rule 1 determines whether an individual instance of the list is a pointer, reference, or complete object.<P>
<B>Rule 3.</B> CreationTime. <I>ObjectA</I> should instantiate <I>ObjectB</I> at construction time. <P>
In the case of <I>ObjectA Uses-A ObjectB</I> (Rule 1), <I>ObjectA</I> should take the reference/pointer to a valid <I>ObjectB</I> as the constructor <I>param</I> and maintain an instance of <I>ObjectB</I> as a reference, rather than a pointer.<P>
In the case of <I>ObjectA 'Has-A' ObjectB</I> (Rule 1), the instance of <I>ObjectB</I> is maintained as a complete object rather than a data member.<P>
AnyTime. <I>ObjectA</I> must have a member function which can be invoked as a command to instantiate <I>ObjectB</I>. If <I>ObjectA Uses-A ObjectB</I> (Rule 1), then <I>ObjectB</I> can only be kept as a pointer. In such cases, the function should accept a valid pointer to <I>ObjectB</I> as <I>param</I>. Furthermore, <I>ObjectA</I> can maintain the instance of <I>ObjectB</I> only as a pointer, not as a reference.<P>
If <I>ObjectA Has-A ObjectB</I> (Rule 1), then <I>ObjectA</I> should maintain the instance of <I>ObjectB</I> as a pointer that should be <I>new</I>ed during this function call. If <I>ObjectB</I> is kept as a complete object in <I>ObjectA</I>, then <I>ObjectB</I> should have methods (function, insertion operator, assignment operators, and the like) to initialize itself.<P>
<B>Rule 4.</B> One Way. Nothing special.<P>
Two Way. <I>ObjectB</I> must have the reference/pointer to <I>ObjectA</I> as a data member. It can be a reference only if the relation is established during creation time (Rule 3) of <I>ObjectA</I>; otherwise it should be a pointer. In the previous case, the constructor should take the reference/pointer to a valid <I>ObjectA</I> as a constructor <I>param</I>. If <I>ObjectB</I> is being <I>Used-by ObjectA</I> (Rule 1) and many such objects are using it simultaneously, then it would need to maintain a list of all such instances (a situation referred to as <I>Many:One</I> or <I>Many:Many</I> relationship).<P>
<B>Rule 5. </B>Mandatory. If a relation is established between <I>ObjectA</I> and <I>ObjectB</I> during creation of <I>ObjectA</I> (Rule 3), then <I>ObjectA</I> must throw an exception (or invalidate itself) if the relation could not be established. If the relation is not established at creation time (Rule 3), there may be a flaw in the design. If it is found acceptable/valid, there must be a clause attached which says the functionality of <I>ObjectA</I> is affected/unavailable until the relationship is established.<P>
Optional. Provisions to initialize the data member of <I>ObjectB</I> must not be in the constructor--these should be through a member function. A clause must be attached which determines that all functionality is affected/unavailable until the relation is established.<P>
<h3><a name="025f_00aa">Other Guidelines<a name="025f_00aa"></h3><P>
If <I>ObjectA Uses-A ObjectB</I> (Rule 1), then some other object in the system must <I>Has-A ObjectB</I>. Assuming that <I>ObjectC</I> is such an object, there should be only one such object (which <I>Has-A ObjectB</I>) in the system at any point in time. It is the responsibility of that object (<I>ObjectC</I>) and no other to create and delete <I>ObjectB</I>. The instance of <I>ObjectB</I> must be created before it is &quot;used&quot; by <I>ObjectA</I>. This leads to the following subrules:<P>
<UL>
<li>The constructor and destructor of <I>ObjectB</I> should be private, and <I>ObjectC</I> should be a friend class.</li>
<li><I>ObjectC</I> should have a function to return a valid instance of <I>ObjectB</I>. If you use data attribute notation (DAN), do so by overloading the subscript <I>[]</I> operator. This function should return a NULL pointer if the function fails. If there is no possibility of failure, then it should return a reference.</li>
<li><I>ObjectC</I> should maintain a list of all the instances of <I>ObjectB</I> that it returned so that whenever anyone asks for that instance, the same pointer/reference is returned, thereby maintaining referential integrity and concurrency.</li>
</UL>
Finally, use the conclusions of Step 6 of the abstract model as public member functions of the classes to which the objects described in Step 6 belong. You might need to distribute these functions among various classes in the hierarchy.<P>
<h3><a name="025f_00ab">Adopting this Methodology <a name="025f_00ab"></h3><P>
In any nontrivial project, it's impossible to design the complete system in one sitting. Consequently, you will take the top-most object and break it down to the first level. You should then assign functionality to each identified object and establish the relationship among them. This will yield the framework of the system you are developing. Each object you identified in this stage will typically turn out to be a complete module in itself, which you can treat as a separate system for design purposes. <P>
<h3><a name="025f_00ac">Conclusion<a name="025f_00ac"></h3><P>
Considering the complexity of today's software projects, it is unrealistic to expect this methodology to solve all problems. However, this approach will clear some of the major stumbling blocks from the design phase. Keep in mind that the methodology is still evolving and will become more concrete in the coming years.<P>
<h3><a name="025f_00ad">References<a name="025f_00ad"></h3><P>
Booch, Grady. <I>Object-Oriented Analysis and Design with Applications</I>, Second Edition. Menlo Park, CA: Benjamin/Cummings, 1994.<P>
Charney, Reginald B. &quot;Data Attribute Notation.&quot; <I>Dr. Dobb's Journal</I> (August 1994).<P>
Murray, Robert B. <I>C++ Strategies and Tactics</I>. Reading, MA: Addison-Wesley, 1993.<P>
<P>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
