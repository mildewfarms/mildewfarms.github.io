<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>SP95: Video for Windows and WinG</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Video for Windows and WinG<a name="02c4_00c5"></h1><P>
<h2><a name="02c4_00c3"><a name="02c4_0000">Writing a custom draw handler</h2><P>
<h3>Christopher Kelly</h3><P>
<p><i><a name="02c4_00c4"><a name="02c4_0000">Chris is senior engineer at Symbionics Video Ltd., a technology development company that focuses on computer-video applications. He can be contacted at cpk@symbionics.co.uk.</i></p><hr><P>
While Video for Windows (VfW) has been available for sometime, the only programming documentation for it is a help file supplied with the VfW developers kit. This lack of information is unfortunate since VfW is remarkably interesting and offers numerous opportunities for creative programmers.<P>
For instance, writing a custom draw handler is a commonly used technique and is the basis of WinToon, the Microsoft cartoon engine. (WinToon is essentially a canned sprite playback engine for animators. Walt Disney's <I>Lion King</I> software, for example, is a WinToon app.) In this article, I'll develop a custom draw handler and use it in conjunction with Microsoft's games interface, WinG, to scroll text across a video window.<P>
<h3><a name="02c4_00c6">The Media Control Interface<a name="02c4_00c6"></h3><P>
With the release of Windows 3.1, Microsoft made multimedia support a core part of the operating environment. Windows 3.1 was initially geared toward wave-form audio and Musical Instrument Digital Interface (MIDI) devices. Consequently, a central part of the architecture is the Media Control Interface (MCI), which provides a uniform method of accessing multimedia devices.<P>
From a programmer's perspective, MCI makes multimedia devices look like software VCRs, with commands such as play, pause, seek, and stop. The control of each MCI device is encapsulated in a driver called an &quot;MCI command interpreter.&quot; This design permits the addition of new command interpreters as new devices become available.<P>
The first version of MCI came with support for wave-form audio and MIDI devices. When VfW was released, it was shipped with its own command interpreter. A later version of VfW, built on top of MCI, provided the preregistered window class, <I>MCIWnd</I>, that supports video playback. <I>MCIWnd</I> makes writing VfW applications a straightforward process.<P>
<h3><a name="02c4_00c7">A Sample VfW Program<a name="02c4_00c7"></h3><P>
As <a href="#02c4_00ce">Listing One</A> shows, a video-playback program with considerable functionality can be written in less than 50 lines of code. Most of the code, in fact, has nothing to do with VfW and is merely the minimum code required to write a Windows program.<P>
By using a modal dialog box, you avoid having to register a window class and create a message loop. An <I>MCIWnd</I> child window is created to fill the client area of the dialog box. This window displays the video image and provides a number of buttons for loading a video file and controlling its playback.<P>
You create the <I>MCIWnd</I> window by calling the function <I>MCIWndCreate()</I> in response to the WM_ INITDIALOG message received by the dialog box. This function is flexible and accepts a number of flags that control window attributes, such as whether it has a menu or slider control. The MCIWNDF_NOTIFYSIZE flag requests the window to send notifications (using the MCIWNDM_NOTIFYSIZE message) to the dialog whenever the child window changes size. The dialog box responds to this message by resizing itself precisely to enclose the child <I>MCIWnd</I> window within its client area.<P>
The final issue is handling palette changes brought about when the focus shifts between applications. In the dialog box, you must respond to WM_PALETTECHANGED and WM_QUERYNEWPALETTE messages and route them to the <I>MCIWnd</I> window for processing.<P>
To build the program, you will need to get the VfW developer kit, which is available, among other sources, from the Microsoft Developers Network Level 2 CD-ROM. Note that the program I develop here requires the vfw.h header file and the vfw.lib library available from the MSDN. You also must include the mmsystem.lib library, a standard part of the Windows SDK that should come with your compiler.<P>
This program is a fully functional playback application. It displays a small window with a play/stop button, menu button, and slider bar. The play/stop button is disabled until a video file is loaded. The menu button displays a pop-up menu, initially containing a single item for loading a video file. Once the file is loaded, the menu offers a variety of options, including controlling the video size and the audio volume. There are a couple of things you might like to try with these controls: 1. Hold down Ctrl while pressing the play button. This causes the video to play full screen. Be aware that not all display drivers support full-screen playback. 2.Hold the Shift key while pressing the play button. This plays the video backward. Although jerky, it does work.<P>
The program also will play other multimedia files such as wave-form (.WAV) files.<P>
<h3><a name="02c4_00c8">What's Happening Under the Hood?<a name="02c4_00c8"></h3><P>
The example program is deceptively simple. Notice that the video appears to be playing in the background. This is because it is played under the control of a hidden program, MMTASK.TSK, started by the MCI subsystem. MMTASK.TSK is a program despite not having an .EXE extension. <P>
Consider the sequence of actions MCI carries out to display the video in the way that we have seen:<P>
<OL>
<LI>Read the compressed video and audio data from the file.</LI>
<LI>Decompress the video.</LI>
<LI>Decompress the audio.</LI>
<LI>Send the decompressed video data to the display hardware.</LI>
<LI>Send the decompressed audio data to the audio hardware.</LI>
</OL>
The video and its associated audio are stored on disk in audio video interleaved (AVI) format, a special case of the Resource Interchange File Format (RIFF). (For a discussion of RIFF, see &quot;Inside the RIFF Specification,&quot; by Hamish Hubbard, <I>DDJ</I>, September 1994.) Conceptually, an AVI file appears as a number of streams of data. For example, one stream will contain the video and another the audio. For performance reasons, the video and audio frames are interleaved in the file on a frame-by-frame basis. MCI reads the streams using a VfW subsystem called <I>AVIFile</I>, which provides a rich set of functions for reading and writing AVI files.<P>
At this point, the audio and video are still compressed and must be decompressed before rendering. VfW has two subsystems that handle this task. The installable compression manager (ICM) handles video, and the audio compression manager (ACM) handles audio. These two subsystems have a lot in common: Each uses a driver architecture in which the task of decompressing the data is delegated to DLLs known as &quot;codecs.&quot; Once decompressed, the video and audio can be sent to the display and audio hardware. At this point, the video frame is a device independent bitmap (DIB) and is displayed using a high-performance <I>bitblt </I>function in the <I>DrawDib</I> subsystem. When VfW is installed or the display-driver mode is changed, <I>DrawDib</I> profiles the various methods of performing a <I>bitblt </I>and selects the quickest. The latest release of VfW (Version 1.1d) will use the display control interface (DCI) for accessing the frame buffer directly as long as a DCI provider is present. <P>
That explanation gives a somewhat simplified view of what actually happens. Some video codecs, known as &quot;rendering drivers,&quot; are capable of sending data directly to the display. They may even make use of video hardware for part of the decompression process, such as color-space conversion or scaling. The relationship between the ICM and <I>DrawDib</I> is quite tight. <I>DrawDib</I> will accept compressed video data and automatically send it to the ICM for decompression. The binding between the ACM and the Windows sound subsystem is equally tight. A component called the &quot;wave-form mapper&quot; intercepts any compressed audio data sent to the sound subsystem and routes it to the ACM for decompression.<P>
<h3><a name="02c4_00c9">A More Complicated VfW Program<a name="02c4_00c9"></h3><P>
The next example is similar to the last, except it scrolls the text &quot;Hello World&quot; across the video window. This effect is achieved by adding a custom draw handler to intercept the DIB just before it is displayed on the screen. It then draws the text into the DIB before rendering it using <I>DrawDib</I>. This illustrates a general technique that can be used for a variety of effects. For example, it is the method used by Michael Windser to implement WinToon. Like WinToon, this example uses WinG for drawing on the DIB.<P>
Before going further, it is necessary to define a custom draw handler. To do that, we must take a further step back and explain what an installable driver is.<P>
<h3><a name="02c4_00ca">Installable Drivers and Draw Handlers<a name="02c4_00ca"></h3><P>
An installable driver is a DLL that has a particular entry point that must be called <I>DriverProc()</I>. The driver is registered with Windows using the Drivers applet in the control panel. If you start this applet, you can see the list of installable drivers present on your machine. Several components already mentioned--the audio and video codecs, the wave-form mapper, and the MCI command interpreters--are installable drivers. Windows uses the <I>DriverProc</I> to send messages to a driver in much the same way that it calls a window procedure to send messages to a window, although the set of messages is completely different.<P>
The <I>DriverProc</I> has the following parameters:<P>
<UL>
<li><I>driverID</I> is a driver-supplied value that the driver passes back to Windows when the driver is opened. This value is then passed to the driver on all subsequent calls to <I>DriverProc</I>.</li>
<li><I>gDriver</I> is a unique value assigned by Windows to identify the driver.</li>
<li><I>msg</I> identifies the message.</li>
<li> lParam1 and lParam2 are 32-bit values, the meaning of which depends on the value of msg.</li>
</UL>
The messages can be divided into standard messages and driver-type-specific messages. Standard messages are sent to all installable drivers, whereas type-specific messages are sent only to drivers of a particular type. For example, a defined set of type-specific messages is sent to all video codecs.<P>
A draw handler is similar to the <I>DriverProc</I> of an installable driver in that it must have the same prototype, and it receives the same messages. A draw handler does not, however, need to be named <I>DriverProc</I>.<P>
<h3><a name="02c4_00cb">What is WinG?<a name="02c4_00cb"></h3><P>
Microsoft is anxious to make Windows a good platform for games. In support of this initiative, Microsoft has developed WinG, the games-programming interface, which was released late last year. A technique commonly used by games writers is to compose an image in an off-screen buffer before copying it to the display. This composition may involve using standard drawing primitives or, for some operations, direct manipulation of the bits of the image. Using both drawing primitives and direct manipulation is difficult in Windows because the bitmaps used by the graphic device interface (GDI) graphics engine are device dependent. WinG solves this problem by providing specialized device contexts and bitmaps. You can draw into a WinG bitmap using the standard GDI drawing primitives or directly manipulate it as a DIB. In the next example, I'll use both of these access methods. <P>
<h3><a name="02c4_00cc">In at the Deep End<a name="02c4_00cc"></h3><P>
The &quot;Hello World&quot; example program in <a href="#02c4_00cf">Listing Two</A> is based on the first example with the addition of a draw handler. <P>
Since WinG can only cope with 256-color palletized displays, this program must be run in a 256-color display mode. You should call the function <I>Is256ColorDisplay()</I> in <I>WinMain()</I>, which performs the necessary check to ensure this is the case. Most of the remaining code you need to write deals with the draw handler together with the functions that it calls to process messages. A word of warning about the prolog code for the draw handler: Because it is called from within the context of MMTASK.TSK, smart callbacks will not work. You must call <I>MakeProcInstance()</I> to generate the code to correctly load the data segment on entry. This type of application is one of the few places where it is still necessary to use instance thunks in Windows programming.<P>
You pass the MCIWNDF_NOTIFYMEDIA flag to <I>MCIWndCreate()</I>, requesting the <I>MCIWnd</I> window to send notifications (MCIWNDM_NOTIFYMEDIA) to the dialog whenever a new file is loaded. Install your draw handler in response to this message.<P>
Many of the messages that your draw handler receives require little or no processing. In <a href="#02c4_00cf">Listing Two</A>, these messages are grouped together for convenience at the beginning of the draw handler.<P>
The first message that your draw handler will receive is DRV_OPEN, and in response, you should allocate a data structure of type <I>DrawInfo</I>. This will be used to store information required for processing later messages. The address of this data structure should be returned from the draw handler and it will be passed as the <I>driverId</I> parameter of subsequent messages. In C++, structures can have methods as well as data members. For <I>DrawInfo</I>, this convenience allows you to write methods to handle each of the messages received by the draw handler. The constructor for the <I>DrawInfo</I> structure should allocate the WinG device context that will be used for drawing and also call <I>DrawDibOpen()</I> to register with <I>DrawDib</I>. The destructor for <I>DrawDib </I>must release any resources acquired by the draw handler and also deregister with <I>DrawDib</I>.<P>
The next message you get is the ICM_ DRAW_SUGGESTFORMAT, asking which DIB formats you are prepared to accept. The proper response is, &quot;8-bit-per-pixel uncompressed DIBs.&quot; VfW will attempt to find a codec that will convert the DIB to this format before passing it to you.<P>
Before asking your draw handler to draw any DIBs, Windows will send the ICM_DRAW_BEGIN message, allowing you to perform any necessary preparation. There are several things you must then do. The <I>DrawDib</I> subsystem must be prepared by calling the function <I>DrawDibBegin()</I>, and you must call <I>WinGCreateBitmap()</I> to create a WinG bitmap, which will be used for drawing the text onto the DIB. This also is the point where you should store the source and destination rectangles in the <I>DrawInfo</I> structure. The ICM_DRAW_BEGIN message may be sent to you several times, and you should prevent resource leakage by deleting any WinG bitmap that you may have allocated in an earlier call.<P>
Before you can draw any DIBs, the palette must be initialized correctly. You will receive the ICM_DRAW_REALIZE message asking you to realize the palette. You should call <I>DrawDibRealize</I> to do this for you. <P>
And now to the main work of draw handler: You will be sent the ICM_DRAW message whenever you must render a DIB. For this, you should compose the DIB to be displayed in the WinG bitmap, then call <I>DrawDibDraw()</I> to display it. To compose the DIB, you should first copy the DIB you are given into the WinG bitmap, then use the GDI function <I>TextOut()</I> to write the text on top. In the example, the code to compose the DIB is confined into the method <I>ComposeFrame()</I>, making it easy for you to modify the composition and devise your own interesting effects. <P>
Your draw handler must handle any palette change requests that may occur. Call <I>DrawDibChangePalette</I> to do this.<P>
Finally, some advice on how to build the example application: You will need the VfW and WinG developer kits, which are both on the Microsoft Developers Network Level 2 and Multimedia Jumpstart 2.0 CD-ROMs. In addition, the WinG developer kit is available on the Internet from Microsoft's FTP site (ftp.microsoft.com) and in the Windows Multimedia forum on Compuserve (GO WINMM).<P>
If the example works but displays garbage text rather than &quot;Hello World,&quot; then you are probably using smart callbacks. See your compiler documentation for information on how to turn these off.<P>
<h3><a name="02c4_00cd">Where to Go from Here<a name="02c4_00cd"></h3><P>
For more information about VfW, you should refer to the help file that comes with it. At first sight, this can be somewhat intimidating because there is no architectural overview. However, the effort is worthwhile, since there is a wealth of information hidden within. It is also worth spending some time examining the sample applications that come with the VfW developer kit.<P>
<P>
<h4><a name="02c4_00ce"><a name="02c4_00ce">Listing One </h4><pre>
#define STRICT
#include &lt;windows.h&gt;
#include &lt;string.h&gt;
#include &lt;vfw.h&gt;

static HINSTANCE hInstanceG = 0;    // Data instance handle.
static HWND hMCIWndG = 0 ;      // Handle of the MCI display window.

// Function prototypes
static void ResizeWindowToFit(HWND hWnd);
// Make DlgProc extern &quot;C&quot; to prevent C++ name mangling.
extern &quot;C&quot; 
BOOL CALLBACK DlgProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);

int PASCAL WinMain(HINSTANCE hInstance, HINSTANCE hPrevInst, LPSTR pCmdLine, 
                                                                  int cmdShow)
{
    return DialogBox(hInstanceG = hInstance,&quot;AVISEE&quot;,0,DlgProc);    
}

// Dialog Procedure
BOOL CALLBACK DlgProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
    switch(msg)
    {
    case WM_INITDIALOG:
    hMCIWndG = MCIWndCreate(hWnd,hInstanceG,
                WS_CHILD | WS_VISIBLE | MCIWNDF_NOTIFYSIZE,0);
    ResizeWindowToFit(hWnd);
    return TRUE;
    case WM_CLOSE:
    EndDialog(hWnd,0);
    return TRUE;
    case WM_PALETTECHANGED:
    case WM_QUERYNEWPALETTE:
    SendMessage(hMCIWndG,msg,wParam,lParam);
    return TRUE;
    case MCIWNDM_NOTIFYSIZE:
    ResizeWindowToFit(hWnd);
    return TRUE;
    }
    return FALSE;
}
static void ResizeWindowToFit(HWND hWnd)
{
    RECT rect;
    GetWindowRect(hMCIWndG,&amp;rect);
    AdjustWindowRect(&amp;rect,GetWindowLong(hWnd,GWL_STYLE),FALSE);
    SetWindowPos(hWnd,0,0,0,rect.right-rect.left,rect.bottom-rect.top,
         SWP_NOMOVE | SWP_NOZORDER);
}

</pre>
<h4><a name="02c4_00cf"><a name="02c4_00cf">Listing Two</h4><pre>
#define STRICT
#include &lt;windows.h&gt;
#include &lt;windowsx.h&gt;
#include &lt;string.h&gt;
#include &lt;vfw.h&gt;
#include &lt;mmsystem.h&gt;
#include &lt;digitalv.h&gt;
#include &lt;mciavi.h&gt;
#include &lt;wing.h&gt;

// Global Variables
static HINSTANCE hInstanceG = 0;      // Data instance handle.
static HWND hMCIWndG = 0 ;        // Handle of the MCI display window.
static FARPROC pDrawHandlerThunkG=0;  // Instance thunk for draw handler.

// Private data structure used for storing drawing information.
// This is C++ so it can have methods.
struct DrawInfo
{
// Methods
    DrawInfo();
    ~DrawInfo();
    LRESULT Begin(ICDRAWBEGIN FAR *pBegin);
    LRESULT Draw(ICDRAW FAR *pDrawStruct);
    LRESULT End();
    LRESULT ChangePalette(LPBITMAPINFOHEADER pInfoHeader);
    LRESULT GetPalette();
    LRESULT Realize(HDC hDC, BOOL background);
    BOOL CanHandleFormat(LPBITMAPINFOHEADER pInfoHeader);
    void ComposeFrame(LPBITMAPINFOHEADER pInfoHeader, LPVOID pImageBits);
    LRESULT SuggestFormat(ICDRAWSUGGEST FAR *pSuggest);
// Data members
    LPVOID     pBuffer_;
    HDRAWDIB   hDD_;
    HDC        hDC_;
    HDC        hWinGDC_;
    HBITMAP    hWinGBitmap_;
    HBITMAP    hOldBitmap_;
    int        xDst_;         // Destination rectangle
    int        yDst_;         
    int        dxDst_;
    int        dyDst_;
    int        xSrc_;         // Source rectangle
    int        ySrc_; 
    int        dxSrc_;
    int        dySrc_;
    char       aCaption_[32]; // Text to write
    int        captionX_;     // Current position of
    int        captionY_;     // the text on the window.
    int        windowWidth_;  // Width of the video window.
} ;
// Function prototypes
// Make exported functions extern &quot;C&quot; to prevent C++ name mangling.
extern &quot;C&quot; 
{
BOOL CALLBACK DlgProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);
LRESULT CALLBACK DrawHandler(DWORD id, HDRVR hDriver, UINT MSG, 
                 LPARAM lParam1, LPARAM lParam2);
}
static void ResizeWindowToFit(HWND hWnd);
static void CopySystemPalette(LPRGBQUAD pColors);
static BOOL Is256ColorDisplay();
static BOOL InstallDrawHandler(HWND hMCIWnd);
static LRESULT HandleDriverOpen(ICOPEN FAR *pOp);
static LRESULT HandleDriverClose(DrawInfo *pDraw);

int PASCAL WinMain(HINSTANCE hInstance, HINSTANCE hPrevInst, 
           LPSTR pCmdLine, int cmdShow)
{
    if(Is256ColorDisplay())
     DialogBox(hInstanceG = hInstance,&quot;AVISEE&quot;,0,DlgProc);   
    else
     MessageBox(0,&quot;This program requires a 256 color display&quot;, &quot;AVISEE&quot;,MB_OK);
    return 0;
}

// Dialog Procedure
BOOL CALLBACK DlgProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
    switch(msg)
    {
    case WM_INITDIALOG:
    // Create the video window.
    hMCIWndG = MCIWndCreate(hWnd,hInstanceG,
                WS_CHILD | WS_VISIBLE | MCIWNDF_NOTIFYSIZE 
                | MCIWNDF_NOTIFYMEDIA,0);
    ResizeWindowToFit(hWnd);
    return TRUE;
    case WM_CLOSE:
    EndDialog(hWnd,0);
    return TRUE;
    case WM_PALETTECHANGED:
    case WM_QUERYNEWPALETTE:
    // Pass on palette messages.
    SendMessage(hMCIWndG,msg,wParam,lParam);
    return TRUE;
    case MCIWNDM_NOTIFYSIZE:
    ResizeWindowToFit(hWnd);
    return TRUE;
    case MCIWNDM_NOTIFYMEDIA:
    InstallDrawHandler((HWND)wParam);
    return TRUE;
    }
    return FALSE;
}
static void ResizeWindowToFit(HWND hWnd)
{
    RECT rect;
    GetWindowRect(hMCIWndG,&amp;rect);
    AdjustWindowRect(&amp;rect,GetWindowLong(hWnd,GWL_STYLE),FALSE);
    SetWindowPos(hWnd,0,0,0,rect.right-rect.left,rect.bottom-rect.top,
         SWP_NOMOVE | SWP_NOZORDER);
}
static void CopySystemPalette(LPRGBQUAD pColors)
{
    PALETTEENTRY aPal[256];
    HDC hDC = GetDC(0);
    GetSystemPaletteEntries(hDC,0,256,aPal);
    // Unfortuanately RGBQUAD and PALETTEENTRY have the colors in the
    // opposite order so we have to copy them one by one.
    for(int i=0; i&lt;256; i++)
    {
    pColors[i].rgbRed      = aPal[i].peRed;
    pColors[i].rgbGreen    = aPal[i].peGreen;
    pColors[i].rgbBlue     = aPal[i].peBlue;
    pColors[i].rgbReserved = 0;
    }
    ReleaseDC(0,hDC);
}
static BOOL Is256ColorDisplay()
{
    BOOL ok = TRUE;
    HDC hDC = GetDC(0); // Get DC for desktop window.
    // Check it is a palettized display.
    if(GetDeviceCaps(hDC,RASTERCAPS) &amp; RC_PALETTE==0)
       ok = FALSE;
    // Check it is 256 colors (8 bits per pixel).
    if(GetDeviceCaps(hDC,BITSPIXEL)*GetDeviceCaps(hDC,PLANES)!=8)
    ok = FALSE;
    ReleaseDC(0,hDC);
    return ok;
}
static BOOL InstallDrawHandler(HWND hMCIWnd)
{
    BOOL ok = TRUE;
    MCI_DGV_SETVIDEO_PARMS  parms;

    // We may be called before we MCIWndCreate has returned and so the
    // MCI window handler will not have been assigned to hMCIWndG.
    if(!hMCIWndG)
    hMCIWndG = hMCIWnd;
    // If we haven't create the instance thunk then do so.
    if (!pDrawHandlerThunkG) 
    pDrawHandlerThunkG = MakeProcInstance((FARPROC)DrawHandler,hInstanceG);
    parms.dwValue = (DWORD)pDrawHandlerThunkG;
    parms.dwItem = MCI_AVI_SETVIDEO_DRAW_PROCEDURE;

    // MCIWnd does not provide a function for installing a draw handler
    // so we get the MCI device ID and set it the MCI_SETVIDEO window.
    UINT deviceID = MCIWndGetDeviceID(hMCIWndG);
    if(deviceID)
    {
    mciSendCommand(deviceID,MCI_SETVIDEO,
               MCI_DGV_SETVIDEO_ITEM | MCI_DGV_SETVIDEO_VALUE,
               (DWORD) (MCI_DGV_SETVIDEO_PARMS FAR*)&amp;parms);
    }
    return ok;
}
// The Draw Handler
LRESULT CALLBACK __export DrawHandler(DWORD id, HDRVR hDriver, UINT msg, 
                      LPARAM lParam1, LPARAM lParam2)
{
    DrawInfo *pDraw = (DrawInfo*)id;
    switch (msg)
    {
    // Many of the driver messages require no processing so we
    // will get them out of the way first.
    case DRV_LOAD:
    case DRV_FREE:
    case DRV_DISABLE:
    case DRV_ENABLE:
    case DRV_INSTALL:
    case DRV_REMOVE:
    case DRV_CONFIGURE:
    return 1;
    case DRV_QUERYCONFIGURE:
    case ICM_GETSTATE:
    case ICM_SETSTATE:
    return 0;
    case ICM_CONFIGURE:
    case ICM_ABOUT:
    return ICERR_UNSUPPORTED;
    // Open and close we need to handle - this is where we allocate
    // and free our private data structure.
    case DRV_OPEN:
    return (lParam2) ? HandleDriverOpen((ICOPEN FAR *)lParam2):1;
    case DRV_CLOSE:
    return HandleDriverClose(pDraw);
    // Code for drawing.
    case ICM_DRAW_BEGIN:
    return pDraw ? pDraw-&gt;Begin((ICDRAWBEGIN FAR *)lParam1) 
             : ICERR_UNSUPPORTED;
    case ICM_DRAW:
    return pDraw ? pDraw-&gt;Draw((ICDRAW FAR *)lParam1) : ICERR_UNSUPPORTED;
    case ICM_DRAW_END:
    return pDraw ? pDraw-&gt;End() : ICERR_UNSUPPORTED ;
    case ICM_GETINFO:
    return ICERR_UNSUPPORTED;
    case ICM_DRAW_QUERY:
    return (pDraw &amp;&amp; pDraw-&gt;CanHandleFormat((LPBITMAPINFOHEADER)lParam1)) 
           ? ICERR_OK : ICERR_BADFORMAT;
    case ICM_DRAW_SUGGESTFORMAT:
    return pDraw ? pDraw-&gt;SuggestFormat((ICDRAWSUGGEST FAR *)lParam1) 
             : ICERR_UNSUPPORTED;
    case ICM_DRAW_REALIZE:
    return pDraw ? pDraw-&gt;Realize((HDC)lParam1,(BOOL)lParam2) 
             : ICERR_UNSUPPORTED;
    case ICM_DRAW_GET_PALETTE:
    return pDraw ? pDraw-&gt;GetPalette() : ICERR_UNSUPPORTED;
    case ICM_DRAW_CHANGEPALETTE:
    return pDraw ? pDraw-&gt;ChangePalette((LPBITMAPINFOHEADER)lParam1) 
             : ICERR_UNSUPPORTED;
    }
    if (msg &lt; DRV_USER)
    // Send all other standard installable driver messages for
    // default processing.
    return DefDriverProc(id,hDriver,msg,lParam1,lParam2);
    else
    // Anything else we don't support
    return ICERR_UNSUPPORTED;
}
static LRESULT HandleDriverOpen(ICOPEN FAR *pOpen)
{
    LRESULT retVal = 0L;
    if(pOpen)
    {
    // We only accept video streams and we do not
    // handle compression and decompression.
    if (pOpen-&gt;fccType == streamtypeVIDEO &amp;&amp;
        pOpen-&gt;dwFlags != ICMODE_COMPRESS &amp;&amp;
        pOpen-&gt;dwFlags != ICMODE_DECOMPRESS)
    {
        // Allocate a private structure for storing information.
        DrawInfo *pDraw = new DrawInfo;
        if(pDraw)
        {
        pOpen-&gt;dwError = ICERR_OK;
        retVal = (LRESULT)(DrawInfo FAR *)pDraw;
        }
        else
        pOpen-&gt;dwError = ICERR_MEMORY;
    }
    }
    return retVal;          
}
static LRESULT HandleDriverClose(DrawInfo *pDraw)
{
    delete pDraw; // Destructor tidys up.
    return 1;
}
// Methods for class DrawInfo
DrawInfo::DrawInfo():
    pBuffer_(0),
    captionX_(0),
    captionY_(0),
    hWinGDC_(0),
    hWinGBitmap_(0)
{
    hDD_ = DrawDibOpen();
    hWinGDC_ = WinGCreateDC();
    wsprintf(aCaption_,&quot;Hello world&quot;);
}
DrawInfo::~DrawInfo()
{
    // Free any resources we still have.
    if(hDD_) 
    DrawDibClose(hDD_);
    if(hWinGDC_ &amp;&amp; hWinGBitmap_)
    DeleteObject(SelectObject(hWinGDC_,(HGDIOBJ)hOldBitmap_));
    if(hWinGDC_)
    DeleteDC(hWinGDC_);
}
LRESULT DrawInfo::Begin(ICDRAWBEGIN FAR *pBegin)
{
    struct 
    {
    BITMAPINFOHEADER infoHeader;
    RGBQUAD colorTable[256];
    } infoHeader;

    if(CanHandleFormat(pBegin-&gt;lpbi))
    {
    // We may be called several times without a corresponding call to 
    // several times so must delete the WinG bitmap if it already exists.
    if(hWinGBitmap_)
    {
        DeleteObject(SelectObject(hWinGDC_,(HGDIOBJ)hOldBitmap_));
        hWinGBitmap_ =0;
        DrawDibEnd(hDD_);
    }
    hDC_   = pBegin-&gt;hdc;
    xDst_  = pBegin-&gt;xDst;  yDst_  = pBegin-&gt;yDst;
    dxDst_ = pBegin-&gt;dxDst; dyDst_ = pBegin-&gt;dyDst;
    xSrc_  = pBegin-&gt;xSrc;  ySrc_  = pBegin-&gt;ySrc;
    dxSrc_ = pBegin-&gt;dxSrc; dySrc_ = pBegin-&gt;dySrc;
    captionY_ = pBegin-&gt;dyDst/2;
    windowWidth_ = pBegin-&gt;dxDst;

    SetStretchBltMode(hDC_,COLORONCOLOR);

    if (DrawDibBegin(hDD_,hDC_,dxDst_,dyDst_,pBegin-&gt;lpbi,dxSrc_,dySrc_,0))
    {
        hmemcpy(&amp;infoHeader,pBegin-&gt;lpbi,sizeof(BITMAPINFOHEADER));
        // Get the system palette entries.
        CopySystemPalette(infoHeader.colorTable);
        // Create the WinG bitmap.
        hWinGBitmap_ = 
           WinGCreateBitmap(hWinGDC_,(LPBITMAPINFO)&amp;infoHeader,&amp;pBuffer_);
        if(hWinGBitmap_ &amp;&amp; pBuffer_)
        {
        // Select the WinG bitmap into the WinG device context.
        hOldBitmap_ = 
           (HBITMAP)SelectObject(hWinGDC_,(HGDIOBJ)hWinGBitmap_);
        return ICERR_OK;
        }
        else
        return ICERR_MEMORY;
    }
    else
        return ICERR_UNSUPPORTED;
    }
    else
    return ICERR_BADFORMAT;
}
LRESULT DrawInfo::Draw(ICDRAW FAR *pDrawStruct)
{
    UINT  wFlags;
    wFlags = DDF_SAME_HDC;
    if ((pDrawStruct-&gt;dwFlags &amp; ICDRAW_NULLFRAME) || 
     pDrawStruct-&gt;lpData == NULL) 
    {
    if(pDrawStruct-&gt;dwFlags &amp; ICDRAW_UPDATE)
        wFlags |= DDF_UPDATE;
    else
        return ICERR_OK;
    }
    if (pDrawStruct-&gt;dwFlags &amp; ICDRAW_PREROLL)
    wFlags |= DDF_DONTDRAW;
    if (pDrawStruct-&gt;dwFlags &amp; ICDRAW_HURRYUP)
    wFlags |= DDF_HURRYUP;
    // Compose the DIB in the WinG bitmap.
   ComposeFrame((LPBITMAPINFOHEADER)pDrawStruct-&gt;lpFormat,pDrawStruct-&gt;lpData);
    // Blt the WinG bitmap to the screen.
    if (!DrawDibDraw(hDD_,hDC_,xDst_,yDst_,dxDst_,dyDst_,
             (LPBITMAPINFOHEADER)pDrawStruct-&gt;lpFormat,
             pBuffer_,xSrc_, ySrc_,dxSrc_, dySrc_,wFlags)) 
    {
    if (wFlags &amp; DDF_UPDATE)
        return ICERR_CANTUPDATE;
    else
        return ICERR_UNSUPPORTED;
    }
    return ICERR_OK;
}
void DrawInfo::ComposeFrame(LPBITMAPINFOHEADER pInfoHeader, LPVOID pImageBits)
{
    if(pBuffer_)
    {
    // Copy the bitmap we are given into the WinG bitmap.
    hmemcpy(pBuffer_,pImageBits,pInfoHeader-&gt;biSizeImage);
    SetBkMode(hWinGDC_,TRANSPARENT);
    SetTextColor(hWinGDC_,RGB(255,0,0));
    // Draw 'Hello World' on top.
    TextOut(hWinGDC_,captionX_,captionY_,aCaption_,lstrlen(aCaption_));
    // Update the position to draw the text - causes scrolling.
    captionX_ = (captionX_+1)%windowWidth_;
    }   
}
LRESULT DrawInfo::End()
{
    return ICERR_OK;
}
LRESULT DrawInfo::GetPalette()
{
    return (LRESULT)(UINT)DrawDibGetPalette(hDD_);
}
LRESULT DrawInfo::ChangePalette(LPBITMAPINFOHEADER pInfoHeader)
{
    PALETTEENTRY    aPalette[256];
    LPRGBQUAD pColors = (LPRGBQUAD)((LPBYTE)pInfoHeader + pInfoHeader-&gt;biSize);
    // That annoying RGB ordering problem again.
    for (int i=0; i&lt;(int)pInfoHeader-&gt;biClrUsed; i++) 
    {
    aPalette[i].peRed   = pColors[i].rgbRed;
    aPalette[i].peGreen = pColors[i].rgbGreen;
    aPalette[i].peBlue  = pColors[i].rgbBlue;
    aPalette[i].peFlags = 0;
    }
    DrawDibChangePalette(hDD_,0,(int)pInfoHeader-&gt;biClrUsed,aPalette);
    return ICERR_OK;
}
LRESULT DrawInfo::Realize(HDC hDC, BOOL background)
{
    hDC_ = hDC;
    return (hDC_ &amp;&amp; hDD_) ? DrawDibRealize(hDD_, hDC_,background) 
              : ICERR_UNSUPPORTED;
}
BOOL DrawInfo::CanHandleFormat(LPBITMAPINFOHEADER pInfoHeader)
{
    return (pInfoHeader &amp;&amp; pInfoHeader-&gt;biCompression == BI_RGB &amp;&amp; 
        (pInfoHeader-&gt;biPlanes*pInfoHeader-&gt;biBitCount==8)) 
        ? TRUE : FALSE;
}
LRESULT DrawInfo::SuggestFormat(ICDRAWSUGGEST FAR *pSuggest)
{
    if (pSuggest-&gt;lpbiSuggest == NULL)
    return sizeof(BITMAPINFOHEADER) + 256 * sizeof(RGBQUAD);
    // We only want 8 bits-per-pixel uncompressed RGB DIBs.
    pSuggest-&gt;lpbiSuggest-&gt;biCompression = BI_RGB;
    pSuggest-&gt;lpbiSuggest-&gt;biPlanes = 1;
    pSuggest-&gt;lpbiSuggest-&gt;biBitCount = 8;
    return sizeof(BITMAPINFOHEADER) + 
       pSuggest-&gt;lpbiSuggest-&gt;biClrUsed * sizeof(RGBQUAD);
}

</pre>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
