<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>JAN95: PROGRAMMER'S BOOKSHELF</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>PROGRAMMER'S BOOKSHELF<a name="006f_0020"></h1><P>
<h2><a name="006f_001e"><a name="006f_0000">Making Programs Go Faster</h2><P>
<h3>Peter Gulutzan</h3><P>
<p><i><a name="006f_001f"><a name="006f_0000">Peter is president of Ocelot Computer Services and co-author of Optimizing SQL (R&amp;D Publications, 1994). He can be contacted Suite 1104, Royal Trust Tower, Edmonton, AB or on CompuServe at 71022,733.</i></p><hr><P>
In an etymology-based world, &quot;optimization&quot; books would show how to make the &quot;best&quot; code for a given algorithm, and &quot;best&quot; would cover a range of concepts: clarity, portability, connectivity, and the like. In such a world, the title of Michael Abrash's book, <I>Zen of Code Optimization</I> would be <I>Zen of Code Acceleration</I> because it's about making programs go faster--period. That's a narrow way to define optimizing, but there are enough generalist books out already. Speed specialists will know that this book is for them as soon as they read the first sentence in the Preface: &quot;This book is the diary of a personal passion, my quest for ways to write the fastest possible software for IBM-compatible computers in C, C++, and assembly language.&quot;<P>
In fact, the approximate ratios are 5 percent C++, 25 percent C, and 70 percent assembly language. No surprise there: To really control the cycles, programmers have to use assembly language. But <I>Zen of Code Optimization</I> introduces this proposition in a sober fashion: Chapter 1 is an example of a C program that really can't be improved by just dropping in some inline assembly code. The first step--and <I>Zen</I> never stints on the warnings that this must be the first step--is <I>improve the algorithm</I> by timing it, timing the alternatives, stopping and thinking, deciding if any performance improvement would really be worth the effort, and then--only then--rewriting the critical routine in assembly language.<P>
But how can you make your routine faster if you can't figure out how fast the routine is running, before and after their changes? <I>Zen</I> solves this problem in Chapter 3 by introducing a timing program called &quot;the Zen Timer,&quot; which comes on the 3.5-inch diskette packaged with the book. Certainly, a profiler will do a better job of describing what routines are in use and where apparent bottlenecks lie. However, a profiler is not a precise instrument. Typically, profilers depend on the computer's system clock to interrupt them, which happens 18.2 times a second--a relatively infrequent occurrence on a computer that's doing several million instructions per second. Not only that, the profiler and the clock-interrupt-routine themselves consume cycles, so the act of measurement affects the thing being measured. To truly time something, you have to run a routine several million times with varying clock speeds in a loop.<P>
The Zen Timer presents no such difficulties. It works by reprogramming the 8253 (or equivalent) timer chip that comes standard with every &quot;IBM compatible&quot; computer. The 8253 is incrementing an internal counter approximately 1,000,000 times per second. The Zen Timer retrieves the 8253's counter value, then it masks all interrupts and executes whatever routine has to be timed. As soon as that's over, it gets the 8523's current count (the 8523 keeps incrementing independently of what's happening on the CPU). It subtracts the count value that it got before entering the loop, and lo! The result is a timing of the routine's speed to the nearest microsecond, give or take a bit (some caveats apply).<P>
As far as I can tell though, <I>Zen of Code Optimization</I> does not mention a potentially irritating detail: The Zen Timer does not work from Windows or from the Windows DOS Box. So the question arises, if you have to go outside Windows when you use the Zen Timer to test a routine, are the results valid when we put the same routine in a Windows application? In any ordinary situation, yes. There are a few instructions which run differently in Windows' Enhanced 386 mode: POP ES; MOV DS,AX; or anything else that causes a segment identifier to change. Still, such instructions are too rare to make the Zen Timer's results meaningless. This utility is the best thing about the book.<P>
<h3><a name="006f_0021">Zen: The 486 Avatar<a name="006f_0021"></h3><P>
How fast does an instruction go on an Intel 486? My assembler's reference guide is supposed to answer that but--fascinatingly--it's often wrong.<P>
Sometimes my guide is simply misprinted, like the TASM 3.x manual, which says that JCXZ takes one or three cycles (it should say five or eight cycles, a whopping difference). Sometimes my guide is simply incomplete: It was years before I found out that <I>ADD mem,1</I> can be slower than <I>INC mem</I>, and I search in vain for that kind of information in the &quot;manuals&quot; that came with my assembler package. I do better if I go to the real information source (Intel's documents). Yet even there, some details are missing or hidden in a terse appendix. In short, nobody can answer the question, &quot;How fast does an instruction go on an Intel 486?&quot;. I have to time it myself, and until recently, my code-timing method involved wasting a lot of my own time.<P>
This is where <I>Zen</I> comes in. I've solved the timing problem by plugging in the Zen Timer, which shows with reasonable clarity where my cycle times are going. What about the problem of finding out how fast a CPU really goes? Since (to my knowledge) <I>Zen</I> is the only trade book that even tries to address this question, I'm sure that many people will rejoice in <I>Zen</I>'s revelations.<P>
Still, <I>Zen</I>'s Chapters 12 and 13--the two chapters that address the Intel 486--need a close look.<P>
Chapter 12 contains a section titled, &quot;Calculate Memory Pointers Ahead of Time,&quot; which warns against loading a value into a register and then using the same register as a pointer. For example, if your first instruction is MOV BX,5, then your second instruction better not be MOV AX,[BX], because the 486's pipeline stalls when it can't figure out an address in advance. Intel's documentation says there is a penalty for doing this. <I>Zen</I>'s contribution is to point out that the penalty is really two cycles. But <I>Zen</I> misses the exceptions. For example, if a two-cycle penalty always applied, then <a href="#006f_0022">Example 1(a)</A> would take two cycles longer than <a href="#006f_0022">Example 1(b)</A> (assuming BX starts equal to <I>offset Mem</I>)--but it does not. I timed them together, and the penalty in this case is one cycle.<P>
A bit later you come to the section entitled, &quot;Problems With Byte Registers,&quot; which begins with the statement, &quot;There are two ways to lose cycles by using byte registers, and neither of them is documented by Intel, so far as I know.&quot; We then see that the first rule is a matter of using a 16-bit register as an instruction's source operand right after &quot;loading&quot; one half of the register. In <a href="#006f_0023">Example 2</A>, the two instructions together will run in three cycles--one more than you'd expect if you read that MOV is a one-cycle instruction.<P>
Actually, Intel does warn that there will be a penalty for loading half of a register and then using the whole register as a source in the next instruction. When they say &quot;half of a register,&quot; they mean the 16-bit half of a 32-bit register, so <I>Zen</I> is apparently right in saying that Intel doesn't document the effect. However, <I>Zen</I>'s rule merely extrapolates Intel's warning to 8- and 16-bit registers.<P>
In reality, <I>Zen</I>'s rule is only one manifestation of a rule that's much more widely applicable, but also much more complex. To merely describe it would take a page, so I'll limit myself to two examples. In <a href="#006f_0024">Example 3(a)</A>, CX is the destination, not the source, but there is a penalty anyway. In <a href="#006f_0024">Example 3(b)</A>, however, there is no penalty because a penalty is already being applied. Neither of these byte-register effects fits either <I>Zen</I> rule. In short, you should be aware that there's more to the story than <I>Zen </I>implies.<P>
Chapter 13 has four pages of personal anecdotes and a restatement of the 486's most important pipeline problem (changing a register just before using it in an address), then a couple of pages on the obscure BSWAP instruction (&quot;BSWAP: More Useful than You Might Think&quot;). To justify this attention, <I>Zen</I> says, <P>
<cite>Unfortunately the x86 instruction set doesn't provide any way to work directly with only the upper half of a 32-bit register. The next best solution is to rotate the register to give you access in the lower 16 bits to the half you need at any particular time....</cite><P>
<I>Zen</I> dismisses using ROR for this, because &quot;shifts and rotates are among the worst performing instructions of the 486, taking two to three cycles to execute.&quot; To the rescue comes BSWAP, which &quot;executes in just 1 cycle.&quot; The discussion culminates in <a href="#006f_0025">Example 4</A>, which shows that you can use the top half of the ECX register as a loop counter and the bottom half as a &quot;skip value,&quot; swapping the top half with the bottom half when you need to directly refer to the loop-counter half.<P>
This would be very useful, except that BSWAP is not just a one-cycle instruction--it requires from one to three cycles. In most situations, BSWAP ECX takes three cycles; ROR ECX,16 and BSWAP ECX take the same time. Furthermore, you certainly can work directly with the upper half of a 32-bit register. If you do, your code will be faster than if you used BSWAP and (I think) quite a bit clearer; see <a href="#006f_0026">Example 5</A>.<P>
Incidentally, my claim that BSWAP ECX is a three-cycle instruction may surprise some people. Doesn't Intel say that BSWAP takes one cycle? Yes, but Intel also says to add one cycle for prefixes (there are some exceptions, but that's the general rule, and it's certainly applicable in these examples). Aha, everyone thinks, we're operating on a 32-bit operand; therefore, there's a &quot;32-bit operand&quot; prefix (DB 66h), so BSWAP takes 1+1=2 cycles. That's right, but not everyone realizes that BSWAP, like many other instructions, always has another prefix (DB 0Fh), so BSWAP takes 1+1+1=3 cycles. Intel's documentation has a little note that 0Fh is a prefix, but nowhere have I seen them spell out the horrible implication: Most of the time on 386/486s, all instructions whose first machine opcode byte is 0FH<I> take one cycle longer</I> than the manual says they will. This includes many of the instructions that appeared with the introduction of the 386, including BSR, BT, BTC, BTR, BTS, CMPXCHG, IMUL &lt;register&gt;,&lt;register&gt;; Jxx &lt;rel16&gt;; LFS, LGS, MOVSX, MOVZX, POP FS, POP GS, PUSH FS, PUSH GS, SHLD, SHRD, SETxx, XADD, and various protected-mode instructions--and BSWAP. I'll suggest that BSWAP is not &quot;more useful than you think.&quot;<P>
By way of emphatic disclaimer, I am not giving <I>Zen</I>'s advice a critical review. I cowrote an &quot;optimizing tips&quot; book (on a different topic) and fully expect people to find exceptions to the so-called rules in it--that's how we learn. <P>
This is not a single book with a single unified plan--it is two books threaded together. Book 1 is for &quot;speed freaks,&quot; who want to learn quickie fixes, speed up their tightest routines, and count cycles. Book 2 is for &quot;Zen disciples,&quot; who want to exercise their minds, experience the thought processes of the masters, and be better programmers. If you're a speed freak but have no patience for all that Zen stuff, buy the Intel manuals. If you're a speed freak but you want to be a Zen disciple too, buy this book.<P>
<h4>Zen of Code Optimization</h4><P>
<h4><I>Michael Abrash</I> </h4><P>
<h4>Coriolis Group Books, 1994 449 pp., $39.95 </h4><P>
<h4>ISBN 1-883577-03-9</h4><P>
<h4><a name="006f_0022"><B>Example 1:</B> If a two-cycle penalty always applied, then (a) would take two cycles longer than (b), but it doesn't.<a name="006f_0022"></h4><P>
<pre>(a)
MOV        BX,offset Mem
ADD        word ptr [bx+4],55
(b)
MOV        CX,offset Mem
ADD        word ptr [BX+4],55</pre><P>
<h4><a name="006f_0023"><B>Example 2:</B> These two instructions run in three cycles.<a name="006f_0023"></h4><P>
<pre>MOV        AL,5       ;&quot;Loading&quot; AL, which is one half of AX
MOV        DX,AX      ;Using AX, the whole register, as the source</pre><P>
<h4><a name="006f_0024"><B>Example 3:</B> (a) CX is the destination; (b) there is no execution penalty because a penalty is already being applied.<a name="006f_0024"></h4><P>
<pre>(a)
DEC        CL         is slower than         DEC        CL
SUB        CX,5                              SUB        AX,5
(b)
MOV        BL,BL      is NOT slower than     MOV        BL,BL
MOV        [BX],BX                           MOV        [BX],CX</pre><P>
<h4><a name="006f_0025"><B>Example 4:</B> You can use the top half of the ECX register as a loop counter.<a name="006f_0025"></h4><P>
<pre>mov       cx,[InitialValue]
bswap     ecx             ;Put skip value in upper half of ECX
mov       cx,64h          ;Put loop count in CX
looptop:...
bswap     ecx             ;Make skip value word accessible in CX
add       bx,cx           ;Skip BX ahead
inc       cx              ;Set next skip value
bswap     ecx             ;Put loop count in CX
dec       cx              ;Count down loop
jnz       looptop         ;The loop will repeat 64h times.</pre><P>
<h4><a name="006f_0026"><B>Example 5:</B> This code is faster than using BSWAP.<a name="006f_0026"></h4><P>
<pre>mov       cx,[InitialValue]
and       ecx,000ffffh    ;Clear the upper part of ECX to 0
or        ecx,00630000h   ;Put 63h directly in the upper part of ECX
looptop:...
add       bx,cx           ;Skip BX ahead
inc       cx              ;Set next skip value
sub       ecx,00010000h   ;Count down loop
jnc       looptop         ;The loop will repeat 64h times.</pre><P>
<P>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
