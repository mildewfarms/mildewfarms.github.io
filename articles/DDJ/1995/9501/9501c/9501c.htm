<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>JAN95: Using the Multiple Precision Library</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Using the Multiple Precision Library<a name="0039_0008"></h1><P>
<h2><a name="0039_0006"><a name="0039_0000">Dealing with infinite-precision integers </h2><P>
<h3>John Rogers</h3><P>
<p><i><a name="0039_0007"><a name="0039_0000">JR is a programmer in the Seattle area. He can be contacted on CompuServe at 72634,2402.</i></p><hr><P>
ANSI C is a fine language--as long as you don't have to count too high. Although most implementations of C boast 32-bit integer arithmetic, many applications are beginning to require higher precision. (Microsoft, for instance, makes over a billion dollars a year, and that dollar amount barely fits in 32 bits. What if Bill wants to count in pennies to keep the auditors happy?) However, even the IEEE double-precision floating-point format only gives 15 digits of precision, as I understand it.<P>
What's needed is a way to deal with multiple-precision integers, independent of the machine's word size. The multiple-precision (MP) integer library available with UNIX V7, UNIX SVR4, 4.3BSD, and other versions of UNIX provide &quot;infinite-precision&quot; signed integer operations for C programs. I've also ported the GMP library to Windows NT. In this article, I'll describe how to use the scantily documented MP routines, along with providing sample code, portability information, some MP &quot;helpers,&quot; and a few other hints.<P>
<h3><a name="0039_0009">Declaring Variables<a name="0039_0009"></h3><P>
To declare variables for use with the MP library, you generally declare them as pointers to the MINT (multiple-precision integer) type. The MINT type is often defined in &lt;mp.h&gt; as a structure. Even if the fields in the structure are documented in your version of MP, I recommend avoiding direct references to them in your programs. The field names and usage differ greatly between MP implementations.<P>
You should also be aware that the MINT type name (all uppercase letters) is only available as mint (all lowercase letters) in a few versions. I recommend you define NEED_MINT when using those versions, and write code like that shown in <a href="#0039_0012">Example 1</A>; after that, you can use the MINT type. I do this in the header file for my MP helpers (see MPHelp.h in <a href="#0039_0016">Listing One</A>). In this article, I will only use the MINT type name.<P>
<a href="#0039_0011">Table 1</A> lists the MP functions supported by various versions of MP, along with entries for the type name(s) supported by each, and whether or not the header file &lt;mp.h&gt; is available. Limitations of the various versions are also noted. The details in this table should help you write portable code using MP.<P>
One rule is important when writing code with MINT variables: Make sure every variable is initialized by calling <I>itom</I> or <I>xtom</I>, both of which return pointers to MINT variables. Throughout this article, I use phrases like &quot;refers to a MINT variable&quot; when I really mean &quot;is passed a pointer to a MINT variable.&quot; In short, none of the MP functions are passed MINT variables directly.<P>
The <I>itom</I> (integer-to-MINT) routine is available in every version of MP. It is by far the most common way to initialize MINT variables, as <I>itom</I> returns a pointer to a MINT. Beware that <I>itom</I> really only accepts a value of type <I>short </I>in most versions (despite what some man pages imply), and at least one version will not accept the &quot;most negative short integer&quot; (SHRT_MIN, I assume). Being allowed to initialize only with a <I>short </I>does not limit the final size of the variable.<P>
The <I>xtom</I> (hex-string-to-MINT) routine is not widely available, and it is the only way to initialize a MINT variable besides <I>itom</I>. Therefore, <I>xtom</I> returns a pointer to a MINT variable. The only argument to <I>xtom</I> is a pointer to a string containing hex digits. For example, to declare and initialize some variables, use code like that in <a href="#0039_0013">Example 2</A>. Once you have initialized a MINT variable, you can update its value repeatedly with a variety of MP functions. The MP library will automatically expand and shrink the memory allocated for that MINT variable. In some versions, you can explicitly give back the memory associated with a variable by using the <I>mfree</I> function. Note that <I>mfree</I> effectively deinitializes the MINT variable.<P>
You should be aware of one other aspect related to memory allocation: <I>MP routines</I> <I>do not inform your code in any way if they run out of memory</I>. There's no return code, no global-error variable, no callback, no signal, no exception. The routines die in whatever manner they choose, probably writing a message to <I>stderr</I> in English, and possibly leaving a core file if they are running on a UNIX system. MP routines are fine for many applications, but think twice before using them in something like an air-traffic control system.<P>
Passing out-of-range arguments to the MP routines will generally have similar results as running out of memory. So, write robust code, and test it well. Beware of passing references to the same MINT as input and output for the same function call. (Using the same MINT for two different inputs seems to work fine, however.)<P>
The MP compare (<I>mcmp</I>) routine and the standard-C string-compare (<I>strcmp</I>) routine are very similar. Both return type <I>int</I> when comparing two values. Both return 0, when the values are equal; less than 0, when the first value is smaller; and greater than 0, when the first value is larger. See MPHelp.c (<a href="#0039_0017">Listing Two</A>) for samples of using the mcmp routine.<P>
<h3><a name="0039_000a">Add, Subtract, Multiply, Divide<a name="0039_000a"></h3><P>
Every version of MP has support for the basic math operations add, subtract, multiply, and divide. The MINT add routine (<I>madd</I>) takes its first two arguments as inputs, adds them, and stores the result in the third argument. The <I>madd</I> routine, like almost every other MP routine, has no return value and assumes that all of its arguments (even the output arguments) have already been initialized. The MINT subtract routine, <I>msub</I>, is similar to <I>madd </I>in <a href="#0039_0015">Example 3</A>. It subtracts the value of its second argument from its first argument and sets its third argument accordingly. The MINT multiply routine (<I>mult</I>) simply multiplies its first argument by its second argument and updates the third argument with the product. All three arguments must refer to MINT variables.<P>
The MP library has two divide routines that differ only in name and the data types of two arguments. For the MINT divide routine, <I>mdiv</I>, all arguments refer to MINT variables. For the short divide routine, <I>sdiv</I>, the data type of the divisor is short. The remainder in <I>sdiv </I>is represented as a pointer to a <I>short</I>. Other than those two exceptions in <I>sdiv</I>, all other arguments to the divide routines must refer to MINT variables. For both routines, the first two arguments are inputs. The first argument is the dividend and the second is the divisor. The divide routines also have two outputs each. The third argument will be set to the quotient, and the fourth will be set to the remainder. Be careful when passing negative numbers to the divide routines, because various versions of <I>mdiv</I> and <I>sdiv</I> set the sign for the remainder using different rules. As with <I>itom</I>, be aware that at least one version of <I>sdiv</I> will not accept the &quot;most negative short integer&quot; (SHRT_MIN, I assume) as the divisor. <a href="#0039_0017">Listing Two</A> (MPHelp.c) gives examples of calling both MP divide routines, <I>mdiv</I> and <I>sdiv</I>.<P>
<h3><a name="0039_000b">I/O<a name="0039_000b"></h3><P>
The MP versions of which I am aware include eight different MINT I/O routines. However, only two of those routines are available in all versions, and one of those two is plagued by problems. The two common routines are MINT output (<I>mout</I>) and MINT input (<I>min</I>). The <I>mout</I> and <I>min</I> routines do decimal I/O using <I>stdout</I>. The <I>min</I> routine in some MP versions may return an <I>int</I> value of EOF (end of file), but this return value is often not documented or missing altogether. For portability, I recommend avoiding the <I>min</I> return value and calling the <I>stdio feof</I> function instead. The <I>feof</I> routine and the EOF <I>#define</I> are declared in &lt;stdio.h&gt;. The name <I>min</I> is doubly cursed; in some older versions of Microsoft C an incompatible <I>min</I> macro is defined in &lt;stdlib.h&gt;. <P>
If you have access to them, I recommend the Berkeley-style <I>m_in</I> and <I>m_out</I> routines, which support any file (not just <I>stdin</I>/<I>stdout</I>) and more number bases (2 through 10 in 4.3BSD).<P>
<a href="#0039_0014">Table 2</A> gives more-detailed information on all eight of the MP I/O functions. It documents the return values, argument lists, number bases, and files supported by each function. IsPrime.c (<a href="#0039_0018">Listing Three</A>) provides a sample call to <I>mout</I>, while PowTable.c (<a href="#0039_0019">Listing Four</A>) contains calls to <I>m_out</I>.<P>
<h3><a name="0039_000c">Square Roots<a name="0039_000c"></h3><P>
All MP versions have a MINT square-root routine, <I>msqrt</I>. The only input is the first argument, which must refer to a MINT having a value greater than or equal to 0. The outputs are the other two arguments. The second argument must point to a MINT set with the square root, and the third argument must refer to a MINT set with the remainder. MPHelp.c (<a href="#0039_0017">Listing Two</A>) illustrates a call to <I>msqrt</I>.<P>
<h3><a name="0039_000d">GCD<a name="0039_000d"></h3><P>
Although the function name may differ, every version of MP has a greatest common divisor (GCD) routine, usually named <I>gcd</I>. In one version it is <I>mgcd</I>, probably to avoid conflicts with an incompatible math-library routine.<P>
The <I>gcd</I> and <I>mgcd</I> routines each have two inputs and one output. All arguments refer to MINT variables. The first and second arguments are inputs; the third will be set to the greatest common divisor of the other two. I recommend that you avoid calling either routine with inputs that have 0 or negative values.<P>
<h3><a name="0039_000e">Powers<a name="0039_000e"></h3><P>
Every version of MP has an <I>rpow</I> (regular power) routine. The first input (referring to a MINT) is the base, the second is the exponent. The data type of the exponent is often undocumented. I recommend only passing a <I>short </I>for this argument. The third argument must refer to a MINT that will be set to the first argument raised to the second argument. Try to avoid 0 and negative powers.<P>
All versions of MP have another power function, usually called <I>pow</I>. At least one MP version calls it <I>mpow </I>(also because of a math-library-function incompatibility). The arguments for <I>pow</I> and <I>mpow</I> are identical; all refer to MINT values. The first three arguments are all inputs. The first argument is the base, the second is the exponent, and the third is a value the result of which is to be computed modulo. The fourth argument is the output; it will be set with the result. Unfortunately, the &quot;modulo&quot; argument of this function makes it more or less useless.<P>
The code sample for the power routines produces a table of the powers of two, in various number bases, up to any arbitrary number. (This is part of the reason for my interest in the MP routines. I'm writing a reference book and I want to include a table of powers of two, up to at least 64 bits, but my C compiler quits at 32.) See PowTable.c (<a href="#0039_0019">Listing Four</A>) for an example of calling <I>rpow</I>.<P>
<h3><a name="0039_000f">Miscellaneous Routines<a name="0039_000f"></h3><P>
One miscellaneous routine I've found useful is <I>move</I>, which copies one MINT value to another. The first argument is the input; the second is the output. This routine is often used because it is not wise to pass the same MINT value to an MP function as both an input and an output. Instead you introduce temporary variables and call the <I>move</I> routine here and there.<P>
The Berkeley version of MP also provides a function named <I>invert</I> which gets three arguments, all of which must refer to MINT variables. The first two arguments are inputs; the third is the output. The 4.3BSD man page says &quot;invert computes c such that a*c mod b=1, for a and b relatively prime.&quot; I don't know of any use for this function yet; I'm only including it for completeness.<P>
The last miscellaneous MP function is the MINT-to-hex-string (<I>mtox</I>) routine. The only argument to <I>mtox</I> is an input, referring to the MINT variable to be converted. The return value from <I>mtox </I>is a pointer to a newly allocated string. The area allocated for the string may be released by calling the usual function (<I>free</I>, declared in &lt;stdlib.h&gt;).<P>
<h3><a name="0039_0010">Conclusions<a name="0039_0010"></h3><P>
The MP library includes some powerful functions that give you the means to expand numbers in programs in a fairly portable way. You now have enough information to make effective use of them in your programs. Good luck!<P>
<h4><a name="0039_0011"><B>Table 1:</B> MP functions versus version of MP. <a name="0039_0011"></h4><P>
<pre>
                     UNIX   UNIX Research   UNIX     4.3     GMP      
                      V7    Tenth Edition   SVR4     BSD    1.3.2    
                      
  header file &lt;mp.h&gt;  no     yes             yes     yes     yes
  type MINT           no     no              yes     yes     yes
  type mint           no     yes             no      no      no
  fmin                no     yes             no      yes1    no
  fmout               no     yes             no      yes     no
  gcd                 yes2   no8             yes     yes     yes
  invert              no     no              no      yes     no
  itom                yes5   yes9            yes     yes5    yes
  madd                yes    yes             yes     yes     yes
  mcmp                no     yes7            yes7    yes7    yes
  mdiv                yes    yes             yes     yes     yes17,19
  mfree               no     yes             yes     no      yes
  mgcd                no15   yes             no15    no15    no15
  min                 yes1   yes             yes1    yes1    yes1,20
  m_in                no     no              no      yes1    no
  mout                yes    yes             yes     yes     yes19
  m_out               no     no              no      yes14   no
  move                no     yes             no      yes     yes
  mpow                no13   yes             no13    no13    no13
  msqrt               yes    yes             yes     yes     yes
  msub                yes    yes             yes     yes     yes
  mtox                no     no              yes16   no      yes18
  mult                yes    yes             yes     yes     yes
  omin                no     no              no      yes1    no
  omout               no     no              no      yes     no
  pow                 yes    no10            yes     yes     yes
  rpow                yes3   yes6            yes11   yes12   yes11
  sdiv                yes4   yes9            yes     yes     yes17
  xtom                no     no              yes16   no      yes
  
  1 fmin, min, m_in, omin: Return type and/or value not documented.
  2 gcd: Prototype is given in man page, but not documented.
  3 rpow: Second argument (exponent) is documented as &quot;MINT *&quot;; 
    perhaps this is wrong, as all other versions seem to use short or 
    int.
  4 sdiv: Second argument (divisor) type not documented; probably 
    short as in other versions.
  5 itom: Argument type is not documented; probably short.
  6 rpow: Second argument (exponent) type not given. Perhaps short or 
    int was meant.
  7 mcmp: Return type not documented; probably int.
  8 gcd: Probably conflicts with a libm/math.h routine. In this 
    version, use mgcd instead.
  9 itom, sdiv: Don't call with SHRT_MIN (the most negative short 
    value).
 10 pow: Probably conflicts with pow in libm/math.h; use mpow 
    instead.
 11 rpow: Second argument (power) documented as short.
 12 rpow: Second argument (power) documented as int; use short for 
    portability.
 13 mpow: Use pow instead.
 14 m_out: Only supports bases 2--10.
 15 mgcd: Use gcd instead.
 16 mtox, xtom: It is undocumented whether hex uses upper- and/or 
    lowercase letters.
 17 mdiv, sdiv: Remainder is same sign as the dividend.
 18 mtox: Generates lowercase hex letters; negative numbers have 
    leading minus sign.
 19 mdiv, mout: Buggy on systems with 16-bit int.
 20 min: Ignores leading spaces and tabs.</pre><P>
<h4><a name="0039_0012"><B>Example 1:</B> Define NEED_MINT when using the MINT type name.<a name="0039_0012"></h4><P>
<pre>#include &lt;mp.h&gt;
#ifdef NEED_MINT
typedef mint MINT;
#endif</pre><P>
<h4><a name="0039_0013"><B>Example 2:</B> Declaring and initializing variables.<a name="0039_0013"></h4><P>
<pre>MINT * One;
MINT * Three;
MINT * Sum;
 ...
One = itom(1);
Three = itom(3);
Sum = itom(7);  /* dummy value */</pre><P>
<h4><a name="0039_0014"><B>Table 2:</B> MP I/O routines.<a name="0039_0014"></h4><P>
<pre>
Input Routines                                                      
Base   File    Prototype                                           

10      any    int? fmin( MINT * Number, FILE * File )
10      stdin  int? min( MINT * Number )
2--10   any    int? m_in( MINT * Number, int Base, FILE * File )
8       stdin  int? omin( MINT * Number )

Output Routines                                                       
Base   File     Prototype                                           

10      any     void fmout( MINT * Number, FILE * File )
10      stdout  void mout( MINT * Number )
2--10   any     void m_out( MINT * Number, int Base, FILE * File )
8       stdout  void omout( MINT * Number )</pre><P>
<h4><a name="0039_0015"><B>Example 3:</B> The madd function.<a name="0039_0015"></h4><P>
<pre>madd(
   One,    /* first input */
   Three,  /* second input */
   Sum);   /* result - set */</pre><P>
<P>
<h4><a name="0039_0016">Listing One <a name="0039_0016"></h4><pre>

/* Copyright (c) 1994 by John Rogers. All rights reserved.
 * FUNCTION - MPHelp.h declares routines which are &quot;helpers&quot; to users of the 
 * multiple precision (MP) library. The routines declared here are:
 * miseven(number), misodd(number), misprime(number), miszero(number)
 * All of these functions return &quot;boolean&quot; values in &quot;int&quot; types, where 0 
 * means false and 1 means true.
 * AUTHOR - JR (John Rogers), CompuServe: 72634,2402
 *      Internet: 72634.2402@CompuServe.com
 */

#ifndef MPHELP_H
#define MPHELP_H

#include &lt;mp.h&gt;         /* MINT or mint typedef. */

/* Define NEED_MINT in makefile if local mp.h does not provide the typedef. 
 * In that case, we define the MINT type here.
 */
#ifdef NEED_MINT
typedef mint MINT;
#endif

/* ROUTINES, in alphabetical order: */

int  /* Note: return values are 0=false and 1=true. */
miseven(
   const MINT  * Number);
int  /* Note: return values are 0=false and 1=true. */
misodd(
   const MINT  * Number);
int  /* Note: return values are 0=false and 1=true. */
misprime(
   const MINT  * Number);
int  /* Note: return values are 0=false and 1=true. */
miszero(
   const MINT  * Number);
#endif /* MPHELP_H */


</pre>
<h4><a name="0039_0017">Listing Two<a name="0039_0017"></h4><pre>

/* Copyright (c) 1994 by John Rogers. All rights reserved.
 * FUNCTION - MPHelp.c contains the MP &quot;helpers&quot;: miseven(number), 
 * misodd(number), misprime(number), miszero(number). All of these functions 
 * return &quot;boolean&quot; values in &quot;int&quot; types, where 0 is false and 1 means true.
 * AUTHOR - JR (John Rogers), CompuServe: 72634,2402
 *      Internet: 72634.2402@CompuServe.com
 */

#include &lt;assert.h&gt;     /* assert(). */
#include &lt;mp.h&gt;         /* MINT typedef. */
#include &quot;mphelp.h&quot;     /* My prototypes. */

/* ROUTINES, in alphabetical order: */
int  /* Note: return values are 0=false and 1=true. */
miseven(
   const MINT  * Number)
{
   MINT   * Quotient;
   short  Remainder;
   int    ReturnValue;   /* 0=false, 1=true. */

   /* Initialize MINT variable (any value will do), so MP routines 
    * allocate space. */
   Quotient = itom(7);  /* Dummy value. */

   /* Divide Number by two and look at remainder. */
   sdiv(
         Number,        /* dividend - input */
         2,             /* divisor - input */
         Quotient,      /* quotient - output */
         &amp; Remainder);  /* remainder - output */
   /* We'll return &quot;true&quot; if-and-only-if Remainder is zero. */
   ReturnValue = ( Remainder == 0 );

   mfree( Quotient );  /* Free space used by temp. */

   return (ReturnValue);

} /* miseven */

int  /* Note: return values are 0=false and 1=true. */
misodd(
   const MINT  * Number)
{
   return ( !miseven( Number ) );
}
int  /* Note: return values are 0=false and 1=true. */
misprime(
   const MINT  * Candidate)
{
   int   CompareResult;
   MINT  * Constant_Two = itom(2);
   MINT  * Divisor = NULL;
   MINT  * MaxDivisor = NULL;
   MINT  * Quotient = NULL;
   MINT  * Remainder = NULL;
   int   ReturnValue;   /* 0=false, 1=true. */

   /* Check for easy cases:
    *    -infinity &lt;= x &lt;= 1    not prime
    *    x = 2                  prime
    *    x &gt; 2, x is even       not prime
    */
   CompareResult = mcmp(Candidate, Constant_Two);
   if (CompareResult &lt; 0) {
      /* Anything less than 2 isn't prime. */
         ReturnValue = 0;  /* false */
         goto Cleanup;
   } else if (CompareResult == 0) {
      /* Exactly two, yes that is a prime. */
      ReturnValue = 1;  /* true */
      goto Cleanup;
   }
   assert( CompareResult &gt; 0 );
   if (miseven(Candidate)) {
      ReturnValue = 0;  /* false */
      goto Cleanup;
   }
   /* Well, all that's left is the hard stuff. Try all of the odd divisors
    * from 3 up to the square root of the candidate. */
   assert( misodd( Candidate ) );

   Divisor = itom( 3 );
   MaxDivisor = itom( 1 );
   Quotient = itom( 1 );   /* don't care value */
   Remainder = itom( 1 );   /* don't care value */

   msqrt(
         Candidate,    /* input value */
         MaxDivisor,   /* square root */
         Remainder );  /* remainder */
   for ( ; ; ) {  /* loop forever */
      /* Try dividing this one. */
      mdiv(
            Candidate,  /* dividend */
            Divisor,
            Quotient,
            Remainder);
      /* Does this divisor divide evenly? */
      if ( miszero( Remainder ) ) {
         /* If we were dividing by Candidate, then Candidate must be prime. */
         if (mcmp( Candidate, Divisor ) == 0) {
            ReturnValue = 1;  /* true */
            goto Cleanup;
         } else {
            /* Otherwise, if this divisor divides evenly, it factors the 
             * candidate, which therefore cannot be prime.  */
             ReturnValue = 0;  /* false */
            goto Cleanup;
         }
      }
      /* Have we gone as far as we can? If so, this must be prime! */
      if (mcmp( Divisor, MaxDivisor ) &gt;= 0) {
         ReturnValue = 1;  /* true */
         goto Cleanup;
      }
      /* Bump to next odd divisor. We shouldn't use MP routines to
       * update Divisor in place, so use a temporary for result of madd(). */
#define RandomTemp  Quotient
      madd(
            Divisor,       /* a value */
            Constant_Two,  /* 2nd value */
            RandomTemp );  /* the sum */
      move(
            RandomTemp,    /* source */
            Divisor );     /* dest */
      assert( misodd( Divisor ) );
   } /* loop forever */
Cleanup:
   /* Free memory used by temp vars. */
   if (Constant_Two != NULL) {
      mfree( Constant_Two );
   }
   if (Divisor != NULL) {
      mfree( Divisor );
   }
   if (MaxDivisor != NULL) {
      mfree( MaxDivisor );
   }
   if (Quotient != NULL) {
      mfree( Quotient );
   }
   if (Remainder != NULL) {
      mfree( Remainder );
   }
   return (ReturnValue);
} /* misprime */
int  /* Note: return values are 0=false and 1=true. */
miszero(
   const MINT  * Number)
{
   MINT  * Constant_Zero = itom(0);
   int   ReturnValue;   /* 0=false, 1=true. */
   /* We'll use the standard mcmp (MP compare) function for this. 
    * mcmp(a,b) returns  &lt;0  if  a&lt;b
    *                    =0  if  a=b
    *                    &gt;0  if  a&gt;b
    */
   if ( mcmp( Number, Constant_Zero ) == 0 ) {
      ReturnValue = 1;  /* true */
   } else {
      ReturnValue = 0;  /* false */
   }
   mfree( Constant_Zero );
   return (ReturnValue);
} /* miszero */


</pre>
<h4><a name="0039_0018">Listing Three<a name="0039_0018"></h4><pre>

/* Copyright (c) 1994 by JR (John Rogers). All rights reserved.
 * FUNCTION - This program takes a given number and
 *      determines whether or not it is prime.
 * SYNTAX - IsPrime -n number
 * AUTHOR - JR (John Rogers) CompuServe: 72634,2402
 *      Internet: 72634.2402@CompuServe.com
 */

#include &lt;assert.h&gt;     /* assert(). */
#include &lt;mp.h&gt;         /* MINT typedef, itom(). */
#include &quot;mphelp.h&quot;     /* misprime(). */
#include &quot;sample.h&quot;     /* Die(), StringToM(). */
#include &lt;stdio.h&gt;      /* printf(). */
#include &lt;stdlib.h&gt;     /* EXIT_SUCCESS. */
#include &lt;unistd.h&gt;     /* getopt(), optind, optarg. */

#define USAGE \
 &quot;This program determines if a number is prime.\n&quot; \
 &quot;Usage: IsPrime -n number\n&quot; \
 &quot;Or:    IsPrime -?\n\n&quot; \
 &quot;where:\n&quot; \
 &quot;       -n number   gives number to check\n&quot; \
 &quot;       -?          displays this message\n\n&quot; \
 &quot;Author: JR (John Rogers).\n&quot;

int main(
   int   argc,
   char  * argv[])
{
   const char  * MyOpts = &quot;n:N:&quot;;
   MINT        * Number = NULL;
   int         ThisOpt;
   int         ValueIsPrime; /* 0=false, 1=true */

   /* Do initial setup and argument handling. */
   while ((ThisOpt=getopt(argc,argv,MyOpts)) != EOF) {
      switch (ThisOpt) {
      case 'n':
      case 'N':
         Number = StringToM( optarg );
         assert(Number != NULL);
         break;
      case '?':
         Die( USAGE );
         /*NOTREACHED*/
      default:
         Die( &quot;bad return value from getopt&quot;);
         /*NOTREACHED*/
      }
   }
   /* Handle missing number. */
   if (Number == NULL) {
      Die( USAGE );
      /*NOTREACHED*/
   }
   /* Call an MP helper to do the hard work. */
   ValueIsPrime = misprime( Number );
   /* Tell user what we found out. */
   mout( Number );
   if (ValueIsPrime) {
      printf(&quot;NUMBER IS PRIME!\n&quot;);
   } else {
      printf(&quot;NUMBER IS NOT PRIME!\n&quot;);
   }
   /* Free temp storage. */
   if (Number != NULL) {
      mfree( Number );
   }
   /* All done; set exit code. */
   if (ValueIsPrime) {
      return(EXIT_SUCCESS);
   } else {
      return(EXIT_FAILURE);
   }
} /* main */


</pre>
<h4><a name="0039_0019">Listing Four<a name="0039_0019"></h4><pre>

/* Copyright (c) 1994 by JR (John Rogers). All rights reserved.
 * FUNCTION - This program generates a table of powers
 *      of 2, using the MP library routines.
 * SYNTAX - PowTable -n number
 * AUTHOR - JR (John Rogers) CompuServe: 72634,2402
 *      Internet: 72634.2402@CompuServe.com
 */

#include &lt;assert.h&gt;     /* assert(). */
#include &lt;mp.h&gt;         /* MINT, itom, rpow, mfree. */
#include &quot;sample.h&quot;     /* Die(), StringToShort(). */
#include &lt;stdio.h&gt;      /* stdout. */
#include &lt;stdlib.h&gt;     /* EXIT_SUCCESS. */
#include &lt;unistd.h&gt;     /* getopt(), optind, optarg. */

/* Only define this if m_out is supported at all. */
/* #define MP_SUPPORTS_M_OUT */

/* Only define this if m_out supports bases &gt; 10. */
/* #define MP_OUTPUT_SUPPORTS_LARGE_BASES */

#define MY_USAGE \
      &quot;Usage: PowTable -n number\n&quot; \
      &quot;Author: JR (John Rogers).\n\n&quot;
static void
DisplayOneTableEntry(
   short  PowerToCompute )
{
   MINT  * Two      = itom(2);
   MINT  * PowerOf2 = itom(42);  /* Dummy value. */

   /* Compute regular power (2 ** N). */
   rpow(
         Two,             /* number to raise */
         PowerToCompute,  /* exponent (short) */
         PowerOf2);       /* result */
   /* Write the power of two for this one. */
   printf( &quot;\n\n2 ** %d is:\n&quot;, (int) PowerToCompute );
#ifdef MP_SUPPORTS_M_OUT
   /* Write 2**N in binary, octal, decimal, hex. */
   m_out( PowerOf2,  2, stdout );
   m_out( PowerOf2,  8, stdout );
   m_out( PowerOf2, 10, stdout );
#ifdef MP_OUTPUT_SUPPORTS_LARGE_BASES
   m_out( PowerOf2, 16, stdout );
#endif

#else
   /* Output in decimal (only base supported). */
   mout( PowerOf2 );
#endif
   mfree( Two );       /* Free temps */
   mfree( PowerOf2 );
} /* DisplayOneTableEntry */
static void
GeneratePowerTable(
   short   MaxPower )  /* &gt;= 1 */
{
   short   CurrentPower = 1;
   for (;;) {
      DisplayOneTableEntry( CurrentPower );
      ++CurrentPower;
      /* Have we gone far enough? */
      if (CurrentPower &gt; MaxPower) {
         break;  /* done; go cleanup and return */
      }
   }
} /* GeneratePowerTable */
int
main(
   int   argc,
   char  * argv[])
{
   short       MaxPower = 0;
   const char  * MyOpts = &quot;n:N:&quot;;
   int         ThisOpt;
   /* Do initial setup and argument handling. */
   while ((ThisOpt=getopt(argc,argv,MyOpts)) != EOF) {
      switch (ThisOpt) {
      case 'n':
      case 'N':
         MaxPower = StringToShort( optarg );
         assert(MaxPower != 0);
         break;
      case '?':
         Die( MY_USAGE );
         /*NOTREACHED*/
      default:
         Die( &quot;bad return value from getopt&quot;);
         /*NOTREACHED*/
      }
   }
   /* Handle missing argument. */
   if (MaxPower == 0) {
      Die( MY_USAGE );
      /*NOTREACHED*/
   }
   /* Generate the table. */
   GeneratePowerTable( MaxPower );
   return(EXIT_SUCCESS);
} /* main */


</pre>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
