<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>JAN95: Data Attribute Notation Relationships</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Data Attribute Notation Relationships<a name="003d_000c"></h1><P>
<h2><a name="003d_000a"><a name="003d_0000">An object-oriented approach to analysis and design methodologies</h2><P>
<h3>Reginald B. Charney</h3><P>
<p><i><a name="003d_000b"><a name="003d_0000">Reg is president of Charney &amp; Day Inc. and is a voting member of ANSI's X3J16 Committee on the C++ Language. He can be reached on CompuServe at 70272, 3427 or on the Internet at rbcharney@delphi.com.</i></p><hr><P>
Data Attribute Notation (DAN) is an object-oriented coding style that emphasizes data abstraction. DAN, which I described in the article &quot;Data Attribute Notation and C++&quot; (<I>DDJ</I>, August 1994) binds the abstract concepts defined in a project's analysis and design stages with the actual implementation stage. <P>
In this article, I'll cover how DAN can represent relationships that occur in most problems. I'll also discuss functions as attributes and how DAN can represent iterator classes.<P>
<h3><a name="003d_000d">Static and Dynamic Relationships<a name="003d_000d"></h3><P>
Relationships can be static or dynamic. A static relationship is always true, even if there are no instances of the class to represent it. For example, class definitions declare a static relationship between the components of the class, even if the class is never instantiated. This is the &quot;definition relationship.&quot; The truth value of dynamic relationships is determined during execution. For example, Ted is married to Alice as long as they are not divorced. This example shows that analysis and design determines whether a relationship is static or dynamic. If the system design does not support divorce, then Ted being married to Alice is a static relationship.<P>
In a system that allows for divorce, marriage is a dynamic relationship. That is, the relationship must be checked at run time to see if Ted is married to Alice. Note that even here, a static relationship is needed to relate Ted to Alice. For instance, if each person has a <I>Spouse</I> attribute, you can ask if Ted's <I>Spouse</I> is Alice and Alice's <I>Spouse</I> is Ted. If they are, then Ted is married to Alice. Thus, there needs to be a static relationship such as spouse to evaluate a dynamic relationship such as marital status.<P>
<h3><a name="003d_000e">Representing Relationships<a name="003d_000e"></h3><P>
For the purposes of this discussion, I'll use declarative code to represent relationships. Declarative code is easy to write and easy to check for correctness, and it can be nonprocedural since most declarations may be reordered. The rest of this article uses people and car owners as examples.<P>
<h3><a name="003d_000f">Relationships as Functions<a name="003d_000f"></h3><P>
<a href="#003d_0016">Listing One</A> shows the function <I>owner()</I> that returns a nonzero value if the given person owns the given car model. The value returned by the <I>owner()</I> is determined at run time. <P>
<h3><a name="003d_0010">Nonmember versus Member Functions<a name="003d_0010"></h3><P>
Nonmember functions have the following benefits:<P>
<UL>
<li>They handle derived arguments fairly well.</li>
<li>They can be extended to <I>n</I>-ary relationships.</li>
<li>They express dynamic relationships well.</li>
<li>They handle noncommutative relationships well. (That is, they can distinguish between <I>a@b</I> and <I>b@a</I>, where <I>@</I> is a relationship between objects <I>a</I> and <I>b.</I>)</li>
<li>They can be overloaded to handle similar functions for different types; for instance, home owners or car owners.</li>
</UL>
A nonmember function can be overloaded, but cannot serve as a base for another function in the same sense that one class can serve as a base for another class. A member function of a base class, on the other hand, can be overridden by a derived-class member function. Further, if the member function is virtual, invoking the correct function depends on the type of instance for which the function is invoked. Thus, relationships represented by functions can be extended when using virtual-member functions. Another benefit of using member functions is that the implied first argument (that is, the <I>this</I> pointer) is not implicitly converted. This eases the problem of a function accepting either base- or derived-class instances as arguments.<P>
<h3><a name="003d_0011">Relationships as Classes<a name="003d_0011"></h3><P>
Classes can represent static relationships. For example, an <I>Owner</I> relationship between a <I>Person</I> and a <I>Car</I> is shown in <a href="#003d_0017">Listing Two</A> . <a href="#003d_0018">Listing Three</A> , however, shows that a <I>FordOwner</I> relationship can be defined as a class using composition and inheritance. <a href="#003d_0019">Listing Four</A> goes all the way and defines a <I>ChevOwner</I> only in terms of inheritance. In <a href="#003d_0019">Listing Four</A>, if a <I>Person</I> can be taxed and a <I>Chev</I> can get fixed, then you can get a <I>ChevOwner</I> fixed and taxed all at the same time. This shows that a class shares all the attributes of any one of its inherited parts. If the class represents a relationship and it inherits some of its parts, then what is true for any one of its inherited parts applies to the relationship as a whole. When a relationship like <I>Owner</I> inherits some of its attributes, those parts should make sense in toto. Thus, the previous example shows poor design. In contrast, <I>FilledCircle </I>is a useful derived class composed only of inherited base classes. It inherits all attributes from its two base classes: <I>FillPattern</I> and <I>Circle</I>.<P>
<h3><a name="003d_0012">Functions are Attributes<a name="003d_0012"></h3><P>
DAN states that a class is defined by its attributes. Consistent with this is the fact that member and friend functions of a class are also attributes of the class. <P>
For example, if an <I>Owner</I> has to renew his car license every year, an attribute <I>Renewed</I> can be defined. To check if this attribute is set, a member function <I>isRenewed</I> can be invoked, as in <a href="#003d_001a">Listing Five</A> . The function <I>isRenewed</I> could also be defined as an attribute class, <I>IsRenewed.</I> <a href="#003d_001b">Listing Six</A> shows that a dynamic relationship can be converted into a static relationship of some kind as represented by an attribute class.<P>
<h3><a name="003d_0013">Multiple Relationships<a name="003d_0013"></h3><P>
Relationships can be one-to-one, one-to-many, many-to-one, and many-to-many. Having illustrated in the previous relationships that a one-to-one relationship can be represented by a function or an attribute class, I'll extend this to the other relationships. It seems fairly obvious that a one-to-many relationship can be represented by a function member, where the class instance is the one and the argument list is the many. In the case of a nonmember function, the first argument is the one and the rest of the argument list is the many. (Neither of these two implementations imply that the order of evaluation of the arguments is the same as the order of the arguments.) In the case of the many-to-one and many-to-many relationships, things get more interesting.<P>
The many could be represented by a single class containing the many. This <I>many</I> class can have any form mentioned earlier in the car-and-owner example. That is, it could be either a complete composite of all the many or a mixture of inherited parts and parts composing the <I>many</I> class. It could also be a completely inherited class where all the parts of the many are inherited. The form of the class is problem dependent.<P>
In a many-to-one relationship, a member function can be used if the class instances represent the many and the one represents the single function argument.<P>
In a many-to-many relationship, a function member can have its class instance represent the first many, and the single arguments represent the second many. Nonmember functions have two arguments, each representing a many.<P>
In implementing one-to-many, many-to-one, and many-to-many relationships, the most important concept is that the many can be represented by a single class, so complete relationships can be represented by one class per relationship. <a href="#003d_001c">Listing Seven</A> shows classes representing each relationship. Pure composition was used in all these classes. A mixture of composition and inheritance might be more appropriate, depending on the problem.<P>
It is important to note that in any relationship, you must be able to encapsulate each side of the relationship into a class. For example, if a number of people own a number of cars, you have a group called <I>People</I> and a group called <I>Fleet</I>. <I>FleetOwners</I> is the resulting relationship. In the case of the one-to-one relationship called <I>CarOwner</I>, one side was encapsulated into one <I>Person</I> and the other side was encapsulated into a <I>Car</I>.<P>
<h3><a name="003d_0014">Iterators<a name="003d_0014"></h3><P>
The relationship classes I've just discussed often contain collections. Iterator classes are used to iterate over collections of objects. The rest of this article uses iterator classes to show how code normally thought to be procedural in nature can be written in a declarative fashion using DAN.<P>
Normally, an iterator class has <I>next()</I>, <I>prev()</I>, and <I>reset()</I> function members or their equivalent. For example, consider iterating over the collection <I>FleetOwner</I> so that a report is produced showing the list of cars owned in the collection <I>Fleet</I>. A classic C++ program using iterators would look something like <a href="#003d_001d">Listing Eight</A> ; <a href="#003d_001e">Listing Nine</A> describes a more DAN-like approach for the same example.<P>
<h3><a name="003d_0015">Declarative Code<a name="003d_0015"></h3><P>
In <a href="#003d_001e">Listing Nine</A>, I have written executable code when my intention was to illustrate writing declarative statements. To express this fragment of code in declarative format, we need to agree that all fragments have a basic form. The form consists of an initialization stage (<I>Init</I>), a main stage (<I>Body</I>), and a termination stage (<I>Term</I>)--any or all of which can be empty. Further, when two fragments are placed together, the result is also a fragment. As such, you can declare any fragment to be a class of the simplified form. <a href="#003d_001f">Listing Ten</A> , which illustrates this technique, intentionally contains no definition for the insert operator &lt;&lt; function. Combining code may be problem and language dependent. In a sequential machine, the termination stage of one fragment can be concatenated with the initialization stage of the next fragment. In a parallel machine, all initialization stages may be executed in parallel. In a C++ program, there is a difference between static and dynamic data. Thus, initialization code would need to be subdivided in those two types of data before initialization could be performed. Regardless of these variations, <a href="#003d_0020">Listing Eleven</A> is true. Both <I>f1</I> and <I>p1</I> are statically defined fragments. This is consistent with languages like C++ that are static in nature. Languages like Lisp exhibit behavior like <I>f2</I> and <I>p2</I> that can only be evaluated at run time.<P>
<a href="#003d_0021">Listing Twelve</A> is a program in which strings of tokens serve as arguments to the <I>Init</I>, <I>Body</I>, and <I>Term</I> constructors. <a href="#003d_0021">Listing Twelve</A> is purely declarative in nature. The only sequencing rule is that everything must be defined before use.<P>
<P>
<h4><a name="003d_0016">Listing One <a name="003d_0016"></h4><pre>

Person ted(Ford);
int owner(Person&amp; p, Model m);
// ... 
if (owner(ted,Chevy)) // ...


</pre>
<h4><a name="003d_0017">Listing Two<a name="003d_0017"></h4><pre>
class Person { };
class Car { };
class Owner {
  Person p; // part 1
  Car   c;  // part 2
};


</pre>
<h4><a name="003d_0018">Listing Three<a name="003d_0018"></h4><pre>
class Ford : public Car { };
class FordOwner : public Person
{
  Ford f;
};


</pre>
<h4><a name="003d_0019">Listing Four<a name="003d_0019"></h4><pre>
class Person { };
class Chev { };
class ChevOwner : 
  public Person, 
  public Chev
{
};


</pre>
<h4><a name="003d_001a">Listing Five<a name="003d_001a"></h4><pre>
int isRenewed() 
  { return Renewed(*this)==1; }
// . . .
Owner o;
// . . .
if (o.isRenewed()) // . . .


</pre>
<h4><a name="003d_001b">Listing Six<a name="003d_001b"></h4><pre>
#include &lt;iostream.h&gt;
#include &lt;string.h&gt;
class Renewed {
  int r;
public:
  Renewed(const int rr=0)
     { r = rr; }
  operator int() const
     { return r; }
};
class Car { };
class Person {
  char *n;
public:
  Person(const char *nn=&quot;&quot;)
     { strcpy(n,nn); }
  friend ostream&amp; operator &lt;&lt;
       (ostream&amp; os, Person&amp; p)
     { os &lt;&lt; p.n; }
};
 class Owner : public Person
{
  Car c;
  Renewed r;
public:
  Owner(const char *n) :
     Person(n) { }
  operator Renewed() const
     { return r; }
  Owner&amp; operator &lt;&lt;
       (const Renewed&amp; rr)
     { r = rr; return *this; }
};
class IsRenewed {
  Renewed r;
public:
  IsRenewed(const Owner&amp; o)
     { r = Renewed(o); }
  operator int() const
     { return r; }
};
int main()
{
  Owner owner(&quot;Ted&quot;);
  owner &lt;&lt; Renewed(1);
  if (IsRenewed(owner))
     cout &lt;&lt; Person(owner)
         &lt;&lt; &quot; has renewed\n&quot;;
  return 0;
}


</pre>
<h4><a name="003d_001c">Listing Seven<a name="003d_001c"></h4><pre>
class Person { };
class Car { };
class People   // any # of people
{
  Person **pp;
};
class Fleet    // any # of cars
{
  Car **cp; 
};
// 1:1 relationship of CarOwner
class CarOwner
{
  Person p;
  Car c;
};
// 1:m relationship of one person 
// owning any number of cars
 class FleetOwner
{
  Person p; // one person
  Fleet f;     // many cars
};
// m:1 relationship of a group of people
// owning one Car
class TaxiCoop
{
  People p; // many people
  Car cp;   // one car
};
// m:m relationship of many cars
// owned by many people
class FleetOwners
{
  People p; // many people
  Fleet f;     // many cars
};


</pre>
<h4><a name="003d_001d">Listing Eight<a name="003d_001d"></h4><pre>
class FleetOwner
{
  friend class FOIter;
  Person p;
  Fleet f;
};
class FOIter
{
  int status;  // =0 if empty
  CurrElem c;  // save cur elem
public:
  FOIter(FleetOwner&amp; fo);
  int next();  // =0 at end
  int prev();  // =0 at start
  void reset();
  friend ostream&amp; operator &lt;&lt;
     (ostream&amp; os, FOIter&amp; foi)
     { return os &lt;&lt; foi.c; }
};
int main()
{
  FleetOwner fo;
  FOIter foI(fo);
  foI.reset();
  while(foI.next())
     cout &lt;&lt; foI &lt;&lt; endl;
  return 0;
}


</pre>
<h4><a name="003d_001e">Listing Nine<a name="003d_001e"></h4><pre>
class FleetOwner
{
  friend class FOIter;
  Person p;
  Fleet f;
};
class Next { };
class Prev { };
class Reset { };
class CurrElem
{
public:
  friend ostream&amp; operator &lt;&lt;
     (ostream&amp; os, CurrElem&amp; c);
};
class FOIter{
  int status;  // =0 if empty
  CurrElem c;  // save cur elem
public:
  FOIter(FleetOwner&amp; fo)
     { status = 0; }
  operator Next();
  operator Prev();
  operator Reset();
  operator int()
     { return status; }
  friend ostream&amp; operator &lt;&lt;
     (ostream&amp; os, FOIter&amp; foi)
       { return os &lt;&lt; foi.c; }
};
int main()
{
  FleetOwner fo;
  FOIter foI(fo);
  Reset(foI);
  while(Next(foI))
     cout &lt;&lt; foI &lt;&lt; endl;
  return 0;
}

class Code { };
class Init : public Code { };
class Body : public Code { };
class Term : public Code { };
class Fragment // order of parts
{           // in this class
  Init ii;     // determines the
  Body bb;     // order of
  Term tt;     // initialization
public:
  Fragment(Init i,Body b,Term t)
     : ii(i), bb(b), tt(t) { }
  Fragment() { }
  Fragment&amp; operator &lt;&lt;
     (Fragment&amp; f);
};


</pre>
<h4><a name="003d_001f">Listing Ten<a name="003d_001f"></h4><pre>
class Code { };
class Init : public Code { };
class Body : public Code { };
class Term : public Code { };
class Fragment // order of parts
{           // in this class
  Init ii;     // determines the
  Body bb;     // order of
  Term tt;     // initialization
public:
  Fragment(Init i,Body b,Term t)
     : ii(i), bb(b), tt(t) { }
  Fragment() { }
  Fragment&amp; operator &lt;&lt;
     (Fragment&amp; f);
};


</pre>
<h4><a name="003d_0020">Listing Eleven<a name="003d_0020"></h4><pre>
Init i1, i2;
Body b1, b2;
Term t1, t2;
Fragment f1(i1,b1,t1);
Fragment f2;

f2 &lt;&lt; f1;
Fragment p1(i2,b2,t2);
Fragment p2;

p2 &lt;&lt; f1 &lt;&lt; f2;


</pre>
<h4><a name="003d_0021">Listing Twelve<a name="003d_0021"></h4><pre>
Init i1(&quot;FleetOwner fo;
       FOIter foI(fo);
       &quot;);
Init i2(&quot;foI &lt;&lt; r;&quot;);
Body b2(&quot;while(Next(foI))
          cout &lt;&lt; foI &lt;&lt; endl;
       &quot;);
Term t1(&quot;return 0;&quot;);
Fragment f1(i2,b2,Term(&quot;&quot;));
Fragment program(i1,f1,t1);

</pre>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
