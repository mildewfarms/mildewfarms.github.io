<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>JAN95: Undocumented Features of PC Fortran Libraries</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Undocumented Features of PC Fortran Libraries<a name="0037_0006"></h1><P>
<h2><a name="0037_0004"><a name="0037_0000">Multilanguage vendors sometimes give you more for your money</h2><P>
<h3>Kenneth G. Hamilton</h3><P>
<p><i><a name="0037_0005"><a name="0037_0000">Ken has a PhD in physics from the University of California, San Diego and has used numerous Fortran compilers in the pursuit of solutions to problems in solid-state theory, numerical hydrodynamics, signal processing, and random-number generation. He can be contacted on CompuServe at 72727,177.</i></p><hr><P>
Language wars are bogus. When you think about it, computers don't really run any high-level language, they run machine code. A compiler is actually just an interface to the programmer, and once things get beyond the first pass or two, all languages start looking the same.<P>
Developers at DEC recognized this a number of years ago. As a result, the VAX came out with one common library (STARLET.OLB) supporting all of the languages. Some vendors of PC compilers are now starting down this path, so that language-support libraries often contain extra &quot;goodies&quot;--things for use with toolsets other than the one that you bought.<P>
<h3><a name="0037_0007">Cylindrical Bessel Functions<a name="0037_0007"></h3><P>
For example, Microsoft and Watcom both sell compilers for multiple languages, and at the moment, the Fortran customers are the lucky ones. At these companies, developers decided to support that language by taking the C library as a fundamental core, and then adding some modules to cover those requirements unique to Fortran.<P>
Consequently, those companies' Fortran customers already have several useful features spinning around on their hard disks. Probably the most interesting, from the perspective of a numerical analyst, are the cylindrical Bessel functions. Explicit functions are available for J0(x), Y0(x), J1(x), Y1(x), as well as for J<I>n</I>(x) and Y<I>n</I>(x), where <I>n</I> is a nonnegative integer order. All of these are provided only in DOUBLE PRECISION (REAL*8) form--there are no single-precision versions.<P>
<a href="#0037_000d">Listing One</A> is a program that exercises Microsoft's Bessel functions. Fortran compilers normally convert the names of external references to upper case. Therefore, I have used a series of INTERFACE statements to make the connection to the library elements, which have lowercase entry-point names that start with underscore characters. The declarations also allow the program to use more descriptive names (containing the character string &quot;BES&quot;) in the program itself.<P>
When executed, this program displays several values from the Bessel function of the first kind (J), for orders <I>n</I>=0, 1, 2, and 3. The values for the first two sets of numbers come from specific J0 and J1 functions, while the others are produced by the general-purpose function for J<I>n</I>.<P>
A PAUSE statement is used to keep the data from scrolling off the screen, and after a key press, the Bessel function of the second kind (Y) is displayed. Again, Y0, Y1, Y2, and Y3 are output, the first two from individual functions, and the second two from the generalized Y<I>n</I> routine.<P>
Watcom has the same features hidden inside its library, and the same program can be used, as long as the INTERFACE blocks are removed and replaced by the <I>c$pragma</I> declarations in <a href="#0037_000e">Listing Two</A> . In this case, the library members have entry-point names with trailing underscores, in addition to being in lower case, so the <I>pragma</I>s also perform a name conversion.<P>
Watcom users have these features available in both the 16- and 32-bit compilers; Microsoft customers can find the capabilities in the Powerstation compilers for MS-DOS and Windows NT.<P>
Those of little faith can compare the output from this program to the tables given in Chapter 9 of <I>Handbook of Mathematical Functions </I>(see &quot;References&quot;). It is a bit puzzling to me why these modules are standard in C libraries, but not in Fortran libraries: Fortran users--scientists and engineers--are the people most likely to have an application that involves Bessel functions. (For those readers who don't have an application handy right at this moment, Bessel functions are used in problems that involve oscillations with cylindrical symmetry: The normal modes of vibration of a drumhead, for example, are described in terms of the J<I>n</I> functions.)<P>
<h3><a name="0037_0008">Floor, Ceiling, and Hypot<a name="0037_0008"></h3><P>
The definition of Fortran-90 includes a requirement for FLOOR and CEILING functions that, given a REAL value, return the next-lower and next-higher integers. Both Microsoft and Watcom have already provided FLOOR and CEILING functions to their customers--they just didn't say so in the manuals.<P>
<a href="#0037_000f">Listing Three</A> shows a FLOOR and CEILING demonstrator. The only hitch is that, unlike the Fortran-90 definition, these two routines return DOUBLE PRECISION values, and require arguments of the same type. The demo program walks a variable from 4.2 to 6.1 in steps of 0.1, and shows what FLOOR and CEILING return for each of these values of the argument. Watcom users should replace the Microsoft INTERFACE declarations with the two <I>c$pragma</I> declarations in <a href="#0037_0010">Listing Four</A> .<P>
C libraries also usually include a function called <I>hypot</I> that computes the hypotenuse of a triangle, presumably for those who have forgotten Pythagoras' rule. This is readily accessible from both Fortrans, using the demonstration program in <a href="#0037_0011">Listing Five</A> ; the Watcom replacement for the INTERFACE block is given in <a href="#0037_0012">Listing Six</A> .<P>
<h3><a name="0037_0009">Character Operations<a name="0037_0009"></h3><P>
Because Fortran has traditionally been a batch-oriented language, its default I/O handling is built to process whole records. This is the most efficient method of transferring large amounts of data, as the inevitable word-by-word loop is pushed down as far as possible in the software, as close to the hardware as it can be. When running interactively, however, this usually means that it is necessary to press an Enter key before input data is turned over to a running program.<P>
This is a bit of a nuisance, and often programmers want an application to accept a single keypress without waiting for the Enter key. When running directly under DOS, it is always possible to execute an interrupt to perform such an operation, and higher-level environments (DOS extenders, Windows, Windows NT, OS/2) often claim to translate properly. (Then again, they may not--it's not the normal way of asking a big operating system for something.)<P>
Programs written in C can read and write single characters and can even push a character back into the input buffer to be read again. Since we have a copy of the C library in these Fortran packages, we can do this, too. We'll simply connect to the same system service routines as the C programs_.<P>
In <a href="#0037_0013">Listing Seven</A> , you can see a program for the Microsoft Powerstation compilers, in which a single character is read from the keyboard using the <I>getche</I> function, which echoes back to the screen. The <I>ungetch</I> function is then used to shove the character back into the keyboard input buffer, so that it can be read a second time by <I>getch</I>. Since <I>getch</I> does not echo the input to the screen, we then use <I>putch</I> to write it to the screen.<P>
<a href="#0037_0014">Listing Eight</A> contains the <I>c$pragma</I> declarations that should replace the INTERFACE blocks, for use with one of the Watcom Fortran compilers.<P>
C still handles characters as integers and arrays of integers, a bad habit picked up from old Fortran-66. Ever since the release of the ANSI-77 specification, however, Fortran programmers should have been using type CHARACTER variables. While it is still possible to use INTEGERs for character handling, I have inserted the CHAR() and ICHAR() explicit conversion functions in <a href="#0037_0013">Listing Seven</A>, whenever appropriate.<P>
If you are really just dealing with single characters, then it may be somewhat simpler to stay with INTEGERs in the processing. On the other hand, if you intend to use any of the CHARACTER-oriented routines in the Fortran library (such as INDEX()) to concatenate strings or manipulate substrings, then it makes sense to get these values converted as soon as possible.<P>
The C library also has a set of <I>is</I> functions, which can distinguish digits from letters, upper case from lower, and so on. These all have relatively straightforward names: <I>isalpha</I> reports whether or not a given character is a letter, for example.<P>
In the second half of <a href="#0037_0014">Listing Eight</A>, I have used some of these routines and written out messages with &quot;T&quot; or &quot;F,&quot; denoting which category the input character falls into. The <I>is</I> functions return zero if the condition is false and a nonzero value if the condition is true. I have coded in '.EQ.0' comparisons to produce officially correct LOGICAL values.<P>
I have used the INTERFACE (or <I>c$pragma</I>) declarations to give the Fortran side slightly more readable names. Thus <I>islower</I> becomes IS_LOWER (rather than implying anything negative about program speed) and <I>isupper</I> is converted to IS_UPPER (instead of trying to make you hungry).<P>
If a character is a lowercase letter, then there is a function that will convert it to upper; if it is already in upper case, then there is another that will shift it down. Depending upon the results of the upper- and lowercase tests, the sample program displays the opposite-case letter, using the <I>tolower</I> or <I>toupper</I> functions. These are also used in <a href="#0037_0013">Listing Seven</A>.<P>
Microsoft has provided wrappers for a few of these keyboard routines, so that their library function GETCHARQQ really connects to <I>getche</I>, and PEEKCHARQQ allows you to check if there is anything there beforehand. They don't provide wrappers for the nonechoing function <I>getch</I>, the <I>ungetch</I> reversal routine, or any of the other character-manipulation functions.<P>
It is theoretically possible to write through the C function <I>printf</I> but, since FORMAT is generally more powerful, I have not provided any examples of this. The adventuresome reader may find numerous other interesting items buried in the software.<P>
<h3><a name="0037_000a">Sorting<a name="0037_000a"></h3><P>
In its Powerstation compilers, Microsoft provides a wrapper for a <I>quicksort</I> routine. Watcom does not, however, even though its libraries (both 16- and 32-bit) include a <I>sort</I> module. Watcom users, wait no longer: The wrapper you need is in Listing Nine .<P>
Again, I have used a <I>c$pragma</I> declaration to specify how each argument should be passed to QSORT. The interface differs slightly between real- and protected-mode worlds, and so the source code makes use of conditional compilation, activated by the symbol <I>__386__</I> (which is automatically defined in Watcom's 32-bit compiler only).<P>
The <I>quicksort</I> routine itself requires, as arguments, the name of the array to sort, the number of elements in the array, the size of a single array member (in bytes), and a pointer to a comparison function. To show the versatility of the library routine, my sample program first sorts an INTEGER*2 array, and then a REAL*4 array. For each type of data, you must set up a comparison function (such as ICMPI or ICMPR) and declare it to be EXTERNAL. (This causes its entry-point address to be passed.)<P>
The actual calls to QSORT are in subroutines ISORT and RSORT, which insulate the call process from the main program. If you put ISORT and ICMPI themselves in a source file (with the <I>c$pragma</I>, of course), they can be treated as a black box: An application program could just call ISORT, oblivious to the whole ugly interface process. The same could be done with RSORT and ICMPR, giving a convenient wrapper for floating-point arrays. It should be quite straightforward for you to construct similar packages for other data types as needed using these examples.<P>
<h3><a name="0037_000b">Conclusion <a name="0037_000b"></h3><P>
I suspect that we will see more of the &quot;common library&quot; approach in PC software. Users of compilers from multilingual companies may wish to use a librarian utility to check for modules with interesting names. Here is a list of suggestions:<P>
<UL>
<li>Salford Software's FTN77 is delivered with a large, well-documented library (including a <I>sort</I>). Apparently, the compiler is itself written in Fortran, so the items that developers needed for that task have been written up for the customers to use as well, leaving little to be discovered. Salford's new FTN90, however, is mingled with a C++ compiler, so that many of the routines I described might work with it. </li>
<li>Programs compiled with Silicon Valley Software's Fortran compiler must be linked with that company's Pascal library; this should provide some different possibilities.</li>
<li>Borland customers may well find C things in the Pascal box and vice versa.</li>
</UL>
You never know, there may be free software already on your disk. Good luck and happy spelunking!<P>
<h3><a name="0037_000c">References<a name="0037_000c"></h3><P>
Abramowitz, Milton and Irene A. Stegun. <I>Handbook of Mathematical Functions. </I>Washington, D.C.: National Bureau of Standards, 1972. <P>
<P>
<h4><a name="0037_000d">Listing One<a name="0037_000d"></h4><pre>

      INTERFACE TO REAL*8 FUNCTION DBESJ0[C,ALIAS:&quot;__j0&quot;](X)
      real*8 x
      end
      INTERFACE TO REAL*8 FUNCTION DBESJ1[C,ALIAS:&quot;__j1&quot;](X)
      real*8 x
      end
      INTERFACE TO REAL*8 FUNCTION DBESY0[C,ALIAS:&quot;__y0&quot;](X)
      real*8 x
      end
      INTERFACE TO REAL*8 FUNCTION DBESY1[C,ALIAS:&quot;__y1&quot;](X)
      real*8 x
      end
      INTERFACE TO REAL*8 FUNCTION DBESJN[C,ALIAS:&quot;__jn&quot;](N,X)
      real*8 x
      integer*2 n
      end
      INTERFACE TO REAL*8 FUNCTION DBESYN[C,ALIAS:&quot;__yn&quot;](N,X)
      real*8 x
      integer*2 n
      end
      PROGRAM MBESSEL
      real*8 x,y,z,dbesj0,dbesj1,dbesy0,dbesy1,dbesjn,dbesyn
c
c     Bessel function demo
c     Kenneth G. Hamilton
c
      print 10
   10 format (1X/' Bessel functions of the first kind, orders 0 and 1')
      do i=0,10
        x=0.1D0*dfloat(i)
        y=dbesj0(x)
        z=dbesj1(x)
        print 20, x,y,z
   20   format (' X =',F5.2,', J0 =',1PD20.12,', J1 =',1PD20.12)
      enddo
c
      print 30
   30 format (1X/' Bessel functions of the first kind, orders 2 and 3')
      do i=0,10
        x=0.1D0*dfloat(i)
        y=dbesjn(2,x)
        z=dbesjn(3,x)
        print 40, x,y,z
   40   format (' X =',F5.2,', J2 =',1PD20.12,', J3 =',1PD20.12)
      enddo
      pause
c
      print 50
   50 format (1X/' Bessel functions of the second kind, orders 0 and 1')
      do i=1,10
        x=0.1D0*dfloat(i)
        y=dbesy0(x)
        z=dbesy1(x)
        print 60, x,y,z
   60   format (' X =',F5.2,', Y0 =',1PD20.12,', Y1 =',1PD20.12)
      enddo
c
      print 70
   70 format (1X/' Bessel functions of the second kind, orders 2 and 3')
      do i=1,10
        x=0.1D0*dfloat(i)
        y=dbesyn(2,x)
        z=dbesyn(3,x)
        print 80, x,y,z
   80   format (' X =',F5.2,', Y2 =',1PD20.12,', Y3 =',1PD20.12)
      enddo
c
      stop
      end



</pre>
<h4><a name="0037_000e">Listing Two<a name="0037_000e"></h4><pre>

c$pragma aux dbesj0 &quot;j0_&quot; parm (value*8)
c$pragma aux dbesj1 &quot;j1_&quot; parm (value*8)
c$pragma aux dbesjn &quot;jn_&quot; parm (value*2, value*8)
c$pragma aux dbesy0 &quot;y0_&quot; parm (value*8)
c$pragma aux dbesy1 &quot;y1_&quot; parm (value*8)
c$pragma aux dbesyn &quot;yn_&quot; parm (value*2, value*8)




</pre>
<h4><a name="0037_000f">Listing Three<a name="0037_000f"></h4><pre>

      INTERFACE TO REAL*8 FUNCTION FLOOR [C,ALIAS:&quot;_floor&quot;] (X)
      real*8 x
      end
      INTERFACE TO REAL*8 FUNCTION CEILING  [C,ALIAS:&quot;_ceil&quot;] (X)
      real*8 x
      end
      PROGRAM MFLOOR
      real*8 floor, ceiling
      real*8 t, tbelow, tabove
c
      do i=0,20
        t= 4.2D0 + 0.1D0*dfloat(i)
        tbelow = floor(t)
        tabove = ceiling(t)
        print 20, t, tbelow, tabove
   20   format (' T =',F5.2,', Below = ',F5.2,', Above = ',F5.2)
      enddo
c
      stop
      end
      


</pre>
<h4><a name="0037_0010">Listing Four<a name="0037_0010"></h4><pre>

c$pragma aux floor    &quot;floor_&quot; parm (value*8)
c$pragma aux ceiling  &quot;ceil_&quot;  parm (value*8)



</pre>
<h4><a name="0037_0011">Listing Five<a name="0037_0011"></h4><pre>

      INTERFACE TO REAL*8 FUNCTION HYPOT [C,ALIAS:&quot;__hypot&quot;] (X,Y)
      real*8 x, y
      end
      PROGRAM HYPE
      real*8 hypot
      real*8 a, b, c
c
      a = 3.D0
      b = 4.D0
      c = hypot(a,b)
      print *, 'a,b,c=',a,b,c
c
      stop
      end



</pre>
<h4><a name="0037_0012">Listing Six<a name="0037_0012"></h4><pre>

c$pragma aux hypot &quot;hypot_&quot; parm (value*8, value*8)



</pre>
<h4><a name="0037_0013">Listing Seven<a name="0037_0013"></h4><pre>

      INTERFACE TO INTEGER FUNCTION GETCH[C,ALIAS:&quot;__getch&quot;]()
      end
      INTERFACE TO INTEGER FUNCTION GETCHE[C,ALIAS:&quot;__getche&quot;]()
      end
      INTERFACE TO INTEGER FUNCTION PUTCH[C,ALIAS:&quot;__putch&quot;](IC)
      integer ic
      end
      INTERFACE TO INTEGER FUNCTION UNGETCH[C,ALIAS:&quot;__ungetch&quot;](IC)
      integer ic
      end
      INTERFACE TO INTEGER FUNCTION IS_ASCII[C,ALIAS:&quot;___isascii&quot;](IC)
      integer ic
      end
      INTERFACE TO INTEGER FUNCTION IS_ALNUM[C,ALIAS:&quot;_isalnum&quot;](IC)
      integer ic
      end
      INTERFACE TO INTEGER FUNCTION IS_ALPHA[C,ALIAS:&quot;_isalpha&quot;](IC)
      integer ic
      end
      INTERFACE TO INTEGER FUNCTION IS_CNTRL[C,ALIAS:&quot;_iscntrl&quot;](IC)
      integer ic
      end
      INTERFACE TO INTEGER FUNCTION IS_DIGIT[C,ALIAS:&quot;_isdigit&quot;](IC)
      integer ic
      end
      INTERFACE TO INTEGER FUNCTION IS_LOWER[C,ALIAS:&quot;_islower&quot;](IC)
      integer ic
      end
      INTERFACE TO INTEGER FUNCTION IS_PUNCT[C,ALIAS:&quot;_ispunct&quot;](IC)
      integer ic
      end
      INTERFACE TO INTEGER FUNCTION IS_SPACE[C,ALIAS:&quot;_isspace&quot;](IC)
      integer ic
      end
      INTERFACE TO INTEGER FUNCTION IS_UPPER[C,ALIAS:&quot;_isupper&quot;](IC)
      integer ic
      end
      INTERFACE TO INTEGER FUNCTION IS_XDIGIT[C,ALIAS:&quot;_isxdigit&quot;](IC)
      integer ic
      end
      INTERFACE TO INTEGER FUNCTION TO_LOWER[C,ALIAS:&quot;_tolower&quot;](IC)
      integer ic
      end
      INTERFACE TO INTEGER FUNCTION TO_UPPER[C,ALIAS:&quot;_toupper&quot;](IC)
      integer ic
      end
      PROGRAM CHARS
      implicit integer*4 (i-n)
      integer getch, getche, putch, ungetch
      integer is_ascii, is_alnum, is_alpha, is_cntrl, is_digit
      integer is_lower, is_punct, is_space, is_upper, is_xdigit
      integer to_lower, to_upper
      logical l_lower, l_upper
      character*1 c1, c2
c
c     Demonstration of C routines available in the Fortran library
c     Kenneth G. Hamilton
c
c     Perform console I/O using a single character
c
      c1 = char(getche())               ! Read one character, with echo
      print 10, ichar(c1)               ! Tell us what it is
   10 format (1X/' Character value is ',Z2,'(hex)')
      istat = ungetch(ichar(c1))        ! Put the character back
c
      c2 = char(getch())                ! Reread the &quot;ungotten&quot; character
      print 20                          ! And it it ...
   20 format (1X/' Reread character is:',$)
      istat = putch(ichar(c2))          ! this character!
c
c     What are the properties of the character?
c
      if (is_ascii(ichar(c2)).eq.0) then
        print 30                        ! This is not a good character
   30   format (1X/' The character is non-ASCII')
        stop
      endif
      print 40
   40 format (1X/' The character is in the ASCII set')
c
      print 50, 'Alphanumeric', (is_alnum(ichar(c2)).ne.0)
      print 50, 'Control', (is_cntrl(ichar(c2)).ne.0)
      print 50, 'Digit', (is_digit(ichar(c2)).ne.0)
      print 50, 'Hex Digit', (is_xdigit(ichar(c2)).ne.0)
      print 50, 'Punctuation', (is_punct(ichar(c2)).ne.0)
      print 50, 'White Space', (is_space(ichar(c2)).ne.0)
   50 format (1X,A15,'?',2X,L5)
c
      print 50, 'Alphabetic', (is_alpha(ichar(c2)).ne.0)
c
      l_lower = (is_lower(ichar(c2)).ne.0)      ! .TRUE. if lower case
      print 50, 'Lower Case', l_lower
      if (l_lower) print 60, char(to_upper(ichar(c2)))
   60 format (6X,'(Upper case equivalent is &quot;',A1,'&quot;)')
c
      l_upper = (is_upper(ichar(c2)).ne.0)      ! .TRUE. if upper case
      print 50, 'Upper Case', l_upper
      if (l_upper) print 70, char(to_lower(ichar(c2)))
   70 format (6X,'(Lower case equivalent is &quot;',A1,'&quot;)')
c
      stop
      end



</pre>
<h4><a name="0037_0014">Listing Eight<a name="0037_0014"></h4><pre>

c$pragma aux getch     &quot;getch_&quot;    parm ()
c$pragma aux getche    &quot;getche_&quot;   parm ()
c$pragma aux putch     &quot;putch_&quot;    parm (value*4)
c$pragma aux ungetch   &quot;ungetch_&quot;  parm (value*4)
c$pragma aux is_ascii  &quot;isascii_&quot;  parm (value*4)
c$pragma aux is_alnum  &quot;isalnum_&quot;  parm (value*4)
c$pragma aux is_alpha  &quot;isalpha_&quot;  parm (value*4)
c$pragma aux is_cntrl  &quot;iscntrl_&quot;  parm (value*4)
c$pragma aux is_digit  &quot;isdigit_&quot;  parm (value*4)
c$pragma aux is_lower  &quot;islower_&quot;  parm (value*4)
c$pragma aux is_punct  &quot;ispunct_&quot;  parm (value*4)
c$pragma aux is_space  &quot;isspace_&quot;  parm (value*4)
c$pragma aux is_upper  &quot;isupper_&quot;  parm (value*4)
c$pragma aux is_xdigit &quot;isxdigit_&quot; parm (value*4)
c$pragma aux to_lower  &quot;tolower_&quot;  parm (value*4)
c$pragma aux to_upper  &quot;toupper_&quot;  parm (value*4)


</pre>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
