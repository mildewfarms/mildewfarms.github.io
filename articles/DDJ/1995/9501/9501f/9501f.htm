<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>JAN95: The RC5 Encryption Algorithm</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>The RC5 Encryption Algorithm<a name="003f_000e"></h1><P>
<h2><a name="003f_000c"><a name="003f_0000">A fast, symmetric block cipher that may replace DES</h2><P>
<h3>Ronald L. Rivest</h3><P>
<p><i><a name="003f_000d"><a name="003f_0000">Ron is associate director of the MIT Laboratory for Computer Science, a coinventor of the RSA public-key cryptosystem, and a cofounder of RSA Data Security Inc. He can be contacted at rivest@theory.lcs.mit.edu. RC5 and RSA-RC5 are trademarks of RSA Data Security Inc. Patent pending.</i></p><hr><P>
The RC5 encryption algorithm is a fast, symmetric block cipher suitable for hardware or software implementations. A novel feature of RC5 is the heavy use of data-dependent rotations. RC5 has a variable-length secret key, providing flexibility in its security level.<P>
RC5 is a parameterized algorithm, and a particular RC5 algorithm is designated as <I>RC5-w/r/b</I>. The parameters are as follows:<P>
<UL>
<li><I>w</I> is the word size, in bits. The standard value is 32 bits; allowable values are 16, 32, and 64. RC5 encrypts two-word blocks: plaintext and ciphertext blocks are each 2<I>w</I> bits long.</li>
<li><I>r </I>is the number of rounds. Allowable values are 0, 1_255.</li>
<li>The number of bytes in the secret key <I>K</I>. Allowable values of <I>b</I> are 0, 1_255.</li>
</UL>
RC5 uses an &quot;expanded key table,&quot; <I>S</I>, derived from the user's supplied secret key <I>K</I>. The size <I>t</I> of table <I>S</I> depends on the number <I>r</I> of rounds: <I>S</I> has <I>t=2(r+1)</I> words.<P>
RC5 is not intended to be secure for all possible parameter values. On the other hand, choosing the maximum parameter values would be overkill for most applications.<P>
We provide a variety of parameter settings so that users may select an encryption algorithm whose security and speed are optimized for their application, while providing an evolutionary path for adjusting their parameters as necessary in the future.<P>
For example, RC5-32/16/7 is an RC5 algorithm with the number of rounds and the length of key equivalent to DES. Unlike unparameterized DES, however, an RC5 user can upgrade the choice for a DES replacement to an 80-bit key by moving to RC5-32/16/10. <P>
As technology improves, and as the true strength of RC5 algorithms becomes better understood through analysis, the most appropriate parameters can be chosen. We propose RC5-32/12/16 as providing a &quot;nominal&quot; choice of parameters. Further analysis is needed to analyze the security of this choice.<P>
<h3><a name="003f_000f">Overview of the Algorithm<a name="003f_000f"></h3><P>
RC5 consists of three algorithms, one each for key expansion, encryption, and decryption. These algorithms use the following three primitive operations (and their inverses).<P>
<UL>
<li>Two's complement addition of words, denoted by &quot;+&quot;. This is modulo-2<SUP><I>w</I></SUP> addition. </li>
<li>Bit-wise exclusive-OR of words, denoted by <img src="xor12.gif" alt="xor">. </li>
<li>A left-rotation (or &quot;left-spin&quot;) of words: the rotation of word <I>x</I> left by <I>y</I> bits is denoted <I>x &lt;&lt;&lt; y</I>. Only the lg(<I>w</I>) low-order bits of <I>y</I> are used to determine the rotation amount, so that <I>y</I> is interpreted modulo <I>w</I>. </li>
</UL>
The key-expansion routine expands the user's key <I>K</I> to fill the expanded key array <I>S</I>, so <I>S</I> resembles an array of <I>t</I> random binary words determined by the user's secret key <I>K</I>. The array <I>S</I> is first initialized using a linear congruential generator modulo 2<SUP><I>w</I></SUP> determined by some &quot;magic constants.&quot; Then, <I>S</I> is mixed with the secret key <I>K</I> in three passes by both the + and &lt;&lt;&lt; operations.<P>
The key-expansion function has a certain amount of &quot;one-wayness&quot;: It is not so easy to determine <I>K</I> from <I>S</I>. <P>
For encryption, we assume that the input block is given in two <I>w</I>-bit registers, <I>A</I> and <I>B</I>, and the ouput is also placed in the registers <I>A</I> and <I>B</I>. <a href="19950041.htm">Example 1</A> is a pseudocode version of the encryption algorithm. The output is in the registers <I>A</I> and <I>B</I>. The decryption routine is easily derived from the encryption routine.<P>
<h3><a name="003f_0010">Speed and Security<a name="003f_0010"></h3><P>
The encryption algorithm is very compact, and can be coded efficiently in assembly language on most processors. The table <I>S</I> is accessed sequentially, minimizing issues of cache size. The RC5 encryption speeds obtainable are yet to be fully determined. For RC5-32/12/16 on a 90-MHz Pentium, a preliminary C++ implementation compiled with the Borland C++ compiler (in 16-bit mode) performs a key setup in 220 <img src="mu12.gif" alt="mu">sec and performs an encryption in 22 <img src="mu12.gif" alt="mu">sec (equivalent to 360,000 bytes/sec). These timings can presumably be improved by more than an order of magnitude using a 32-bit compiler and/or assembly language--an assembly-language routine for the 486 can perform each round in eight instructions.<P>
A distinguishing feature of RC5 is its heavy use of data-dependent rotations--the amount of rotation performed is dependent on the input data, and is not predetermined.<P>
The use of variable rotations should help defeat differential and linear cryptanalysis since bits are rotated to &quot;random&quot; positions in each round. <P>
I invite the reader to help determine the strength of RC5.<P>
<h3><a name="003f_0011">Acknowledgments<a name="003f_0011"></h3><P>
I'd like to thank Burt Kaliski, Lisa Yin, Paul Kocher, and everyone else at RSA Laboratories for their comments and constructive criticism.<P>
<h3><a name="003f_0012">References<a name="003f_0012"></h3><P>
Biham, E. and A. Shamir. <I>A Differential Cryptanalysis of the Data Encryption Standard</I>. Berlin: Springer-Verlag, 1993.<P>
Matsui, Mitsuru. &quot;The First Experimental Cryptanalysis of the Data Encryption Standard&quot; in <I>Proceedings CRYPTO '93</I>. Berlin: Springer, 1994.<P>
<a href="19950042.htm">Example 1</A>  Pseudocode of RC5 encryption algorithm.

<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
