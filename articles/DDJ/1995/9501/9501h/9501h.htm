<HTML>
<META NAME="year" CONTENT="1995">

<HEAD>
<TITLE>JAN95: Remote Network Printing</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Remote Network Printing<a name="0052_0012"></h1><P>
<h2><a name="0052_0010"><a name="0052_0000">Using the Windows Sockets API to create a UNIX-like daemon</h2><P>
<h3>Zongnan H. Lu</h3><P>
<p><i><a name="0052_0011"><a name="0052_0000">Henry is a systems analyst for the Mental Health Research Institute at the University of Michigan. He can be contacted at henry.lu@med.umich.edu.</i></p><hr><P>
In today's world of TCP/IP-based heterogeneous networks, it is increasingly common to find UNIX workstations and PCs linked and working together. Just as common in many of these network models are multiple printers and plotters residing on PC-based Novell NetWare or Banyan VINES networks, while printers directly attached to UNIX workstations are few and far between. This is particularly ironic since many distributed applications that use client/server databases reside on the UNIX side of the net because of its better performance, greater storage capacity, and multiuser/multitasking features. Consequently, various daily, monthly, and yearly reports created on the server typically wait for system administrators to print them out. On the other hand, PC networks which let you print files through shared printer queues are rarely fully utilized, particularly in the late night or early morning hours. Clearly, a solution to the printing bottleneck is to move the files from the UNIX to the PC side of the network to make the most efficient use of printing capabilities.<P>
One way of doing this is to use FTP to download files to a local PC, then send them to a printer on the PC's network. Applications that implement standard UNIX network utilities such as lpd (line-printer daemon) make it possible for all files on UNIX 4.3BSD-based workstations to be automatically sent to printers on a PC network system at any time. In this article, I'll present an lpd server implemented for the PC that does just this. This PC lpd runs under Windows and is based on the Windows Sockets API.<P>
<h3><a name="0052_0013">Using the Windows Sockets API<a name="0052_0013"></h3><P>
Because of the differences between UNIX 4.3BSD and Windows internals and file structures, there are two basic ways to build a PC-based lpd server. In the first approach, you write two programs--one running on a UNIX workstation as a client that collects and sends files to a PC--and the other running as a server, sitting on the PC, receiving files from UNIX, and sending them to a shared printer. In this scheme, the client program has to be installed on all UNIX workstations which need remote printers, and somewhat duplicates existing UNIX-standard network programs. <P>
A second approach, which I implement here, is to use the standard lpd program as a client program on UNIX workstations, then write a server program for the PC. This approach mirrors a common usage of lpd whereby the program runs as both a printer server and client to receive files from a user's print command (lp or lpr). The program then sends files to an attached or remote printer connected to another UNIX workstation. The advantage of this approach is its portability and simplicity. The program I wrote that does this is called &quot;winlpd&quot; and is written in Microsoft Visual C/C++ using the Windows Sockets API, WINSOCK.DLL.<P>
The winlpd program handles four messages from the UNIX lpd: receiving a job; listing the queue, short form; listing the queue, long form; and canceling jobs from the queue. Since all files received by winlpd will be sent to a printer and then immediately deleted, winlpd does nothing but acknowledge when it gets the listing and canceling messages. On the UNIX side, the remote host must be set in the file /etc/hosts (or /etc/hosts.equiv or /etc/hosts.lpd; refer to <I>UNIX Network Programming,</I> by W. Richard Stevens, Prentice Hall, 1990) and in the file /etc/printcap. This file defines a mapping of symbolic printer names into physical device names, along with a complete specification of the printer's capabilities. If a remote PC's printer name is different from the UNIX printer name, the remote PC's printer name must be specified in the file /etc/printcap. In the local PC PRINTCAP file, I only specify symbolic printer names and their spooler directories. <a href="#0052_001a">Listing One</A> is winlpd.cpp, and <a href="#0052_001b">Listing Two</A> is mainfrm.cpp. Other required files, including winlpvw.cpp, the <I>include </I>files, and other Visual C++ standard files are provided electronically; see &quot;Availability,&quot; page 3.<P>
To call functions in the WINSOCK.DLL, winlpd first loads the DLL and all necessary functions by calling <I>openLib()</I> in the constructor of class <I>CWinlpdApp</I>. If there is a failure, the program terminates. The library is closed in the destructor of class <I>CWinlpdApp</I> when the program is terminated; see <a href="#0052_001a">Listing One</A>. <P>
The winlpd menu selection is implemented as one that can be toggled Off/On. A global flag, <I>stop_lpd</I>, is set by Close in the system menu, and Start lpd and End lpd in the lpd menu. As soon as Start lpd is selected, the server is active and accepts connections by calling functions <I>socket()</I>, <I>bind()</I>, <I>listen()</I>, and <I>select()</I>. When the function <I>stop_lpd</I> is set to STOP_LOCK, the menu items Start lpd and Close are grayed out. To stop the server, the menu item End lpd must be selected, which sets <I>stop_lpd</I> to STOP_UNLOCK. The program sets the <I>select()</I> function to five seconds to wait for any incoming connections. After five seconds it checks the value of flag <I>stop_lpd</I>. The server is stopped if <I>stop_lpd</I> is not set to STOP_LOCK. Calling <I>select()</I> again or accepting a connection is dependent upon the value returned from <I>select()</I>. This process guarantees a complete job for the server and closes all sockets and the DLL; see <a href="#0052_001b">Listing Two</A>.<P>
When a connection is established, the <I>doit()</I> function is called (see the file winlpvw.cpp, available electronically). If remote files are ready to be received, the following occurs: <P>
<OL>
<LI>The Winlpd selection finds a printer as required by the remote host in the file PRINTCAP. It does this by calling <I>pgetent()</I> in <I>recvjob()</I> and then <I>readjob()</I>.</LI>
<LI>The <I>chksize()</I> function is called to ensure that disk space is available to hold the incoming file. The <I>readfile()</I> function is called to download the file. </LI>
<LI>The <I>mapfilename()</I> function (in <I>readfile()</I>) is invoked to get a PC's filename because the remote filename is often longer than eight characters. </LI>
<LI>The <I>printjob()</I> function (in <I>recvjob()</I>) is called when all files have been received for the current job. </LI>
<LI>Files specified in <I>printit()</I> are sent to <I>print_lp()</I> if a line printer is required, or to <I>print_lsr()</I> if a laser printer is required. Before printing, the NetWare Capture_ command is called in <I>printjob()</I> to capture the specified printer queue. </LI>
<LI>If there is a failure on either side during the transaction, all of the job's unprinted files are deleted by <I>rcleanup()</I> (in <I>readjob()</I>), while the remaining files continue to be received.</LI>
</OL>
The <I>moveprintf()</I> and <I>strfwrite()</I> functions are called by <I>print_lsr()</I> for laser printers. If fancy characters, different sizes, or special-text formats are required, these functions will need to be modified accordingly. <P>
To send files from a UNIX workstation, use the commands lpr or lp; see <a href="#0052_0016">Example 1</A>.<P>
<h3><a name="0052_0014">Putting It All Together: An Example<a name="0052_0014"></h3><P>
To illustrate how to use winlpd, suppose that a database server is running on a UNIX workstation which has the host name &quot;dbhost&quot; and an IP address of 141.211.222.222. Further suppose that a report-creation process scheduled in a crontab produces two different report files--f1.rpt, sent to a line printer called &quot;netlp,&quot; and f2.rpt, to a laser printer called &quot;netlsr.&quot; Both printers are connected to a NetWare network with LAN WorkPlace for DOS installed. A PC on the network with IP address 141.211.111.11 and host name &quot;henry&quot; has the winlpd program running. With all this in place, there are three files you need to set properly: /etc/printcap, /etc/hosts, and /etc/services. On the UNIX side, two printer names are added to the file /etc/printcap; see <a href="#0052_0017">Example 2</A>, where <I>lp1</I> and <I>lp2</I> are symbolic printer names on the UNIX; <I>netlp</I> and <I>netlsr</I> are printer names on the PC server side, <I>rm</I> declares a remote host name or IP address, and <I>rp</I> is assigned a remote printer name (netlp or netlsr). For the network communication, the PC's IP address should be added to the file /etc/hosts as <I>141.211.111.11 pclpsrv,</I> where <I>pclpsrv</I> is the PC's host name (we assume that the UNIX host name is already in /etc/hosts); an entry &quot;printer 515/tcp spooler&quot; must appear in the file /etc/services.<P>
On the NetWare side, both the UNIX and PC host names (dbhost and pclpsrv, respectively) and their IP addresses, 141.211.222.22 and 141.211.111.11, should be set in the file HOSTS, which is located in the network TCP directory, ..\TCP\HOSTS. Additionally, entry &quot;printer 515/tcp spooler&quot; must be in the ..\TCP\SERVICES file. For printers on the Novell network, the ..\TCP\PRINTCAP file must be created; see <a href="#0052_0018">Example 3</A>. Note that the backslash (\) is treated as a symbol of continuation in a regular UNIX printcap file. With PCs, however, a backslash is a root directory or a separator of subdirectories. Winlpd eliminates this ambiguity by setting a syntax that each line has only one item; a backslash is viewed as a continuation character if the backslash is at the end of the line; otherwise it is viewed as a normal character.<P>
When all settings are complete, winlpd is executed on the PC. As soon as a report file is ready on the UNIX workstation, the command <I>lpr --Plp1 f1.rpt</I> or <I>lp --dlp1 f1.rpt</I> is invoked to send the f1.rpt file to the remote printer netlp. Similarly, <I>lpr --Plp2 f2.rpt</I> or <I>lp --dlp2 f2.rpt</I> send as f2.rpt to the printer netlsr on the PC Novell network. If your crontab file looks like <a href="#0052_0019">Example 4(a)</A>, the reportwiter.sch file should include the commands in <a href="#0052_0019">Example 4(b)</A>.<P>
<h3><a name="0052_0015">Conclusion<a name="0052_0015"></h3><P>
Winlpd can be used not only for remote printing, but also for other remote activities such as sending faxes, transferring files, and the like. All you have to do is put files into appropriate directories shared with other programs for different tasks. For performance and flexibility, winlpd can be implemented as a server that only receives files. If you decide to use it this way, you'll probably need to rewrite <I>displayq()</I>, <I>rmjob()</I>, while disregarding <I>printjob()</I>, <I>printit()</I>, <I>print_lp()</I>, <I>print_lsr()</I>, <I>moveprintf()</I>, and <I>strfwrite()</I>.<P>
<h4><a name="0052_0016"><B>Example 1:</B> Sending files using the UNIX lpr and lp commands.<a name="0052_0016"></h4><P>
<pre>lp -dlp1 filename1, filename2 ...
lpr -Plp1 filename1, filename2 ...</pre><P>
<h4><a name="0052_0017"><B>Example 2:</B> Setting printer names on the UNIX side of the net.<a name="0052_0017"></h4><P>
<pre>(a)
lp1|network line printer:\
  :rm=141.211.111.11:rp=netlp:
lp2|network laser printer:\
  :rm=141.211.111.11:rp=netlsr:
(b)
lp1|network line printer:\
  :rm=pclpsrv:rp=netlp:
lp2|network laser printer:\
  :rm=pclpsrv:rp=netlsr:</pre><P>
<h4><a name="0052_0018"><B>Example 3:</B> Setting printers on the PC side of the net.<a name="0052_0018"></h4><P>
<pre>netlp:\
  :sd=C:\TMP\PRINTERS\NETLP:
netlsr:\
  :sd=C:\TMP\PRINTERS\NETLSR:</pre><P>
<h4><a name="0052_0019"><B>Example 4:</B> (a) Sample crontab-file contents; (b) commands for sample crontab file.<a name="0052_0019"></h4><P>
<pre>(a)
0 4 * * 1,2,3,4,5 /usr/henry
/reportwriter.sch
(b)
# run report creator program
/usr/henry/report_writer
# send file to PC server
lpr -Plp1 /usr/henry/f1.rpt
lpr -Plp2 /usr/henry/f2.rpt</pre><P>
<P>
<h4><a name="0052_001a">Listing One <a name="0052_001a"></h4><pre>
// winlpd.cpp : Defines the class behaviors for the application.

#include &quot;stdafx.h&quot;
#include &quot;winlpd.h&quot;

#include &quot;mainfrm.h&quot;
#include &quot;winlpdoc.h&quot;
#include &quot;winlpvw.h&quot;

#ifdef _DEBUG
#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
#endif

// CWinlpdApp
BEGIN_MESSAGE_MAP(CWinlpdApp, CWinApp)
   //{{AFX_MSG_MAP(CWinlpdApp)
   ON_COMMAND(ID_APP_ABOUT, OnAppAbout)
      // NOTE - the ClassWizard will add and remove mapping macros here.
      //    DO NOT EDIT what you see in these blocks of generated code !
   //}}AFX_MSG_MAP
   // Standard file based document commands
   ON_COMMAND(ID_FILE_NEW, CWinApp::OnFileNew)
   ON_COMMAND(ID_FILE_OPEN, CWinApp::OnFileOpen)
END_MESSAGE_MAP()

// CWinlpdApp construction
HINSTANCE m_hLibrary;
SOCKET (FAR PASCAL *lpfn_accept)(SOCKET, LPSOCKADDR, LPINT);
int (FAR PASCAL *lpfn_bind)(SOCKET, LPCSOCKADDR, int);
int (FAR PASCAL *lpfn_closesocket)(SOCKET);
int (FAR PASCAL *lpfn_err)(void);

LPHOSTENT (FAR PASCAL *lpfn_gethostbyaddr)(LPCSTR, int, int);
LPSERVENT (FAR PASCAL *lpfn_getservbyname)(LPCSTR, LPCSTR);

int (FAR PASCAL *lpfn_listen)(SOCKET, int);
int (FAR PASCAL *lpfn_recv)(SOCKET, LPCSTR, int, int);
int (FAR PASCAL *lpfn_select)(int, LPFD_SET, LPFD_SET, LPFD_SET, LPTIMEVAL);
int (FAR PASCAL *lpfn_send)(SOCKET, LPCSTR, int, int);
int (FAR PASCAL *lpfn_shutdown)(SOCKET, int);
SOCKET (FAR PASCAL *lpfn_socket)(int, int, int);
int (FAR PASCAL *lpfn_WSACleanup)(void);
int (FAR PASCAL *lpfn_WSACancelBlockingCall)(void);
int (FAR PASCAL *lpfn_WSAStartup)(WORD, LPWSADATA);
SOCKET finet;
CWinlpdApp::CWinlpdApp()
{
   // TODO: add construction code here,
   // Place all significant initialization in InitInstance
   finet = INVALID_SOCKET;
   if (!openLib())
      exit(0);
}
CWinlpdApp::~CWinlpdApp()
{
   // TODO: add destruction code here,
   closeLib();
}
// The one and only CWinlpdApp object
CWinlpdApp NEAR theApp;
// CWinlpdApp initialization
BOOL CWinlpdApp::InitInstance()
{
   // Standard initialization
   SetDialogBkColor();        // set dialog background color to gray
   LoadStdProfileSettings();  // Load standard INI file options
   // Register the application's document templates.  Document templates
   //  serve as the connection between documents, frame windows and views.
   AddDocTemplate(new CSingleDocTemplate(IDR_MAINFRAME,
         RUNTIME_CLASS(CWinlpdDoc),
         RUNTIME_CLASS(CMainFrame),     // main SDI frame window
         RUNTIME_CLASS(CWinlpdView)));
   // create a new (empty) document
   OnFileNew();
   return TRUE;
}
// CAboutDlg dialog used for App About
class CAboutDlg : public CDialog
{
public:
   CAboutDlg();
// Dialog Data
   //{{AFX_DATA(CAboutDlg)
   enum { IDD = IDD_ABOUTBOX };
   //}}AFX_DATA
// Implementation
protected:
   virtual void DoDataExchange(CDataExchange* pDX);   // DDX/DDV support
   //{{AFX_MSG(CAboutDlg)
      // No message handlers
   //}}AFX_MSG
   DECLARE_MESSAGE_MAP()
};
CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD)
{
   //{{AFX_DATA_INIT(CAboutDlg)
   //}}AFX_DATA_INIT
}
void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
   CDialog::DoDataExchange(pDX);
   //{{AFX_DATA_MAP(CAboutDlg)
   //}}AFX_DATA_MAP
}
BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)
   //{{AFX_MSG_MAP(CAboutDlg)
      // No message handlers
   //}}AFX_MSG_MAP
END_MESSAGE_MAP()
// App command to run the dialog
void CWinlpdApp::OnAppAbout()
{
   CAboutDlg aboutDlg;
   aboutDlg.DoModal();
}
// CWinlpdApp commands
#include &lt;io.h&gt;
/* closeLib() - closes sockets and DLL library */
void CWinlpdApp::closeLib()
{  
   int ret;
   if (finet != INVALID_SOCKET) {
      ret=(*lpfn_shutdown)(finet, 2);
      if (ret == SOCKET_ERROR) {
         ret=(*lpfn_err)();
         sprintf(m_err,&quot;shutdown failed, ret=%d&quot;, ret);
         AfxMessageBox(m_err);
      }
   }
   ret=(*lpfn_WSACleanup)();
   if (ret == SOCKET_ERROR) {
      ret=(*lpfn_err)();
      sprintf(m_err,&quot;WSACleanup failed, ret=%d&quot;, ret);
      AfxMessageBox(m_err);
   }
   FreeLibrary(m_hLibrary);
}
/* openLib() - opens DLL library and socket functions */
int  CWinlpdApp::openLib()
{
   int     ret;
   WORD    wvr;
   WSADATA wsad;

   if (_access(&quot;WINSOCK.DLL&quot;,0)) {
      AfxMessageBox(&quot;Need WINSOCK.DLL.&quot;);
      return 0;
   }
   /*               LOADING WINSOCK.DLL and FUNCTIONS              */
   if ((m_hLibrary = LoadLibrary(&quot;WINSOCK.DLL&quot;)) &lt;= HINSTANCE_ERROR)
   {
      AfxMessageBox(&quot;Can not load lib WINSOCK.DLL&quot;);
      return 0;
   }
   lpfn_WSACleanup=(int (FAR PASCAL*)(void))
      GetProcAddress(m_hLibrary, &quot;WSACleanup&quot;);
   if (lpfn_WSACleanup == NULL) {
      AfxMessageBox(&quot;GetProcAddress-WSACleanup failed&quot;);
      return 0;
   }
   wvr = (WORD)MAKEWORD(1,1);
   lpfn_WSAStartup=(int (FAR PASCAL*)(WORD, LPWSADATA))
      GetProcAddress(m_hLibrary, &quot;WSAStartup&quot;);
   if (lpfn_WSAStartup == NULL) {
      AfxMessageBox(&quot;GetProcAddress-WSAStartup failed&quot;);
      return 0;
   }
   lpfn_err=(int (FAR PASCAL*)(void))
      GetProcAddress(m_hLibrary, &quot;WSAGetLastError&quot;);
   if (lpfn_err == NULL) {
      AfxMessageBox(&quot;GetProcAddress-err failed&quot;);
      return 0 ;
   }
   lpfn_getservbyname=
      (struct servent FAR* (FAR PASCAL*)(LPCSTR,LPCSTR))
      GetProcAddress(m_hLibrary, &quot;getservbyname&quot;);
   if (lpfn_getservbyname == NULL) {
      AfxMessageBox(&quot;GetProcAddress-getservbyname failed&quot;);
      return 0;
   }
   lpfn_gethostbyaddr=
      (LPHOSTENT (FAR PASCAL*)(LPCSTR, int, int))
      GetProcAddress(m_hLibrary, &quot;gethostbyaddr&quot;);
   if (lpfn_gethostbyaddr == NULL) {
      AfxMessageBox(&quot;GetProcAddress-gethostbyaddr failed&quot;);
      return 0;
   }
   lpfn_socket=(SOCKET (FAR PASCAL*)(int, int, int))
      GetProcAddress(m_hLibrary, &quot;socket&quot;);
   if (lpfn_socket == NULL) {
      AfxMessageBox(&quot;GetProcAddress-socket failed&quot;);
      return 0;
   }
   lpfn_bind=(int (FAR PASCAL*)(SOCKET, LPCSOCKADDR, int))
      GetProcAddress(m_hLibrary, &quot;bind&quot;);
   if (lpfn_bind == NULL) {
      AfxMessageBox(&quot;GetProcAddress-bind failed&quot;);
      return 0;
   }
   lpfn_select=
      (int (FAR PASCAL*)(int, LPFD_SET, LPFD_SET, LPFD_SET, LPTIMEVAL))
      GetProcAddress(m_hLibrary, &quot;select&quot;);
   if (lpfn_select == NULL) {
      AfxMessageBox(&quot;GetProcAddress-select failed&quot;);
      return 0;
   }
   lpfn_listen=(int (FAR PASCAL*)(SOCKET, int))
      GetProcAddress(m_hLibrary, &quot;listen&quot;);
   if (lpfn_bind == NULL) {
      AfxMessageBox(&quot;GetProcAddress-listen failed&quot;);
      return 0;
   }
   lpfn_accept=
      (SOCKET (FAR PASCAL*)(SOCKET, LPSOCKADDR, LPINT))
      GetProcAddress(m_hLibrary, &quot;accept&quot;);
   if (lpfn_accept == NULL) {
      AfxMessageBox(&quot;GetProcAddress-accept failed&quot;);
      return 0;
   }
   lpfn_closesocket=(int (FAR PASCAL*)(SOCKET))
      GetProcAddress(m_hLibrary, &quot;closesocket&quot;);
   if (lpfn_closesocket == NULL) {
      AfxMessageBox(&quot;GetProcAddress-closesocket failed&quot;);
      return 0;
   }
   lpfn_shutdown=(int (FAR PASCAL*)(SOCKET, int))
      GetProcAddress(m_hLibrary, &quot;shutdown&quot;);
   if (lpfn_shutdown == NULL) {
      AfxMessageBox(&quot;GetProcAddress-shutdown failed&quot;);
      return 0;
   }
   lpfn_send=(int (FAR PASCAL*)(SOCKET, LPCSTR, int, int))
      GetProcAddress(m_hLibrary, &quot;send&quot;);
   if (lpfn_send == NULL) {
      AfxMessageBox(&quot;GetProcAddress-send failed&quot;);
      return 0;
   }
   lpfn_recv=(int (FAR PASCAL*)(SOCKET, LPCSTR, int, int))
      GetProcAddress(m_hLibrary, &quot;recv&quot;);
   if (lpfn_recv == NULL) {
      AfxMessageBox(&quot;GetProcAddress-recv failed&quot;);
      return 0;
   }
   ret=(*lpfn_WSAStartup)(wvr, &amp;wsad);
   if (ret != 0) {
      sprintf(m_err,&quot;WSAStartup failed, ret=%d&quot;, ret);
      AfxMessageBox(m_err);
      return 0;
   }
   return 1;
}


</pre>
<h4><a name="0052_001b">Listing Two<a name="0052_001b"></h4><pre>

// mainfrm.cpp : implementation of the CMainFrame class

#include &quot;stdafx.h&quot;
#include &quot;winlpd.h&quot;
#include &quot;mainfrm.h&quot;
#ifdef _DEBUG
#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
#endif
// CMainFrame
IMPLEMENT_DYNCREATE(CMainFrame, CFrameWnd)
BEGIN_MESSAGE_MAP(CMainFrame, CFrameWnd)
   //{{AFX_MSG_MAP(CMainFrame)
   ON_WM_INITMENUPOPUP()
   //}}AFX_MSG_MAP
END_MESSAGE_MAP()
// CMainFrame construction/destruction
int  stop_lpd;
CMainFrame::CMainFrame()
{
   // TODO: add member initialization code here
   stop_lpd = STOP_OK;
}
CMainFrame::~CMainFrame()
{
}
// CMainFrame message handlers
void CMainFrame::OnInitMenuPopup(CMenu* pPopupMenu, UINT nIndex, BOOL bSysMenu)
{
   CFrameWnd::OnInitMenuPopup(pPopupMenu, nIndex, bSysMenu);
   // TODO: Add your message handler code here
   if (bSysMenu == TRUE) {
      if (stop_lpd != STOP_OK)
         pPopupMenu-&gt;EnableMenuItem(6, MF_BYPOSITION | MF_GRAYED);
      else
         pPopupMenu-&gt;EnableMenuItem(6, MF_BYPOSITION | MF_ENABLED);
   }
}


</pre>
<HR><P>Copyright &copy; 1995, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
