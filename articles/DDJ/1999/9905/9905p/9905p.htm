<html><head><title>May99: Letters</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>Letters</h1><h3>Java Provider Update</h3><p>Dear <i>DDJ</i>,</p><p>The sample code included with my article, "The Java Provider Architecture" (<i>DDJ</i>, March 1999) was written using the Early Access release of the Java Cryptography Extension 1.2. I'd like to let readers know that, since the code was developed, a newer release of the JCE (Release Candidate 1) has been made available. Some of the minor changes and improvements made by RC1, most notably the change of the argument type of the constructor of class <i>PBEKeySpec</i> from <i>String</i> to <i>char[]</i> and the appearance of the additional methods <i>engineInit()</i> and <i>engineGetParameters()</i> in class <i>CipherSpi</i>, cause compile errors if you attempt to compile my code. To rectify this, simply add the two new methods to Enigma.java and make the appropriate change to the argument of the <i>PBEKeySpec</i> constructor in EnigmaTest .java.</p><p>Paul Tremblett</p><p>paul_tremblett@beechwood.com </p><h3>Better Late than Never</h3><p>Dear <i>DDJ</i>,</p><p>I am writing this, having just purchased the December 1998 issue of <i>DDJ</i>. As you can see, we're already into 1999, but that's not really my fault -- that's when the magazines get here.</p><p>The name D-Flat was originally stated as a relationship to C (the language you wrote it in, obviously), and a musical alternative to C sharp. "D flat is a difficult key to play in" was what I believe you wrote in at least one of your columns. I suppose you should call it a pun...I believe I still have most if not all of the original columns. I also managed to write some useful applications with it (all of which have now bit the dust thanks to Windoze).</p><p>So, do I win the invaluable (or was that valueless...) prize? (despite being the 1,527th respondent).</p><p>A.P. Madden</p><p>Australia</p><p>amadden@pcug.org.au </p><p><i>Al replies:</i> Andrew, you might win the prize for the entry from the most distant location. Although, in this Internet era, that's a dubious distinction. I don't think I ever said that D<sup>b</sup> is a difficult key, but the rest of your memory is accurate.</p><h3>CD Authoring</h3><p>Dear <i>DDJ</i>,</p><p>In the article, "A Java Applet Search Engine" (<i>DDJ</i>, February 1999), Tim Kientzle complained that he wasn't able to find any CD mastering package capable of generating hybrid ISO/RockRidge/Joliet/HFS (DOS/ Unix/Windows/Macintosh) CD ROMs. I am happy to say that his wish has been granted: mkhybrid, written by James Pearson (j.pearson@ge.ucl.ac.uk) is the program Tim was looking for. It is freely available in the source-code form at http://www.ge.ucl .ac.uk/~jcpearso/mkhybrid.html. Several other free CD mastering tools (including CD burning software, digital audio extraction tools, GUIs, and much more) are listed at the CD building project for UNIX (http:// www.fokus.gmd.de/research/cc/glone/ employees/joerg.schilling/private/cdb.html). Taken together, these tools make for a nice CD mastering environment indeed.</p><p>Serguei Patchkovskii</p><p>patchkov@ucalgary.ca</p><h3>Full-Text Searching</h3><p>Dear <i>DDJ</i>,</p><p>Thanks to Tim Kientzle for his article "Full Text Searching in Perl" (<i>DDJ</i>, January 1999). <i>DDJ</i> readers might be interested in being able to search the generated databases from PHP3 (http://www.php.net/), the popular web-server language. They can find scripts that I wrote to make this possible at http://www </p><p>.heddley.com/edd/php/search.html.</p><p>Unfortunately PHP doesn't guarantee Berkeley DB support so I created a GDBM version as well, which doesn't work as fast, for those whose PHP implementations didn't do DB (although there is some information on the page for how to recompile your PHP for DB support).</p><p>There are also a couple of other alterations for PHP in there that get around the fact that PHP doesn't support NUL in database keys, and neither does it have the pack/unpack functions from Perl.</p><p>Edd Dumbill</p><p>edd@heddley.com</p><p>Dear <i>DDJ</i></p><p>I enjoyed reading about Berkeley DB in "Full-Text Searching in Perl," by Tim Kientzle (<i>DDJ</i>, January 1999), but would like to respond to a few of the points Tim raised.</p><p>First, the performance and reliability problems that Tim reported were caused by using a several-year-old academic release of Berkeley DB. That version of the software has never been commercially supported and is known to have serious flaws. The current Berkeley DB release is API compatible with Tim's use, and suffers from none of the problems he listed.</p><p>Second, we have worked hard to make the current release easy to download and install. Regardless of the Perl module being used, we strongly encourage Perl developers to download and use the latest code.</p><p>Finally, while we have kept our interfaces intuitive and easy to use, Berkeley DB is not a "simple database." It provides the features that developers expect from high-end commercial offerings, including full transactional support, disaster recovery, hot backups, and scalability in both number of users and volume of data. Berkeley DB supports 100 GB databases in major commercial products just as easily as it does everyone's favorite Perl applications.</p><p>Michael A. Olson</p><p>Sleepycat Software</p><p>mao@sleepycat.com</p><p><i>Tim responds: </i>Thanks for your note, Michael. Unfortunately, the current Berkeley DB 2.X is not file compatible with the Berkeley DB 1.85 I used. Consequently, neither will it  work with the Java applet I presented in "A Java Applet Search Engine" (<i>DDJ</i>, February 1999). Interestingly, most of the problems I was experiencing disappeared when, thanks to a suggestion by Paul Marquess, I reduced the memory requirements of my Perl code. </p><h3>Taming C++</h3><p>Dear <i>DDJ</i>,</p><p>I enjoyed reading Al Stevens' "C Programming" column in the December 1998 issue of <i>DDJ</i>. I have been reading <i>DDJ</i> since another Al -- Al Williams -- was talking about "Roll Your Own DOS Extender" back in October 1990. Yes, I did give it a roll and enjoyed trying to use every security feature built into the 386 and finding out firsthand just why no one actually uses every security feature. Yes, like Al, I find research is important. I like to explore ideas and go deeply into software topic to find design inspiration.</p><p>As you might have guessed, I am a programmer and I am currently working for an organization in the financial services sector. There is a diverse mix of platforms and technologies, so I have plenty of variety, but most new development work is done in C and C++ and in which I have also had the most experience. I have worked on GUI application development for both Windows and OS/2 and find it very enjoyable. I think this is because it is both challenging and the results are visible, which is often not a programming outcome.</p><p>What interested me particularly about Al's column is that he is planning to embark on D-flat 2000 as I am currently working on a GUI application framework as a "research" project in my spare time. I'm calling my project "Classic" as it will be the culmination of all I have learned about GUI application programming, hence I hope worth preserving, plus the name contains "class," which is appropriate for an object-oriented design. Yes, I remember Al saying that D-Flat is the same as C-Sharp on the musical scale, hence a disguised way to get "C" in the name.</p><p>What struck a chord with me was Al's comment that "Recent forays into templates have convinced me that...templates are an ideal medium with which to express abstractions." I feel that it is essential to express abstractions clearly in one's code to combat the inevitable complexity that comes with developing significant applications. I agree that templates lend themselves readily to expression of abstractions. I have been particularly inspired in this regard by Jiri Soukup in his book <i>Taming C++: Pattern Classes and Persistence for Large Projects</i> (Addison-Wesley, 1994). He suggests ways to implement pattern classes, including using templates. I have taken some of these templates and developed them for use as a small foundation class library.</p><p>Taming C++ sums up my aspiration for the effect of using pattern classes in my application framework. I can clearly express the roles classes play and their relationships to each other. Up to now, such information always seems to disappear as implementation in code proceeds. </p><p>Currently Classic is a set of foundation classes and a tiny application that pops up a dialog box with two buttons and some static text. Not very exciting, but I like using the pattern class templates, and I think their potential is exciting. For example, I'm using a <i>Composite</i> class as a container for my menu bar, and it stores the menu items in a hierarchical structure that reflects the hierarchical menu structure. This is achieved in an unobtrusive way. I don't have to create any special functions or add any variables, the pattern behavior is acquired by simple inheritance.</p><p>Here is how I define class <i>menu_component</i>, from which I define <i>menu_item</i> and <i>popup_menu</i>:</p><blockquote><p>class menu_component : public class_tag&lt;menu_component&gt;</p><p> <b>...</b></p></blockquote><p></p><p>Here is how I define the container to hold all menu components:</p><blockquote><p>Composite&lt;popup_menu, menu_component&gt; 		           menu_composite;</p></blockquote><p>My adapted pattern classes are easier to use than the originals, but do suffer from some loss of performance. This is because I create the required infrastructure dynamically, while this is done in <i>Taming C++</i> statically, at compile time. However, I don't think the loss of performance will be significant, especially because I have optimized iteration, which would be the most common method of object navigation. Furthermore, I will be able to create a "pattern class development tool" for class modeling and design.</p><p>Anyway, I encourage Al to proceed with D-Flat 2000. I would really like to see what materializes. </p><p>Andrew Bowley </p><p>bowley@enternet.com.au</p><p><b>DDJ</b></p><HR><I>Copyright &copy; 1999, Dr. Dobb's Journal</I><BR>
</body></html>