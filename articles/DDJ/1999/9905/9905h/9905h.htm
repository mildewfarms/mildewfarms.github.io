<html><head><title>May99: Automated Testing for Web Applications</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>Automated Testing for Web Applications</h1><h2>A cumbersome  job made easy</h2><h3>By M. Selvakumar</h3><I>The author is an engineer for Texas Instruments India Ltd. He can be contacted at selvak@india.ti.com.</I><hr><p>Web-user interfaces (WUIs) are now as common as the familiar GUI and command-line interfaces. WUIs can be constructed in many ways, including HTML, Java applets, and plug-ins. Of these, HTML is the most widely adopted approach. Furthermore, HTML can often be combined with Javascript to provide additional functionality. Web search engines such as HotBot, AltaVista, and Infoseek are examples of WUIs based on HTML. </p><p>As with GUIs, WUI testing is a critical part of the development process. Consequently, the need to formalize and automate WUI testing is paramount. In this article, I'll present an approach for automated WUI testing that I implemented and deployed for a WUI developed on a commercially available data-management application. This technique is based on HTML, Javascript, and CGI. The implementation environment for this technique was based on Netscape Communicator 4.04 (browser) and Apache 1.2 (server). </p><h3>Existing Testing Techniques</h3><p>There are three widely used techniques for testing CGI-based applications:</p><ul>  <li>Simulating a browser, to test the application logic performed by CGI programs. This is done by developing a tester program that generates an HTTP request (as if it came from a browser) and sends it to the web server. The server in turn invokes the respective CGI program and passes the result back to the tester program. It then checks and compares the output received. The disadvantages to this approach are: The browser's rendering of output HTML documents is not tested; client-side processing (done using Javascript) is not tested; and the test program and application have to communicate with each other using the HTTP protocol.  <li>Adding test structures to the application code, which involves two interfaces -- one for interacting with the web server, and another for interacting with the tester. This lets the tester program interact with the application using the simpler, nonHTTP protocol. To test a login feature, for example, the tester program sends the values <i>UserId</i> and <i>Password</i> as command-line arguments to the program instead of generating an HTTP request. Hence, developing a tester program becomes easier. But the other disadvantages -- no testing of browser rendering and client-side processing -- remain. Also, the simulation approach introduces the disadvantage of embedding structures in the application to handle test-mode interaction.  <li>Manual testing, which checks all components of the system, but the disadvantages are obvious -- it is cumbersome, requires lots of time, and introduces the possibility of human errors.</ul><h3>Browser Representation  of HTML Documents</h3><p>When HTML documents are loaded into browsers, they sometimes create a number of Javascript objects for different components of the document; for example, one image object is created for each &lt;img&gt; tag in the HTML source. The created objects have attributes and methods. Attributes denote the properties of an HTML component, while methods, when invoked, perform relevant operations on the object, such as a <i>Text</i> object. One attribute of a <i>Text</i> object is <i>value</i>, denoting the current value entered in the form. <i>focus</i> is a method that, when invoked, sets focus to the <i>Text</i> field in the browser screen.</p><p>Similarly, browsers create objects, then initialize and arrange them in a hierarchy that reflects the structure of an HTML page itself. In <A NAME="rf1"><A HREF="9905hf1.htm">Figure 1</A>, the browser represents a given HTML document. The sample HTML document contains one image, one form, two <i>Text </i>objects, and one submit component. All these components get mapped to Javascript objects inside the browser and are arranged in a hierarchy. All HTML documents loaded in the browser are internally represented in the same way.</p><h3>Accessing Browser's HTML Objects</h3><p>HTML documents that originate from the same server can access objects of other documents once they're loaded in the browser. This can be done using Javascript.</p><p>For example, in <A NAME="rf2"><A HREF="9905hf2.htm">Figure 2</A>, Pages A and B are HTML documents originating from the same server. Page A is a simple HTML document with a form that contains a component named "Industry," which is a text object. Page B contains Javascript functions to access the Page A objects. It contains three buttons attached to three different Javascript functions. Clicking on the first button (Open Page A) loads Page A on a new browser window and receives a handle to the newly created window. Clicking on the second button (Set a Form Variable [Industry]) accesses the Page A object hierarchy and sets a value (Software) to its <i>Text</i> object. Finally, clicking on the third button (Close Page A) closes the browser window that held Page A. Thus, Page B simulates some user events on Page A by directly manipulating Page A's objects. For details, see <A NAME="rl1"><A HREF="#l1">Listings One</A> and Two implement Pages A and B, respectively. </p><h3>Automating WUI Testing</h3><p>A WUI to an application can sequentially generate HTML documents. In a typical database search scenario, for instance:</p><p></p><ul>  <li>1. Users click on a Search button.  <li>2. Get back a keywords form.  <li>3. Users fill in and submit the form.  <li>4. Get results. </ul><p>In this case, two HTML documents (keywords and output) are generated and two input events (click on Search and enter keywords) take place. Additional features might result in the generation of many more HTML documents.</p><p>Manually testing this feature might involve many iterations of the database search steps each time with different test cases (keyword values). However, testing can be automated by writing a Javascript function that simulates user events. The steps to this might be:</p><ul>  <li>1.	Simulate pressing the Search button.  <li>2.	Wait until the HTML-document-with-keywords form is received.  <li>3.	Supply keyword values and submit the form.  <li>4.	Wait until the HTML-document-with-search-results is received.  <li>5.	Check for the success of the search operation.</ul><p>Once testing is automated, it can be deployed many times with different test cases. The search tester function takes keyword values as parameters and tests using those values. <A NAME="rf3"><A HREF="9905hf3.htm">Figure 3</A> shows one way to automate WUI testing. The test engine is the core component that automates the testing. As <A NAME="rl4"><A HREF="#l4">Listing Four</A> shows, it is simply an HTML page containing tester functions, a <i>main</i> function, and test cases.</p><p>Tester functions are used for testing individual features of the application. Every feature that needs to be tested is associated with a specific tester function. All tester functions are written in Javascript. Each tester function takes all the input values required for a feature, applies them to the application screen by manipulating its objects, and submits the request. It then waits until the response for the given request is received and rendered by the browser. After output is received, it checks for the success of the operation by accessing the value of a fixed hidden variable in the application page. In case of unexpected results, it takes appropriate actions, such as suspending testing and informing users.</p><p>If the feature involves multiple screens, it takes care of the synchronization by waiting until a response is received before proceeding with the next HTML document.</p><p>The <i>main</i> tester function manages the testing and determines the sequence in which features should be invoked and selects different test cases for each feature. </p><p>The test engine maintains the test cases to be applied in Javascript data structures. The test engine is generated by test engine generators, which take the tester functions, read test cases from files, and embed them in Javascript data structures. <A NAME="re1"><A HREF="9905he1.htm">Example 1</A> shows the format of test cases files. <i>ID</i> identifies the test case, <i>FEATURE</i> denotes which feature to invoke, and <i>KEY</i> and <i>VALUE</i> pairs denote the expected input variables and values for them. For a database search scenario, the test case file might look like <A NAME="re2"><A HREF="9905he2.htm">Example 2</A>.</p><p>After updating test case files, the test engine generator needs to be run again so that the new test cases get loaded in the test engine.</p><h3>Testing a Sample Application</h3><p>For illustration, consider a hypothetical company called "ABC Audio" that sells audio products. ABC has enhanced its homepage to take online orders from customers. The WUI lists the available brands and price details. Customers select brands, specify quantity, method of payment, and order. As <A NAME="rf4"><A HREF="9905hf4.htm">Figure 4</A> illustrates, the WUI calculates total prices and informs the customer. This processing is straightforward, but real-life applications involve much complex processing.</p><p>The WUI can be tested using a tester that implements the technique described here. The tester generates orders by getting realistic random numbers for each of the parameters (Quantity, Payment method, and so on), applies it to the online shop, and waits for the order to be processed. Once done, it goes back to the online shop page and proceeds with the next order. It repeats the testing to the specified number of times. <A NAME="rl3"><A HREF="#l3">Listings Three</A> and Four present the HTML source for the online shop and online shop tester implementations, respectively.</p><h3>Extensions</h3><p>There are several ways in which you can enhance or otherwise extend the test engine I present here. These enhancements include:</p><p></p><ul>  <li>Regression testing. The test engine can be extended to perform regression testing. It can access the output from the application for the given test case, send it to another CGI program, which will compare the new output with old output, and store the results.  <li>Report generation. The test engine can be made to check for the success of the operation for each test case applied and generate a test report. The application can inform the test engine whether the operation was successful by setting a status variable in the output screen. The test engine can access the status variable to check the result.  <li>Record and play user events. This technique still requires writing tester functions for each of the features and generating test cases. This overhead can be eliminated if user events on an HTML page can be recorded to generate tester functions and test cases automatically.</ul><h3>Conclusion</h3><p>The automated testing technique presented here addresses most of the disadvantages of simulation and manual testing. Still, it does have an overhead cost of writing tester functions for each application feature. But it is a one-time effort, and the benefit achieved by this technique will be considerable for web-based applications that are released frequently.</p><p></p><p><b>DDJ</b></p><H4><A NAME="l1">Listing One</H4><pre>&lt;html&gt;  &lt;!-- ------------------------------------------------------------      Subject: pageA.html    To     : Doctor Dobb's Journal    Section: Internet Programming    From   : M Selvakumar (selvak@india.ti.com)    Copyright, 1998, M Selvakumar, Texas Instruments Inc.  ------------------------------------------------------------- --&gt;&lt;body &gt;  &lt;center&gt;  &lt;font size=5&gt; Page A &lt;/font&gt;&lt;br&gt;&lt;hr&gt;  &lt;/center&gt;  &lt;form method=post&gt;     Industry : &lt;input type=text name="industry"&gt;   &lt;/form&gt;  &lt;hr&gt;&lt;/body&gt;&lt;/html&gt;</pre><P><A HREF="#rl1">Back to Article</A></P><H4><A NAME="l2">Listing Two</H4><pre>&lt;html&gt;  &lt;!-- ------------------------------------------------------------      Subject: pageB.html    To     : Doctor Dobb's Journal    Section: Internet Programming    From   : M Selvakumar (selvak@india.ti.com)    Copyright, 1998, M Selvakumar, Texas Instruments Inc.  ------------------------------------------------------------- --&gt;&lt;head&gt;   &lt;script language=Javascript&gt;      var Win;      // ----------------------------------------       // Open 'Page A'      // ----------------------------------------       function init () {           Win = window.open("http://&lt;your domain&gt;/pageA.html");      }      // ----------------------------------------       // Modify 'Page A'      // ----------------------------------------       function modifyFormA () {        // Set a value to form variable - Industry        Win.document.forms[0].industry.value = "Software";      }       // ----------------------------------------       // Close 'Page A'      // ----------------------------------------       function term () { Win.close(); }   &lt;/script&gt;&lt;/head&gt;&lt;body &gt;  &lt;center&gt;  &lt;font size=5&gt; Page B &lt;/font&gt;&lt;br&gt;&lt;hr&gt;  &lt;/center&gt;  &lt;form name=formB action=""&gt;    &lt;input type=button value="Open PageA"             onClick="init();" &gt;&lt;br&gt;    &lt;input type=button value="Set a Form Variable (Industry)"  onClick="modifyFormA();" &gt;&lt;br&gt;    &lt;input type=button value="Close PageA"            onClick="term();" &gt;&lt;br&gt;  &lt;/form&gt;  &lt;hr&gt;&lt;/body&gt;&lt;/html&gt;</pre><P><A HREF="#rl2">Back to Article</A></P><H4><A NAME="l3">Listing Three</H4><pre>&lt;html&gt;  &lt;!-- ------------------------------------------------------------    Subject: Online Shop     To     : Doctor Dobb's Journal    Section: Internet Programming    From   : M Selvakumar (selvak@india.ti.com)    Copyright, 1998, M Selvakumar, Texas Instruments Inc.  ------------------------------------------------------------- --&gt;  &lt;head&gt;    &lt;title&gt; ABC Audio&lt;/title&gt;  &lt;/head&gt;  &lt;body bgcolor="#ffffff"&gt;  &lt;center&gt;  &lt;font size=6&gt;ABC Audio&lt;/font&gt;&lt;br&gt;  &lt;font size=5&gt;On-line Shopping!&lt;/font&gt;&lt;br&gt;  &lt;/center&gt;  &lt;br&gt;&lt;hr&gt;  &lt;font size=5&gt;Personal Audio&lt;font&gt;  &lt;br&gt;&lt;br&gt;  &lt;font size=4&gt;Please select the items &amp; quantities&lt;/font&gt;  &lt;form method=post action="http://&lt;ABC Audio Domain Name&gt;/cgi-bin/shop/onlineShop.pl"&gt;  &lt;blockquote&gt;  &lt;!-- ---------------------------------------------   // Display Brands and their prices   --------------------------------------------- --&gt;  &lt;table border=1&gt;    &lt;tr bgcolor=yellow&gt;&lt;th&gt;&lt;th&gt;Brand&lt;th&gt;Model Name&lt;th&gt;Price&lt;th&gt;Quantity    &lt;tr&gt;&lt;td&gt;&lt;input type=checkbox name=brands value="B1"&gt;        &lt;td&gt; Sony        &lt;td&gt; SA-1670        &lt;td&gt; 20$        &lt;td&gt;&lt;input type=text size=5 name="Q1"&gt;    &lt;tr&gt;&lt;td&gt;&lt;input type=checkbox name=brands value="B2"&gt;        &lt;td&gt; Aiwa        &lt;td&gt; AI-W660        &lt;td&gt; 22$        &lt;td&gt;&lt;input type=text size=5 name="Q2"&gt;    &lt;tr&gt;&lt;td&gt;&lt;input type=checkbox name=brands value="B3"&gt;        &lt;td&gt; Panasonic        &lt;td&gt; PA-X1250        &lt;td&gt; 21$        &lt;td&gt;&lt;input type=text size=5 name="Q3"&gt;  &lt;/table&gt;  &lt;/blockquote&gt;  &lt;br&gt;  &lt;!-- ---------------------------------------------   // Display Payment Methods   --------------------------------------------- --&gt;  &lt;font size=5&gt; Payment Method&lt;font&gt;  &lt;blockquote&gt;     &lt;input type=radio name=payment value="P1"&gt;Visa       &lt;input type=radio name=payment value="P2"&gt;Master Card       &lt;input type=radio name=payment value="P3"&gt;American Express    &lt;/blockquote&gt;  &lt;hr&gt;  &lt;input type=submit value="Order Now!"&gt;  &lt;input type=reset value="Clear"&gt;    &lt;/form&gt;  &lt;/body&gt;&lt;/html&gt;</pre><P><A HREF="#rl3">Back to Article</A></P><H4><A NAME="l4">Listing Four</H4><pre>&lt;html&gt;  &lt;!-- ------------------------------------------------------------      Subject: Online Shop Tester Program    To     : Doctor Dobb's Journal    Section: Internet Programming    From   : M Selvakumar (selvak@india.ti.com)    Copyright, 1998, M Selvakumar, Texas Instruments Inc.  ------------------------------------------------------------- --&gt;   &lt;head&gt;      &lt;title&gt; ABC Audio On-line Shop Tester &lt;/title&gt;      &lt;script&gt;         var Win, RepWin;         var count=0, noOfTests;         // --------------------------------------------------          // TEST ENGINE -- Contains  Main Function, Tester Functions and         //   randomly generated Testcases         // --------------------------------------------------          // --------------------------------------------------          // Main Function - Test Shop         //   1. Generate and apply a random order         //   2. Wait for the response         //   3. Getback the Shop for next test         // --------------------------------------------------          function test( task ) {            if ( task == 1 ){               submitAShoppingReq();               task = 2;            }            if (task == 2) {               var ret = goBack();               if ( ret == false ) {                  setTimeout("test(2)", 2000);                  return false;               }            }            count++;            // Move to next order            if ( count &lt;= document.forms[0].testCount.value) {              setTimeout("test(1)", 500);            }            return true;         }         // --------------------------------------------------          // Tester Function 1 - Open Shop         // --------------------------------------------------          function init() {           Win = window.open("http://&lt;ABC Audio Domain Name&gt;/shop.html",'',                             'width=500,height=600');         }         // -----------------------------------------------------------------          // Tester Function 2 - Generate a random order and apply to the Shop.         // -----------------------------------------------------------------          function submitAShoppingReq() {            var tmp = Math.round(Math.random()*10);            var payment = tmp%3;            Win.document.forms[0].reset();            Win.document.forms[0].brands[0].checked=true;            Win.document.forms[0].brands[1].checked=true;            Win.document.forms[0].brands[2].checked=true;            Win.document.forms[0].Q1.value= Math.round(Math.random()*300);            Win.document.forms[0].Q2.value= Math.round(Math.random()*200);            Win.document.forms[0].Q3.value= Math.round(Math.random()*100);            Win.document.forms[0].payment[payment].checked = true;            Win.document.forms[0].submit();         }         // --------------------------------------------------         // Tester Function 3 - Close Shop         // --------------------------------------------------         function term() { Win.close(); }         function goBack() {            // Check if the response is received            if ( typeof(Win.opOver) == 'undefined' ) {               return false;            }            // Check for success of the operation            if ( Win.document.forms[0].result.value != "Success" ) {               alert("Operation not Successful");            }            Win.history.go(-1);            return true;         }      &lt;/script&gt;    &lt;/head&gt;    &lt;body bgcolor="#ffffff"&gt;         &lt;center&gt;         &lt;font size=5&gt;ABC Audio On-line Shop &lt;/font&gt;&lt;br&gt;         &lt;font size=4&gt;Web Interface Tester&lt;/font&gt;&lt;br&gt;         &lt;/center&gt;         &lt;br&gt;&lt;hr&gt;         &lt;form name=Tester onSubmit="parent.test()"&gt;            &lt;input type=button value="Open the Shop!" onClick="init();"&gt;&lt;br&gt;            No. of Tests            &lt;input type=text name=testCount size=5 value=1&gt;            &lt;input type=button value="Test!" onClick="count=1; test(1);"&gt;&lt;br&gt;            &lt;input type=button value="Close the Shop!" onClick="term();"&gt;&lt;br&gt;            &lt;br&gt;&lt;hr&gt;         &lt;/form&gt;      &lt;/center&gt;    &lt;/body&gt;&lt;/html&gt;</pre><P><A HREF="#rl4">Back to Article</A></P><HR><I>Copyright &copy; 1999, Dr. Dobb's Journal</I><BR>
</body></html>