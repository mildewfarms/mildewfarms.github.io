<html><head><title>May99: VBScript and SQL Calendars</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>VBScript and SQL Calendars</h1><h2>Building a web calendar</h2><h3>By John Donovan Lambert</h3><I>John is the CIO of DrMag.com. He can be reached at lambert@drmag.com.</I><hr><p>At DrMag.com (an Internet-based resource center for magazines that lets you search for and subscribe to nearly 2000 publications), we have reduced printing costs and increased communication by developing our intranet as a replacement for distributing information by paper. More information gets distributed this way, and it becomes available to every employee instantly, which is especially helpful in an entrepreneurial firm like ours. Our intranet primarily uses VBScripts in Active Server Pages (ASP), with data stored in Microsoft SQL 7 databases -- the same technology we use with the public DrMag.com site. </p><p>We put off creating intranet calendar-based reports for day-to-day analysis because creating such a web page was a little less than intuitive. Once you have the structure for one such report, however, practically anything can be output with only simple modifications to the query. There are numerous issues that I'll discuss here for putting SQL results in a web calendar, but it boils down to three main tasks:</p><ul>  <li>Structuring a SQL query so that the results can easily be assigned to a calendar's cells.  <li>Writing scripts to dynamically create a calendar.  <li>Inserting the SQL results into the calendar.</ul><p>In addition to presenting the exact VBScripts I use, I'll discuss enough of the logic to make it straightforward for you to port it to Java, Perl, Cold Fusion, or whatever language you prefer.</p><h3>The Query</h3><p>First, the query will need to report the month, the day of the month, and the day of the week, for each piece of information to be displayed in the calendar. If you want multiple years on one web page, you have to return the year as well. At least one table in each query must have a date field, and in most cases, it should not contain nulls. SQL calculates these columns by the DATEPART function for T-SQL (Microsoft and Sybase), and by TO_CHAR and Format for Oracle. DB2 uses three separate commands. <A NAME="rl1"><A HREF="#l1">Listing One</A> covers some of the syntax for these functions, but for full syntax or other flavors of SQL, check your documentation. (By the way, IBM provides free access to over 400 DB2 books online, including its SQL reference, at http://www.software.ibm.com/ data/ db2/udb/library.html. Thanks, IBM.)</p><p><A NAME="rl2"><A HREF="#l2">Listing Two</A> is an example of a useful query and <A NAME="re1"><A HREF="9905ce1.htm">Example 1</A> shows a few rows of its results. By the way, if you're working with both SQL and web-page scripting, get used to seeing overlapping terms for database objects: Columns and fields mean the same thing, and so do rows and records.</p><p>The <i>UnitsSold</i> table has a date column (<i>RecDate</i>) and information such as keys to other tables to identify which item was purchased, who the sales person was, who purchased it, and so on, and it has one record for each unit sold. This product group has many units sold each day, so there will be many records with the same day in the date column. In the select list, three of the four columns returned deal with the date, and only one is the data we actually want to present in our calendar. This is provided by the aggregate COUNT function on the <i>OrderID</i> column. Since there is one record for each sale, a count of the records for each day returns the total number of units sold for each day (if any).</p><p>The <i>@Year</i> is a T-SQL variable in my stored procedure, named <i>sp_UnitsSold</i>. If you're using a SQL database, as opposed to something like Microsoft Access, be sure to put your query in a stored procedure and have the web-page script pass the year as an input variable. (See <A NAME="rl3"><A HREF="#l3">Listing Three</A> for a VBScript call to a stored procedure with a passed variable.) The performance boost is well worth it. Otherwise, you will need to replace the SQL variable with a VBScript variable; see <A NAME="re2"><A HREF="9905ce2.htm">Example 2</A> for an instance of that type.</p><p>If you have records with more than one year in the date column, you must include the WHERE clause to restrict the results set to show records from only one year, or add the year to the select list, group by, and order by statements to show records from multiple years.</p><p>In the <A NAME="re1"><A HREF="9905ce1.htm">Example 1</A> results, the first record shown is for Friday, since that is the sixth day of the week. This may vary, depending on your SQL server's configuration.</p><h3>The Calendar</h3><p>STDCAL.ASP (available electronically; see "Resource Center," page 5) is code for a web page that displays a standard calendar. You can use this as a reference for the HTML/VBScript that creates the calendar without being cluttered with presenting query results. This HTML table creates eight columns, a column on the left to hold the name of the month, and one for each day of the week. A live example of this page is available at http://www .drmag.com/calendar.asp.</p><p>The HTML form posts back to itself so that the person viewing it can change the year displayed. Scripting languages have their own valid ranges of years, and your SQL may have a different range from your scripting language. The reason this code checks both <i>request.querystring</i> and <i>request.form</i> is that <i>request.querystring</i> checks for the parameters in the URL, and <i>request.form</i> looks for them in the HTTP header, where they will be if the POST method of an HTML form has been used. Incidentally, if you'd like an easy way to see the entire HTTP header, you can print it to a web page using <i>&lt;%=request.servervariables(ALL_RAW)%&gt;</i>.</p><p>The basic logic is to determine the year and month the code will work with next, determine the day of the week that month's first day falls on, determine the number of weeks in that month, and use variables to keep up with the values as they change. You also have to calculate the length of the month by setting a date variable to the first day of the next month and subtracting one day. (An IF/ELSE statement handles December differently. And yes, you use the <i>DateAdd</i> function to subtract a day. Present the name of the month if it's the first line for the month, and if the first day of the month is not on Sunday, fill in blank cells up to the first day, with a SELECT CASE. Then fill in the days of the month (1-31) for the first week ending on Saturday. Start the next row and fill in the days of the month until your day counter equals the last day of the month. If the last day is not Saturday, fill in blank cells for the rest of the week. Repeat for the next month while any months remain.</p><p>The main HMTL table has one fixed row of column headers, and then we have our first VBScript loop, in this case a FOR/NEXT, since it's going to present exactly 12 months. Use a DO LOOP if you want a conditional number of months presented. A month counter variable (<i>mc</i>) identifies the month about to be processed.</p><p>To track the number of weeks in a particular month, set the variable <i>NumWeeks</i> to 5 for the default, and use an IF statement to change it to 6 if the beginning weekday of the month (<i>bwdom</i>) is 6 and the last day of the month (<i>ldom</i>) is 31, or if the beginning weekday of the month is 7 and the last day of the month is equal to or greater than 30. An additional IF checks to see if the month is February, not a leap year, and the first day of the month is Sunday, the only case in which <i>NumWeeks</i> is set to 4.</p><h3>The Final Form</h3><p><A NAME="rl3"><A HREF="#l3">Listing Three</A> takes the HTML/VBScript of STDCAL.ASP, and with a few modifications, inserts an ODBC connection, query, and presentation of the query results. Once you have the query returning results correctly, and the HTML table presenting the calendar correctly, it's fairly easy to look at <A NAME="rl4"><A HREF="#l4">Listing Four</A> and see where to plug in the query and its results.</p><p>Unlike STDCAL.ASP, this code uses a DO UNTIL to make the presentation of months conditional. If no records are returned for some months, those months won't be displayed.</p><p>The biggest difference is the addition of the DIM D(31) statement, which creates a variable array. Unless declared otherwise, VBScript variables are the <i>variant</i> datatype. This array gets its values assigned with an initialization loop inside the month loop. Then, as you loop through the HTML table to create a cell and put the day of the month in it, the day of the month variable corresponds to the array variable. For example, the third day of the month will have its SQL results stored in D(3). When the code creates a day's cell, you just print the value inside it with <i>&lt;%=D(DayCounter)%&gt;</i>.</p><p>If you need to troubleshoot, you can break long scripts and output variable contents as HTML, as in <A NAME="re2"><A HREF="9905ce2.htm">Example 2</A>. This technique is especially useful when you're combining text strings with variables, to make sure your concatenation and other syntax is coming out correctly. Of course, run your query with your normal query tool first, to make sure it outputs the records correctly.</p><h3>Single-Month View Variation</h3><p>A seemingly infinite number of variations can be made for the HMTL table layout and the time period covered by it, like two months side-by-side, or your company's current fiscal quarter. Most useful if you have a large amount of data to display for each day, such as text as opposed to amounts, is a single-month or single-week web page that will have much larger cells for each day (for an example, see http://www.drmag.com/ month.asp).</p><p><A NAME="rl4"><A HREF="#l4">Listing Four</A> is a stored procedure you could use with a single month, so you can compare it with <A NAME="rl2"><A HREF="#l2">Listing Two</A>'s query for an entire calendar year. <A NAME="re3"><A HREF="9905ce3.htm">Example 3</A> shows sample results. MONTH.ASP (available electronically) is HTML code for a single month view, with a query and its results inserted. The query in this example should be a stored procedure if your database provides that functionality, but I've done it this way to show users of Access and other small DBs an example of making a direct query, without a stored procedure. (By the way, if you are using Access in particular, don't expect it to handle more than a few simultaneous connections without slowing to a crawl. Consider upgrading to Microsoft SQL7, which can handle multiple simultaneous connections much faster than Access can handle one.)</p><p>The main differences from <A NAME="rl3"><A HREF="#l3">Listing Three</A> are tracking the month variable the same way the year variable is tracked, and modification of the query to return data for only a single month. Also, in the calendar's cell where the day of the month and query results are displayed, I prefer to use a nested HTML table to maximize layout control, while retaining the broadest possible browser compatibility.</p><p>To improve the usability, at the bottom of the month display, I use hyperlinks to page to the previous and next months. The hyperlink passes the month and year variables in the URL instead of the HTTP header. If the month displayed is February through November, just increment or decrement the month. For January, the Previous link has to decrement the year and set the month to December, and for December's Next link, the year has to be incremented, and the month set to January. An IF/ELSEIF/ELSE statement handles this. Below that is an HTML form with a SELECT for the month and an input text box for the year, so users can jump to any month and year.</p><p>Last, you'll notice that the HTML SELECT for the month is over 60 lines of code because of the IF/ELSE statements used for each month. This is only necessary if you want the month displayed to be the default selection. You can shorten your code if you skip choosing the default month in this select, but it won't speed it up much. Other variations include:</p><ul>  <li>You can make a clock web page for reports segmented into hours, minutes, or even seconds. Just check your SQL documentation for the syntax on the DATEPART functions.  <li>You can vary the query, and therefore the results, by login ID for pages that are password protected. VBScript provides access to the HTTP header information through Server Variables, and the headers include user IDs when a password scheme is used. For example, <i>&lt;%IF INSTR(Request.servervariables(''LOGON_USE''), ''drdobb'') THEN ... %&gt;</i> is one way to start the logic. Use an INSTR function if the web server is on Windows NT, because the LOGON _USER variable may include the domain name, depending on whether the user logs into the web page from inside or outside the domain LAN. With VB and VBScripting, INSTR doesn't require an operator such as "&gt; 1" because if there is no hit, it returns zero, which equates to False, and any hit at all returns an integer of one or more, and equates to True.  <li>You can add a column on the right to display totals for the week by several methods. Constructing a single query to return daily and weekly totals required a fairly complex query (and I thank the friends who helped), and gave the slowest overall performance. I haven't found a SQL language yet with a week-of-month function to make such a query easier. A second method is to run a separate query for the weekly totals, but the best performance in my tests was simply using a VBScript variable to count each day's value, display it after Saturday was counted, and reset it to zero before counting the next week. </ul><h3>Presenting  Anniversaries and Holidays</h3><p>Think twice before adding holidays to web-based calendars if you intend for it to have international appeal. Political holidays vary by nation, and religious holidays are never appreciated by everyone. If you want to present holidays on a limited-culture intranet, however, here are some examples that will help you figure out how to present any holiday.</p><p>The easiest feature to present is an anniversary or holiday that always occurs on the same day of the same month, such as New Year's Day (for the Julian calendar), which always falls on January 1. In the loop where the number of the day is presented, simply use an IF statement to check to see if the month being presented is equal to 1, and if the day counter is equal to 1. If so, then add your holiday text label or graphic before the END IF, like <i>&lt;%IF wMonth = 1 AND DayCounter = 1 THEN%&gt;</i>&amp;<i>nbsp; &lt;TD&gt;&lt;FONT size = 2&gt;New Year's Day&lt;/FONT&gt;&lt;%END IF%&gt;</i>.</p><p>Slightly more complex is a holiday such as Thanksgiving Day, which is always the fourth Thursday in November (in America). Because the month can begin on any one of seven days of the week, it is possible for the fourth Thursday to be in the fourth or fifth week (when the month begins on Friday or Saturday). In the IF statement, add <i>AND DayOfWeekCounter = 5</i> to include only Thursdays, and change the <i>DayCounter</i> to check a range, with <i>DayCounter &gt; 21 AND DayCounter &lt; 29</i>. If you're looking for the first fourth- particular day of the week (<i>?day</i>), such as the fourth Thursday, follow these guidelines:</p><ul>  <li>First <i>?day</i> of the month, change IF statement to <i>DayCounter &lt; 8</i>.  <li>Second <i>?day</i> of the month, change to <i>DayCounter &gt; 7 AND DayCounter &lt;15</i>.  <li>Third <i>?day</i> of the month, change to <i>DayCounter &gt; 14 AND DayCounter &lt;22</i>.  <li>Fourth <i>?day</i> of the month, change to <i>DayCounter &gt; 21 AND DayCounter &lt;29</i>.</ul><p>The rule is a little different if you want the last <i>?day</i> of the month, such as Memorial Day being the last Monday in May (in America). It isn't the same as the fourth <i>?day</i> of the month, because months vary in length. Here's the rule for this condition for every month except February, depending on how many days the month has:</p><ul>  <li>31 days, use DayCounter &gt; 24.  <li>30 days, use DayCounter &gt; 23.</ul><p>If February, because of periodic leap years, use the last-day-of-month variable (<i>ldom</i>) in <A NAME="re4"><A HREF="9905ce4.htm">Example 4</A>.</p><p>Holidays based on lunar schedules are the most complex, and you'll have to use an algorithm to relate the lunar schedule to the Julian calendar. For example, here is how I handle Easter (Christian), which is the first Sunday following the "Paschal Full Moon" and can occur in March or April (based on Carter's algorithm, see http://www.ast.cam.ac.uk/pubinfo/leaflets/easter/easter.html). I have checked its accuracy against posted dates for Easter for a number of years past, and it always agreed. Right after initializing <i>DayCounter</i> and <i>WeekCounter</i>, before the loop that creates the cells for each week, I initialize two new variables, <i>eMonth</i> and <i>eDay</i>, to identify the month and day of the month for Easter in a given year; see <A NAME="rl5"><A HREF="#l5">Listing Five</A>.</p><p>Then, inside the loop where all the other anniversary and holiday IF statements appear, I add <i>&lt;%IF wYear &gt; 1699 AND wYear &lt; 2200 AND abs(wMonth) = eMonth AND DayCounter = eDay THEN %&gt;Easter &lt;%END IF%&gt;</i>. I used the absolute function (<i>abs</i>) with <i>wMonth</i> because the variant datatype wouldn't match with <i>eMonth</i> otherwise, even though <i>DayCounter</i> will match <i>eDay</i> without it. A bug, or a feature? At any rate, you can see lunar-based special days can be difficult to implement in the Julian calendar. If you have to do much of this, show this sample to your boss and ask for a raise! Otherwise, have fun making web calendars, and remember that next year is always better.</p><p><b>DDJ</b></p><H4><A NAME="l1">Listing One</H4><pre>Return an integer representing a specific part of a date: (a) Transact SQL (Microsoft and Sybase) DATEPART (datepart, date); (b) Oracle. TO_CHAR(date, 'datepart') FORMAT; (c) DB2.(a)<pre>Parameter     Result Type    Digits Returnedyyyy           year           1753-9999mm             month          1-12dd             day of month   1-31dw             day of week    1-7 (Sun.-Sat.)(b)<pre>Parameter   Result Type     Digits ReturnedYYYY          Year             1-9999MM            month            01-12DD            day of month     01-31D             day of week      01-07(c)<pre>YEAR(date) for year as 1-9999MONTH(date) for month as 1-12DAY(date) for day of month as 1-31DAYOFWEEK(date) for day of week as 1-7</pre><P><A HREF="#rl1">Back to Article</A></P><H4><A NAME="l2">Listing Two</H4><pre>CREATE PROCEDURE sp_UnitsSold @Year int ASSELECT DATEPART(mm, RecDate) AS Month, DATEPART(dd, RecDate) AS DayOfMonth,       DATEPART(dw, RecDate) AS WkDay, COUNT(OrderID) AS UnitsSoldFROM UnitsSold WHERE DATEPART(yyyy, RecDate) = @YearGROUP BY DATEPART(mm, RecDate), DATEPART(dd, RecDate), DATEPART(dw, RecDate) ORDER BY DATEPART(mm, RecDate), DATEPART(dd, RecDate)</pre><P><A HREF="#rl2">Back to Article</A></P><H4><A NAME="l3">Listing Three </H4><pre>&lt;%@ LANGUAGE=VBScript %&gt;&lt;%wYear=Request.QueryString("wYear")IF wYear = "" THEN wYear=Request.Form("wYear")IF wYear = "" OR wYear &lt; 1753 OR wYear &gt; 9999 THEN wYear =                                                 DATEPART("yyyy",now()) %&gt;&lt;html&gt;&lt;HEAD&gt;&lt;TITLE&gt;Calendar Report of Units Sold&lt;/TITLE&gt;&lt;/head&gt;&lt;BODY&gt;&lt;CENTER&gt;&lt;form action="calendarunitsales.asp" method="post"&gt;    Enter a year for report:&lt;br&gt;    &lt;input size=6 maxlength=4 name=wYear&gt;&lt;br&gt;    &lt;input type="submit" name="Change" VALUE="Change"&gt;&lt;/form&gt;&lt;BR&gt;&lt;H2&gt;&lt;%=wYear%&gt; Unit Sales&lt;/H2&gt;&lt;P&gt;&lt;%dim D(31) Set conn=server.createobject("ADODB.connection")conn.Open "DATABASE=[database name];DSN=[DSN Name];                                   UID=[login];Password=[password];"%&gt;&lt;TABLE ALIGN=center WIDTH=30% BORDER=1 CELLSPACING=1 CELLPADDING=2&gt;    &lt;TR&gt;        &lt;TD ALIGN=middle&gt;&lt;/TD&gt;        &lt;TD ALIGN=middle&gt;&lt;STRONG&gt;Sun.&lt;/STRONG&gt;&lt;/TD&gt;        &lt;TD ALIGN=middle&gt;&lt;STRONG&gt;Mon.&lt;/STRONG&gt;&lt;/TD&gt;        &lt;TD ALIGN=middle&gt;&lt;STRONG&gt;Tue.&lt;/STRONG&gt;&lt;/TD&gt;        &lt;TD ALIGN=middle&gt;&lt;STRONG&gt;Wed.&lt;/STRONG&gt;&lt;/TD&gt;        &lt;TD ALIGN=middle&gt;&lt;STRONG&gt;Thu.&lt;/STRONG&gt;&lt;/TD&gt;        &lt;TD ALIGN=middle&gt;&lt;STRONG&gt;Fri.&lt;/STRONG&gt;&lt;/TD&gt;        &lt;TD ALIGN=middle&gt;&lt;STRONG&gt;Sat.&lt;/STRONG&gt;&lt;/TD&gt;    &lt;/TR&gt;&lt;%SET rs1=conn.Execute("EXECUTE sp_UnitsSold " &amp; wYear)DO UNTIL rs1.EOF 'CONDITIONAL MONTH LOOPmc = rs1("Month")%&gt;    &lt;TR&gt;        &lt;TD ALIGN=middle&gt;&lt;STRONG&gt;&lt;%=MonthName(lc)%&gt;&lt;/STRONG&gt;&lt;/TD&gt;        &lt;% 'Determine day of the week the month begins on        tempdate = mc &amp; "/1/" &amp; wYear         bwdom = datepart("w", tempdate)        DayOfWeekCounter = 0 'This "week" has 8 "days" to                              '       include the Name of the Month column.        'PRINT LEADING BLANK DAYS        SELECT CASE bwdom            CASE 1                 DayOfWeekCounter = 1            CASE 2 %&gt;                &lt;TD&gt;&lt;/TD&gt;&lt;%DayOfWeekCounter = 2            CASE 3 %&gt;                &lt;TD&gt;&lt;/TD&gt;&lt;TD&gt;&lt;/TD&gt;&lt;%DayOfWeekCounter = 3            CASE 4 %&gt;                &lt;TD&gt;&lt;/TD&gt;&lt;TD&gt;&lt;/TD&gt;&lt;TD&gt;&lt;/TD&gt;&lt;%DayOfWeekCounter = 4            CASE 5 %&gt;                &lt;TD&gt;&lt;/TD&gt;&lt;TD&gt;&lt;/TD&gt;&lt;TD&gt;&lt;/TD&gt;&lt;TD&gt;&lt;/TD&gt;&lt;%DayOfWeekCounter = 5            CASE 6 %&gt;                &lt;TD&gt;&lt;/TD&gt;&lt;TD&gt;&lt;/TD&gt;&lt;TD&gt;&lt;/TD&gt;&lt;TD&gt;&lt;/TD&gt;                                            &lt;TD&gt;&lt;/TD&gt;&lt;%DayOfWeekCounter = 6            CASE 7 %&gt;                &lt;TD&gt;&lt;/TD&gt;&lt;TD&gt;&lt;/TD&gt;&lt;TD&gt;&lt;/TD&gt;&lt;TD&gt;&lt;/TD&gt;&lt;TD&gt;&lt;/TD&gt;                                            &lt;TD&gt;&lt;/TD&gt;&lt;%DayOfWeekCounter = 7            CASE ELSE %&gt;                &lt;TD&gt;Beginning Day of Week Error&lt;/TD&gt;&lt;%        END SELECT        'Determine last day of month &amp; number of weeks        ldom = Day(DateAdd("d", -1, mc + 1 &amp; "/1/" &amp; tempyear))        NumWeeks = 5        IF (bwdom = 6 AND ldom = 31) OR                                (bwdom = 7 AND ldom &gt; 29) THEN NumWeeks = 6        'INITIALIZE DAY ARRAY        lc =  0        FOR lc = 1 to 31            D(lc) = "&amp;nbsp;"        NEXT         'loop through records for the month &amp; assign to D array.        DO WHILE rs1("Month") = mc 'DAY ASSIGNMENT LOOP            TempD = rs1("DayOfMonth")            D(TempD) = rs1("UnitsSold")            IF NOT rs1.eof THEN rs1.movenext            IF rs1.eof then exit do         LOOP        DayCounter = 1        WeekCounter = 1        DO WHILE WeekCounter &lt; NumWeeks + 1            DO WHILE DayOfWeekCounter &lt; 8                   IF DayCounter &lt; ldom + 1 THEN %&gt;                    &lt;TD ALIGN=middle&gt;&lt;SUP&gt;&lt;FONT size=-2&gt;&lt;%=DayCounter%&gt;                    &lt;/FONT&gt;&lt;/SUP&gt;&amp;nbsp;&lt;FONT color="ff0000"&gt;                    &lt;STRONG&gt;&lt;%=D(DayCounter)%&gt;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/TD&gt;                &lt;%ELSE%&gt;                    &lt;TD ALIGN=middle&gt;&lt;/TD&gt;                &lt;%END IF                DayOfWeekCounter = DayOfWeekCounter + 1                 DayCounter = DayCounter + 1             LOOP            DayOfWeekCounter = 1            WeekCounter = WeekCounter + 1 %&gt;            &lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;/TD&gt;       &lt;%LOOPLOOPrs1.Closeconn.Close%&gt;&lt;/TABLE&gt;&lt;P&gt;&lt;/CENTER&gt;&lt;/BODY&gt;&lt;/HTML&gt;</pre><P><A HREF="#rl3">Back to Article</A></P><H4><A NAME="l4">Listing Four </H4><pre>CREATE PROCEDURE sp_SalesRecords @Year int, @Month int ASSELECT DATEPART(dd, RecDate) AS DayOfMonth, DATEPART(dw, RecDate) AS WkDay,                                                             DaysTopCustomer FROM SalesRecords WHERE DATEPART(yyyy, RecDate) = @Year    AND DATEPART(mm, RecDate) = @MonthGROUP BY DATEPART(dd, RecDate), DATEPART(dw, RecDate) ORDER BY DATEPART(dd, RecDate)</pre><P><A HREF="#rl4">Back to Article</A></P><H4><A NAME="l5">Listing Five</H4><pre>&lt;%  IF wMonth = 3 OR wMonth = 4 THEN 'Begin Easter calculation        eMonth = 0: eDay = 0: v1 = 0: v2 = 0: v3 = 0: v4 = 0:                                                 v5 = 0: v6 = 0: v7 = 0         IF wYear &gt; 1699 AND wYear &lt; 1800 THEN v6 = 23: v7=3       IF wYear &gt; 1799 AND wYear &lt; 1900 THEN v6 = 23: v7=4        IF wYear &gt; 1899 AND wYear &lt; 2100 THEN v6 = 24: v7=5        IF wYear &gt; 2099 AND wYear &lt; 2200 THEN v6 = 24: v7=6        v1 = wYear MOD 19: v2 = wYear MOD 4: v3 = wYear MOD 7        v4 = ((19*v1)+v6) MOD 30        v5 = ((2*v2)+(4*v3)+(6*v4)+v7) MOD 7        eDay = (22+v4+v5): eMonth = 3        IF eDay &gt; 31 THEN            eDay = (v4+v5-9): eMonth = 4            IF eDay &gt; 24 THEN                IF eDay = 26 THEN eDay = 19                IF eDay = 25 AND v4 = 28 AND v1 &gt; 10 THEN eDay = 18            END IF        END IF    END IF 'End Easter calculation %&gt;</pre><P><A HREF="#rl5">Back to Article</A></P><HR><I>Copyright &copy; 1999, Dr. Dobb's Journal</I><BR>
</body></html>