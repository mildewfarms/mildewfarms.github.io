<html><head><title>Dec99: Java Q&A</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>What are JavaServer Pages?</h1><p><i>Dr. Dobb's Journal</i> December 1999</p><h3>By Paul Tremblett</h3><I>Paul is a member of the R<i>&amp;</i>D staff at Cap Gemini Telecommunications. He can be reached at ptremble@usa.capgemini.com.</I><hr><p>The usefulness of static HTML has run its course and web sites whose sole content is comprised of static HTML pages are now often dismissed as "brochureware." The real world is dynamic and web pages that want to reflect this must be capable of accommodating this dynamism. It is possible, however, to deliver dynamic data content to otherwise static HTML pages by leveraging the power of Java and JavaServer Pages (JSP).</p><p><A NAME="rl1"><A HREF="#l1">Listing One</A> is a simple JSP. You can see that the text in the unshaded areas is recognizable as HTML. This means not only that getting started with JSP is easy, but also that you do not have to give up your favorite HTML authoring tool. You can also see that the text in the shaded area is as familiar to Java programmers as the text in the unshaded areas is to HTML authors -- it is Java code that creates an instance of <i>GregorianCalendar</i> for the Eastern time zone and invokes the object's <i>getTime()</i> method. <A NAME="rf1"><A HREF="9912kf1.htm">Figure 1</A>, the output displayed from the .jsp file in <A NAME="rl1"><A HREF="#l1">Listing One</A>, is accessed using Internet Explorer. </p><DDJADVERTISEMENT INLINE><p>Now look at <A NAME="rl2"><A HREF="#l2">Listing Two</A>, which should look somewhat familiar if you have examined the Snoop servlet that is delivered as an example with many of the leading servlet engines. As with <A NAME="rl1"><A HREF="#l1">Listing One</A>, you can see that <A NAME="rl2"><A HREF="#l2">Listing Two</A> contains a combination of HTML and Java code. The Java code invokes a number of methods on an instance of <i>Request</i> resulting in the output in <A NAME="rf2"><A HREF="9912kf2.htm">Figure 2</A>. The browser used in this case is Netscape Navigator. </p><p>Finally, look at <A NAME="rl3"><A HREF="#l3">Listing Three</A>, which contains a more complex JSP page representative of what you might typically encounter in the real world. Like the previous two, it consists of HTML and Java code, as well as some directives I'll discuss when showing how this JSP page, in conjunction with an HTML page and two other JSP pages, delivers dynamic data to a browser. </p><h3>The Definition of a JavaServer Page</h3><p>A JavaServer Page is a collection of JSP elements and fixed-template data that describes how to process a request to create a response. There are two types of JSP elements -- directives and actions. </p><p>Directives provide information to the JSP engine. Lines 12, 13, 14, and 23 in <A NAME="rl3"><A HREF="#l3">Listing Three</A> are examples of directives. Actions can create objects that can be manipulated by scripting elements that are written using the language specified by the language attribute of the page directive. Although the JSP specification makes provisions for multiple languages, I will discuss only Java. The three scripting elements are:</p><ul>  <li>Declarations, which have the syntax <i>&lt;%! declaration %&gt;</i>, declare a variable or method that then becomes available to other scripting elements. Line 36 in <A NAME="rl3"><A HREF="#l3">Listing Three</A> is a declaration. Declarations produce no output to the output stream.  <li>Scriptlets, which have the syntax<i> &lt;% code fragment %&gt;</i>, contain code that is executed at request-processing time. The code can create new objects, modify existing objects, and perform branching and iterative operations. In short, scriptlets can perform any operation permitted by the language in which it is written. Scriptlets may or may not produce output to the output stream.  <li>Expressions, which have the syntax <i>&lt;%= expression %&gt;</i>, contain a single expression written in the scripting language. The result of the evaluation of this expression must be able to be coerced into a <i>String</i> that is inserted into the output stream. Lines 20-23 in <A NAME="rl1"><A HREF="#l1">Listing One</A>, line 23 in <A NAME="rl2"><A HREF="#l2">Listing Two</A>, and line 32 in <A NAME="rl3"><A HREF="#l3">Listing Three</A> are all expressions.</ul><p>All text in the JSP page that does not fall into one of these categories (that is, has no meaning to the JSP engine) is called "fixed-template data" and is emitted unchanged to the output stream in the order in which it appears. All unshaded text in <A NAME="rl1"><A HREF="#l1">Listings One</A>, Two, and Three is fixed-template data.</p><h3>JavaServer Pages at Work</h3><p>The application I present here is a listbox from which you can select a month. After you select the month and click a button, a table containing a list of the articles in the 1999 issue of <i>Dr. Dobb's Journal</i> for the month you selected is displayed. If you fail to select a month, an error screen is displayed. If you select a month for which no data is available, a screen listing the available months is displayed.</p><p><A NAME="rf3"><A HREF="9912kf3.htm">Figure 3</A> shows the application's initial screen. <A NAME="rl4"><A HREF="#l4">Listing Four</A> (ArticleLister.html) is the HTML that generates this screen. The difference between the form tag <i>&lt;form method=''post'' action=''ArticleLister.jsp''&gt;</i> and other form tags presented up to now is that the target of the action is not a CGI program or a servlet but rather a JavaServer page -- it is the one in <A NAME="rl3"><A HREF="#l3">Listing Three</A>. </p><p>Every JSP page has a corresponding implementation class generated once by the JSP Engine and reused. The Engine starts by creating an empty translation unit consisting of six basic sections -- the implementation class declaration, declaration section, generated method signature, initialization section, main section, and generated method closure. It then adds to the first section the Java source code declaring the implementation class. The name of the class is implementation specific. The Engine next populates the initialization section with code that defines and initializes a number of implicit objects available to the JSP page. You have already seen one such object, the <i>request</i> object, on line 23 in <A NAME="rl2"><A HREF="#l2">Listing Two</A>. Other implicit objects are <i>response</i>, <i>pageContext</i>, <i>session</i>, <i>application</i>, <i>out</i>, <i>config</i>, and <i>page</i>. The Engine then creates a method signature and method closure for the <i>_jspService() method</i>. This method's signature looks like:</p><blockquote><p>void _jspService(ServletRequestSubclass 				    request, </p><p>  ServletRequestSubtype response) throws 			             IOException,</p><p>  ServletException {</p></blockquote><p>Next, the Engine processes the page source as follows:</p><p>1.	The first block of unshaded lines (lines 1-11) contains no syntax that is meaningful to the JSP engine This means that these lines are fixed-template data that is inserted unchanged onto the output stream. The JSP Engine inserts into the main section of the translation unit Java code that looks like: <i>out.print(fixed template data);</i></p><p>2.	Lines 12-14 all begin with the characters "<i>&lt;%@.</i>" This makes these lines directives. The first directive notifies the JSP Engine that the scripting language is Java and that all of the public types in the package "ddj" are accessible from the scripting language by their simple names rather than their fully qualified names. The second directive instructs the JSP Engine to generate code that makes the string "DDJ Article Lister V1.0" available for return by an implementation of the <i>Servlet.getServletInfo()</i> method. The third directive designates the page "errorpage.jsp" as the page that will handle exceptions thrown by the current page. If you examine <A NAME="rl5"><A HREF="#l5">Listing Five</A> (errorpage.jsp), you will see that line 12 contains the directive <i>''&lt;%@ isErrorPage=''true'' %&gt;</i>. This directive instructs the JSP Engine to make available to the scripting language of this page an implicit variable exception. This variable contains a reference to the <i>Throwable</i> thrown by the page in error. You can see that line 17 of errorpage.jsp contains an expression that invokes the <i>getMessage()</i> method of the <i>Throwable</i>. The <i>String</i> returned by this method is inserted into the output stream.</p><p>3.	Line 15 contains a <i>useBean</i> action. The term "useBean" is perhaps somewhat ambiguous because although this action can indeed refer to an instance of a JavaBean as expected by the <i>instantiate()</i> method of the <i>java .beans.Beans</i> class and as named by the <i>beanName</i> attribute, it can also refer to an instance of the class named by the class attribute. The <i>beanName</i> and class attributes of the "useBean" action are mutually exclusive. In both cases, a reference to the instance is assigned to the scripting variable whose name is the value specified by the <i>id</i> attribute. In the present case, a reference to an instance of <i>ddj.Articles</i> is assigned to the scripting variable <i>articles</i>. The code for the <i>ddj.Articles</i> class is in Articles.java (available electronically; see "Resource Center," page 5).</p><p>	  The <i>scope</i> attribute modifies the behavior of the <i>id</i> attribute. It determines the namespace and lifecycle of the object reference associated with the scripting variable named by the <i>id</i> attribute and also determines the API used to access the referenced object; see <A NAME="rt1"><A HREF="9912kt1.htm">Table 1</A>.</p><p>4.	Lines 17-22 contain a scriptlet that is a code fragment. Scriptlets are added unchanged to the main section of the translation unit.</p><p>5.	Line 23 is a directive that instructs the JSP Engine to process the JSP source in file NoData.jsp (available electronically) in the same way a C-language preprocessor would process a <i>#include</i> statement. By using the <i>include</i> directive you can place common code in a single file rather than having a copy of it in multiple places. It also makes the JSP page more readable.</p><p>6.	Lines 24-27 comprise a scriptlet containing the remainder of the Java code started in lines 17-22. This code is added to the main section of the translation unit.</p><p>7.	Lines 28-31 contain more fixed-template data that is processed as in paragraph 1. </p><p>8.	Line 32 is an expression. The Engine generates Java code that coerces the result of the expression to a <i>String</i> and inserts it into the output stream. This code looks like this: <i>out.print(Stringified expression);</i>.</p><p>9.	Lines 33-35 contain more fixed-template data that is processed as in paragraph 1.</p><p>10.	Line 36 is a declaration that makes the array <i>alternatingColors</i> available for subsequent use in line 41. The declaration is added to the declaration section of the translation unit.</p><p>11.	Lines 37-39 form a scriptlet containing part of the code required to iteratively process <i>articleList</i> and scriptlet code is added as is to the main section of the translation unit.</p><p>12.	Line 40 is fixed-template data that is processed as in paragraph 1.</p><p>13.	Line 41 is an expression for alternating the colors and is processed as in paragraph 8.</p><p>14.	Lines 42-44 are fixed-template data that is processed as in paragraph 1.</p><p>15.	Line 45 is an expression representing the title of the article in element <i>i</i> of the <i>articleList</i> array and is processed as in paragraph 8.</p><p>16.	Lines 46-49 are fixed-template data that are processed as in paragraph 1.</p><p>17.	Line 50 is an expression representing the author of the article in element <i>i</i> of the <i>articleList</i> array. It is processed as in paragraph 8.</p><p>18.	Lines 51-53 are fixed-template data that are processed as in paragraph 1.</p><p>19.	Lines 54-56 form a scriptlet to end the <i>for</i> loop started in line 38. The scriptlet code is processed as in paragraph 4.</p><p>20. Lines 57-61 are fixed-template data that are processed as in paragraph 1.</p><p>21.	Lines 62-64 are scriptlet code terminating the <i>else</i> statement in line 26. The scriptlet code is processed as in paragraph 4.</p><p>22.	Lines 65-66 are fixed-template data that are processed as in paragraph 1.</p><p>The Engine now concatenates all six sections to form a complete translation unit, which is passed to the Java compiler. If compilation is successful, a .class file containing the bytecode for the JSP Page implementation class is created. The most important component of this file is the <i>_jspService()</i> method that is invoked at each client request. The arguments to this method are <i>request</i> and <i>response</i>. These arguments are <i>subInterfaces</i> of <i>javax.servlet.ServletRequest</i> and <i>javax.servlet.ServletResponse</i>, respectively.</p><p>When you run the Article Lister application, the first time you select a month and click on the GET ARTICLES button you will experience a noticeable delay. This delay is the result of the translation/compilation process. Subsequent requests are faster because they involve only invocation of the <i>_jspService()</i> method.</p><p>Invocation of the <i>_jspService()</i> method results in the following:</p><ul>  <li>The <i>out.print()</i> statements are executed and they insert the fixed-template data in lines 1-11 into the output stream.  <li>The Java code resulting from lines 18-20 in <A NAME="rl3"><A HREF="#l3">Listing Three</A> invokes the <i>processRequest()</i> method of articles, which is an instance of <i>ddj.Articles</i> passing <i>request</i> (an implicit object) as an argument.  <li>Lines 137-139 in Articles.java (available electronically) invoke the <i>getParameter()</i> method of <i>request</i> passing it the argument ''<i>month</i>,'' which is the name of the <i>&lt;select&gt;</i> HTML element in line 21 of <A NAME="rl4"><A HREF="#l4">Listing Four</A> (ArticleLister.html). If the result is <i>null</i> (meaning no month was selected), an exception is thrown. This exception is caught by the code generated by the JSP Engine for errorpage.jsp (available electronically). This code sends HTML to the output stream resulting in the browser page in <A NAME="rf4"><A HREF="9912kf4.htm">Figure 4</A>. If the result is not <i>null</i>, <i>setMonth()</i> is invoked to save the value of the selected month in an instance variable for subsequent retrieval using the <i>getMonth()</i> method. The code resulting from lines 18-20 of <A NAME="rl3"><A HREF="#l3">Listing Three</A> invokes the <i>getMonth()</i> method of <i>articles</i> and passes the returned month to the <i>getArticles()</i> method, which returns a 2D <i>String</i> array containing a list of the articles and corresponding authors. If the length of the returned array is zero (meaning no data is available), the code generated from NoData.jsp (available electronically) is executed resulting in the browser page in <A NAME="rf5"><A HREF="9912kf5.htm">Figure 5</A>. Finally, the <i>for</i> loop generated from lines 37-39, 41, 45, 50, and 54-56 is executed. This loop creates a table, which is displayed in the browser page in <A NAME="rf6"><A HREF="9912kf6.htm">Figure 6</A>.</ul><h3>Conclusion</h3><p>To fully realize the power of JSP technology, imagine if you replaced the <i>ArticleLister</i> class with Enterprise Java Beans that communicated with large databases or other Enterprise resources (including other computers), and replaced the simple list of articles and their authors with the results of complex queries or transactions. </p><p>My discussion of JavaServer Pages is by no means exhaustive. Much more detailed information about JSP can be obtained from the JavaServer Pages Specification, available at http://java.sun.com/products/jsp/.</p><p><b>DDJ</b></p><H4><A NAME="l1">Listing One </H4><pre>   1| &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;   2| &lt;html&gt;   3| &lt;head&gt;   4| &lt;title&gt;JSP Example 1&lt;/title&gt;   5| &lt;meta http-equiv="Content-Type" content="text/html;    6|   charset=iso-8859-1"&gt;   7| &lt;meta name="Author" content="Paul Tremblett"&gt;   8| &lt;meta name="GENERATOR" content="Mozilla/4.51 [en] (X11; I;    9|   Linux 2.2.5-15 i586) [Netscape]"&gt;  10| &lt;/head&gt;  11| &lt;body bgcolor="#FFFFFF"&gt;  12| &lt;p&gt;  13| &lt;font face="Arial, Helvetica, sans-serif"&gt;&lt;b&gt;&lt;font size="+2"&gt;  14| JSP Example 1   15| &lt;/font&gt;&lt;/b&gt;&lt;/font&gt;  16| &lt;br&gt;  17| &lt;br&gt;  18| &lt;font face = "Arial, Helvetica"&gt;&lt;font size="+1"&gt;  19| It is now  20| &lt;%=  21| new java.util.GregorianCalendar(new java.util.SimpleTimeZone  22|    (-5*60*60*1000,"EDT")).getTime()  23| %&gt;<pre>  24| &lt;/font&gt;  25| &lt;/body&gt;  26| &lt;/html&gt;</pre><P><A HREF="#rl1">Back to Article</A></P><H4><A NAME="l2">Listing Two</H4><pre>   1| &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;   2| &lt;html&gt;   3| &lt;head&gt;   4| &lt;title&gt;JSP Example 2&lt;/title&gt;   5| &lt;meta http-equiv="Content-Type" content="text/html;    6|   charset=iso-8859-1"&gt;   7| &lt;meta name="Author" content="Paul Tremblett"&gt;   8| &lt;meta name="GENERATOR" content="Mozilla/4.51 [en] (X11; I;    9|   Linux 2.2.5-15 i586) [Netscape]"&gt;  10| &lt;/head&gt;  11| &lt;body bgcolor="#FFFFFF"&gt;  12| &lt;p&gt;  13| &lt;font face="Arial, Helvetica"&gt;&lt;b&gt;&lt;font size="+2"&gt;  14| &lt;center&gt;  15| JSP Example 2   16| &lt;/font&gt;&lt;/b&gt;&lt;/font&gt;&lt;br&gt;  17| &lt;br&gt;  18| &lt;font face = "Arial, Helvetica, sans-serif"&gt;&lt;font size="+1"&gt;  19| &lt;b&gt;&lt;u&gt;Some Info About Your Request:&lt;/u&gt;&lt;/b&gt;  20| &lt;/center&gt;  21| &lt;br&gt;  22| Protocol:   23| &lt;%= request.getProtocol() %&gt;<pre>  24| &lt;br&gt;  25| Remote Addr:   26| &lt;%= request.getRemoteAddr() %&gt;<pre>  27| &lt;br&gt;  28| Remote Host:   29| &lt;%= request.getRemoteHost() %&gt;<pre>  30| &lt;br&gt;  31| URL Scheme:   32| &lt;%= request.getScheme() %&gt;<pre>  33| &lt;br&gt;  34| Server Name:   35| &lt;%= request.getServerName() %&gt;<pre>  36| &lt;br&gt;  37| Server Port:   38| &lt;%= request.getServerPort() %&gt;<pre>  39| &lt;/font&gt;  40| &lt;/body&gt;  41| &lt;/html&gt;</pre><P><A HREF="#rl-1">Back to Article</A></P><H4><A NAME="l">Listings Three</H4><pre>   1| &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;   2| &lt;html&gt;   3| &lt;head&gt;   4| &lt;title&gt;DDJ Article Lister&lt;/title&gt;   5| &lt;meta http-equiv="Content-Type" content="text/html;    6|   charset=iso-8859-1"&gt;   7| &lt;meta name="Author" content="Paul Tremblett"&gt;   8| &lt;meta name="GENERATOR" content="Mozilla/4.51 [en] (X11; I;    9|   Linux 2.2.5-15 i586) [Netscape]"&gt;  10| &lt;/head&gt;  11| &lt;body bgcolor="#FFFFFF"&gt;  12| &lt;%@ page language="java" import="ddj.*" %&gt;  13| &lt;%@ page info="DDJ Article Lister V1.0" %&gt;  14| &lt;%@ page errorPage="errorpage.jsp" %&gt;  15| &lt;jsp:useBean id="articles" scope="request"   16|   class="ddj.Articles" /&gt;  17| &lt;%  18|   articles.processRequest(request);  19|   String month = articles.getMonth();  20|   String[][] articleList = articles.getArticles(month);  21|   if (articleList.length == 0) {  22| %&gt;  23| &lt;%@ include file = "NoData.jsp" %&gt;  24| &lt;%  25|   }  26|   else {  27| %&gt;<pre>  28| &lt;center&gt;  29| &lt;table cellspacing=0 cols=2 width="80%"&gt;  30| &lt;caption&gt;&lt;b&gt;&lt;font face="Arial, Helvetica"&gt;&lt;font size=+1&gt;  31| Dr. Dobb's Articles For The Month Of  32| &lt;%= month %&gt;<pre>  33| 1999  34| &lt;/font&gt;&lt;/font&gt;&lt;/b&gt;  35| &lt;/caption&gt;  36| &lt;%! String[] alternatingColors = {"#ffff99", "#ffcc99"}; %&gt;  37| &lt;%  38|     for (int i = 0; i &lt; articleList.length; ++i) {  39| %&gt;<pre>  40| &lt;tr bgcolor=  41| &lt;%=alternatingColors[i % 2] %&gt;<pre>  42| &gt;  43| &lt;td&gt;  44| &lt;b&gt;  45| &lt;%= articleList[i][0] %&gt;<pre>  46| &lt;/b&gt;  47| &lt;/td&gt;  48| &lt;td&gt;  49| &lt;b&gt;  50| &lt;%= articleList[i][1] %&gt;<pre>  51| &lt;/b&gt;  52| &lt;/td&gt;  53| &lt;/tr&gt;  54| &lt;%  55|     }  56| %&gt;<pre>  57| &lt;/table&gt;  58| &lt;form method=get action="ArticleLister.html"&gt;  59| &lt;input type=submit name="submit" value="BACK"&gt;  60| &lt;/form&gt;  61| &lt;/center&gt;  62| &lt;%  63|   }  64| %&gt;<pre>  65| &lt;/body&gt;  66| &lt;/html&gt;</pre><P><A HREF="#rl3">Back to Article</A></P><H4><A NAME="l4">Listing Four</H4><pre>&lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;DDJ Article Lister&lt;/title&gt;&lt;meta http-equiv="Content-Type" content="text/html;   charset=iso-8859-1"&gt;&lt;meta name="Author" content="Paul Tremblett"&gt;&lt;meta name="GENERATOR" content="Mozilla/4.51 [en] (X11;   I; Linux 2.2.5-15 i586) [Netscape]"&gt;&lt;/head&gt;&lt;body bgcolor="#FFFFFF"&gt;&lt;p&gt;&lt;font face="Arial, Helvetica, sans-serif"&gt;&lt;b&gt;&lt;font size="+2"&gt;&lt;center&gt;DDJ Article Lister&lt;/font&gt;&lt;/b&gt;&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;font face = "Arial, Helvetica, sans-serif"&gt;&lt;font size="+1"&gt;Select a month from the list below:&lt;form method="post" action="ArticleLister.jsp"&gt;&lt;select name="month" size=4&gt;&lt;option value="January"&gt;January&lt;option value="February"&gt;February&lt;option value="March"&gt;March&lt;option value="April"&gt;April&lt;option value="May"&gt;May&lt;option value="June"&gt;June&lt;option value="July"&gt;July&lt;option value="August"&gt;August&lt;option value="September"&gt;September&lt;option value="October"&gt;October&lt;option value="November"&gt;November&lt;option value="December"&gt;December&lt;/select&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;input type="submit" name="submit" value="GET ARTICLES"&gt;&lt;/form&gt;&lt;/center&gt;&lt;/body&gt;&lt;/html&gt;</pre><P><A HREF="#rl4">Back to Article</A></P><H4><A NAME="l5">Listing Five</H4><pre>&lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;DDJ Article Lister&lt;/title&gt;&lt;meta http-equiv="Content-Type" content="text/html;   charset=iso-8859-1"&gt;&lt;meta name="Author" content="Paul Tremblett"&gt;&lt;meta name="GENERATOR" content="Mozilla/4.51 [en] (X11; I;   Linux 2.2.5-15 i586) [Netscape]"&gt;&lt;/head&gt;&lt;body bgcolor="#ff0000"&gt;&lt;%@ page isErrorPage="true" %&gt;&lt;center&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; Error: &lt;%= exception.getMessage() %&gt;&lt;/h1&gt;&lt;form action="ArticleLister.html"&gt;&lt;input type="submit" value="Try Again"&gt;&lt;/form&gt;&lt;/CENTER&gt;&lt;/body&gt;&lt;/html&gt;</pre><P><A HREF="#rl5">Back to Article</A></P><HR><I>Copyright &copy; 1999, Dr. Dobb's Journal</I><BR>
</body></html>