<html><head><title>Dec99: XFDL: The Extensible Forms Description Language</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>XFDL: The Extensible Forms Description Language</h1><p><i>Dr. Dobb's Journal</i> December 1999</p><h2>An XML-based  forms language  for e-commerce</h2><h3>By John Boyer</h3><I>John is a software development manager at UWI.com and can be contacted at jboyer@uwi.com.</I><hr><a name="rs1"><a href="9912gs1.htm">The Digital Signature Problem</a><br><hr><p>The most important aspect of web-based e-commerce is the formulation of electronic records that achieve transaction nonrepudiation through the proper use of digital signatures. Other quintessential needs of e-commerce include human readability, publicly accessible open standards, precision layout and fine-grain presentation logic typical of dense business and government forms, and the ability to extend the language to express all aspects of records management, such as the representation of server-side business logic.</p><p>The Extensible Forms Description Language (XFDL) is an XML extension language that addresses these key issues involved with doing electronic commerce on the Web. A current copy of the XFDL specification appears as a proposal on the W3C web site (http://www.w3.org/TR/ NOTE-XFDL/). In this article, I'll discuss how e-commerce needs affected the design of XFDL, and describe the actual structure of XFDL markup. More on XFDL is available in a paper I coauthored with B. Blair entitled, "XFDL: Creating Electronic Transactions Records Using XML" (<i>Proceedings of Eighth Annual World Wide Web Conference</i>, May 1999).</p><DDJADVERTISEMENT INLINE><p>Although UWI.com (the company I work for) was the driving force behind XFDL, the language is an open standard and UWI.com has placed no intellectual property rights on it. UWI.com does provide an API that reads and writes XFDL, performs computes, creates and checks digital signatures, and enables Get/Set/Search capabilities on the nodes of the parse tree. </p><p>UWI.com also provides a trial version of its XFDL viewer at http://www.uwi.com/ products/. The viewer operates both directly in the web browser and standalone. The page also provides links to many example forms, or you could write your own with either a text editor or a trial version of the XFDL visual forms designer.</p><p>Third parties support XFDL insofar as they support XML, or by distributing the viewer and utilizing the API and/or UWI.com's prebuilt database and workflow integration products to create application-specific behaviors. There is usually no need to write much custom code -- just write the XFDL forms. Furthermore, implementors can put custom Java classes right into forms if necessary, and those classes can call the UWI.com API. Hence, XFDL is not limited by XML. </p><h3>The Origin of XFDL</h3><p>Work on XFDL began in 1993 with a project known as Masque, which happened to be the name of the University of Victoria computer on which the project started. The language had many structural similarities to XML, but lacked the ability to express computations and deep hierarchy. The language was redesigned in 1996 to address these shortcomings, and it received the more ambitious title "Universal Forms Description Language" (UFDL). XML became a W3C recommendation in 1998, and XFDL represents a subsequent migration of the key ideas of UFDL into an XML syntax. At the time, UFDL addressed all of the e-commerce needs described earlier except that it is not based on a Standard. For anyone in the UFDL problem space, this move to an XML syntax represented a significant advantage. Although UFDL was already in a human readable format with a C++/Java-like syntax, the importance of being based on the XML Standard should not be undervalued. Due to the rapidly growing base of software and programming skills for processing XML documents, any XML-based syntax can be processed less expensively and can also be interoperable with a wider range of software. Furthermore, even if it becomes necessary to migrate to other software or formats in the future, this can be done without relying on a specific vendor's products or highly specialized skill sets.</p><p>In turn, methodologies developed for UFDL were quite new, and sometimes controversial, for an XML markup language. This includes the document centrism, declarative presentation logic, the size and scope of XFDL as well as its overlap with numerous other W3C efforts, and the fact that a single Document Type Definition (DTD) cannot be created for all XFDL forms.</p><p>Document centrism is unusual for web protocols, but it is the key to reliable transaction records. Most web protocols achieve flexibility through a more stratified approach, yet this flexibility is precisely what cannot exist for a transaction record. The full nature of the agreement must be captured, and it must be immutable once signed.  Lending credence to XFDL's approach is  PDF Version 4.0. Although PDF suffers from structural inaccessibility (opaqueness) and other problems, it does at least apply digital signatures to the whole PDF document, which includes the presentation layer (see the accompanying text box entitled "The Digital Signature Problem").</p><p>XFDL has a declarative style for input validation/formatting and for computations. A markup language should be more declarative, yet both HTML forms and PDF rely on JavaScript for these functions. This seems to be a matter of expedience rather than design preference. There is a strong analogy between form calculations and spreadsheet calculations. Imagine how much less effective spreadsheets would be if the computations were expressed in the imperative rather than the declarative. Procedural programming would be no more difficult in small spreadsheets, but business problems don't tend to be small, and assertion-based computations are certainly preferable for spreadsheets that occur in practice because the user doesn't have to rewrite a piece of the inference engine every time the spreadsheet changes. The same is true of forms.</p><p>Another controversy surrounding XFDL is its size. One measure of its size is the number of other W3C proposals, works-in-progress, and recommendations that seem to overlap with XFDL. XFDL can be improved in many ways, but it is essentially a complete solution to a large problem. Many prior specifications are smaller because they solve a smaller problem, which is natural because the origin of XFDL predates XML-based work by several years. Moreover, XFDL overlaps certain other specifications, but trying to create an e-commerce solution from the overlapping bits simply creates a patchwork that does not have the design consistency of a work engineered to solve problems in the e-commerce space. One good example is MathML, the Mathematical Markup Language (http://www.w3 .org/TR/WD-math-970515/). This is a fine language for complex mathematical formulae found in mathematics, but not appropriate for business applications. Finally, there is the matter of a document type definition (DTD). Although a DTD could be created for each XFDL form, no single DTD can validate all XFDL forms. DTDs have the expressive power of a regular expression, so infix mathematical expressions (which are recognized by parsers, not lexical analyzers) can only be validated as character data. Other obstacles to creating a single XFDL DTD exist, but by far the largest problem is that XFDL is, itself, extensible. Most XML extension languages have a predefined list of keywords to use as element tags and attributes, but XFDL allows the definition of custom items, options, and compute functions to fill the e-commerce need to express business logic and application-specific functions beyond the core XFDL language. DTDs cannot describe extensible XML languages.</p><h3>Structural Overview of XFDL</h3><p>The root element of an XFDL form is surrounded by &lt;XFDL&gt; and &lt;/XFDL&gt; tags. The XFDL element has a mandatory version parameter that indicates the XFDL language version to which the form complies. This controls the XFDL keywords that are available. <A NAME="rl1"><A HREF="#l1">Listing One</A> is an example of this; its comments also state that the content of the XFDL element can include form global options followed by one or more pages.</p><h3>Pages and Items</h3><p>The structure of form global options is the same as regular options. Each page element is surrounded by &lt;page&gt; and &lt;/page&gt; tags, respectively. Each page has a mandatory attribute called a "sid" (short for "scope identifier") and provides a page name that is unique within the surrounding XFDL element. Each page has a body of zero or more page global options followed by zero or more item elements. Like form globals, page globals have the same structure as regular options. Each item represents a single GUI object or an item that is not directly visible, such as a digital signature or a binary image enclosure (expressed in Base-64; see http://ds.internic .net/rfc/rfc2045.txt/). The tag name of the item element indicates the type of item, such as a field, label, button, checkbox, popup, and so on. Each item also contains a <i>sid </i>attribute that gives it a name that is unique within its page. <A NAME="rl2"><A HREF="#l2">Listing Two</A> is an example of these ideas.</p><p>Each XFDL page, item, and option has a scope identifier. Pages and items specify their scope identifier in the value of the <i>sid</i> attribute. Options do not require the <i>sid</i> attribute because the option's tag name is expected to be unique within the scope of its parent element. According to Tim Bray, coeditor of the XML 1.0 specification, this is a necessary inconsistency as it causes XFDL to have a look-and-feel that XML users have come to expect.</p><h3>Relative Scope</h3><p>XML contains a facility for uniquely identifying any markup element, but the identifier must be globally unique within the entire document, so it is not scalable to the large forms typically found in business and government. Relative scoping is quite helpful when trying to cut-and-paste groups of items or options while building a form, and it is particularly useful when the cut-and-paste occurs during the form's run time, such as dynamic duplication of a row of items in a purchase order.</p><h3>Options</h3><p>The primary role of form global options is to provide defaults that are also overridden by page globals (although information about the whole form can be stored in form global options). Likewise, the primary role of page globals is to provide defaults for the options appearing in each item, which the item can override when necessary. For example, a page or form global option for font information can specify the typeface, point size, and special characteristics (such as bold) of the default font used by all items. This prevents each item from needing to specify options unless special effects are required. Page globals can also carry page-specific information, like the background color to use on the form. Furthermore, global options like <i>bgcolor</i> can double as defaults when it makes sense. For example, the global <i>bgcolor</i> also provides the default background color for static labels, but items that can take input, such as fields and popups, have a default background color of white.</p><p>Options come in two basic varieties: those with element content that is simple character data, and those with element content that contains subelements. The latter are called arrays in XFDL, and  are distinguished by a content attribute with a value of array. <A NAME="rl3"><A HREF="#l3">Listing Three</A> shows option examples for the TITLE label from <A NAME="rl2"><A HREF="#l2">Listing Two</A>.</p><p>In the options of <A NAME="rl3"><A HREF="#l3">Listing Three</A>, it never seems to make sense to have more than one copy of any of these options. Why state the justification or the size more than once? This is generally true of XFDL options, and this is why their tag names suffice as scope identifiers. On the other hand, a form typically requires many fields, labels, and so on, which is why items require the <i>sid</i> attribute.</p><p>The other thing to notice about array options is that their subelements do not need to have unique identifiers. Although the <i>size</i> option shows array elements that do have names, it is most often the case in XFDL that array elements do not need specific names because computations can refer to them by ordinal position, just like arrays in other languages. When a unique name is not used, the array element tag is simply <i>ae</i>, as in the <i>fontinfo</i> options in <A NAME="rl3"><A HREF="#l3">Listing Three</A>. For example, a computation can obtain the typeface of the label's font using <i>TITLE.fontinfo[0]</i>, whereas the label width can be referred to using either <i>TITLE.size[width]</i> or <i>TITLE.size[0]</i>.</p><h3>Formatting</h3><p>XFDL's <i>format</i> option reduces server-side processing as well as network communication of erroneous forms by providing both input validation and input formatting. In <A NAME="rl4"><A HREF="#l4">Listing Four</A>, the HOURS field contains a <i>format</i> option that constrains the input to be an integer between 1 and 99. The range requires a scope identifier not because it is a subarray, but rather, to alleviate order dependence within the <i>format</i> option. Field input can also be restricted to floating-point values, dollar values, and dates. Templates offer more exotic field input validators for objects such as phone numbers and zip codes. The RATE field in <A NAME="rl4"><A HREF="#l4">Listing Four</A> shows a modifier (<i>add_ds</i>) that reformats the user input--in this case, to add a dollar sign if one was not provided.</p><h3>Computes</h3><p>It may seem odd that XFDL arrays require a content attribute since they seem distinguishable by the fact that they contain subelements rather than simple character data. However, the actual reason for the content attribute is that XFDL uses XML element depth for different reasons, including to express a computation for character data. The field in <A NAME="rl5"><A HREF="#l5">Listing Five</A> declares the value of WEEKLYCHECK to be the number of hours worked multiplied by the rate of pay, as indicated by user input. The subelement <i>cval</i> contains the current value of the computation, and the compute element contains the <i>infix</i> expression. As the user enters or changes the values in HOURS and RATE, the <i>cval</i> is automatically updated.</p><p>There are two additional important properties of computes. First, if a digital signature is specified to include the field WEEKLYCHECK, then once a user affixes a signature, the compute is locked and does not continue updating the <i>cval</i>. This is part of how XFDL captures a snapshot of the transaction. Second, suppose there was another field in the form we have been incrementally building, and suppose that it needed the value of the weekly check, say, to compute the income tax withholding. Even though the current value is in the subelement <i>cval</i>, you would still use the reference WEEKLYCHECK.value. This allows for seamless integration of computed and uncomputed elements.</p><h3>Decision Logic,  Nested Decisions, and CDATA</h3><p>XFDL supports the standard comparators and logical operators as well as the ternary decision operator. These features can be used to enhance the computation in <A NAME="rl5"><A HREF="#l5">Listing Five</A> by, for example, adding a calculation for overtime. The compute in <A NAME="rl6"><A HREF="#l6">Listing Six</A> replaces the compute in <A NAME="rl5"><A HREF="#l5">Listing Five</A>. It declares that the value of WEEKLYCHECK is either based on a regular time formula or an overtime formula based on a condition that expresses whether overtime was performed.</p><p>Whitespace can appear anywhere in the compute expression. As a matter of style, I tend to put the conditional on one line, then start the consequent on a new line with the question mark, and I put the else part on another line starting with the colon. This style is based on writing nested decision statements, where question marks and colons are indented two spaces.</p><p>The use of the XML CDATA feature is required for many decision-based computes. The reason is that "&lt;" and "&amp;" are normally forbidden characters in XML element content because they denote the beginning of start or end tags or the beginning of entity references. This conflicts with the less-than and less-than-or-equal-to operators (&lt;,&lt;=) and the logical and operator (&amp;&amp;).</p><h3>Parsing Requirements of Computes</h3><p>The syntax rules for XFDL state that the compute element content can either contain a mathematical expression or a decision statement, yet the starting conditional expression can also begin with an arbitrarily long mathematical expression. For example, a compute could contain <i>x.value+y.value</i>, or it could contain <i>x.value+y.value&lt;''0'' ? x.value : y.value</i>. This inability to choose the language rule based on the left-most symbol implies that no recursive descent parser can be created for XFDL computes; an SLR(1) parser or better is required. However, note that not all XML processors require an auxiliary compute parser; they can derive useful information from XFDL forms by simply treating the computes as character data.</p><h3>Events, Functions, and Extensibility</h3><p>XFDL also supports events such as <i>focused, activated, </i>and <i>mouseover </i>as well as functions like <i>toggle()</i> and <i>set()</i> for detecting or causing these events. Many other functions are defined for string manipulations, math and financial calculations, and so on. Finally, the XFDL computation system continues to work in custom item and option elements that hold application-specific (often server-side) business logic.</p><h3>Digital Signature Filters</h3><p>A digital signature must be able to omit specific parts of the document, especially in multiple signature scenarios. A simple example of this is omitting the "office use only" section of a form from the signature of the person who fills out the form (and the "office" could sign the remaining section plus the first signature). Another example would be code signing a form; that is, using a signature to guarantee the operation of the form by signing its GUI layout and computational expressions while omitting the computations' current values and the tags that will store user input. For these purposes, XFDL includes signature filters that allow the form developer to define precisely which form elements are kept in or omitted from a signature.</p><h3>Conclusion</h3><p>Hopefully, design features of XFDL such as document centrism, assertion-based computations, and digital signature filters will become the expected standard in all future transaction processing applications.</p><p></p><p><b>DDJ</b></p><H4><A NAME="l1">Listing One</H4><pre>&lt;?xml version="1.0"?&gt;&lt;XFDL version="4.0.0"&gt;    &lt;!-- Form Global Options --&gt;    &lt;!-- One or more pages --&gt;&lt;/XFDL&gt;</pre><P><A HREF="#rl1">Back to Article</A></P><H4><A NAME="l2">Listing Two</H4><pre>&lt;?xml version="1.0"?&gt;&lt;XFDL version="4.0.0"&gt;    &lt;!-- Form Global Options --&gt;    &lt;page sid="PAGE1"&gt;        &lt;!-- Page Global Options --&gt;        &lt;label sid="TITLE"&gt;            &lt;!-- Options --&gt;        &lt;/label&gt;        &lt;field sid="HOURS"&gt;            &lt;!-- Options --&gt;        &lt;/field&gt;        &lt;field sid="RATE"&gt;            &lt;!-- Options --&gt;        &lt;/field&gt;        &lt;field sid="WEEKLYCHECK"&gt;            &lt;!-- Options --&gt;        &lt;/field&gt;    &lt;/page&gt;&lt;/XFDL&gt;</pre><P><A HREF="#rl2">Back to Article</A></P><H4><A NAME="l3">Listing Three</H4><pre>&lt;label sid="TITLE"&gt;    &lt;value&gt;Salary Calculator&lt;/value&gt;    &lt;fontinfo content="array"&gt;        &lt;ae&gt;Times&lt;/ae&gt;        &lt;ae&gt;24&lt;/ae&gt;        &lt;ae&gt;bold&lt;/ae&gt;    &lt;/fontinfo&gt;    &lt;size content="array"&gt;        &lt;width&gt;50&lt;/width&gt;        &lt;height&gt;1&lt;/height&gt;    &lt;/size&gt;    &lt;justify&gt;center&lt;/justify&gt;&lt;/label&gt;</pre><P><A HREF="#rl3">Back to Article</A></P><H4><A NAME="l4">Listing Four</H4><pre>&lt;field sid="HOURS"&gt;    &lt;label&gt;Number of Hours:&lt;/label&gt;    &lt;value&gt;40&lt;/value&gt;    &lt;format content="array"&gt;        &lt;ae&gt;integer&lt;/ae&gt;        &lt;range content="array"&gt;            &lt;ae&gt;1&lt;/ae&gt;            &lt;ae&gt;99&lt;/ae&gt;        &lt;/range&gt;    &lt;/format&gt;&lt;/field&gt;&lt;field sid="RATE"&gt;    &lt;label&gt;Pay Rate:&lt;/label&gt;    &lt;value&gt;$7.75&lt;/value&gt;    &lt;format content="array"&gt;        &lt;ae&gt;dollar&lt;/ae&gt;        &lt;ae&gt;add_ds&lt;/ae&gt;    &lt;/format&gt;&lt;/field&gt;</pre><P><A HREF="#rl4">Back to Article</A></P><H4><A NAME="l5">Listing Five</H4><pre>&lt;field sid="WEEKLYCHECK"&gt;    &lt;editstate&gt;readonly&lt;/editstate&gt;    &lt;value content="compute"&gt;        &lt;cval&gt;$310.00&lt;/cval&gt;        &lt;compute&gt;            HOURS.value*RATE.value        &lt;/compute&gt;          &lt;/value&gt;    &lt;format content="array"&gt;        &lt;ae&gt;dollar&lt;/ae&gt;        &lt;ae&gt;add_ds&lt;/ae&gt;    &lt;/format&gt;&lt;/field&gt;</pre><P><A HREF="#rl5">Back to Article</A></P><H4><A NAME="l6">Listing Six</H4><pre>&lt;compute&gt;&lt;![CDATA[  HOURS.value &lt;= "40"  ? HOURS.value*RATE.value  : "40"*RATE.value +     (HOURS.value-"40")*"1.5"*RATE.value]]&gt;&lt;/compute&gt;      </pre><P><A HREF="#rl6">Back to Article</A></P><HR><I>Copyright &copy; 1999, Dr. Dobb's Journal</I><BR>
</body></html>