<html><head><title>Nov99: Programmer's Toolchest</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>XML and CORBA</h1><p><i>Dr. Dobb's Journal</i> November 1999</p><h2>The XML/IT toolkit  combines the best of two worlds</h2><h3>By Dirk Hamstra</h3><I>Dirk works at Vitria Technology Inc. and can be reached at dhamstra@vitria.com.</I><hr><p>The eXtended Markup Language (XML) provides great flexibility when it comes to data description and data structure. Applications need more than just data, however. Services are key application components. In this article, I'll discuss how XML, in combination with the Common Object Request Broker Architecture (CORBA), can provide an application-development environment that is flexible and rich in services.</p><p>The key benefits CORBA provides are the separation of interface and implementation and the abstraction of common application services. Services -- security, management, transactions, and the like -- are lifted out of the application logic and implemented in separate processes. XML, on the other hand, focuses on data description and structure. XML is actively used in such areas as data interchange, cross-format document management, stream-based representation of complex objects, and semantic bridging.</p><DDJADVERTISEMENT INLINE><p>Although XML is not a replacement for either CORBA or COM+, some people still view it as infinitely flexible middleware. Consequently, there are a number of common misconceptions about XML.</p><ul>  <li>XML is not middleware. XML deals with the representation and structure of data. CORBA is a distributed object standard. Data representation is an important but small part of a distributed application.   <li>XML is not an ORB. This is mostly "marketingware." One XML-vendor, in fact, promotes its XML-based software as a replacement for an ORB. Upon close inspection, however, they use XML in a role similar to Common Data Representation (CDR) in Internet Inter-ORB Protocol (IIOP).  <li>XML and HTTP are not the same. A protocol must fit the usage profile of an application. Some parts of an application may require a synchronous connection while other parts are better served using a queuing or multicast mechanism. Ideally, message delivery is based on message properties that are set and resolved at run time. XML can flow over any transport mechanism. This means that XML data can be shipped over protocols such as MQ or IIOP, in addition to HTTP.  <li>XML does not handle all data types. All data in XML is represented as strings. This helps human readability, but reduces performance for nonstring data types. In general, XML's type system is primitive, which makes it useful on the Web, but not suitable for manipulating complex, typed data. Through the combination of Interface Development Language (IDL) and IIOP, CORBA provides a variety of data types (integer, string, octet, sequence, and the like).   <li>XML is not a better IDL. For all practical purposes, interfaces can be defined in any arbitrary language. Replacing IDL with XML is just a swap of languages. If you compare <A NAME="rl1"><A HREF="#l1">Listing One</A> (the interface in XML) with <A NAME="rl2"><A HREF="#l2">Listing Two</A> (the interface in IDL), for instance, you'll see that trading IDL for XML is not useful, since XML is not as compact and precise as IDL. </ul><p>Because CORBA and XML are complementary technologies, there are a number of benefits you realize by combining the two technologies, such as:</p><ul>  <li>Replacement of CDR. XML overlaps with CDR. Replacing CDR with XML allows for more flexibility in the representation of data above and beyond the data types currently available. XML can also reduce problems with IIOP versioning.  <li>XML+IDL. Using XML and IDL in combination provides for the discovery of object structure and methods at run time, rather than generating compilable code. Benefits include economical, efficient, and extensible requests and responses for dynamic object creation and method invocation.  <li>Object serialization. XML is a good language to stream out objects. XML is close to a bytestream. Shipping flattened XML objects using a CORBA infrastructure is a natural match.  <li>Rich data. A CORBA call can return an XML document with, for example, monitoring statistics, including object references in the data. This allows more flexible and comprehensive interaction between software processes.</ul><h3>CORBA+XML: An Example</h3><p>In general, using CORBA and XML together means that the input and output of a CORBA method call is expressed in XML. To illustrate this process, I'll use an XML formatting that's based on the functionality of a Java tool called XML|IT from CareFlow (http://www.careflow.com/). XML|IT allows automatic tagging of the results returned from calls to CORBA-based services. It also includes utilities that support conversion of XML-tagged documents to Java structures, and vice versa.</p><p>In addition to assuming the existence of CORBA-based back-end services, XML|IT assumes the use of IDL-to-Java compilers to generate Java stubs and skeletons, and uses CORBA's Dynamic Invocation Interface standards specification of CORBA. The main client program routine (<i>DIICall</i>) can be embedded inside other Java-based clients, CGI scripts, or Java servlets. For example, to convert a Java structure to XML, you would call XML|IT's JavaToXML from within Java using <A NAME="rl3"><A HREF="#l3">Listing Three</A>. As a result, an XML representation of <i>bankObj</i> will be put in the <i>String</i> called <i>xml.</i> Mapping arrays to XML is handled through the use of a dimension attribute. <A NAME="rl4"><A HREF="#l4">Listing Four</A> is the Java representation, while <A NAME="rl5"><A HREF="#l5">Listing Five</A> is the converted XML representation.</p><p>For the conversion to and from Java, XML|IT makes use of the Fascade Pattern combined with Java reflection. The Interface <i>com.careflow.xml.Accessor</i> implements the Fascade Pattern. The <i>Accessor</i> provides a unified interface to elements that may have as a parent an <i>Array</i>, a plain structure, or no object at all. The class <i>com.careflow.xml.ReflectionTraverser</i> iterates over all the elements of an <i>Object</i> by reflection. Each element is visited by the given implementation of <i>ReflectionVisitor</i>. During a <i>ReflectionTraversal</i>, the current node may be a field in a structure, an element in an array, or the root element. The <i>Accessor</i> provides a common interface to these three cases, allowing them to be conveniently handled by the <i>ReflectionVisitor</i> and the <i>ReflectionTraverser</i>. </p><p>To invoke a method on a CORBA service, the input XML document must be formatted using some general guidelines. <A NAME="rl6"><A HREF="#l6">Listing Six</A> exemplifies this. The XML document can be divided into three sections.</p><ul>  <li>The first part is contained between the &lt;servicename&gt; tags and describes the location and name of the CORBA service that will be used. <A NAME="rl6"><A HREF="#l6">Listing Six</A> shows how to make a dynamic invocation. Static calls do not need to reference the implementation repository.  <li>A section detailing the method invocation follows the service specification.  <li>The last part delineated by &lt;returntype&gt; specifies the data type containing the results of the invocation.</ul><p><A NAME="rl6"><A HREF="#l6">Listing Six</A> shows a CORBA method invocation expressed in XML, specifically the invocation of the method <i>accountList</i> on a service called <i>Bank</i>, located on machine <i>ChicoSpuugbeest</i>. The function takes two parameters, <i>customerId</i> and <i>accountNo</i>. The result of the operation will be returned in a sequence called <i>CustomerAccountSequence</i>.</p><p><A NAME="rf1"><A HREF="9911jf1.htm">Figure 1</A> provides a generic view of a system that implements the <i>accountList</i> function. The function is implemented by a CORBA service called <i>accountView</i>. The associated IDL for the service can be expressed as in <A NAME="rl7"><A HREF="#l7">Listing Seven</A>. How the <i>accountView</i> service is implemented is hidden from the requestor. Execution of the <i>accountList</i> operation may involve multiple transactions to different systems to build the list of accounts. Also, because account information can be sensitive, a security service may be used to authenticate and authorize the request. The transport medium for XML is also open. The request could come from a browser that passes the XML flow, or from a message queue to the CORBA service.</p><h3>Conclusion</h3><p>CORBA and XML are different, complementary pieces of the same puzzle. CORBA provides a solid distributed framework with rich application services. XML gives you a flexible, dynamic data representation and structure. XML is intended for the storage and manipulation of text comprising human-readable documents such as web pages, while architectures such as CORBA tie together cooperating computer applications exchanging data that will probably never be read by anyone. Neither of these technologies will replace the other, but instead they will increasingly be used together.</p><p></p><p><b>DDJ</b></p><H4><A NAME="l1">Listing One</H4><pre>&lt;module&gt;    &lt;name&gt; banking &lt;/name&gt;    &lt;interface&gt;        &lt;name&gt; savings_account &lt;/name&gt;        &lt;inherits&gt; bank_account &lt;/inherits&gt;        &lt;operation&gt;            &lt;name&gt; deposit &lt;/name&gt;            &lt;param&gt;                &lt;name&gt; amount &lt;/name&gt;                &lt;type&gt; money &lt;/type&gt;                &lt;direction&gt; in &lt;/direction&gt;                        &lt;/param&gt;        &lt;/operation&gt;    &lt;/interface&gt;&lt;/module&gt;</pre><P><A HREF="#rl1">Back to Article</A></P><H4><A NAME="l2">Listing Two</H4><pre>module banking{        interface savings_account : bank_account                {            void deposit (in money amount);        };};</pre><P><A HREF="#rl2">Back to Article</A></P><H4><A NAME="l3">Listing Three</H4><pre>//given Object bankObjJavaToXML translator=new JavaToXML();String xml=translator.toXML(bankObj)</pre><P><A HREF="#rl3">Back to Article</A></P><H4><A NAME="l4">Listing Four</H4><pre>String[][] accountInfo=new String[1][1];accountinfo[0][0]="Red R Hood";System.out.println(xml.toXML(accountInfo));</pre><P><A HREF="#rl4">Back to Article</A></P><H4><A NAME="l5">Listing Five</H4><pre>&lt;java.lang.String dimension=2 length=1&gt;    &lt;item length=1&gt;        &lt;item&gt; Red R Hood &lt;/item&gt;    &lt;/item&gt;&lt;/java.lang.String&gt;</pre><P><A HREF="#rl5">Back to Article</A></P><H4><A NAME="l6">Listing Six</H4><pre>&lt;servicename&gt;:\ChicoSpuugBeest:ddjdem:::IR:Bank&lt;/servicename&gt;&lt;method&gt;accountList&lt;/method&gt;&lt;argument&gt;     &lt;arg flag=in&gt;        &lt;customerId&gt;123456ABD&lt;/customerId&gt;     &lt;/arg&gt;     &lt;arg flag=in&gt;                &lt;accountNo&gt; * &lt;/accountNo&gt;     &lt;/arg&gt;&lt;/argument&gt;&lt;returntype&gt;CustomerAccountSeq&lt;/returntype&gt;</pre><P><A HREF="#rl6">Back to Article</A></P><H4><A NAME="l7">Listing Seven</H4><pre>interface accountView    {        exception reject {             string reason; // error text};                attribute string userId;                attribute string password;                attribute string customerId;                attribute float accountNo;                account accountLogin (in userId, inpassword)                raises (reject, invalidLogon);                account accountList (in customerId, in accountNo,                    out sequence CustomerAccountSequence)                    raises (reject, invalidCustomerID);    };</pre><P><A HREF="#rl7">Back to Article</A></P><HR><I>Copyright &copy; 1999, Dr. Dobb's Journal</I><BR>
</body></html>