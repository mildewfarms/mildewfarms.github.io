<html><head><title>Nov99: Programmer's Bookshelf</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>A Joke Too Far</h1><p><i>Dr. Dobb's Journal</i> November 1999</p><h3>By Gregory V. Wilson</h3><I>Greg is the author of Practical Parallel Programming (MIT Press, 1995), and coeditor with Paul Lu of Parallel Programming Using C++ (MIT Press, 1996). Greg can be reached at gvwilson@interlog.com.</I><hr><h4><br><b><i>Mr. Bunny's  Big Cup o' Java</b><br>Carlton Egremont III</i><br>Addison Wesley Longman, 1999<br>115 pp., $14.95<br>ISBN 0-201-61563-0<br><br><b><i>The Inmates Are  Running the Asylum</i></b><br><i>Alan Cooper</i><br>Sams, 1999<br>261 pp., $25.00<br>ISBN 0-672-31649-8<br><br><b><i>Ready-to-Run Java 3D</i></b><br><i>Kirk Brown and Daniel Petersen</i><br>John Wiley &amp; Sons, 1999<br>400 pp., $44.95<br>ISBN 0-471-31702-0<br><br><b><i>The Java 3D API Specification</i></b><br><i>Henry Sowizral, Kevin Rushforth, and Michael Deering</i><br>Addison Wesley Longman, 1998<br>482 pp., $39.95<br>ISBN 0-201-32576-4<br><br><b><i>Advanced CORBA  Programming with C++</i></b><br><i>Michi Henning and Steve Vinsoki</i> <br>Addison Wesley Longman, 1999<br>1083 pp., $54.95<br>ISBN 0-201-37927-9<br><br><b><i>Inside the JavaOS  Operating System</i></b><br><i>Tom Saulpaugh and Charles Mirho</i> <br>Addison Wesley Longman, 1999<br>184 pp., $29.95<br>ISBN 0-201-18393-5<br></h4><p>We've all been there, I suppose. You tell a joke, and everyone laughs, so you tell another, and another, until suddenly you realize that you've gone a joke too far. Unfortunately, a lot of software is like that (Emacs, anyone? Or Windows 2000?) -- and so are a lot of books.</p><p>A case in point is <i>Mr. Bunny's Big Cup o' Java</i>, by Carlton Egremont III, the sequel to <i>Mr. Bunny's Guide to ActiveX</i>. The latter (reviewed in our April 1999 issue) was hilarious, but <i>Mr. Bunny's Big Cup o' Java</i> falls completely flat, as if the author had used up all his good jokes. If you have the money to spend, buy a second copy of <i>ActiveX</i> to replace the one your office mates have "borrowed," rather than <i>Big Cup o' Java</i>.</p><DDJADVERTISEMENT INLINE><p>Alan Cooper's second book, <i>The Inmates Are Running the Asylum: Why High-Tech Products Drive Us Crazy and How to Restore the Sanity</i>, is definitely not "one too far" -- it makes too many important points about why software is hard to use for that to be the case. Cooper is the father of Visual Basic, and by all accounts (including the ones quoted in the front pages of his book) he is a very good user-interface designer. I learned a lot from <i>About Face</i>, and hoped that this one would be equally insightful and iconoclastic.</p><p>Well, iconoclastic it certainly is. Take the diagram on page 35, for example. It shows "power users," "computer literate users," and "naive users" stacked on top of each other, but is captioned "Euphemism Pyramid." As the accompanying text explains:</p><blockquote><p>"Naive user" is industry code for "stupid, incompetent user." And certainly these people are made to feel stupid, but they are not. It is the bad design of the interaction that is at fault. The apologists in the computer industry dismiss naive users as not significant, but that flies in the face of good sense. Why would a vendor write off the lion's share of the market? Because it removes the blame for failure from the executives and software engineers and places it squarely onto the shoulders of the innocent users...The phrase "computer literate user" really means the person has been hurt so many times that the scar tissue is thick enough so he no longer feels the pain.</p></blockquote><p></p><p>Bravo, Mister Cooper -- it's refreshing to hear someone finally say that the emperor's butt is showing. Cooper argues that most software is hard to use because most engineers are disdainful of the way most people think. The only way to fix what's fundamentally broken in so much of today's software is to give interaction designers as much real authority in the product development process as engineers.</p><p>Cooper's points are important, and he has a clearer view of our industry and profession than most writers. However, I think that the book's occasional glibness and one-sidedness weaken his case. For example, the two-dollar psychoanalysis of nerds on page 103 might be an accurate description of some engineers, but when applied to the profession as a whole, it becomes the kind of grossly misleading generalization that I associate with paradigm-shift-per-second marketing gurus. More troubling is the fact that he never discusses how the interaction-centered methods he advocates can go wrong. I understand how frustration with current practices can turn into stridency, but I think the major audience for this book would find even-handed exposition more persuasive than naked advocacy. I don't believe anyone's method works all of the time, and when someone suggests (even by omission) that theirs does, it makes me suspicious of everything else they've said. Despite this, I think that <i>Inmates</i> is an important book, and I hope that Cooper will turn his hand to writing a textbook one day. </p><p>Next in this month's pile are <i>Ready-to-Run Java 3D</i>, by Kirk Brown and Daniel Petersen, and <i>The Java 3D API Specifica</i>tion, by Henry Sowizral, Kevin Rushforth, and Michael Deering. Both books are about Java 3D, the 3D graphics entry in the JavaMedia suite of interfaces. As with the rest of Java, there is little in the library that is actually new. Instead, it repackages established technology (primarily OpenGL) for use in Java. The library includes the usual graphics primitives and transformations, along with behaviors, handlers for input devices, picking, and so on.</p><p>The first major difference between the two books is how much context each provides. Almost all of <i>The Java 3D API Specification</i> is devoted to a method-by-method description of the library's contents, while <i>Ready-to-Run</i> spends a bit more time showing how those methods can be stitched together. I wouldn't recommend trying to find your way around the former book unless you are already familiar with 3D computer graphics, but if you are, it's a handy reference and is refreshingly free of typos.</p><p>Which brings us to the other big difference between the two books: their quality. <i>Ready-to-Run</i> is, quite frankly, sloppy. The first figure is unreadable because of gratuitous 3D chart junk, matrices are laid out as ASCII art (honestly, how hard would it have been to make them look like proper mathematics?), Arthur Clarke is misquoted, someone's spellchecker has turned the "Locale" class into "Local" sporadically, and some of the listings include Sun's lengthy disclaimers verbatim, along with the source code that the reader is supposed to be interested in. And do we really need yet another slapdash description of how to nest applets in HTML documents for different browsers?</p><p>I really wish <i>Ready-to-Run</i> had been a better book, as I don't think novices will be able to make sense of the <i>API Specification</i>. As hardware graphics accelerators are getting cheaper, and 3D graphics are  growing more and more accessible, I hope its authors will try again.</p><p>Further down in my pile is Michi Henning and Steve Vinoski's <i>Advanced CORBA Programming with C++</i>. I've been waiting for this book for a while, and I can honestly think of nothing to complain about except its inordinate fondness for acronyms. It is well written, comprehensive, and contains lots of useful bits of code for its readers to study and copy. It isn't particularly easy going, but that is merely an honest reflection of the complexity of its subject. The book does not merely describe CORBA, it explains it -- why certain features were necessary compromises, for example, or what errors can be made when this or that feature is misused. I think this book is going to be as essential a part of CORBA programmers' lives as Stevens's <i>UNIX Network Programming</i> has been for everyone who has had to wrestle with TCP, UDP, and their ilk. And wonder of wonders, its index is actually useful...</p><p>Finally, there is <i>Inside the JavaOS Operating System</i>, by Tom Saulpaugh and Charles Mirho. Jointly designed by Sun and IBM to be a universal platform for Java programmers, the JavaOS specifies services, device-driver interfaces, memory management, interrupts, a microkernel, miscellaneous events, and a boot interface. The book surveys all of these, discussing both how they fit together, and how they can be used. Except for a couple of paragraphs of marketing spiel in the introduction, the book is relatively hype free (at least by Java standards). If JavaOS had taken off, this would probably have become the equivalent of Chappell's <i>Understanding ActiveX and OLE</i>.</p><p>Now, have you heard the one about the three little Ethernet hubs?</p><p><b>DDJ</b></p><HR><I>Copyright &copy; 1999, Dr. Dobb's Journal</I><BR>
</body></html>