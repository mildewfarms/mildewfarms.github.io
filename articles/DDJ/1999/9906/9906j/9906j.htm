<html><head><title>Jun99: Programmer's Toolchest</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>A Video for Windows ActiveX Control</h1><h2>oVFW lets Visual Basic apps use Video for Windows</h2><h3>By Ofer LaOr</h3><I>Ofer is the technical director of Quality By Vision, and is the author of CGI Programming with Visual Basic 5 (McGraw-Hill). He can be reached at olaor@isdnmail.co.il.</I><hr><a name="rs1"><a href="9906js1.htm">Support for Visual C++ 6</a><hr><p>Video for Windows (VFW), introduced by Microsoft during the 16-bit Windows era, was designed to let applications interact with video-capture cards (also known as "video grabbers" or "frame grabbers") in a consistent manner, allowing applications to display and record video from any device.</p><p>I wrote an ActiveX control, oVFW, that encapsulates VFW's features, allowing applications -- including Visual Basic apps -- to interact with a video-capture card. In this article, I'll describe oVFW, and present a sample Visual Basic application that uses this control.</p><h3>Video for Windows</h3><p>Video for Windows exposes a set of API functions that lets an application create a VFW window, attach a capture driver to it, capture a frame (or a video stream), and preview live video. The VFW SDK comes standard with most Microsoft development environments, such as Visual C++.</p><p>Most of the VFW API functions are actually simple macro wrappers around the Win32 <i>SendMessage </i>function with prefilled parameters. For example, the VFW API function <i>capGrabFrameNoStop </i>is actually a macro consisting of <i>SendMessage </i>called with WM_CAP_GRAB_FRAME_NOSTOP as a parameter.</p><p>To interact with VFW, applications must first create a window that VFW can control. This window can be a child of any of the application's windows, so it appears to be fully controlled by the application itself. In reality, VFW handles all of the WM messages that the window receives. To create the VFW window, the <i>capCreateCaptureWindow</i> API function is called. The <i>capDriverConnect</i> API function causes VFW to bind a video-capture driver to a particular VFW window.</p><p>Once a driver is connected to a VFW window, the application can make the window show live video, question it for video-driver support parameters, or have it capture a frame.</p><h3>Live Video</h3><p>Most video-capture cards offer two modes for displaying live video -- preview and overlay. Overlay-enabled video-capture cards interface directly with the display adapter, transferring video information directly to it via the PCI bus (typically using a fast DMA transfer) or through a proprietary bus between the video-capture card and video-display adapter. Overlay mode uses an extremely small amount of resources from the host machine, because the DMA, not the CPU, is transferring the video frames. Typically, the capture card becomes the master of the PCI bus for a short duration and uses a DMA channel to transfer a burst of video information directly to the video-display adapter's onboard memory.</p><p>In preview mode, VFW continually requests new frames from the driver and paints those frames itself using <i>BitBlt</i> or <i>StretchBlt</i>. In this case, the CPU requests the data, the capture card transfers the data to the system's regular memory, after which the CPU must transfer it to video memory again using <i>BitBlt</i>. Due to the amount of data transferred by the CPU, preview mode provides much slower frame rates. The frame rate drops even more with frame sizes larger than CIF (320&times;240).</p><p>Users typically prefer overlay mode, because of its low system overhead and high frame rates. However, overlay mode usually causes some slowdown on part of the system bus (slowing down other transfers because the PCI bus is busy with video information), and it is not always supported by the combination of video-capture cards, PCI bus chipsets, and video-display adapters (especially those with nonlinear memory). When overlay mode is not supported, preview mode is used instead.</p><h3>Creating the oVFW Control</h3><p>I created the oVFW control to give all types of applications, particularly Visual Basic applications, simple and consistent access to VFW. The control gives applications access to VFW driver information, overlay and preview live video, and single frame capture. I used the ActiveX Template Library (ATL) to create the control.</p><p>ATL is modeled after the C++ Standard Template Library (STL), and provides an application with full support for COM via easy to use template base classes. ATL requires little or no dependency on external DLLs or libraries, keeping a COM application very simple.</p><p>The ATL framework does not interfere with the actual object-oriented design of an application. A C++ class can contain any number of interfaces via inheritance. When creating a simple ActiveX control, ATL has little to say about what kind of user-interface the control will have. ATL is useful for creating all types of COM components, some with user-interface (ActiveX controls) and some without (Automation objects).</p><p>I used Microsoft Developer Studio's ATL COM application wizard to construct a new ATL workspace. The wizard was set to create an ATL DLL, which merges the proxy/stub code into the DLL itself. If the proxy/stub code were not merged into the DLL, ATL.DLL would have been required to use oVFW.</p><p>Next, I created a new ATL control, which served as the basis for the oVFW control. I then added the properties and methods for the control, as well as a simple automation object, which is used for querying VFW drivers for their capabilities.</p><p>The control supports both connection points and error handling. Support for error handling allows the control to emit errors to hosts that support COM error handling (Visual Basic apps, for instance). Support for connection points allows the control to trigger the enumeration event, which is described later.</p><h3>Enumerating VFW Drivers</h3><p>Since VFW limits a system to one window per driver, users must install more than one video-capture card to view several simultaneous live video feeds. Because video-capture cards are becoming increasingly popular and inexpensive, having multiple video-capture cards in a single machine is feasible. My own machine, for example, sports a TV card for viewing cable television while I program (that's my story and I'm sticking to it), and a second card for video conferencing and other capture applications. In systems with specialized applications, multiple video-capture cards can be used to enhance the application and provide additional functionality (a security application that would allow the operator to view several live images inside a bank, for instance).</p><p>VFW supports up to 10 different drivers running on a particular machine, and assigns an index to each. For an application to select the appropriate available driver, the oVFW control gives the hosting application the ability to enumerate the available VFW drivers.</p><p>To enumerate VFW drivers, the control has a function called <i>DriversEnum</i>, which attempts to attach to each driver. <i>DriversEnum</i> first creates a specialized VFW window using <i>capCreateCaptureWindow</i>. Then <i>capDriverConnect</i> is called for each of the driver indices. If <i>capDriverConnect</i> succeeds, the driver's properties are retrieved. If a driver is currently in use elsewhere in the system, the control will not detect it and will not be able to retrieve that driver's properties.</p><p>Once oVFW retrieves the driver information, it needs to expose it to the hosting application. One way to do this would be to store the information in a COM collection, and expose the collection to the application. However, I chose not to use a COM collection for two reasons:</p><ul>  <li>I wanted the index of the collection to correspond to the index of the driver. Because the active VFW driver indices might not be sequential, the collection index would not always equal the driver index.  <li>Using a COM collection would require caching the driver-information object. I wanted the hosting application to be able to control what information it wanted to retrieve and cache. </ul><p>Rather than use a COM collection, <i>DriversEnum</i> uses COM connection points (events) to inform the hosting application which drivers are available and what the properties of those drivers are. The hosting application should supply at least one event handler for each event (otherwise, the event simply dissipates when it is fired). When <i>DriversEnum</i> successfully connects to a driver, it sets up a driver-information object and triggers the enumeration event. When the event handler returns, <i>DriversEnum</i> detaches from the driver and tries to attach to the next driver.</p><p><A NAME="rl1"><A HREF="#l1">Listing One</A> shows the event interface declared in the project's IDL file so that oVFW can support events. <A NAME="rl2"><A HREF="#l2">Listing Two</A> shows how oVFW informs the world that it will trigger the interface, not receive it.</p><p><A NAME="rf1"><A HREF="9906jf1.htm">Figure 1</A> shows the Developer's Studio ATL proxy generator used to create an ATL base class for <i>CoVFW</i>. The base classes responsible for allowing <i>CoVFW</i> to trigger events are <i>IProvideClassInfo2Impl&lt;&gt;</i>, <i>IConnectionPointContainerImpl&lt;CoVFW&gt;</i>, and <i>public Cproxy_oVFWEvents&lt;CoVFW&gt;</i>, all in <A NAME="rl3"><A HREF="#l3">Listing Three</A>.</p><p>The <i>DIID__oVFWEvents</i> constant must be declared next, as in <A NAME="rl4"><A HREF="#l4">Listing Four</A>. This constant defines the unique class identification for the event interface. Also, the connection point entry must be declared; see <A NAME="rl5"><A HREF="#l5">Listing Five</A>.</p><p>The output for the ATL proxy generator is an automatically created <i>CProxy_ oVFWEvents</i> class which provides a trigger function for the class's events (<i>Fire_ DriversEnum</i>). The full listing for the <i>EnumDrivers</i> function is available electronically; see "Resource Center," page 5.</p><h3>The Current VFW Driver</h3><p>Driver information can be accessed using the <i>CoVFWDriverInfo</i> class. This class is an additional ATL class that supports error information. The class retains local index and <i>hWndC</i> variables that let the class maintain the identity of the VFW driver to which it is attached. The oVFW control keeps one copy of the current driver, constructed in <i>CoVFW</i>'s constructor (<A NAME="rl6"><A HREF="#l6">Listing Six</A>) throughout its lifespan. This COM-enabled copy of the driver information object can be safely passed to the hosting application via a call to the <i>get_CurDriver</i>; the implementation is available electronically.</p><p>The ATL-provided <i>CComObject</i> template class provides COM access and reference counting, enabling outside objects to access these COM objects. <i>AddRef</i> is used to increment the reference counting and <i>Release</i> decrements it (and deletes the object if no other references to the object exist). The <i>CoVFW</i> destructor releases the object by performing a <i>Release</i> call; see <A NAME="rl7"><A HREF="#l7">Listing Seven</A>.</p><p>Note that the <i>pDriverInfo</i> object is not deleted by the <i>CoVFW</i> destructor, because it may still have outside references in the hosting application, even after the actual control is released. Deleting the object would probably cause the hosting application to throw a protection fault the next time it attempts to access the object. Instead, the window handle is set to NULL, causing the driver to detect the problem and return an error to the host (<A NAME="rl8"><A HREF="#l8">Listing Eight</A>).</p><h3>Viewing Live Video</h3><p>The <i>ShowLiveVideo</i> method turns live video on or off. When called, <i>ShowLiveVideo</i> creates the VFW child window and attaches it to the selected driver index. The hosting application can select a particular VFW driver index (set during the enumeration process) by setting the control property <i>iVideo</i>. In a typical single video-capture-card environment, this parameter will be zero.</p><p>The <i>AttachVFW</i> function (available electronically) determines the size of the client rectangle for the control, and calls the VFW API function <i>capCreateCaptureWindow</i>, which creates a VFW window as a child of the oVFW control, causing the entire visible space of the control to contain the video window, rather than empty space. The subsequent call to <i>capDriverConnect</i> lets the VFW window know that it should be attached to a particular VFW driver. If this function call fails, the driver is currently unavailable.</p><p>After attaching to the appropriate VFW driver, the <i>StartLiveVideo</i> function (available electronically) determines if the application wants an overlay window. If so, it determines if the attached driver is capable of supporting overlay mode. If not, the function simply turns off the overlay flag. This flag can be modified or inspected by the hosting application to determine if overlay mode is being used for the live-video display.</p><p><i>StartLiveVideo</i> calls <i>capPreviewScale</i>, which stretches the live video within the control's client area. Next, the function determines if it should use overlay mode. If so, <i>capOverlay</i> is called to initiate live video. If preview mode is being used, the preview frame rate is calculated (using the frames per second requested in the <i>previewRate</i> control property) and committed using <i>capPreviewRate</i>. The <i>capPreview</i> function is used to initiate the preview mode. At this point, live video is being displayed on screen.</p><p>The <i>StopLiveVideo</i> function (available electronically) turns off both overlay and preview modes, and calls <i>DetachVFW</i> (available electronically), which detaches from the VFW driver. This function must also be called in the control's destructor to prevent a situation where live video is left open while the VFW hosting window has been destroyed. If this were to occur, subsequent attachment attempts to the selected VFW driver will be unsuccessful, and the video driver will remain inactive until the system restarts.</p><p>Some video-card drivers, such as ATI TV's drivers, have problems determining whether the video window has moved. This is because VFW does not monitor window movement, so the driver itself has to try and detect movement of the window containing the live video. Since the parent window, not the live-video window, has actually moved, some drivers may not realize that it has to move the overlay window too. This can result in live video playing where it shouldn't or not playing where it should.</p><p>One crude fix for this problem is to have the hosting application send WM _MOVE messages to the video window whenever it moves, subsequently causing the driver to pick up the message and place the live video in its correct position. </p><p>Unfortunately, this is ineffective in Visual Basic apps (no move event is supplied to Visual Basic forms) where subclassing is difficult and expensive, especially for just supplying WM_MOVE messages. Because the problem only occurs in overlay mode, using preview mode is an effective but crude solution. In preview mode, each frame is sent to its correct screen location using GDI functions instead of a DMA transfer.</p><h3>Capturing Frames</h3><p>The control implements two different methods of capturing single frames -- capturing frame information to the clipboard and capturing to a bitmap file. Visual Basic applications can easily access clipboard data using <A NAME="rl9"><A HREF="#l9">Listing Nine</A>.</p><p>To capture to the clipboard, the <i>CaptureEditCopy</i> method first determines if the driver is attached (that is, if live video is presently being shown). If so, <i>capGrabFrameNoStop</i> is used to capture the image from the driver without stopping the live video. <i>capEditCopy</i> is then used to save the captured image onto the clipboard. <i>capEditCopy</i> can be used without first calling <i>capGrabFrameNoStop</i>; however, this stops the live video on some drivers. </p><p>If the control finds that no driver is attached, it will quickly attach a driver, capture a frame, and detach from the driver. The API function <i>capGrabFrame</i> is the functional equivalent of <i>capGrabFrameNoStop</i>, except that it definitely stops live video (both preview and overlay) when it is called.</p><p>Capturing to a bitmap file is similar to capturing to the clipboard, except <i>capFileSaveDIB</i> is used instead of <i>cap-EditCopy</i>. This is done by the <i>CaptureToBitmapFile</i> method (available electronically).</p><h3>Sample Application</h3><p>A Visual Basic application (available electronically) exercises all of the features that the control has to offer. It provides live video depending on the overlay and video index parameters. It determines the capabilities of the current driver, and enables or disables some of the feature buttons accordingly. <A NAME="rf2"><A HREF="9906jf2.htm">Figure 2</A> provides a view of the hosting Visual Basic control.</p><p>The ActiveX control can also be used from Microsoft Internet Explorer (IE), so that you can view live video on a web page. The most prominent difference when dealing with IE as a hosting environment is its stricter security. Internet Explorer wants to use controls that are "script safe" and "initialization safe." If controls are not marked as such, an annoying message will accompany each web page that incorporates the control.</p><p>To fix this, you need to make a simple addition to the control's registry settings. ATL inserts registry settings by having them placed in special RGS files that are automatically added to the project's resources. The contents of these RGS files are merged into the registry when the control is registered using a setup routine or <i>regsvr32</i>. The ATL wizard creates the basic RGS file, which can be subsequently modified as needed. This makes it very simple to modify the entries placed in the registry by the control during the registration process.</p><p>To have the control marked as script and initialization safe, you need to modify the RGS file, as in <A NAME="rl10"><A HREF="#l10">Listing Ten</A>. The first long numerical key in this example identifies oVFW's unique COM class identifier. The other two keys identify the COM class identifier for the supported categories: script safe and initialization safe.</p><p><A NAME="rl11"><A HREF="#l11">Listing Eleven</A> is the HTML code that lets the control be shown on an Internet Explorer web page, and the actual resulting web page in <A NAME="rf3"><A HREF="9906jf3.htm">Figure 3</A>.</p><h3>The Future of VFW</h3><p>Microsoft considers VFW a dead dog, and has not changed its fundamental structure since Windows 3.1. Windows NT contains the first 32-bit implementation of VFW, which does not seem to improve its performance in any significant manner (in fact, preview mode is slower).</p><p>Microsoft's latest offering for this arena is DirectShow, a complex, COM-based, multilayered interface that allows enhanced access to TV tuners, filters, cable and satellite decoders, and more. DirectShow, which is included with Windows 98, is a stunning contrast to VFW. The requirements to write a minimal driver are quite complex. Additionally, most driver writers are required to write several layers. Microsoft also treats DirectX as a moving target, changing the specifications frequently. Luckily, DirectShow is backwards-compatible and will support VFW applications as well.</p><p>Most of the fundamental flaws that were found in VFW have been fixed in DirectShow, including access to tuner information. DirectShow provides clear information about window movement and live-video regions. However, due to the complex framework of COM-object layers involved in DirectShow, it will not provide a significant performance improvement over Video for Windows. Without an improvement in performance, preview mode will not be able to support full-motion video, which makes the implementation of things such as real-time filters for live video simply impossible.</p><p><b>DDJ</b></p><H4><A NAME="l1">Listing One</H4><pre>[    hidden,    uuid(54526101-F0CA-11d1-969F-002018631632)]dispinterface _oVFWEvents{    properties:    methods:    [id(1)] void DriversEnum([in]long index, [in]IoVFWDriverInfo* driver);};</pre><P><A HREF="#rl1">Back to Article</A></P><H4><A NAME="l2">Listing Two</H4><pre>coclass oVFW{    [default] interface IoVFW;    [default, source] dispinterface _oVFWEvents;};</pre><P><A HREF="#rl2">Back to Article</A></P><H4><A NAME="l3">Listing Three</H4><pre>class ATL_NO_VTABLE CoVFW :   public CComObjectRootEx&lt;CComSingleThreadModel&gt;,  public CComCoClass&lt;CoVFW, &amp;CLSID_oVFW&gt;,  public CComControl&lt;CoVFW&gt;,  public CStockPropImpl&lt;CoVFW, IoVFW, &amp;IID_IoVFW, &amp;LIBID_oVFW&gt;,  public IProvideClassInfo2Impl&lt;&amp;CLSID_oVFW, &amp;DIID__oVFWEvents, &amp;LIBID_oVFW&gt;,  public IPersistStreamInitImpl&lt;CoVFW&gt;,  public IPersistStorageImpl&lt;CoVFW&gt;,  public IQuickActivateImpl&lt;CoVFW&gt;,  public IOleControlImpl&lt;CoVFW&gt;,  public IOleObjectImpl&lt;CoVFW&gt;,  public IOleInPlaceActiveObjectImpl&lt;CoVFW&gt;,  public IViewObjectExImpl&lt;CoVFW&gt;,  public IOleInPlaceObjectWindowlessImpl&lt;CoVFW&gt;,  public IDataObjectImpl&lt;CoVFW&gt;,  public ISupportErrorInfo,  public IConnectionPointContainerImpl&lt;CoVFW&gt;,  public CProxy_oVFWEvents&lt;CoVFW&gt;,  public ISpecifyPropertyPagesImpl&lt;CoVFW&gt;{</pre><P><A HREF="#rl3">Back to Article</A></P><H4><A NAME="l4">Listing Four</H4><pre>EXTERN_C const IID DIID__oVFWEvents=    { 0x54526101, 0xf0ca, 0x11d1,    { 0x96, 0x9f, 0x0, 0x20, 0x18,      0x63, 0x16, 0x32 } };</pre><P><A HREF="#rl4">Back to Article</A></P><H4><A NAME="l5">Listing Five</H4><pre>BEGIN_CONNECTION_POINT_MAP(CoVFW)    CONNECTION_POINT_ENTRY(DIID__oVFWEvents)END_CONNECTION_POINT_MAP()</pre><P><A HREF="#rl5">Back to Article</A></P><H4><A NAME="l6">Listing Six</H4><pre>pDriverInfo= new CComObject&lt;CoVFWDriverInfo&gt;;dynamic_cast&lt;IoVFWDriverInfo*&gt;(pDriverInfo)-&gt;AddRef();</pre><P><A HREF="#rl6">Back to Article</A></P><H4><A NAME="l7">Listing Seven</H4><pre>dynamic_cast&lt;IoVFWDriverInfo*&gt;(pDriverInfo)-&gt;Release();</pre><P><A HREF="#rl7">Back to Article</A></P><H4><A NAME="l8">Listing Eight</H4><pre>return Error( _T("oVFWDriverInfo: bad driver information object"), IID_IoVFWDriverInfo, CUSTOM_CTL_SCODE(1009));</pre><P><A HREF="#rl8">Back to Article</A></P><H4><A NAME="l9">Listing Nine</H4><pre>Set Picture1.Picture = Clipboard.GetData(vbCFDIB)</pre><P><A HREF="#rl9">Back to Article</A></P><H4><A NAME="l10">Listing Ten</H4><pre>  ...RGS stuff here...      ForceRemove {5A5FFDB1-F0A7-11D1-969F-002018631632} = s 'oVFW control'     {  ...additional RGS stuff here...    ForceRemove 'Implemented Categories'    {         ForceRemove '{7DD95801-9882-11CF-9FA9-00AA006C42C4}'         ForceRemove '{7DD95802-9882-11CF-9FA9-00AA006C42C4}'        }     }</pre><P><A HREF="#rl10">Back to Article</A></P><H4><A NAME="l11">Listing Eleven</H4><pre>&lt;script language="VBScript"&gt;&lt;!--Sub window_onload()   vfw.ShowLiveVideo trueend sub--&gt;&lt;/script&gt;&lt;p&gt;&lt;object id="vfw" name="vfw"classid="clsid:5A5FFDB1-F0A7-11D1-969F-002018631632"align="baseline" border="0" width="320" height="240" h="240"w="320"&gt;Ofer LaOr - VFW&lt;/object&gt; &lt;/p&gt;</pre><P><A HREF="#rl11">Back to Article</A></P><HR><I>Copyright &copy; 1999, Dr. Dobb's Journal</I><BR>
</body></html>