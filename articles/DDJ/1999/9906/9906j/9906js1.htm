<html><head><title>Jun99: Support for Visual C++ 6</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h2>Support for Visual C++ 6</h2><p>Porting this project to Visual C++ 6 was a reminder that new versions of compilers often require code modifications instead of just a simple recompilation. The following issues had to be resolved to get Visual C++ 6 to produce a working control:</p><p></p><ul>  <li>The Video for Windows macros (found in VFW.H), such as <i>capPreviewScale</i>, utilize the function <i>IsWindow</i>, assuming that this function from the Windows API will be used. Apparently, the ATL base classes now include their own <i>IsWindow</i> method, which has a different parameter list. Since C++ compilers first try to match functions against class methods, each such macro generates a compiler error. I bypassed this problem by adding to my control class an <i>IsWindow</i> method that calls the Windows API function.  <li>Some changes were required in order for VC++ 6 to accept the <i>DIID__ oVFWEvents </i>object. These were mostly semantic and location problems (that is, the statement had to take place before oVFW.h was used).  <li>Adding events to Visual C++ 6 is much simpler than with earlier versions. An ATL class (object or control) that specifies that it will use events automatically attaches an event interface to the object's class. Now, the event-interface class can be accessed as if it were a standard COM interface (methods can be attached to it, for example). Finally, after VC++ compiles the IDL source to a binary TLB file, right clicking the ATL class and selecting the "Implement Connection Point" menu will create the proxy class and all of the other requirements for the class to fire events.</ul><p> -- O.L.</p><a href="9906j.htm#rs1">Back to Article</a><HR><I>Copyright &copy; 1999, Dr. Dobb's Journal</I><BR>
</body></html>