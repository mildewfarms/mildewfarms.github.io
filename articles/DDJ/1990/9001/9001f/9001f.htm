<HTML>
<META NAME="year" CONTENT="1990">
<HEAD>

<TITLE>JAN90: PARAMETRIC CIRCLES</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>PARAMETRIC CIRCLES<a name="002d_0003"><a name="002d_0003"></h1><P>
<h2><a name="002d_0001"><a name="002d_0000">Faster circle drawing algorithms can produce time savings that are an order of magnitude faster</h2><P>
<h3>Robert Zigon</h3><P>
<p><i><a name="002d_0002"><a name="002d_0000">Robert is a senior software engineer for International Laser Machines and can be reached at 4645 Orlando Ct., Indianapolis, IN 46208.</i></p><hr><P>
As graphical PCs become increasingly popular, end-users continue to demand faster response rates until their problem can be modeled interactively in real time.  The obvious solution to the problem of minimizing calculation and regeneration time is faster hardware, but this is the brute force solution.  Let's instead look at producing better software through clever algorithms.  This solution can produce time savings that are an order of magnitude faster.  This article describes an algorithm for efficient circle generation and shows how this is achievable through a modest amount of mental gymnastics.<P>
In computer graphics, circle (and ellipse) generation is an operation as fundamental as line drawing and point plotting.  The obvious approach to generating the (X<SUB>k</SUB>, Y<SUB>k</SUB>) pairs needed to describe the circumference of the circle is shown in the equation in <a href="1990002f.htm">Figure 1</A>.  However, this implicit nonparametric representation of the circle has three problems.<P>
First, a circle has multiple Y values for a given X value.  This necessitates solving the equation in <a href="19900030.htm">Figure 1</A> for Y<SUB>k</SUB>to produce the equation in <a href="19900031.htm">Figure 2</A>.  Because the goal is to produce a fast algorithm, it is best to avoid the extraction of the roots.  The second problem deals primarily with the aesthetics of the curve.  When the X<SUB>k</SUB>s are evenly spaced, the results are poor due to the uneven distribution of points along the length of the curve in <a href="19900032.htm">Figure 3</A>.<P>
Finally, implicit nonparametric curves are axis-dependent.  The implication here is that the choice of coordinate systems can affect the ease of calculation.  This becomes especially apparent when the end point of a curve has a vertical slope relative to the chosen coordinate system.  These problems are why we will switch to parametric representations.<P>
The parametric form of each point on the circumference of the circle can be represented as two functions of one variable.  There are many possible choices for the functions and parameters.  The equation representing <a href="19900033.htm">Figure 3</A> can be converted to its normalized parametric equivalent according to the equation in <a href="19900034.htm">Figure 4</A>.  However, as previously mentioned, <a href="19900035.htm">Figure 3</A> was an example of a computationally inefficient and aesthetically displeasing portion of a circle.  This leads us to search for a different parameter.  As such, we will look to polar representations with the parameter <img src="theta12.gif">.  <a href="19900036.htm">Figure 5</A> describes our new parametric form of a circle.<P>
At first glance, <a href="19900037.htm">Figure 5</A> might not seem like much of an improvement over the equation in <a href="19900038.htm">Figure 2</A> or <a href="19900039.htm">Figure 4</A>.  The evaluation of the sine and cosine functions can be just as costly from a computational standpoint as the extraction of the square root.  We could precompute a table of sine values, but this would limit us to a fixed number of points. The way to calculate the (X<SUB>k</SUB>, Y<SUB>k</SUB>)pairs is by rearranging the equation in <a href="1990003a.htm">Figure 5</A>.  Observe that <img src="theta12.gif"><SUB>k</SUB>s used in <a href="1990003b.htm">Figure 5</A> can be generated from the previous value via the relation <img src="theta12.gif"><SUB>k+1</SUB> = <img src="theta12.gif"><SUB>k</SUB> + <img src="delta12.gif"><img src="theta12.gif">s.  If we take the cosine of both sides of the previous equation, we have cos(<img src="theta12.gif">s<SUB>k+1</SUB>) = cos(<img src="theta12.gif">s<SUB>k</SUB> + <img src="delta12.gif"><img src="theta12.gif">s).  The right side of this equation can be expanded by using the trigonometric identity for the cosine of an angle <img src="theta12.gif">s and some <img src="delta12.gif"><img src="theta12.gif">s.  The identity is shown in <a href="1990003c.htm">Figure 6</A>.<P>
If you now multiply by R, the radius of the circle, you will essentially have the equation in <a href="1990003d.htm"> Figure 5</A>.  However, because the right side has been expanded, according to the equation in <a href="1990003e.htm">Figure 6</A>, what you will actually be left with is the equation in <a href="1990003f.htm">Figure 7</A>.  The significance of this expansion can be found in the third line of the equation for both X<SUB>k+1</SUB> and Y<SUB>k+1</SUB>.  The use of the trig identity shows that X<SUB>k+1</SUB> is partially described in terms of X<SUB>k</SUB> and Y<SUB>k</SUB>, leaving us with a recurrence relation.  Notice that the X<SUB>k</SUB> and Y<SUB>k</SUB> values are multiplied by the sine and cosine of <img src="delta12.gif"><img src="theta12.gif">s, a numeric constant!  The implication of these algebraic gyrations is that the calculation of the equation in <a href="19900040.htm">Figure 7</A> is simply the sum of the product of two sets of numbers.<P>
Please note that <a href="19900041.htm">Figure 7</A> will generate the points on the circumference of a circle centered at the origin.  In general, if the circle is centered at the point (a,b), then the equation in <a href="19900042.htm">Figure 8</A> will be of greater interest.<P>
My answer to the problem of circle generation begins with the obvious mathematical solution.  From there, creative exploration of the solution space starts with trigonometric representations that are not well-suited for computers.  However, the application of an identity leaves us with a solution using operations that are an intrinsic part of any computational unit.  I've taken this as far as I can go and look forward to your improvements.<P>


<P>
<P>
</pre></BODY></HTML>
