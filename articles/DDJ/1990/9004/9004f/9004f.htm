<HTML>
<META NAME="year" CONTENT="1990">
<HEAD>

<TITLE>APR90: VESA VGA BIOS EXTENSIONS</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>VESA VGA BIOS EXTENSIONS<a name="00d6_0003"><a name="00d6_0003"></h1><P>
<h2><a name="00d6_0001"><a name="00d6_0000">A software standard for Super VGA</h2><P>
<h3>Bo Ericsson</h3><P>
<p><i><a name="00d6_0002"><a name="00d6_0000">Bo is a software engineering manager at Chips and Technologies Inc., 3050 Zanker Road, San Jose, CA 95134.</i></p><hr><P>
An integral part of IBM's PS/2 announcement in April 1987 was the video graphics array (VGA) system.  Based on the architecture of the enhanced graphics adapter (EGA), the VGA offered extended resolutions and a new 256-color video mode.  Since that time, the VGA has grown in importance and is today an established PC video standard.  As a matter of fact, all &quot;old&quot; video standards -- the monochrome display adapter (MDA), color graphics adapter (CGA), Hercules Graphics Adapter, and EGA -- are quickly losing ground to the VGA.<P>
There are several reasons for the VGA's success.  For one thing, the new VGA resolutions (see <a href="9004f.htm#00d6_0004">Figure 1</A>), together with lower-priced multi-frequency monitors, have made the VGA a more attractive solution than previous standards.  Also, a multitude of VGA offerings and fierce competition have made a baseline VGA an economically attractive choice.<P>
<h4><a name="00d6_0004"><a name="00d6_0004">Figure 1: PC graphics resolutions and colors</h4><P>
<pre>
                            Resolutions
320x      640x         640x       640x        800x        1024x
200       200          350        480         600         768

Colors
---------------------------------------------------------------------

2       CGA  CGA        EGA        VGA        Super VGA   Super VGA
4       CGA  EGA        EGA        VGA        Super VGA   Super VGA
16      EGA  EGA        EGA        VGA        Super VGA   Super VGA
256     VGA  Super VGA  Super VGA  Super VGA  Super VGA   Super VGA
</pre><P>
<P>
As a matter of fact, competition in the VGA marketplace not only has driven the prices of VGA boards to the bottom, but has pushed up the features and capabilities of these boards. Virtually all VGA controllers available today are compatible down to the register level with the IBM VGA, and almost all of them implement some extensions to the IBM VGA.<P>
The term &quot;Super VGA&quot; is used in this article to identify video hardware that implements a full superset of the standard VGA, including register compatibility.  Extensions to the IBM VGA can be classified into three different categories:<P>
<ol>1.     Backwards compatibility</ol><P>
<ol>2.     Functional extensions</ol><P>
<ol>3.     Higher spatial and color resolutions</ol><P>
<h3><a name="00d6_0005">Backwards Compatibility<a name="00d6_0005"></h3><P>
The basic IBM VGA is, at best, compatible with older video standards only at the BIOS level. There is a large population of older programs written specifically for, and directly to, the CGA or Hercules Graphics Adapter that bypass the BIOS partially or completely.  Because of this, none of these applications run on a standard VGA.<P>
However, most VGA products offer some register-level support for these older standards. These implementations either attempt to automatically detect older programs and switch into a suitable compatible video mode or require a utility program to lock the video hardware into a compatible video mode.<P>
<h3><a name="00d6_0006">Functional Extensions<a name="00d6_0006"></h3><P>
The basic VGA is a pretty dumb device; the CPU (that is, the application program) is required to do almost all graphics processing.  Only certain logical operations on the graphics data can be performed by the standard VGA hardware.  There are no functions for BitBlts (bit-block-transfers), line drawing, and so on.<P>
In graphics-intensive applications, such as MS-Windows, OS/2 Presentation Manager, and GEM, manipulating the graphics bitmap takes considerable time and affects system performance.  For this reason, several VGA controller vendors have put various graphics capabilities directly into the VGA hardware.<P>
For instance, certain VGA controllers implement a graphics cursor in hardware.  All graphics user interfaces (such as Windows, GEM, X-Windows, Presentation Manager, etc.) use a graphics cursor.  The graphics cursor is an icon (usually an arrow) that moves around the screen as the mouse is moved.  A lot of CPU processing is required to move the graphics cursor even one pixel on the screen.  Instead of refreshing the actual bitmap on a standard VGA, these controllers need only the coordinate of the &quot;hot-spot.&quot;  The actual display of the cursor is done in hardware; bitmap manipulation is not necessary.<P>
Other VGA controllers implement more sophisticated write modes, elementary BitBlt capabilities, or other functions that relieve the CPU of some graphics processing.<P>
<h3><a name="00d6_0007">Higher Resolutions, More Colors<a name="00d6_0007"></h3><P>
The most exciting aspect of all Super VGA implementations, however, is the higher resolutions and the increased number of simultaneous colors on the screen.  The standard VGA can display 16 simultaneous colors in 640 x 480 resolution and 256 colors in 320 x 200, as described in <a href="9004f.htm#00d6_0004">Figure 1</A>.  In contrast, a typical Super VGA board can do 1024 x 768 in 16 colors and 640 x 480 in 256 colors.  In the near future, a range of VGA controllers will be able to do 1024 x 768 in 256 colors.  And a little further down the line, some controllers will have the capability of 1280 x 1024 resolution in 16 colors.<P>
Developments in the monitor market make these extended resolutions especially important. Multifrequency monitors capable of resolutions up to 1024 x 768 are available today for less than $1000, and the price is expected to drop even further.<P>
<h3><a name="00d6_0008">Planar vs. Packed Pixel Modes<a name="00d6_0008"></h3><P>
Before beginning a discussion on Super VGA graphics, a brief summary of the basic video memory modes is required.  VGA graphics video modes use either planar or packed pixel video memory architecture.<P>
In planar mode, the video memory is divided into four separate planes.  One pixel is defined by 4 bits, 1 bit per plane.  Eight pixels are defined by 4 bytes, 1 byte per plane.  Because one pixel is defined by 4 bits, 16 colors can simultaneously be displayed.<P>
Normally, only one plane can be accessed at one time by the CPU.  To access another plane, the hardware registers of the VGA have to be reprogrammed.  For rapid fills of a large area to a certain color, the VGA can be programmed for 32-bit operation, allowing simultaneous access to all four planes.<P>
In packed pixel mode, only one memory plane is available.  One pixel is defined by 1 byte in the memory, yielding 256 simultaneous colors.<P>
<h3><a name="00d6_0009">The Developer's Dilemma<a name="00d6_0009"></h3><P>
In spite of this revolution and the fantastic opportunities that Super VGA provides, software development has been slow in tapping into the capabilities.  Very few applications have Super VGA support, and only OEM-specific display drivers (software tied directly to a certain VGA controller) can generally exploit Super VGA resolutions and capabilities.<P>
There are several reasons why software development for Super VGA has been sluggish.  The most important reason is that almost all Super VGA hardware implementations are different from one another -- a Super VGA controller from manufacturer A is usually significantly different from manufacturer B's because no common hardware or software interface exists.<P>
The software developer has to gather a significant understanding of intimate details of each Super VGA controller (of which there are at least ten at present) and each implementation (of which there are dozens, maybe hundreds) that he/she intends to support.  The cost of acquiring this knowledge and supporting these disparate environments is prohibitively high; software developers have shunned Super VGA for this reason.<P>
<h3><a name="00d6_000a">Non-standard Initialization<a name="00d6_000a"></h3><P>
Super VGA implementations differ significantly in the video mode initialization procedure. One piece of mode setting code will not work on more than one Super VGA board because the I/O addresses for the extended registers required for Super VGA operation vary from implementation to implementation.  In addition, the specific parameters for the registers all depend on the VGA controller.<P>
Another aspect of this problem is that there is no uniform BIOS support for mode initialization across Super VGA products.  No video mode number scheme exists.  A 640 x 480 256 color video mode is called 79 in one implementation and 43 in another.  Also, no standardized mode initialization call exists.<P>
All this means that an application cannot program the hardware directly (because no standard hardware exists), nor can it call a BIOS to initialize the mode (because a standardized mode number doesn't exist, and because no standardized calling sequence is established).<P>
<h3><a name="00d6_000b">Different Windowing Schemes<a name="00d6_000b"></h3><P>
Another area where Super VGA implementations differ greatly is in how the video memory is accessed.  In the IBM PC, a maximum of 128K is devoted to the video system.  This address space is located between A0000 and BFFFF hex.  For compatibility reasons, only the 64K at A0000 is normally used for Super VGA resolutions (another video board in the system might be located at B0000-BFFFF).<P>
However, Super VGA video modes consume more video memory than is available in the CPU address space.  <a href="9004f.htm#00d6_000c">Figure 2</A> details typical memory requirements of Super VGA modes.  As is evident from this table, there has to be a mechanism for the CPU to reach into the video memory using the 64K (or 128K) &quot;window&quot; available in the CPU address space.<P>
<h4><a name="00d6_000c"><a name="00d6_000c">Figure 2: Memory requirements of Super VGA modes</h4><P>
<pre>
  Resolution  Colors  Pixels  Bits per   Total    Planes   CPU
                               pixel     memory            memory
                                         (bytes)           (bytes)
--------------------------------------------------------------------

  640 x 480     16    307200   4         153600   4        38400
  800 x 600     16    480000   4         240000   4        60000
  1024 x 768    16    786432   4         393216   4        98304
  640 x 400    256    256000   8         256000   1        256000
  640 x 480    256    307200   8         307200   1        307200
  800 x 600    256    480000   8         480000   1        480000
  1024 x 768   256    786432   8         786432   1        786432

</pre><P>
<P>
Unfortunately, there are almost as many windowing schemes as there are Super VGA controllers.  Some controllers have one window into the video memory, while others have two. Some controllers have separate read and write windows, while others allow read/write in both windows.  Some controllers implement a &quot;sliding&quot; windowing scheme, whereby a window can be placed on any boundary in the video memory, while others allow placement of the window only on a 64K boundary.<P>
On top of this, the hardware registers that control the windowing scheme are located at different I/O addresses and require different parameters.<P>
<h3><a name="00d6_000d">Enter the VESA BIOS Extension<a name="00d6_000d"></h3><P>
The Super VGA BIOS extension standard, as defined by the Video Electronics Standards Association (VESA), intends to remedy the incompatibility issues addressed earlier.  The standard tries to address all major problems a software developer faces when writing software for Super VGA.<P>
Technically, the VESA BIOS extension is implemented as an addition to the regular video BIOS, accessed through software interrupt 10 hex.  Standard video BIOS functions are called by placing function numbers in the range from 0 to 1C hex, depending on the function, in the AH CPU register and then generating a software interrupt 10 hex.  To call a VESA BIOS function, the application would place the value 4F hex in the AH register, place a function number in the AL register, and then generate an interrupt 10 hex.  <a href="9004f.htm#00d6_000e">Figure 3</A>  describes the VESA BIOS extension functions.<P>
The VESA BIOS extension may be placed in ROM together with the regular BIOS.  It may also be implemented as a device driver, loaded by the operating system at boot time.  Initially, most VESA BIOS extensions will be available as TSR programs.  To the application, the method of implementation is irrelevant; functionally, the BIOS extension behaves the same.<P>
The VESA BIOS extension provides two fundamental services to the application program:<P>
<ol>1.     Information</ol><P>
<ol>2.     Hardware setup</ol><P>
<h4><a name="00d6_000e"><a name="00d6_000e">Figure 3: VESA BIOS extension functions (accessible through interrupt 10 hex with AH set to 4F hex)</h4><P>
The following functions are defined by the VESA BIOS extension.  They are all accessible through interrupt 10 hex with AH set to 4F hex.<P>
Every function returns status information in the AX register.  The format of the status word is as follows:<P>
<pre>
     AL==4Fh:          Function is supported
     ALI=4Fh:          Function is not supported
     AH==00h:          Function call successful
     AH==01h:          Function call failed

<B>Function 0 - Return Super VGA Information</B>
     Input:         AH=4Fh		Super VGA support
                    AL=00h		Return Super VGA information
                    ES:DI=		Pointer to information block
     Output:        AX=		Status
                    <I>All other registers are preserved</I>
                                             
The information block has the following structure:

  VgaInfoBlock struc
     VESASignature                        db   'VESA'    ;4 signature bytes
     VESAVersion                          dw   ?         ;VESA version number
     OEMStringPtr                         dd   ?         ;Pointer to OEM string
     Capabilities                         db   4 dup(?)  ;capabilities of the video environment
     VideoModePtr                         dd   ?         ;pointer to supported Super VGA modes
  VgaInfoBlock ends

<B>Function 1 - Return Super VGA mode information</B>
     Input:         AH=4Fh        Super VGA support
                    AL=01h        Return Super VGA information
                    CX=           Super VGA video mode
                    ES:DI=        Pointer to information block
     Output:        AX=           Status
                    All other registers are preserved

<B>Function 2 - Set Super VGA video mode</B>
     Input:         AH=4Fh        Super VGA support
                    AL=02h        Set Super VGA video mode
                    BX=           D0-D14 = video mode
                                  D15 = Clear memory flag
                                         0 = Clear video memory
                                         1 = Don't clear video memory
     Output:        AX=           Status
                    All other registers are preserved

<B>Function 3 - Return current video mode</B>
     Input:         AH=4Fh           Super VGA support
                    AL=03h           Return current video mode
     Output:        AX=              Status
                    BX=              Current video mode
                    All other registers are preserved

<B>Function 4 - Save/Restore Super VGA video state</B>

    Input:          AH=4Fh    Super VGA support
                    AL=04h    Save/restore Super VGA video state
                    DL=00h    Return save/restore state buffer size
                    CX=       Requested states
                                    DO=Save/restore video hardware state
                                    D1=Save/restore video BIOS data state
                                    D2=Save/restore video DAC state
                                    D3=Save/restore Super VGA state
    Output:         AX=       Status
                    BX=       Number of 64-byte blocks to hold the state buffer
                    All other registers are preserved
    
    Input:          AH=4Fh    Super VGA support
                    AL=04h    Save/Restore Super VGA state
                    DL=01h    Save Super VGA video state
                    CX=       Requested states (see above)
                    ES:BX=    Pointer to buffer
    Output:         AX=       Status
                    All other registers are preserved
    
    Input:          AH=4Fh    Super VGA support
                    AL=04h    Save/Restore Super VGA state
                    DL=02h    Restore Super VGA video state
                    CX=       Requested states (see above)
                    ES:BX=    Pointer to buffer
    Output:         AX=       Status
                    All other registers are preserved
    
<B>Section 5 - CPU Video Memory Window Control</B>
    Input:          AH=4Fh    Super VGA support
                    AL=05h    Super VGA video memory window control
                    BH=00h    Select Super VGA video memory window
                    BL=       Window number
                                    0=Window A
                                    1=Window B
                    DX=       Window position in video memory
    Output:         AX=       Status
    
    Input:          AH=4Fh    Super VGA support
                    AL=05h    Super VGA video memory window control
                    BH=01h    Return Super VGA video memory window
                    BL=       Window number
                                    0=Window
                                    1=Window
    Output:         AX=       Status
                    DX=       Window position in video memory
</pre><P>
<h3><a name="00d6_000f">Global Information<a name="00d6_000f"></h3><P>
To be able to adapt to a specific Super VGA environment, an application needs several important pieces of information.  First and foremost, an application needs to know whether the specific environment is indeed capable of Super VGA resolutions.  The application also needs to know whether any VESA support is available.  In addition, certain applications might want to identify a specific VGA controller.<P>
This kind of global information is provided by VESA BIOS function 0, Return Super VGA mode information.  Before the application calls this function, it has to allocate a buffer of 256 bytes.  The VESA BIOS extension will fill this buffer with various types of information.<P>
One of the most important pieces of information returned by function 0 is a pointer to a list of Super VGA modes supported by the display adapter.  These video modes can be VESA-defined modes as well as OEM-defined modes.  See <a href="9004f.htm#00d6_0014">Figure 4</A> for a list of VESA-defined video modes.<P>
<h3><a name="00d6_0010">Mode-specific Information<a name="00d6_0010"></h3><P>
To determine the characteristics of a particular video mode, the application would then call VESA BIOS function 1, Return Super VGA mode information.  Like function 0, the application has to allocate a 256-byte buffer prior to making the function call.<P>
On return from the function, the VESA BIOS extension will have filled a structure, called the ModeInfoBlock, with all relevant information about this video mode.  See <a href="199000d8.htm">Figure 5</A> for a description of the ModeInfoBlock.<P>
<h3><a name="00d6_0011">Mode Attributes<a name="00d6_0011"></h3><P>
The first word (16 bits) in the ModeInfoBlock, the ModeAttributes field, specifies several important characteristics of the video mode.  See <a href="199000d9.htm">Figure 6</A>  for the layout of this field.<P>
Bit D0 in the ModeAttributes field specifies whether the mode is supported by the present hardware configuration.  If a particular video mode requires a certain monitor, and this monitor is presently not connected to the system, this bit can be cleared to block access to the mode.  Applications should never try to initialize a video mode whose ModeAttributes D0 is set to 0.<P>
As will be evident in the discussion later, the VESA BIOS function 0 returns a lot of information to the application.  Some of this information is mandatory, some is optional.  Bit D1 of the ModeAttributes specifies whether any optional information is available.<P>
Bit D2 indicates whether the output functions (TTY output, set/get pixel, scroll window, etc.) of the regular video BIOS can be used in this video mode.  It is not mandatory for a VESA BIOS extension to support all or any output functions in Super VGA modes.  The primary reason for this is that high-performance applications handle all output themselves anyway, for performance reasons.  The fact that output support consumes a lot of precious memory space is a ROM-based implementation was also important in making this support optional.  If bit D2 is cleared, then no output support is available.<P>
Bit D3 specifies whether the mode is monochrome (D3=0) or color (D3=1).  Bit D4 defines the mode as either text mode (D4=0) or graphics mode (D4=1).<P>
<h3><a name="00d6_0012">Window Description<a name="00d6_0012"></h3><P>
The characteristics of the windowing system are described in the next field in the ModeInfoBlock structure.  The WinAAttributes and WinBAttributes identify whether window A and B exist and are readable or writeable.  All Super VGA boards capable of resolutions beyond 640 x 400 in 256 colors and 800 x 600 in 16 colors have at least one window into the video memory.  Applications can determine the existence of a second window by testing bit D0 of WinBAttributes.<P>
The WinGranularity identifies the smallest address boundary that the window can be placed upon.  In today's Super VGA boards, this varies from 1K to 64K.  The WinSize field identifies the size of the windows.  In a single-window system, the size is normally 64K, while in a dual window system, the size is normally 32K.<P>
The location of the windows within the CPU address space is specified by the fields WinASegment and WinBSegment.  Normally Window A is located at address A0000.  If a second window is present, it would typically be located at A8000 or B0000.  If the VGA controller implements different read and write windows, the second window could be located at the same CPU address as the first window.  In such a system, a CPU read will access the read window, while a CPU write will access the write window.<P>
The WinFuncAddr field specifies a direct address to the windowing function (Figure 3, VESA BIOS function 5).  The standard way to access the video BIOS and the VESA BIOS extension is to generate an int 10.  However, due to the large number of subfunctions using int 10, function dispatching may take considerable time.  This makes int 10 too slow for some graphics operations.  One such time-critical operation is changing the windowing registers.  By using the absolute address to the function, an application can issue a far call directly into it, speeding up execution considerably.<P>
<h3><a name="00d6_0013">Optional Information<a name="00d6_0013"></h3><P>
Only a portion of the ModeInfoBlock is obligatory information.  The other section is optional and is provided if the specific mode is nonstandard.  None of the modes defined by VESA (see <a href="9004f.htm#00d6_0014">Figure 4</A>) require the optional information.  For an OEM-specific mode, however, the VESA BIOS extension needs to inform the application about items such as screen resolution, number of planes, and bits per pixel.<P>
<h4><a name="00d6_0014"><a name="00d6_0014">Figure 4: VESA-defined Super VGA modes</h4><P>
<pre>
  Mode     Resolution     Colors
  number
--------------------------------

  100h      640 x 400     256
  101h      640 x 480     256
  102h      800 x 600     16
  103h      800 x 600     256
  104h     1024 x 768     16
  105h     1024 x 768     256
  106h     1280 x 1024    16
  100h     1280 x 1024    256
</pre><P>
Refer to the VESA BIOS extension specification for information on how to use these optional fields.<P>
<pre></pre><P>
<P>
<h3><a name="00d6_0015">Video Mode Initialization<a name="00d6_0015"></h3><P>
One main objective of the VESA BIOS extension is to help applications set up video modes. This is realized through VESA BIOS Function 2, Set Super VGA video mode.  The application simply places the video mode to be initialized in the BX register and calls this function. Normally, the video memory will be cleared, but if the application sets bit D15 of the BX register prior to calling the function, the memory will be preserved.<P>
VESA mode numbers are 15 bits wide (see <a href="9004f.htm#00d6_0014">Figure 4</A>).  OEM-defined mode numbers are 7-bits wide and are implemented as a subset of VESA-defined modes.  Due to this numbering convention, VESA modes, OEM-specific modes, and regular VGA modes can be initialized by using VESA BIOS Function 2.<P>
If an application needs to know the present video mode, it would call VESA BIOS Function 3, Return current video mode.  For applications (especially TSR programs) that need to interrupt other programs, the VESA BIOS Function 4, Save/Restore Super VGA video state, comes in handy.<P>
<h3><a name="00d6_0016">The Windowing Function<a name="00d6_0016"></h3><P>
Finally, the VESA BIOS extension provides a mechanism to control the position of the video memory windows.  This is handled by Function 5, CPU video memory window control.  To reposition a window into the video memory, the application simply places the window position in the DX register, the window number (0 for Window A and 1 for Window B) in the BL register, and calls Function 5.<P>
The window position is not specified as a byte offset, but rather in terms of granularity units.  As stated earlier, the window granularity expresses the smallest boundary on which the window can be placed.  Today's Super VGA boards have granularities between 4K and 64K.  Thus, if the granularity is 16K, and the application wants to position the window at 64K, the window position is 64/16 = 4 granularity units.<P>
<h3><a name="00d6_0017">Conclusion<a name="00d6_0017"></h3><P>
The VESA BIOS extension provides all necessary information and programming support to Super VGA applications.  For the first time, it is possible to develop generic graphics software, tapping into the exciting capabilities of Super VGA.<P>
However, just because the VESA BIOS extension has made it possible to write such applications doesn't mean it will be trivial.  Most of the complexity in dealing with Super VGA stems from managing windows into the video memory.  Anyone already familiar with writing software for one Super VGA board should have no difficulty in programming others using the VESA BIOS extension.<P>
<P>
<P>
</pre></BODY></HTML>
