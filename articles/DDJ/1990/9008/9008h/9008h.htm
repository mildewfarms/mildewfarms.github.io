<HTML>
<META NAME="year" CONTENT="1990">
<HEAD>

<TITLE>AUG90: HANDLING OS/2 ERROR CODES</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>HANDLING OS/2 ERROR CODES<a name="01be_0003"><a name="01be_0003"></h1><P>
<h2><a name="01be_0001"><a name="01be_0000">Simplify the tracking and correcting of OS/2 development errors with this utility</h2><P>
This article contains the following executables: MAK.LST<P>
<h3>Nico Mak</h3><P>
<p><i><a name="01be_0002"><a name="01be_0000">Nico Mak is a software developer for Mansfield Software Group in Storrs, Conn.  He can be reached at 70056, 241 on CompuServe or as Nico_Mak on BIX.</i></p><hr><P>
This article presents OS2ERR, a simple and effective system to handle unexpected OS/2 error codes in Microsoft C programs.  When an OS/2 system function returns an error, OS2ERR displays a pop-up screen with details about the error.  It then gives you a choice of aborting or continuing the program that caused the error.  The pop-up screen contains the program name, process ID, thread ID, error code, error classification, and the recommended action.  It also lists the source code filename, line number, and source code that called the system function. The system error message (if any) for the error code is displayed.  This information greatly simplifies tracking and correcting the problem.  <a href="9008h.htm#01be_0004">Figure 1</A> shows a typical sample output.<P>
<h4><a name="01be_0004"><a name="01be_0004">Figure 1: Sample pop-up screen</h4><P>
<pre>
  Error code:    6
  Program:       D:\DDJ\ERRDEMO.EXE
  Command tail:  test
  Process ID:    98
  Thread ID:     1
  Action:        Abort in an orderly manner
  Locus:         Unknown
  Class:         Application error
  Source name:   D:\DDJ\ERRDEMO.C
  Source line:   11 (DosRead (hf, Buf, sizeof(Buf), &amp;cbRead))

Incorrect internal file identifier.
Press Esc to abort or any other key to continue
</pre><P>
<P>
This detailed error report saves time during application development and testing, but is generally inappropriate for a final product.  OS2ERR was designed to be used in conjunction with typical error handling routines and is easy to &quot;turn off.&quot;  No source code changes are needed to disable OS2ERR processing -- just recompile and relink as described later in this article.  Or you can customize OS2ERR for your production environment.<P>
<h3><a name="01be_0005">Using OS2ERR<a name="01be_0005"></h3><P>
OS2ERR is easy to use.  First include OS2ERR.H (see <a href="9008h.htm#01be_000a">Listing One</A>, page 181) at the beginning of your source program, after including the OS/2 header files.  Then use the os2chk() macro on any OS/2 system function to display the pop-up screen if the function generates an error.  See <a href="9008h.htm#01be_0006">Example 1</A> for an example of how to use this macro.  Alternately, you can use the os2() macro on system functions to record the error code, filename, line number, and source line for possible later use in an error handling routine. The poperr() macro will display the information recorded by the os2() macro along with other details about the error.  See <a href="9008h.htm#01be_0007">Example 2</A> for an example of how to use these macros.<P>
<h4><a name="01be_0006"><a name="01be_0006">Example 1: Examples of OS/2chk() macro</h4><P>
<pre>
  /* examples of os2chk() macro */
  os2chk (DosClose(hanConfig));    /* display pop-up screen w/error info */
  os2chk (VioGetFont (&amp;viofi, 0)); /* if system calls return error codes */
</pre><P>
<P>
<h4><a name="01be_0007"><a name="01be_0007">Example 2: Examples of OS/2() and poperr() macros</h4><P>
<pre>
     /* examples of os2 () and poperr() macros */

  SubCommandProcess()
    {

    if (!set jmp (jmpbuf)) {                 /* set up error handler */

      /* ... processing ... */

      err == os2 (VioGetFont (&amp;viofi, 0)); /* get current font info */
      if (err == ERROR_VIO_EXTENDED_SG)    /* if running in a VIO window */
          InVioWindow = YES;               /* remember we're in window */
      else if (err)                        /* if any other VioGetFont
                                              error */
             poperr();            /* display pop-up screen with error
                                     info */

      /* ... more processing ... */

      if (os2(DosClose (hanConfig))  /* if DosClose returns an error
                                        code */
           long jmp (jmpbuf);     /* skip to application's error
                                     handler */

      /* ... yet more processing ... */

      }
  else
      poperr(); /* error handler - display pop-up screen with error info */
</pre><P>
<P>
Note that OS2ERR waits until any existing pop-up screen is closed before displaying its own pop-up screen.  The os2chk() and poperr() macros should therefore not be used while your application is displaying a pop-up screen.<P>
To enable OS2ERR processing while testing your application, compile your programs with the -- DOS2ERR option, and link your application with OS2ERR.OBJ.  If this option is NOT used, then the macros do not generate code, and OS2ERR is disabled.  When OS2ERR is disabled you do not need to link with OS2ERR.OBJ.<P>
I've tested OS2ERR with Microsoft C, Version 5.1, and IBM OS/2, Version 1.10, and with the Microsoft OS/2 Software Development Kit, Version 1.06.  Only one minor change was needed when switching among these environments: The DosGetPid and VioWrtTTy system functions were renamed to DosGetPID and VioWrtTTY in the SDK.<P>
<h3><a name="01be_0008">OS2ERR Components and Operation<a name="01be_0008"></h3><P>
OS2ERR.H defines the os2(), os2chk(), and poperr() macros.  These macros generate calls to routines in OS2ERR.C (see <a href="9008h.htm#01be_000c">Listing Two</A>, page 181).  The os2() and os2chk() macros pass the following information to these routines: the source code of the OS/2 system function, as provided by the ANSI C stringizing operator (#), the file name and line number, as provided by the __FILE__ and __LINE__ predefined identifiers, and the return code from the OS/2 system function.<P>
OS2ERR.C contains routines to display the pop-up screen, error messages, and handle the abort or continue prompt.  In addition to the information passed by the os2() and os2chk() macros, these routines use the DosGetEnv function to access the program name and command tail, the DosGetPID function to report on the process and thread IDs, the DosErrClass function to determine the system recommended action, locus, and error class, and the DosGetMessage function to obtain the system error message text.  They use the VioPopUp and VioEndPopUp functions to manage the pop-up screen, and call KbdCharIn to wait for the user to press a key.  If the user presses Esc to abort, the DosExit function is invoked to terminate the process.<P>
<h3><a name="01be_0009">Conclusion<a name="01be_0009"></h3><P>
OS2ERR has helped me to quickly identify the source of a number of OS/2 development problems. I hope it also saves you time.  If you make enhancements to OS2ERR, I encourage you to upload the modified code to the Dr. Dobb's Forum on CompuServe.  I've already uploaded a version that includes the system identifier for the error code (from BSEERR.H) if there is no system message available for a particular error.  Comments and suggestions are welcome.<P>

_HANDLING OS/2 ERROR CODES_
by Nico Mak

<a name="01be_000a"><a name="01be_000a">
<a name="01be_000b"></pre><B>[LISTING ONE]</B><pre><a name="01be_000b">


/* OS2ERR.H version 1.0, March, 1989 */
/* Include this file after including OS2.H or OS2DEF.H */

#ifdef OS2ERR
    USHORT APIENTRY xos2chk(PSZ, USHORT, PSZ, USHORT);
    USHORT APIENTRY xos2(PSZ, USHORT, PSZ, USHORT);
    VOID   APIENTRY xpoperr(VOID);
    #define os2chk(ErrCode) (xos2chk(__FILE__, __LINE__, #ErrCode, ErrCode))
    #define os2(ErrCode) (xos2(__FILE__, __LINE__, #ErrCode, ErrCode))
    #define poperr() (xpoperr())
#else
    #define os2chk(ErrCode) (ErrCode)
    #define os2(ErrCode) (ErrCode)
    #define poperr()
#endif



<a name="01be_000c"><a name="01be_000c">
<a name="01be_000d"></pre><B>[LISTING TWO]</B><pre><a name="01be_000d">

/* OS2ERR.C version 1.1, April 1989 by Nico Mak */
/* These functions are called by the macros in OS2ERR.H */
/* Compile this program with the options you use for the rest of */
/* your application, and link your application with OS2ERR.OBJ */

#define MAX_SAVE_ENTRIES 7 /* maximum number of threads that will use OS2ERR */

#include &lt;stdio.h&gt;      /* definitions/declarations for standard I/O routines */
#define INCL_BASE       /* to include all of OS/2 base */
#include &quot;os2def.h&quot;     /* include OS/2 common definitions */
#include &quot;bse.h&quot;        /* include OS/2 base definitions */
#define OS2ERR          /* to include OS2ERR declarations and macros */
#include &quot;os2err.h&quot;     /* include OS2ERR declarations */

typedef struct _SAVEINFO {                  /* save */
    TID tid;
    PSZ pszFileName;
    USHORT usLineNumber;
    PSZ pszLineSource;
    USHORT usErrCode;
    } SAVEINFO, FAR *PSAVEINFO;

SAVEINFO save[MAX_SAVE_ENTRIES];
USHORT cSavedEntries = 0;   /* number of threads that have used OS2ERR */
BOOL fOverFlow = 0;         /* 1 when all entries in &quot;save&quot; table are full */

/* DosErrClass error classifications */
PSZ pszClass[] = {
    &quot;&quot;,
    &quot;Out of Resource&quot;,
    &quot;Temporary Situation&quot;,
    &quot;Permission problem&quot;,
    &quot;Internal System Error&quot;,
    &quot;Hardware Failure&quot;,
    &quot;System Failure&quot;,
    &quot;Application Error&quot;,
    &quot;Not Found&quot;,
    &quot;Bad Format&quot;,
    &quot;Locked&quot;,
    &quot;Media Failure&quot;,
    &quot;Collision with Existing Item&quot;,
    &quot;Unknown/other&quot;,
    &quot;Can't perform requested action&quot;,
    &quot;Time-out&quot;,
    };

/* DosErrClass recommended actions */
PSZ pszAction[] = {
    &quot;&quot;,
    &quot;Retry immediately&quot;,
    &quot;Delay and retry&quot;,
    &quot;User error, get new values&quot;,
    &quot;Abort in orderly manner&quot;,
    &quot;Abort immediately&quot;,
    &quot;Ignore this error&quot;,
    &quot;Retry after user intervention&quot;,
    };

/* DosErrClass locus */
PSZ pszLocus[] = {
    &quot;&quot;,
    &quot;Unknown&quot;,
    &quot;Disk&quot;,
    &quot;Network&quot;,
    &quot;Serial device&quot;,
    &quot;Memory parameter&quot;,
    };

CHAR szWaitMsg[] = &quot;\nPress Esc to abort process or any other key to continue&quot;;
CHAR szErrTID[] = &quot;\npoperr() error: no information saved for this thread\n\r&quot;;
CHAR szErrOverFlow[] = &quot;\npoperr() error: thread storage area overflowed\n\r&quot;;
CHAR szBuffer[400];

USHORT PASCAL PszLen(PSZ psz); /* function returns length of a far string */
PSAVEINFO PASCAL FindSaveEntry(TID); /* function returns PSAVEINFO for TID */

/* xos2chk - handle error (if any) and return error code */
USHORT APIENTRY xos2chk(PSZ pszFileName, USHORT usLineNumber,
 PSZ pszLineSource, USHORT usErrCode)
    {
    if (xos2(pszFileName, usLineNumber, pszLineSource, usErrCode))
        xpoperr();
    return usErrCode;
    }

/* xos2 - save error information and return error code */
USHORT APIENTRY xos2(PSZ pszFileName, USHORT usLineNumber,
 PSZ pszLineSource, USHORT usErrCode)
    {
    PSAVEINFO psave;
    PIDINFO pidi;

    if (usErrCode)
        {
        DosGetPID(&amp;pidi);
        if ((psave = FindSaveEntry(pidi.tid)) == NULL)
            {
            DosEnterCritSec();
            if (cSavedEntries &lt; MAX_SAVE_ENTRIES)
                psave = save + cSavedEntries++;
            else
                fOverFlow = 1;
            DosExitCritSec();
            }
        if (psave)
            {
            psave-&gt;tid = pidi.tid;
            psave-&gt;pszFileName = pszFileName;
            psave-&gt;usLineNumber = usLineNumber;
            psave-&gt;pszLineSource = pszLineSource;
            psave-&gt;usErrCode = usErrCode;
            }
        }
    return usErrCode;
    }

/* xpoperr - display pop-up screen with error information, return error code */
VOID APIENTRY xpoperr(VOID)
    {
    KBDKEYINFO kbci;
    PIDINFO pidi;
    PSZ psz;
    USHORT usClass, usAction, usLocus, usWait, usEnviron, usOffsetCmd, cbMsg;
    PSAVEINFO psave;

    /* open a pop-up screen */
    usWait = VP_WAIT | VP_OPAQUE;
    VioPopUp(&amp;usWait, 0);

    DosGetPID(&amp;pidi);
    if ((psave = FindSaveEntry(pidi.tid)) == NULL)
        {
        VioWrtTTY(szErrTID, sizeof(szErrTID), 0);
        if (fOverFlow)
            VioWrtTTY(szErrOverFlow, sizeof(szErrOverFlow), 0);
        }
    else
        {
        /* display error code, command name, and command tail */
        sprintf(szBuffer, &quot;Error Code:   %u\n\r&quot;, psave-&gt;usErrCode);
        VioWrtTTY(szBuffer, PszLen(szBuffer), 0);
        DosGetEnv(&amp;usEnviron, &amp;usOffsetCmd);
        for (psz = MAKEP(usEnviron, 0); *psz; psz += PszLen(psz) + 1)
           ;
        psz += 1;
        sprintf(szBuffer, &quot;Command:      %Fs\n\r&quot;, psz);
        VioWrtTTY(szBuffer, PszLen(szBuffer), 0);
        psz += PszLen(psz) + 1;
        psz += PszLen(psz) + 1;
        sprintf(szBuffer, &quot;Command tail: %Fs\n\r&quot;, psz);
        VioWrtTTY(szBuffer, PszLen(szBuffer), 0);

        /* display process id, thread id, and DosErrClass information */
        sprintf(szBuffer, &quot;Process ID:   %u\n\rThread ID:    %u\n\r&quot;,
         pidi.pid, pidi.tid);
        VioWrtTTY(szBuffer, PszLen(szBuffer), 0);
        DosErrClass(psave-&gt;usErrCode, &amp;usClass, &amp;usAction, &amp;usLocus);
        sprintf(szBuffer,
         &quot;Action:       %Fs\n\rLocus:        %Fs\n\rClass:        %Fs\n\r&quot;,
         pszAction[usAction], pszLocus[usLocus], pszClass[usClass]);
        VioWrtTTY(szBuffer, PszLen(szBuffer), 0);

        /* display source filename, line number, and source code */
        sprintf(szBuffer, &quot;Source name: %Fs\n\rSource line: %d (%Fs)\n\r\n\r&quot;,
         psave-&gt;pszFileName, psave-&gt;usLineNumber, psave-&gt;pszLineSource);
        VioWrtTTY(szBuffer, PszLen(szBuffer), 0);

        /* display system message (if any) */
        if (!DosGetMessage(0, 0, szBuffer, sizeof(szBuffer), psave-&gt;usErrCode,
          &quot;OSO001.MSG&quot;, &amp;cbMsg))
            VioWrtTTY(szBuffer, cbMsg, 0);
        }

    /* wait for a keypress */
    VioWrtTTY(szWaitMsg, sizeof(szWaitMsg), 0);
    do {
        KbdCharIn(&amp;kbci, IO_WAIT, 0);
        } while (!(kbci.fbStatus &amp; 0x40));

    /* close the pop-up screen and abort if requested */
    VioEndPopUp(0);
    if (kbci.chChar == 27 &amp;&amp; kbci.chScan == 1)
        DosExit(EXIT_PROCESS, 1);
    }

/* PszLen - return length of a far string */
USHORT PASCAL PszLen(PSZ psz)
    {
    PSZ pszSearch = psz;

    while (*pszSearch)
        pszSearch++;
    return pszSearch - psz;
    }

/* FindSaveEntry - return pointer to SAVEINFO for a thread ID */
PSAVEINFO PASCAL FindSaveEntry(TID tid)
    {
    PSAVEINFO psave;

    for (psave = save; psave &lt; save + cSavedEntries; ++psave)
        if (psave-&gt;tid == tid)
            return psave;
    return NULL;
    }



[Example 1: Examples of OS/2chk() macro]

os2err(DosClose(hanConfig));    /* display pop-up screen w/error info */
os2err(VioGetFont(&amp;viofi, 0));  /* if system calls return error codes */


[Example 2: Examples of OS/2() and poperr() macros]

SubCommandProcess()
    {

    if (!setjmp(jmpbuf)) {                         /* set up error handler */

        /* ... processing ... */

        err == os2(VioGetFont(&amp;viofi, 0));        /* get current font info */
        if (err == ERROR_VIO_EXTENDED_SG)    /* if running in a VIO window */
            InVioWindow = YES;                 /* remember we're in window */
        else if (err)                     /* if any other VioGetFont error */
            poperr();             /* display pop-up screen with error info */

        /* ... more processing ... */

        if (os2(DosClose(hanConfig)) /* if DosClose returns an error code */
            longjmp(jmpbuf);       /* skip to application's error handler */

        /* ... yet more processing ... */

        }
    else
        poperr(); /* error handler - display pop-up screen with error info */
    }



<P>
<P>
</pre></BODY></HTML>
