<HTML>
<META NAME="year" CONTENT="1990">
<HEAD>

<TITLE>AUG90: COLLECTIONS IN TURBO C++</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>COLLECTIONS IN TURBO C++<a name="01bc_0003"><a name="01bc_0003"></h1><P>
<h3><a name="01bc_0001"><a name="01bc_0000">Bruce Eckel</h3><P>
<p><i><a name="01bc_0002"><a name="01bc_0000">Bruce is the author of Using C++ (Osborne/McGraw-Hill, 1989), a voting member of the ANSI C++ committee (X3J16), and the owner of Revolution 2, a firm specializing in C++ training and consulting.  He is the C++ editor/columnist for The C Gazette and was a contributing writer for MicroCornucopia magazine for four years.  Portions of this article are based on the as-yet-unpublished The Tao of Objects, by Bruce Eckel and Gary Entsminger.</i></p><hr><P>
According to the unwritten rules of implementing C++, compiler vendors have the option of saying &quot;sorry, not implemented&quot; when a language feature is either too difficult to implement or when the implementor feels that the programmer really doesn't need a particular feature.  Most implementors have invoked this rule at one time or another, even AT&amp;T with its cfront translator.  Furthermore, vendors sometimes implement features for which a compiler may accept the syntax but not enforce it; const and volatile member functions are good examples of this.  In such cases, you may think you're getting the benefit of a feature when in fact you aren't.<P>
Borland's Turbo C++ is the finest implementation of a C++ compiler I have seen.  This article examines how successful Borland was in implementing C++, using as example C++ 2.0 features such as multiple inheritance and pointers to members to create a &quot;collection&quot; class that counts keywords and identifiers in a C++ program.<P>
<h3><a name="01bc_0004">Surveying the Turbo C++ Landscape<a name="01bc_0004"></h3><P>
Turbo C++ provides full ANSI C compatibility of Turbo C 2.0 and is fully compliant with the C++ 2.0 Draft Reference Manual (see the accompanying text box for a description of C++ 2.0, 2.1, and the ANSI C++ committee).  Of particular interest is Turbo C++'s support for multiple inheritance, type-safe linkage, pointers to members, and built-in support for abstract classes.  Borland has also implemented the AT&amp;T C++ 2.0 iostream package, as well as the older C++ 1.0 streams (for backward compatibility with old code) and the complex class.<P>
Turbo C++ comes with a library of classes intended to help you build programs, including useful classes such as Dictionary and HashTable.  Class libraries address the common complaint among C++ programmers (to wit: &quot;Fine, C++ makes code reuse easier.  Where's the code to reuse?&quot;).  However, Borland made the assumption that what was good design for Smalltalk would be good design for C++.  Thus we have the ponderous Smalltalk-like hierarchy, where everything is derived from a base class Object (no use is made of multiple inheritance), the sometimes irritating Smalltalk names such as theQueue and hash ValueType (they've also made the assumption that you should be able to ask any object what type it is, rather than letting the object worry about it's own behavior), and some rather strange-looking syntax (definitely not for novices).  I would have liked it better had Borland followed AT&amp;T's lead and included a task library instead.<P>
On the positive side, there's source code for everything, the manual is on disk, and, of course, you aren't forced to use the libraries.  Simple examples show how to use some of the classes (a sorted directory listing program, for instance).<P>
<h3><a name="01bc_0005">Other Features<a name="01bc_0005"></h3><P>
You can easily generate assembly output with Turbo C++.  This can be very helpful, especially if you want to hand-optimize code or create your own assembly language routine to link into a C++ program.  The name-mangling scheme used is very easy to read (an aside: When you get linker error messages, the names are automatically unmangled for you.  Nice!).<P>
The Turbo C library is available in Turbo C++.  You can link with assembly language and other libraries, including all those created for the Borland environment (that is, Turbo Pascal and Turbo Assembler) or with Microsoft C.  Paradox Engine code can be linked in with Turbo C++, providing a framework for some powerful C++ database applications.  And I understand you can even link to Turbo Prolog object modules (even though Turbo Prolog has reverted to the Prolog Development Center, its original creator).  As usual, Borland encourages third-party support.<P>
The asm() directive in C++ is supported in Turbo C++; this allows inline assembly code.  You have full control of the expansion of inline C++ functions; you can turn inlining off if you want (very convenient if you go crazy with inlines and later come to your senses).  The compiler merges literal strings to generate smaller programs.  You have full control of the way virtual tables are generated.  Borland has been careful not to do anything to prohibit embedding Turbo C++ code.<P>
<a href="9008j.htm#01bc_0011">More Details.</A><P>
Turbo C++ uses the VROOMM overlay manager for building big programs using EMS/disk overlays.  Sadly, it doesn't support the equivalent of Zortech's __handle pointers (see &quot;Getting a Handle on Virtual Memory,&quot; by Walter Bright, DDJ, May 1990) to do the same thing for data.  I think the __handle pointer is one of Walter Bright's more terrific ideas.  I'm hoping Borland will add this in the future.<P>
The ability to set the library, include information, and command-line flags in the TURBOC.CFG file is excellent!  This immediately eliminates all the path collision and environment-space problems you have when running more than one C++ compiler on your machine (I do this when I want to test correctness).  Turbo C++ will also swap the symbol table to extended memory or EMS for compilations.<P>
Although (as with all C++ implementations) there are limitations on what the C++ compiler will actually inline, there are far fewer restrictions on what the compiler will accept in an inline statement.  For instance, Turbo C++ would accept static variables and &quot;embedded&quot; return statements (those that aren't at the end of the function) in inline functions, while Zortech and cfront wouldn't.<P>
<h3><a name="01bc_0006">Programmer's Platform<a name="01bc_0006"></h3><P>
A Borland language product wouldn't be complete without the Integrated Development Environment (IDE).  The IDE includes everything you need to edit, compile, link, and debug programs.  This time, however, the IDE has been completely reworked with multiple overlapping windows you can reshape and move around the screen.  Other features include a hypertext-style help system, the ability to copy code fragments from the help system to the editor, and more.  For those of you who can't seem to get by without rodents, there's full mouse support.  And, a nice interactive tour teaches you how to use the IDE features.<P>
The &quot;Turbo Editor Macro Language&quot; (TEML), a very readable scripting language that looks like a bastardization of Pascal and C, lets you use macro scripts to write customizations.  For instance, you can rebind all your keys when the editor starts up, grab class names and member function prototypes, pop to another file and append the class name to a :: and the function prototype to create a definition stub, and so on.  The macros are compiled with the &quot;Turbo Editor Macro Compiler&quot; (TEMC), which avoids many of the speed problems associated with interpreted macro languages.  You can create named macros (with arguments) and you can bind those macros to keys; you can also just tie a set of statements to a key without a name. There are over 140 built-in commands to work with.  <a href="9008j.htm#01bc_0007">Example 1</A> shows a simple example of a macro which puts void at the beginning of a line, then returns to the point where you invoked it.  Unfortunately, it is difficult to determine from the documentation the limitations of TEML.<P>
<h4><a name="01bc_0007"><a name="01bc_0007">Example 1: Macro that puts void at the beginning of a line, then returns to the point where you invoked it.</h4><P>
<pre>
  macro InsertVoid
        SetMark (0);  /* save our place */
        LeftOfLine;
        InsertText (&quot;void&quot;);
        MoveToMark (0); /* restore the place */
  end; /* end of macro InsertVoid */

  Alt-V: InsertVoid;    /* bind to key */
</pre><P>
<P>
The IDE also has a built-in, small version of the Turbo Debugger, which displays C++ source code as you've typed it in (no messes from name mangling) and allows you to perform various debugging feats.<P>
<h3><a name="01bc_0008">Turbo Professional<a name="01bc_0008"></h3><P>
The full-blown debugger (provided with the Turbo Professional, or sold separately with the Turbo Debugger and Tools package) is a step forward in debugger technology.  It's better than anything I've seen (although I admit I never had the patience to figure out CodeView).  I didn't need to use the manual much at all, since the menus and help system are so good.  The debugger can use 80386 protected mode by loading a special device driver; this allows viewing assembly language after a hard crash.  I particularly like the traceback feature; you can use the animation feature to automatically step until the program crashes, then trace back and see its last thoughts (although it would be nice if you could speed up animation in this process by eliminating screen updates).  The display of class hierarchy is fine, but it isn't much use by itself; perhaps the debugger is the wrong place for it -- you want to see hierarchies while you're writing code, not while you're debugging it.<P>
The Turbo Profiler (also part of the professional package) should alleviate any concerns you have about potential performance differences with C.  It seems to me the benefit of optimizers is overstated.  An optimizer doesn't have enough information to make a large difference in execution speed.  If you can find the place where your program is spending all its time, you can go in and optimize that section by hand, rather than letting the compiler sprinkle potentially useless speed improvements throughout the program.  You can think of the profiler as attacking the problem from the opposite end, and the improvements in speed are potentially far more dramatic than what you will see with an optimizer.  Don't underestimate the value of this tool.<P>
<h3><a name="01bc_0009">Taking Up A Collection<a name="01bc_0009"></h3><P>
The code presented in this section demonstrates several concepts programmers new to C++ should understand.  These concepts include:<P>
<ul>
<li>Collections, which support a dynamic style of programming;</li>
<li>Multiple inheritance, so that classes can be derived from more than one base;</li>
<li>Pointers to members, which let you delay the selection of a member (function or data) until run time.</li>
</ul>
The classes created here are simple but powerful.  The example that illustrates them is used to count the keywords and identifiers in a C++ source file.<P>
A collection is an object which holds an arbitrary number of other objects.  Basically, it's just a bag you can throw things into and fish them out later.  The reason collections are so important is that they support a dynamic style of programming.  You can't always determine how many and what type of objects you need while you're writing a program (although you may be in the habit of trying to figure it out).  In the general case, these things can only be established at run time.  Thus, objects must be created and destroyed on-the-fly, using dynamic object creation (via the operators new and delete).  While you're working with these objects, you need some place to stash them -- that's where the collection comes in.<P>
You're probably familiar with linked lists, stacks, queues, and trees; these are all prototypical collections in non-object-oriented languages.  The collection in <a href="9008j.htm#01bc_0016">Listing One</A>, page 132, looks vaguely like a singly-linked list.  I like it precisely because it is so simple, but you may have to stare at it a while to figure out exactly how it works.<P>
The first definition is a struct called item, which only contains a virtual destructor.  Any object you want to put into a collection should be derived from item so that collection can &quot;own&quot; the items it holds: When it wants to destroy the item, the proper destructor is called (note that ownership isn't always so clear cut -- in some situations an object is contained in more than one list).<P>
A collection is a chain of holder objects.  Each holder is a link in the chain; it has a pointer to an item and a pointer to the next holder.  Initializing a holder is simply setting its two pointers.  Note that although struct holder is defined inside class collection, holder is a global name in C++ 2.0 (but hidden in C++ 2.1).<P>
A collection object just contains two holder pointers -- one called head, which points to the top of the list, and one called cursor, which moves through the list and points to the holder we're currently interested in.  Initializing a collection means setting its two pointers to NULL (to indicate the list is empty).  Cleaning up the list is more complex; we must go to the head and move through the list until it's empty, deleting each item and holder in the list.  Here you'll need to ponder the code and the comments, imagining what's going on.  Sometimes it helps to draw pictures.<P>
Adding a new item to a collection is the slickest part of the whole class.  Make a new holder using the current head pointer and the new item pointer as arguments.  The value returned by new (the address of the newly created holder) becomes the new value for head.  In one statement the list expands, just like yeast budding a new cell (this is the add() function).  Because add() is inline, adding an element is amazingly fast.<P>
<h3><a name="01bc_000a">Stepping Through a Collection<a name="01bc_000a"></h3><P>
You step through a collection using the reset() and next() commands, each of which returns a pointer to the current item, or NULL if we're at the end of the list.  For a collection c, use the commands as shown in <a href="9008j.htm#01bc_000b">Example 2</A>.  If the list is empty, reset() returns NULL and the while loop is never entered.  Note that in both reset() and next(), we must take care not to return an item* if cursor is NULL; this is taken care of by the ternary if-else statement (?  and :).  In next(), we must not move forward if cursor is NULL.<P>
<h4><a name="01bc_000b"><a name="01bc_000b">Example 2: Stepping through a typical collection.</h4><P>
<pre>
  item * i = c.reset();
  while(i)  {
    // do something
    i = c.next ();
  }
</pre><P>
<P>
<h3><a name="01bc_000c">Multiple Inheritance<a name="01bc_000c"></h3><P>
In a &quot;pure&quot; object-oriented language such as Smalltalk, everything is an object.  All objects have as their base the same class (called &quot;object&quot; or &quot;root&quot; or something like that). Collections in Smalltalk are usually part of the existing system; you don't have to make them yourself.  They are designed to hold any type of object, thus they usually hold root objects, or something close to root in the inheritance tree.<P>
The need for multiple inheritance is not obvious in a system like this; multiple inheritance allows you to combine the characteristics of two or more classes, but in Smalltalk all objects already have a lot of things in common.  Now, consider C++ where classes are often made from scratch instead of being inherited from some master root class.  What happens if you have two predefined classes (which you can't or don't want to change) that must be combined into one? As an example, consider a relatively simple class that holds a word and compares it to text strings, incrementing a counter if there is a match.  Since we're defining the word class right here we could have inherited it from item, but imagine it has been created by someone else and is much more complicated.<P>
Now suppose you want to make a collection of word objects.  Anything that goes in a collection must be derived from item so the collection can &quot;own&quot; it and properly destroy it. But word has already been created, so it can't be derived from item.  What we need is a way to derive a new type from word and item at the same time.  That's where multiple inheritance is essential in C++.  You can see it used in the creation of class worditem, which is a word that can also be stored in a collection.  The first main() in <a href="9008j.htm#01bc_0016">Listing One</A>  is a simple demonstration of a collection of worditems.<P>
<h3><a name="01bc_000d">Counting Words<a name="01bc_000d"></h3><P>
If we want to count instances of words instead of just adding each word to the list, we need to modify the collection class by inheriting it into a new class called wordcounter.  This class is first customized so that add() only accepts worditem pointers, and reset() and next() only return worditem pointers.  Although this may look as if you're adding code, there's actually no over-head -- the compiler does all the work by enforcing type checking.  We then add a new function, add_or_count(), to class wordcounter.  This will test a string against each word in the list; if it finds a match, that word gets incremented; if not, it adds the word to the list.<P>
<h3><a name="01bc_000e">Pointers to Members<a name="01bc_000e"></h3><P>
Finally, we add a function called apply, which uses pointers to members.  These are particularly useful for collections -- in apply(), the function argument is applied to each member of the list.  Note that a pointer to a member function looks a lot like a pointer to a function; it just has the class name and the scope resolution operator added.  The apply() function is demonstrated in the second main().<P>
You can imagine a more powerful construct: Consider an array of pointers to member functions.  You could index into this array to select the desired member.  Pointers to members can also be used to change the behavior of a &quot;call back.&quot;  For example, with a mouse event that might cause the system to change state, the next mouse event should cause something different to happen.<P>
<h3><a name="01bc_000f">Products Mentioned:<a name="01bc_000f"></h3><P>
Turbo C++   Borland International   P.O. Box 660001   Scotts Valley, CA 95066-0001   $199.95   $299.95 for Turbo C++ Professional   Special prices for registered owners   of Turbo C.<P>
<h3><a name="01bc_0010">Counting Identifiers and Keywords<a name="01bc_0010"></h3><P>
Now that we have the desired class and the desired collection, let's use them to count the identifiers and keywords in a C++ source code file (I tested it on <a href="9008j.htm#01bc_0016">Listing One</A>).  The trick is simply to remove all the quoted strings, operators, comments, and constants and put the remaining words into our wordcounter collection by using add_or_count().  This is accomplished by using the ANSI C library functions strchr(), which finds the first instance of a character in a string, strstr(), which finds the first instance of a string within a string, strtok(), which breaks a string up into tokens according to the delimiters of your choice, and strcspn(), which counts the characters in the initial length of a string that doesn't consist of characters from your chosen string; this is used to determine if a string is a numerical constant.  Look these up in your ANSI C library reference for further details.<P>
I'm using standard I/O here instead of bothering to open and close files.  You have to redirect input and output on the command line, but it makes the example simpler.<P>
In running TEST3, notice that the results of the analysis are printed to standard output as the destructors are called for the worditem objects (the print statement is in the word destructor).<P>
You can easily create a second type of list to hold keywords.  Initialize this list with the C++ keywords, then test each new word against this list before conditionally adding it to the symbol_table list.  This way you can separate keywords and identifiers.<P>
Note that parts of <a href="9008j.htm#01bc_0016">Listing One</A> will compile with Zortech C++ 2.06 (if you remove the pointers to members, the whole thing will compile).  However, the TEST1 code shows a place where Zortech C++ 2.06 has a bug (it works properly with cfront 2.0 and Turbo C++).<P>
I believe Borland will capture the C++ market in much the same way they did the Pascal market.  They are just out of the blocks with Turbo C++ and already far ahead of everyone else.  Other C++ vendors will have to come up with something pretty spectacular for me to pry my clenched fingers from Turbo C++.<P>
<h3><a name="01bc_0011"><a name="01bc_0011"><a name="01bc_0012">C++ Release 2.0<a name="01bc_0012"></h3><P>
In May 1989, Bjarne Stroustrup (the creator of C++) and the team at AT&amp;T announced C++ release 2.0 and provided the C++ 2.0 Draft Reference Manual (commonly referred to as the DRM).  This was a significant upgrade to the earlier release 1.2.  The largest changes were the addition of multiple inheritance and type-safe linkage (which, although invisible to the programmer, prevents one of C's more subtle and obnoxious errors), but a number of other smaller gems added to the language make a significant difference in what we can do.<P>
Class-by-class Overloading of Operator new and delete In release 1.2, you could only change the activity of the dynamic object creation operator new() (and its complement, operator delete()) on a global basis.  For example, overloading new and delete allows you to provide a more efficient memory-allocation scheme.  This is generally something you only want to do for an individual class (one you allocate and deallocate a lot of objects for) so this is a significant improvement (also, you can forget about &quot;assignment to this&quot;).  You can also create a garbage collector for an individual class; calling new for that class can register the object with your garbage collector.  You can now specify the physical location in memory where you want an object to be placed (especially useful in embedded systems or other hardware-specific situations).<P>
Support for Abstract Classes An abstract class is a base class from which you inherit a number of derived classes.  It establishes the &quot;common interface&quot; to a set of polymorphic classes.  For instance, you might create a class sortable, which defines a type of object that can be sorted.  You never make any sortable objects; instead you make objects of classes derived from sortable (i.e., record).  To prevent the user of a class from creating a sortable object, C++ 2.0 allows you to create &quot;pure&quot; virtual functions by setting the function body to zero, as in virtual int sort() = 0;.  The compiler won't allow you to create any instances of a class containing a pure virtual function.<P>
Copying and Initialization If you forget, or you don't want to define an operator() or a copy-constructor X(X&amp;) for your class, the 2.0 compiler now does it for you.  These functions have always been a source of confusion for new C++ programmers, but they are important when copying an object or passing it by value into or out of a function.<P>
More Operator Overloading You can now overload the comma operator and the -&gt; operator (sometimes called a &quot;smart pointer&quot;).<P>
Const, Volatile, and Static Member Functions These modifiers allow you to change the way the compiler treats class member functions.  A const member function cannot change the member data of an object, nor call another function that does.  Thus it can be called for a const object. Similarly, a volatile member function can be called for a volatile object; the compiler must assume the object may be changed by outside forces and thus cannot make any assumptions about object stability during optimization of a volatile member function.  A static member function is like an ordinary function except it is part of the class, so its name is hidden and it can only be called for that class.  However, it cannot access any nonstatic members of an object (either functions or data).<P>
Sophisticated Initialization Among the forms of initialization in 2.0, you can initialize automatic and global (&quot;static&quot;) objects using all kinds of complicated expressions.  For example, if record and book are both derived from sortable, you can write:<P>
<pre>
  sortable * s[] = {
     new record;
     new book;
  };
</pre><P>
Pointers to Members<P>
You can take the offset of a class member and pass it into a function, which can then use that offset to call a member function or modify member data.  This is often used in a function which acts like &quot;apply&quot; in Lisp -- it will take the member function of your choice and apply it to each object in a list.  This feature has actually been part of the language before release 2.0, but has not been universally supported (Zortech 2.06, for instance, doesn't support pointers to members; Zortech 2.1 does).<P>
<h3><a name="01bc_0013">C++ 2.1 and ANSI C++<a name="01bc_0013"></h3><P>
Release 2.0 was to have been the specification for the language until the time that the ANSI C++ committee (X3J16) came out with ANSI C++.  However, Stroustrup found some small problems with the language and changed them while in the process of writing the Annotated C++ Reference Manual (by Bjarne Stroustrup and Margaret Ellis, Addison-Wesley, 1990).  The ARM, as the Annotated Reference Manual is called, serves as the primary base document for the ANSI C++ committee.  AT&amp;T has released version 2.1 of its cfront C-code generator (which takes C++ and generates C; these have sometimes been called translators, as opposed to native-code compilers like Turbo C++ and Zortech C++).  All this happened rather suddenly, so the version of Turbo C++ I had conformed to the DRM (2.0) rather than the ARM (2.1).  However, the changes are small so I expect conformance to 2.1 fairly soon; not having the changes in release 2.1 isn't inconvenient and you may not even notice them unless you already know the language quite well.<P>
<h3><a name="01bc_0014">Additional Changes In 2.1<a name="01bc_0014"></h3><P>
Classes, enumerations, and typedefs defined within a class are now local to the class.  The conversion from a pointer to derived-class object to pointer to base-class object has been clarified.  A class with a copy-constructor may be passed by value to a function with an ellipses argument (although a bitcopy is done, rather than a call to the copy-constructor).  You now delete arrays with delete []p;.  Notice that the number of objects in the array is no longer necessary.  An object which is created under a condition must be destroyed under that condition, and cannot be accessed outside that condition (for example, in if(x) for(int i = 10; i; i--) foo(i); you cannot access i for the rest of the scope).<P>
Pure virtual functions are implicitly inherited as pure.  Calling a pure virtual function inside a constructor produces undefined behavior, rather than an error message.  Constructors with all default values are now considered &quot;default&quot; constructors (they can be used in places where a constructor with no arguments is required, for example, arrays definitions).  You can define built-in types as if they had constructors; for example, int i(5); (similarly for destructor calls).<P>
Resolution of function overloading has been clarified and improved.  You can distinguish between pre- and post-fix operator ++ and --.  Unions can have private and protected members. delete cannot be used on a pointer to a const. friend functions are forced to be extern (publicly visible).  Base classes may be inherited as protected.  An explicit destructor call p-&gt;X:: ~ X() calls X's destructor even if it's virtual, while p-&gt; ~ X() uses the virtual mechanism.<P>
<h3><a name="01bc_0015">Your Comments and Suggestions<a name="01bc_0015"></h3><P>
The ANSI C++ committee had its first meeting March 12 - 16 in New Jersey and the second July 9 - 12 in Seattle.  Written public suggestion and comment is invited (in fact, it's an integral part of the process).  The committee expects to finish its work in roughly three years (since it has a running start with the ARM and the ANSI/ISO C specs).  The major extensions that will likely be added by the ANSI committee include exception handling and parameterized types (implementations of which you may see before the committee is complete).  Send suggestions and comments to:<P>
<pre>  Dmitry Lenkov
  X3J16 Committee Chair
  HP California Language Lab
  19447 Pruneridge Avenue, MS: 47LE
  Cupertino, CA 95014
  email:dmitry%hpda@hplabs.hp.com</pre><P>
-- B.E.<P>
<P>
_COLLECTIONS IN TURBO C++_
by Bruce Eckel

<a name="01bc_0016"><a name="01bc_0016">
<a name="01bc_0017"></pre><B>[LISTING ONE]</B><pre><a name="01bc_0017">

// COLLECT.CPP : collection example, with multiple inheritance and
// pointers to members.
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;

struct item {
  virtual ~item() {} // so collection can properly destroy what it holds
};

// Suppose we have a pre-existing class to hold items:
class collection {
  // in 2.0, &quot;holder&quot; is a global name.  In 2.1, it's hidden:
  struct holder {
    holder * next;  // link to next holder
    item * data; // pointer to actual data
    holder(holder * nxt, item * dat)  // constructor
      : next(nxt), data(dat) {}
  } *head, *cursor;
public:
  // initialize an empty list:
  collection() : head((holder *)NULL), cursor((holder *)NULL) {}
  // clean up the list by removing all the elements:
  ~collection() {
    cursor = head;
    while(cursor) {  // while the list is not empty ...
      delete cursor-&gt;data;  // delete the current data
      head = cursor-&gt;next;  // head keeps track of where the next holder is
      delete cursor;  // delete the current holder
      cursor = head; // move to the next holder
    }
  }
  // Paste a new item in at the top (this is tricky):
  void add(item * i) { head = new holder(head, i); }
  // reset() and next() return the current item or null, for the list's end:
  item * reset() { // go back to the top of the list
    cursor = head;
    // the list may be empty; only return data if cursor isn't null
    return cursor ? cursor-&gt;data : (item *)NULL;
  }
  item * next() {
    // Only move forward if cursor isn't null:
    if(cursor) cursor = cursor-&gt;next;
    // only return data if cursor isn't null:
    return cursor ? cursor-&gt;data : (item *)NULL;
  }
};

// Now suppose we have a second pre-exising class to hold words,
// keep track of word counts, and print itself in 2 ways:
class word {
  char * w;
  int count;
public:
  word(char * wd) : count(1) {
    w = new char[strlen(wd) + 1];  // allocate space for word
    strcpy(w,wd);  // copy it in
  }
  ~word() {
    printf(&quot;%s : %d occurrences\n&quot;, w, count);
    delete w;  // free space for word
  }
  int compare(char * testword) {
    int match = !strcmp(w, testword);
    if(match) count++; // count testword if it matches
    return match;
  }
  void print1() { printf(&quot;%s\n&quot;, w); } // 1 per line
  void print2();
};

// Zortech 2.06 and cfront 2.0 wouldn't allow the following
// function as an inline; Turbo C++ would.
void word::print2() {  // print several words per line
  static p1cnt;  // count words on a line
  const words_per_line = 7;
  printf(&quot;%s &quot;, w);
  if(++p1cnt % words_per_line) return;
  putchar('\n'); // only when remainder is 0
}

// What if we want to make a collection of words?  Multiple
// Inheritance to the rescue:
class worditem : public item, public word {
public:
  worditem(char * wrd) : word(wrd) {}
};

// now we can create a collection of worditems.  Here's an array
// of words to put in our collection:
char * words[] = { &quot;this&quot;, &quot;is&quot;, &quot;a&quot;, &quot;test&quot;, &quot;of&quot;, &quot;worditem&quot; };

#ifdef TEST1
main() {
  collection c;
  for(int i = 0; i &lt; sizeof(words)/sizeof(words[0]); i++)
    c.add(new worditem(words[i]));
  // NOTE: Zortech C++ 2.06 doesn't work here.
}
#endif // TEST1

// But now we want to count instances of words.  We need to modify the
// collection class so it conditionally adds a word, or just counts it
// if it already exists:

class wordcounter : public collection {
public:
  // Customize for worditems (no overhead):
  void add(worditem * wi) { collection::add(wi); }
  worditem * reset() { return (worditem *)collection::reset(); }
  worditem * next() { return (worditem *)collection::next(); }
  void add_or_count(char * newword) {
    worditem * cur = reset();
    while(cur) {
      // if found, increment the count and quit the search:
      if(cur-&gt;compare(newword)) return;
      cur = next();
    }
    // at this point, we didn't find it, so add it to the list:
    add(new worditem(newword));
  }
  // Pointers to members (Zortech 2.06 doesn't support this):
  void apply(void (word::*pmf)()) {
    worditem * wit = reset();
    while(wit) {  // do while list is not empty
      (wit-&gt;*pmf)();  // dereference member function pointer
      wit = next();  // get next list element
    }
  }
};

char * words2[] = { &quot;this&quot;, &quot;this&quot;, &quot;is&quot;, &quot;a&quot;, &quot;test&quot;, &quot;test&quot;, &quot;test&quot; };

#ifdef TEST2
main() {
  wordcounter wc;
  for(int i = 0; i &lt; sizeof(words2)/sizeof(words2[0]); i++)
    wc.add_or_count(words2[i]);
  // Now &quot;apply&quot; two different functions to the list:
  wc.apply(&amp;word::print1);
  wc.apply(&amp;word::print2); putchar('\n');
}
#endif // TEST2

// Now, for fun, let's use this class to count the keywords and
// identifiers in a C++ program.  Try this program on itself:
//    collect &lt; collect.cpp &gt; count
// Look up strstr(), strchr() and strtok() in your ANSI C
// library guide.

const char * delimiters = &quot; \t#/(){}[]&lt;&gt;.,;:*+-~!%^&amp;=\\|?\'\&quot;&quot;;
const char * digits = &quot;0123456789.&quot;;

#ifdef TEST3
main() { // use i/o redirection on the command line.
  wordcounter symbol_table;
  char buf[120];
  while (gets(buf)) { // get from standard input
    if(*buf == '#') continue;  // ignore preprocessor lines
    // strip all quoted strings in the line:
    char * quote = strchr(buf, '\&quot;');  // find first quoted string
    while(quote) {
      if(quote[-1] == '\\') break; // for \&quot; literal quote
      *quote++ = ' ';  // erase quote
      while(*quote != '\&quot;' &amp;&amp; *quote != 0)
        *quote++ = ' '; // erase contents of string
      *quote = ' '; // erase ending quote
      quote = strchr(quote, '\&quot;'); // look for next quoted string
    }
    char * cmt = strstr(buf, &quot;//&quot;);  // C++-style comments only
    if(cmt) *cmt = 0; // strip comments by terminating string
    puts(buf);  // Look at the modified string
    char * token;  // strtok uses delimiters to find a token:
    if((token = strtok(buf, delimiters)) != NULL){  // first strtok call
      if(strcspn(token, digits))  // ignore constants
        symbol_table.add_or_count(token);
       // subsequent strtok calls for the same input line:
      while((token = strtok(0, delimiters)) != NULL)
        if(strcspn(token, digits))  // ignore constants
          symbol_table.add_or_count(token);
    }
  }  // print the list in 2 ways, using pointers to members:
  symbol_table.apply(&amp;word::print1);
  symbol_table.apply(&amp;word::print2); putchar('\n');
}  // results are output by the destructor calls
#endif // TEST3


[Example 1: Macro that puts void at the beginning of a line, then
returns to the point where you invoked it.]

macro InsertVoid
      SetMark(0);  /* save our place */
      LeftOfLine;
      InsertText(&quot;void &quot;);
      MoveToMark(0);  /* restore the place */
end; /* end of macro InsertVoid */

Alt-V : InsertVoid;   /* bind to key */


[Example 2: Typical collection]

item * i = c.reset();
while(i) {
  // do something
  i = c.next();
}



<P>
<P>
</pre></BODY></HTML>
