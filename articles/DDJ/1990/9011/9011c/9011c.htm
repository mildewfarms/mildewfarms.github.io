<HTML>
<META NAME="year" CONTENT="1990">
<HEAD>

<TITLE>NOV90: OBJECT-ORIENTED DEBUGGING</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>OBJECT-ORIENTED DEBUGGING<a name="0239_0003"><a name="0239_0003"></h1><P>
<h2><a name="0239_0001"><a name="0239_0000">Strategies and tools for debugging your OOP apps</h2><P>
<h3>Simon Tooke</h3><P>
<p><i><a name="0239_0002"><a name="0239_0000">Simon is a member of SCO Canada's C++ development tool project and can be contacted at 130 Bloor Street West, 10th Floor, Toronto, Ontario, Canada M5S 1N5.</i></p><hr><P>
This article discusses strategies and tools for object-oriented debugging.  Because of its facilities for data abstraction and inheritance, and because of its similarities to C, the language used to demonstrate the principles in this article will be C++, and a good portion of the content will be C++ specific.  However, many of the concepts presented here are applicable to other object-oriented environments.<P>
<h3><a name="0239_0004">C++ Debugging is Different<a name="0239_0004"></h3><P>
Typical C applications tend to be procedure oriented.  Execution flows from point A to point B, and somewhere in between, a function may be called to manipulate data, read it in, or write it out.  Functions may have side-effects involving many pieces of data or none.  When you debug, you watch statement execution to ensure that everything happens in expected order.<P>
In a well-designed C++ application, the &quot;methods&quot; (member functions) available to manipulate an item of data are well defined.  Access to data is restricted via a clean set of interface routines.  Because of this, the state of the data is very important and is what we are typically concerned with when verifying the correctness of C++ code.  Thus, intelligent access to data is as important as program execution flow when searching for a problem.  Designing special debugging routines from the beginning can make accessing that data less of a headache for the programmer.<P>
C++ compilers enforce much stricter type checking than traditional C compilers.  This all but eliminates several problems such as calling functions with the wrong arguments, type mismatches in assignments, and attempts to store data into constant objects.  There are far more original ways to shoot yourself in the foot these days.<P>
<h3><a name="0239_0005">A Sample Class<a name="0239_0005"></h3><P>
For examples presented in this article, I'll use a simple string class.  Several related classes, such as a class containing a list of strings and a class that iterates over a list of strings, are presented.  These classes are declared in <a href="9011c.htm#0239_0015">Listing One</A>  (page 114); the main( ) program is in <a href="9011c.htm#0239_0017">Listing Two</A> (page 114).<P>
Many of the functions will be trivial when applied against these small classes; it is not my intent in this article to advocate bogging down a 20-line class with several hundred lines of extra debugging code, but to demonstrate practices that are useful when dealing with more complex classes.<P>
The String class provides us with a container for simple text strings.  Storage allocation for buffers is performed via malloc( ), and the internal pointer s will be guaranteed to always point at a null-terminated string of length 0 or greater.<P>
A StringList is an ordered container for Strings.  This class is implemented as a singly linked list of StringListElements, each of which points to a String and to the next element in the list.<P>
By declaring an instance of a StringList-Iterator, a method is provided to examine the individual entries in a StringList without having any knowledge of the internals of StringList.<P>
<h3><a name="0239_0006">Debug From the Start<a name="0239_0006"></h3><P>
Too often, debugging is left as the final stage of development, because problems only become evident after a program is compiled and run for the first time.  Think about debugging while designing data structures.  This forces you to ask questions such as &quot;How can I prove that data is correct?&quot;  &quot;How does this function modify the data?&quot; and &quot;What assumptions are being made here?&quot; at a point where something can be done about weaknesses in design.<P>
You can usually afford to be inefficient with debugging code, but you must write carefully; incorrectly flagging an error can lead to hard-to-find problems.  At the same time, debugging libraries and user debug code are also prone to errors.  I once spent four days tracking a problem in my application because a beta version of a debugging malloc( ) library incorrectly told me I had wild data pointers -- and then had the gall to abort my program.<P>
<h3><a name="0239_0007">Using Assert Macros<a name="0239_0007"></h3><P>
Long familiar to C users, the assert( ) macro (which is trivial to write, but is supplied by most compiler vendors) finds a good home in C++.  This macro (defined, in <a href="9011c.htm#0239_0019"> Listings Three</A> and <a href="9011c.htm#0239_001b">Four</A>, page 114) takes an expression as a parameter, and, if the expression is false (has the value 0), usually halts the program and prints a message giving the line number and file where the problem occurred.  This tendency to abort means that a program with assert( ) scattered throughout is less resilient, if that program is not fully debugged.<P>
At any point where an important assumption is made about the correctness of calculated data, insert an assert( ) call, which will display a message if that assumption is invalid.  assert( ) macros should not be used to test input data for correctness; that always belongs within the program proper because it is a likely occurrence.  If a switch statement doesn't have a default: case, add one, wrap it in #ifdef DEBUG, and add an assert( ) within it.  For portability, never include character strings within the condition; many implementations do not handle this properly.<P>
In <a href="9011c.htm#0239_0008">Figure 1</A>, StringListIterator::reset( ) (a function that restarts the iterator instance on the current class) requires a pointer to the StringList to be iterated over.  The first assert( ) will ensure that the current instance is valid before we start operating on it.  The second assert( ) ensures that this instance already points to a StringList before trying to access the beginning of that list.  Although an instance of StringListIterator may be created without a list to iterate over, it is an error to perform a reset( ) or a next( ) without previously pointing to a StringList.<P>
<h4><a name="0239_0008"><a name="0239_0008">Figure 1: Using the assert( ) macro</h4><P>
<pre>
  //   reset( ) - rewind iterator to first element of list
  void StringListlterator::reset(void)

  {
          //ensure valid data
          assert(verify( ));
          //we cannot reset if no list
          assert(list !=NULL);
          //point to beginning of list
          nxt = list-&gt;head;
  }
</pre><P>
<P>
assert( ) is a macro, and because of this it can vanish when a program is compiled for production use.  All code that is added for debugging only should be wrapped in preprocessor #ifdef DEBUG/#endif directives so that it vanishes in production programs when DEBUG is not defined.<P>
Nevertheless, it may be desirable to always compile assert( )s into a program to ensure that problems in the field are properly detected.  Yet often performance, speed, and robustness considerations outweigh this desire.  A program that keeps running may be more useful to a user than one that aborts because an assert( ) for a trivial (or worse, nonexistent) error has been triggered.<P>
<h3><a name="0239_0009">Verifying Data Structures<a name="0239_0009"></h3><P>
When debugging a live program, it is quite easy to display an integer, string, or other simple data structure, look at it, and say &quot;Yes, this looks good.&quot;  Verification of more complex structures may involve several layers of pointer indirection.  It may be tedious to examine all elements in, say, a linked list by hand, following all the pointers through until the end.<P>
If you write functions to check your structures, these can be called within your program and directly by you at debug time.  For instances of classes, these should be virtual member functions so that the correct routine is called for instances of derived classes accessed through base class pointers.  Call these functions at the start and end of all other member functions to flag corrupted data and assist in isolating the problem.<P>
If an assert fails at the start of the function, some agent external to the class was able to modify the data.  If an assert fails at the end of the function, the function itself incorrectly modified the data.  These functions are useful both combined with assert( ) macros and when called from the debugger.  An example of verify( ) for the StringListIterator can be found in <a href="9011c.htm#0239_001d">Listing Five</A> (page 114).<P>
<h3><a name="0239_000a">Displaying Data Structures<a name="0239_000a"></h3><P>
Examining a complex structure by hand can be tedious in exactly the same way that verifying that structure is.  The structure may be complex, involve multiple pointer indirections, or simply be so big that only a small portion is actually useful.  It is therefore advisable to add functions to display data structures in some concise fashion.  Again, within a class hierarchy these should be virtual member functions.  These may never be called by application code, but are useful when called by the debugger.  The dump( ) function that displays data for StringList is also found in <a href="9011c.htm#0239_001d">Listing Five</A>.<P>
Data verification and data display routines should be named consistently.  I chose verify( ) and dump( ), so that I always know what to call for any given structure.<P>
<h3><a name="0239_000b">Use Debugging Libraries<a name="0239_000b"></h3><P>
Since data is often the primary concern of a C++ program, it follows that many problems may surround the functions of memory allocation and deletion.  Linking with one of the many readily available debugging malloc( ) libraries allows runtime checks to ensure that nothing runs past the end of a malloc'd area and that only valid pointers are passed to free( ).<P>
In a C++ program, one has the option of overloading new and delete on a class-by-class basis to gather statistics, check for potential problems, or find &quot;memory leaks.&quot;  Depending on the compiler implementation, new and delete often eventually call malloc( ) and free( ), in which case a debugging malloc( ) library is useful here, too.<P>
<h3><a name="0239_000c">Deep and Shallow Copy<a name="0239_000c"></h3><P>
Many C++ data structures differentiate between &quot;deep&quot; and &quot;shallow&quot; copies.  A deep copy copies the structure itself and any items that pointers in the structure point to.  An example of a deep copy is String::operator= in the example classes.  Deep copies ensure independence between different instances of a class by producing an entirely new copy of a structure. Shallow copies usually copy the structure itself only, but any pointers are left pointing at their original targets.<P>
Shallow copies are quick and good for making a read-only copy of an object.  Since the shallow copy does not have control over the items it points to, care must be taken not to destroy those objects during the normal use of either the original or the copy.  Often, items pointed to by objects that implement shallow copies contain reference counts, so they are only destroyed when they are no longer required by any object.  The Stroustrup book contains a good example of a string class implemented using reference counts.  If reference counts are used, the shallow copy is usually as good as a deep copy.<P>
One typical problem involves destroying the original object after a shallow copy has been made.  The pointers within the copy end up pointing at free storage, which may &quot;look&quot; perfectly normal until it is reused, some time later.  A related (and usually identical) problem arises if the copy is destroyed; then the original may be invalidated.<P>
<h3><a name="0239_000d">Memory Leaks<a name="0239_000d"></h3><P>
A common mistake in writing an overloaded operator is to allocate a new instance of a class, calculate the new value of this instance, and return the pointer to this new instance.  This will work, but the compiler has no way of knowing that it should free up the new data after it has finished with it.  A program may work perfectly well on small amounts of data but crash after it has used most of available memory.  This is called a &quot;memory leak.&quot;  The code fragment in <a href="9011c.htm#0239_000e">Figure 2</A> illustrates one such case.<P>
<h4><a name="0239_000e"><a name="0239_000e">Figure 2: Hidden memory leak</h4><P>
<pre>
  Thing &amp; operator + (Thing&amp; one, Thing&amp; two)
  {
           Thing*p = new Thing;
           //. . . .perform some magic . . .
           return *p;
  }
</pre><P>
<P>
Multitasking systems such as Unix allow you to take a suspect section of code and loop through it again and again while watching the size of the process grow and grow, but DOS does not easily allow this.  With DOS, a good debugging malloc( ) library is (again) useful.  Most debugging malloc( )s can produce a log of malloc( ) and free( ) calls which can then be examined for problems.<P>
<h3><a name="0239_000f">Trivial Casting<a name="0239_000f"></h3><P>
Casting a pointer from an instance of a derived class to a base class does not change the virtual functions associated with that instance.  In particular, the example in <a href="9011c.htm#0239_0010">Figure 3</A> will loop forever if derivedClass::dump( ) is called.  Since baseClass::dump( ) is accessed through the virtual function table (often referred to as the &quot;vtbl&quot; due to one implementation of this feature), and the virtual function entry in an instance of a derived class points to derived Class::dump( ), the statement ((baseClass *)(this)-&gt;dump( ) will simply call derivedClass::dump( ) recursively.  In this case, a proper call to the desired function would use the syntax baseClass::dump( ).<P>
<h4><a name="0239_0010"><a name="0239_0010">Figure 3: Incorrect use of pointer casting</h4><P>
<pre>
  struct baseClass
  {
           int i;
           virtual void dump( )
           {
                   cerr &lt;&lt;&quot;i=&quot; &lt;&lt;i&lt;&lt;&quot;\n&quot;;
           }
  };
  struct derivedClass : baseClass
  {
           int j;
           virtual void dump( )
           {
                         //The line below is wrong:
                         ((baseClass *)(this))-&gt;dump( );

                         cerr &lt;&lt;&quot;j=&quot; &lt;&lt;j&lt;&lt;&quot;\n&quot;;
           }
  };
</pre><P>
<P>
In <a href="9011c.htm#0239_0011">Figure 4</A> (ignoring the fact that this example is contrived and is poor coding practice), the compiler silently creates a temporary variable of type Class1 and passes a reference to this temporary into func( ).  When func( ) returns, the modified temporary is deleted and the value of the real ptr-&gt;i is unchanged.  This all happens silently in most C++ compilers, and is a source not only of inefficiency, but also errors.  Looking at the C output (if available) confirms this, but it is a hard problem to catch unless you suspect it exists.<P>
<h4><a name="0239_0011"><a name="0239_0011">Figure 4: Invisible (and silent) temporary created by a cast</h4><P>
<pre>
  struct Class1 {int i;};
  struct Class2 {int i;};

  void func(Class1&amp; ref)
  {
          ref.i = 5;
  }
  main( )
  {
            Class2*ptr = new Class2;
            ptr-&gt;i = 1;
            cerr&lt;&lt; &quot;before, i=&quot; &lt;&lt; (ptr-&gt;i)&lt;&lt;&quot;\n&quot;;
            func((Class1)(*ptr));
            cerr &lt;&lt; &quot;after, i=&quot; &lt;&lt; (ptr-&gt;) &lt;&lt;&quot;\n&quot;;
  }
</pre><P>
<P>
<h3><a name="0239_0012">Using a Debugger<a name="0239_0012"></h3><P>
Use a good debugger to help to know your program.  Be aware of its capabilities and expand them through the addition of debugging routines where it falls short.<P>
Most C debugging sessions consist of stack traces, setting simple break-points, and single-stepping.  Since C++ is more data-driven, debugger features such as conditional breakpoints suddenly become very useful.  For example, setting a breakpoint in a member function for a particular instance of a class may become trivial if your debugger supports commands of the form &quot;Stop in ClassName::Function if this==&amp;instance.&quot;<P>
Handling all of C++ features in an intelligent way is a challenge for a debugger.  A good debugger will allow you to think in C++, type in C++ names, and call C++ functions properly. Better yet, it will resemble a Smalltalk browser, automatically cross-referencing classes and instances.<P>
Compiling with -g (or the equivalent) adds debugging information to an executable, but there may be other switches on your compiler that provide increased functionality.  For example, some debuggers are incapable of setting breakpoints in inline functions unless inlining has been turned off at compile time.  <a href="9011c.htm#0239_001f">Listing Six</A> (page 115) shows the Make file for our sample programs.<P>
If the C++ implementation is capable of it, it may produce C source code as one of the steps in the compilation sequence.  There are debuggers that allow you to step through the C code in much the same way as you would step through assembler when debugging C.<P>
<h3><a name="0239_0013">Null Pointer Dereferencing<a name="0239_0013"></h3><P>
In C++, a common problem is to call a member function using a null pointer to instance.  If the pointer ptr is NULL, then ptr-&gt;function( ) behaves quite differently, depending on the type of the function.  If function( ) is static, it will be called and nothing out of the ordinary will occur; the pointer value is not passed.  If function( ) is non-virtual, then it will be called, but references within the function will attempt to access data at location 0. If, however, function( ) is virtual, then C++ will dereference the pointer in an attempt to access the virtual function table for that class.  An (effectively) random pointer to function will be read, and the program will probably fly south for the winter.<P>
Debuggers with hardware capabilities (such as add-in boards or access to CPU debug registers) usually allow trapping on read access.  This feature is not only useful to trace program access to a particular variable, but, when location 0 is trapped, should catch attempts to access data through null pointers.<P>
<h3><a name="0239_0014">Conclusion<a name="0239_0014"></h3><P>
The key to C++ (as to most object-oriented languages) is that only a small, known section of the program deals with manipulating a given type of data.  If that data is wrong, then only a known portion of the program (the member functions) can be responsible.  Careful design will insure that any given member function expects an internally consistent object when called, and leaves the object correct on leaving.<P>

_OBJECT-ORIENTED DEBUGGING_
by Simon Tooke


<a name="0239_0015"><a name="0239_0015">
<a name="0239_0016"></pre><B>[LISTING ONE]</B><pre><a name="0239_0016">

#ifndef STRING_H
#define STRING_H

#include &lt;string.h&gt;
#include &lt;memory.h&gt;
#include &lt;malloc.h&gt;

#ifdef NULL
# undef NULL
#endif
#define NULL 0

typedef enum { False, True } Boolean;

// a String is a simple implementation of a C++ string class
class String
{
    char     *s;        // actual pointer to text
  public:
    String(void)           { s = strdup(&quot;&quot;); }
    String(char *c)        { s = strdup(c); }
    String(char *c, int n) { s = new char[n+1]; memcpy(s,c,n); s[n]=0; }
    String(String &amp;ss, char *c) { s = malloc(strlen(ss.s)+strlen(c)+1);
                                                 strcpy(s,ss.s); strcat(s,c); }
    String(String &amp;ss)     { s = strdup(ss.s); }
    ~String(void)          { delete s; }
    operator char *(void)  { return s; }
    String&amp; operator +(char *c)  { String *a = new String(*this,c); return *a;}
    String&amp; operator +=(char *c) { *this = *this + c; return *this; }
    String&amp; operator =(char *c)  { delete s; s = strdup(c); return *this; }
    String&amp; operator =(String&amp; a){ delete s; s = strdup(a.s); return *this; }
    operator ==(char *c) const;
    operator ==(String *c) const;
#ifdef DEBUG
    void dump() const;
    Boolean verify() const;
#endif /*DEBUG*/
};

// a StringListElement is a single item in a StringList
class StringListElement
{
    String s;                   // this String in the list
    StringListElement *next;    // pointer to next element in list
  public:
    StringListElement(void)     : next(NULL), s(&quot;&quot;)  {}
    StringListElement(char *c)  : next(NULL), s(c)   {}
    StringListElement(char *c, int n) : next(NULL), s(c,n) {}
    StringListElement(String &amp;ss)     : next(NULL), s(ss)  {}
    ~StringListElement(void)    { if (next) delete next; next=NULL; }
    friend class StringList;
    friend class StringListIterator;
#ifdef DEBUG
    void dump() const;
    Boolean verify() const;
#endif /*DEBUG*/
};

// a StringList is a simple single-linked list of strings
class StringList
{
    StringListElement *head;    // first String in list
    StringListElement *tail;    // last String in list
  public:
    StringList(void) : head(NULL), tail(NULL) {}
    StringList(String&amp; ss) { head = tail = new StringListElement(ss); }
    StringList(char *ss)   { head = tail = new StringListElement(ss); }
    ~StringList(void)      { if (head) { delete head; head=NULL; } }
    String&amp; find(char *s) const;
    void clear(void)       { delete head; head = tail = NULL; }
    StringList&amp; operator +=(StringList&amp; xx);
    StringList&amp; operator +=(char *ss);
    StringList&amp; operator +=(String&amp; ss);
    StringList&amp; operator =(StringList&amp; xx);
    operator int();
    friend class StringListIterator;
#ifdef DEBUG
    void dump() const;
    Boolean verify() const;
#endif /*DEBUG*/
};

// a StringListIterator is a method of traversing a list of strings
class StringListIterator
{
    const StringList *list;    // StringList to be traversed
    StringListElement *nxt;    // current String in StringList
  public:
    StringListIterator(void) : list(NULL), nxt(NULL) {}
    StringListIterator(const StringList *l) : list(l), nxt(l-&gt;head) {}
    String *next(void);
    void reset()        { nxt = (list != NULL) ? list-&gt;head: NULL; }
    int anymore() const { return (nxt != NULL); }
    StringListIterator&amp; operator =(const StringList&amp; ss);
#ifdef DEBUG
    void dump() const;
    Boolean verify() const;
#endif /*DEBUG*/
};
#endif // STRING_H




<a name="0239_0017"><a name="0239_0017">
<a name="0239_0018"></pre><B>[LISTING TWO]</B><pre><a name="0239_0018">

#include &lt;stream.h&gt;
#include &quot;String.h&quot;

int main (int, char *[])
{
    String a(&quot;Hello &quot;);
    String *b = new String(&quot;world.&quot;);
    String c;

    c = a + *b + &quot;\n&quot;;

    cout &lt;&lt; &quot;a + b = &quot; &lt;&lt; (char *)c;
    cout &lt;&lt; &quot;a = &quot; &lt;&lt; (char *)a &lt;&lt; &quot;\n&quot;;
    cout &lt;&lt; &quot;b = &quot; &lt;&lt; (char *)*b &lt;&lt; &quot;\n&quot;;

    StringList l(a);
    l += *b;

    l.dump();
}




<a name="0239_0019"><a name="0239_0019">
<a name="0239_001a"></pre><B>[LISTING THREE]</B><pre><a name="0239_001a">

#ifndef ASSERT_HDR
#define ASSERT_HDR

#ifdef DEBUG
extern void _assertRtn(char *, int);

# define assert(condition) \
    if (condition) ; else _assertRtn(__FILE__,__LINE__);

#else /*ifndef DEBUG*/

# define assert(condition)

#endif

#endif /*ASSERT_HDR*/



<a name="0239_001b"><a name="0239_001b">
<a name="0239_001c"></pre><B>[LISTING FOUR]</B><pre><a name="0239_001c">

#include &lt;stream.h&gt;

#ifdef DEBUG
void _assertRtn(char *file, int line)
{
    cerr &lt;&lt; &quot;\nAssertion Failure in file '&quot; &lt;&lt; file
                          &lt;&lt; &quot;' line &quot; &lt;&lt; line &lt;&lt; &quot;\n&quot;;
    line = 0; line /= line;    // force core dump
}
#endif




<a name="0239_001d"><a name="0239_001d">
<a name="0239_001e"></pre><B>[LISTING FIVE]</B><pre><a name="0239_001e">

#include &quot;String.h&quot;
#include &quot;Assert.h&quot;

#ifdef DEBUG
# include &lt;stream.h&gt;
#endif

/*****  String class  ******/
// String comparison operator
String::operator ==(char *c) const
{
    assert(this-&gt;verify());

    // compare String to char array
    return strcmp(s,c) == 0;
}

// String comparison operator
String::operator ==(String *c) const
{
    assert(this-&gt;verify());
    // compare String to String
    return strcmp(s,(char *)c) == 0;
}
#ifdef DEBUG
void String::dump(void) const
{
    assert(this-&gt;verify());
    cerr &lt;&lt; &quot;String(\&quot;&quot; &lt;&lt; s &lt;&lt; &quot;\&quot;)&quot;;
}
Boolean String::verify(void) const
{
    // Strings must always point to something.
    if (s == NULL) return False;
    return True;
}
#endif

/****** StringList class (and StringListElement)  ******/
StringList&amp; StringList::operator +=(String&amp; ss)
{
    assert(this-&gt;verify());
    if (tail)
    {
        tail-&gt;next = new StringListElement(ss);
        tail = tail-&gt;next;
    }
    else
        head = tail = new StringListElement(ss);
    return *this;
}
StringList&amp; StringList::operator +=(char *ss)
{
    assert(this-&gt;verify());
    if (tail)
    {
        tail-&gt;next = new StringListElement(ss);
        tail = tail-&gt;next;
    }
    else
        head = tail = new StringListElement(ss);
    return *this;
}
StringList&amp; StringList::operator +=(StringList&amp; xx)
{
    assert(this-&gt;verify());
    // add new list to old list item by item
    for (StringListElement *le=xx.head; le; le=le-&gt;next)
        *this += le-&gt;s;
    return *this;
}
// StringList assignment operator (performs deep copy)
StringList&amp; StringList::operator =(StringList&amp; xx)
{
    assert(this-&gt;verify());
    // get rid of old list
    clear();
    // add new list to (clear) old list item by item
    for (StringListElement *le=xx.head; le; le=le-&gt;next)
        *this += le-&gt;s;
    // return new copy of old list
    return *this;
}
// (int)(StringList) cast returns number of strings in list
StringList::operator int()
{
    int count = 0;
    StringListIterator ll(this);

    assert(this-&gt;verify());
    while (ll.next() != NULL)
        count++;
    return count;
}
#ifdef DEBUG
//
//        dump() - display instance in format &quot;StringList(...)&quot;
//
void StringList::dump(void) const
{
    // check consistancy
    assert(this-&gt;verify());
    // print header
    cerr &lt;&lt; &quot;StringList(&quot;;
    // use StringListElement::dump() to recursively display all members
    if (head != NULL) head-&gt;dump();
    // print trailer
    cerr &lt;&lt; &quot;)\n&quot;;
}
Boolean StringList::verify(void) const
{
    // if there are elements in this list, ensure they are valid.
    // (note that head-&gt;verify() ensures the entire list is valid.)
    if ((head!=NULL) &amp;&amp; !head-&gt;verify()) return False;

    // Both the head and tail must either be null or non-null.
    if ((head!=NULL) &amp;&amp; (tail==NULL)) return False;
    if ((head==NULL) &amp;&amp; (tail!=NULL)) return False;

    return True;
}
#endif /*DEBUG*/

#ifdef DEBUG
void StringListElement::dump(void) const
{
    assert(this-&gt;verify());
    s.dump();
    if (next != NULL)
    {
        cerr &lt;&lt; ',';
        next-&gt;dump();
    }
}
Boolean StringListElement::verify(void) const
{
    // An element of a list of Strings must point to a valid String.
    if ((char *)(s) == NULL) return False;
    if (!s.verify()) return False;
    // If there is another element within this list, it must be valid.
    if ((next!=NULL) &amp;&amp; !next-&gt;verify()) return False;

    return True;
}
#endif

/****** StringListIterator class  ******/
// assignment operator
StringListIterator&amp; StringListIterator::operator =(const StringList&amp; ss)
{
    assert(this-&gt;verify());
    list = &amp;ss;
    nxt = ss.head;
    return *this;
}
// get next item in list of strings pointed to by iterator
String *StringListIterator::next(void)
{
    assert(this-&gt;verify());
    if (list == NULL) return NULL;   // no StringList, so no next item
    if (nxt == NULL) return NULL;    // at end of list, so no next item
    String *aa = &amp;(nxt-&gt;s);          // save pointer to String
    nxt = nxt-&gt;next;                 // point to next item in list
    return aa;                       // return pointer to String
}
#ifdef DEBUG
Boolean StringListIterator::verify(void) const
{
    // if there is a list available, verify it.
    if (!list-&gt;verify()) return False;

    // if we haven't reached the end of the list,
    // verify the next element
    if (nxt != NULL &amp;&amp; !nxt-&gt;verify()) return False;

    // everything appears correct
    return True;
}
#endif /*DEBUG*/



<a name="0239_001f"><a name="0239_001f">
<a name="0239_0020"></pre><B>[LISTING SIX]</B><pre><a name="0239_0020">

CC = CC
CFLAGS = -DDEBUG

prog : main.o String.o lib.o
    $(CC) main.o String.o lib.o -o prog

String.o : String.C String.h
    $(CC) -c $(CFLAGS) String.C

main.o : main.C String.h
    $(CC) -c $(CFLAGS) main.C

lib.o : lib.C
    $(CC) -c $(CFLAGS) lib.C

clean :
    rm -f *.o a.out core

clobber : clean
    rm -f prog





<P>
<P>
</pre></BODY></HTML>
