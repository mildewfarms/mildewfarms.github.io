<HTML>
<META NAME="year" CONTENT="1990">
<HEAD>

<TITLE>DEC90: THE MACINTOSH COMMUNICATIONS TOOLBOX</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>THE MACINTOSH COMMUNICATIONS TOOLBOX<a name="0264_0003"><a name="0264_0003"></h1><P>
<h2><a name="0264_0001"><a name="0264_0000">Writing comm applications that are terminal, file transfer, and connection independent</h2><P>
This article contains the following executables: CHEAPCOM.R CHEAPCOM.MAK CHEAPCOM.C CHEAPCOM.H<P>
<h3>Don Gaspar</h3><P>
<p><i><a name="0264_0002"><a name="0264_0000">Don is a software engineer at Apple Computer.  He can be reached at Apple Computer, 20525 Mariani Ave., MS-35Q, Cupertino, CA 95014.  Don was working for Dialog Information Services at the time he wrote this article.</i></p><hr><P>
A long with standardized communications functions, Apple's Macintosh Communications Toolbox provides an entire spectrum of dynamic tools to aid you in constructing dynamic communications applications.  Programs that make use of the Comm Toolbox become completely terminal, file transfer, and connection independent.  If you have to add any new functions and if your program is written properly, your communications program will be extended with the new functionality.  The Comm Toolbox does this via tools kept in the System Folder that offer independence for the communication applications.<P>
Before putting the Comm Toolbox to work for you, become familiar with the Connection Manager, Terminal Manager, and File Transfer Manager.  (A fourth key manager -- the Communications Resource Manager -- will not be discussed in the context of this article.)  As <a href="19900266.htm">Figure 1</A> illustrates, these managers interact with specific tools that work directly with the ROM OS.  The three managers expand the functionality of the Macintosh Toolbox by offering functions for any type of application that involves communications.  The managers are simple to use, and their functions resemble those of the other toolbox managers you've already been using for years.  If you've used the Memory Manager, TextEdit, QuickDraw, the Window Manager, and some of the others, you're ready to go.<P>
<h3><a name="0264_0004">The Connection Manager<a name="0264_0004"></h3><P>
The Connection Manager is a medium through which you tell the Comm Toolbox what type of physical connection is between your Mac and the device it's talking to.  This &quot;other&quot; device might be a modem, a direct serial connection, ADSP, perhaps a software MNP level 5 or X.25 tool, or maybe something that hasn't even been thought of yet.  No problem.  Just write your own connection tool and anyone who writes a program using the Comm Toolbox will be able to use your new hardware connection as well.<P>
For instance, once the user selects the type of connection being used (or sets a default), special preferences can then be made for that particular connection.  If using a modem tool, the user should be able to tell the program what type of modem is being used, the phone number to dial, baud rate, stop bits, parity, and so on.<P>
The function that enables this parameter setting is CMChoose( ).  When called, the Comm Toolbox displays a dialog box (see <a href="19900267.htm">Figure 2</A>) that allows the user to change settings.  This is the standard dialog box offered through the Comm Toolbox; you don't have to use it if you don't want to.  You can override anything you don't like, then design and use your own.  For consistency across communications programs, however, it's recommended you stick with the standard so that someone unfamiliar with your program will understand how to use it.<P>
<h3><a name="0264_0005">The Terminal Manager<a name="0264_0005"></h3><P>
The Terminal Manager tells the Comm Toolbox what type of emulation is taking place: TTY, VT-100, VT-320, or even IBM 3278.  With the Comm Toolbox, you just add a terminal tool with the emulation you want in the system folder; your program then becomes terminal independent. Apple has implemented several of these emulations, including VT-320.  You can use the ones that already exist, license more from a third party, or write your own.<P>
The Terminal Manager's counterpart to the Connection Manager's CMChoose( ) is TMChoose( ); the dialog changes according to what type of terminal is selected and allows the user to change their preference for the particular terminal they are using (the tool controls this).<P>
<h3><a name="0264_0006">The File Transfer Manager<a name="0264_0006"></h3><P>
The File Transfer Manager allows you to implement standard file transfer (Kermit, XModem, ZModem, text transfer, and so on) functions with minimal effort, for file transfer independence.  Suppose, for instance, that next year a new file transfer scheme is implemented on CompuServe.  What would happen to your program?  Would you have to send users new disks with the new file transfer added to it?  Not at all.  Users simply add the new file transfer tool to their System Folder, and because your program is file transfer independent, it can automatically use the new tool without any modifications.  In fact, the current file transfer tool can be used to get the new one.<P>
<h3><a name="0264_0007">A Sample Comm Toolbox Application<a name="0264_0007"></h3><P>
In this section, I'll briefly describe a communications application I call &quot;CheapCom&quot; (see <a href="9012c.htm#0264_000e">Listing One</A>, page 94).  This program, written using MPW C 3.1, illustrates how the Comm Toolbox managers and other functions are implemented to easily build a full-featured communications program that supports connection, terminal emulation, and file transfer.  Because of space constraints, I haven't included any of the standard Macintosh user interface features in <a href="9012c.htm#0264_000e">Listing One</A>; the code presented is the communications core.  However, the complete system (including resource files), as well as just the core code, is available online.  To compile and use the program, you'll need the Comm Toolbox installed on your Macintosh, MPW with the C compiler Version 3.1 or later, and the Comm Toolbox Interface.  (Contact APDA, Apple Computer Inc., 20525 Mariani Ave., Cupertino, CA 95014, for Comm Toolbox specifics.)<P>
To start off, you have to initialize the communication managers just as you do the Window Manager, TextEdit, QuickDraw, and the others.  A typical initialization function might resemble that in <a href="9012c.htm#0264_0008">Figure 3</A>.  For compatibility reasons, always initialize the Comm Toolbox in the order shown in <a href="9012c.htm#0264_0008">Figure 3</A>.  You should also always check for existence of the Comm Toolbox before initializing it, otherwise the error codes returned will be meaningless.  (If the user is not using System 7.0, then the Comm Toolbox must be installed via a special INIT, available from APDA.)  If the Comm Toolbox isn't there when you start up, your program will either have to disable its communications functionality or it will have to just quit (after notifying the user, of course).<P>
<h4><a name="0264_0008"><a name="0264_0008">Figure 3: Initializing the Comm Toolbox</h4><P>
<pre>
  InitGraf((Ptr) &amp;qd.thePort);             // QuickDraw
  InitFonts();                             // Font Manager
  InitWindows();                                          // Window Manager
  InitMenus();                             // Menu Manager
  TEInit();                                // Text Edit
  InitDialogs(nil);                        // Dialog Manager
  InitCursor();                            // starting cursor

  err = InitCTBUtilities();                // Comm Toolbox Utilities
  err = InitCRM();                         // Comm Toolbox Resource Manager
  err = InitTM();                          // Terminal Manager
  If (err == tmNoTools)
               AlertUser(&quot;No terminal tools found\0&quot;, true);
  err = InitCM();                          // Connection Manager
  if (err == cmNoTools)
               AlertUser(&quot;No connection tools found\0&quot;, true);
  err = InitFT();                          // File Transfer Manager
  if (err == ftNoTools)
               AlertUser (&quot;No file transfer tools found\0&quot;, false);</pre><P>
<P>
Next, you should check for tools.  If no tools are available, the value &quot;xxNoTools&quot; will be returned; you might want to quit your program in that case.  For example, if no connection tools were available, it would be physically impossible to establish a hardware connection. So you must alert the user and quit the application.  However, if no file transfer tools were available, rather than quit the program you might simply alert the user that the program couldn't find any and disable the user's ability to select functions that deal with file transfer.<P>
Then, you need to make a new terminal record, connection record, and file transfer record. Code like that shown in <a href="9012c.htm#0264_0009">Figure 4</A> accomplishes this.  The calls TMNew( ), CMNew( ), and FTNew( ) set up the appropriate records for your application to start with communications; these calls resemble TENew( ) From TextEdit, and will be familiar to Mac programmers.  You also have to set up a buffer at this point, since the Comm Toolbox must have access to it here.<P>
<h4><a name="0264_0009"><a name="0264_0009">Figure 4: Code to make a new terminal, connection, and file transfer record</h4><P>
<pre>
  gTerm = TMNew (&amp;theRect,&amp;theRect, tmSaveBeforeClear + tmAutoScroll,
                          procID, window, (ProcPtr) TermSendProc, (ProcPtr)
                          cacheProc,nil,
                         /* (ProcPtr) clikLoop*/nil,
                         (ProcPtr)ToolGetConnEnvirons,0,0);
  if (gTerm == nil)
             AlertUser(&quot;Can't create a terminal tool/0&quot;, true);
             HLock ((Handle)gTerm);

  /* connection tool */
  procID = FindToolID(classCM);
  if (procID == -1)       // get out of here if no tools!
             AlertUser(&quot;No connection tools found/0&quot;, true);

  sizes[cmDataIn] = kBufferSize;        // just data channel; large
                                        incoming buffer
  sizes[cmDataOut] = kBufferSize;
  sizes[cmCnt1In] = 0;
  sizes[cmCnt1Out] = 0;
  sizes[cmAttnIn] = 0;
  sizes[cmAttnOut] = 0;

  gConn = CMNew(procID, cmData, sizes, 0,0);
  if(gConn == nil)
            AlertUser(&quot;Can't create a connection tool/0&quot;, true);
  HLock ((Handle)gConn);

  /* allocate space for reads/writes using number returned by connection
  tool */
  gBuffer = NewPtrClear(sizes[cmDataIn]);
  if (MemError() != noErr)
             AlertUser(&quot;Out of memory\0&quot;, true);

  /* file transfer tool */
  procID = FindToolID(classFT);
  if (procID == -1)
             AlertUser(&quot;No file transfer tools found\0&quot;, false);

  /* no read/write proc -- tool has its own */
  gFT = FTNew(procID, 0 ,(ProcPtr)FTSendProc, (ProcPtr)FTReceiveProc,
            nil, nil, (ProcPtr)ToolGetConnEnvirons, window, OL,OL);

  if(gFT == nil)
            AlertUser(&quot;Can't create a file transfer tool\0&quot;, true);</pre><P>
<P>
Up to this point, all we're doing is setting up the Comm Toolbox to our specification. However, there's a lot going on in the background.  For example, if we didn't want the Comm Toolbox to automatically handle the terminal emulation window and instead create some iconic wonderland for users when we call TMNew with tmSaveBeforeClear + tmAutoScroll, we could add tmInvisible to tell the Comm Toolbox we're handling our own emulation appearance.  Since there's much more you can do, you should read Inside the Communications Toolbox (the manual that accompanies the Comm Toolbox) for more information.<P>
<h3><a name="0264_000a">The Idle Function<a name="0264_000a"></h3><P>
When you write a communications program, you usually set up some type of timer to read from the serial port at a timed interval.  This prevents hardware overwrites of incoming data. Then you display the data in a window on your screen by reading periodically, possibly every nth time through your event loop.  In order to handle file transfers, emulation, and data arriving via your comm buffer, you have to read this data and figure out exactly where it goes; the Comm Toolbox aids you with the functions TMIdle( ), CMIdle( ), and FTIdle( )--these functions assist you in delegating the data to the appropriate managers.  The function DoIdle( ) (see <a href="9012c.htm#0264_000e">Listing One</A>) takes care of this; please take a look at it, since yours will have to be nearly identical.  This function updates the file transfer status; the terminal emulation is handled by the Comm Toolbox.<P>
You still have to provide your own customization and buffer.  The Comm Toolbox only buffers the terminal emulation window; when the data goes off the screen, you'll have to save it to your global buffer.  (Refer to the function cacheProc( ) in the source code for an example.) When the data reaches the region that is outside of the terminal emulation region, cacheProc( ) is called; at this point, you would have to either add the data (one line at a time) to TextEdit, or add it to your own linked-list of text that you maintain yourself.  Your own linked-list of data objects is preferable, since TextEdit is slow and limited.<P>
<h3><a name="0264_000b">Other Modifications<a name="0264_000b"></h3><P>
There are a lot of simple things common sense will tell you need to be added to your program. For example, you need to answer questions like &quot;Where does the Terminal Manager get updates and key events?&quot;<P>
Your standard update loop will have to be able to notify the Terminal Manager that it needs to update its emulation region on the screen.  You can do this by verifying the terminal record's integrity (not NIL and not odd) and then calling TMUpdate( ).  This is pretty simple and allows your program to add communications without deviating significantly from a standard Macintosh program.<P>
Suppose the user is typing on the keyboard.  That action (event) will have to be translated if terminal emulation is taking place.  You'll have to add a couple of lines which make a call to TMKey( ) to the function that handles normal key events, so that the Terminal Manager will be able to handle such events.<P>
There are several other similar Terminal Manager functions to look at; again, refer to Inside the Communications Toolbox.  Functions such as TMResize( ), TMClick( ), and TMScroll( ) will be devoted to the user selecting text (or objects) within the terminal emulation region of the screen, scrolling (so that data is not lost), resizing the window (so the emulation region is affected), and so on.<P>
If your communications window (perhaps one of several windows your program is using) is in the background and is then activated by the user clicking on it, you address this activate event, bring your window to the front, and call SetPort( ) so that the Mac will know which grafPort to draw in.  Everything is pretty much the same here, except that you might want to add the calls TMActivate( ), CMActivate( ), and FTActivate( ) so that the three managers can activate their-functions appropriately.<P>
Cleaning up when your program is complete requires that you cancel the functions of the three managers and dispose of your buffer.  We can use the Memory Manager function DisposePtr( ) to get rid of our buffer, but what about the records for the Connection Manager, Terminal Manager, and the File Transfer Manager?  Just use the routines the Comm Toolbox provides: CMDispose( ), TMDispose( ), and FT Dispose( ).  Adding these calls should make everything look like a regular Mac program.<P>
<h3><a name="0264_000c">Installation<a name="0264_000c"></h3><P>
If you're still working with System 6, you'll have to install the Comm Toolbox (it's not built-in to 6) and create a new folder within the System Folder called &quot;Communications&quot; to put all of your tools in.<P>
If you're distributing an application you built with System 6, you'll also need to offer your customers an installation disk.  You can get this, along with several connection, terminal emulation, and file transfer tools from Developer Services at Apple.<P>
<h3><a name="0264_000d">Acknowledgments<a name="0264_000d"></h3><P>
The author is indebted to Mark Baumwell, James Benninghaus, Veronica Dullaghan, and Alex Kazim, all from Apple.  They provided a substantial amount of technical support and help when needed.<P>

_THE MACINTOSH COMMUNICATIONS TOOLBOX_
by Don Gaspar

<a name="0264_000e"><a name="0264_000e">
<a name="0264_000f"></pre><B>[LISTING ONE]</B><pre><a name="0264_000f">

/* Cheap Com  by Don Gaspar */
/* Requires MPW C and the Comm Toolbox. The complete program, including */
/* the resource file, header file, and make, are available electronically. */
/* These are the standard Mac includes for all managers */

#include &lt;values.h&gt;
#include &lt;types.h&gt;
#include &lt;Resources.h&gt;
#include &lt;QuickDraw.h&gt;
#include &lt;fonts.h&gt;
#include &lt;events.h&gt;
#include &lt;windows.h&gt;
#include &lt;menus.h&gt;
#include &lt;textedit.h&gt;
#include &lt;dialogs.h&gt;
#include &lt;Controls.h&gt;
#include &lt;desk.h&gt;
#include &lt;toolutils.h&gt;
#include &lt;memory.h&gt;
#include &lt;Lists.h&gt;
#include &lt;SegLoad.h&gt;
#include &lt;Files.h&gt;
#include &lt;Packages.h&gt;
#include &lt;OSEvents.h&gt;
#include &lt;OSUtils.h&gt;
#include &lt;DiskInit.h&gt;
#include &lt;Traps.h&gt;
#include &lt;String.h&gt;
#include &lt;Strings.h&gt;

#include &lt;CRMIntf.h&gt;  // Communications Resource Manager stuff
#include &lt;CMIntf.h&gt;   // Connection Manager stuff
#include &lt;FTIntf.h&gt;   // File Transfer Manager stuff
#include &lt;TMIntf.h&gt;   // Terminal Manager stuff
#include &lt;CTBUtils.h&gt; // Communications Toolbox Utility stuff

#include &quot;CommTypes.h&quot;    // communications types, etc.
#include &quot;CheapComm.h&quot;    // constants, forward declarations, etc.

/*  global variables */
Boolean      gHasWaitNextEvent;   // does user's machine have WaitNextEvent?
Boolean      gInBackground;   // are we in the background?
Boolean      gStopped;      // are we stopped?

TermHandle   gTerm;           // handle to terminal record
ConnHandle   gConn;         // handle to connection record
FTHandle     gFT;         // handle to file transfer record

Ptr        gBuffer;        // global connection buffer
long       gFTSearchRefNum;
Boolean     gStartFT;        // are we doing a file transfer?
Boolean     gWasFT;          // was a file transfer in progress?

short       gDummy;
Handle       gCache;        // buffer for last terminal line received/sent
TEHandle    gTE;       // buffer for terminal emulator
ControlHandle gScrollHHandle, gScrollVHandle;

#pragma segment Main
/*   Sends data out via choosen connection */
pascal long   TermSendProc(thePtr, theSize, refCon, flags)
   Ptr   thePtr;
   long   theSize;
   long   refCon;
   short   flags;
{
   CMErr   theErr;
   long   termSendProc = 0L;
   if (gConn != nil) {
             theErr = CMWrite(gConn,thePtr,&amp;theSize,cmData,false,nil,0,flags);
      if (theErr == noErr)
         termSendProc = theSize;
   }
   return(termSendProc);
}
#pragma segment Main
/*  Gets the data from the connection tool and sends it to the terminal tool */
pascal void TermRecvProc()
{
   CMErr      theErr;
   CMStatFlags   status;
   CMBufferSizes   sizes;
   short      flags;
   if (gConn != nil &amp;&amp; gTerm != nil) {
      theErr = CMStatus(gConn, sizes, &amp;status);
      if (theErr == noErr) {
if ((status &amp; (cmStatusOpen+cmStatusDataAvail)) != 0 &amp;&amp; sizes[cmDataIn] != 0) {
            if (sizes[cmDataIn] &gt; kBufferSize)
               sizes[cmDataIn] = kBufferSize;
theErr=CMRead(gConn, gBuffer, &amp;sizes[cmDataIn], cmData, false, nil, 0, &amp;flags);
        if (theErr  == noErr)   // give it to terminal emulation buffer
       sizes[cmDataIn] = TMStream(gTerm, gBuffer, sizes[cmDataIn], flags);
      }
   }
   else
   ;            // Connection Manager will handle this
    }
}
#pragma segment Main
/* Gets the connection environments for FT or Term tool */
pascal OSErr   ToolGetConnEnvirons(refCon, theEnvirons)
   long   refCon;
   ConnEnvironRec   *theEnvirons;
{
   OSErr   toolGetConnEnvirons = envNotPresent;
   if(gConn != nil)
      toolGetConnEnvirons = CMGetConnEnvirons(gConn,theEnvirons);
   return(toolGetConnEnvirons);
}
#pragma segment Main
/* Sends data during a file transfer */
pascal long   FTSendProc(thePtr, theSize, refCon, channel, flags)
   Ptr      thePtr;
   long      theSize;
   long      refCon;
   CMChannel  channel;
   short      flags;
{
   CMErr   theErr;
   long   ftSendProc = 0L;
    if (gConn != nil) {
      theErr = CMWrite(gConn, thePtr,&amp; theSize, channel, false, nil, 0, flags);
      if(theErr == noErr)
         ftSendProc = theSize;
   }
   return(ftSendProc);
}
#pragma segment Main
/* Gets the data during a data transfer */
pascal long   FTReceiveProc(thePtr, theSize, refCon, channel, flags)
   Ptr      thePtr;
   long      theSize;
   long      refCon;
   CMChannel  channel;
   short      *flags;
{
   CMErr      theErr;
   long      ftReceiveProc = 0L;
     if (gConn != nil) {
       theErr = CMRead(gConn, thePtr, &amp;theSize, channel, false, nil, 0, flags);
      if (theErr == noErr)
         ftReceiveProc = theSize;
   }
   return(ftReceiveProc);
}
#pragma segment Main
/* Sets file transfer flag if an autoreceive string was found */
pascal void AutoRecCallBack(theConn, data, refNum)
   ConnHandle     theConn;
   Ptr          data;
   long          refNum;
{
   if (gFTSearchRefNum == refNum)
      gStartFT = true;
}
#pragma segment Main
/* Checks if file transfer has autoreceive string; adds a search to find it */
void AddFTSearch()
{
   Str255   tempStr;
   if (gFT != nil &amp;&amp; gConn != nil) {
      //tempStr = (*gFT)-&gt;autoRec;
   if ((*gFT)-&gt;autoRec[0] != 0) {
    gFTSearchRefNum = CMAddSearch(gConn,(*gFT)-&gt;autoRec, cmSearchSevenBit,
            (ProcPtr)AutoRecCallBack);
         if (gFTSearchRefNum == -1) {
                   AlertUser(&quot;Couldn't add stream search\0&quot;, false);
            gFTSearchRefNum = 0;
         }
      }
   }
}
#pragma segment Main
/* Initiates a file transfer send from menu command */
void DoSend()
{
   SFReply    theReply;
   Point      where;
   short      numTypes;
   SFTypeList   typeList;
   FTErr      anyErr;
   if(gFT != nil) {
      SetPt(&amp;where,100,100);

      if(((**gFT).attributes &amp; ftTextOnly) != 0) {
         typeList[0] = 'TEXT';
         numTypes = 1;
      }
      else
         numTypes = -1;
    sfgetfile(&amp;where, &quot;File to send&quot;, nil, numTypes, typeList, nil, &amp;theReply);
      if(theReply.good) {
         anyErr = FTStart(gFT, ftTransmitting, &amp;theReply);
         if(anyErr != noErr)
            ;  // file transfer tool will alert user
      }
   }
}
#pragma segment Main
/* Initiates a file transfer receive from menu */
void DoReceive()
{
   SFReply   theReply;
   OSErr      anyErr;

   if (gFT != nil) {
      theReply.vRefNum = 0;
      //theReply.fName = '';
      gStartFT = false;
      if (gConn != nil ) {
         if ((**gFT).autoRec != &quot;\0&quot; &amp;&amp; gFTSearchRefNum != 0) {
            CMRemoveSearch(gConn, gFTSearchRefNum);
            gFTSearchRefNum = 0;
         }
      }
      anyErr = FTStart(gFT, ftReceiving, &amp;theReply);
      if(anyErr != noErr)
         ;  // file transfer tool will alert user
   }
}
#pragma segment Main
/* Initiates a connection */
void OpenConnection()
{
   CMErr      theErr;
   CMBufferSizes   sizes;
   CMStatFlags   status;
   if(gConn != nil) {
      theErr = CMStatus(gConn, sizes, &amp;status);
      if(theErr == noErr)
         if((status &amp; (cmStatusOpen + cmStatusOpening)) == 0)
            theErr =CMOpen(gConn, false, nil, -1);
         if (theErr != noErr)
           ;  // connection tool will tell user if there's an errror
   }
}
#pragma segment Main
/* Cancels connection */
void CloseConnection()
{
   CMErr      theErr;
   CMBufferSizes   sizes;
   CMStatFlags   status;
   if (gConn != nil) {
      theErr = CMStatus(gConn, sizes, &amp;status);
      if(theErr == noErr)
         if ((status &amp; (cmStatusOpen+cmStatusOpening)) != 0)
            theErr = CMClose(gConn, false, nil ,0, true);
      if (theErr != noErr)
         ; // connection tool will handle error
   }
}
#pragma segment Main
/* tries to get default tool proc ID, otherwise gets first one it can find */
short   FindToolID(toolClass)
   OSType   toolClass;
{
   Str255   toolName;
   OSErr   anyErr;
   short   procID = -1;
   if (toolClass == classTM) {
      StuffHex(&amp;toolName,kDefaultTermTool);
      procID = TMGetProcID(toolName);
      if(procID == -1) {
         anyErr = CRMGetIndToolName(toolClass,1, toolName);
         if (anyErr == noErr)
            procID = TMGetProcID(toolName);
      }
   }
   else if (toolClass == classCM) {
      StuffHex(&amp;toolName,kDefaultConnTool);
      procID = CMGetProcID(toolName);
      if(procID == -1) {
         anyErr = CRMGetIndToolName(toolClass,1, toolName);
         if (anyErr == noErr)
            procID = CMGetProcID(toolName);
      }
   }
   else if (toolClass == classFT) {
      StuffHex(&amp;toolName,kDefaultFTTool);
      procID = FTGetProcID(toolName);
      if(procID == -1) {
         anyErr = CRMGetIndToolName(toolClass,1, toolName);
         if (anyErr == noErr)
            procID = FTGetProcID(toolName);
      }
   }
   return(procID);
}
#pragma segment Main
/* this is click loop for terminal emulation to track */
pascal Boolean clikLoop(refcon)
   long   refcon;
{
   return(true);
}
#pragma segment Initialize
/* this function sets up CommToolbox for what we need;
   it should resemble most other Macinotosh toolbox calls   */
void InitCommTB()
{
   (void)InitCTBUtilities();   //   Comm Toolbox Utilities
   (void)InitCRM();      //   Communications Resource Manager
   //   initialize the Terminal Manager
   if (InitTM() == tmNoTools)         //   Did we fail?
      AlertUser(&quot;No terminal tools found\0&quot;, true);
   //   Initialize the Connection Manager
   if(InitCM()== cmNoTools)         //   failure?
      AlertUser(&quot;No connection tools found\0&quot;, true);
   //   Initialize the File Transfer Manager
   if(InitFT() == ftNoTools)            // failure?
      AlertUser(&quot;No file transfer tools found\0&quot;,false);
   gTerm = nil;                    // initialize our globals
   gConn = nil;
   gFT = nil;
   gCache = nil;
   gFTSearchRefNum = 0;
}
#pragma segment Main
/*   this will cache all data coming in through serial port */
pascal long cacheProc(refCon, theTermData)
   long      refCon;
   TermDataBlock   *theTermData;
{
   long      sizeCached;
   TermEnvironRec   theEnvirons;
   theEnvirons.version = curTermEnvRecVers;
   theEnvirons.termType = tmTextTerminal;
   (void)TMGetTermEnvirons(gTerm, &amp;theEnvirons);
   if (theTermData-&gt;theData == nil)
      return(-1);
   if(gCache != nil)   //   is it valid?
         DisposHandle(gCache);
   HLock((Handle)theTermData-&gt;theData);
   gCache = theTermData-&gt;theData;
   if(HandToHand(&amp;gCache)) {
         DisposHandle(gCache);
         sizeCached = -1;
      }
      else {
         sizeCached = GetHandleSize(gCache);
      }
   HUnlock((Handle)theTermData-&gt;theData);
   if(theTermData-&gt;flags == tmTextTerminal &amp;&amp; sizeCached &gt;0L) {
      /*HandAndHand(gCache, (**gTE).hText);
      (**gTE).teLength += 80;
      (**gTE).nLines += 1;*/
      ((Ptr)*gCache,80L,gTE);
      //(**gTE).viewRect.top -= (**gTE).lineHeight;
      //(**gTE).destRect.top -= (**gTE).lineHeight;
      //TECalText(gTE);
      //TEScroll(0,-(**gTE).lineHeight,gTE);
   }
   return(tmNoErr);
}
#pragma segment Main
/* gets window and create session */
Boolean DoNewWindow()
{
   WindowPtr   window;
   Rect      theRect;
   short      procID;
   CMBufferSizes   sizes;
   Rect      tempRect;
   short      index;
   Rect      r;
   window = GetNewWindow(rWindow, nil, (WindowPtr)-1);
   SetPort(window);
   /* no cache, breakproc, or clikloop */
   gTerm = TMNew(&amp;theRect,&amp;theRect, tmSaveBeforeClear + tmAutoScroll,
       procID, window, (ProcPtr)TermSendProc,(ProcPtr)cacheProc,nil,
      /*(ProcPtr)clikLoop*/nil, (ProcPtr)ToolGetConnEnvirons,0,0);
   SetRect(&amp;r,theRect.left,-theRect.bottom,theRect.right,theRect.top);
   gTE = TENew(&amp;r,&amp;r);
   (**gTE).txSize = 9;
   (**gTE).txFont = monaco;
   (**gTE).viewRect.bottom = (((**gTE).viewRect.bottom - (**gTE).viewRect.top)/
   (**gTE).lineHeight)*(**gTE).lineHeight + (**gTE).viewRect.top;
   TEAutoView(true,gTE);
   /* custom configure with personal settings -- store as a file later */
   (void)TMSetConfig(gTerm, &quot;Scroll Smooth\0&quot;);
   if(gTerm == nil)
      AlertUser(&quot;Can't create a terminal tool\0&quot;, true);
   HLock((Handle)gTerm);
   /* connection tool */
   procID = FindToolID(classCM);
   if(procID == -1)
      AlertUser(&quot;No connection tools found/0&quot;, true);
      sizes[cmDataIn] = kBufferSize*10;  // data channel; large incoming buffer
      sizes[cmDataOut] = kBufferSize;
      sizes[cmCntlIn] = 0;
      sizes[cmCntlOut] = 0;
      sizes[cmAttnIn] = 0;
      sizes[cmAttnOut] = 0;
   gConn = CMNew(procID, cmData, sizes, 0,0);
        (void)CMSetConfig(gConn,&quot;Baud 9600, Bits 7, StopBits 1, Parity Even,
                      ModemType Other, PhoneNumber \0429,1800-346-0145\042\0&quot;);
   if(gConn == nil)
      AlertUser(&quot;Can't create a connection tool/0&quot;, true);
   HLock((Handle)gConn);
/* allocate space for reads/writes using number returned by connection tool */
   gBuffer = NewPtrClear(sizes[cmDataIn]);
   if(MemError() != noErr)
      AlertUser(&quot;Out of memory\0&quot;, true);
   /* file transfer tool */
   procID = FindToolID(classFT);
   if(procID == -1)
      AlertUser(&quot;No file transfer tools found\0&quot;, false);
   /* no read/write proc -- tool has its own */
   gFT = FTNew(procID, 0 ,(ProcPtr)FTSendProc, (ProcPtr)FTReceiveProc,
      nil, nil, (ProcPtr)ToolGetConnEnvirons, window, 0L,0L);
   if(gFT == nil)
      AlertUser(&quot;Can't create a file transfer tool\0&quot;, true);
   HLock((Handle)gFT);
   gWasFT = false;
   gStartFT = false;
   gFTSearchRefNum = 0;
   AddFTSearch();
   return(true);
}
#pragma segment Main
/* Updates the window */
void DoUpdate(window)
   WindowPtr   window;
{
   RgnHandle   savedClip;
   GrafPtr    savedPort;

   if (IsAppWindow(window)) {
      GetPort(&amp;savedPort);
      SetPort(window);
      /* clip to the window content */
      savedClip = NewRgn();
      GetClip(savedClip);
      ClipRect(&amp;window-&gt;portRect);
      DrawControls(window);
      DrawGrowIcon(window);
      BeginUpdate(window);
         if(gTerm != nil )
             TMUpdate(gTerm, window-&gt;visRgn);
         if(gTE != nil)
            TEUpdate(&amp;window-&gt;portRect,gTE);
      EndUpdate(window);
      SetClip(savedClip);
      DisposeRgn(savedClip);
      SetPort(savedPort);
   }
}
#pragma segment Main
/* suspends/resumes terminal window */
void DoResume(becomingActive)
   Boolean becomingActive;
{
   WindowPtr   theWindow;
   GrafPtr    savedPort;
   GetPort(&amp;savedPort);
   theWindow = FrontWindow();
   while (theWindow!= nil) {
      if (IsAppWindow(theWindow)) {
         SetPort(theWindow);
         if(gTerm != nil)
            TMResume(gTerm, becomingActive);
         if(gConn != nil)
            CMResume(gConn, becomingActive);
         if(gFT != nil)
            FTResume(gFT, becomingActive);
      }
      theWindow = (WindowPtr)(((WindowPeek) theWindow)-&gt;nextWindow);
   }
   SetPort(savedPort);
}
#pragma segment Main
/* (de)activates window */
void DoActivate(window, becomingActive)
   WindowPtr   window;
   Boolean       becomingActive;
{
   if (IsAppWindow(window)) {   // does window belong to us?
      SetPort(window);   // set current port
      if(gConn != nil)   // do we have a valid connection?
         CMActivate(gConn, becomingActive);// activate it
      if(gTerm != nil)   // do we have a terminal?
         TMActivate(gTerm, becomingActive); // activate it
      if(gFT != nil)      // do we have a valid file transfer?
         FTActivate(gFT, becomingActive);// activate it
   }
}
#pragma segment Main
/* tries to pass event to a tool if window is a tool window;
                                           handles event if appropriate */
Boolean DoToolEvent(event, window)
   EventRecord   *event;
   WindowPtr   window;
{
   Boolean    doToolEvent;
   if (window != nil &amp;&amp; !IsAppWindow(window)) { //   is window valid?
      doToolEvent = true;
      /* copies of commtb record must be in refCon field of
         window for changing the settings   */
          if(gFT != nil &amp;&amp; gFT == (FTHandle)GetWRefCon(window))
           FTEvent(gFT,event); // handle file transfer manager event
          else if(gConn != nil &amp;&amp; gConn == (ConnHandle)GetWRefCon(window))
           CMEvent(gConn,event); // handle connection manager event
          else if(gTerm != nil &amp;&amp; gTerm == (TermHandle)GetWRefCon(window))
           TMEvent(gTerm,event); // handle terminal manager event
          else
         doToolEvent = false;
   }
   else
      doToolEvent = false;
   return(doToolEvent);
}
#pragma segment Main
/* idles all communications tools; this was taken from the Surfer pascal
   example provided from Apple -- you can get it from APDA.*/
void DoIdle()
{
   WindowPtr   theWindow;
   Boolean    doFT, doTM;
   GrafPtr    savedPort;
   GetPort(&amp;savedPort);
   theWindow = FrontWindow();
   while (theWindow != nil) {
      if (IsAppWindow(theWindow)) {
         SetPort(theWindow);
         //TEIdle(gTE);
         if(gConn != nil)
            CMIdle(gConn);
         doFT = false;
         doTM = true;
         if (gFT != nil ) {
            if (((**gFT).flags  &amp; ftIsFTMode) != 0) {
               doFT = true;
               gWasFT = true;
                             if(((**gFT).attributes &amp; ftSameCircuit) != 0)
                  doTM = false;
            }
            else {
               if (gWasFT) {
                  gWasFT = false;
                     if(((**gFT).flags &amp; ftSucc) == 0)
                     ;
                  AddFTSearch();
               }
               if(gStartFT)
                  DoReceive();
            }
            if (doFT)
               FTExec(gFT);
         } /* if gFT != nil  */
         if(gTerm != nil) {
            if (doTM) {
               TMIdle(gTerm);
               TermRecvProc();
            }
         }/* gTerm != nil */
      }
      theWindow = (WindowPtr)(((WindowPeek)theWindow)-&gt;nextWindow);
   }
   SetPort(savedPort);
}





<P>
<P>
</pre></BODY></HTML>
