<html><head><title>Mar04: A Struts Tool for Previewing Forms & Generating Beans</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>A Struts Tool for Previewing Forms &amp; Generating Beans</h1><p><i>Dr. Dobb's Journal</i> March 2004</p><h2>Viewing forms and  generating code</h2><h3>By Andy W.K.Yuen</h3><I>Andy is a solution architect. He can be reached at andyyuen@kardinia.com.</I><hr><p>Apache's Jakarta Struts is rapidly becoming the de facto standard MVC (Model-View-Controller) Framework for building Java web applications. For Struts applications, there is usually an <i>Action</i> class associated with each JavaServer Page (JSP). If the JSP is an input form, there is also an associated <i>ActionForm</i> class that handles input data, unless you are using the DynaActionForm and Validator framework new to Struts 1.1. But for small to medium projects, <i>ActionForm</i> classes may be simpler to use.</p><p>There are a number of freely available tools to automatically generate <i>ActionForm</i> classes; for example, the Easy Struts plug-in for IDEs such as Eclipse and Borland's JBuilder. There are even IDEs such as Struts Studio that are specifically built for developing Struts applications. Easy Struts (http://www.easystruts.sourceforge .net.com/) generates <i>ActionForm/Action</i> classes as well as JSPs. Easy Form (one of the Easy Struts wizards) requires users to define the name and type of input before generating the code for <i>ActionForm/Action</i> classes and JSP. Struts Studio (http://www.exadel.com/) generates <i>ActionForm</i> and <i>Action</i> classes, but the generated <i>ActionForm</i> classes do not have any <i>getter/setter</i> methods for passing form parameters. They have to be added manually. Still, they are good tools for building Struts applications. </p><DDJADVERTISEMENT INLINE><p>When building web applications, I usually start with storyboarding&#151;that is, designing the overall structure of the site and some web pages before coding the business logic. I want to be able to quickly put together some web pages, including forms, using the Struts tag libraries and see how they look. However, to view a Struts form, you must go through a number of steps:</p><ul>  <li>Define the mapping between form-beans (<i>ActionForms</i>) and actions (<i>Actions</i>) in the struts-config.xml file.  <li>Code the <i>Action</i> and <i>ActionForm</i> classes for the form.  <li>Compile the classes.  <li>Restart the web container or the Struts ActionServlet.</ul><p>It occurred to me that what I'd really like to do is simply upload and view a Struts form coded using the Struts tag libraries without updating the Struts configuration file and restarting the web container. Moreover, I'd like for the tool that does this to generate the <i>ActionForm</i> class(es) from the form so that it/they can be used later for production. In this article, I present a tool that does just this. The complete source code for this tool is available electronically; see "Resource Center," page 5.</p><h3>Design</h3><p>The main requirement of this tool is to be able to upload a JSP form coded using the Struts tag libraries and display it without additional development work. The intention is to preview Struts forms during the development cycle instead of for use in a production environment. </p><p>To do this, you must first understand how Struts processes such a request:</p><ul>  <li>Struts checks the configuration for an <i>Action</i> mapping to an <i>ActionForm</i>.  <li>If an <i>ActionForm</i> associated with the <i>Action</i> is found, it checks to see if an instance of the <i>ActionForm</i> with the proper scope (request or session) is present.  <li>If a proper instance is found, it reuses that instance; otherwise, it instantiates a new one and saves it in the proper scope.  <li>Struts calls the <i>ActionForm</i>'s <i>reset()</i> method to initialize or reset its properties and displays the JSP form.  <li>When the submit button is clicked, Struts populates the <i>ActionForm</i> properties with the input parameters using the <i>ActionForm</i>'s <i>setter</i> methods.  <li>If input validation is set to True, it calls the <i>ActionForm</i>'s <i>validate()</i> method and invokes the associated action.</ul><p>To display a JSP form using the Struts framework, associated <i>Action</i> and <i>ActionForm</i> entries have to be configured in the Struts configuration file. Two approaches for achieving this come to mind:</p><ul>  <li>For each upload, reconfigure the Struts configuration file to add the new <i>Action/ActionForm</i> mapping, generate and compile the associated <i>Action</i> and <i>ActionForm</i> classes.  <li>Reuse the mapping of an existing <i>Action/ActionForm</i>, generate and compile a new <i>ActionForm</i> using the existing name configured in Struts. The <i>Action </i>class does not need to be changed.</ul><p>The first approach requires that the Struts configuration file be updated for each upload. For Struts to reread the configuration file, the Struts <i>ActionServlet</i> must be restarted. Another issue with this approach is that after a while the Struts configuration file is cluttered with many unwanted entries.</p><p>The second approach is simpler because it only involves generating/compiling/reloading an <i>ActionForm</i> class from the uploaded JSP. Both the uploaded JSP form and generated <i>ActionForm</i> must be renamed to match a particular <i>Action/ActionForm</i> mapping in the Struts configuration file. </p><p>The Struts application built using the second approach is meant to be a personal Struts productivity tool only. It is a personal tool because it requires features&#151;autoloading of modified Java classes and autocompilation of modified JSPs&#151;on the web container that are usually turned off in production environments. Another limitation is that for every upload, the resultant JSP and <i>ActionForm</i> class always use the same name. Race conditions result if multiple users are uploading JSP forms for preview at the same time. The intent is to provide a personal productivity tool to help you preview your JSP forms without reconfiguring Struts and restarting the web container. Since you are usually the only user of the application, the single-user limitation is not an issue.</p><h3>Implementation</h3><p>The overall organization of this tool is  straightforward. The welcome page (index.jsp) redirects to the /pages/fileupload.jsp. It is a simple file upload form. The <i>Action</i> and <i>ActionForm</i> classes are called <i>FileUploadAction</i> and <i>FileUploadForm,</i> respectively. The <i>FileUploadAction </i>class does all the processing and performs the following tasks:</p><p></p><p>1. Uploads the file (JSP form) and saves it temporarily in a string.</p><p>2. Generates one or more <i>ActionForm</i> classes depending on whether there are multiple forms in the JSP and saves the class(es) as a string in the session context. Each class has <i>getter/setter</i> methods in addition to the <i>reset()</i> and <i>validate()</i> methods. The name of the <i>ActionForm</i> class generated is derived from the <i>html:form</i> tag's <i>action</i> attribute. For example, for <i>action="UserInput.do",</i> the <i>ActionForm</i> class name generated will be <i>UserInputForm</i>. It takes the part of the attribute value before the ".do" and appends "Form" to it.</p><p>3. Generates the <i>UserPageForm</i> class based on the content of the uploaded JSP. <i>UserPage</i> and <i>UserPageForm</i> are pre-configured entries in the Struts configuration file (<A NAME="rl1"><A HREF="#l1">Listing One</A>) used in displaying the uploaded form. Even if there is more than one form in the uploaded JSP form, only one <i>ActionForm</i> (<i>UserPageForm</i>) will be created. <i>getter/setter</i> methods from the second form onwards are added to <i>UserPageForm</i>. The content is saved in /temp/ UserPageForm.java.</p><p>4. Compiles the /temp/UserPageForm.java file using the batch file /temp/buildform.bat.</p><p>5. Replaces all occurrences of the action references to "UserPage.do" and all references of <i>ActionForm</i> named <i>XXXForm</i> in the uploaded JSP form to "UserPageForm." UserPage.do and <i>UserPageForm</i> are the preconfigured action and <i>ActionForm</i> names. The modified content of the uploaded JSP form is saved in the file /pages/userpage.jsp.</p><p>6. Forwards to the /pages/viewsource.jsp.</p><p></p><p>The /pages/viewsource.jsp retrieves the string containing the generated <i>ActionForm</i> class(es) from the session context for display on the screen. It also provides a link to view the uploaded page. The <i>ActionForm</i> class(es) displayed by this page is different from the UserPageForm.java. The class(es) displayed are meant to be copied and pasted by users into <i>ActionForm</i> Java file(s) for use with the unmodified upload page in the production environment (after users add the validation logic). The UserPageForm.java generated and saved on the server is for use with the modified uploaded page for display purpose. Struts displays the page because it has the mapping configured in the struts- config.xml file.</p><p>When users click on the View Form link, the tool displays the uploaded JSP form. Clicking on the Submit button brings users back to the upload page.</p><p>Generating the <i>ActionForm</i> classes in steps 2 and 3 is done using the five classes in the Codegen package:</p><ul>  <li>PrintfFormat.java, a utility class from Sun Microsystems that implements the C-style <i>sprintf</i> functionality.  <li>FormElement.java, that records four pieces of information&#151;<i>ID, Name, Value</i>, and <i>Multi</i>&#151;for use by <i>BeanGenerator</i> to generate <i>ActionForms</i>. <i>ID</i> identifies the Struts HTML library tag that is to be processed. <i>Name</i> records the name of the input parameter for which <i>getter/setter</i> methods will be generated. <i>Value</i> contains the initial value of the parameter. <i>Multi</i> indicates whether the parameter is to be saved as a simple property or a property array.  <li>FormObject.java, used to accumulate <i>FormElements</i> in a Java vector as the <i>FormParser</i> parses the JSP form. The <i>FormObject</i> is used by the <i>BeanGenerator</i> to access the individual <i>FormElements</i> to generate code.  <li>FormParser.java, used to parse a JSP form written using a combination of Struts tag libraries and HTML into <i>FormElements</i> and saved in a <i>FormObject</i>. It handles Struts HTML tags including: text, password, checkbox, radio, file, button, text area, select, hidden, multibox, and form.  <li>BeanGenerator.java, uses a <i>FormParser</i> object to parse a JSP form into <i>FormElements</i> contained in a <i>FormObject</i> and generates ActionForm beans. It provides methods to generate <i>ActionForm</i> beans based on the original JSP form (step 2) and a <i>UserPageForm</i> bean (step 3). This class has a <i>main()</i>. It can be used as a command-line program to generate <i>ActionForm</i> beans and display them on the screen. You invoke it like this: <i>java BeanGenerator file1 file2</i> ...</ul><p>The <i>FileUploadAction</i> class's <i>execute()</i> method uses a <i>BeanGenerator</i> object to generate the <i>UserPageForm</i> bean used for JSP form preview. It also generates one or more <i>ActionForm</i> beans for the uploaded JSP for display by the viewsource.jsp depending on whether there are multiple forms on the one JSP page uploaded. It spawns off another process to execute the /temp/buildform.bat file to compile the UserPageForm.java file. The buildform.bat file is for Windows only. You need to write your own shell script to compile the <i>ActionForm</i> bean if you are running this application on Linux or other UNIX systems. </p><p>All the <i>Action</i> and <i>ActionForm</i> Java source files are put into the application package. The Constants.java file defines string constants such as global forwards to be shared among the <i>Action</i> and <i>ActionForm</i> files.</p><h3>Examples</h3><p><A NAME="rl1"><A HREF="#l1">Listing One</A> shows the struts-config.xml file that defines:</p><ul>  <li>Two form beans (<i>ActionForm</i> classes) for the application. The <i>FileUploadForm</i> is for uploading the JSP to the application. The <i>UserPageForm</i> is reserved for displaying the uploaded JSP.  <li>There are two actions: <i>FileUploadAction</i> is invoked with the <i>FileUploadForm, </i>which<i> </i>is passed to it when a request to the URI /beanGenerator/FileUpload is made by users. <i>beanGenerator</i> is the name of this app. No parameter validation is to be performed. The <i>Action</i> forwards to /pages/viewsource.jsp. <i>UserPageAction</i> is invoked with the <i>UserPageForm</i> that is passed to it when a request to the URI /beanGenerator/UserPage is made by users, and so. The <i>ActionForm</i> beans are of request scope.  <li>Only a base resource bundle has been defined for this application. The messages in the bundle are kept in the file application.properties. When a key is not located in the bundle, it displays the key instead of a Null string.</ul><p>I used Exadel's Struts Studio Community Edition (http://www.exadel.com/) to build this application. The Struts Studio IDE allows viewing the struts configuration file either diagrammatically or as an XML file. <A NAME="rf1"><A HREF="0403if1.htm">Figure 1</A> shows the Struts Studio IDE with the Struts configuration displayed as a diagram.</p><p><A NAME="rl2"><A HREF="#l2">Listing Two</A> (MultiOrder.jsp) is the file uploaded for viewing. It contains six forms. <A NAME="rl3"><A HREF="#l3">Listing Three</A> (/pages/userpage.jsp) is the modified uploaded page to map to the existing Struts configuration file. <A NAME="rl4"><A HREF="#l4">Listing Four</A> (displayed by /pages/viewsource.jsp) shows the <i>ActionForm</i> classes generated for use with the original multiform.jsp for use in the production environment. <A NAME="rl5"><A HREF="#l5">Listing Five</A> (UserPageForm.java) is the <i>ActionForm</i> class generated for use with the modified uploaded page (/pages/userpage.jsp) to display it and accept input. If the <i>CheckOut</i> form had any input widgets, all its <i>getter/setter</i> methods would have been added to the <i>UserPageForm</i> class. <A NAME="rf2"><A HREF="0403if2.htm">Figure 2</A> shows the display of this uploaded page.</p><p>A number of more complicated JSP forms have been included, together with the source code of this application, as examples and for testing the application. You should try them out and examine the code generated for the <i>ActionForm</i> beans as well as the modified uploaded page (/pages/userpage.jsp) and its <i>ActionForm</i> (/temp/UserPageForm.java) after each upload to fully understand how this application works.</p><h3>Conclusion</h3><p>The main limitation of the application is that it uses a fixed <i>Action/ActionForm</i> mapping for previewing uploaded JSP forms. Consequently, the tool can only be used by one user at a time. If more than one user is uploading a JSP form for preview, the application may be modifying the /pages/userform.jsp and /temp/UserPageForm.java files at the same time and causes errors when displaying the uploaded page. </p><p>This tool is written for Windows. To run it on nonWindows platforms, write your own shell script named "buildform.sh" for compiling the UserPageForm.java. The content of your shell script should be quite similar to that of the Windows buildform.bat file. The application (Constant.java's <i>getBuildFileName()</i> static method) detects the platform by looking at the platform-separator character. If the character is "/", it is assumed to be Windows and "buildform.bat" is invoked to compile the action form. Otherwise, "buildform.sh" is invoked.</p><p><b>DDJ</b></p><H4><A NAME="l1">Listing One</H4><pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE struts-config PUBLIC "-//Apache Software Foundation//DTD                                 Struts Configuration 1.1//EN"                               "http://jakarta.apache.org/struts/                                dtds/struts-config_1_1.dtd"&gt;&lt;struts-config&gt; &lt;data-sources/&gt; &lt;form-beans&gt;  &lt;form-bean name="FileUploadForm" type="application.FileUploadForm"/&gt;  &lt;form-bean name="UserPageForm" type="application.UserPageForm"/&gt; &lt;/form-beans&gt; &lt;global-exceptions/&gt; &lt;global-forwards&gt;  &lt;forward name="upload" path="/pages/fileupload.jsp"/&gt;  &lt;forward name="view" path="/pages/userpage.jsp"/&gt; &lt;/global-forwards&gt; &lt;action-mappings&gt;  &lt;action name="FileUploadForm" path="/FileUpload" scope="request"   type="application.FileUploadAction" validate="no"&gt;   &lt;forward name="viewsource" path="/pages/viewsource.jsp"/&gt;  &lt;/action&gt;  &lt;action name="UserPageForm" path="/UserPage" scope="request"   type="application.UserPageAction" validate="no"/&gt; &lt;/action-mappings&gt; &lt;controller/&gt; &lt;message-resources null="false" parameter="application"/&gt;&lt;/struts-config&gt;</pre><P><A HREF="#rl1">Back to Article</A></P><H4><A NAME="l2">Listing Two</H4><pre>&lt;%@ taglib uri="/WEB-INF/struts-bean.tld" prefix="bean" %&gt;&lt;%@ taglib uri="/WEB-INF/struts-html.tld" prefix="html" %&gt;&lt;%@ taglib uri="/WEB-INF/struts-logic.tld" prefix="logic" %&gt;&lt;html:html locale="true"&gt;&lt;head&gt;    &lt;title&gt;Shopping Cart Content&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h3&gt;Shopping Cart Content&lt;/h3&gt;&lt;table border="1" align="center"&gt;&lt;tr bgcolor="#808080"&gt;&lt;th&gt;Item Id&lt;/th&gt;&lt;th&gt;Item Description&lt;/th&gt;&lt;th&gt;Unit Cost&lt;/th&gt;                                      &lt;th&gt;Quantity&lt;/th&gt;&lt;th&gt;Total Cost&lt;/th&gt;&lt;% for (int i = 0; i &lt; 5; i++) { %&gt;&lt;tr&gt;    &lt;td&gt;&lt;%= i %&gt;&lt;/td&gt;    &lt;td&gt;Widget &lt;%= i %&gt;&lt;/td&gt;    &lt;td&gt;&lt;%= 10.95 + i * 10 %&gt;&lt;/td&gt;    &lt;td&gt;        &lt;html:form action="Order.do"&gt;        &lt;html:hidden property="itemId" value="Id&lt;%= i %&gt;" /&gt;        &lt;html:text property="quantity" value="1" /&gt;        &lt;html:submit value="Update Quantity" /&gt;        &lt;/html:form&gt;    &lt;/td&gt;    &lt;td&gt;&lt;%= 10.95 + i * 10 %&gt;&lt;/td&gt;&lt;/tr&gt;&lt;% } %&gt;&lt;/table&gt;&lt;html:form action="CheckOut.do"&gt;&lt;center&gt;&lt;html:submit value="Checkout" /&gt;&lt;/center&gt;&lt;/html:form&gt;&lt;/body&gt;&lt;/html:html&gt;</pre><P><A HREF="#rl2">Back to Article</A></P><H4><A NAME="l3">Listing Three</H4><pre>&lt;%@ taglib uri="/WEB-INF/struts-bean.tld" prefix="bean" %&gt;&lt;%@ taglib uri="/WEB-INF/struts-html.tld" prefix="html" %&gt;&lt;%@ taglib uri="/WEB-INF/struts-logic.tld" prefix="logic" %&gt;&lt;html:html locale="true"&gt;&lt;head&gt;    &lt;title&gt;Shopping Cart Content&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h3&gt;Shopping Cart Content&lt;/h3&gt;&lt;table border="1" align="center"&gt;&lt;tr bgcolor="#808080"&gt;&lt;th&gt;Item Id&lt;/th&gt;&lt;th&gt;Item Description&lt;/th&gt;&lt;th&gt;Unit Cost&lt;/th&gt;                                      &lt;th&gt;Quantity&lt;/th&gt;&lt;th&gt;Total Cost&lt;/th&gt;&lt;% for (int i = 0; i &lt; 5; i++) { %&gt;&lt;tr&gt;    &lt;td&gt;&lt;%= i %&gt;&lt;/td&gt;    &lt;td&gt;Widget &lt;%= i %&gt;&lt;/td&gt;    &lt;td&gt;&lt;%= 10.95 + i * 10 %&gt;&lt;/td&gt;    &lt;td&gt;        &lt;html:form action="UserPage.do"&gt;        &lt;html:hidden property="itemId" value="Id&lt;%= i %&gt;" /&gt;        &lt;html:text property="quantity" value="1" /&gt;        &lt;html:submit value="Update Quantity" /&gt;        &lt;/html:form&gt;    &lt;/td&gt;    &lt;td&gt;&lt;%= 10.95 + i * 10 %&gt;&lt;/td&gt;&lt;/tr&gt;&lt;% } %&gt;&lt;/table&gt;&lt;html:form action="UserPage.do"&gt;&lt;center&gt;&lt;html:submit value="Checkout" /&gt;&lt;/center&gt;&lt;/html:form&gt;&lt;/body&gt;&lt;/html:html&gt;</pre><P><A HREF="#rl3">Back to Article</A></P><H4><A NAME="l4">Listing Four</H4><pre>// ActionForm class: OrderForm.java// Generated by beanGenerator on: Sun Aug 10 12:29:14 EST 2003import javax.servlet.http.HttpServletRequest;import org.apache.struts.action.ActionError;import org.apache.struts.action.ActionErrors;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionMapping;import org.apache.struts.upload.FormFile;public class OrderForm extends ActionForm {private String itemId = "";public String getItemId() { return itemId; }public void setItemId(String itemId) { this.itemId = itemId; }private String quantity = "1";public String getQuantity() { return quantity; }public void setQuantity(String quantity) { this.quantity = quantity; }public void reset(ActionMapping actionMapping, HttpServletRequest request) {    // TODO: Write method body        quantity = "1";        itemId = "";}public ActionErrors validate(ActionMapping actionMapping,                                                HttpServletRequest request) {    // TODO: Write method body    throw new UnsupportedOperationException("Method not implemented");}}// ActionForm class: CheckOutForm.java// Generated by beanGenerator on: Sun Aug 10 12:29:14 EST 2003import javax.servlet.http.HttpServletRequest;import org.apache.struts.action.ActionError;import org.apache.struts.action.ActionErrors;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionMapping;import org.apache.struts.upload.FormFile;public class CheckOutForm extends ActionForm {public void reset(ActionMapping actionMapping, HttpServletRequest request) {    // TODO: Write method body}public ActionErrors validate(ActionMapping actionMapping,                                                 HttpServletRequest request) {    // TODO: Write method body    throw new UnsupportedOperationException("Method not implemented");}}</pre><P><A HREF="#rl4">Back to Article</A></P><H4><A NAME="l5">Listing Five</H4><pre>package application;// ActionForm class: UserPageForm.java// Generated by beanGenerator on: Sun Aug 10 12:29:14 EST 2003import javax.servlet.http.HttpServletRequest;import org.apache.struts.action.ActionError;import org.apache.struts.action.ActionErrors;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionMapping;import org.apache.struts.upload.FormFile;public class UserPageForm extends ActionForm {private String itemId = "";public String getItemId() { return itemId; }public void setItemId(String itemId) { this.itemId = itemId; }private String quantity = "1";public String getQuantity() { return quantity; }public void setQuantity(String quantity) { this.quantity = quantity; }public void reset(ActionMapping actionMapping, HttpServletRequest request) {    // TODO: Write method body        quantity = "1";        itemId = "";}public ActionErrors validate(ActionMapping actionMapping,                                                HttpServletRequest request) {    // TODO: Write method body    throw new UnsupportedOperationException("Method not implemented");}}</pre><P><A HREF="#rl5">Back to Article</A></P></body></html>