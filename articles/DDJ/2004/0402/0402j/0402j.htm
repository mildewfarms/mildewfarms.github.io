<html><head><title>Feb04: ASP.NET Forms Authentication  Best Practices</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>ASP.NET Forms Authentication  Best Practices</h1><p><i>Dr. Dobb's Journal</i> February 2004</p><h2>Protecting user information is critical</h2><h3>By Douglas Reilly</h3><I>Douglas is the author of Designing Microsoft ASP.NET Applications and owner of Access Microsystems. Doug can be reached at doug@accessmicrosystems.com.</I><hr><p>For most ASP.NET web sites that need to be secured, the only reasonable option for authenticating users is ASP.NET Forms Authentication. While Windows and Passport authentication are available, they are not nearly as popular. For Windows Authentication, you need to have all users in a Windows domain, which is impractical for many applications&#151;especially Internet applications. Passport Authentication is attractive, although not necessarily developer friendly, both financially and tool-wise.</p><p>A major issue for all developers is security, particularly when it comes to storing and safeguarding user's personal information&#151;and among the most sensitive stored information is the user's password. Unlike credit-card information that many sites store only until credit-card authorization is received, passwords must be used to authenticate users for every visit to a restricted web page.</p><DDJADVERTISEMENT INLINE><p>I can hear you saying, "My site does not really contain any really secret information. We use Forms Authentication primarily to let users personalize the content they receive, and save information they have entered for future visits." While that can be the case, it misses the point. Recently I did an informal survey of my nonprogrammer friends and relatives and asked how many passwords they use. Virtually all of the Internet users used either a single password or a couple of passwords for all sites. Generally, they used one password when there are no special character requirements and another for sites that demand a greater variety of character types (numbers and punctuation). Of the two users who said they specify a different password for every site, one indicated it was a burden and planned to change since it caused no end of confusion.</p><h3>Does Your Site Require High Security?</h3><p>So even if your site does not contain top-secret information, it is likely it does contain passwords that guard much more sensitive sites. Knowing this, what can you do? Is encrypting the user passwords sufficient? What happens if your user database is compromised? Will your encryption survive attacks where there's unlimited time to process the passwords? And what about a rogue administrator who has access to the site, database, passwords, and algorithms used to encrypt the passwords?</p><p>The solution is to use a one-way hash, a cryptographic technique that encrypts in a way that it is impossible to derive the original value from the hashed value. Using this technique, even you don't know the password of users (unless the login page is modified to capture the clear text of the password as it is entered).</p><p>When I suggest using a one-way hash for passwords on various newsgroups, the objection is that users will not be able to recover passwords when they're lost. True, but alternate arrangements can be made; for instance, e-mailing new passwords (perhaps made from combining two random words with a punctuation mark between them) or a link that brings users to a page where they can directly enter the password they wish to use. If the real user requests the password be reset, the e-mail about the new password shortly arrives. If someone else requests that the password be reset using a different user's e-mail, when the e-mail message is sent to real users, it alerts them that someone has been tinkering with their user account.</p><h3>ASP.NET Forms Authentication Basics</h3><p>To use Forms Authentication in ASP.NET, you need to modify settings in the Web.Config file in the application folder. The Authentication section of Web.Config needs to be changed to look something like <A NAME="rl1"><A HREF="#l1">Listing One</A>(a), where you want to use login.aspx to log users in. <i>protection="All" </i>means that you want data validation and encryption on the authentication cookie. There is a 30-minute timeout on the cookie, and the cookie is saved in the root path. In addition, the Authorization element must also be changed to look like <A NAME="rl1"><A HREF="#l1">Listing One</A>(b).</p><p>If you do not deny unauthenticated users (signified by the "?"), then Forms Authentication won't work, and all users will be able to get to all pages. In this example, you also have a Registration page, and users need to get to this page even though they are not logged in. To allow this, add the location element in <A NAME="rl1"><A HREF="#l1">Listing One</A>(c) to Web.Config, inside the configuration element. This section is used as a location override for the Register.aspx page. In this example, I explicitly allow unauthenticated users to reach the register page.</p><p><A NAME="rl2"><A HREF="#l2">Listings Two</A> and Three validate users against one-way hashed passwords. (The complete source code and SQL Database Create Script are available electronically; see "Resource Center," page 5.) <A NAME="rl2"><A HREF="#l2">Listing Two</A> is the <i>UserDB</i> utility class that calls the underlying database, and would likely be something you might change if it is implemented on your site. In the example, the <i>SqlClient</i> namespace is used and stored procedures are called using <i>SqlParameters</i>. (Using parameters, rather than building up SQL strings to execute, is critical to building secure systems. Stored Procedures are not essential since you can also use parameters on ad hoc SELECT, UPDATE, and INSERT SQL Statements.) </p><h3>A User Database Class</h3><p>The <i>UserDB</i> class contains three public static methods. </p><ul>  <li>The first is <i>SelectUserInfo</i>. Given a <i>UserName</i> (passed as a parameter), this method returns a <i>DataSet</i> with the information for the requested user, or a null if the user is not found. In this example, the fields returned in <i>Tables[0]</i> are:<blockquote><PRE>int PersonIDstring LastNamestring FirstNamestring UserNameDateTime LastLoginstring EMailBool MustChangePasswordString PasswordHashstring SaltDateTime DatePasswordChange</PRE></blockquote><i>MustChangePassword</i> is a Boolean value that indicates if users should be forced to change their password. Commonly, you might set this to True if the user's password is reset. <br><br>  <li>The second method in the <i>UserDB</i> class is <i>ChangePassword</i>, with the signature:<BLOCKQUOTE><PRE>public static bool ChangePassword(int UserID,   string NewPasswordHash,   string Salt,bool MustChangePassword)</PRE></BLOCKQUOTE>This method does exactly what you would expect, allowing the password for the specified user (by the <i>UserID</i> parameter) to be changed. Since you are not storing a plaintext password in the database, what is sent is not the password but rather the hashed password and the string used as salt for the hashing.<br><br>  <li>The final method in <i>UserDB</i> is <i>SaveNewUser</i>, with the signature: <BLOCKQUOTE><PRE>public static bool SaveNewUser(string UserName,   string LastName,string FirstName,string email,     string PasswordHash,string Salt,   bool MustChangePassword)</PRE></BLOCKQUOTE>This method is used to create new users and simply passes the information sent into a stored procedure. Each of these methods calls a stored procedure and you can replace this code with whatever database code you like.</ul><h3><i>User</i> Class</h3></blockquote><p>The <i>User</i> class (<A NAME="rl3"><A HREF="#l3">Listing Three</A>), where the real work of securing user passwords takes place, has a number of private variables and two private methods. One possible way to compromise a password database is to use a dictionary attack. For example, assume a common password is "password." Using one-way encryption, if two users have set their password to "password," once one password is compromised, all other users who have the same hashed password are also compromised.</p><p>This is where the previously mentioned <i>Salt</i> comes into use. <i>Salt</i> is just a string of characters, for instance <i>LGk2dcw=</i>, used in combination with the clear text password, so that when hashed, each hashed password is different even if the original password is the same. There is the private method <i>CreateSalt</i> in the <i>User</i> class; see <A NAME="rl4"><A HREF="#l4">Listing Four</A>(a). The <i>RNGCryptoServiceProvider</i> class referenced in <i>CreateSalt</i> is a class that provides a random-number generator using the implementation provided by the Cryptographic Service Provider. <i>GetBytes</i> returns a cryptographically strong sequence of values, meaning the values are random in a precise way. There is an additional private method in the <i>User</i> class that is used to create the password and hash; see <A NAME="rl4"><A HREF="#l4">Listing Four</A>(b). This method concatenates the password and salt, then creates a hashed password by calling the somewhat unfortunately named <i>HashPasswordForStoringInConfigFile</i> method of the <i>FormsAuthentication</i> class. This method does exactly what it says, creating a hash suitable for storing in a configuration file (that is, nonbinary). For instance, a hash might look like this string:</p><blockquote><p>4EF1EED06A845CE5385FC7DA2E848C4F93401D58</p></blockquote><p>This is a representation of the hash where each byte is represented by two hex characters. The class is used in several places, first in the Login.aspx.cs page, the code-behind page for the Login page. When users enter a username/password and click the Login button, the click handler (<A NAME="rl5"><A HREF="#l5">Listing Five</A>) is called. The <i>btnLogin_Click</i> method instantiates a new <i>User</i> object and fills in the required properties for authentication (<i>UserName</i> and <i>Password</i>). With the required properties set, <i>btnLogin_Click</i> calls the <i>VerifyPassword</i> instance method on the newly instantiated <i>User</i> object.</p><p>After declaring variables and validating that required properties are set correctly, the <i>VerifyPassword</i> method calls the static <i>SelectUserInfo</i> in the <i>UserDB</i> class. Recall that this method returns a <i>DataSet</i> with a single table and a single row&#151;presuming that there is some data returned in the <i>DataSet</i>, determined by checking the <i>Count</i> property of the <i>Tables</i> collection of the <i>DataSet</i>; see <A NAME="rl6"><A HREF="#l6">Listing Six</A>.</p><p>Once you've confirmed that there is some data in the table, gather the <i>Salt</i> from the returned <i>DataSet</i> with the <i>Password</i> the user has entered, and create a hashed password. Given that newly hashed password, you compare it with the value stored in the database as <i>PasswordHash</i>. If the new hashed password and the one from the database are the same, you know the users are who they say they are (or at least that they know the correct password). </p><p>Looking back at <i>btnLogin_Click</i>, if users appear to be who they say they are, call <i>RedirectFromLoginPage</i> from the <i>FormsAuthentication</i> class. This method sets a cookie used to track who users are, and redirects users back to the page they were sent from. So in this application, you might set Default.aspx as the homepage, and when users try to access that page, they are redirected to the Login.aspx page.</p><p>Of course, there are a couple of other requirements when you are creating an application secured with forms authentication. The standard way to change a password is to enter the current password, then enter the new password twice. On this screen, I use standard ASP.NET validators to verify that the fields are filled in, and that the new password is entered identically twice. One thing to be especially careful about is exposing information you do not intend to in the validator code. If, in fact, your system lets you know the user's current password, it would be a terrible idea to use the <i>Compare</i> validator to ensure that the <i>Old Password</i> field is filled with the correct password. The <i>Compare</i> validator has a <i>ValueToCompare</i> property that could be used to hold this value; however, doing so sends the current password to the browser as clear text.</p><p><A NAME="rf1"><A HREF="0402jf1.htm">Figure 1</A> is the <i>Change Password</i> screen with the new password not entered correctly in both fields. Once all fields pass the validators and the user clicks the <i>Submit</i> button, <A NAME="rl7"><A HREF="#l7">Listing Seven</A> in the <i>Button1_Click</i> method is executed. Once again, the <i>User</i> object is created and the properties are set. In this example, you use the <i>User.Identity.Name</i> property to get the <i>UserName</i> that was saved when <i>FormsAuthentication.RedirectFromLoginPage</i> was called on the Login screen if the current password entered is correct (as confirmed by a <i>true</i> return from <i>VerifyPassword</i>).</p><p>There is one quirk in how <i>RedirectFromLoginPage</i> works. If you go directly to the login page instead of going to a secured page and then redirecting to the login page, there is no <i>ReturnUrl</i> passed in the query string to the login page. In that case, ASP.NET redirects to a page named Default.aspx (and displays a 404 error if you do not have a Default.aspx). My solution is to always have a Default.aspx, even if that is not in fact the real homepage, and redirect from that page to whatever the real homepage is.</p><p>To make this system something that you can just use (and not what you should be doing in a real application), this system lets you register if you like from the main page. Clicking on the Register link from the login page brings you to a form like in <A NAME="rf2"><A HREF="0402jf2.htm">Figure 2</A>. This screen also uses ASP.NET validators to ensure required fields are entered and that the password is entered identically in both password fields (using logic just like the <i>ChangePassword</i> screen). When you click the Save button, <A NAME="rl8"><A HREF="#l8">Listing Eight</A> is executed. In this case, I also instantiate a <i>User</i> object, but rather than use it, I just call the <i>SaveNewUser</i> method on that object. In the end, this code calls simply down into the <i>UserDB</i> method of the same name, after doing the same one-way hashing on the password and salt.</p><h3>Possible  Enhancements</h3><p>There are a number of improvements that could be made to this code in a production environment. First, you might want to implement a Group system, so that in addition to allowing/disallowing unauthenticated users, you can use a full role-based system. By storing user roles in the authentication cookie, you can restore them into a <i>GenericPrincipal</i> object whenever <i>Application_AuthenticateRequest</i> is called. Also, to avoid another roundtrip to the database, I do not have a method in place to seed the <i>LastLogin DateTime </i>field when users log in. If this is important, you could implement this. And finally, the logic to reset the password is not present, although the same logic used to create new users can be used to reset passwords. From there, you could use whatever logic you want to send new passwords to users.</p><p>One other improvement (most useful if the database server was on a different machine than the web server) would be to store an additional string to act as salt somewhere in the actual web application. This way, compromising the database alone will not allow even a user by user dictionary attack.</p><p><b>DDJ</b></p><H4><A NAME="l1">Listing One</H4><pre><B>(a)</B>&lt;authentication mode="Forms" &gt;     &lt;forms        loginUrl="login.aspx"       protection="All"       timeout="30"       path="/" /&gt;&lt;/authentication&gt;<B>(b)</B>&lt;authorization&gt;   &lt;deny users="?" /&gt; &lt;/authorization&gt;<B>(c)</B>&lt;location path="Register.aspx"&gt;  &lt;system.web&gt;    &lt;authorization&gt;      &lt;allow users="?"/&gt;    &lt;/authorization&gt;  &lt;/system.web&gt;&lt;/location&gt;</pre><P><A HREF="#rl1">Back to Article</A></P><H4><A NAME="l2">Listing Two </H4><pre>using System;using System.Configuration;using System.Data;using System.Data.SqlClient;using System.Web.Security;namespace FormsAuth{    /// &lt;summary&gt;    /// Summary description for UserDB.    /// &lt;/summary&gt;    public class UserDB    {        public static DataSet SelectUserInfo(string UserName)        {            string strCn;            DataSet ds=null;            if ( UserName==string.Empty || UserName==null )            {             throw new NullReferenceException("User Name Must Be Specified!");            }            strCn=System.Configuration.ConfigurationSettings.                                               AppSettings["DSN"].ToString();            SqlConnection cn=new SqlConnection(strCn);            cn.Open();            try            {                SqlCommand cmd=new SqlCommand("spSelectUserInfo",cn);                cmd.CommandType=CommandType.StoredProcedure;                cmd.Parameters.Add("@UserName",UserName);                SqlDataAdapter da=new SqlDataAdapter(cmd);                ds=new DataSet();                da.Fill(ds,"User");            }            catch ( Exception )            {                // Do something...            }            finally            {                cn.Close();            }            return ds;        }        public static bool ChangePassword(int UserID, string NewPasswordHash,                                         string Salt,bool MustChangePassword)        {            bool ret=false;            if ( NewPasswordHash==string.Empty || UserID==0 )            {              throw new Exception("Not all required variables set in UserDB");            }            string strCn;            strCn=System.Configuration.ConfigurationSettings.                                               AppSettings["DSN"].ToString();            SqlConnection cn=new SqlConnection(strCn);            cn.Open();            try            {                SqlCommand cmd=new SqlCommand("spSaveChangedPassword",cn);                cmd.CommandType=CommandType.StoredProcedure;                cmd.Parameters.Add("@UserID",UserID);                cmd.Parameters.Add("@PasswordHash",NewPasswordHash);                cmd.Parameters.Add("@Salt",Salt);                cmd.Parameters.Add("@MustChangePassword",MustChangePassword);                SqlParameter prm=new SqlParameter();                prm.Direction=ParameterDirection.ReturnValue;                prm.ParameterName="ReturnValue";                cmd.Parameters.Add(prm);                cmd.ExecuteNonQuery();                if ( (int)cmd.Parameters["ReturnValue"].Value!=0 )                {                    ret=true;                }            }            finally            {                cn.Close();            }            return ret;        }        public static bool SaveNewUser(string UserName, string LastName,            string FirstName,string email,string PasswordHash,string Salt,            bool MustChangePassword)        {            bool ret=false;            string strCn;            strCn=System.Configuration.ConfigurationSettings.                                            AppSettings["DSN"].ToString();            SqlConnection cn=new SqlConnection(strCn);            cn.Open();            try            {                SqlCommand cmd=new SqlCommand("spSaveNewUser",cn);                cmd.CommandType=CommandType.StoredProcedure;                cmd.Parameters.Add("@UserID",0);                cmd.Parameters.Add("@UserName",UserName);                cmd.Parameters.Add("@LastName",LastName);                cmd.Parameters.Add("@FirstName",FirstName);                cmd.Parameters.Add("@email",email);                cmd.Parameters.Add("@PasswordHash",PasswordHash);                cmd.Parameters.Add("@Salt",Salt);                cmd.Parameters.Add("@MustChangePassword",MustChangePassword);                SqlParameter prm=new SqlParameter();                prm.Direction=ParameterDirection.ReturnValue;                prm.ParameterName="ReturnValue";                cmd.Parameters.Add(prm);                cmd.ExecuteNonQuery();                if ( (int)cmd.Parameters["ReturnValue"].Value!=0 )                {                    ret=true;                }            }            finally            {                cn.Close();            }            return ret;        }    }}</pre><P><A HREF="#rl2">Back to Article</A></P><H4><A NAME="l3">Listing Three</H4><pre>using System;using System.Data;using System.Security;using System.Security.Cryptography;using System.Web.Security;namespace FormsAuth{    /// &lt;summary&gt;    /// Summary description for User.    /// &lt;/summary&gt;    public class User    {        private string m_LastName;        private string m_FirstName;        private string m_UserName;        private string m_Email;        private string m_Password;        private bool m_MustChangePassword;        private int m_UserID;        #region Properties        public string LastName        {            get { return m_LastName; }            set { m_LastName=value; }        }        public string FirstName        {            get { return m_FirstName; }            set { m_FirstName=value; }        }        public string UserName        {            get { return m_UserName; }            set { m_UserName=value; }        }        public string Email        {            get { return m_Email; }            set { m_Email=value; }        }        public string Password        {            get { return m_Password; }            set { m_Password=value.ToLower(); }        }        public bool MustChangePassword        {            get { return m_MustChangePassword; }            set { m_MustChangePassword=value; }        }        public int UserID        {            get { return m_UserID; }            set { m_UserID=value; }        }        #endregion        #region Private Methods        private string CreateSalt(int size)        {            RNGCryptoServiceProvider rng=new RNGCryptoServiceProvider();            byte[] buff=new byte[size];            rng.GetBytes(buff);            return Convert.ToBase64String(buff);        }        private string CreatePasswordHash(string pwd,string salt)       {            string saltAndPassword=string.Concat(pwd,salt);            string hashedPassword=                 FormsAuthentication.HashPasswordForStoringInConfigFile(                saltAndPassword,"SHA1");            return hashedPassword;        }        #endregion        public User()        {            m_LastName=string.Empty;            m_FirstName=string.Empty;            m_UserName=string.Empty;            m_Email=string.Empty;            m_Password=string.Empty;            m_UserID=0;        }        public bool VerifyPassword()        {            string PasswordHashFromDB;            string strSalt;            bool ret=false;            if ( m_UserName==string.Empty || m_Password==string.Empty )            {                throw new NullReferenceException("Not all required                                                         properties set!");            }            try            {                DataSet ds=UserDB.SelectUserInfo(m_UserName);                if ( ds.Tables.Count!=0 )                {                    strSalt=ds.Tables[0].Rows[0]["Salt"].ToString();                    string hashedPasswordAndSalt =                         this.CreatePasswordHash(m_Password,strSalt);                    PasswordHashFromDB=                             ds.Tables[0].Rows[0]["PasswordHash"].ToString();                     if ( PasswordHashFromDB!=string.Empty &amp;&amp;                         PasswordHashFromDB.Equals(hashedPasswordAndSalt) )                    {                        m_UserID=int.Parse(ds.Tables[0].                                             Rows[0]["PersonID"].ToString());                        m_FirstName=ds.Tables[0].                                             Rows[0]["FirstName"].ToString();                        m_LastName=ds.Tables[0].                                             Rows[0]["LastName"].ToString();                        m_MustChangePassword=bool.Parse(ds.Tables[0].                                    Rows[0]["MustChangePassword"].ToString());                        m_Email=ds.Tables[0].Rows[0]["Email"].ToString();                        ret=true;                    }                }            }            catch ( Exception exc )            {                // rethrow, or you could do something useful...                throw exc;           }            finally            {            }            return ret;        }        public bool ChangePassword(string NewPassword)        {            return ChangePassword(NewPassword,false);        }        public bool ChangePassword(string NewPassword,bool MustChangePassword)        {            bool ret=false;            if ( this.UserID==0 )            {                throw new Exception("User Not Initialized.                                                     Can't change password.");            }            if ( NewPassword==string.Empty )            {                throw new NullReferenceException("Not all required arguments set!");            }            try            {                string salt=CreateSalt(5);                string PasswordHash=CreatePasswordHash(NewPassword,salt);                UserDB.ChangePassword(this.m_UserID,NewPassword,salt,                                                      MustChangePassword);                ret=true;            }            catch ( Exception )            {            }            return ret;       }       public bool SaveNewUser(string UserName,string LastName,       string FirstName,string email,string Password,bool MustChangePassword)       {            bool ret=false;            string salt=CreateSalt(5);            string PasswordHash=CreatePasswordHash(Password,salt);            return UserDB.SaveNewUser(UserName,LastName,FirstName,                           email,PasswordHash,salt,MustChangePassword);        }    }}</pre><P><A HREF="#rl3">Back to Article</A></P><H4><A NAME="l4">Listing Four </H4><pre><B>(a)</B>private string CreateSalt(int size){   RNGCryptoServiceProvider rng=new RNGCryptoServiceProvider();   byte[] buff=new byte[size];   rng.GetBytes(buff);   return Convert.ToBase64String(buff);}<B>(b)</B>private string CreatePasswordHash(string pwd,string salt){ string saltAndPassword=string.Concat(pwd,salt); string hashedPassword=FormsAuthentication.HashPasswordForStoringInConfigFile(     saltAndPassword,"SHA1"); return hashedPassword;}</pre><P><A HREF="#rl4">Back to Article</A></P><H4><A NAME="l5">Listing Five</H4><pre>private void btnLogin_Click(object sender, System.EventArgs e){    FormsAuth.User u=new FormsAuth.User();    u.UserName=this.edUserName.Text;    u.Password=this.edPassword.Text;    if ( u.VerifyPassword()==true )    {        // Redirect, don't bother with persistent cookie.        FormsAuthentication.RedirectFromLoginPage(u.UserName,false);    }    else    {        this.lblError.Text="Sorry - Could not log you in...";    }}</pre><P><A HREF="#rl5">Back to Article</A></P><H4><A NAME="l6">Listing Six</H4><pre>DataSet ds=UserDB.SelectUserInfo(m_UserName);if ( ds.Tables.Count!=0 ){   strSalt=ds.Tables[0].Rows[0]["Salt"].ToString();   string hashedPasswordAndSalt = this.CreatePasswordHash(m_Password,strSalt);   PasswordHashFromDB=ds.Tables[0].Rows[0]["PasswordHash"].ToString();    if ( PasswordHashFromDB!=string.Empty &amp;&amp;         PasswordHashFromDB.Equals(hashedPasswordAndSalt) )   {        m_UserID=int.Parse(ds.Tables[0].Rows[0]["PersonID"].ToString());        m_FirstName=ds.Tables[0].Rows[0]["FirstName"].ToString();        m_LastName=ds.Tables[0].Rows[0]["LastName"].ToString();        m_MustChangePassword=bool.Parse(                   ds.Tables[0].Rows[0]["MustChangePassword"].ToString());        m_Email=ds.Tables[0].Rows[0]["Email"].ToString();        ret=true;   }}</pre><P><A HREF="#rl6">Back to Article</A></P><H4><A NAME="l7">Listing Seven</H4><pre>private void Button1_Click(object sender, System.EventArgs e){    if ( Page.IsValid )    {        FormsAuth.User u=new FormsAuth.User();        u.UserName=User.Identity.Name;        u.Password=this.edOldPassword.Text;        if ( u.VerifyPassword() )        {            if ( u.ChangePassword(edPassword1.Text) )            {                lblMessage.Text="Password Changed!";            }            else            {                lblMessage.Text="Password NOT Changed!";            }        }    }}</pre><P><A HREF="#rl7">Back to Article</A></P><H4><A NAME="l8">Listing Eight</H4><pre>private void Button1_Click(object sender, System.EventArgs e){    if ( Page.IsValid )    {        FormsAuth.User u=new FormsAuth.User();        if ( u.SaveNewUser(edUserName.Text,edLastName.Text,            edFirstName.Text,edEmail.Text,edPassword1.Text,true) )        {            Response.Redirect("Login.aspx");        }        else        {            lblMessage.Text="Can't register that name. Please try again.";        }    }}</pre><P><A HREF="#rl8">Back to Article</A></P></body></html>