<html><head><title>Jan00: Javascript Compatibility</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h2>Javascript Compatibility</h2><p>There are many differences between Netscape's client-side Javascript and Microsoft's implementation (JScript). Anyone who has programmed in the language knows the anxiety of testing the program on the "other" browser for the first time. Even though the program I present here is fairly large, I only found two incompatibilities to work around. The first problem has to do with the way DOM objects are rendered in the two browsers. Netscape determines the width of the <i>Select</i> when the page is loaded, and does not resize the <i>Select </i>when a new list is added. Internet Explorer resizes the <i>Select</i> every time a <i>Select</i>'s list is changed. Both have their merits. With Netscape, you always know how wide the <i>Select</i> will be, which is good for GUI layout. IE lets you use the component without having to prime the <i>Select</i> objects with a hard-coded list.  </p><p>The other problem has to do with assigning arrays of option objects to a <i>Select</i>'s <i>options</i> property. IE will let you assign an array to <i>options</i>, and the new list will be rendered properly on the page. Netscape's <i>Select</i> behaves erratically when the same assignment is made. The safest way to implement the list switch is to nullify the previous <i>options </i>property, and add the options one at a time (see function <i>changeList()</i> in the sample source code for an example). Although less elegant than a full array assignment, the solution works equally well on both browsers.</p><DDJADVERTISEMENT INLINE><p> -- S.J.</p><a href="0001c.htm#rs1">Back to Article</a></body></html>