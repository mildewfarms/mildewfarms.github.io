<html>
<head>
<title>Nov00: Windows 2000 Security Descriptors </title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Windows 2000 Security Descriptors </h1>

<p><i>Dr. Dobb's Journal</i> November 2000</p>
<h2>Protecting your  app's objects</h2>

<h3>By Marcelo Calbucci</h3>

<I>
Marcelo is a developer for MSN Search team at Microsoft. He can be contacted at mcalbu@microsoft.com.</I>

<hr>

<a name="rs1"></a><a href="0011es1.htm">Absolute versus Self-Relative</a><hr>

<p>If you write applications for Windows (or for any other platform, for that matter), it is critical that you protect all of your objects. If you don't, it's just a matter of time until someone stumbles and creates havoc with your applications and systems. Central to Windows security are Security Descriptors -- structures and associated data that contain the security information for securable objects. Security Descriptors (SD) identify an object's owner and primary group. They also contain a Discretionary Access Control List that controls access to objects, and a System Access Control List that controls the logging of attempts to access objects. In this article, I'll examine how Security Descriptors work on Windows. I'll also present a set of C++ classes (available electronically; see "Resource Center," page 5) that make Security Descriptor programming a straightforward process.</p>


<h3>Security Descriptor Backgrounder</h3>


<p>Under Windows, Security Identifiers (SIDs) uniquely identify a security principal, which can be a user, group (of other security principals), or computer. The familiar logon name format (MyDomain\ MyUser, for example) is a representation of a SID in a human-readable format. </p>
<DDJADVERTISEMENT INLINE>


<p>A Well-Known SID identifies built-in accounts on Windows -- administrators, backup operators, authenticated users, and the like. They are called "well known" because they are hard-coded and identical on all computers. Each Windows computer (server or member server) has its own SID that represents the local system. Consequently, a service running on a computer might have some rights over some objects.</p>

<p>The Windows 2000 Security Descriptor (SD) consists of an Owner, Group, Discretionary Access Control List (DACL), and System Access Control List (SACL). Other bytes on the SD structure save control information (such as the version). The SD can also be in absolute or relative format. (See the accompanying text box "Absolute versus Self-Relative" for more information.)</p>

<p>The most powerful security principal is the Owner. By default, the Owner has the right to change permissions. Even if the Owner doesn't have read permissions on the object the SD is protecting, Owners can still change that and give themselves the permission they want. Owners are represented as a SID on the SD.</p>

<p>The Group (or Primary Group Owner) is the equivalent of an Owner, but for a SID of a Group. Originally introduced for the Windows POSIX subsystem, it has lost importance and Windows now ignores it.</p>

<p>The DACL is the list of rights that identifies the type of an object and who does or doesn't have access to it. The DACL is a table that contains several entries that pair a SID with a right. Multiple rights might be represented on each of these entries, but only one SID. Each of these entries is known as an Access Control Entry (ACE).</p>

<p>The SACL is used for auditing. Each entry doesn't represent a right, but shows what should be logged if somebody tries to do that operation. For example, you might want to log unsuccessful attempts to delete a file, or successful attempts to access a web page so you can build a list of everybody that passed by the site. You need special privileges to change the SACL of an object, and these privileges are usually not granted by default.</p>

<p>The Access Control List structure is straightforward. It contains version information, the size of the entire structure, and the number of ACEs on it. The ACEs on the Access Control List follow immediately after a contiguous block of memory.</p>

<p>Each structure of an ACE might change based on what it is representing. An ACE can be of many types: Allowed, Denied, or Audit (see <A NAME="rl1"></a><A HREF="#l1">Listing One</A> for one of the several ACE structures). It stores information about the type, size, access mask, flags, SID, Object-Type, and Inherited-Object-Type. The last two are optional and only exist on Windows 2000. If they are present, the ACE Type is different and is called the "Object-Type ACE." A DACL can only contain Allowed and Denied ACEs, while a SACL can only contain Audit ACEs.</p>

<p>The Access Mask is a set of bits, a DWORD, which represents the access rights. If the Access Mask is zero, nothing is represented and the ACE is useless. The meaning of each bit on the Access Mask might change depending on the object that the SD is protecting. It also might change if it is an Object-Type ACE.</p>

<p>If the ACE is not an Object-Type ACE, the bits between 0 and 15 change their meaning depending on the object that the SD is associated with. Bits 16 to 31 are reserved and represent common actions on objects -- delete, read, write, change the DACL, change the Owner, and so on.</p>

<p>If the ACE is an Object-Type ACE, the meaning of the Access Mask depends on the application that reads it. For the Active Directory (AD), if the Object-Type of the ACE represents a property or a property set, the Access Mask contains flags for read and write rights. If the Object-Type is an extended right, it represents Control over the extended right.</p>

<p>The ACE flags decide if the ACE should be inherited to child objects. For example, you might want to set an ACE in the root of your hard disk and inherit it to all files and directories. It can also be used to block inheritance from the parent object to the current object.</p>

<p>The Object-Type is a GUID and is only used if you are securing objects on the AD. It might also represent other application-specific rights. On the AD, it might be the <i>objectGUID</i> of an object class, a property or a property-set, or the <i>rightsGuid</i> of an extended right. (The forthcoming <i>organizationalUnit </i>example describes the use of an extended right.) You can create your own extended right that only has meaning in your application. For example, assume you make an application that creates records on a database. You can create an extended right called "create-record" and apply it to the database. Windows ignores it because the OS doesn't know what that right represents. When you receive a request from somebody to add a new record, however, you do your own security check and grant or deny the request.</p>

<p>The Inherited-Object-Type of an ACE represents which <i>objectClass</i> inherits this ACE; the AD mostly uses this. For example, instead of applying a right directly to a printer object, you might apply it to the root of your domain and make it inheritable with the ACE flags, and set the Inherited-Object-Type to Printer. This way, any printer under that domain will inherit this ACE. </p>

<p>Here are three examples of different types of ACEs:</p>


<ul>
  <li>A file might have an ACE that represents that somebody has the right to read, write, and delete it. Here, you use an Allowed ACE and set the 3 bits on the mask. The ACE flags are zero, and the Object-Type and Inherited-Object-Type are not present.
  <li>An entry on the AD can have an ACE that represents that somebody has the right to read/write the <i>displayName </i>of a user on the AD. This ACE will have the Object-Type set to the <i>objectGUID </i>in the <i>displayName </i>property, and its flags will be set to Read/Write. These are different read/write flags from the previous example because the ACE has an Object-Type.

  <li>Finally, an <i>organizationalUnit </i>on the AD might have an ACE that represents people from a group called "Support" having the right to force-change-password for all users under that container, meaning that the next time the user logs on, it has to change his password. To accomplish that, you set the Object-Type to be the <i>rightsGuid </i>of that extended right, and set the Access Mask with the Control bit turned on. You also want to set the ACE flag to inherit to all child objects.

</ul>

<p>The SD has two special conditions based on the presence or absence of the DACL. If you have an SD that doesn't have a DACL, it means that everybody has full control of the object; it is the infamous "Everybody -- Full Control." On the other hand, if it does have a DACL but it has no ACE, it means nobody has access to the object. You'll need to be the Owner to change the permissions.</p>



<h3>Using Security Descriptors</h3>


<p>How do you apply an SD to an object? Say that you're creating a file and want to protect this file in the following manner:</p>


<ul>

  <li>The Owner and Group are defaulted.

  <li>The group of users MyAppAdmins and the built-in group Administrators have full control rights.

  <li>The group of users Accountants has the right to read/write.

  <li>Users from the group Managers have the right to read.

  <li>All other users don't have access to that file.

</ul>


<p>To accomplish these protections, you would use the APIs from Win32 to create the DACL with ACEs to specify the requirements. Because you are using the default Owner and Group, you don't have to specify them or the SACL (empty here). Then you use some functions to apply these objects to a newly created SD. When you do things this way, your SD is in Absolute format. Finally, you apply this SD to the file using <i>SetFileSecurity()</i>; see <A NAME="rl2"></a><A HREF="#l2">Listing Two</A>. <A NAME="rl2"></a><A HREF="#l2">Listing Two</A> appears to be a lot of code just to apply such a simple security scheme. That's the reason why some application programmers avoid going deeper into security.</p>

<p>There is practically no such thing as an invalid SD. If you add an ACE that does not have an Access Mask, it will work and no error will be issued, but it won't have any effect. Several other schemes are also accepted without error, but there are usually no consequences.</p>



<h3>Canonical SD</h3>


<p>The Windows security subsystem evaluates ACEs on the DACL from the first to the last and stops when it finds the first SID/right it is looking for. Imagine this scenario:</p>


<blockquote><p>
ACE 1: Everybody allowed to read.</p>

<p>
ACE 2: Ross denied to write.</p>

<p>
ACE 3: Group 1 (Ross and Rachel) allowed 			        to write.</p>

</blockquote>

<p>If Ross attempts to open the file to read it, access is granted at ACE 1 and Windows stops evaluating. If Rachel requests the file for read and write, Windows will evaluate the first ACE and grant read access. But the request was for two rights, so it continues until it finds the third ACE granting write permissions to Rachel. If Ross tries to open the file to write, it fails even if he belongs to Group 1. For instance, if Monica, who is not on the list, tries to open the file to write, it fails because Windows couldn't find any ACE that matches the request.</p>

<p>Now, imagine that you have the aforementioned first and third ACEs already on your DACL, and you add the second ACE at the end:</p>

<blockquote><p>
ACE 1: Everybody allowed to read.</p>

<p>
ACE 2: Group 1 (Ross and Rachel) allowed 		       	        to write.</p>

<p>
ACE 3: Ross denied to write.</p>

</blockquote>

<p>For this configuration, Ross is granted write access to the file because the second ACE grants it and Windows won't go further. For this reason, Microsoft recommends you sort your DACL in a canonical format. The canonical format has the following order:</p>


<p>1.	Noninherited ACEs come before inherited ACEs.</p>

<p>2.	Denied ACEs come before Allowed ACEs.</p>

<p>3.	ACEs that apply to the entire object come before those that apply to part of the object (just a property for example).</p>

<p>You are not required to create your SD in a canonical format, but the previous example shows why it is important. Also, you cannot edit a noncanonical SD using the Windows interface. It asks you to reset or reorder in a canonical format.</p>



<h3>The Classes</h3>


<p>When dealing with SD, the first thing you notice is how many pointers, allocations, and deallocations there are to control. It ends up being a full plate for memory leaks and memory corruption bugs. Consequently, nothing is more logical than to encapsulate all this in an object-oriented programming language such as C++.</p>


<p>To handle SD in an easier manner, I created the classes: <i>CSid</i>, <i>CAce</i>, <i>CAcl,</i> and <i>CSD</i>. <i>CAcl</i> uses an STL vector to store the list of ACEs, and <i>CSid</i>, if compiled with _DEBUG defined, uses a <i>wstring</i> to store the logon name of a user. This helps when you need to debug some security problems. Also, a SID and an SD can be in string format, so I used the STL <i>wstring </i>to set and get those objects.</p>

<p>For all classes, I defined copy constructors, assignment operators, and equal/not-equal operators. You can also construct or set each instance with the raw structure of Win32. For example, you can construct (or set) a <i>CAcl</i> with an Access Control List, and call <i>GetAcl()</i> to get a reference of the Access Control List structure, or <i>GetAclCopy()</i> to get a copy of the structure; in this case, you need to use <i>DeleteAcl()</i> to delete the returning pointer.</p>

<p>The <i>CSid</i> class contains most of the functions you'll ever need to handle SIDs. You can populate a <i>CSid</i> five different ways: from another <i>CSid, </i>from a SID structure, from a string format SID, from an Account Name, and from a Well-Known SID; see <A NAME="re1"></a><A HREF="0011ee1.htm">Example 1</A>. <A NAME="re1"></a><A HREF="0011ee1.htm">Example 1</A>(e) uses an enumerator type as a parameter. I didn't define all Well-Known SIDs, but the most common are: Administrators, Authenticated Users, Self, Creator, Owner, Everyone, and so on. Also, there are two types that are not Well-Known SIDs, but they could be useful -- <i>WKS_CurrentThreadSid</i> and <i>WKS_CurrentProcessSid</i>. They get the SID from the current thread or process context that the application is running.</p>

<p>The <i>CAce</i> class contains the type of ACE and all the properties as in an ACE structure. The back-pointer to a <i>CAcl </i>structure is used if the <i>CAce</i> is in the list of a <i>CAcl</i>. This way, you can change the <i>CAce</i> structure and it will propagate the modifications to the <i>CAcl</i>. When you change something on <i>CAce,</i> it calls the <i>SetModified</i> function, which verifies whether this <i>CAce</i> belongs to a <i>CAcl</i>. If it does, it will call the <i>CAcl::SetModified</i>.</p>

<p>The <i>CAcl</i> class has two important member variables. One variable is a flag that represents whether an Access Control List should be made present in an SD. If the Access Control List is present, then the second member variable lists all ACEs. This is the STL vector of <i>CAce</i>. You also have a cache to an Access Control List structure that is returned when you call <i>GetAcl()</i>. If you want a copy of the structure, you should use <i>GetAclCopy()</i>.</p>

<p>With the <i>CAcl</i> class, you have the <i>CanonicalSort()</i> function that puts an Access Control List into a canonical format. Only the DACL needs to be in canonical format. The <i>CanonicalSort</i> functions calls the <i>sort</i> method of the STL <i>&lt;algorithm&gt; </i>library and it uses the overloaded <i>CCanonicalSort::operator()</i> to specify the sort order.</p>

<p>Also, <i>CAcl</i> contains a back-pointer to the <i>CSD </i>that owns this <i>CAcl</i>. This isn't used for standalone <i>CAcl</i>s, but for those that are <i>CSD </i>members. This is because you can change the DACL or SACL on the SD, then they will notify the <i>CSD </i>that something changed and the <i>CSD </i>will be needed to recalculate the raw SD if requested.</p>

<p>With <i>CAcl</i>, I also defined an <i>iterator, con</i>st_iterator, begin(), and <i>end()</i> function for each. This way, you can go through the list of <i>CAce</i>, find what you're looking for, or edit the <i>CAce</i> without having the overhead of a function call. This makes the code faster if you constantly need to find a specific <i>CAce</i>; for example, if you're writing your own security check mechanism.</p>

<p>Finally, the <i>CSD </i>class has four important members: two <i>CSid</i>s (for the Owner and the Group) and two <i>CAcl</i>s (for the DACL and the SACL). It also contains the control flags for the SD, and cache information for SD in Absolute and Relative formats. The functions that retrieve a copy of the SD structure also accept the minimum size that will be allocated for the DACL and the SACL. </p>

<p>The big advantage of <i>CSD </i>is that you can manage your DACL and SACL directly through it<i> </i>without having to create a <i>CAcl</i> structure. I do this by writing functions to add <i>CAce</i> directly through <i>CSD, </i>and it figures out by itself whether the <i>CAce</i> goes to the DACL or the SACL, based on its type.</p>

<p>If you feel an urge to edit the DACL of a <i>CSD, </i>you can call the function <i>Dacl(),</i> which returns a reference. This is not a <i>const,</i> so you can edit the DACL the way you want.</p>

<p>You have to be careful with the pointers returned by <i>CSid</i>, <i>CAcl</i>, and <i>CSD</i>. The pointers have a life equal to the instances that generate them, and they are valid until you call the next non<i>const</i> function. If you need to get a permanent pointer, you should call <i>Get*Copy()</i> and use the respective <i>Delete*()</i> function to free it.</p>

<p>For error conditions, I added a per-thread global variable that can be accessed through <i>GetSDLastError()</i> in sderror.h. To set the error code, I call <i>SetSDLastError()</i> (you might want to rewrite this function to log error messages when you are in debug mode). There are plenty of error codes, but you'll likely never need them if you use the classes without doing any hack. Many errors can be a result of Win32 errors, so I named them with <i>_W32</i> at the end. In such cases, you can call the Windows API <i>GetLastError()</i> to find out why the API failed. It's a good idea to check for errors after you create a new instance of a class passing some pointers, like a PSECURITY_DESCRIPTOR, a PACL, or a PSID.</p>

<p>Recall that <A NAME="rl2"></a><A HREF="#l2">Listing Two</A> adds an SD to a newly created file. It takes about 80 lines of code to implement this. <A NAME="rl3"></a><A HREF="#l3">Listing Three</A>, however, shows my implementation, which does the same thing in about a dozen lines and in a much more readable format. Be aware that the code presented here is not thread safe because the Microsoft STL implementation is not thread safe. Plus, I'm assuming that, for error conditions, you're going to get the error messages on the thread they were generated upon. It is not even safe to copy a <i>CSD </i>to another <i>CSD </i>and pass it to another thread, because the STL's <i>wstring</i> implementation on Visual C uses reference counting without any locking mechanism. If you need to pass any of these classes to another thread, the safest (and only) way to do it is to get a copy of a raw object, pass this pointer to the other thread, and then reconstruct it.</p>



<h3>Conclusion</h3>


<p>Security is a complex topic and, to fully understand it on Windows, you should examine Privileges and Access Tokens in addition to Security Descriptors. Privileges are the reason that you sometimes end up getting an "access denied" error, even if your SD says that you can change the permission on an object.</p>


<p></p>


<p><b>DDJ</b></p>
<H4><A NAME="l1"></a>Listing One</H4>


<pre>typedef struct _ACL { 
  BYTE AclRevision; 
  BYTE Sbz1; 
  WORD AclSize; 
  WORD AceCount; 
  WORD Sbz2; 
} ACL;
typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
  ACE_HEADER Header;
  ACCESS_MASK Mask;
  DWORD Flags;
  GUID ObjectType;
  GUID InheritedObjectType;
  DWORD SidStart;
} ACCESS_ALLOWED_OBJECT_ACE;    
typedef struct _ACE_HEADER { 
  BYTE AceType; 
  BYTE AceFlags; 
  WORD AceSize; 
} ACE_HEADER;
typedef DWORD ACCESS_MASK;
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2"></a>Listing Two</H4>


<pre>BOOL SetMySecurityW32(LPCTSTR lpszFileName)
{
    // Create the SD structure
    SECURITY_DESCRIPTOR sd;
    if(!InitializeSecurityDescriptor(&amp;sd, SECURITY_DESCRIPTOR_REVISION))
        return FALSE;
    SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest = 
                                              ALL_CONTROL_BITS_OF_INTEREST;
    SECURITY_DESCRIPTOR_CONTROL Control = 
                          SE_DACL_AUTO_INHERITED | SE_DACL_AUTO_INHERIT_REQ;
    if(!SetSecurityDescriptorControl(&amp;sd, ControlBitsOfInterest, Control)) {
        return FALSE;
    }
    // Create the DACL
    PACL pAcl = NULL;
    SID_NAME_USE snu;
    wchar_t szBuffDomain[256];
    UCHAR   BuffSid[256];
    PSID pSid = (PSID)BuffSid;
    DWORD dwSidSize, dwBuffDomainSize;

    UCHAR   BuffSid1[64];
    UCHAR   BuffSid2[64];
    PSID pCreatorOwnerSid = (PSID)BuffSid1;
    PSID pAdministratorsSid = (PSID)BuffSid2;

    try {
        pAcl = (PACL)new UCHAR[2048]; // should be enough
        if(!pAcl)
            return FALSE;
        if(!InitializeAcl(pAcl, 2048, ACL_REVISION_DS)) {
            goto fail;
        }
        // Add the ACE for "MyAppAdmins" full control
        dwSidSize = dwBuffDomainSize = 256;
        if(LookupAccountName(NULL, L"MyAppAdmins", pSid, &amp;dwSidSize, 
                               szBuffDomain, &amp;dwBuffDomainSize, &amp;snu)) {
            AddAccessAllowedAce(pAcl, ACL_REVISION_DS, FILE_ALL_ACCESS, pSid);
        }       
        // Create the Well-Known SID for "Builtin\Administrators"
        SID_IDENTIFIER_AUTHORITY siaNTAuth = SECURITY_NT_AUTHORITY;
        InitializeSid(pAdministratorsSid, &amp;siaNTAuth, 2);
        *(GetSidSubAuthority(pAdministratorsSid, 0)) = 
                                           SECURITY_BUILTIN_DOMAIN_RID;
        *(GetSidSubAuthority(pAdministratorsSid, 1)) = 
                                           DOMAIN_ALIAS_RID_ADMINS;
        // Add the ACE for "BUILTIN\Administrators"
        AddAccessAllowedAce(pAcl, ACL_REVISION_DS, 
                                     FILE_ALL_ACCESS, pAdministratorsSid);
        // Add the ACE for "Accountants" Read/Write
        dwSidSize = dwBuffDomainSize = 256;
        if(LookupAccountName(NULL, L"Accountants", pSid, &amp;dwSidSize, 
                                 szBuffDomain, &amp;dwBuffDomainSize, &amp;snu)) {
            AddAccessAllowedAce(pAcl, ACL_REVISION_DS, GENERIC_READ | 
                                                     GENERIC_WRITE, pSid);
        }       
        // Add the ACE for "Managers" Read-only
        dwSidSize = dwBuffDomainSize = 256;
        if(LookupAccountName(NULL, L"Managers", pSid, &amp;dwSidSize, 
                                   szBuffDomain, &amp;dwBuffDomainSize, &amp;snu)) {
            AddAccessAllowedAce(pAcl, ACL_REVISION_DS, GENERIC_READ, pSid);
        }
        // Apply the DACL to the SD
        if(!SetSecurityDescriptorDacl(&amp;sd, TRUE, pAcl, FALSE))
            goto fail;
        if(!SetFileSecurity(lpszFileName, DACL_SECURITY_INFORMATION, &amp;sd))
            goto fail;
        delete pAcl;
    } catch(...) {
        delete pAcl;
        throw;
    }
    return TRUE;
fail:
    delete pAcl;
    return FALSE;
}
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3"></a>Listing Three</H4>


<pre>CSid Sid;
CSD sd;
sd.SetControl(SE_DACL_AUTO_INHERITED | SE_DACL_AUTO_INHERIT_REQ);
sd.AddAccessAllowed(CSid(WKS_Administrators), FILE_ALL_ACCESS);

Sid.SetSidFromName(L"MyAppAdmins");
sd.AddAccessAllowed(Sid, FILE_ALL_ACCESS);

Sid.SetSidFromName(L"Accountants");
sd.AddAccessAllowed(Sid, GENERIC_READ | GENERIC_WRITE);

Sid.SetSidFromName(L"Managers");
sd.AddAccessAllowed(Sid, GENERIC_READ);

if(sd.SetFileSecurity(lpszFileName, DACL_SECURITY_INFORMATION))
    return TRUE;
</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>


</body>
</html>
