<html>
<head>
<title>Nov00: Register Variables and longjmp()</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->


<h2>Register Variables and longjmp()</h2>
<p>Care must be taken with local variables in functions using <i>setjmp()</i>. In <A NAME="re5"></a><A HREF="0011ie5.htm">Example 5</A>, for instance, you would expect the following program output:</p>
<blockquote><p>
1: 1</p>
<DDJADVERTISEMENT INLINE>

<p>
2: 2</p>

<p>
3: 3</p>

</blockquote><p>However, with most optimizing compilers, it will be:</p>


<blockquote><p>
1: 1</p>

<p>
2: 2</p>

<p>
3: 2</p>

</blockquote>

<p>In particular, the incorrect result will be produced whenever the compiler chooses to allocate <i>LocalVar</i> as a register variable. <i>setjmp()</i> will save all registers used for register variables in the given <i>jmp_buf</i>. Even though the register variable has been incremented after the call to <i>setjmp()</i>, <i>longjmp()</i> will restore the value it had at the time of <i>setjmp()</i>. The only way to prevent this problem is to declare such variables as volatile. This is even required by the ANSI C Standard in section 7.6.2.1.</p>

<p>Since the C exception-handling library uses <i>setjmp()</i> in its XTRY macro and calls <i>longjmp()</i> in macro XEND and <i>XRaise()</i>, all parameters and local variables of functions with XTRY blocks must be declared as volatile if their values must be preserved across the XTRY and XEND macros. This is even the case when alternate functions for context saving/restoring are used instead of <i>setjmp()/longjmp()</i>, since they also can only restore register variable values in effect when the context was saved.</p>

<p> -- T.S. and P.P.</p>

<a href="0011i.htm#rs1">Back to Article</a>


</body>
</html>
