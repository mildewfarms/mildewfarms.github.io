<html><head><title>Mar00: Table of Contents</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>DDJ, March 2000 -- Testing and Debugging</h1><p></p><hr><img src="cover.gif" width="120" height="158" align="right" border="1"><h2>FEATURES</h2><h3><a href="0003a/0003a.htm">WHITE-BOX TESTING</a></h3><h4>by Oliver Cole</h4><p>Traditionally, there are two main approaches to testing software: "black-box" (or functional) testing, and "white-box" (or structural) testing. White-box testing strategies include designing tests such that every source line of code is executed at least once, or requiring every function to be individually tested.</p><h3><a href="0003b/0003b.htm">DEBUGGING MULTITHREADED APPLICATIONS</a></h3><h4>by Peter Horwood, Shlomo Wygodny, and Martin Zardecki</h4><p>It is often significantly harder to locate and test for bugs in multithreaded and multiprocess applications than for nonthreaded, single process situations. Our authors describe some of the problems with multithreaded applications and discuss common debugging techniques.</p><h3><a href="0003c/0003c.htm">TESTING UNIX DAEMONS</a></h3><h4>by Len DiMaggio </h4><p>UNIX daemons are programs that run in the background, letting you do other work in the foreground. Len presents a "recipe" for testing them.</p><h3><a href="0003d/0003d.htm">BUILDING A TESTPOINT FRAMEWORK</a></h3><h4>by Noam Cohen </h4><p>Noam presents a framework for creating and using testpoints. He originally designed and implemented this framework while developing VideoClick, a video distribution and  management system.</p><h3><a href="0003e/0003e.htm">CONSIDERING RECURSION</a></h3><h4>by Arch D. Robison</h4><p>Granted, recursion means different things to different people. But for Arch, recursion means trouble because recursive code entangles control flow, which hurts readability, reuse, and optimization.</p><h3><a href="0003f/0003f.htm">INSIDE BLUETOOTH: PART I</a></h3><h4>by James Y. Wilson and Jason A. Krontz</h4><p>Bluetooth technology is an open specification for wireless communication and networking. In the first of a two-part series, Jim and Jason lay out the basics.</p><p></p><h2>EMBEDDED SYSTEMS</h2><h3><a href="0003g/0003g.htm">INSIDE REAL-TIME LINUX</a></h3><h4>by Jerry Epplin</h4><p>Real-Time Linux is based on the same model as the NT-based systems, but, since it is freely available, doesn't have the associated cost overhead. To illustrate how you can use RTLinux,  Jerry presents a data-acquisition application.</p><h2>INTERNET PROGRAMMING</h2><h3><a href="0003h/0003h.htm">MEASURING NETWORK SOFTWARE PERFORMANCE</a></h3><h4>by James K. Yun</h4><p>The network performance measurement techniques James discusses here are especially useful  in projects where the network interface is encapsulated in a class library or network middleware.</p><p></p><h2>PROGRAMMER'S TOOLCHEST</h2><h3><a href="0003i/0003i.htm">SOURCEMONITOR: EXPOSING YOUR CODE</a></h3><h4>by James F. Wanner</h4><p>SourceMonitor is a programmer's metrics tool that Jim wrote to expose the size and quality of his source code. To parse source code, Jim used Sandstone's Visual Parse++; to create reports, he turned to Stingray's Objective Chart.</p><p></p><h2>COLUMNS </h2><h3><a href="0003j/0003j.htm">PROGRAMMING PARADIGMS</a></h3><h4>by Michael Swaine</h4><p>When we look back at it, 1999 might have been a breakthrough year for nanotechnology, as big advances were made in tiny computers.</p><p></p><h3><a href="0003k/0003k.htm">C PROGRAMMING</a></h3><h4>by Al Stevens </h4><p>Smart iterators might not be such a dumb idea, but, as Al points out, there are costs associated with them.</p><p></p><h3><a href="0003l/0003l.htm">JAVA Q&amp;A</a></h3><h4>by Mike Jennings</h4><p>A service in Windows NT (or "daemon" in UNIX parlance) is a program that runs in the background to do a specific task. Can you write NT services in Java? Sure, and Mike shows you how.</p><p></p><h3><a href="0003m/0003m.htm">ALGORITHM ALLEY</a></h3><h4>by Mingfu Gong</h4><p>Group sorting algorithms are well suited for applications where recursion is either not allowed or inefficient. In this month's column, Mingfu presents an <i>N*logN </i>adaptive group sort algorithm.</p><p></p><h3><a href="0003n/0003n.htm">DR. ECCO'S OMNIHEURIST CORNER</a></h3><h4>by Dennis E. Shasha</h4><p>Benjamin Baskerhound has turned over a new leaf, this time coming to Ecco and Liane for help, rather than mischief.</p><p></p><h3><a href="0003o/0003o.htm">PROGRAMMER'S BOOKSHELF</a></h3><h4>by Gregory V. Wilson</h4><p>This month, Greg examines <i>Extreme Programming Explained</i>, by Kent Beck, and the recently released <i>The Pragmatic Programmer: From Journeyman to Master</i>, by Andrew Hunt and David Thomas.</p><p></p><h2>FORUM</h2><h3><a href="0003p/0003p.htm">EDITORIAL</a></h3><h4>by Jonathan Erickson</h4><h3><a href="0003q/0003q.htm">LETTERS</a></h3><h4>by you</h4><h3><a href="0003r/0003r.htm">NEWS &amp; VIEWS</a></h3><h4>edited by Nicholas Baran</h4><h3><a href="0003s/0003s.htm">OF INTEREST</a></h3><h4>by Nicholas Baran  and Amy Lincicum</h4><h3><a href="0003t/0003t.htm">SWAINE'S FLAMES</a></h3><h4>by Michael Swaine</h4></body></html>