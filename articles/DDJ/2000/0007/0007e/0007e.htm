<html>
<head>
<title>Jul00: XML and Software Configuration</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>XML and Software Configuration</h1>

<p><i>Dr. Dobb's Journal</i> July 2000</p>
<h2>Using XML for  dynamic configuration</h2>

<h3>By Tony Sintes</h3>

<I>
Tony is a Sun Certified Java Developer specializing in telecommunications consulting for ObjectWave Corp. You can reach him at sintes@kwom.com.</I>

<hr>

<p>XML provides a platform-independent description of data and promises to revolutionize the way any data-driven application manipulates data. To fully realize the benefits of XML, therefore, you must see everything in terms of data. This even includes nonobvious things such as software configuration. (Configuration is data, after all.)</p>
<p>Currently, Java provides the <i>Properties</i> class for software configuration. This approach works well for static configurations, such as user preferences and GUI settings. However, <i>Properties</i> may not be the best choice for software that has a dynamic or otherwise complex configuration. Luckily, XML and the Document Object Model's (DOM) flexible tree structure make XML a perfect match for both dynamic and static configurations.</p>
<DDJADVERTISEMENT INLINE>

<p>In this article, I'll explore software configuration and how it relates to XML. In the process, I will present an XML configuration markup language and Java framework that you can use as the basis for any Java configuration engine (available electronically; see "Resource Center," page 5). </p>



<h3>What is Software Configuration?</h3>


<p>Software configuration is a broad topic with a definition that changes with domain. As a result, formulating a single, inclusive definition is difficult. Everyday PC users may know configuration as it relates to setting the background color of the desktop or setting their customer profile at an online store. To PC users, configuration lets them change the look, feel, and behavior of an application. This is an important use of configuration since it lets users tailor applications to their own personal tastes. Users expect and demand such features. </p>


<p>However, as we switch domains, the meaning of software configuration changes. In the telecommunications world, for instance, software is often run on large scale, distributed systems. As a node in a system comes online, it must discover the other nodes in the system and download run-time configuration information. This information may include port information, run-time application mixes, and communication links. Because the information and its structure may change at run time, it is not sufficient for the new node to simply read a local configuration file. Instead, the node must download the newest configuration and discover its contents dynamically at run time.</p>

<p>Using the two previous domains, we can formulate a generic definition of software configuration. Configuration describes any aspect of a piece of software that is variable. These include:</p>

<ul>
  <li>Behavior, such as timeouts, poll time, and max connections.
  <li>Structure, which identifies objects to serve.

  <li>Appearance, including background, color, and font size.

  <li>Data, such as batch data set to process.

</ul>


<p>Because they are variable, configuration values are never hard-coded inside the application. Instead, the values are defined somewhere separate from the application. This separate place can be as simple as a file, or something as complicated as a remote database or global software registry. </p>

<p>Based on the previous examples, we can make one more generalization. Independent of domain, you can break configuration into static configuration and dynamic configuration.</p>



<h3>Static Configuration</h3>


<p>The name/value pairing of data characterizes static configuration. The application reading the configuration expects a specific name/value pair to appear in the configuration. When the application needs to retrieve a specific value, it looks up the value by its name. If the name is not found in the configuration, the application either falls back onto a default value or raises some kind of error. Since the configuration is rigidly defined, its structure rarely changes. If the structure does change, the application normally requires a corresponding change in its source code.</p>


<p>Currently, Java addresses static configurations through the <i>Properties</i> class found in the java.util package. This class reads name/value pairings from a stream. So, for example, a GUI application could define a pair "background=white" in a file. When the application starts up, the application creates a <i>Properties</i> object and stream the configuration file into it. When the application needs the background value, it retrieves the value by calling the <i>Properties</i>' <i>getProperty</i> method and passing the method the string <i>background</i>.</p>

<p>Generally speaking, static configuration is a simple mechanism. Luckily, most application programmers will face only this configuration scheme. The challenges posed by static configuration mainly lie in finding an efficient and reusable retrieval mechanism. This mechanism must also prevent the inadvertent corruption of configuration data by outside entities.</p>



<h3>Dynamic Configuration</h3>


<p>Change characterizes dynamic configuration. Dynamic configuration values are not based on name/value pairs. Instead, the information contained in the configuration can change over time without requiring changes in the corresponding application. The application must adapt to the changes in the contents of the configuration. Of course, dynamic configurations are not magical. The application will expect a certain configuration format. However, the format is not restricted to known name/value pairings.</p>


<p>Generally speaking, dynamic configuration is not a simple mechanism. Instead, dynamic configurations pose a significant challenge to the developer. Currently, Java does not provide a mechanism specifically suited to the demands of a dynamic configuration. You must roll a custom solution using a variety of Java technologies including <i>Properties</i>, <i>Serialization</i>, and <i>Reflection</i>. </p>

<p>You could attempt to use name/value name/list pairs to address dynamic configuration. However, this approach is not clean. First, you must update the name/ value pair parsing code each time the list of values become deeper. Second, such an approach would prove error prone. Manual configuration would be difficult. You must develop a dynamic configuration scheme that is flexible enough to address any combination of configuration data without rewrite. </p>

<p>So, what would be an example of a dynamic configuration? Take a web server Servlet plug-in. When the plug-in comes online it will need to load a certain mix of Servlet beans. Each bean will also have its very own configuration information. The bean's configuration may even include other nested beans, and those beans may contain beans, and so on. Simple <i>Properties</i> just don't cut it for such a complicated configuration. A Servlet plug-in would need a way to dynamically discover its configuration at run time. </p>



<h3>XML to the Rescue</h3>


<p>So, how can XML address the challenges posed by dynamic configuration? Simply put, XML describes data. Configuration is data. Therefore, configuration and XML are a natural match. But XML delivers much more.</p>


<p>First, it turns out that XML is good at expressing dynamic configurations. When parsing, a parser converts the XML tags and data into a Document Object Model (DOM) representation. Because DOM represents the XML data in a tree structure, it is possible to dynamically discover a configuration by simply traversing a tree. As a result, XML naturally lends itself to dynamic configurations. As an added bonus, any dynamic configuration can describe static configurations. Thus, XML works for both the static and dynamic cases. </p>

<p>Second, XML is both application and platform independent. Combined with Java, which is also platform independent, XML lets you express configuration data that is truly portable between platforms and applications. Once you have a configuration markup, you can bring that configuration scheme anywhere. Any application that understands the markup language can process or produce the configuration data. This means that you can easily write applications for scripting and maintaining the configuration data in the language of your choice. Furthermore, the data can be easily persisted into a database that understands the configuration's markup. Really, the possibilities that an XML-based configuration description opens up are endless.</p>

<p>Finally, any configuration scheme should be easy to maintain. A properly designed markup language should be both easy to learn and read. This will lessen user error in human-generated configuration files. In an ideal world, dedicated programs will generate all configuration files through a user-friendly graphical interface. Unfortunately, it is not always possible to have such a utility readily available. An easily learned and read configuration markup will lessen human error. Some XML parsers also employ validation. As a result, the parser will quickly point out any errors in the configuration file. This forces the configuration author to follow the markup definition completely. It also prevents an application from parsing an improperly written configuration.</p>



<h3>The Dynamic Configuration  Markup Language (DCML)</h3>


<p>A configuration markup language needs to address the following design requirements:</p>


<p></p>

<ul>
  <li>The markup must support static configuration through name/value pairing.
  <li>The value of a name/value pair may be either a simple string or nested tags.

  <li>The markup must support dynamic configurations of <i>n</i>-depth.

</ul>


<p>Because I come from an object-oriented background, I chose to model all configuration data as objects. To support nesting, each object may have any number of subobjects. Like real objects, each DCML object may have a list of parameters, a list of behaviors, a type, and a name. </p>

<p>To facilitate organization, each configuration has a type attribute. Each DCML entity also has a screen name and a short description. The actual value of these attributes is user dependent. A configuration author can use the type tag to designate the type of configuration held within the description. Or a database may use this type to store and retrieve configuration descriptions. The screen name provides a user-friendly name to display with a tool that visually introspects the configuration.</p>

<p><A NAME="rf1"><A HREF="0007ef1.htm">Figure 1</A> models the markup's object structure. Notice that an object's structure is recursive. An object may have any number of subobjects. Also notice that the markup's definition takes advantage of XML's tree-like nature. Any application can discover each node of its configuration by walking the configuration's DOM tree.</p>

<p>One other point of interest lies in the <i>ValueTypes</i> object. The <i>Value</i>'s <i>ValueType</i> is user defined. This means that the value's value could be a simple string or a user-defined set of tags. This way, a complex data type can be expressed in a user-defined XML markup. Of course, as new tags are added you will need to update the DCML's document type definition (DTD). However, a proper implementation of the DCML parser should allow such modifications to the DTD without needing to be updated itself. </p>

<p><A NAME="rl1"><A HREF="#l1">Listing One</A> is DCML's full DTD definition, and <A NAME="rl2"><A HREF="#l2">Listing Two</A> is an example DCML file. The example DCML file deals with security and adds a new value type to the DTD definition presented in <A NAME="rl1"><A HREF="#l1">Listing One</A>. For the purpose of this article, I tried to keep the example simple. The configuration could have been much more complicated. For example, there may have been a second subobject that defines users and their permission levels. Or I may have defined <i>Objects</i> that a security manager would need to instantiate at run time.</p>



<h3>A Java DCML Implementation</h3>


<p>To use DCML in a Java application, you need a Java implementation. At minimum, you need a Java XML parser that will convert the XML into the DOM equivalent (the IBM XML4J parser, for instance, is available free at http://alphaworks.ibm.com/). Once you have the DOM tree, the application can discover the configuration directly by walking the tree.</p>


<p>However, there is a problem with this approach. Now each application that uses DCML configurations must have knowledge of XML and DOM. Suddenly, the nonXML applications must understand XML. Any changes to the DCML markup definition will require additional changes in any application that uses DCML. To avoid redundant work and a maintenance cycle nightmare, it is best to write a DCML engine that will convert the XML to a set of Java interfaces. Instead of programming your applications to manipulate DOM, you can design your applications to use the interfaces. Once expressed as interfaces, the underlying DCML is completely encapsulated. So, the interfaces can hide almost any change from the application. If you take this to an extreme, it is even possible to completely remove the XML. As long as the interfaces can retrieve and persist the data, the application does not need to care about the underlying mechanisms.</p>

<p><A NAME="rf2"><A HREF="0007ef2.htm">Figure 2</A> illustrates this abstracted architecture. <A NAME="rf3"><A HREF="0007ef3.htm">Figures 3</A>, <A NAME="rf4"><A HREF="0007ef4.htm">4</A>, and 5 define the set of interfaces that encapsulate the configuration structure and data. These definitions closely follow the model presented in <A NAME="rf1"><A HREF="0007ef1.htm">Figure 1</A>. Keep in mind that interfaces say nothing about implementation. It is entirely possible to have one implementation that simply acts as a structure around the data. Another implementation may actually use a database to retrieve and store the values. Yet another implementation may retrieve these values over the wire from distributed sources. Through the careful use of factories, you will not need to rewrite the parser to use these new implementations. Interfaces truly let you swap in completely unrelated implementations at any time.</p>

<p>Of particular note is <i>ValueAttributeIF</i>'s use of <i>XMLAwareIF</i> in <A NAME="rf5"><A HREF="0007ef5.htm">Figure 5</A> (<A NAME="rf6"><A HREF="0007ef6.htm">Figure 6</A> defines <i>XMLAwareIF</i>). <A NAME="rf1"><A HREF="0007ef1.htm">Figure 1</A> defines <i>ValueTypes</i> as being user defined. A <i>ValueType</i>, as defined in the DTD, may be a string or a complex tag structure. Thus, as new user-defined value types are added, the types need a new tag markup to describe their structure and data. Unfortunately, parsers are static beasts. Parsers expect a certain structure and nothing else. Without some kind of dynamic extension to the parser, you would need to update the parser whenever you add new tags. Such an "add tag/rewrite parser" cycle makes it prohibitively expensive to add new types to nontrivial configurations. <i>XMLAwareIF</i> was born out of the need to make such additions cheap and painless. Instead of requiring you to update the parser, the parser requires that each value type implement <i>XMLAwareIF</i>. As a result, all parsing of the value's tag is delegated to the type itself. At run time, the parser reads the value, determines its type, instantiates the type, and passes the XML to the type. At this point, it is up to the type to parse its own tags. </p>

<p>There is one final point of interest. You may notice that all interfaces extend <i>java.io.Serializable</i>. Distributed applications will need to share configuration data over the wire. By making everything <i>Serializable</i>, it is possible to easily stream the data over a network. Thus, everything is <i>Serializable</i>. You can even use this fact to store the configuration's object representation directly to disk.</p>



<h3>Conclusion</h3>


<p>Instead of going through all the implementation's gory details here, I am making the complete source to the implementation, as well as DCML's DTD and example DCML files, available electronically; see "Resource Center," page 5. </p>


<p>Configuration is an important aspect of software development and design that will become more important as software becomes more complex. DCML attempts to meet these future challenges head on by providing a flexible and extendable markup for the description of dynamic configuration data using XML. </p>




<p><b>DDJ</b></p>
<H4><A NAME="l1">Listing One</H4>


<pre>&lt;!ELEMENT DCML (
    Name, 
    ScreenName, 
    ShortDescription, 
    Object 
)&gt;
&lt;!ATTLIST DCML Type CDATA #REQUIRED&gt;
&lt;!ELEMENT Name (#PCDATA)&gt;
&lt;!ELEMENT ScreenName (#PCDATA)&gt;
&lt;!ELEMENT ShortDescription (#PCDATA)&gt;
&lt;!ELEMENT Object (
    Name, 
    ScreenName, 
    ShortDescription, 
    ParameterGroups?, 
    Behaviors?, 
    SubObjects?
)&gt;
&lt;!ATTLIST Object Type CDATA "null"&gt;
&lt;!ELEMENT ParameterGroups (ParameterGroup)*&gt;
&lt;!ELEMENT ParameterGroup (
    Name, 
    ScreenName, 
    ShortDescription, 
    Parameters
)&gt;
&lt;!ELEMENT Parameters (Parameter)*&gt;
&lt;!ELEMENT Parameter (
    Name, 
    ScreenName, 
    ShortDescription, 
    Value
)&gt;

&lt;!-- Update this Entity |OR| list to add support for new types. --&gt;
&lt;!ENTITY % ValueTypes "#PCDATA|Hosts"&gt;
&lt;!-- Definition for Hosts --&gt;
&lt;!ELEMENT Hosts (Host)*&gt;
&lt;!ELEMENT Host (IP, SubnetMask?)&gt;
&lt;!ELEMENT IP (#PCDATA)&gt;
&lt;!ELEMENT SubnetMask (#PCDATA)&gt;
&lt;!ELEMENT Value (%ValueTypes;)*&gt;
&lt;!ATTLIST Value DataType CDATA #REQUIRED&gt;
&lt;!ELEMENT Behaviors (Behavior)*&gt;
&lt;!ELEMENT Behavior (
    Name, 
    ScreenName, 
    ShortDescription
)&gt;
&lt;!ELEMENT SubObjects (Object)*&gt;
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two</H4>


<pre>&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE DCML SYSTEM "dcml.dtd" &gt;
&lt;DCML Type="Security"&gt;  
  &lt;Name&gt;Security&lt;/Name&gt;  
  &lt;ScreenName&gt;Security Configuration&lt;/ScreenName&gt;
  &lt;ShortDescription&gt;This configuration deals with security issues.&lt;/ShortDescription&gt;
  &lt;Object&gt;
    &lt;Name&gt;Security&lt;/Name&gt;    
    &lt;ScreenName&gt;Security&lt;/ScreenName&gt;    
    &lt;ShortDescription&gt;This is the security object.&lt;/ShortDescription&gt;    
    &lt;SubObjects&gt;
      &lt;Object&gt;
        &lt;Name&gt;Hosts&lt;/Name&gt;        
        &lt;ScreenName&gt;Hosts&lt;/ScreenName&gt;
        &lt;ShortDescription&gt;this configuration object lists allowed 					                hosts&lt;/ShortDescription&gt;
        &lt;ParameterGroups&gt;
          &lt;ParameterGroup&gt;
        &lt;Name&gt;HostList&lt;/Name&gt;
        &lt;ScreenName&gt;Allowed Hosts&lt;/ScreenName&gt;            
        &lt;ShortDescription&gt;this group lists all allowed hosts&lt;/ShortDescription&gt;
            &lt;Parameters&gt;
        &lt;Parameter&gt;                
            &lt;Name&gt;security.hosts.allowed&lt;/Name&gt;                
            &lt;ScreenName&gt;allowed hosts&lt;/ScreenName&gt;                
            &lt;ShortDescripion&gt;the allowed hosts&lt;/ShortDescription&gt;                
            &lt;Value DataType="com.objectwave.hosts.HostList"&gt;                  
              &lt;Hosts&gt;                    
                &lt;Host&gt;                      
                   &lt;IP&gt;172.16.1.2&lt;/IP&gt;                       
                   &lt;SubnetMask&gt;255.255.255.0&lt;/SubnetMask&gt;
                &lt;/Host&gt;                    
                &lt;Host&gt;                      
                   &lt;IP&gt;172.16.1.3&lt;/IP&gt;
                &lt;/Host&gt;                    
                &lt;Host&gt;                      
                   &lt;IP&gt;128.174.5.58&lt;/IP&gt;
                   &lt;SubnetMask&gt;255.255.255.128&lt;/SubnetMask&gt;
                &lt;/Host&gt;                  
              &lt;/Hosts&gt;
           &lt;/Value&gt;              
         &lt;/Parameter&gt;            
       &lt;/Parameters&gt;          
      &lt;/ParameterGroup&gt;        
     &lt;/ParameterGroups&gt;      
    &lt;/Object&gt;
   &lt;/SubObjects&gt;  
  &lt;/Object&gt;
&lt;/DCML&gt;</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>


</body>
</html>
