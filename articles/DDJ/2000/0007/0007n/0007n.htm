<html>
<head>
<title>Jul00: Java Q&A</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>How Do  I Build a Find?</h1>

<p><i>Dr. Dobb's Journal</i> July 2000</p>

<h3>By David Perelman-Hall</h3>

<I>
David is a Sun-certified instructor and Java programmer who develops CORBA-based client-server software at NetGenics. He can be contacted at dph@apk.net.</I>

<hr>

<p>I was saddled with the task of implementing "find" functionality for an aspect of our product, and since we hadn't yet introduced the capability to do a find elsewhere in the product, I was starting from scratch. I thought it would be a pretty easy thing to locate this kind of functionality on the Internet -- I mean, every product allows a find or search. Because I was working in Java, I posted a query to c.l.j.p and I hunted around cyberspace. I didn't have a lot of time, and what I found was that there wasn't a lot on find to find.</p>
<p>Backed into a corner, I opted to "find" my own way out. I began by examining what users expect when they do a find. There are basically two flavors. One is the type exemplified by searching for files in Windows Explorer, where the search criteria are specified in one window, the search is conducted, and all matches are displayed at once in another drillable view. The other kind is seen when searching for a pattern in a text document, where  a single different match in the text is highlighted for each invocation of find or find next/previous. It seemed like we would eventually need both types, so I decided to design a find functionality to cover both behaviors.</p>
<DDJADVERTISEMENT INLINE>

<p>One of the first steps I took was to divide the functionality of conducting a find into two stages, breaking it naturally between input and output. The input stage is where users are prompted to supply the criteria by which the search should be conducted, but before the search has been kicked off. Once users press the Find button, the output stage commences. During this stage, the search is conducted and the results of it are handed over to a class that knows how to handle the results.</p>

<p>To do this successfully, I relied on the power of Java interfaces. I didn't want to force users to use any special graphical components to prompt them to enter search criteria or to display the results of a search. Accordingly, I designed an interface called <i>FindPrompt</i> that input classes implement, and one called <i>FindResult</i> that output classes implement. If both the input and output pieces are to be graphical (which is most likely), they can be anything descendent from <i>java.awt.Component</i>. But they don't both have to be graphical. The assumptions I made were that:</p>


<ul>
  <li>The prompting piece (but not necessarily the result-handling piece) will be a visible graphical component of some type where the user can specify the criteria by which to conduct the search.
  <li>The Find dialog will show the prompting piece together with a minimum set of buttons comprised of a Find button and Close button.

</ul>


<p>If the results of the search were also being shown in a graphical view, then the Find dialog would build itself to include that view along with the view making up the prompt and the buttons.</p>

<p><A NAME="rf1"><A HREF="0007nf1.htm">Figure 1</A> is a UML diagram of the Find dialog and the interfaces it makes use of. The <i>FindDialog</i> class holds references to objects implementing the <i>FindPrompt</i>, <i>FindResult</i>, and <i>Searchable</i> interfaces. One of the keys to making this design so flexible is that these are very simple interfaces, each with one to three methods. In brief they are:</p>

<ul>

  <li>The <i>Searchable</i> interface, which has only one method -- the <i>search </i>method -- that takes an instance of <i>Transferable</i> as the search criteria, and returns a bidirectional <i>ListIterator</i> over the results of the search. Because this uses <i>Transferable</i> as the search criteria, virtually anything could be the search criteria, and the same criteria could be used to conduct different types of searches.

  <li>The <i>FindPrompt</i> interface, which has one method of its own and inherits the three declarations of the <i>java.awt.datatransfer.Transferable</i> interface. Thus, after the user completes specifying the criteria to search for, the program can simply give the <i>FindPrompt</i> itself to <i>Searchable </i>as the argument to the <i>search </i>method. The <i>getPromptComponent</i> method is used to give the <i>FindDialog</i> a handle to the graphical component that constitutes the prompt.

  <li>The <i>FindResult</i> interface, which has three methods of its own. The <i>getResultComponent</i> method is used to give the <i>FindDialog</i> a handle to the graphical component that constitutes the result handler, if there is to be one. This may return null if the result handler is implemented in some nonvisual class separate from the <i>FindDialog</i> itself. The <i>setSearchResult</i> method is the first notification the result-handling class gets that the search has been conducted. The bidirectional iterator over the results is given to the result-handling class in this method. The <i>wantsNextPreviousBehavior</i> simply returns True or False depending on whether the result-handling view wants the <i>FindDialog</i> to display the Next and Previous buttons.

</ul>


<p>The <i>Transferable</i> interface was designed to be part of the mechanism for transferring data between Java and system clipboards, possibly across different Java Virtual Machines. What's particularly interesting about this interface is that client classes can interrogate the <i>Transferable</i> instance to discover what types of data are being transferred. The <i>mime</i> types (or <i>DataFlavors </i>in Java-speak) that are supported right out of the box by the JDK include <i>String</i>s and plain text, but you can add your own <i>DataFlavor</i> easily enough: The <i>DataFlavor</i> constructor takes a class representing the <i>mime</i> type.</p>

<p>What this means is that the search criteria can be any class implementing <i>Transferable</i>. The methods you need to implement are <i>getTransferData(DataFlavor),</i> which returns an object representing the transferable data itself; <i>getTransferDataFlavors(),</i> which returns an array of <i>DataFlavor</i> objects indicating the flavors in which the data can be provided; and <i>isDataFlavorSupported(DataFlavor),</i> which returns whether the specified <i>DataFlavor </i>is supported for this object. A single search criterion might support more than one <i>DataFlavor</i>. For example, the string "9/24/99" could be represented as a <i>String DataFlavor</i>, or as a <i>Date DataFlavor</i>, and consequently could support a choice of methods by which to conduct a search.</p>

<p>The example I discuss looks at the case where a user is interested in iterating over a string, looking for a pattern to recur in that string. <A NAME="rf2"><A HREF="0007nf2.htm">Figure 2</A> is an example implementation. The user starts this application, innovatively called "FindTest," and passes it the name of a text file as an argument to <i>main. </i>The text is loaded from the file into a large central text area (actually a subclass of <i>java.awt.TextArea</i> called <i>FileTextArea</i>). The <i>FileTextArea</i> implements <i>FindResult</i>: It will show the user each match for the search pattern by highlighting the matches one at a time as the user presses Next or Previous to iterate through the matches.</p>

<p>The text in this <i>FileTextArea</i> becomes the <i>Searchable</i> object. I'll show how this is done using a class called <i>SearchableStringAdapter</i> that implements the <i>Searchable</i> interface for <i>String</i>s. I created this class to easily convert <i>String</i>s into <i>Searchable</i> objects because <i>String</i> searching is so common.</p>

<p>Above the <i>FileTextArea</i> is a subclass of <i>java.awt.TextField</i> called <i>TextFieldPrompt,</i> which implements <i>FindPrompt</i> and serves as the graphical prompt where users enter the pattern to be searched for. By implementing <i>FindPrompt</i>, this class also needs to implement the inherited <i>Transferable</i> interface. It does so by representing that the <i>TextFieldPrompt</i> supports the <i>DataFlavor.stringFlavor</i> type of <i>DataFlavor</i>.</p>

<p>Below the <i>FileTextArea</i> are the buttons users hit to conduct the search. In this example, the class implementing <i>FindResult</i> (<i>FileTextArea</i>) returns True to the <i>wantsNextPreviousBehavior</i> call, so the Next and Previous buttons appear.</p>



<h3>Interfaces to Interfaces</h3>


<p><i>FindDialog</i> needs to know when to enable or disable the buttons of its interface. The Find button should be enabled as soon as there are valid search criteria, so it needs to listen to the <i>FindPrompt</i> to know when to enable. The <i>FindDialog</i> also needs to listen to the <i>FindResult</i>, because the <i>FindResult</i> object keeps track of the state of the search by interrogating the result iterator. The iterator in the <i>FindResult</i> can inform you of search conditions for each of the following cases:</p>


<p></p>

<ul>
  <li>The Previous button does not enable until the user has moved beyond the first match. 
  <li>The Previous button must disable if, at any time, the user goes back to the first item. 

  <li>The Next button needs to disable if, at any time, the user has reached the end of the search results. 

  <li>The Next button should enable if the user moves to any item before the last item.

</ul>

<p>To convey the state of the search, I created an event subsystem intended to help with enabling the interface. I fire off an instance of the <i>FindEnabledEvent</i> class whenever a change to the find state might affect the interface. This event class principally wraps three Boolean values: <i>canFind</i>, <i>canFindNext</i>, and <i>canFindPrevious</i>. When users enter text in the <i>TextFieldPrompt</i>, for example, the <i>TextEventListener</i> that is registered with the <i>TextField</i> (see <A NAME="rl1"><A HREF="#l1">Listing One</A>) picks up the change in text. It then turns around and fires off an event to let the <i>FindDialog</i> know if it should enable the Find button based on whether there is something valid in the <i>TextField</i>. A similar behavior takes place in the result-handling class, where every movement of the search iterator might result in a change to the <i>FindDialog</i> interface.</p>

<p>In some cases, however, the result handler may not give a hoot about the next or previous activity, especially if it is handling the results of a Windows Explorer type of find (where all the search results are shown in their entirety and there is no such thing as the next or previous result). In this case, it doesn't make sense to register the <i>FindDialog</i> as a listener for <i>FindEnabledEvents</i> coming from the <i>FindResult</i>. Additionally, the ongoing find may be influenced by sources other than just the prompting and result-handling pieces. The state of a find might be invalidated because another user has deleted some records in a database, but the classes involved are neither the <i>FindPrompt </i>nor the result handler.</p>

<p>Because of this variability as to whether a class is a source of <i>FindEnabledEvents</i>, there needs to be a way for classes to identify themselves as generators of the <i>FindEnabledEvent</i>. To do this, I created an interface called <i>FindEnabler</i>, which acts as a kind of tag to identify implementing classes as generators of <i>FindEnabledEvents</i>. As such, it has methods to let client classes add and remove themselves as listeners to <i>FindEnabler</i> objects. <A NAME="rf3"><A HREF="0007nf3.htm">Figure 3</A> shows a UML diagram of the classes and interfaces involved in enabling or disabling the <i>FindDialog</i> interface. <i>FindDialog</i> implements the <i>FindEnabledListener</i> interface so it can receive events when there are changes in the state of the find. To know who to listen to, the <i>FindDialog</i> can ask if an object is an instance of the <i>FindEnabler</i> interface; and if so, the <i>FindDialog</i> knows it can call the <i>addFindEnabledListener</i> method on that object. By default, the <i>FindDialog</i> tries to register itself as a <i>FindEnabledListener</i> with the <i>FindPrompt</i> and the <i>FindResult</i>, as in <A NAME="rl2"><A HREF="#l2">Listing Two</A>. Other classes that might affect the state of the find also can implement <i>FindEnabler</i> and have the <i>FindDialog</i> register with them.</p>



<h3>Performing Finds</h3>


<p>Now that you can synchronize the interface with the state of the search as it is being readied or conducted, let's see how it works the other way around: How do the buttons on the <i>FindDialog</i> interface cause search activity to take place? Again, I introduced an event-handling mechanism to do the necessary notifications, creating a subclass of <i>java.util.EventObject</i> called <i>FindActionEvent</i>. This class doesn't add any data or methods to <i>EventObject</i> -- I did the subclassing just to get the type specificity.</p>


<p>This specialized event is delivered via the <i>FindActionListener</i> interface, which declares four methods that listeners can implement to receive notifications when the user interacts with the dialog. The <i>FindResult</i> class implements this interface and can be registered with the <i>FindDialog</i> to receive callbacks. The four methods of the <i>FindActionListener</i> interface are straightforward enough: <i>findPerformed</i>, <i>findNextPerformed</i>, <i>findPreviousPerformed</i>, and <i>findAllPerformed</i>. The event handlers registered with the appropriate buttons in the <i>FindDialog</i> GUI take button clicks and generate <i>FindActionEvents</i>.</p>

<p>For example, look at <A NAME="rl3"><A HREF="#l3">Listing Three</A>. When the Find button is pressed, the search is conducted and its resulting iterator is given to the <i>FindResult</i> using the <i>setSearchResult</i> method. Then, after the <i>FindResult</i> has been given the result iterator, the <i>findPerformed</i> method is called. Notice that I am passing <i>TextFilePrompt</i> as the source of the <i>FindActionEvent</i> when calling <i>findPerformed</i>. This way, in <i>FileTextArea</i>'s event handler for <i>findPerformed</i>, I can ask the prompt for the search's string pattern so the matches for that pattern can be highlighted.</p>

<p>Notice that the implementation of <i>findPerformed</i> taken from the <i>FileTextArea</i> (<A NAME="rl4"><A HREF="#l4">Listing Four</A>) stores the <i>String</i> pattern that is being searched for. If there are results, the event handler sets the direction in which the search is moving to forward. This is significant because for the iterator to point to the correct next or previous instance of the pattern, it needs to be moved an extra iteration if the user changes direction. You can see the code checking for changes in search direction in the handlers for the <i>findNextPerformed</i> and <i>findPreviousPerformed</i> methods.</p>

<p>Next, the handler highlights the first occurrence of the pattern in the text of the <i>FileTextArea</i>. Finally, it uses the result iterator to determine what elements of the <i>FindDialog</i> interface should be enabled. The <i>FileTextArea</i> class has data members to flag whether the iterator will support a call to Next or Previous. The <i>enableInterface</i> method (see <A NAME="rl5"><A HREF="#l5">Listing Five</A>) uses these class members to set the state of the <i>canFindNext</i> and <i>canFindPrevious</i> members in the <i>FindEnabledEvent</i> that it passes to the <i>FindDialog</i>.</p>



<h3>Finds from Above</h3>


<p>Let's take a birds-eye look at the way <i>main </i>is set up; see <A NAME="rl6"><A HREF="#l6">Listing Six</A>. The <i>TextFieldPrompt</i> is set up as the implementor of the <i>FindPrompt</i> interface, and the <i>FileTextArea</i> as the implementor of the <i>FindResult</i> interface. The text in the <i>FileTextArea</i> is also turned into the implementor of the <i>Searchable</i> interface. <i>main </i>then gives the objects implementing these three important interfaces to the <i>FindDialog</i>, and calls <i>show </i>on the <i>FindDialog</i>. To set up the GUI, the <i>FindDialog</i> uses the <i>getPromptComponent</i> method to ask the <i>FindPrompt</i> for the instance of <i>java.awt.Component</i> that should be put in the northern region of the dialog. It then asks the <i>FindResult</i> for its component. If there is one, it gets added to the central region of the dialog. The <i>FindPrompt</i> GUI component, of course, is the <i>TextFieldPrompt</i>, and the <i>FindResult</i> GUI component is the <i>FileTextArea</i>. The <i>FileTextArea</i> has already been populated using the text in the file named as an argument to <i>main. </i>The southern region of the dialog is populated with the buttons needed to operate the dialog.</p>


<p>To build the <i>Searchable</i>, <i>main </i>grabs the text out of the <i>FileTextArea</i> and creates a <i>SearchableStringAdapter</i>. The <i>SearchableStringAdapter</i> is a class that makes it simple to search <i>String</i>s by calling the <i>search </i>method of the <i>Searchable</i> interface, passing in an instance of <i>Transferable</i> that supports the <i>stringFlavor DataFlavor</i>, and getting back an iterator over the results. Results are stored in an <i>ArrayList</i> collection of <i>Integers,</i> each pointing to a location in the <i>Searchable</i> string where the pattern starts. The <i>SearchableStringAdapter</i> class lets you do several things, including specifying whether  to do case-sensitive searches, changing the target string that gets searched without changing the pattern being searched for, or changing the pattern being searched for without changing the target. The code for this article (available electronically; see "Resource Center," page 5) also includes a class called <i>TransferableStringAdapter</i> that can be used to easily convert <i>String</i>s into <i>Transferable</i> objects.</p>

<p>This is a flexible framework for building searches that divides the process into an input stage and output stage. Flexibility comes from widespread use of lightweight interfaces, the lack of insistence on specialized components, and a loosely coupled event-driven notification system to keep the GUI and the search process synchronized. The only graphical components are those that happen to make up the example, namely the Find dialog itself and some of its buttons. But users of this framework could easily build a different GUI -- one based in <i>Swing</i> components, for example. Outside of this, the graphical components representing the search's inputs and outputs can be any classes that have <i>java.awt.Component</i> in their ancestry. Finally, this part of the framework would be made even more generic by specifying that the input and output representations have no parental restrictions other than <i>java.lang.Object</i>.</p>



<h3>Acknowledgment</h3>


<p>Thanks for contributions from the software architecture group at NetGenics.</p>



<p><b>DDJ</b></p>

<H4><A NAME="l1">Listing One</H4>


<pre>// java.awt.event.TextListener interface implementation
    /** Whenever the text value changes, let any registered
     * FindEnabledListeners know.
     */
    public void textValueChanged(TextEvent event)
    {
        // Create a FindEnabledEvent with this as its source. Set the find 
        // state equal to whether there is something to find or not and fire 
        // the event off to all FindEnabledListeners.
        FindEnabledEvent evt = new FindEnabledEvent(this);
        String str = this.getText();
        evt.setCanFind(str.length() &gt; 0);
        for(int i = 0; i &lt; findEnabledListeners.size(); ++i)
        {
            FindEnabledListener listener = 
                (FindEnabledListener)findEnabledListeners.elementAt(i);
            listener.findChanged(evt);    
        }
    }
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two</H4>


<pre>// Register this FindDialog to listen to result handler for enabling events.
        if(findResult instanceof FindEnabler)
            ((FindEnabler)findResult).addFindEnabledListener(this);
        // Register this FindDialog to listen to the find prompt for
        // enabling events.
        if(findPrompt instanceof FindEnabler)
            ((FindEnabler)findPrompt).addFindEnabledListener(this);
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3">Listing Three</H4>


<pre>// Search the Searchable using the Transferable, and give search results to 
//  the result handler.  Notify listeners. This is where search starts.
        findBtn.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent evt)
            {
                try {
                    // Conduct the search
                    ListIterator iter = searchable.search(findPrompt);
                    findResult.setSearchResult(iter);
                    // Notify listeners
                    FindActionEvent event = 
                           new FindActionEvent(FindDialog.this.findPrompt);
                    for(int i = 0; i &lt; findActionListeners.size(); ++i)
                    {
                      FindActionListener listener =
                        (FindActionListener)findActionListeners.elementAt(i);
                      listener.findPerformed(event);    
                    }
                } catch(UnsupportedFlavorException ex){
                    System.out.println("Couldn't search " + searchable 
                                       + " using " + findPrompt);
                }
            }
        });
</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>
<H4><A NAME="l4">Listing Four</H4>


<pre>public void findPerformed(FindActionEvent event)
    {
        // Store off the String that I am searching for
        try
        {
            FindPrompt prompt = (FindPrompt)event.getSource();
            pattern = (String)prompt.getTransferData(DataFlavor.stringFlavor);
        } 
        catch(Exception ex)
        {
            // needs to handle cast, io, interrupted exceptions
        }
        if(resultIter.hasNext())
        {
            forward = true;
            Integer integer = (Integer)resultIter.next();
            this.select(integer.intValue(), integer.intValue() + 
                                                         pattern.length());
            hasPrevious = false;
            hasNext = resultIter.hasNext();
            this.enableInterface();
            requestFocus();
        }
    }
</pre>
<P>
<A HREF="#rl4">Back to Article</A>
</P>
<H4><A NAME="l5">Listing Five</H4>


<pre>protected void enableInterface()
    {
        // Send event to FindDialog
        FindEnabledEvent event = new FindEnabledEvent(this);
        event.setCanFindNext(hasNext);
        event.setCanFindPrevious(hasPrevious);
        for(int i = 0; i &lt; findEnabledListeners.size(); ++i)
        {
            FindEnabledListener listener =
                (FindEnabledListener)findEnabledListeners.elementAt(i);
            listener.findChanged(event);    
        }
    }
</pre>
<P>
<A HREF="#rl5">Back to Article</A>
</P>
<H4><A NAME="l6">Listing Six</H4>


<pre>public class FindTest
{
    // Pass in name of text file to load into
    // the FileTextArea.
    public static void main(String[] args)
    {
        Searchable searchable = null;
        FindPrompt prompt = null;
        FindResult result = null;
        try
        {
            prompt = new TextFieldPrompt(45);
            result = new FileTextArea(20, 45, args[0]);
            String str = ((TextArea)result).getText();
            searchable = 
                new SearchableStringAdapter(str, prompt, true);
            FindDialog dialog = 
                new FindDialog(new Frame(),prompt,result, searchable);
            dialog.pack();
            dialog.setVisible(true);
        }catch(UnsupportedFlavorException ex) 
        {
            System.out.println("can't search " + searchable + 
                                                    " with " + prompt);
        } catch(java.io.IOException ex)
        {
            System.out.println("can't search " + args[0] + ": " + ex);
        }
    }
}</pre>
<P>
<A HREF="#rl6">Back to Article</A>
</P>


</body>
</html>
