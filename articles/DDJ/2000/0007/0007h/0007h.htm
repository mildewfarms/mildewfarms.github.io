<html>
<head>
<title>Jul00: Automatic Updates for Distributed Applications</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Automatic Updates for Distributed Applications</h1>

<p><i>Dr. Dobb's Journal</i> July 2000</p>
<h2>Keeping your  apps up to date</h2>

<h3>By Max I. Fomitchev</h3>

<I>
Max is a computer consultant and senior research associate with Ultrason image processing. He can be contacted at maxf@ webzone.net.</I>

<hr>

<p>Over time, the costs of software installation, maintenance, upgrades, and support can exceed those for development. In particular, distributing upgraded applications to users can be time and money consuming, especially when the number of users is large and the process occurs on a regular basis. Of course, software vendors are addressing the issue of software distribution. Microsoft's System Management Server (SMS), Intel's LANdesk, and Novell's Application Launcher (NAL) are among the emerging breed of software-distribution tools. However, you can also build automated update capabilities into your application itself. This technique is especially useful for distributed multiuser applications, particularly when updates roll out frequently. (This is typical of client/server applications undergoing phases of regular revisions/enhancements when new releases must be distributed to users ASAP.)</p>
<p>Since most geographically distant users have access to a corporate LAN or the Internet, you can use a software-distribution server that isn't a dedicated server. It can be sufficient to create a file share for LAN/WAN or FTP accounts for Internet access, and keep the latest versions of application files in appropriate subdirectories. The approach I present here, called "AutomatedUpdate," lets applications transparently check file versions located on specified LAN/WAN shares or FTP servers, and perform a necessary upgrade/install when newer versions are detected. This technique can be incorporated in shared DLLs or static libraries and used by many different applications. (Source code, executables, and related files that implement AutomatedUpdate are available electronically; see "Resource Center," page 5.)</p>
<DDJADVERTISEMENT INLINE>

<p>In short, AutomatedUpdate keeps a single copy of the always up-to-date application files on a software-distribution server. Whenever a new release is available, files on the server are simply overwritten or replaced. When remote users launch the application powered by AutomatedUpdate, it logs onto the specified file or FTP server and checks for an upgrade. If an upgrade is available, users are notified and, based on their decision, a new executable or self-extracting installation package is downloaded and executed. If the download fails, the old program is still available (saved with extension .OLD).</p>

<p>Of course, an AutomatedUpdate-enabled program must be installed on user workstations. This can be done manually by downloading/installing from the Web (using, for instance, InstallShield's InstallFromTheWeb software), or by using commercially available tools such as LANdesk, NAL, or SMS. In a constant development environment, most application updates only involve executables. In this case, executable versions can be compared to determine newer versions. However, when an update requires more sophisticated steps (such as the replacement of DLLs or writing information to the system registry), AutomatedUpdate relies on self-extracting single-file installation programs, which can be built using InstallShield or similar software.</p>

<p>Ideally, the application subdirectory on a software-distribution server contains the most recent version of the application executable or self-extracting installation Setup.exe, along with a VERSION.INF file. The VERSION.INF is required for FTP downloads or self-extracting installations. It must contain a line of text describing the current version of the application (for example, 1.0.1). With FTP access, you can't get file-version information without downloading the entire file. Moreover, InstallShield-generated self-extracting installations do not contain version information in the executable file. Thus, to inform AutomatedUpdate about the availability of updates, both program versions must be changed (that is, the version resource modified prior to compilation) and a new VERSION.INF created. AutomatedUpdate includes an AutomatedUpdate Manager that facilitates configuration, tests FTP/LAN/ WAN connections, and uploads a new executable or self-extracting installation to the software-distribution server. In this case, the VERSION.INF file is created automatically. </p>



<h3>The AutomatedUpdate DLL</h3>


<p>The AutomatedUpdate DLL exports three functions:</p>


<p></p>

<ul>
  <li><i>extern "C" void auInit(LPCSTR Company, LPCSTR AppName, HINSTANCE hInstance, void* pMainFrm = NULL, LPCSTR Server = NULL, LPCSTR UserName = NULL, LPCSTR Password = NULL);</i>, for initialization. 
  <li><i>extern "C" BOOL auCheck(BOOL bSilent = FALSE);</i>, to check for application updates. 

  <li><i>extern "C" BOOL auManage();</i>, which displays the AutomatedUpdate manager dialog. 

</ul>


<p>The <i>auInit</i> function, which must be called first, initializes the AutomatedUpdate library (available electronically) and sets up some internal variables. The <i>Company</i> and <i>AppName</i> parameters are required to access the system registry key HKEY_LOCAL_MACHINE\Software\Company\AppName\AutomatedUpdate under which the AutomatedUpdate configuration parameters are stored. Also, <i>AppName</i> specifies the name of the application and application file's subdirectory on the software-distribution server. <i>hInstance</i>, the handle of the application instance, determines the application executable path (installation directory). <i>pMainFrm</i> is an optional <i>CFrameWnd</i> pointer of the MFC-based application window. It is needed for displaying status bar messages. <i>Server</i>, <i>UserName</i>, and <i>Password</i> are optional parameters that specify AutomatedUpdate configuration. These parameters are used only if the AutomatedUpdate configuration does not exist in the system registry. When AutomatedUpdate is used for the first time, it is necessary to provide these parameters so the program knows where to check for updates. <i>Server</i> can be specified in the form \\SERVER\SHARE for LAN/ WAN, or SERVER\PATH for FTP connection. The path should not contain any trailing slashes. Also, you should pay attention to lowercase or uppercase file names. Normally, file shares are case insensitive, but FTP directories and filenames are case sensitive. Thus, UPDTEST.EXE and UpdTest.exe are two different file names when using FTP access. The application executable file and folder name spelling is determined by the <i>AppName</i> parameter. The extensions (.exe) are assumed to be lowercase, while VERSION.INF is spelled in uppercase letters. <i>auCheck</i>, the most important call, logs onto the specified software-distribution server and displays an upgrade notification message. If an update is available and users choose to proceed, the master process will exit without returning from the call. After successfully downloading the new executable or self-extracting file, control is passed to the UPDATE.EXE (executable) or Setup.exe (self-extracting installation) process, and the master process is terminated. The master program must then be terminated so the executable and related DLLs can be overwritten. When UPDATE.EXE terminates, it displays a prompt to launch the new executable for users to continue work. With the self-extracting installation process, the set-up program may execute a new application once the set up is complete. If UPDATE.EXE is not found or an error occurs, an appropriate error message is displayed.</p>

<p>The <i>bSilent</i> parameter specifies whether to display a message indicating the program is up to date. It is convenient to pass the default (True) value of the parameter for silent update checks at program load time so the message won't annoy users. However, when this function is called from the menu, it makes more sense to allow the message to be displayed. The return value of <i>auCheck</i> is True if no errors were encountered and the program appears to be up to date; otherwise it returns False. <i>auManage</i> displays the AutomatedUpdate Manager dialog window. AutomatedUpdate Manager allows specification of configuration parameters, such as software-distribution server name, user name, and password for file-share mapping or FTP access. The Check button tests the connection to the software-distribution server and displays an error message if the attempt fails. The Clear button deletes all files from the specified subdirectory on the software-distribution server. This is useful for stopping automatic updates. Finally, the Upload button allows administrators to select a new program executable or self-extracting installation file and upload it to the server. </p>

<p>For the application executable, VERSION.INF is automatically generated based on version information in the program file. For SETUP.EXE, a dialog box is displayed and users must manually enter the new version number. When the AutomatedUpdate Manager dialog is closed (by clicking the OK button), the new configuration information is written to the system registry. The AutomatedUpdate library uses MFC Internet classes and relies on WinInet for FTP access (needless to say, TCP/IP protocol and WININET.DLL must be installed). The code (available electronically) is written for Microsoft Visual C++ and uses MFC. For the most part, the code is straightforward. Note, however, the <i>auCheck</i> function. All exported functions are defined with <i>extern "C" </i>to avoid decorated names and enable linking with nonC++ programs. Also, remember that the first statement in the exported function in MFC DLLs must be <i>AFX_MANAGE_ STATE(AfxGetStaticModuleState())</i>. It is required to ensure proper MFC library initialization. Next, the WinInet <i>CInternetSession</i> and <i>CFtpConnection</i> class pointers are initialized (see <A NAME="rl1"><A HREF="#l1">Listing One</A>) and network resource structures for remote file-share access are defined (<A NAME="rl2"><A HREF="#l2">Listing Two</A>). All subsequent operations appear inside a Try-Catch-All loop to ensure proper exception handling. This routine also throws custom exceptions (<i>CSysException</i>) to display system error messages that result from the error codes returned by WinNetwork API calls. For FTP access, the <i>CInternetSession</i> object is created and an FTP connection is established as in <A NAME="rl3"><A HREF="#l3">Listing Three</A>.</p>

<p>The file VERSION.INF is read using the <i>CInternetFile</i> class instance. For file-share access networks, the resource structure must first be initialized, as in <A NAME="rl4"><A HREF="#l4">Listing Four</A>. Then a network connection is established using the WinNetwork <i>WNetAddConnection2</i> function (<A NAME="rl5"><A HREF="#l5">Listing Five</A>). It is then possible to treat a remote file version as if it is a local file; see <A NAME="rl6"><A HREF="#l6">Listing Six</A>. When the <i>UserName</i> parameter is not initialized, there is no need for an explicit file-share mapping. When users are logged onto the Windows NT domain and the software-distribution server is configured to be accessible for everyone, it is sufficient to use standard Win32 API calls such as <i>CopyFile</i> or <i>GetFileVersion</i> (or MFC classes such as <i>CFile</i>) to access remote files. However, if the software-distribution server share requires a password, <i>WNetAddConnection2</i> must first be called to perform necessary authentication; otherwise <i>CopyFile</i> will fail.</p>

<p>The <i>CFileFind</i> class in <A NAME="rl7"><A HREF="#l7">Listing Seven</A> is used for finding files on the server share. <A NAME="rl8"><A HREF="#l8">Listing Eight</A> reads the application version from VERSION.INF (if it exists), compares the executable version with the version in INF file, and selects the most recent one. This is necessary for resolving ambiguities. If the new application version is greater than the current one, a message is displayed; see <A NAME="rl9"><A HREF="#l9">Listing Nine</A>. It is a good idea to save an old executable in order to recover from AutomatedUpdate failures (<A NAME="rl10"><A HREF="#l10">Listing Ten</A>). The master process ID must be obtained. It is needed so that UPDATE.EXE will wait for the master process to terminate; see <A NAME="rl11"><A HREF="#l11">Listing Eleven</A>. <A NAME="rl12"><A HREF="#l12">Listing Twelve</A> downloads either a new executable or self-extracting installation from the FTP server and executes UPDATE.EXE or SETUP.EXE accordingly. UPDATE.EXE takes three parameters: the downloaded file name (which must be different from the executable name since both files are located in the same directory); the application executable file name; and the master process ID (PID). UPDATE.EXE uses the <i>OpenProcess</i> call to obtain the process handle specified by the PID, and uses <i>WaitForSingleObject</i> to wait for the master process to terminate so it can overwrite its executable module. Then it copies a new executable over the old one and executes it. <A NAME="rl13"><A HREF="#l13">Listing Thirteen</A> is analogous to the FTP-related code just mentioned and performs the same function except for the fact that no file download occurs. Indeed, there is no need to download files from the remote file server. Once you map the share, you can use it in command-line statements, thus it is sufficient to execute SETUP.EXE by specifying its path or to pass the remote executable path as a parameter for UPDATE.EXE. Another trick is to display error messages after calls to <i>_execl</i>. If the call is successful, the calling process will terminate; otherwise, program flow will continue, indicating a process execution error. Finally, a message is displayed based on the value of the <i>bSilent</i> parameter. WinInet objects are disposed and the network connection is closed; see <A NAME="rl14"><A HREF="#l14">Listing Fourteen</A>.</p>

<p>It is easy to use the AutomatedUpdate technique with an application. It is sufficient to initialize the DLL by calling <i>auInit,</i> then calling the <i>auCheck</i>. In the UpdTest MFC demo application (available electronically), both calls are inserted at the end of the <i>CUpdTestApp::OnInitInstance</i> handler (<A NAME="rl15"><A HREF="#l15">Listing Fifteen</A>).</p>



<h3>Testing the  AutomatedUpdate</h3>


<p>After downloading and unzipping the AutomatedUpdate source code and demo application:</p>


<p></p>

<p>1. Create a file share on the same computer or on a network server. </p>

<p>2. Make an UpdTest folder on the created share.</p>

<p>3. Run UpdTest.exe from the V2_0_0 directory for the first time. Since the compiled program contains a dummy file share name (\\MYCOMP\UPDATES), nothing will happen.</p>

<p>4. Click the first toolbar button or select menu Update|Setup to bring up the AutomatedUpdate manager window.</p>

<p>5. Specify the correct server path without a trailing \ corresponding to the created file share, and click the Upload button. In the File Open dialog, select UpdTest.exe from the V2_1_0 directory.</p>

<p>6. Close the AutomatedUpdate manager dialog by clicking OK, and close the application. At this point, the AutomatedUpdate configuration is complete. The new version of the application is uploaded to the file share.</p>

<p>7. Run UpdTest.exe from the V2_0_0 directory for the second time. A newer version of the "program available" message will come up. Click Yes. The "program successfully updated" message will show up. Click the Yes button again. Version 2.0.1 of the test executable will automatically load at this point. These steps are necessary to set up an AutomatedUpdate-enabled application. However, you should embed the correct file share/FTP address into the application executable to make the AutomatedUpdate work right away. </p>



<h3>Conclusion</h3>


<p>AutomatedUpdate is an efficient, simple, and cost-effective way of delivering application updates to remote users. It requires little support and can be customized in a number of ways. For instance, FTP/WinInet support can be dropped and the software-distribution server configured for public access for all domain users. In such a case, standard file operations allow extensive manipulation of remote files, thereby reducing the size and complexity of the code. </p>


<p></p>

<p><b>DDJ</b></p>
<H4><A NAME="l1">Listing One</H4>


<pre>CInternetSession* pInetSession = NULL;
CFtpConnection* pFtpConnection = NULL;
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two</H4>


<pre>// WinNetwork resource variable
NETRESOURCE nr;
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3">Listing Three</H4>


<pre>// Create INet session
pInetSession = new CInternetSession(NULL, 1, PRE_CONFIG_INTERNET_ACCESS,
                                     NULL, NULL, INTERNET_FLAG_DONT_CACHE);
// Create FTP connection
pFtpConnection = pInetSession-&gt;GetFtpConnection(FtpSite, UserName, Password);
CFtpFileFind object is used for locating application files on remote FTP
server:
CFtpFileFind FF(pFtpConnection);

// Find Setup.exe
bSetup = FF.FindFile(RemoteSetup);

// Make sure that either application EXE or Setup.exe exists
if ( bSetup || FF.FindFile(RemoteExe) )
{
    // Open and read .INF file
    CInternetFile* pFile = pFtpConnection-&gt;OpenFile(RemoteInf);
    if ( pFile )
    {
        pFile-&gt;ReadString(Version);
        delete pFile;
    }
}
</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>
<H4><A NAME="l4">Listing Four</H4>


<pre>nr.dwType = RESOURCETYPE_DISK;
nr.lpLocalName = nr.lpProvider = NULL;
nr.lpRemoteName = (LPSTR)(LPCSTR)Server;
</pre>
<P>
<A HREF="#rl4">Back to Article</A>
</P>
<H4><A NAME="l5">Listing Five</H4>


<pre>if ( UserName != "" &amp;&amp; ::WNetAddConnection2(&amp;nr, Password, UserName, 0)
    != NO_ERROR )
    THROW(new CSysException());
</pre>
<P>
<A HREF="#rl5">Back to Article</A>
</P>
<H4><A NAME="l6">Listing Six</H4>


<pre>// Get application executable version
GetFileVersion(RemoteExe, Version);
</pre>
<P>
<A HREF="#rl6">Back to Article</A>
</P>
<H4><A NAME="l7">Listing Seven</H4>


<pre>// Find Setup.exe
bSetup = CFileFind().FindFile(RemoteSetup);
</pre>
<P>
<A HREF="#rl7">Back to Article</A>
</P>
<H4><A NAME="l8">Listing Eight</H4>


<pre>// Get the version number from .INF file
if ( bSetup )
{
    CStdioFile File;
    // Open and read .INF file
    if (  File.Open(RemoteInf, CFile::modeRead|CFile::typeText) )
    {
        CString SetupVersion;
        File.ReadString(SetupVersion);
        if ( SetupVersion &gt; Version )
        {
        bSetup = TRUE;
            Version = SetupVersion;
        }
    }
}
</pre>
<P>
<A HREF="#rl8">Back to Article</A>
</P>
<H4><A NAME="l9">Listing Nine</H4>


<pre>// Compare versions
if ( Version &gt; AppVersion )
    if ( AfxMessageBox(IDS_UPDATE_PROCEED, MB_YESNO|MB_ICONQUESTION) ==
IDYES )
    {
        ::SetStatus("Writing new executable to disk...");
        ...
</pre>
<P>
<A HREF="#rl9">Back to Article</A>
</P>
<H4><A NAME="l10">Listing Ten</H4>


<pre>if ( !::CopyFile(AppExe, AppOld, FALSE) )
    THROW(new CSysException());
</pre>
<P>
<A HREF="#rl10">Back to Article</A>
</P>
<H4><A NAME="l11">Listing Eleven</H4>


<pre>// Obtain process ID
CString PID;
PID.Format("%i", ::GetCurrentProcessId());
</pre>
<P>
<A HREF="#rl11">Back to Article</A>
</P>
<H4><A NAME="l12">Listing Twelve</H4>


<pre>if ( bUseFTP )
{
    // Download and run Setup.exe
    if ( bSetup )
    if ( pFtpConnection-&gt;GetFile(RemoteSetup, SetupExe, FALSE) )
   _execl(SetupExe, SetupExe, NULL);
    else
            THROW(new CSysException());
    else
        // Download new application executable
        if ( pFtpConnection-&gt;GetFile(RemoteExe, AppNew, FALSE) )
            _execl(UpdExe, UpdExe, AppNew, AppExe, PID, NULL);
        else
            THROW(new CSysException());
}
</pre>
<P>
<A HREF="#rl12">Back to Article</A>
</P>
<H4><A NAME="l13">Listing Thirteen</H4>


<pre>if ( bSetup )
{
// Run Setup.exe
    _execl(RemoteSetup, RemoteSetup, NULL);
    AfxMessageBox(IDS_SETUP_FAILED);
}
else
{
// Replacing application executable
    _execl(UpdExe, UpdExe, RemoteExe, AppExe, PID, NULL);
    AfxMessageBox(IDS_UPDATE_FAILED);
}
</pre>
<P>
<A HREF="#rl13">Back to Article</A>
</P>
<H4><A NAME="l14">Listing Fourteen</H4>


<pre>if ( !bSilent ) AfxMessageBox("Progam is up to date.");
// Clean up
if ( pFtpConnection != NULL )
delete pFtpConnection;
if ( pInetSession != NULL )
    delete pInetSession;
// Close network connection
if ( !bUseFTP )
    ::WNetCancelConnection2(Server, 0, FALSE);
</pre>
<P>
<A HREF="#rl14">Back to Article</A>
</P>
<H4><A NAME="l15">Listing Fifteen</H4>


<pre>// Initialize AutomatedUpdate
auInit("Helix", "UpdTest", m_hInstance, m_pMainWnd, "\\\\JMYCOMP\\UPDATES");
// Check for update
auCheck(TRUE);</pre>
<P>
<A HREF="#rl15">Back to Article</A>
</P>


</body>
</html>
