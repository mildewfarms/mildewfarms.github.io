<html>
<head>
<title>Jul00: Creating WAP Services</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Creating WAP Services</h1>

<p><i>Dr. Dobb's Journal</i> July 2000</p>
<h2>Building apps for  wireless communication</h2>

<h3>By Luca Passani</h3>

<I>
Luca works for Cell Network and specializes in software development for mobile systems. He can be contacted at lucap@ cellnetwork.no.</I>

<hr>

<p>The Wireless Application Protocol (WAP) is a communications architecture designed for wireless networks. Sponsored by the nonprofit WAP Forum (http://www.wapforum.com/), the specification includes an XML-based markup language, scripting language, microbrowser specification, framework for wireless telephony applications, lightweight protocol stack, and secure connections. (See also http://wap.colorline .no/wap-faq/.)</p>
<p>In "The Wireless Application Protocol" (<i>DDJ</i>, October 1999), Steve Mann provided a detailed overview of the WAP specification. In this article, I'll focus on the creation of WAP services by describing a fully functioning WAP application based on a project I was recently involved in for a Scandinavian telecommunication company. The WAP application I present is a fictitious radio station, WAPRadio, which lets listeners pick songs from a database of available music, write a dedication, and request a song. To build this application, I use the Apache web server (with PHP support) and the MySQL database. </p>
<DDJADVERTISEMENT INLINE>

<p>WAP's power lies in a system's ability to communicate without needing a PC. While the possibility of browsing static documents is necessary, the Wireless Markup Language (WML), which is an XML-based markup language, and WMLScript, which is a scripting language loosely based on JavaScript, can hardly suffice for creating valuable WAP services. What you need is a system that will deliver dynamically generated WML to the mobile phone to reflect the current status of your system -- available seats, flight schedules, information about the caller's bank account, or whatever. WAP's adoption of established Internet protocols (particularly HTTP) means that you can implement WAP services via CGI and derivates. In other words, if you know Perl, ASP, PHP, Java servlets, or any other similar technology, you can create a WAP service.</p>

<p>To access a WAP service you need either a WAP-enabled telephone or emulator. The example I present here has been tested with a Nokia 7110 mobile phone and the emulator that comes with Nokia Toolkit 1.3 (freely available at http://www .nokia.com/corporate/wap/ sdk.html), a WML-based development environment. You will also need to install the Java Virtual Machine 1.2.2 (freely available from Sun) to use the emulator for testing your WAP service from your PC. Finally, most telephones sold in the U.S. will use the microbrowser from Phone.com (freely available at http:// www.phone.com/).</p>



<h3>WAP Development Issues</h3>


<p>Even though WAP development concepts are simple, we're still in the first generation of WAP services. This means, for instance, that different WAP telephones have minor differences in their implementations, thereby making a functioning WAP site problematic for different mobiles.</p>


<p>The Nokia 7710, for example, does not support the POST method correctly when sending data to the web server, even though this is part of the specification, and the reference material by Nokia claims just the opposite. As a result, you have to use the GET method.</p>

<p>The WAP 1.1 specification does not try to standardize how WML documents and navigational elements should be rendered. Consequently, each device implements them in a different way. It is easy to fall in the trap of coding a functionality because of how it looks on a certain phone/emulator. If you do this, you'll get burned.</p>

<p>One limitation is the maximum size of a deck. (The basic WAP application metaphor is a deck of cards, where each deck is a program, or document with a unique URL, delivered from a server. Each card is a single visible user interaction, such as a choice list or data-entry form.) Some telephones (notably the 7710) won't accept a WML deck greater than 1.4 Kbytes. First-generation WAP phones have similar limitations. The Nokia 7110 does not render tables and many of the tags used for emphasis. This is why I haven't used them in my application. In addition, the <i>fieldset</i> element is ignored.</p>

<p>WAP devices are not PCs; they can only handle correct WML. If you have coded in HTML, you will find that WAP browsers do not forgive as easily. Your code must be correct and last minute changes can wreck havoc in the entire application. You should architect the interaction flow carefully in advance. (I suggest you start with paper and pencil.)</p>

<p>The emulator in the Nokia Toolkit 1.3 supports cookies, but the first-generation WAP systems probably don't. This is bad news, since this implies that you won't be able to exploit a handy mechanism to monitor user sessions. Of course, some gateways support cookies on behalf of the device, so you may have the opportunity to exploit this feature in your particular project.</p>

<p>The traditional human-computer interaction principles applied in web applications are not valid when it comes to WAP-enabled devices. WAP devices have many constraints web applications don't have, including:</p>


<ul>
  <li>Maximum size of compiled decks is limited. For the Nokia 7119, that's 1461 bytes.
  <li>Bandwidth is limited to 9600 bps. In the future, GPRS (General Packet Radio Service) will improve significantly on that.

  <li>Display capabilities are limited to 5&times;16 text-only screens.

  <li>Poor input facilities. Typing a URL on the Nokia 7110 simply takes too long.

</ul>

<p>Clearly, all this necessitates a special set of guidelines for WAP development, such as: </p>


<ul>

  <li>Words used in applications should be short yet meaningful. Too much text forces users to scroll. I provide context-sensitive help to explain what's going on in a different deck.

  <li>Text insertion should be avoided whenever possible. Use "select/option" elements and list links whenever possible.

  <li>Use the "alt" attribute for images.

  <li>Do not rely on the look of a page on a particular emulator. I saw people abuse the <i>onpick</i> event because it looked cool on the Toolkit emulator, but the results were poor on the real 7110.

</ul>

<h3>The Application</h3>


<p><A NAME="rf1"><A HREF="0007gf1.htm">Figure 1</A> illustrates the decks that implement an application. <A NAME="rl1"><A HREF="#l1">Listing One</A> contains three cards, starting with the splash screen in <A NAME="rf2"><A HREF="0007gf2.htm">Figure 2</A>, which is displayed for three seconds before the microbrowser moves to another card in the same deck. WAP pictures must be in a bitmap format called "WBMP." You can produce WBMP pictures with Adobe Photoshop or PaintShop Pro and a free plug-in is available at http://www.rcp.co.uk/ distributed/Downloads. Remember to register the appropriate MIME types on your web server (see <A NAME="rt1"><A HREF="0007gt1.htm">Table 1</A>), since this is the origin of many frustrating problems. </p>


<p>The frontpage card (<A NAME="rf3"><A HREF="0007gf3.htm">Figure 3</A>) is a portal for all of the radio station's WAP services. (The last two links are not part of the demo; they just give you the idea of what could be there.) The first link brings you to the picksong (<A NAME="rf4"><A HREF="0007gf4.htm">Figure 4</A>) card. Users can insert a word and request a list of matching song titles and artists.</p>

<p>I inserted a link to the help document for this deck; see <A NAME="rl2"><A HREF="#l2">Listing Two</A>. Each deck (or card, in some cases) should have a dedicated help document that compensates for the conciseness of the text in cards. (That's why <A NAME="rf1"><A HREF="0007gf1.htm">Figure 1</A> has shadows behind each deck.)</p>

<p>Putting as many cards as possible in a deck improves the user's experience, since no connection to the server is required to move from one card to the other. Of course, this is not possible when a card is generated dynamically by the server.</p>

<p>Upon submitting the search keyword to the server, PHP dynamically produces a WML deck with the requested information. The first lines in <A NAME="rl3"><A HREF="#l3">Listing Three</A> make sure that the right MIME type for WML is returned to the client. The rest is standard PHP programming. I make sure that there is a search key and that it is not too short. I then execute a SQL query that matches the search key against the artist and song columns in the song table in the database. The database schema consists of only two tables. The Songs table contains all the songs listeners are supposed to choose from. <i>song_id</i>, <i>title</i>, and <i>artist</i> are the column names. The Playlist table contains the list of songs users have chosen. A new record is inserted for each request. The file database.sql (available electronically; see "Resource Center," page 5) is a MySQL database dump that lets you reproduce my configuration.</p>

<p>The search query can have one of three possible results:</p>


<ul>
  <li>A match is not available. I provide a message, and an input box is presented to users. I leave the previous search key there. 
  <li>Only one record matches the search key. The match automatically becomes the user choice. 

  <li>Multiple records match the search key; see <A NAME="rf5"><A HREF="0007gf5.htm">Figure 5</A>. I generate a select element that will let users easily select a song from a set of options.

</ul>


<p>In second and third cases, users are given the option of inserting a dedication to be associated with the song they choose. <i>postfield</i> elements are used to build a request to the system in a way that is similar to how web developers employ hidden fields in HTML.</p>

<p>I did not implement much error handling in this example, but you will want to in real applications. PHP (and similar environments) react to errors with HTML messages. This, in turn, can be the cause of a meaningless error message on your emulator. In practice, debugging WAP may prove more difficult than debugging web applications.</p>

<p>The last deck (see <A NAME="rl4"><A HREF="#l4">Listing Four</A> and <A NAME="rf6"><A HREF="0007gf6.htm">Figure 6</A>) displays a confirmation message and updates the Playlist table with the data of the request (artist, title, and dedication). Of course, I assume that the radio staff has some other database front end that lets them see listener requests. I inserted a link to the first page of the application at the end of the deck. Navigating with WAP is difficult, but omitting such a link would be deadly. This is at least as important as implementing a Back button in each card. </p>



<h3>Conclusion</h3>


<p>The application presented here is straightforward. If you have done web development with PHP (or ASP or JSP), you should be able to leverage your knowledge and build successful WAP services quite easily.</p>




<p><b>DDJ</b></p>

<H4><A NAME="l1">Listing One</H4>


<pre>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE wml PUBLIC "-//WAPFORUM//DTD WML 1.1//EN" 
                             "http://www.wapforum.org/DTD/wml_1.1.xml"&gt;
&lt;wml&gt;
 &lt;template&gt;
  &lt;do type="accept" label="Help"&gt;
   &lt;go href="index_help.wml"/&gt; 
  &lt;/do&gt;
 &lt;/template&gt;
 &lt;card id="logo" title="WAP Radio" ontimer="#frontpage"&gt;
  &lt;timer value="30"/&gt;
  &lt;p&gt;
   Welcome to
   &lt;img src="pix/radio.wbmp" alt="WAP Radio"/&gt;
  &lt;/p&gt;
 &lt;/card&gt;
 &lt;card id="frontpage" title="WAP Radio"&gt;
  &lt;p&gt;
   &lt;anchor&gt;Pick up a song
    &lt;go href="#picksong" /&gt;
   &lt;/anchor&gt;
   &lt;anchor&gt;Today's programs
    &lt;go href="programs.wml" /&gt;
   &lt;/anchor&gt;
   &lt;anchor&gt;news
    &lt;go href="news.wml" /&gt;
   &lt;/anchor&gt;
  &lt;/p&gt;  
 &lt;/card&gt;
  &lt;card id="picksong" title="Pick up a song"&gt;
  &lt;do type="prev" label="Back"&gt;
   &lt;prev/&gt;
  &lt;/do&gt;
    &lt;p&gt; Artist or song title: &lt;input type="text" name="searchkey" value="" /&gt;
    &lt;anchor title="search"&gt;Search
            &lt;go href="songlist.php3" method="get"&gt;
         &lt;postfield name="searchkey" value="$(searchkey)" /&gt;
      &lt;/go&gt;
    &lt;/anchor&gt;
    &lt;/p&gt;
   &lt;/card&gt;
&lt;/wml&gt;

</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two</H4>


<pre>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE wml PUBLIC "-//WAPFORUM//DTD WML 1.1//EN"
                     "http://www.wapforum.org/DTD/wml_1.1.xml"&gt;
&lt;wml&gt;
&lt;template&gt;
 &lt;do type="prev" label="Back"&gt;
  &lt;prev/&gt;
 &lt;/do&gt;
&lt;/template&gt;
  &lt;card id="index_hlp" title="help"&gt;
   &lt;p&gt;  
    This text is supposed to explain what happens in this deck. It should 
tell users that they can browse the news, see today's programs on the radio, 
and even pick up a song to be sent later on.
 &lt;br /&gt;
Associating a  help deck to each deck that implements a certain
function is an excellent way to provide context-sensitive help.
 &lt;br /&gt;
 Generally speaking having a context-sensitive help system is a good idea in 
the case of WAP services. Screens real estate is limited and the text used 
to guide users can be cryptic.
&lt;br /&gt;
Don't forget a back button
   &lt;/p&gt; 
  &lt;/card&gt;
&lt;/wml&gt;

</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3">Listing Three</H4>


<pre>&lt;?php //header("content-type:application/xml"); 
  header("content-type:text/vnd.wap.wml"); 
  echo "&lt;?xml version=\"1.0\" ?&gt;\n";
  echo '&lt;!DOCTYPE wml PUBLIC "-//WAPFORUM//DTD WML 1.1//EN" ';
  echo '"http://www.wapforum.org/DTD/wml_1.1.xml"&gt;'; 
?&gt; 
&lt;wml&gt;
&lt;template&gt;
 &lt;do type="prev" label="Back"&gt;
  &lt;prev/&gt;
 &lt;/do&gt;
&lt;/template&gt;
&lt;?php
 //there are several things that can go wrong
 $ok = false;
 if ($searchkey &amp;&amp; strlen($searchkey) &gt; 2) { //good start. 
                                         // We have something to search for
    mysql_connect("localhost:3306", "root", "");
    $query = "SELECT * FROM songs " . 
             "WHERE title LIKE '%$searchkey%' OR artist LIKE '$searchkey%'";
    $result = mysql_db_query("wap", $query);
 
    if ($result &amp;&amp; mysql_numrows($result) &gt; 0) {
       $ok = true;
    }
 }
 if ($ok) {
    //if there are multiple hits, user should choose one
    if (mysql_numrows($result) &gt; 1) {
?&gt;
 &lt;card id="pickup" title="Choose from hitlist"&gt;
  &lt;do type="accept" label="Help"&gt;
   &lt;go href="songlist_help.wml"/&gt; 
  &lt;/do&gt;
  &lt;p&gt;
Pick up song: 
&lt;select name='song'&gt;
&lt;?php   
  while ($r = mysql_fetch_array($result)) {
    //echo("&lt;option value='".$r["song_id"]."'&gt;".$r["title"]." - 
                                              ".$r["artist"]."&lt;/option&gt;\n");
    //display is too small. create entry for song and entry for artist
    echo("&lt;option value='".$r["song_id"]."'&gt;".$r["artist"]."&lt;/option&gt;\n");
    echo("&lt;option value='".$r["song_id"]."'&gt;".$r["title"]."&lt;/option&gt;\n");
  } ?&gt;
&lt;/select&gt;
&lt;?
  } else { //only one hit, selected by default
     echo("&lt;card id=\"pickup\" title=\"Choose from hitlist\"&gt;\n");
     $r = mysql_fetch_array($result);
     //one way to do it is with setvar (as follows)--but consider 
     //                                                   the side effects
?&gt;
 &lt;do type="accept" label="Help"&gt;
   &lt;go href="songlist_help.wml"/&gt; 
  &lt;/do&gt;
 &lt;p&gt;
   you chose: &lt;br /&gt;
&lt;?
   echo($r["artist"].":".$r["title"]."&lt;br /&gt;\n"); 
  }
?&gt;
your message:
&lt;input type="text" name="message" /&gt;
&lt;anchor title="next"&gt;Next
  &lt;go href="confirm.php3" method="get"&gt;
&lt;?
   //if there are multiple entries, use the one selected
   //by the user. Otherwise, use the only hit available
   if (mysql_numrows($result) &gt; 1) { 
     echo("&lt;postfield name=\"song\" value=\"$(song)\" /&gt;\n");
   } else {
     echo("&lt;postfield name=\"song\" value=\"".$r["song_id"]."\" /&gt;\n");
   }
?&gt;
   &lt;postfield name="message" value="$(message)" /&gt;
 &lt;/go&gt;
&lt;/anchor&gt;
  &lt;/p&gt;
 &lt;/card&gt;
&lt;?
} else { //something went wrong, try again
?&gt;
 &lt;card id="sorry" title="No song found"&gt;
  &lt;do type="accept" label="Help"&gt;
   &lt;go href="songlist_help.wml"/&gt; 
  &lt;/do&gt;
 &lt;p&gt;No match. Try with a different search key:
  &lt;input type="text" name="searchkey" value="&lt;?php echo($searchkey) ?&gt;" /&gt;
    &lt;anchor title="search"&gt;Search
            &lt;go href="songlist.php3" method="get"&gt;
         &lt;postfield name="searchkey" value="$(searchkey)" /&gt;
      &lt;/go&gt;
    &lt;/anchor&gt;
  &lt;/p&gt;  
 &lt;/card&gt;
&lt;?php
 }
?&gt;
&lt;/wml&gt;

</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>
<H4><A NAME="l4">Listing Four</H4>


<pre>&lt;?php //header("content-type:application/xml"); 
  header("content-type:text/vnd.wap.wml"); 
  echo "&lt;?xml version=\"1.0\" ?&gt;\n";
  echo '&lt;!DOCTYPE wml PUBLIC "-//WAPFORUM//DTD WML 1.1//EN" ';
  echo '"http://www.wapforum.org/DTD/wml_1.1.xml"&gt;'; 
?&gt;
&lt;wml&gt;
&lt;template&gt;
 &lt;do type="prev" label="Back"&gt;
  &lt;prev/&gt;
 &lt;/do&gt;
&lt;/template&gt;
&lt;?
  mysql_connect("localhost:3306", "root", "");
  $query = "SELECT * FROM songs " . 
             "WHERE song_id = $song";
  $result = mysql_db_query("wap", $query);

  //not much error handling for simplicity sake
  $r = mysql_fetch_array($result);
?&gt;
  &lt;card id="confirm" title="Thank you!"&gt;
   &lt;p&gt;  
 You picked:&lt;br/&gt; &lt;?php echo($r["title"]); ?&gt; by 
                                      &lt;?php echo($r["artist"]); ?&gt;&lt;br /&gt;
 Your message:&lt;br /&gt;
 &lt;?php echo($message); ?&gt;&lt;br /&gt;
&lt;?
  //let's insert the data in the playlist table
  $query = "INSERT INTO playlist VALUES (NULL,".$r["song_id"].",
                  \"".$r["title"]."\",\"".$r["artist"]."\",\"$message\")";
  //echo("&lt;!-- $query --&gt;"); 
  $result = mysql_db_query("wap", $query);
?&gt;
 Thank you for listening to WAP Radio 105 FM.&lt;br /&gt;
&lt;a href="index.wml"&gt;Go to front page&lt;/a&gt;
   &lt;/p&gt; 
  &lt;/card&gt;
&lt;/wml&gt;

</pre>
<P>
<A HREF="#rl4">Back to Article</A>
</P>


</body>
</html>
