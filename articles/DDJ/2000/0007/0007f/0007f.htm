<html>
<head>
<title>Jul00: The REBOL Scripting Language</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>The REBOL Scripting Language</h1>

<p><i>Dr. Dobb's Journal</i> July 2000</p>
<h2>A portable language with built-in networking</h2>

<h3>By Carl Sassenrath</h3>

<I>
Carl is the founder of REBOL Technologies and one of the designers of the Amiga operating system. He can be contacted at carl@rebol.com.</I>

<hr>

<p>People who speak English understand messages such as "turn on the light" or "record TV channel 7 at 8 pm." But can your computer understand the same messages? The question is not whether your computer can understand English, but rather, can it understand these specific messages? In other words, is it possible to share a common language with your computer, even if it's not exactly English?</p>
<p>This is the goal of REBOL, short for "Relative Expression-Based Object Language." REBOL was designed to make it easier to communicate between computers, or between people and computers, using context-dependent sublanguages. REBOL is unlike traditional programming languages such as C, Basic, or Java. The language has no keywords and little syntax. Although it can be used for programming, writing functions, and performing processes, its greatest strength is the ability to easily create domain-specific languages or dialects.</p>
<DDJADVERTISEMENT INLINE>

<p>In addition, REBOL is a highly polymorphic and reflective language. The former means that the language applies its functions to a wide variety of datatypes in a consistent manner. The latter indicates that the language can be dynamically introspective about itself. This property is quite difficult to obtain in language design, but allows REBOL to be descriptive and self referential. In fact, REBOL is metacircular: It is able to serve as its own metalanguage, eliminating the need for preprocessing and macros. The result is a language with a powerful and dynamic means of expression.</p>

<p>REBOL scripts are machine independent and run on 37 different CPU/OS platforms. The language has several networking protocols built in, including HTTP, FTP, NNTP, SMTP, POP, Finger, Whois, Daytime, and DNS. In addition, it handles multiple proxy servers and can communicate directly at the TCP/IP level. Finally, REBOL is compact, requiring only a 200 KB download; it can be downloaded free of charge from http://www.rebol.com/.</p>



<h3>REBOL Programming</h3>


<p>REBOL is not a conventional language. It breaks a number of rules. For instance, REBOL has more than 40 datatypes built in (contrasted to languages such as C that have five or six datatypes). This lets you write values such as dates, times, money, e-mail, HTML/XML tags, and URLs directly in a script using a format that is already familiar to you. In addition, the datatypes are always part of the system. You don't need to hunt around for libraries or include files.</p>


<p>This simple script creates a network agent to check a web site every 10 minutes. If the web page fails to download, an e-mail is sent to the webmaster:</p>


<pre>forever [

   if error? try [ 

      read http://www.site.dom

   ] [

   send webmaster@site.dom 

      "Site is down."

   ]

   wait 0:10


]</pre>

<p>This example checks every hour to determine if a web site has changed:</p>



<pre>old-sum: checksum read http://www.site.dom

until [

    wait 1:00

    old-sum &lt;&gt; checksum read http://www.site.dom

]

send me@site.dom "Web site changed!"</pre>

<p>The brackets [] indicate blocks, which can hold both code and data values. They can be of any length and may contain other blocks. The values within a block can be of various datatypes. These values are written in free format, with no significance to spacing or lines. <A NAME="rt1"><A HREF="0007ft1.htm">Table 1</A> shows the available datatypes.</p>


<p>REBOL is a symbolic language. Words are used as both symbols and as variables. When used as symbols, you're not interested in their value, only what they stand for. </p>

<p>A block can be evaluated. This operation looks up the values for words and performs functions. The values can be passed as arguments to functions, and values are returned as results. All operations in REBOL are functions. For instance, you can write:</p>


if time &gt; 11:30 [print "Lunch"]

<p>But you can also write code such as:</p>



<pre>condition: (time &gt; 11:30)


action: [print "Lunch"]


if condition action</pre>

<p>A variable definition is done with a colon, not an equal (which is used for equality). A variable can hold a function as well as any other type of value.</p>


<p>It is worth noting that REBOL has no keywords and little syntax. This may seem foreign if you know C, Java, or Basic, but these features are important for creating dialects.</p>

<p>As mentioned earlier, REBOL is a highly polymorphic and reflective language. The reflective property can be seen when using the REBOL internal help, which uses function argument specifications to generate help information. For instance, the help lines in <A NAME="re1"><A HREF="0007fe1.htm">Example 1</A> were generated from the definition of the switch function. This introspective database is also used when generating error messages, as in <A NAME="re2"><A HREF="0007fe2.htm">Example 2</A>.</p>



<h3>REBOL Data Structuring</h3>


<p>REBOL data structures are also formed with blocks. They can contain values of any datatype, including words, and the values may appear in any order. The freedom of order establishes the basis for dialects and will be explained in the next section.</p>


<p>The data held within blocks can be referenced by its position, tag, type, evaluation, and dialect. Referencing by position is most common for groups of fixed-size structured data. For instance, <A NAME="rl1"><A HREF="#l1">Listing One</A> defines a block of friends and related data. The position determines where information is held. Name is first, age is second, and e-mail is third.</p>

<p>Referencing data by tag is useful if the order of the data is irregular or contains entries of variable length, as in <A NAME="rl2"><A HREF="#l2">Listing Two</A>. Words are used as tags to mark specific values. The words are not used as variables; they are just markers (similar to how XML tags its data). Similar to tags, datatypes can be used to reference specific items. <A NAME="rl3"><A HREF="#l3">Listing Three</A> shows how you would find all e-mail addresses to send friends a quick hello.</p>

<p>Another method of referencing data requires evaluation of the data block in order to set variables to specific values. Here each value is assigned to a variable. This is done when the block is evaluated, as in <A NAME="rl4"><A HREF="#l4">Listing Four</A>. </p>

<p>The extra line that sets all the variables to none is done to allow code to determine if the variable was actually set in the block. Not all variables may be present in each block. (The scope of these variables can be global or local to a function or object.)</p>



<h3>Dialects</h3>


<p>A REBOL dialect is a set of data structuring rules that lets you define specific meaningful sequences of REBOL words or data. Dialects are created in REBOL using the language's data structures, symbols, and native functions. Any sequence of values that must be interpreted through special code is considered a dialect. <A NAME="rl1"><A HREF="#l1">Listings One</A> through Three are dialects because they require user code to interpret their structure. <A NAME="rl4"><A HREF="#l4">Listing Four</A> is not a dialect, because it is actual code.</p>


<p>A dialect is defined as a specialized grammar that shares REBOL's common set of datatypes. A dialect is not specified as character patterns, but rather as datatype patterns within REBOL. Dialects are normally created by a programmer who understands the details of a specific domain. For instance, you can create a home control dialect that lets you send this message to your home:</p>

<p>
Turn on porch light at 7:30 pm</p>

</blockquote><p>Your home computer would interpret the message by running a REBOL dialect that understands actions like "turn on," objects like "porch light," and times like "7:30 pm."</p>


<p>There is no limit to the number or sophistication of the dialects that can be created. It is common practice for programmers to create sublanguages to better express and describe solutions. Chip designers, civil engineers, stock brokers, statisticians, financiers, travel agents, and other professionals have created their own specialized languages to become more productive within their specific domains. Other dialect examples are in <A NAME="re3"><A HREF="0007fe3.htm">Example 3</A>. These dialects can become more involved and sophisticated depending on the requirements of the domain, as in <A NAME="re4"><A HREF="0007fe4.htm">Example 4</A>.</p>

<p>These examples are wordy in order to make them look more like English; however, REBOL should not be mistaken for English. It is not. The similarity to English is done to make dialects easier for users. Messages can be written in a more concise format if necessary. For instance, <A NAME="rl5"><A HREF="#l5">Listing Five</A> shows dialect lines that are used to describe a graphical user interface in REBOL/View with its consumer interface dialect (CID is one of several user-interface dialects). Rather than use extra words, the meaning of each line is known from the words and datatypes that are used, such as text strings, numbers, image files, colors, blocks, and so on.</p>

<p>In addition to user-defined dialects, REBOL has several built-in dialects. The specification of a function and its arguments is done in a dialect of REBOL that accepts argument names, their acceptable datatypes, description strings, functional refinements, and more. <A NAME="rl6"><A HREF="#l6">Listing Six</A> shows the <i>append</i> function specification. Other dialects are used in REBOL for the <i>secure </i>and <i>parse</i> functions.</p>



<h3>Defining Dialects</h3>


<p>A dialect can be formal or informal. A formal dialect requires a grammar be provided to the <i>parse</i> function. An informal dialect requires no such specification. <A NAME="rl1"><A HREF="#l1">Listings One</A> through Three are informal dialects. To specify a formal dialect, grammar rules are provided to the <i>parse </i>function. <A NAME="rl7"><A HREF="#l7">Listing Seven</A> is a stock trade and its dialect.</p>


<p>The stock dialect is a block that defines the rules of the grammar for the stock dialect. These rules are actually a dialect of REBOL, so the values within it have a different meaning than they would in normal REBOL code.</p>

<p>The first line indicates that a variable should be set to hold either the word "sell" or "buy." The vertical bar separates the alternates. Whichever is found will be set to the action variable. If neither is found, then the <i>parse</i> function will return immediately with a false value. This is similar to the standard Backus Naur Form (BNF) grammar specifications used to specify most languages and protocols. The remaining lines set other values for the number of shares, company name, and price per share. The words that begin with a tick (single quote) are literal words and must appear as specified within the grammar. Many of these words can be made optional by using the opt keyword, as in <A NAME="rl8"><A HREF="#l8">Listing Eight</A>. This new grammar allows all of the stock trades in <A NAME="rl9"><A HREF="#l9">Listing Nine</A>. <A NAME="rl10"><A HREF="#l10">Listing Ten</A> is the code that calls the <i>parse</i> function with the grammar rules and prints the result.</p>



<h3>Simple Network Dialect</h3>


<p>The stock dialect parses the trade, but does nothing other than print the result. Most of the time, you'll want to associate specific actions to parts of a dialect. The dialect in <A NAME="rl11"><A HREF="#l11">Listing Eleven</A> defines a simple network command language that can move web pages between systems and send a progress report to a network manager. This is a complete script example that includes a REBOL header. </p>


<p>The block of commands holds actions that the net dialect block parses with specified grammar rules. In addition, there is a file rule that is used within the net dialect block. The <i>parse</i> function is called with error handling (the <i>try</i> function) just in case a mistake is not caught by the dialect grammar. This script can easily be modified to load the command block from other files.</p>



<h3>Conclusion</h3>


<p>Communication is the exchange and interpretation of information. To communicate, we need to share a common language. However, in many cases we are dealing with a specific domain, where a dialect can provide greater productivity, easier maintenance, and quicker time-to- market. There are examples in the world around us from VCRs to toasters and from home control to automobile engines that can benefit from this approach. This becomes even more essential in today's distributed computing environment, where complexity and size of software solutions have created serious development barriers. Within these specific domains, REBOL provides a powerful tool for breaking through that code barrier.</p>


<p></p>

<p><b>DDJ</b></p>
<H4><A NAME="l1">Listing One</H4>


<pre>  friends: [
          "Bob"   24 bob@mob.dom
          "Sally" 28 sal@bol.dom
          "Julie" 30 jul@minespring.dom
  ]
  foreach [name age email] friends [
          send email reform ["Hi" name "How's it going?"]
  ]
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two</H4>


<pre>friends: [
        name "Bob" "Marker" age 24
        name "Sally"
                age 28
                email sal@bol.dom
                phone #777-555-1111
        name "Julie" "Lober"
                email jul@minespring.dom
                site http://www.juliesite.dom
                city "New York"
]
while [friends: find friends 'name] [
        friends: next friends
        print first friends
]
friends: head friends
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3">Listing Three</H4>


<pre>while [friends: find friends email!] [
        send first friends "Quick hello!"
        friends: next friends
]
</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>
<H4><A NAME="l4">Listing Four</H4>


<pre>friends: [
        [name: "Bob Marker" age: 24]
        [name: "Sally"
                age: 28
                email: sal@bol.dom
                phone: #777-555-1111
        ]
        [name: "Julie Lober"
                email: jul@minespring.dom
                site: http://www.juliesite.dom
                city: "New York"
        ]
]
foreach person friends [
        set [name age email phone site city] none
        do person
        print name
]
</pre>
<P>
<A HREF="#rl4">Back to Article</A>
</P>
<H4><A NAME="l5">Listing Five</H4>


<pre>view layout 640x480 [
    backdrop %trees.jpg
    title "Network Tester"
    text {Test that your network configuration is working
            by clicking on relevant buttons below.}
    pad 20
    text "Network Tests:" yellow
    button "DNS"    [read dns://www.rebol.com]
    button "Whois"  [read whois://rebol.com@rs.internic.net]
    button "Finger" [read finger://luke@rebol.com]
    button "Time"   [read daytime://10.5.5.2]
    button "SMTP"   [send luke@rebol.com "Test"]
    button "POP"    [read pop://user:pass@rebol.com]
    button "HTTP"   [read http://www.rebol.com]
]
</pre>
<P>
<A HREF="#rl5">Back to Article</A>
</P>
<H4><A NAME="l6">Listing Six</H4>


<pre>append: func [
        {Appends a value to the tail of a series.}
        series [series! port!] {Series to append to}
        value {Value to append}
        /only {Appends a block value as a block}
]
</pre>
<P>
<A HREF="#rl6">Back to Article</A>
</P>
<H4><A NAME="l7">Listing Seven</H4>


<pre>trade: [
        Sell 100 shares of "Acme" at $4.55 per share
]
stock-dialect: [
        set action ['sell | 'buy]
        set shares integer! 'shares 'of
        set company string! 'at
        set price money! 'per 'share
]
parse trade stock-dialect
</pre>
<P>
<A HREF="#rl7">Back to Article</A>
</P>
<H4><A NAME="l8">Listing Eight</H4>


<pre>set action ['sell | 'buy]
set shares integer! opt 'shares opt 'of
set company string! 'at ['below | 'above | none]
set price money! opt ['per 'share]
</pre>
<P>
<A HREF="#rl8">Back to Article</A>
</P>
<H4><A NAME="l9">Listing Nine</H4>


<pre>Sell 100 shares of "Acme" at $4.55 per share
Sell 100 shares "Acme" at $4.55 per share
Sell 100 shares "Acme" at above $4.55 per share
Sell 100 of "Acme" at $4.55 per share
Sell 100 of "Acme" at below $4.55
Sell 100 "Acme" at $4.55
</pre>
<P>
<A HREF="#rl9">Back to Article</A>
</P>
<H4><A NAME="l10">Listing Ten</H4>


<pre>either parse trade stock-dialect [
        print [action shares company price]
][
        print "stock trade error"
]
</pre>
<P>
<A HREF="#rl10">Back to Article</A>
</P>
<H4><A NAME="l11">Listing Eleven </H4>


<pre>REBOL [
    Title: "Dr. Dobb's Example"
    Date: 28-Mar-2000
    Version: 1.0.2
    Needs: [core 2.3.0]
]
commands: [
    manager is carl@rebol.com
    access with ftp://user:pass@www.rebol.com/pages

    inform "beginning update..."
    download %index.html
    download %sitemap.html to %oldsitemap.html

    upload %new-index.html to %index.html
    upload %logo.jpg
    notify "home page has been updated"

    quit
]
net-dialect: [
    'manager opt 'is set who email!
    'access opt 'with set site url!
    some [
        'download file-rule
              (print ["Downloading:" src]
              write/binary dest read/binary site/:src)
        | 'upload file-rule
              (print ["Uploading:" src]
              write/binary site/:dest read/binary src)
        | 'notify set message string! (send who message)
        | 'inform set message string! (print message)
        | 'quit (quit)
        | here: (print ["Unknown:" mold here] halt)
    ]
]
file-rule: [set src file! ['to set dest file! | none (dest: src)]]
if error? try [parse commands net-dialect][
    send who "Script failed"
]


</pre>
<P>
<A HREF="#rl11">Back to Article</A>
</P>


</body>
</html>
