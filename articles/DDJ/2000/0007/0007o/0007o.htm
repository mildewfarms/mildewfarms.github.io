<html>
<head>
<title>Jul00: Algorithm Alley</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>A Practical Suffix-Tree Implementation  for String Searches</h1>

<p><i>Dr. Dobb's Journal</i> July 2000</p>

<h3>By Bogdan Dorohonceanu  and Craig Nevill-Manning</h3>

<I>
Bogdan is a graduate assistant and Craig is a professor in the computer-science department at Rutgers University. They can be contacted at dbogdan@caip.rutgers.edu and nevill@cs.rutgers.edu, respectively.</I>

<hr>

<p>Suffix trees are used for string searching in bioinformatics -- DNA sequencing, protein sequence pattern identification, and the like. In this context, a pattern is a string with an associated score. The score is computed as the sum of fixed values for each character in the string, pondered with weights that vary with the index of each character in the string. Since searches are usually performed on a large number of sequences, they require considerable hardware resources.</p>
<p>Suffix trees are not new to <i>DDJ</i>. Mark Nelson also examined them in his article "Suffix Trees" (<i>DDJ</i>, August 1996). In this article, we will build on Mark's discussion, and describe a practical problem: How to build a generalized suffix-tree data structure using as little hardware resources as possible while still approaching the time complexity derived in theory. We will also provide a suffix-tree implementation (written in Java) and test data that you can use. The complete source code is available electronically (see "Resource Center," page 5).</p>
<DDJADVERTISEMENT INLINE>

<p>Searching in protein sequences is more complicated than searching in DNA sequences because the alphabet is larger (24 characters instead of 4) and the sequences are relatively long. The same problem appears when searching text. For a protein, a sequence is the string of the characters representing amino acid and special symbols. For a sentence in text, a sequence may be the array of words in the sentence. As such, a text can be seen as a multisequence of words.</p>

<p>When dealing with many sequences, the time required per sequence for detecting a pattern improves (for example, more than 40 percent better for protein identification) if we use a generalized suffix tree built from the multisequence consisting of all the sequences concatenated and separated by delimiters. Unfortunately, multisequences are usually very long and suffix-tree implementations following the theory-like description require too much time and space when the alphabet is considerable and the number of sequences large.</p>

<p>A classic suffix-tree implementation requires a huge storage space when the original sequence is very long, because of the information needed to build the tree in linear time. If the core implementation is object oriented, we also experience the undesired effects of memory fragmentation. Because each edge, node, or suffix represents an object, the program spends most of its execution dealing with memory management. This process takes not only more space (more information is needed to handle the objects and it has to be stored somewhere), but also more time. The time is no longer linear, due to the memory management.</p>

<p>The problem here involves too many objects and too much precomputed information. The former is a classic programming problem not related to suffix trees; the solution is to use primitive data structures. We can obtain the same tree by representing the node objects as subsequent cells in a long array of integers.</p>

<p>What do we do when we insert a node in the tree? How do we move edges, nodes, and suffixes, or split edges in the array? We can avoid those by implementing the tree as if we do not know its special data structure -- treating it as a classic multinode tree. Therefore, the information is not stored in the edges.</p>

<p>Once all the information has been moved in the nodes, we still have a problem with the node size. Whenever a child node is inserted, its parent size increases with the space occupied by the link to the child. The parent node is stored as a sequence of cells in an array, and other nodes may be stored after it. Increasing the parent's size means shifting all cells of the nodes that follow it in the array towards the end of the array. This makes managing the nodes in a long array a time-consuming process.</p>

<p>Fortunately, we can represent the tree such that all the nodes have the same size, no matter how many children they may have. Instead of having a variable number of links to other nodes (besides other useful information), each node can contain only two links -- the first child and the left sibling. <A NAME="rf1"><A HREF="0007of1.htm">Figure 1</A> is a suffix trie for the sequence <i>ANANAS </i>(constructed by inserting the suffixes from sequence <i>ANANAS </i>in their index order: <i>ANANAS, NANAS, ANAS, NAS, AS</i>, and <i>S</i>) and the transformed suffix tree.</p>

<p><A NAME="rf2"><A HREF="0007of2.htm">Figure 2</A> is a suffix tree for the same sequence and the transformed suffix tree. The objects keeping data about suffixes in the classic tree and the leaves in our tree are not shown.</p>

<p>There is a solution for the space problem: To decrease memory usage and avoid fragmentation, the data should be represented with primitive types (no objects) and all the nodes should have the same size, regardless of how many children they may have.</p>

<p>Each node has three fields:</p>


<ul>
  <li><i>Index = index(node),</i> the starting index of a substring in the multisequence.
  <li><i>Child = child(node),</i> the index of the first child in the node array, stored as a positive value, or a suffix value stored as a null or negative value.

  <li><i>	Sibling = sibling(node), </i>the index of the right sibling in the node array. 

</ul>


<p>There is no information stored in edges. This technique allows each node to represent a substring from a valid suffix in the multisequence, which starts at the index <i>index(node) </i>and ends right before the index <i>index(child(node)</i>). We call the length of that substring the "node length" and it has the value <i>length(node)= index(child(node))-index(node)</i>. The same technique ensures that, during tree construction, there are creations of nodes (inserted at the end of the node array) and updates of node fields, but no node deletions. Therefore, the node fields can be compactly represented in arrays.</p>


<p>What about inserting a suffix in the middle of the tree when constructing the tree? We avoid that by first constructing a suffix array that contains the array of the suffixes sorted in reverse order using a version of Quicksort. Because the Quicksort algorithm sorts in place, there is no overhead with memory management, and creating the suffix array takes <i>O[N&times;log(N)]</i> time (where <i>N</i> is the number of characters in the input sequence) multiplied by a constant given by the average common prefix between two suffixes. The necessary time is almost linear in practice due to the slowly increasing curve of the <i>log(N)</i> function. The suffix array (in reverse lexicographic order) constructed from the sequence <i>ANANAS</i> (with the suffixes <i>ANANAS, NANAS, ANAS, NAS, AS,</i> and<i> S</i>) is shown in <A NAME="rf3"><A HREF="0007of3.htm">Figure 3</A>. We then create the suffix tree by inserting the suffixes in the order given by the suffix array, and we obtain a tree with suffixes in direct order. Finally, we free the memory occupied by the suffix array while constructing the suffix tree.</p>

<p>Because we build the tree by inserting suffixes sorted in reverse lexicographic order, the node insertion always takes place either as a child of the tree root, as a node with a leaf, or a leaf on the path visited during the previous insertion. We call that path the "insertion path," and it is always the path starting from the root node and following the <i>child(node)</i> link in each node except the last node (a leaf). On the current insertion path, all the nodes from the root to the insertion point will have their index field updated so that they point to the same valid suffix (that is, the one that is inserted). </p>

<p>This technique lets us always insert a new suffix on the path constructed by the links to the first children and split a node from that path if necessary. Therefore, we never traverse the (horizontal) links amongst siblings, and the number of memory accesses is minimal during the node insertion. We only create new nodes. Splitting an edge in the classic suffix tree is equivalent to splitting a node in our tree, which means creating one or two new nodes and updating the link to the first child of the split node.</p>

<p>The time required to insert all the suffixes is <i>O[N<sup>2</sup>]</i> (where <i>N</i> is the number of suffixes or characters in the sequence). Consider the worst case -- the suffix tree built from sequence<i> AAAA...A</i> composed from <i>N</i> identical characters. When we insert the suffixes <i>AAAA...A, ..., AAA, AA, A </i>from the suffix array into the suffix tree, the average common prefix between two successive suffixes is <i>((N-1)+ (N-2)+1)/N=N/2=O[N]</i> linear. Computing a common prefix and inserting the corresponding new node is linear with the length of that prefix. Because we insert <i>N</i> suffixes, the total time is theoretically <i>O[N<sup>2</sup>]</i> quadratic.</p>

<p>The quadratic time complexity seems to be a problem because there are theoretical algorithms that can build a suffix tree in linear time. Fortunately, the necessary time is <i>O[N]</i> linear in practice because, statistically, the average common prefix value is a very small value and not related to <i>N</i>, but with the statistical appearance of characters in the sequence. Moreover, if we concatenate the sequences in a long multisequence, the average common prefix variation with <i>N</i> is extremely small. For example, with the protein sequences from the SwissProt database (http://www.expasy.ch/sprot/sprot-top.html), the average common prefix decreases from 24 to 18 when we increase the number of sequences from 1000 (0.4<i>M</i> input characters) to 59,000 (21<i>M</i> input characters). For real applications, therefore, its value can be regarded as a relatively small constant. As mentioned earlier, we are dealing with practical problems (a large number of sequences), and this helps us here. <A NAME="rl1"><A HREF="#l1">Listing One</A> is the pseudocode for inserting a node.</p>

<p><A NAME="rf4"><A HREF="0007of4.htm">Figure 4</A> illustrates the steps for creating the suffix tree for <i>ANANAS </i>(by inserting the suffixes from the suffix array in reverse lexicographic order: <i>S, NAS, NANAS, AS, ANAS, and ANANAS</i>). The tree structure is good for pattern searches because the entire tree structure must be traversed when a pattern is searched. As <A NAME="rl2"><A HREF="#l2">Listing Two</A> shows, visiting the tree is straightforward.</p>

<p>A suffix tree has to store information about the starting index of suffixes, too. Consider that information as being stored in leaves to access it faster. As an index of the first child, a leaf has a negative integer, which represents not an index of a node, but a suffix in the original sequence. The minus sign discriminates between inner nodes and leaves. Therefore, no supplementary information is needed to indicate the type of a node -- inner node or leaf.</p>

<p>A suffix tree constructed from an <i>N</i>-character sequence has at most 2<i>N</i> nodes. Because there are <i>N </i>suffixes in the sequence and we decided to keep the information about suffixes in the tree as well as leaves, the final tree will have at most 3<i>N</i> nodes. This is not a deviation from theory, because the inner nodes of our tree (at most 2<i>N</i>) represent the real suffix tree. We have only organized the data in an easy-to-access way. The three node fields are represented with successive cells in three arrays of integers, and the entire tree needs at most 9<i>N</i> integers for storage (and no additional information). Therefore, the space requirement is <i>O[N]</i>.</p>

<p>This is not an increase in memory usage compared with the implementation described by Mark Nelson. His implementation has objects with information about suffixes pointed from each leaf node, therefore has at most 2<i>N</i> nodes (one integer each) with information about edges and children, and at most 2<i>N</i> edges (four integers each) with information, and <i>N </i>so-called "suffix objects" (3 integers each) with information about suffixes. Overall it uses at most 5<i>N</i> objects represented on about <i>(</i>2<i>N&times;</i>1<i>+</i>2<i>N&times;</i>4<i>+N&times;</i>3<i>)=</i>13<i>N</i> integers, besides the other data structures (like a hash tables of size 2<i>N</i> for edges and an array of fixed size of 2<i>N</i> with links to nodes) needed to manage the tree.</p>

<p>For comparison, we took a sequence of <i>N</i>=21<i>M</i> characters (or suffixes) and built a suffix tree with 51<i>M</i> nodes. Our tree requires five minutes for construction and 580 MB for storage. Mark's implementation requires much more time and 850 MB for the edges, nodes, and suffixes, not including the edge hash table for edges, and the overhead for object management in memory (overall, it goes over 1 GB).</p>

<p>There is always a price to pay depending on where we place an implementation between theory and practice, and between obtaining a linear-time or a linear-space requirement, and the type of application for which we intend to use the suffix tree.</p>

<p>After we have solved the main problems related with suffix-tree construction from a single long sequence, we continue with a generalized suffix tree; that is, a suffix tree constructed from an array of sequences (multisequence). In theory, a multisequence is built by concatenating the sequences and separating them through unique delimiters.</p>

<p>If we start with <i>M </i>sequences, we need <i>M </i>distinctive delimiters that must not be in the alphabet from which the sequences are composed. When <i>M </i>is large, each delimiter has to be represented on several bytes (more than one character), and storing and managing them creates a sensible time overhead. Also, a suffix of the multisequence that contains delimiters inside it is not entirely useful, because the valuable part of it extends from its beginning until the appearance of the first delimiter.</p>

<p>Let us consider two sequences -- <i>BMBK </i>and <i>BK. </i>The multisequence constructed from them is <i>BMBK&lt;*</i>1<i>&gt;BK&lt;*</i>2<i>&gt;</i>, where <i>&lt;*</i>1<i>&gt;</i> and <i>&lt;*</i>2<i>&gt;</i> are distinct sequence delimiters for this example. From the second suffix of the multisequence <i>MBK&lt;*</i>1<i>&gt; BK&lt;*</i>2<i>&gt;</i>, only the substring <i>MBK</i> is useful (valid) because it is a suffix in an original sequence (<i>BMBK</i>) of the multisequence.</p>

<p>Therefore, we defined the concepts of valid suffix, valid suffix array, and valid suffix tree. A valid suffix is a substring in the multisequence that represents a suffix in a sequence included in the multisequence. The starting indices of the valid suffixes have to be memorized as leaf nodes in the suffix tree because the same valid suffix may appear more than once in a multisequence.</p>

<p>The valid suffix array is a suffix array constructed with the valid suffixes of a multisequence. A valid suffix tree is a suffix tree constructed from a valid suffix array.</p>

<p>This approach has some advantages. The delimiters in the multisequence can have the same value. No test is needed for sequence delimiters during tree traversal for a pattern search (unlike in a classic suffix-tree implementation). A path in the tree represents and contains all the necessary information about a valid suffix, not a multisequence suffix. Paths in our tree are shorter than or equal to the paths in a classic suffix tree. Our tree has fewer nodes and paths than a classic suffix tree because it contains no multisequence suffix starting with a delimiter (like <i>&lt;*1&gt;BK&lt;*2&gt;</i>).</p>

<p>The valid suffixes of the multisequence <i>BMBK*BK*</i> (<i>*</i> is the common sequence delimiter) are exactly the suffixes of the original sequences: <i>BMBK, MBK, BK, K</i> (from the first sequence <i>BMBK</i>), <i>BK, </i>and <i>K</i> (from the second sequence <i>BK</i>). The valid suffix array constructed from the multisequence is in <A NAME="rf5"><A HREF="0007of5.htm">Figure 5</A>.</p>

<p>The valid suffix tree built from the array (drawn along with the leaves with information about suffixes) is in <A NAME="rf6"><A HREF="0007of6.htm">Figure 6</A>. There is no memory used to store information about the multisequence suffixes that start with the <i>*</i> delimiter.</p>

<p>The suffix-tree implementation we present here was designed for representing multiple sequences and searching strings or patterns in a multisequence. It requires in practice almost linear time and linear space to build and is free of memory-management overhead. <A NAME="rt1"><A HREF="0007ot1.htm">Table 1</A> presents some experimental results for suffix trees of different sizes built from multisequences of increasing size (the sequences are protein sequences). All the results were obtained on a PC with a single processor 500-MHz Pentium with 1 GB of memory.</p>



<h3>References</h3>


<p>Gusfield, Dan. <i>Algorithms on Strings, Trees, and Sequences-Computer Science and Computational Biology</i>, Cambridge University Press, 1997.</p>


<p>Bieganski, Paul, John Riedl, and John Carlis. "Generalized Suffix Trees for Biological Sequence Data: Applications and Implementation," University of Minnesota, 1994, http://www.cbc.umn.edu/VirtLibrary/ Bieganski/htree/htree-paper.ss.html.</p>

<p>Nelson, Mark R. "Fast String Searching With Suffix Trees," <i>DDJ</i>, August 1996.</p>



<p><b>DDJ</b></p>

<H4><A NAME="l1">Listing One</H4>


<pre>If the inserted suffix is the first suffix in the suffix array then
    Create the root and add as child a node with a leaf.
Else
    Compute l = longest common prefix between the current suffix and 
                 previous suffix in suffix array.
    If l = 0
        Add as child to root a node with a leaf.
 Else
    Let s = starting index of the inserted suffix. Follow each node 
                n on the insertion path updating index(n) with s so that 
                it points in the current inserted suffix and decreasing s 
                and l with the value length(n), until (l == 0) or (l &lt; 
                length(node)). Then add a leaf to the node n if (l == 0) or 
                split the node n (after splitting, the updated node n will 
                have two children: 1) child(n) is a leaf or a node with a 
                leaf and continues the new inserted path, and 2) 
                sibling(child(n), which is a node with all the children 
                of the split node).
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two</H4>


<pre>Call: visit(child(root));
void visit (int node) {
   if(child(node &gt; 0)) {
     // inner node, process inner node here
     for (int child = child(node);
       child &gt; 0; child = sibling(child)) {
       visit(child);
    }
  }
  else {
    // leaf, process leaf here
  }
}

</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>


</body>
</html>
