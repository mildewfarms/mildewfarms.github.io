<html>
<head>
<title>Jul00: A C++ Library for IBM MQSeries</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>A C++ Library for IBM MQSeries</h1>

<p><i>Dr. Dobb's Journal</i> July 2000</p>
<h2>Simplifying tools  for distributed  messaging systems</h2>

<h3>By Jack J. Woehr</h3>

<I>
Jack, a DDJ contributing editor, can be contacted at jax@well.com.</I>

<hr>

<p>IBM MQSeries is a distributed messaging system that has been ported to many platforms, from mainframe operating systems such as OS/390 and VM/ESA to UNIX servers such as AIX, Solaris, HP, Linux, as well as to OS/2, Windows NT, and Windows 3.1. MQSeries adds what might be called a "Windows-like message loop" to distributed environments. While many means of synchronous and asynchronous interprocess- and interplatform communication exist, most of them are established by negotiation between each of the messaging partners. In MQSeries, there is a third party involved -- the message queue server -- that may reside on the same machine as any of the messaging partners, but is conceptually a discrete entity that is administered separately from messaging clients.</p>
<p>MQSeries is a simple but powerful application of network theory. Clients open queues on the server for putting messages, getting messages, or both. All messages are put to and fetched from the queue, indirectly between applications.</p>
<DDJADVERTISEMENT INLINE>

<p>Administrative actions establish one or more message queues for the set of distributed programs that will employ MQSeries. Configuration includes maximum message size, permission attributes, security exits, and so on. There are no limits beyond the practical to the number of queues, the number of network hops between multiple queue servers, or the number of clients that may participate in exchanging messages in any practical topology. </p>

<p>MQSeries administration empowers application design. Client programs have an efficient, reliable, characterizable means of asynchronous data exchange. Clients awaiting messages can poll the queue or block for a message. Because MQSeries administration is centralized in the intermediate layer (the message queue server), there is less of an application design question as to whether a given client program's periodic response will be sufficient to prevent overflow of some application-specific queuing resource. The limitations, such as there are, are centralized on the capacity of the message queue server as configured. Furthermore, persistence of data residing in the queue means interrupted service can be resumed without loss of transactions.</p>

<p>Uses of MQSeries in the real world range from transaction systems that span legacy platforms and modern desktops to applications that might have been tempted toward CORBA but find MQSeries vastly simpler in instances where the crux of the application is continual data flow between stages running in multiple process spaces (typically on separate and dissimilar hardware platforms). An exotic use of MQSeries under development is a stock trader's "heads-up" compute-anywhere system, allowing the ticker tape to roll by projected on the trader's retina while he's shouting up from the floor.</p>

<p>Early versions of MQSeries sported a standard C programming interface. In recent releases, IBM has started to provide its own C++ bindings. When working on a large ordering system where my station was one of the many destinations of a large data flow, I developed the "SoftWoehr library" -- the open-source C++ class library presented here. SoftWoehr also encapsulates the C language bindings exposed by MQSeries, but is a good deal simpler than IBM's. Still, SoftWoehr is standard C++ and should compile on any MQSeries-supported platform if you have a standard C++ compiler that supports the Standard C++ Libraries. The SoftWoehr library also has a different linguistic flavor than the IBM libraries, a flavor that some C++ programmers might find congenial. </p>

<p>The first step in MQSeries messaging the SoftWoehr library is to open an extant message queue manager. Creating a message queue manager is an administrative task generally performed through scripting or at the command line. Let's say you want to open a queue manager named MYQMGR. Using SoftWoehr, you open this manager using <A NAME="rl1"><A HREF="#l1">Listing One</A>. </p>

<p>The next step is to open some queue managed by the manager. Let's say the queue is called APRICOT.QUEUE, so your code would read like <A NAME="rl2"><A HREF="#l2">Listing Two</A>. Note that the queue was opened for both shared input and output. This call might fail due to a prior exclusive open, so you need to catch exceptions and see what any problem might be. Of course, the application itself may be programmed to recover or modify its behavior based on the MQSeries low-level completion code and reason code for failures that are carried along in the exception and for which specific accessors are provided.</p>

<p>Next, you might wish to put a message to the queue. The library treats all messages as an array of <i>unsigned char</i>. The library does not care about the message contents. Because there are some specific formats supported in MQSeries, later versions of the SoftWoehr library will include some specific support for these formats. <A NAME="rl3"><A HREF="#l3">Listing Three</A>, for instance, just sends some silly text. Another application that has already opened the queue manager and queue for reading might then fetch the message back using <A NAME="rl4"><A HREF="#l4">Listing Four</A>.</p>

<p>The SoftWoehr class library for IBM MQSeries is available from <i>DDJ</i> (see "Resource Center," page 5) as well as IBM's MQSeries SupportPac page (http://www .ibm.com/software/ts/mqseries/txppacs/ txpsumm.html) as a Category 4 (third-party contribution), and from the SoftWoehr Home Page (http://www.well .com/user/ jax/SoftWoehr).</p>



<p><b>DDJ</b></p>
<H4><A NAME="l1">Listing One</H4>


<pre>#include "jaxmq.hpp"
using namespace SoftWoehr;
// ...
   /* A queue mgr to work with */
   MQQueueManager mq_queue_manager;
      /* Connect to our queue manager */
      try {
         mq_queue_manager.connect("MYQMGR");
         }
      /* Failed to open queue manager. */
      catch (MQQueueManager::FailedToConnectException &amp; ex) {
         cout &lt;&lt; "MQQueueManager::FailedToConnectException caught "
              &lt;&lt; "opening " &lt;&lt; queue_manager_name
              &lt;&lt;" ... Info follows:" &lt;&lt; endl;
         cout &lt;&lt; ex.get_text() &lt;&lt; endl;
         cout &lt;&lt; "Completion code : " &lt;&lt; ex.get_completion_code() &lt;&lt; endl;
         cout &lt;&lt; "Reason          : " &lt;&lt; ex.get_reason()          &lt;&lt; endl;
         }
      /* Failed to open queue manager. */
      catch (MQException &amp; ex) {
         cout &lt;&lt; "MQQueueManager::MQException caught "
              &lt;&lt; "opening " &lt;&lt; queue_manager_name
              &lt;&lt;" ... Info follows:" &lt;&lt; endl;
         cout &lt;&lt; ex.get_text() &lt;&lt; endl;
         }
      /* Announce success */
      cout &lt;&lt; "MQQueueManager "
           &lt;&lt; mq_queue_manager.get_name()
           &lt;&lt; " called MQCONN()."  &lt;&lt; endl;
      cout &lt;&lt; "Handle is now      : "
           &lt;&lt; mq_queue_manager.get_connection_handle()  &lt;&lt; endl;
      cout &lt;&lt; "Completion code is : "
           &lt;&lt; mq_queue_manager.get_completion_code()    &lt;&lt; endl;
      cout &lt;&lt; "Reason is          : "
           &lt;&lt; mq_queue_manager.get_reason()             &lt;&lt; endl;
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two</H4>


<pre>/* Open a queue */
try {
   MQObject::Options options ( MQObject::Options::open_input_shared
                             | MQObject::Options::open_output
                             )
                             ;
   mq_queue.open( mq_queue_manager
                , "APRICOT.QUEUE"
                , options
                )
                ;
   }

catch (MQQueue::FailedToOpenException &amp; ex) {
   cout &lt;&lt; "MQQueue::FailedToOpenException caught "
        &lt;&lt; "opening APRICOT.QUEUE"
        &lt;&lt; " ... Info follows:" &lt;&lt; endl;
   cout &lt;&lt; ex.get_text() &lt;&lt; endl;
   }
catch (MQException &amp;ey) {
   cout &lt;&lt; "MQException caught "
        &lt;&lt; "opening APRICOT.QUEUE"e
        &lt;&lt; " ... Info follows:" &lt;&lt; endl;
   cout &lt;&lt; ey.get_text() &lt;&lt; endl;
   }
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3">Listing Three</H4>


<pre> /* A message to put */
#define SILLY_MSG "This is the way we wash our queues!"
    MQMessage mq_message;
    mq_message.set_message(SILLY_MSG, strlen(SILLY_MSG) +1);
    try {
       /** Put a message */
       mq_queue.put(mq_message);
       }
    catch (MQObject::NotOpenedException &amp; noex)
      {
      cout &lt;&lt; "Exception caught putting message: " &lt;&lt; noex.get_text() &lt;&lt; endl;
      }
    catch (MQQueue::MessagePutException &amp; mpex)
      {
      cout &lt;&lt; "Exception caught putting message: " &lt;&lt; mpex.get_text() &lt;&lt; endl;
      cout &lt;&lt; "Condition code: " &lt;&lt; mpex.get_completion_code() &lt;&lt; endl;
      cout &lt;&lt; "Reason: "         &lt;&lt; mpex.get_reason() &lt;&lt; endl;
      }
</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>
<H4><A NAME="l4">Listing Four</H4>


<pre>/* Empty message to receive incoming. */
MQMessage mq_get_message;
try {
   /* The MQMessage can hold any practical length. Here's it just 
    * arbitrarily 1000 bytes max for our silly message.
    */
   mq_queue.get(mq_get_message, 1000);
   }
catch (MQObject::NotOpenedException &amp; nonoex)
   {
   cout &lt;&lt; "Exception caught getting message: " &lt;&lt; nonoex.get_text() &lt;&lt; endl;
   }
catch (MQQueue::MessageGetException &amp; mgex)
   {
   cout &lt;&lt; "Exception caught getting message: " &lt;&lt; mgex.get_text() &lt;&lt; endl;
   cout &lt;&lt; "Condition code: " &lt;&lt; mgex.get_completion_code() &lt;&lt; endl;
   cout &lt;&lt; "Reason: "         &lt;&lt; mgex.get_reason() &lt;&lt; endl;
   }
/* Print out the returned message */
cout &lt;&lt; "Returned message == '"
     &lt;&lt; mq_get_message.get_message()
     &lt;&lt;"'"
     &lt;&lt; endl;
</pre>
<P>
<A HREF="#rl4">Back to Article</A>
</P>


</body>
</html>
