<html>
<head>
<title>Aug00: DB Forms:  PHP, MySQL,  and PHPLIB</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>DB Forms:  PHP, MySQL,  and PHPLIB</h1>

<p><i>Dr. Dobb's Journal</i> August 2000</p>
<h2>A reusable database framework for  writing web apps</h2>

<h3>By Darryl Ross and Con Zymaris</h3>

<I>
Darryl is a senior web programmer, and Con the CEO of Cybersource, an open source IT company based in Melbourne, Australia. They can be contacted at djr@cyber.com.au and conz@cyber.com.au, respectively.</I>

<hr>

<p>PHP is a server-side web scripting system. Although initially developed by Rasmus Lerdorf, it is now maintained by a world-wide group of open-source coders. PHP is powerful enough to make Perl or C coders feel at home, yet it has a syntax simple enough for Visual Basic programmers to quickly get up to speed. In this article, we'll examine PHP, as well as the MySQL database engine and PHPLIB class framework. To illustrate how you use these tools, we'll then present DB Forms, a reusable database framework for writing web applications.</p>


<h3>PHP</h3>


<p>The PHP (http://www.php.net/) engine can be invoked as either a CGI-callable interpreter from supported UNIX platforms (its most common OS platform is Linux) and Windows NT, or as an in-process Apache module. PHP scripts, such as ASP or Java Server Pages, are embedded within HTML files served up by the web server. In turn, the embedded PHP code is executed by the PHP interpreter and any <i>printf()</i>s it writes are incorporated into the outgoing HTTP stream from web server to browser. Thus, with PHP, you develop applications that can be viewed by all HTML-capable browsers. </p>
<DDJADVERTISEMENT INLINE>


<p>PHP's syntax can be described as a cross between C, Perl, and shell, and by most accounts, is easier to learn than, say, ASP, Python, JSP, or Perl. It also has a wealth of functions -- over 700 and counting (see <A NAME="rt1"><A HREF="0008it1.htm">Table 1</A>). Like many scripting languages, PHP is typeless, and variable type is decided by the interpreter at run time. PHP also offers object- oriented capabilities. Classes can incorporate variables and functions, have constructors, and can be derived and extended. PHP's arrays are powerful, and can act as associative arrays (hash tables) and standard indexed arrays. PHP arrays also hold data of different types and can be nested to arbitrary levels. Thus, you can use them to build complex data structures (similar to a C <i>struct</i>). There are also numerous functions for manipulating arrays and stepping through the data.</p>

<p><A NAME="rl1"><A HREF="#l1">Listing One</A> is a typical PHP script. The HTML "baggage" can be removed to reveal the "active element" in the script, which is: </p>

<blockquote><p>
&lt;? echo "Hello World! (When you're on a 		         good thing...)"; ?&gt;</p>

</blockquote>

<p>As with other web-scripting systems embedded in HTML, PHP code needs to be clearly denoted to the interpreter. In this case, PHP scripts are enclosed within the <i>&lt;?</i> and <i>?&gt;</i> brackets, respectively. </p>

<p>PHP has extensive native support for most SQL databases (see <A NAME="rt2"><A HREF="0008it2.htm">Table 2</A>), as well as for all ODBC-compliant databases. PHP also offers persistent database connections, which reduce the overhead required to undertake database work. A connection to your database needs to be opened only once; this connection is then shared between the various PHP processes that handle the incoming web requests. Since many database authentication and handshake negotiations take time, this helps ensure timely data delivery to users. Further, the feature has been designed to be drop-in replaceable for nonpersistent connections, without substantial changes to your scripts.</p>

<p>PHP Version 4 provides numerous improvements over previous versions, the most important being (from the perspective of most users) the speed improvement in script execution delivered by the Zend (http://www.zend.com/) engine core within PHP4. Reports of speed increases of up to an order of magnitude have been seen for some scripts. Almost full compatibility is claimed by the PHP development group for existing scripts. On NT, PHP 4 supports integration with ActiveX/COM objects.</p>



<h3>MySQL</h3>


<p>The database most often used with PHP is MySQL (http://www.mysql.com/), which is popular for a number of reasons. MySQL is perhaps the fastest general-purpose SQL-enabled RDBMS. It is also easy to install and maintain. Of course, it does have some idiosyncrasies, such as a lack of transactions and database triggers. However, this is not as much a problem for web-based database work, where operations are considerably more atomic, and large volume batch transactions are rare. Another missing feature is referential integrity, which, again is not a major problem if the web database is well designed.</p>


<p>Unlike a pure open-source project, MySQL is accompanied by a variety of open and semiopen licenses. The MySQL developers seem to like the licensing model pioneered by Ghostscript author, L. Peter Deutsch, and follow a process of releasing older code under the GPL, while newer code is under a slightly more restrictive license targeting revenue generation from commercial bundling of MySQL.</p>

<p>There are multiple methods and tools available to help create and maintain MySQL databases and metadata. To illustrate, we'll use the default method of the interactive command tool, mysqladmin. For instance, <A NAME="re1"><A HREF="0008ie1.htm">Example 1</A>(a) creates a table, where the contents of example.sql would be listed in <A NAME="re1"><A HREF="0008ie1.htm">Example 1</A>(b). Alternatively, you could run the mysql command-line client and type in the SQL directly.</p>

<p>MySQL has a powerful (but unusual) method of user, host, and database privileges. MySQL removes the concept of user access rights, introduces "user@host" access rights, and lets you assign SELECT, INSERT, UPDATE, DELETE, as well as bulk-insert privileges through the LOAD DATA INFILE command. You can add users in two different ways: by using GRANT statements or manipulating the MySQL grant tables directly. The preferred method is to use GRANT statements, because they are more concise and less error prone.</p>

<p><A NAME="re2"><A HREF="0008ie2.htm">Example 2</A> shows how to create a user <i>webuser</i>, who has SELECT, DELETE, INSERT, and UPDATE privileges on the address table in the test database, using the password <i>testing</i>.</p>

<p>Once you can create and maintain MySQL databases, you can move on to web-based (phpMyAdmin) or GUI-based (for both UNIX and Windows) tools. But before you move to the easy path of GUI tools, consider the power and importance of being proficient with the command-line toolset. This provides you with substantial advantages, such as the ability to SSH(1) into a remotely hosted server to rebuild or repair a database, which may not have any GUI tools installed.</p>



<h3>PHPLIB and Web-  Application Development </h3>


<p>Much application development with PHP and MySQL is done through the accumulation of numerous small, often self-contained scripts, with each script corresponding to a web page of output or data input. The unifying axle of these scripts is the data repository, and classes are used to synchronize naming and function use for clarity, and to encourage code reuse. Thus, the schema of the underlying data forms almost a protocol of discussion throughout the gaggle of scripts. One positive point about this style of development is that you can focus on small, self-contained code units that are simple to understand and maintain and which, in turn, increase the likelihood of making them solid and reliable. This model also lends itself to clean application partitioning, possibly across several programmers.</p>


<p>Boris Erdmann and Kristian Kuhntopp found that there were a number of requirements that all web-based apps needed that the base level of PHP3 didn't provide. They therefore set about building these components by way of an elegant class framework and called it PHPLIB (http://phplib.netuse.de/). Therein, they built provision for database independence, user and session management, and global variables, thus overcoming the limitations of the stateless HTTP protocol. PHPLIB's extension of PHP's database access is playing to one of PHP core strengths. While PHP can natively access most RDBMSs, the API calls differ between the different databases. PHPLIB provides a class-based generic wrapper for the disparate PHP DB API calls; see <A NAME="rl2"><A HREF="#l2">Listing Two</A>.</p>



<h3>OOH Forms </h3>


<p>PHPLIB developers have also added other functionality such as object-oriented web-form elements. While many of us know how to create a web-based data entry form through the use of &lt;BUTTON&gt;- style markups, this isn't the coding style that programmers prefer. Through OOH forms, you can create web forms using object-oriented nomenclature that includes functionality such as text-entry validation based on powerful regular expression matching (see <A NAME="rl3"><A HREF="#l3">Listing Three</A>), which is much more programmer friendly than standard HTML element syntax.</p>


<p>As an example of constructing a reusable framework for future PHP web apps, we present DB Forms -- a collection of PHP classes used to help build web-based user interfaces for relational databases. (The complete source code and related files for DB Forms are available from <i>DDJ</i>, see "Resource Center," page 5, and at ftp://ftp.cyber.com.au/ pub/cybertel/cyborg/db_forms.tar.gz.) The classes have been designed to integrate with PHPLIB and use the PHPLIB database and OOH Form classes. To use DB Forms, you need to have PHP, MySQL, and PHPLIB installed; then you simply place the DB Forms classes in the PHPLIB include path. DB Forms comes with four main classes; see <A NAME="rt3"><A HREF="0008it3.htm">Table 3</A>. In essence, there are two sets of input and query classes -- one set of classes that uses the PHPLIB OOH forms functionality, and one that doesn't.</p>

<p>The class <i>DBF_Edit</i> generates queries to retrieve, save, and delete database records. <i>DBF_Edit</i> requires at least one key field that uniquely identifies a record. One field can be of type auto (increment), in which case it should be the primary key. The externally accessible instance variables for this class are in <A NAME="rt4"><A HREF="0008it4.htm">Table 4</A>.</p>

<p>The class <i>DBF_Query</i> generates a SELECT query based on fields from one or more tables. If multiple tables are used, then foreign keys need to be supplied to generate links between tables. The query is built from PHP variables of the same name as the database fields. Any empty PHP variables are ignored in the query. If all variables are empty, then the query will not be executed. A URL can be supplied, which creates a hyperlink in the first column of the tabulated output for each record found by the query. The values of the key fields will be appended to the URL query for each record. <A NAME="rt5"><A HREF="0008it5.htm">Table 5</A> lists the instance methods for this class. </p>

<p>The source files that constitute the DB Forms framework are all .inc include files. To use these in your PHP project, enter <i>include("dbf_edit.inc");</i> in the appropriate file into your source file. You can then instantiate objects from the class; see <A NAME="rl4"><A HREF="#l4">Listing Four</A>.</p>



<h3>Another Example </h3>


<p>In the next example of a data edit form, several standard constructs of PHP and PHPLIB are obvious. <A NAME="rl5"><A HREF="#l5">Listing Five</A>, the connection to the database, closely parallels the kinds of data that an ODBC connection string would require. Further down, past the function and class definitions, <A NAME="rl6"><A HREF="#l6">Listing Six</A> instantiates a database object of the type templated above. DB Forms works with the notion of there being a <i>primary_key</i>, which it uses to bind data updates to. This has to be explicitly pointed out to the <i>DBF_FormEdit</i> class, as in <A NAME="rl7"><A HREF="#l7">Listing Seven</A>, and from there, the fields can all be extracted from the database with code that looks like <A NAME="rl8"><A HREF="#l8">Listing Eight</A>.</p>


<p>Another point to note about this particular script is that it is used to both populate the data entry form and to accept the updated data and refresh the database table. It does this through the <i>if</i> switch in <A NAME="rl9"><A HREF="#l9">Listing Nine</A>.</p>



<h3>Conclusion</h3>


<p>We've presented the first step to building a generic web-based data-access system. It seems most plausible to take this part of a core end-user database system, couple it with a web-based table and index creation system (one exists in the phpMyAdmin project), and make a fully fledged but simple clone of Microsoft Access -- all web-based and built upon open and free tools.</p>


<p>As more and more focus is placed on the web-based application-service provider (ASP) model of application deployment, tools such as PHP and MySQL are going to become more popular. And since they are open source, you can be assured of their longevity. Finally, they are perhaps the easiest serious web tools to learn and are a great way into the web-app development paradigm. </p>



<p><b>DDJ</b></p>
<H4><A NAME="l1">Listing One</H4>


<pre>&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;My First PHP Script&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;? echo "Hello World! (When you're on a good thing...)"; ?&gt;
    &lt;/body&gt;
&lt;/html&gt;  
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two</H4>


<pre>&lt;?php
  # Include the class to handle database connections and queries (from PHPLIB)
  include("db_mysql.inc");
  # Extend the database class and overide the connection parameters
  class DB_Example extends DB_Sql {
    var $Host     = "localhost";              
    var $Database = "test";            
    var $User     = "webuser";                  
    var $Password = "testing";                     
  }
  $db = new DB_Example;
  $db-&gt;query("SELECT * FROM address");
  while ($db-&gt;next_record()) {
    printf("%s %s&lt;br&gt;\n", $db-&gt;f("name"), $db-&gt;f("phone"));
  }
?&gt;
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3">Listing Three</H4>


<pre>&lt;?php  
  require("oohforms.inc");         # include the library
  $f = new form;                   # create a form object
  # set up form elements
  $f-&gt;add_element(array("type"=&gt;"text", "name"=&gt;"foo", 
                        "valid_regex"=&gt;"^[a-z]*$",
                        "valid_e"=&gt;"Letters only", "icase"=&gt;1, 
                        "value"=&gt;"bar"));     
  $f-&gt;add_element(array("type"=&gt;"submit", "name"=&gt;"submitname"));
  if ($submitname)                 # Is there data to process?
    if ($err = $f-&gt;validate()) {   # Is the data valid?
      echo $err;                   # No; Display error
      $f-&gt;load_defaults();         # Load form with submitted data
    }  
    else {
      printf("&lt;b&gt;%s&lt;/b&gt;&lt;br&gt;\n", $foo);         # Data ok; Do something with it
    }
  $f-&gt;start("example");                        # Start displaying form
  # Show elements
  $f-&gt;show_element("foo");    
  $f-&gt;show_element("submitname", "submit");    # Show elements
  $f-&gt;finish();                     # Finish form
?&gt;
</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>
<H4><A NAME="l4">Listing Four</H4>


<pre>&lt;?php
  # Include the class to handle database connections and queries (from PHPLIB)
  include("db_mysql.inc");
  # Include the DBF_FormEdit class
  include("dbf_form.inc");
  include("dbf_form_edit.inc");

  # Extend the database class and overide the connection parameters
  class DB_Example extends DB_Sql {
    var $Host     = "localhost";              
    var $Database = "test";            
    var $User     = "webuser";                  
    var $Password = "testing";                     
  }
  # Extend the DBF edit class and overide the database class
  class DBE_Example extends DBF_Edit {
    var $database_class = "DB_Example";
  }
  # Extend the DBF form edit class
  class DBF_Example extends DBF_FormEdit {
    var $dbf_edit_class = "DBE_Example";    # Which dbf_edit class to use
  }  
  # Create an instance of the DBF edit class
  $dbf = new DBF_Example;
  $dbf-&gt;init(); # set up the DBF_FormEdit object

  # Add table and the primary key
  $dbf-&gt;add_table(array("name"=&gt;"address", "key"=&gt;array("name")));

  # Add fields
  $dbf-&gt;add_field(array("type"=&gt;"text","name"=&gt;"name"));
  $dbf-&gt;add_field(array("type"=&gt;"text","name"=&gt;"address"));
  $dbf-&gt;add_field(array("type"=&gt;"text","name"=&gt;"city"));
  $dbf-&gt;add_field(array("type"=&gt;"text","name"=&gt;"state"));
  $dbf-&gt;add_field(array("type"=&gt;"text","name"=&gt;"postcode"));
  $dbf-&gt;add_field(array("type"=&gt;"text","name"=&gt;"phone"));
  $dbf-&gt;add_field(array("type"=&gt;"text","name"=&gt;"email"));

  # Add a form element
  $dbf-&gt;add_element(array("type"=&gt;"submit","name"=&gt;"submit"));
  $dbf-&gt;add_element(array("type"=&gt;"submit","name"=&gt;"delete"));

  print("&lt;html&gt;\n");
  print("  &lt;body&gt;\n");

  if ($submit) { # Check if there was a submission 
    # Save the form data to the database table
    $dbf-&gt;save();
  }
  else if ($delete) {
    # delete the record from the database 
    $dbf-&gt;delete();
  }
  else {
    # Load form data with data from the database table
    # Requires the primary key field(s) to have valid values
    # Calls DBF_Edit load_defaults()
    $dbf-&gt;dbf_load_defaults(); 
  }
  # Calls form load_defaults(), this will load defaults for all for elements.
  $dbf-&gt;load_defaults(); 

  $dbf-&gt;start();
  $dbf-&gt;dbf_show_elements();
  $dbf-&gt;show_element("submit","Save");
  $dbf-&gt;show_element("delete","Delete");
  $dbf-&gt;finish();
  print("  &lt;/body&gt;\n");
  print("&lt;/html&gt;\n");
?&gt;
</pre>
<P>
<A HREF="#rl4">Back to Article</A>
</P>
<H4><A NAME="l5">Listing Five</H4>


<pre># Extend the database class and overide the connection parameters
class DB_Example extends DB_Sql {
  var $Host     = "localhost";              
  var $Database = "test";            
  var $User     = "webuser";                  
  var $Password = "testing";                     
}
</pre>
<P>
<A HREF="#rl5">Back to Article</A>
</P>
<H4><A NAME="l6">Listing Six</H4>


<pre># Create an instance of the DBF edit class
$dbf = new DBF_Example;
$dbf-&gt;init(); # set up the DBF_FormEdit object  
</pre>
<P>
<A HREF="#rl6">Back to Article</A>
</P>
<H4><A NAME="l7">Listing Seven</H4>


<pre># Add table and the primary key
$dbf-&gt;add_table(array("name"=&gt;"address", "key"=&gt;array("name")));
</pre>
<P>
<A HREF="#rl7">Back to Article</A>
</P>
<H4><A NAME="l8">Listing Eight</H4>


<pre># Add fields
$dbf-&gt;add_field(array("type"=&gt;"text","name"=&gt;"name"));
$dbf-&gt;add_field(array("type"=&gt;"text","name"=&gt;"address"));
  ...
</pre>
<P>
<A HREF="#rl8">Back to Article</A>
</P>
<H4><A NAME="l9">Listing Nine</H4>


<pre>if ($submit) { # Check if there was a submission 
  # Save the form data to the database table
  $dbf-&gt;save();
}
else if ($delete) {
  # delete the record from the database 
  $dbf-&gt;delete();
}
else {
  # Load form data with data from the database table
  # Requires the primary key field(s) to have valid values
  # Calls DBF_Edit load_defaults()
  $dbf-&gt;dbf_load_defaults(); 
}</pre>
<P>
<A HREF="#rl9">Back to Article</A>
</P>


</body>
</html>
