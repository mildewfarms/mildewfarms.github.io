<html>
<head>
<title>Aug00: Triangle  Intersection Tests</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Triangle Intersection Tests</h1>

<p><i>Dr. Dobb's Journal</i> August 2000</p>
<h2>Where does that point lie?</h2>

<h3>By Eric Haines and Tomas Moller </h3>

<I>
Eric and Tomas are the authors of Real-Time Rendering (A.K. Peters, 1999). They both can be contacted at http:// www.realtimerendering.com/.</I>

<hr>

<p>An important and commonly performed operation is testing whether a point is inside a triangle. In this article, we will discuss 2D and 3D cases of this operation and present methods that also give a measure of the point's location relative to the triangles edges and vertices. </p>


<h3>2D Point-Triangle Test</h3>


<p>A classic method of testing whether a point is inside a triangle, defined by three points, <i>p</i><sub>0</sub>, <i>p</i><sub>1</sub>, and <i>p</i><sub>2</sub>, is to send an imaginary ray from the point outwards to infinity. If this test ray crosses an odd number of edges, the point is inside the triangle. This test also works for polygons or any closed-curve figure. However, since this algorithm has been examined many times before (see "Point in Polygon Strategies," by Eric Haines in <i>Graphics Gems IV</i>, edited by Paul S. Heckbert, AP Professional, 1994, http://www.acm.org/tog/GraphicsGems/; and <i>Real-Time Rendering</i>, by Tomas Moller and Eric Haines, A.K. Peters, 1999), we will focus on a comparable method that has some additional useful features.</p>
<DDJADVERTISEMENT INLINE>


<p>The algorithm we'll discuss here is based on using barycentric coordinates. A point, <i>(u,v)</i>, on a triangle is given by the explicit formula <i>i(u,v)=(1-u-v)p</i><sub>0</sub><i>+ up</i><sub>1</sub><i>+vp</i><sub>2</sub>, where <i>(u,v)</i> are the barycentric coordinates, which must fulfill <i>u</i><img src="gteq.gif">0, <i>v</i><img src="gteq.gif">0, and <i>u+v</i><img src="lteq12.gif">1. That is, <i>u</i> or <i>v</i> is the amount by which to weigh the corresponding vertex's contribution to a particular location, with <i>(1-u-v)</i> being the weight for the third vertex. <A NAME="rf1"></a><A HREF="0008bf1.htm">Figure 1</A> shows the coordinate system in terms of <i>u</i> and <i>v</i>. Note that <i>(u,v)</i> can be used for texture mapping, normal interpolation, color interpolation, and so on.</p>

<p>To test whether a point is inside a triangle is straightforward. If the point fulfills the conditions just given, then it must be inside the triangle. But how do you determine <i>u</i> and <i>v</i>? The answer is to transform the test point into a coordinate system based on the axes defined by the <i>u</i> and <i>v</i> values. <A NAME="re1"></a><A HREF="0008be1.htm">Example 1</A> is pseudocode for testing some point <i>i</i> for inclusion in a triangle. </p>

<p>For simplicity of presentation, intermediate results are all computed at the start of <A NAME="re1"></a><A HREF="0008be1.htm">Example 1</A>, in steps 1-3. In the actual code, these are computed only as needed. Step 4 tests whether <i>p</i><sub>0</sub> and <i>p</i><sub>1</sub> have the same x-coordinate (a possibly common case). Step 5 checks if all three x-coordinates are the same; if so, the triangle has no area. Steps 7 and 10 check if <i>u</i> and <i>v</i> are in bounds. The <i>u</i>=1 test in step 7 is not strictly necessary, but often quickly helps classify points as being outside the triangle with little additional work. Our goal is to exit the routine as soon as possible to avoid additional computations. Steps 12 through 17 are for computing the common case, and involve a little more computation. Step 18 checks the third edge of the triangle against the test point. Steps 5, 8, and 13 test if the triangle has zero area; testing for closeness to zero with some very small number <img src="e12.gif"> may be preferable for robustness.</p>

<p>For a full derivation of the math involved in deriving this algorithm, see Didier Badouel's presentation, "An Efficient Ray-Polygon Intersection" and <i>Graphics Gems</i>, edited by Andrew S. Glassner, Academic Press, 1990, http:// www.acm.org/ tog/GraphicsGems/. The code presented here is a more efficient version of Badouel's.</p>



<h3>3D Ray-Triangle Test</h3>


<p>A common method of testing whether a ray intersects a triangle is to intersect the ray with the plane the triangle defines, then determine whether the point of intersection within the plane is inside the triangle (see "Essential Ray Tracing Algorithms," by Eric Haines in <i>An Introduction to Ray Tracing</i>, edited by Andrew Glassner, Academic Press, 1989, http:// www.education.siggraph.org/materials/ HyperGraph/raytrace/rtinter0.htm). This second step is done by dropping one of the three coordinates of the vertices and point involved, thereby turning this into a 2D problem, which we solved in the previous section. (This algorithm was first presented by Moller and Trumbore in "Fast, Minimum Storage Ray-Triangle Intersection," <i>Journal of Graphics Tools</i>, 2(1), 1997.) There is a more elegant solution, however, which has the added advantage of not needing to precompute and store the plane's normal. In addition, barycentric coordinates are generated for the intersection point. </p>


<p>To compute the intersection between a ray and a triangle in three dimensions using this newer method, we need to review a little linear algebra. Assume that we have three vectors, <i>m</i><sub>0</sub>, <i>m</i><sub>1</sub>, and <i>m</i><sub>2</sub>, that make up a basis (a frame of reference). To transform the vectors of this basis so that they become mutually perpendicular and align with the x-, y- and z-axes, we first form a matrix <i>M=(m<sub>0</sub> m<sub>1</sub> m<sub>2</sub>)</i>, where the basis vectors thus form columns in the matrix. Then the inverse of this matrix can be used to transform as we wanted. Essentially, this is just how the multiplication of a matrix by its inverse (where the result of the multiplication is equal to the identity matrix) is interpreted geometrically. A fine thing about this property is that it works as long as the vectors do not all lie in the same plane. The basis transform is illustrated in <A NAME="rf2"></a><A HREF="0008bf2.htm">Figure 2</A>.</p>

<p>Now to the problem that we want to solve. We have a triangle defined by three points: <i>p</i><sub>0</sub>, <i>p</i><sub>1</sub>, and <i>p</i><sub>2</sub> (in counter-clockwise order if seen from the front), and we have a ray <i>r(t)=o+td</i>, where <i>o</i> is the origin of the ray, <i>d</i> is the normalized direction vector of the ray, and <i>t</i> is the parameter of the ray equation (that is, the distance along the ray). This situation is illustrated in the upper left of <A NAME="rf3"></a><A HREF="0008bf3.htm">Figure 3</A>. The task is to compute whether the ray intersects the triangle, and if so, also compute the distance to the intersection point and the barycentric coordinates of it.</p>

<p>To solve this problem we first translate the triangle vertices and the ray by -<i>p<sub>0</sub></i> so that the first triangle vertex (<i>p<sub>0</sub></i>) is at the origin. This is depicted in the upper right of <A NAME="rf3"></a><A HREF="0008bf3.htm">Figure 3</A>. Now we form a basis from <i>-d</i>, <i>p<sub>1</sub></i>-<i>p<sub>0</sub></i>, and <i>p<sub>2</sub></i>-<i>p<sub>0</sub></i>, and transform the translated origin, <i>o</i>-<i>p<sub>0</sub></i>, with the inverse of that matrix. This is shown in the lower left of <A NAME="rf3"></a><A HREF="0008bf3.htm">Figure 3</A> and in <A NAME="re2"></a><A HREF="0008be2.htm">Example 2</A>. </p>

<p>So now we only have to interpret what the resulting vector <i>w</i> is. Looking at the lower right of <A NAME="rf3"></a><A HREF="0008bf3.htm">Figure 3</A>, this is quite simple. The x-component of <i>w</i> is the positive distance from the ray origin to the front facing triangle, which means that it is actually the value of the <i>t</i> parameter of the ray equation. The y- and the z-components of <i>w</i> are the barycentric coordinates for the intersection point; that is, it must hold that <i>w<sub>y</sub></i><img src="gteq.gif">0, <i>w<sub>z</sub></i><img src="gteq.gif">0, and <i>w<sub>y</sub></i>+<i>w<sub>z</sub></i><img src="lteq12.gif">1 if the intersection point is to be inside the triangle. <i>w<sub>y</sub></i> and <i>w<sub>z</sub></i> are denoted here instead as <i>u</i> and <i>v</i>. This means that <i>w</i>=(<i>t,u,v</i>)<sup><i>T</i></sup>, where <i>t</i> is the distance to the intersection point, and <i>(u,v)</i> are the barycentric coordinates of the intersection.</p>

<p>At this point you might argue that this is all very well in theory, but solving <A NAME="re2"></a><A HREF="0008be2.htm">Example 2</A> involves the inversion of a 3X3 matrix, which is not considered a fast operation. However, it turns out that there are many factors that can be reused if the matrix is solved with Cramer's rule for matrix inversion. If we denote <i>e</i><sub>1</sub>=<i>p</i><sub>1</sub>-<i>p</i><sub>0</sub>, <i>e</i><sub>2</sub>=<i>p</i><sub>2</sub>-<i>p</i><sub>0</sub>, and <i>s</i>=<i>o</i>-<i>p</i><sub>0</sub>, then the solution to <A NAME="re2"></a><A HREF="0008be2.htm">Example 2</A> is in <A NAME="re3"></a><A HREF="0008be3.htm">Example 3</A>, where <i>det()</i> is the determinant of three vectors. Knowing that <i>det(a,b,c)=(a</i>X <i>b)<img src="dot12.gif" width="6" height="9" align="baseline">c=-(a</i>X <i>c)<img src="dot12.gif" width="6" height="9" align="baseline">b-(c</i>X <i>b)<img src="dot12.gif" width="6" height="9" align="baseline">a</i>, <A NAME="re3"></a><A HREF="0008be3.htm">Example 3</A> is restructured as in <A NAME="re4"></a><A HREF="0008be4.htm">Example 4</A>, where <i>r=d</i>X <i>e</i><sub>2</sub> and <i>q=s</i>X <i>e</i><sub>1</sub>. This last expression is what we need in order to make an efficient implementation of the ray-triangle intersection test. Recall that it is important to jump out of the code as soon as we can find out that we do not have an intersection. So the main idea of the code is to compute a value, check if it is within its valid bounds, continue if it is, and otherwise exit.</p>

<p>Before showing the pseudocode, we will present a few more optimizations. First, if we care only about intersecting front-facing triangles, we can test if the determinant is less than a very small number, <img src="e12.gif">. If it is, then exit, since a negative determinant means that the basis is negatively oriented, which in turn means that the ray hits the back face of the triangle. On some modern CPU architectures, division is done in parallel with other operations, so dividing early and using the result much later can be advantageous.</p>

<p>When we care about both front- and back-facing triangles, we can do the division quite early in the code, but use its result as late as possible -- hoping that the division is computed by then; see <A NAME="re5"></a><A HREF="0008be5.htm">Example 5</A>.</p>

<p>Lines 1 and 2 compute two of the edges of the triangle, while lines 3 and 4 compute the determinant <i>a</i>. Line 5 computes the difference between the ray origin and the first triangle vertex. The inverse of the determinant <i>f</i> is computed at line 6. This division usually takes many cycles, but because we only need its result at lines 23-25 (if we reach that point in the code), we may hope that it is finished or at least close to finished at that point. This turned out to be about 5-10 percent faster than the original implementation, but this depends on the CPU architecture and on the percentage of intersections. Line 7 computes <i>q,</i> which later is used to compute <i>v</i>. What follows at line 8 is a test on the determinant, and if that branch is taken the triangle is front facing. The <i>else</i> branch is taken for a negative determinant (back-facing triangle), and thus we have changed from less than to greater than and vice versa in the inner <i>if</i> statements. At line 22 we know that the determinant was close to zero, and thus the triangle was close to or parallel to the ray direction. If we have not exited from the code, lines 23-25 compute the final result <i>(t,u,v)</i>. All that is needed to get the values of <i>u</i> and <i>v</i> at this point is to multiply with the inverse of the determinant.</p>

<p>The source code is available electronically; see "Resource Center," page 5. Some lines can be swapped without altering the final result, but your CPU architecture may favor a certain order.</p>



<h3>Further Reading and Resources</h3>


<p>In <i>Real-Time Rendering</i> (A.K. Peters, 1999), we describe related tests in more detail. The book covers a wide variety of other intersection tests and methods; see http://realtimerendering.com/. For code for other intersection tests, we recommend visiting the Graphics Gems web site at http://www.acm.org/tog/GraphicsGems/ and Magic software at http://www.magic- software.com/.</p>


<p></p>


<p><b>DDJ</b></p>
</body>
</html>
