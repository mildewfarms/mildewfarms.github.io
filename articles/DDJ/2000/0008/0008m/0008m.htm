<html>
<head>
<title>Aug00: Java Q&A</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>What's Object  Pooling All About?</h1>

<p><i>Dr. Dobb's Journal</i> August 2000</p>

<h3>By Alexandre Sieira Vilar</h3>

<I>
Alexandre is a computer engineering student at PUC-Rio in Brazil. He can be contacted at asv@tecgraf.puc-rio.br.</I>

<hr>

<p>In languages such as C and C++, object allocation and deallocation can be either implicit or explicit (see <A NAME="rl1"></a><A HREF="#l1">Listing One</A>). Allocation and deallocation occur implicitly when objects are declared as local variables in C++ functions. The compiler is then responsible for allocating the object, and also for deallocating it when the function returns. Explicit allocation and deallocation use the <i>new </i>and <i>delete</i> operators.</p>
<p>Java, on the other hand, has only one object allocation and deallocation policy. Objects are created explicitly with the <i>new </i>operator, but there is no corresponding <i>delete</i> operator. The release of unused memory always occurs implicitly. An object is deleted only when the garbage collector detects that there are no references to it.</p>
<DDJADVERTISEMENT INLINE>

<p>Each of the two approaches has pros and cons. The two C++ approaches allow for more flexibility and tighter memory control. On the other hand, practice shows that lots of discipline and experience is necessary to avoid problems such as memory leaks and pointers to unallocated regions of memory.</p>

<p>Garbage collection solves the aforementioned problems. On the downside, garbage-collected languages have a tendency to use more memory, on average, than languages that allow explicit deallocation. Another disadvantage is that the execution of the garbage collector introduces random pauses during the lifetime of applications.</p>

<p>The typical Java application simply uses all the memory available in its heap until no more allocations can be made. At that point, the Java run time executes the garbage collector to free as much memory as possible. If not enough memory is obtained to honor the allocation request, the heap size is increased.</p>

<p>The execution time of the garbage collector is directly proportional to the number of currently allocated objects in the heap. During garbage collection, the application is completely frozen. In addition, applications in which precise timing plays an important role, such as multimedia or real-time programs, suffer greatly from the unpredictable pauses introduced by garbage collection. Applications that keep data structures with a large number of allocated objects in memory are slowed down, as the garbage collector takes a long time to walk the heap on each execution.</p>



<h3>Object Pools</h3>


<p>The use of object pools in Java aims to reduce the number of garbage-collection runs during the lifetime of a Java application.</p>


<p>There are several classes in the Java standard library and on most applications with objects that could be reused instead of left in the heap waiting for the garbage collector. Two examples are <i>java.awt.geom .Point2D.Double</i> and <i>java.awt.geom.Rectangle2D.Double</i>.</p>

<p>Consider the two Java methods in <A NAME="rl2"></a><A HREF="#l2">Listing Two</A>. The <i>readRectangle</i> method allocates two temporary instances of the <i>Point2D.Double</i> class that will never be used outside the scope of the function. Every time the <i>readRectangle</i> method is called, it will add two unused objects to the heap, which will eventually become full. This will force the Java Runtime to execute the garbage collector.</p>

<p>Now imagine that the same two instances were used in every execution of the method, as in <A NAME="rl3"></a><A HREF="#l3">Listing Three</A>. This would prevent the method from contributing to the execution of the garbage collector. On the other hand, if the <i>readRectangle</i> method is rarely or never used, you would have two unused points in memory for every instance of <i>GeomParser</i>. A single, centralized pool of reusable objects would solve the problem much more efficiently.</p>



<h3>The tecgraf.objpool Package</h3>


<p>My proposed solution to these problems is the <i>ObjectPool</i> class, contained in the tecgraf.objpool package (available electronically; see "Resource Center," page 5). It is a centralized, thread-safe repository of reusable objects of any class.</p>


<p>Unlike most object pool implementations, <i>ObjectPool</i> can be extended to handle all the classes you need. Most implementations force you to keep a different pool for each class you want to manage, which is unwieldy.</p>

<p>Internally, each pooled class has its own manager, which is a subclass of <i>ClassManager</i>. The class manager keeps a list of available objects, and uses those objects in reply to allocation requests. If an allocation is requested and the list is empty, a new instance is created by calling the abstract <i>newInstance</i> method. This new object is then used to fulfill the request. Released objects are simply added to the list of available objects.</p>

<p><A NAME="rl5"></a><A HREF="#l5">Listing Five</A> is an example class manager for the <i>java.awt.geom.Point2D.Double</i> class. It implements the <i>newInstance</i> method to return a newly allocated instance of <i>java.awt.geom.Point2D.Double</i>.</p>

<p>It it not necessary, though, to create new subclasses of <i>ClassManager</i> for every class handled by <i>ObjectPool</i>. There is a good portion of reusable classes that provide constructors with no parameters, also called "default constructors." For those classes, the <i>ReflectionClassManager</i> provides a working implementation of the <i>newInstance</i> method.</p>

<p>If the constructor desired for instantiating the class has one or more parameters, it can still be used by providing the parameter types and values to <i>ReflectionClassManager</i>, allowing for even more flexibility.</p>

<p>When an allocation request is issued, <i>ObjectPool</i> checks if a <i>ClassManager</i> is installed for the given class name. If none is found, a new <i>ReflectionClassManager</i> will be automatically installed, based on the assumption that the class has a constructor with no parameters.</p>



<h3>Performance  Evaluation</h3>


<p><A NAME="rf1"></a><A HREF="0008mf1.htm">Figure 1</A> shows the compared memory usage along the execution of the same test program when <i>ObjectPool</i> and <i>new</i> are used for memory allocation. It is clear that, in this test scenario, the use of the object pool prevented all executions of the garbage collector, keeping a uniform memory usage during the lifetime of the program. The test program used for the gathering of this data executes a function that allocates four temporary objects and then releases them, such as the <i>readRectangle</i> example in <A NAME="rl1"></a><A HREF="#l1">Listings One</A> and <A NAME="rl4"></a><A HREF="#l4">Four</A>.</p>


<p>Allocating and releasing objects in <i>ObjectPool</i> are both O(1) operations. The objects are used in a LIFO (last in, first out) order, as if in a stack. The principle of locality mandates that the last object added to the free list is probably the most recently used one as well. In practical terms, this means it is more likely to be on cache memory and less likely to be on secondary storage (swap area). It is only logical, then, to use that object first for the sake of performance.</p>

<p>Calling <i>ObjectPool.allocate</i> and <i>ObjectPool.release</i> is only slightly slower than using <i>new</i> by a constant factor. This difference, as measured in the test machines, is in the order of 0.1 milliseconds per allocation. This delay is due to the fact that <i>new</i> is implemented directly by the Java Runtime, in optimized native code, as opposed to a Java class. Applications negatively affected by the garbage collector executions, however, will find that using <i>ObjectPool</i> will more than make up for this difference.</p>

<p>One weakness of the <i>ObjectPool</i> class is that, when a large number of threads are performing simultaneous memory allocations of the same class, there is a serious delay due to monitor contention on the <i>ClassManager</i> instance. The mapping of class names to <i>ClassManager</i> instances, implemented as a <i>java.util.HashMap</i> in <i>ObjectPool</i>, is another major source of monitor contention. <A NAME="rf2"></a><A HREF="0008mf2.htm">Figure 2</A> shows a comparison of the execution time of the test application when an increasing number of threads is used, with <i>ObjectPool</i> and <i>new</i>.</p>

<p>The test in <A NAME="rf2"></a><A HREF="0008mf2.htm">Figure 2</A> shows a weakness in the synchronization instance returned by <i>java.util.Collections.synchronizedMap_it</i> only allows one thread to access the map at a time. The vast majority of accesses to the map in <i>ObjectPool</i> are read accesses, which could be performed in parallel. Because the synchronization is based on mutual exclusion, there is a serious performance penalty as the number of threads increases.</p>

<p>It must be taken into consideration, however, that the threads used for this test spent practically all of their time allocating and releasing objects of the same class, which contributed to a somewhat unrealistic worst-case scenario. In a real-life application, the threads would spend most of their time doing their actual work, so the chance of two threads trying to allocate or release objects simultaneously would drop considerably.</p>

<p><A NAME="rf3"></a><A HREF="0008mf3.htm">Figures 3</A> and <A NAME="rf4"></a><A HREF="0008mf4.htm">4</A> compare the average and peak memory usages for an increasing number of threads when using <i>ObjectPool</i> and <i>new</i>. This comparison lets you confirm that the number of threads does not affect the benefits of reduced memory usage brought by object pooling.</p>



<h3>Conclusion</h3>


<p>Object pooling can be used very effectively to reduce the number of garbage collection executions in a Java application. This reduction may bring benefits in terms of reduced processor usage and the absence of the unpredictable delays introduced by garbage collection. Object pooling can also lower the average memory usage of an application.</p>


<p>On the other hand, object pools can bring to Java the classic problem of continuing to reference a released object. This forces the programmer to be more careful and thus nullifies one of the benefits of garbage collection for the sake of performance.</p>





<p><b>DDJ</b></p>
<H4><A NAME="l1"></a>Listing One</H4>


<pre>class A {
   public:
          int i;
};
// Implicit memory allocation and deallocation.
void function1 ()
{
          A a;
          a.i = 0;
}
// Explicit memory allocation and deallocation.
void function2 ()
{
          A *a = new A();
          a-&gt;i = 0;
          delete a;
}
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2"></a>Listing Two</H4>


<pre>import java.io.*;
import java.awt.geom.*;

public class GeomParser
{
          // Reads a point from the given input stream and stores it in
          // parameter 'pt'.
          public void readPoint( DataInputStream dis, Point2D pt )
          {
                    double x, y;
                    x = dis.readDouble();
                    y = dis.readDouble();
                    pt.setLocation(x, y);
          }
          // Reads a rectangle from the given input stream and stores it in
          // parameter 'rect'.
          public void readRectangle( DataInputStream dis, Rectangle2D rect )
          {
                    Point2D p1 = new Point2D.Double(),
                             p2 = new Point2D.Double();
                    readPoint(dis, p1);
                    readPoint(dis, p2);

                    rect.setRect(0.0, 0.0, 0.0, 0.0);
                    rect.add(p1);
                    rect.add(p2);
          }
}

</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3"></a>Listing Three</H4>


<pre>import java.io.*;
import java.awt.geom.*;

public class GeomParser
{
          Point2D p1 = new Point2D.Double();
          Point2D p2 = new Point2D.Double();

          // Reads a point from the given input stream and stores it in
          // parameter 'pt'.
          public void readPoint( DataInputStream dis, Point2D pt )
          {
                    double x, y;
                    x = dis.readDouble();
                    y = dis.readDouble();
                    pt.setLocation(x, y);
          }
          // Reads a rectangle from the given input stream and stores it in
          // parameter 'rect'.
          // Method has to be made synchronized to avoid thread contention
          // over objects 'p1' and 'p2'.
          public synchronized void readRectangle( DataInputStream dis, 
                                                           Rectangle2D rect )
          {
                    readPoint(dis, p1);
                    readPoint(dis, p2);

                    rect.setRect(0.0, 0.0, 0.0, 0.0);
                    rect.add(p1);
                    rect.add(p2);
          }
}

</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>
<H4><A NAME="l4"></a>Listing Four</H4>


<pre>import java.io.*;
import java.awt.geom.*;

public class GeomParser
{
          // Reads a point from the given input stream and stores it in
          // parameter 'pt'.
          public void readPoint( DataInputStream dis, Point2D pt )
          {
                    double x, y;
                    x = dis.readDouble();
                    y = dis.readDouble();
                    pt.setLocation(x, y);
          }
          // Reads a rectangle from the given input stream and stores it in
          // parameter 'rect'.
          public void readRectangle( DataInputStream dis, Rectangle2D rect )
          {
                    Point2D p1, p2;
                    // Obtain instances from object pool.
                    p1 = (Point2D) 
                         ObjectPool.allocate("java.awt.geom.Point2D$Double"),
                    p2 = (Point2D) 
                         ObjectPool.allocate("java.awt.geom.Point2D$Double");
                    readPoint(dis, p1);
                    readPoint(dis, p2);

                    rect.setRect(0.0, 0.0, 0.0, 0.0);
                    rect.add(p1);
                    rect.add(p2);

                    // Objects are no longer needed, release them.
                    ObjectPool.release(p1);
                    ObjectPool.release(p2);
          }
}
</pre>
<P>
<A HREF="#rl4">Back to Article</A>
</P>
<H4><A NAME="l5"></a>Listing Five</H4>


<pre>import java.awt.geom.*;
import tecgraf.objpool.*;

public final class Point2D_Double_ClassManager
extends ClassManager
{
          private Point2D_Double_ClassManager()
          {
                    super();
          }
          public Object newInstance()
          {
                    return new Point2D.Double();
          }
          static {
                    // Installs class manager for java.awt.geom.Point2D.Double
                    ObjectPool.setClassManager(
                             "java.awt.geom.Point2D$Double",
                             new Point2D_Double_ClassManager()
                    );
          }
}

</pre>
<P>
<A HREF="#rl5">Back to Article</A>
</P>


</body>
</html>
