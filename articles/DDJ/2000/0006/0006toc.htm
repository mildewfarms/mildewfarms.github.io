<html><head><title>Jun00: Table of Contents</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>DDJ, June 2000 -- Object-Oriented Design </h1><p></p><hr><img src="cover.gif" width="120" height="158" align="right" border="1"><h2>FEATURES </h2><h3><a href="0006a/0006a.htm">THE METIS DESIGN METHODOLOGY</a></h3><h4>by C&eacute;sar A. Gonzalez Perez and Pablo Criado Boado </h4><p>Metis is an object-oriented development methodology that includes all the usual tasks found in a  generic software project lifecycle.</p><h3><a href="0006b/0006b.htm">OPEN SOURCE MEETS BIG IRON</a></h3><h4>by Pete Beckman and Gregory V. Wilson</h4><p>The aim of the Software Carpentry project is to create a new generation of easy-to-use software engineering tools, and to document those tools and the working practices they are meant to support. </p><h3><a href="0006c/0006c.htm">STATE PATTERNS &amp; C++</a></h3><h4>by Julian Macri</h4><p>In object-oriented design, objects can modify their behavior based on the current state of their attributes. State patterns abstract the ability for an object to change its behavior. Julian presents  two ways the State design pattern can be implemented in C++.</p><h3><a href="0006d/0006d.htm">XML, REFLECTIVE PATTERN MATCHING, AND JAVA</a></h3><h4>by Andrew Dwelly</h4><p>Although the pattern matching available in Hex, the program Andrew presents here, is relatively  simple, it is still powerful enough to perform sophisticated XML document processing. </p><h3><a href="0006e/0006e.htm">AN OBJECT-ORIENTED UI FOR PERL</a></h3><h4>by Robert Kiesling</h4><p>If you work with object-oriented languages, you are likely accustomed to user-interface objects  that highlight the object-oriented features of a language's internal structures. Robert shows one  way Perl's features can contribute to its usefulness in object-oriented projects.</p><h3><a href="0006f/0006f.htm">WIN32 VERSION CONTROL</a></h3><h4>by Ping Ni and Mark Nelson</h4><p>Faced with the problems created by scattered development teams, distributed objects, and  dozens of DLLs and executables, Ping and Mark turned to Perl and C++ to give some muscle to the Visual Source Safe source-code version control system.</p><h3><a href="0006g/0006g.htm">OBJECT-ORIENTED DESIGN IN PROCEDURAL ENVIRONMENTS</a></h3><h4>by Thomas E. Davis</h4><p>Tom shows how you can apply some of the inherent cleanliness of object-oriented design to your procedural language projects. To illustrate, he designs an application for Motorola's PageWriter  two-way pager. </p><h2>EMBEDDED SYSTEMS</h2><h3><a href="0006h/0006h.htm">JAVA CUSTOM CLASS LOADERS</a></h3><h4>by Brian Roelofs</h4><p>Custom class loaders create new possibilities for dynamic applications. Brian discusses how you can create your own class loader to read and load classes into the Java VM from any data source. </p><h2>INTERNET PROGRAMMING</h2><h3><a href="0006i/0006i.htm">AN INTERNET TOOLBOX</a></h3><h4>by Ronn Ritke</h4><p>Ronn examines a number of useful Internet tools, including packet-collection software, Internet-throughput software, ISP-measurement software, and the like.</p><h2>PROGRAMMER'S TOOLCHEST</h2><h3><a href="0006j/0006j.htm">PARSING COMPLEX TEXT STRUCTURES</a></h3><h4>by Ian E. Gorman</h4><p>A pattern language that includes recursive patterns and conditional pattern  matching can handle complex text structures without supplementary programming. Ian uses the OmniMark pattern language from OmniMark Technologies to do a job that might otherwise be done with tools like lex and yacc. </p><p></p><h2>COLUMNS </h2><h3><a href="0006k/0006k.htm">PROGRAMMING PARADIGMS</a></h3><h4>by Michael Swaine</h4><p>Michael looks to the future of technology and society, and wonders if it  will really be as bleak as a joyless Bill Joy thinks it will be.</p><p></p><h3><a href="0006l/0006l.htm">C PROGRAMMING</a></h3><h4>by Al Stevens </h4><p>While sitting by the side of the road, Al gets into his Quincy 2000 port  and further considers using the Borland BCC32 C/C++ compiler as Quincy's compiler. </p><p></p><h3><a href="0006m/0006m.htm">JAVA Q&amp;A</a></h3><h4>by Jacob Gsoedl</h4><p>Can you implement COM components using Java? Yes, and Jacob  shows you how.</p><p></p><h3><a href="0006n/0006n.htm">ALGORITHM ALLEY</a></h3><h4>by John Keogh</h4><p>John presents and implements an algorithm for scaling child windows when  the parent is resized. Although the example runs under the Win32 API, the algorithm and data structure are generally useful for scaling child windows  on other platforms. </p><p></p><h3><a href="0006o/0006o.htm">DR. ECCO'S OMNIHEURIST CORNER</a></h3><h4>by Dennis E. Shasha</h4><p>Are Ecco and Liane the antidote for a deadly new strain of microvirus?  Read and find out.</p><p></p><h3><a href="0006p/0006p.htm">PROGRAMMER'S BOOKSHELF</a></h3><h4>by Jeff Cromwell</h4><p>Jeff reviews <i>Applied Software Architecture</i>, by Christine Hofmeister, Robert Nord, and Dilip Soni; <i>Software Architecture in Practice</i>, by Len Bass, Paul Clements, and Rick Kazman; and <i>Software Architecture: Perspectives of an Emerging Discipline</i>, by Mary Shaw and David Garlan.</p><p></p><h2>FORUM</h2><h3><a href="0006q/0006q.htm">EDITORIAL</a></h3><h4>by Jonathan Erickson</h4><h3><a href="0006r/0006r.htm">LETTERS</a></h3><h4>by you</h4><h3><a href="0006s/0006s.htm">NEWS &amp; VIEWS</a></h3><h4>edited by Nicholas Baran</h4><h3><a href="0006t/0006t.htm">OF INTEREST</a></h3><h4>by Nicholas Baran  and Amy Lincicum</h4><h3><a href="0006u/0006u.htm">SWAINE'S FLAMES</a></h3><h4>by Michael Swaine</h4><p></p></body></html>