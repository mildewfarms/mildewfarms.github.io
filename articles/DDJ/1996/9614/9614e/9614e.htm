<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>

<TITLE>SP 96: Windows 95 Subclassing and Superclassing </TITLE>

</HEAD> <body bgcolor="FFFFFF"> <h1>Windows 95 Subclassing
and Superclassing <a name="02b8_00e7"><a name="02b8_00e7"><a name="02b8_00e5"><a name="02b8_0000"></h1><P>

<h2>Less work, less code</h2><P>

<h3>Jeffrey Richter and Jonathan Locke</h3><P>

<P> <i><a name="02b8_00e6"><a name="02b8_0000">Jeff and Jon are
coauthors of Windows 95: A Developer's Guide (M&amp;T Books, 1995).
They can be contacted through the DDJ offices.</i></p><hr><P>

Windows supplies a number of ready-to-use window classes, including
listboxes, comboboxes, and scrollbars. While these controls are
intended to be feature laden and general enough for use in any
application, there may be times when you require slightly different
behavior from controls. Although you could design your own control
from scratch, both window subclassing and superclassing let you
inherit features and styles from one or more windows. However, the
form you use is dictated by your particular requirements. For example,
if you're creating a single control that inherits from a Windows
control, then you'll likely use subclassing to create your new
control. If, on the other hand, you plan to create several controls
that inherit similar features from a common class, you may want to use
superclassing. In this case, superclassing reduces your programming
effort while producing smaller code in your application. <P>

<h3><a name="02b8_00e8">How Window Subclassing Works<a name="02b8_00e8"></h3><P>

When registering a window class, you fill in the members of the
WNDCLASSEX structure and pass the address of the structure to the
<I>RegisterClassEx</I> function. Of course, before calling
<I>RegisterClassEx</I>, you must initialize the <I>lpfnWndProc</I>
member of the WNDCLASSEX structure to point to the address of the
class's window procedure. This procedure processes messages pertaining
to all windows of this class. Before <I>RegisterClassEx</I> returns,
the system allocates an internal block of memory that contains
information about the window class. The class's window procedure
address is part of this block.<P>

Whenever a new window is created, the system allocates another
internal block of memory containing information specific to the new
window. When the system allocates and initializes the block of memory
for this window, the system copies the class's window procedure
address from the class's internal memory block into the window's
internal memory block. When a message is dispatched to a window
procedure, the system examines the value of the window procedure in
the window's memory block and calls the function whose address is
stored there. The system does not use the window procedure address
stored in the window class's memory block when dispatching a message
to a window. The window procedure address stored in the class's memory
block is there only so that it can be copied when a window is
created--the system does not use this address for any other
purpose.<P>

To subclass a window, you change the window procedure address in the
window's memory block to point to a new window procedure. Because the
address is changed in one window's memory block, it does not affect
any other windows created from the same class. If the system did not
give each window instance its own copy of the window procedure
address, changing the class's address would alter the behavior of all
windows in the class. If this were the case, subclassing a single edit
control so that it would no longer accept digits also would cause all
edit controls used within a single process to stop accepting digits.
This certainly is not desirable. <P>

Once you have changed the window procedure address in the window's
memory block, all messages destined for the window are sent to the
function at this new address. This function must look exactly like a
standard window procedure. In other words, its prototype must have an
identical prototype.<P>

Once the message destined for the original window procedure has been
sent to your procedure, you can:<P>
<ul>
<li>Pass it to the original procedure. This option is used for most
messages. The reason for subclassing is usually to alter the behavior
of a window only slightly. For this reason, most messages are passed
to the original procedure so that the default behavior for this window
class can be performed.</li> <li>Stop the message from being passed to
the original procedure. For example, if you want an edit control to
stop accepting digits, you examine WM_CHAR messages, check to see if
the character (<I>wParam</I> parameter) is between 0 and 9, and, if it
is, immediately return from the <I>SubClassWndProc</I> function. If
the character is not a digit, you pass the message to the original
window procedure for edit controls.</li> <li>Alter the message before
sending it. If you want a combobox to accept only uppercase
characters, examine each WM_CHAR message and convert the key
(contained in <I>wParam</I>) to uppercase (using the <I>CharUpper</I>
function) before passing the message to the original procedure.</li>
</ul>
In <a href="9614e.htm#02b8_00ee">Example 1</A>, which shows how to
subclass a window, the only information required to subclass a window
is its window handle. Notice that we have used the
<I>SubclassWindow</I> macro to perform the window subclassing. This
macro is defined in WindowsX.h; see <a href="9614e.htm#02b8_00ef">Example 2</A>. You can see that, aside
from some casting, this macro simply calls <I>SetWindowLong</I>,
changing the address of the window's window procedure. Of course, this
means that the function address passed to <I>SubclassWindow</I> must
identify a function that is contained in the process's address space.
In Win32, it is not possible to subclass a window using a window
procedure that is contained in another process's address space. The
return value from <I>SetWindowLong</I> is the address of the original
window procedure. This window procedure is saved in a window property
that is associated with the subclassed window.<P>

The function you write to intercept messages is identical in form to a
window procedure. The only difference is that you pass the messages to
the original window procedure instead of calling <I>DefWindowProc</I>.
To have the original window perform its normal operations for a
particular message, you must use the <I>CallWindowProc</I> function.
This function is passed to the address of the original window
procedure, the window handle (<I>hwn</I><I>d</I>), the message
(<I>uMsg</I>), and the two standard parameters (<I>wParam</I> and
<I>lParam</I>).<P>

<h3><a name="02b8_00e9">Creating New Window Messages<a name="02b8_00e9"></h3><P>

When you subclass a window, you often want to define some new window
messages that can be sent to the window. Let's say that you create an
edit window that accepts only numbers (using the new ES_NUMBER window
style). Then, you subclass this edit window to alter its behavior
slightly. For example, you might want to define a new window message,
EM_ADDNUM, that you can send to your subclassed window to make adding
a value to the number shown in the subclassed edit window very easy.
How should you define this EM_ADDNUM message? Normally, if you were
implementing a window class entirely by yourself, you would define
your class-specific window messages starting with WM_USER. For
example, the EM_ADDNUM message might be defined as <I>#define
EM_ADDNUM  (WM_USER + 0)</I>.<P>

But, when you are subclassing a window that was originally created
from a class that you did not implement yourself, you cannot simply
create new window messages starting at WM_USER. All the new common
controls, like trackbars, have their class-specific messages starting
at WM_USER. For example, the trackbar class's TBM_GETPOS message is
defined as <I>#define TBM_GETPOS  (WM_USER)</I>.<P>

If you subclass a trackbar window and define your own message with a
value of WM_USER + 0, your subclass procedure intercepts the message
and processes the message your way. Any code that is expecting to send
the TBM_GETPOS message in order to retrieve size information will be
in for a big surprise!<P>

So, you can start defining your messages at WM_USER + 500. But, this
isn't really a safe approach because you don't know if Microsoft has
created any undocumented (WM_USER + x) messages specific for the
control. If you add your own user message starting at WM_USER + 500,
it could conflict with an undocumented message recognized by the
trackbar class. Actually, choosing any value would be tempting
fate.<P>

Fortunately, there are two ways to solve this problem. The first is to
use the <I>RegisterWindowMessage</I> function, which creates a new
message that is unique as long as the string we pass to it is also
unique. Whenever you call <I>RegisterWindowMessage</I>, you know that
the integer value returned identifies a message that is ignored by any
and all window procedures that have not also requested to register the
same string message.<P>

The second way to solve the problem is much easier. Starting with
Windows 95, Microsoft has declared that all third-party window-class
procedures must ignore messages that range from WM_APP to 0xBFFF,
inclusive where WM_APP is defined in WinUser.H as <I>#define WM_APP
0x8000</I>. <P>

This means Microsoft guarantees that all system-global window classes
and all new common controls will ignore messages in this range. It
also means other companies that produce controls also should ignore
messages in this range. You should definitely check with the vendor of
any controls you use to make sure that they do not process any
messages above WM_APP.<P>

Because these classes ignore messages in this range, you can safely
define your EM_ADDNUM message for our subclassed edit window as
<I>#define EM_ADDNUM (WM_APP + 0)</I>. Now, when you send this message
to a subclassed edit window, it will know, beyond a shadow of a doubt,
that you want it to add a number to the value shown in the edit
control.<P>

<h3><a name="02b8_00ea">Associating Additional Data with a Subclassed
Window<a name="02b8_00ea"></h3><P>

Another problem with subclassing windows is that associating
additional data with the window is difficult. For example, you might
like to associate a valid numeric range with our subclassed edit
window. Because you did not register the edit window class, you have
no way to add additional class and/or window extra bytes. In addition,
because subclassing requires that a window instance already exists
before you can subclass it, increasing the number of class or window
extra bytes is also impossible.<P>

The best way to associate data with a subclassed window is to use
window properties. You also could use the GWL_USERDATA bytes to store
an address of a data structure that contains some additional data, but
this is not a good idea. The GWL_USERDATA bytes are supposed to be
available for the application that creates and manipulates the window.
Since your subclass procedure doesn't create the window, but acts very
much like a window procedure, you should not touch the GWL_USERDATA
bytes. Window properties are the only robust solution.<P>

Of course, if you know that the users of your subclassed window will
not touch the GWL_USERDATA bytes, you can use them, but you sacrifice
some flexibility that you may desire in the future.<P>

<h3><a name="02b8_00eb">The NoDigits Application<a name="02b8_00eb"></h3><P>

The NoDigits application (see Listings <a href="9614e.htm#02b8_00f3">One</A> through <a href="9614e.htm#02b8_00f9">Four</A>) demonstrates how to subclass
two edit control windows. When you invoke the application, the main
application window appears. This window contains three edit controls
and two buttons. The first edit control uses the standard, built-in
window procedure. The other two edit controls are subclassed. The
subclass procedure intercepts all characters being sent to the edit
control. However, if the character is a digit, the subclass window
procedure does not call the original window procedure. Instead, it
beeps and simply returns.<P>

When NoDigits starts, it creates a dialog box from a template that
contains three edit controls and two buttons. When the dialog-box
procedure receives a WM_INITDIALOG message, the
<I>NoDigits_OnInitDialog</I> function subclasses two of the edit
windows by calling the <I>NoDigitsClass_ConvertEdit</I> function.<P>

The <I>NoDigitsClass_ConvertEdit</I> function is implemented in
NoDigCls.c (<a href="9614e.htm#02b8_00f5">Listing Two</A>) but is
prototyped in NoDigits.c (<a href="9614e.htm#02b8_00f3">Listing
One</A>). This function simply calls the <I>SubclassWindow</I> macro
and saves the returned original window procedure as a property
associated with the subclassed window.<P>

<I>NoDigitsClass_WndProc </I>is a subclass window procedure that
intercepts only a single window message, WM_CHAR. All other messages
are passed to the original edit control's window procedure by calling
<I>NoDigitsClass_CallOrigWndProc</I> at the end of the function.
<I>NoDigitsClass_CallOrigWndProc</I> has the same prototype as any
other window procedure, but it calls the <I>CallWindowProc</I>
function to forward messages to the original window procedure.
<I>CallWindowPro</I><I>c</I>'s first parameter is the address of the
window procedure you wish to forward the message to. It's easy for
<I>NoDigitsClass_WndProc</I> to get the address of the edit control's
original window procedure. It does this by calling the <I>GetProp</I>
function, passing the same string that was passed to <I>SetProp</I>
inside <I>NoDigitsClass_ConvertEdit</I>.<P>

We'll now turn to how digits are prevented from being entered into the
edit control after it's subclassed. As mentioned earlier, the subclass
function performs some additional processing for the WM_CHAR message
only. Whenever <I>NoDigitsClass_WndProc</I> receives a WM_CHAR
message, it calls the <I>NoDigitsClass_OnChar</I> function. The first
thing this function does is determine if the character passed to it is
a digit. If the character is a digit, <I>MessageBeep</I> is called so
that the user is given some indication that the window does not accept
digits. However, if the character is not a digit, the WM_CHAR message
is forwarded to the edit control's original window procedure by using
the FORWARD_WM_CHAR macro. The last parameter is the address of the
function that you wish to forward the message to,
<I>NoDigitsClass_CallOrigWndProc</I>.<P>

<h3><a name="02b8_00ec">How Window Superclassing Works<a name="02b8_00ec"></h3><P>

Window superclassing is similar to window subclassing. Again, you are
associating a different window procedure address with a window to
alter a single window's behavior slightly. With window superclassing,
however, you create a new window class that has altered behavior.
Superclassing is most useful if you intend to create several windows,
all with slightly altered behavior. (There are some other differences
between subclassing and superclassing that will be discussed later.)
Creating a superclass is accomplished by registering a new window
class. For example, let's say that your application needs to create
several edit windows where each of the windows can accept only
letters. You could create all the windows and then subclass each
individually in order to get the desired effect, or you could use
window superclassing.<P>

For window superclassing, you must create a superclass window
procedure that is almost identical to a window subclass procedure. The
prototype is the same, and the way that you intercept messages is the
same. In fact, the only difference is how you call the original window
procedure. <P>

<a href="9614e.htm#02b8_00f0">Example 3</A> shows how to create a
superclass. Many more steps are necessary to create a superclass than
to subclass a window. The process of superclassing a window begins
with a call to the <I>GetClassInfoEx</I> function, passing it the name
of the desired base class. This fills a WNDCLASSEX structure with
statistics regarding the base class. This WNDCLASSEX structure serves
as a starting point for the new window class.<P>

Once you have the base class's information, it is very important to
save the value of the <I>lpfnWndProc</I> member. This value is the
address of the base class window procedure. This variable later will
be used in the superclass window procedure as the first parameter to
the <I>CallWindowProc</I> function.<P>

The next step is to give the new class a name by setting the
<I>lpszClassName</I> member to the new name for the class. The value
of the <I>hInstance</I> member should be set to the value of
<I>hinstExe</I> that was passed to WinMain, or the value of
<I>hinstDll</I> passed to a DLL's <I>DllMain</I> function. This value
lets the system know which module (EXE or DLL file image) in the
process's address space is registering the new window class. Finally,
the <I>lpfnWndProc</I> member of the WNDCLASSEX structure is changed
to the address of the superclass window procedure.<P>

Because a new window class is being registered, you can increase the
values of the <I>cbClsExtra</I> and <I>cbWndExtra</I> members of the
WNDCLASSEX structure. These additional bytes may be used by your
superclass function and are a big advantage of superclassing over
subclassing. But be careful when using the class or window extra bytes
for a superclassed window class. The base class window procedure is
written with the assumption that the class extra bytes (from 0 to
<I>cbClsExtr</I><I>a</I>-1) and the window extra bytes (from 0 to
<I>cbWndExtr</I><I>a</I>-1) are for its own use. The superclass window
procedure must not access the class and window extra bytes within
these ranges unless it knows exactly how they are used by the base
class.<P>

If the superclass window procedure is going to add class and window
extra bytes, it must save the original values of the <I>cbClsExtra</I>
and <I>cbWndExtra</I> members of the WNDCLASSEX structure, usually in
global variables, before changing the values of those members. When
the superclass window procedure accesses any of the window extra
bytes, it must add the original value of <I>cbWndExtra</I> to the
index so that it does not reference the window extra bytes used by the
base class. <a href="9614e.htm#02b8_00f1">Example 4</A> shows how to
prepare and access additional window bytes added to the superclass. Of
course, it is possible to associate data with a superclassed window
via window properties. However, it is always better to store
information in window extra bytes because properties require more data
space and take more time to access.<P>

The <I>lpszMenuName</I> member of WNDCLASSEX also may be changed to
give the new class a new menu. If a new menu is used, the IDs for the
menu options should correspond to the IDs in the &quot;standard&quot;
menu for the base class. This new menu is not necessary if the
superclass window procedure processes the WM_COMMAND message in its
entirety and does not pass this message to the base class window
procedure.<P>

The remaining members of the WNDCLASSEX structure--<I>style</I>,
<I>hIcon</I>, <I>hCursor</I>, <I>hbrBackground</I>, and
<I>hIconS</I><I>m</I>--may be changed in any way you desire. For
example, if you want your new window class to use a different mouse
cursor or a different icon, you can change the <I>hCursor</I> and
<I>hIcon</I> members of the WNDCLASSEX structure accordingly. Finally,
call the <I>RegisterClassEx</I> function to inform Windows of the new
class.<P>

The main difference between subclassing and superclassing is that
subclassing alters the behavior of an existing window, while
superclassing creates a new window class where all windows created by
the class have altered behavior. It is better to use superclassing
when you wish to create several windows whose behavior differs
slightly from an existing window class. This is because it is easier
to register a new class, give it a new name, and create windows of
this new class than it is to create all the desired windows and use
the <I>SetWindowLong</I> function or <I>SubclassWindow</I> macro to
change the address of each of their window procedures.<P>

Superclassing can be used to create a dialog box that contains several
superclassed controls. When a dialog box is created,
<I>CreateDialogIndirectParam</I> goes through the dialog-box template
and creates a window using the parameters specified on each CONTROL
line in the template. If the template contains several listbox windows
that require altered behavior, it is much easier to specify
&quot;NewListBox&quot; in each CONTROL line of the template. With
window subclassing, the system would have to create all the listbox
windows before you could subclass these windows, one at a time, during
the processing of the WM_INITDIALOG message. This is a tedious
process.<P>

Another advantage of superclassing is that the superclass window
procedure performs its own initialization for the window. This is
because Windows knows about the superclass window procedure from the
class memory block before a window is created. When the window is
created, the superclass window procedure receives the WM_NCCREATE and
WM_CREATE messages. During the processing of these messages, the
superclass window procedure may initialize its class or window extra
bytes or do any other processing it desires.<P>

Both of these messages should be passed to the base class window
procedure, whether the superclass window procedure processes them or
not. Windows must perform initialization for each window in response
to WM_NCCREATE. If this message wasn't passed to the original window
procedure, <I>DefWindowProc</I> would never be called, and the window
would not be initialized properly. By passing the WM_NCCREATE message
to the base class procedure, you ensure that <I>DefWindowProc</I> is
eventually called. Similarly, the WM_CREATE message should also be
passed to the base class window procedure.<P>

Unfortunately, defining new window messages for superclassed windows
involves the same problems that you have for subclassed windows. To
define new window messages, you must either use the
<I>RegisterWindowMessage</I> function or define your messages starting
with WM_APP. <P>

<h3><a name="02b8_00ed">Conclusion<a name="02b8_00ed"></h3><P>

In our book <I>Windows 95: A Developer's Guide,</I> we present the
Arcade application which demonstrates how to create an animated button
class (<I>AniBtn</I>) by superclassing the standard button class.
<I>AniBtn</I> works almost identically to the standard button class
except that it takes advantage of the new image list controls to
create buttons that have animated icon images instead of boring, old
text. Due to space constraints, we can't present a discussion here.
However, we have provided the Arcade application electronically (see
&quot;Availability,&quot; on page 3) and a complete discussion can be
found in our book. With the techniques presented here, you should be
able to create your own controls that inherit from standard Windows
controls.<P>

<h4><a name="02b8_00ee"><B>Example 1:</B> Subclassing a window.<a name="02b8_00ee"></h4><P><pre>
static LPCSTR g_szSubclassWndProcOrig = &quot;SubclassWndProcOrig&quot;;
int WINAPI WinMain (HINSTANCE hinstExe, HINSTANCE hinstPrev,
   LPSTR lpszCmdLine, int nCmdShow) {
   HWND hwndEdit = CreateWindowEx(0, &quot;EDIT&quot;, &quot;&quot;, WS_CHILD, 10, 20,
      100, 16, hWndParent, NULL, hInstance, 0L);
   //Change the window procedure address associated with this one edit
   //control
   pfnWndProcOrig = SubclassWindow(hwndEdit, Edit_SubclassWndProc);
   // Associate the original window procedure address with the window
   SetProp(hwndEdit, g_szSubclassWndProcOrig, (HANDLE) (DWORD)
          pfnWndProcOrig);
   // Messages destined for hwndEdit are sent to Edit_SubclassWndProc
   // instead
}
   .
   .
   .
LRESULT WINAPI Edit_SubclassWndProc (HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
   LRESULT lResult = 0;
   BOOL fCallOrigWndProc = TRUE;
   switch (uMsg) {
      // Some cases set fCallOrigWndProc to FALSE.
      .
      .
      .
   }
   if (fCallOrigWndProc)
      lResult = CallWindow(
         (WNDPROC) (DWORD) GetProp(hwnd, g_szSubclassWndProcOrig),
         hwnd, uMsg, wParam, lParam);
   return(lResult);
}
</pre>
<h4><a name="02b8_00ef"><B>Example 2:</B> SubclassWindow macro as #defined in WindowsX.h.<a name="02b8_00ef"></h4><P>
<pre>
#define SubclassWindow(hwnd, lpfn) \     
    ((WNDPROC)SetWindowLong((hwnd), GWL_WNDPROC, \
    (LPARAM)(WNDPROC)(lpfn)))
</pre>
<h4><a name="02b8_00f0"><B>Example 3:</B> Creating a superclass.<a name="02b8_00f0"></h4><P>
<pre>
// Store the address of the original window procedure.
WNDPROC g_pfnWndProcOrig;
    .
    .
    .
int WINAPI WinMain (HINSTANCE hinstExe, HINSTANCE hinstPrev,  
    LPSTR lpszCmdLine, int nCmdShow) {  
    WNDCLASSEX wc;  
    adgINITSTRUCT(wc, TRUE);  
    // Get all the information about the original window class  
    GetClassInfoEx(NULL, &quot;EDIT&quot;, &amp;wc);  
    // Save the original window procedure address so that the  
    // Edit_SuperClassWndProc can use it.  
    g_pfnWndProcOrig = wc.lpfnWndProc;  
    // Our new class must have a new class name.  
    wc.lpszClassName = &quot;NoDigits&quot;;  
    // Our new class is registered by our module.  
    wc.hInstance = hinstExe;  
    // Our new class has a different window procedure address.  
    wc.lpfnWndProc = NoDigitsClass_SuperClassWndProc;  
    // Register our new window class.  
    RegisterClassEx(&amp;wc);  
    // At this point we can create windows of the NoDigits window class.
    // All messages that go to these windows are sent to the  
    // NoDigitsClass_SuperClassWndProc first where we can decide if we  
    // want to pass them on to g_pfnWndProcOrig.  
        .  
        .  
        .
}
LRESULT WINAPI NoDigitsClass_SuperClassWndProc (HWND hwnd, UINT uMsg,  
    WPARAM wParam, LPARAM lParam) {  
    LRESULT lResult = 0;  
    BOOL fCallOrigWndProc = TRUE;  
    switch (uMsg) {     
        .     
        .     
        .  
    }  
    if (fCallOrigWndProc)     
      lResult = CallWindowProc(g_pfnWndProcOrig,hwnd,uMsg,wParam,lParam);
       return(lResult);
}
</pre>
<h4><a name="02b8_00f1"><B>Example 4:</B> Preparing and accessing additional window bytes added to the superclass.<a name="02b8_00f1"></h4><P>
<pre>
// Global variables to save the number of class extra bytes, the window
// extra bytes, and the window procedure address of listbox base class
int g_cbClsExtraOrig, g_cbWndExtraOrig;
WNDPROC g_pfnWndProcOrig;
// Index into window extra bytes where our edit data can be found.
// These data follow the data required by the base class.
#define GWL_NODIGITSDATA      (g_cbWndExtraOrig + 0)
    .
    .
    .
ATOM WINAPI NoDigitsClass_RegisterClass (void) {  
    WNDCLASSEX wc;  
    GetClassInfoEx(NULL, &quot;Edit&quot;, &amp;wc);     
    // Save the information we need later in global variables.  
    g_cbClsExtraOrig = wc.cbClsExtra;  
    g_cbWndExtraOrig = wc.cbWndExtra;  
    g_pfnWndProcOrig = wc.lpfnWndProc;  
    // Add four window extra bytes to account for additional edit data.
    wc.cbWndExtra += sizeof(LONG);  
    // Change lpfnWndProc, lpszClassName, and hInstance members, too.
        .  
        .  
        .  
    // Register the new window class.  
    return(RegisterClassEx(&amp;wc));
}
LRESULT WINAPI NoDigitsClass_SuperClassWndProc (HWND hwnd, UINT uMsg,  
    WPARAM wParam, LPARAM lParam) {  
    int nNoDigitsData;  
        .  
        .  
        .  
    // Retrieve our data from the added window extra bytes.  
    nNoDigitsData = GetWindowLong(hwnd, GWL_NODIGITSDATA);  
        .  
        .  
        .  
    // Call base class window procedure for remainder of processing. return(CallWindowProc(g_pfnWndProcOrig,  hwnd, uMsg, wParam, lParam));
}
</pre>
<P>
<h4><a name="02b8_00f2"><a name="02b8_00f3">Listing One<a name="02b8_00f3"></h4>
<pre>
/******************************************************************************
Module name: NoDigits.c
Written by: Jeffrey Richter
Notices: Copyright (c) 1995 Jeffrey Richter
Purpose: Demonstrates how to subclass a window
******************************************************************************/
#include &quot;..\Win95ADG.h&quot;          /* See Appendix A for details */
#include &lt;Windows.h&gt;
#include &lt;WindowsX.h&gt;
#pragma warning(disable: 4001)    /* Single-line comment */
#include &quot;resource.h&quot;
///////////////////////////////////////////////////////////////////////////////
// Function that converts an edit window to a NoDigitsClass window
// by subclassing the edit window
BOOL WINAPI NoDigitsClass_ConvertEdit (HWND hwnd, BOOL fSubclass);
///////////////////////////////////////////////////////////////////////////////
BOOL NoDigits_OnInitDialog (HWND hwnd, HWND hwndFocus, LPARAM lParam) {
   adgSETDLGICONS(hwnd, IDI_SUBCLASS, IDI_SUBCLASS);
   // Turn the regular edit windows into NoDigits windows by subclassing them.
   NoDigitsClass_ConvertEdit(GetDlgItem(hwnd, IDC_NODIGITS1), TRUE);
   NoDigitsClass_ConvertEdit(GetDlgItem(hwnd, IDC_NODIGITS2), TRUE);
   return(TRUE);  // Accepts default focus window.
}
///////////////////////////////////////////////////////////////////////////////
void NoDigits_OnCommand (HWND hwnd, int id, HWND hwndCtl, UINT codeNotify) {
   switch (id) {
      case IDCANCEL:              // Allows dialog box to close.
         // Turn the NoDigits windows back into regular Edit windows.
         NoDigitsClass_ConvertEdit(GetDlgItem(hwnd, IDC_NODIGITS1), FALSE);
         NoDigitsClass_ConvertEdit(GetDlgItem(hwnd, IDC_NODIGITS2), FALSE);
         EndDialog(hwnd, id);
         break;
   }   
}
///////////////////////////////////////////////////////////////////////////////
BOOL WINAPI NoDigits_DlgProc (HWND hwnd, UINT uMsg, 
   WPARAM wParam, LPARAM lParam) {
   switch (uMsg) {
      // Standard Window's messages
      adgHANDLE_DLGMSG(hwnd, WM_INITDIALOG, NoDigits_OnInitDialog);
      adgHANDLE_DLGMSG(hwnd, WM_COMMAND,    NoDigits_OnCommand);
   }
   return(FALSE);                 // We didn't process the message.
}
///////////////////////////////////////////////////////////////////////////////
int WINAPI WinMain (HINSTANCE hinstExe, HINSTANCE hinstPrev, 
   LPSTR lpszCmdLine, int nCmdShow) {
   adgWARNIFUNICODEUNDERWIN95();
   adgVERIFY(-1 != DialogBox(hinstExe, MAKEINTRESOURCE(IDD_NODIGITS),
      NULL, NoDigits_DlgProc));
   return(0);
}
//////////////////////////////// End of File //////////////////////////////////
</pre>
<h4><a name="02b8_00f4"><a name="02b8_00f5">Listing Two<a name="02b8_00f5"></h4><pre>
/******************************************************************************
Module name: NoDigCls.c
Written by: Jeffrey Richter
Notices: Copyright (c) 1995 Jeffrey Richter
Purpose: NoDigits subclass child control implementation file
******************************************************************************/
#include &quot;..\Win95ADG.h&quot;          /* See Appendix A for details */
#include &lt;Windows.h&gt;
#include &lt;WindowsX.h&gt;
#pragma warning(disable: 4001)    /* Single-line comment */
#include &quot;resource.h&quot;
///////////////////////////////////////////////////////////////////////////////
static LPCTSTR g_szNoDigitsClassWndProcOrig = 
   __TEXT(&quot;NoDigitsClassWndProcOrig&quot;);
///////////////////////////////////////////////////////////////////////////////
// The sole purpose of this function is to call the base class's window 
// procedure. When using the FORWARD_* message crackers, a function like
// this one is necessary because the last parameter to a FORWARD_* message cracker
// is a function with the standard WNDPROC function prototype, whereas 
// CallWindowProc requires a fifth parameter - the address of the window
// procedure to call.
LRESULT NoDigitsClass_CallOrigWndProc (HWND hwnd, UINT uMsg, 
   WPARAM wParam, LPARAM lParam) {
   // Call the base class's window procedure.  It was saved as a window
   // property by the NoDigitsClass_ConvertEdit function.
   return(CallWindowProc(
     (WNDPROC) (DWORD) GetProp(hwnd, g_szNoDigitsClassWndProcOrig),
     hwnd, uMsg, wParam, lParam));
}
///////////////////////////////////////////////////////////////////////////////
void NoDigitsClass_OnChar (HWND hwnd, TCHAR ch, int cRepeat)  {
   if (adgINRANGE(__TEXT('0'), ch, __TEXT('9'))) {
      // Beep when a digit is received.
      MessageBeep(0);
   } else {
   
      // Allow nondigits to pass through to the original window procedure.
      FORWARD_WM_CHAR(hwnd, ch, cRepeat, NoDigitsClass_CallOrigWndProc);
   }
}
///////////////////////////////////////////////////////////////////////////////
// This function processes all messages sent to the NoDigits windows.
LRESULT WINAPI NoDigitsClass_WndProc (HWND hwnd, UINT uMsg,
   WPARAM wParam, LPARAM lParam) {
   switch (uMsg) {
      HANDLE_MSG(hwnd, WM_CHAR, NoDigitsClass_OnChar);
   }
   return(NoDigitsClass_CallOrigWndProc(hwnd, uMsg, wParam, lParam));
}
///////////////////////////////////////////////////////////////////////////////
// Function that converts an edit window to a NoDigitsClass window
// by subclassing the edit window.
BOOL WINAPI NoDigitsClass_ConvertEdit (HWND hwnd, BOOL fSubclass) {
   BOOL fOk = FALSE;
   if (fSubclass) {
      fOk = SetProp(hwnd, g_szNoDigitsClassWndProcOrig,
        (HANDLE) (DWORD) SubclassWindow(hwnd, NoDigitsClass_WndProc));
   } else {
      WNDPROC wp = (WNDPROC) (DWORD) 
         RemoveProp(hwnd, g_szNoDigitsClassWndProcOrig);
     SubclassWindow(hwnd, wp);
     fOk = (wp != NULL);      
   }
   return(fOk);
}
//////////////////////////////// End of File //////////////////////////////////
</pre>
<h4><a name="02b8_00f6"><a name="02b8_00f7">Listing Three<a name="02b8_00f7"></h4><pre>
//Microsoft Visual C++ generated resource script. 
//
#include &quot;resource.h&quot;
#define APSTUDIO_READONLY_SYMBOLS
/////////////////////////////////////////////////////////////////////////////
// Generated from the TEXTINCLUDE 2 resource.
//
#include &quot;windows.h&quot;
/////////////////////////////////////////////////////////////////////////////
#undef APSTUDIO_READONLY_SYMBOLS
/////////////////////////////////////////////////////////////////////////////
// Icon
//
IDI_SUBCLASS            ICON    DISCARDABLE     &quot;NoDigits.Ico&quot;
/////////////////////////////////////////////////////////////////////////////
// Dialog
//
IDD_SUBCLASS DIALOG DISCARDABLE  -32768, 5, 192, 79
STYLE WS_MINIMIZEBOX | WS_VISIBLE | WS_CAPTION | WS_SYSMENU
CAPTION &quot;No Digits&quot;
FONT 8, &quot;MS Sans Serif&quot;
BEGIN
    LTEXT           &quot;&amp;Edit:&quot;,IDC_STATIC,7,8,15,8
    EDITTEXT        IDC_EDIT,43,8,140,13,ES_AUTOHSCROLL
    LTEXT           &quot;NoDigit &amp;1:&quot;,IDC_STATIC,7,24,34,8
    EDITTEXT        IDC_NODIGITS1,43,24,140,13,ES_AUTOHSCROLL
    LTEXT           &quot;NoDigit &amp;2:&quot;,IDC_STATIC,7,40,34,8
    EDITTEXT        IDC_NODIGITS2,43,40,140,13,ES_AUTOHSCROLL
    DEFPUSHBUTTON   &quot;OK&quot;,1,36,60,50,14
    PUSHBUTTON      &quot;Cancel&quot;,2,104,60,50,14
END
#ifdef APSTUDIO_INVOKED
/////////////////////////////////////////////////////////////////////////////
// TEXTINCLUDE
//
1 TEXTINCLUDE DISCARDABLE 
BEGIN
    &quot;resource.h\0&quot;
END
2 TEXTINCLUDE DISCARDABLE 
BEGIN
    &quot;#include &quot;&quot;windows.h&quot;&quot;\r\n&quot;
    &quot;\0&quot;
END
3 TEXTINCLUDE DISCARDABLE 
BEGIN
    &quot;\r\n&quot;
    &quot;\0&quot;
END
/////////////////////////////////////////////////////////////////////////////
#endif    // APSTUDIO_INVOKED
#ifndef APSTUDIO_INVOKED
/////////////////////////////////////////////////////////////////////////////
// Generated from the TEXTINCLUDE 3 resource.
//
/////////////////////////////////////////////////////////////////////////////
#endif    // not APSTUDIO_INVOKED
</pre>
<h4><a name="02b8_00f8"><a name="02b8_00f9">Listing Four<a name="02b8_00f9"></h4><pre>
//{{NO_DEPENDENCIES}}
// Microsoft Visual C++ generated include file.
// Used by NoDigits.RC
//
#define IDD_NODIGITS                    104
#define IDD_SUBCLASS                    104
#define IDI_NODIGITS                    105
#define IDI_SUBCLASS                    105
#define IDC_EDIT                        1000
#define IDC_NODIGITS1                   1004
#define IDC_NODIGITS2                   1005
#define IDC_STATIC                      -1
// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        101
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1002
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
</pre>

</BODY></HTML>
