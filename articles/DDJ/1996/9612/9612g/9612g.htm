<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>December 1996:  Extending CGI</TITLE></HEAD>
<body bgcolor="FFFFFF">
<P>

<h1>Extending HTTP Servers with DGI and TGI</h1><P>

<h2>Avoiding CGI's overhead</h2><P>

<P>

<h3>Andrew Montefusco</h3><P>

<P>

<P>
<i>Andrew is a C/C++ programmer and analyst currently working for an IBM Semea subsidiary in IBM's Rome, Italy, Network Labs. He can be contacted via http:// www.montefusco.com.</i></p><hr><P>

<P>

Most HTTP servers allow their functionality to be extended with new services. The most widespread standard for this type of extension is the Common Gateway Interface (CGI), which runs external programs to process certain HTTP requests. However, starting a new task for every request requires a significant amount of overhead, especially for sophisticated extensions. For example, some extensions access relational databases, and CGI requires the database connection to be opened and closed for each new request.<P>

To reduce this overhead, I've implemented two alternative approaches in my HTTPD2 server for OS/2. The Task Gateway Interface (TGI) starts the extension as a separate program but leaves it running continuously rather than restarting it for each new request. The Dynamic Gateway Interface (DGI) loads the extension as a DLL (if it is not already loaded) and calls callback functions to handle client requests. <P>

The only constraint of the current OS/2 implementation is that TGI extensions must be started after the HTTP server task. Other implementations may not require this (TGI for Apache, for example, is insensitive to the starting order of the server and extensions). Of course, if the server receives a request for a URL whose extension task is not running, the client receives an error 11 (TGI_MOD_NOT_FOUND). Both approaches avoid the overhead of starting a new process for each separate request.<P>

<h3>Task Gateway Interface (TGI)</h3><P>

Like CGI, a TGI extension module is a process external to the server program. Unlike CGI, a separate process is not started for each new request. Rather, the server uses interprocess-communication methods to communicate with the extension process. <a href="1997011d.htm">Figure 1</A> shows how this arrangement works. Although my OS/2 server uses shared memory, the details are hidden from programmers by a C/C++ API. This API, which can be implemented differently for different platforms, makes the program portable to any platform that supports a C/C++ programming environment and an HTTP TGI server.<P>

Each TGI extension handles requests for a particular URL. Normally, each TGI program can handle only one request at a time. However, any number of different TGI programs can be running simultaneously, each responding to a different URL. If necessary, multiple programs or a single program with multiple threads can be used to handle multiple, simultaneous requests for a single URL.<P>

<a href="9612g.htm#011c_008f">Listing One</A> defines the TGI API. A TGI program registers itself with the HTTP server when it starts, including the address of a suitable callback procedure. The server calls this procedure when it receives a request for the corresponding URL.<P>

For instance, if the HTTP server receives a request for http://www.roma.ccr .it/ tgi/es1, it would call a callback function registered under the name "es1." Usually, the function will then feed a data stream to the server to satisfy the request.<P>

The extension program registers with the server by calling the <I>TgiRegisterModule</I> function in the TGI library. This function takes the name of the service (es1 in the previous example), a pointer to the callback function, and a time-out interval specifying how long to wait for the server to respond. The time out is useful when a large number of TGI extension programs are being started simultaneously. <I>TgiRegisterModule</I> returns a handle to be used by later TGI requests. If a single program provides multiple extensions, <I>TgiRegisterModule</I> will need to be invoked once for each separate extension.<P>

After the registration is complete, the extension program calls <I>TgiProcessModule</I> to handle requests for that service. <I>TgiProcessModule</I> requires the handle returned by the registration process and a pointer to callback data. Each call to <I>TgiProcessModule</I> sets up a single service for the corresponding URL. To allow multiple, simultaneous requests for that URL, <I>TgiProcessModule</I> will need to be called several times (from different threads or different programs).<P>

<I>TgiProcessModule</I> is synchronous; it receives and dispatches requests from the server until the server terminates or the callback function calls <I>TgiDeregisterModule</I>. When <I>TgiProcessModule</I> does return, the TGI extension program should clean up and terminate.<P>

<h3>TGI Callback Function</h3><P>

The callback function is called by the server whenever the corresponding URL is requested. Generally, the callback function synthesizes an appropriate document to satisfy the request. This document must be a complete HTTP response, including appropriate headers.<P>

The callback function has the type PFNACTION, defined in <a href="9612g.htm#011c_0090">Listing One</A>. The first parameter is a handle identifying this particular request, the second parameter is the callback data pointer provided to <I>TgiProcessModule</I>. <P>

To satisfy the request, the callback function may need to obtain additional information from the server, send the HTTP response back to the server, and interact with the server in other ways.<P>

To get additional information about the request, the extension program can call <I>TgiGetPathInfo</I>, <I>TgiGetQueryInfo</I>, or <I>TgiGetFormData</I> with the corresponding request handle. These functions return the URL path, the URL query information, or the form data contained in an HTTP POST message, respectively.<P>

To respond to the request, the extension program calls <I>TgiPutHtml</I> with a request handle, a pointer to data to be returned, and the length of the data. This function can be used equally well for binary or text data, but it will usually be more convenient to use the wrapper function shown in<a href="9612g.htm#011c_02fc"> Example 1</A> to handle text data. This function is called like a normal <I>fprintf()</I>, with the request handle instead of a FILE handle.<P>

<h3>TGI Example</h3><P>

<a href="9612g.htm#011c_0091">Listing Two</A> is tgiex1.c, a complete TGI program example. When called by the server, it synthesizes a short page containing the input information, the time the program started, and the current time.<P>

Because the program registers only one instance of the "example_1" extension, only one request can be handled at a time. To verify this, you can uncomment the <I>sleep()</I> function call on line 102, then open two browser windows on the same URL (/tgibin/example_1). The second requester will receive the message "Error 17 (no free instance found) in runtgi.cpp at 74." <P>

The file tgiex2.c (available electronically) is an example TGI program that registers multiple instances, so that it can handle multiple requests at once. This is essential for time-consuming TGI callback functions such as database searches.<P>

The program reads the number of instances to activate from the command line and registers the extension module with the name "example_1". It allocates an array of THREAD_PARAM structures and registers one instance in each thread. Notice that the call back function code is shared by all instances. This function must be reentrant; updates to static or global variables will need to be carefully managed.<P>

<h3>TGI Implementation</h3><P>

The OS/2 version of TGI is implemented as a DLL. The source is also available electronically. The library exports both TGI API functions and the functions the server uses to manage extension modules. The server functions have names beginning with an underscore.<P>

The tgiglob.c module has a shared data segment. This means that only one instance of this segment is created in memory, and all the tasks using the DLL share this area. Access to this area is established through the <I>hGlobMutex</I> semaphore, which is managed by the <I>_LockData</I> and <I>_UnLockData</I> functions.<P>

The tgi.c module has a separate data segment for every task that uses it. Among the other variables is the <P>
<I>hLocMutex</I> handle used to access the <I>hGlobMutex</I> semaphore. The global semaphore is created in the DLL initialization phase by the HTTP server task. Other tasks must call <I>DosOpenMutexSem</I> before trying to use this semaphore. Because the server task created the semaphore, it's not strictly necessary for it to reopen the semaphore this way, but it does keep things simple.<P>

The shared data segment uses two tables to store registration information. Every time a module registers itself via the <I>TgiRegisterModule</I> function, the DLL stores this information in a free position in the <I>modTab</I> table. Notice that the callback function pointer stored in this table is only valid in the registering task. (The module registration is also stored in a local table to simplify deregistering all modules in a particular task.) When the TGI task calls the <I>TgiProcessModule</I> function, the DLL allocates a _PROC_INSTANCE structure in the <I>instTab</I> table and adds it to a linked list of instances of each module. The function then enters a loop waiting for activation.<P>

<a href="1997011e.htm">Figure 2</A> shows how these data structures work. This figure shows an extension "example_1" with only one instance and another extension "example_2" with two instances. Notice that the callback function itself is actually shared by different instances.<P>

When the HTTP server receives a request for a TGI extension, it calls <I>UnLockModuleInstance</I> with the extension module name and a pointer to a TGI_DATA structure containing data about the specific request. The data is communicated to the separate thread through a shared memory segment. Note that the separate thread is the one that called the <I>TgiProcessModule</I> in the extension task.<P>

The <I>_UnLockModuleInstance</I> function finds the module entry with the correct name and searches the instance list to find one not already in use. The instance thread is unlocked with a post to the semaphore. Now, in the context of the task that registered the instance, the <I>_LockOnRequest</I> function returns a TGI_OK value, which prompts <I>_DoAction</I> to call the callback function. The task server thread waits in <I>MbxGetMsg</I> for data from the extension task. After the callback returns, the <I>_DoAction</I> function sends a zero-length message, which indicatesthe end of the data and guarantees the server thread will be unlocked.<P>

<h3>Dynamic Gateway Interface (DGI)</h3><P>

DGI extensions are DLLs loaded directly into the server. The advantage of this approach is that it is faster to load a DLL than a new program. It's also possible to cache commonly used extensions in memory.<P>

For example, if a client requests the URL http://www.roma.ccr.it/dgibin/dgiex1.dll, the server loads the DLL dgiex1.dll. It then calls <I>DgiStart</I> to initialize the DLL, <I>DgiDoAction </I>to handle this request, then <I>DgiEnd</I> to deinitialize the DLL prior to unloading.<P>

<a href="9612g.htm#011c_0092">Listing Three</A> is the DGI API. <I>DgiStart</I> is called each time the DLL is loaded. It is called with pointers to several utility functions that must be used to call utility routines in the server. It is responsible for any special initialization needed by this DLL.<P>

<I>DgiDoAction</I> is called once for each request for this URL. It is called with pointers to the various data associated with the request (for example, the URL and any associated form information). <I>DgiDoAction</I> parses the request and calls <I>putHtml</I> (using the pointers given to <I>DgiStart</I>) to emit the response.<P>

<I>DgiEnd</I> is called once just before the DLL is removed from memory. In my initial implementation, DLLs are loaded and unloaded for each request; so, in fact,<I>DgiStart</I> and <I>DgiEnd</I> are called once per request. However, servers may cache DLLs, leaving them in memory to handle multiple requests. In that case, it is very important to properly separate the initialization, request processing, and deinitialization.<P>

As you can see in<a href="1997011f.htm"> Figure 3</A>, DGI handles multiple requests more easily than does TGI. The server can have calls to several <I>DgiDoAction</I> functions pending at the same time in different server threads.<P>

<h3>DGI Examples</h3><P>

To be recognized as DGI, the DLL must have certain entry points. The prototypes for these entry points are declared in the DGI.H file.<P>

<a href="9612g.htm#011c_0093">Listing Four</A> is dgitest.cpp, an example DGI extension. When the client requests the URLhttp://localhost/ dgibin/dgitest1.dll, the module dgitest1.dll is loaded. The <I>DgiDoAction</I> function synthesizes a document containing the current date and time.<P>

The dgisrc.cpp DLL (also available electronically) is a more-complex example. This DLL is associated with a document containing an ISINDEX tag. If a user fills the entry field with *.cpp, the client requests the URL http://localhost/dgibin/dgisrc.dll?*.cpp. The server then invokes dgisrc.dll, which searches a particular directory for all matching files and synthesizes a simple HTML stream containing the file list.<P>

<h3>DGI Implementation</h3><P>

My HTTPD2 server for OS/2 has a simple DGI implementation that doesn't attempt to cache DLLs.<a href="9612g.htm#011c_02fb"> Listing Five</A> is part of loadext.cpp, the server code that supports DGI. This code is very OS/2 specific; porting requires adapting this code to the run-time linking services provided by the system.<P>

The first operation in <I>ClientAgent::LoadExt</I> is loading the correct DLL. It then finds the address of the functions exported by the DLL and calls each one accordingly.<P>

The server cannot check for errors in the extension (except for the presence of the correct function names). As a result, the module developer is responsible for ensuring the extension won't crash the server. My implementation takes one safeguard: It registers an exception handler to intercept possible fatal exceptions. This limits the effect of an error in a DGI DLL to termination of the thread, not of the entire server.<P>

<P>

<P>

<h4><a name="011c_02fc"><B>Example 1: </B>Wrapper for simple text output.</h4><P>

<pre>
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdarg.h&gt;

int htPrintf (HREQUEST hReq, const char *fmt, ...)
{
   char    szBuf[1024];
   va_list argptr;
   int     cnt;

   va_start(argptr, fmt);
   cnt = vsprintf(szBuf, fmt, argptr);
   va_end(argptr);

   TgiPutHtml (hReq, szBuf, (long)cnt);

   return(cnt);
}</pre>

<P>

<P>

<P>

<B>Figure 1: </B>Tasks involved in TGI scheme.<P>

<P>

<B>Figure </B><B>2</B><B>: </B>Data structure maintained by tgi.dll.<P>

<P>

<B>Figure </B><B>3</B><B>: </B>Tasks involved in DGI scheme.<P>

<P>

<P>

<P>

<a name="011c_0090"><a name="011c_008f"><H3>Listing One</H3><PRE>
<P>
/*  Task Gateway Interface v1.00 -- (C) A.Montefusco 1995  */

#if !defined(__TGI_H__)
#define  __TGI_H__
#if defined(__cplusplus)
extern &quot;C&quot; {
#endif

typedef void * HTGI;
typedef void * HREQUEST;
typedef long (*PFNACTION) (HREQUEST, void *) ;

long   TgiRegisterModule (char *name,PFNACTION pFn, HTGI *pHTgi, long timeout);
long   TgiProcessModule (HTGI hTgi, void *pCbData);
long   TgiDeregisterModule (HTGI hTgi );
long   TgiGetPathInfo  ( HREQUEST hReq, char **pszPi );
long   TgiGetQueryInfo ( HREQUEST hReq, char **pszQi );
long   TgiGetFormData  ( HREQUEST hReq, char **pszFd );
long   TgiSetRedirFile ( HREQUEST hReq, char *pszRf  );
long   TgiPutHtml      ( HREQUEST hReq, char *buf, long len );
char  *TgiStrError     ( long tgiErr );

#define   TGI_OK                  0
#define   TGI_EXIT                1
#define   TGI_UNLOCK              2
#define   TGI_NOT_RUN             3
#define   TGI_LOC_OPEN_SEM        4
#define   TGI_REQUEST             5
#define   TGI_ALREADY_INIT        6
#define   TGI_LOC_RELEASE_SEM     7
#define   TGI_TOO_MANY_MOD        8
#define   TGI_BAD_PARAM           9
#define   TGI_UNLOCK_OK          10
#define   TGI_MOD_NOT_FOUND      11
#define   TGI_BAD_INSTANCE       12
#define   TGI_SEM_CREATE         13
#define   TGI_UNLOCK_ERROR       14
#define   TGI_MOD_ALREADY_REG    15
#define   TGI_INST_NOT_FOUND     16
#define   TGI_MODULE_BUSY        17
#define   TGI_NOT_INIT           18
#define   TGI_NO_MEM             19
#define   TGI_MLBX_OPEN          20
#define   TGI_MLBX_SEND          21

#define TGI_FATAL(rc) { if (rc != TGI_OK) {                                   \
                           fprintf (stderr, &quot;Error %d (%s) in %s at %d\n&quot;,    \
                                    rc, TgiStrError(rc), __FILE__, __LINE__ );\
                           exit (rc);                                         \
                        }                                                     \
                      }
#if defined(__cplusplus)
};
#endif
#endif
</PRE>

<a name="011c_0091"><H3>Listing Two</H3><PRE><P>

/*  Task Gateway Interface -- A. Montefusco 
 *  TGI program with only one instance.
 */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdarg.h&gt;
#include &lt;time.h&gt;
#include &lt;dos.h&gt;
#include &quot;tgi.h&quot;

/* htPrintf  printf-like function emits HTML output stream from TGI callback */
int htPrintf (HREQUEST hReq, const char *fmt, ...)
{
   char    szBuf[1024];
   va_list argptr;
   int     cnt;

   va_start(argptr, fmt);
   cnt = vsprintf(szBuf, fmt, argptr);
   va_end(argptr);

   TgiPutHtml (hReq, szBuf, (long)cnt);
   return(cnt);
}
/* HTML 2.0 compatible header... */

static char szHtmlHeader [] =
              &quot;Content-type: text/html\r\n\r\n&quot;                    
              &quot;&lt;html&gt;&quot;                                             
              &quot;&lt;head&gt;&lt;title&gt;Returned from TGI executable !!! &lt;/title&gt;&lt;/head&gt;&quot;
              &quot;&lt;body&gt;&quot;                                             
              &quot;&lt;h1&gt;TGI TEST&lt;/h1&gt;&quot;
              &quot;&lt;p&gt;Returned from Task Gateway Interface executable.&quot; ;

/*  ... and trailer  */

static char szHtmlTrailer [] =  &quot;&lt;/body&gt;&lt;/html&gt;&quot; ;

/* TGI callback function. hReq parameter must be used in all following calls
 * to TGI API: pCbData points to optional extension's data. This callback sends
 * to client a simple screen containing the request's data */

long CbExample1 (HREQUEST hReq, void *pCbData)
{
   printf (&quot;Callback: recalled with: %p *p\n&quot;, (void *)hReq, pCbData);
   TgiPutHtml (hReq, szHtmlHeader, strlen(szHtmlHeader));
   {
      char *pszPi;
      char *pszQi;
      char *pszFd;

      htPrintf (hReq, &quot;&lt;p&gt;&lt;p&gt;&lt;pre&gt;&quot;);

      TgiGetPathInfo  ( hReq, &amp;pszPi ) ;
      TgiGetQueryInfo ( hReq, &amp;pszQi ) ;
      TgiGetFormData  ( hReq, &amp;pszFd ) ;

      htPrintf (hReq, &quot;PathInfo  : %s&lt;p&gt;&quot;, pszPi);
      htPrintf (hReq, &quot;QueryInfo : %s&lt;p&gt;&quot;, pszQi);
      htPrintf (hReq, &quot;FormData  : %s&lt;p&gt;&quot;, pszFd);

      htPrintf (hReq, &quot;&lt;p&gt;&lt;/pre&gt;&quot;);
   }
   /* Remove remark tokens from the following to simulate a lengthy operation*/
   /* sleep (10); */
   {
      time_t  timeNow = time(0);                  // request start timestamp
      time_t  timeStart = *((time_t *)pCbData);   // program start timestamp

      htPrintf (hReq, &quot;&lt;p&gt;Run @ %s&lt;p&gt;&quot;, asctime (localtime(&amp;timeNow)));
      htPrintf (hReq, &quot;&lt;p&gt;Tgi module start @ %s&lt;p&gt;&quot;, 
                asctime (localtime(&amp;timeStart)));
   }
   TgiPutHtml (hReq, szHtmlTrailer, strlen(szHtmlTrailer));

   return TGI_OK;
}
int main (void)
{
   long   rc;
   HTGI   hTgi;                        // handle of the TGI extension
   char  *pszModName = &quot;example_1&quot;;    // TGI extension name
   time_t timeStart;                   // program start timestamp

   timeStart = time(0);
   rc = TgiRegisterModule ( pszModName, CbExample1, &amp;hTgi, 0 );
   TGI_FATAL(rc);
   rc = TgiProcessModule ( hTgi, &amp;timeStart );
   TGI_FATAL(rc);
   rc = TgiDeregisterModule ( hTgi );
   TGI_FATAL(rc);
   return 0;
}


<a name="011c_0092"><H3>Listing Three</H3><PRE><P>

/* Dynamic Gateway Interface v1.00 -- (C) A.Montefusco 1995 */

#ifndef __DGI_H__
#define __DGI_H__
#ifdef __cplusplus
extern &quot;C&quot; {
#endif

void        DgiPutHtml (char *pszBuf, long len, void *pPrm);
const char *DgiGetData (char *pszParam, void *pPrm);
typedef void  (* PDGI_FN_OUTMSG)(char *, long, void *);
typedef const char *(* PDGI_FN_GETDATA)(char *, void *);
long    DgiStart (PDGI_FN_OUTMSG   pFnOutMsg, PDGI_FN_GETDATA  pFnGetData,
                  void            *pCbData);
typedef long (* PDGI_FN_START)(PDGI_FN_OUTMSG, PDGI_FN_GETDATA, void *);
long    DgiDoAction (const char *pszQueryInfo,  const char *pszPathInfo,
                     const char *pszFormData,   char       *pszRedir);
typedef long (* PDGI_FN_DOACTION)(const char*,const char*,const char*,char*);
long    DgiEnd (void);
typedef long (* PDGI_FN_END)(void);

extern PDGI_FN_OUTMSG   pFnOut;
extern PDGI_FN_GETDATA  pFnGetData;
extern void            *pCbPrm;

#ifdef __cplusplus
};
#endif
#endif


<a name="011c_0093"><H3>Listing Four</H3>
<PRE><P>
/*  Dynamic Gateway Interface -- A. Montefusco */

#include &lt;time.h&gt;
#include &lt;string.h&gt;
#include &lt;iostream.h&gt;
#include &quot;dgi.h&quot;
#include &quot;dgihelp.h&quot;

#if defined(__OS2__) &amp;&amp; defined(__BORLANDC__)
#define EXPORT _export
#else
#define EXPORT
#endif

/* HTML 2.0 compatible header... */

#define HTML  &quot;Content-type: text/html\r\n\r\n&quot;                       \
        &quot;&lt;html&gt;&quot; \
        &quot;&lt;head&gt;&lt;title&gt;Returned from DGI executable !!!&lt;/title&gt;&lt;/head&gt;&quot; \
        &quot;&lt;body&gt;&quot; \
        &quot;&lt;h1&gt;                                                 &quot; \
        &quot;DGI TEST                                             &quot; \
        &quot;&lt;/h1&gt;                                                &quot; \
        &quot;&lt;p&gt;Returned from Dynamic Gateway Interface executable.  &quot;

/* ...and trailer */

#define HTML_TRAILER  &quot;&lt;/body&gt;&quot; \
                      &quot;&lt;/html&gt;&quot;
PDGI_FN_OUTMSG  pFnOut;
PDGI_FN_GETDATA pFnGetData;
void           *pCbPrm;

long EXPORT DgiStart (PDGI_FN_OUTMSG pFnOm, PDGI_FN_GETDATA pFnGd, void *pPrm)
{
   cerr &lt;&lt; &quot;DgiStart&quot; &lt;&lt; endl;
   pFnOut     = pFnOm;
   pFnGetData = pFnGd;
   pCbPrm     = pPrm;
   return 1;
}
long EXPORT DgiDoAction (const char *pszQueryInfo, const char *pszPathInfo,
                         const char *pszFormData, char *)
{
   cerr &lt;&lt; &quot;DgiDoAction:&quot; &lt;&lt; endl
        &lt;&lt; &quot;Query info:\t[&quot; &lt;&lt; pszQueryInfo &lt;&lt; &quot;]&quot;
        &lt;&lt; endl
        &lt;&lt; &quot;Path info:\t[&quot; &lt;&lt; pszPathInfo &lt;&lt; &quot;]&quot;
        &lt;&lt; endl
        &lt;&lt; &quot;Form data:\t[&quot; &lt;&lt; pszFormData &lt;&lt; &quot;]&quot;
        &lt;&lt; endl;
   htPrintf (&quot;%s&quot;, HTML);

   time_t  timeNow = time(0);
   htPrintf (&quot;&lt;p&gt;Run @ %s GMT+1&lt;p&gt;&quot;, asctime (localtime(&amp;timeNow)));

   htPrintf (&quot;Remote host: &lt;b&gt;%s&lt;/b&gt;&lt;p&gt;&quot;, pFnGetData (&quot;REMOTE_HOST&quot;, pCbPrm));

   htPrintf (&quot;%s&quot;, HTML_TRAILER);
   return 1;
}
long EXPORT DgiEnd (void)
{
   cerr &lt;&lt; &quot;DgiEnd&quot; &lt;&lt; endl;
   return 1;
}


<a name="011c_02fb"><H3>Listing Five</H3>
<PRE><P>
int  ClientAgent :: LoadExt (const string &amp;sModName, const string &amp;sQuery,
                             const string &amp;sPathInfo, const string &amp;sFormData)
{
   APIRET   rc;
   char     szObjNameBuf [128];
   HMODULE  hModHandle;
   rc = DosLoadModule(szObjNameBuf, sizeof szObjNameBuf, sModName.c_str(),
                                                                &amp;hModHandle);
   if (rc != 0) {   // load the module in memory 
      TRACE(cerr&lt;&lt;&quot;Unable to load &quot;&lt;&lt;sModName&lt;&lt;&quot; module [&quot; &lt;&lt;rc&lt;&lt; &quot;]&quot;&lt;&lt; endl;);
      return rc;
   }
   /* module loaded, resolve functions address */
   PDGI_FN_START    fnStart;
   PDGI_FN_DOACTION fnDoAction;
   PDGI_FN_END      fnEnd;
   PFN              pProcAddr;

   rc = DosQueryProcAddr(hModHandle, 1, 0, &amp;pProcAddr);

   if (rc != 0) {
      TRACE (cerr&lt;&lt; &quot;Error [&quot; &lt;&lt; rc &lt;&lt; &quot;] addressing Start function&quot; &lt;&lt; endl;);
      fnStart = 0;
   } else fnStart = (PDGI_FN_START) pProcAddr;
   rc = DosQueryProcAddr(hModHandle, 2, 0, &amp;pProcAddr);
   if (rc != 0) {
      TRACE (cerr&lt;&lt;&quot;Error [&quot; &lt;&lt; rc &lt;&lt; &quot;] addressing Action function&quot; &lt;&lt; endl;);
      fnDoAction = 0;
   } else fnDoAction = (PDGI_FN_DOACTION) pProcAddr;

   rc = DosQueryProcAddr(hModHandle, 3, 0, &amp;pProcAddr);

   if (rc != 0) {
      TRACE (cerr &lt;&lt; &quot;Error [&quot; &lt;&lt; rc &lt;&lt; &quot;] addressing End function&quot; &lt;&lt; endl;);
      fnEnd = 0;
   } else fnEnd = (PDGI_FN_END) pProcAddr;

   TRACE(printf (&quot;Start: %p\n&quot;, fnStart););
   TRACE(printf (&quot;Do: %p\n&quot;, fnDoAction););
   TRACE(printf (&quot;End: %p\n&quot;, fnEnd););

   /* Invoke start function */
   long  retCode;

   if ((retCode = fnStart(putHtml, getData, (void *)this)) != 0) {
      TRACE (cerr &lt;&lt; &quot;Start OK&quot; &lt;&lt; endl;);       // OK
   } else {TRACE (cerr &lt;&lt; &quot;Start in error&quot; &lt;&lt; endl;);}

   char  szUrl [2560];
   szUrl[0] = '\0';

   if ( (retCode = fnDoAction (sQuery.c_str(),     sPathInfo.c_str(),
                               sFormData.c_str(),  szUrl ) ) != 0)   {  // OK
      TRACE (cerr &lt;&lt; &quot;DoAction OK&quot; &lt;&lt; endl;);
   } else {
      TRACE (cerr &lt;&lt; &quot;DoAction in error&quot; &lt;&lt; endl;);
   }
   if ((retCode = fnEnd()) != 0) {  // OK
      TRACE (cerr &lt;&lt; &quot;End OK&quot; &lt;&lt; endl;);
   } else {
      TRACE (cerr &lt;&lt; &quot;End in error&quot; &lt;&lt; endl;);
   }
   DosFreeModule (hModHandle);

   // check if external module has rquested redirection
   if (strlen(szUrl)) {
      if (strstr(szUrl,&quot;http:&quot;)) {
         char  msg [512];
         fprintf (stderr, &quot;Returning 301 ERROR\n&quot;);
         sprintf (msg, &quot;HTTP/1.0 301 \&quot;HTTPD/2 Server\&quot;\r\n&quot;
                       &quot;Server: A.Montefusco 3.0 -- on OS/2 2.x+\r\n&quot;
                       &quot;Location: %s\r\n\r\n&quot;,
                  szUrl
                 );
         pCn-&gt;Send (msg, strlen(msg));
      } else
         print (string(szUrl), TYPE_HTML);
   }
   return 0;
}
</PRE>

</BODY></HTML>
