<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>December 1996:   Esposito</TITLE></HEAD>
<body bgcolor="FFFFFF">
<P>

<h1>Multithreading and Visual Basic</h1><P>

<P>

<P>

<h2><FONT FACE="Helv 12" SIZE=3>Partitioning tasks among specialized routines</FONT></h2><P>

<P>

<h3>Dino Esposito</h3><P>

<P>

<P>
<i>Dino is a senior software engineer specializing in Windows programming and a contributing editor to many Italian programming magazines. He can be reached at esposito@infomedia.it.</i></p><hr><P>

<P>

In a multithreaded application, tasks are partitioned among various specialized routines, called "threads," that run concurrently. From the system's point of view, these threads are single units waiting for CPU and memory. From the programmer's perspective, these threads provide a way to improve performance, especially for frequent and complex operations.<P>

In concurrent environments, however, the rules are different from a traditional programming model. You cannot assume, for instance, that one line will execute before the next. The serialization of events does not come from the order in which you write your code, but from the semantics and behavior of the threads that will actually carry it out. So each time you need to verify operations before proceeding, you should synchronize all the threads involved to a global object. <P>

In this article, I'll show how to create multithreaded applications using both the SDK and Visual Basic. The source code (available electronically) includes: two VB4 projects  (vbsdk_thread and vbocx_thread), which show how to multithread with both the SDK and an OCX; source code for an auxiliary DLL, including samples of .AVI animation; and the full source code for the OCX. I compiled the DLL with Borland C++ 4.52; and the OCX with Visual C++ 4.1. The core of the VB code is isolated in the <I>Form_Load Sub, VB_CreateThread,</I> and <I>VB_TerminateThread</I> subroutines. The latter two functions are invoked in response to users clicking on Go and Stop buttons, respectively; see <a href="19970108.htm">Figure 1</A>.<P>

<h3>Multithreading in Visual Basic 4</h3><P>

The Visual Basic run-time engine is an interpreter that works as a single-threaded process. The engine isn't aware of context-switching, concurrency, parallel processing, priorities, task scheduling, and the like. Consequently, the Visual Basic language does not natively support threads, and you cannot use VB code as the body of your threads.<P>

Fortunately, Visual Basic provides full access to the Windows 95 API. The two API functions you need to know are <I>CreateThread, </I>which returns a handle to the new thread, and <I>EndThread, </I>which stops the thread.<P>

<I>CreateThrea</I><I>d</I>'s first argument is a pointer to a special structure describing the security attributes of the thread. The argument points to a security descriptor for the handle just created. If this parameter is NULL, then checking will not occur when someone tries to use it. Consequently, the handle may be used to access the thread wherever such a handle is accepted. <P>

<FONT FACE="Garamond" SIZE=3>Because security is only supported under Windows NT, the first parameter will usually be NULL in Windows 95. The second argument indicates the stack size, in bytes, for the thread. If it is 0 (the most-common setting), then the thread will be assigned the same stack size as the parent. The next two arguments define the actual behavior of the thread, representing the starting routine and its parameters. The code pointed to by the third parameter is the body of the thread, and the fourth is a pointer to its parameters. </FONT><P>

<I>CreateThread</I> requires two more arguments. One specifies the creation flags, making it possible for you to create a thread in a suspended state. With the default of 0, the thread is launched immediately after being initialized. The last parameter is a pointer to a buffer that will be filled with the thread ID. You should always pass it a valid pointer; otherwise, you'll get a system error. <a href="9612e.htm#0107_02f8">Example 1</A> is a typical call to <I>CreateThread</I>. The thread code should be a THREAD_START_ ROUTINE object, which is a pointer to a function accepting a LPVOID value and returning a DWORD value.<P>

To terminate a thread, you can wait for the body to come to a natural end or explicitly invoke <I>ExitThread</I>. It doesn't require the handle of the thread to quit, so it works on the current thread, and if you call it from within the Visual Basic code, you'll exit Visual Basic too! The only safe place where you can call <I>ExitThread</I><I> </I>is inside the body of the thread. <P>

How do you specify the body of a thread if you can't do so using native Visual Basic? The solution is to place the routines that contain the body of a thread into a separate DLL, and to call those routines from Visual Basic using <I>CreateThread. </I>Visual Basic does not have a native function that will obtain the address of these routines that <I>CreateThread </I>needs, so you use the API function <I>GetProcAddress </I>instead. <I>GetProcAddress </I>requires the name of the module that contains the function and the function's name or ordinal number.<P>

Thus, if you want to create another thread from your VB program, start by writing a DLL with routines that run concurrently with the rest of the program. <a href="1997010b.htm">Figure 2</A> illustrates how the primary and secondary threads run in VB.<P>

<h3>Using the SDK</h3><P>

<FONT FACE="Helv 12" SIZE=3><FONT FACE="Garamond" SIZE=3>First, I'll present an approach that separates the threaded routines in a DLL implemented in C. My Visual Basic application calls these routines using direct calls to the WIndows 95 API. I will also examine the characteristics of the new animation controls that come with the Windows 95 Common Controls library. Finally, I'll encapsulate the calls to the multithreading functions in the API in an OCX control. This will make implementing multithreading in Visual Basic simpler.</FONT></FONT><P>

For the sake of illustration, I'll enter characters into a text box with the first thread, while starting a second thread that plays a .AVI file in the background. The necessary steps to accomplish this include:<P>

<P>

1.Obtaining the instance of the module.<P>

2.Creating an animated control to play the clip.<P>

3.Loading the DLL containing the functions.<P>

<P>

To reproduce a .AVI clip, you just create the control, then open and play the file. The <I>Animate_*</I> macros in <I>commctrl.h</I> make this a straightforward process (the source code for the DLL is available electronically). <P>

The instance of the module is a parameter required for creating the animated control. You should declare and use <I>GetWindowLong</I> and <I>CreateWindowEx</I> for the first two steps; see <a href="9612e.htm#0107_02f9">Example 2</A>. The animated controls belong to a class called <I>SysAnimate32</I>, and the sample creates one of them inside a picture box. To get the address of a function exported by a DLL, you need a handle to the library itself. <I>LoadLibrary</I> does this for you. All this needs to be done during the loading of the form. At this point, the example is ready to start a new thread that plays the .AVI clip. By clicking on the Go button, you will: 1. Get the address of a function called "Go" from a library called "theLib.dll;" and 2. Create the thread.<P>

The address of the function is stored in a <I>Long</I> variable and passed as the third argument of <I>CreateThread</I>. Be sure to indicate <I>ByVal</I> <I>vbNullString</I> in place of the attributes for the security of the thread and to dereference the address you pass as the fourth argument. It should be a void pointer to the parameters for the main thread routine. In this example, anyway, I only have a <I>Long</I> value to pass, whereas the declaration requires an argument by reference. So insert the <I>ByVal</I> keyword before the variable name. My library exports two functions, <I>Go</I> and <I>Quit</I>. <I>Go</I> is intended to open and play an .AVI file, whose name is hard coded to sample.avi. <I>Quit</I> stops the playing that is going on in the control. Calling <I>Quit</I> sends a stop message to the animation control causing the thread to end.<P>

<h3>Using an OCX</h3><P>

<FONT FACE="Helv 12" SIZE=3><FONT FACE="Garamond" SIZE=3>With tools such as C++ language, MFC, and ControlWizard, you can create an OCX that helps you to support multithreading. The OCX, called "thread.ocx," is invisible at run time and exposes two methods (<I>Create</I>, <I>Terminate</I>) and three attributes (<I>Library</I>, <I>Function</I>, <I>Params</I>). Its only purpose is to provide a simple interface for calling a function from a DLL, using it as the body of a new thread. The  <I>Create</I> method loads the library specified in the <I>Library</I> data member, gets the address of a routine called <I>Function</I>, and makes a call to <I>CreateThread</I> specifying the content of <I>Params</I> as the argument the new thread will receive. The OCX's <I>Create </I>returns the handle to the thread; see<a href="9612e.htm#0107_02fa"> Example 3</A>.</FONT></FONT><P>

Since the OCX is invisible at run time, you can add it anywhere in your form. The prototype of the <I>CreateThread</I> API lets you specify just a LPVOID parameter as the arguments of the thread. To pass it more data, just gather all the data in a single, user-defined structure. Don't forget to call the OCX's <I>Terminate</I> to unload the library from memory (despite the name, the method won't do anything else).<P>

<h3>Thread Monitoring </h3><P>

For debugging, you can use PView or Spy++ (both of which come with Visual C++). They let you snoop around the active processes and threads. If you run my samples from within the VB4 environment, you'll see that the number of threads increases by one, passing from two to three. The first two threads are the VB primary component (priority 8, normal) and a secondary thread with a highest priority (23, critical), probably used for checking the syntax of your code. You can use <I>SetThreadPriority</I> to modify the priority of your thread. <P>

To terminate a thread there is a brute-force approach, too. If you call <I>TerminateThread </I>specifying the handle of the thread you want to kill, you effectively destroy the thread but have no stack deallocated, no cleanup code, and no related DLL notified of it! What does it mean? Try modifying the VB code responding to the Stop button, turn off the line that quits the animation, add an explicit call to <I>TerminateThread</I>, and start the program. You'll notice that the Stop button is no longer able to quit the .AVI. Why? It's just because the thread refers to an external DLL (<I>comctl32.dll</I> for playing the clip) and killing the thread does not affect any code other than the thread itself. <P>

<h3>Conclusion</h3><P>

Visual Basic is an environment thought to make Windows programming easier and faster. It supports almost all the features offered by Windows 95, but not multithreading. A workaround is possible, but since multithreading is not a built-in characteristic of Visual Basic, you cannot expect it to be smoothly implemented. However, the only serious drawback is that you need to isolate the body of the threads in external DLLs and load them by means of a handful of APIs. Once you know this, multithreading in Visual Basic is no more difficult than making any other API call. In addition, the OCX provided with the article should hide the most of the SDK programming details.<P>

Be careful with data manipulated by threads your Visual Basic application creates, since that data may be accessed concurrently by different pieces of the same process and in unpredictable order. If your threads need synchronization, use special data structures to control how the threads share the process resources. You can, for instance, use semaphores and mutexes to limit the number of the threads accessing a resource, isolate into critical sections the code that must execute without interruption, and generate events to let a thread sleep and awake when another thread signals that an expected situation occurred. There are several functions in the Windows API that let you use semaphores, mutexes, critical sections, and events, including <I>WaitForSingleObject</I>, <I>WaitForMultipleObjects</I>, <I>EnterCriticalSection</I>, <I>CreateSemaphore,</I> and <I>CreateMutex</I>. <P>

<P>

<P>

<P>

<P>

<B><a href="19970108.htm">Figure 1</A>: </B>How threads run in VB4.<P>

<P>

<B><a href="1997010b.htm">Figure 2</A>: </B>Running the sample program; OCX version.<P>

<P>

<P>

<h4><a name="0107_02f8">Example 1: Typical call to CreateThread. </h4><P>

<pre>pfn = GetProcAddress( m_hModule, m_function );
m_hThread = CreateThread( NULL, 0, (LPTHREAD_START_ROUTINE)pfn, 
            (LPVOID)m_params, 0, &amp;dwThreadId );

</pre>

<h4><a name="0107_02f9">Example 2: Using GetWindowLong and CreateWindowEx.</h4><P>

<pre>
hInst = GetWindowLong(hWnd, GWL_HINSTANCE)
hwndAni = CreateWindowEx(0, "SysAnimate32", "", 
          ACS_TRANSPARENT Or WS_CHILD Or WS_VISIBLE, 0, 0, 0, 0, hWnd,
          1, hInst, vbNull)

</pre>

<h4><a name="0107_02fa"><B>Example 3: </B>Create returns the handle to the thread.</h4><P>

<h4></h4><P>

<pre>Thread1.Library = "thelib.dll"
Thread1.Function = "Go"
Thread1.Params = hwndAni
hThread = Thread1.Create</pre>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
