<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>December 1996:  C Programming</TITLE></HEAD>
<body bgcolor="FFFFFF">
<P>

<h1>Delete This!</h1><P>

<P>

<h3>Al Stevens</h3><P>

<P>

<P>
<i>Al is a DDJ contributing editor. He can be contacted at 71101.1262@compuserve.com.</i></p><hr><P>

<P>

A new book by Michael Moore, the creator of <I>Roger and Me</I>, <I>TV Nation</I>, and other works of liberal satire. I saw Mike plugging his new book, <I>Downsize This!</I> (Crown Publishers, ISBN 0-517-70739-X) on a couple of talk shows and, on the day he said it would be released, went directly to the local Walden Bookstore. There, in a prominent display, were several copies of <I>Downsize This!</I> each with a big round sticker announcing "15% Off!" just under the title. Struck by the comical irony of the discount, I sent Mike a message--his e-mail address is on the last page of the book--alerting him that he was already being downsized with an automatic paycut on his first day of publication. Being an author myself, I added that publishing one's e-mail address can be a mixed blessing for an author. I get a lot of mail, not all of it constructive. Mike replied, "I'm not yet sorry I published this address. The response is fascinating." The book's been out only a few days Mike, and you're a lot more famous than me. Just wait.<P>

Downsizing ain't all bad. I retired from consulting several years ago to concentrate on writing, but downsizing created new opportunities for some interesting work. It wasn't easy to trade jeans, T-shirt, and flex hours for appropriate attire, an ID badge, and 9-to-5, but I did it. Judy always looks on the bright side. She likes it when I work somewhere other than at home. More money and less husband, she says.<P>

My new consulting work results from government downsizing. I teach C and C++ classes to federal employees who need to acquire new skills in the face of drastic budget cuts. I develop and maintain C++ programs for contractors who support their government clients but cannot hire programmers because of the uncertain future. Downsizing creates opportunities for people like me. We prosper on the plight of others.<P>

Don't misunderstand. Despite the opportunities, I'm no fan of downsizing, even when it promises to cut government waste, a promise seldom if ever kept, by the way. Politicians who promise to cut government spending never address the obvious problems associated with doing that. Whether or not a government program is productive or useful, we cannot ignore the socio-economic superstructure that it has created and sustains. When they close a base or cut the budget of a big government project, they not only add a bunch of former employees to the welfare roles, but they indirectly downsize all the local businesses, too. Real people are affected. Clerks, bartenders, plumbers, sign-painters, sales people, garbage collectors, stockbrokers, teachers, preachers, mechanics, tradesmen, cops, real estate agents. Yes, and programmers, too. All with rent or mortgages, car payments, kids to feed. The next time your favorite candidate promises you less government, ask about the side effects. Who's going to pay for them?<P>

<h3>delete this;<I></I></h3><P>

In September, I addressed the advisability of coding <I>delete this;</I> in a class member function. I said, "It's not a good practice." I got a lot of mail from programmers about that opinion. The vote seems to be split 50/50. Nothing is more interesting than a polarizing issue. Some readers sent code showing cases where they thought the idiom was acceptable, and, in some cases, necessary. Allow me now to clarify my opinion, which has been modified somewhat by the mail I received.<P>

If you are designing a class to publish for others to use, do not allow it to delete itself. Period. Disagree if you like and code anything the language allows to your heart's content, but I stand by that conviction and will continue to code and teach according to that guideline. I'll repeat the problems: First, the only way that <I>delete this;</I> works is if the object is instantiated on the heap. Second, assuming that a class could assert that an object is on the heap (which it cannot), there is no way to assert that the user does not dereference the pointer to the object after the object has deleted itself--including deleting the object a second time.<P>

Why do I persist in this position? In my consulting work I maintain programs written by programmers who have fallen to the downsizer's axe. In virtually every case where a class uses <I>delete this;</I>, the usage is the source of one or more bugs, usually because the program that instantiates the object tries to use the object after it has deleted itself. Furthermore, wherever I found the idiom in use, I was able to redesign the class so that it did not need <I>delete this;</I>.<P>

I wondered if the heap-only problem could be solved. After several tries, I was unable to arrive at a platform-independent, fully-portable way for an object to: <P>

<P>
<ul>
<li>Assert that it was indeed instantiated on the heap.</li>
<li>Ascertain that it had deleted itself and intercept and suppress subsequent deletes. </li>
<li>Intercept dereferences of the object's pointer after it has deleted itself.</li>
</ul>
I worked out several approaches that seemed to satisfy the first two conditions, but the third one was out of reach. I tested and proved the methods with several compilers. When I discussed my findings with Scott Meyers, author of <I>Effective C++</I> and <I>More Effective C++</I>, he pointed out where the C++ rules of language permit compilers to do things that thwart my best intentions.<P>

One of those rules was a shock. I thought that by overloading the <I>delete</I> operator, I could determine if the object had already deleted itself. The details of that attempt are not important. What is important is what I learned when Scott said to me:<P>

The value of a pointer may be changed by the act of deleting it. Which is why this code [<a href="9612k.htm#0128_009b">Example 1</A>] yields undefined behavior. The problem is that the full action of the delete operator (not operator delete...) is not specified by the standard. We know that for single objects, it invokes a destructor sequence and then calls operator delete, but we have no assurance that that is all it does. In particular, it remains free to change the value of the pointer being deleted, and there is no way to take control over this.<P>

To make his point, Scott referred to the following passage in the <I>ANSI C++ Draft Working Paper</I>, section "5.3.5 Delete."<P>

It is unspecified whether the deletion of an object changes its value. <I>If the expression denoting the object in a delete-expression is a modifiable lvalue, any attempt to access its value after the deletion is undefined.</I> [emphasis added]<P>

<P>

Maybe it's because I don't haunt the hallowed halls of language design and standardization, but it never occurred to me that the <I>delete</I> operator would modify the contents of the pointer variable that is its operand. It sounds so improbable, and I've never seen that behavior implemented in a compiler. I want to believe that the explicit behavior spelled out in that passage is a mistake, but, like most such anomalies in high-level languages, it must exist because somewhere a legacy compiler does it for whatever reason.<P>

This rule raises a red flag. You often see classes that initialize pointers to zero in their constructors and delete those pointers in their destructors. They also delete those pointers and assign to them with new elsewhere. If it is possible that a class could have the equivalent of <a href="9612k.htm#0128_009b">Example 1</A>--two subsequent deletes of a thought-to-be-zero-value pointer without an intervening assignment of something valid, an insidious bug lurks waiting to bite you when you port this program elsewhere.<P>

<h3>From Bjarne Stroustrup</h3><P>

I sent Bjarne Stroustrup a message asking his opinion of <I>delete this;</I>. He answered:<P>

The <I>delete this;</I> construct is valid in a member function. Once that is done every access to a non-static member (data or function) is undefined. Caveat emptor!<P>

The use of the construct comes with techniques for conditionally deleting objects. For example [see <a href="9612k.htm#0128_009c">Example 2(a)</A>]: I guess someone must have misused <I>delete this; </I>badly for it to become an issue, but I have not personally encountered it as a serious problem in real code. On the other hand, I don't recall using <I>delete this;</I> recently. These days, I tend to control such objects through "handles' that tend to live on the stack and in other objects... [see<a href="9612k.htm#0128_009c"> Example 2(b)</A>].<P>

Bjarne went on to demonstrate how, if the language rules prohibited <I>delete this;</I>, programmers would find ways around the restriction.<P>

<h3>Readers of the Lost Art</h3><P>

My attitude was adjusted not only by communications with the rich and famous. Several readers wrote to express their opinions. Esa Leskinen wrote about his usage of the idiom to implement reference counting. Adam Sapek talked about how reference-counting COM objects use the idiom to destroy themselves. John B. Williston offered this comment:<P>

[<I>delete this;</I> statements] are very handy for writing classes of the <I>CListBoxPopupEdit</I> type. This is a class that one instantiates passing a pointer to a listbox and an item index; the edit control pops up over said item, allowing editing of the text. The edit self-destructs whenever the user presses enter, escape, or changes focus. The instantiation is controlled by a static member function that returns no pointer to the object. Without this idiom, the edit control would need to send a message off to some other window to free its own <I>CEdit</I> object (or something like that--it would essentially make the object less reusable).<P>

So, given the firm stand I took at the beginning of this discussion, how have I altered my opinion about <I>delete this;</I>? In <I>More Effective C++</I> (if you program in C++, you need both of Scott's books), Scott proposes a base class that provides reference-counting behavior to its derived classes. A reference-counted class contains data members that can be shared among several objects of the class. You cannot get the same effect with static members because there might be other objects with different values. Scott uses the ubiquitous <I>String</I> class to make the point. When you assign one string object to another or construct a new string object from an existing one, there is no reason that they should not share the same physical string data. A reference count specifies how many objects share the data. Copy constructors and overloaded assignment operators increment the count. Destructors decrement the count. When the count goes to zero, the destructor deletes the data.<P>

After implementing a self-contained reference-counting <I>String</I> class, Scott implements a generic reference-counting base class from which new reference-counted classes can be derived. When its count goes to zero, the object deletes itself. This usage would violate my guidelines if you used it as the base for a derived class that everyone uses. Instead, Scott uses the base class to derive a specialized class that contains the shared data portion of the objects. He embeds an object of that class in his published class. Objects that delete themselves are hidden from programmers who use the published class. Presumably, the author of the published class knows enough to deal appropriately with the private suicidal object. I do not object to a usage of <I>delete this;</I> that hides those details from users of the class. But I doubt that I will ever use the statement in my own code.<P>

As Bjarne says, "caveat emptor."<P>

<h3>Undoing the Undoable</h3><P>

The government project I've been working on includes a downscale custom word processor that works with SGML text. SGML is the architecture upon which HTML is built. One of the editor's requirements is that it support an Undo feature similar to those on high-end text editors and word processors.<P>

The editor's <I>Undo</I> class hierarchy is tailored specifically to the needs of that particular editor. Users can type text with insert or overstrike mode, they can delete characters or blocks of text, and they can insert and delete SGML tags, which define the document components. During all this, tags can be exposed or hidden behind a WYSIWYG document interface, and redlining can be on or off. Any of these actions can be undone.<P>

There are three basic variations on the Undo scenario. The simplest is what you find in small text editors such as the Windows 95 Notepad applet. Only your most recent action can be undone. The Word for Windows Undo feature includes Undo and Redo and can Undo all the way back to the document as it was before you started making changes or until you hit the limits of its Undo buffer. Each Undo action reverses a textual change to the document. The Brief programmer's editor, and its descendent, the Borland IDE editor work with Undo and Redo down to the keystroke level. Every keystroke, including cursor movements, can be undone. The Undo feature in the custom SGML editor is more like the second variation. It would be pointless, however, to publish its source code because of its tight coupling to the editor's document format.<P>

<h3>Decomposing</h3><P>

In working with a music-related program, I had to develop a custom editor that lets users change a musical score. Actually, the document is more like what musicians call a "lead sheet" because it consists of measures with quarter-note beats and chord symbols. Its editor allows the insertion of chords and the usual clipboard operations on one or more adjacent measures. After using it for a while, I realized that my music editor was in sore need of an Undo feature. Sometimes I just need to decompose.<P>

Comparing the very specific requirements of that SGML text editor with those of the music editor, I found that they have a lot in common when viewed from a higher level of abstraction. Both must remember the insertion, deletion, and replacement of arrays of objects in order to undo those actions upon demand. Both must store those undoable actions in a stack data structure so that the most recent action is the one undone.<P>

In the case of the SGML editor, the objects can be characters, strings, and SGML tags. This organization is typical of how a word-processing document is organized. The document is one huge array of text with interspersed commands that identify a document's organization and presentation. Users change the document by adding, changing, and deleting these elements.<P>

In the case of the music editor, the objects can be chords, tempo changes, repeats, rests, the song title, and rhythmic style changes. Ignoring the melody for this purpose, a song is an array of beats, grouped in measures, with each beat having a particular chord and, perhaps, one or more of the other events.<P>

I concluded that a generic <I>Undo</I> class library is an appropriate approach to this problem, and I set out to build one by using C++ templates. The code that accompanies this column is the implementation of that library. At the moment, I have implemented only object insertions and deletions, which satisfy the requirements of the music program as far as it has gone. I need to implement object replacement later. It is my intention that this class library could be used to implement a full Undo feature in any program that needed it.<P>

The library uses a variation of the generic programming model that STL uses. For an application to use the feature, the application must include a document class and what I will call here an object class. The document class maintains the document's buffer of data. The document buffer consists of some mixture of objects, each identifiable as a C++ intrinsic or user-defined type. The document must include two functions (three, when replace is implemented later) that permit the Undo feature to insert and delete arrays of objects. The application must then subclass two (three later) of Undo's classes to record the insertion and deletion actions to be stored for possible later undo.<P>

<h3>The Generic Undo Class Library</h3><P>

<a href="9612k.htm#0128_009e">Listing One</A> is undo.h, which contains most of the implementation of the generic class library. The first class, <I>UndoNode,</I> is not a template. It is the base class from which all undoable actions are derived. Since the class is not a template, a later class can instantiate an array of pointers to the class without needing template argument qualifiers.<P>

The next class is <I>UndoItem&lt;D,</I><I>T</I><I>&gt;,</I> which is a template base class for the undo actions. The D argument represents the application's document class, and the T argument represents the objects that can be inserted into and deleted from the document. The class contains a reference to the document class object, and two data members that all undo actions have in common: a pointer into the document buffer where the action occurred, and a count of the number of T objects involved in the action.<P>

Two classes derive from <I>UndoItem&lt;D,</I><I>T</I><I>&gt;</I>: <I>UndoInsertNode&lt;D,</I><I>T</I><I>&gt;</I> is a base class for insertions into the document, and <I>UndoDeleteNode&lt;D,</I><I>T</I><I>&gt;</I> is a base class for deletions from the document. Both are constructed with the pointer into the document, the count of items, and a <I>bool</I> variable that specifies whether a subsequent undo action stops after undoing this action or continues with the next action. Both classes override the pure virtual <I>Undo</I> function from the abstract base <I>UndoNode</I> class. When users choose the Undo command, the program calls the <I>Undo</I> function for the appropriate action class.<P>

The <I>UndoDeleteNode&lt;D,</I><I>T</I><I>&gt;</I> constructor stores the document reference and the pointer and count. Then the constructor allocates a buffer and makes a copy of what is being deleted so that an undo action can restore the deleted objects. This class's <I>Undo</I> function calls the document's <I>Insert</I> function passing the pointer and count. An application that uses this class library must provide a document class with an <I>Insert</I> function that accepts a pointer to its object class and a count of objects to insert. After calling <I>Insert</I>, the <I>Undo</I> function deletes the memory allocated for the buffer.<P>

The <I>UndoInsertNode&lt;D,</I><I>T</I><I>&gt;</I> constructor also stores the document reference and the pointer and count. Undoing an insertion does not require remembering any prior data values. This class's <I>Undo</I> function calls the document's <I>Delete</I> function passing the pointer and count. An application that uses this class library must provide a document class with a <I>Delete</I> function that accepts a pointer to its object class and a count of objects to delete.<P>

The third class in<a href="9612k.htm#0128_009f"> Listing One</A> declares the <I>UndoData</I> class. An application instantiates an object of a class derived from this class to contain the undo information. An uninitialized array of pointers to <I>UndoNode</I> objects constitutes the circular stack of undo actions. The <I>m_nCurrentUndo</I> data member is the stack pointer. The <I>m_nUndoCount</I> data member counts the number of undo actions stored. The <I>m_bUndoing</I> data member is true while the class is processing an undo request and false otherwise. Users of the class can use this value (returned by the <I>IsUndoing</I> member function) to prevent their Insert and Delete document functions from adding undo actions during an undo. The <I>IsUndoDataStored</I> function tells the application when there are any actions that can be undone. An application can use this information to enable and disable the Undo command.<P>

The application's Undo command calls <I>UndoData::UndoLastAction</I>, which does what its name implies.<P>

<a href="9612k.htm#0128_00a0">Listing Two</A> is undo.cpp, which contains the member functions for the <I>UndoData</I> class. The destructor deletes all remaining undo actions. The <I>AddUndoNode</I> function adds an action to the top of the stack. <I>UndoLastAction</I> pops the top undo action, calls its <I>Undo</I> function, and pops and calls lower ones until an anchored condition is found.<P>

<a href="9612k.htm#0128_00a1">Listing Three</A> is songundo.h, which represents part of an applications implementation of the undo feature with this library. The application subclasses the <I>UndoInsertNode&lt;D,</I><I>T</I><I>&gt;</I> and <I>UndoDeleteNode&lt;D,</I><I>T</I><I>&gt;</I> classes for each insertion and deletion action. The base class specifier provides the template arguments that identify the document and object classes. These subclasses need nothing more than a public constructor that passes the object pointer, count, and the anchor indicator to the base class.<P>

The <I>UndoSongData</I> class is an example of the class that you derive from <I>UndoData</I> and instantiate into your application. It consists mostly of member functions that add undoable actions to the stack. The application calls these member functions when an undoable delete is about to occur or an undoable insertion has just occurred.<P>

I have not tested this class library beyond the two applications I mentioned, but every indication is that, with the addition of an <I>UndoReplace</I> feature and perhaps an <I>UndoCommand</I> feature, this library would support most of the undo requirements of any application. Adding redo would be fairly simple. Redo is the inverse of undo, and the undo system could instantiate its own undo system.<P>

<P>

<P>

<h4><a name="0128_009b"><B>Example 1:</B> A shocker!</h4><P>

<pre>
char *p = 0;
delete p;      // fine, deletion 
of the null pointer
delete p;      // undefined, p 
may no longer be null
</pre>

<P>

<P>

<h4><a name="0128_009d"><B><a name="0128_009c">Example 2:</B> (a) Bjarne's first example; (b) Bjarne's second example.</h4><P>

<pre>
(a)     
Class Base {
         int user_count;
         // ...
     public:
         Base() : user_count(0) { connect(); }
         void connect() { user_count++; }
         void disconnect { if (--user_count==0) delete this; }
         // ...
     };

(b)     
void disconnect { if (--objp-&gt;user_count==0) delete objp; }
</pre>

<P>

<P>

<a name="0128_009f"><a name="0128_009e"><H3>Listing One</H3><P>

<PRE>
// --------- undo.h
#ifndef UNDO_H
#define UNDO_H

#define bool BOOL
#define false FALSE
#define true TRUE

class UndoNode  {
    bool m_bAnchor;     // undo action stream terminator
public:
    UndoNode(bool bStophere = true) : m_bAnchor(bStophere)
        { }
    virtual ~UndoNode() { }
    virtual void Undo() = 0;
    bool Anchor() const
        { return m_bAnchor; }
};
//---------------------------------------------------------------------------
template &lt;class D, class T&gt;
class UndoItem : public UndoNode    {
protected:
    D&amp;  m_rDoc;
    T*  m_pPosition;    // document position
    int m_nCount;       // item count
public:
  UndoItem(D&amp; rDoc,T* pPosition = 0,int nCount = 0,bool bStophere = true) : 
    UndoNode(bStophere),m_rDoc(rDoc),m_pPosition(pPosition),m_nCount(nCount)
        { }
    virtual ~UndoItem() { }
};
//--------------------------------------------------------------------------
template &lt;class D, class T&gt;
class UndoInsertNode : public UndoItem&lt;D, T&gt;    {
public:
    UndoInsertNode(D&amp; rDoc, T* pPosition, int nCount, bool bStophere) : 
        UndoItem&lt;D,T&gt;(rDoc, pPosition, nCount, bStophere)
        { }
    virtual ~UndoInsertNode() { }
    virtual void Undo()
    {
        m_rDoc.Delete(m_pPosition, m_nCount);
    }
};
//--------------------------------------------------------------------------
template &lt;class D, class T&gt;
class UndoDeleteNode : public UndoItem&lt;D, T&gt;    {
protected:
    T* m_pData;
public:
    UndoDeleteNode(D&amp; rDoc, T* pPosition, int nCount, bool bStophere) : 
        UndoItem&lt;D,T&gt;(rDoc, pPosition, nCount, bStophere)
    {
        m_pData = new T[nCount];
        for (int i = 0; i &lt; nCount; i++)
            *(m_pData + i) = *pPosition++;
    }
    virtual ~UndoDeleteNode()
    {
        delete [] m_pData;
    }
    virtual void Undo()
    {
        m_rDoc.Insert(m_pPosition, m_nCount, m_pData);
        delete [] m_pData;
        m_pData = 0;
    }
};
//---------------------------------------------------------------------------
const int maxUndos = 300;
class UndoData  {
    UndoNode* m_pUndoNode[maxUndos];
    int m_nCurrentUndo;
    int m_nUndoCount;
    bool m_bUndoing;
public:
    UndoData() : m_nCurrentUndo(0), m_nUndoCount(0), m_bUndoing(false)
        {   }
    ~UndoData();
    void AddUndoNode(UndoNode* pUndoNode);
    void UndoLastAction();
    bool IsUndoDataStored() const
        { return m_nUndoCount != 0; }
    bool IsUndoing() const
        { return m_bUndoing; }
};
#endif
</PRE>

<a name="0128_00a0"><H3>Listing Two</H3><P>

<PRE>// ----- undo.cpp
#include &quot;stdafx.h&quot;
#include &quot;undo.h&quot;

UndoData::~UndoData()
{
    while (m_nCurrentUndo &gt; 0)  {
        delete m_pUndoNode[--m_nCurrentUndo];
        --m_nUndoCount;
    }
    if (m_nUndoCount)   {
        m_nCurrentUndo = maxUndos;
        while (m_nUndoCount-- &gt; 0)
            delete m_pUndoNode[--m_nCurrentUndo];
    }
}
void UndoData::AddUndoNode(UndoNode* pUndoNode)
{
    if (m_nCurrentUndo == maxUndos)
        m_nCurrentUndo = 0;
    m_pUndoNode[m_nCurrentUndo++] = pUndoNode;
    if (m_nUndoCount &lt; maxUndos)
        m_nUndoCount++;
}
void UndoData::UndoLastAction()
{
    if (m_nUndoCount)   {
        m_bUndoing = true;
        bool bAnchor = true;
        do  {
            if (m_nCurrentUndo == 0)
                m_nCurrentUndo = maxUndos;
            m_pUndoNode[--m_nCurrentUndo]-&gt;Undo();
            bAnchor = m_pUndoNode[m_nCurrentUndo]-&gt;Anchor();
            delete m_pUndoNode[m_nCurrentUndo];
            --m_nUndoCount;
        } while (bAnchor == false);
        m_bUndoing = false;
    }
}
</PRE>

<a name="0128_00a1"><H3>Listing Three</H3>
<P><PRE>
// ------- songundo.h
#ifndef SONGUNDO_H
#define SONGUNDO_H

#include &quot;undo.h&quot;
#include &quot;song.h&quot;

// --------------------------------------------------------------------------
class UndoInsertEvents : public UndoInsertNode&lt;Song, Song::Event&gt;   {
public:
    UndoInsertEvents(Song::Event* pEvent, int nCount, BOOL bStophere) : 
      UndoInsertNode&lt;Song, Song::Event&gt;(theSong, pEvent, nCount, bStophere)
        {   }
};
// --------------------------------------------------------------------------
class UndoDeleteEvents : public UndoDeleteNode&lt;Song, Song::Event&gt;   {
public:
    UndoDeleteEvents(Song::Event* pEvent, int nCount, BOOL bStophere) : 
       UndoDeleteNode&lt;Song, Song::Event&gt;(theSong, pEvent, nCount, bStophere)
        {   }
};
// --------------------------------------------------------------------------
class UndoSongData : public UndoData    {
public:
    UndoSongData() { }
    void AddInsertMeasureUndo(Song::Event* pEvent, int nCount, 
                                                      BOOL bStophere = TRUE)
    {
        AddUndoNode(new UndoInsertEvents(pEvent, nCount, bStophere));
    }
    void AddDeleteMeasureUndo(Song::Event* pEvent, int nCount, 
                                                     BOOL bStophere = TRUE)
    {
        AddUndoNode(new UndoDeleteEvents(pEvent, nCount, bStophere));
    }
};
#endif

</PRE>




</BODY></HTML>
