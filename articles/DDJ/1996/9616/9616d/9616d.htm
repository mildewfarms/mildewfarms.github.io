<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>Visual Tools 96:  The Libero Programming Environment</TITLE></HEAD>
<body bgcolor="FFFFFF">
<P>

<h1>The Libero <P>
Development Environment</h1><P>

<h2>Visually building an HTML preprocessor <P>
in Perl</h2><P>

<P>

<P>

<h3>Pieter Hintjens</h3><P>

<P>
<i>Pieter, who is a programmer in Belgium, is the author of Libero. He can be contacted at
ph@imatix.com.</i></p><hr><P>

Libero is a language-independent visual-development environment that lets you design programs as state
diagrams. Once you've visually designed a finite-state machine description of the program logic, the Libero
programmable code-generator engine generates code in a specific language. The Libero environment
supports a number of languages, including ANSI C, UNIX shells (Korn shell, BASH, Bourne shell, C shell),
Awk, Perl, Visual Basic, Microsoft Test Basic, Cobol 74/85, and Microsoft 80x86 Assembler. To specify
the language, you write a new "schema" (a script or program) using Libero's schema language.<P>

Libero is particularly useful if you are designing systems that other programmers will implement. If your
program analyzes text and you don't have access to tools such as yacc, or if your program is a
communications handler with incoming and outgoing messages, Libero is a good choice. (I've used Libero for
TCP/IP servers in this way.) The tool is also useful for designing programs that control a device. In this
article, however, I'll use Perl with Libero to develop the HTML preprocessor that I used to prepare the
Libero documentation.<P>

When I put Libero online (http:// www.imatix.com), I discovered the mixed blessings of HTML. It is a
portable and convenient format for documentation, yet it takes work to maintain a large HTML
documentation kit. The most bothersome thing about HTML was editing lots of small files and keeping track
of references scattered throughout the documents.<P>

My solution is an HTML preprocessor called "htmlpp" (available electronically) that works somewhat like
the C preprocessor. Htmlpp (see <a href="19970293.htm">Figure 1</A>) lets you do the following:<P>

<P>
<ul>
<li>Define symbols, then use these symbols in the HTML text instead of hard-coded values.</li>
<li>Centralize symbols and other definitions by using <I>include</I> files.</li>
<li>Manage cross references between documents.</li>
<li>Break long documents into a series of real HTML pages.</li>
<li>Combine documents into "super documents."</li>
</ul>
<P>

Typically, I'll write a section of documentation as a text file, maybe 20 to 50 pages long, using HTML tags.
I insert preprocessor commands to divide the file into HTML pages, usually at every H2 level. Figure 2
shows such a file. Preprocessor commands start with a "." in the first column. Commands like
<I>.include</I> and <I>.define</I> work like their C preprocessor counterparts. The <I>.page</I> command
starts a new output HTML page. Symbols in the text are enclosed by <I>$( </I>and <I>)</I>.<P>

I wrote htmlpp in Perl, which is nearly perfect for this kind of work. For instance, parsing a <I>.define</I>
line and storing the result in a symbol table takes just two Perl statements. The first statement matches
the current line against a regular expression, and extracts the "interesting" parts (the symbol name and its
value). The second statement stores the value in an associative array called <I>$symbol</I><I>s</I>; see
<a href="9616d.htm#0292_012a">Listing One</A>.<P>

<h3>Getting Down to Work</h3><P>

When working with Libero, you first design a dialog, then generate a skeleton for the program. You
gradually refine these two components into a complete program. Here, I'll present a simplified version of
htmlpp that recognizes just the <I>.define</I> and <I>.include</I> commands, and lets you insert symbols in
the text.<a href="9616d.htm#0292_012b"> Listing Two(a)</A> shows how the dialog starts, while <a href="9616d.htm#0292_012c">Listing Two(b) </A>shows how the program starts.<P>

The dialog always begins by calling <I>initialise_the_program</I> to get an initial <I>event</I>. In this case,
this is either <I>Ok</I> (proceed as usual) or <I>Error</I> (the user did not specify an argument). The Perl
code sets <I>$the_next_event</I> to <I>$ok_event</I> or to <I>$error_event</I>. The <I>After-Init</I>
state takes the event and branches accordingly. The <I>Ok</I> branch calls three "code modules" (Perl
subroutines), then goes to another state. The <I>Error</I> branch ends the program. This is how a Libero
program works. Each state is like a C <I>switch</I> statement, testing the value of the event, and
branching accordingly.<P>

In <a href="9616d.htm#0292_012d">Listing Three(a)</A>, I use an associative array called
<I>keyword</I>. The index into the array is a word; the value of an array element is an event. I'll use this
array in<a href="9616d.htm#0292_012e"> Listing Three(b)</A> to parse a command line. The
<I>.include</I> command uses a document stack and an "indirect filehandle" to read from the current file. To
open and read a file in Perl, you normally use the code in<a href="9616d.htm#0292_012f"> Listing
Four</A>.<P>

To use an indirect filehandle, replace HANDLE with a variable name, which can take any distinct value. It is
good practice to use the actual filename as the value for the variable. This may be confusing at first, but it
works well. In htmlpp, the variable <I>$document</I> holds the current input file-name and filehandle.<P>

<a href="9616d.htm#0292_0130">Listing Five</A> reads the next line and checks whether or not it
starts with a preprocessor command. This code shows some useful Perl techniques. You use regular
expressions, like <I>if (/^$/),</I> to determine what the line looks like. This is familiar to awk and sed
programmers. I use the <I>defined</I> function to test if the command is recognized. The code in <a href="9616d.htm#0292_0131">Listing Five</A> results in one of the following events:
<I>Blank-Line</I>, <I>Comment</I>, <I>Body-Text</I>, <I>Include</I>, <I>Define</I>, or <I>Finished</I>.
You handle each of these events accordingly in the state <I>Have-Lin</I><I>e</I>; see<a href="9616d.htm#0292_0132"> Listing Six</A>. The state takes the event and branches accordingly.
For instance, if you read a line starting with <I>.define</I>, you branch to <a href="9616d.htm#0292_0134">Listing Seven</A>. You can read this as "when you get a <I>Define
</I>event in this state, call these three code modules, then go to the next state: <I>Have-Line</I>."<P>

The Perl code in<a href="9616d.htm#0292_0135"> Listing Eight</A> parses a <I>.define</I> line. The
regular expression is easy to understand when you break it into pieces; see<a href="9616d.htm#0292_0133"> Table 1</A>. In <a href="9616d.htm#0292_0136">Listing
Nine</A>, I put parentheses around the pieces I need to use$1, $2, and so on. This code replaces symbols
by their value. The special Perl variables <I>$</I>' and <I>$</I>' hold everything before and after the last
regular expression. This is a nice way to replace part of a stringyou match the part you want to replace,
then glue <I>$</I>' and <I>$' </I>around the replacement string.<P>

A good way to handle errors is to "raise an exception" and provide the dialog with an "exception event."
When you raise an exception, the dialog stops executing the list of code modules and handles the exception
event in the current state, like a normal event. <a href="9616d.htm#0292_03b3">Listing Ten(a)</A>,
for instance, shows how to handle a (fatal) syntax error. Note that you call <I><FONT FACE="Times NewRoman" SIZE=3>&amp;</I><I></FONT>raise_exception</I> to signal an exception event. Iusually like to use
an event called <I>Exception</I>, and stick this in the <I>Defaults</I> state; see <a href="9616d.htm#0292_03b3">Listing Ten(b)</A>. All states "inherit" the events in the
<I>Defaults</I> state, unless they define the events themselves. The name <I>Defaults</I> is standard.<P>

You use the associative array <I>file_is_open</I> to detect circular <I>.includ</I><I>e</I>s. When you have
a valid <I>.include</I> command, you stack the current document name and take the new document name
from the <I>.include</I> line; see <a href="9616d.htm#0292_03b4">Listing Eleven(a)</A>. When you
reach the end of a document, you close the document, then pop the previous document name off the stack.
<a href="9616d.htm#0292_03b4">Listing Eleven(b</A>) shows the "?:" operator, which is good as a
short If/Else construct. You don't need to reopen the previous file; just continue reading. When the last file
is finished, the dialog halts; see<a href="9616d.htm#0292_03b5"> Listing Twelve</A>. The complete
htmlpp program (available at http://www.imatix.com) is more complexit builds tables of contents, creates
hyper-reference tags, and so on. It can be slow and memory hungry, but it does a great job.<P>


<P>

<h4><a name="0292_0133"><B>Table 1:</B> Parsing regular expressions.</h4><P>

<pre>
     Expression           Description

     ^\.                  Start of line followed by a dot.
     \w+\s+               A word followed by whitespace.
     [A-Za-z0-9-\._]+     A name consisting of letters, digits, -._.
     \s+                  Whitespace.
     .*                   The rest of the line.
</pre>

<P>

<B>Figure 1: </B>Developing htmlpp in Libero.<P>

<P>

<P>

<h4><B>Figure 2:</B> Sample HTML file to be processed.</h4><P>

<pre>
.include prelude.def
.define version 2.12
&lt;H1&gt;$(TITLE)&lt;/H1&gt;
.include contents.def
&lt;H2&gt;Summary&lt;/H2&gt;
&lt;UL&gt;
&lt;LI&gt;Libero is a Programmer's Tool and Code Generator.&lt;/LI&gt;
&lt;LI&gt;It supports lots of languages.&lt;/LI&gt;
&lt;LI&gt;It runs on lots of systems.&lt;/LI&gt;
&lt;LI&gt;Current version: $(version).&lt;/LI&gt;
&lt;/UL<FONT FACE="Helvetica" SIZE=3>&gt;</FONT>
</pre>

<P>

<P>

<P>

<a name="0292_012a"><B>Listing One</B>
<pre>
/^\.\w+\s+([A-Za-z0-9-\._]+)\s+(.*)/
$symbols {$1} = $2;
</pre>

<a name="0292_012b"><a name="0292_012c"><B>Listing Two</B>
<pre>
(a)
-schema=lrschema.pl

After-Init:
    (--) Ok                                 -&gt; Have-Line
          + Initialise-Program-Data
          + Open-Main-Document
          + Get-Next-Document-Line
    (--) Error                              -&gt;
          + Terminate-The-Program
(b)
require 'htmlpp1.d';                    #   Include dialog interpreter

sub initialise_the_program
{
    print &quot;htmlpp 1.0 - by Pieter Hintjens\n&quot;;

    if ($#ARGV == 0) {                  #   Exactly 1 argument in @ARGV[0]?
        $main_document = @ARGV [0];
        $the_next_event = $ok_event;
    } else {
        print &quot;syntax: htmlpp &lt;filename&gt;\n&quot;;
        $the_next_event = $error_event;
    }
}

</pre>
<a name="0292_012e"><a name="0292_012d"><B>Listing Three</B>
<pre>
(a)
sub initialise_program_data
{
    #   These are the preprocessor keywords that we recognise
    $keyword {&quot;define&quot;}  = $define_event;
    $keyword {&quot;include&quot;} = $include_event;
}
(b)
sub open_main_document
{
    $document = $main_document;
    &amp;open_the_document;
}
 sub open_the_document

{
    #   We use an indirect filehandle, whose name is the document name.
    #   To read from the file, we use &lt;$document&gt;
    if (open ($document, $document)) {
        $file_is_open {$document} = 1;  #   Keep track of open documents
    } else {
        print &quot;htmlpp E: ($document $.) can't open $document: $!&quot;;
        &amp;raise_exception ($exception_event);
    }
}

</pre>
<a name="0292_012f"><B>Listing Four</B>
<pre>
open (HANDLE, &quot;somefile.txt&quot;);
$line = &lt;HANDLE&gt;;
</pre>

<a name="0292_0131"><a name="0292_0130"><B>Listing Five</B>
<pre>
sub get_next_document_line
{
    if ($_ = &lt;$document&gt;) {             #   Get next line of input
        chop;                           #   Remove trailing newline
        if (/^$/) {                     #   Blank lines
            $the_next_event = $blank_line_event;
        }
        elsif (/^\.-/) {                #   Comments
            $the_next_event = $comment_event;
        }
        elsif (/^\./) {                 #   Line starts with a dot
            /^\.(\w+)/;                 #   Get word after dot
            if (defined ($keyword {$1})) {
                $the_next_event = $keyword {$1};
            } else {
                &amp;syntax_error;
            }
        } else {
            $the_next_event = $body_text_event;
        }
    } else {
        $the_next_event = $finished_event;

    }
}

</pre>
<a name="0292_0132"><B>Listing Six</B>
<pre>
Have-Line:
    (--) Body-Text                          -&gt; Have-Line
          + Expand-Symbols-In-Line
          + Get-Next-Document-Line
    (--) Blank-Line                         -&gt; Have-Line
          + Get-Next-Document-Line
    (--) Comment                            -&gt; Have-Line
          + Get-Next-Document-Line
    (--) Define                             -&gt; Have-Line
          + Expand-Symbols-In-Line
          + Store-Symbol-Definition
          + Get-Next-Document-Line
    (--) Include                            -&gt; Have-Line
          + Expand-Symbols-In-Line
          + Take-Include-File-Name
          + Open-The-Document
          + Get-Next-Document-Line
    (--) Finished                           -&gt; Doc-Unstacked
          + Close-The-Document
          + Unstack-Previous-Document

</pre>
<a name="0292_0134"><B>Listing Seven</B>
<pre>
    (--) Define                             -&gt; Have-Line
          + Expand-Symbols-In-Line
          + Store-Symbol-Definition
          + Get-Next-Document-Line
</pre>

<a name="0292_0135"><B>Listing Eight</B>
<pre>
sub store_symbol_definition
{
    #   Symbol name can consist of letters, digits, -._
    #   We re-parse the line to extract the symbol name and value:

    if (/^\.\w+\s+([A-Za-z0-9-\._]+)\s+(.*)/) {
        #   Stick name and value into associative array '$symbols'
        $symbols {$1} = $2;
    } else {
        &amp;syntax_error;
    }
}

</pre>
<a name="0292_0136"><B>Listing Nine</B>
<pre>
sub expand_symbols_in_line
{
    #   Expands symbols in $_ variable
    #
    #   Repeatedly expand symbols like this:
    #   $(xxx) - value of variable
    #
    #   Note that the entire symbol must be on one line; if the symbol or
    #   its label is broken over two lines it won't be expanded.

    for (;;) {
        if (/\$\(([A-Za-z0-9-_\.]+)\)/) {
            $_ = $`.&amp;valueof ($1).$';
        } else {
            last;
        }
    }
}
#   Subroutine returns the value of the specified symbol; it issues a
#   warning message and returns 'UNDEF' if the symbol is not defined.
#
sub valueof {     local ($symbol_name) = &quot;@_&quot;;        #   Argument is symbol name

    defined ($symbols {$symbol_name}) &amp;&amp; return $symbols {$symbol_name};

    print &quot;$_\n&quot;;
    print &quot;htmlpp E: ($document $.) undefined symbol \&quot;$symbol_name\&quot;\n&quot;;
    $symbols {$symbol_name} = &quot;UNDEF&quot;;
    return $symbols {$symbol_name};
}
</pre>

<a name="0292_03b3"><B>Listing Ten</B>
<pre>
(a)
sub syntax_error {
    print &quot;$_\n&quot;;
    print &quot;htmlpp E: ($document $.) syntax error\n&quot;;
    &amp;raise_exception ($exception_event);
}
(b)
Defaults:
    (--) Exception                          -&gt;
          + Terminate-The-Program


</pre>
<a name="0292_03b4"><B>Listing Eleven</B>
<pre>
(a)
sub take_include_file_name
{
    #   Get filename after .include
    if (/^\.\w+\s+(\S+)/) {
        if ($file_is_open {$1}) {
            print &quot;$_\n&quot;;
            print &quot;htmlpp E: ($document $.) $1 is already open&quot;;
            &amp;raise_exception ($exception_event);
        };
        #   Save current document name and switch to new document
        push (@document_stack, $document);
        $document = $1;
    } else {
        &amp;syntax_error;
    }
}
(b)
    (--) Finished                           -&gt; Doc-Unstacked
          + Close-The-Document
          + Unstack-Previous-Document

sub close_the_document
{
    close ($document);     undef $file_is_open {$document};
}

sub unstack_previous_document

{
    $document = pop (@document_stack);
    $the_next_event = $document eq &quot;&quot;? $finished_event: $ok_event;
}

</pre>
<a name="0292_03b5"><B>Listing Twelve</B>
<pre>
Doc-Unstacked:
    (--) Ok                                 -&gt; Have-Line
          + Get-Next-Document-Line
    (--) Finished                           -&gt; Have-Line
          + Terminate-The-Program

</pre>
</BODY></HTML>
