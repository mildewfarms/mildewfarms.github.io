<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>Visual Tools 96:  Adding Power to Powerbuilder</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>Adding Power to PowerBuilder</h1><P>

<h2>An awk-like user object for string parsing</h2><P>

<h3>Baylor Wetzel</h3><P>

<P>

<P>
<i>Baylor is a client/server developer for Born Information Services Group. He can be contacted at
baylor.wetzel @born.com.</i></p><hr><P>

PowerBuilder is a visual-development tool for creating client/server applications. Although it is cross
platformsupporting Windows 3.1/95/NT, Macintosh, and UNIXPowerBuilder, nevertheless, does not offer
the wide assortment of tools that UNIX developers have come to rely upon. For instance, one of the most
common (and useful) UNIX tools is awk, a programming language used to parse large numbers of strings. An
awk program such as <I>{ if ($1 == &quot;Hello&quot;) print $0 }</I>, for example, says that if the first
word of the line is <I>&quot;Hello&quot;</I> (<I>$1</I>), then print the entire line (<I>$0</I>). In awk, the
<I>$</I> represents a field in the current line, with field <I>0</I> meaning the whole line. Thus, in the
sentence <I>&quot;Hello World, I'm written in awk&quot;</I>, <I>$1</I> is <I>&quot;Hello,&quot;</I>
<I>$2</I> is <I>&quot;World,&quot;</I> all the way through <I>$6</I>,
<I>&quot;aw</I><I>k</I>.&quot;<P>

Awk can also tell you how many words were in a line (<I>$n</I><I>f</I>) and the current line number
(<I>$nr</I>). Awk can also tell where one word ends and another begins (usually by looking for a space,
tab, or comma) with <I>$fs</I>, the field separator.<P>

Awk has three basic events: <I>Begin</I>, <I>Scan</I>, and <I>End</I>. Code in <I>Begin</I> occurs before
the file (<I>$FileName</I>) is processed, <I>Scan</I> occurs as each line is read, and <I>End</I> occurs
when all the records have been read. When <I>Scan</I> is triggered, the current line will have been parsed
into a number of fields (<I>$1</I> to <I>$n</I><I>f</I>). This is where you can look for useful things, such
as the number of lines that contain "EXE" in field two, or contain the word "Asia" in field three.<P>

Awk does exist for the PC platform, but integrating it with PowerBuilder isn't easy. In this article, I'll
present an awk-like nonvisual user object that can do the same things awk can do, but with the level of
integration with databases and graphical objects that UNIX programmers dream about. Implementation of the
awk user object for PowerBuilder 4.x and 5.0 are available electronically.<P>

<h3>PowerBuilder Objects</h3><P>

There are two basic types of PowerBuilder objects: visual and nonvisual. There are several types of visual
objects, from standard controls (in which you subclass a standard PowerBuilder control, such as a button
or listbox) to custom objects (a collection of standard and other custom visual objects).<P>

Nonvisual objects, on the other hand, are the equivalent of a class in many other languages. Nonvisual
objects have three items of interestvariables, functions, and events. In PowerBuilder, you can define the
values of those variables as unique to that instance, or shared across all instances. You can also declare
them as public, private, or protected.<P>

In PowerBuilder 4.x, a function was like the standard function/method found in most languages, complete
with parameters and return values. Events allowed PowerBuilder to fit into Windows' asynchronous,
message-driven paradigm. Up through PowerBuilder 4.x, events did not take parameters and did not have
return codes.<P>

In PowerBuilder 5.0, events take parameters and have return codes, just like functions, and functions can
be called synchronously (triggered) or asynchronously (posted), just like events.<P>

There are now very few differences between PowerBuilder functions and events. For the record,
PowerBuilder events are cumulative, meaning that, unless you explicitly override the ancestor's event,
executing your event executes the ancestor's code, too (the ancestor's code always runs first). In addition,
events act like they have a virtual stub. With functions, you need to define the function in the class or an
ancestor of that class, or risk the compiler's wrath. With events, you can write code to execute an event,
whether the event exists or not, without penalty at compile or run time.<P>

<h3>Building the Awk Object</h3><P>

The first step to building an awk object is to go into the User Object Painter, select New (see <a href="1997029b.htm">Figure 1</A>), and select the Nonvisual user-object option. You'll get a blank
square on the screen. With PowerBuilder's nonvisual objects, the object being displayed will never show up
in a program; it is only there so you can click on it and enter script for the events. You can then add events
by selecting Declare/User Events.<P>

For the awk object, I'll start by adding four events<I>ue_begin</I> ( <I>pbm_custom0</I><I>1</I>),
<I>ue_scan</I> (<I>pbm_custom0</I><I>2</I>), <I>ue_end</I> (<I>pbm_custom03</I>), and
<I>ue_error</I> (<I>pbm_custom0</I><I>4</I>); see <a href="1997029c.htm">Figure 2</A>. (<I>ue_</I>
stands for "user events"). <P>

It's a good idea to have naming standards to differentiate your events (and functions and controls) from
PowerBuilder's. Also, you will avoid problems when naming an event "end," which is a
PowerBuilder-reserved word.<P>

You'll also need instance variables, so go to the Instance Variable Painter and enter <a href="9616f.htm#029a_013a">Listing One</A>); for functions, create <a href="9616f.htm#029a_013b">Listing Two</A>, where <I>is_file_name</I> will be the name of the
file you want to read through. Since you'll need some way of knowing when you need to do that, declare a
user-object function called <I>start()</I> (declare it as public without return type and it will be a
user-object subroutine). This function looks like <a href="9616f.htm#029a_013c">Listing
Three</A>. <I>Start()</I> calls <I>parse</I><I>_</I><I>file()</I>, which opens the file and executes the
<I>ue_begin</I> event. It then reads in a line and parses it into tokens, which are stored in an array. It then
triggers the <I>ue_scan</I> event. It continues this until the end of the file, where it closes the file and
triggers the <I>ue_end</I> event; see<a href="9616f.htm#029a_013d"> Listing Four</A>.<P>

The heart of this routine is the <I>parse_line()</I> function. You would normally consider this an internal
(and therefore protected) function. However, since you'll want to parse things other than files, you make
<I>parse_line</I> a public function. The function will return the number of fields; see <a href="9616f.htm#029a_013e">Listing Five</A>. The rest of the functions simply return the values
stored in the protected variables; see<a href="9616f.htm#029a_013f"> Listing Six</A>. As with
any PowerBuilder nonvisual user object, you'll have to declare a variable of type <I>uo_nv_awk</I> (<a href="9616f.htm#029a_0140">Listing Seven</A>), then instantiate it. At this point, put the code in
the events defined for the object; see <a href="1997029d.htm">Figure 3</A>.<P>

After that, to use the awk object, just give it a filename and call <I>start()</I>. Now you can do just about
anything those UNIX guys can think of, plus a little moreUNIX awk can't link to a visual-programming tool
such as PowerBuilder, and UNIX awk can't be inherited from and changed.<P>

<P>

<P>

<B>Figure 1:</B> The User Object Painter.<P>

<B>Figure 2:</B> Declaring user events.<P>

<B>Figure 3:</B> Coding the user events.<P>

<P>

For More Information<P>

<P>

Powersoft<P>

561 Virginia Road<P>

Concord, MA 01742-2732<P>

508-287-1500<P>

http://www.powersoft.com<P>

<P>

<a name="029a_013a"><H4>Listing One</H4>
<pre>
Protected:
int ii_num_fields   // Equiv of $nf
long    il_num_lines        // Equiv of $nr
int ii_file_handle  // File Handle
string  is_current_line // Equiv of $0
string  isa_fields[]        // Fields

Public:
string  is_file_name
int ii_error_status

/* Error Return Code Constants */
int NO_ERROR        =  0
int NO_FILE     = -1
int FILE_NOT_EXIST  = -2
int CANNOT_OPEN_FILE    = -3
int FILE_READ_ERROR = -4
int INVALID_FIELD   = -5

</pre>
<a name="029a_013b"><H4>Listing Two</H4>
<pre>
public string field( int ai_field )
public int nf( )
public long nr( )
protected parse_file( )
public int parse_line( string as_line )
public start( )

</pre>
<a name="029a_013c"><H4>Listing  Three</H4>
<pre>
/* Make sure they set the file name */
IF ( is_file_name = &quot;&quot; ) THEN
    ii_error_status = NO_FILE
    TriggerEvent( &quot;ue_error&quot; )
    return
END IF
/* Open the file, read only in line mode */
ii_file_handle = FileOpen(is_file_name, LineMode!, Read!)
IF ( ii_file_handle = -1 ) THEN
    ii_error_status = CANNOT_OPEN_FILE
    TriggerEvent( &quot;ue_error&quot; )
    return
END IF
parse_file( )

</pre>
<a name="029a_013d"><H4>Listing  Four</H4>
<pre>
/* FileRead return types */
int     END_OF_FILE = -100
int READ_ERROR  = -1
int NO_CHAR     =  0
int li_num_char_read

/* We haven't read anything yet, so set the number of lines to 0 */

il_num_lines = 0

/* Start in the Begin event */
TriggerEvent( &quot;ue_begin&quot; )

/* Read through this until we hit the end of the file */
DO
    li_num_char_read = FileRead( ii_file_handle, is_current_line )
    CHOOSE CASE li_num_char_read
        CASE READ_ERROR
            ii_error_status = FILE_READ_ERROR
            TriggerEvent( &quot;ue_error&quot; )
        CASE END_OF_FILE
            // Nothing, the loop will terminate
        CASE ELSE
            parse_line( is_current_line )
            il_num_lines = il_num_lines + 1
            TriggerEvent( &quot;ue_scan&quot; )
    END CHOOSE
LOOP WHILE ( li_num_char_read &lt;&gt; END_OF_FILE )

FileClose( ii_file_handle )
TriggerEvent( &quot;ue_end&quot; )

</pre>
<a name="029a_013e"><H4>Listing  Five</H4>
<pre>
int NO_MORE_DELIMITERS = 0  // We've hit the end of the line
long ll_pos         // position of the delimiter within the string

/* We are just starting, so set the number of fields to 0 */
ii_num_fields = 0

/* Get the string ready */
as_line = Trim( as_line )

/* Figure out where the first delimiter is */
ll_pos = Pos( as_line, &quot; &quot; )

/* Parse until position is 0 (which means 1 more record exists) */
DO WHILE ( ll_pos &lt;&gt; NO_MORE_DELIMITERS )
    /* We've found one, so increase our field counter */
    ii_num_fields = ii_num_fields + 1

    /* Store the field */
    isa_fields[ii_num_fields] = Trim( Left( as_line, ll_pos))

    /* Remove that part from our string */
    as_line = Trim( mid( as_line, ll_pos ))
    /* And find the next delimiter - if 0, allow one more go-round */
    ll_pos = Pos( as_line, &quot; &quot;)
LOOP
/* One more record may be left, and if so, store it */
IF ( as_line &lt;&gt; &quot;&quot; ) THEN
    ii_num_fields = ii_num_fields + 1
    isa_fields[ii_num_fields] = Trim( as_line )

END IF
return ii_num_fields

</pre>
<a name="029a_013f"><H4>Listing  Six</H4>
<pre>
public string field( int ai_field ):
CHOOSE CASE ai_field
    CASE 0
        return is_current_line
    CASE 1 to nf( )
        return isa_fields [ ai_field ]
    CASE ELSE
        ii_error_status = INVALID_FIELD
        TriggerEvent( &quot;ue_error&quot; )
        return &quot;&quot;
END CHOOSE

public int nf( ):
return ii_num_fields

public long nr( ):
return il_num_lines

</pre>
<a name="029a_0140"><H4>Listing  Seven</H4>
<pre>
int     i
uo_nv_awk   luo_awk
luo_awk = CREATE uo_nv_awk

luo_awk.parse_line( 'Hello World' )
FOR I = 1 TO luo_awk.nf( )
    messagebox( 'test', 'field '+string(i)+' is '+luo_awk.field( i ) )
NEXT

DESTROY iuo_nv_awk
</pre>



</BODY></HTML>
