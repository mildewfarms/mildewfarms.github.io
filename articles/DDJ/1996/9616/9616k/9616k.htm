<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>Visual Tools 96:  The Software Engineer</TITLE></HEAD>
<body bgcolor="FFFFFF">
<P>

<h1>What Is An Object?</h1><P>

<P>

<FONT FACE="Helvetica" SIZE=3> </FONT><P>

<h3>Allen Holub</h3><P>

<P>

<P>
<i>Allen is a programmer, educator, and OO design consultant. He can be reached at http://www.holub.com or at allen@<P>
holub.com.</i></p><hr><P>

<P>

Bjarne Stroustrup once characterized object-oriented (OO) programming as "buzzword-oriented programming," and certainly one of the most abused (or at least misunderstood) buzzwords in the pack is "object" itself. Since the idea of an object is so central, a discussion of what exactly an "object" is seems in order.<P>

First and foremost, an object is a collection of capabilities. In practical terms, this means that an object is a collection of functions that implement the capabilities, but the emphasis must be on what an object can do -- what capabilities does it have -- not on how those capabilities are implemented. Of course, most objects will require some data in order to implement their capabilities, but the make up of that data is -- or at least should be -- irrelevant. The capabilities are exercised by sending the object a "message" that asks the object to do something. You shouldn't care what fields are inside the class definition. More to the point, you should be able to radically change what's inside the class definition, and as long as the interface (the message handlers) isn't affected, the users of the class will be unaffected. Let's look at a few examples.<P>

<h3>An ATM Example</h3><P>

Many books use an ATM machine to demonstrate OO concepts, not because any of us will be implementing ATMs, but because an ATM is a good analogue for both OO and client/server architectures. Look at the central bank computer as a server object and an ATM as a client object. Most procedural database programmers would look at the server as a repository of data and the client as a requester of the data. Such a programmer might approach the problem of an ATM transaction as follows:<P>

<P>

1.The user walks up to a machine, inserts the card, and punches in a PIN.<P>

2.The ATM formulates a query of the form "Give me the PIN associated with this card," then verifies that it matches the one provided by the user. The ATM sends the PIN to the server as a string, but the returned number is stored in a 16-bit <I>int </I>to make the comparison easier.<P>

3.The user then requests a withdrawal.<P>

4.The ATM formulates another query, this time: "Give me the account balance." It then stores the resulting balance in a 32-bit <I>float.</I><P>

<P>

If the balance is large enough, the machine dispenses some cash, then tells the ATM to "Update the balance" to the original amount less the amount of the withdrawal. (This isn't how real ATM machines work, by the way.) So what's wrong with this picture? A 32-bit <I>float </I>can represent, at most, 2 gigabucks (assuming no cents and one sign bit). What happens when Bill Gates walks into the bank wanting to open an account? Last time I looked, he was worth about 12 gigabucks, and Bill has no intention of giving a penny away any time soon, so that won't help. Similarly, the 16-bit <I>int </I>used for the PIN can hold, at most, four decimal digits. What if you need to change to a five-digit PIN? The only recourse is to change the ROMs in every ATM in the world (since there's no telling which one Bill will use), to use 64-bit <I>doubl</I><I>e</I>s instead of 32-bit <I>floa</I><I>t</I>s to hold account balances, and to 32-bit <I>lon</I><I>g</I>s to hold five-digit PINs. That's an enormous maintenance problem, of course.<P>

A similar situation exists in most procedural programs. Change the database schema or the definitions of a few central data types, and virtually every subroutine in the program might have to be rewritten. It's exactly this sort of maintenance nightmare that OO programming aims to solve. To see how, let's recast the earlier problem in an object-oriented way. Look at the central server as an object that supports two capabilities -- verifying a PIN and authorizing a transaction. The handshake now occurs as follows:<P>

<P>

1.The ATM gets the PIN and then asks the server to verify it; that is, it sends the message: "Is this the correct PIN for this card?"<P>

2.The server answers back with "Yes" or "No."<P>

3.The user then request a withdrawal, and the ATM asks the server to authorize the withdrawal by sending a "Can this person withdraw this amount?" message to the server.<P>

4.The server, again, comes back with "Yes" or "No."<P>

<P>

No data (account balances or PINs) are being shipped to the ATM, so there's no need to change them when the server code changes. (Data can be sent to the server as strings.) The maintenance manager is happily sleeping in the back office instead of running around changing ROMs.<P>

<h3>OO and C/C++</h3><P>

A second example highlights one of the biggest mistakes made by C programmers when they move from C to C++. C++ is really just C with a few features added to make it easier to implement an object-oriented design. I, for one, think that there's absolutely no reason to use C++ unless you are indeed implementing an OO design -- the language has so many problems that's it's not worth messing with it if you aren't going to take advantage of its strengths. You're better off just using C. (On the other hand, if you are doing an OO design, C++ makes the implementation dramatically easier.) Many C programmers try to program in C++ as if they were programming in C, however, implementing procedural systems in C++ rather than OO systems. This practice tends to produce awful code.<P>

One of the most common problems is a misinformed attempt to turn an existing <I>struct </I>definition into a class by making the data private and then providing a <I>get </I>and <I>set </I>function for each field. This is not object orientation -- it's just a very complicated way to access a field that could be more easily accessed with a dot or arrow. In an OO system, the data wouldn't be accessed at all by nonmembers of the class. Rather, messages sent to an object would request that the object exercise some capability, and the message handler might use the data members of the class to do its job. Remember, <I>struc</I><I>t</I>s<I> </I>and classes are very different at the design level. A <I>struct </I>is a collection of data, a class is a collection of capabilities.<P>

I saw a good example of this problem in a human-resources package that the programmers thought they were moving to OO. They took an existing <I>"employee" </I>record and tried to transmogrify it into an <I>employee </I>class by making the fields private and providing <I>get </I>and <I>set </I>functions. One problem is that an <I>employee </I>class will almost certainly have a <I>salary </I>attribute, and unfortunately, the original "employee" record had a "salary" field, so the programmers equated to the two. An attribute is not the same as a field, however. An attribute is a defining characteristic of an object. A <I>salary </I>serves to differentiate an <I>employee </I>from a generic <I>person, </I>for example. Without the <I>salary, </I>there would be no difference between an <I>employee </I>and a <I>person. </I>Moreover, an attribute does not necessarily map to a field in the class. The <I>salary </I>might be stored in an external database, for example, with the <I>employee </I>storing only the information needed to retrieve the attribute from the database. If the <I>employee </I>does store the salary internally, it might be stored in a <I>float</I>, a <I>double</I>, a binary-coded decimal array, a string -- there's no telling. What, then, could a <I>get_salary </I>function return? One of the main tenants of OO design is that it should be possible to radically modify the private components of a class definition without affecting the users of the class at all. The <I>salary </I>field might be a <I>float </I>today, but there's no guarantee that it will stay that way. Similarly, the matching <I>get_salary </I>function might return a <I>float </I>today, but what if the internal representation changed in such a way that a <I>float </I>wouldn't work anymore? Say, for example, you needed to return an object of type <I>money </I>which worked like a <I>float </I>but handled the round-off-error-on-pennies problem. Changing the function's return value would break every subroutine that called the function. It's exactly this rippling effect of a change that OO techniques are meant to avoid.<P>

What the programmers should have done is decided what capabilities the <I>em</I><I>ployee </I>has -- what it can do, not what fields it has. Put another way, you should never access an attribute directly, rather you should ask the object to do something with its attributes for you. In the case of an <I>employee, </I>there should be no message of the form "Give me your salary." You should not extract the attribute from an object in order to do something with it (like draw it in a window). Rather, you should tell the object itself to do the operation ("Print your salary in this window"). The same reasoning would apply to a name: not, "Give me your name," but rather "Draw your name here." This way, the way that the attribute is stored inside the object is utterly irrelevant. As long as the salary gets printed, you should not care how it's stored.<P>

Still, sometimes you need to extract an attribute from an object. The salary might be needed by a <I>payroll_department </I>class to generate a paycheck, for example, and it might not be appropriate for an <I>employee </I>object to control the amount of its own paycheck. Though there are several solutions to this problem, the best probably would be for the <I>payroll_department </I>class to ask the <I>employee </I>for its salary. The salary should be encapsulated in a <I>salary </I>object, however, and the <I>salary </I>object would implement all the capabilities needed to compute a paycheck (such as "Divide yourself by," "Subtract this from yourself," and of course, "Draw yourself in this window"). This way, the representation of the salary is still hidden. The returned <I>salary </I>object should, of course, be a constant. You don't want a <I>payroll_department </I>to be able to modify a <I>salary, </I>and you don't want the exposed <I>salary </I>to be different from the one stored in the <I>employee.</I><P>

A final example of this structure is a <I>string </I>class, which should expose no information about how the characters are stored internally. There should be no <I>get </I>buffer function in your <I>string </I>class, for example. In C++, you should have no conversion from <I>string </I>to <I>char</I><I>*</I><I> </I>or equivalent. All of the C functions that work on strings should be members of the <I>string </I>class. Not: "Give me your buffer so I can print it," but "Print yourself." Not: "Give me your buffer so I can use <I>strcmp() </I>to compare you with another string" but "Compare yourself against this other string." This way you are completely isolated from the way that the string stores characters internally. A character could be stored in a <I>char, wchar_t, </I>a multibyte character string, or something that nobody's thought of yet -- it doesn't matter. In the case of compare-yourself, the string could even adjust the comparison algorithms to reflect the language being used (French, English, Japanese, or whatever).<P>

This structure implies, of course, that there are no functions in the system that take <I>char</I><I>*</I> arguments -- all strings must be <I>string </I>objects. The only place that <I>char</I><I>* </I>would appear is an argument to a <I>string</I>-class constructor. And that's another aspect of OO systems -- they tend to be all-or-nothing propositions. Everything must be a <I>string </I>object: There's no way to mix <I>string </I>objects with arrays of <I>char </I>and get the maintenance advantage promised by object orientation.<P>

<h3>Conclusion</h3><P>

The point of all this is that you can now make changes to the structure of an object without affecting any of the code that uses the object -- and that's one of the main strengths of an object-oriented approach. Changes made in one place are highly localized (as are bugs). This localization not only makes code easier to maintain, but also easier to debug and to write initially.<P>

</BODY></HTML>
