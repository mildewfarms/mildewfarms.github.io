<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>Visual Tools 96:  Software and the Law</TITLE></HEAD>
<body bgcolor="FFFFFF">
<P>

<h1>Patent Guidelines <P>
for Software and <P>
Display Icons</h1><P>

<P>

<h3>Marc E. Brown</h3><P>

<P>

<P>
<i>Marc is a patent attorney and shareholder in the intellectual-property law firm of Poms, Smith, Lande &amp; Rose in Los Angeles, CA. Marc specializes in computer law and can be contacted at 73414.1226@compuserve.com.</i></p><hr><P>

<P>

Patents often are among a company's most valued assets. They protect the company's competitive position, increase its value, and can be used as an effective marketing tool. A large patent portfolio can also deter competitors' lawsuits by creating concern over counterclaims for patent infringement.<P>

The U.S. Patent Office has recently released final guidelines for determining when to issue patents for software and display icons. The final guidelines are surprising. It was thought that there would be broad availability for software patents, but the guidelines do not clearly provide for this availability. However, the guidelines have authorized display-icon patents, which is an area of "technology" that many had thought was unpatentable.<P>

<h3>The Software Guidelines</h3><P>

Our Constitution directs Congress to "promote the progress of science and useful arts, by securing for limited times to inventors...the exclusive right to their...discoveries." Congress did so by enacting the Patent Act, among other statutory schemes.<P>

The Patent Act did not authorize a patent for every type of idea. According to the Act, a patent could only be granted for a "process, machine, manufacture or composition of matter."<P>

In 1972, our Supreme Court said that a method of programming a general-purpose computer to convert a BCD number into pure binary was not entitled to a patent because it is an "abstract idea." The Court said, in <I>Gottschalk v. Benson,</I> that patents could not be granted on "laws of nature, physical phenomenon and abstract ideas." Such a patent, the Court said, might impede the free exchange of ideas.<P>

But in several cases that followed, the scope of this exclusion was restricted. In 1981, the Supreme Court held that a process for computing the cure-time of rubber was patentable in <I>Diamond v. Diehr</I>. Although reaffirming that laws of nature, natural phenomenon and abstract ideas are not patentable, the Court said that a patent could be granted on a practical application of a concept, even if it included a programmed digital computer.<P>

During the past two years, the Federal Circuita prominent appellate court that handles all patent appealsfurther broadened the availability of patents for software. It reversed the Patent Office's refusal to grant a patent on a device that used software to clarify the picture on an oscilloscope (<I>In Re Alappat</I>). It said that a patent could be issued in connection with an algorithm that created a data structure to control a robot (<I>In Re Warmerdam</I>). It also ordered the Patent Office to reconsider its refusal to issue a patent for software that computed the shortest distance between two points (<I>In Re Trovato</I>).<P>

<h3>The U.S. Patent Office Takes Note</h3><P>

Some believe that the Patent Office has been refusing patents on software simply to reduce its workload: If it rejects these applications (which are growing in number), people will stop filing them.<P>

But the Patent Office was embarrassed because the Federal Circuit repeatedly said that its rejections were improper. The Patent Office initiated corrective action by issuing "Proposed Guidelines for Computer-Related Inventions" on July 31, 1995. Public comment on the proposed guidelines was invited.<P>

The guidelines received widespread and vociferous comment, both pro and con. Almost universally, however, the consensus was that the guidelines were ushering in a new era of protection for computer software. But in my last column on this subject ("Patents: Best Protection for Software Today?" <I>Dr. Dobb's Sourcebook</I>, September/October 1995), I pointed out that language at the end of the proposed guidelines potentially took back much of the protection that the headlines had been touting.<P>

After more than seven months of changes and a review by the Executive Office, the guidelines were published in their final form on February 28, 1996.<P>

<h3>The Revised and Final Guidelines</h3><P>

Publication of the final guidelines was a welcome event for patent practitioners like myself. Finally, we thought, we could now advise our clients as to whether their software was likely to receive a patent.<P>

Unfortunately, Commissioner of Patents and Trademarks Bruce Lehman was still too busy trying to make himself famous. (To my knowledge, he is the only governmental department head who places his picture on the home page of his department's Web site.) The final guidelines are surprisingly unclear when it comes to explaining whether the vast majority of software is entitled to a patentthe very purpose for which the guidelines were issued.<P>

The final guidelines are 39 pages of single-spaced text that conclude with a 17-block flow chart.<P>

On one hand, the guidelines seem to state that almost any type of storage media containing a computer program is patentable:<P>

<P>

[A] claimed computer-readable medium, encoded with a computer program, define structural and functional interrelationships between the computer program and the medium which permit the computer program's functionality to be realized, and is thus statutory.<P>

The term "statutory" means that the idea falls within one of the classes that the patent statute says is protectible. But if the software "encompasses any and every computer implementation of a process," the guidelines go on to inconsistently state that it will not be entitled to a patent if it "performs a purely mathematical algorithm." The guidelines state that "a computer process that simply calculates a mathematical algorithm that models noise..." is an example of an unpatentable program. But this exception arguably embraces most of the software written today!<P>

So, is the vast majority of software written today now entitled to a patent under the final guidelines? I am sorry to say that I don't know. I have spent five hours studying the guidelines in hopes of being able to provide clear guidance to you in lay terminology, but all I could find is gibberish.<P>

<h3>My Guidelines</h3><P>

The Patent Office's guidelines, along with several precedential cases in this field, do nevertheless provide several clues. Let's take a look at them.<P>

<P>

<B>Post-computing process activity.</B> Software generally receives information, processes that information, and delivers information. When the information delivered by the software is used to control something, not merely to display information on a screen, the invention is clearly of a type entitled to a patent.<P>

The software that computed the optimum cure-time for rubber in the <I>Diamond v. Diehr</I> case is an example. That system did not merely compute a number, but used the results of the computation to open the rubber mold at the appropriate moment. The presence of such "post-computing process activity" is universally recognized as a signpost of patentability (and is so designated in the guidelines as a "safe harbor").<P>

<B>Pre-computing process activity.</B> Another established area of patentability is when the software processes information derived from a measurement of a physical phenomena or activity. The guidelines refer to this as "pre-computing process activity" and also state that it is a "safe harbor." Software that processes a cardiac signal is one example. Software that recognizes the pattern in an optical image is another.<P>

<B>Data structures.</B> A data structure is also a type of technology entitled to a patent. There seems to be no good reason for giving special treatment to this type of software, but the Federal Circuit held that a data structure was entitled to a patent in <I>In Re Alappat</I>. So the availability of patents for this type of technology has been established.<P>

The way you describe software is also important. Here are some suggestions:<P>

<B>Characterize software carefully. </B>Most software does not fall within any of the three aforementioned categories. There is usually no post-computing or pre-computing activity, and the software does not involve a novel data structure. For such software, surprisingly, the guidelines provide woefully unclear guidance.<P>

To a patent practitioner such as myself, what does appear to emerge is that form, not substance, may be what is most important. In other words, patentability for most software may turn out to hinge upon the way the software is described, not the essential nature of the software. Follow these rules for characterizing your software:<P>

1. Describe your software in terms of a hardware system. Although the true genius may lie in a software algorithm, you are more likely to get a patent if you characterize your invention as a machine (that is, "a data-processing system") that simply includes the software as a component. The Patent Office will have a lot of difficulty rejecting an application directed to a machine. Machines have been a recognized class of patentable invention ever since our patent system was created.<P>

2. Focus on the enhancement your software provides to the overall system, not merely algorithms in the software itself. Undoubtedly, you are thinking about a patent not because of a clever algorithm, but because that clever algorithm achieves some greater purpose. Focus on that greater purpose when describing your invention.<P>

3.Try to limit the type of hardware needed to operate your software. For reasons which make no sense, the Patent Office may be digging in its heels against software which, as the guidelines put it, can run on "any and every computer." Try to describe your software as fit for only a particular type of computer; for example, a computer with a particular type of processor, memory, hard disk, cache, screen, operating system, and so on. The broader its application, the more difficult the patent will be to get.<P>

4.Be as specific as possible when describing the application for the software. Marketing departments love to claim that their software does everything for everybody. If you don't want to risk ringing ears from the door slamming at the Patent Office, be as specific as you can in describing the applications for which the software is used. If it is particularly useful in conjunction with Windows 95 or only drives in excess of 1 GB, say so. Don't try to embrace too much.<P>

5.Give your "invention" a title that does not use the words "software" or "program." Again, focus on the overall system in which your software operates and name your "invention" accordingly. For example, suppose you have improved upon the sequence your software follows to process financial data for a bank. Focus on the benefit it provides the bank, not on the technical details concerning the change in flow. (Of course, the technical details must also be disclosed, but the emphasis should be on the bank, not the software.)<P>

<B>Focus on commercial value.</B> Focus on features in your software that are likely to be of commercial value. Identify what it is in your software that gives it a competitive edge. You may have found a clever algorithm that does what other algorithms need twice as many instructions to do. If the savings in time is valuable, a patent is probably worthwhile. But if the average user would not notice the difference, focus on a more important feature.<P>

This suggestion has nothing to do with whether the software is likely to receive a patent. It merely addresses the common-sense notion that you should only seek to patent features in the software that have commercial value.<P>

<h3>Other Requirements</h3><P>

In addition to falling within a class of technology embraced by the Patent Act (called "statutory subject matter"), there are two additional and equally significant requirements for a patent. The software must be "new" and it must be "unobvious" in view of what was done before. These additional requirements are described in my September/October 1995 "Software and the Law" column.<P>

<h3>Guidelines for Display Icons</h3><P>

Most people do not think of a display icon as an invention. But the Patent Office does.<P>

On March 21, 1996, the Patent Office issued "Guidelines for Examination of Design Patent Applications for Computer-Generated Icons." These guidelines clearly indicate that icons can be protected by a patent.<P>

The title of the guidelines refer to a "design" patent. This is a special type of patent which is inexpensive to obtain. The Patent Act states that a "design" patent (as opposed to the more common "utility" patent) will be granted for "any new, original and ornamental design for an article of manufacture." The guidelines on icons are surprising because "design" patents are limited to "articles of manufacture." Previously, icons were not generally perceived as being "articles of manufacture."<P>

On the other hand, a computer screen plainly is an "article of manufacture." And when an icon is displayed on the computer screen, this "article" takes on an "ornamental" complexion. The combination can be entitled to a design patent.<P>

<h3>Don't Forget Other Types of Protection</h3><P>

Software and display icons can also be protected under copyright law. Copyright protection is very easy and inexpensive to obtain. It merely requires the completion of a simple form and the delivery of that form to the Copyright Office in Washington, D.C., together with a small registration fee. Copyright protection can also be pursued and obtained in parallel with patent protection. They are not inconsistent. The major drawback to copyright protection is that, unlike a patent, a copyright will not protect the underlying idea, but only the particular expression of that idea as manifested in the code or the icon.<P>

Trade-secret protection is another well-established means of protecting software. It does not require anything to be registered or any application to be filed. It also protects broad ideas, just like patents. But the information must be secret and efforts to protect that secrecy must constantly be made. It is often quite difficult to effectively market software, while simultaneously maintaining it as a secret. Also, trade-secret protection is inconsistent with patent protection. Although you can apply for a patent while maintaining the software as a trade secret, all trade secret protection will be lost once the patent is granted. (Under a proposed law now being considered by Congress, all trade secret protection will be lost when the patent is published 18 months after it is filed, even if it is never granted.)<P>

<h3>Don't Be Shy</h3><P>

I still keep hearing software developers say "software can't be patented." I hope you understand by now that this belief is wrong. The only software that clearly cannot be patented is software for which no application for patent is filed!<P>

Still don't believe me? Take a look at the following patent claim, which the Patent Office just granted to Microsoft. Take particular note of its tremendous breadth:<P>

<P>

A method in a computer system for representing a window configuration of a window of a program when the program is inactive, the method comprising the steps of: determining the window configuration of the window of the program when the program is active; storing the determined window configuration; setting the program to inactive; and when the program is inactive, displaying a representation of the determined window configuration and an indication that the program is inactive.<P>

<h3>Conclusion</h3><P>

Unfortunately, the new Patent Office guidelines have not significantly clarified which types of software are entitled to a patent, but the general trend continues to be toward making patents for software more available. While some are talking about this question, others are applying for and receiving patents on software-related inventions.  Don't be left behind.<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
