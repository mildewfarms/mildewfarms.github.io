<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>APR96: LETTERS</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>LETTERS<a name="0149_0001"><a name="0149_0001"></h1><P>

<h3><a name="0149_0002">Executable Content and Prior Art<a name="0149_0002"></h3><P>

Dear <I>DDJ</I>,<P>

In reading Greg Guerin's letter concerning patents and executable content (<I>DDJ
</I><I></I>&quot;Letters&quot;, January 1996), I was surprised to see no mention of an old system that
indeed provided the capability of including executable code as part of a &quot;page&quot; on a BBS, which
would be sent to the client and executed to provide animation during the online session.<P>

Grafterm for the 8-bit Atari was never upgraded beyond 300bps (there were problems with updating the
graphic screens at high speeds, though text screens in other telecommunications programs can run at up
through at least 4800bps) and did provide, in the later version I saw, the capability of sending executable
code with samples of animation (as I recall). The only copy I saw was in the mid to late'80s (long after all
Grafterm BBSs had gone the way of the dodo), which did have sample pages of code and which seemed quite
impressive. As the system was machine specific, there was no need to worry about drivers--the code was
in machine language making use of the client's hardware, the CPU, sound system, graphics, and so on--all
were standardized.<P>

While the idea of sending executable code in telecommunications (interactively run on the client while
connected) may be new to some, it is old hat to others. Unlike the current generation of executable content,
the pages containing the code were proprietary to the BBS system. Nor was an interpreter used to run the
code.<P>

Unfortunately, all I saw was the aforementioned letter about prior art (which did not target
contemporaneous execution of code sent in real time from a telecommunications server to improve the
interface). Still, I wonder if there were similar systems available on machines such as the venerable Apple
II and Commodore 64.<P>

John McGowan <P>

Brooklyn, New York <P>

jmcgowan@inch.com<P>

<h3><a name="0149_0003">ANSI C++<a name="0149_0003"></h3><P>

Dear <I>DDJ</I>,<P>

In his January 1996 &quot;C Programming&quot; column, Al Stevens talked about his recent experiences
with the ANSI C++ Standards Committee. I've been programming in C for nearly a decade, and recently
started using C++. I've spent some time experimenting with the language and looking through C++
programming books to see what works and what doesn't (using Watcom C++ 10.0 running under MS-DOS).
Here are some of my thoughts on the subject.<P>

The <I>for</I> statement should be left the way it is. New notation should be created to implement the new,
desired behavior, possibly using square brackets immediately after the <I>for</I> keyword to declare
variables. So a loop that declared its own counter variable would look like <a href="9604p.htm#0149_0005">Example 1(a)</A>. This would have several advantages over the proposed
change.<P>
<ul>
<li>It would not break any existing code.</li>
<li>It would allow several different types of variables to be declared. </li>
<li>It could also be applied to <I>do</I>/<I>while</I> loops. This would make <a href="9604p.htm#0149_0005">Example 1(b)</A> equivalent to the <I>for</I> loop in <a href="9604p.htm#0149_0005">Example 1(a)</A> (with the exception of a &quot;continue&quot; in
the body of the <I>while</I> loop). It would have to be determined if the initializers in the brackets executed
before or after the <I>for..int</I> statement. </li>
</ul>
One of the things I tried to do would have benefited from being able to declare template-member functions. I
had to use global-template functions that used a public member to gain access to the class (because you
can't use templates in friend declarations). There would have to be some restrictions on template member
functions (for instance, they could not be virtual).<P>

I wrote an array class that would allow the arrays to increase their size as new elements were added. This
would occasionally require me to allocate more storage for the array. I've always viewed enums as just
convenient ways to name a related series of constants (which would treat them all as ints). If the stronger
typing is desired (as Al implied was the case with the Microsoft implementation), then this should be made
explicit by either a new keyword (there seem to be plenty of those) or perhaps by using <I>class enum</I>
or <I>enum class</I> notation.<P>

One other moderately useful change would be the ability to break out of an outer-enclosing loop from an
inner one. This could be done by specifying a number after a break (or continue), as in <I>break 2;</I>. This
would remove some of the need for <I>got</I><I>o</I>s or flag variables; see <a href="9604p.htm#0149_0005">Example 1(c)</A>.<P>

Glenn Dill<P>

Latrobe, Pennsylvania <P>

gdill@westol.com<P>

<h3><a name="0149_0004">About Face<a name="0149_0004"></h3><P>

Dear <I>DDJ</I>,<P>

In his review of Alan Cooper's book, <I>About Face: The Essentials of User Interface Design</I>
(<I>DDJ</I>, January 1996), Michael Swaine perpetuates glaring inaccuracies about the Magic Cap user
interface. While Cooper indeed &quot;rips apart the MagiCap [sic] interface&quot; (to quote Swaine), much
of his criticism is factually incorrect. It's shocking that such a well-known and acclaimed individual is so
cavalier with the truth. For example:<P>

<cite>Cooper: &quot;I'll bet [Magic Cap] is a real pain to use. Once you have learned that the
substantial-looking building with the big 'AT&amp;T' on its facade is the phone company, you must forever
live with going in and out of that building to call people.&quot; </cite><P>

In fact, the AT&amp;T building is not where one makes phone calls in Magic Cap. The Magic Cap interface
lets users place a call by simply touching the phone on the desk, or they can call a person by touching that
person's name in the Address Card file and then touching the phone number to automatically dial (for
example, home, work, cellular, pager). <P>

The tight integration of all parts of the Magic Cap UI enables users to contact someone, anywhere within
Magic Cap. Users can tap the Contact button to call, fax, or e-mail someone from every scene.<P>

What's more, if a user wishes to frequently visit a particular place such as the AT&amp;T building, Magic
Cap provides obvious and simple shortcuts to jump directly there. Over 1000 user tests indicate that the
Magic Cap interface is not &quot;a pain to use,&quot; and, on the contrary, many people are convinced it is
superior to other user interfaces.<P>

<cite>Cooper: &quot;You enter a building to begin a service, which is represented by a walk down a hallway
that is lined with doors representing functions. This heavy reliance on the metaphor means that you can
intuit the basic functioning of the software, but its downside is that the metaphor restricts all navigation to
a very rudimentary, linear path. You must go out on the street to go to another service.&quot;</cite><P>

Magic Cap enables users to intuit the basic functioning of the software, and as the user becomes more
familiar with the user interface, one is able to take advantage of the short cuts just mentioned. <P>

Ease of learning and ease of use are not exclusive as Cooper implies; Magic Cap provides an easy-to-learn,
real-world framework, but this same framework provides the navigational accelerators power users
appreciate, much as keyboard shortcuts are used by some computer users once they have mastered the
easy-to-learn menu interface.<P>

<cite>Cooper: &quot;Wouldn't it be better to go beyond those confining technologies [address books that look
just like a paper version, phones that look like phones] and deliver some of the real power of the computer?
Why can't our communications software allow multiple connections or make connections by organization or
affiliation, or just hide the use of phone numbers all together?&quot;</cite><P>

Magic Cap does exactly what Cooper desires. Such a design does not require giving up what people already
understand. Magic Cap provides a unified mailbox that collects mail from multiple mail services
automatically. Magic Cap provides dialing by name and location. <P>

Magic Cap tightly integrates the Address Cards, Phone, Fax, Datebook, and Electronic Mail connectivity
through multiple services such as the Internet and AOL. Address Cards can be grouped by organization or
affiliation. Make an appointment and Magic Cap can automatically send an invitation to that person, complete
with the correct contact information. Magic Cap is not only a tightly integrated, easy-to-use
communications product but also a powerful platform for developers and third parties to add their own
applications and services.<P>

More examples are available, and I encourage <I>DDJ</I> readers to verify my statements by reading (or
rereading) the book review and then trying either Sony's Magic Link PIC-2000, Motorola's Envoy
communicator, or requesting a version of Magic Cap for Windows from Magic (you can download the
software from our web site at http://www.genmagic.com). Suffice to say Cooper's irresponsible and
inaccurate comments about the Magic Cap user interface should lead any reasonable reader to seriously
question his credibility as an author and wonder whether he even bothered to use Magic Cap before writing
about it.<P>

In his review of Cooper's book, Swaine writes, &quot;I think that everyone would be better off if they
would just commit the entirety of <I>About Face</I> to memory.&quot; As it relates to Magic Cap, this
would leave <I>DDJ</I> readers with an entirely inaccurate impression of the Magic Cap interface--an
interface which has been refined based on thousands of hours of user testing and consistently described by
responsible reviewers as easy to learn, use, and customize.<P>

Steve Schramm<P>

VP &amp; General Manager, <P>

Magic Cap Division<P>

General Magic Inc.<P>

<h4><a name="0149_0005"><B>Example 1:</B> ANSI C++.<a name="0149_0005"></h4><P>

<pre>(a)
for [int i = 0;] (; i &lt; 10; i++) {
   // ...
}

(b)
while [int i = 0;] (i &lt; 10) { /* ... */ i++; }

(c)
extern int a[], b[];
int i, j;
for (i = 0; i &lt; 10; i++) {
    for (j = 0; j &lt; 10; j++) {
        if (a[i] == b[j]) break 2;
    }
}</pre>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
