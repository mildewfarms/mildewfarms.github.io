<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>APR96: UNDOCUMENTED CORNER</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>UNDOCUMENTED CORNER<a name="0187_0081"><a name="0187_0081"><a name="0187_007f"><a name="0187_0000"></h1><P>

<h2>What Is Undocumented MFC?</h2><P>

<h3>Scot Wingo and George Shepherd</h3><P>

<P>
<i><a name="0187_0080"><a name="0187_0000">Scot is a cofounder of Stingray Software, an MFC
extension company. He can be contacted at ScotWi@aol.com. George is a senior computer scientist with
DevelopMentor where he develops and delivers courseware for developers using MFC and OLE. George can
be contacted at 70023.1000@compuserve.com. They are the coauthors of MFC Internals (Addison-Wesley,
1996).</i></p><hr><P>

MFC comes with full source code and a great set of online documentation. However, while writing our book,
<I>MFC Internals</I>, we discovered a plethora of interesting undocumented classes, functions, and MFC
behavior. Since then, we've spent a great deal of time learning how these undocumented aspects of MFC
work, what they do, and documenting them.<P>

Microsoft only documents the non-implementation portions of MFC so that it can change the implementation
details from release to release. As a C++ class library provider, this is desirable since it allows the
maximum flexibility to change classes around from release to release. However, MFC programmers will
find themselves having to decipher undocumented MFC behavior time and time again when writing MFC
applications that push the bounds of the MFC documentation. For example, have you ever ended up in the
middle of undocumented MFC classes when debugging? Or have you ever tried to customize the MFC
print-preview engine? Do you need to know how MFC OLE Automation is implemented so you can extend it?
How about OLE documents or OLE controls?<P>

In this series of articles, we will expose interesting undocumented MFC behavior discovered during our
many MFC spelunking sessions and in the process answer many of the aforementioned questions. In addition,
we will show you how to exploit the undocumented features in your MFC applications. Whenever possible,
the MFC source-code filename will be mentioned so you can follow along in your editor, or do some further
exploring on your own.<P>

Of course, all undocumented disclaimers apply--Microsoft can (and probably will) change undocumented
areas of MFC, so use any undocumented details you find here with caution and at your own risk. Also, for
the time being, we'll always refer to the latest version of MFC (currently 4.0). Older versions of MFC do
behave differently than what we're describing--more proof that the undocumented MFC internals always
are in flux. We also would like to note that Microsoft (specifically the MFC team) has been very gracious in
helping us discover some of the more obscure behavior of MFC. In particular, we would like to thank Dean
McCrory, MFC lead at Microsoft, for his valuable time and insight.<P>

<h3><a name="0187_0082">Interesting Undocumented <I>CDocument </I>Behavior<a name="0187_0082"></h3><P>

MFC 4.0 introduced an improvement to the <I>CDocument </I>class. The new virtual member functions,
<I>GetFile() </I>and <I>ReleaseFile(), </I>let you specify a specialized <I>CFile </I>derivative in a
<I>CDocument </I>derivative. Whenever <I>CDocument </I>needs to do something with a file, it calls
<I>GetFile() </I>with the filename, file permissions, and some other arguments. <I>GetFile() </I>returns a
<I>CFile </I>pointer, which can be any <I>CFile </I>derivative. This includes <I>CDocument::Serialize().
</I>The undocumented fun begins when we take a peek at the default implementation of
<I>CDocument::GetFile() </I>in <a href="9604m.htm#0187_0089">Listing One</A>.<P>

The implementation of <I>GetFile() </I>is pretty close to what you would imagine, except for the first line.
What is this undocumented <I>CMirrorFile </I>class? Why is your document using it instead of
<I>CFil</I><I>e</I>? What implications does this have for your programs? Is <I>CMirrorFile </I>connecting
to the Microsoft Network and sending your documents to Microsoft? <P>

<h3><a name="0187_0083"><I>CMirrorFile</I> Exposed<a name="0187_0083"></h3><P>

A quick search reveals that <I>CMirrorFile </I>is declared in the AFXPRIV.H header file. <a href="9604m.htm#0187_008b">Listing Two</A> contains the declaration of this <I>CFile
</I>derivative.<P>

This certainly is a minimal <I>CFile </I>derivative. Aside from overriding <I>Open(), Close(), </I>and
<I>Abort(), CMirrorFile </I>adds one data member, <I>m_strMirrorName. </I><P>

The implementation for <I>CMirrorFile </I>lives with most of <I>CDocumen</I><I>t</I>'s source in
DOCCORE.CPP. <a href="9604m.htm#0187_008d">Listing Three</A> shows the pseudocode for
<I>CMirrorFile::Open().</I><P>

<I>CMirrorFile::Open() </I>breaks into two logical blocks. In the first, <I>Open() </I>checks for the
<I>modeCreate </I>indicating that the caller wants to create a new file or truncate an existing file. Next,
<I>Open() </I>calls <I>CFile::GetStatus(). GetStatus() </I>returns nonzero if the file exists (which implies
that the user wants to truncate it). If the file exists, <I>Open() </I>then calls <I>GetDiskFreeSpace()
</I>and determines how many bytes are available on the drive. <I>Open() </I>then compares this result
with two times the size of the existing file. If there is enough room for two times the size of the current
filename, <I>Open() </I>creates a temporary file and stores the name in the <I>m_strMirrorName.</I><P>

The second block of code in <I>Open() </I>only runs if <I>m_strMirrorName </I>is not empty, which implies
that the contents of the first block ran and obtained a temporary file. In the second block, if there is a
non-empty <I>m_strMirrorName, Open() </I>goes ahead and opens the mirror file using <I>CFile::Open().
</I>Next, <I>Open() </I>copies the file time and file security from the original file to the mirror file. If the
second block has executed, <I>Open() </I>returns True. If the second block does not execute, <I>Open()
</I>calls right through to <I>CFile::Open(), </I>returning whatever it returns.<P>

To summarize, <I>CMirrorFile::Open() </I>is actually opening a different file than the one specified if a
write operation is going on <I>CFile::modeCreate </I>and if a file is being overwritten.<P>

For example, in Scribble (which uses document/view), if you wrote a fresh scribble and saved it in
UNDOCMFC.SCR, the code would not execute. However, if you load the UNDOCMFC.SCR file, make some
changes, and then save, this code will execute and Scribble will actually write to a mirror file.<P>

Turning our attention to document data, <a href="9604m.htm#0187_008f">Listing Four</A> contains the
pseudocode for <I>CMirrorFile::Close() </I>from DOCCORE.CPP.<P>

First, <I>Close() </I>stores the name of the file in <I>m_strName </I>(a deceptively named variable)
because the <I>CFile::Close() </I>call clears out <I>m_strFileName.</I><P>

After calling <I>CFile::Close(), CMirrorFile::Close() </I>checks to see if there is a mirror file in use. If so,
<I>Open() </I>deletes the specified file and copies the mirror file over to the specified file.<P>

In a nutshell, <I>CMirrorFile </I>is protecting your document by saving the original and writing to a
temporary file. If there is a problem writing, the original file is safe and sound. If there isn't a problem,
<I>CMirrorFile </I>copies the new file over the file and you are none the wiser (until now). <I>CMirrorFile
</I>even makes sure that the original security and file-creation information is copied over correctly.<P>

Some of you may not like MFC doing something like this behind your back. Additionally, there are the cycles
lost checking the disk space, copying the security/file-time information, and copying the mirror file over
the original file. If you don't like the fact that <I>CDocument </I>uses <I>CMirrorFile, </I>you can override
<I>GetFile() </I>to return a good-old-fashioned vanilla <I>CFile.</I><P>

<I>CMirrorFile </I>really is the only undocumented <I>CDocument </I>behavior of interest. Next, we
examine the undocumented <I>CView </I>derivative <I>CPreviewView </I>and how it implements MFC print
previewing.<P>

<h3><a name="0187_0084">Undocumented Print Preview <a name="0187_0084"></h3><P>

MFC's print-preview support is based on the document/view architecture. The key advantage to MFC
document/view is that the normal display-drawing code in your view is transparently reused to provide
basic print-previewing functionality. The default MFC print preview supports one- and two-page display and
three-level zooming. <a href="9604d4f1.gif">Figure 1</A> shows the MFC print-preview engine in a
zoomed two-page state. Notice how the user has a toolbar and the application's normal menu and view are
replaced by the print-preview view.<P>

We first discovered <I>CPreviewView </I>while tracing the MFC print-preview logic, which starts in
<I>CView::DoPrintPreview(). </I><a href="9604m.htm#0187_0091">Listing Five</A> contains the
<I>CView::DoPrintPreview() </I>pseudocode so you can see how <I>CPreviewView </I>is created,
initialized, and used.<P>

<I>DoPrintPreview() </I>first stores a pointer to the main frame window in <I>pParent. </I>Next, it
creates a local <I>CCreateContext </I>structure and populates its fields.<P>

Next, <I>DoPrintPreview() </I>creates a <I>CPreviewView </I>instance with dynamic creation using the
<I>CRuntimeClass </I>pointer argument. <I>DoPrintPreview() </I>then calls <I>CFrameWnd
::OnSetPreviewMode() </I>and creates a toolbar based on the toolbar resource argument.<P>

After creating and storing the toolbar in the <I>CPreviewView </I>pointer, <I>DoPrintPreview()
</I>creates the view and makes it the active view. When setting the <I>CPreviewView </I>to the active
view, <I>DoPrintPreview() </I>saves the previously active view in the <I>CPrintPreviewState
</I>structure. Once the <I>CPreviewView </I>and toolbar are created and activated, <I>DoPrintPreview()
</I>updates them and returns True.<P>

We've discovered a good deal about print preview. <I>DoPrintPreview() </I>sets the active view in the
main frame to switch from the regular MDI or SDI window to the print-preview view. You could use this
technique in your MFC applications if you ever wanted to have a &quot;full window mode&quot; or wanted
to produce a similar effect. To learn more about how it works, check out
<I>CFrameWnd::OnSetPreviewMode().</I><P>

While it's pretty clear what <I>DoPrintPreview() </I>is doing, it is still not clear how print preview
actually works. To understand MFC print preview, you have to get to know <I>CPreviewView.</I><P>

<h3><a name="0187_0085"><I>CPreviewView </I>Revealed<a name="0187_0085"></h3><P>

Inside MFC's private header file, AFXPRIV.H, we found the declaration for <I>CPreviewView, </I>which
reveals a great deal about the class. <a href="9604m.htm#0187_0093">Listing Six</A> contains the
abbreviated declaration.<P>

Notice that <I>CPreviewView </I>is a <I>CScrollView </I>derivative. We haven't covered this class, but as
the name implies, <I>CScrollView </I>provides scrolling support. When you zoom in on a print preview,
you'll notice it displays scroll bars, that's the <I>CScrollView </I>inheritance at work.<P>

<I>CPreviewView </I>is brimming with interesting behavior. <a href="9604m.htm#0187_0087">Table
1</A> describes the uses for key data members. <I>SetPrintView(), </I>called in
<I>CView::DoPrintPre</I><I>v</I><I>iew() </I>(see <a href="9604m.htm#0187_0091">Listing
Five</A>), is one important member for <I>CPreviewView. </I>It takes care of initializing the
print-preview view and preparing it to start the print-previewing process. Keep that in mind as you review
the pseudocode for <I>CPreviewView::SetPrintView(), </I>as found in VIEWPREV.CPP (see <a href="9604m.htm#0187_0095">Listing Seven</A>). <P>

<I>SetPrintView() </I>first sets the value of <I>m_pPrintView </I>to the document's view. The document's
view actually does the rendering in <I>OnDraw(). CPreviewView </I>keeps a copy of the document's live
view because <I>CPreviewView </I>uses the view's <I>OnDraw() </I>function to render the data on the
preview screen.<P>

Next, <I>SetPrintView() </I>creates a new <I>CPrintInfo </I>object. It's not really obvious from the
pseudocode, but the <I>CPrintInfo </I>constructor creates a <I>CPrintDialog </I>(a Windows printing
common dialog). After creating the <I>CPrintInfo </I>object, <I>SetPrintView() </I>sets some flags. The
most important flag tells the <I>CPrintDialog </I>not to return a DC. You'll see why in a second.<P>

After creating the <I>CPrintInfo </I>object, <I>SetPrintView() </I>creates a <I>CPreviewDC </I>object.
<I>CPreviewDC </I>is yet another undocumented MFC class. MFC's CDC class contains two handles to device
contexts: <I>m_hDC </I>and <I>m_hAttribDC. </I>The <I>m_hDC </I>member represents the device context
for the output and the <I>m_hAttribDC </I>is used for information purposes. Usually these device contexts
represent the same thing, the screen or the printer.<P>

The <I>CPreviewDC </I>object maintains two different device contexts--one for the screen <I>(m_hDC)
</I>and one for the printer <I>(m_hAttribDC). CPreviewDC </I>is implemented this way because print
preview has to draw something as though it would appear on the printer, but must be able to translate so it
appears correctly on the screen. <I>SetPrintView() </I>sets up the <I>CPreviewDC </I>accordingly (setting
the <I>m_hDC </I>to the view's <I>hDC </I>and setting <I>m_hAttribDC </I>to the print<I>e</I><I>r</I>'s
<I>hD</I><I>C</I>). To learn more about how <I>CPreviewDC </I>handles displaying what the printer will
display onscreen, check out the MFC header AFXPRIV.H and the source file DCPREV.CPP.<P>

After initializing the DCs to their proper print-preview state, <I>SetPrintView() </I>initializes the
<I>m_sizePrinterPPI </I>data member and <I>m_nPages </I>and <I>m_nZoomOutPages. </I>Then,
<I>SetPrintView() </I>initializes the scroll bars in the scroll view and sets the current page.<P>

At this point, we still haven't seen where the actual drawing of the print preview happens. If you'll look
back at <a href="9604m.htm#0187_0095">Listing Seven</A> <I>(CView::DoPrintPreview()), </I>you'll
notice that this routine &quot;forces&quot; an update of the frame window that contains the freshly
created <I>CPreviewView. </I>Like any other MFC view, this will cause <I>CPreviewVie</I><I>w</I>'s
<I>OnDraw() </I>member function to be called.<P>

First, <I>OnDraw() </I>creates two pens. <I>rectPen </I>is for the box that is drawn to represent the page.
<I>shadowPen </I>is used to draw a shadow around the page and give it a fancy three-dimensional
effect.<P>

Next, <I>OnDraw() </I>enters a For loop for each page, taking the following steps:<P>

<ol>1.     It draws the page outline and shadow using the paint DC that is passed as an argument to
<I>OnDraw(). </I>It draws the rectangle with a series of <I>MoveTo()/LineTo() </I>calls. Then the For loop
calls <I>FillRect() </I>to draw in the white color of the pages.</ol><P>

<ol>2.     It displays the page number by calling <I>OnDisplayPageNumber().</I></ol><P>

<ol>3.     Once the fresh piece of paper has been drawn, <I>OnDraw() </I>calls
<I>m_pPrintView-&gt;OnPrint() </I>with the <I>CPreviewDC, </I>thus generating the print-preview
output. <I>OnPrint() </I>calls your view's <I>OnDraw() </I>code with a <I>CPreviewDC </I>that reflects
the printed output on the display as a print preview.</ol><P>

After the For loop has iterated through all of the pages to be previewed, <I>OnDraw() </I>frees the pens it
created.<P>

<h3><a name="0187_0086">Recap<a name="0187_0086"></h3><P>

Now that you know how <I>CPreviewView </I>and <I>CPreviewDC </I>work, the big question is how do you
apply this knowledge? In our next installment, we'll show you how to customize the MFC print preview and
we'll also introduce a couple of new undocumented MFC classes.<P>

<h4><B><a href="9604d4f1.gif">Figure 1</A>:</B> MFC print-preview engine in a zoomed two-page
state.</h4><P>

<h4><a name="0187_0087"><B>Table 1:</B> CPreviewView data members.<a name="0187_0087"></h4><P>
<pre>
Member               Description

m_pOrigView          Pointer to the previously active view.
m_pPrintView         Pointer to the view for &quot;printing.&quot;
m_pPreviewDC         Pointer to a CPreviewDC.
m_dcPrint            Pointer to a printer DC.
PAGE_INFO            Structure that defines the dimensions of one of the preview pages.
m_pPageInfo          Pointer to a page info structure.
m_pageInfoArray      Array of two-page info structures; hard-coded to 2.
m_bPageNumDisplayed  Flag that indicates if the page number has been displayed.
m_nZoomOutPages      Stores the number of pages to be displayed on one print-preview view. 
m_nZoomState         Can be one of four zoom states (set via SetZoomState()).
  ZOOM_OUT           Default, shows a smaller than 1:1 ratio. 
  ZOOM_MIDDLE        Zoom level between out and in. 
  ZOOM_IN            Shows a larger than 1:1 ratio. 
  ZOOM_OFF           No zooming.
m_nMaxPages          Specifies the number of pages (always 2 for CPreviewView).
m_nCurrentPage       Current page being displayed.
m_nPages             Number of pages. Can be either one or two in the default CPreviewView.
m_nSecondPageOffset  Specifies the left coordinate of where the second preview page is drawn.
m_hMagnifyCursor     Handle to the magnifying glass cursor.
m_sizePrinterPPI     Stores the dimensions of a page on the printer; retrieved by calling 
                         GetDeviceCaps(LOGPIXELSX).
m_ptCenterPoint      Used to center the print preview pages on the page.
m_pPreviewInfo       Pointer to a CPrintInfo structure that is used to store printing 
                         information.
</pre>

<P>

<h4><a name="0187_0088"><a name="0187_0089">Listing One<a name="0187_0089"></h4><pre>
CFile* CDocument::GetFile(LPCTSTR lpszFileName, UINT nOpenFlags, 
                                                     CFileException* pError)
{
     CMirrorFile* pFile = new CMirrorFile;
     if (!pFile-&gt;Open(lpszFileName, nOpenFlags, pError))
              delete pFile; pFile = NULL;
     return pFile;
}
</pre>
<h4><a name="0187_008a"><a name="0187_008b">Listing Two<a name="0187_008b"></h4><pre>
class CMirrorFile : public CFile
{
// Implementation
public:
    virtual void Abort();
    virtual void Close();
    virtual BOOL Open(LPCTSTR lpszFileName, UINT nOpenFlags,
    CFileException* pError = NULL); protected:
    CString m_strMirrorName;
};
</pre>
<h4><a name="0187_008c"><a name="0187_008d">Listing Three<a name="0187_008d"></h4><pre>
BOOL CMirrorFile::Open(LPCTSTR lpszFileName, UINT nOpenFlags, 
                                                    CFileException* pError)
{
     m_strMirrorName.Empty();
     CFileStatus status;
     if (nOpenFlags &amp; CFile::modeCreate) {
          if (CFile::GetStatus(lpszFileName, status)){
              CString strRoot;
              AfxGetRoot(lpszFileName, strRoot);
              DWORD dwSecPerClus, dwBytesPerSec, dwFreeClus, dwTotalClus;
              int nBytes = 0;
              if (GetDiskFreeSpace(strRoot, &amp;dwSecPerClus, &amp;dwBytesPerSec, 
              &amp;dwFreeClus, &amp;dwTotalClus)){
                   nBytes = dwFreeClus*dwSecPerClus*dwBytesPerSec;
                   if (nBytes &gt; 2*status.m_size){
                   // get the directory for the file TCHAR 
                   szPath[_MAX_PATH];
                   LPTSTR lpszName;
                   GetFullPathName(lpszFileName,_MAX_PATH, szPath, &amp;lpszName);
                   *lpszName = NULL;
                   GetTempFileName(szPath, _T(MFC), 0,
                           m_strMirrorName.GetBuffer(_MAX_PATH+1)); 
                   m_strMirrorName.ReleaseBuffer();
        }
       }
     }
     if (!m_strMirrorName.IsEmpty() &amp;&amp;
         CFile::Open(m_strMirrorName, nOpenFlags, pError)){ 
              m_strFileName = lpszFileName;
              FILETIME ftCreate, ftAccess, ftModify; 
              if (::GetFileTime((HANDLE)m_hFile,&amp;ftCreate,&amp;ftAccess,ftModify)){
                  AfxTimeToFileTime(status.m_ctime, &amp;ftCreate);
                  SetFileTime((HANDLE)m_hFile,&amp;ftCreate,&amp;ftAccess, &amp;ftModify);
     }
     DWORD dwLength = 0;
     PSECURITY_DESCRIPTOR pSecurityDescriptor = NULL;
     GetFileSecurity(lpszFileName, DACL_SECURITY_INFORMATION,NULL, 
                                                          dwLength, &amp;dwLength);
     pSecurityDescriptor = (PSECURITY_DESCRIPTOR) new BYTE[dwLength];
     if (::GetFileSecurity(lpszFileName, DACL_SECURITY_INFORMATION,
                   pSecurityDescriptor, dwLength, &amp;dwLength)){
                   SetFileSecurity(m_strMirrorName, DACL_SECURITY_INFORMATION, 
                              pSecurityDescriptor); 
     }
     delete[] (BYTE*)pSecurityDescriptor;
     return TRUE;
  }
  m_strMirrorName.Empty(); 
  return CFile::Open(lpszFileName, nOpenFlags, pError);
}
</pre>
<h4><a name="0187_008e"><a name="0187_008f">Listing Four<a name="0187_008f"></h4><pre>
void CMirrorFile::Close()
{
     CString m_strName = m_strFileName;
     CFile::Close();
     if (!m_strMirrorName.IsEmpty()) {
        CFile::Remove(m_strName);
        CFile::Rename(m_strMirrorName, m_strName);
    }
}
</pre>
<h4><a name="0187_0090"><a name="0187_0091">Listing Five<a name="0187_0091"></h4><pre>
BOOL CView::DoPrintPreview(UINT nIDResource, CView* pPrintView, CRuntimeClass*
                                 pPreviewViewClass, CPrintPreviewState* pState)
{
      CFrameWnd* pParent = (CFrameWnd*)AfxGetThread()-&gt;m_pMainWnd;
      CCreateContext context;
      context.m_pCurrentFrame = pParent;
      context.m_pCurrentDoc = GetDocument();
      context.m_pLastView = this;
      // Create the preview view object
      CPreviewView* pView = (CPreviewView*)pPreviewViewClass-&gt;CreateObject();
      pView-&gt;m_pPreviewState = pState;        // save pointer
      pParent-&gt;OnSetPreviewMode(TRUE, pState);    // Take over Frame Window
      // Create the toolbar from the dialog resource
      pView-&gt;m_pToolBar = new CDialogBar;
      if (!pView-&gt;m_pToolBar-&gt;Create(pParent, MAKEINTRESOURCE(nIDResource),
                                              CBRS_TOP, AFX_IDW_PREVIEW_BAR)){
            TRACE0(Error: Preview could not create toolbar dialog.\n); 
            return FALSE;
      }
      pView-&gt;m_pToolBar-&gt;m_bAutoDelete = TRUE;    // automatic cleanup
      if (!pView-&gt;Create(NULL, NULL, AFX_WS_DEFAULT_VIEW,
                  CRect(0,0,0,0), pParent, AFX_IDW_PANE_FIRST, &amp;context)) { 
                  TRACE0(Error: couldnt create preview view for frame.\n); 
                  return FALSE;
      }
      pState-&gt;pViewActiveOld = pParent-&gt;GetActiveView();
      CView* pActiveView = pParent-&gt;GetActiveFrame()-&gt;GetActiveView();
      pActiveView-&gt;OnActivateView(FALSE, pActiveView, pActiveView);
      pView-&gt;SetPrintView(pPrintView);
      pParent-&gt;SetActiveView(pView);  // set active view - even for MDI
      // update toolbar and redraw everything 
      pView-&gt;m_pToolBar-&gt;SendMessage(WM_IDLEUPDATECMDUI, (WPARAM)TRUE); 
      pParent-&gt;RecalcLayout();            // position and size everything 
      pParent-&gt;UpdateWindow();
      return TRUE;
}
</pre>
<h4><a name="0187_0092"><a name="0187_0093">Listing Six<a name="0187_0093"></h4><pre>
class CPreviewView : public CScrollView
{
      DECLARE_DYNCREATE(CPreviewView)
// Constructors
public:
      CPreviewView();
      BOOL SetPrintView(CView* pPrintView);
// Attributes
protected:
      CView* m_pOrigView;
      CView* m_pPrintView;
      CPreviewDC* m_pPreviewDC;  // Output and attrib DCs Set, not created
      CDC m_dcPrint;             // Actual printer DC
// Operations *omitted
// Overridables *omitted
// Implementation * some omitted
public:
      virtual void OnPrepareDC(CDC* pDC, CPrintInfo* pInfo = NULL);
protected:
      afx_msg void OnPreviewClose(); 
      afx_msg int  OnCreate(LPCREATESTRUCT lpCreateStruct); 
      afx_msg void OnSize(UINT nType, int cx, int cy); 
      afx_msg void OnDraw(CDC* pDC); 
      afx_msg void OnLButtonDown(UINT nFlags, CPoint point); 
      afx_msg BOOL OnEraseBkgnd(CDC* pDC); 
      afx_msg void OnNextPage(); 
      afx_msg void OnPrevPage(); 
      afx_msg void OnPreviewPrint(); 
      afx_msg void OnZoomIn(); 
      afx_msg void OnZoomOut();
      void DoZoom(UINT nPage, CPoint point);
      void SetScaledSize(UINT nPage);
      CSize CalcPageDisplaySize();
      CPrintPreviewState* m_pPreviewState; // State to restore
      CDialogBar* m_pToolBar; // Toolbar for preview
      struct PAGE_INFO {
           CRect rectScreen; // screen rect (screen device units)
           CSize sizeUnscaled; // unscaled screen rect (screen device units)
           CSize sizeScaleRatio; // scale ratio (cx/cy)
           CSize sizeZoomOutRatio; // scale ratio when zoomed out (cx/cy)
      };
      PAGE_INFO* m_pPageInfo; // Array of page info structures
      PAGE_INFO m_pageInfoArray[2]; //Embedded array for default implementation
      BOOL m_bPageNumDisplayed;  // Flags whether or not page number has yet
                                 // been displayed on status line 
      UINT m_nZoomOutPages; // number of pages when zoomed out 
      UINT m_nZoomState;
      UINT m_nMaxPages; // for sanity checks
      UINT m_nCurrentPage;
      UINT m_nPages;
      int m_nSecondPageOffset; // used to shift second page position
      HCURSOR m_hMagnifyCursor;
      CSize m_sizePrinterPPI; // printer pixels per inch
      CPoint m_ptCenterPoint;
      CPrintInfo* m_pPreviewInfo;
      DECLARE_MESSAGE_MAP()
};
</pre>
<h4><a name="0187_0094"><a name="0187_0095">Listing Seven<a name="0187_0095"></h4><pre>
BOOL CPreviewView::SetPrintView(CView* pPrintView)
{
    m_pPrintView = pPrintView;
    m_pPreviewInfo = new CPrintInfo;
    m_pPreviewInfo-&gt;m_pPD-&gt;SetHelpID(AFX_IDD_PRINTSETUP);
    m_pPreviewInfo-&gt;m_pPD-&gt;m_pd.Flags |= PD_PRINTSETUP;
    m_pPreviewInfo-&gt;m_pPD-&gt;m_pd.Flags &amp;= ~PD_RETURNDC;
    m_pPreviewInfo-&gt;m_bPreview = TRUE;  // signal that this is preview
    m_pPreviewDC = new CPreviewDC;      // must be created before any
    if (!m_pPrintView-&gt;OnPreparePrinting(m_pPreviewInfo))
          return FALSE;
    m_dcPrint.Attach(m_pPreviewInfo-&gt;m_pPD-&gt;m_pd.hDC);
    m_pPreviewDC-&gt;SetAttribDC(m_pPreviewInfo-&gt;m_pPD-&gt;m_pd.hDC);
    m_pPreviewDC-&gt;m_bPrinting = TRUE;
    m_dcPrint.m_bPrinting = TRUE;
    m_dcPrint.SaveDC();     // Save pristine state of DC
    HDC hDC = ::GetDC(m_hWnd);
    m_pPreviewDC-&gt;SetOutputDC(hDC);
    m_pPrintView-&gt;OnBeginPrinting(m_pPreviewDC, m_pPreviewInfo); 
    m_pPreviewDC-&gt;ReleaseOutputDC();
    ::ReleaseDC(m_hWnd, hDC);
    m_dcPrint.RestoreDC(-1);    // restore to untouched state
    // Get Pixels per inch from Printer 
    m_sizePrinterPPI.cx = m_dcPrint.GetDeviceCaps(LOGPIXELSX); 
    m_sizePrinterPPI.cy = m_dcPrint.GetDeviceCaps(LOGPIXELSY);
    m_nPages = m_pPreviewInfo-&gt;m_nNumPreviewPages; 
    m_nZoomOutPages = m_nPages;
    SetScrollSizes(MM_TEXT, CSize(1, 1));   // initialize mapping mode only
    if (m_pPreviewInfo-&gt;GetMaxPage() &lt; 0x8000 &amp;&amp;
         m_pPreviewInfo-&gt;GetMaxPage() - m_pPreviewInfo-&gt;GetMinPage() &lt;= 32767U)
            SetScrollRange(SB_VERT, m_pPreviewInfo-&gt;GetMinPage(),
            m_pPreviewInfo-&gt;GetMaxPage(), FALSE);
    else
         ShowScrollBar(SB_VERT, FALSE);
    SetCurrentPage(m_pPreviewInfo-&gt;m_nCurPage, TRUE); return TRUE;
}
</pre>
<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
