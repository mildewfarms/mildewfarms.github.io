<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>APR96: Calling 16-bit DLLs from Windows 95</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>Calling 16-bit DLLs from Windows 95<a name="0167_006f"><a name="0167_006f"><a name="0167_006d"><a name="0167_0000"></h1><P>

<h2>Incorporating 16-bit DLLs into 32-bit applications</h2><P>

<h3>Steve Sipe</h3><P>

<P>
<i><a name="0167_006e"><a name="0167_0000">Steve is a developer with GE Fanuc Automation in Charlottesville, Virginia. He can be reached at steve.sipe@cho.ge.com.</i></p><hr><P>

Porting 16-bit Windows 3.x applications to 32-bit Windows 95 can sometimes be difficult, especially if the 16-bit apps depend on third-party DLLs. In some cases, the 32-bit, third-party DLLs may not yet be available or, if they are, the expense of replacing these DLLs with 32-bit versions is prohibitive. These are the problems I encountered when converting a Windows 3.x application that used a 16-bit TWAIN scanner DLL to a Windows 95 app.<P>

In this article I'll present a technique for easily incorporating 16-bit DLLs into 32-bit applications. The source code and DLLs (available electronically; see &quot;Availability,&quot; page 3) will let you build interfaces between 32-bit applications and 16-bit DLLs using only Visual C++ 2.x and Visual C++ 1.x.<P>

<h3><a name="0167_0070">The Problem<a name="0167_0070"></h3><P>

Most scanners currently have only 16-bit device drivers that communicate with 16-bit TWAIN DLLs. Unfortunately, 32-bit applications can't directly call a 16-bit DLL. Microsoft suggests two ways to accomplish this: <P>
<ul>
<li>Build a 16-bit server .EXE and communicate through DDE.</li>
<li>Implement a thunking layer.</li>
</ul>
On one hand, implementing a server .EXE seemed to be the easiest approach. It didn't involve generating, assembling, and linking &quot;thunk scripts&quot; to thunking-layer DLLs. On the other hand, the server .EXE approach had a major drawback--I could not display TWAIN modal dialog boxes in my application and have it automatically disable the application's main window. Since each .EXE has its own task space, making a dialog box in one task appear modal to another task is not a simple process. Implementing a thunking-layer DLL would solve this problem because the DLL would be in the same task as my application's main window. I was hesitant about thunking mainly because of its reputation as a &quot;black art.&quot; In spite of this, I began to implement a thunking layer so that my 32-bit application could call 16-bit TWAIN DLL functions directly.<P>

<h3><a name="0167_0071">Why is Thunking Necessary?<a name="0167_0071"></h3><P>

Windows 95 and Windows NT use flat memory addressing. Pointers exist as 0:32 (flat) addresses. Windows 3.x is based on segmented memory addressing, and pointers exist as 16:16 (segment, offset) addresses. The two types of pointers are not directly interchangeable. <P>

Enter the thunking layer. Windows 95 implements a thunking layer to allow existing 16-bit Windows applications to call 32-bit Windows 95 operating-system code. This thunking layer has several useful functions. One function is the translation of 0:32 pointers to 16:16 pointers, something I definitely needed to accomplish. Another important function is the ability to call 16-bit code from 32-bit applications. The Windows 95-specific thunking solution (known as the &quot;flat thunk&quot;) directly supports the thunking layer built into Windows 95. This would enable me to pass pointers across 32-bit to 16-bit boundaries as well as call 16-bit code. The only drawback is that this thunking approach is only available when running on Windows 95. For my application, this was not a concern because our target platform was Windows 95 anyway.<P>

<h3><a name="0167_0072">The Adventure Begins<a name="0167_0072"></h3><P>

Armed with my Microsoft Developer's CD, Win32 SDK, MASM, and Visual C++, I began to explore the basics of building thunking DLLs. I found a good article on the Developer's CD that gave me an idea of exactly what I wanted to do. It described the steps involved in building a thunking layer:<P>
<ul>
<li>Write a thunking script that describes each function and parameter in the 16-bit DLL.</li>
<li>Run the thunk compiler to generate the assembly-language file that does the actual thunking.</li>
<li>Assemble the assembly-language file as a 16-bit and 32-bit object.</li>
<li>Build a 32-bit DLL that initializes the 32-bit side of the thunking layer and link the 32-bit object file to it.</li>
<li>Build a 16-bit DLL that initializes the 16-bit side of the thunking layer and link the 16-bit object file to it.</li>
<li>Run the Win32 SDK 16-bit version of RC to mark the 16-bit DLL as &quot;Windows 4.0 compatible&quot;.</li>
<li>Build a 32-bit application and link the 32-bit thunking DLL to it.</li>
</ul>
I started by analyzing the sample program from the Developer's CD. I examined each piece of code to determine which pieces were important for my implementation. Some things became immediately apparent. Building and maintaining my thunking layer involved incorporating some new (and old) tools into my build environment: the thunk compiler, assembler, and the new 16-bit version of the RC compiler (required for version stamping). <P>

I began to implement my first thunking function call. First, I added a prototype in my 32-bit application for the 32-bit side of the thunking function; see <a href="9604d.htm#0167_007a">Example 1(a)</A>. Then, I added the code for <I>MyNew32Func()</I> to the 32-bit thunk DLL and exported it; refer to <a href="9604d.htm#0167_007a">Example 1(b)</A>. Next, I wrote an entry for the 16-bit function call in the thunk script using the C-like language supported by the thunk compiler; see <a href="9604d.htm#0167_007a">Example 1(c)</A>. Finally, as <a href="9604d.htm#0167_007a">Example 1(d)</A> illustrates, I added the code for <I>MyNew16Func()</I> to the 16-bit DLL and exported it. <P>

I then ran the make files that generated an assembly-language file from the thunk script, assembled it, compiled the DLLs, and linked in the thunk object files. <P>

It quickly became apparent that adding new functions would be a tedious task. I soon began to search for an approach that would yield the desired results with much less effort, preferably one that didn't require using the thunk compiler and assembler when adding new functions.<P>

<h3><a name="0167_0073">The Design<a name="0167_0073"></h3><P>

One approach for simplification would be to devise some &quot;generic&quot; function that I could call in my 32-bit and 16-bit thunking DLLs. Using one function meant that I would only need to write the thunk script once, compile it, then assemble it. From that point on, I would only have to link to the thunk object because the function definition would not need to change. I formulated a plan. I knew that I could pass variable arguments to C-style functions, but the thunk compiler requires Pascal functions (which have a fixed number of arguments). I also wanted the thunking layer to translate my pointers from 0:32 style pointers to 16:16 pointers. <P>

I decided to build a simple function in the 32-bit DLL that is exported with the C calling convention and then use the C-variable-argument routines to access the parameters. This function would be responsible for copying the variable parameters I specified to fixed parameters and calling my 16-bit thunk function. The next challenge was specifying the types of parameters that I wanted to pass. Were they pointers requiring translation, or just values? <P>

Having done some MFC OLE programming, I was familiar with the proxy-dispatch setup it uses. A proxy specifies an array of parameter types that it passes to <I>InvokeHelper()</I> along with a dispatch ID. The parameter-type array specifies the type of each parameter (see the <I>DTC_xxx</I> values in parm.h for the types that my implementation uses). The dispatch ID corresponds to an entry in the dispatch table of the connected OLE object. This entry specifies the appropriate function to call.<P>

The OLE interface that <I>InvokeHelper()</I> calls also performs what Microsoft describes as &quot;marshaling&quot; and &quot;unmarshaling&quot; of data. This basically means that data is grouped together on the sending end and ungrouped on the receiving end. The <I>Invoke16Func()</I> function that I eventually implemented serves the same purpose as the OLE <I>InvokeHelper()</I> method. It is called by a proxy method and is responsible for grouping variable parameters into fixed parameters so the thunking layer can convert them properly. On the 16-bit side the thunk function ungroups the parameters, places them on the stack frame using inline assembly statements, and looks up the corresponding function (in the dispatch table) and calls it. <P>

<h3><a name="0167_0074">The New Process<a name="0167_0074"></h3><P>

I now had an easy way to define new 16-bit functions and call them from 32-bit applications--a way that no longer required the tedious iterations of building, compiling, and assembling thunk scripts for each new function. <P>

First, I defined a simple proxy in my 32-bit application; see <a href="9604d.htm#0167_007b">Example 2(a)</A>. I chose to use C++ but could have just as easily used C. This proxy described my parameter types for the marshaling interface, then called the interface. The return code (<I>ulError</I>) contains the return code from the 16-bit function.<P>

In the 16-bit thunk DLL, I added the dispatch table in <a href="9604d.htm#0167_007b">Example 2(b)</A> and added the code for <I>MyNewFunc(</I><I>)</I>; see <a href="9604d.htm#0167_007b">Example 2(c)</A>. <P>

That's it. I just recompiled the 16-bit thunk DLL and recompiled my 32-bit application. No more thunk compiler, thunk scripts, MASM, or the like. I had a simple way to implement 16-bit function calls in 32-bit code. In fact, I could use the 16-bit header files as a starting point for building my proxies. <P>

<h3><a name="0167_0075">A Small Hurdle<a name="0167_0075"></h3><P>

Then came my first obstacle. I found that quite a few of the functions in my favorite graphing package need to use <I>floa</I><I>t</I>s and <I>doubl</I><I>e</I>s, but the thunk compiler doesn't support these data types. After a little research, I found that converting numbers between 32-bit and 16-bit apps was fairly straightforward. The only tricky data type is <I>int</I>. The <I>int</I> type is 32 bits in a 32-bit application and 16 bits in a 16-bit application. I was familiar with this ambiguity because OLE forces you to use <I>short</I> to describe 16-bit integers and <I>long</I> to describe 32-bit integers. It turned out that all the other C data types are the same size on both the 32-bit and 16-bit sides.<P>

Realizing that manually converting numbers would not be a problem, I still had one last hurdle to overcome--passing floating-point values across the thunk boundary. I speculated that it might be possible to build an array of double values and load it with the various double parameters that I would need, then pass a pointer to the array across the thunk boundary. This pointer could then be translated to a proper 16-bit pointer. This works because the values don't really need any translation across the boundary. I can load up all my values and just pass one pointer to the appropriate array. This also turned out to be a more-efficient approach. I could now pass quite a few values using only one fixed parameter.<P>

<h3><a name="0167_0076">Some Minor Restrictions<a name="0167_0076"></h3><P>

My implementation has a few minor restrictions, mainly because of limitations in the thunk compiler. You can pass a maximum of 11 pointers (values only take a maximum of two pointers: one for doubles and one for all other value types). Of course, you can easily get around this restriction by passing structure pointers. I haven't found any functions yet that require 11 pointers. <P>

Each of the major data types are defined in the header file parm.h. Keep in mind that the only important thing is the size of the data. In other words, an unsigned <I>short</I> is 16 bits and a signed <I>short</I> is 16 bits. The data definition DTC_SHORT defines a 16-bit value; the sign bit does not matter to the <I>Invoke16Func()</I> interface.<P>

<h3><a name="0167_0077">What Tools do I Need?<a name="0167_0077"></h3><P>

Given the DLLs and samples provided, you should be able to implement your own interfaces to 16-bit DLLs. As long as you have no need to modify the thunk-script behavior, you will only need Microsoft Visual C++ 2.x for the 32-bit side and Visual C++ 1.x for the 16-bit side. I have also included a quick-and-dirty program called &quot;stamp&quot; to update the version stamp of the 16-bit DLL. This eliminates having to run the new 16-bit RC compiler to update the version stamp.<P>

<h3><a name="0167_0078">Helpful Hints<a name="0167_0078"></h3><P>

There are a few things to keep in mind when implementing your proxies and dispatch methods:<P>
<ul>
<li>Be sure you choose the proper data size. For example, the DTC_INT type is 16 bits (same as <I>short</I>) because <I>int</I> values are 16 bits in 16-bit DLLs, but <I>int</I> is 32 bits in your 32-bit calling code. A good rule of thumb is to always use <I>short</I> and <I>long</I> for data definitions instead of <I>int</I>. If you are writing proxies for third-party packages be sure to translate any <I>in</I><I>t</I>s in the prototypes to <I>shor</I><I>t</I>s in your proxy.</li>
<li>Make sure that the number of parameters in the <I>parms[]</I> array exactly matches the number and type of parameters that the 16-bit function expects. Otherwise, the &quot;illegal instruction&quot; gremlin will haunt you. If you do crash the 16-bit DLL, you will probably have to reboot. Unfortunately, crashing often leaves the 32-bit and 16-bit thunking DLLs loaded in memory.</li>
<li>Don't pass pointers to pointers. This will defeat the 0:32 to 16:16 translation. If your 16-bit function needs to allocate and return data, use <I>GlobalAlloc()</I>, and pass back the memory handle.</li>
<li>Be careful with structure alignment. 32-bit and 16-bit applications align structures on different boundaries. A good idea is to use the <I>#pragma pack(1)</I> directive around the structure definitions to ensure that no boundary alignment occurs. Also, don't pass pointers in structures because they won't get translated.</li>
<li>You can always write local functions in the thunking DLL to manipulate data, then call 16-bit imported functions. For instance, suppose you had an imported 16-bit function <I>MyRect(HWND hwnd, RECT rect)</I> that required a RECT structure. Because the proxy interface does not directly support passing structures by value, you would have to call <I>MyRect(HWND hwnd, RECT </I><I>*</I><I>lpRect)</I>. You could then write an intermediate local function in the 16-bit thunking DLL <I>_MyRect(HWND hwnd, RECT </I><I>*</I><I>lpRect)</I> that calls the imported function <I>_MyRect(hwnd,</I><I>*</I><I>lpRect)</I> and passes the RECT structure by value.</li>
<li>Pointers can reference a maximum of 64K of data. This limitation exists because the thunking layer maps the flat segment of a 0:32 pointer into a one-segment 16:16 pointer. If you need to address more that 64K of data, use <I>GlobalAlloc()</I> and pass the memory handle.</li>
</ul>
One last thing:The 32-bit DLL can fail to load for various reasons, but usually for reasons related to the 16-bit DLL. Verify that the 16-bit DLL's version stamp was updated. Also, verify that any imported 16-bit DLLs are in the path.<P>

<h3><a name="0167_0079">The Sample Code<a name="0167_0079"></h3><P>

The PARMTEST sample application (available electronically) is an MFC application that calls a simple 16-bit DLL named &quot;DummyDLL.&quot; DummyDLL implements a couple of simple functions. One displays a modal message box; the other draws random shapes into the caller's device context. The file dummypxy.cpp implements the proxy methods for DummyDLL. The dispatch table for the functions is contained in the file parm16ds.c. <P>

<h4><a name="0167_007a"><B>Example 1:</B> Implementing a thunking function call. (a) Adding a prototype in a 32-bit application for the 32-bit side of the thunking function; (b) adding and exporting code for MyNew32Func() to the 32-bit thunk DLL; (c) entry for the 16-bit function call in the thunk script; (d) adding and exporting code for MyNew16Func() to the 16-bit DLL.<a name="0167_007a"></h4><P>

<pre>(a)
void MyNew32Func(HWND hDlg, LPSTR lpszSomeText);

(b)
void MyNew32Func(HWND hDlg, LPSTR lpszSomeText)
{
   // Call the 16 bit thunked function
   MyNew16Func(hDlg,lpszSomeText);
}

(c)
void MyNew16Func(HWND hDlg, LPSTR lpszSomeText)
{
   lpszSomeText = input;
}

(d)
void FAR PASCAL _export MyNew16Func(HWND hDlg, LPSTR lpszSomeText)
{
    // Set a dialogbox field from the 16 bit side
    SetDlgItemText(hDlg,lpszSomeText);
}</pre>

<h4><a name="0167_007b"><B>Example 2:</B> (a) Defining a proxy in a 32-bit application. (b) Adding the dispatch table in the 16-bit thunk DLL; (c) adding code for MyNewFunc().<a name="0167_007b"></h4><P>

<pre>(a)
LONG CMyProxy::MyNewFunc (HWND hDlg, LPSTR lpszSomeText)
{
    unsigned long ulError;
    BYTE parms[] = {DTC_HWND,DTC_PTR,DTC_END};
    
    Invoke16Func(0x01,&amp;ulError,hDlg,lpszSomeText);
    
    return((LONG) ulError);
}

(b)
BEGIN_DISPTABLE
    DISP_FUNCTION(0x01,MyNewFunc)
END_DISPTABLE

(c)
LONG FAR PASCAL _export MyNewFunc(HWND hDlg, LPSTR lpszSomeText)
{
    MessageBox(hDlg,lpszSomeText,&quot;Hello from 16 Bits!&quot;,MB_OK);
    return(0L);
}</pre>

</BODY></HTML>
