<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>October 1996:    Extending the Visitor Design Pattern</TITLE></HEAD>
<body bgcolor="FFFFFF">
<P>

<h1>Extending the Visitor Design Pattern</h1><P>

<P>

<h2>Conditional components give you more flexibility</h2><P>

<P>

<h3>Matthew Nguyen</h3><P>

<P>
<i>Matthew is a consultant specializing in C++. He can be contacted at mnguyen@ clark.net.</i></p><hr><P>

The Visitor design pattern, presented in <I>Design Patterns, Elements of Reusable Object-Oriented Software</I>, by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides (Addison-Wesley, 1995), promotes loose coupling between data and functionality. Its primary purpose is to abstract functionality that can be applied to elements within a data structure. Think of a Visitor object as a door-to-door salesman; the data elements are represented by potential customers on his route. He must visit each of them to accomplish his task: for instance, selling insurance.<P>

The visitor concept may take on many forms (a mailman, milkman, newspaper boy, and so on). In all abstracts, the visitor may engage with the consumer to perform some discrete action. A negotiation generally takes place in which the visitor presents himself and is either accepted or rejected by the consumer. For binary data, this separation offers many benefits. For one, it hides the implementation of the data structure (as well as the traversal method of its elements) from the user. With certain data structures, traversal may be complex, as with some recursive structures, and certainly, numerous requirements to access them only compound the problem. Iterators may offer a solution, but they are often limited by their ignorance of the datatypes upon which they traverse. With visitors, the datatypes are known upon entering the requisite Visit() function.<P>

A Visitor object is generally tied to the elements that it traverses. An element must be able to accept a Visitor object and, in turn, offer itself to be visited. This negotiation provides proper type checking, and thereby offers an elegant solution to datatype discrimination without the need for creative casting and/or RTTI.<a href="19970409.htm"> Figure 1</A> outlines this exchange.<P>

The approach is straightforward. The abstraction of functionality is encapsulated within each discrete visitor and is applied to each element through iteration. The method allows the construction of lightweight element container classes as element functionality is removed from the method's responsibility. New functionality can easily be added to a data structure through the construction of new Visitor objects. <a href="9610c.htm#00b4_005b">Example 1(a)</A> is the template for a generalized Visitor design pattern.<P>

Loop and End Loop outline the traversal, and Visitor.Visit() outlines the executing statement(s). It is within the Visit() function that analysis is performed. A standard statement may be composed of a variety of commands. These commands represent actions that may be applied to the attributes of the element. Commands may also be composed of conditionals, typically implemented by if/then/else logic, to accomplish some set of tasks across a specific-element domain. Herein is the weakness. By fusing the conditional within the statement, and thus within Visitor.Visit(),  reusability is restricted for this object. The Visit() function in <a href="9610c.htm#00b4_005b">Example 1(b)</A> demonstrates this shortcoming. Here, Element.ApplyDiscount() represents an atomic function that can be reused; yet when combined with the embedded conditional, limits the application of this visitor with respect to other services (for instance, ApplyDiscounts to all Elements that are green). While this statement represents a single command, you can visualize that a much larger grouping of commands, with a collective function deemed atomic, would have been wasted on this single-visit action.<P>

By recognizing this anomaly, a way to separate the condition from the statement can be devised through the addition of conditional intelligence. Conditional abstraction can be implemented in many ways. It can be achieved through parameter passing, as in VisitAllElements(Visitor&amp; float fCeilingPrice, colorType cType). However, this approach provides a very strict view of the data structure and would result in the implementation of many VisitAllElements() functions accommodating the numerous variations of the attributes of ElementType. An alternative method can be found to generalize the solution. <a href="9610c.htm#00b4_029c">Listing One</A> extends the template in<a href="9610c.htm#00b4_005b"> Example 1</A>.<P>

The extensions allow for conditional abstraction. However, prior to visitation, conditions may be attached on-the-fly to the Visitor object. This separation allows for the generation of reusable conditional components, as well as reusable statement components. These atoms may easily be combined to form more diverse and/or complex operations. With this approach, the Visitor class would export the methods in <a href="9610c.htm#00b4_029b">Listing Two</A>. Thus, an implementation for DiscountElementVisitor would implement the Visit() function in<a href="9610c.htm#00b4_029d"> Listing Three</A>.<P>

Notice that the conditional has been completely removed and the atomic function Element.ApplyDiscount() remains. AddConditional() and ClearConditionals() maintain the list of conditionals kept by the visitor. AddConditional() accepts a Conditional object and appends it to the internal array of known conditionals. ClearConditionals() is provided to reuse a visitor within a function and merely empties the internal list. The Operator object is used to evaluate the set of conditionals in the ApplyConditionals() function. Typically, these tests are made through simple &amp;&amp; and || operations. Much like the conditionals, abstracting these logical operators allows more flexibility. It is useful to install some default operator with the creation of each visitor. This base action prevents the need to set the operator each time. <a href="9610c.htm#00b4_029e">Listing Four</A> is the generalized Operator class.<P>

GetInitialValue() is important as it seeds the tally test flag. The AND operator seeds this flag with a value of TRUE, while the OR operator would initialize with a FALSE value. The test flag is then continually used to determine consecutive conditional relationships. Visitor.ApplyConditionals() uses the Operator class to evaluate its internal conditionals through iteration; see<a href="9610c.htm#00b4_029f"> Listing Five</A>.<P>

The implementation of the Conditional class is easily coded. Each Conditional object must be able to receive an Element and test it against some known criteria returning the result; see <a href="9610c.htm#00b4_02a0">Listing Six</A>. Through this interface, a typical conditional can be implemented, as in <a href="9610c.htm#00b4_02a1">Listing Seven</A>.<P>

As seen, Visitor.ApplyConditionals() iterates through its list of attached conditions, calling Conditional.ApplyCondition() on the received Element and using the Operator object to evaluate multiple conditions. Upon a successful return, the Visitor.Visit() function would then be invoked, or else the Visitor.ElseVisit() function would trap.<P>

Using these Visitor and Conditional objects then becomes a matter of mixing and matching to taste. <a href="9610c.htm#00b4_02a2">Listing Eight</A> uses these atomic objects to perform a variety of actions across the element list. The Visitor.ElseVisit() was found to be useful <P>

under some circumstances, but its implementation makes the Visitor less generic, as it must know (to some degree) the implementation of the applied conditions. It was provided to allow the visitor to be flexible across all implementations.<P>

The Visitor design pattern provides a nice abstraction when dealing with multiple elements of known types. Through conditional components, it is possible to develop a library of reusable conditionals and reusable visitors. These simple components, in turn, allow for the creation of complex components built from reusable objects. The cost analysis for this approach requires up-front development time for each Conditional object and each Visitor object which, in turn, depend on the attributes of Element. However, as the component library grows, development time would be consumed in the application of this extension. It is important to understand that the implementation of each Conditional and Visitor object should attempt to retain its atomic properties; that is, restrain from overloading these objects with too many conditions or commands that may restrict generic use. For complex operations that require the use of dissimilar functions, it is better to create multiple visitors, each implemented with discrete methods. A Composite Visitor would then be constructed to combine them for execution in one pass. This action allows multiple combinations of functionality to be applied through composition, but retains the generic nature of an atomic entity for each visitor.<P>

<P>

<P>

<P>

<h4><a name="00b4_005b">Example 1: (a) Template of a generalized Visitor design pattern; (b) the Visit() function.</h4><P>

<pre>(a)
Loop on ElementList
     Visitor.Visit( Element (i) )
End Loop

(b)
void DiscountElementVisitor:: Visit ( ElementType&amp; Element )
{
     if ( Element.price &gt; SomeCeilingPrice )
          Element. ApplyDiscount (  Some DiscountValue );
}</pre>

<P>

<P>

<P>

Figure 1: Visitor negotiation process.<P>

<P>

<P>

<a name="00b4_029c"><h3>Listing One</H3><PRE>

Loop on ElementList
    if ( Visitor.ApplyConditionals( Element(i) )
        Visitor.Visit( Element(i) )
    else
        Visitor.ElseVisit( Element(i) )
End Loop
<P>
</pre>
<a name="00b4_029b"><h3>Listing Two</H3><PRE>

class Visitor
{
public :
    Visitor(){ m_pOperator = &amp;globalAndOperator };   // install default
    virtual~Visitor(){};                             // operator
    virtual bool ApplyConditionals( ElementType&amp; );
    void AddConditional( Conditional&amp; rCondition )
        { m_ConditionalArray.Add( &amp;rCondition ); }
    void ClearConditionals()
        { m_ConditionalArray.Clear(); }
    void SetOperator( Operator&amp; rop )
        { m_pOpertator = &amp;rop; }
    virtual int Visit( ElementType&amp; ) = 0;
    virtual int ElseVisit( ElementType&amp; )   // catch all else
        { return 0; }                       // not processed
private :
    ArrayPtr            m_ConditionalArray;
    Operator*           m_pOperator;
};
</pre><P>

<a name="00b4_029d"><h3>Listing Three</H3><PRE>

class DiscountElementVisitor : public Visitor
{
public :
    DiscountElementVisitor( float fValue )
    {
        m_fDiscount = fValue;
    }
    ~DiscountElementVisitor()

   {
    }
    int Visit( ElementType&amp; ret )
    {
        // apply discount to all Elements that we see
        ret.ApplyDiscount( m_fDiscount );
        return 1;   // processed
    }
private :
    float m_fDiscount;
};
</pre><P>

<a name="00b4_029e"><h3>Listing Four</H3><PRE>

class Operator
{
public :     Operator() {};
    virtual~Operator() {};
    virtual bool GetInitialValue() = 0;
    virtual bool Evaluate( bool bTest, bool&amp; rbStatus ) = 0;
};
class OperatorAND  : public Operator    // implement an AND operation
{
public :
    OperatorAND() {};
    ~OperatorAND() {};
    bool GetInitialValue() { return true; }
    bool Evaluate( bool bTest, bool&amp; rbStatus )
    {
        rbStatus = bTest &amp;&amp; rbStatus;
        return ( rbStatus );
    }
};
</pre>

<a name="00b4_029f"><h3>Listing Five</H3><PRE>

bool Visitor:: ApplyConditionals( ElementType&amp; ret )
{   bool bStatus = true;
    bool bContinue = true;
    Conditional* pConditional;

    // check for the case when NO conditionals have been installed.
    // Allow process to continue in this case.

    if ( 0 == m_ConditionalArray.GetSize() )
        return true;
    // seed our test value.
    bStatus = m_pOperator-&gt;GetInitialValue();
    pConditional = m_ConditionalArray.GetStart();

   while (  bContinue &amp;&amp; pConditional )
    {
        // evaluate Element with pConditional and set bStatus for
        // running tally. return false to bContinue on failure else true

        bContinue =
            m_pOperator-&gt;Evaluate
            (
              pConditional-&gt;    ApplyCondition(ret),
              bStatus
            );
        pConditional = m_ConditionalArray.GetNext();
    }
    return bStatus;
}
</pre><P>

<a name="00b4_02a0"><h3>Listing Six</H3><PRE>

class Conditional       // base
{
public :
    Conditional()} :
    virtual~Conditional()
    virtual bool ApplyCondition( ElementType&amp; ) =0 ;
};
</pre><P>

<a name="00b4_02a1"><h3>Listing Seven</H3><PRE>

class ColorElementConditional : public Conditional
{
public :
    ColorElementConditional( colorType ct )
        { m_color = ct; }
    ~ColorElementConditional()
        { };
    bool ApplyCondition( ElementType&amp; ret )
        {
            return ( m_color == ret.GetColor() ); //apply test
        }
private :
    colorType m_color;
};
</pre><P>

<a name="00b4_02a2"><h3>Listing Eight</H3><PRE>

// discount on green items
void SomeObject:: ApplyDiscount1()
{
    DiscountElementVisitor dev( fSomeDiscount );
    ColorElementConditional cec( colorTypeGreen );

   dev.AddConditional( cec );
    VisitAllElements( dev );
}
// discount on certain priced items
void SomeObject:: ApplyDiscount2()
{
    DiscountElementVisitor dev( fSomeDiscount );
    PriceElementConditional pec( fSomeCeilingPrice );
    dev.AddConditional( pec );
    VisitAllElements( dev );
}
// discount on both
void SomeObject:: ApplyDiscount3()
{
    DiscountElementVisitor dev( fSomeDiscount );
    ColorElementConditional cec( colorTypeGreen );
    PriceElementConditional pec( fSomeCeilingPrice );
    dev.AddConditional( cec );
    dev.AddConditional( pec );
    VisitAllElements( dev );
}
// discount on either
void SomeObject:: ApplyDiscount4()
{
    DiscountElementVisitor dev( fSomeDiscount );
    ColorElementConditional cec( colorTypeGreen );
    PriceElementConditional pec( fSomeCeilingPrice );
    OperatorOR oor;
     dev.AddConditional( cec );
    dev.AddConditional( pec );
    dev.SetOperator( oor );       // use an OR operator

    VisitAllElements( dev );
}

</pre>

</BODY></HTML>
