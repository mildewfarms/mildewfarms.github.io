<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>September 1996:  Managing a Web Shopping Cart</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>Implementing a Web Shopping Cart</h1><P>

<P>

<h2>Online transactions in Perl</h2><P>

<P>

<h3>Chris Baron and Bob Weil</h3><P>

<P>

<P>
<i>Chris Baron is director of programming and Bob Weil is a partner at The Hypertising Network, creating next-generation, marketing-driven websites. Bob can be reached at egraphic@ix.netcom.com, Chris at cbaron@egrafx.com.</i></p><hr><P>

<P>

As the World Wide Web makes the transition from an academic communication channel to a commercial medium, the demand for new ways to conduct transactions increases. The rich graphics and hypertext environment of the Web make the presentation of products and services easy and efficient. Coupled with built-in support for fill-in forms and platform-independent client-server communications, you'd think the Web would be the ideal commerce channel. However, the nature of the Web and HTTP is not well suited to the type of transactions required for online shopping, particularly the virtual &quot;shopping cart&quot; metaphor often seen on Web sites today. In this article, we'll examine the components of an online catalog, focusing on a virtual shopping-cart system and some ways around the shortcomings of HTTP.<P>

<h3>What's in the Cart?</h3><P>

The shopping-cart interface is only one part of an online catalog and ordering system. In general terms, an online catalog consists of the following: <P>

1. A database of text and graphics describing the items in the catalog.<P>

2. An efficient mechanism to display the items on demand.<P>

3. A process to collect shipping and payment information.<P>

4. A method of tracking items the user wishes to purchase.<P>

5. A way to identify the user, and a way to group a series of HTTP requests into a single &quot;session.&quot;<P>

<P>

The Web and HTTP are very good at the first two points. Most items can be sufficiently displayed with HTML, embedded graphics, and hypertext links. For a large number of items, a database of text and graphics should be created and the pages generated programmatically on-the-fly to reduce storage and maintenance requirements. The collection of shipping and payment data is also easily implemented over the Web by using &lt;FORM&gt; and related tags.<P>

Points four and five are not well supported by the HTTP protocol due to its stateless and connectionless nature (see <B><I>&quot;Hypertext Transfer Protocol-HTTP/1.0 Specification,</B></I>&quot; Internet-Draft 05, Internet Engineering Task Force (IETF), February 19, 1996). A Web page consisting of HTML-formatted ASCII text and several graphics is transferred as a series of discrete request/response transactions between the browser and the HTTP server rather than as a continuous connection. However, neither the client nor server maintain any knowledge of the state of the previous or other connections. This provides an efficient method for servers to handle hundreds or thousands of simultaneous requests. When there is a need to maintain state information over extended periods (as in the current case), additional data must be stored somehow: either in the browser, server, or both. Several methods for transmitting state data over the Web have been developed. The three we'll discuss are of the following:<P>
<ul>
<li>The type=hidden attribute of HTML forms.</li>
<li>The Netscape &quot;cookie&quot; method (in which a &quot;cookie&quot; containing state data is passed along in the HTTP request-response dialog).</li>
<li>Using a database to store the current  state on the server.</li>
</ul>
<P>

<a href="9609h.htm#0085_0050">Listing One</A> is an online-catalog system called &quot;Minishop&quot; implemented in Perl. For maximum compatibility, we used Perl 4 and tried to make the code clear and accessible by avoiding opaque Perl-isms. The source code for Minishop is available electronically from DDJ  and from our site at http://www.egrafx.com/ minishop/.<P>

A single script generates all the HTML pages for the shopping system. When called with no parameters, as in an initial call, it produces a catalog index page listing all of the items in the database (<a href="199703f8.htm">Figure 1</A>). The catalog data is stored in a Perl associative array with the part number as the key. The data is a colon-separated string containing the price and other data about the item. A production system would also include descriptive text about each item and references to one or more graphic images or sound files.<P>

 Selecting an item name displays the detailed catalog page for the item using the &amp;show_item_page subroutine. Buttons are provided to show the current contents of the shopping cart, empty it, or go to the checkout page. <a href="199703f9.htm">Figure 2</A> shows a detailed catalog page. In a production system, large numbers of similar pages could be created in real time using a template. During the real-time generation of the page, the item name and other descriptive data are inserted into the template. Several of the systems listed at the end of the article use this method to generate their catalog pages, thus eliminating the need for many similar but slightly different HTML pages.<P>

The current contents of the shopping cart are displayed by calling the &amp;show_cart subroutine, which generates the display in <a href="199703fa.htm">Figure 3</A>.<P>

Finally, when users are ready to purchase the selected items, they are shown the page generated by the &amp;check_out subroutine. This page allows users to review the items selected, and calculates the total bill along with tax and shipping charges. Address and payment information are also collected on this form. In many current systems, the specifics of the user's location and desired shipping mode would be collected first to allow proper calculation of sales tax and shipping charges. In our simple system, we've combined these steps into the single page in<a href="199703fb.htm"> Figure 4</A>.<P>

Basic systems simply collect the data from the form and send the order information to the sales department via e-mail or fax without validation, perhaps encrypted for security. Advanced systems minimize the man-hours spent on each order by automatically validating credit-card data, initiating production activities, and updating inventory databases.<P>

<h3>I'm Hidden (But You Can Still See Me)</h3><P>

The first of three methods we'll use to store the contents of the shopping cart is a type=hidden attribute of an HTML &lt;INPUT&gt; field.<a href="9609h.htm#0085_041d"> Example 1</A> shows how to store data in this way. The $cart_out string is created by the &amp;maintain_state subroutine and contains the contents of the shopping cart as colon-delimited fields consisting of the part number and the quantity. When the script is called, it reads any data passed in the cartdata field. To pass the data between pages, we use a hypertext link generated for each catalog entry containing the catalog data. Both methods are necessary on this particular page because the script may be called by clicking either the catalog hypertext links or one of the submit buttons on the form. While either method could have been used alone, we preferred GUI buttons rendered by the HTML form routines rather than text or graphic hyperlinks. This routine also reveals a little trick for automatically submitting the form when one of several buttons is clicked. Multiple buttons of type=SUBMIT are created with name=&quot;action&quot;. To find out which button was pressed, we simply read the value field of the button in our script.<P>

The advantages of the hidden-field method are ease of implementation and minimal server requirements. Only the static product databases and the single CGI script need to be stored on the server. While easy to implement, this method has some problems. The back and forward buttons on most browsers will retrieve a cached page, but will not reinvoke the script. For example, if a user adds an item to the shopping cart and then returns to the main catalog page using the browser's back button, the newly added item will be lost because the previous page did not include the new data and the form was not submitted to pass the data back to the script. Additionally, if users jump to an external page and then return via a hypertext link or bookmark, all their data will be lost because the state information is stored in the form, not in the URL. Therefore, this method is most suitable for simple applications or for passing short-term data between pages.<P>

<h3>Gimme Cookie!</h3><P>

Netscape has implemented an elegant method of passing and storing state information called HTTP &quot;cookies.&quot; The official cookie spec (see &quot;Persistent Client State HTTP Cookies,&quot; Preliminary Specification, Netscape Communications Corporation, 1996) describes it as follows:<P>

Cookies are a general mechanism which server side connections (such as CGI scripts) can use to both store and retrieve information on the client side of the connection. The addition of a simple, persistent, client-side state significantly extends the capabilities of Web-based client/server applications.<P>

This method has been adopted by the Internet Engineering Task Force (IETF) as a draft specification for maintaining HTTP state information. Cookies work by passing data in the HTTP request and response headers. The client stores cookies in a special file and sends them to the server with HTTP requests that match certain criteria. Netscape Navigator, Microsoft Internet Explorer, Netcom Netcruiser, and several other web browsers currently support cookies. (For more information, see http:// www.research.digital.com/nsl/formtest/ stats-by-test/NetscapeCookie.html.)<a href="9609h.htm#0085_028a"> Example 2 </A>is a typical cookie dialog.<P>

Thus, CGI scripts can generate the cookies and embed them into the HTTP header. When the browser requests a page from the CGI URL, the browser passes along any cookies it previously received from that server. These are stored in the environment variable $HTTP_COOKIE and can be read by the script just like other CGI parameters passed by the Web server.<a href="9609h.htm#0085_028b"> Listing Two </A>shows the modifications necessary to our shopping-cart system to use cookies to store and pass the cart data. You should substitute the routines in <a href="9609h.htm#0085_028b">Listing Two</A> for their equivalents in <a href="9609h.htm#0085_0050">Listing One</A>. Also delete the line &lt;INPUTNAME=&quot;cartdata&quot; TYPE=&quot;HIDDEN&quot; VALUE=&quot;$cart_out&quot;&gt; from the show_cart, show_item_ page, show_ cart, and check_ out routines.<P>

Cookies overcome nearly all the shortcomings of the hidden-form field method and are just as easy to implement. They provide superior security because cookies are only sent to URLs matching the cookie's criteria. This reduces the chances of spoofing and inadvertent transmission of sensitive data. Users do not normally see the cookies, and listing the source of an HTML form will not reveal their contents. Persistence is improved over the hidden-field method since the cookies are stored in a file on the client machine. They will survive any amount of Web surfing and even shutting down the client. The expiration-date parameter provides fine-grain control over how long the cookie is valid and provides automatic deletion when it expires. This can significantly reduce the effort required to track and expire old data, which is often needed with a system that uses databases to store the state. A minor shortcoming of cookies is the limited amount of data they can contain: specified as 300 total cookies, 20 cookies per domain, and 4 KB total per cookie (name+data). A more serious shortcoming is the limited set of browsers that support the specification. Although the proportion of users with a supporting browser is over 80 percent, shopping-cart systems that must support all browsers will have to use a different method until the specification is more universally supported.<P>

<h3>Databases: Tried and True</h3><P>

When considering how to store state information for a shopping cart or other application, some kind of database is what first comes to mind. As we've discussed, HTTP does not provide the continuous connection most developers are used to. Simply using a database to store the state information is not enough. We still need to be able to link the HTTP request with the data stored in the database.<a href="9609h.htm#0085_028c"> Example 3</A> and <a href="9609h.htm#0085_028d">Listing Three</A> show the modifications needed to run our system using a database to store the state. To modify Minishop2.cgi to use a DBM database, add <a href="9609h.htm#0085_028c">Example 3</A> near the top of the file, then substitute the routines in Listing Three for their equivalents. This version of Minishop is a hybrid, using a cookie to store a unique UserId identifier as a key to access the data stored in the database. We use standard DBM files because of their simple setup, and Perl's built-in support. Perl accesses DBM files as an associative array, providing a very simple interface to the database. We have two such databases in Minishop. %id_base holds the information for generating the next UserId cookie. In our case, this is a simple integer that increments for each new user. In a more complex system, we could use more-complicated methods of generating user ids and store more data about the user (perhaps in encrypted form). The %cart_db database holds the actual shopping-cart contents in the same colon-delimited form we used for the form data and the cookie data.<P>

With a bit of extra work to pass the data needed to identify the user, database-management systems can be used very effectively to store data in Web applications. The disadvantage is the sometimes considerable overhead and server load of a database system, which may be overkill for a simple application.<P>

<h3>Advanced Topics</h3><P>

A number of additional issues should be considered when implementing an online shopping system. Security is always a concern, and the architecture of your system should be designed with security in mind. The browser-to-server transactions can be encrypted with the Secure Socket Layer (SSL) system used by Netscape servers and others. Data stored on the server should be encrypted using systems such as PGP, and orders transmitted via e-mail or FTP should also be encrypted. The Web is designed to be open and accessible to all, so locations of files, permissions, and the data stored or transmitted across the Web should be carefully considered.<P>

After several years of anticipation, methods of conducting secure financial transactions are starting to emerge. Online validation of credit-card charges, digital cash, and automatic-checking debits are a reality.<P>

Web sales systems should be integrated with existing methods (such as telephone and mail-ordering) to link with sales, inventory management, and manufacturing systems.<P>

Emerging technologies, such as Java, may supersede much of the functionality discussed in this article. However, at this point, only a single commercial browser supports Java. The current need for reliable, platform-independent, client-server applications demands the use of universally supported protocols such as HTTP and CGI.<P>

<P>

<P>

<P>

<h4><a name="0085_041d">Example 1: Storing data.</h4><P>

<P>

<pre>sub show_cat {
    &amp;print_type;        # the content-type: line
    &amp;maintain_state;    # this generates the state information

    print &amp;HtmlTop(&quot;The Minishop CD-ROM Catalog&quot;);
    print &quot;&lt;P&gt;This catalog uses the type=HIDDEN form method of \n&quot;;
    print &quot;maintaining state information between pages.&quot;;
    print &quot;&lt;P&gt;Please click on an item to view more detail or to order it.\n&quot;;
    print &quot;&lt;P&gt;&lt;CENTER&gt;&lt;TABLE BORDER&gt;\n&quot;;
    print &quot;&lt;TR&gt;&lt;TH&gt;Current CDs In Stock&lt;/TH&gt;&lt;/TR&gt;\n&quot;;

    # sort for display
    foreach $item (sort keys(%catalog)) {
      ($name, $price, $num_cd, $wt) = split(':',$catalog{$item});
      print qq(&lt;TR&gt;&lt;TD&gt;);
      print qq(&lt;A HREF=&quot;$self?action=showitem&amp;page=$item&amp;cartdata=$cart_out&quot;&gt;);
      print &quot;$name&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;\n&quot;;
    }
    print &quot;&lt;/TABLE&gt;&lt;/CENTER&gt;\n&quot;;
    print qq(&lt;P&gt;&lt;CENTER&gt;&lt;FORM ACTION=&quot;$self&quot; METHOD=&quot;POST&quot;&gt;);
    print qq(&lt;INPUT NAME=&quot;action&quot; TYPE=&quot;SUBMIT&quot;
                    VALUE=&quot;Show Cart&quot; ALIGN=left&gt;\n);
    print qq(&lt;INPUT NAME=&quot;action&quot; TYPE=&quot;SUBMIT&quot;
                    VALUE=&quot;Empty Cart&quot; ALIGN=center&gt;\n);
    print qq(&lt;INPUT NAME=&quot;action&quot; TYPE=&quot;SUBMIT&quot;
                    VALUE=&quot;Check Out&quot; ALIGN=right&gt;\n);
    print qq(&lt;INPUT NAME=&quot;cartdata&quot; TYPE=&quot;HIDDEN&quot; VALUE=&quot;$cart_out&quot;&gt;);
#   print &amp;PrintVariables(%form); ######### debugging
    print &quot;&lt;/FORM&gt;&lt;/CENTER&gt;&lt;/BODY&gt;&lt;/HTML&gt;\n&quot;;
}

</pre>

<h4><a name="0085_028a">Example 2: Typical cookie dialog. (a) What the server sends; (b) whenever the client requests a URL from this server, it sends in the HTTP request.</h4><P>

<pre>(a)

Content-Type: text/html
Set-Cookie: CUSTOMER=DR_DOBBS; expires=Wednesday, 09-Nov-99 23:12:40 GMT
&gt;blank line to indicate end of header&lt;
&lt;HTML&gt;

(b)

Cookie: CUSTOMER=DR_DOBBS; ...more cookies...


</pre>

<h4><a name="0085_028c">Example 3: Modifying Minishop2.cgi.</h4><P>

<pre>
# utility arrays for dates
('Sunday', 'Monday', 'Tuesday', 'Wednesday',
        'Thursday', 'Friday', 'Saturday');
(Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec);

</pre>

<P>

Figure 1: Minishop catalog display.<P>

<P>

Figure 2: Minishop catalog page.<P>

<P>

Figure 3: Minishop shopping-cart display.<P>

<P>

Figure 4: Minishop checkout page.<P>

<P>

<P>

<P>

<a name="0085_0050"><h3>Listing One</h3><pre>

#!/usr/bin/perl
#
#  minishop1.cgi
#  A simple shopping cart CGI script written by Chris Baron
#  for Dr. Dobb's Journal. This code may be freely used and modified. If
#  you use Minishop as a starting point for anything please reference where
#  you got it. I'd appreciate a copy of the script.
#  Comments or questions?  Send me email at cbaron@egrafx.com
#  This script uses the HIDDEN attribute for a text field to store the data in
#  the shopping cart. This data is updated each time the user
#  executes the script.
#  This script uses the cgi-lib.pl v2.4 utility module
#  by Steven Brenner (S.E.Brenner@bioc.cam.ac.uk)
#  http://www.bio.cam.ac.uk/cgi-lib/

# tells Perl to use the cgi-lib.pl module
require 'cgi-lib.pl';  # in same directory as the script or in @INC

# our script name
$self = $ENV{'SCRIPT_NAME'};

# initialize the catalog.  For a real system you would want to store in
# a database for ease of maintenance and flexibility to add and delete
# new products
#
# the format of the catalog is --
# part#, title:price:num-disks:weight
%catalog = (
    'cd001', 'Algorithms and Data Structures:59.95:1:0.1',
    'cd002', 'WWW Toolkit:29.95:1:.1',
    'cd003', 'Graphics Programming Books:69.95:1:0.1',
    'cd004', q/Dr. Dobb's on CD-ROM:79.95:2:0.2/,
    'cd005', '386BSD Reference:99.00:1:0.1',
    'cd006', 'Alternative Languages:49.95:1:0.1');
# MAIN routine
 MAIN:
{
# Read in all the variables set by the form
if (&amp;ReadParse(*form)) { # if true there were parameters
        $to_do = $form{'action'}; # fetch the command
}
else {   # called with no parameters i.e. initial call
    $to_do = 'display'; #just show the catalog
}
# load the cart data into an array for use if any
&amp;get_state;

# the Perl equivalent of a switch statement to display the proper page based
# on which submit button was pressed or action parameter was passed

switch: {
    if (($to_do eq 'display') || ($to_do eq 'Return')) {
        &amp;show_cat; last switch; }
    if ($to_do eq 'showitem') {     &amp;show_item_page($form{'page'});                                                                last switch; }
    if ($to_do eq 'Show Cart') {    &amp;show_cart; last switch; }
    if ($to_do eq 'Buy/Update') {   &amp;add_item($form{'item'}, $form{'num'});
        &amp;show_cart; last switch; }
    if ($to_do eq 'Check Out') { &amp;check_out; last switch; }
    if ($to_do eq 'Empty Cart') { &amp;empty_cart; &amp;show_cat; last switch; }
    &amp;CgiError('Boo Boo', 'Bad Command none matched', &amp;PrintVariables(%form));
}
} # end of MAIN

##################### State Subroutines #######################

# get_state. here is where we fetch the state data from the hidden field
# and load it into an associative array for use
sub get_state {
    %cart_data = split(&quot;:&quot;, $form{'cartdata'});
}
# maintain_state. Here is where the hidden cart data is stored into the form
# the hidden type creates a string for use in an input field with a
# tag like &lt;INPUT TYPE=&quot;HIDDEN&quot; NAME=&quot;cartdata&quot; VALUE=&quot;$cart_out&quot;&gt;
sub maintain_state {
    if (%cart_data) {
        $cart_out = join(&quot;:&quot;, %cart_data);
    }
}
# add_item. add an item to the shopping cart the state consists of an array
# of part numbers with a non-zero quantity a quantity of zero means delete it
sub add_item {
    local ($item, $num) = @_;
    if ($num == 0) { delete $cart_data{$item} }
    else { $cart_data{$item} = $num; }  #this does a simple overwrite
}
# empty_cart. empty out the cart by simply undefing the %cart_data array
sub empty_cart {
    undef %cart_data;
}
# print_type. Prints out the magic &quot;Content-Type: text/html&quot; line
sub print_type {
    print &quot;Content-Type: text/html\n\n&quot;;
}
##################### Display Subroutines ######################
# show_cat. show the catalog index page
sub show_cat {
    &amp;print_type;        # the content-type: line
    &amp;maintain_state;    # this generates the state information
    print &amp;HtmlTop(&quot;Minishop On-Line CD-ROM Catalog&quot;);
    print &quot;&lt;P&gt;This catalog uses the type=HIDDEN form method of \n&quot;;
    print &quot;maintaining state information between pages.&quot;;
    print &quot;&lt;P&gt;Please click on an item to view more detail or to order it.\n&quot;;
    print &quot;&lt;P&gt;&lt;CENTER&gt;&lt;TABLE BORDER&gt;\n&quot;;
    print &quot;&lt;TR&gt;&lt;TH&gt;Current CDs In Stock&lt;/TH&gt;&lt;/TR&gt;\n&quot;;

    # sort for display     foreach $item (sort keys(%catalog)) {
        ($name, $price, $num_cd, $wt) = split(':',$catalog{$item});
        print qq(&lt;TR&gt;&lt;TD&gt;);
        print qq(&lt;A HREF=&quot;$self?action=showitem&amp;page=$item&amp;cartdata= $cart_out&quot;&gt;);
        print &quot;$name&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;\n&quot;;
    }
    print &quot;&lt;/TABLE&gt;&lt;/CENTER&gt;\n&quot;;
    print qq(&lt;P&gt;&lt;CENTER&gt;&lt;FORM ACTION=&quot;$self&quot; METHOD=&quot;POST&quot;&gt;);
    print qq(&lt;INPUT NAME=&quot;action&quot; TYPE=&quot;SUBMIT&quot;
                    VALUE=&quot;Show Cart&quot; ALIGN=left&gt;\n);
    print qq(&lt;INPUT NAME=&quot;action&quot; TYPE=&quot;SUBMIT&quot;
                    VALUE=&quot;Empty Cart&quot; ALIGN=center&gt;\n);
    print qq(&lt;INPUT NAME=&quot;action&quot; TYPE=&quot;SUBMIT&quot;
                    VALUE=&quot;Check Out&quot; ALIGN=right&gt;\n);
    print qq(&lt;INPUT NAME=&quot;cartdata&quot; TYPE=&quot;HIDDEN&quot; VALUE=&quot;$cart_out&quot;&gt;);

#   print &amp;PrintVariables(%form); ######### debugging
    print &quot;&lt;/FORM&gt;&lt;/CENTER&gt;&lt;/BODY&gt;&lt;/HTML&gt;\n&quot;;
}
# show_item_page. show the page for an individual item
sub show_item_page {
    local($item) = pop(@_);
    ($name, $price, $num_cd, $wt) = split(':',$catalog{$item});

    &amp;print_type;  # the content-type:.line
    &amp;maintain_state;    # this generates the state information

    print &amp;HtmlTop(&quot;Catalog Page for $name&quot;);

    print &quot;&lt;P&gt;Here is where you would place the picture and &quot;;
    print &quot;description of this item&quot;;
    print &quot;you would want to store the description in a database &quot;;
    print &quot;along with a reference to the graphic image etc.\n&quot;;

    print qq(&lt;P&gt;&lt;FORM ACTION=&quot;$self&quot; METHOD=&quot;POST&quot;&gt;);

    print qq(&lt;CENTER&gt;&lt;TABLE BORDER WIDTH=&quot;100%&quot;&gt;\n);
    print &quot;&lt;TR&gt;&lt;TH&gt;&lt;/TH&gt;&lt;TH&gt;Item&lt;/TH&gt;&quot;;
    print &quot;&lt;TH&gt;No. CDs&lt;/TH&gt;&lt;TH&gt;Price&lt;/TH&gt;&lt;/TR&gt;\n&quot;;
    $val = ($cart_data{$item}) || 1;
    print qq(&lt;TR&gt;&lt;TD&gt;&lt;INPUT NAME=&quot;num&quot; TYPE=&quot;TEXT&quot; VALUE=&quot;$val&quot;);
    print qq( COLS=2 SIZE=&quot;5&quot;&gt;&lt;/TD&gt;\n);
    print &quot;&lt;TD&gt;$name&lt;/TD&gt;&lt;TD&gt;$num_cd&lt;/TD&gt;&lt;TD&gt;$price&lt;/TD&gt;&quot;;
    print &quot;&lt;/TR&gt;&lt;/TABLE&gt;\n&quot;;

    print qq(&lt;P&gt;&lt;TABLE BORDER=0 WIDTH=&quot;100%&quot;&gt;&lt;TR&gt;\n);
    print qq(&lt;TD&gt;&lt;INPUT NAME=&quot;action&quot; TYPE=&quot;SUBMIT&quot;
                    VALUE=&quot;Buy/Update&quot;&gt;&lt;/TD&gt;\n);
    print qq(&lt;TD&gt;&lt;INPUT NAME=&quot;action&quot; TYPE=&quot;SUBMIT&quot;
                    VALUE=&quot;Show Cart&quot; ALIGN=left&gt;&lt;/TD&gt;\n);
    print qq(&lt;TD&gt;&lt;INPUT NAME=&quot;action&quot; TYPE=&quot;SUBMIT&quot;
                    VALUE=&quot;Empty Cart&quot; ALIGN=left&gt;&lt;/TD&gt;\n);
    print qq(&lt;TD&gt;&lt;INPUT NAME=&quot;action&quot; TYPE=&quot;SUBMIT&quot;
                    VALUE=&quot;Check Out&quot; ALIGN=left&gt;&lt;/TD&gt;\n);
    print &quot;&lt;/TR&gt;&lt;/TABLE&gt;\n&quot;;
    print &quot;&lt;/CENTER&gt;&quot;;

    print qq(&lt;INPUT NAME=&quot;cartdata&quot; TYPE=&quot;HIDDEN&quot; VALUE=&quot;$cart_out&quot;&gt;);

#   print &amp;PrintVariables(%form); ######### debugging

    print qq(&lt;INPUT NAME=&quot;item&quot; TYPE=&quot;HIDDEN&quot; VALUE=&quot;$item&quot;&gt;);

    print &quot;&lt;/FORM&gt;\n&quot;;
    print &quot;&lt;/BODY&gt;&lt;/HTML&gt;\n&quot;;
}
# show_cart. display the entire cartfull of stuff
sub show_cart {
    &amp;print_type;
    &amp;maintain_state;    # this generates the state information

    print &amp;HtmlTop(&quot;Your Shopping Cart&quot;);

    if (! keys %cart_data) { # shortcut if nothing in cart
        print &quot;&lt;P&gt;Is empty.&quot;;
    }
    else {
    print &quot;&lt;P&gt;Listed below is your current shopping cart\n&quot;;
    print &quot;&lt;UL&gt;\n&quot;;
    print &quot;&lt;LI&gt;Review the contents of your cart.\n&quot;;
    print &quot;&lt;LI&gt;To delete an item &quot;;
    print &quot;click on the name and change the quantity to zero\n&quot;;
    print &quot;&lt;LI&gt;To change the quantity click the item name\n&quot;;
    print &quot;&lt;LI&gt;To complete your order click the 'Check Out' button.\n&quot;;
    print &quot;&lt;/UL&gt;\n&quot;;
    print &quot;&lt;P&gt;\n&quot;;

    print qq(&lt;CENTER&gt;&lt;TABLE BORDER=1 WIDTH=&quot;100%&quot; ALIGN=CENTER&gt;\n);
    print &quot;&lt;TR&gt;&lt;TH&gt;Quantity&lt;/TH&gt;&lt;TH&gt;Item&lt;/TH&gt;&quot;;
    print &quot;&lt;TH&gt;Price&lt;/TH&gt;\n&quot;;

    # we use the part number to relate the cart_data and catalog entries
    foreach $item (sort keys(%cart_data)) { # sort for display
        $num = $cart_data{$item};
        ($name, $price, $num_cd, $wt) = split(':',$catalog{$item});
        print &quot;&lt;TR&gt;&quot;;
        print &quot;&lt;TD&gt;$num&lt;/TD&gt;\n&quot;;
        print qq(&lt;TD&gt;);
        print qq(&lt;A HREF=&quot;$self?action=showitem&amp;page=$item&amp;cartdata= $cart_out&quot;&gt;);
        print &quot;$name&lt;/A&gt;&lt;/TD&gt;\n&quot;;
        print &quot;&lt;TD&gt;$price&lt;/TD&gt;\n&quot;;
        print &quot;&lt;/TR&gt;\n&quot;;
    }
    print &quot;&lt;/TABLE&gt;&lt;/CENTER&gt;\n&quot;;
    } # end of else
    print qq(&lt;P&gt;&lt;FORM ACTION=&quot;$self&quot; METHOD=&quot;POST&quot;&gt;);
    print qq(&lt;P&gt;&lt;TABLE BORDER=0 WIDTH=&quot;100%&quot;&gt;&lt;TR&gt;\n);
    print qq(&lt;TD&gt;&lt;INPUT NAME=&quot;action&quot; TYPE=&quot;SUBMIT&quot; VALUE=&quot;Return&quot;&gt;&lt;/TD&gt;\n);
    print qq(&lt;TD&gt;&lt;INPUT NAME=&quot;action&quot; TYPE=&quot;SUBMIT&quot;
                    VALUE=&quot;Empty Cart&quot; ALIGN=left&gt;&lt;/TD&gt;\n);
    print qq(&lt;TD&gt;&lt;INPUT NAME=&quot;action&quot; TYPE=&quot;SUBMIT&quot;
                    VALUE=&quot;Check Out&quot; ALIGN=left&gt;&lt;/TD&gt;\n);
    print &quot;&lt;/TR&gt;&lt;/TABLE&gt;\n&quot;;

    print qq(&lt;INPUT NAME=&quot;cartdata&quot; TYPE=&quot;HIDDEN&quot; VALUE=&quot;$cart_out&quot;&gt;);

#   print &amp;PrintVariables(%form); ######### debugging

    print &quot;&lt;/FORM&gt;&quot;, &amp;HtmlBot;
}
# check_out. generate the order page
sub check_out {
    &amp;print_type;
    &amp;maintain_state;    # this generates the state information

    print &amp;HtmlTop(&quot;Your Order&quot;);
    print &quot;&lt;P&gt;Here is your order&lt;P&gt;Please review it. If everything is OK\n&quot;;
    print &quot;Then fill in the information below and click the 'Order' button\n&quot;;
    print &quot;Your order will be on it's way in no time (literally).\n&quot;;

    print &quot;&lt;CENTER&gt;&lt;TABLE BORDER&gt;\n&quot;;
    print &quot;&lt;TR&gt;&lt;TH&gt;Item&lt;/TH&gt;&lt;TH&gt;Quantity&lt;/TH&gt;&quot;;
    print &quot;&lt;TH&gt;Price&lt;/TH&gt;&lt;TH&gt;Total&lt;/TH&gt;&lt;/TR&gt;\n&quot;;

    foreach $item (sort keys(%cart_data)) { # sort for display
        $num = $cart_data{$item};
        ($name, $price, $num_cd, $wt) = split(':', $catalog{$item});
        $sub_tot =  $num * $price;
        $weight += $num * $wt;
        $grand_tot += $sub_tot;
        print &quot;&lt;TR&gt;&lt;TD&gt;$name&lt;/TD&gt;&lt;TD&gt;$num&lt;/TD&gt;&lt;TD&gt;$price&lt;/TD&gt;&quot;;
        print &quot;&lt;TD&gt;&quot;, sprintf(&quot;%7.2f&quot;,$sub_tot), &quot;&lt;/TD&gt;&lt;/TR&gt;\n&quot;;
    }
    print &quot;&lt;TR&gt;&lt;TD&gt;&lt;/TD&gt;&lt;TD&gt;&lt;/TD&gt;&quot;;
    print &quot;&lt;TH&gt;Sub Total:&lt;/TH&gt;&lt;TH&gt;&quot;;
    print sprintf(&quot;%7.2f&quot;,$grand_tot), &quot;&lt;/TH&gt;&lt;/TR&gt;\n&quot;;

    $shipping = $weight * 3;
    print &quot;&lt;TR&gt;&lt;TD&gt;&lt;/TD&gt;&lt;TD&gt;&lt;/TD&gt;&quot;;
    print &quot;&lt;TH&gt;Shipping&lt;/TH&gt;&lt;TH&gt;&quot;, sprintf(&quot;%7.2f&quot;,$shipping), &quot;&lt;/TH&gt;&lt;/TR&gt;\n&quot;;

    $tax = $grand_tot*0.085;
    print &quot;&lt;TR&gt;&lt;TD&gt;&lt;/TD&gt;&lt;TD&gt;&lt;/TD&gt;&quot;;
    print &quot;&lt;TH&gt;Tax:&lt;/TH&gt;&lt;TH&gt;&quot;, sprintf(&quot;%7.2f&quot;,$tax), &quot;&lt;/TH&gt;&lt;/TR&gt;\n&quot;;

    print &quot;&lt;TR&gt;&lt;TD&gt;&lt;/TD&gt;&lt;TD&gt;&lt;/TD&gt;&quot;;
    print &quot;&lt;TH&gt;Grand Total:&lt;/TH&gt;&lt;TH&gt;&quot;;
    print sprintf(&quot;%7.2f&quot;,$grand_tot+$tax+$shipping);
    print &quot;&lt;/TH&gt;&lt;/TR&gt;\n&quot;;
    print &quot;&lt;/CENTER&gt;&lt;/TABLE&gt;&quot;;

    # An ugly shipping information form. In a production system you could read  
    # this data from a registered user database and not require users to input
    # shipping and payment data each time. This also increases security.

    print &lt;&lt;EndofForm
        &lt;FORM ACTION=&quot;$self&quot; METHOD=&quot;POST&quot;&gt;
        &lt;INPUT NAME=&quot;action&quot; TYPE=&quot;SUBMIT&quot; VALUE=&quot;Return&quot;&gt;
        &lt;INPUT NAME=&quot;action&quot; TYPE=&quot;SUBMIT&quot; VALUE=&quot;Empty Cart&quot;&gt;
        &lt;HR&gt;
        Your Name: &lt;INPUT NAME=&quot;name&quot; TYPE=&quot;TEXT&quot; COLS=30 SIZE=&quot;50&quot;&gt;&lt;BR&gt;
        Street Address: &lt;INPUT NAME=&quot;addr&quot; TYPE=&quot;TEXT&quot; COLS=50 SIZE=&quot;60&quot;&gt;&lt;BR&gt;
        City: &lt;INPUT NAME=&quot;city&quot; TYPE=&quot;TEXT&quot; COLS=15 SIZE=&quot;60&quot;&gt;&lt;BR&gt;
        State: &lt;INPUT NAME=&quot;state&quot; TYPE=&quot;TEXT&quot; COLS=2 SIZE=&quot;5&quot;&gt;
        Zip:  &lt;INPUT NAME=&quot;zip&quot; TYPE=&quot;TEXT&quot; COLS=12 SIZE=&quot;12&quot;&gt;
        Country:  &lt;INPUT NAME=&quot;country&quot; TYPE=&quot;TEXT&quot; COLS=12 SIZE=&quot;12&quot;&gt;
        &lt;CENTER&gt;&lt;HR WIDTH=&quot;50%&quot;&gt;&lt;/CENTER&gt;
        Method of Payment:  Visa &lt;INPUT NAME=&quot;pmt&quot; TYPE=&quot;RADIO&quot; VALUE=&quot;visa&quot;&gt;
        Master Card &lt;INPUT NAME=&quot;pmt&quot; TYPE=&quot;RADIO&quot; VALUE=&quot;nc&quot;&gt;
        Discover &lt;INPUT NAME=&quot;pmt&quot; TYPE=&quot;RADIO&quot; VALUE=&quot;dis&quot;&gt;&lt;BR&gt;
        Card #: &lt;INPUT NAME=&quot;card&quot; TYPE=&quot;TEXT&quot; COLS=15 SIZE=&quot;20&quot;&gt;
        Expiration: &lt;INPUT NAME=&quot;exp&quot; TYPE=&quot;TEXT&quot; COLS=9 SIZE=&quot;20&quot;&gt;&lt;BR&gt;
        &lt;CENTER&gt;&lt;HR WIDTH=&quot;50%&quot;&gt;&lt;/CENTER&gt;
        Shipping Method: &lt;SELECT NAME=&quot;ship&quot; VALUE=&quot;FedEx&quot; SIZE= 1&gt;
        &lt;OPTION&gt;U.S. Mail
        &lt;OPTION&gt;UPS Ground
        &lt;OPTION&gt;UPS Air
        &lt;OPTION&gt;FedEx
        &lt;/SELECT&gt;
        &lt;P&gt;&lt;INPUT  NAME=&quot;action&quot; TYPE=&quot;SUBMIT&quot; VALUE=&quot;Send Order&quot;&gt;
        &lt;INPUT  TYPE=&quot;RESET&quot;&gt;
        &lt;INPUT NAME=&quot;cartdata&quot; TYPE=&quot;HIDDEN&quot; VALUE=&quot;$cart_out&quot;&gt;
        &lt;/FORM&gt;
EndofForm
}
#eof Minishop.cgi shopping cart demo

</PRE>
<P>
<a name="0085_028b"><h3>Listing Two</h3><PRE>

# get_state. Here is where we fetch state data from cookie environment variable
# and load it into an associative array for use cookie string looks like
# name1=value1; name2=value2 ...
sub get_state {
    $cookies = $ENV{'HTTP_COOKIE'};  # contains all cookies
    $cookies =~ /cartdata=(\S+)(;|)/;  # up to ; or end if last cookie
    $our_cookie = $1;
    %cart_data = split(&quot;:&quot;, $our_cookie);
}
# maintain_state. Here is where the cookie data is sent to the browser.
# The browser stores the cookie in its cookie-file until it expires. The
# expires parameter should be used to keep cookies from getting too stale :-)
sub maintain_state {
    if (%cart_data) {
        $cart_out = join(&quot;:&quot;, %cart_data);
        print &quot;Set-cookie: cartdata=$cart_out;&quot;;
        print &quot;expires=Thursday, 01-Jan-98 12:00:00 GMT\n\n&quot;;  # note \n\n
    }     else {
        print &quot;Set-cookie: cartdata=;&quot;;
        # we put in a time which has past to erase the cookie
        print &quot;expires=Monday, 06-May-96 12:00:00 GMT\n\n&quot;;
    }
}
# print_type. Prints out the magic &quot;Content-Type: text/html&quot; line
sub print_type {
    print &quot;Content-Type: text/html\n&quot;;  ### note only one \n
}
</PRE>
<P>

<a name="0085_028d"><h3>Listing Three</h3><PRE>


# get_state. Here is where we fetch the state data from the database.
# We use a cookie to store a unique UserID and use it to access the database
# file to get the shopping cart data.
sub get_state {
    # create an expiration string for the UserId cookie so they don't
    # last forever.
    $exptime = time + 86400; # one day later than now
    ($s, $m, $h, $d, $mo, $y, $w) = gmtime($exptime);
    $expdate=$week[$w].','.$d.'-'.$mon[$mo].'-'.$y.' '.$h.':'.$m.':'.$s.' GMT';

    # now get the UserID cookie
    $cookies = $ENV{'HTTP_COOKIE'};  # contains all cookies
    $cookies =~ /UserID=(\S+)(;|)/;  # up to ; or end if last cookie
    $userid = $1;

    # if the UserID doesn't exist we make one
    if (! $userid) {
        dbmopen(%db_id,$id_base, 0666) || &amp;CgiDie(&quot;Couldn't open user id dbm&quot;);
        $userid = ($db_id{id_num} +=1);
        dbmclose(%db_id);
    }
    # Now read the cart data from the cart database.  It may be blank.
    # Note, there is no timeout built into this database.
    # It will continue growing forever.  Adding an expire function to
    # clean out the old cart data is left as an exercise for the reader.
    dbmopen(%cart_db, $cart_base, 0666) || &amp;CgiDie(&quot;Couldn't open cart dbm&quot;);
    $cartdata = $cart_db{$userid};
    dbmclose(%cart_db);
    # now we have the data in a usable form
    %cart_data = split(':', $cartdata);
}
# maintain_state. Here is where the cookie data is updated for expiration
# and the cart data is stored into the database file. The browser stores the
# cookie in its cookie-file until it expires. The expires parameter should be
# used to keep the cookies from getting too stale :-)
sub maintain_state {
    # set the expiration data to this data plus one.
    print &quot;Set-cookie: UserID=$userid; expires=$expdate;\n\n&quot;;
    # store the cart data into the database or a null record
    # if the cart has been emptied.
    dbmopen(%cart_db, $cart_base, 0666) || &amp;CgiDie(&quot;Couldn't open cart dbm&quot;);
    if (%cart_data) {
        $cart_out = join(&quot;:&quot;, %cart_data);         $cart_db{$userid} = $cart_out;
    }
    else {
        delete $cart_db{$userid};
    }
    dbmclose(%cart_db);
}
</PRE>


</BODY></HTML>
