<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>September 1996:  Programmer's Bookshelf</TITLE></HEAD>
<body bgcolor="FFFFFF">
<P>
<P>
<h1>Programming for Windows 95</h1><P>
<P>
<h3>Lou Grinzo</h3><P>
<P>
<P><i>Lou, a programmer, consultant, and technical writer, is the author of Zen of Windows 95 Programming (Coriolis Group, 1996) and can be contacted at 71055.1240@ compuserve.</i></p><hr><P>
<P>
<h4>Migrating to Windows 95: Programmer's Guide to What's New</h4><P>
<h4>Mark Andrews</h4><P>
<h4>AP Professional, 1995</h4><P>
<h4>623 pp., $34.95</h4><P>
<h4>ISBN 0-12-058525-1</h4><P>
<P>
<h4>Programming Windows 95</h4><P>
<h4></h4><P>
<h4>Charles Petzold and Paul Yao</h4><P>
<h4>Microsoft Press, 1996</h4><P>
<h4>1100 pp., $49.95</h4><P>
<h4>ISBN 1-55615-676-6</h4><P>
<P>
<P>
Mark Andrews' <I>Migrating to Windows 95 </I>and Charles Petzold and Paul Yao's<I> Programming Windows 95 </I>provide a fascinating snapshot of the current state of Windows development. One book leans fearlessly into the wind, eager to embrace Microsoft's approach and the onslaught of change that Windows coders know only too well. The other takes a more thoughtful approach and seems always to be aware of the need to draw the old guard among Windows developers along, even as it addresses new Windows features.<P>
<h3>Migrating to Windows 95</h3><P>
Mark Andrews' Migrating to Windows 95 has 11 chapters: &quot;Introducing Windows 95,&quot; &quot;Underneath Windows 95,&quot; &quot;Windows 95 Architecture,&quot; &quot;The Win32 API,&quot; &quot;Windows 95 and the MFC Library,&quot; &quot;Windows 95 and Visual C++,&quot; &quot;OLE,&quot; &quot;Programs and Processes,&quot; &quot;Multithreading and Multitasking,&quot; &quot;Windows 95 DLLs,&quot; and &quot;Windows 95 Networking.&quot; From this list alone you might wonder why this book wasn't titled, &quot;Everything you ever wanted to know about Windows 95, but didn't know to ask.&quot; Indeed, Andrews attempts to cover an amazing amount of ground in &quot;only&quot; 600 pages; a more detailed breakout of the book's outline would make this point even clearer. This attempt to encompass so much of the Windows 95 development world is the book's greatest strength and also its greatest weakness. Andrews' book is a perfect fit for the technically astute manager (not an oxymoron) who suddenly must lead a new project and needs to come up to speed quickly on Windows 95 development. In fact, this book might even be unique among current offerings in this regard; Andrews weaves together information at several logical levels to present an overview of the hardware and system architecture, as well as development tools (albeit, just those from Microsoft) and techniques, and provides a remarkably complete view of the Windows 95 terrain from 10,000 feet.<P>
Yet for all the ground Andrews covers, I was disturbed by how often he presents statements that are defensibly correct but open to misinterpretation. For example, on page 65 he says that Windows 95 supports 16-bit Windows programs, which gives you a choice of writing 16- or 32-bit programs. But he says that to create one program that runs under both Windows 3.x and Windows 95, you must write a 16-bit program. What about Win32s? I'm certainly no fan of Win32s; I think it's one of the ugliest hacks ever foisted upon programmers. But to fail to mention it in this context is odd, indeed.<P>
Similarly, Andrews is uncomfortably eager to embrace Windows 95/Visual C++ 4.0/MFC 4.0/OLE as The One True Way. He acknowledges on page 242 that you might choose to develop using a compiler other than VC++, but adds that you should still learn to use VC++ 4.0 first. Given the learning curve associated with modern compiler packages and the horrifically short development schedules many of us face, this is odd advice. This is just one example, but it is characteristic of Andrews' reliance on Microsoft tools and techniques. In all fairness, he is true to his convictions and spends a considerable number of pages detailing development techniques using VC++ 4.0. The problem is that, aside from being narrowly focused on one set of tools, his treatment is not detailed enough to be a generally useful resource for programmers in the trenches. This shouldn't be a surprise; there are books on the market larger than Andrews' that cover nothing but using VC++, so he could hardly match their depth and breadth in only part of his book.<P>
I was also bothered by Andrews' chapter 1 inclusion of extensive quotes from Microsoft marketing people about their goals and design decisions for Windows 95. This material is interesting, but I question its appropriateness in a book subtitled &quot;Programmer's Guide to What's New,&quot; especially when presented in a noncritical fashion. Repositioned as an overview for technical managers and perhaps retitled &quot;Migrating to Windows 95: What Every Technical Manager Needs to Know,&quot; I think this book makes far more sense.<P>
<h3>Programming Windows 95</h3><P>
And now we have, at long last, the update to the Windows programming book (the one everyone recommends to newcomers and is universally known by the author's name, &quot;Petzold&quot;). Not surprisingly, the publication of Programming Windows 95 begs several questions.<P>
Is it just a rehash of the &quot;old Petzold?&quot; Largely, yes. To be sure, it's been updated to include new Windows 95-specific features, but if you know your way around the &quot;old Petzold,&quot; the &quot;new Petzold&quot; will instantly fall to hand like your favorite mouse. (To be clear, I don't mean to minimize Paul Yao's contribution; referring to this book in this way is merely my prediction of how it will generally be known.) The chapters include &quot;README.TXT,&quot; &quot;Hello, Windows 95,&quot; &quot;Painting with Text,&quot; &quot;Essential Graphics,&quot; &quot;The Keyboard,&quot; &quot;The Mouse,&quot; &quot;The Timer,&quot; &quot;Child Window Controls,&quot; &quot;Icons, Cursors, Bitmaps, and Strings,&quot; &quot;Menus and Accelerators,&quot; &quot;Dialog Boxes,&quot; &quot;The Modern User Interface,&quot; &quot;Memory Management and File I/O,&quot; &quot;Multitasking and Multithreading,&quot; &quot;Using the Printer,&quot; &quot;The Clipboard,&quot; &quot;Dynamic Data Exchange (DDE),&quot; &quot;The Multiple Document Interface,&quot; &quot;Dynamic Link Libraries,&quot; and &quot;What's This Thing Called OLE?&quot;<P>
Is it still bare-bones C? Yes. In chapter 1, Petzold says:<P>
What I'm going to teach you in this book is what I think of as &quot;classical&quot; Windows programming. I use the plain old C programming language (not C++), and I use the raw application programming interface (API) directly rather than any &quot;wrappers&quot; that hide the API under easier interfaces.<P>
Some readers will wail at this and claim that it makes the book an antique in this age of visual development and ubiquitous, immense, and immensely complicated frameworks. That the book includes numerous resource scripts as .RC files, and that the authors provide a .BAT file for building programs using command-line tools, will make some programmers dismiss the book. I strongly disagree-if anything, I think its approach makes it even more valuable. Bookstores are packed with books about frameworks and various Windows specialties, such as OLE, Windows multimedia, network programming, or compiler-specific development, and there are precious few that even attempt to teach you how Windows itself works. This relentless focus on the basics made the old Petzold a quite valuable (and some would say unique) resource because it laid the foundation for a good understanding of the overall Windows' architecture; the new Petzold will easily take its place, in part because it's been updated so seamlessly. For example, chapter 12, &quot;The Modern User Interface,&quot; presents the best and most-detailed treatment I've seen to date on the new custom controls introduced in Windows 95.<P>
Is this a resource for experienced Windows programmers moving to Windows 95? Much of what's here is basic Windows architecture, with little that is Windows 95 specific (including only the merest introduction to OLE), and is therefore (apparently) of little value to battle-weary Windows coders. But again, Programming Windows 95's almost endless detail about the minutiae of Windows, as well as its thoughtful, laid-back presentation, make it a resource that I know I'll keep on my &quot;primary references&quot; shelf, no matter how many Windows programs I write. It's hard to convey to someone who's never seen the old Petzold how much solid information is in this book, even at 1100 pages.<P>
If you refer to your old Petzold more than two or three times a month and you're writing Windows 95 apps, you should buy this book. If someone you know is just starting out with Windows programming, particularly Windows 95, tell that person to buy this book and read it cover to cover.<P>
But above all, be aware of this book's approach, you'll get far more from it if you accept it on its own terms.<P>
<P>
<P>
<P>
<P>
<P>
</BODY></HTML>
