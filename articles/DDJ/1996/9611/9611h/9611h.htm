<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>November 1996:   Examining the Systems <ToolKit> Library</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>Examining the Systems&lt;ToolKit&gt; Library</h1><P>

<P>

<h2>Extending the C++ Standard Library</h2><P>

<P>

<h3>Michael J. Vilot</h3><P>

<P>
<i>Michael is a software design consultant specializing in object-oriented design
and C++. He can be contacted at http:// www.objects.destek.com/.</i></p><hr><P>

This is an interesting year for software developers using C++. After
international public review and discussion, the ANSI and ISO C++ Committees are
revising their first official document: the Committee Draft (CD). At the same
time, C++ compiler and class-library vendors are releasing tools with features
defined in that proposed definition of Standard C++.<P>

In this article, I'll examine one such library-ObjectSpace's
Systems&lt;ToolKit&gt;. As a relative newcomer to the C++ class-library market,
ObjectSpace has the daunting task of making inroads against established vendors
such as Rogue Wave. However, the compelling mix of important features and
effective design in this tool may make it an ideal candidate for achieving such a
goal. Here, I'll examine why Systems&lt;ToolKit&gt; deserves consideration as an
essential element in every serious C++ programmer's library. To illustrate
Systems&lt;ToolKit&gt;'s use, I'll develop a pair of distributed client/server
applications for environments such as the Internet. These examples were tested
with Microsoft Visual C++ and Sun C++ on the Windows 95 and Solaris UNIX
platforms, respectively. (Systems&lt;ToolKit&gt; is available for Sun, HP, IBM,
SGI UNIX, and Windows 95/NT.)<P>

<h3>Library Context and Overview</h3><P>

Modern software toolkits typically have three major components:<P>
<ul>
<li>Graphical user interface (GUI).</li>
<li>Central, application-specific features.</li>
<li>Underlying operating-system support.</li>
</ul>
<P>

<a href="1997044a.htm">Figure 1</A> is an OOD-class category diagram (see Grady
Booch's Object-Oriented Analysis and Design, Benjamin/Cummings, 1994) that
illustrates the essential structure of this design. This design uses a pattern
Booch and I introduced in the article &quot;Component Library Design
Considerations&quot; (C++ Report, July/August 1992). Although the details vary
with each application, this pattern applies across a wide spectrum of software
developed today. Each of the four categories has a specific role in the 
design:<P>

<P>
<ul>
<li>The User-Interface category is responsible for encapsulating all the details
of graphical presentations to and event-driven responses from the program's user.
The C++ classes used in this category often provide cross-platform GUI
abstractions.</li>
<li>The Application category contains the unique aspects of the program. The C++
classes in this category usually represent abstractions from the problem domain,
and other special-purpose components.</li>
<li>The System Access category contains abstractions of the platform and
operating environment. The C++ classes in this category represent mechanisms the
program can use to communicate with devices and other programs.</li>
<li>The Foundation category contains generally useful abstractions and
mechanisms. The C++ classes in this category include those from the C++ Standard
Library, and other general-purpose components.</li>
</ul>
Systems&lt;ToolKit&gt; focuses on the two lower-level categories, providing both
System Access and Foundation components. A key benefit of its System Access
components is the encapsulation of platform-specific details, such as the
particulars of multithreading or network access. Its main value as a Foundation
component is in providing efficient and reliable templates, classes, and
functions that eliminate the need to handcraft low-level data structures and
algorithms.<P>

A consistent interface across platforms is especially useful for those developing
distributed applications. <a href="1997044b.htm">Figure 2</A> illustrates a
typical design for a two-tier client/server system. In this design, the client
applications typically run on a PC, using Windows for both User Interface and
System components. C++ developers often use a large class library (such as MFC)
to help cope with the inherent complexities of these components. However, MFC is
highly GUI oriented, specific to the Windows environment, and does not translate
well to other platforms. (The cross-platform version of MFC, Visual C++ for the
Macintosh, incurs significant performance penalties. These usually are severe
enough to preclude this approach as a viable option for deploying
commercial-quality applications, Word 6 for Macintosh notwithstanding.)<P>

Server applications, on the other hand, typically run on a UNIX system. Their
focus is not on a GUI, but on high-performance access to DBMS products such as
those from Oracle and Sybase. Their user interface is usually the
program-to-program connection established across the network, using a
communication protocol such as TCP/IP (see UNIX Network Programming, by W.R.
Stevens, Prentice Hall, 1990).<P>

In this context, Systems&lt;ToolKit&gt; is especially useful.<a href="1997044c.htm"> Figure 3</A> illustrates the major class categories in the
product (the fourth category, UNIX Components, is not part of the Windows
version).<P>

<h3>Library Contents</h3><P>

Systems&lt;ToolKit&gt;'s Foundation components (<a href="1997044d.htm">Figure
1</A>) are in the Standard Library and Systems Components categories, plus the
Time &amp; Date components from the Infrastructure category. As with
ObjectSpace's STL&lt;ToolKit&gt; tool, Systems&lt;ToolKit&gt; provides a
reasonable (though incomplete) approximation of the forthcoming C++ Standard
Library (see my article &quot;The C++ Standard Library,&quot; DDJ, August
1995).<P>

The library provides enhanced support for both the STL and String components in
its Standard Library category. For STL, these take the form of helper algorithms,
as described by ObjectSpace's Graham Glass in his article &quot;STL in Action:
Helper Algorithms&quot; (C++ Report, January 1996). For Strings, these take the
form of substring and tokenizer classes. The Systems&lt;ToolKit&gt; string
tokenizer class splits a given string into a vector of strings, based on a set of
separator characters, in a kind of batch operation. This is not quite as flexible
as the StringTokenizer in Java's java.util library, which takes a more
incremental approach and is better integrated with input streams.<P>

The Error Events and Portable RTTI components from the Systems Components
category are primarily historical scaffolding for C++ compilers that did not
support exceptions or run-time type information. The RTTI components are the
foundation for the library's object-persistence mechanism. It is similar to other
portable schemes; see, for example, &quot;Roll Your Own Persistence
Implementations to Go Beyond the MFC Frontier,&quot; by Allen Holub (Microsoft
Systems Journal, June 1996).<P>

<h3>The System Access components </h3><P>

(<a href="1997044e.htm">Figure 1</A>) are in the remaining Infrastructure and
UNIX Components categories. The Threads, Sockets, and Synchronization components
are most interesting, especially since they're available across platforms. The
Threads and Synchronization components provide a modern version of multithreading
(a much-improvised enhancement to C++, tracing back to the very first C++ class
library; see &quot;A Set of C Classes for Co-routine Style Programming,&quot; by
Bjarne Stroustrup, Bell Laboratories, Computer Science Technical Report CSTR-90,
November 1980). The Sockets (and Pipes, in the UNIX version) components provide
the key interprocess communication (IPC) services essential to a distributed
application.<P>

As with the STL and Strings components, Systems&lt;ToolKit&gt; provides
extensions beyond the basic low-level IPC capabilities. For example, the
Synchronization components provide a basic mutex_semaphore class to encapsulate
the operating system's cross-thread locking mechanism. The library also provides
read_write_semaphore and monitor classes, supporting better throughput in designs
that have more readers than writers. And it provides semaphore lock classes that
seize a semaphore in their constructor and release it in their destructor. These
lock components are indispensable for C++ programs that use both multithreading
and exceptions (see &quot;Simplifying the Booch Components,&quot; by Michael
Vilot and Grady Booch, C++ Report, June 1993).<P>

Similarly, the Sockets components offer extensions beyond the low-level
ip_address, tcp_socket, and udp_socket classes. The tcp_connection_server and
io_multiplexer classes simplify many of the more tedious aspects of server
design. While the basic socket classes support the common operations of
connecting, reading, and writing, the tcp_connection_server adds the listen() and
accept() operations. This clarifies the differences in how clients and servers
use their socket connections, reducing the opportunity for errors due to
incorrect use of the socket. The io_multiplexer class provides an interface for
servers that listen and respond to multiple input ports (see &quot;Connector: A
Design Pattern for Actively Initializing Network Services,&quot; by D.C. Schmidt,
C++ Report, January 1996).<P>

The following examples illustrate two uses of the Systems&lt;ToolKit&gt;
components. The first example uses standard strings, containers, iterators, and
iostreams to implement a typical filter (a program that transforms an input
stream into a differently formatted output stream). The second illustrates the
client side of a typical (albeit simple) Internet application: calling upon a
server for information and displaying the result.<P>

<h3>Examining Web Server-Access Logs</h3><P>

Programs are often written to extract useful information from an otherwise
uninteresting mass of data, such as information buried in server log files. For
instance, someone designing Web pages may want to know: What kinds of browsers
are viewing this site?<P>

A quick look at a typical httpd server-access log reveals that it contains some
interesting data, but not in usable form. <a href="9611h.htm#00d3_02da">Listing
One</A>  illustrates a typical entry in such a log. It is actually a record with
nine fields, most of which are not relevant to answering our question.<P>

There are many such entries for each browser/server session, one for each request
issued from the browser to the server. The fifth field, a quoted string, contains
the command (GET, for example) and its arguments. The final field, also a quoted
string, contains the essential browser information. Just for fun, add one other
piece of information-which sites (the first field) are using each kind of
browser.<P>

<a href="9611h.htm#00d3_02db">Listing Two</A> presents the core of this
Application (recall <a href="1997044f.htm">Figure 1)</A>: the three functions
input(), parse(), and output(). I'll ignore the User Interface for this example,
although the code has been incorporated, unchanged, into both UNIX command-line
and Windows MFC programs. The two functions input() and output() are
complementary halves of this filter program. The input() function reads each line
of the server log file, and stores the results in a map of browsers and sites.
The output() function walks through the map, formatting and displaying its
contents.<P>

The parse() function handles the tedious details of picking apart the fields in
the record. In this example, it uses the Standard istream members get() and
getline() to tokenize the incoming stream. What makes this task somewhat complex
is the fact that the delimiters change: first whitespace, then square brackets,
then quotes. The auxiliary function quoted_string() handles skipping the unwanted
fields.<P>

<a href="9611h.htm#00d3_02dc">Listing Three</A> shows sample output from this
filter. The browsers are listed alphabetically. (Most of the entries are for
&quot;Mozilla,&quot; the Netscape browser, differing in their version and
platform information.) For each browser, you see the site(s) using it.<P>

This example illustrates an interesting characteristic shared by the C++ Standard
Library map and set components-they store their key values only once, sort them,
and ignore any duplicate items added. Thus, the filter program contains only one
entry for each browser/site combination, no matter how many times the server log
records commands from it.<P>

<h3>Client to an Internet Server</h3><P>

The next example illustrates an important class of programs-distributed
applications using the Internet as their network communications medium. I'll
focus on the client side of an application, using an existing server commonly
found on the Internet.<P>

The Network News Transfer Protocol (NNTP) server is the backbone of the
ubiquitous Usenet newsgroups. It performs a fundamentally simple task: adding,
storing, and presenting text files containing news articles. It also imposes a
tree structure to newsgroups, primarily through a naming convention roughly
similar to the current Internet domain naming scheme. (For example:
clari.biz.industry and clari.biz.industry.transportation are newsgroups in the
ClariNet business industry news category, while comp.lang.c++ and comp.std.c++
are in the computer systems category.)<P>

NNTP servers throughout the Internet interact with two different kinds of
clients: newsreaders and other news servers. The interaction with an NNTP server
is simple, consisting of text-based commands and responses. <a href="9611h.htm#00d3_02dd">Listing Four</A> illustrates one such interaction, in
which a client logs in to the server to get a list of active newsgroups. The
server responds to the initial login, and to each command, with a status code and
a description. Status codes in the range of 200-299 denote success. (Web servers
operate similarly, using the Hypertext Transfer Protocol, HTTP.) This information
is all you need to build a very simple, single-purpose NNTP client.<a href="9611h.htm#00d3_02de"> Listing Five</A> presents a small command-line
program that connects to an NNTP server, requests the active list, and displays
the result (it also counts the number of active groups). This example illustrates
an important feature of the Systems&lt;ToolKit&gt; streams components. They are
designed as extensions of the Standard iostreams classes, and provide simple
adapters for sockets (and pipes, in the UNIX version). Thus, C++ code written to
read and write information using iostreams can accommodate IPC communication with
ease.<P>

The main() function does the essential housekeeping, setting up an iostream to
(and from) the server. The open() function establishes the dialog with the
server, and issues the request to have it list its active newsgroups. The input()
function gathers up the resulting list of group names (discarding the other
information). The program uses a priority_queue to keep the names sorted in
alphabetical order, since the NNTP server can return them in any order it finds
convenient. Finally, the output() function displays the number and names of the
newsgroups received. <a href="9611h.htm#00d3_02df">Listing Six</A> shows a
portion of the resulting output-over 7000 active groups!<P>

These two example programs illustrate some of the most common tasks performed in
C++ programs-handling string text to and from files in secondary storage. The
Systems&lt;ToolKit&gt; library provides components that simplify these tasks and
extends them to cover distributed IPC.<P>

<h3>Conclusion</h3><P>

Systems&lt;ToolKit&gt; is an important library. It builds on the expressive
foundation of the C++ Standard Library, with the data structures and algorithms
from STL. It also extends those libraries in an important direction, adding
iostream support to distributed C++ applications using Sockets (and Pipes, in the
UNIX version) for IPC connections.<P>

Perhaps the most important strength of this library is its design. Recent ads
from ObjectSpace feature a quotation from Alexander Stepanov, the driving force
for the design and implementation of the STL library: &quot;ObjectSpace has done
a remarkable job of significantly extending the STL framework into new areas such
as network programming and persistence.&quot; The examples presented in this
article support this observation. Their use of standard containers, iterators,
strings, and iostreams integrates cleanly with the Sockets components. The
library's threads, synchronization, and persistence mechanisms (not explored in
this article) are similarly effective.<P>

This library is not, however, a panacea. Nor is it the last C++ library you'll
ever need. The library's components, while simpler and easier to use than a raw C
interface, are still rather low level. This is appropriate, given their
systems-programming domain. However, this leaves much work to be done in a
distributed C++ application-especially for those developers familiar with remote
procedure calls and other, more abstract, conveniences.<P>

The library is also no substitute for a full implementation of the ANSI/ISO C++
Standard Library. Systems&lt;ToolKit&gt; and STL&lt;ToolKit&gt; both overlook
some key utility components (such as auto_ptr, see &quot;Coping With
Exceptions,&quot; by J.W. Reeves, C++ Report, March 1996), and omit the complex
number classes, overloaded math functions, valarray, and locale components
entirely.<P>

Systems&lt;ToolKit&gt; can be used today to gain experience with the key elements
of the C++ Standard Library of tomorrow. And it can be used to develop the
foundations for client/server applications using TCP/IP connections on the
Internet, certainly a significant number of the C++ programs written today.<P>

<P>

<P>

<P>

Figure 1: Class categories of a typical C++ application.<P>

<P>

Figure 2: Typical distributed application.<P>

<P>

Figure 3: Systems&lt;ToolKit&gt; class categories.<P>

<P>

For More Information<P>

ObjectSpace, Inc.<P>

14881 Quorum Drive, Suite 400<P>

Dallas, TX 75240<P>

214-934-2496<P>

http://www.objectspace.com/<P>

<P>

<a name="00d3_02da">Listing One
<pre>
rionb04p30.unisys.com.br - - [22/Mar/1996:18:12:46 -0500] &quot;GET
/ooad.html HTTP/1.0&quot; 200 2006 &quot;http://www.objects.destek.com/&quot;
&quot;Mozilla/1.22 (Windows; I; 16bit)&quot;

</pre>
<a name="00d3_02db">Listing Two
<pre>
#include &lt;fstream.h&gt;
#include &lt;iomanip.h&gt;

#include &lt;ospace/string.h&gt;  // should be &lt;string&gt;
#include &lt;map.h&gt;            // for map&lt;&gt;, pair&lt;&gt;, make_pair()
#include &lt;set.h&gt;

typedef pair&lt;string, string&gt; Pairtype;
typedef set&lt;string, less&lt;string&gt; &gt; Settype;
typedef map&lt;string, Settype, less&lt;string&gt; &gt; Maptype;

static Maptype m;   // shared by input() and output()

static Pairtype parse(istream&amp; file, unsigned long&amp; line);
static string empty;    // returned as &quot;browser&quot; @ eof

unsigned long input(istream&amp; file) throw(unsigned long)
{
  unsigned long line = 1;
  while (file &amp;&amp; !file.eof()) {
    Pairtype p = parse(file,line);
    string&amp; browser = p.first;
    string&amp; site    = p.second;

    if (browser != empty) {
      Settype&amp; set = m[browser];
      set.insert(site);
    }
  }
  if ( !file.eof() ) throw line;
  return line;
}
static void quoted_string(istream&amp;, unsigned long);
static char buffer[512];  // shared
static Pairtype parse(istream&amp; file, unsigned long&amp; line)
{
  string site;
  file &gt;&gt; site; // 1st field
  if (file.eof()) return make_pair(empty,site);
// ignore through date (4th field)
  file.getline(buffer, sizeof buffer, ']');
// ignore command (5th field)
  quoted_string(file, line);
  // ignore 6th &amp; 7th fields
  int n1;
  file &gt;&gt; n1 &gt;&gt; buffer;
// ignore referrer URL (8th field)
  quoted_string(file, line);
  // get browser info (9th/last field)   file.getline(buffer, sizeof buffer);
  //++line;

  string browser(buffer);
  return make_pair(browser, site);
}
static void quoted_string(istream&amp; file, unsigned long line)
{
  char x = ' ';
  file &gt;&gt; ws; // skip whitespace
  file.get(x);  if (x != '&quot;') throw line;
  file.get(buffer, sizeof buffer, '&quot;');
  file.get(x);  if (x != '&quot;') throw line;
}
void output(ostream&amp; out)
{
  out &lt;&lt; &quot;Browsers (and their sites): &quot; &lt;&lt; endl;
  out.flags( out.flags() | ios::left );
  Maptype::iterator it;
  for (it = m.begin(); it != m.end(); ++it) {
    out &lt;&lt; (*it).first &lt;&lt; endl;
    Settype&amp; set = (*it).second;
    Settype::iterator i2;
    for (i2 = set.begin(); i2 != set.end(); ++i2) {
      out &lt;&lt; '\t' &lt;&lt; *i2 &lt;&lt; endl;
    }
  }
}

</pre>
<a name="00d3_02dc">Listing Three
<pre>
&quot;Infoseek Robot 1.17&quot;
        homer-bbn.infoseek.com
        homer.infoseek.com
&quot;Lycos Spider (Rex)/TEST v1.0 libwww/3.1&quot;
        fourteen.srv.lycos.com
        qe20.lycos.com
&quot;Mozilla/1.1 (Windows; U; 32bit)&quot;
        mail.jabil.com
&quot;Mozilla/1.1N (Macintosh; I; PPC)&quot;
        box772.labs.cis.pitt.edu
        gate.cs.auckland.ac.nz
 ...
&quot;Mozilla/2.01 (X11; I; OSF1 V3.2 alpha)&quot;
        picasso.idt-isep.ipp.pt
&quot;Mozilla/2.0GoldB1 (Win95; I)&quot;
        206.15.181.148
        ad05-103.compuserve.com
        barredu207.k12.vt.us
        dd35-188.compuserve.com
        fairisaac.com
        hd63-109.compuserve.com
 ...

</pre>
<a name="00d3_02dd">Listing Four
<pre>
(Connect to site on &quot;well known&quot; port # 119, using TCP/IP) 200 quartz.mv.com NNTP[auth] server version 1.5.12.1 ready (posting ok).
list active
215 Newsgroups in form &quot;group high low flags&quot;.
 ...
 .  (final output line)
 quit

</pre>
<a name="00d3_02de">Listing Five
<pre>
#include &lt;deque.h&gt;
#include &lt;queue.h&gt;          // for priority_queue
#include &lt;ospace/string.h&gt;  // should be simply &lt;string&gt;

#include &lt;ospace/socket.h&gt;
#include &lt;ospace/stream/tstream.h&gt;
#include &lt;ospace/event/event.h&gt; // for os_event

typedef priority_queue&lt; deque&lt; string &gt;, greater&lt; string &gt; &gt; Qtype;

static void open(iostream&amp;) throw(const char*);
static void input(iostream&amp;, Qtype&amp;);
static void output(Qtype&amp;);

int main(int argc, char *argv[])  // list active newsgroups
{
  try {
  // Attach a socket to the NNTP server (well-known port #119)
    const char* name = (argc != 2) ? &quot;news.mv.com&quot; : argv[1];
    os_socket_address nntp_server( os_ip_address(name), 119 );

  // Create an input stream attached to the socket
    os_tcp_socket socket;
    socket.connect_to( nntp_server );
    os_tstream stream( socket );
    open(stream);   // Check login, send list command

  // Create a priority_queue to sort the names
    Qtype queue;
    input(stream, queue);   // Gather names
    stream &lt;&lt; &quot;quit&quot; &lt;&lt; endl;   // Close connection
    output(queue);  // Display the results

  } catch(os_event&amp; ev) {
    cerr &lt;&lt; &quot;ObjectSpace exception: &quot; &lt;&lt; ev &lt;&lt; endl;
    return 1;
  } catch(const char* msg) {
    cerr &lt;&lt; &quot;NNTP Server Error: &quot; &lt;&lt; msg &lt;&lt; endl;
    return 1;
  }
  return 0;
}
static void open(iostream&amp; stream) throw(const char*)
{
  // Read login information
  static char buffer[256];   stream.getline( buffer, sizeof buffer );
  if ( buffer[0] != '2' ) throw &quot;NNTP not found on port&quot;;

  // Send request to list active newsgroups
  stream &lt;&lt; &quot;list active&quot; &lt;&lt; endl;

  // Check status (200+)
  stream.getline( buffer, sizeof buffer );
  if ( buffer[0] != '2' ) throw &quot;list command failed&quot;;
}
static void input(iostream&amp; stream, Qtype&amp; q)
{
  unsigned long count = 0;
  while ( !stream.eof() ) {
    string s;
    stream &gt;&gt; s;  // read 1st string (newsgroup)

    // Check for end of listing
    if (s[0] == '.') break;

    q.push(s);  // save the result

    // Skip past remainder of line
    static char buffer[256];
    stream.getline( buffer, sizeof buffer );

    // Note progress
    ++count;
    if ( (count % 100) == 0 ) cout &lt;&lt; &quot;Read &quot; &lt;&lt; count &lt;&lt; &quot; so far.&quot; &lt;&lt; endl;
  }
}
static void output(Qtype&amp; q)
{
  cout &lt;&lt; &quot;========== &quot; &lt;&lt; q.size() &lt;&lt; &quot; ACTIVE NEWSGROUPS ==========&quot; &lt;&lt; endl;
  while (q.size()) {
    cout &lt;&lt; q.top() &lt;&lt; endl;
    q.pop();
  }
  cout &lt;&lt; &quot;=============================================&quot; &lt;&lt; endl;
}

</pre>
<a name="00d3_02df">Listing Six
<pre>
(connect_to news.mv.com)
Read 100 so far.
 ...
Read 7300 so far.
Send:  quit
========== 7394 ACTIVE NEWSGROUPS ==========
alt.0d
alt.1d
alt.2600
alt.2600.hope.announce
alt.2600.hope.d
alt.2600.hope.tech alt.2600hz
alt.3d
 ...
t.unix
vt.uucp
vt.vtuug
wash.general
wash.politics
wash.test
wi.forsale
wpi.clubs.hsa



</pre>
</BODY></HTML>
