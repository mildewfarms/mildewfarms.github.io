<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>November 1996: DBPerl</TITLE></HEAD>
<body bgcolor="FFFFFF">
<P>

<h1>The DBperl Relational Database API</h1><P>

<P>

<P>

<h2>Standardized SQL extensions for Perl</h2><P>

<P>

<h3>Perry Scherer</h3><P>

<P>

<P>
<i>Perry is senior programmer for Arco Oil and can be contacted at laspws@aai
.arco.com.</i></p><hr><P>

<P>

DBperl is a Perl 5 package that implements a relational database API for a
variety of database engines; among them, Oracle, Informix, Ingres, Interbase,
Postgres, Sybase, and Unify 5.0. The seamless combination of Perl 5 and database
functionality is a powerful resource for delivering relational data to
heterogeneous clients. The possibilities for its use range from two-tier
application programming to advanced web development. At Arco Alaska, DBperl has
been the focus of several useful applications, and figures prominently in our
plans for utilizing Internet technology. The official DBperl archive is at
ftp://ftp.demon .co.uk in the /pub/perl/db directory. <P>

Perl is an interpreted language with powerful string-, scalar-, and
array-processing capabilities. Since relational database operations are typically
text oriented, Perl is well suited to manage dataflow. The goal of the DBperl
Group is to create a standardized set of Perl function extensions, based on the
SQL model, for manipulating a relational database. This will provide a portable
Perl interface to a variety of relational database engines. In theory, says Buzz
Moschetti of the DBperl Group, any database engine that implements a dynamic SQL
interpreter in its high-level interface can be bolted onto the Perl front end
with predictable results.<P>

From the developer's perspective, it is the DBperl API, commonly referred to as
the &quot;DBI,&quot; that makes this possible. According to DBperl author Tim
Bunce, the &quot;DBI API specification defines a set of functions, variables, and
conventions that provide a consistent database interface independent of the
actual database being used.&quot;<P>

DBI specifies the common programming interface for database interaction, and is
the core of the DBperl project, although the DBD drivers (vendor-supplied
database drivers) perform most of the vendor-specific database engine
interactions. DBD drivers exist for Oracle, Sybase, mSQL, Ingres, Informix,
Empress, DB2, Quickbase, and Interbase (ftp://ftp. mcqueen.com/
pub/databases/DBI/DBD/&lt;Driver&gt;/DBD -&lt;DRIVER&gt;-x.xx.tar.gz). In C++
terminology, the DBI interface is analogous to a virtual base class. The DBD
drivers are analogous to instantiable children of DBI, since they fill in virtual
DBI functions with real vendor implementations.<P>

The class structure of DBI is simple yet elegant. The three primary classes are
driver, database, and statement. These classes are subclassed from a base class
called common. The driver class is rarely used directly by the user. It can
create an instance of a database class that manages a single database connection.
Instances of the statement class are created from database instances and manage
SQL parsing and processing. DBD driver, database, and statement classes are
subclassed from the corresponding DBI classes.<P>

A typical DBI-based program is, at the highest level, a Perl script that uses the
DBperl package. To use DBperl, you'll need Perl5.001m or later to get DBI and DBD
working, since it makes use of the latest object-oriented Perl features. DBI
drivers can be found at ftp://ftp.mcqueen .com/pub/databases/DBI/DBI/DBI-x.xx
.tar.gz. The methods exposed by the DBI package communicate with the DBI Switch
(written by Bunce), which dispatches DBI function calls to the appropriate DBD
drivers. The database drivers communicate directly with a specific vendor
database such as Oracle or Informix. Oracle's DBD driver, for example, uses OCI
(Oracle Call Interface) calls to communicate directly with the Oracle database
engine. (For more information on OCI, see &quot;The Oracle Call Interface and
C++,&quot; by Jeremy Woo-Sam and Tony Murphy, DDJ, November 1995.)<P>

A partial list of the main DBI exposed functions follows.<P>

<B>Connect/Disconnect</B>. The connect method returns a database handle that
references a Perl class containing methods for handling transaction-level
processes such as commit and rollback, statement preparation, disconnection, and
so on. The DBI has a flexible way of handling database connections. There is no
concept of a &quot;current connection.&quot; This means that simultaneous
connections to multiple databases or multiple connections to a single database
(if the engine supports it) are allowed. The disconnect method is defined only in
the DBD implementations. It supports the expected behavior of each implemented
database engine, including rollbacks of uncommitted changes and deallocation of
resources.<P>

<B>Record Set Manipulation</B>. The prepare method of a database handle creates a
statement handle. The statement handle is encapsulated by a Perl class that has
methods for parsing SQL, binding program variables to a statement, fetching rows,
and closing cursors. A prepared statement can be executed with the execute
method, which is analogous to the open cursor function. It associates bound
variables with the corresponding variable placeholders and takes whatever steps
are necessary to execute the statement. The fetch method retrieves a single row
from the database. Currently, there is no other way to process records than to
move through them sequentially. However, when future DBI releases are mapped over
ODBC, random cursor row access will certainly be included.<P>

The multirow record sets are processed with DBperl in the usual way; see <a href="9611c.htm#00ca_02bc">Example 1</A>. The finish method is analogous to a
close cursor function. It releases the resources for a statement.<P>

<B>Single-Statement Execution</B>. DBI provides the do convenience function for
executing single SQL statements that do not return rows such as update, insert,
and delete. The do function performs a prepare, execute, and finish on these
simple statements instead of requiring the user to do so. Similarly, it is fairly
trivial to implement a lookup convenience function for retrieving data from
single-row queries. In <a href="9611c.htm#00ca_02bd">Listing One</A>, for
instance, the core of the DBD interface is practically guaranteed to remain the
same after the new ODBC version of DBI comes out. That's great news for those of
us who have written a lot of DBD code. There are some subtle differences in
syntax between Oraperl DBD and DBI; for example, positional parameter
representation and the syntax of the do function. <a href="9611c.htm#00ca_02be">Listing Two</A> is the same example, except it is
based on Oraperl + Oracle DBD. The preferred interface to Oracle at the moment is
the latter example, the Oraperl emulation.<P>

<B>Stored Procedures and BLOBs</B>. The authors of DBI have wisely noted that too
many &quot;standards&quot; exist for the stored-procedure API. Although some of
the individual DBD drivers may implement them for specific database vendors,
stored procedures are not a part of the common DBI interface. DBD developers have
the option of implementing a stored procedure method as a private function within
the DBD driver, however.<P>

I have noticed a couple of methods in the DBI interface for Binary Large Object
(BLOB) support within the statement class. It appears that some consideration has
been given to providing the ability to read BLOB files and write them to disk.
Since the documentation refers to the DBI readblob method as
&quot;experimental,&quot; I have not tried this feature, but I plan to when the
ODBC version of DBI comes out.<P>

<B>Transaction Management</B>. DBI defines the commit and the rollback methods
for transaction management. commit and rollback completely define the scope of a
transaction set; that is, no explicit &quot;Start Transaction&quot; or &quot;End
Transaction&quot; delimiters are required. An early version of the documentation
sparked my interest with the mention of a &quot;savepoint&quot; feature for
partial rollback to a certain point in the transaction process. Although this
feature is not currently implemented in the DBI code, it would certainly be
helpful for large, complex transaction sets with significant potential for
midstream failure.<P>

<h3>Using DBperl in the Real World</h3><P>

DBperl is at the heart of the Petroleum Engineering Surveillance Package, used at
Arco Alaska's Kuparuk River Unit Oil Field for its engineering surveillance
programs at the North Slope of Alaska. DBperl programs are executed as the second
tier of a three-tier client/server system over a Wide Area Network. Remote users
on the WAN request services from the DBperl programs, which are executed on
machines tightly connected to the central Oracle database server. The DBperl
modules process the data request, compress the output, and transmit it back to
the remote site. The result is a reasonably priced solution for data delivery
over a slow WAN. DBperl was a critical piece of this system as it allowed for
rapid prototyping and efficient database processing. (That the software is free
also weighed heavily in its favor.)<P>

We've also implemented a Cost Reporting and Tracking System that uses DBperl to
extract data from an Oracle database for business reports. According to Greg
Gennette of the technical development team:<P>

We used the power of DBperl to organize accounting information for cost reporting
and analysis. This decision was based upon the flexibility of the DBperl package
in combination with the multiple subscripted associative perl arrays. The hash
indexing of associative arrays means that data can be stored and retrieved with
meaningful keys; e.g., &quot;OIL,&quot; &quot;1994,&quot; &quot;Sub-Total,&quot;
etc. One of the requirements for the Kuparuk Infomation System (KIS) was that the
information needed to be accessed through a web browser. The popular association
of Perl and web programming provided further support for the choice of DBperl. We
were able to retrieve and categorize all the DBMS data with one fetch loop using
multiple subscripted associative arrays. Associative arrays provided multilevel
support for subtotaling, accumulation, and page-break logic. Once populated, the
associative arrays were retrieved via nested loops with the key function and then
written out to static HTML pages. DBperl allowed us to integrate nested database
functions without having to resort to tools outside the base Perl language. These
DBperl programs are invoked monthly and produce over 800 reports using concise
modules that are easily maintained.<P>

This system illustrates the web possibilities of DBperl. Other web-related Perl
packages (CGI.pm or cgi-lib.pl, for instance) can be used in combination with
DBperl to create dynamic forms using relational information. <a href="9611c.htm#00ca_02bf">Listing Three</A> is from the Kuparuk Information
System which uses some home-grown HTML interfaces.<P>

<h3>The Future of DBperl</h3><P>

Tim Bunce and the DBI crew are launching in a new direction for the DBI
interface-the SQL CLI/ODBC API international standard. Refining the DBI interface
to the full-featured ODBC interface would require a considerable duplication of
effort. Free ODBC driver managers exist (iODBC) and others could be written
fairly easily. It seems imperative that ODBC be supported, given the attention it
is receiving from the database vendors.<P>

What does this mean to the DBperl users? We can only benefit from an ODBC port.
The added flexibility and universality of ODBC will attract a larger user and
developer following. Although the majority of the DBI internals will have to be
rewritten, much of the higher-level DBD interfaces will remain the same. Another
advantage of the ODBC effort is that DBI will be more clearly understood and
documented. This is important for commercial acceptance of the tool. Given the
quality of the original work by Tim Bunce and the rest of the DBperl team, I have
high hopes for the effort and give them my full support.<P>

<P>

<P>

<h4><a name="00ca_02bc">Example 1: Processing multirow sets.</h4><P>

<pre>Prepare
    Execute, Fetch, Fetch, Fetch,... , Finish.
    Execute, Fetch, Fetch, Fetch,... , Finish.
    . . .</pre>

<P>

<P>

<P>

<a name="00ca_02bd">Listing One<pre>

#!/usr/local/bin/perl -w

use DBI;

### Connect to an Oracle database using the connect method.
$dbh = DBI-&gt;connect ( 'T:myMachine:TESTDB', 'testID', 'testPASS', 'Oracle' );
die $DBI::errstr unless $dbh;

### Create an SQL statement with 2 wildcard parameters.
$SQL = &quot;select user_id, login_time from dbperl_users \
    where last_name like ? and first_name like ?&quot;;
### Parse the SQL.
$prepSQL = $dbh-&gt;prepare ( $SQL );
### Associate two values with the parameters.
$prepSQL-&gt;execute ( &quot;Smi%&quot;, &quot;J%&quot; );
### Loop through the cursor to retrieve the rows.
while ( ($user_id, $login_time) = $prepSQL-&gt;fetchrow ) {
    printf &quot;%s %s\n&quot;, $user_id, $login_time ;
}
### Close the cursor.
$prepSQL-&gt;finish;
### Execute a single delete statement (Delete all PRO*C users!)
$deleteSQL = &quot;Delete from dbperl_users where preference = ?&quot;;
$dbh-&gt;do ( $deleteSQL, &quot;PRO*C&quot; );
### Execute a single row query with the lookup function (see below)
### Find the DB preference for the one DBperl user whose name is John Smith.
$pref = &amp;lookup ( $dbh, &quot;Select preference from dbperl_users \
     where last_name = 'Smith' and first_name = 'John'&quot; );
### Disconnect from the database.
$dbh-&gt;disconnect;
exit;
### 'Lookup' function for returning 1 row for a single-row query.
sub lookup {
    local ($dbh,$stat,@bounds) = @_;
    local($prepSQL) = $dbh-&gt;prepare ( $stat ) ||
        return undef;
    $prepSQL-&gt;execute ( @bounds ) ||
        return undef;
    local(@row) = $prepSQL-&gt;fetchrow ||
        return undef;
    $prepSQL-&gt;finish || warn &quot;Problem closing SQL statement in lookup()&quot;;
    @row;
}

</pre>
<a name="00ca_02be">Listing Two
<pre>

#!/usr/local/bin/perl -w

use Oraperl;

### Connect to an Oracle database using the connect method.
$dbh = &amp;ora_login ( 'T:myMachine:TESTDB', 'testID', 'testPASS' );
### Create an SQL statement with 2 wildcard parameters.
$SQL = &quot;select user_id, login_time from dbperl_users \
    where last_name like :1 and first_name like :2&quot;; ### Parse the SQL.
$prepSQL = &amp;ora_open ( $dbh, $SQL );
### Associate two values with the parameters.
&amp;ora_bind ( $prepSQL, &quot;Smi%&quot;, &quot;J%&quot; );
### Loop through the cursor to retrieve the rows.
while ( ($user_id, $login_time) = &amp;ora_fetch ( $prepSQL ) ) {
    printf &quot;%s %s\n&quot;, $user_id, $login_time ;
}
### Close the cursor.
&amp;ora_close ( $prepSQL );
### Execute a single delete statement (Delete all PRO*C users!)
$deleteSQL = &quot;Delete from dbperl_users where preference = :1&quot;;
$deleteStat = $ora_open ( $dbh, $deleteSQL );
&amp;ora_bind ( $deleteStat, &quot;PRO*C&quot; );
&amp;ora_close ( $deleteStat );
### Execute a single row query with the lookup function (see below)
### Find the DB preference for the one DBperl user whose name is John Smith.
$pref = &amp;lookup ( $dbh, &quot;Select preference from dbperl_users \
     where last_name = 'Smith' and first_name = 'John'&quot; );
### Disconnect from the database.
&amp;ora_logoff ( $dbh );

exit;

### 'Lookup' function for returning 1 row for a single-row query.
### Includes the familiar look &amp; feel of old Oraperl modules.
sub lookup {
    local ($dbh,$stat,@bounds) = @_;
    local($prepSQL) = &amp;ora_open ( $stat ) ||
        return undef;
    &amp;ora_bind ( $prepSQL, @bounds ) ||
        return undef;
    local(@row) = &amp;ora_fetch ( $prepSQL ) ||
        return undef;
    &amp;ora_close ( $prepSQL ) || warn &quot;Problem closing SQL statement&quot;;
    @row;
}

</pre>
<a name="00ca_02bf">Listing Three
<pre>
#-------------------------------------------------------------------
# 1st level:  Facility name (equtes to the page break)
# 2nd level:  Cost Category ( equates to a row w/ 8 columns )
# 3rd level:  8 columns of Date-valued information.
#-------------------------------------------------------------------
{
    ...
### Retrieve Oracle data and stuff into associative array.
    while ( ($fac_name,$desc_txt,$dt,$amt) = &amp;ora_fetch ( $stmt ) ) {
        $amounts{$fac_name}{$desc_txt}{$dt} = $amt;
    }
    &amp;ora_close ( $stmt );
    ...
    &amp;CreateHTML_Index($CurrentYear,&quot;3Prof&quot;,$MonthMinus[0], &quot;Cost Summary&quot;);
    foreach $fac_name ( sort keys(%amounts) ){
        &amp;CreateHTML_File ($CurrentYear,&quot;3Prof&quot;,$MonthMinus[0],             $facility_ids{$fac_name} );
        &amp;WriteFileToHTML_Index($facility_ids{$fac_name},$fac_name);
        &amp;CreateHTML_Title(&quot;Monthly Facility Direct Cost Summary for &quot;,
            $fac_name, $MonthMinus[0], $CurrentYear);
        &amp;CreateHTML_Table();
        &amp;CreateHTML_ColumnHeadings (
            &quot;\$000's Gross&lt;BR&gt;Direct Costs by Cost Category&quot;,
            $MonthMinus[5], $MonthMinus[4], $MonthMinus[3],
            $MonthMinus[2], $MonthMinus[1], $MonthMinus[0],
            &quot;YTD&quot;, &quot;FY PACE&quot; );
        foreach $desc_txt ( sort keys( %{$amounts{$fac_name}} ) ) {
            print FP &quot;&lt;TR&gt;\n&quot;;
            $tmp_text = &quot;   &quot; . $desc_test;
            printf FP &quot;&lt;TD&gt;&lt;PRE&gt;%s&quot;, $tmp_text;
            foreach $dt ( @columnInexes ) {

            ### Use of DBPerl-generated 3-level associative array.
                $_amt_ = $amounts{$fac_name}{$desc_txt}{$dt};
                &amp;PrintAmount( $_amt_ );

            }
        }
        #---------------
        # Print Totals
        #---------------
        printf FP &quot;&lt;TFOOT&gt;\n&quot;;
        printf FP &quot;&lt;TR&gt;\n&quot;;
        printf FP &quot;&lt;TH ALIGN=LEFT&gt;TOTAL DIRECT COSTS&quot;;
        foreach $dt ( @columnIndexes ) {
            $_amt_ = $totals{$fac_name}{$dt};
            &amp;PrintTotal ( $_amt_ );
        }
        &amp;CloseHTML_File();
    }
    &amp;CloseHTML_IndexFile();
}
</pre>
</BODY></HTML>
