<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>November 1996: Java Q&A</TITLE></HEAD>
<body bgcolor="FFFFFF">
<P>

<h1>How Do Threads Work and <P>
How Can I Create a <P>
General-Purpose Event ?</h1><P>

<P>

<h3>Cliff Berg</h3><P>

<P>

<P>
<i>Cliff, vice president of technology of Digital Focus, can be contacted at
cliffbdf@digitalfocus.com. To submit questions, check out the Java Developer FAQ
Web site at http://www.digitalfocus.com/faq/.</i></p><hr><P>

Most modern operating systems allow application programmers to create separate
lightweight processes, usually called "threads," to take advantage of a
computer's multiprocessor architecture, or simply to allow multiple operations to
occur simultaneously. Web applications are good candidates for multiprocessing
because the limited bandwidth of the user's communication line mandates that the
application not wait while information is being transferred. Netscape would be
unusable, for example, if it forced users to wait until an entire page of
information were downloaded, graphics and all, before giving users the
opportunity to interrupt or otherwise interact with the program.<P>

Java's built-in language support for thread programming therefore is a major
advantage over other languages for creating web applications, or any applications
in which multithreading is important. Since threads are language supported, users
can rely on a well thought out and robust model for thread programming that is
fully integrated with the language's other features, including Java's exception
handling. Also, because users do not have to call operating-system thread-library
functions directly, a Java thread program can be written to be operating-system
independent.<P>

<h3>Scheduler</h3><P>

The primary way of scheduling an event using the Java thread mechanisms is to
create a thread and put it into a wait state for a specified period of time. When
the thread comes out of its wait state, it can then execute a callback on an
object that was passed to it when the wait began.<P>

In designing the <I>Scheduler</I> class presented here, I considered two
approaches. The first (which I ultimately used) was to assign a thread to an
event at the time of scheduling. In this approach, when the method
<I>schedule()</I> is called, a thread is immediately assigned and put into a wait
state.<P>

A second approach was to create a separate scheduler thread (independent of the
main program thread) that would enqueue future events and run threads when those
events occurred. In this approach, <I>schedule()</I> does not assign a thread
immediately when it is called, but instead inserts the event into an ordered
list. The scheduler thread must then set a timer to wake the scheduler up when
the next event in the list is due. This approach has some advantages for some
applications. For example, since a thread resource is not assigned until it needs
to execute, there is no limit to the number of future events that can be
scheduled at any one time. In most uses of threads, however, this is not a
consideration, and so I leave that implementation to the reader.<P>

A callback in Java involves defining an interface that specifies the callback
method's name and argument signature. <a href="9611l.htm#00d8_02e9">Example 1</A>
defines an interface called "<I>Schedulable</I>." Users of the <I>Scheduler</I>
class must provide an implementation for this interface in their code. When the
program calls the scheduler's <I>schedule()</I> method and passes the object that
implements <I>Schedulabl</I><I>e</I>; the scheduler will arrange for a thread to
call <I>onEvent()</I> for this object at the appropriate time. The
<I>onAbort()</I> method is called when the scheduler is garbage collected, which
may be asynchronous relative to the thread's processing.<P>

To minimize the overhead of creating a thread every time an event is to be
scheduled, <I>Scheduler</I> creates and maintains a pool of threads. These
threads are kept in a wait state, waiting to be assigned to a task. The behavior
of these threads is defined by the <I>EventThread</I> class, which is a subclass
of the Java <I>Thread</I> class.<P>

Consider two versions of the Java <I>Thread</I> class constructor; one that takes
no arguments, and one that takes an <I>Object</I> argument. If the first version
is used, the thread class's <I>run()</I> method is called automatically when the
thread is started. If the second version is used, then the <I>Object</I>
argument's <I>run()</I> method is called instead. In the latter case, the
<I>Object</I> must implement the <I>Runnable</I> interface, which defines the
signature of the <I>run()</I> method. I use the first form.<P>

A thread is started by calling its <I>start()</I> method. You cannot call
<I>run()</I> directly, because even though you have a Java <I>Thread</I> object,
the thread's execution context has not actually been set up yet. When you call
<I>start()</I>, a true thread is created, and control is passed to the
<I>run()</I> method in the context of that thread.<P>

<h3>Synchronization</h3><P>

The primary mechanism to achieve synchronization in Java is a monitor, which is
used to coordinate access to an object method or block of code that is labeled as
synchronized. When an execution thread enters a synchronized section of code, the
Java run time gives the monitor to that thread; any other thread that attempts to
enter any synchronized code belonging to the same object instance is put into a
blocked state until the monitor is released.<P>

There are several synchronization problems that must be solved with the
<I>Scheduler</I> class. First, you must guarantee that <I>schedule()</I> is not
called until all the threads in the thread pool are created, initialized, and in
an identical and well-defined state, waiting to be called. The
<I>EventThrea</I><I>d</I>'s <I>run()</I> method calls <I>wait()</I> after it
starts (see<a href="9611l.htm#00d8_02e8"> Listing One</A>), which puts the thread
into a wait state. However, you cannot guarantee that this will occur before your
main thread (or some other thread) calls <I>schedule()</I>, because you do not
have any direct control over the time allocated to these threads. Even if you are
running in a time-sliced environment, you should not assume that the lines of
code between your call to <I>start()</I> and the thread's call to <I>wait()</I>
will execute before you make your first call to <I>schedule()</I> from the main
thread. Instead, you must guarantee that this will happen.<P>

To achieve this, implement a simple handshake. Each time <I>Scheduler</I>'s
constructor creates and starts a thread, it calls <I>wait()</I> itself. It does
this inside of a code block that is synchronized on the newly created
<I>EventThread</I> object's monitor, so your call to <I>wait()</I> is saying, "go
to sleep, and wait until I am notified of a change in the state of the monitor."
When <I>wait()</I> is called, all monitors held by the thread executing the
<I>wait()</I> call are released temporarily, pending the return from the
<I>wait()</I>. This allows the <I>wait()</I> method to act as a gate: Calling
<I>wait()</I> opens the gate for other threads in synchronized methods to
execute.<P>

The call to the thread's <I>start()</I> method is inside of the synchronized
block as well, guaranteeing that the new thread will block when it encounters a
synchronized method. You have synchronized the <I>run()</I> method so that the
thread will block when it enters <I>run()</I>, because the <I>Scheduler</I>
constructor holds the thread's monitor. The thread will remain blocked until the
monitor is released when the <I>Scheduler</I> enters its wait state.<P>

Once the scheduler executes its own <I>wait()</I> and releases the thread
monitor, the thread can then proceed with its <I>run()</I> method. The first
thing <I>run()</I> does is call <I>notify()</I>. This sends a signal to a waiting
thread (the scheduler), saying, "start trying to get this monitor again." The
monitor is not available yet, however, because the thread has not released it. It
will not release it until it goes into another wait state. <I>run()</I> does
exactly that: After calling <I>notify()</I> it immediately goes into a wait state
and waits to be scheduled for some task. Thus the thread is now in a well-defined
state. The scheduler does not resume until this state has been achieved.<P>

A scheduler client schedules events by calling the <I>schedule()</I> method,
which does two things: allocates a thread from the thread pool and calls that
thread's <I>schedule()</I> method, <I>EventThread.schedule()</I>. This latter
method is synchronized to protect the thread's state variables--<I>schedule()</I>
may be called from other threads, at any time. However, it is also synchronized
for another reason.<P>

When <I>schedule()</I> is called, it sets the thread's control variables,
including a delay-time value, and then wakes the thread up, by calling
<I>notify()</I> and giving the thread back its monitor. This works because this
code, while it is inside of the <I>EventThread</I> class, is actually being
called from another (possibly the main) thread. This is a case of re-entrancy. It
is true that there is a thread of execution associated with the thread object;
however, that does not mean that other threads cannot execute the thread object's
methods. Since the thread's <I>schedule()</I> method is synchronized, the thread
executing the <I>schedule()</I> method will release its monitor on the thread
object when it completes, thereby allowing the thread object's own execution
thread to grab the monitor.<P>

<a href="1997045b.htm">Figure 1</A> shows the various execution thread paths in
different colors as they pass through the system's objects. Note that the blue
path, which represents the scheduler's activities, passes through
<I>EventThread</I> methods, while the red path, which represents the pool
thread's activities, passes through its own methods, and through some methods
belonging to the scheduler. In the figure, when the blue path through the thread
object's <I>notify()</I> call completes, the monitor is released by the blue
execution thread; this allows Thread-1 (the red path) to return from its
<I>wait()</I> call, so that it can enter <I>wait(delay)</I>.<P>

The thread then waits for the time period specified in the delay control variable
that was set by <I>schedule()</I>. When the delay time is up, the thread wakes
back up, and calls the <I>onEvent()</I> callback. After the callback has
completed, the thread then returns the thread object to the thread pool. To do
this, it must call the scheduler's <I>deallocateThread()</I> method, which is
synchronized to guarantee the integrity of the thread pool data structures, since
<I>deallocateThread()</I> is being called asynchronously by each thread in the
thread pool. After deallocating itself, the thread then returns to the start of
its run loop, and re-enters the first wait state, ready to be scheduled again.<P>

There may be some confusion about the number of different methods Java provides
for changing a thread's state, in particular for putting a thread into a passive
mode. The methods available are: <I>wait()</I>, <I>sleep()</I>, and
<I>suspend()</I>. <I>wait()</I> is an <I>Object</I> method whose purpose is to
synchronize the release of an object's monitor with the thread's change of state.
Its actual affect is to release the monitor owned by the execution thread calling
<I>wait()</I> and then to go into a blocked state, all in one atomic
operation.<P>

The <I>sleep()</I> and <I>suspend()</I> methods, on the other hand, do not
perform any synchronization with regard to monitors. In fact, on some platforms,
the <I>suspend()</I> method does not guarantee the suspension of the specified
thread before the method returns.<P>

The disadvantage of using <I>sleep()</I> is that There is no way to abort a sleep
except by the elapse of the specified sleep time. Calling <I>interrupt()</I> has
no affect on a sleeping thread, even though you must wrap a <I>sleep()</I> call
in a try block that catches <I>InterruptedException</I>. (The sleep method is
like a college roommate of mine from decades ago: once asleep, he would sleep
until he was ready to wake up, and nothing could interrupt that sleep!)<P>

The <I>notify()</I> method does not actually relinquish the monitor. It merely
notifies any thread in a wait (queued) state to unfreeze itself in the object's
monitor queue. The enqueued thread then continues to wait, until the current
thread releases the monitor by going into a wait state or exiting a critical
section.<P>

Only thoughtful application design can prevent deadlock: Java does not protect
you from a bad design, and provides no automatic deadlock detection or
prevention. I have safeguarded against deadlock by synchronizing access to the
thread pool, so that clients calling schedule can be guaranteed that you will
never try to schedule a thread that is not available. The <I>schedule()</I>
method blocks until it obtains the target thread's monitor. However, you know
that the target thread is in a wait state, or it would not be marked as
available, and waiting threads cannot hold monitors. Thus, you never block on a
thread that holds a monitor. Still, this does not mean that a user program could
not cause a deadlock by carelessly or purposefully misusing the scheduler.<P>

<h3>Rescheduling</h3><P>

Rescheduling an event is an important capability. For example, less-important
pending events may need to be rescheduled to occur after a more important event
has completed.<P>

To unschedule an event, you interrupt the thread from its timed wait state by
throwing it an exception. To accomplish this, you call the thread's <I>stop()</I>
method and pass it an <I>InterruptedException</I>. The exception handler in the
thread's <I>run() </I>method catches this exception and sends control to the
start of the run loop where it re-enters the wait state. You then issue another
schedule operation. This entire sequence of events must be synchronized with a
<I>wait()</I> operation, so that you can once again guarantee that the thread is
in a wait state before you attempt the call to <I>schedule()</I>.<P>

For infinitely recurring events, you take a shortcut. You permanently allocate a
thread for the event and prevent the thread from ever entering the first wait
state again once it leaves it: Also, you never return the thread to the pool. In
this way, once a recurring event is scheduled, it continues to happen forever,
each time after the specified interval, until it is rescheduled.<P>

The duration of the <I>onEvent()</I> callback is not known or taken into account
in scheduling recurring events. The time between executions is actually the
specified time delay plus the time to execute the method. For applications in
which the delay must be precise, it may be necessary to modify the algorithm to
calculate true elapsed time. If <I>onEvent()</I> takes longer than the delay, you
can either throw out events whose time has passed or execute them sequentially
until the events are caught up.<P>

<h3>Thread Priority</h3><P>

It may be desirable to modify the priority at which the callback is run. To
accommodate this, the <I>schedule()</I> method has a priority argument. When you
run the callback, you simply save the current priority, set the thread priority
to the desired value, and when the callback returns, restore the old value.<P>

Some operating systems use priority as a means of synchronization. For example,
in VAX VMS, the system's interrupt routines each have assigned priorities, and
the system relies on these priorities to ensure that things happen in the right
order. You could have used priority-based synchronization for the scheduler
application, but unfortunately, there are inconsistencies in the way thread
priorities are handled on different operating systems, and some Java
implementations are vulnerable to this inconsistency. For example, in the Solaris
environment, lower-priority threads can run when a higher-priority thread has
used up its time slice. This violates the Java thread priority model, which
requires that if there are <I>n</I> available processors in the system, <I>n</I>
highest priority threads will be running on them at any given time. A program
that relies on thread priorities may work on some platforms, but not on others.
This technique should therefore be avoided.<P>

There is another difficulty with priority. The Java model requires that once a
thread owns a monitor, it is guaranteed to keep the monitor until it enters a
wait state or otherwise releases it. Yet on some platforms, a higher priority
thread may grab the monitor, forcing the monitor owner to enter a blocked state
without calling <I>notify()</I> or releasing the monitor, thereby violating the
critical section. This is because on some platforms, a higher-priority thread has
the right to grab resources held by lower-priority threads. For this reason, you
should use priorities carefully. A workaround for this is to make sure that
sections of code that raise their priority do not call any synchronized methods.
Fortunately this is a known problem, and it is anticipated that those few
platforms that have this problem will be corrected.<P>

Finally, some platforms do not implement the normal range of Java priorities (1
through 10). For example, on Windows 95/NT, priority levels of 4, 5, and 6 appear
to map to the same internal thread priority value. You should therefore not rely
on specific priority levels; you should make priority changes of at least two or
more and you should also should use the MIN_PRIORITY, NORM_PRIORITY, and
MAX_PRIORITY constants.<P>

<h3>Cleanup</h3><P>

Cleanup is not fun, which is why Java has a built-in garbage collector. Usually
you don't have to worry about it. However, garbage collection does not help
deallocate non-memory resources such as files and sockets; nor is it orderly.<P>

When the <I>Scheduler</I> is garbage collected, the system calls its
<I>finalize()</I> method, as it would for any object. In
<I>Scheduler.finalize()</I> you explicitly call <I>stop()</I> for every thread in
the thread pool. This ensures that all threads are killed before you exit. One
caveat is that the call to <I>stop()</I> is asynchronous with the threads'
execution, so there is no telling what any one thread is doing when it is
abruptly stopped. Fortunately, you can trap the stop call, do your cleanup, and
then proceed with the stop. You do this by wrapping the thread's <I>onEvent()</I>
call in a try block that catches the <I>ThreadDeath</I> error. The catch clause
calls <I>Schedulable</I>'s <I>onAbort()</I> method, which gives the client object
an opportunity to gracefully terminate execution. It then re-throws the
<I>ThreadDeath </I>error, which kills the thread's execution context.<P>

<h3>Summary</h3><P>

The multithreaded event scheduler presented here will work on any Java platform.
The ability to write portable multithreaded programs is a major advantage.
Multithreading is often a requirement of high-performance systems, but also adds
complexity. Language support for threading reduces the complexity considerably.
This provides an argument for using Java for performance-intensive applications.
Native Java language compilers are starting to become available, making fast
execution a reality for Java, with performance comparable to C++. With usability,
platform-independence, and performance, Java may well become the general-purpose
language of choice.<P>

<P>

<P>

<h4><a name="00d8_02e9">Example 1: The Schedulable Interface</h4><P>

<pre>interface Schedulable
{
  public void onEvent(Object arg);
  public void onAbort();
}
</pre>

<P>

<B>Figure 1:</B> Threads of control.<P>


<a name="00d8_02e8">Listing One
<pre>
/* Scheduler.java -- A scheduler for scheduling asynchronous future events. 
 * Provides for specifying event execution priority, and for recurring events.
 */

/** Callback object interface. */

interface Schedulable
{
    public void onEvent(Object arg);
    public void onAbort();
}
/** A scheduler for scheduling asynchronous future events. For each scheduled 
 * event, a thread is allocated from a thread pool, and then the thread waits 
 * until the event time has arrived. The thread then invokes onEvent() on the 
 * specified object. When onEvent() completes, the thread is returned to the 
 * thread pool. There are also provisions for specifying an event execution 
 * priority; and for recurring events. If an event is recurring, its thread is
 * permanently allocated, and is never returned to the thread pool.
 */

class Scheduler
{
    protected EventThread[] threads; // the thread pool
    protected boolean[] allocated;   // allocation flag for each thread

    /* Constructor. Parameter specifies how large thread pool should be. */

    public Scheduler(int noOfThreads)
    {
        threads = new EventThread[noOfThreads];
        allocated = new boolean[noOfThreads];

        // Create the thread pool
        for (int i = 0; i &lt; threads.length; i++)
        {
            allocated[i] = false;
            EventThread thread = new EventThread(this);
            threads[i] = thread;
            synchronized (thread)
            {
             thread.start(); // this will start a separate thread,
                    // which will then call wait() and block (which
                    // releases its monitor so we can get past the next line...
                try
                {
                    thread.wait();  // this blocks until the thread calls
                    // notify() and then blocks (which releases its monitor,
                    // allowing this statement to return)
                }
                catch (InterruptedException ex)
                {
                }
            }
        }
        // We can now be sure that all threads are created and are in a blocked
        // state, waiting to call notify(). That is what schedule() does.
    }
    /** Gracefully stop the threads in the thread pool. */
    public void finalize()
    {
        // Stop all the threads that are not blocked...
        for (int i = 0; i &lt; threads.length; i++)
        {
            if (threads[i].isAlive()) threads[i].stop();
        }
    }
    /** Schedule thread to run at a future time. The Schedulable.onEvent()
         * method will be called for object after a real-time delay of &quot;delay&quot;
         * milliseconds. The thread's handle is returned, which we can later 
         * use to reschedule the thread. If &quot;recurring&quot; is true, then a new 
         * event will be scheduled automatically each time onEvent() is called.
         * This method must be synchronized in case multiple threads in an 
         * application call this method for this Scheduler object.
     */
    public synchronized EventThread schedule(long delay, Schedulable object, 
                                   Object arg, int priority, boolean recurring)
    throws
        InsufficientThreadsException
   {
        // Pick a thread from the thread pool
        EventThread thread = allocateAThread();
        if (thread == null) throw new InsufficientThreadsException();
        // Schedule an event for that thread
        thread.schedule(delay, object, arg, priority, recurring);
        // Return a unique identifier for the event
        return thread;
    }
    /** Unschedule the future event for a thread, and reschedule it. */
    public void reschedule(EventThread thread, long delay, Schedulable object, 
                                   Object arg, int priority, boolean recurring)
    throws
        InsufficientThreadsException
    {
        thread.reschedule(delay, object, arg, priority, recurring);
    }
    /** Allocate a thread from the thread pool. */
    protected EventThread allocateAThread()
    {
        for (int i = 0; i &lt; threads.length; i++)
        {
            if (allocated[i]) continue;
            allocated[i] = true;
            return threads[i];
        }
        return null;
    }
    /** Return a thread to thread pool. This method must be synchronized 
    * in case multiple threads in an application call this method for this
    * Scheduler object, and also because threads call this to return 
    * themselves to the thread pool.
    */
    public synchronized void deallocateThread(EventThread thread)
    {
        for (int i = 0; i &lt; threads.length; i++)
        {
            if (threads[i] == thread)
            {
                allocated[i] = false;
                return;
            }
        }
    }
}
/** A schedulable thread. */
class EventThread extends Thread
{
    protected Scheduler scheduler;    // the scheduler for this thread
    protected long delay;             // wait for this time
    protected Schedulable object;     // then call onEvent() for this object
    protected Object arg;             // a parameter for onEvent()
    protected int priority;           // execute onEvent() at this priority
    protected boolean recurring;      // reschedule the event every time

    /** The constructor. */
    public EventThread(Scheduler scheduler)
    {
        this.scheduler = scheduler;
    }
    /** The thread's run method */
    public synchronized void run()
    {
        notify();   // this notifies the scheduler, which is waiting to be
            // notified, that it should unfreeze itself in the thread's
            // monitor queue.
        for (;;)
            // ever
        {
            // Wait to be called upon; blocks until a call to schedule()
            // results in a notify()
            System.out.println(Thread.currentThread().getName() + 
                                                           &quot; going to sleep&quot;);
            try
            {
                if (! recurring) wait();
            }
            catch (InterruptedException ex)
            {
            }
            System.out.println(Thread.currentThread().getName() +&quot; awake now&quot;);

            // Sleep until the specified time has elapsed
            try
            {
                // This is the real wait, requested by the scheduler
                System.out.println(Thread.currentThread().getName()
                    + &quot; waiting for &quot; + delay + &quot; milliseconds&quot;);
                wait(delay);
            }
            catch (InterruptedException ex)
            {
                // We are being rescheduled: abort the current sleep
                System.out.println(Thread.currentThread().getName() + &quot; unscheduled&quot;);
                recurring = false;
                notify();
                continue;
            }
            // Do the callback, at the specified priority
            int savep = getPriority();
            setPriority(priority);
            try
            {
                object.onEvent(arg);
            }
            catch (ThreadDeath td)
            {
                object.onAbort();
                throw td;
            }
            setPriority(savep);
            // Thread's work is done; return it to the pool
            if (! recurring) scheduler.deallocateThread(this);
        }
    }
    /** Schedule a wakeup for this thread. Note that this is called from 
     * other threads, including possibly from the main thread.
     */
    public synchronized void schedule(long delay, Schedulable object, 
                                  Object arg, int priority, boolean recurring)
    {
        this.delay = delay;
        this.object = object;
        this.arg = arg;
        this.priority = priority;
        this.recurring = recurring;
        // Now, resume this thread to tell it how long to wait for
        System.out.println(
            Thread.currentThread().getName() +&quot; waking up thread &quot;+ getName());
        notify();
    }
    /** Reschedule this thread. */

</pre>
</BODY></HTML>
