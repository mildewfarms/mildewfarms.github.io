<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>November 1996:  Algorithm Alley</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>Constructing Combinations using LISP</h1><P>

<P>

<h2>Sometimes, you just need the right tool<I></I></h2><P>

<P>

<h3>John Swartz</h3><P>

<P>

<P>
<i>John is a programmer/analyst at the Texas Department of Human Services. He can be reached at alexander.swartz@polaris.dhs.state.tx.us</i></p><hr><P>

<P>

Every Statistics 101 course begins with a description of how to count the number of permutations and combinations of a set. However, if you want to actually list these combinations, you may not find the answer in your old statistics book.<P>

I've been interested in ways of efficiently finding only the combinations that satisfy certain constraints, as in this example: How many distinct selections of size nine can be made from twelve elements, three each of the colors blue, red, white, and green?<P>

In 1980, I was testing a Fortran-based command/control system that continually overflowed a variety of internal arrays. Not surprisingly, I became quite interested when a LISP vendor advertised that their product never overflowed arrays. As a result, I developed an interest in LISP, and decided to share this solution to the combinations problem, which I developed in LISP.<P>

<h3>A LISP Background</h3><P>

Despite its awkward syntax, LISP (which was designed by John McCarthy in the 1960s) is a remarkably simple language. The main idea behind LISP is that any computer data structure can be constructed from lists. Intuitively, a list is just an ordered sequence of items. In LISP, those items can either be fundamental "atoms" (numbers or string-like symbols) or other lists.<P>

The advantage of this approach is that list processing is very simple. In LISP, there are ultimately only two things you can do with any list: Look at the first element, or look at the rest of the list. Through heavy use of recursion, this minimalist machinery allows you to easily process complex data structures.<P>

Lists are written using parentheses, with individual items separated by space. For example, <I>(a </I><I>(</I><I>b c))</I> is a list with two items. The second item, <I>(b c)</I> is itself a list with two items. The empty list is written <I>()</I>, and usually printed "NIL."<P>

If <I>a</I> is a list, then <I>(car a)</I> is the first item in the list. (The name <I>car</I> stands for "contents of the address register," a throwback to the IBM 7090.) Similarly, <I>(cdr a)</I> is the entire list except for the first item. Combining these, <I>(car (cdr a))</I> is the second item in the list.<P>

As you can see, programs are, themselves, written as lists. The first item in the list is the function to execute, and the rest are arguments to the function. (Both <I>car</I> and <I>cdr</I> take a single argument.)<P>

<a href="9611m.htm#00d9_02ea">Listing One</A> uses the control function <I>cond</I> to implement recursion. The <I>cond</I> function looks at each item in its argument in turn. These items are lists: The first half is a condition to test, the second is what to do if that test is true. Schematically, a <I>cond </I>statement looks like: <I>(cond  ( </I><I>&lt;</I><I>test 1&gt; &lt;result 1&gt; ) ( &lt;test 2&gt; &lt;result 2&gt; ) ...( &lt;test n&gt; &lt;result n&gt; ) )</I>. Typically, the first line of the <I>cond</I> statement tests if a parameter is empty. The last line of the <I>cond</I> statement usually has a test value of <I>t</I> (which is always true); this is the equivalent of "else" in many other languages. Each line of the <I>cond</I> is a test-result pair.<P>

Another often-used construct is <I>(defun &lt;name&gt; (&lt;args&gt;) ( &lt;body&gt; ) )</I>, which defines a function. Here's a simple example of its use. <I>square</I>, a function that squares the value passed to it, is defined as: <I>(defun square (x) (</I><I><FONT FACE="Font8960" SIZE=2>*</I><I> x x))</I><FONT FACE="Font14826" SIZE=2>. In the interactive mode, the statement <I>&gt; (square 7)</I> would result in the immediate answer <I>&gt; 49</I>.</FONT></FONT><P>

Executing LISP is very memory intensive. Secular applications like the one presented here are only possible due to recent increases in the power of hardware. John McCarthy would probably not have been able to run this example using the hardware on which he developed LISP.<P>

Xlisp (available electronically) is the particular LISP implementation I used here. Developed by <I>DDJ</I> contributing editor David Betz, Xlisp was designed to execute on the original Intel 8080-based PCs. Examination of the included source code reveals a very elegant style of C coding. The best reference I have found about the language is <I>LISP</I>, by Patrick Winston and Klaus Horn (Addison-Wesley, 1984).<P>

<h3>Approach</h3><P>

The solution to the combinations problem I'm using here is conceptually quite simple. Rather than use complex bookkeeping, I simply construct all combinations without regard to whether those combinations already exist, then eliminate duplicates to produce the final list of solutions.<P>

The <I>combinations </I>function is the heart of the algorithm. It recursively describes each combination of <I>size </I>elements from <I>set </I>as either:<P>
<ul>
<li>The first element from <I>set </I>together with <I>siz</I><I>e</I>-1 elements from the rest of <I>set.</I></li>
<li><I>Size </I>elements from the rest of <I>set.</I></li>
</ul>
Put slightly differently, either the first element of <I>set </I>is in a particular combination or it isn't.<P>

<h3>Implementation</h3><P>

<a href="9611m.htm#00d9_02ea">Listing One</A> shows three functions. <I>Makeset</I> eliminates duplicate items from a list. It recursively examines the list, comparing the first item at each step with the rest of the list. The first line of <I>makese</I><I>t</I>'s <I>cond </I>statement compares the parameter <I>lat</I> to the empty list using the built-in LISP function, <I>Null</I>. If it isn't, <I>cond</I> examines the second line, which uses another LISP built-in function, <I>member,</I> to see if the first element of the parameter list is repeated in the remainder of the list. If the first element is repeated, <I>makeset</I> calls itself to reduce the remainder of the list.<P>

The final line of the <I>cond</I> is evaluated whenever an element is found that is not repeated later in the list. In that case, this unique element is held and attached--using <I>con</I><I>s</I>--to the result of reducing the remainder of the list.<P>

The combinations function takes two arguments: the size of the selection and the literal list of the colors. Note that the first two lines of the <I>cond</I> statement are tests for termination. This is because the final line of the <I>cond</I> statement is doubly recursive.<P>

The essential idea behind the <I>combinations </I>function is that each combination falls into one of two categories--either it contains the first element of the parameter list or it doesn't. If it does, you need to look at combinations of <I>size1</I> elements from the rest of the parameter list. If it doesn't, you need to look at combinations of <I>size </I>elements from the rest of the list.   <P>

The third function, <I>distrib</I>, is a "helper function" to the combinations function. It builds the combinations that contain the first element of the parameter list. Helper functions encapsulate much of the complexity in a large LISP function construct.<P>

These functions are actually invoked from the line beginning with <I>mapcar</I>. Reading from the inside out (as is typical with LISP), you first look at all combinations of nine items from the specified list. The leading single quote makes the argument list a literal; otherwise the interpreter would try to evaluate it. The result of this is a list with all possible combinations, including duplicates. This list is reduced by <I>makeset</I> to produce a list of all unique combinations. Finally, <I>mapcar</I> applies the <I>print </I>function to each item in the list, generating the printout.<P>

This powerful yet easy telescoping of functions characterizes LISP as a functional language.<P>

I have seen prior implementations of the combinations algorithm in other languages, but they have been restricted to numeric data. This LISP implementation can process symbolic data just as easily.<P>

At the top of the execution output in <a href="9611m.htm#00d9_02eb">Listing Two</A> is a time check and information concerning the initial state of the system. The middle of the output is the displayed solution to the problem. The final few output lines are the system state following execution. Of particular interest is the collections line. It says that five times during execution, the system ran out of memory and was forced to do garbage collection. Garbage collection is another defining LISP characteristic. A second time check is at the end of the execution. As you can see, the execution time was three minutes.<P>



<a name="00d9_02ea">Listing One
<pre>
;   Demonstration of construction of a constrained combination
;   using symbolic data.     Programmer:  John Swartz,  Austin  TX

(defun makeset (lat)
    (cond ((null lat)  ())
          ((member (car lat)(cdr lat) :test " equal)
                        (makeset (cdr lat)))
          (t  (cons (car lat)(makeset  ((cdr lat))))
))
(defun combinations (size set)
    (cond  ((zerop size)   '(()))
           ((null set)  ())
           ( t (append  (distrib  (car set) (combinations (1- size) cdr set)))
                          (combinations size (cdr set)))
)))
(defun distrib (a sett)
         (cond ((null sett)  ())
               (t (cons (cons a (car sett)) (distrib a (cdr sett))))
))
(expand 80)
(print (mem))

(mapcar print (makeset (combinations 9
'(red red red  green green green white white white blue blue blue)
)))
(print (mem))
(exit)

</pre>
<a name="00d9_02eb">Listing Two
<pre>
Thursday 28-Mar-96 12:14:52
XLISP version 1.6, copyright  (c)  1985, by David Betz
; loading &quot;4ddj.lsp&quot;
Nodes:             37000
Free nodes:        34659
Segments:          37
Allocate:          1000
Total:             534438
Collections:       2
NIL
(RED RED RED GREEN GREEN GREEN WHITE WHITE WHITE)
(RED RED RED GREEN GREEN GREEN WHITE WHITE BLUE)
(RED RED RED GREEN GREEN GREEN WHITE BLUE BLUE)
(RED RED RED GREEN GREEN GREEN BLUE BLUE BLUE)
(RED RED RED GREEN GREEN WHITE WHITE WHITE BLUE)
(RED RED RED GREEN GREEN WHITE WHITE BLUE BLUE)
(RED RED RED GREEN GREEN WHITE BLUE BLUE BLUE)
(RED RED RED GREEN WHITE WHITE WHITE BLUE BLUE)
(RED RED RED GREEN WHITE WHITE BLUE BLUE BLUE)
(RED RED RED WHITE WHITE WHITE BLUE BLUE BLUE)
(RED RED GREEN GREEN GREEN WHITE WHITE WHITE BLUE)
(RED RED GREEN GREEN GREEN WHITE WHITE BLUE BLUE)
(RED RED GREEN GREEN GREEN WHITE BLUE BLUE BLUE)
(RED RED GREEN GREEN WHITE WHITE WHITE BLUE BLUE) 
(RED RED GREEN GREEN WHITE WHITE BLUE BLUE BLUE)
(RED RED GREEN WHITE WHITE WHITE BLUE BLUE BLUE)
(RED GREEN GREEN GREEN WHITE WHITE WHITE BLUE BLUE)
(RED GREEN GREEN GREEN WHITE WHITE BLUE BLUE BLUE)
(RED GREEN GREEN WHITE WHITE WHITE BLUE BLUE BLUE)
(GREEN GREEN GREEN WHITE WHITE WHITE BLUE BLUE BLUE)
Nodes:       37000
Free nodes:  26828
Segments:    37
Allocate:    1000
Total:       534471
Collections: 7
NIL
Thursday 28-Mar-96 12:17:53
    public synchronized void reschedule(long delay, Schedulable object, 
                                  Object arg, int priority, boolean recurring)
    throws
        InsufficientThreadsException
    {
        stop(new InterruptedException());
        try
        {
            wait(); // wait until the stopped thread blocks
        }
        catch (InterruptedException ex)
        {
        }
        schedule(delay, object, arg, priority, recurring);
    }
}
/** If there are insufficient threads in the thread pool.  */
class InsufficientThreadsException extends Exception
{
    public InsufficientThreadsException()
    {
        super(&quot;InsufficientThreadsException&quot;);
    }
    public InsufficientThreadsException(String s)
    {
        super(s);
    }
}
</pre>
</BODY></HTML>
