<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>August 1996:  </TITLE></HEAD>
<body bgcolor="FFFFFF">
<P>

<h1>Dynamic Message Passing in C++</h1><P>

<P>

<h2>Connecting objects at run time</h2><P>

<P>

<h3>Pierre Arnaud</h3><P>

<P>

<P>
<i>Pierre is working towards a PhD at the Swiss Federal Institute of Technology. He can be reached at Pierre.Arnaud@ di.epfl.ch or http://diwww.epfl.ch/w3lami/ team/arnaud/.</i></p><hr><P>

<P>

A couple of years ago, I wrote a formula editor in Objective-C. Later, when I switched back to C++, I missed the flexibility of Objective-C's message-passing capabilities, so I implemented dynamic message passing in C++. In this article, I'll present the techniques that make this possible, and illustrate dynamic message passing by way of a set of macros and classes I developed for a GUI project called &quot;OPaC.&quot; This project provides a set of operating-system-independent classes that let you build and modify a user interface with only a few mouse clicks-even from within a running application.<P>

When OPaC establishes a connection between two objects (a button and an active object waiting for clicks) at run time, it sends a message to an instance without knowing the name of the instance, or the number and type of its arguments at compile time. This can easily be done in Objective-C, but not in C++ (at least not without some additional code).<P>

<h3>Calling Methods in Objective-C</h3><P>

As <a href="9608e.htm#0008_0018">Example 1(a)</A> illustrates, Objective-C uses a special syntax to call methods (that is, send messages). The first argument in the brackets is the receiving object, the second is the selector, and subsequent ones are parameters. The selector specifies the method to be called. The parameters must be preceded by tags, which are also part of the selector's name.<P>

The receiving object can be of any type. If it is known at compile time, the compiler will be able to generate more efficient code and check for the validity of the message. If it is unknown, the compiler will look up the selector and find the associated method dynamically. If it is undefined for the receiving object, a run-time error occurs.<P>

The selector need not be specified statically when compiling. It may be stored in an SEL type variable. The compiler provides a special syntax, @selector(...), to initialize these variables. They may also be initialized using sel_getUid(...), a function provided by the Objective-C library, which converts C strings to selector codes.<P>

The base class Object implements the special method perform:, which accepts a selector and its parameters as arguments. The library also provides a __msg function with the same behavior; see<a href="9608e.htm#0008_0019"> Example 1(b)</A>. <P>

<h3>Calling Methods in C++</h3><P>

You can also call methods of unknown objects in C++, but their superclass must be known at compile time, and the methods have to be defined as virtual for this to work; see <a href="9608e.htm#0008_001a">Example 2</A>. The compiler generates a virtual table (often called vtbl) to find the pointer to the proper method implementation at run time. <a href="1997049e.htm">Figure 1</A> illustrates how this is done.<P>

It is possible to use a pointer to a member function instead of a direct method call, in which case the method to be called can be stored in a variable (like selectors in Objective-C); see<a href="9608e.htm#0008_001b"> Example 3(a)</A>. In fact, these pointers are just offsets in the vtbl, enabling the compiler to find the corresponding method. A pointer to a member function can only be used with the corresponding class, or one of its subclasses. It is forbidden to cast a pointer to a member function from a class A to a class B, if both classes do not inherit the method from a common superclass, as in<a href="9608e.htm#0008_001c"> Example 3(b)</A>. Moreover, there is no direct way in C++ to convert a string into a pointer to a member function.<P>

<h3>Introducing Dynamic C++</h3><P>

When I started developing OPaC, having a hybrid Objective-C/C++ compiler that accepted both calling conventions would have been nice. I felt that it must have been possible to implement dynamic message passing in C++, so I experimented with operator overloading, developing the presentable-looking syntax object&lt;-method  arg1  arg2;. This expression is similar to the conventional way of calling methods: object-&gt;method (arg1, arg2);, but allows method to be a variable. In fact, it has to be a variable in order to work. The syntax is perfectly legal C++, even if it does look somewhat odd.<P>

In C++, there is no operator &lt;-, although it is possible to overload existing operators to produce new, interesting behaviors. I simply redefined the operators &lt; and unary -, which produce the left-pointing arrow when written side-by-side. <P>

<a href="9608e.htm#0008_001d">Example 4</A>, which means that o&lt;-m; is interpreted as o.operator &lt; (m.operator -()), illustrates the definitions of both overloaded operators. While it is nice to build syntactically valid C++ source code, it isn't necessarily sufficient. For o&lt;-m to send a message, the base class Object implements a generic dispatching operator (operator &lt;), which behaves somewhat like the Objective-C perform: selector. The only argument this operator accepts, however, is a message description that contains the name of the method to be called and the associated parameters. The operator then calls Message::Send to do the real job. The Message class implements a storage object that provides operators to store and restore simple data types, such as int, float, strings, pointers to objects, and the like. Before any data can be stored in the message, Message::Clear must be called. This clears any data that might have been previously added. Message::Send must have been called before any data can be restored; this is done automatically. The target method must be defined using Message::SetMethod, which requires a C string as its argument. This only needs to be done once and can be implemented directly by the constructor of the Message class. Consequently, when you write o&lt;-m  arg1  arg2;, the compiler goes through the steps:<P>

<ol>1. m.operator -();</ol><P>

<ol></ol><P>

<ol>2. m  arg1  arg2;</ol><P>

<ol></ol><P>

<ol>3. o.operator &lt; (m);</ol><P>

<P>

The first operation calls m.Clear(), clearing any previously stored data. The second operation stores arg1 and arg2 into a linked list of typed unions, associated to instance m. The third operation calls m.Send (&amp;o), with a pointer to Object as argument. This is the hardest part of the job. <P>

<h3>Calling through Trampolines</h3><P>

The Message class is responsible for calling the correct method when Send is invoked, based on a pointer to the object and a C string naming the method. It relies on the Runtime run-time class, which has exactly one instance for each class derived from Object. It describes the properties of each class and maintains a list of &quot;trampolines&quot; to methods which may be called dynamically. <P>

Trampolines are simple C functions, such as Bool f (Message&amp;m, Object* o);, that are generated automatically by a set of macros. <a href="9608e.htm#0008_001e">Example 5</A> describes a rampoline function for a simple method. The purpose of a trampoline is to extract the parameters of the target method from the message, and to call the method associated to the object. With this mechanism, there is no need to use a pointer to a member function; moreover, no casting is involved and strong type checking can still be done by the compiler.<P>

Each class derived from Object provides a virtual GetRuntime method, which returns a pointer to the associated Runtime instance. This can be used to find information about any class at run time, thus finding the trampoline to every dynamically callable method. m.Send goes through the following steps:<P>

1. It looks for the run-time description of the object by calling the associated GetRuntime method.<P>

2. It then calls method GetFunction of the run-time description instance to get the pointer to the associated trampoline function.<P>

3. Finally, it calls this trampoline function to complete the job.<P>

The trampoline function restores the message parameters using operator , then calls the method of the proper class, as defined by the macros.<P>

<h3>Building Trampolines</h3><P>

Trampoline functions are built automatically by the macros PUBLISH_METHOD (class, method);, PUBLISH_ARG (type, arg);, and PUBLISH_CALL (method (arg));. <P>

The first macro takes the class and method names as arguments. It generates part of the body of the trampoline function. The name of the trampoline function is built by concatenating trampo, the class name, and the method name. This ensures that each trampoline will get a unique name. The second macro must be repeated once for each parameter, specifying its type and name. It adds the code that will restore these parameters from the message description.<P>

The third macro specifies how the method will have to be called with the associated parameters. It adds the actual method invocation and closes the body of the trampoline.<P>

<h3>Registering Trampolines</h3><P>

The trampolines still need to be registered by the Runtime class so they can be found whenever needed. I used an automatic registration class named AutoRuntimeSetup, which has one instance for each trampoline. It does nothing but inform Runtime about the function when its constructor is called; see <a href="9608e.htm#0008_001f">Example 6(a)</A>.<P>

Three arguments are required by the constructor: <P>

Pointer to the name of the method for which the trampoline has been built.<P>

A reference to the run-time description.<P>

A pointer to the trampoline.<P>

An instance of AutoRuntimeSetup is added by the PUBLISH_METHOD macro. Its name is built by concatenating auto, the class name, and the method name.  <a href="9608e.htm#0008_0020">Example 6(b)</A> shows how a trampoline is registered using this macro.<P>

<h3>One More Macro.</h3><P>

One additional macro is PUBLISH_ CLASS, which implements the GetRuntime method and adds the required Runtime instance. This macro must be used once for each class, preferably in the file where constructor and destructor are implemented.<P>

<h3>Conclusion</h3><P>

The sources I have described here (available electronically) implement the simplified versions of the macros and classes I use in my projects. The code compiles both with GNU C++ and Visual C++. It is easy to add more information to the Runtime class; for example, you could add a link to the superclass, provide details about the arguments of the published methods, add a list of the fields stored in the class or revision number, and the like.  I have kept it simple to make the sources easier to understand, since some techniques may seem tricky to novices.<P>

Among the files available electronically are dynamic.h (a definition file that defines the macros and classes), runtime.cpp and dynamic.cpp (which implement the Runtime, Object, and Message classes), and demo.cpp (a test class that prints messages when its methods get called). When examining these files, note the way I have inserted elements into linked lists. I use the (a?b:c)=d construct, which sets either b or c to d, depending on a being True. I prefer this notation because it is more compact than the equivalent if (a)b=d; else c=d; construct.<P>






<a href="1997049d.htm">Figure 1</A>: An instance and a vtbl generated by the compiler.<p>


<a name="0008_0018"><B>Example 1:</b> (a) Sending messages in Objective-C; (b) specifying the selector at run time.<PRE>
(a)

[myButton setName: &quot;Ok&quot;];
[myButton setSizeDx: 100 dy: 20];
[[myDialog getButton: &quot;Ok&quot;] disable];

<a name="0008_0019">(b)

SEL action = @selector (setName:);
[myButton perform:action with: &quot;Ok&quot;];
//  ...which is the same as:
__msg (myButton, action, &quot;Ok&quot;);
</PRE>

<a name="0008_001a"><B>Example 2: </b>Calling virtual methods in C++.<PRE>
class Base {
public:
    virtual void Foo ();
};
void Base::Foo () { printf (&quot;Base::Foo\n&quot;); }
class Other : public Base {
public:
    virtual void Foo ();
};
void Other::Foo () { printf (&quot;Other::Foo\n&quot;); }
void test (Base* object) { object-&gt;Foo (); }
void main ()
{
    Base  base;
    Other other;
    test (&amp;base);    // prints &quot;Base::Foo&quot;
    test (&amp;other);   // prints &quot;Other::Foo&quot; 
}

</PRE>
<a name="0008_001b"><B>Example 3:</B> (a) Using a pointer to a member function; (b) associated restrictions.
<pre>
(a)

typedef void (Base:: *PtrMember)  ();
void test (Base* object)
{
    PtrMember ptr = Base::Foo;
    (object-&gt;*ptr) (); // calls object-&gt;Foo ()
}



<a name="0008_001c">(b)

class A { /* ... */ };
class B { /* ... */ };

typedef void (A::*PtrAMember)();
typedef void (B::*PtrBMember)();

void test (A* a, B* b, PtrAMember pa)
{
    PtrBMember pb = (PtrBMember)(pa);  // cast error
    (a-&gt;*pa) ();
    (b-&gt;*pa) ();                      // error, bad base class
    (b-&gt;*pb) ();
}

</PRE>

<a name="0008_001d"><B>Example 4:</b> Definitions of overloaded operators. <PRE>
Bool Object::operator &lt; (Message&amp;);
Message&amp; Message::operator - ();

</PRE>

<a name="0008_001e"><B>Example 5: </B>Trampoline function for a simple method.<PRE>
Bool
trampo_ButtonSetSize (Message&amp; message, Object* object)
{
    Button* instance = (Button*)(object);
    int dx; message  dx;
    int dy; message  dy;
    return (instance) ? instance-&gt;SetSize (dx, dy) : FALSE;
}
</PRE>

<a name="0008_001f"><B>Example 6:</B> (a) Automatic registration class; (b) registering the trampoline for SetSize.<PRE>
(a)
class AutoRuntimeSetup
{
public:
    AutoRuntimeSetup (const char* name, Runtime&amp; run, TrampoFunc func)
    { run.AddFunction (name, func); }
};

<a name="0008_0020">(b)
AutoRuntimeSetup auto_ButtonSetSize (&quot;SetSize&quot;, runtime_Button,
trampo_ButtonSetSize);

</PRE>






</BODY></HTML>
