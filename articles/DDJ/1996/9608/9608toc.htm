<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>August 1996: C/C++ Programming</TITLE></HEAD>
<body bgcolor="#FFFFFF">
<h1><i>DDJ</i> August 1996 C/C++ Programming </h1><hr>
<h2>FEATURES</h2><P>

<h3><a href="9608a/9608a.htm">BEYOND C++ TEMPLATES     </A></h3><P>

<i>by Fred Wild</i><P>

Templates are just one approach to achieving code reuse in C++ programs. Fred examines templates and a number of other forms of instantiation some of which you may be acquainted with, and others you may not.<P>

<h3><a href="9608b/9608b.htm">OBJECT-ORIENTED INTERPROCESS COMMUNICATION     </A></h3><P>

<i>by Stephen Blaha</i><P>

Stephen shows how to place IPC services in C++ wrappers.  He then turns his attention to Java socket classes,  which illustrate an alternative object oriented interface.<P>

<h3><a href="9608c/9608c.htm">STL ALGORITHMS</A></h3><P>

<i>by Dan Zigmond</i><P>

STL generic algorithms are independent of any particular data representation. Given a particular data structure that meets the algorithm's access requirements, they are as efficient as an algorithm hand-coded for that data structure.<P>

<h3><a href="9608d/9608d.htm">LINEAR ALGEBRA WITH C++ TEMPLATE METAPROGRAMS</A></h3><P>

<i>by Todd Veldhuizen and Kumaraswamy Ponnambalam</i><P>

A C++ technique called &quot;template metaprograms&quot; makes it possible for you to exploit the interpretive nature of the C++ template mechanism to write metaprograms that are interpreted at compile time and generate specialized algorithms as their output.<P>

<h3><a href="9608e/9608e.htm">DYNAMIC MESSAGE PASSING IN C++</A>     </h3><P>

<i>by Pierre Arnaud</i><P>

Pierre implements Objective-C-like dynamic message passing in C++, using a set of macros and classes. This project provides a set of operating-system-independent classes that let you build and modify a user interface with only a few mouse clickseven from within a running application.<P>

<h3><a href="9608f/9608f.htm">INSIDE SOFTRAM 95</A></h3><P>

<i>by Mark Russinovich, Bryce Cogswell, and Andrew Schulman</i><P>

Our authors examine &quot;RAM doubling&quot; technology, then look inside SoftRAM 95 to find out what it does and, more importantly, does not do.<P>

<P>

<h2>EMBEDDED SYSTEMS</h2><P>

<P>

<h3><a href="9608g/9608g.htm">CONCURRENT SMALL C</A></h3><P>

    by Andy Yuen<P>

Concurrent Small C is a programming language specifically designed for embedded-system development. A subset of Small C, Concurrent Small C uses five new keywords to provide direct support for preemptive multitasking, interprocess communication, and interrupt handling.<P>

<h2>NETWORKED SYSTEMS</h2><P>

<P>

<h3><a href="9608h/9608h.htm">NETWORKING CD-ROMs USING CACHED CD IMAGES</A></h3><P>

<i>by John H. McCoy</i><P>

John describes a cache driver that reads cached CD images and makes them appear as CD-ROM drives. The images can be located on either the client machine or on a network server if the client accesses the network via a real-mode redirector rather than a shell.<P>

<h2>EXAMINING ROOM</h2><P>

<P>

<h3><a href="9608i/9608i.htm">EXAMINING SYMANTEC'S CAFE</A></h3><P>

<i>by Anil Hemrajani</i><P>

Cafe is a 32-bit standalone Java visual-development environment available for both Windows and Macintosh. Anil uses it to develop a typical Java appleta phonebook for retrieving information about a person at a given Web site using their first name, last name, telephone number, fax number, or e-mail address.<P>

<h2>PROGRAMMER'S WORKBENCH</h2><P>

<h3></h3><P>

<h3><a href="9608j/9608j.htm">BUILDING AN EXPERT SYSTEM</A></h3><P>

<i>by Gregg Weismann</i><P>

Gregg describes an expert system that helps in the installation and operation of network and network/modem combo cards. He developed the system using Borland C++, Microsoft Assembler 6.1, and Amzi! Prolog+Logic Server.<P>

<h2>COLUMNS</h2><P>

<P>

<h3><a href="9608k/9608k.htm">PROGRAMMING PARADIGMS</A></h3><P>

<i>by Michael Swaine</i><P>

Between reading Dorfman and Ghosh's Developing Games that Learn and catching up on his correspondence, Michael takes time to attend Apple's World Wide Developer's Conference.<P>

<h3><a href="9608l/9608l.htm">C PROGRAMMING</A></h3><P>

<i>by Al Stevens</i><P>

Interviewing for a job as a C++ programmer? Al has some tips for you, after which he discusses the Windows 95 Start Menu.<P>

<h3><a href="9608m/9608m.htm">JAVA Q&amp;A</A></h3><P>

<i>by Cliff Berg</i><P>

How do you send e-mail from a Java applet? Cliff shows you how.<P>

<h3><a href="9608n/9608n.htm">ALGORITHM ALLEY</A></h3><P>

<i>by Mark R. Nelson</i><P>

The suffix trees Mark describes here precalculate data structures for fast string searches. To illustrate suffix trees, he presents a program that reads in a string of text from standard input, then builds a tree.<P>

<h3><a href="9608o/9608o.htm">UNDOCUMENTED CORNER</A></h3><P>

<i>by Scot Wingo and George Shepherd</i><P>

George and Scot look inside OLE control property pages so you can see what's happening behind the scenes. They also present a workaround for adding parameterized properties to an OLE control.<P>

<h3><a href="9608p/9608p.htm">PROGRAMMER'S BOOKSHELF</A></h3><P>

<i>by Phil Mitchell</i><P>

Phil examines Andrew Hodges' Alan Turing: The Enigma and Bruce Blum's Beyond Programming: To a New Era of Design.<P>

<P>

<h2>FORUM</h2><P>

<h3></h3><P>

<h3><a href="9608q/9608q.htm">EDITORIAL</A></h3><P>

<i>by Jonathan Erickson</i><P>

<h3><a href="9608r/9608r.htm">LETTERS</A></h3><P>

<i>by you</i><P>

<h3><a href="9608s/9608s.htm">SWAINE'S FLAMES</A></h3><P>

<i>by Michael Swaine</i><P>

<P>

<h2>PROGRAMMER'S SERVICES</h2><P>

<P>

<h3><a href="9608t/9608t.htm">OF INTEREST</A></h3><P>

<i>by Monica E. Berg</i><P>


</BODY>
</HTML>
