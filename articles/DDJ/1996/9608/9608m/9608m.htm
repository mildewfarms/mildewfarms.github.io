<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>August 1996:  Java Q & A</TITLE></HEAD>
<body bgcolor="FFFFFF">
<P>

<h1>How Do I Send e-mail from a Java Applet?</h1><P>

<h3>Cliff Berg</h3><P>

<P>
<i>Cliff, vice president of technology of Digital Focus, can be contacted at cliffbdf@digitalfocus.com. To submit questions, check out the Java Developer FAQ Web site at http://www.digitalfocus.com/faq/.</i></p><hr><P>

<h3>Client-side programming makes it possible to have interactive forms</h3><P>

Sending an e-mail message from a Web page is one of the most widely used CGI applications. However, most implementations rely on the existence of a particular, nonstandard CGI program on the server to interface with the mail server; thus, every time a Web site is developed, the webmaster has to investigate what, if any, CGI interface program is available and possibly write one from scratch. A Java implementation solves this problem by shifting the burden to the client side. All that is required is a mail server on the Web site host.<P>

The e-mail systems used on the Internet are, in one sense, very simple: The send and receive protocols for mail are easy to understand and program into a client application. The actual implementation of mail servers, however, is complicated by the fact that they must interface with foreign mail systems, which may involve translation of e-mail addresses between the different formats. Amazingly, the system works pretty well.<P>

A mail client need not worry about this. It only has to be concerned with the protocol for sending a message and, if desired, for receiving one. While it is obviously important to receive messages, this is not typically a Web application, unless you are building a full-blown e-mail client. One feature that may be useful on the client, however, is the ability to count how many messages are waiting to be retrieved. Thus, in a typical commercial Web scenario, users could have a means to send e-mail to a designated customer-service representative directly from the Web page without relying on a CGI program; conversely, the customer-service representative would have a way, via a private &quot;administration&quot; Web page, to monitor the site, including seeing how many messages are waiting from users.<P>

<h3>How do Mail Servers Work?</h3><P>

From the e-mail client point of view, there are typically two mail servers involved: the send-mail server and the retrieve-mail (or mailbox) server. The most commonly used send-mail server in public Web installations is the UNIX &quot;sendmail&quot; program, which implements the protocol with mail clients for accepting new messages and sending them out onto the Internet. It also has the job of interfacing with other mail systems on the Internet. Simple Mail Transfer Protocol (SMTP) is the primary protocol used by sendmail.<P>

In UNIX-based Web installations, the task of retrieving received messages from an electronic mailbox is typically accomplished by another server program, the Post Office Protocol (POP) server. When sendmail receives mail from the Internet, it either forwards it if the recipient is not local, or hands it over to the local mailbox server for storage and retrieval by a user. In this article, I'll interface with a POP mailbox server to see if messages are waiting to be retrieved. Aside from that, however, we will be interacting with an SMTP server.<P>

<h3>The SendMail Applet</h3><P>

The Java applet for sending e-mail is called &quot;SendMail.&quot; When users go to a Web page that has the SendMail applet on it, they see a form like that in <a href="199703c5.htm">Figure 1</A>. The actual layout of the form can be customized by adding or removing fields in the Form class (available electronically). This is analogous to customizing an HTML form for an application. A main difference is that you have more freedom to place fields in specific locations on the page via Java's layout capabilities, whereas HTML is limited in its ability to position elements. A more sophisticated applet form could even perform calculations, rather than merely capture data.<P>

The e-mail's destination is specified in an HTML RECIPIENT parameter. This allows for easy maintenance of the Web site, since the desired recipient may change over time, and it should not be hard-coded into the program.<P>

<a href="9608m.htm#0010_0046">Example 1(a)</A> lists the commands that the client must send to the SMTP server. The HELO command initiates a session. MAIL FROM: tells the server what the return address is, in case the mail needs to be returned. RCPT TO: is the destination address. DATA tells the server that the following lines contain the message body, terminated by a single period on a line by itself. Each command, including the terminating period, must be followed with a line-feed. Thus, all you need to do is establish a session with the server on the correct port, send these commands and information in the right sequence, and you've sent e-mail.<P>

The SendMail client does not need to maintain a connection to the server: It merely opens the connection when it wants to send mail, sends the mail, and closes the connection. Opening a connection in Java is accomplished by creating an instance of Socket and specifying the Internet host name and the port the SMTP server is listening on. SMTP servers use the well-known port number 25 to listen for client connections. SendMail gets the host name from the applet itself: The java.applet method Applet.getCodeBase() returns the URL of the applet, and URL.getHost() returns the name of the host.<P>

Once a connection is established, SendMail sends each verb in turn, combined with information obtained from the form. The method Form.email() returns the information entered by the user into the &quot;Your e-mail Address&quot; field on the form. This is the sender's e-mail address (if they filled it out correctly). The method Form.message() returns the rest of the form's content. This includes all of the other fields, each prefaced with the name of the field so that the recipient can tell what information pertains to what field. In the CGI e-mail analogue, these would be the field nametags passed as URL-encoded parameters.<P>

It is not too hard to design the Form class so that its content and layout are completely specified in HTML. This way, the applet never has to be recoded, and the site's administrator can make additions or changes to the form simply by changing HTML applet parameters.<P>

Hidden tags can be included in the form as well. In the Form class, I collect the document base of the applet and send it to the server with the other message information. The document base is the URL that the applet's Web page was loaded from. Thus, the e-mail recipient receives a message that tells him or her which Web page the user was looking at when the message was sent. This may be important information if the applet is used more than once within the site. It also includes the date the applet was sent, although the trustworthiness of the date is questionable, since it comes from the end-user's system, which may not have the date or time set correctly!<P>

<h3>The CheckMail Applet</h3><P>

Sometimes people receiving messages in a Web e-mail application may have multiple e-mail accounts. Therefore it may be desirable to have a way to notify them that there is mail waiting, without them having to use their e-mail program to check. An applet that allows them to check for mail may therefore be useful as part of a private site-maintenance and administration page.<P>

The CheckMail applet (see <a href="199703c6.htm">Figure 2</A>) presents a form to the user, and requests a user id and password. It then attempts to connect with the POP server, and if successful, queries how many messages are waiting in the user's mailbox. It then displays this information on the screen.<P>

The design and operation of CheckMail is very similar to SendMail. The main differences are that the contents of the input form are different, and information retrieved from the server (the number of messages) is displayed. This is accomplished easily using the TextComponent.setText() method to display a string in a field. Also, the password field contents need to be cloaked so that others looking at your screen cannot see your password. For this purpose the method TextField.setEchoCharacter() sets a character to be echoed to the screen with each keystroke.<P>

The POP verbs used are listed in<a href="9608m.htm#0010_0046"> Example 1(b)</A>. Again, all you have to do is open a connection to the POP server (typically listening on port 110), and send these commands in sequence; except that this time you have to parse the output sent back from the server to obtain the data you want. The number of messages in the mailbox is contained in the line of data returned after you send the STAT command. The line will be something like &quot;+OK 3 messages...&quot; when you have three messages waiting. The &quot;+OK&quot; indicates that the command was processed without any errors. An error return would start with &quot;-ERR&quot;.<P>

One caveat: To access your e-mail information from CheckMail, you will have to have a shell account (which gives you e-mail) on the Web machine; a POP server can only check for mail on a machine on which you have an account. Further, coding the applet to check mail by accessing a POP server on a machine other than the Web machine is not an option, since a Java applet can only open a socket connection to the same machine it was downloaded from. If the CheckMail applet returns the error &quot;Incorrect password,&quot; it probably means that your e-mail account is not accessible on the Web machine. If your system administrator is not able to set up a shell account for you on the Web server (some service providers have this policy), an alternative is to host just the applet on a different machine on which you do have a shell account (this machine will also need to have a Web server), and point to it in your HTML with the applet codebase parameter.<P>

<h3>Conclusion</h3><P>

Gathering information from visitors to a Web site is now merely a matter of modifying the Form class to collect the desired information, and placing the SendMail applet on the site. Interaction with a CGI program is not necessary. Additionally, the CheckMail applet can be used to quickly monitor e-mail sent to the site, thereby ensuring a quick reply. Again, no CGI programming is necessary. All programming is thus moved to the client side, and is platform independent.<P>

You can find the complete source code for SendMail at http://www.ddj.com/. Source for a full-featured version that uses HTML parameters to more fully configure the applet, thus making recoding for many applications unnecessary, is available at http://www.digitalfocus.com/ ddj/code/.<P>

<P>

<P>

<a href="199703c5.htm">Figure 1:</A> The SendMail applet.<P>

<P>

<a href="199703c6.htm">Figure 2: </A>The CheckMail applet.<P>

<P>

<P>

<h4>
<a name="0010_0046"><a name="0010_0046">Example 1: (a) Commands client must send; (b) POP verbs.</h4><P>

<P>

<pre>(a)

HELO &lt;your host&gt;
MAIL FROM: &lt;return-address&gt;
RCPT TO: &lt;recipient&gt;
DATA


(b)

USER &lt;user-id&gt;
PASS &lt;password&gt;
STAT


</pre>

</BODY></HTML>
