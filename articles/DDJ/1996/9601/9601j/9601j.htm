<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>JAN96: Password Files</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>Password Files<a name="0081_0016"><a name="0081_0016"><a name="0081_0014"><a name="0081_0000"></h1><P>

<h2>MD5 for secure passwords</h2><P>

<h3>Trevor J. Pope</h3><P>

<P>
<i><a name="0081_0015"><a name="0081_0000">Trevor is a software engineer
specializing in real-time embedded systems. He can be contacted at 38 Somerset
Road, Kensington, 2094, South Africa or at trevor@infoweb.co.za.</i></p><hr><P>

Recently, while developing an access-control method for an embedded system, I
implemented one-way encryption of passwords using the MD5 Message Digest
algorithm. The MD5 Message Digest Algorithm was invented by Ron Rivest of RSA
Data Security (inventors of the patented RSA public-key cryptography algorithm).
The MD5 algorithm calculates a practically unique 128-bit message digest of a
file. It is claimed that the odds of a different file producing the same digest
are quite small--one in 2<SUP>64</SUP>. Thus, the digest protects a file, because
any alteration will show up as a changed digest. The digest can be used for
one-way encryption so that data can be verified without being disclosed. This is
how the passwords in the method described here are protected.<P>

The approach I implemented uses a password file that contains the user records in
plaintext, together with the user digests. The entire file is protected using a
digest to detect unauthorized alterations to the file. Under UNIX, password files
can be read by users, but are protected from tampering by file-access
restrictions. Since this wasn't possible in my embedded system, I used a file
digest to protect the password file from tampering.<P>

Each user record contains the user's name and other personal details, as well as
the record's access rights and digest. The digest is calculated on the visible
contents of the record as well as the user's password, to produce a unique,
128-bit key. The length of the key (and the way it is calculated) makes it
unlikely that the password can be guessed. <P>

<h3><a name="0081_0017">The Password File<a name="0081_0017"></h3><P>

The password file (an ASCII file that can be read with a text editor) contains a
header and a number of user entries. The header contains the file digest, a
string containing the machine name, and the number of password entries in the
file. The digest is calculated on the whole file so that if the file is altered
in any way, this will be detected. If the digest is incorrect, an attempt may
have been made to alter the file, and the file is rejected.<P>

Each entry provides for one user. The plaintext part contains the user's name,
employee number, and access rights. The digest is constructed using the plaintext
part and the user-entered password. The resulting 128-bit key is stored as a
string of 32 hex characters at the end of the user record. To be validated, the
user supplies a username and password. The username is used to locate the user
record in the password file. The plaintext part of the record, together with the
user-supplied password, is used to calculate the digest. If the calculated digest
is the same as the digest stored in the record, the user is validated. The user's
password remains secret: It is not stored separately in the file, and it is
computationally infeasible to guess it.<P>

Because the MD5 algorithm is well known, it would be simple to change the file
and recalculate the digest. One way to prevent this is to implement a keyed hash
function. My approach, however, was to add encryption and scrambling to the
digest; this is a key feature of my password file. There are a number of ways to
scramble the digest. Any change in the order of the data will affect the digest,
so even simply reordering the file as the digest is calculated would complicate
things for a cracker. As long as this encryption remains secret, the password
file will be impregnable. <P>

<h3><a name="0081_0018">The Code<a name="0081_0018"></h3><P>

The code that implements the technique I used consists of the password module, a
command-line-driven test module, and the MD5 digest-algorithm code. The code is
written for ANSI C and has been compiled and tested using the GNU C compiler
(gcc) on a Sun under Solaris 1.1 (4.3 BSD) and Solaris 2.3 (basically UNIX System
V), and under Linux. I obtained the MD5 digest package via FTP from info.cert.org
in /pub/tools/md5 and used it as is. (Thanks to Ron Rivest and RSA Data Security
for placing this code into the public domain.)<P>

The password module consists of password.c, password.h (the public interfaces),
and passwrdc.h (the public data definitions). These files, along with the MD5
modules used (as distributed by RSA Data Security), are available electronically;
see &quot;Availability,&quot; page 3. <a href="9601j.htm#0081_001d">Listing
One</A> is passtest.c, a program that tests the operation of the password
package. The code can be compiled and linked with gcc as follows: <P>

<pre>gcc -O -g -Wall -static -I. -I/usr/5include -I/usr/include -o passtest passtest.c Password.c md5c.c -L/usr/5lib.</pre>

The <I>-g</I> flag includes debug information; this should be omitted from the
final version. <a href="9601j.htm#0081_001b">Figure 1</A> is sample output from
the test program.<P>

Running the resulting executable allows the various functions in password.c to be
exercised by entering the first letter out of the list of options provided. You
could start off by making a new password file and answering the questions. The
resulting password file contains 20 entries--the first is a user with supervisor
rights, as per the questions you answered. The remaining 19 entries are marked as
unused. The single user needs supervisor rights to add and delete other users.<P>

Once you have a valid password file, you test whether or not it is okay by
pressing &quot;I&quot; (initialize), whereupon the file is read into memory and
validated by checking the digest. Once a password file has been validated, you
can perform other actions: validate, add and delete users, or change passwords.
Each time a user is added/deleted, or the user changes his or her password, the
password file is updated and written with the new digest. You can also display
the password file in memory and generate a list of users suitable for display to
a user. <P>

The code enforces several common-sense rules:<P>
<ul>
<li>Only a user with a supervisor privilege can add and delete users.</li>
<li>Supervisors cannot delete themselves.</li>
<li>Only a user can change his or her password, and only by entering the previous
password first. If the user forgets the password, a supervisor must log on and
delete and add the user with a new initial password. The user can alter the
initial password to a secure password known only to the user at any later
time.</li>
<li>A new password must pass an obviousness test to be accepted.</li>
<li>There can be more than one supervisor. If the only supervisor forgets his
password, a new password file must be made from scratch and copied over the
old.</li>
</ul>
<h3><a name="0081_0019">Security<a name="0081_0019"></h3><P>

To keep the system secure, the facility to create a new password file from
scratch must be guarded. Depending on the actual implementation, there are a
number of ways to attack a system using the code I present here. Among the
strategies an attacker could adopt are:<P>
<ul>
<li>Cracking individual passwords. Nonobvious passwords that are long enough are
computationally infeasible to crack. The user must choose a password that is
suitably randomized and long enough. </li>
<li>Adding entries to the password file. If this can be done, then the new entry
could be used to compromise the system. Once the attack is over, the old password
file can be restored to allow the attacker to cover his tracks. This will only
succeed if the password file can successfully be altered with a new, valid
digest. Proper encryption of the file digest will make the attacker's task
extremely difficult.</li>
<li>Intercepting passwords. This will depend very much on the architecture of the
target system. If a serial terminal is used, a serial communications monitor can
be used to reveal the password. If an X terminal is used, network sniffers can
reveal it. On an X terminal, another application could simply grab the keyboard
while the user types in the password. </li>
<li>Accessing the source code. This will allow the attacker to analyze the
algorithms used. This is unimportant except for the part used to encrypt the file
digest; still, this needs to be guarded carefully.</li>
<li>Using a debugger. Under UNIX, it is possible to attach a debugger to a
process and then set a break point just after the user enters a password. On
other systems, this may not be possible, particularly if the code is running out
of ROM. If possible, control access to the system via telnet, rlogin, and the
like to prevent this sort of attack. To make this type of attack more difficult,
the password field is cleared as soon as the user digest has been calculated.
Don't distribute the executable with debugging information included!</li>
</ul>
<h3><a name="0081_001a">For More Information<a name="0081_001a"></h3><P>

<I>RFC1321: The MD5 Message-Digest Algorithm</I>. Ron Rivest, RSA Data Security
Inc. April 1992. Available from info.cert.org in /pub/tools/md5.<P>

Schneier, Bruce. &quot;One-Way Hash Functions.&quot; <I>Dr. Dobb's Journal</I>
(September 1991).<P>

Stallings, William. &quot;SHA: The Secure Hash Algorithm.&quot; <I>Dr. Dobb's
Journal</I> (April 1994).<P>

<h4><a name="0081_001b"><B>Figure 1:</B> A starting password file with one entry
with supervisor privileges. This was created using the New function in the test
software. One user is defined and has supervisor privileges (logon username
Trevor, password Pope). Other user records are marked as unused. <a name="0081_001b"></h4><P>

<pre>efa00b25cc4b3fb5aa29d507f9d2ad38 1MachineNameTrevor  0123456789  s   0c47cdd73a4e8f70c67671f968eae636Unused  Nobody  *   #Unused  Nobody  *   #Unused  Nobody  *   #Unused  Nobody  *   #Unused  Nobody  *   #Unused  Nobody  *   #Unused  Nobody  *   #Unused  Nobody  *   #Unused  Nobody  *   #Unused  Nobody  *   #Unused  Nobody  *   #Unused  Nobody  *   #Unused  Nobody  *   #Unused  Nobody  *   #Unused  Nobody  *   #Unused  Nobody  *   #Unused  Nobody  *   #Unused  Nobody  *   #Unused  Nobody  *   #</pre>

<P>

<h4><a name="0081_001c"><a name="0081_001d">Listing One<a name="0081_001d"></h4><pre>
/*************************************************************************/ 
/* File: passtest.c                              */ 
/* Password package - test program                       */ 
/* Simple test program to check the operation of the password package    */ 
/* under unix.                               */ 
/* Copyright (C) 1994-5, Trevor J. Pope -- All rights reserved.      */ 
/* License to copy and use this software is granted provided that this   */ 
/* copyright notice is retained in any copies of any part of this    */ 
/* software.                                 */ 
/* No representations are made concerning either the merchantability     */ 
/* of this software or the suitability of this software for any          */ 
/* particular purpose. It is provided &quot;as is&quot; without express or     */ 
/* implied warranty of any kind.                     */ 
/*************************************************************************/ 
 
/* Common library includes */ 
#include &lt;stdio.h&gt;  /* for file I/O */ 
#include &lt;time.h&gt;   /* for time functions */ 
#include &lt;string.h&gt; /* for strcpy */ 
#include &lt;errno.h&gt;  /* for errno etc */ 
 
/* Pull in the standard include for the package */ 
#include &quot;Password.h&quot; 
 
/*************************************************************************/ 
/* main() -- Entry point for the test program                */ 
/* Passed  : command line parameter list                 */ 
/*************************************************************************/ 
int main( int argc, char * argv[], char * env[] ) 
{ 
   int result; 
   char option, optionString[80]; 
   char userName[USER_NAME_LENGTH+1]; 
   char userNumber[EMPLOYEE_NUMBER_LENGTH+1]; 
   char accessString[ACCESS_RIGHTS_LENGTH+1]; 
   char password[PASSWORD_LENGTH+1]; 
   char superUserName[USER_NAME_LENGTH+1]; 
   char superPassword[PASSWORD_LENGTH+1]; 
   char newPassword[PASSWORD_LENGTH+1]; 
   char passwordFileName[51]; 
   char machineName[MACHINE_NAME_LENGTH+1]; 
   char userDetails[USER_DETAILS_LENGTH]; 
 
   /* Loop getting options and executing them until a quit is selected */ 
   do { 
      /* Show menu */ 
      printf(&quot;\n\ 
Select:  (i)nitialise    (v)alidate (c)hange  (a)add   (d)elete\n\ 
         (n)ew  (u)sers  (s)how     (h)elp    (q)uit   : &quot;); 
     scanf( &quot;%s&quot;, &amp;optionString[0] ); 
     option = optionString[0]; 
     /* Act on option ... */ 
     switch( (int)option ) 
     { 
     case 'i': 
     { 
       printf(&quot;\n initPassword - enter password file name :&quot;); 
       scanf(&quot;%s&quot;, passwordFileName ); 
       result = initPassword( passwordFileName ); 
       printf(&quot;\n initPassword() returned %s \n&quot;, 
       &amp;passReturnCodeStrings[result][0] ); 
       break; 
     } 
     case 'v': 
     { 
     printf(&quot;\n validateUser - enter userName :&quot;); 
     scanf(&quot;%s&quot;, userName ); 
     printf(&quot;\n validateUser - enter pass word :&quot;); 
     scanf(&quot;%s&quot;, password ); 
     result = validateUser( userName, password, accessString ); 
     if( result == PASS_OK ) 
     { 
          printf(&quot;validateUser() returned %s (Access level is %s )\n&quot;, 
          &amp;passReturnCodeStrings[result][0], accessString ); 
      } else { 
          printf(&quot;validateUser() returned %s \n&quot;, 
            &amp;passReturnCodeStrings[result][0] ); 
      } 
      break; 
    } 
    case 'c': 
    { 
       printf(&quot;\n changePassword - enter userName :&quot;); 
       scanf(&quot;%s&quot;, userName ); 
       printf(&quot;\n changePassword - enter old pass word :&quot;); 
       scanf(&quot;%s&quot;, password ); 
       printf(&quot;\n changePassword - enter new pass word :&quot;); 
       scanf(&quot;%s&quot;, newPassword ); 
       result = changePassword( userName, password, newPassword ); 
       printf(&quot;changePassword() returned %s \n&quot;, 
             &amp;passReturnCodeStrings[result][0] ); 
       break; 
      } 
      case 'a': 
      { 
      printf(&quot;\n addUser - enter supervisor userName :&quot;); 
      scanf(&quot;%s&quot;, superUserName ); 
      printf(&quot;\n addUser - enter supervisor password :&quot;); 
      scanf(&quot;%s&quot;, superPassword ); 
      printf(&quot;\n addUser - enter new userName :&quot;); 
      scanf(&quot;%s&quot;, userName ); 
      printf(&quot;\n addUser - enter new user number:&quot;); 
      scanf(&quot;%s&quot;, userNumber ); 
      printf(&quot;\n addUser - enter new user rights :&quot;); 
      scanf(&quot;%s&quot;, accessString ); 
      printf(&quot;\n addUser - enter new user password :&quot;); 
      scanf(&quot;%s&quot;, password ); 
      result = addUser( superUserName, superPassword, 
                  userName, userNumber, accessString, password ); 
      printf(&quot;addUser() returned %s \n&quot;, 
        &amp;passReturnCodeStrings[result][0] ); 
      break; 
      } 
      case 'd': 
      { 
     printf(&quot;\n deleteUser - enter supervisor userName :&quot;); 
     scanf(&quot;%s&quot;, superUserName ); 
     printf(&quot;\n deleteUser - enter supervisor password :&quot;); 
     scanf(&quot;%s&quot;, superPassword ); 
     printf(&quot;\n addUser - enter userName to delete :&quot;); 
     scanf(&quot;%s&quot;, userName ); 
     result = deleteUser( superUserName, superPassword, userName ); 
 
     printf(&quot;deleteUser() returned %s \n&quot;, 
        &amp;passReturnCodeStrings[result][0] ); 
     break; 
      } 
      case 'n': 
      { 
    printf(&quot;\n newPasswordFile - enter full pathname : &quot;); 
    scanf(&quot;%s&quot;, passwordFileName ); 
    printf(&quot;\n newPasswordFile - enter machine name :&quot;); 
    scanf(&quot;%s&quot;, machineName ); 
    printf(&quot;\n newPasswordFile - enter supervisor name :&quot;); 
    scanf(&quot;%s&quot;, userName ); 
    printf(&quot;\n newPasswordFile - enter supervisor number:&quot;); 
    scanf(&quot;%s&quot;, userNumber ); 
    printf(&quot;\n newPasswordFile - enter supervisor password :&quot;); 
    scanf(&quot;%s&quot;, password ); 
    result = newPasswordFile( passwordFileName, machineName, 
                  userName, userNumber, password ); 
    printf(&quot;newPasswordFile() returned %s \n&quot;, 
              &amp;passReturnCodeStrings[result][0] ); 
    break; 
      } 
      case 'u': 
      { 
    showUserDetails( userDetails ); 
    printf(&quot;showUserDetails() :\n%s&quot;, userDetails ); 
 
    /* Check current user details as recorded internally */ 
    result = currentUserDetails( userName, userNumber, accessString ); 
    if( result == PASS_OK ) 
    { 
        printf(&quot;currentUserDetails() returned a valid user:\n\ 
userName: %s\n\ 
userNumber: %s\n\ 
accessString: %s\n&quot;, userName, userNumber, accessString ); 
    } else { 
         printf(&quot;currentUserDetails() returned NO valid user:\n&quot;); 
    } 
    break; 
      } 
      case 'h': 
      { 
    printf(&quot;\n\n%s\n\n&quot;, passwordHelp() ); 
    break; 
      } 
      case 's': 
      { 
      displayPasswordStruct(); 
      break; 
      } 
      case 'q': 
      { 
      printf(&quot;\n quitting ... \n&quot;); 
      break; 
      } 
      default: 
      { 
      printf(&quot;\n unrecognised option (%x)&quot;, (int)option ); 
      break; 
      } 
      } /* switch */ 
 
    } while( option != 'q' ); 
     return( 0 ); 
} /
</pre>
<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
