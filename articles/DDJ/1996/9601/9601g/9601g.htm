<HTML> <HEAD> <!-- This document was built using HyperWriter Professional by NTERGAID Inc. --> <TITLE>JAN96: Extending MFC</TITLE></HEAD> <body bgcolor="FFFFFF"> <h1>Extending
<META NAME="year" CONTENT="1996">
MFC<a name="0065_0010"><a name="0065_0010"><a name="0065_000e"><a name="0065_0000"></h1><P>

<h2>Designing a grid control for MFC</h2><P>

<h3>Stefan Hoenig and Scot Wingo</h3><P>

<P> <i><a name="0065_000f"><a name="0065_0000">Stefan, who is studying at
Technische Universitat Munchen in Germany, can be contacted at
100042.1003@compuserve.com. Scot, a cofounder of Stingray Software, can be
contacted at ScotWi@aol.com.</i></p><hr><P>

A wide variety of off-the-shelf VBX/OLE/DLL components are available to simplify
development with C++ and MFC. However, function-based interfaces do not give you
the object-oriented benefits of a C++ interface. Simply wrapping a C++ class
around a DLL is not sufficient, since you can't modify component behavior through
inheritance. <P>

In this article, we'll describe the design and implementation hurdles we
encountered when extending existing MFC classes to take advantage of the
object-oriented paradigm. The component we developed was a grid control--a
user-interface component that displays data in rows and columns, allowing end
users to manipulate data. In all, the grid component ended up being about 45,000
lines of C++ code. <P>

Since we'll focus on design principles, we won't provide the source code for the
entire control, although we will present a class or two for illustrative
purposes. (The grid control itself is commercially available.) Our intent is to
document our hard-won experience so that you can use and benefit from the same
C++/MFC principles in your applications. <P>

<h3><a name="0065_0011">Design Goals<a name="0065_0011"></h3><P>

Our primary design goal for the grid component was to be 100 percent MFC
compatible. This meant we had to carefully consider how others might derive
classes from ours. It was also important to use standard MFC approaches such as
the document/view architecture whenever possible. More specifically, we wanted
to:<P>
<ul>
<li>Use the grid either as a view or as a control in a dialog.</li> <li>Support a
variety of controls within the cells.</li> <li>Create new types of controls for
the cells.</li> <li>Read data through ODBC (Microsoft's database connectivity
library) for display. </li> <li>Have the grid component perform well. </li>
</ul>
From
the user's perspective, a grid can contain many different pages or worksheets.
This allows the user to manipulate three dimensions of data instead of two. Each
worksheet contains rows and columns of individual cells, each with its own
particular color, format, size, and so on.<P>

From the developer's perspective, each worksheet is an instance of a grid class,
which maintains information about the currently active cell and handles resizing
and other window-management functions. Multiple worksheets are handled by placing
several grids within a tabbed window. There are classes for each different type
of cell, including text entry, buttons, and bitmaps. To allow cells to have
different visual attributes without storing separate attributes for every cell,
we decided to have a separate set of classes for storing cell attributes. These
classes implement a style hierarchy with default styles for each row and column,
as well as the entire grid.<P>

<h3><a name="0065_0012">The Drawing Classes<a name="0065_0012"></h3><P>

To support the use of the grid both as a view and a control in a dialog, we
needed an MFC <I>CWnd</I>-based class (<I>SECGridWn</I><I>d</I>) and a
<I>CView</I>-based class (<I>SECGridVie</I><I>w</I>). (Classes that start with
<I>C </I>are MFC classes, and those prefixed with <I>SEC </I>are grid classes.)
However, implementing each one separately would result in a lot of code
duplication.<P>

Since <I>CView</I> already inherits from <I>CWnd</I>, we considered having
<I>SECGridWnd</I> inherit from <I>CWn</I><I>d</I>, and <I>SECGridView</I> inherit
both from <I>CView</I> and <I>SECGridWnd</I>. This would allow the common code to
reside in <I>SECGridWnd</I>. Unfortunately, most classes in MFC--including
<I>CWnd</I> and <I>CVie</I><I>w</I>--derive from <I>CObject</I>. <I>CObject</I>
is designed such that it can only appear once in a class hierarchy without
causing serious collisions.<P>

Our solution was to put the common code in the class <I>SECGridCor</I><I>e</I>,
which does not inherit from <I>CObject</I>. Thus, <I>SECGridView</I> can inherit
from both <I>SECGridCore</I> and <I>CView</I> without conflict. <a href="9601a7f1.gif">Figure 1</A> illustrates this approach, which we also used at
several other points in the project.<P>

Since <I>SECGridCore</I> is not derived from <I>CWn</I><I>d</I>, it can't
directly handle <I>CWnd</I> functionality, such as drawing operations and message
maps. It must instead own a pointer to a <I>CWnd</I> object to handle drawing
operations. Our classes inherit both from <I>SECGridCore</I> and a <I>CWnd</I>
class, and set the <I>SECGridCore</I> member <I>m_pGridWnd</I> to this in the
constructor. The derived class inherits the message map from <I>CWnd</I> and is
responsible for calling the associated <I>SECGridCore</I> methods. <a href="19960068.htm">Figure 2</A> shows how this works for <I>SECGridView</I>.<P>

The <I>SECGridCore</I> class encapsulates all of the drawing logic for the grid
and its components. It is responsible for drawing the grid, including inverting
any selected cells. It handles scrolling and provides support for frozen rows and
columns, which do not move when the rest of the grid scrolls. Finally,
<I>SECGridCore</I> interprets user interactions, including formatting cells,
inserting and moving rows, tracking the current cell, and managing undo and
redo.<P>

Class <I>SECGridWnd</I> provides <I>SECGridCore</I> with an interface so that it
can be used like a control (placed in a dialog and manipulated with the Visual
C++ dialog editor). Like <I>CWnd</I>, <I>SECGridWnd</I> is rarely instantiated.
Instead, you derive a class from <I>SECGridWnd</I>, override the virtual
functions to obtain the desired behavior, and instantiate the derivative. The
<I>SECGridView</I> class provides <I>CView</I> features such as splitter-window
support, printing, and print preview. Like <I>SECGridWnd</I>, it is also usually
used only as a base class and not directly instantiated.<P>

<h3><a name="0065_0013">The Style Classes<a name="0065_0013"></h3><P>

The <I>SECStyle</I> class contains all the information necessary for displaying a
single cell. This includes the type of the cell, the cell contents, and
attributes such as the text color, borders and control type, as well as font
attributes. All of these styles can be modified by the end user via the
<I>SECStyleSheet</I> dialog. You can extend <I>SECStyle</I> at run time with
additional information about specific cells. For example, you could add an
Expression attribute which could be modified with <I>SECStyleSheet</I> to add
simple formula capabilities to the grid. <P>

Base styles provide default attributes for a group of cells. The predefined base
styles are row header, column header, and standard. Row-header cells inherit
their attributes from row-header style, and column headers inherit from
column-header style. Standard is the base style for all cells in the grid. These
base styles are maintained by an <I>SECStylesMap</I> object and can be modified
with an <I>SECStylesDialog</I>. These default styles are automatically applied to
all appropriate cells that do not explicitly override them.<P>

<h3><a name="0065_0014">The Control Classes<a name="0065_0014"></h3><P>

Because controls embedded in a grid have to interact closely with the grid, we
created our own hierarchy of grid controls, using the same multiple-inheritance
approach used for the basic classes. <a href="1996006a.htm">Figure 3</A> shows
the hierarchy of the grid-control classes. <P>

<I>SECControl</I> is an abstract base class that establishes a default
grid-to-control interface that derived grid-control classes must implement. If
deriving from <I>SECControl</I> only, controls must be entirely implemented by
the derived class. However, <I>SECControl</I> can also inherit from existing MFC
control classes to implement a standard MFC control derivative. The resulting MFC
control derivative can be used in grid cells. For example, classes
<I>SECEditControl</I>, <I>SECComboBoxWnd</I>, and <I>SECListBox</I> in <a href="1996006a.htm">Figure 3</A> are MFC control derivatives that use this
approach.<P>

<h3><a name="0065_0015">The ODBC Classes<a name="0065_0015"></h3><P>

ODBC is a call-level interface that lets applications access data in any database
for which there is an ODBC driver. This allows your application to be independent
of the database system. <P>

MFC includes a high-level API for using ODBC. Two classes in this API are of
interest here: <I>CRecordset</I> and <I>CRecordView</I>. A <I>CRecordset</I>
object represents the currently selected records. It can scroll to other records,
update records, sort the selection, and apply filters to qualify the selection. A
<I>CRecordView</I> object provides a form view directly connected to a
<I>CRecordset</I> object.<P>

The MFC database classes do not directly support the ability to determine the
structure (or schema) of the database at run time. However, we wanted to make it
possible for the end user to specify and view the results of an SQL query even if
the schema were unknown at compile time, while still allowing the developer to
continue using <I>ClassWizard </I>to create record sets with a known schema. We
handled this by allowing the grid classes to be bound to any
<I>CRecordSe</I><I>t</I>-derived class and creating <I>SECDynamicRecordset</I>
(our own descendant of <I>CRecordse</I><I>t</I>), which has the necessary
functionality to determine the schema information at run time. We altered the RFX
mechanism in <I>SECDynamicRecordset</I> to behave exactly like any other
<I>CRecordset</I> class. Consequently, the grid ODBC classes integrate cleanly
into the MFC architecture and allow you to specify SQL Query statements at run
time.<P>

<a href="9601a7f4.gif">Figure 4</A> shows the hierarchy of the ODBC grid classes.
<I>SECODrid</I> provides the basic functionality to display the records of a
<I>CRecordset</I>. Because <I>SECODrid</I> is not derived from
<I>CObjec</I><I>t</I>, it can be used as a right-hand branch in derived classes.
This is the same mechanism we discussed with <I>SECGridCore</I>. The
<I>SECRecordWnd</I> and <I>SECRecordView</I> classes inherit from <I>SECODrid</I>
to display query results in a dialog or view grid, respectively. Additional
classes are used to display the status beam in the scroll bar. <P>

<h3><a name="0065_0016">The Tabbed Window Classes<a name="0065_0016"></h3><P>

While MFC provides advanced UI components such as tabbed dialogs, splitter
windows, and floating toolbars, there are no classes that directly support
workbook (or tabbed window) interfaces. Consequently, we developed the
<I>SECTabWnd</I> class to hold multiple instances of <I>SECGridView</I>, one for
each tab; see <a href="9601a7f5.gif">Figure 5</A>. In other words, each tab holds
a different view. This is similar to the way MFC splitter windows
(<I>CSplitterWn</I><I>d</I>) operate. <P>

The <I>SECTabWnd</I> class handles the containment and switching between the
various views. Class <I>SECTabBeam</I> draws the tabs, while <I>SECTabInfo</I>
stores the tabs' properties such as name, size, and the like. The end user can
change the tab names by double clicking. The source for the tabbed window classes
is available electronically (see &quot;Availability,&quot; page 3). <P>

<h3><a name="0065_0017">Implementation Issues<a name="0065_0017"></h3><P>

Styles are the key to the display of the grid and also define most of its
behavior. The <I>SECGridCore</I> member function <I>ComposeStyleRowCol</I>
computes the style for a particular cell. <I>ComposeStyleRowCol</I> first calls
<I>GetStyleRowCol</I> to get any cell-specific style attributes. It then fills in
defaults from the row, the column, and finally from the entire grid. <a href="9601g.htm#0065_001c">Listing One</A> shows a simplified version of
<I>ComposeStyleRowCol</I>.<P>

<I>GetStyleRowCol</I> handles a single set of attributes. If either the row or
column is 0, the corresponding row or column style is returned.
<I>GetStyleRowCol</I> takes an argument specifying the operation to be performed
on the style argument. The <I>SECCopy</I> operation copies the styles into the
argument, while the <I>SECApply</I> argument alters only those style attributes
that have not yet been set.<P>

One function controls all access to styles, allowing the developer to bind (that
is, dynamically tie) the grid to data such as a database or a live-data feed. To
bind the grid to a data source, simply override the virtual <I>GetStyleRowCol</I>
function. <P>

<a href="9601g.htm#0065_001d">Listing Two</A> is an example <I>GetStyleRowCol</I>
override that ties a grid control to a database stored in the document as member
<I>m_dbfile</I>.<P>

Centralizing all style operations in one virtual function lets you easily modify
the grid at run time in any way imaginable.<P>

What if you want the user to be able to dynamically modify the style? The grid
provides <I>StoreStyleRowCol</I>, a virtual function that is called before data
is stored. By overriding this function, you can intercept the end user's changes
and do whatever you wish with them.<P>

This technique allows you to enhance the grid. You can override many methods; for
example, a virtual <I>OnValidateCell</I> function (called after the user has left
a cell and before another cell is selected) can be overridden to perform
cell-level validation.<P>

<h3><a name="0065_0018">Drawing and Updating the Grid<a name="0065_0018"></h3><P>

When the grid draws, it first calculates the range of cells that need to be
drawn. Then it creates a style object for each cell in the range and initializes
those styles with <I>ComposeStyleRowCol</I>. Once all of the style information
has been gathered, the grid draws the backgrounds and borders of each, then asks
each cell control to draw itself.<P>

To minimize the number of drawing operations, our drawing routine looks globally
at all cells to determine the most cost-effective drawing technique. For example,
all neighboring cells with the same background pattern and all cells with the
same borders are grouped, so that these GDI operations need be called only once
for that common group of cells. We also cached GDI objects such as pens, fonts,
and brushes to avoid the overhead of allocating and freeing these resources for
each cell. The cache is created at the start of the draw process and is flushed
when all of the cells have been drawn.<P>

In addition to drawing in response to standard Windows paint messages, the grid
also has to keep the document and views synchronized. The MFC document/view model
handles most of the updating for the grid. To provide maximum flexibility, the
grid provides three overridable functions in the update path. <a href="9601a7f6.gif">Figure 6</A> shows how updates are performed. You can
intercept updates at the command stage, the storing stage, and even the update
stage.<P>

If you leverage the document/view architecture and ensure that you can override
the functions involved in updating at every critical stage, the uses of the grid
are limitless. For example, you could have two views on the same live-data
feed--one with a read-only version of incoming data, and another with a delayed
snapshot that can be modified by the user. <P>

<h3><a name="0065_0019">Control Implementation<a name="0065_0019"></h3><P>

Each composed style object contains an identifier for a control. Like any other
style attribute, this identifier can be changed at run time, allowing you maximum
flexibility. The <I>SECGridCore</I> class maintains a map of registered control
types and identifiers. In the <I>SECGridCore::OnInitialUpdate</I> member
function, you can register any additional control types and identifiers by
calling <I>RegisterControl</I>. <P>

To reduce resource requirements and maintain high performance, we implemented a
control-sharing scheme in which the grid creates only one control of each type
and uses that single control to draw every cell of that type. When the grid is
not in the process of drawing, it places a &quot;live&quot; control at the
current cell, so that the user can interact directly with that control. When the
user moves to a new cell, the grid resets the previous cell and places a
&quot;live&quot; control at the new current cell.<P>

This technique lets the control draw the current cell as the user moves around
the grid, resulting in higher performance and very low overhead: An example is a
grid full of edit controls for entering a table of values. The user will probably
enter text and tab to the next cell very quickly. In this case, the grid-control
implementation transparently uses the same edit control instead of creating and
destroying a new edit control for each current cell or maintaining a unique edit
control for each cell.<P>

<h3><a name="0065_001a">The Results<a name="0065_001a"></h3><P>

The compactness of our grid control can be attributed to solid object-oriented
design practices and to our use of existing MFC architectures and classes
whenever possible. Control caching and other optimization techniques make the
grid fast without sacrificing the object-oriented interface or requiring special
care.<P>

<h4><B><a href="9601a7f1.gif">Figure 1</A>:</B> Solution to the CWnd/CView
derivation problem.</h4><P>

<h4><B><a href="1996006f.htm">Figure 2</A>:</B> Interaction between SECGridCore
and CWnd.</h4><P>

<h4><B><a href="19960070.htm">Figure 3</A>:</B> Grid-control class
hierarchy.</h4><P>

<h4><B><a href="19960071.htm">Figure 4</A>:</B> ODBC grid-class
hierarchy.</h4><P>

<h4><B><a href="19960072.htm">Figure 5</A>:</B> Tabbed window-class
hierarchy.</h4><P>

<h4><B><a href="19960073.htm">Figure 6</A>:</B> Implementing grid
updates.</h4><P>

<P>

<h4><a name="0065_001b"><a name="0065_001c">Listing One<a name="0065_001c"></h4><pre>
void CGXGridCore::ComposeStyleRowCol(ROWCOL nRow, ROWCOL nCol, CGXStyle*pStyle)
{
  //Copy the cell style first
  GetStyleRowCol(nRow, nCol, *pStyle, secCopy);
  //Apply the row style next
  GetStyleRowCol(nRow,0,*pStyle,secApply);
  //Apply the colum style
  GetStyleRowCol(0,nCol,*pStyle,secApply);
  //Finally inherit any base styles
  pStyle-&gt;LoadBaseStyle(GetStylesMap());
}
</pre>
<h4><a name="0065_001d"><a name="0065_001e">Listing Two<a name="0065_001e"></h4><pre>
BOOL CDBaseBrowserView::GetStyleRowCol(int nRow, int, nCol, SECStyle&amp;
style, SEC_OPERATION op)
{
  if (nRow == 0) { // Column style
    style.SetStyle(GetField(nCol)-&gt;name); //Get column name from DB
    return TRUE;
  }
  //Advance row in DB (row = record)
  if (GetDocument()-&gt;m_dbfile.Seek(nRecord -1){
    //Row headings
    if (nCol == 0){
      char sz[20];
      wsprintf(sz,&quot;%5lu%c&quot;,nRow,
               GetDocument()-&gt;m_dbfile.IsDeleted() ? '*' : ' ');
      style.SetValue(sz);
      return TRUE;
    }
    //If we get here, we're looking up a cell.
    CSting s;
    CField * fld = GetField(nCol);
    //Get cell data and store along with max length
    GetDocument-&gt;m_dbFile.GetValue(GetFieldId(nCol),s);style.SetValue(s);
    style.SetMaxLength(fld-&gt;len);
    // Now set up the cell appearance based on field typeswitch(fld-&gt;type){
        case 'N' : style.SetBaseStyle(SEC_NUMERIC); break;
        case 'C' : style.SetBaseStyle(SEC_TEXT); break;
        case 'D' : style.SetBaseStyle(SEC_DATE); break;
        case 'L' : style.SetBaseStyle(SEC_CURRENCY); break;
    // a sidenote:
    // this is also a good example for using base styles. The user can 
    // change the appearance of all numeric, text, date and currency fields
    // at run time with the SECStyleSheet described above.
    // In OnInitialUpdate base styles are typicaly initialized 
        // programmaticaly as for example:
    // BaseStyle(SEC_NUMERIC)
    //  .SetHorizontalAlignment(DT_LEFT)
    //  .SetFont(SECFont().SetBold(TRUE));
    }
    return TRUE;
  }
  return FALSE; //At end of DB
}
</pre>
<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
