<HTML> <HEAD> <!-- This document was built using HyperWriter Professional byNTERGAID Inc. --> <TITLE>JAN96: Color Quantization using Octrees</TITLE></HEAD>
<META NAME="year" CONTENT="1996">
<body bgcolor="FFFFFF"> <h1>Color Quantization using Octrees<a name="0056_000e"><a name="0056_000e"><a name="0056_000c"><a name="0056_0000"></h1><P>

<h2>Mapping 24-bit images to 8-bit palettes</h2><P>

<h3>Dean Clark</h3><P>

<P> <i><a name="0056_000d"><a name="0056_0000">Dean, a programmer/analyst who
develops graphics and imaging applications, can be contacted at
71160.2426@compuserve.com.</i></p><hr><P>

Much of what goes on inside a computer is a discrete approximation of continuous
real-life events. This works because, most of the time, approximations are close
enough. Computer graphics, in particular, are full of approximations. We
approximate curved lines by stringing together many very short straight lines. We
approximate curved surfaces using bunches of tiny flat surfaces. And we
approximate a continuous rainbow of colors using many individual discrete colors.
<P>

There are a number of ways to approximate continuous colors. One is to throw in
buckets of bits, resulting in &quot;true color&quot; (or 24-bit), where three
bytes (one each for red, green, and blue primary colors) are dedicated to each
color pixel on the screen; see <a href="9601a6f1.gif">Figure 1</A>. While simple
in concept this approach is expensive, both in terms of computing power and
money. It takes a lot of CPU horsepower to move 24 bits of data around for every
pixel on the screen, and hardware that's able to do so tends to be expensive.<P>

A more common approximation is &quot;palette-table&quot; (or lookup table) color.
This is less expensive because it requires only a single byte per screen pixel.
The screen pixel value indexes a table of red/blue/green (RGB) values, and the
color value at that table position is displayed on the screen; see <a href="19960059.htm">Figure 2</A>. But the table index is only eight bits, so only
256 colors can be displayed on the screen at any time. Clearly, the challenge is
to select the right 256 colors for the image at hand.<P>

There are three common techniques for mapping an image with 24-bit color depth to
an 8-bit palette-table workstation. Past issues of <I>DDJ</I> have covered two of
these; see &quot;Median-Cut Color Quantization,&quot; by Anton Kruger (September
1994), and my article &quot;The Popularity Algorithm&quot; (July 1995). Both
techniques were first developed by Paul Heckbert in the early 1980s. In this
article, I'll present &quot;octree quantization,&quot; the third and most-recent
color quantization technique. <P>

<h3><a name="0056_000f">Spatial Data Structures<a name="0056_000f"></h3><P>

As its name implies, an octree is an 8-way tree; that is, each node has up to
eight children. The octree (and its cousin, the quadtree) is a hierarchical data
structure that uses the principle of recursive decomposition to represent spatial
data. <P>

The RGB color space is a cube, each axis of which is one primary color. If you
take the RGB color cube and divide it along each axis, you get eight subcubes;
see <a href="9601a6f3.gif">Figure 3</A>. Divide each subcube on each axis and
each of them becomes eight subcubes. Do this eight times, and you've got
2<SUP>24</SUP> subcubes, one for each possible color in a true-color image.<P>

This subdivision can be represented by a tree structure; see <a href="1996005b.htm">Figure 4</A>. The root of the tree represents the entire
space. The first level represents the first subdivision. Each region in the
subdivision corresponds to a child pointer. The color space can be subdivided
until each individual region represents a single color.<P>

The number of levels in a color octree corresponds to the number of bits in the
color primaries, so eight bits in each red, green, and blue component equal an
octree with eight levels. VGA provides six bits per primary, so an octree with
six levels is sufficient for VGA. The 3-bit pattern at each bit position of each
byte of a 3-byte RGB determines the decomposition of the color space; see <a href="1996005c.htm">Figure 5</A>.<P>

Suppose you want to insert the RGB color from <a href="1996005d.htm">Figure 5</A>
into the color octree. The most-significant bit is the root (bit 7 in each color
byte, level 0 in the octree). The bit pattern is 101==5, so to begin inserting
this color, follow the path through <I>tree--&gt;child[5]</I>. At the next level,
the bit pattern is 011==3, so continue down the tree through
<I>tree--&gt;child[3]</I>. The bit pattern from the least-significant bit
pinpoints the color exactly. The first step for a naive octree color-quantization
algorithm would be to scan the image and store each unique color in the octree by
traversing the tree as previously discussed.<P>

<h3><a name="0056_0010">Refining the Process<a name="0056_0010"></h3><P>

At the end of the first image scan, the color octree could have as many as
<I>row</I><I>s</I>x<I>columns</I> individual colors in it. Each unique color
would be represented by a leaf node in the tree. To get the number of colors down
to 256 (or whatever the goal is), the tree must be reduced by somehow merging
colors. Colors that are very close together (that is, leaf nodes that share a
parent) would be combined into a single average color. The close colors would be
deleted, and the new average color inserted into the tree. This would repeat
until the tree contained the desired number of colors.<P>

The naive color octree can be improved in several ways. First, instead of
building an entire octree containing all image colors, the tree can be reduced
immediately whenever the number of leaves exceeds the target number. Thus, there
are never more than the target number of leaf nodes in the tree, saving
considerable memory.<P>

Reducing the tree by traversing to the leaf level is time consuming. As a further
improvement, maintain an array of linked lists of reducible tree nodes; see <a href="9601a6f6.gif">Figure 6</A>. The tree can grow no deeper than the number of
bits in our color primaries, so an array of this size will do. <P>

<h3><a name="0056_0011">A Level-Linked Octree<a name="0056_0011"></h3><P>

A node is reducible if it isn't a leaf. As new nodes are created at each level
except the leaf level, they're added to the reducible list for that level. <P>

To reduce the tree, all the children of a reducible node are averaged together
into the node. The child subtrees are discarded, and the reducible node becomes a
leaf node. The result is that all those colors are now represented by the single
larger node. Further, since the node is now a leaf, any new colors whose path
through the tree takes them through this node now stop here--after reduction, the
tree never grows downward again.<P>

You can now outline the octree quantization algorithm:<P>

<ol>1.     Scan the image, and insert colors into an octree structure. </ol><P>

<ol>2.     If the number of leaf nodes in the octree exceeds the number of final
colors, reduce the tree. </ol><P>

<ol>3.     When the image scan is finished, the leaf nodes of the octree contain
the reduced image colors. Rescan the image to map image colors to their
appropriate octree leaves.</ol><P>

<h3><a name="0056_0012">Implementing Octree Quantization<a name="0056_0012"></h3><P>

Listings <a href="9601f.htm#0056_0016">One</A> and <a href="9601f.htm#0056_0017">Two</A> present an implementation of the refined
color-octree algorithm just described. <I>InsertTree</I> takes an RGB color and
inserts it into the octree at the leaf level, which is initially level 6 for VGA.
Each leaf node maintains a count of the number of image pixels containing that
color and a sum of the RGB instances. <I>InsertTree</I> recurses down the tree,
creating new nodes as necessary. As nodes are created in <I>CreateOctNode</I>,
they're added to the reducible linked list for their level.<P>

<I>ReduceTree</I> does the reduction. The reduction level is always one higher
than the leaf level. <I>ReduceTree</I> takes the first node from the list and
sums the component RGB values and pixel counts for all its children. <P>

Once the tree is built, <I>MakePaletteTable</I> traverses the tree and builds an
array of leaf RGB values for the output color palette. The palette index value is
also stored in the color-octree leaf node. <I>QuantizeColor</I> uses this value
to map an image RGB value to a palette-table entry. This function takes an image
RGB value and traverses the octree in the same manner as <I>InsertTree</I>. When
a leaf node is reached, the palette index in the leaf node is the appropriate
quantization value.<P>

CONVERT.C (available electronically, see &quot;Availability,&quot; page 3) reads
an RGB image file, maps its colors down to 256 palette-table cells, and either
displays the quantized image or writes a PCX file of it. The input file format is
the same as that in my July 1995 article--essentially an ASCII file of RGB values
between 0 and 1, plus a short header. The screen output uses the MetaWindow
graphics library from Metagraphics (Scotts Valley, CA), but it is easily adapted
to most any graphics kernel.<P>

<h3><a name="0056_0013">Results and Additional Heuristics<a name="0056_0013"></h3><P>

This algorithm is quite efficient in both time and space. Since the color octree
never has more than N+1 leaf nodes, plus internal nodes (at most, N more) it
compares favorably to other methods, which typically require space proportional
to the number of unique colors in the original image. Inserting colors into the
tree and mapping original colors into the palette table are all bounded by the
tree depth (eight or less) times the number of image pixels, while building the
palette table is proportional to the tree depth times the number of final
quantization colors. In practice, the running time of the program is dominated by
disk accesses, managing about 4300 pixels per second on a 486/33 PC.<P>

The tree is always reduced by merging the colors at the leaf level into their
parent nodes. Any node at the reducible level could be chosen, but the final
output can be affected by the selection criteria, which include: picking a node
arbitrarily; picking the node representing the most image pixels; picking the
node representing the least image pixels; and some hybrid, such as alternating
most/least or favoring center pixels over edge pixels.<P>

What's the difference? Picking colors that represent many pixels and averaging
them results in larger groups of pixels that share the same (slightly wrong)
color. The tendency then is to have more individual colors available for
less-conspicuous regions of the image. Picking the fewest pixels tends to
preserve subtle gradations in large, nearly constant shaded areas, reducing
overall error, but at the expense of small image detail. An alternative technique
would attempt to balance these two effects. A heuristic that favors central
pixels might be useful in an animation scenario, where the user tends to focus on
the middle of the image.<P>

<a href="9601f.htm#0056_0016">Listing One</A> selects reducible nodes
&quot;randomly&quot;--it simply takes the first node in the reducible list, which
is the most recently added one. Implementing any of the aforementioned heuristics
requires that more information be stored at each node. For the pixel-count
heuristics, you have to know how many pixels are represented in the subtree
rooted at each reducible node. This could be calculated as an extra step as the
leaf level changes, or the counts could be accumulated as colors are inserted
into the tree. The list could then be sorted before reductions are done on the
level, or for each reduction the list could be scanned for the largest/smallest
number of pixels.<P>

Finally, note that the octree algorithm can't guarantee exactly N colors in the
final palette table. This is because a reduction trims an entire subtree, which
may be up to eight leaf nodes, while adding only one additional leaf. This might
be important in a situation where an image is mapped to a very small number of
colors, say 64 or less.<P>

<h3><a name="0056_0014">References<a name="0056_0014"></h3><P>

Clark, Dean. &quot;The Popularity Algorithm.&quot; <I>DDJ</I> (July 1995).<P>

Gervautz, M. and W. Purgathofer. &quot;A Simple Method for Color Quantization:
Octree Quantization&quot; in <I>New Trends in Computer Graphics</I>. New York,
NY: Springer-Verlag, 1988.<P>

Heckbert, Paul. &quot;Color Image Quantization for Frame Buffer Display.&quot;
<I>Computer Graphics</I> (July 1982).<P>

Kruger, Anton. &quot;Median-Cut Color Quantization.&quot; <I>DDJ</I> (September
1994).<P>

Samet, Hanan. <I>Applications of Spatial Data Structures</I>. Reading, MA:
Addison-Wesley, 1990.<P>

<h4><B><a href="9601a6f1.gif">Figure 1</A>:</B> 24-bit color display.</h4><P>

<h4><B><a href="19960060.htm">Figure 2</A>:</B> Palette-table color
scheme.</h4><P>

<h4><B><a href="19960061.htm">Figure 3</A>:</B> Recursive subdivision of a 2-D
space.</h4><P>

<h4><B><a href="19960062.htm">Figure 4</A>:</B> Hierarchical space subdivision--a
quadtree.</h4><P>

<h4><B><a href="19960063.htm">Figure 5</A>:</B> Determining the color space at
each tree level.</h4><P>

<h4><B><a href="19960064.htm">Figure 6</A>:</B> A level-linked octree.</h4><P>

<P>

<h4><a name="0056_0015"><a name="0056_0016">Listing One<a name="0056_0016"></h4><pre>
// oct1.h -- Header file for octree color quantization function
// Dean Clark
//
#ifndef OCT1_H
#define OCT1_H
typedef unsigned char   byte;
typedef unsigned int    uint;
typedef unsigned long   ulong;
typedef int             bool;
#ifndef True
#define False   0
#define True    1
#endif
// RGBType is a simple 8-bit color triple
typedef struct {
    byte    r,g,b;                      // The color
} RGBType;
// OctnodeType is a generic octree node
typedef struct _octnode {
    int     level;                      // Level for this node
    bool    isleaf;                     // TRUE if this is a leaf node
    byte    index;                      // Color table index
    ulong   npixels;                    // Total pixels that have this color
    ulong   redsum, greensum, bluesum;  // Sum of the color components
    RGBType *color;                     // Color at this (leaf) node
    struct _octnode *child[8];          // Tree pointers
    struct _octnode *nextnode;          // Reducible list pointer
} OctreeType;
OctreeType *CreateOctNode(int level);
void MakePaletteTable(OctreeType *tree, RGBType table[], int *index);
ulong TotalLeafNodes(void);
void ReduceTree(void);
void InsertTree(OctreeType **tree, RGBType *color, uint depth);
int QuantizeColor(OctreeType *tree, RGBType *color);
#endif
</pre>
<h4><a name="0056_0017"><a name="0056_0018">Listing Two<a name="0056_0018"></h4><pre>
// oct1.c -- Color octree routines.
// Dean Clark
//
#include    &lt;stdio.h&gt;
#include    &lt;stdlib.h&gt;
#include    &quot;oct1.h&quot;
#define     COLORBITS   8
#define     TREEDEPTH   6
byte MASK[COLORBITS] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
#define BIT(b,n)   (((b)&amp;MASK[n])&gt;&gt;n)
#define LEVEL(c,d)((BIT((c)-&gt;r,(d)))&lt;&lt;2 | BIT((c)-&gt;g,(d))&lt;&lt;1 | BIT((c)-&gt;b,(d)))
OctreeType  *reducelist[TREEDEPTH];             // List of reducible nodes
static byte glbLeafLevel = TREEDEPTH;
static uint glbTotalLeaves = 0;
static void *getMem(size_t size);
static void MakeReducible(int level, OctreeType *node);
static OctreeType *GetReducible(void);
// InsertTree -- Insert a color into the octree
//
void InsertTree(OctreeType **tree, RGBType *color, uint depth)
{
    int level;
    if (*tree == (OctreeType *)NULL) {
        *tree = CreateOctNode(depth);
    }
    if ((*tree)-&gt;isleaf) {
        (*tree)-&gt;npixels++;
        (*tree)-&gt;redsum += color-&gt;r;
        (*tree)-&gt;greensum += color-&gt;g;
        (*tree)-&gt;bluesum += color-&gt;b;
    }
    else {
        InsertTree(&amp;((*tree)-&gt;child[LEVEL(color, TREEDEPTH-depth)]),
                   color,
                   depth+1);
    }
}
// ReduceTree -- Combines all the children of a node into the parent, 
// makes the parent into a leaf
//
void ReduceTree()
{
    OctreeType  *node;
    ulong   sumred=0, sumgreen=0, sumblue=0;
    byte    i, nchild=0;
    node = GetReducible();
    for (i = 0; i &lt; COLORBITS; i++) {
        if (node-&gt;child[i]) {
            nchild++;
            sumred += node-&gt;child[i]-&gt;redsum;
            sumgreen += node-&gt;child[i]-&gt;greensum;
            sumblue += node-&gt;child[i]-&gt;bluesum;
            node-&gt;npixels += node-&gt;child[i]-&gt;npixels;
            free(node-&gt;child[i]);
        }
    }
    node-&gt;isleaf = True;
    node-&gt;redsum = sumred;
    node-&gt;greensum = sumgreen;
    node-&gt;bluesum = sumblue;
    glbTotalLeaves -= (nchild - 1);
}
// CreateOctNode -- Allocates and initializes a new octree node.  The level 
// of the node is determined by the caller.
// Arguments:  level   int     Tree level where the node will be inserted.
// Returns:    Pointer to newly allocated node.  Does not return on failure.
//
OctreeType *CreateOctNode(int level)
{
    static OctreeType  *newnode;
    int                 i;
    newnode = (OctreeType *)getMem(sizeof(OctreeType));
    newnode-&gt;level = level;
    newnode-&gt;isleaf = level == glbLeafLevel;
    if (newnode-&gt;isleaf) { 
        glbTotalLeaves++;
    }
    else {
        MakeReducible(level, newnode);
    }
    newnode-&gt;npixels = 0;
    newnode-&gt;index = 0;
    newnode-&gt;npixels = 0;
    newnode-&gt;redsum = newnode-&gt;greensum = newnode-&gt;bluesum = 0L;
    for (i = 0; i &lt; COLORBITS; i++) {
        newnode-&gt;child[i] = NULL;
    }
    return newnode;
}
// MakeReducible -- Adds a node to the reducible list for the specified level
//
static void MakeReducible(int level, OctreeType *node)
{
    node-&gt;nextnode = reducelist[level];
    reducelist[level] = node;
}
// GetReducible -- Returns next available reducible node at tree's leaf level
//
static OctreeType *GetReducible(void)
{
    OctreeType *node;
    
    while (reducelist[glbLeafLevel-1] == NULL) {
        glbLeafLevel--;
    }
    node = reducelist[glbLeafLevel-1];
    reducelist[glbLeafLevel-1] = reducelist[glbLeafLevel-1]-&gt;nextnode;
    return node;
}
// MakePaletteTable -- Given a color octree, traverse tree and: 
//  - Add the averaged RGB leaf color to the color palette table;
//  - Store the palette table index in the tree;
// When this recursive function finally returns, 'index' will contain
// the total number of colors in the palette table.
//
void MakePaletteTable(OctreeType *tree, RGBType table[], int *index)
{
    int i;
    if (tree-&gt;isleaf) {
        table[*index].r = (byte)(tree-&gt;redsum / tree-&gt;npixels);
        table[*index].g = (byte)(tree-&gt;greensum / tree-&gt;npixels);
        table[*index].b = (byte)(tree-&gt;bluesum / tree-&gt;npixels);
        tree-&gt;index = *index;
        (*index)++;
    }
    else {
        for (i = 0; i &lt; COLORBITS; i++) {
            if (tree-&gt;child[i]) {
                MakePaletteTable(tree-&gt;child[i], table, index);
            }
        }
    }
}
// QuantizeColor -- Returns palette table index of an RGB color by traversing 
// the octree to the leaf level
//
int QuantizeColor(OctreeType *tree, RGBType *color)
{
    if (tree-&gt;isleaf) {
        return tree-&gt;index;
    }
    else {
        QuantizeColor(tree-&gt;child[LEVEL(color,6-tree-&gt;level)],color);
    }
}
// TotalLeafNodes -- Returns the total leaves in the tree (glbTotalLeaves)
//
ulong TotalLeafNodes()
{
    return glbTotalLeaves;
}
// getMem -- Memory allocation routine
//
static void *getMem(size_t size)
{
    void *  mem;
    mem = (void *)malloc(size);
    if (mem == NULL) {
        printf(&quot;Error allocating %ld bytes in getMem\n&quot;,(ulong)size);
        exit(-1);
    }
    return mem;
}
</pre>
<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
