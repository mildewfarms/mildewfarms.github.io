<HTML> <HEAD> <!-- This document was built using HyperWriter Professional byNTERGAID Inc. --> <TITLE>JAN96: Priority Queues and the STL</TITLE></HEAD> <body bgcolor="FFFFFF">
<META NAME="year" CONTENT="1996">
<h1>Priority Queues and the STL<a name="0020_0004"><a name="0020_0004"><a name="0020_0002"><a name="0020_0000"></h1><P>

<h2>Heap management and container support made easy</h2><P>

<h3>Mark R. Nelson</h3><P>

<P> <i><a name="0020_0003"><a name="0020_0000">Mark, a programmer for Greenleaf
Software, is the author of The C++ Programmer's Guide to the Standard Template
Library (IDG Books, 1995) and The Data Compression Book, <I>Second Edition
</I>(M&amp;T Books, 1995). He can be contacted at
73650.312@compuserve.com.</i></p><hr><P>

When I wrote the chapter on Huffman coding for the first edition of my
data-compression book, my sample programs emphasized clarity at the expense of
efficiency. I felt it was much more important for my code to be easy to
understand than to be fast or tight. <P>

Were I writing that book today, I wouldn't have to wrestle with this choice. The
addition of the Standard Template Library (STL) to the ANSI/ISO C++ standard
provides a perfect tool for the creation of Huffman coding trees: the
<I>priority_queue</I> container adapter. The STL lets me have the best of both
worlds: easy-to-read code that runs with optimal efficiency.<P>

In this article, I'll examine just what a priority queue is and how the STL
implements it using heap algorithms. I'll also present a Huffman encoder using
the STL priority queue.<P>

<h3><a name="0020_0005">What is a Priority Queue?<a name="0020_0005"></h3><P>

Open any book on data structures and you will undoubtedly run into a container
type known as a <I>queue</I>. Another name for the queue, FIFO, is an acronym for
the way it works: First In, First Out. <a href="9601a1f1.gif">Figure 1</A>
describes how a queue normally processes data.<P>

The standard interface to the FIFO queue simply consists of a <I>push()</I>
function, which adds new elements, and <I>pop()</I>, which always removes the
oldest element. <P>

This data structure is relatively easy to implement. Often, however, a more
sophisticated form of queue is needed. The one I present here is the priority
queue.<P>

A priority queue, as shown in <a href="19960023.htm">Figure 2</A>, assigns a
priority to every element that it stores. New elements are added to the queue
using <I>push()</I>, just as with a FIFO queue. This queue also has a
<I>pop()</I> function, but it differs from the FIFO <I>pop()</I> in one key area:
When you call <I>pop()</I> for the priority queue, you don't get the oldest
element in the queue. Instead, you get the element with the highest priority.<P>

The priority queue obviously fits well with certain types of tasks. For example,
the scheduler in an operating system might use a priority queue to track
processes. In this article, I'll use a priority queue to build a Huffman coding
tree.<P>

<h3><a name="0020_0006">Implementation with a Heap<a name="0020_0006"></h3><P>

There are a few brute-force ways to implement a priority queue. In my inefficient
Huffman encoder, I kept the queue elements in an unsorted list, then searched the
entire list for the highest-priority item when it came time to <I>pop()</I>.
Alternatively, you could perform a sorted insertion when the <I>push()</I>
function is called, so that <I>pop()</I> has an easy job of it. This could be
accomplished using a sorted tree.<P>

In the case of the priority queue, however, there is a better approach. A data
structure known as a &quot;heap&quot; can be used to keep the queue elements in a
partially sorted order. Insertions and extractions can then be done in
<I>log(N)</I> time, with virtually no extra memory overhead.<P>

A heap has the following key characteristics:<P>
<ul>
<li>The elements of a heap are stored in a contiguous array. If the heap holds
<I>N</I> elements, they will be stored at locations 1 through <I>N</I> of the
array. (In this article, I use a convention of arrays starting at 1 and running
through <I>N</I> mostly for notational convenience.)</li> <li>The elements in the
array are also part of an implicit binary tree. Every element <I>X</I> (except
the root node) has a parent at location <I>X/2</I>.</li> <li>Each node has a
priority greater than or equal to both of its children.</li>
</ul>
<a href="9601a1f3.gif">Figure 3</A> shows a typical heap. Note that a heap is not a
completely ordered tree. Even though parent nodes are always greater than
children, there is no ordering among siblings. For example, node 10 has a higher
priority (39) than node 3, which is two levels higher up in the tree.<P>

Even though a heap is not completely sorted, it has one very useful
characteristic: The node with the highest priority will always be at the top of
the tree. This makes it suitable for a priority queue, since the <I>pop()</I>
operation requires only the highest element. This characteristic, along with the
negligible overhead and fast insertions and removals, makes the heap an ideal
data structure for implementation of a priority queue.<P>

<h3><a name="0020_0007">The STL Heap Functions<a name="0020_0007"></h3><P>

The STL has four template functions that work with heaps:<P>
<ul>
<li><I>make_heap()</I> takes an existing sequence of elements and rearranges it
to form a heap.</li> <li><I>push_heap()</I> adds a new element to an existing
heap.</li> <li><I>pop_heap()</I> removes the highest-priority value from a
heap.</li> <li><I>sort_heap()</I> turns a heap into a sorted sequence.</li>
</ul>
All
four template functions are parametrized by two different types: class
<I>RandomAccessIterator</I> and class <I>Compare</I>. The <I>iterator</I> class
simply defines the type of iterator used to point to the elements in the heap.
The <I>iterator</I> usually will be of a type defined by the container the heap
is stored in. If the heap is stored in a built-in C/C++ array, the iterator will
be a standard pointer type.<P>

The <I>Compare</I> class defines an STL comparison object used to order the
elements in the heap. The STL gives us maximum flexibility in determining how
heap elements are compared. The comparison class defaults to
<I>less&lt;T&gt;</I>, a predefined STL comparison-object class.
<I>less&lt;T&gt;</I> simply compares two objects using the less-than relational
operator, <I>operato</I><I>r</I><I>&lt;()</I>. Alternatively, the comparison
could be done with the comparison object passed as an optional parameter to any
of the four heap management functions; see <a href="9601a.htm#0020_000c">Example
1</A>.<P>

The STL uses only three of these heap functions to implement a priority queue.
<I>make_heap()</I> is used to create a heap out of unordered data, while
<I>push_heap()</I> and <I>pop_heap()</I> are used to insert and remove individual
items from the heap. Here, I'll look only at <I>push_heap()</I> and
<I>pop_heap()</I>. <I>make_heap()</I> uses techniques very similar to those of
<I>push_heap()</I> to create an initial heap, so understanding the latter should
make the former easy to follow.<P>

In <a href="9601a.htm#0020_000d">Example 2</A>, the first two arguments to
function <I>push_heap() </I>are iterators that define the start and end of the
sequence of elements that make up the heap. (In canonical STL fashion,
<I>first</I> points to the first element in the sequence, and <I>last</I> points
one past the last element.) The third parameter is the optional comparison object
used to order the elements in the heap.<P>

In general, the algorithms supplied with the STL work on sequences of elements
and don't perform any operations that require knowledge of how to add or remove
elements from containers. (This is one reason why so many of the algorithms work
with built-in arrays.) <P>

Given this restriction, <I>push_heap()</I> operates a little differently than you
might expect. If you have an existing heap with <I>N</I> elements numbered 1
through <I>N</I>, you must place the new element at location <I>N+1</I> before
calling <I>push_heap()</I>. This creates a new, slightly unbalanced heap with
<I>N+1</I> elements. <P>

You call <I>push_heap()</I> with the heap in this temporary, invalid
configuration. At that point, <I>push_heap()</I> simply corrects the heap to take
into account this new element. This is done by repeatedly swapping the new node
with its parent node until it reaches a position where the parent is greater than
the new node. The procedure for this can be described with code like <a href="9601a.htm#0020_000e">Example 3</A>.<P>

<a href="19960025.htm">Figure 4</A> illustrates this procedure. The new node,
with a value of 55, is added to the heap at the next available position.
<I>push_heap()</I> is called and begins moving the node up the heap. The initial
parent of the new node has a value of 49, which is less than 55. The two elements
are swapped, and the comparison loop repeats. After the first swap, the new node
is in a valid position in the heap. It is greater than all of its children, and
less than its parent. If the new node had a value greater than 60, a second swap
would have been performed, and the new node would then appear at the root of the
heap.<P>

The <I>pop_heap()</I> function requires that you use a set of idiosyncratic
conventions similar to those for <I>push_heap()</I>. <I>pop_heap()</I> doesn't
want to worry about changing the size of your container. Instead, it moves the
current root node of the heap to position <I>N</I>. <I>pop_heap()</I> then
adjusts the heap to be correct for positions 1 through <I>N-1</I>, and control
passes back to the calling function.<P>

After calling <I>pop_heap()</I>, the size of the heap will be <I>N-1</I> instead
of <I>N</I>. However, there is still a single element in the last position of
your array. (This can be removed from STL containers using the container's
<I>pop_back()</I> function.) Furthermore, if the heap still contains any data,
the highest value will have been moved to the root node of the heap.<P>

The actual mechanics of this operation are similar to those for
<I>pop_heap()</I>. First, the root node is swapped with the least node in the
heap. Then, the new root node is moved down the tree, swapping the greater of its
two children, until it is greater than both of its children. <a href="9601a.htm#0020_000f">Example 4</A> illustrates how this function might be
implemented. This code is slightly more complicated than that of
<I>push_heap()</I>, but you can clearly see that it is performing the reverse
operation of <I>push_heap()</I>. It moves the least element to the root of the
heap, then loops while checking to see if the root node is less than one of its
children. If it is, the node is swapped with its largest child, and the process
repeats.<P>

You can see why inserting and removing items from the heap is a <I>Log(N)</I>
operation. Regardless of what number is inserted or extracted, the adjustment
process will only have to go from the root of the tree to its lowest level, or
vice versa. Because of the way the tree is designed for the heap, this will never
take more than <I>Log(N)</I> swap operations.<P>

<h3><a name="0020_0008">The <I>priority_queue</I> Container Adapter<a name="0020_0008"></h3><P>

The STL implements priority queues using a &quot;container adapter,&quot; a
simple wrapper class that uses the framework of an existing container to
implement a new container type. The STL has three container-adapter types:
<I>stack</I>, <I>queue</I>, and <I>priority_queue</I>. The <I>priority_queue</I>
class uses an underlying container that can be either an STL vector or deque. In
most cases, a vector object is probably the best choice.<P>

When you create a <I>priority_queue</I>, you have to specify the container type,
and optionally a comparison-object type. Typical declarations look like <a href="9601a.htm#0020_0010">Example 5</A>. <P>

The <I>priority_queue</I> adapter presents a very limited interface. It has a
pair of constructors: One creates an empty queue, and the other loads a sequence
of initial values into the queue. The copy constructor, assignment operator, and
destructor are all implicitly defined by the compiler. The constructors and
destructors initialize two protected data members: <I>Container c</I> and the
comparison object, <I>Compare comp</I>.<P>

The container offers just five member functions. (Well, six, if you count the
<I>const</I> and mutable versions of <I>top()</I> as two separate functions.)
Like the <I>priority_queue</I> class itself, these member functions are wrappers
around container member functions. The Hewlett-Packard STL release defines these
functions as shown in <a href="9601a.htm#0020_0011">Example 6</A>, and nearly all
are self-explanatory. <I>empty()</I> and <I>size()</I> are used to determine the
number of elements in the heap at a given time. <I>top()</I> returns a reference
to the top element in the heap, which should be the element with the highest
priority. <I>push()</I> and <I>pop()</I> are used to insert and remove elements
from the queue.<P>

Note that <I>push()</I> and <I>pop()</I> both deal with the idiosyncratic
behavior of the STL heap functions. <I>push()</I> first adds the new element to
the end of the container that holds the heap. It then calls the STL
<I>push_heap()</I> function to walk the new element up to its proper place.
<I>pop()</I> first calls the STL <I>pop_heap()</I> function to move the top
element to the end of the container. A subsequent call to <I>pop_back()</I>
removes that element and shrinks the container.<P>

As a programmer, I feel the most exciting thing about this container adapter is
the relative ease with which it was built around an existing container class. It
would take hundreds of lines of code to create a new container class from
scratch. But this example shows that you can hijack existing container
capabilities to define new types without even breaking a sweat.<P>

<h3><a name="0020_0009">An Example: Huffman Coding<a name="0020_0009"></h3><P>

Earlier, I mentioned that priority-queue containers would be ideal for developing
Huffman coding trees. A Huffman coding tree is a binary tree made up of internal
nodes and leaf nodes. Coding starts at the root and moves down the tree, issuing
0s and 1s until a leaf node is reached. Leaf nodes signify that a character has
been completely encoded, while internal nodes are a stop along the way. Each node
has two children, one designated with a 0 bit, and the other designated with a 1
bit. To encode a particular character, you take the path down the tree that leads
to the target leaf.<P>

Building the Huffman encoding tree begins with creating a list of unattached leaf
nodes, each having an internal weight proportional to the frequency of the
character they are encoding. The encoding process then executes a simple loop
that combines nodes until there is only one root node, which becomes the starting
point for the Huffman coder.<P>

On each pass through the loop you have to identify the two available nodes with
the lowest weights. Those two nodes are then removed from the pool of available
nodes (the priority queue). A new internal node is then created, and it is
assigned those two nodes as children. This internal node is then entered into the
priority queue. <a href="9601a1f5.gif">Figure 5</A> shows the tree that results
from processing the input data in <a href="9601a.htm#0020_000b">Figure 6</A>
(a).<P>

This data is found in INPUT.DAT, the file used to exercise the test program,
PQHUFF.CPP (see <a href="9601a.htm#0020_0014">Listing One</A> beginning on page
96). As you can see, the nodes with the lowest frequency counts are found the
farthest down the tree, meaning they will take more bits to encode.
High-frequency characters, such as &quot;A&quot;, take fewer bits to encode. The
result? Data compression.<P>

PQHUFF.CPP builds the Huffman encoding tree using a priority queue filled with
objects of class <I>node</I>. The node objects are simply C++ representations of
the nodes in <a href="19960027.htm">Figure 5</A>. Each node has a weight, which
determines its place in the eventual Huffman coding tree.<P>

The utility of the priority queue finally shows up in <I>main()</I> of
PQHUFF.CPP. The loop that builds the encoding tree counts all the characters in
the input file and adds the initial count values to the priority queue; see <a href="9601a.htm#0020_0012">Example 7</A>.<P>

In the loop, the two lowest-weight nodes are popped from the priority queue. A
new node that has those two nodes for children is then created and inserted into
the queue. The process continues until the queue has just one node left, which is
then the root node for the encoding tree. <a href="9601a.htm#0020_000b">Figure
6</A> (b) is the output from PQHUFF.EXE for the data in <a href="9601a.htm#0020_000b">Figure 6</A> (a). (The source code, executable, and
sample data file for PQHUFF are available electronically; see
&quot;Availability,&quot; page 3.)<P>

<h3><a name="0020_000a">Conclusion<a name="0020_000a"></h3><P>

The STL template class <I>priority_queue</I> provides an efficient encapsulation
of a priority queue. The details of both heap management and container support
are provided in a fairly transparent manner. Having this class available as part
of the C++ standard library gives you a potent, versatile new tool for a variety
of problems. I find that it makes my Huffman-table creation much more efficient,
while maintaining readability.<P>

<h4><B><a href="9601a1f1.gif">Figure 1</A>: </B>A FIFO queue.</h4><P>

<h4><B><a href="19960029.htm">Figure 2</A>: </B>A priority queue.</h4><P>

<h4><B><a href="1996002a.htm">Figure 3</A>:</B> A heap.</h4><P>

<h4><B><a href="1996002b.htm">Figure 4</A>:</B> Inserting a new node. (a) A new
node is inserted at the end of the heap; (b) push_heap moves the new node into
its proper location.</h4><P>

<h4><B><a href="1996002c.htm">Figure 5</A>:</B> A Huffman coding tree.</h4><P>

<h4><a name="0020_000b"><B>Figure 6:</B> (a) Sample input data; (b) output from
the PQHUFF.EXE program for the data in (a).<a name="0020_000b"></h4><P>

<pre>(a)

AAAAAAAAAAAAAA 
BBB
C
D
E
F
GGG
HHHH

(b)

Char  Count  Code

  A    14    0 
  B    3     100 
  G    3     101 
  H    4     110 
  C    1     11100 
  F    1     11101 
  D    1     11110 
  E    1     11111

</pre>

<h4><a name="0020_000c"><B>Example 1:</B> The prototype for the template function
pop_heap(). A second overloaded version of this function omits the comparison
parameter.<a name="0020_000c"></h4><P>

<pre>template&lt;class RandomAccessIterator, class Compare&gt;
pop_heap(  RandomAccessIterator first,
          RandomAccessIterator last,
          Compare compare);</pre>

<h4><a name="0020_000d"><B>Example 2:</B> The prototype for the template function
push_heap(). This overloaded version takes a comparison object argument in
addition to the two iterators.<a name="0020_000d"></h4><P>

<pre>template&lt;class RandomAccessIterator, class Compare&gt;
push_heap( RandomAccessIterator first,
          RandomAccessIterator last,
          Compare compare);</pre>

<h4><a name="0020_000e"><B>Example 3:</B> A simplified sample of the type of code
push_heap() uses to adjust the heap to accommodate the new elements at position
N.<a name="0020_000e"></h4><P>

<pre>template &lt;class T&gt;
void adjust_heap( T* c, int N )
{
    int test_node = N;
    while ( test_node &gt; 1 ) {
        int parent_node = N/2;
        if ( c[parent_node] &lt; c[test_node] )
            swap( c[parent_node], c[test_node] );
            test_node = parent_node;
        } else
            break;
        }
}</pre>

<h4><a name="0020_000f"><B>Example 4:</B> A simplified sample of the type of code
 pop_heap() uses to move the root node to position N, then adjust the rest of the
heap.<a name="0020_000f"></h4><P>

<pre>template&lt;class T&gt;
adjust_heap( T* c, int N )
{
    T temp = c[1];
    c[1] = c[N];
    int test_node = 1;
    for ( ; ; ) {
        int child;
        if ( ( test_node * 2 ) &gt;= N )
            break;
        if ( ( test_node * 2 + 1 ) &gt;= N )
            child = test_node * 2;
        else if ( c[ test_node * 2 ] &gt; <P> c[ test_node* 2 + 1 ]
)
            child = test_node * 2;
        else
            child = test_node * 2 + 1;
        if ( c[ test_node ] &lt; c[ child ] ) {
            swap( c[ test_node ], c[ child ] );
            test_node = child;
        } else
            break;
    }
    c[ N ] = temp;
}</pre>

<h4><a name="0020_0010"><B>Example 5:</B> Typical declarations.<a name="0020_0010"></h4><P>

<pre>priority_queue&lt; vector&lt;node&gt; &gt; x;
priority_queue&lt; deque&lt;string&gt;,
            case_insensitive_compare &gt; y;
priority_queue&lt; vector&lt;int&gt;, greater&lt;int&gt; &gt; z;</pre>

<h4><a name="0020_0011"><B>Example 6:</B> HP STL member functions.<a name="0020_0011"></h4><P>

<pre>template &lt;class Container, class Compare&gt;
class  priority_queue {
  protected :
    Container c;
    Compare comp;
    ...
  public :
    bool empty() const { return c.empty(); }
    size_type size() const { return c.size(); }
    value_type&amp; top() { return c.front(); }
    const value_type&amp; top() const { return c.front(); }
    void push(const value_type&amp; x) {
        c.push_back(x);
        push_heap(c.begin(), c.end(), comp);
    }
    void pop() {
        pop_heap(c.begin(), c.end(), comp);
        c.pop_back();
    }</pre>

<h4><a name="0020_0012"><B>Example 7:</B> Loop that builds an encoding tree.<a name="0020_0012"></h4><P>

<pre>while ( q.size() &gt; 1 ) {
    node *child0 = new node( q.top() );
    q.pop();
    node *child1 = new node( q.top() );
    q.pop();
    q.push( node( child0, child1 ) );
}</pre>

<P>

<h4><a name="0020_0013"><a name="0020_0014">Listing One<a name="0020_0014"></h4><pre> 
// PQHUFF.CPP -- This program reads in all the characters from the file 
// input.dat, then builds a Huffman encoding tree using an STL priority queue. 
// The resulting table is then printed out. If you have the HP version of the 
// STL installed, you can build this program with Borland C++ 4.5 using a 
// command line like this: bcc -ml -IC:\STL pqhuff.cpp 
// 
// Borland 4.x workarounds 
// 
#define __MINMAX_DEFINED 
#pragma option -vi- 

#include &lt;iostream.h&gt; 
#include &lt;iomanip.h&gt; 
#include &lt;fstream.h&gt; 
#include &lt;vector.h&gt; 
#include &lt;stack.h&gt; 
#include &lt;cstring.h&gt; 

// The node class is used to represent both leaf and internal nodes. leaf nodes 
// have 0s in the child pointers, and their value member corresponds to the 
// character they encode. internal nodes don't have anything meaningful in 
// their value member, but their child pointers point to other nodes. 
struct node { 
	int weight; 
	unsigned char value; 
	const node *child0; 
	const node *child1; 
// Construct a new leaf node for character c 
	node( unsigned char c = 0, int i = -1 ) { 
		value = c; 
		weight = i;
		child0 = 0; 
		child1 = 0; 
	} 
// Construct a new internal node that has children c1 and c2. 
	node( const node* c0, const node *c1 ) { 
		value = 0; 
		weight = c0-&gt;weight + c1-&gt;weight; 
		child0 = c0; 
		child1 = c1; 
	} 
// The comparison operator used to order the priority queue. 
	bool operator&lt;( const node &amp;a ) const { 
		return weight &lt; a.weight; 
	} 
	void traverse( string code = &quot;&quot;)  const; 
}; 
// The traverse member function is used to print out the code for a given node. 
// It is designed to print the entire tree if called for the root node. 
void node::traverse( string code ) const { 
	if ( child0 ) { 
		child0-&gt;traverse( code + &quot;0&quot; ); 
		child1-&gt;traverse( code + &quot;1&quot; ); 
	} else { 
		cout &lt;&lt; &quot; &quot; &lt;&lt; value &lt;&lt; &quot;     &quot;; 
		cout &lt;&lt; setw( 2 ) &lt;&lt; weight; 
		cout &lt;&lt; &quot;     &quot; &lt;&lt; code &lt;&lt; endl; 
	} 
} 
// This routine does a quick count of all the characters in the input file. 
// I skip the whitespace. 
void count_chars(char *name, int *counts ) 
{ 
	for ( int i = 0 ; i &lt; 256 ; i++ ) 
		counts[ i ] = 0;
	ifstream file( name ); 
	if ( !file ) { 
		cerr &lt;&lt; &quot;Couldn't open &quot; &lt;&lt; name &lt;&lt; endl; 
		throw &quot;abort&quot;; 
	} 
	cout &lt;&lt; &quot;Counting chars in &quot; &lt;&lt; name &lt;&lt; endl; 
	file.setf(ios::skipws ); 
	for ( ; ; ) { 
		unsigned char c; 
		file &gt;&gt; c; 
		if ( file )
			counts[ c ]++; 
		else 
			break; 
	}
} 
main( int argc, char *argv[] ) 
{ 
	int counts[ 256 ]; 
	if ( argc &gt; 1 ) 
		count_chars( argv[ 1 ], counts ); 
	else 
		count_chars( &quot;input.dat&quot;, counts ); 
	priority_queue&lt; vector&lt; node &gt;, greater&lt;node&gt; &gt; q; 
// First I push all the leaf nodes into the queue 
	for ( int i = 0 ; i &lt; 256 ; i++ ) 
		if ( counts[ i ] ) 
			q.push( node( i, counts[ i ] ) ); 
// This loop removes the two smallest nodes from the queue. It creates a new
// internal node that has those two nodes as children. The new internal node 
// is then inserted into the priority queue. When there is only one node in 
// the priority queue, the tree is complete. 
	while ( q.size() &gt; 1 ) { 
		node *child0 = new node( q.top() ); 
		q.pop(); 
		node *child1 = new node( q.top() ); 
		q.pop();
		q.push( node( child0, child1 ) ); 
	} 
// Now I dump the results 
	cout &lt;&lt; &quot;Char  Symbol   Code&quot; &lt;&lt; endl; 
	q.top().traverse(); 
	return 1; 
}
</pre> <P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
