<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>JAN96: Line-Segment Clipping Revisited</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>Line-Segment Clipping Revisited<a name="0076_0014"><a name="0076_0014"><a name="0076_0012"><a name="0076_0000"></h1><P>

<h2>Extending an old favorite to 3-D</h2><P>

<h3>Victor J. Duvanenko, W.E. Robbins, and R.S. Gyurcsik</h3><P>

<P>
<i><a name="0076_0013"><a name="0076_0000">Victor is an engineer at Truevision in
Indianapolis, IN. He can be contacted at victor@truevision.com.</i></p><hr><P>

Our previous article, &quot;Improving Line Segment Clipping&quot;
(<I>DD</I><I>J</I>, July 1990), presented improvements on the Cohen-Sutherland
(CS) line-clipping algorithm. Since then, we've made more improvements, some with
the help of algorithms such as Nicholl-Lee-Nicholl (NLN). In this article, we'll
discuss some of these improvements, extend the results to three dimensions, and
introduce the Sutherland-Hodgman clipping algorithm.<P>

The CS and NLN algorithms are based on the assumption that the database being
viewed is much larger than the window. Thus, most of the spans (which are lines
with endpoints, or line segments) will not appear in the window at all and must
be eliminated as quickly as possible. Both algorithms have been optimized to
reject spans quickly and are suboptimal for <I>trivial acceptance</I>. In the
case of trivial acceptance, a span is completely inside the clipping window,
which is assumed to be rectangular with axes-aligned (orthogonal) edges. In some
cases, you may need an algorithm optimized for trivial acceptance of spans (for
instance, if the database fits mostly inside the window).<P>

CS and NLN trivially accept the span after completing eight floating-point
comparisons for 2-D. CS trivially accepts a span after 12 floating-point
comparisons for 3-D. (The NLN algorithm doesn't yet exist for 3-D.) Both
algorithms compare the two span endpoints to each of the clipping window/volume
boundaries (2*4=8 for 2-D, 2*6=12 for 3-D).<P>

The only inputs to a span-clipping algorithm are the coordinates of the span
endpoints and the clipping window boundaries. Since orthogonal window boundaries
are assumed, the problem can be reduced to a series of independent,
one-dimensional problems. Each problem tries to resolve whether the span
endpoints are within the range defined by the window boundaries. If the endpoints
are within the window boundaries of all dimensions, then the span must be inside
the window. CS and NLN perform four comparisons per dimension for trivial
acceptance. However, the minimal number of comparisons necessary for trivial
acceptance is of interest.<P>

A more precise way to state the problem is as follows: &quot;What is the minimum
number of comparisons necessary to ascertain that X<SUB>mi</SUB><SUB>n</SUB>
&lt;/= {X<SUB>0</SUB>,X<SUB>1</SUB>} &lt;/= X<SUB>ma</SUB><SUB>x</SUB>, where
X<SUB>0</SUB> and X<SUB>1</SUB> are the span endpoints and it is known that
X<SUB>mi</SUB><SUB>n</SUB> &lt;/= X<SUB>max</SUB>?&quot;<P>

The solution is a three-comparison method based on the MIN/MAX algorithm, as
described in Baase's <I>Computer Algorithms </I>and our article, &quot;Optimal
Determination of Object Extents&quot; (<I>DDJ</I>, October 1990). The algorithm
is as follows:<P>

<ol>1.     Compare X<SUB>0</SUB> to X<SUB>1</SUB>.</ol><P>

<ol>2.     Compare the larger to X<SUB>max</SUB>.</ol><P>

<ol>3.     Compare the smaller to X<SUB>min</SUB>.</ol><P>

If the larger point is smaller than X<SUB>max </SUB>and the smaller point is
larger than X<SUB>min</SUB>, then both points are inside the range; see <a href="9601a9f1.gif">Figure 1</A>. The new algorithm compares the endpoints to
each other instead of always comparing the endpoints to the boundaries (as do the
current CS and NLN implementations). This method allows the algorithm to obtain a
greater amount of useful information. In fact, the most information is obtained
by comparing two previously untouched items (two endpoints/vertices, in this
case) to each other.<P>

An implementation of this algorithm, applied to span trivial acceptance, is shown
in <a href="9601i.htm#0076_0020">Listing One</A>. This algorithm accepts a span
only for the cases E and F in <a href="19960079.htm">Figure 2</A>. MIN/MAX was
applicable because of the orthogonal nature of the window boundaries, as the
window boundary occupied a single value (X<SUB>min</SUB> or X<SUB>max</SUB>) in
the dimension being checked. In summary, a minimum of six comparisons for 2-D and
nine comparisons for 3-D are necessary to trivially accept a span, compared with
eight comparisons performed by the CS and NLN algorithms for 2-D, and 12
comparisons by CS for 3-D. This constitutes a computational savings of 25
percent.<P>

<h3><a name="0076_0015">Minimal Trivial Rejection<a name="0076_0015"></h3><P>

Trivial rejection is a special case of a span being completely outside of the
window. The span must also be in a position such that both endpoints are located
entirely within the outside half-space of one of the clipping-window boundaries
(spans G and H, but not K in <a href="9601a9f3.gif">Figure 3</A>). The endpoints
of span G are above the top boundary, and the endpoints of span H are to the
right of the right boundary. On the other hand, span K cannot be trivially
rejected because both its endpoints are not located within the outside half-space
of any one boundary. These conditions allow the use of a single comparison to
determine the rejection of a span--and that makes the rejection trivial. The
comparison is a one-dimensional operation.<P>

NLN performs fewer floating-point comparisons than CS in all trivial-rejection
cases. For example, NLN rejects a span after as few as two floating-point
comparisons when a span is strictly to the left of the window, whereas CS
performs as many as six floating-point comparisons. Thus, it is beneficial to
determine the minimal number of comparisons necessary to reject a span.<P>

In a single dimension, two boundaries (X<SUB>min</SUB> and X<SUB>max</SUB>) are
present when clipping a span to a window, so the minimal number of comparisons
necessary to reject a span to both boundaries is sought. A more precise way to
state the problem is: &quot;What's the minimum number of comparisons necessary to
determine a True result of the logical expression
((X<SUB>0</SUB>&lt;X<SUB>min</SUB> and
X<SUB>1</SUB>&lt;X<SUB>mi</SUB><SUB>n</SUB>) or (X<SUB>0</SUB>&gt;X<SUB>max</SUB>
and X<SUB>1</SUB>&gt;X<SUB>max</SUB>)), where X<SUB>0</SUB> and X<SUB>1 </SUB>are
the span endpoints and it is known that X<SUB>mi</SUB><SUB>n</SUB> &lt;/=
X<SUB>max</SUB>?&quot;<P>

In the best case, only two comparisons are needed
(X<SUB>0</SUB>&lt;X<SUB>max</SUB> and X<SUB>1</SUB>&lt;X<SUB>max</SUB>). In the
worst case, a True result is only possible after three comparisons
(X<SUB>0</SUB>&gt;X<SUB>max</SUB> and X<SUB>1</SUB>&gt;X<SUB>max</SUB>) because
the sequential nature of program execution forces a fixed order of comparisons.
(There are several three-comparison solutions.) <P>

The trivial-rejection method used by NLN (see <a href="9601i.htm#0076_0022">Listing Two</A>) achieves the minimal number of
comparisons. However, achieving optimality in the worst case doesn't imply that a
search for a better algorithm is futile. It may be possible to reduce the number
of cases that require maximal work, thus achieving an algorithm that, on average,
performs less work. <a href="9601i.htm#0076_0024">Listing Three</A> shows a
one-dimensional decision tree used in NLN and an alternative method that performs
fewer comparisons on average.<P>

<a href="9601i.htm#0076_001c">Table 1</A> shows a detailed analysis of all
possible cases. A total of nine cases are possible, since each of the endpoints
can reside in one of the three regions shown in <a href="1996007b.htm">Figure
2</A>. Obviously, neither algorithm exceeds the minimal bound of three
comparisons.<P>

The NLN algorithm performs 2.33 comparisons on the average; the DGR algorithm
performs 2.22. Thus, a more efficient decision tree exists, which will lead to a
more efficient implementation of the NLN, and possibly of other algorithms.<P>

<h3><a name="0076_0016">Implementation Enhancements<a name="0076_0016"></h3><P>

In addition to being a well-established algorithm for clipping spans in 2-D, CS
easily extends to 3-D. We enhanced the CS implementation without disturbing its
ability to extend to 3-D. The result is an efficient 2-D and 3-D algorithm called
CS (DGR); see <a href="9601i.htm#0076_0026">Listing Four</A>. <P>
<ul>
<li>Two outcodes procedure calls are replaced by a single call to the
<I>reject_accept_outcodes </I>procedure, which implements optimal trivial
rejection. Processing the two span endpoints together allows a decision of
trivial rejection to be made sooner.</li>
<li>The slope subproducts <I>dx </I>and <I>dy </I>are computed once, since
clipping does not change the slope of a span. The number of floating-point
operations per intersection computation is reduced as redundant subtractions are
eliminated. Note that <I>dx </I>and <I>dy</I>, computed from the original
endpoints, are more accurate than those computed from clipped endpoints.</li>
<li>The While loop is removed. This unfolds the divide-and-conquer strategy, but
allows the removal of redundant computations. In CS, the While loop can go
through as many as four iterations for 2-D. Up to two initial iterations will be
used for clipping the first endpoint, and up to two of the concluding iterations
will be used for the second endpoint. In fact, a span endpoint can be clipped to,
at most, two of the four extended window boundaries.</li>
<li>Spans are clipped in each dimension--not to each boundary--by each If
statement, which reduces the number of If statements used. The computations of
the intersection with the right and the left window edge are similar. The only
difference is the window edge the span is being clipped against (<I>x_right</I>
or <I>x_lef</I><I>t</I>). Thus, these computations can be merged into a single If
statement; see <a href="9601i.htm#0076_0026">Listing Four</A>. Coupled with the
While loop removal, this implies that only four sections are needed to implement
the algorithm.</li>
<li>The While loop has been unfolded, so each endpoint must be clipped
separately, making span-endpoint swapping unnecessary.</li>
<li>The call to the outcodes procedure and acceptance/rejection testing after the
endpoint adjustment have been replaced by custom tests that accept or reject a
span as soon as possible. This reduces the number of redundant floating-point
comparisons. In all cases, the CS implementation performs more floating-point
comparisons than any other floating-point operation.</li>
</ul>
Our July 1990 article showed that clipping to a boundary moves the span endpoint
onto the boundary. Thus, the dimension to which a span endpoint has been clipped
need never be checked again, and some comparisons can be eliminated. For example,
when clipping to the top or bottom boundary, the new span endpoint must be
compared to the left and right boundaries only. This eliminates one-half of the
comparisons performed at each clipping step for 2-D, and one-third for 3-D. It
also means that the number of comparisons should diminish at each iteration. In
fact, no comparisons are needed after the second adjustment of the second
endpoint.<P>

Also, once the first endpoint has been adjusted (at most, twice) to its final
position, you know whether the span intersects the clipping window. At this
point, the span either missed the window and is trivially rejected, or the first
intersection point between the span and the window has been found. Thus, when
adjusting the second endpoint no trivial-rejection testing is necessary, since
only trivial acceptance is possible. <P>

These enhancements are fairly independent of each other, allowing for a family of
implementations varying in efficiency and complexity. For example, addition of
the optimal trivial-rejection procedure and the slope-subproduct computation to
the CS implementation results in a fairly efficient and simple implementation
that extends to 3-D.<P>

We found--but did not use because of the lack of extendibility to 3-D--one
implementation enhancement in Hill's <I>Computer Graphic</I><I>s</I>: The slope
can be computed only once. In the worst case, this improvement removes one
multiplication and one division (averaged across symmetry). However, an
additional floating-point comparison is required in every case not trivially
rejected or accepted, since a vertical span (slope is infinity) is checked and
handled as a separate case. But the IEEE P754 floating-point standard handles
infinity properly: When dividing by 0, the result is infinity; when dividing by
infinity, the result is 0. Thus, when you use a compiler or a processor that
conforms to the IEEE P754 standard, no extra comparison is needed. The method is
advantageous for all cases, since the redundant floating-point operations in
slope computations are removed. Not all computer systems conform to the IEEE P754
standard however, which may make the implementation less portable.<P>

Extending the CS (DGR) 2-D implementation to 3-D is not difficult. Parametric
equations are used, but the slope subcomponents (<I>d</I><I>x</I>,
<I>d</I><I>y</I>, and <I>dz</I>) are computed only once. If slopes were to be
precomputed, three slope computations would be necessary (<I>dy/d</I><I>x</I>,
<I>d</I><I>z</I><I>/d</I><I>x</I>, and <I>d</I><I>z</I><I>/d</I><I>y</I>). This
would require extra division-by-0 checks in a non-IEEE-compliant environment and
an extra division for single-endpoint adjustment (as only two slopes are
necessary for the intersection computation).<P>

Finally, NLN and CS (DGR) rely on the top window boundary being above the bottom
boundary and the left boundary being to the left of the right boundary.
Otherwise, results produced by various algorithms will differ. Infractions of
this rule can be easily detected when the clipping-window dimensions are changed.
All rendering operations can then be disabled whenever the clipping-window
dimensions are &quot;unreasonable.&quot; However, differences in the outputs of
span-clipping algorithms warrant cautious use. <P>

<h3><a name="0076_0017">Sutherland-Hodgman Algorithm <a name="0076_0017"></h3><P>

Sutherland and Hodgman (SH) suggest the application of their polygon-clipping
algorithm to span clipping. SH separates the process of clipping to a window into
disjoint processes of clipping to each boundary. This approach resembles a
pipeline: Each boundary is a stage in the pipeline and can be applied to
graphics-system architectures such as the Geometry Engine and the Pixel Machine.
<a href="9601i.htm#0076_0028">Listing Five</A> shows one possible 2-D
implementation of SH, SH (DGR). This implementation gains efficiency by clipping
to both X boundaries, X<SUB>min</SUB> and X<SUB>max</SUB>, in one stage of the
pipeline. This suggests a shorter pipeline, with each stage treating a dimension
instead of a single boundary. Other possible implementations and the 3-D
algorithm are available electronically; see &quot;Availability,&quot; page 3.<P>

SH (DGR) works on a simple principle. If both endpoints of a span are in the
&quot;outside&quot; half-space of a window boundary, the span is rejected. If one
endpoint is in the &quot;outside&quot; half-space while the other endpoint is in
the &quot;inside&quot; half-space, the &quot;outside&quot; portion of the span is
clipped away. If both endpoints are in the &quot;inside&quot; half-space, nothing
needs to be done. Thus, the algorithm always removes the invisible portion of a
span. SH (DGR) is compact and conceptually simple. It provides symmetry (or
reentrancy), extends easily to 3-D, performs few comparisons (8 for 2-D, 12 for
3-D), and has inherent parallelism.<P>

Integer comparison can be eliminated from SH (DGR) by placing <I>clip_D
</I>inline. You can unfold the algorithm completely so that the slope
computations from the x-dimension clipping can be utilized during the y-dimension
clipping. Finally, SH (DGR) can be extended to convex clipping windows, just like
the SH polygon algorithm.<P>

The SH (DGR) method has two inefficiencies, however. First, it performs redundant
slope computations. Second, the trivial rejection of spans is nonoptimal. In
fact, only the first call to <I>clip_D </I>(the first dimension) is optimal.<P>

<h3><a name="0076_0018">Comparison of Algorithms<a name="0076_0018"></h3><P>

Nicholl, Lee, and Nicholl have developed metrics and techniques for direct
comparison of clipping algorithms, which we further refined. Grouping cases in a
reasonable manner simplifies presentation of algorithm analysis. For example, <a href="9601a9f4.gif">Figure 4</A> shows the results of all cases when the first
span endpoint (P0) is inside the clipping window. The second span endpoint can be
inside the window, in any of the four corner regions or in any of the four edge
regions. The algorithm-analysis data can be reduced by averaging the four corner
cases. Thus, the data is averaged over symmetry. We used the technique to
automate the generation of all possible cases. Operation counters were added to
all algorithms to obtain a precise count of all considered operations.<P>

We compared CS, Liang-Barsky (LB), NLN, CS (DGR), and the fully expanded version
of the SH (DGR) algorithms for various cases in 2-D. The conclusions in <a href="9601i.htm#0076_001d">Table 2</A> apply to a general scalar, computational
model. Each entry in <a href="9601i.htm#0076_001d">Table 2</A> indicates the
comparison between the algorithm that labels the row and the one that labels the
column, where &lt; means &quot;performs less work than.&quot; For instance, the
third row of <a href="9601i.htm#0076_001d">Table 2</A> states that, in all
cases, NLN performs less work than CS and LB and less than or equal to the amount
of work done by CS (DGR); furthermore, comparison to SH (DGR) is machine
dependent, and thus inconclusive. <P>

We also compared CS, LB, CS (DGR), and SH (DGR) for various cases in 3-D. (NLN is
not yet available in 3-D.) Four types of regions are created by the
parallel-piped boundaries in 3-D space: one inside region, six face regions,
twelve edge regions, and eight corner regions. The conclusions are presented in
<a href="9601i.htm#0076_001e">Table 3</A>. <P>

<h3><a name="0076_0019">Conclusions<a name="0076_0019"></h3><P>

The fact that SH (DGR) performs the fewest number of comparisons may be important
for general architectures that can chain an addition and a multiplication (some
present DSPs and floating-point units), since comparisons become the bottleneck
operation. <P>

CS was designed for a hardware implementation and contains much parallelism.
Sproull and Sutherland describe CS in terms of a hardware implementation, with
all window-boundary comparison performed in parallel. Serial implementations,
such as CS, CS (DGR), and NLN, suffer from a fixed, sequential comparison order
that may not be most efficient for all spans.<P>

<h3><a name="0076_001a">Acknowledgments<a name="0076_001a"></h3><P>

Thanks to Dr. John F. Hughes for providing many useful suggestions on every
aspect of the first draft of our paper, &quot;Simple and Efficient 2-D and 3-D
Span Clipping Algorithms,&quot; published in <I>Computers and Graphics
</I>(January 1993).<P>

<h3><a name="0076_001b">References<a name="0076_001b"></h3><P>

Baase, S. <I>Computer Algorithms. </I>Reading, MA: Addison-Wesley, 1988. <P>

Duvanenko, V.J. &quot;Simple and Efficient 2-D and 3-D Span Clipping
Algorithms.&quot; MS Thesis, North Carolina State University, December 1990.<P>

Hill, F.S., Jr. <I>Computer Graphics. </I>Houston, TX: Macmillan Publishing,
1990.<P>

Nicholl, T.M., D.T. Lee, and R.A. Nicholl. &quot;Efficient New Algorithm for 2-D
Line Clipping: Its Development and Analysis.&quot; <I>Computer Graphics </I>(ACM
SIGGRAPH) (July 1987).<P>

Rankin, J.R. <I>Computer Graphics Software Construction. </I>Englewood Cliffs,
NJ: Prentice Hall, 1989.<P>

Sproull, R.F., and I.E. Sutherland. &quot;A Clipping Divider.&quot; Fall Joint
Computer Conference, 1968.<P>

Sutherland, I.E., and G.W. Hodgman. &quot;Reentrant Polygon Clipping.&quot;
<I>Communications of the ACM </I>(January 1974).<P>

<h4><B><a href="9601a9f1.gif">Figure 1</A>: </B>One-dimensional
trivial-acceptance flow.</h4><P>

<h4><B><a href="1996007e.htm">Figure 2</A>: </B>All trivial-acceptance/rejection
cases.</h4><P>

<h4><B><a href="1996007f.htm">Figure 3</A>: </B>G and H can be trivially
rejected; K cannot.</h4><P>

<h4><B><a href="19960080.htm">Figure 4</A>: </B>Analysis of the algorithms when
<I>PO</I><I> </I>is in the clipping window.</h4><P>

<h4><a name="0076_001c"><B>Table 1:</B> Detailed analysis for all possible
trivial-acceptance/rejection cases.<a name="0076_001c"></h4><P>

<pre>
X0   X1   Comparisons   Comparisons 
             (NLN)         (DGR)

A    A         2             2
A    E         2             2
A    C         2             2
E    A         2             2
E    E         2             2
E    C         2             3
C    A         3             2
C    E         3             2
C    C         3             3

</pre>

<h4><a name="0076_001d"><B>Table 2: Comparison of 2-D algorithms:</B> MD, machine dependent (and thus inconclusive); a, in most cases; b, lost only in trivial rejection cases; c, in all but two cases; d, equal to, in trivial-rejection cases; e, if (subtraction--addition)&lt;(division--multiplication).<a name="0076_001d"></h4><P>

<pre>
            CS (NS)    LB         NLN        CS (DGR)   SH (DGR)
   
CS (NS)     --         MD         &gt;<SUP>e</SUP>         &gt;          &gt;<SUP>a</SUP>
LB          MD         --         &gt;          &gt;<SUP>c</SUP>         &gt;
NLN         &lt;<SUP>e</SUP>         &lt;          --         <img src="lteq12.gif" alt="&lt;="><SUP>d</SUP>         MD
CS (DGR)    &lt;          &lt;<SUP>c</SUP>         <img src="lteq12.gif" alt="&lt;="><SUP>d</SUP>         --         &gt;<SUP>a</SUP>
SH (DGR)    &lt;<SUP>a</SUP>         &lt;          MD         &lt;<SUP>a,b</SUP>       --

</pre>

<h4><a name="0076_001e"><B>Table 3: Comparison of 3-D algorithms:</B> MD, machine dependent (and thus inconclusive); a, in most cases; b, in most cases if floating-point comparison is faster than division.<a name="0076_001e"></h4><P>

<pre>
            CS (NS)    LB         CS (DGR)   SH (DGR)
 
CS (NS)     --         MD         &gt;          MD
LB          MD         --         &gt;b         &gt;a
CS (DGR)    &lt;          &lt;<SUP>b</SUP>         --         MD
SH (DGR)    MD         &lt;<SUP>a</SUP>         MD         --

</pre>

<P>

<h4><a name="0076_001f"><a name="0076_0020">Listing One<a name="0076_0020"></h4><pre>
/* Optimal 3-D trivial accept procedures.  Return as soon as
   trivial acceptance fails. All dimensions must accept for the procedure
   to accept.  Acceptance is border inclusive. */
#define ACCEPT  1
#define BOOLEAN int
#define ACCEPT_TEST( p1, p2, min, max )        \
    if ( p1 &lt; p2 ) {                           \
        if ( p1 &lt; min )   return( !ACCEPT );   \
        if ( p2 &gt; max )   return( !ACCEPT );   \
    } else {                                   \
        if ( p2 &lt; min )   return( !ACCEPT );   \
        if ( p1 &gt; max )   return( !ACCEPT );   \
    }
extern double x_min, x_max, y_min, y_max, z_min, z_max;
BOOLEAN optimal_triv_acc_3D( x1, y1, z1, x2, y2, z2 )
double x1, y1, z1, x2, y2, z2;
{
    ACCEPT_TEST( x1, x2, x_min, x_max)
    ACCEPT_TEST( y1, y2, y_min, y_max)
    ACCEPT_TEST( z1, z2, z_min, z_max)
    return( ACCEPT );
}
</pre>
<h4><a name="0076_0021"><a name="0076_0022">Listing Two<a name="0076_0022"></h4><pre>
/* Nicholl-Lee-Nicholl trivial rejection (optimal). */
#define REJECT   1
#define BOOLEAN  int
#define REJECT_TEST( p0, p1, min, max )     \
    if ( p0 &lt; min ) {                       \
        if ( p1 &lt; min )   return( REJECT ); \
    } else if ( p0 &gt; max )                  \
        if ( p1 &gt; max )   return( REJECT );
extern double x_min, x_max, y_min, y_max, z_min, z_max;
BOOLEAN NLN_trivial_reject_3D( x0, y0, z0, x1, y1, z1 )
double x0, y0, z0, x1, y1, z1;
{
    REJECT_TEST( x0, x1, x_min, x_max )
    REJECT_TEST( y0, y1, y_min, y_max )
    REJECT_TEST( z0, z1, z_min, z_max )
    return( !REJECT );                           /* couldn't reject */
}
</pre>
<h4><a name="0076_0023"><a name="0076_0024">Listing Three<a name="0076_0024"></h4><pre>
/* NLN 1-D trivial rejection (worst case optimal). */
    if ( x0 &lt; x_a ) {
        if ( x1 &lt; x_a )   return( REJECT );
    } else if ( x0 &gt; x_b )
        if ( x1 &gt; x_b )   return( REJECT );
/* DGR 1-D trivial rejection (worst case optimal, better on average). */
    if ( x0 &lt; x_a ) {
        if ( x1 &lt; x_a )   return( REJECT );
    } else if ( x1 &gt; x_b )
        if ( x0 &gt; x_b )   return( REJECT );
</pre>
<h4><a name="0076_0025"><a name="0076_0026">Listing Four<a name="0076_0026"></h4><pre>
/* 2D CS (DGR) implementation - achieves optimal trivial rejection. */
#define ACCEPT     1
#define REJECT     0
/* Clipping volume boundaries - accessable to all routines */
extern double  x_right, x_left, y_bottom, y_top, z_front, z_back;
/* Reject lines as quickly as possible and set 'outcodes'. */
static reject_accept_outcodes( x0, y0, outcode0, x1, y1, outcode1 )
double  x0, y0;  int  *outcode0;
double  x1, y1;  int  *outcode1;
{
    if ( x0 &lt; x_left ) {
       if ( x1 &lt; x_left )   return( REJECT );
       else   *outcode0 = 1;
    }
    else if ( x0 &gt; x_right ) {
       if ( x1 &gt; x_right )   return( REJECT );
       else   *outcode0 = 2;
    }
    else  *outcode0 = 0;
    if ( y0 &lt; y_bottom ) {
       if ( y1 &lt; y_bottom )   return( REJECT );
       else if ( y1 &gt; y_top )   *outcode1 = 8;
            else  *outcode1 = 0;
       *outcode0 |= 4;
    }
    else if ( y0 &gt; y_top ) {
       if ( y1 &gt; y_top )   return( REJECT );
       else if ( y1 &lt; y_bottom )   *outcode1 = 4;
            else  *outcode1 = 0;
       *outcode0 |= 8;
    }
    else {
       if ( y1 &lt; y_bottom )   *outcode1 = 4;
       else if ( y1 &gt; y_top )   *outcode1 = 8;
            else  *outcode1 = 0;
    }
    if ( x1 &lt; x_left )   *outcode1 |= 1;
    else if ( x1 &gt; x_right )   *outcode1 |= 2;
    return( !REJECT );
}
/* Body of the CS (DGR) 2D line clipping algorithm implementation. */
clip_2d_dgr( x0, y0, x1, y1 )
double  *x0, *y0;       /* first  end point */
double  *x1, *y1;       /* second end point */
{
    unsigned  outcode0, outcode1;
    double   dx, dy,         /* change in x and change in y   */
             edge;           /* clipping edge                 */
    if ( reject_accept_outcodes(*x0,*y0,&amp;outcode0,*x1,*y1,&amp;outcode1) == REJECT)
        return( REJECT );
    if ( ! ( outcode0 | outcode1 ))    /* trivial accept */
        return( ACCEPT );
    dx = *x1 - *x0;    /* Calculate the slope subproducts only once. */
    dy = *y1 - *y0;
    if ( outcode0 &amp; 3 ) {          /* divide line at right or left of window */
        if ( outcode0 &amp; 1 )   edge = x_left;
        else                  edge = x_right;
        *y0 += dy * ( edge  - *x0 ) / dx;
        *x0  = edge;
        if ( *y0 &lt; y_bottom )
           if ( outcode1 &amp; 4 )   return( REJECT );
           else  outcode0 = 4;
        else if ( *y0 &gt; y_top )
           if ( outcode1 &amp; 8 )   return( REJECT );
           else  outcode0 = 8;
        else if ( ! outcode1 )   return( ACCEPT );
           else outcode0 = 0;
    }
    if ( outcode0 &amp; 12 ) {         /* divide line at top or bottom of window */
        if ( outcode0 &amp; 4 )   edge = y_bottom;
        else                  edge = y_top;
        *x0 += dx * ( edge - *y0 ) / dy;
        *y0  = edge;
        if (( *x0 &lt; x_left ) || ( *x0 &gt; x_right ))   return( REJECT );
        if ( ! outcode1 )   return( ACCEPT );
    }
    /* Clip P1 end.  P0 is inside the window.  It's only possible to accept. */
    if ( outcode1 &amp; 3 ) {          /* divide line at right or left of window */
        if ( outcode1 &amp; 1 )   edge = x_left;
        else                  edge = x_right;
        *y1 += dy * ( edge  - *x1 ) / dx;
        *x1  = edge;
        if      ( *y1 &lt; y_bottom )   outcode1 = 4;
        else if ( *y1 &gt; y_top    )   outcode1 = 8;
        else  return( ACCEPT );        /* (outcode0 | outcode1) == 0 */
    }
    if ( outcode1 &amp; 12 ) {         /* divide line at top or bottom of window */
        if ( outcode1 &amp; 4 )   edge = y_bottom;
        else                  edge = y_top;
        *x1 += dx * ( edge - *y1 ) / dy;
        *y1  = edge;
        return( ACCEPT );
    }
}
</pre>
<h4><a name="0076_0027"><a name="0076_0028">Listing Five<a name="0076_0028"></h4><pre>
/* SH (DGR) 2D algorithm. */
#define ACCEPT        1
#define REJECT        0
/* Clipping rectangle boundaries - accessable to all routines */
extern double  y_bottom, y_top, x_right, x_left;
/* Clip X or Y dimension. */
static clip_D( x0, y0, x1, y1, min_boundary, max_boundary )
double  *x0, *y0, *x1, *y1, min_boundary, max_boundary;
{
   double m;
   if ( *x0 &lt; min_boundary )  {       /* divide line at the min_boundary */
      if ( *x1 &lt; min_boundary )   return( REJECT );
        m  = ( *y1 - *y0 ) / ( *x1 - *x0 );         /* x1 &gt;= min_boundary */
      *y0 += m * ( min_boundary  - *x0 );
      *x0  = min_boundary;
      if ( *x1 &gt; max_boundary ) {
         *y1 += m * ( max_boundary - *x1 );
         *x1  = max_boundary;
      }
   }
   else if ( *x0 &gt; max_boundary )  {  /* divide line at the max_boundary */
      if ( *x1 &gt; max_boundary )   return( REJECT );
        m  = ( *y1 - *y0 ) / ( *x1 - *x0 );         /* x1 &lt;= max_boundary */
      *y0 += m * ( max_boundary  - *x0 );
      *x0  = max_boundary;
      if ( *x1 &lt; min_boundary ) {
         *y1 += m * ( min_boundary - *x1 );
         *x1  = min_boundary;
      }
   }
   else {          /* x0 is inside the window */
      if ( *x1 &gt; max_boundary ) {
         *y1 += ( *y1 - *y0 ) / ( *x1 - *x0 ) * ( max_boundary - *x1 );
         *x1  = max_boundary;
      }
      else if ( *x1 &lt; min_boundary ) {
         *y1 += ( *y1 - *y0 ) / ( *x1 - *x0 ) * ( min_boundary - *x1 );
         *x1  = min_boundary;
      }
   }
   return( ACCEPT );
}
/* The body of the SH (DGR) algorithm. */
clip_2d_sh_dgr( x0, y0, x1, y1 )
double  *x0, *y0, *x1, *y1;
{
   if ( clip_D( x0, y0, x1, y1, x_left, x_right ) == REJECT)   return( REJECT);
   if ( clip_D( y0, x0, y1, x1, y_bottom, y_top ) == REJECT)   return( REJECT);
   return( ACCEPT );
}
DDJ
</pre>
<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
