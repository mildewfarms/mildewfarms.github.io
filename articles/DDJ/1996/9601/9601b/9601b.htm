<HTML> <HEAD> <!-- This document was built using HyperWriter Professional byNTERGAID Inc. --> <TITLE>JAN96: Dynamic Markov Compression</TITLE></HEAD> <body bgcolor="FFFFFF">
<META NAME="year" CONTENT="1996">
<h1>Dynamic Markov Compression<a name="002d_0006"><a name="002d_0006"><a name="002d_0004"><a name="002d_0000"></h1><P>
 <h2>Better compression for large
binary files </h2><P>
 <h3>Tong Lai Yu</h3><P>
 <P>
<i><a name="002d_0005"><a name="002d_0000">Tong Lai Yu is an associate professor of computer science at the
California State University, San Bernadino. He can be contacted at
tongyu@csci.csusb.edu.</i></p><hr><P>
 Compression packages such as PKZIP,
Stacker, and DoubleSpace are all based on variations of the so-called
&quot;LZ77'' algorithm, a dictionary-lookup technique invented by Abraham Lempel
and Jacob Ziv in the late 1970s. The LZ77 algorithm requires a relatively small
amount of memory and performs very well in both speed and compression ratios for
small and large files.<P>
 In this article, I'll present a statistical technique
called &quot;Dynamic Markov Compression&quot; (DMC) that uses a very different
approach. DMC was first introduced by Gordon Cormack and Nigel Horospool in the
late 1980s. Its overall performance is not as good as that of PKZIP or other
similar archiving packages. However, DMC  yields a better compression ratio when
applied to large binary files such as speech and image files. Since it handles
one bit at a time, DMC might also be appropriate for fax machines that compress
black-and-white images. <P>
 Implementing DMC is straightforward, requiring no
special data structures. In fact, its implementation is simpler than any other
compression scheme with a comparable compression ratio. Here, I'll concentrate on
DMC's working principles, rather than its performance. <P>
 <h3><a name="002d_0007">Dynamic Markov Modeling<a name="002d_0007"></h3><P>
 Like other
statistical techniques, DMC consists of two parts--modeling and coding. The
model, which is created from the data to be compressed, feeds information to the
coder, which codes the data. An unusual feature of DMC is that it employs
arithmetic coding to encode only two symbols, namely 0 and 1. (For more
information, see &quot;Arithmetic Coding and Statistical Modeling,&quot; by Mark
R. Nelson, <I>DDJ</I>, February 1991.) <P>
 The model consists of a finite number
of states. Each state gives you information about the probability of finding a 0
or a 1 at that state. The probabilities of 0 and 1 at the current state are used
to encode the current incoming bit. <P>
 The central scheme of DMC is its cloning
mechanism. <a href="9601a2f1.gif">Figure 1</A> (a) shows a portion of a simple,
finite-state model. Through the cloning mechanism, this evolves into the more
complex model in <a href="19960030.htm">Figure 1</A> (b). If, in <a href="19960031.htm">Figure 1</A> (a), the instance at state A receives symbol
<I>x</I> (which is either 0 or 1), the instance will transit to state D. There
can be many other transitions into state D at different times. If state D has
been visited often and the transition of A<img src="arrow12.gif" alt="->">D upon receiving <I>x</I> is
frequent, you clone state D to form an additional state D'. In <a href="19960032.htm">Figure 1</A> (b), upon receiving <I>x</I>, the instance at
state A will transit to state D' instead of D. The output transition counts from
the old state D are divided between D' and D; you assume that the total number of
transitions into a state is equal to the total number of transitions out of a
state. <P>
 Two threshold parameters, <I>min_cnt1</I> and <I>min_cnt2</I>, are
used to determine when a state should be cloned--a state D is cloned if it
satisfies the following conditions:<P>
<ul>
<li>The number of counts of a specific
transition into D is larger than <I>min_cnt1</I>. </li> <li>The number of counts
at D not arising from the specific transition is larger than
<I>min_cnt2</I>.</li>
</ul>
You should start cloning as early as possible. In the
implementation presented here, I set <I>min_cnt1</I> and <I>min_cnt2</I> to two.
You could start the model with <I>min_cnt1</I> and <I>min_cnt2</I> values equal
to one and increase their values slowly, as cloning adds states to the model.
When the number of states reaches a certain maximum value, you discard all the
states and start the model all over again. Again, you could save some final
states in a buffer and start a model based on those states.<P>
 <h3><a name="002d_0008">The Code<a name="002d_0008"></h3><P>
 <a href="9601b.htm#002d_000a">Listing One</A> includes the <I>main</I> function and
housekeeping (parsing files, computing compression ratios, and the like). <a href="#002d_000b">Listing Two</A> is a basic implementation of DMC. (The complete
source code and executables are available electronically; see
&quot;Availability,&quot; page 3.) I've compiled the program with both Turbo C
and Watcom C. <P>
 To save time in file I/O processing, I define the macros
<I>input_bit()</I> and <I>output_bit()</I> instead of using function calls to
handle file input and output; the macros are in <a href="9601b.htm#002d_000e">Listing Three</A>. The function <I>compress()</I>
calls other functions to compress an input file. Because I'm dealing with only
two symbols (0 and 1), I don't want to add an extra END_OF_STREAM symbol to
signify the end of the encoding stream. To help the decoder recognize the end of
the original message, <I>compress()</I> first calls <I>put_file_length()</I> to
save the original file size. It then calls <I>initialize_model()</I> to start DMC
with a simple model. The function <I>initialize_encoder()</I> is used to
initialize the arithmetic coder with certain initial values. The next step is to
call <I>encode()</I> to compress the input file and output the encoded stream to
an output file. With probabilities of finding 0 and 1 generated by the model,
<I>encode()</I> uses a standard arithmetic-encoding technique to encode the
current bit read from the input file; when the most significant bits (MSBs) of
variables <I>low</I> and <I>high</I> match, they are pushed out and saved. To
avoid underflow, you must throw away the second MSBs if their values differ and
the MSBs of <I>low</I> and <I>high</I> do not match; the model must be updated
(by function <I>update_count()</I>) before or after each bit is encoded. When
encoding is done, the remaining bits in the arithmetic encoder are pushed out and
saved by <I>flush_encoder()</I>. An extra 16 0 bits are then saved in the output
file, so that during the expansion phase, you won't run into the EOF mark before
decoding has finished.<P>
 The function <I>uncompress()</I> calls other functions
to decode a compressed file. It first calls <I>get_file_length()</I> to obtain
the original size of the file before compression. It then calls
<I>initialize_model()</I> to start a simple compression model. As before, the
arithmetic encoder has to be initialized by the function
<I>initialize_decoder()</I>. Decoding is done primarily by the function
<I>decode()</I> in a manner similar to that of <I>encode()</I>. The same model is
reconstructed while bits are decoded. Again, the standard arithmetic technique
uses probabilities from the bit stream generated from the model.<P>
 <h4><B><a href="19960033.htm">Figure 1</A>: </B>The DMC cloning mechanism. (a) The simple
model; (b) the complex model.</h4><P>
 <P>
 <h4><a name="002d_0009"><a name="002d_000a">Listing One<a name="002d_000a"></h4><pre> 
/*****  main.c  :
housekeeping for dmc.c ******/ 
void usage_exit( char *argv ) { 
	char *filename, *extension; 
	filename = strrchr( argv, '\\' );   /* find '\' */ 
	if ( filename == NULL ) 
		filename = strrchr( argv, '/' ); 
	if ( filename == NULL ) 
		filename = strrchr( argv, ':' ); 
	if ( filename != NULL ) 
		filename++;                        /* strip off the path */ 
	else 
		filename = argv; 
	extension= strrchr( filename, '.'); 
	if ( extension!= NULL ) 
		*extension= '\0'; 
	printf( &quot;\nUsage:  %s [-c/e] in-file out-file \n&quot;, filename ); 
	printf(&quot;\n%s is for compression ! &quot;, filename ); 
	printf(&quot;\n%s&quot;, info ); 
	printf(&quot;\nThe switches -c means compress \( default \),&quot;); 
	printf(&quot;\n             -e means expand,&quot;); 
	exit( 0 ); 
}   /* usage_exit() */ 
#ifndef SEEK_END 
#define SEEK_END 2 
#endif 

long file_size( char *name ) 
{ 
	long eof_fp; 
	FILE *file; 
	file = fopen( name, &quot;r&quot; ); 
	if ( file == NULL ) 
		return( 0L ); 
	fseek( file, 0L, SEEK_END );    /* points to END OF FILE */ 
	eof_fp = ftell( file );         /* get current file pointer */ 
	fclose( file ); 
	return( eof_fp ); }   /* file_size() */

/* This routine prints out the compression ratios after the input 
 * and output files have been closed. */ 
void print_ratios( char *input, char *output ) 
{ 
	long input_size; 
	long output_size; 
	float ratio; 
	
	input_size = file_size( input ); 
	if ( input_size == 0 ) 
		input_size = 1; 
	output_size = file_size( output ); 
	ratio = ( float ) output_size * 100 / input_size; 
	if ( output_size == 0 ) 
		output_size = 1;
	printf( &quot;\nCompressed Size in bytes : %12ld&quot;, output_size ); 
	printf( &quot;\nOriginal   Size in bytes : %12ld&quot;, input_size ); 
	printf( &quot;\nCompression ratio        : %12.1f%%\n&quot;, ratio ); 
} 
main( int argc, char *argv[] ) 
{ 
	char    *p[10], c; 
	if ( argc &lt; 3 ) 
		usage_exit( argv[ 0 ] );
	argv++; 
	c = *(argv[0]+1); 
	if ( *argv[0] != '-' ){ 
		compress( argv ); 
		print_ratios ( *argv, *(argv+1) ); 
	} else { 
		if ( argc &lt; 4 ) 
			usage_exit( argv[0] ); 
		++argv;
		if ( c == 'c' || c == 'C' ){ 
			compress( argv  ); 
			print_ratios ( *argv, *(argv+1) ); 
		} else if ( c == 'e' || c == 'E' ){ 
			uncompress( argv ); 
			print_ratios ( *(argv+1), *argv ); 
		} else 
			usage_exit( argv[0] ); 
	}   /* else */ 
}   /* main */
</pre> 
<h4><a name="002d_000b"><a name="002d_000c">Listing Two<a name="002d_000c"></h4><pre> 
/* dmc.c -- uses dynamic markov model to compress data. The program has been 
 * compiled using Turbo C or Watcom C. If you use Turbo C, choose huge model. 
 * This program is for demonstration use. Compression improvement can be 
 * obtained by adjusting min_cnt1, min_cnt2 and the way of reconstructing model 
 * when memory is full. 
 *  Usage --  to compress :   dmc input_file    output_file 
 *            to expand   :   dmc -e input_file output_file 
 */ 

#include    &lt;stdio.h&gt; 
#ifdef      __TURBOC______LINEEND____
#include    &lt;alloc.h&gt; 
#else 
#include    &lt;malloc.h&gt; 
#endif 
#include    &lt;string.h&gt; 
#include    &lt;io.h&gt; 
#include    &quot;iodmc.fun&quot;        /* io functions */ 

/*  because we only have two symbols, we do not need higher precision */ 
#define     NBITS   15          /* # of bits used in high, low */
#define     MSBIT   0x4000      /* most significant bit */ 
#define     MSMASK  0x7FFF      /* consider 15 bits */ 
#define     MASK2   0x1FFF      /* for underflow use */ 

char        *info = &quot;Dynamic Markov Compression ( DMC ) &quot;; 
ui          code,  low,  high, mp; 
int         underflow_bits; 
int         times = 1; 
ul          switch_delta = 5000; 
ul          *switch_state; 
ul          switch_len; 

void    put_file_length( long l, FILE *output ) 
{ 
	char    *pc=(char*) &amp;l, i; 
	printf(&quot; l = %ld &quot;, l ); 
	for ( i = 0; i &lt; sizeof( long ); ++i ) 
		putc( *pc++, output ); 
} 
long    get_file_length( FILE   *input ) 
{
	long    l; 
	char    *pc = (char *) &amp;l, i; 
	for ( i = 0; i &lt; sizeof( long ); ++i ) 
	*pc++ = getc( input ); 
	return( l ); 
} 
void 	initialize_encoder() 
{ 
	low = 0;
	high = MSMASK; 
	underflow_bits = 0; 
} 
void initialize_decoder( FILE *input ) 
{ 
	int i, bit; 
	code = 0; 
	for ( i = 0 ; i &lt; NBITS; i++ ) { 
		code &lt;&lt;= 1;
		input_bit( input, bit ); 
		code += bit; 
	} 
	low = 0; 
	high = MSMASK; 
} 
/* 	next_state[d][s]  = state reached from s after transition d 
	trans_cnt[d][s]   = number of observations of input d when in state s 
	state             = number of current state 
	min_cnt1          = minimum # of transitions from the current state 
						to state s before s is eligible for cloning 
	min_cnt2          = minimum # of visits to a state s from all predecessors 
						of S other than the current state before S is eligible 
						for cloning. A simple choice for min_cnt1 and min_cnt2
						values is to set them to 2, 2. 
*/ 
/* int and unsigned int are 32 bits  for WATCOM C */ 
#ifdef   __TURBOC______LINEEND____ 
#define maxstates    32760          /* TURBO C can access low DOS mem only*/ 
#else 
#define maxstates    500000l        /* for WATCOM C */ 
#endif 
ui *next_state[2], *trans_cnt[2]; 
ui state, last_state;
ui nbits, total_states; 
int   min_cnt1 = 2, min_cnt2 = 2;/* for comparison, thus make it signed*/ 

/* initialize the model */ 
initialize_model() 
{ 
	int i, j, k, m, n; 
	static initialized = 0; 
	
	min_cnt1 = min_cnt2 = 2; 
	if ( !initialized ) {
		next_state[0] = (ui *) malloc( maxstates*sizeof( ui ) ); 
		check_mem_error( next_state[0] ); 
		next_state[1] = (ui *) malloc( maxstates*sizeof( ui ) );
		check_mem_error( next_state[1] ); 
		trans_cnt[0] = (ui *) malloc( maxstates*sizeof( ui ) ); 
		check_mem_error( trans_cnt[0] ); 
		trans_cnt[1] = (ui *) malloc( maxstates*sizeof( ui ) ); 
		check_mem_error( trans_cnt[1] ); 
		initialized = 1; 
	} else { 
		for ( i = 0; i &lt; maxstates; ++i ) 
			trans_cnt[0][i] = trans_cnt[1][i] = 0; 
	} 
	n = 8; 
	printf(&quot; initialize_model %d times &quot;, times++);
 	m = 1; 
 	for ( i = 0; i &lt; n; ++i ) 
 		m = 2 * m; 
	for ( i = 0; i &lt; n; ++i ) 
		for ( j = 0; j &lt; m; ++j ) { 
			state = i + n * j; k = ( i + 1 ) % n; 
			next_state[0][state] = k + (( 2*j ) % m ) * n; 
			next_state[1][state] = k + ((2*j+1) % m ) * n;
			trans_cnt[0][state] = 1;   /* force this to 1 to avoid overflow*/
			trans_cnt[1][state] = 1; 
		}
	 last_state = n * m - 1; 
} 
update_count( int   x ) 
/* x is current bit */ 
{ 
	int b; 
	unsigned int nxt, nxt_cnt, new; 
	if ( trans_cnt[x][state] &gt; 0xfff1 ){ 
		trans_cnt[0][state] /= 2;        /* rescale counts to avoid overflow*/ 
		trans_cnt[1][state] /= 2; 
	} 
	++trans_cnt[x][state]; 
	nxt = next_state[x][state];       /* next state */ 
					/* total transitions out of &quot;nxt&quot; on receiving 0, or 1 */ 
	nxt_cnt = trans_cnt[0][nxt] + trans_cnt[1][nxt]; 
	if ( (trans_cnt[x][state] &gt; min_cnt1) &amp;&amp;
	 ((int)(nxt_cnt - trans_cnt[x][state])&gt;min_cnt2) ){ 
	 	++last_state; new = last_state;       /* obtain a new state # */ 
	 	next_state[x][state] = new;
	 	for ( b = 0; b &lt;= 1; ++b ){ 
	 		next_state[b][new] = next_state[b][nxt]; 
	 		trans_cnt[b][new] = (ui) ( (ul) trans_cnt[b][nxt] * 
	 									trans_cnt[x][state] / nxt_cnt );
			trans_cnt[b][nxt] = trans_cnt[b][nxt] - trans_cnt[b][new]; 
		} 
		nxt = new; 
	} 
	state = nxt; 
} 
void    flush_encoder( FILE *output ) 
{ 
	int b, i; 
	output_bit( output, low &amp; ( MSBIT &gt;&gt; 1 ) ); 
	underflow_bits++; 
	b = (~low &amp; ( MSBIT &gt;&gt;1 ) ) ? 1 : 0; 
	while ( underflow_bits-- &gt; 0 ) 
		output_bit( output, b ); 
	b = 0;
	for ( i = 0; i &lt; 16; ++i ) 
		output_bit( output, b ); 
} 
ui  get_mp () 
/*  get mid point of high-low interval */ 
{ 
	ui  p0, p1, mp; 
	ul ps, range; 
	
	p0 = trans_cnt[0][state] + 1; 
	p1 = trans_cnt[1][state] + 1; 
	ps = p0 + p1; 
	ps = ( ul )p0 + ( ul ) p1;          /* ps is unsigned long */ 
	
	range = ( ul )( high - low ) + 1; 
	mp = low + (ui)  (( range * p0 ) / ps ); 
	if ( mp &gt;= high ) mp = high - 1;        /* take care of roundoff error*/ 
	return( mp ); 
} 
void   shift_out_encoded_bits( FILE *output )
{ 
	int b; 
	for ( ; ; ) { 
	/* Shift out matched MSBs. */ 
	if ( ( low &amp; MSBIT ) == ( high &amp; MSBIT ) ) { 
		b = ( high &amp; MSBIT ) ? 1 : 0; 
		output_bit(output, b);      /* output one bit */ 
		b = b ? 0 : 1; 
		while ( underflow_bits &gt; 0 ){ 
			output_bit( output, b ); 
			underflow_bits--;
		} 
	}   /* if */ 
	/* If uderflow is threatening, throw away 2nd MSBs */ 
	else if ((low &amp; ( MSBIT &gt;&gt; 1)) &amp;&amp; !( high &amp; (MSBIT &gt;&gt; 1) )) {
		underflow_bits += 1; 
		low = low &amp;  
		MASK2; high = high | (MSBIT&gt;&gt;1); 
	} else 
		break; 
	low = ( low &lt;&lt; 1) &amp; MSMASK;         /* shift in 0s */ 
		high = ( high &lt;&lt; 1) &amp; MSMASK; 
		high |= 1;                      /* shift in 1s */ } 
	}   /* shift_out_encoded_bits() */ 
encode( FILE *input, FILE *output ) 
{ 
	int mark, c; 
	int i, j, k,  b; 
	long   range; 
	state = 0; 
	do { 
		mark = c = getc( input ); 
		for ( k = 0; k &lt; 8; ++k ){ 
			b = 0x80 &amp; c; 
			b = ( b &gt; 0 ) ? 1 : 0; 
			mp = get_mp(); 
			if ( last_state == maxstates ) 
				initialize_model();
			update_count( b ); 
			c &lt;&lt;= 1; 
			if ( b == 1 ) 
				low = mp;            /* pick upper part of range */ 
			else high = mp - 1;      /* pick lower part of range */
			shift_out_encoded_bits( output ); 
		}   /* for k */ 
	}   while ( mark != EOF );  /* do loop */ 
}   /* encode */ 
void    remove_and_get_bits( FILE   *input ) 
{ 
	int bit; 
	for ( ; ; ) { 
		/* If the MSBs match, shift out the bits.*/ 
		if ( ( high &amp; MSBIT ) == ( low &amp; MSBIT ) ) 
			; 
		/* Else, throw away 2nd MSB to prevent underflow.*/ 
		else if ((low &amp; (MSBIT&gt;&gt;1)) &amp;&amp; ! (high &amp; (MSBIT &gt;&gt; 1) ) ) { 
			code ^= (MSBIT&gt;&gt;1); 
			low   = low &amp; MASK2; 
			high |= (MSBIT&gt;&gt;1); 
		} else 
		/* Otherwise, nothing to shift, so  return.*/ 
			break;
		low = ( low &lt;&lt; 1) &amp; MSMASK; 
		high = ( high &lt;&lt; 1) &amp; MSMASK;
		high |= 1; 
		code = ( code &lt;&lt; 1 ) &amp; MSMASK; 
		input_bit( input, bit ); 
		code += bit; 
	}    /* for (;;) */ 
}   /* remove_and_get_bits() */ 
decode( long    flen,  	FILE *input,    FILE *output ) 
{ 
	FILE    *fp; 
	int b,n, i, j, k=0; 
	ul  len = 0;
	state = 0; 
	while ( 1 ) { 
		mp = get_mp(); 
		if ( code &gt;= mp ){      /* determine if symbol is 0 or 1 */ 
			b = 1; 
			low = mp; 
		} else{ 
			b = 0; 
			high = mp -1; 
		}
		output_bit( output, b);         /* output a bit */ 
		if ( ++k == 8 ){ 
			++len; 
			k = 0;
		} 
		if ( len == flen ) 
			break; 
		if ( last_state == maxstates ) 
			initialize_model();
		update_count(b);   /* update state */ 
		
		/* Next, remove matched or underflow bits.*/ 
		remove_and_get_bits( input ); 
	}    /* while ( 1 ) */ 
}   /* decode */ 
void   compress( char  *argv[] ) 
{ 
	FILE *input,  *output; 
	long file_length, file_size();             /* in main.c */ 
	int c; 
	if ( ( input = fopen( *argv++, &quot;rb&quot; ) ) == NULL ){ 
		printf(&quot;\n%s doesn't exist &quot;, *(argv-1)); 
		exit( 1 ); 
	} 
	output = fopen( *argv, &quot;wb&quot; ); 
	file_length = filelength ( fileno( input ) ); 
	put_file_length( file_length, output ); 
	initialize_model();        /* initialize the model */ 
	initialize_encoder(); 
	encode( input, output );
	printf(&quot;\nmin_cnt1 = %d &quot;, min_cnt1 ); 
	flush_encoder( output );
	close_output( output ); 
	fclose( input ); 
	fclose( output ); 
}   /* compress */
void    uncompress( char *argv[] ) 
{ 
	FILE    *input, *output; 
	long   file_length; 
	if ( ( input = fopen( *argv++, &quot;rb&quot; ) ) == NULL ){
		printf(&quot;\n%s doesn't exist &quot;, *(argv-1) );
		exit( 1 ); 
	} 
	output = fopen(*argv, &quot;wb&quot; ); 
	file_length = get_file_length( input );
	initialize_model();         /* initialize the model */ 
	initialize_decoder( input ); 
	decode( file_length, input, output ); 
	fclose( input ); 
	fclose( output ); 
}  /* umcompress */ 
#include    &quot;main.c&quot;        /* housekeeping */ </pre>
<h4><a name="002d_000d"><a name="002d_000e">Listing Three<a name="002d_000e"></h4><pre> 
/*** iodmc.fun : functions for compression and expansion */ 
#define check_mem_error( x )    if ( x == NULL ){printf(&quot;\nout of memory&quot;);\ 
									exit( 1 );} 
#define rotater( x ) { x &gt;&gt;= 1; if ( x == 0) x = 0x80; }  /* rotate right */ 
#define input_bit( input, x )  {                    \ 
	rotater( in_control.mask );                     \ 
	if ( in_control.mask == 0x80 ){                 \ 
		in_control.code = getc( input );            \ 
		if ( in_control.code == EOF ){              \
			printf(&quot;\nerror! out of data&quot;);        \ 
			exit( 1 );                              \ 
		}             								\ 
		if ( !(comforter++ &amp; 0x0fff)  ){            \
			putc('.', stdout );                     \ 
			fflush( stdout );                       \ 
		}                                           \ 
	}     										    \ 
    x = in_control.mask &amp; in_control.code ? 1 : 0 ; \ 
} 
#define output_bit( output,  bit ) {                \ 
	if ( bit )                                      \ 
		out_control.code |= out_control.mask;  	 	\ 
	rotater( out_control.mask )     	           	\ 
	if ( out_control.mask == 0x80 ){           	 	\ 
		if ( putc( out_control.code, output ) != out_control.code ) \ 
			printf(&quot;\nfatal error in output_bit&quot; ); \ 
		out_control.code = 0;                       \ 
		if ( !(comforter++ &amp; 0x0fff)  ){            \ 
			putc('.', stdout );                 	\ 
			fflush( stdout );                       \ 
		}                                 	        \ 
	}                                               \ 
} 
typedef unsigned int ui; 
typedef unsigned short  int us; 
typedef unsigned char uc; 
typedef unsigned long ul; 

typedef struct { 
	uc  mask; 
	int code; 
} IO_CONTROL; 

IO_CONTROL out_control = { 0x80, 0 }; 
IO_CONTROL  in_control  = { 0x01, 0 }; 
ui  comforter = 0; 
FILE    *gopen( char name[] ) 
{ 
	FILE    *fp; i
	
	if ( ( fp = fopen( name, &quot;rb&quot; ) ) == NULL ){ 
		printf(&quot;\n%s doesn't exist &quot;, name );
		exit( 1 ); 
	} 
	return( fp ); 
} 
void    output_bits( FILE *output, ul value, int count ) 
{ 
	ul p; 
	static  ui  comforter = 0; 
	
	p = 1L &lt;&lt; ( count - 1 ); 
	while ( p != 0 ) { 
		if ( p &amp; value ) 
			out_control.code |= out_control.mask;   /* non-zero bit */ 
		p &gt;&gt;= 1; 
		out_control.mask &gt;&gt;= 1; 
		if ( out_control.mask == 0 ){ 
			putc( out_control.code, output ); 
			out_control.mask = 0x80; 
			out_control.code = 0; 
			if ( !(comforter++ &amp; 0x0fff)  ){ 
				putc('.', stdout ); 
				fflush( stdout ); 
			} 
		}
	} 
}   /* output_bits() */ 
close_output ( FILE *output )
{ 
	if ( out_control.mask != 0x80 ) 
		putc( out_control.code, output ); 
	fclose ( output );
}
</pre> <P>

</BODY></HTML>
