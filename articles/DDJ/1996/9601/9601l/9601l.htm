<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>JAN96: Multiple Inheritance for MFC 4.0</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>Multiple Inheritance for MFC 4.0<a name="0087_001a"><a name="0087_001a"><a name="0087_0018"><a name="0087_0000"></h1><P>

<h2>Inheriting from CObject</h2><P>

<h3>Jean-Louis Leroy</h3><P>

<P>
<i><a name="0087_0019"><a name="0087_0000">Jean-Louis currently works for a small
marketing company. He can be reached at
100611.1330@compuserve.com.</i></p><hr><P>

The recently released Microsoft Foundation Class library Version 4.0 incorporates
features such as full encapsulation of Windows 95 controls, the ability to create
and use OLE controls, and a database-access model called &quot;Data Access
Objects.&quot; One thing MFC 4.0 doesn't support, however, is multiple
inheritance. In fact, Microsoft's MFC Tech Note #16 even attempts to dissuade you
from using it. For instance, in discussing multiple inheritance, Tech Note #16
points out that <I>CObject</I> can appear only once in the inheritance graph of
your class--and <I>CObject</I>-derived classes can only appear on the left-most
edges of the graph. This splits the app's classes into two categories: those that
inherit from <I>CObject</I> (and receive full service from the framework) and
those that MFC ignores.<P>

While this may be Microsoft's choice, it does not necessarily have to be yours.
After all, many people (including Bjarne Stroustrup) believe that multiple
inheritance can be useful. While I won't attempt to convince you of the value of
multiple inheritance in this article, I will show how you can lift some of Tech
Note #16's restrictions without hacking the MFC source or loosing
functionality.<P>

<h3><a name="0087_001b">A Peek at MFC 4.0<a name="0087_001b"></h3><P>

The last &quot;public&quot; release of MFC was 3.0. Since that time, subscribers
to the Microsoft Developer Network have seen incremental changes in MFC that add
support for Windows Sockets, Simple MAPI, and Windows 95 common controls. MFC 4.0
brings other features to the table, raising the total number of classes to just
over 150.<P>

For example, MFC 4.0 provides support for multithreaded programming through a new
base class, <I>CSyncObject</I>. Under this base class are a collection of derived
classes to handle semaphores, mutexes, synchronization, events, and the like.
Support for OLE is provided through an OLE container that allows you to create an
OLE control. OLE controls are treated as special child windows and associated
with a parent window through <I>CWnd</I>. Thus, you can create an instance of a
control using <I>CWnd::CreateControl</I>. MFC also adds two new OLE common dialog
classes, <I>CPageSetupDialog</I> and <I>COlePropertiesDialog</I>, to encapsulate
the Page Setup dialog box and OLE Properties dialog box, respectively.<P>

A lot of work has gone into some of the less &quot;visual&quot; portions of the
framework. <I>CArchive</I>, for example, is no longer limited to 32 K objects,
and now uses the class-specific <I>new</I> operator if there is one.
<I>CString</I>s use (at last!) reference counting to greatly reduce the cost of
passing or returning a string by value. Also, redefinition of <I>new</I> as
DEBUG_NEW (a debugging technique promoted by Microsoft) no longer breaks the
IMPLEMENT_SERIAL and IMPLEMENT_DYNCREATE macros.<P>

<h3><a name="0087_001c">Supporting Multiple Inheritance<a name="0087_001c"></h3><P>

MFC belongs to the category of tree-like frameworks, like the NIH class library
or Borland's OWL 1.0. MFC, however, differs in its support of multiple
inheritance. The NIH class library, for instance, can be compiled with support
for multiple inheritance by making the root <I>Object</I> class a virtual base
class. This approach, however, is dismissed by Tech Note #16. The real problem
with virtual inheritance of <I>CObject</I>, however, is that it breaks some parts
of MFC.<P>

It turns out that MFC 4.0 is almost capable of dealing with virtual
<I>CObjec</I><I>t</I>s. If you attempt to write and use a class that virtually
inherits from <I>CObject</I>, two problems can arise. The first one occurs only
if the object is serializable and is detected by the compiler. The
IMPLEMENT_SERIAL macro will then trigger an &quot;error: downcast involving a
virtual base class&quot; message. Among other things, IMPLEMENT_SERIAL generates
the extraction operator &gt;&gt;, which reads the next <I>CObject</I> from a
<I>CArchive</I>, checks its class, and casts the pointer to the requested type.
Since MFC uses a static cast, IMPLEMENT_SERIAL will not compile if <I>CObject</I>
is virtually inherited. This is easy to fix. Visual C++ 4.0 supports new
<I>cast</I> operators such as <I>dynamic_cast&lt;&gt;</I>. To make serialization
work again you need a VIMPLEMENT_SERIAL that uses <I>dynamic_cast&lt;&gt;</I>
instead of the old cast notation; see <a href="9601l.htm#0087_0020">Listing
One</A>. This is, by the way, a good opportunity to fill a gap in MFC:
VIMPLEMENT_SERIAL and VDECLARE_SERIAL make it possible to deserialize a pointer
to a <I>const</I> object.<P>

The second problem with virtually inheriting from <I>CObject</I> is more
difficult to remedy because it occurs only in debug builds, and the compiler
won't warn you. The program will build and run until functions such as
<I>CMemoryState::DumpAllObjectsSince()</I> are called, either explicitly or when
the program terminates and MFC attempts to dump leaked objects.<P>

At this point, a description of the dump process is necessary. Starting with
Visual C++ 4.0, the C run-time library (CRT) also exists in debug version. A
header file crtdbg.h declares various interfaces to heap diagnostics. You can use
them to monitor heap activity, visit each allocation, get statistics on heap
usage, report memory leaks, and the like. All of this should sound familiar.
Indeed, these functions were previously part of MFC. Moving them to the CRT
solves several problems. For example, you can now use the heap diagnostics even
if your application isn't MFC based--even if it's written in plain old C. The
debug versions of heap functions (<I>_malloc_dbg</I>, <I>_realloc_dbg</I>, and so
on) have extra parameters that associate a source filename and line number with
an allocation. They also require a type parameter: <I>normal</I>, <I>client</I>,
<I>ignore</I>, or <I>CRT</I>. Only nodes of the first two categories appear in
heap dumps.<P>

<I>ignore</I> blocks are useful when memory needs to be allocated, but the
allocation pattern differs between runs of the same program. An example is the
temporary <I>CWnd</I> objects allocated by MFC in response to various Windows
events. Having them in the way would make it impossible to troubleshoot heap
problems. CRT blocks are allocated by the library for internal use. For example,
the <I>iostream</I> library needs to allocate buffers as part of its
initialization. Previously, these buffers were reported as memory leaks if the
program also used MFC. MFC 4.0 solves this by marking the buffers as CRT
blocks.<P>

<I>normal</I> blocks are dumped in terms of address and size, along with a hex
dump of the first few bytes. <I>client</I> blocks are dumped by the CRT the same
way as normal blocks, but you can override this behavior by specifying a dump
function that will be called by the CRT for <I>client</I> blocks. <a href="9601l.htm#0087_0028">Listing Five</A> is a C program that illustrates these
features.<P>

MFC sets up a <I>client</I> dump function. From MFC's point of view, a
<I>client</I> block contains a <I>CObject</I>. Custom versions of operator
<I>new()</I> in <I>CObject</I> allocate the memory as client. When the block must
be dumped, MFC casts the base address of the block to <I>CObject</I><I>*</I> and,
depending on the dump context's depth, either lists the object's class obtained
by a call to <I>GetRuntimeClass()</I> or calls the object's <I>Dump()</I> method.
This is the source of MFC's allergy to virtually inherited <I>CObject</I>s.
Objects are registered as <I>client</I> blocks, but the <I>CObject</I> part is
floating somewhere in the block, not at the start where MFC expects it. Thus,
calling virtual functions results in a crash.<P>

There is an easy solution--override the derived class's operator <I>new()</I> and
make it use the global operator <I>new()</I> instead of <I>CObjec</I><I>t</I>'s.
The memory block will be registered as nonclient, and MFC won't later attempt to
call virtual functions on it. Of course, the drawback is that the object will be
dumped in hexadecimal. In other words, objects using virtual inheritance will
receive only second-class support form the framework.<P>

Fortunately, there is a better solution. Since MFC wants a <I>CObject</I> at the
beginning of a client block, you can include an extra <I>CObject</I> at the
beginning of the block that will act as a proxy for the actual object. Actually,
you need two proxy classes--one for blocks awaiting construction, and another for
blocks that contain a fully constructed, dumpable object. The sole purpose of the
second proxy class is to delegate functions such as <I>Dump()</I>,
<I>GetRuntimeClass()</I>, and <I>AssertValid()</I> to the actual object.<P>

<a href="9601l.htm#0087_0022">Listing Two</A>, class <I>CVirtualObject</I>,
implements this concept. A class can be virtually derived from
<I>CVirtualObject</I>, or from any class that inherits from
<I>CVirtualObject</I>. In release builds, <I>CVirtualObject</I> does nothing
different from <I>CObject</I>. It could just as well be a <I>typedef</I>. In
debug builds, however, <I>CVirtualObject</I> replaces <I>CObjec</I><I>t</I>'s
memory management. One of the <I>new</I> operators is used to construct an object
at a specific address; see <a href="9601l.htm#0087_0024">Listing Three</A>. It
is of no interest to us and is simply passed down to <I>CObject</I>. The other
two allocate enough memory for the object and a <I>CBlockProxy</I> by calling the
corresponding <I>CObject::operator</I> new, create the proxy at the beginning of
the block, and add it to a linked list of blocks for yet-to-be-constructed
objects. The proxy remembers the size of the allocated memory block. The <I>new
</I>operators then return the address of the first byte past the proxy. <P>

The constructor of <I>CVirtualObject</I> calls <I>CBlockProxy::Resolve</I> (<a href="9601l.htm#0087_0026">Listing Four</A>), which searches the list of blocks
waiting for construction. If the object under construction is found in the list,
the <I>CBlockProxy</I> is replaced with a <I>CObjectProxy</I>. Of course, the two
proxies must be of the same size. The address of the <I>CObject</I> subobject
(passed from the constructor) is stored in the proxy. Note that the object can be
absent from the list. For example, <I>CVirtualObject</I> member variables will
not be found in the list. Also, a list is needed as opposed to a mere static
variable because, in expressions such as <I>new A(new B)</I>, the two calls to
<I>new</I> take place before the execution of the constructors. The
<I>CObjectProxy</I> simply delegates diagnostic functions to the actual object.
<I>GetRuntimeClass()</I> is also delegated because, when the dump context's depth
is equal to zero, the framework simply outputs the object's class. Finally, a
<I>delete</I> operator is needed in <I>CVirtualObject</I> because the base
address of the object is no longer the base address of the allocated block.<P>

<I>CVirtualObject</I> won't help you virtually inherit from <I>CDocument</I>, but
the same technique could probably be used to build a <I>CVirtualDocument</I>
class. It can also be applied to problems not related to multiple inheritance;
for example, to make MFC diagnostics work with classes not derived from
<I>CObject</I> (and perhaps coming from another vendor). In such case,
<I>CVirtualObject</I> could be turned into a template.<P>

<h3><a name="0087_001d">Conclusion<a name="0087_001d"></h3><P>

MFC 4.0's cleaner design makes it possible to add many extensions to the
framework. However, it seems amazing that it is possible to reintroduce support
for multiple inheritance in a framework designed by people who overtly contest
the value of the feature. The code presented in this article allows you to do
just that.<P>

<h3><a name="0087_001e">For More Information<a name="0087_001e"></h3><P>

MFC 4.0<P>

Microsoft Corp.<P>

One Microsoft Way<P>

Redmond, WA 98052<P>

206-880-8080<P>

<P>

<h4><a name="0087_001f"><a name="0087_0020">Listing One<a name="0087_0020"></h4><pre>
# define _VDECLARE_DESERIALIZER(class_name) \
friend CArchive&amp; AFXAPI operator&gt;&gt;(CArchive&amp; ar, class_name* &amp;pOb); \
friend CArchive&amp; AFXAPI operator&gt;&gt;(CArchive&amp; ar, const class_name* &amp;pOb) \
    { return ar &gt;&gt; const_cast&lt;class_name*&amp;&gt;(pOb); }
# define _VIMPLEMENT_DESERIALIZER(class_name) \
CArchive&amp; AFXAPI operator&gt;&gt;(CArchive&amp; ar, class_name*&amp;p) { \
    CObject* pOb = ar.ReadObject(NULL); \
    if (!pOb) p = NULL; \
    else if (!(p = dynamic_cast&lt;class_name*&gt;(pOb)))\
    AfxThrowArchiveException(CArchiveException::badClass); \
    return ar; }
# define VDECLARE_ABSTRACT_SERIAL(class_name) \
DECLARE_DYNAMIC(class_name) \
_VDECLARE_DESERIALIZER(class_name)
# define VIMPLEMENT_ABSTRACT_SERIAL(class_name, base_class_name) \
IMPLEMENT_DYNAMIC(class_name, base_class_name) \
_VIMPLEMENT_DESERIALIZER(class_name)
# define VDECLARE_SERIAL(class_name) \
DECLARE_DYNCREATE(class_name) \
_VDECLARE_DESERIALIZER(class_name)
# define VIMPLEMENT_SERIAL(class_name, base_class_name, wSchema) \
CObject* PASCAL class_name::CreateObject() \
    { return new class_name; } \
_IMPLEMENT_RUNTIMECLASS(class_name, base_class_name, wSchema, \
    class_name::CreateObject) \
_VIMPLEMENT_DESERIALIZER(class_name)
</pre>
<h4><a name="0087_0021"><a name="0087_0022">Listing Two<a name="0087_0022"></h4><pre>
# ifdef _DEBUG
class CVirtualObject : public CObject
    {
    public:
        CVirtualObject();
        void* PASCAL operator new(size_t, void* p);
        void* PASCAL operator new(size_t size);
        void* PASCAL operator new(size_t size, LPCSTR file, int line);
        void PASCAL operator delete(void* p);
        static void AfxDoForAllObjects(void (*pfn)(CObject* pObject, 
            void* pContext), void* pContext);
    };
class CProxy : public CObject
    {
    protected:
        size_t size;
        union
            {
            CBlockProxy* next;
            CVirtualObject* object;
            };
    };
class CBlockProxy : public CProxy
    {
    public:
        CBlockProxy(size_t size);
        virtual void Dump(CDumpContext&amp; dc) const;
        static void Resolve(CVirtualObject* p);
    private:
        static CBlockProxy* head;
    };
class CObjectProxy : public CProxy
    {
    public:
        CObjectProxy(CVirtualObject* p);
        virtual void Dump(CDumpContext&amp; dc) const;
        virtual void AssertValid() const;
        virtual CRuntimeClass* GetRuntimeClass() const;
    };
# else
class CVirtualObject : public CObject { };
# endif
</pre>
<h4><a name="0087_0023"><a name="0087_0024">Listing Three<a name="0087_0024"></h4><pre>
void* PASCAL CVirtualObject::operator new(size_t size, LPCSTR file, int line)
    {
    // allocate requested memory + space for header
    void* p = CObject::operator new(size + sizeof CProxy, file, line);
    // construct a dumpable object at start of block
    new (p) CBlockProxy(size);
    // return address of first byte past header
    return reinterpret_cast&lt;CBlockProxy*&gt;(p) + 1;
    }
</pre>
<h4><a name="0087_0025"><a name="0087_0026">Listing Four<a name="0087_0026"></h4><pre>
CVirtualObject::CVirtualObject()
    {
    // object is now constructed &amp; dumpable
    CBlockProxy::Resolve(this);
    }
void CBlockProxy::Resolve(CVirtualObject* p)
    {
    for (CBlockProxy **pn = &amp;head, *node; node = *pn; pn = &amp;node-&gt;next)
            if (reinterpret_cast&lt;BYTE*&gt;(node + 1) &lt;= reinterpret_cast&lt;BYTE*&gt;(p)
            &amp;&amp; reinterpret_cast&lt;BYTE*&gt;(p) &lt; reinterpret_cast&lt;BYTE*&gt;(node + 1) 
                                                                  + node-&gt;size)
            {
            // object found; remove from unconstructed block list
            *pn = node-&gt;next;
            // destroy unconstructed block header
            node-&gt;~CBlockProxy();
            // construct a header for constructed block
            new (node) CObjectProxy(p);
            break;
            }
    }
</pre>
<h4><a name="0087_0027"><a name="0087_0028">Listing Five<a name="0087_0028"></h4><pre>
# include &lt;stdlib.h&gt;
# include &lt;crtdbg.h&gt;
void dump_client(void* p, size_t s)
    {
    _RPT1(_CRT_WARN, &quot; Integer: %d\n&quot;, *(int*) p);  
    }
int main()
{
    _CrtSetDumpClient(dump_client);
    *(int*) _malloc_dbg(sizeof(int), _IGNORE_BLOCK, __FILE__, __LINE__) = 1;
    *(int*) _malloc_dbg(sizeof(int), _CRT_BLOCK,    __FILE__, __LINE__) = 2;
    *(int*) _malloc_dbg(sizeof(int), _NORMAL_BLOCK, __FILE__, __LINE__) = 3;
    *(int*) _malloc_dbg(sizeof(int), _CLIENT_BLOCK, __FILE__, __LINE__) = 4;
    _CrtDumpMemoryLeaks();
    return 0;
}
Output
Detected memory leaks!
Dumping objects -&gt;
K:\test\leak.c(15) : {33} client block at 0x002D07A8, subtype 0, 4 bytes long.
 Integer: 4
K:\test\leak.c(14) : {32} normal block at 0x002D0768, 4 bytes long.
 Data: &lt;    &gt; 03 00 00 00 
Object dump complete.
</pre>
<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
