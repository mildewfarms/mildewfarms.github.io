<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>JAN96: ALGORITHM ALLEY</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>ALGORITHM ALLEY<a name="0097_0022"><a name="0097_0022"><a name="0097_0020"><a name="0097_0000"></h1><P>

<h2>Multiple Encryption: Weighing Security and Performance</h2><P>

<h3>Burton S. Kaliski, Jr. and M.J.B. Robshaw</h3><P>

<P>
<i><a name="0097_0021"><a name="0097_0000">Burt and Matt are scientists at RSA
Laboratories. They can be contacted at burt@rsa.com and matt@rsa.com,
respectively.</i></p><hr><P>

As time passes, encryption algorithms age and become vulnerable to new or
previously infeasible attacks. In particular, interest is often paid to the size
of the key used for encryption, since, in the absence of any other weaknesses,
this is one way to compare the strength of ciphers. Key lengths once considered
adequate are now vulnerable to adversaries with only modest resources.<P>

While old, well-trusted ciphers approach the end of their useflife, new ciphers
are continually being proposed. But new ciphers should be greeted with extreme
caution and deep skepticism. They should be subjected to prolonged cryptanalysis
(by people other than the designers) before they are considered safe for use by
the community at large. Several ciphers are currently earning their credentials
as part of this process; IDEA is perhaps the foremost among them (see &quot;The
IDEA Encryption Algorithm,&quot; by Bruce Schneier, <I>DDJ</I>, December
1993).<P>

To span this period of uncertainty, you should try to use trusted ciphers in more
secure ways. As a first step, it is natural to suppose that encrypting twice is
better than encrypting once; that the more times you encrypt data which has
already been encrypted (perhaps with a different cipher), the safer you must be.
<P>

For the most part, this might be true. However, you don't get something for
nothing. More encryption means more work, and you need to know exactly how much
extra security is gained from the additional work.<P>

In this article, we will examine these issues, paying particular attention to
repeated encryption with the same cipher. We will then consider some issues
involved in the mixed use of different block ciphers.<P>

<h3><a name="0097_0023">Double Encryption<a name="0097_0023"></h3><P>

Triple encryption (encrypting three times) is mentioned frequently. But whatever
happened to double encryption? Destined to remain the perfect tutorial example,
double encryption increases security so little that the extra effort cannot be
justified. <P>

With double encryption, the same block cipher is used twice with two different
keys. If we denote block-cipher encryption of a message <I>m</I> under a key
<I>k</I><SUB>1</SUB> by <I>E</I>(<I>m</I>,<I>k</I><SUB>1</SUB>), then double
encryption might be written as
<I>E</I>(<I>E</I>(<I>m</I>,<I>k</I><SUB>1</SUB>),<I>k</I><SUB>2</SUB>). One
argument for the effort required to mount an exhaustive search is that if each
key is <I>k</I> bits long and <I>k</I><SUB>1</SUB> and <I>k</I><SUB>2</SUB> are
independent, then the best brute-force search for the keys used in double
encryption requires 2<SUP>2</SUP><I><SUP>k</I></SUP> operations.<P>

But what if the opponent is willing to invest in memory? Very often, the time
required to mount an attack is reduced by memory; hence the
&quot;time-memory&quot; trade-off. In the case of double encryption, a
brute-force attack requires 2<I><SUP>k</I></SUP> table entries, where a table
entry consists of a key value and an intermediate data value, and
2<I><SUP>k</I></SUP><SUP>+</SUP><SUP>1</SUP> operations, where an operation is
encryption under the particular cipher. <P>

To mount this &quot;meet-in-the-middle&quot; attack, you encrypt some known
plaintext <I>m</I> under every possible key <I>k</I><SUB>1</SUB> and store a
table with 2<I><SUP>k</I></SUP> entries, where each resulting intermediate block
is indexed by the choice of first key. Then you use every possible key
<I>k</I><SUB>2</SUB> to decrypt the ciphertext; if there is a match in the table,
then you have a guess
(<I>k</I><SUB>1</SUB><SUP>*</SUP>,<I>k</I><SUB>2</SUB><SUP>*</SUP>) for the pair
of keys that were actually used. (<a href="9601d4f1.gif">Figure 1</A> shows this
attack.) The cryptanalyst might need additional known-plaintext/ciphertext pairs
to check that the guess is correct (depending on block and key size, there may
well be false alarms).<P>

While such an attack still seems to have large requirements--a table of size
2<I><SUP>k</I></SUP>, for instance--if the attacker can choose the plaintext,
only one table must be compiled for all keys. (If the plaintext is only known
rather than chosen, then the table needs to be prepared for that particular
plaintext.) Thus, while encryption of each plaintext block requires twice as much
work, the cryptanalyst with resources to invest in memory is only faced with
twice the computational effort required for single encryption. This is certainly
not the 2<SUP>2</SUP><I><SUP>k</I></SUP> operations we might have expected.<P>

<h3><a name="0097_0024">Triple Encryption<a name="0097_0024"></h3><P>

Unlike double encryption, triple encryption can provide the kind of security we
want at a price we are willing to pay, and in several different ways.<P>

In two-key triple encryption we can write the ciphertext equivalent of some
plaintext <I>m</I> as
<I>E</I>(<I>D</I>(<I>E</I>(<I>m</I>,<I>k</I><SUB>1</SUB>),<I>k</I><SUB>2</SUB>),<I>k</I><SUB>1</SUB>),
where <I>D</I>(<B><SUP><img src="dot12.gif"></B></SUP>,<I>k</I><SUB>2</SUB>) denotes decryption under
key <I>k</I><SUB>2</SUB>. When <I>k</I><SUB>1</SUB>=<I>k</I><SUB>2</SUB>, this
mode of triple encryption reduces to the single encryption
<I>E</I>(<I>m</I>,<I>k</I><SUB>1</SUB>). This useful property is referred to as
&quot;backward compatibility.&quot; For shorthand, let's call this version of
triple encryption with two distinct keys &quot;EDE2&quot;; obvious changes will
be made to this notation to accommodate other variants.<P>

Two-key triple encryption is vulnerable to some forms of attack. While the
attacks we will describe require large amounts of time and memory, they show that
two-key triple encryption does not provide as much security as we might have
hoped. Nevertheless, two-key triple encryption is used quite widely in banking;
we are not suggesting any practical problem with two-key triple encryption, but
there are benefits in using three keys.<P>

In their paper &quot;On the Security of Multiple Encryption&quot;
(<I>Communications of the ACM</I>, July 1981), R.C. Merkle and M.E. Hellman
showed how two-key triple encryption is vulnerable to a chosen-plaintext attack
that requires the encryption of 2<I><SUP>k</I></SUP> chosen plaintexts,
2<I><SUP>k</I></SUP> words of memory, and about 2<I><SUP>k+1</I></SUP>
operations. This is essentially the same work effort required to tackle double
encryption, though the plaintext requirements have been vastly increased. Merkle
and Hellman were the first to point out the essential impracticality of their own
attack, but they referred to the attack as a &quot;certificational weakness&quot;
in two-key triple encryption.<P>

This somewhat prophetic view was later upheld. In the paper &quot;A
Known-plaintext Attack on Two-key Triple Encryption&quot; (<I>Advances in
Cryptology: Eurocrypt '90</I>, Springer-Verlag, 1991), P.C. van Oorschot and M.J.
Wiener described a known-plaintext attack that requires 2<SUP>120</SUP>/<I>n</I>
operations when given <I>n</I> known plaintext blocks, and memory requirements
that grow linearly as <I>n</I> increases. While this attack may also be
considered impractical, anyone using two-key triple encryption must consider it
seriously.<P>

Instead, it is recommended that three independent keys be used. Thus, we can
write the ciphertext equivalent to some plaintext encrypted using three-key
triple encryption as
<I>E</I>(<I>D</I>(<I>E</I>(<I>m</I>,<I>k</I><SUB>1</SUB>),<I>k</I><SUB>2</SUB>),<I>k</I><SUB>3</SUB>),
where backward compatibility is provided by putting
<I>k</I><SUB>3</SUB>=<I>k</I><SUB>2</SUB> or
<I>k</I><SUB>1</SUB>=<I>k</I><SUB>2</SUB>. <P>

Three-key triple encryption is still vulnerable to a meet-in-the-middle attack
requiring 2<SUP>2</SUP><I><SUP>k</I></SUP> words of memory and about
2<I><SUP>k+1</I></SUP> operations. However, for any cipher with a reasonably
sized key, this brute-force attack will not be a substantial threat. <P>

All these brute-force attacks are applicable, at least to some degree, to any
cipher. However, there are some technical issues to resolve in adapting the
attack. These attacks were devised with DES in mind, and they make assumptions
about key size compared to block size. The sizes can vary considerably between
different ciphers.<P>

Finally, one potential property of a block cipher that would jeopardize the
security of triple and even higher multiples of encryption is the possibility
that the underlying block cipher generates a &quot;group.&quot; If so, then for
each set of keys <I>k</I><SUB>1</SUB>, <I>k</I><SUB>2</SUB>, and
<I>k</I><SUB>3</SUB>, there would be a fourth key <I>k</I><SUB>4</SUB>, such that
<I>E</I>(<I>D</I>(<I>E</I>(<I>m</I>,<I>k</I><SUB>1</SUB>),<I>k</I><SUB>2</SUB>),<I>k</I><SUB>3</SUB>)=<I>E</I>(<I>m</I>,<I>k</I><SUB>4</SUB>).
Clearly, this would be disastrous. Unfortunately, for most ciphers it's still
unknown whether or not the cipher forms a group. DES, however, is not a group,
and triple encryption is not vulnerable to attack in this way (see the
accompanying text box, &quot;The Data Encryption Standard&quot;).<P>

<h3><a name="0097_0025">Modes of Triple Encryption<a name="0097_0025"></h3><P>

So far, we have only considered the triple-encryption cipher as an
&quot;electronic code book,&quot; where each plaintext block is encrypted
independently of the others. Previously, triple encryption has been used to
encrypt valuable information such as other encryption keys (see <I>American
National Standard X9.17: Financial Institution Key Management</I>, 1985), and
this information can often be accommodated within a single block.<P>

For longer messages, however, it is customary to &quot;chain&quot; the series of
encryptions in a mode known as &quot;cipher block chaining&quot; (CBC). With
single-encryption CBC, the previous ciphertext is XORed with the plaintext prior
to block-cipher encryption.<P>

With triple encryption, we can use one of two CBC modes (see <a href="1996009c.htm">Figure 2</A>):<P>
<ul>
<li>Inner-CBC, where each individual component is used in CBC mode. </li>
<li>Outer-CBC, where the three stages of encryption are considered a single unit
and the ciphertext is fed back to the plaintext.</li>
</ul>
Before considering the security issues, let's examine the performance of these
CBC modes.<P>

All triple-encryption modes obviously require more resources than single
encryption: more hardware or more time. But it would be nice if, given sufficient
hardware, the throughput were the same as for single encryption. (For software
implementations, the different triple-encryption modes all take roughly the same
amount of time.)<P>

Throughput is the main performance distinction between the inner- and outer-CBC
modes. In the inner-CBC modes, feedback is around one operation. Three chips,
each implementing a single cipher operation, can be kept busy continually, each
feeding back to itself, so the throughput is the same as for single encryption.
(Latency, the amount of time it takes to process a particular block, is
nevertheless three times longer than in single encryption.)<P>

In outer-CBC, feedback is around all three operations. This means that even with
three chips, the throughput is only one third that of single encryption; the
first chip must wait until the other two are done to move on to the next block.
Of course, the chip can process blocks from other messages during its idle time.
By interleaving the processing of three messages, the chips can be kept busy all
the time. This changes the encryption protocol at a higher level, but may be
appropriate for some applications.<P>

With three encryption chips then, inner-CBC is intrinsically more efficient than
outer-CBC, unless three messages are interleaved for the latter.<P>

It appears that inner-CBC offers more security than outer-CBC, since the values
of the internal feedbacks are never revealed. In an EDE configuration the usual
feedback around the middle decryption unit actually becomes a feedforward. This
hinders meet-in-the-middle attacks, and inner-CBC appears to offer considerable
security against brute-force attacks. <P>

The use of three keys is obviously beneficial, and any additional operational
overhead it incurs is insignificant. So, three-key inner-CBC EDE seems to be the
mode of choice against brute-force attacks.<P>

But in &quot;Cryptanalysis of Multiple Modes of Operation,&quot; <I>Advances in
Cryptology: Asiacrypt '94</I> (Springer-Verlag, 1995), E. Biham showed that
inner-CBC modes are vulnerable to a class of sophisticated attacks. The trouble
is that the use of feedback around each unit in triple encryption allows
controlled changes in the ciphertext to be propagated as changes to the internal
and unseen data. <P>

By controlling these changes in the ciphertext, powerful differential and linear
cryptanalysis techniques can be used on individual components (see
<I>Differential Cryptanalysis of the Data Encryption Standard</I>, by E. Biham
and A. Shamir, Springer-Verlag, 1993). Depending on the exact form of triple
encryption--two- or three-key, EDE, or EEE--different attacks can be mounted. <P>

In essence, Biham has demonstrated that the use of feedback in the internals of
an encipherment procedure is dangerous. It is better to use one substantial
encryption transformation and to employ any feedback around its entirety, rather
than to consider the encryption as a succession of small, and essentially less
secure, transformations, each with its own feedback.<P>

When using triple encryption with chaining, we recommend three-key, outer-CBC
triple encryption with an EDE configuration for backward compatibility.<P>

<h3><a name="0097_0026">Mixing Ciphers<a name="0097_0026"></h3><P>

One frequent suggestion is to mix the use of different ciphers. Perhaps we should
encrypt the plaintext with one cipher, the result with a second, incompatible
cipher, and so on. This might well be the basis of a strong design, although the
difficulty and cost of implementation must be considered, and potentially
intricate solutions to backward compatibility must be provided. <P>

Of course, this more-general question could have been the theme of this entire
article; after all, multiple encryption with a single cipher is merely one
restricted case where all the ciphers are the same. But more-practical issues
have influenced our emphasis. Multiple encryption with the same cipher is
standardized and widely used, whereas the use of different ciphers remains, at
best, merely a proposal. In &quot;Cascade Ciphers: The Importance of Being
First,&quot; <I>Proceeding of the IEEE Symposium on Information Theory, 1990</I>,
U.M. Maurer and J.L. Massey demonstrated that a cascade of ciphers, where the key
used at each stage is chosen independently of the others, is at least as strong
as its first component. This property is often casually referred to as &quot;the
importance of being first.&quot; When the chain of ciphers can be equivalently
rewritten with any of the ciphers first (technically, the ciphers are said to
&quot;commute&quot;), then the cascade is as strong as its strongest
component.<P>

Others have addressed related questions, and it seems reasonable to suppose that
the successive use of different and incompatible ciphers can only provide
additional protection against more-sophisticated methods of cryptanalysis. The
basic brute-force and meet-in-the-middle attacks can always be mounted, whatever
the cipher, in one way or another. (There are some technical issues to resolve
when the key size either differs between the ciphers or becomes larger than the
block size.) But there appears to be some reluctance in establishing a precedent;
as yet, no one has offered a good choice of ciphers or basic results on the
security of a particular mix.<P>

<h3><a name="0097_0027">Less-Computation-Intensive Alternatives<a name="0097_0027"></h3><P>

As we add encryption operations to the chain of multiple encryptions, we increase
the work required to encrypt a block of data by another factor. Is there some
less-computation-intensive way to increase the security of our basic block cipher
without resorting to multiple encryptions?<P>

With regard to DES, there have been a few proposals that might easily be used on
other block ciphers. In one variant,  which we call &quot;DES-SES&quot; (see
&quot;Foiling an Exhaustive Key-search Attack,&quot; by F. Rubin,
<I>Cryptologia</I>, April 1987), a secret substitution operation <I>S</I> is used
on the plaintext before encryption using single DES. We'll focus on DES-XEX,
another variant where an XOR is used both before and after single encryption with
DES; hence the -XEX. Thus, the plaintext <I>m</I> would be encrypted as
<I>E</I>(<I>m</I><img src="xor12.gif"><I>s</I><SUB>1</SUB>,
<I>k</I><SUB>1</SUB>)<img src="xor12.gif"><I>s</I><SUB>2</SUB>, where <I>k</I><SUB>1</SUB> is the
usual secret DES key and <I>s</I><SUB>1</SUB> and <I>s</I><SUB>2</SUB> are secret
64-bit quantities which may be the same (DES-XEX2) or different (DES-XEX3).<P>

Against brute-force attacks, both DES-XEX2 and DES-XEX3 offer a marked
improvement over single-encryption DES. The effort required to attack DES-XEX2 is
2<SUP>120</SUP>/<I>n</I> operations with <I>n</I> known plaintexts; to attack
DES-XEX3, 2<SUP>121</SUP> DES operations are required when three plaintext blocks
are known. <P>

The additional protection offered against differential and linear cryptanalysis
is not  as dramatic but still significant; DES-XEX2 or DES-XEX3 offer the same
protection as DES with so-called independent subkeys. Such attacks, while
impractical (they require more than 2<SUP>61</SUP> chosen plaintexts for
differential and 2<SUP>60</SUP> known plaintexts for linear cryptanalysis; see
Biham's &quot;Cryptanalysis of Multiple Modes of Operation&quot;), offer only a
small improvement over the requirements for single-DES.<P>

But DES-XEX is cheap--only an additional two XORs are required to encrypt each
plaintext block. DES-XEX or similar variants may offer a very realistic balance
between increased encryption effort and increased security.<P>

As an exercise, we pose the following question: Is DES-EXE--that is,
<I>E</I>(<I>E</I>(<I>m</I>,<I>k</I><SUB>1</SUB>)<img src="xor12.gif"><I>s</I><SUB>1</SUB>,<I>k</I><SUB>2</SUB>),
where <I>k</I><SUB>1</SUB> and <I>k</I><SUB>2</SUB> are independent DES keys and
<I>s</I><SUB>1</SUB> is a secret value--stronger or weaker than DES-XEX?<P>

<h3><a name="0097_0028">Final Thoughts<a name="0097_0028"></h3><P>

While there may be significant advantages in using several types of ciphers, the
approach is essentially untried and has significant operational implications.
Instead, it is most commonly proposed to use multiple iterations of the same
cipher, often DES. In particular, three-key triple-DES in EDE mode is just
starting to be widely accepted for the encryption of data streams. <P>

The use of triple encryption raises an interesting question: Surely we need
something stronger than triple encryption to transmit the keys used for triple
encryption?<P>

When considering triple-DES in a system, perhaps you should examine higher
multiples of DES encryption. In quintuple-DES, if a three-key variant is used,
then
<I>E</I>(<I>D</I>(<I>E</I>(<I>D</I>(<I>E</I>(<I>m</I>,<I>k</I><SUB>1</SUB>),<I>k</I><SUB>2</SUB>),<I>k</I><SUB>3</SUB>),<I>k</I><SUB>2</SUB>),<I>k</I><SUB>1</SUB>)
would be among the strongest key sequences against meet-in-the-middle attacks.
Backward compatibility with triple-DES is provided by putting
<I>k</I><SUB>2</SUB>=<I>k</I><SUB>3</SUB>, and backward compatibility with
single-DES is provided by putting
<I>k</I><SUB>1</SUB>=<I>k</I><SUB>2</SUB>=<I>k</I><SUB>3</SUB>. Of course, a
five-key variant would have obvious additional advantages.<P>

Whatever the future with DES, the issue of multiple encryption will have to be
considered for the block cipher of the day. We now have a sufficient
understanding of current cryptanalytic techniques to provide a fairly accurate
estimate for the additional security provided in return for the increase in work
effort and key size.<P>

<h2>The Data-Encryption Standard</h2><P>

Designed in the early 1970s, the Data Encryption Standard (DES) is, in the 1990s,
still arguably the world's most trusted block cipher, and with good reason. Its
resistance to all published cryptanalytic attacks bears continuing testament to
the exceptional quality of its design. In the absence of any new major
cryptanalytic breakthrough, the declining security offered by DES is essentially
a symptom of technological aging--as a basic, primitive building block, it can
still be cryptographically useful.<P>

DES is a block cipher that transforms plaintext blocks of 64 bits to 64 bits of
ciphertext. The transformation is controlled by a 56-bit key. DES is an iterated
cipher consisting of 16 rounds, each using a 48-bit subkey derived from the
56-bit key chosen by the user. Sometimes a variant of DES is described as using
independent subkeys. In this case, the subkeys used in each of the 16 rounds are
unrelated, rather than being derived from the same user-provided 56-bit
quantity.<P>

Apart from a potential halving of the search space gained by using the so-called
complementation property (this results from the way the subkey is used in each
round), no known shortcuts allow a reduction in the complexity of a brute-force
attack. Compared to some more-recent variants, DES is remarkably resilient
against sophisticated attacks such as differential and linear cryptanalysis. The
best differential attack requires 2<SUP>47</SUP> chosen plaintexts, and the best
linear cryptanalytic attack requires 2<SUP>43</SUP> known plaintexts. In fact, in
an experiment lasting 50 days, 12 workstations were used to recover the key used
for the DES encryption of 2<SUP>43</SUP> known plaintexts (see &quot;The First
Experimental Cryptanalysis of the Data Encryption,&quot; by M. Matsui,
<I>Advances in Cryptology: Crypto '94</I>, Springer-Verlag, 1994). This attack is
impractical, however; 40 of the 50 days were spent just encrypting the data.<P>

More significantly, in a Crypto '93 Rump Session entitled &quot;Efficient DES Key
Search,&quot; M.J. Wiener estimated that for $1 million, a machine can be built
which would search exhaustively for the key used in any DES encryption. It is
estimated that this machine could find the correct key in an average time of 3.5
hours. <P>

While DES is still practically secure to those without $1 million to invest, it
is time to move to stronger methods of encryption, be they new ciphers or
multiple iterations of an old favorite.<P>

--B.S.K. &amp; M.J.B.R.<P>

<h4><B><a href="9601d4f1.gif">Figure 1</A>:</B> Double encryption using two
independent keys and a meet-in-the-middle attack.</h4><P>

<h4><B><a href="1996009c.htm">Figure 2</A>:</B> Two different ways of
implementing the CBC mode of triple encryption.</h4><P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
