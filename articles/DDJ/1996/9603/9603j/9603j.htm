<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>MAR96: Examining the Cocktail Toolbox</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>Examining the Cocktail Toolbox<a name="012a_005a"><a name="012a_005a"><a name="012a_0058"><a name="012a_0000"></h1><P>

<h2>Tools for producing compilers, translators, and more</h2><P>

<h3>Rodney M. Bates</h3><P>

<P>
<i><a name="012a_0059"><a name="012a_0000">Rod, an engineer with Boeing aircraft, can be
contacted at bates@salsv6.boeing.com.</i></p><hr><P>

Half a century ago, General Motors and others began convincing railroads to use diesel instead of steam
locomotives. Maintaining steam locomotives, they claimed, required a tremendous amount of labor, shop
facilities, and supplies, not to mention having valuable capital assets off-line during the maintenance
process. Steam fan that I am, it pains me to admit they were right--diesels were an improvement, at least
when it came to running a transportation business. <P>

In particular, one marketing tactic diesel manufacturers used was to put a demonstrator diesel locomotive
on the tracks. In one case (or so the story goes), the demonstrator wore out its wheels in just three
months. Skeptics immediately jumped on this unprecedented wear rate as a reason to reject the newfangled
machine. Closer investigation revealed that the locomotive ran 87,000 miles in those three months, which
was about the normal life of a set of wheels. However, steam locomotives could never approach that
mileage in such a relatively short time. In short, while steam engines were sitting in the yards being oiled,
greased, and ash-cleaned, diesels were on the tracks wearing off their wheels. <P>

Using the Cocktail tool package for translator development makes me feel like that demo diesel in that the
work leaves me worn out. But when I look back at what I have produced in a short time, I realize that a
large amount of relatively routine work has been done for me, allowing me to concentrate on the real
algorithmic meat of the task. The result is high mileage, which more than compensates for the rapid
wear.<P>

<h3><a name="012a_005b">What is Cocktail?<a name="012a_005b"></h3><P>

Cocktail is a collection of tools for producing compilers, translators, and similar tools. It was originally
developed at the German National Research Center's subsidiary at Karlsruhe. Cocktail contains
implementations for six special-purpose languages that generate most of the parts of a translator. <P>

Cocktail is available for both MS-DOS and UNIX. To run the binaries under DOS, you'll need an 80386/486,
at least 2 MB of memory, and the go32 DOS extender from DJ Delorie. To compile the sources, you'll need
the gcc GNU C compiler (Delorie's GCC port to DOS), the GNU make (gmake), and the ar and ranlib
archive-handling tools. For more information, see text box on page 82. A commercial implementation
(including support) is available from Josef Grosch (grosch@cocolab.sub.com), whose company provides
support for the free version, along with translator-development services.<P>

Two of the languages included with Cocktail, rex and lalr, are approximate functional equivalents of the
ubiquitous lex and yacc. They generate lexical scanners and LALR parsers, respectively. However, they
generate much faster code than lex and yacc and have valuable additional features. Also, they integrate
smoothly with the other languages.<P>

Another language, ell, is actually nearly identical to lalr. However, its generator produces top-down
parsers instead of bottom-up parsers. This somewhat limits the grammars it can parse, but it also yields
faster parsers and makes some kinds of semantic processing easier.<P>

The ast language supports specifying abstract syntax trees (ASTs). Many translator programs build ASTs
internally, and there is a very large amount of relatively boring code to be written to support them. Ast
generates it for you. <P>

The ag language generates evaluator programs for attribute grammars (AGs). AGs are a very powerful
formal system for specifying static semantic analysis. An AG defines, in a declarative style, how to
compute information about the nodes of a tree. The ag language is a superset of ast, which it uses to define
the AST on which it works. The same generator program, cg, implements both ast and ag.<P>

Finally, the puma language handles term-rewrite systems, another kind of powerful formal system. They
define how a tree can be transformed into another tree, using patterns and replacements. <P>

The generators produce source code (&quot;target code&quot;) in either Modula-2 or C, which is then
compiled as usual. Handwritten target code can be embedded in many places in the input to the generators.
This is a powerful escape mechanism for handling things that can't be expressed in the relevant formal
system. <P>

<h3><a name="012a_005c">Ast and Ag<a name="012a_005c"></h3><P>

Ast is a language for defining a tree grammar for an AST; lalr is for defining a string grammar for a
concrete syntax. Although concrete and abstract syntaxes are considerably different in style, the
developers of Cocktail recognized that the same language could be used to define either style. <P>

The cg generator has a function that takes a concrete grammar and its related semantic actions, written in
the ast and ag languages, and converts it into lalr. It can also emit rex code for most of a scanner
specification. I find this the easiest way to use Cocktail, as most of the specification is written in a single
notation.<P>

I will use a primitive programming language called &quot;Lox&quot; for illustrative purposes. Lox has a
PRINT statement, an IF with only a THEN clause, a compound statement for combining other statements, and
simple expressions involving integer literals, addition, multiplication, and parentheses.<P>

The first 50 lines of <a href="9603j.htm#012a_0064">Listing One</A> show the concrete syntax in ast
notation. I've used the convention that all grammar symbols in the concrete syntax start with
&quot;Cs&quot;. Before I adopted this and other, similar conventions, I found myself confusing grammar
symbols with attributes of the concrete and abstract syntax.<P>

A grammar symbol followed by an equal sign and more symbols to its right is a production. For example, in
line 27, a PRINT statement, denoted by grammar symbol <I>CsPrintStmt</I>, consists of the literal
characters <I>'PRIN</I><I>T</I><I>' </I>followed by an expression, denoted by <I>CsExpr</I>, which is
defined by the production beginning on line 36. <P>

Alternative right-hand sides are enclosed between &quot;&lt;&quot; and &quot;&gt;&quot; and separated
by commas. Each alternative can have its own name ahead of an equal sign. For example, a statement
(<I>CsStmt</I>, line 26) can be either a PRINT statement, an IF statement (<I>CsIfStmt</I>, line 28) or a
compound statement (<I>CsCompoundStmt</I>, line 32). The names for the alternatives are optional in ast,
and they are not necessary for defining the syntax. However, they will be needed later to build an AST.<P>

<h3><a name="012a_005d">Rex <a name="012a_005d"></h3><P>

Together, cg and lalr can generate an LALR parser. In addition, from the same input, cg generates the boring
but voluminous part of a scanner specification in the language rex, namely, all the tokens of fixed spelling
such as &quot;BEGIN&quot; and &quot;;&quot;.<P>

The rest of the scanner specification must be handwritten; see <a href="9603j.htm#012a_0066">Listing
Two</A>. For my simple language, the only token of variable spelling is an integer literal, specified in line
47 as &quot;Digit +.&quot; Digit is defined in line 39 as any digit, and the &quot;+&quot; is the familiar
&quot;zero or more occurrences of&quot; operator of regular expressions. <P>

When a literal is recognized, lines 48 and 49 call the function <I>LiteralValue</I> to compute its integer
value and store this in attribute <I>CaValue</I>. An attribute is a field attached to a node of a tree that is
not part of the tree structure itself. I use the convention that attributes of symbols in the concrete syntax
start with &quot;Ca&quot;. <P>

Line 50 returns the recognized grammar symbol (<I>To</I><I>k</I><I>Litera</I><I>l</I>, in this case) from
the scanner. The material between braces on these three lines is all target code, handwritten in Modula-2,
which rex copies almost verbatim into the generated scanner. <P>

Function <I>LiteralValue</I> is defined in lines 16 through 34. This also is target code, as the braces around
it show. It converts the characters of the literal into an integer value.<P>

<h3><a name="012a_005e">Building an Abstract Syntax Tree<a name="012a_005e"></h3><P>

Cg can also be used to define and build an abstract syntax tree (AST). <a href="9603j.htm#012a_0068">Listing Three</A> contains an abstract syntax for Lox. Although the
notation is the same as for the concrete syntax, the style is quite different. All the delimiting tokens, such
as IF, &quot;(&quot;, and the like, are absent from the abstract syntax. <P>

The concrete syntax describes the structure of input in string form. There, the delimiters are needed to
determine what construct is next and where its subcomponents begin and end. The abstract syntax, in
contrast, defines a tree rather than a string. Each node in the tree contains a node operator that tells
exactly what construct it is (making delimiter symbols redundant).<P>

You can think of this in object-oriented terms. A grammar symbol such as <I>AsExpr</I> on line 27 is like
an abstract class. (This is a different meaning of &quot;abstract.&quot;) That is, objects (or tree nodes) of
type <I>AsExpr</I> are never actually created. Instead, only nodes of type <I>AsSumExpr</I>,
<I>AsProductExpr</I>, and <I>AsLiteral</I> are created. When it is used on the right side of a rule,
<I>AsExpr</I> can refer to any of these; see line 19. My convention is that &quot;As&quot; begins the
names of abstract-syntax grammar symbols.<P>

Conceptually, there is a tree even for a concrete syntax, usually called a &quot;derivation tree.'' This
form of tree isn't the most desirable for further processing. So parsers usually just discover the
derivation tree one step at a time but never actually construct it in memory. <P>

Given only a concrete syntax, cg and lalr generate a parser that doesn't produce any record of what it has
done. You must add definitions that tell the parser what to produce. I have done this in a way that builds an
AST, according to the grammar in <a href="9603j.htm#012a_0068">Listing Three</A>, while parsing
according to the grammar in <a href="9603j.htm#012a_0064">Listing One</A>. <P>

The construction works by attaching attributes to the nodes of the derivation tree and computing their
values during parsing. In general, the values of attributes of tree nodes can depend on other attributes of
the same node or attributes of its parent, children, or siblings. Thus, information can flow all over the tree
in all directions.<P>

In cases where a tree is actually built, cg can infer the tree-traversal order necessary to evaluate a set of
attributes and generate a set of procedures that traverse in this order while computing the attributes. You
need to specify only the local rules. This is the real power of attribute grammars and evaluator generators
like cg.<P>

However, we are evaluating attributes of the concrete grammar--whose tree is never built--during
parsing, which is done bottom-up. So we are limited to attribute values that depend only on attributes of the
same node and its immediate children. <P>

Fortunately, this is usually adequate for building an AST. The Build module, starting at line 51 of <a href="9603j.htm#012a_0064">Listing One</A>, does this. Lines 71 through 73 declare that every
symbol in the concrete syntax has an attribute named <I>CaAst</I> of type <I>tAst</I>, which is a pointer
to an AST node. <I>CaAst</I> will hold the root of the AST that corresponds to this concrete grammar
symbol.<P>

The attribute declaration just adds <I>CaAst</I> to the previously declared properties of the grammar
symbols <I>CsProgram</I>, <I>CsStmt</I>, and so on. All of their descendent symbols, such as
<I>CsPrintStmt</I>, <I>CsIfStmt</I>, <I>CsSumExpr</I>, and the like will inherit this attribute.<P>

The property SYNTHESIZED tells cg to copy the value of this attribute by default from a child node if no
explicit rule is given to compute it. <P>

Rules for computing the attributes <I>CaAst</I> of the concrete symbols begin at line 77. Take line 112:
The function <I>mAsIfStmt</I> is one of a complete set of functions generated by cg from the AST definition
of <a href="9603j.htm#012a_0068">Listing Three</A>. It allocates and constructs an AST node whose
operator is <I>AsIfStmt</I> and whose children are supplied as parameters. These are just the AST
subtrees for the expression and statement used to build the IF statement.<P>

The notation <I>CsExpr : CaAst</I> in line 115 defines the attribute <I>CaAst</I> of the child node whose
node type is <I>CsExpr</I>. This is target code, as the braces show, but it is not quite Modula-2. <P>

Cg recognizes <I>CsExpr : CaAst</I> as a reference to an attribute and replaces it with the appropriate
expression to access the actual attribute. Cg will have stored this in some temporary place. Also, cg notes
that <I>CaAst</I> of the parent <I>CsIfStmt</I> node depends on <I>CaAst</I> of the <I>CsExpr</I> child
node. It uses this information to determine traversal orders. <P>

In a more complicated language, other attributes would collect information to be stored into AST nodes
whose construction is postponed. The linking of AST nodes also could be more complicated. For example, I
have a C parser and AST builder which inverts the inside-out structure of declarators to match the
right-side-out structure of type specifiers and function formal-parameter lists. <P>

Notice the parameter to the <I>mAsLiteral</I> constructor in line 146. Although <I>AsLiteral</I> has no
children, it has attribute <I>AaInitValue</I>, declared in line 34 of <a href="9603j.htm#012a_0068">Listing Three</A>. <I>mAsLiteral</I> sets the value of
<I>AaInitValue</I>. The constructor call just uses the value of attribute CaValue. <P>

<h3><a name="012a_005f">An Attribute Evaluator<a name="012a_005f"></h3><P>

The Evaluate module, beginning at line 37 of <a href="9603j.htm#012a_0068">Listing Three</A>,
defines an attribute evaluator that works on the AST after it is already constructed. I have written this to
compute the values of Lox expressions, which contain only constants.<P>

Line 46 declares that every <I>AsExpr</I> node has an additional attribute--<I>AaValu</I><I>e</I>--that
<I>AsSumExpr</I>, <I>AsProductExpr</I>, and <I>AsLiteral</I> will inherit. <P>

The property OUTPUT tells cg that the value of this attribute should be explicitly stored in the tree,
because it is expected to be used later. Attribute <I>AaInitValue</I> has the property INPUT, which means
it should have been computed prior to attribute evaluation, during AST building. Cg will optimize the storage
of attributes that are neither INPUT nor OUTPUT by keeping them in local variables of the evaluator, rather
than in the tree nodes.<P>

The rest of the rules in <a href="9603j.htm#012a_0068">Listing Three</A> tell how to compute
<I>AaValue</I> for the various subclass nodes of <I>AsExpr</I>. Line 61 just copies from
<I>AaInitValue</I> to <I>AaValue</I> of the <I>AsLiteral</I> node. This seeming redundancy gives every
<I>AsExpr</I> node a consistent attribute (<I>AaValue</I>), while the <I>AaInitValue</I> is unique to the
<I>AsLiteral</I> node and is computed at a different time.<P>

Cg doesn't know that I intend never to create a node with operator <I>AsExpr</I>, so it insists on a rule to
compute its <I>AaValue</I> attribute. Line 63 provides this.<P>

This attribute evaluator happens to work strictly bottom-up, so I could have done this work at AST build
time. In a more- complicated language, I might need an attribute evaluator that traverses the tree in
complex ways.<P>

<h3><a name="012a_0060">Tree Transformations<a name="012a_0060"></h3><P>

Puma generates procedures that match patterns in trees. Once a pattern is matched, a new tree can be
constructed and used in many ways: for checking type compatibility, computing result types of functions,
or transforming a tree. <P>

<a href="9603j.htm#012a_006a">Listing Four</A> is a simple tree transformer that folds the IF
statement in Lox. Since all expressions are evaluated, it is possible to decide whether the THEN clause
should be executed. If so, the IF statement can be replaced by just the THEN clause.<P>

To avoid deallocation, I copy all tree nodes that could possibly have changes in their subtrees. Expressions
can't have any subordinate changes, so I reuse them in place.<P>

Most of the functions and rules in <a href="9603j.htm#012a_006a">Listing Four</A> simply make
copies of AST nodes. The pattern at line 42 is interesting: It matches an <I>AsIfStmt</I> whose first child
is an <I>AsExpr</I> whose first component (attribute <I>AaValue</I>) has value zero. <P>

The pattern also binds local identifier <I>ThenStmt</I>, the second child of the <I>AsIfStmt</I>.
<I>ThenStmt</I> is used in the pattern replacement in line 46. This is just a <I>Fold</I> done on the THEN
clause. <P>

<h3><a name="012a_0061">Odds and Ends <a name="012a_0061"></h3><P>

In addition to the generators I've just described, Cocktail includes other useful components. All
host-platform-dependent functions are collected in a single library. These routines can be modified as
necessary to make all the Cocktail tools run on a particular machine. I have installed (by recompiling)
Cocktail on two flavors of UNIX, without change to the portability library.<P>

There also is a modest library of functions likely to be useful in a translator program, including the
generators themselves, which use the library. Simple examples are manipulation and storage of
variable-length strings and hashed symbol-table mapping of variable-length strings to a compact series of
integers.<P>

There are translator programs between lex and rex and between yacc and lalr. Mtc is a good Modula-2-to-C
translator that produces amazingly readable code for a source-to-source translator. I have used mtc to
bootstrap fairly large bodies of Modula-2 code to a platform for which I didn't have a handy Modula-2
compiler. <P>

There also is a fair-sized collection of example scanners and parsers for various programming languages.
The commercial version has an expanded set, including difficult languages such as Fortran. <P>

For the examples in this article, 300 lines of handwritten input code to the various Cocktail tools generated
3700 lines of Modula-2 code. This ratio is consistent with the ratio I've achieved on realistic-sized
projects. Some of this might not be used in a particular application and some is bigger than handwritten
code, but there is a high gain to be had.<P>

Using Cocktail means writing very high-density code. There is a lot of meat in a small space. It is tiring, but
it gives so much leverage, you can afford to take more breaks and still finish a project much faster. It's
like a diesel running 87,000 miles in three months. But for some reason, I don't have the same &quot;steam
fan's&quot; nostalgia for the old system of handwriting translator code. <P>

<h3><a name="012a_0062">For More Information<a name="012a_0062"></h3><P>

Delorie's GCC port to DOS is available at grape.ecs.clarkson.edu in the /pub/djgcc directory. Free versions
of Cocktail (with source and documentation) are available at
ftp://ftp.ira.uka.de:/pub/programming/cocktail/ and
ftp://ftp.unistuttgart.de/pub/unix/programming/compilerbau/ (including a DOS version using DJGPP). <P>

<P>

<h4><a name="012a_0063"><a name="012a_0064">Listing One<a name="012a_0064"></h4><pre>
 1     
 2     /* Concrete syntax */ 
 3     
 4     PARSER Parser 
 5     
 6     RULE
 7     
 8       START = CsProgram . 
 9     
10     /* Terminal symbol: */ 
11     
12       TokLiteral : 
13         [ CaValue : CARDINAL ] 
14         { CaValue := 0 ; } . 
15             
16     /* Main grammar: */ 
17     
18       CsProgram = CsStmt .
19     
20       CsStmtPlus
21         = &lt; CsStmtPlusLast = CsStmt .
22             CsStmtPlusMore 
23               = CsStmt ';' CsStmtPlus . 
24           &gt; .
25     
26       CsStmt
27         = &lt; CsPrintStmt 
28               = 'PRINT' CsExpr .
29             CsIfStmt
30               = 'IF' CsExpr
31                 'THEN' CsStmt .
32             CsCompoundStmt  
33               = 'BEGIN' CsStmtPlus 'END' . 
34           &gt; . 
35     
36       CsExpr
37         = &lt; CsSimpleExpr = CsTerm .
38             CsSumExpr = CsExpr '+' CsTerm . 
39           &gt; . 
40     
41       CsTerm
42         = &lt; CsSimpleTerm = CsFactor .
43             CsProductTerm = CsTerm '*' CsFactor .
44           &gt; . 
45     
46       CsFactor
47         = &lt; CsLiteral = TokLiteral .
48             CsParenthesizedExpr = '(' CsExpr ')' . 
49           &gt; .
50     
51     MODULE Build
52     
53     /* Actions to build AST. */ 
54     
55     PARSER
56     
57     GLOBAL
58       { FROM Ast IMPORT 
59           AstRoot , tAst 
60           , mAsProgram 
61           , mAsStmtStarNone , mAsStmtStarAnother 
62           , mAsPrintStmt , mAsIfStmt
63           , mAsCompoundStmt , mAsSumExpr
64           , mAsProductExpr , mAsLiteral ;
65       }
66     
67     PROPERTY /* Disable implicit INPUT */
68     
69     DECLARE 
70     
71       CsProgram , CsStmt , CsStmtPlus 
72       , CsExpr , CsTerm , CsFactor
73         = [ CaAst : tAst SYNTHESIZED ] .
74     
75       /* Storing Final tree. */ 
76     
77       CsProgram
78         = { CaAst
79               := { CaAst 
80                      := mAsProgram
81                          ( CsStmt : CaAst ) ; 
82                    AstRoot := CaAst ;
83                  } ; 
84           } . 
85     
86       /* Linking statments into lists. */
87     
88       CsStmtPlusLast
89         = { CaAst
90               := mAsStmtStarAnother
91                    ( mAsStmtStarNone ( ) 
92                    , CsStmt : CaAst
93                    ) ;
94           } . 
95     
96       CsStmtPlusMore
97         = { CaAst
98               := mAsStmtStarAnother
99                    ( CsStmtPlus : CaAst
100                    , CsStmt : CaAst
101                    ) ;
102           } . 
103     
104       /* Building statement nodes. */ 
105     
106       CsPrintStmt
107         = { CaAst
108               := mAsPrintStmt
109                    ( CsExpr : CaAst ) ;
110           } .  
111                    
112       CsIfStmt
113         = { CaAst
114               := mAsIfStmt
115                    ( CsExpr : CaAst 
116                    , CsStmt : CaAst
117                    ) ;
118           } .  
119                    
120       CsCompoundStmt
121         = { CaAst
122               := mAsCompoundStmt
123                    ( CsStmtPlus : CaAst ) ;
124           } .  
125     
126       /* Building expression nodes. */
127                    
128       CsSumExpr
129         = { CaAst
130               := mAsSumExpr
131                    ( CsExpr : CaAst
132                    , CsTerm : CaAst
133                    ) ;
134           } . 
135     
136       CsProductTerm
137         = { CaAst
138               := mAsProductExpr
139                    ( CsTerm : CaAst
140                    , CsFactor : CaAst
141                    ) ;
142           } . 
143     
144       CsLiteral
145         = { CaAst
146               := mAsLiteral
147                    ( TokLiteral : CaValue ) ;
148           } . 
149     
150     END Build 
151     
</pre>
<h4><a name="012a_0065"><a name="012a_0066">Listing Two<a name="012a_0066"></h4><pre>
 1     
 2     /* Handwritten part of scanner spec. */
 3     
 4     SCANNER Scanner 
 5     
 6     EXPORT 
 7       { FROM Positions IMPORT tPosition ; 
 8         INSERT tScanAttribute 
 9       } 
10     
11     GLOBAL
12       { INSERT ErrorAttribute } 
13     
14     LOCAL
15     
16       { PROCEDURE LiteralValue ( ) : CARDINAL 
17     
18         ; VAR I , Value : CARDINAL ; 
19         ; VAR String : Strings . tString ; 
20         ; BEGIN
21             GetWord ( String ) 
22           ; Value := 0 
23           ; FOR I := 1 
24               TO Strings . Length ( String ) 
25             DO
26               Value 
27                 := Value * 10 
28                    + ORD ( Strings . Char 
29                              ( String , I )
30                          )
31                      - ORD ( '0' )
32             END 
33           ; RETURN Value 
34           END LiteralValue ; 
35        }
36     
37     DEFINE
38      
39       Digit = {0-9} .
40     
41     START Literal 
42     
43     RULE
44     
45       INSERT RULES #STD# 
46     
47       #STD# Digit + 
48          : { Attribute . TokLiteral . CaValue
49                := LiteralValue ( ) ;
50              RETURN TokLiteral ;
51            } 
52     
</pre>
<h4><a name="012a_0067"><a name="012a_0068">Listing Three<a name="012a_0068"></h4><pre>
 1     
 2     /* Abstract syntax */ 
 3     
 4     TREE Ast VIEW Ast 
 5     
 6     RULE
 7     
 8       AsProgram = AsStmt .
 9     
10       AsStmtStar
11         = &lt; AsStmtStarNone = . 
12             AsStmtStarAnother
13               = Next : AsStmtStar 
14                 Stmt : AsStmt . 
15           &gt; . 
16     
17       AsStmt 
18         = &lt; AsPrintStmt 
19               = AsExpr .
20             AsIfStmt
21               = AsExpr AsStmt .
22             AsCompoundStmt  
23               = AsStmtStar . 
24           &gt; . 
25     
26       AsExpr
27         = &lt; AsSumExpr 
28               = Left : AsExpr 
29                 Right : AsExpr . 
30             AsProductExpr 
31               = Left : AsExpr 
32                 Right : AsExpr .
33             AsLiteral 
34               = [ AaInitValue : INTEGER ] . 
35           &gt; . 
36     
37     MODULE Evaluate 
38     
39     EVAL Eval
40     
41     PROPERTY  
42     
43     DECLARE 
44     
45       AsExpr 
46         = [ AaValue : INTEGER OUTPUT ] . 
47     
48       AsSumExpr
49         = { AaValue
50               := Left : AaValue
51                  + Right : AaValue ; 
52           } .  
53     
54       AsProductExpr
55         = { AaValue
56               := Left : AaValue
57                  * Right : AaValue ; 
58           } . 
59     
60       AsLiteral
61         = { AaValue :- AaInitValue ; } .
62     
63       AsExpr
64         = { AaValue := 0 ; } . 
65     
66     END Eval 
67     
</pre>
<h4><a name="012a_0069"><a name="012a_006a">Listing Four<a name="012a_006a"></h4><pre>
 1     
 2     /* Transformation specification. */
 3     
 4     TRAFO Trans 
 5     
 6     TREE Ast 
 7     
 8     PUBLIC FoldProgram  
 9     
10     EXTERN Ast , ReleaseAst 
11     
12     GLOBAL
13       { FROM Ast IMPORT ReleaseAst ; } 
14     
15     FUNCTION FoldProgram  
16       ( AsProgram ) AsProgram 
17     
18       AsProgram ( Stmt )
19         RETURN 
20           AsProgram ( FoldStmt ( Stmt ) ) ; . 
21     
22     FUNCTION FoldStmtStar 
23       ( AsStmtStar ) AsStmtStar
24     
25       AsStmtStarAnother ( Next , Stmt ) 
26         RETURN 
27           AsStmtStarAnother
28             ( FoldStmtStar ( Next ) 
29             , FoldStmt ( Stmt ) 
30             ) ; . 
31     
32       Tree RETURN Tree ; . 
33     
34     FUNCTION FoldStmt  
35       ( AsStmt ) AsStmt 
36     
37       AsCompoundStmt ( Stmts ) 
38         RETURN 
39           AsCompoundStmt 
40             ( FoldStmtStar ( Stmts ) ) ; . 
41     
42       AsIfStmt 
43         ( AsExpr ( { 0 } , .. ) 
44         , ThenStmt 
45         )
46         RETURN FoldStmt ( ThenStmt ) ; . 
47     
48       AsIfStmt ( Expr , Stmt ) 
49         RETURN 
50           AsIfStmt 
51             ( Expr  
52             , FoldStmt ( Stmt ) 
53             ) ; . 
54     
55       Tree RETURN Tree ; . 
56     
</pre>
<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
