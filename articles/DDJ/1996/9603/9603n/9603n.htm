<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>MAR96: ALGORITHM ALLEY</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>ALGORITHM ALLEY<a name="0136_0062"><a name="0136_0062"><a name="0136_0060"><a name="0136_0000"></h1><P>

<h2>A Compact Logarithm Algorithm</h2><P>

<h3>John K. DeVos</h3><P>

<P>
<i><a name="0136_0061"><a name="0136_0000">John is an engineer at Ircon, a manufacturer of
optical thermometers. He can be contacted at devos@delphi.com.</i></p><hr><P>

When you become accustomed to high-level languages, it is easy to forget that the whole point of using them
is to free you from worrying about the bare-metal details of processing. In a low-level embedded
environment, however, a language like C can be a reminder of exactly how free from this worry we've
become. In these environments, questions such as &quot;Is this causing the right kind of divide?&quot; and
&quot;Is the For or the While smaller?&quot; crop up regularly. It is also likely that before too long, you
will miss a library routine or two.<P>

This was the situation I faced while calculating the natural logarithm, ln(<I>x</I>), in a program for an
embedded controller; see <a href="9603n.htm#0136_0068">Figure 1</A>. My resources were limited to
internal RAM and PROM, and timing limitations were a significant consideration. An &quot;infinite&quot;
series (the kind a high-level-language library routine probably uses) seemed like a good starting point, but
unfortunately would have required the calculation of a large number of terms to provide accuracy over a
useful range of <I>x</I>. This would have resulted in a large, time-consuming routine.<P>

I suspected, however, that if I could tolerate less-than-stellar accuracy, there might be a compact way to
calculate logarithms. Converting logs to different bases is trivial, and log-base-2, log2(<I>x</I>), is easier
to get at in a binary environment than ln(<I>x</I>) or log10(<I>x</I>).<P>

In my application, it was necessary to evaluate an expression of the form in <a href="9603n.htm#0136_0068">Figure 1</A>. This expression can be rewritten assuming the use of
log2(<I>x</I>), as in <a href="9603n.htm#0136_0069">Figure 2</A>, in which the constant ln(2)
can be included in the constants A and B, making run-time base conversion unnecessary.<P>

<h3><a name="0136_0063">Approximating log2(<I>x</I>)<a name="0136_0063"></h3><P>

In another part of the same program, I needed an exponential function only requiring rough accuracy. The
function was implemented using the equivalence of the expressions 2<I><SUP>x</I></SUP> and
1&lt;&lt;<I>x</I> (one left-shifted <I>x</I> bits). This equivalence suggests that a rough estimate of
log2(<I>x</I>) could be obtained by determining the number of binary digits in <I>x</I>. Refining this idea
slightly reveals that the integer part of log2(<I>x</I>) is equal to the position of the most-significant bit in
<I>x</I>; the least-significant bit (LSB) = 0. I'll refer to this initial estimate as
&quot;L0(<I>x</I>).&quot;<P>

<h3><a name="0136_0064">Error Correction<a name="0136_0064"></h3><P>

<a href="9603d3f3.gif">Figure 3</A> shows that the error between L0(<I>x</I>) and log2(<I>x</I>)
depends on <I>x</I>'s relationship to the surrounding powers of 2 and not its absolute magnitude, suggesting
that an additive correction based on this relative value of <I>x</I> is in order. I would like to report that I
found a correction after some methodical analysis, but the truth is that I guessed a workable solution on the
second try. Trials with linear interpolation showed that the residual error after such a correction was not
only large, but difficult to approximate and therefore difficult to cancel.<P>

An interesting, and in this case useful, property of logarithms is that the slope of a logarithmic curve is
easy to calculate. Instead of using a straight line to interpolate, why not use a slope based on that of the
function you hope to match? Examination of the plot of log2(<I>x</I>) and L0(<I>x</I>) shows that a linear
addition to L0(<I>x</I>) would be about right if the slope used was that of the curve log2(<I>x</I>) at an
&quot;effective&quot; <I>x</I> half-way between <I>x</I> and the power of 2 below it. The slope of
log2(<I>x</I>) is given by <a href="9603n.htm#0136_006a">Figure 4(a)</A> and the effective <I>x</I>
is simply the average of <I>x</I> and 2<SUP>L0(</SUP><I><SUP>x</I></SUP><SUP>)</SUP>; see <a href="9603n.htm#0136_006a">Figure 4(b)</A>. Combining these expressions with the relative
<I>x</I> value of (<I>x</I>-2<SUP>L0(</SUP><I><SUP>x</I></SUP><SUP>)</SUP>) gives the first
correction term C0(<I>x</I>); see <a href="9603n.htm#0136_006a">Figure 4(c)</A>.<P>

After this correction, C0(<I>x</I>) has about the right shape, but is increasingly low as <I>x</I> increases
from one power of 2 to the next. There is also a discontinuity as <I>x</I> approaches each power of 2 from
below. The limit of C0(<I>x</I>) as <I>x</I>-&gt;2<SUP>n</SUP> from below evaluates to 2/(3*ln(2)), so
dividing C0(<I>x</I>) by this factor would make the discontinuity vanish. The resulting expression for the
correction term C1(<I>x</I>) resembles a textbook problem in which a complicated looking expression
evaluates to an integer, as in <a href="9603n.htm#0136_006b">Figure 5(a)</A>, and the first corrected
estimate in <a href="9603n.htm#0136_006b">Figure 5(b)</A>.<P>

<h3><a name="0136_0065">More Error Correction<a name="0136_0065"></h3><P>

A plot of the difference L1(<I>x</I>)-log2(<I>x</I>) shows that the residual error is (conveniently) very
nearly parabolic between powers of 2 with the apex of each curve lying very close to half-way between the
powers of 2; see <a href="9603d3f6.gif">Figure 6</A>. Also, the height of each apex, like the error in
L0(<I>x</I>), is independent of <I>x</I>.<P>

The expression in <a href="1996013a.htm">Figure 7(a)</A> describes a parabola that closely
approximates this residual error, while <a href="1996013b.htm">Figure 7(b)</A> is the twice-corrected
approximation. Since this parabola does not exactly match the actual error, selecting PA to equal the
maximum value of the residual error results in L2(<I>x</I>) having error with a positive average. In my
application, the constant PA was chosen numerically to make the remaining error symmetric in amplitude.
Although the average error over the range of <I>x</I> is nonzero (albeit small), this approach minimizes
the obligatory +/- error spec.<P>

<h3><a name="0136_0066">Implementation<a name="0136_0066"></h3><P>

<a href="9603n.htm#0136_006d">Listing One</A> is the log2(<I>x</I>) routine implemented in
Microsoft Visual C/C++ 1.0. Although this source code works with the Intel iC-96 compiler I use for
embedded development, the embedded version of the routine uses a smaller set of local variables (to
conserve stack space) and is therefore less readable. This routine works for signed integers (2-bytes)
although long integers could be accommodated without much additional code. <a href="9603n.htm#0136_0067">Table 1</A> summarizes the routine's performance.<P>

Although I haven't tested it, I suspect that an algorithm similar to this one could be developed for
floating-point numbers that would probably be faster and smaller (if less accurate) than a library routine or
an algorithm based on a series expansion. Another possible use for such an algorithm is calculating the
square root of <I>x</I>, since <a href="1996013c.htm">Figure 8</A> is true for an arbitrary base
<I>B.</I> <P>

<h4><a name="0136_0067"><B>Table 1:</B> Summarizing the routine's performance.<a name="0136_0067"></h4><P>

<pre>Argument range tested:               3 to 32767
Highest relative error:              @ log2(3) is 0.0153 percent
Lowest relative error:               @ log2(7) is -0.0102 percent
Highest absolute error:              @ log2(10815) is  0.000438
Lowest absolute error:               @ log2(15199) is -0.000514
Average absolute error:              0.000002
RMS absolute error:                  0.000272</pre>

<h4><a name="0136_0068"><B>Figure 1:</B> Evaluating an expression.<a name="0136_0068"></h4><P>

<pre>            A
f(x) = ----------- for constants A, B, or C
        B+C*ln(x)</pre>

<h4><a name="0136_0069"><B>Figure 2:</B> Rewriting the expression in <a href="9603n.htm#0136_0068">Figure 1(a)</A>.<a name="0136_0069"></h4><P>

<pre>            A*ln(2)
f(x) = ------------------
        B*ln(2)+C*log2(x)</pre>

<h4><B><a href="9603d3f3.gif">Figure 3</A>:</B> Linear interpolation.</h4><P>

<h4><a name="0136_006a"><B>Figure 4:</B> (a) Slope of log2(x); (b) average of x and 2<SUP>L0(x)</SUP>; (c) the first correction term C0(x).<a name="0136_006a"></h4><P>

<pre>(a)
        d                1
m(x) = ---(log2(x)) = -------
        dx            ln(2)*x

(b)
       x+(2<SUP>L0(x)</SUP>)
xeff = ----------
           2

(c)
C0(x) = m(xeff)*(x-2<SUP>L0(x)</SUP>)

        2*(x-2<SUP>L0(x)</SUP>)
C0(x) = ----------------
        ln(2)*(x+2<SUP>L0(x)</SUP>)</pre>

<h4><a name="0136_006b"><B>Figure 5:</B> (a) Resulting expression for the correction term C1(x); (b) first corrected estimate.<a name="0136_006b"></h4><P>

<pre>(a)
          (x-2<SUP>L0(x)</SUP>)
C1(x) = 3*----------
          (x+2<SUP>L0(x)</SUP>)

(b)
L1(x) = L0(x)+C1(x)</pre>

<h4><B><a href="9603d3f6.gif">Figure 6</A>:</B> Error in L1(x).</h4><P>

<h4><B><a href="1996013f.htm">Figure 7</A>:</B> (a) Parabola that closely approximates this residual error; (b) twice-corrected approximation.</h4><P>

<h4><B><a href="19960140.htm">Figure 8</A>:</B> Calculating the square root of x.</h4><P>

<P>

<h4><a name="0136_006c"><a name="0136_006d">Listing One<a name="0136_006d"></h4><pre>
/* log2.h  */
/* Prototypes */
long log2K (int);
/* Defines &amp; Macros  */
#define LOG2_ERROR                      666L    /* Impossible result  */
#define BASE_FACTOR                     16384 
#define BASE_SHIFT                      14
#define ERR_C1                          242     /* PA * BASE_FACTOR  */
#define ERR_C2                          726     /* 3 * ERR_C1        */
/* log2K -- Returns the log-base-2 of the argument relative to
BASE_FACTOR. If the parameter is not positive, it returns a defined
impossible result. */
long log2K (int x) {
int j, hiBitPos, C1, C2;
long L0;
        if (x &lt;= 0) return LOG2_ERROR;
/* Zero-order estimate  */
        j = 1;
        while (x &gt;&gt; j++);
        hiBitPos = j - 2;
        j = 1 &lt;&lt; hiBitPos;                      /* j = 2 ^ hiBitPos(x)  */
        L0 = (long)hiBitPos &lt;&lt; BASE_SHIFT;
        if (x == j) return L0;                  /* Catch powers of 2    */
/* First correction */
        C1 = (int)(((((long)x - j) * 3) &lt;&lt; BASE_SHIFT) / ((log)x + j));
/* Second correction */
        j &gt;&gt;= 1;                /* j = 2 ^ (hiBit(x) - 1) */
        C2 = (int)(((long)x * ERR_C1) / j) - ERR_C2;
        C2 = ERR_C1 - (int)(((long)C2 * C2) / ERR_C1);
        return (L0 + C1 - C2);
}
</pre>
<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
