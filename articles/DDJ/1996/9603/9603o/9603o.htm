<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>MAR96: PROGRAMMER'S BOOKSHELF</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>PROGRAMMER'S BOOKSHELF<a name="0141_0064"><a name="0141_0064"><a name="0141_0062"><a name="0141_0000"></h1><P>

<h2>Secrets of Windows 95 Programming</h2><P>

<h3>Lou Grinzo</h3><P>

<P>
<i><a name="0141_0063"><a name="0141_0000">Lou is a programmer, consultant, and technical
writer who lives in Endwell, NY. He is the author of the recently published Zen of Windows 95 Programming
(Coriolis Group, 1995) and can be contacted at 71055.1240@compuserve.com.</i></p><hr><P>

Matt Pietrek, author of <I>Windows Internals</I> and coauthor (with Andrew Schulman and Dave Maxey) of
<I>Undocumented Windows</I> is back. His recently published <I>Windows 95 System Programming
</I>Secrets is a 760-page volume so densely packed with details about the inner workings of Windows 95
that it's hard to believe it was written by someone outside of Redmond. If you're familiar with Pietrek's
earlier books, you may wonder if Secrets is &quot;Undocumented Windows 95,&quot; or if it's more akin
to &quot;Windows 95 Internals.&quot; As it turns out, it's much closer to &quot;Internals&quot; than
&quot;Undocumented,&quot; but it's a more useful and better book than either.<P>

Pietrek gives us only ten chapters, the first clue that he covers topics in exhaustive detail. The chapters
are as follows: &quot;Putting Windows 95 in Perspective;&quot; &quot;What's New in Windows 95;&quot;
&quot;Modules, Processes, and Threads;&quot; &quot;USER and GDI Subsystems;&quot; &quot;Memory
Management;&quot; &quot;VWINKERNEL32386&quot; (Pietrek's contraction of VWIN32.VXD,
KERNEL32.DLL, and KRNL386.EXE); &quot;Win16 Modules and Tasks;&quot; &quot;The Portable Executable
and COFF OBJ Formats;&quot; &quot;Spelunking on Your Own;&quot; and &quot;Writing a Win32 API
Spy.&quot;<P>

After starting off with a good overview of Windows 95 and its place in the Microsoft world, the book begins
its heavy lifting in Chapter 3. <I>Microsoft Systems Journal</I> editor Eric Maffei mentions in the
foreword<B> </B>that <B></B>&quot;Pietrek has a degree in physics. Normally, I don't care about such
biographical material, but in this case, it's surprisingly relevant. Read this book and you'll likely imagine
Pietrek firing up his personal bit accelerator to whack Windows 95 with high-energy ones and zeros,
causing structures and functions, documented and otherwise, to fly out in all directions. Pietrek then
collects the pieces and presents them to the reader in the form of numerous pseudocode listings and detailed
structure definitions. This approach and underlying philosophy explain the strengths and one potential
weakness of this book.<P>

Secrets is packed with details not likely documented anywhere else, certainly not to this extent. Some of
my favorites include the following:<P>
<ul>
<li>How to create and run Ring 0 code from within a Ring 3 application program.</li>
<li>How Windows 95 invokes dozens of INT 21h services from 32-bit code, including KERNEL32.DLL.</li>
<li>Thread-local storage (declared via <I>__declspec(thread)</I>, not allocated via <I>TlsAlloc()</I> calls)
is available to a DLL only if it is implicitly loaded by a program.</li>
<li>The presence of Krn32Mutex, another mutex besides the now-infamous Win16Mutex, which apparently
controls access to certain parts of the kernel (although Pietrek only mentions it in passing).</li>
<li>KERNEL32 functions that can be blocked by the Win16Mutex, even though Microsoft says this isn't the
case.</li>
</ul>
The biggest eyebrow raiser of all is that Windows 95 fudges the &quot;free system resource&quot;
numbers. At boot time, Windows takes a snapshot of its resources and then biases all ensuing calculations;
&quot;80 percent free system resources&quot; no longer means 80 percent of <I>all</I> resources but 80
percent of what was free after the system booted and already used part of the total.<P>

You get the idea. A complete listing of the goodies would fill several pages.<P>

There's one drawback to Pietrek's approach, however. Secrets is almost entirely descriptive, and it
sometimes leaves the reader to draw conclusions. For example, Pietrek talks about the mechanisms for
locating .DLL-resident routines by name or by export ordinal. He says it's more efficient to use ordinals
instead of function names when establishing linkage between an .EXE and a .DLL, since no system memory is
needed to store the list of names. This is true as far as it goes, but it overlooks one of the truly perverse
situations that can trip up a Windows program--an .EXE and .DLL that don't agree on the mapping of ordinals
to functions. For example, if a .DLL is changed after its matching .EXE is built and the .DLL now assigns the
ordinal 5 to <I>Fred()</I> instead of <I>Barney()</I>, the application can accidentally call <I>Fred()</I>,
even though its source refers to the function as <I>Barney()</I>. Given that programs are often used with
the wrong .DLLs in the real world, this can lead to disaster. Secrets is an excellent scientific treatment but
offers little advice on application engineering. In all fairness, such coverage isn't the book's intent, either
stated or implied, but it's something readers should keep in mind as they watch Pietrek crack Windows 95
like a walnut.<P>

At a time when most Windows programmers are struggling just to stay current with the latest releases of
compilers, frameworks, and third-party libraries, it's natural to ask what place an &quot;under the
covers&quot; book has on our already sagging shelves. While not directly justifying his book, Pietrek
himself addresses this issue on page 184, where, after detailing some of the hoops one of his sample
programs had to jump through, he says: <P>

<cite>The &quot;black box&quot; approach to programming that Microsoft wants us to take is nice when
writing &quot;Hello World&quot; programs, but it fails miserably when attempting to write anything other
than toy applications.</cite><P>

I couldn't agree more. Microsoft is largely responsible for making the creation of robust, intelligent, and
accommodating 32-bit Windows programs as tough as it is. The Win32 documentation seems vast, almost
luxurious, until you begin serious work and you discover its shortcomings, like the fact that extended error
codes aren't documented, and numerous APIs are documented either incorrectly or so poorly that you must
burn precious time testing them to see how they really work (or debugging your code once you, or your
users, see that your assumptions were wrong). This sorry situation creates a genuine need for third-party
books that fill in the gaps. Secrets provides so much solid information and does it in such an enjoyable and
readable fashion that, even at $50.00, it's easily one of the best titles you can add to your Windows
shelf.<P>

<B>Windows 95 System Programming Secrets</B><P>

Matt Pietrek<P>

IDG Books Worldwide, 1995<P>

759 pp., $49.95 <P>

ISBN 1-56884-318-6<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
