<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>MAR96: LETTERS</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>LETTERS<a name="00fc_0001"><a name="00fc_0001"></h1><P>
<h3><a name="00fc_0002">C++ Standards<a name="00fc_0002"></h3><P>
Dear <I>DDJ</I>,<P>
I was disappointed by Al Stevens' &quot;C Programming&quot; column in the January 1996 issue, at least the part that dealt with C++.  <P>
Al starts out lamenting the short comment period that the C++ Standard committee allowed. I agree with his sentiment, but unfortunately, if the rest of his comments on C++ are any indication of what the committee would have had to put up with, then I am afraid I side with the committee.<P>
First there was <I>ifstream::read</I> and <I>ofstream::write</I>. Maybe the length parameter should be type <I>size_t</I> instead of <I>int</I>, but <I>ifstream/ofstream</I> are supposed to read/write &quot;characters&quot; from files, therefore, having the other parameter be a <I>char</I><I>*</I> (instead of a <I>void</I><I>*</I>) seems appropriate to me. In C++, the correct way to read/write objects to/from an <I>fstream</I> is to define <I>operator&gt;&gt;</I> and <I>operator&lt;&lt;</I> for the class, not just arbitrarily cast things to either <I>void</I><I>*</I> or <I>char</I><I>*</I>.<P>
Then Al brings up &quot;A New <I>for</I> Statement.&quot; I stood up and cheered when I read that the committee had changed the scope of a loop index declared in the first expression of the for statement. The fact that the committee had the guts to fix something that was clearly wrong--in spite of the whining about breaking code that they were undoubtedly going to get from hackers who have been exploiting this hole in the language--gave me confidence that the standardization effort was going to give us something worthwhile. For years, my own coding style guide has had a sentence that reads &quot;If you need access to the loop index outside of the loop, then declare it OUTSIDE OF THE LOOP.&quot; The suggestion that this change breaks a lot of code does not move me. Locating all the for statements that need to be changed, and moving the declaration, is a straightforward mechanical exercise.<P>
Finally, there is the &quot;<I>enum</I> as a Type&quot; problem. I will admit that my reading of the April 1995 draft has not always been correct, but this case seems straightforward enough. An <I>enum</I> is a type; it is not an arithmetic type; and the increment operator can only be applied to arithmetic types (or pointers other than <I>void</I><I>*</I>). So I have to say that it seems that Visual C++ 4.0 has got it right. More importantly, this is logically what you would expect. In the general case, enumeration constants do not have to be monotonically increasing, uniformly spaced, or even discrete. Therefore, there is no logical meaning for increment when applied to a variable of enumeration type. Again, I am sure this breaks a lot of code since the committee went to the trouble of specifying increment for type <I>bool</I> (I can not understand the appeal of writing <I>f++;</I> instead of <I>f = true</I><I>;</I>). Unfortunately, the code was broken anyway, all the committee has done is make the compiler vendors flag it as an error.<P>
Maybe it was being forced to write Cobol for two years, but I just do not understand the apparent mentality of programmers who think that minimizing the number of characters used in the source somehow produces better programs. The real problem with the C++ standard is not going to be fixing all the code it breaks, but convincing all the latent C programmers that there still are enough language loopholes left in C++ that they can use to write programs. <P>
Jack W. Reeves<P>
76217.2354@compuserve.com<P>
<I>Al responds</I>: First: So, <I>fstream</I> objects are meant for character input and output only? Why do you suppose the specification includes the <I>ios::binary</I> open mode? And, overloaded insertion/extraction operators are the only correct way to read and write data? Makes you wonder why they included the read and write member functions. Sorry, we'll have to disagree on that one. Second: I'm glad that you like the new for statement declaration rules. I'm sorry that you think I'm a whining hacker because I like the old way. We disagree on both halves of that issue. The old way worked and was okay, and, to paraphrase a former president, &quot;I am not a whining hacker.&quot; Thirdly: I agree that <I>enum</I>s could be a type, and do not mind that the rules might have changed, but I disagree that the specification is clear and unambiguous about it. So, you get two thumbs down and a horizontal thumb. But this exchange is about language-feature preferences--yours and mine. Programmers are expected to engage in civil disagreement about those kinds of issues. The point of the original piece, however, was to use those arguments, not merely to express my opinions about them, but also to show how the committee applies the broken code position when it suits their purposes and ignores it when it does not.<P>
Heed these reflections from a proud &quot;latent C programmer&quot; and former Cobol practitioner of many more than two years. When you take a stand and &quot;side with the committee&quot; against anyone who calls into question their policies and decisions, remember this: There are no sides to be taken. When the air clears and the specification is set in stone, there will not be winners and losers. We will all be in this together.<P>
<h3><a name="00fc_0003">Dateline Again<a name="00fc_0003"></h3><P>
Dear <I>DDJ</I>, <P>
I have not programmed in Basic since I installed OS/2 almost three years ago and discovered REXX, so I am not about to comment on the algorithms Homer Tilton presented in his January 1996 letter to the editor. In addition, I have not programmed calendar conversions since my article &quot;Calendar Conversions&quot; was published in the late (lamented) <I>Programmer's Journal</I> (November/December 1990). The Basic program presented therein was for compiled Basic only, as it required long integers (not available in the interpreters then available) and used a separately compiled module of conversion subroutines. It did not require splitting the year on April Fool's Day. The program would calculate the day-of-week and Julian Day number for any date following January 1, 4713 b.c. for the Julian calendar; or following October 15, 1582 for the Gregorian calendar (the first day that calendar system was in use, anywhere), and the equivalent date in the other calendar system (if valid), starting from whichever calendar system was specified as an input parameter.<P>
Just for the fun of it, I dug up my archived DOS-source code for that program (written for Basic PDS 7) and recompiled it to an OS/2 executable file. When I gave it the input parameter of 1/1/-4713, the program told me that Julian date January 1, 4713 b.c. was a Monday, that it was Julian Day 0, and that the equivalent Gregorian calendar date was invalid. So, Homer's calendar for January, 4713 b.c., as shown in his letter, is correct.<P>
Murray Lesser<P>
Murray.Lesser@f347.n109.z1.fidonet.org<P>
<h3><a name="00fc_0004">Crypto Attacks<a name="00fc_0004"></h3><P>
Dear <I>DDJ</I>,<P>
Bruce Schneier's article &quot;Differential and Linear Cryptanalysis&quot; (<I>DDJ</I>, January 1996) is the best I've read on that topic. He really has a gift for writing.<P>
Dorothy Denning<P>
denning@cs.cosc.georgetown.edu <P>
<h3><a name="00fc_0005">Netscape Animation<a name="00fc_0005"></h3><P>
Dear <I>DDJ</I>,<P>
In his article &quot;Animation Using the Netscape Browser&quot; (<I>Dr. Dobb's Sourcebook on Internet and Web Development</I>, November/December 1995), Andrew Davison forgot a minor point: Netscape must be set to verify documents every time, or this will not work--Netscape will pull the documents from the cache rather than from the server.<P>
Ed Carp <P>
Dallas, Texas  <P>
ecarp@netcom.com<P>
<h3><a name="00fc_0006">Executable Content<a name="00fc_0006"></h3><P>
Dear <I>DDJ</I>, <P>
I was interested to see the dates listed by Michael Doyle in his January 1996 <I>DDJ</I> letter to the editor. I too saw many demonstrations of executable content. The most memorable and vivid was an e-mail message I received from Keith Ohlfs in 1991 (he's the guy who made all those cool icons at NeXT). When I opened his e-mail message, a set of Display PostScript commands executed that: <P>
<ul>
<li>Had an animation of Keith jump out of my e-mail viewer,</li>
<li>Had him rollerblade across my screen, beeping as he bounced off the windows I had open,</li>
<li>Before he left my screen he shot a ball out of his mouth that expanded to the size of my e-mail window,</li>
<li>When the ball had stopped spinning, it displayed his new e-mail address.   </li>
</ul>
Keith always did have a flair for coolness. This example seems to meet all of the prior art criteria: sending a message across the Internet, the content executing on my PC. Display PostScript is a stack-based language that has support for threads, libraries, and the like. Maybe Adobe should be awarded a patent on executable content!  <P>
Thor Heinrichs-Wolpert  <P>
Victoria, B.C., Canada <P>
twolpert@ca.oracle.com <P>
<h3><a name="00fc_0007">More on Color Quantization<a name="00fc_0007"></h3><P>
Dear <I>DDJ</I>,<P>
My congratulations to Dean Clark on his well-written article, &quot;Color Quantization Using Octrees&quot; (<I>DDJ</I>, January 1996). As the author noted, the octree algorithm and Paul Heckbert's popularity and median-cut algorithms are those most commonly used for color quantization.<P>
However, there are many other color quantization algorithms that have been presented in the computer science, image display, and photographic-sciences literature. Some offer better time or space performance, and others are optimized for quantizing color-video sequences. Interested readers can download a comprehensive bibliography of some 70 color quantization algorithm references as CQUANT95.ZIP from http://www.ledalitecom/library/cgis.html, or via anonymous ftp as /pub/doc/cquant95.Z from hobbeslbl.gov.<P>
Ian Ashdown<P>
iashdown@ledalite.com <P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
</BODY></HTML>
