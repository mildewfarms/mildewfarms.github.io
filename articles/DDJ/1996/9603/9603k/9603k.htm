<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>MAR96: Using JavaScript to Create Interactive Web Pages</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>Using JavaScript to Create Interactive Web Pages<a name="012c_005c"><a name="012c_005c"><a name="012c_005a"><a name="012c_0000"></h1><P>

<h2>A cross-platform object scripting language</h2><P>

<h3>Tom Tessier</h3><P>

<P>
<i><a name="012c_005b"><a name="012c_0000">Tom is a student in the engineering physics
department at the University of Alberta, Canada. He can be reached at tessier@ee
.ualberta.ca.</i></p><hr><P>

JavaScript is a cross-platform object scripting language that lets you glue together HTML documents, Java
applets, and Netscape plug-ins on both clients and servers. One way of differentiating between Java and
JavaScript is that Java is typically used by programmers to create new objects and applets, while
JavaScript is used by HTML page authors to dynamically script the behavior of those objects.<P>

Although it was developed jointly by Netscape and Sun, JavaScript (which is based on LiveScript,
Netscape's HTML scripting language) has already been licensed by a number of software companies,
including Spyglass, Oracle, Metrowerks, Sega, Borland, Adobe, and Sybase.<P>

Implemented only within Netscape Navigator 2.0, Beta 2 and up, JavaScript still  is in its very early stages
and is more a complement to ordinary Java applets than a stand-alone replacement. However, even in its
current, primitive form, this scripting language transforms ordinary HTML into a powerful, client-based
interpreter. For example, JavaScript, embedded in a Web page, can recognize and respond to user events
such as mouse clicks, proofread form inputs before sending data off to servers, and more.<P>

JavaScript resembles Java in that support for most of Java's expression syntax and flow-control features
is available, as well as numeric, Boolean, and string types. But unlike Java, which is a compiled language,
JavaScript is executed on the fly by the Netscape interpreter. JavaScript is relatively secure in that no
writes to a user's hard drive can occur. Also, JavaScript programs can be run from any page, without
requiring root or similar file-access privileges. This is perhaps the main advantage of JavaScript--average
users can store complex CGI-like scripts on their current page and still only pay the usual monthly Web
rental fee. <P>

<h3><a name="012c_005d">Using JavaScript<a name="012c_005d"></h3><P>

Take a look at <a href="9603k.htm#012c_0062">Example 1</A> and the resulting page in <a href="1996012e.htm">Figure 1</A>. The <I>&lt;SCRIPT
LANGUAGE=&quot;LiveScript</I><I>&quot;</I><I>&gt;</I> tag is used to initiate the JavaScript session.
Alternatively, a URL filename may be specified by using <I>SRC</I> in the tag <I>&lt;SCRIPT
SRC=&quot;script.ls'</I><I>'</I><I>&gt;</I>. The script is evaluated once after the page loads. Functions,
however, are stored in memory, allowing for repeated execution upon user events. Notice the HTML
comment tag <I>(&lt;</I><I>!</I><I>-</I><I>-</I><I>)</I> within the JavaScript. This prevents older
browsers from dumping the script contents onto the page. Also, the <I>&lt;SCRIP</I><I>T</I><I>&gt;</I>
tag was placed directly after the <I>&lt;HEAD&gt;</I> tag. Since everything between <I>&lt;HEAD&gt;</I>
is loaded first, placing the script tag right after it ensures that the JavaScript code is available before the
user has a chance to trigger any event handlers. Keep in mind that the entire page is loaded before any
script tags are evaluated. <P>

The document object is used in <a href="9603k.htm#012c_0062">Example 1</A>. Although you cannot
create your own objects, the built-in objects are still quite useful. <a href="9603k.htm#012c_0060">Figure 2</A> presents some of the available objects and their
properties, methods, and event handlers, while <a href="9603k.htm#012c_0063">Example 2(a)</A>
illustrates their uses. It is important that you think of treating a form's input text areas as outputs. The
first and second form inputs are used to interact with users, while the last exists solely to provide an
output-text area. This works well if you can get used to using a form input as an output. As you can see in
<a href="9603k.htm#012c_0063">Example 2(a)</A>, event handlers are actually embedded within
normal HTML code, inside the declaration of tags such as &lt;FORM&gt;, &lt;INPUT&gt;, or &lt;A
HREF&gt;. These event handlers only activate when the desired action occurs--a mouse click, mouse over
text area, and the like. &lt;SCRIPT&gt; tags are not required for event handlers.<P>

The <I>onChange</I> handler passes the properties of the calculation text area to a custom restore
function, which acts as the output text area watcher. If the user changes the calculation area, the function
restores the text to its default value and displays a warning. In the <I>onClick</I> handler,
<I>calc</I><I>(f</I><I>orm)</I> is called with the argument <I>this.form</I>. Such an identifier indicates to
pass all form input properties to the desired function, allowing for smaller argument lists. Although not
recommended, all of the required identifiers could have been passed instead, as in <a href="9603k.htm#012c_0063">Example 2(b)</A>.<P>

The <I>eval</I> command in <a href="9603k.htm#012c_0063">Example 2(a)</A> is a built-in function
that evaluates the mathematical expression stored in brackets. There are four different types of built-in
functions, three of which are listed in <a href="9603k.htm#012c_0061">Figure 3</A>. <P>

If you need to change the value of a form object not included in a function-input list, the properties must be
accessed directly. In the case of forms, the properties are referred to as <I>forms[0]</I>,
<I>forms[1]</I>, and so on. For example, referring to a text field named &quot;response&quot; in a
document's third form requires using the object <I>document.forms[2].response</I>. To change the value of
the text in that form, you would do something like <I>document.forms[2].response.value = &quot;New
text</I>.<I>&quot;</I> This type of direct access also is illustrated in <a href="9603k.htm#012c_0063">Example 2(c)</A>. Notice that the <I>restore</I> function has been
replaced with actual JavaScript code, semicolons separating each command. <P>

In its current implementation, JavaScript doesn't offer built-in array creation. You must define your own
&quot;make-array&quot; function to set up the required properties and methods as in <a href="9603k.htm#012c_0064">Example 3</A>.<P>

<h3><a name="012c_005e">Creating an Interactive Multiple-Choice Program<a name="012c_005e"></h3><P>

<a href="9603k.htm#012c_0067">Listing One</A> utilizes all of the concepts I've discussed so far. When
executed, the program presents the client browser with an interactive form, asking users to select an
answer out of three options; see <a href="1996012f.htm">Figure 4</A>. In essence, it is a
multiple-choice test. When users select a wrong answer, <I>alert</I> is used to display the correct result.
A counter keeps track of the total number of questions correctly answered.<P>

Note in <a href="9603k.htm#012c_0067">Listing One</A>, that trying to call a function involving
<I>document.write</I> after a script has been loaded is illegal; see <a href="9603k.htm#012c_0065">Example 4</A>. This is the reason why form-text-area inputs are
used as outputs throughout <a href="9603k.htm#012c_0067">Listing One</A>. Also, simply
reloading the JavaScript multiple-choice page into Netscape via Ctrl-R isn't enough to reset the form, since
all default values are changed by the code. You either have to add a Reset button or a link (a link is used in
<a href="9603k.htm#012c_0067">Listing One</A>; if index.html is the name of the JavaScript
testing program, then the page will be reset).<P>

While <a href="9603k.htm#012c_0067">Listing One</A> contains everything within a single HTML file,
there are two other ways to output new questions to the client browser. Both techniques allow for the
creation of dynamic Web pages, whereby new images can be placed alongside new text (and not have all the
text appear in form inputs). But both methods require multiple HTML files to work. <P>

The first technique, easily implemented using the concepts I've presented here, demands a new URL be
loaded every time a radio button is pressed. This involves setting up separate URLs for each question--a
running total of the number of correct answers cannot be maintained without using some CGI. <P>

The second method needs only three HTML files, and allows you to easily keep track of the number of
correct answers. This second technique makes use of a relatively new concept called &quot;frames&quot;
(again available only in Netscape 2.0 and up). Simply by taking advantage of Netscape's ability to share data
between frames and using a &quot;hidden&quot; frame as a temporary storage area, you can compute new
data for the main &quot;display&quot; frame. For example, frame 0 (hidden from the user's view) would
contain a form named &quot;code,&quot; which is just an empty scratch text area. The JavaScript code in
frame 1 must access the code from frame 0 (using <I>parent.frames[0].document.forms[0]. code.value</I>)
and use <I>document.write</I> to display it (first reload the display frame with <I>parent.
frames[0].location = &quot;sameurl</I><I>&quot;</I>). The technique is complicated, and since Netscape's
current implementation of frames and data sharing is very unstable, I won't go into it any further. After
all, it's difficult to debug a page when GPFs randomly occur. In fact, in the current version I am using (2.0,
Beta 4), simply resizing a Netscape window containing frames can crash the system.<P>

<h3><a name="012c_005f">Conclusion<a name="012c_005f"></h3><P>

JavaScript is a powerful, interpreted Web language. Used in conjunction with normal HTML, Java applets,
and CGI, interactive Web content can be vastly improved. Load can be transferred off of Web servers,
easing strains and improving performance. With some imagination and ingenuity, anyone can create exciting
content. Good luck and happy surfing!<P>

<h4><B><a href="1996012e.htm">Figure 1</A>:</B> The Web page resulting from the code in <a href="9603k.htm#012c_0062">Example 1</A>.</h4><P>

<h4><a name="012c_0060"><B>Figure 2: A list of the common document specific objects available in
JavaScript (method = function):</B> (a) window object; (b) document object; (c) form object; (d)
text-element object; (e) radio-button object.<a name="012c_0060"></h4><P>

<pre>(a)
Properties:
    <I>parent </I>-- parent frame.
    <I>frames[index] </I>-- array of frame objects, one per frame.
    <I>frames.length </I>-- number of frame objects in the window.
    <I>status </I>-- enables you to set the message in the status bar at the bottom of the client window.
Example: 
&lt;A HREF=&quot;&quot; onClick=&quot;this.href=getURL()&quot;<P>
   onMouseOver=&quot;window.status='Stay on target'; return true&quot;&gt;<P>
Go!&lt;/A&gt;
Methods:
    <I>alert(&quot;string&quot;) </I>-- pop up a window displaying <I>&quot;string&quot; </I>.
    <I>confirm(&quot;string&quot;) </I>-- pop up a window displaying <I>&quot;string&quot; </I>.
         Returns True if Okay clicked, False, if Cancel clicked.
    <I>prompt(&quot;string&quot;,default) </I>-- pop up a window displaying <I>&quot;string&quot;</I> and prompt the user for input, where default is the default-input value.
Example:
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;inputarea&quot; SIZE=10
onMouseOver=&quot;document.forms[0].inputarea.value= prompt('Enter a number:',0)&quot;&gt;

(b)
Properties:
    <I>forms[index] </I>-- array of form objects, one per form.
    <I>forms.length </I>-- number of form objects in document.
    <I>links[index] </I>-- array of HREF link objects.
    <I>links.length </I>-- number of link objects in document.
Methods:
    <I>write(&quot;HTML&quot;) </I>-- write the raw HTML commands to the current window .
Example:
document.write(&quot;&lt;HTML&gt;&lt;TITLE&gt;Digital Signal Processing&lt;/TITLE&gt;&lt;/HTML&gt;&quot;)
    <I>writeln(&quot;HTML&quot;) </I>-- same as write(), but adds a carriage return.
         to the end.
    <I>clear() </I>-- clears the window.

(c)
Properties:
    <I>action </I>-- string value of the ACTION attribute.
Event Handlers:
    <I>onSubmi</I><I>t</I><I>() </I>-- executed when the form is submitted.
Example:
&lt;FORM action=post onSubmit=&quot;javafunc()&quot;&gt;
Methods:
    <I>submit() </I>-- submits the form.

(d)
Properties:
    <I>name </I>-- the value of the NAME attribute (a string).
    <I>value </I>-- the contents of the field (string).
    <I>defaultValue </I>-- the initial contents of the field (string).
Event Handlers:
    <I>onChange </I>-- executes after the user modifies the text contained within the box.
    <I>onFocus </I>-- executes when input focus enters the field.
    <I>onBlur </I>-- executes when input focus leaves the field.
    <I>onSelect </I>-- executes when something is selected inside the field .

(e)
Properties:
    <I>name </I>-- the value of the NAME attribute (string).
    <I>value </I>-- the value of the VALUE attribute (string).
Event Handlers:
    <I>onClick</I> -- execute when button clicked.
Methods:
    <I>click()</I> -- select a radio button.
Note: <I>click()</I> does not actually click on a radio button, just changes its value to on. It cannot be used to activate an event handler.</pre>

<h4><a name="012c_0061"><B>Figure 3: Three built-in functions (methods) available in JavaScript (these built-in objects do not have event handlers):</B> (a) math object; (b) string object; (c) eval object.<a name="012c_0061"></h4><P>

<pre>(a)
Properties:
    <I>E</I> -- value of the constant E (precision equal to that of a real
number)
    <I>LN10</I><I> </I>-- value of LN 10
    <I>LN2 </I>-- value of LN 2
    <I>PI </I>-- value of the constant PI
    <I>SQRT2 </I>-- value of the SQRT of 2
Methods: (standard math functions)
    abs(value)
    acos(value)
    asin(value)
    atan(value)
    cos(value)
    sin(value)
    tan(value)
    exp(value)
    log(value)
    round(value)
    sqrt(value)
Example:
Math.cos(Math.PI/2) gives 0.
Apply the &quot;with&quot; command when using math functions. This special command allows Math objects to be written without the &quot;Math&quot; reference.
Example:
with Math {
  a = cos(PI/2)
  b = sin(PI/2)
}

(b)
Example:
to define a string, simply write the following JavaScript code:
mystring = &quot;What String Equals&quot;
Properties:
    <I>length</I><I> </I>-- defines the length of a string
Methods:
    <I>substring(i, j)</I><I> </I>-- takes a substring from i to j inside the string
Example:
result = mystring.substring(0,4) gives &quot;What&quot;
    toLowerCase() -- converts mystring to lowercase
    toUpperCase() - converts mystring to uppercase
Example:
result = mystring.toUpperCase gives &quot;WHAT STRING EQUALS&quot;

(c)
eval(expression)  - calculates the result of expression.
&lt;script language=&quot;LiveScript&quot;&gt;
// This function defines an array such that the first
// property, length, (with index of zero), represents
//the number of elements in the array. The remaining
// properties have an integer index of one or greater,
// and are initialized to zero.
function MakeArray(n)   {
   this.length = n;
   for (var i = 1; i &lt;= n; i++) {
     this[i] = 0 }
     return this      }
array = new MakeArray(2);
array[1] = &quot;Apple&quot;
array[2] = &quot;Orange&quot;
var i = 0
while (i &lt; 2) {
    i++
      document.writeln(array[i])   }
&lt;/script&gt;</pre>

<h4><B><a href="1996012f.htm">Figure 4</A>:</B> A typical interactive form written in JavaScript.</h4><P>

<h4><a name="012c_0062"><B>Example 1:</B> A sample HTML file that makes use of the JavaScript scripting language.<a name="012c_0062"></h4><P>

<pre>&lt;HEAD&gt;
&lt;SCRIPT LANGUAGE=&quot;LiveScript&quot;&gt;
&lt;!-- Use a comment to hide the script contents from unsupported browsers.
var n = 19
var max = 100
document.writeln(&quot;Hello world.&quot;)
document.writeln(&quot;Let's count from &quot;, n+1, &quot; to &quot;,
 max, &quot;:&lt;BR&gt;&quot;)
count(n, max)
function count(ninput, maximum)  // count from ninput to maximum and
// display in document
 {
   while( ninput &lt; maximum )
     {
     ninput ++
     document.write(ninput,&quot; &quot;) // write the current value of n, placing a
// space between each number
     }
   document.writeln(&quot;Done writing.&quot;)
 }
// End old browser hiding here. --&gt;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
This is the usual HTML text body.
&lt;SCRIPT LANGUAGE=&quot;LiveScript&quot;&gt;
&lt;!-- hide from old browsers
document.write(&quot;&lt;BR&gt;And this is a link coded into &quot;)
document.writeln(&quot;the body via JavaScript.&quot;)
document.writeln('&lt;A HREF=&quot;http://www.ee.ualberta.ca&quot;&gt;EE Page&lt;/A&gt;')
// --&gt;
&lt;/SCRIPT&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</pre>

<h4><a name="012c_0063"><B>Example 2:</B> A sample form in HTML that uses JavaScript for user interactivity.<a name="012c_0063"></h4><P>

<pre>(a)
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;SCRIPT LANGUAGE=&quot;LiveScript&quot;&gt;
function calc(form)
   {
      form.calculation.value = eval(form.matharea.value)
      form.calculation.defaultValue = form.calculation.value
// and set the default value in case have to restore the
// output textarea (ie: if the user puts some text into it)
    }
function restore(input)
   {
        input.value = input.defaultValue
        alert(&quot;Please do not touch the result window.&quot;)
   }
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;FORM&gt;
Enter a mathematical expression, such as 3.14 + 5 * 20.333 / 40.
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;matharea&quot; SIZE=30&gt;
&lt;INPUT TYPE=&quot;button&quot; VALUE=&quot;Calculate the math&quot; onClick=&quot;calc(this.form)&quot;&gt;
&lt;br&gt;Calculated result:
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;calculation&quot; onChange=&quot;restore(calculation)&quot;&gt;&lt;BR&gt;
&lt;/FORM&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;

(b)
replace
function calc(form)
with
function calc(finalresult, mathinput)
   {
      finalresult.value = eval(mathinput.value)
      finalresult.defaultValue = finalresult.value
    }
replace
&lt;INPUT TYPE=&quot;button&quot; VALUE=&quot;Calculate the math&quot; onClick=&quot;calc(this.form)&quot;&gt;
with
&lt;INPUT TYPE=&quot;button&quot; VALUE=&quot;Calculate the math&quot; onClick=&quot;calc(this.form.
                                       calculation, this.form.matharea)&quot;&gt;

(c)
replace
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;calculation&quot; onChange=restore(calculation)&gt;
with
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;calculation&quot;
onChange='calculation.value=calculation.defaultValue;
alert(&quot;Please do not touch the result window.&quot;)'&gt;
Although not necessary in this case, onChange='document.forms[0].calculation.value=
document.forms[0].calculation.defaultValue;alert(&quot;...
may have been used instead.</pre>

<h4><a name="012c_0064"><B>Example 3:</B> Creating arrays in JavaScript.<a name="012c_0064"></h4><P>

<pre>&lt;script language=&quot;LiveScript&quot;&gt;
// This function defines an array such that the first
// property, length, (with index of zero), represents
//the number of elements in the array. The remaining
// properties have an integer index of one or greater,
// and are initialized to zero.
function MakeArray(n)   {
   this.length = n;
   for (var i = 1; i &lt;= n; i++) {
     this[i] = 0 }
     return this      }
array = new MakeArray(2);
array[1] = &quot;Apple&quot;
array[2] = &quot;Orange&quot;
var i = 0
while (i &lt; 2) {
    i++
      document.writeln(array[i])   }
&lt;/script&gt;</pre>

<h4><a name="012c_0065"><B>Example 4:</B> Illegal code. You cannot write directly to the document after the page has been loaded.<a name="012c_0065"></h4><P>

<pre>&lt;SCRIPT LANGUAGE=&quot;LiveScript&quot;&gt;
function writedoc () {
document.clear()
document.writeln(&quot;&lt;HTML&gt;&lt;BODY&gt;Hi man.&lt;/BODY&gt;&lt;/HTML&gt;&quot;)
 }
&lt;/SCRIPT&gt;
&lt;BODY&gt;
&lt;A HREF=&quot;la.html&quot; onMouseOver=&quot;writedoc()&quot;&gt;Place
mouse over me&lt;/A&gt;
&lt;/BODY&gt;</pre>

<P>

<h4><a name="012c_0066"><a name="012c_0067">Listing One<a name="012c_0067"></h4><pre>
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Sample JavaScript Testing Application&lt;/title&gt;
&lt;script language=&quot;LiveScript&quot;&gt;
&lt;!-- hide this script tag's contents from old browsers
// editable variables 
        var totalnum = 3 // total # of questions
        var totalans = 3 // total # of answers per question (used to
// generate the question/answer array below)
        var correctans = 1 // the question # (from 0 to N-1) of the
// correct answer to the first question. ***NOTE***: Be sure to 
// initialize this to the correct answer of the first question.
// fixed variables: don't touch these
        var count = 0
        var arrayind = 1 // index into the questans array - must
// start at 1 always, since that's where the first array string is
        var rightans = &quot;none&quot;
        var totalright = 0 // total # of questions answered right
// This function defines an array such that the first property, length, (with
// index of zero), represents the number of elements in array. The remaining 
// properties have an integer index of 1 or greater, and are initialized to 0.
function MakeArray(n) {
   this.length = n;
   for (var i = 1; i &lt;= n; i++) {
     this[i] = 0 }
     return this
     }
// formula for # of array elements:
// total number of questions times total answers allowed per question
// + 2 (plus two because have to have a string for the actual
// question itself and for the value indicating the correct answer).
// eval used to convert (totalnum)*(totalans+2) into a number usable
// to pass to MakeArray... need eval since the expression is inside a
// function call (ie: inside the MakeArray call)
questans = new MakeArray(eval((totalnum)*(totalans+2)));
// array for question list (start with question #2 - define question
// one in the document's html code below)
questans[1] = &quot;Pyconuclear reactions are:&quot;
questans[2] = &quot;reactions which require high density.&quot;
questans[3] = &quot;reactions which depend on heat.&quot;
questans[4] = &quot;reactions which require low density.&quot;
questans[5] = 0 // correct answer here is &quot;reactions which require
// high density&quot; (list answers from 0 to ans#-1)
questans[6] = &quot;A white dwarf maintains its compact shape via:&quot;
questans[7] = &quot;coulombic repulsion.&quot;
questans[8] = &quot;fermi neutron pressure.&quot;
questans[9] = &quot;fermi electron pressure.&quot;
questans[10] = 2 // correct answer: &quot;fermi electron pressure.&quot;
// end of editable questions. Don't change the below (just the text
// displayed at the end of the test)
questans[11] = &quot;The test is complete. Thank you.&quot;
questans[12] = &quot;&quot;
questans[13] = &quot;&quot;
questans[14] = &quot;&quot;
questans[15] = 255 // correct answer: none
// create new form outputs in response to mouse click on a radio button
function checkout(form, questionnum)
{
 if ( count &gt; totalnum) // if user clicks a radio button after the
// test is complete, display an alert
  {
 alert('To return to the main page, click on &quot;Return to Main Page.&quot;')
  }
 else
  {
    if ( questionnum == correctans) // if the currently selected
// question is the correct response, say so
        {
                totalright++
                alert(&quot;Correct.&quot;)
        }
     else // if wrong answer, display the correct one
      {
       if ( correctans == 0)
        { rightans = form.answer1.value }
       if ( correctans == 1)
        { rightans = form.answer2.value }
       if ( correctans == 2)
        { rightans = form.answer3.value }
       alert(&quot;Incorrect. The right answer is:\n&quot;+rightans)
      }
    count++ // increment count so can goto next question
    if ( totalright == 1) // if only one right, make sure use the
// word &quot;answer&quot; instead of the plural form &quot;answers&quot; (To Appease the
// Pro Literacy Net Movement)
     {
      form.completed.value = &quot;You have completed &quot;+count+&quot; of &quot;+
totalnum+&quot; questions, with &quot;+totalright+&quot; correct answer.&quot;
     }
    else
     {
      form.completed.value = &quot;You have completed &quot;+count+&quot; of &quot;+
totalnum+&quot; questions, with &quot;+totalright+&quot; correct answers.&quot;
     }
    form.completed.defaultValue=form.completed.value // and set the
// default value for the completed text area to the same as the current
// value (in case user enters garbage into the completed text
// area, so can restore it)
// increment arrayind after each use below
        form.question.value = questans[arrayind++]
        form.question.defaultValue=form.question.value // and set the
// default value to the new value in case the web user clicks on the
// actual Question text and changes it... so can restore the new 
// values from the questans array
        form.answer1.value = questans[arrayind++]
        form.answer1.defaultValue=form.answer1.value
        form.answer2.value = questans[arrayind++]
        form.answer2.defaultValue=form.answer2.value
        form.answer3.value = questans[arrayind++]
        form.answer3.defaultValue=form.answer3.value
        correctans = questans[arrayind++] // and set the new correct
// answer
    if ( count == totalnum) // if count = the total # of questions
      {
        count++ // then increment count again so is greater than
// totalnum so can activate the alert above if user tries to click on
// a radio button after the test is complete
      }
  }
}
// restore a form input to its default value if the user messed with it
function restoreval(input)
{
  input.value=input.defaultValue
  alert(&quot;Please click on the radio buttons only.&quot;)
}
&lt;!-- done hiding from old browsers --&gt;
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;JavaScript Multiple Choice Test&lt;/h1&gt;
&lt;form method=&quot;post&quot;&gt;
&lt;TEXTAREA name=&quot;question&quot; rows=1 cols=50 wrap=soft onChange=
&quot;restoreval(question)&quot;&gt;
Question 1: When our star (Sol) dies it will most likely become:
&lt;/TEXTAREA&gt;
&lt;BR&gt;
&lt;BR&gt;
&lt;BR&gt;
&lt;LI&gt;&lt;INPUT TYPE=&quot;radio&quot; onClick=&quot;checkout(this.form, 0)&quot;&gt;
&lt;!-- parameter this.form means pass all parameters from this whole 
form to the checkout JavaScript function. The second parameter 
indicates the question # the user clicked on (from 0 to (Number of 
questions)-1) --&gt;
&lt;TEXTAREA name=&quot;answer1&quot; rows=1 cols=50 wrap=soft onChange=
&quot;restoreval(answer1)&quot;&gt;
A black hole.
&lt;/TEXTAREA&gt;
&lt;BR&gt;
&lt;BR&gt;
&lt;LI&gt;&lt;INPUT TYPE=&quot;radio&quot; onClick=&quot;checkout(this.form, 1)&quot;&gt;
&lt;!--&lt;input name=&quot;answer2&quot; size=40 value=&quot;Mary Lou&quot;&gt;--&gt;
&lt;TEXTAREA name=&quot;answer2&quot; rows=1 cols=50 wrap=soft onChange=
&quot;restoreval(answer2)&quot;&gt;
A white dwarf.
&lt;/TEXTAREA&gt;
&lt;BR&gt;
&lt;BR&gt;
&lt;LI&gt;&lt;INPUT TYPE=&quot;radio&quot; onClick=&quot;checkout(this.form, 2)&quot;&gt;
&lt;!--&lt;input name=&quot;answer3&quot; size=40 value=&quot;Harry Fesie&quot;&gt;--&gt;
&lt;TEXTAREA name=&quot;answer3&quot; rows=1 cols=50 wrap=soft onChange=
&quot;restoreval(answer3)&quot;&gt;
A neutron star.
&lt;/TEXTAREA&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;TEXTAREA name=&quot;completed&quot; rows=1 cols=50 wrap=soft onChange=
&quot;restoreval(completed)&quot;&gt;
You have completed 0 of 3 questions, with 0 correct answers.
&lt;/TEXTAREA&gt;
&lt;/form&gt;
&lt;br&gt;
&lt;br&gt;
&lt;LI&gt;&lt;A HREF=&quot;index.html&quot;&gt;Return to main page.&lt;/A&gt;
&lt;/body&gt;
&lt;/html&gt;
DDJ
</pre>
<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
