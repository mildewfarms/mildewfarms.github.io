<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>SP 96: Programming with M</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>Programming with M<a name="026f_00d2"><a name="026f_00d2"><a name="026f_00d0"><a name="026f_0000"></h1><P>

<h2>Extending Visual Basic for high-performance transaction processing</h2><P>

<h3>Dan Shusman</h3><P>

<P>
<i><a name="026f_00d1"><a name="026f_0000">Dan, an engineer with InterSystems, previously worked at the Laboratory of Computer Science at Massachusetts General Hospital, the birthplace of the M language.</i></p><hr><P>

As the modern day successor to MUMPS, M is an ANSI-standard application-development environment incorporating a programming and data-manipulation language and integrated database. M was traditionally used to complement SQL by providing an extra dimension of data-access control that can prove especially useful in select, high-volume, transaction-processing applications. M's direct-access approach to data lets you exert greater control over performance issues, thereby letting you manage update concurrency at a finer level of granularity. For example, M database structures can be designed to support field-level locking and the ability to frame a transaction (TSTART ... TCOMMIT) to include only those database structures involved in processing the current transaction. You can also control the physical proximity of related data, such as grouping header and line-item data together in processing invoice or order data. <P>

Conversely, SQL abstracts data structures from the programmer, so that the function of database administration (DBA) is more centralized. By optimizing the physical data model, the database administrator strives to optimize performance across a breadth of programs. This philosophical center-of-control difference is one key reason why M is more commonly used by application developers than by end-user organizations and why M applications exhibit very good performance, operational, and cost-of-ownership characteristics. Whether deployed by an application developer or end-user organization, performance is, to a large degree, a function of direct program control and M system processes--not DBA activity. DBA functions still exist but are not dominated by database-tuning activities.<P>

<h3><a name="026f_00d3">M: Past and Present<a name="026f_00d3"></h3><P>

Starting in the mid-1970s, MUMPS gained widespread use in health-care applications. M evolved from the need for mainframe-like transaction-processing applications for autonomous departmental computing. M is an ANSI/FIPS/ISO/JIS (Japan Industrial Standard) applications environment and is accepted by the ANSI SQL Standards committee as a host language for embedded SQL (ESQL). M integrates a programming language and database into a single application-development environment. It is common to access the same data with both SQL and M. Indeed, M and SQL data accesses can even be mixed within the same programs. As a result of the integrated programming/database standard, M-based programs are highly portable across operating platforms. M is most commonly used on UNIX and Windows, but it can also be found in DOS, VMS, and other platforms. At the same time, M is an environment particularly suited to high-volume, online transaction-processing applications.<P>

M database structures are implemented as highly optimized B-tree structures on disk. To the application programmer, the database presents itself as user-designed, multidimensional arrays (&quot;globals&quot; in M parlance). All database designs (hierarchical, network, relational, and so on) are supported, and the design is under the control of the application developer. The ANSI/MDC X11.1-1990 specification of the M language component describes 21 commands, 17 intrinsic functions, and 7 intrinsic variables and reserves a &quot;namespace&quot; for vendor-specific extensions to the ANSI specifications. (The next M ANSI standard specification is now in the formal acceptance stage.) Additionally, there is a full complement of unary, arithmetic binary, numeric- and string-relational, pattern-matching, and concatenation operators. The ANSI standard also describes extrinsic functions and user-authored variables. M data typing is variant. A type is applied based on the context in which the data is referenced. Both private routine and database structures are dynamically allocated, supporting both scalar and array structures. All structures are of variable length. Arrays support numeric and string subscripting, and allocation of these structures is sparse--only those nodes defined by application logic exist. <P>

A complete description of M is beyond the scope of this article. However, <a href="9613e.htm#026f_00d9">Table 1</A> presents a summary of ANSI M's operators, commands, and intrinsic functions and variables. (You can obtain a complete copy of the ANSI specification by contacting the M Technology Association.) <P>

M is implemented by a variety of commercial vendors as well as academia. Many  facilities are associated with each implementation of M, including networking (two- and three-tier client/server and peer-to-peer), system-management facilities (bulletproof database, concurrent read/ write incremental backup), application libraries and generators, debuggers, relational/SQL implementations describing M databases (supporting such APIs as the ODBC), and a host of evolving technologies (object orientation, for instance).<P>

<h3><a name="026f_00d4">M Benefits<a name="026f_00d4"></h3><P>

The major benefit of M for the programmer is increased direct control over data structures. In M, you can define data in terms of multidimensional arrays that map to an intended transaction process. It is easy to represent data in a hierarchical, network, or relational model. Because M provides direct control over logical data structures, a &quot;flat relational structure&quot; can be implemented. In any case, the M relational data dictionary provides a superimposed relational view of this same data. In this regard, M is identical to most relational DBMS products. After describing a developer-designed M data structure in the Open M relational data dictionary, the application developer will see in the M environment all characteristics expected of relational DBMS products.<P>

The relational model is optimized for change. It excels at serving unanticipated information requirements, such as the ad hoc query. It is ideal for decision support systems (DSSs), executive information systems (EISs), and data-warehousing applications. However, the relational model can present significant challenges to high-volume transaction processing of complex data structures. M gives you an alternative, one that increases programmer control over key performance considerations such as concurrency, dependency, and data proximity. <P>

<h3><a name="026f_00d5">Extending Visual Basic<a name="026f_00d5"></h3><P>

To contrast SQL with M in a complex client/server transaction environment, consider a banking database containing banking products (checking, loans, mortgages, safe deposit, savings, credit cards, and investments) and customers (who individually or jointly may use several of the bank's products). Each product has multiple accounts. Each account may have multiple owners and many transactions a month. There are complex relationships between products, customers, transactions, and accounts. Aggregate transaction rates and data volumes can be very high, and security and accuracy are critical. <P>

Representing an integrated banking model as a set of database tables is not trivial. Achieving acceptable performance can be even more daunting--both for online processing, where customers conduct transactions at a teller or an ATM, and for overnight batch runs, where voluminous data must be processed in a narrow time window. <a href="9613e.htm#026f_00dc">Figure 1</A> is a metadescription of the tables involved in the scenarios demonstrating Open M and SQL.<P>

<a href="9613e.htm#026f_00e0">Listing One</A> is a portion of a Visual Basic front-end application. The code shows the typical method of using SQL statements to retrieve data. <a href="9613e.htm#026f_00de">Listing Two</A> is the same program using M. As the user enters characters into a combo box, customer names starting with those characters populate the combo box. During the <I>Form_Load</I> event, <a href="9613e.htm#026f_00e0">Listing One</A> retrieves all rows into the combo box. By setting the <I>Sort</I> property of the combo box to True, Visual Basic automatically sorts the list of names. SQL provides a perfectly acceptable scripting mechanism for this, and performance should not be an issue as long as the number of rows being retrieved is reasonable for the application configuration (available memory, network bandwidth, server performance, and so on). As the number of rows grows larger, however, it becomes more difficult to get the database to load in one shot, and repetitive queries against the server are required.<P>

Note in <a href="9613e.htm#026f_00de">Listing Two</A> that having the data structures under the control of the application developer allows logical partitioning of data to suit the application. This also permits clustering of tables to any depth by using multidimensional array characteristic of M globals. The number and performance of JOINS are a function of the data structure. <I>Inherent'Natural'</I> ASCII collation of data in Open M globals (for English-speaking markets; other collation schemes are available for other markets) provides ordering of rows, and newly inserted data is automatically collated. This also allows for finer granularity in locking, transaction-processing control, and distribution of data. This improves database throughput by, for example, allowing data to serve concurrently as both a primary and index key.<P>

I've taken liberties with the M code in <a href="9613e.htm#026f_00de">Listing Two</A> to assist those unfamiliar with M programming. The code is logically and syntactically correct but deoptimized for comprehensibility. Many commands and programming techniques that could have been used for this exercise were avoided for this reason.<P>

<a href="9613e.htm#026f_00da">Table 2</A> provides a quick description of the M commands used in <a href="9613e.htm#026f_00de">Listing Two</A>, while <a href="9613e.htm#026f_00db">Table 3</A> describes the data structures (restated in Open M globals). In this database structure, the numeric and string-collation characteristics of Open M globals facilitate access to the upright data through its primary key or through a foreign key. The structures used here are simple: Each record is described as a collection of columns whose names are self descriptive. In this simple structure, data for a record is treated as a string with a caret (^) delimiting each column. The design of the global structure is analogous to defining a table in another DBMS environment. <a href="9613e.htm#026f_00de">Listing Two</A> is actually implemented in InterSystems' Visual-M, in which the Open M language and database are directly accessible to Visual Basic. With Visual-M, M and Basic are colleague languages. VB controls are registered with M and are programmatically introduced by an underscore character. <P>

<h3><a name="026f_00d6">When to Use M<a name="026f_00d6"></h3><P>

You can access the same data with either M or SQL. M provides both the &quot;physical layer&quot; and its own &quot;intermediate logical representation layer.&quot; M also efficiently implements SQL tables, which are considered the &quot;logical layer.&quot; Therefore, you are not forced to make a systemic choice between access alternatives. <P>

Although, relative to SQL, M provides access that appears closer to the physical layer, data in M is still accessed at a very high level of programming--far above the level of disk pages, B-trees, and the like. M data is accessed using multidimensional arrays that provide associative memory and flexible, convenient data organization, where memory and disk allocation are dynamic and automatic.<P>

SQL's strengths clearly lie in data analysis, decision support, and ad hoc queries. For very complex data structures and demanding transaction-processing requirements (high volumes, large databases, or critical response times), M's level of control provides generally better performance. <P>

Many programming requirements will lie between the two polarities for which SQL and M are each optimized. In this middle ground, a wide variety of factors affect the choice.<P>

Programmer preference is one obvious factor--experienced SQL programmers may prefer to stick to what they know best. On the other hand, data complexity and performance demands may lead you to choose M over SQL as the data-manipulation language. Because they are interchangeable, both M and SQL can be tried, and empirical evidence (user-specific benchmarks) can guide the final decision.<P>

For many organizations, the interoperability and portability of M's development environment are significant. Standard SQL is available from numerous vendor sources, many of whom emphasize their own proprietary client/server program development environment to build SQL systems. In contrast, client/server architecture is embedded within the ANSI M language itself, which avoids proprietary programming requirements. Additionally, certain M vendors have embraced emerging de facto client/server standards, especially Visual Basic, as key development platforms. M extensions to Visual Basic can add a high-performance, transaction-processing dimension to this widely used GUI system-building tool. The growing market for commercially available Visual Basic custom controls adds acquired component software to the program-development arsenal.<P>

<h3><a name="026f_00d7">Conclusion<a name="026f_00d7"></h3><P>

M's historical focus on transaction processing with complex data in distributed implementations has lead to the development of several key characteristics. First, the programmer is given more direct control of data structures in which to optimize performance. Second, data can be organized to optimally suit program-performance considerations. And, third, requirements for systems and database administration, a key attribute in distributed systems, are minimized compared to traditional DBMS systems.<P>

<h3><a name="026f_00d8">For More Information<a name="026f_00d8"></h3><P>

M Technology Association<P>

1738 Elton Road, Suite 205<P>

Silver Spring, MD 20903-1725<P>

301-431-4070<P>

MTA1994@aol.com<P>

<h4><a name="026f_00d9"><B>Table 1: Summary of ANSI M:</B> (a) selected ANSI M commands; (b) selected M intrinsic functions; (c) selected intrinsic variables; (d) operators.<a name="026f_00d9"></h4><P>

<pre>
Command     Description

<b>(a)</b>

Break       Programmatically interrupt routine execution.

Close       Deallocate and release ownership of a device

             (terminal, file, tape, and so on).

Do          Inititate execution of a program, subroutine,

             extrinsic function.

Else        Introduce lines of code to execute if IF condition

             is not true.

For         Initiate looping.

Goto        Generalize transfer of control.

Halt        Terminate process.

Hang        Suspend for a specified period.

If          Introduce condition which, if true, causes rest of

             line to be run.

Job         Programmatically spawn another M process.

Kill        Remove data structure (scalar or array).

Lock        Programmatically interlock M structures among M

             processes.

New         Initiate variable scoping.

Open        Obtain ownership of a device.

Quit        Terminate execution of routines, subroutines, and

             For loops; unscope variables scoped by New, and

             so on.

Read        Take input from the current device (terminal, tape,

             file).

Set         Assign value to variable.

Use         Specify a device as the current device.

View        Peek into memory.

Write       Direct output to the current device.

Xecute      Execute the results of expression evaluation as M

             code.



<b>(b)</b>

$Ascii      Return the integer ASCII value of the character

             argument.

$Character  Return the ASCII character of the integer argument.

$Data       Return integer values denoting the argument's state

             of definition.

$Extract    Positionally assign or extract a substring from a

             string.

$Find       Locate the position of a substring within a string.

$FNumber    Apply format mask to data.

$Get        Return NULL or data depending on argument's

             existence.

$Justify    Apply justification mask to argument.

$Length     Return character length of argument.

$Order      Return the next subscript value at the current

             subscript level of the argument.

$Piece      Extract or assign a delimited substring from/to a

             string.

$Query      Return the next full local- or global-array

             reference.

$Random     Return a random number.

$Select     Return the evaluated expression of the first of

             many conditions that evaluates to true.

$Text       Return the source code of a program at the reference

             that is the argument of the function.

$TRanslate  Translate positionally one character for another in

             a string.

$View       Peek into memory.



<b>(c)</b>

$Horolog    System date and time.

$Io         Current device.

$Job        Current process identifier.

$Storage    Amount of private process memory available to the

             M process.

$Test       Contains truth value of last executed condition and

             other operations.

$X &amp; $Y     Return the current x- and y-coordinates on a

             cursor-positionable device with some restrictions.



<b>(d)</b>

Arithmetic  +, -, /, \ (integer divide), # (modulo), *, **

             (exponentiation)

Unary       +, -, '(not)

Relational  =, &gt;, &lt;, ] (follows), [ (contains), ]] (sorts after)

Pattern

 Match      ?&lt;argument&gt;

Logical     &amp; (and), ! (or)

Concatenation  _____LINEEND____

</pre>

<h4><a name="026f_00da"><B>Table 2:</B> M commands used in Listing Two.<a name="026f_00da"></h4><P>

<pre>
Command        Function

Semicolon (;)  Introduces a comment.

SET            M's assignment command.

$$upper        Extrinsic function to convert characters to upper

                case.

$LENGTH        M intrinsic function returning string length.

FOR            Looping structure.

$ORDER         Traverses a specified branch of the B-tree

                presented logically as the M global structure

                until programmatically terminated.

QUIT           Terminates the For loop and the DO command.

DO             Calls an external routine, executes a subroutine

                or extrinsic function, and executes a

                &quot;structured&quot; block of code introduced by one or

                more periods denoting the nesting level of the

                block.

$PIECE         Intrinsic function which assists in extracting or

                assigning data from/to a specified delimited

                substring of the argument string. In this

                example, a caret is used as the delimiter: The

                first ^ piece of ^people(&quot;owners&quot;,pkey) is

                &quot;name.&quot;

$GET           Intrinsic function that tests for the existence

                of the argument and returns either the data

                (exists), if true, or NULL (&quot;&quot;), if not.

$EXTRACT       Extracts characters from a string from position

                N through optional position M.

$ASCII         Returns the ASCII value of a character position

                in the argument string.

$CHARACTER     Returns the character for the ASCII value.

</pre>

<h4><a name="026f_00db"><B>Table 3:</B> Data structures (restated in Open M globals). (a) People 'Table'; (b) Account 'Table'<I>;</I> (c) Service_Type 'Table'.<a name="026f_00db"></h4><P>

<pre><b>(a)</b>
^people(&quot;owners&quot;,pkey)=name^date_of_birth^social_security_number
^people(&quot;by_name&quot;,&lt;uppercase_name&gt;,pkey)=&lt;null&gt;     (index)
^people(&quot;owners&quot;,pkey,&quot;accts&quot;,account_number)=&lt;null&gt;    (index)

<b>(b)</b>
^accounts(account_number)=service_type^balance^open_date^close_date
^accounts(account_number,&quot;owners&quot;,pkey)=&lt;null&gt;

<b>(c)</b>
^srvtypes(type_number)=type_name</pre>

<h4><a name="026f_00dc"><B>Figure 1:</B> Metadescription of the tables used in a typical banking application.<a name="026f_00dc"></h4><P>

<pre>Tables: People
       Fields:
         pkey (number,10,unique)
         name (text,25)
         date_of_birth (date,8)
         social_security_number (text,11)
     Primary Key:
         pkey
     Index:  name (uppercase transformation applied)
     Accounts
     Fields:
         account_number (numeric, 10, unique)
         service_type (foreign key -&gt; Service_Types)
         balance (float,10,2)
         open_date (date,8)
         close_date (date,8)
     Primary Key;
         account_number
     Acct_Owners
     Fields:
         account_number (foreign key -&gt; Accounts)
         owner_id (foreign key -&gt; People)
     Primary Key:
         account_number, owner_id
     Index:  owner_id
     Service_Types
     Fields:
         type_number (number, 10, unique)
         type_name (text, 25)
     Primary Key:
         type_number</pre>

<P>

<h4><a name="026f_00df"><a name="026f_00e0">Listing One<a name="026f_00e0"></h4><pre>
&lt;Begin Combo1 KeyPress Event&gt;
' ============================================================
' Bind to database via DSN in data control
' ============================================================
server$=&quot;ODBC;DSN=Server;UID=Username;PWD=Password&quot;
Data1.Connect = server$
' ============================================================
' Set up query to find all rows where name 'starts with' character 
' input by user perhaps under the KeyPress event for Combo1
' ============================================================
query$=&quot;Select Acct_Owners.Owner_ID, Acct_Owners.Account_Number,&quot;
query$=query$ &amp; &quot; People.Name,Service_Types.Type_Name
query$=query$ &amp; &quot; From Acct_Owners, People, Accounts, Service_Types&quot;
query$=query$ &amp; &quot; Where People.Name Like '&quot; &amp; ucase$(combo1.text) &amp; &quot;%'&quot;
query$=query$ &amp; &quot; And People.Pkey = Acct_Owners.Owner_Id&quot;
query$=query$ &amp; &quot; And Account.Account_Number=Acct_Owners.Account_Number&quot;
query$=query$ &amp; &quot; And Service_Types.Type_Number = Account.Service_Type&quot;
query$=query$ &amp; &quot; Order by 3, 2&quot;
' ============================================================
' Go to server to get rows
' ============================================================
Data1.Recordsource=query$
Data1.Refresh
' ============================================================
' Populate Combo Box
' ============================================================
Combo1.Clear
Do while not Data1.Recordset.EOF
    name$=Data1.Recordset.Name
    account=Data1.Recordset.Account
    srvtype$=Data1.RecordSet.Type_Name
    pkey=Data1.Recordset.Primary_Key
    Combo1.Additem name$ &amp; &quot; &quot; &amp; account &amp; &quot; &quot; &amp; srvtype$
    Combo1.ItemData(Combo1.NewIndex)= pkey
    Data1.Recordset.MoveNext
Loop
' ============================================================
' If the text area of the combo box is touched with new input, reexecute query 
' and do loop to recover rows from the database which satisfy the new input.
' If the end-user has double-clicked an item; issue new query to recover all 
' elements of row selected for presentation/manipulation by end-user
' ============================================================
&lt;End Combo1 KeyPress Event&gt;
&lt;Begin Combo1 Double-Click Event&gt;
' ============================================================
' detect which item in the combo box was selected
' ============================================================
selected=Combo1.ListIndex
' ============================================================
' get the row id in the people table for the item selected
' ============================================================
pkey=Combo1.ItemData(selected)
' ============================================================
' recover the info in the combo box to reuse it. piece is a user-written Basic 
' module which returns the portion of a string (1st arg) found between the 
' instances (specified by the 3rd and 4th args) of the delimiter-string 
' (2nd arg)
' ============================================================
x$=Combo1.List(selected)
name$=piece(x,&quot; &quot;,1,1)
account=piece(x,&quot; &quot;,2,2)
srvtype$=piece(x,&quot; &quot;,3,3)
' ============================================================
' issue a query to recover all information to be displayed on the form
' ============================================================
query$=&quot;Select People.Date_of_Birth, People.Social_Security_Number,&quot;
query$=query$ &amp; &quot; Accounts.Open_Date, Accounts.Close_Date, Accounts.Balance
query$=query$ &amp; &quot; From People, Accounts
query$=query$ &amp; &quot; Where People.Pkey = &quot; &amp; pkey
query$=query$ &amp; &quot; And Accounts.Account_Number = &quot; &amp; account
Data1.RecordSource=query$
Data1.Refresh
' ============================================================
' assign recovered information to appropriate controls on the form
' ============================================================
Pname.Text=name$
Pdob.Text=Data1.RecordSet.Date_of_Birth
Pssn.Text=Date1.RecordSet.Social_Security_Number
Pacct_num.Text=account
Pacct_odate.Text= Data1.RecordSet.Open_Date
Pacct_cdate.Text= Data1.RecordSet.Close_Date
Pacct_balance.Text=Data1.RecordSet.Balance
Pacct_srv_type.Text=srvtype$
&lt;End Combo1 Double-Click Event&gt;
</pre>
<h4><a name="026f_00dd"><a name="026f_00de">Listing Two<a name="026f_00de"></h4><pre>
; ============================================================
; get user input from combo box perhaps under the KeyPress event, transform
; to uppercase and get Length 
; $$upper is an extrinsic funtion which performs the work of UCASE$ 
; in Listing 1
; ============================================================
set input=$$upper(_combo1.text)
set inlng=$length(input)
; ============================================================
; initialize scanning variable to start at the string collating just before 
; user input, e.g., if combo1.text=&quot;smith&quot;, then input=&quot;SMITH&quot; and 
; name=&quot;SMITG~&quot; after the following code executes. It sets up to perform 
; the function of the LIKE operator in Listing One's SQL SELECT
; ============================================================
set name=input
set name=$extract(name,1,inlng-1)_$character($ascii(name,inlng)-1)_&quot;~&quot;
; ============================================================
; find all names in the data structure which start with characters input.  
; In Direct Database Access, this code actually does the SELECT, WHERE,
; and ORDER BY work described in Listing One by using Open M's ascii 
; collation, easily clustered tables, and $order function
; ============================================================
for  set name=$order(^people(&quot;by_name&quot;,name)) 
                           quit:$extract(name,1,inplng)'=input  set pkey=&quot;&quot; do
. For  set pkey=$order(^people(&quot;by_name&quot;,name,pkey)) quit:pkey=&quot;&quot;  
                                                             set account=&quot;&quot; do
. . for set account=$order(^people(&quot;by_name&quot;,name,pkey,&quot;accts&quot;,account)) 
                                                             quit:account=&quot;&quot; do
. . . set name=$piece(^people(&quot;owners&quot;,pkey),&quot;^&quot;)
. . . set acctype=$p($get(^accounts(account),&quot;^&quot;))
. . . set srvtype=^srvtypes(acctype)
. . . ; ============================================================
. . . ; The listbox portion of the combo box will hold peoples' names, account 
. . . ; numbers and service type. The DO command is used to execute the 
. . . ; Additem method to place these rows in the combo box.
. . . ; The innermost FOR loop (above) corresponds in a sense to the DO WHILE 
. . . ; loop in Listing One.
. . . ; ============================================================
. . . do _combo1.additem(name_&quot; &quot;_account_&quot; &quot;_srvtype)
. . . set _combo1.ItemAdd(_combo1.newindex)=pkey
. . . quit
. . quit
. Quit
quit
; ============================================================
; As a reminder, the above code is placed in the KeyPress event of combo box.
; If text area is touched with new input, data fetch and processing loop will
; execute again to recover rows from the database which satisfy the new input.
; This processing logic is that of VB and is independent of the 
; scripting/database language: BASIC/SQL vs. M
; ============================================================
&lt;End of the KeyPress Event&gt;
&lt;Begin the Double-Click Event&gt;
; ============================================================
; The following Visual-M code is placed under double-click event of combo box.
; If the end-user has double-clicked an item; a new query is issued to recover
; and display all elements of the row selected.
; First, detect which item in the combo box was selected just as in 
; Listing One but using Visual-M 
; ============================================================
set selected=_combo1.list
; ============================================================
; Now, get the row id from ItemData of the row selected.  Again, using 
; Visual-M
; ============================================================
set pkey=_Combo1.ItemData(selected)
; ============================================================
; recover the info in the combo box to reuse it.  This code uses the 
; $PIECE function emulated in VB by the 'piece' module
; ============================================================
set x=_Combo1.List(selected)
set name=$piece(x,&quot; &quot;)
set account=$piece(x,&quot; &quot;,2)
set srvtype=$piece(x,&quot; &quot;,3)
; ============================================================
; issue M code to recover all information to be displayed on the form and
; display on the form.
; $$date is an extrinsic function to convert internal date format to 
; external format
; $$number is an extrinsic function to convert numbers to a desired 
; external format
; These might be defined in an Open M Include file and would 
; take arguments to define the output format.
; ============================================================
set _Pname.Text=name
; ============================================================
; Open M Direct Database Access is used to recover rows from the database 
; for the people 'table' and the account 'table'. The logic is to recover a 
; row into a private process variable (here 'x') and the assign the data to 
; the appropriate VB control. This code snippet and the one below combine the 
; function of the SELECT query in the Double-Click event of the combo box and 
; the assignments of the resulting data to the VB controls.
; ============================================================
set x=$get(^people(&quot;owners&quot;,pkey))
set _Pdob.Text=$$date($piece(x,&quot;^&quot;,2),&quot;dd/mm/yy&quot;)
set _Pssn.Text=$piece(x,&quot;^&quot;,3)
set _Pacct_num.Text=account
; ============================================================
; recover 'account' row into local M variable and assign to VB controls.
; ============================================================
set x-$get(^account(account))
set _Pacct_odate.Text=$$date($piece(x,&quot;^&quot;,3),&quot;dd/mm/yy&quot;)
set _Pacct_cdate.Text=$$date($piece(x,&quot;^&quot;,4),&quot;dd/mm/yy&quot;)
set _Pacct_balance.Text=$$number($piece(x,&quot;^&quot;,2),&quot;$n.n&quot;)
set _Pacct_srvtype.Text=srvtype
quit
&lt;End Combo Box Double-Click Event)
End Listings
</pre>
<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
