<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>SP 96: LETTERS</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>LETTERS<a name="0259_0001"><a name="0259_0001"></h1><P>
<h3><a name="0259_0002">Quibbles with &quot;Rocket Science Made Simple&quot;<a name="0259_0002"></h3><P>
Dear <I>Dr. Dobb's</I>,<P>
I think Hal Hardenbergh's heart was in the right place when he wrote his article &quot;Rocket Science Made Simple&quot; (<I>Dr. Dobb's Sourcebook</I>, September/October 1995), but his thesis is about eight years too late and now is more wrong than right.<P>
His article discusses the difference between &quot;computer architects&quot; and &quot;chip designers.&quot; The first place where I differ with his viewpoint is on page 53:<P>
<cite>The people who designed the Pentium and the P6 and who are currently designing the P7 are <I>not</I> computer architects. But they're pretty good engineers, based on the results I've seen. I call them &quot;chip designers.&quot;</cite><P>
There are several things wrong with this paragraph. First, even according to Hal's own definition that only one who creates a new instruction-set architecture from a blank sheet is worthy of the name &quot;architect,&quot; the people who designed these machines <I>are</I> architects, whether or not they demonstrated that ability in the machines mentioned. For example, of the three senior architects on the P6, one was a senior architect on the Intel 960 processor, and the other two were senior architects on the Multiflow TRACE VLIW processors. Both of those had new instruction sets.<P>
But that's semantic quibbling. More importantly, the act of creating a new instruction-set architecture is <I>not</I> the most difficult task in designing a computer. It's not easy, but it's easier than realizing that ISA in competitive silicon. At Intel, we call the people who figure out how to do that &quot;microarchitects,&quot; because they are responsible for the microarchitecture. I claim that microarchitecture is where the action really is: superscalar, superpipelining, out-of-order execution, speculative execution, dataflow cores--the choices these people make and the balances they strike among the possibilities have a much larger effect on performance than most ISA choices. (Otherwise the x86 performance would have been left behind long ago, and instead it has gradually caught up to the RISC designs.)<P>
Further, these microarchitects cannot possibly do their jobs well without a complete understanding of overall computer-system design and the software that will run in that environment. In other words, they must know at least as much as the &quot;architects&quot; that Hal acknowledges. By putting too much emphasis on clean-sheet design, Hal distracts the reader from the real battleground: implementations and microarchitectures. That's where the real wizardry is being displayed nowadays.<P>
I have no idea where Hal got the number &quot;30&quot; in conjunction with the P6. P6's Reservation Station (RS) has 20 slots, and the Reorder Buffer has 40. Was he trying to blur the two, and therefore averaged between them to characterize the resulting storage capacity? I don't think that abstraction will work; those two structures have much different functions.<P>
For example, he says &quot;A scoreboard keeps track of everything that's going on.&quot; It most certainly does <I>not</I>. There is no scoreboard; that's part of the beauty of the design. The micro-ops themselves carry the control flow of the program through the machine. It's fundamental to the way the machine works and facilitates the dataflow mechanism built into the RS. Presumably Hal meant the Reorder Buffer, which collects the speculative state from the dataflow engine and reimposes the original program order onto that state. But that's nothing like scoreboarding, which attempts to track the execution state of a machine. In P6, there is no corresponding execution state; everything is speculative until it is retired.<P>
Suggesting that we got register renaming from a paper on register allocation is very far-fetched. I can state with absolute certainty, having read Chaitin's paper, that there was no connection between that work and the P6 register-renaming facility. The basic idea of doing reg renaming is as old as vector machines, meaning at least 25 years old.<P>
Where did Hal get the idea that P6 only speculatively executes up to five branches? Not true at all. P6 doesn't treat branches any differently from other kinds of mops, meaning it could (in principle) fill the Reorder Buffer with currently resolving jumps. The Reorder Buffer has 40 slots. Therefore, P6 can speculate to that depth. (Granted, beyond 8 or 10, there is little performance advantage to this, but it was cleaner to implement the generalized solution that we did.)<P>
&quot;P6 self-optimizes all shrink-wrapped code&quot;? Not hardly. We designed it to run all code well, but good code can always get better results than poor code, and that's still true with Pentium Pro.<P>
<cite>The philosophical design differences underlying the 486, Pentium, and P6 generations have nothing whatever to do with computer architecture and everything to do with chip design.</cite><P>
I submit this is an obsolete view of what CPU designers do nowadays. It has little to do with instruction-set design, but it very much depends on a deep understanding of the entire computer system, and those who perform these tasks deserve the appellation &quot;computer architect&quot; just as much as instruction-set designers.<P>
Bob Colwell <P>
chief architect, Pentium Pro<P>
Intel Corp. <P>
bcolwell@ichips.intel.com<P>
<I>Hal responds:</I> Let's clear the small beer. Along with their C compilers, most readers of this magazine generate code with a conditional branch every seven instructions. With &quot;40 slots,&quot; that's five branches, which is what I wrote. People who read publications with &quot;Transactions&quot; in the title might be interested in 40 consecutive conditional branches.<P>
About optimizing code: I did not mean to imply that the P6 could convert a bubble sort to Quicksort (or to my favorite, Knuth's insertion sort). In that sense you're right, the P6 can't fix bad code. What I meant was that the P6 automatically executes small groups of code in the correct order demanded by register and data dependencies, and that the well-known Pentium optimizations of breaking complex instructions into simple ones are done automatically by the P6.<P>
&quot;[The P6 has] nothing like scoreboarding, which attempts to track the execution state of a machine. In P6, there is no corresponding execution state....&quot; Bob, I assumed that information is maintained within the P6 to let the P6 logic know when register conflicts (and such) have been resolved so that speculatively executed instructions can be discarded or completed. I chose to call this information a &quot;scoreboard,&quot; since that term has been used previously with respect to maintaining the internal state of a CPU. You're the authority, so if you say the P6 doesn't maintain this information, then the reader should accept your assertion. I don't believe it.<P>
Since writing the <I>DTACK Grounded</I> newsletter in the early '80s, I've asserted that there are no new solutions in the microprocessor world. All the problems, and their solutions, were discovered a dozen or more years ago in the mainframe world, and then again in the minicomputer world eight or so years ago. Now you tell me no, some of the solutions are &quot;at least 25 years old.&quot; Thanks, Bob! In the future, I'll quote you often to support a point I thought I was making.<P>
The point of my article &quot;CPU Performance: Where Are We Headed?&quot; (<I>Dr. Dobb's Journal</I>, January 1994) was that the mainframe world never solved the problem of the limit to parallelism in scalar code, so we should not expect the problem to be solved in the microprocessor world either. That article included a graph showing that micros, as exemplified by x86s, were indeed gaining ground on RISCs, just as you state in your letter. Are we having a violent agreement?<P>
I am bemused by your implication that I think the job of computer architect is harder than that of chip designer. I ain't that dumb. When the 8086 ISA was originally developed in 1976 or so, less than a man-year went into that effort. Developing the P6 logic probably required 100 man-years, and that doesn't count the efforts of software folk (for emulation) and process folk.<P>
Now we come to the main point of your letter: Are CPU chip designers &quot;computer architects?&quot; It's well known that garbage collectors prefer to be called &quot;surplus material relocation technicians.&quot; I have no problem with this, because the job description of garbage collectors is identical to that of SMRTs.<P>
It's also well known in hardware circles that (CPU) chip designers would rather have a business card describing them as a &quot;computer architect&quot; than an $8000 raise and a business card that says &quot;chip designer.&quot;<P>
While you tap-dance all around this issue, I'm pleased that you do not flatly assert that chip designers are computer architects. The job description of a computer architect is quite different from that of a chip designer. That's as true today as it was eight years ago.<P>
A country doctor who spends a few weekends building a gazebo is a carpenter on those weekends. This does not mean doctors are carpenters. A very few computer architects may switch to chip designing (in a desperate search for employment; there are precious few new instruction-set architectures being developed these days) but that doesn't mean, as you seem to imply, that chip designers are therefore computer architects.<P>
But it harms no one to call designers &quot;architects.&quot; If it makes the hard-working chip designers happy and saves the company $8000 a head, then by all means give all your chip designers business cards with the title &quot;computer architect.&quot; Has Intel done this?<P>
Your use of the word &quot;worthy&quot; is interesting. If some occupations are worthy, then others are unworthy. I thought Thorstein Veblen and his &quot;invidious distinctions&quot; had gone out of style.<P>
All this aside, I'd like to congratulate you and your P6 chip designers for developing a chip that'll run 32-bit x86 code really fast. It's high time we all climbed out of that 640K ghetto (but I wish there were a 32-bit DOS). Since I occasionally do math modeling and such, I'm especially pleased with the P6's FPU performance. I hope--and expect--to see more of the same in the future.<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
</BODY></HTML>
