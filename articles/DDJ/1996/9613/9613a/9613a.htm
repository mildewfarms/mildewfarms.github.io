<html>
<META NAME="year" CONTENT="1996">
<head>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>SP 96: SQL Access Group's Call-Level Interface</title></head>
<body bgcolor="FFFFFF">
<h1>SQL Access Group's Call-Level Interface<a name="025b_00ca"><a name="025b_00ca"><a name="025b_00c8"><a name="025b_0000"></h1><p>

<h2>An independent interface for database development</h2><p>

<h3>Roger Sippl</h3><p>

<p>
<i><a name="025b_00c9"><a name="025b_0000">Roger is chairman of the SQL Access Group and founder of Visigenic Software. He can be contacted at Visigenic Software, 951 Mariner's Island Blvd., Suite 460, San Mateo, CA 94404, (415) 286-1900.</i></p><hr><p>

The SQL Access Group (SAG) was formed in 1989 to define and promote standards for database portability and interoperability. Initially, the membership roster included database heavyweights Oracle, Informix, and Ingres (now Computer Associates), as well as hardware vendors Digital, Hewlett-Packard, Tandem, and Sun. <a href="9613a.htm#025b_00ce">Table 1</a> lists the current membership roster. The group's initial projects involved developing the draft ISO/ANSI standard for SQL (including the embedded-SQL interface specifications) and a specification for remote data access (RDA). <p>

In 1990, SAG took the lead in developing an SQL-based Call Level Interface (CLI). The CLI SAG is an API for database access, offering an alternative invocation technique to embedded SQL that provides essentially equivalent operations. SAG envisioned an interface that would enable client/server applications to access data stored in heterogeneous relational and nonrelational databases. The interface would be platform, vendor, database, and language neutral. SAG and X/Open published the CLI Snapshot Specification in 1992 as a &quot;work in progress,&quot; and it was adopted for use in commercial software products.<p>

Microsoft helped define the X/Open CLI specification and became the first company to commercialize the CLI specification by shipping Open Database Connectivity (ODBC) 1.0 for Windows in 1992. To create ODBC, Microsoft extended the CLI specification and created a three-layer specification in which the &quot;core&quot; layer corresponds to the SAG CLI. Over the next two years, the CLI specification underwent several transformations, reemerging in 1994 as an X/Open Preliminary Specification. Also in 1994, Microsoft released ODBC 2.0, whose core functionality was still aligned with the SAG CLI. Earlier this year, Microsoft announced that ODBC 3.0 (to be released in 1996) will be fully aligned with both ISO's CLI standard and SAG's CLI Specification. <p>

In March 1995, the CLI was finalized and published as an X/Open Common Application Environment (CAE) specification. CAE specifications are adopted by consensus and are the basis against which suppliers brand their products. The adoption and publication of the CLI as an X/Open CAE specification represents the culmination of five years of cooperative development work within the SQL Access Group. <p>

In the meantime, ODBC has gained broad support in the database industry. All major software vendors--Oracle, Sybase, Informix, Computer Associates, IBM, Gupta, Powersoft, and Borland, as well as more than 140 application-software developers and VARs--have added ODBC support. Many of these vendors also offer proprietary APIs; nonetheless, they see the X/Open CLI specification and ODBC as important to their strategy. In 1994, Microsoft granted an exclusive source-code license to Visigenic Software for porting and licensing the ODBC SDK to non-Windows platforms. As a result, the ODBC SDK is now also available on all major UNIX platforms, as well as OS/2 and Macintosh. <p>

<h3><a name="025b_00cb"></a>A Closer Look at the SAG CLI</h3><p>

The X/Open CLI specification is a standard API for database access that is vendor, platform, and database neutral. It defines a set of functions that a program can call directly using normal function-call facilities. The specification is language independent and includes header files for both C and Cobol. <p>

The CLI specification defines 57 functions that support a rich set of database-access operations sufficient for creating robust database applications, including: <P>
<ul>
<li>Allocating and deallocating handles (eight calls). </li>
<li>Getting and setting attributes (ten calls). </li>
<li>Opening and closing database connections (two calls). </li>
<li>Accessing descriptors (six calls). </li>
<li>Executing SQL statements (nine calls). </li>
<li>Retrieving results (eight calls). </li>
<li>Accessing schema metadata (four calls). </li>
<li>Performing introspection (four calls). </li>
<li>Controlling transactions (two calls). </li>
<li>Accessing diagnostic information (three calls). </li>
<li>Canceling functions (one call). </li>
</ul>
A database application calls these functions for all interactions with a database. The CLI enables applications to establish multiple database connections simultaneously and to process multiple statements simultaneously, depending on the capabilities of the database servers being accessed. <a href="9613a1f1.gif">Figure 1</a> and <a href="9613a1f2.gif">Figure 2</a> show the basic control flow for using the CLI functions. <p>

The X/Open CLI specification was developed with client/server architectures in mind. In fact, the CLI is ideal for this environment, in which the developer often knows little (if anything) about the database at the time the application is written. The X/Open CLI specification defines a set of introspection functions that enable an application to discover the characteristics and capabilities of a particular CLI implementation and of any database server accessed through that implementation. For example, <i>SQLGetTypeInfo</i> lets you find out what data types are supported by a particular server, and <i>SQLDataSources</i> returns a list of available database servers and descriptions. Introspection functions facilitate a technique known as &quot;adaptive programming,&quot; whereby an application adapts its behavior at run time to take advantage of the capabilities of a particular database environment. <p>

<h3><a name="025b_00cc">Processing SQL Statements<a name="025b_00cc"></h3><p>

The X/Open CLI specification, including sample programs and header files, is available directly from X/Open. Listings <a href="9613a.htm#025b_00d0">One</a>, <a href="9613a.htm#025b_00d2">Two</a>, and <a href="9613a.htm#025b_00d4">Three</a> illustrate how the CLI works. <a href="9613a.htm#025b_00d0">Listing One</a> is from a typical database application. Listings <a href="9613a.htm#025b_00d2">Two</a> and <a href="9613a.htm#025b_00d4">Three</a> are the significant portions of functions called by <a href="9613a.htm#025b_00d0">Listing One</a>. <p>

The application allocates memory for an environment handle and a connection handle; both are required to establish a database connection. The <i>SQLConnect</i> call establishes the database connection, specifying the server name (<i>server_nam</i><i>e</i>), user id (<i>ui</i><i>d</i>), and password (<i>pw</i><i>d</i>). The application then allocates memory for a statement handle and calls <i>SQLExecDirect</i>, which both prepares and executes an SQL statement. The <i>SQLGetDiagField</i> call takes advantage of the CLI's ability to interrogate the database server. In this case, it returns a code describing the nature of the SQL statement just executed. With this information in hand, the application calls the user-defined <i>DoSelect()</i> function to process the results of the SQL statement. Finally, the program frees the statement handle, disconnects from the database, and frees the memory previously allocated for the connection and environment handles. <p>

The body of the <i>DoStatement()</i> function in <a href="9613a.htm#025b_00d2">Listing Two</a> is built around a switch statement that processes the results of an SQL statement based on the return value from the <i>SQLGetDiagField</i> call in <a href="9613a.htm#025b_00d0">Listing One</a>. In the case of a SELECT statement, which requires its own complex processing, the function calls another user-defined function, <i>DoSelect(</i><i>)</i>; see <a href="9613a.htm#025b_00d4">Listing Three</a>. In the case of an UPDATE, DELETE, or INSERT statement, the <i>DoStatement()</i> function calls the CLI diagnostic function <i>SQLGetDiagField</i> to find out how many rows were affected by the statement, then calls <i>SQLEndTran</i> to commit the transaction. The function prints one message indicating whether the commit was successful and another giving the number of affected rows.<p>

In the case of any Data Definition Language (DDL) statement, the <i>DoStatement()</i> function first calls the CLI introspection function <i>SQLGetInfo</i> to find out if the CLI implementation being used supports transaction processing for DDL statements. If so, the function calls <i>SQLEndTran</i> to commit the transaction, then prints a message indicating whether the commit was successful. <p>

The <i>DoSelect()</i> function in <a href="9613a.htm#025b_00d4">Listing Three</a> processes the results of an SQL SELECT statement. It is called by the <i>DoStatement()</i> function. First, <i>DoSelect()</i> calls <i>SQLNumResultCols</i> to determine how many columns are in the result set. Then, for each column in the result set, the function calls <i>SQLDescribeCol</i> to get descriptive information about the column (that is, its length, scale, and data type), prints an appropriate row of column headings to the standard output, allocates memory to bind the results, and calls <i>SQLBindCol</i> to establish the bindings. Next, <i>DoSelect()</i> calls <i>SQLFetch</i> to fetch rows from the result set until none are left. For each row, the <i>DoSelect()</i> function prints the column values, followed by a new line. The CLI can provide various types of diagnostic information, such as whether a value is truncated or null; <i>DoSelect()</i> tests for these two conditions and, when they occur, calls the user-defined <i>BuildMessage()</i> function (not shown) to generate appropriate error messages. At the end, the function prints a list of any such error messages. Finally, the application closes the cursor for the statement handle and frees the data buffers. <p>

<h3><a name="025b_00cd">What's Next?<a name="025b_00cd"></h3><p>

The SQL Access Group formally merged with X/Open in 1995. The charters of SAG and X/Open's Data Management Working Group were essentially the same, and X/Open had always edited and published the work of the SQL Access Group. The merger made it possible to eliminate duplicate efforts, reduce costs, and unify development efforts. The X/Open Data Management Technical Committee disbanded, and the X/Open SQL Access Group, now functioning within the X/Open Technical Program, has assumed all of its responsibilities. <p>

SAG is working in close cooperation with ISO on its upcoming SQL CLI specification, which is intended to mirror the X/Open specification. SAG is also actively pursuing the next logical step for the CLI--the development of an X/Open test suite for CLI conformance. Such a test suite will enable developers to verify conformance to the CLI Specification. Development of the test suite should be well underway by the time this article is published. <p>

SAG has already begun work on the next version of the CLI specification. Our mission is to extend and refine the CLI for even more successful interoperability and to define standards that incorporate newer database technologies, including XA transaction processing, stored procedures, BLOBs, triggers, and asynchronous calls. <p>

The efforts of the major standards organizations, including ISO, ANSI, and X/Open, as well as the strategies of all the major players in the database industry, now incorporate the X/Open CLI Specification. Vendors and standards organizations are moving rapidly in the same direction, a direction the marketplace has already validated.<p>

<h4><b><a href="9613a1f1.gif">Figure 1</a>: </b>Basic CLI control flow.</h4><p>

<h4><b><a href="9613a1f2.gif">Figure 2</a>: </b>CLI control flow for processing SQL statements.</h4><p>

<h4><a name="025b_00ce"><b>Table 1:</b> SQL Access Group members.<a name="025b_00ce"></h4><p>

<pre>AT&amp;T
Borland International
Computer Associates
Fulcrum Technologies
Hitachi
IBM
Information Builders
Informix Software
INTERSOLV
Microsoft
Oracle
Progress Software
Sybase
Visigenic Software</pre>

<p>

<h4><a name="025b_00cf"><a name="025b_00d0">Listing One<a name="025b_00d0"></h4><pre>
/* allocate an environment handle */
SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &amp;henv);
/* allocate a connection handle */
SQLAllocHandle(SQL_HANDLE_DBC, henv, &amp;hdbc);
/* connect to database */
if (SQLConnect(hdbc, server_name, SQL_NTS, uid, SQL_NTS, pwd, SQL_NTS) !=
         SQL_SUCCESS)
    return(PrintErr(SQL_HANDLE_DBC, hdbc));
/* allocate a statement handle */
SQLAllocHandle(SQL_HANDLE_STMT, hdbc, &amp;hstmt);
/* execute the SQL statement */
if (SQLExecDirect(hstmt, sqlstr, SQL_NTS) != SQL_SUCCESS)
    return(PrintErr(SQL_HANDLE_STMT, hstmt));
/* see what kind of statement it was */
SQLGetDiagField(SQL_HANDLE_STMT, hstmt, 0, SQL_DIAG_DYNAMIC_FUNCTION_CODE, 
        (SQLPOINTER)&amp;stmttype, 0, (SQLSMALLINT *)NULL);
/* process the SQL statement */
DoStatement(stmttype);
/* free statement handle */
SQLFreeHandle(SQL_HANDLE_STMT, hstmt);
/* disconnect from database */
SQLDisconnect(hdbc);
/* free connection handle */
SQLFreeHandle(SQL_HANDLE_DBC, hdbc);
/* free environment handle */
SQLFreeHandle(SQL_HANDLE_ENV, henv);
</pre>
<h4><a name="025b_00d1"><a name="025b_00d2">Listing Two<a name="025b_00d2"></h4><pre>
switch(stmttype) {
    /* SELECT statement */
    case SQL_DIAG_SELECT_CURSOR:
        DoSelect();
        break;
    /* searched UPDATE, searched DELETE, or INSERT statement */
    case SQL_DIAG_UPDATE_WHERE:
    case SQL_DIAG_DELETE_WHERE:
    case SQL_DIAG_INSERT:
        /* get row count */
        SQLGetDiagField(SQL_HANDLE_STMT, hstmt, 0, SQL_DIAG_ROW_COUNT, 
            (SQL_POINTER)&amp;rowcount, 0, (SQLSMALLINT *)NULL);
        if (SQLEndTran(SQL_HANDLE_ENV, henv, SQL_COMMIT) == SQL_SUCCESS)
            printf(&quot;Operation successful\n&quot;);
        else 
            printf(&quot;Operation failed\n&quot;);
        printf(&quot;%ld rows affected\n&quot;, rowcount);
        break;
    /* other statements */ 
    case SQL_DIAG_ALTER_TABLE:
    case SQL_DIAG_CREATE_INDEX:
    case SQL_DIAG_CREATE_TABLE:
    case SQL_DIAG_CREATE_VIEW:
    case SQL_DIAG_DROP_INDEX:
    case SQL_DIAG_DROP_TABLE:
    case SQL_DIAG_DROP_VIEW:
    case SQL_DIAG_GRANT:
    case SQL_DIAG_REVOKE:
        SQLGetInfo(hdbc, SQL_TXN_CAPABLE, &amp;txn_type, 0, 0);
        if(txn_type == SQL_TC_ALL) {
            if (SQLEndTran(SQL_HANDLE_ENV, henv, SQL_COMMIT) == 
                    SQL_SUCCESS) 
                printf(&quot;Operation successful\n&quot;);
            else 
                printf(&quot;Operation failed\n&quot;);
        }
        break;
    /* other implementation-defined statements */
    default:
        printf(&quot;Statement type=%ld\n&quot;, stmttype);
        break;
}           
</pre>
<h4><a name="025b_00d3"><a name="025b_00d4">Listing Three<a name="025b_00d4"></h4><pre>
/* determine number of result columns */
SQLNumResultCols(hstmt, &amp;nresultcols);
/* display column names */
for (i=0; i&lt;nresultcols; i++) {
    SQLDescribeCol(hstmt, i+1, colname, sizeof(colname), &amp;colnamelen, 
            &amp;coltype, collen[i], &amp;scale, &amp;nullable);
    /* user-defined function to get the display length for the data type */
    collen[i] = DisplayLength(coltype, collen[i], colname);
    printf(&quot;%*.*s&quot;, collen[i], collen[i], colname);
    /* allocate memory to bind column */
    data[i] = (SQLCHAR *) malloc(collen[i]+1);
    /* bind columns to program vars, converting all types to CHAR */
    SQLBindCol(hstmt, i+1, SQL_CHAR, data[i], collen[i]+1, &amp;outlen[i]);
}
printf(&quot;\n&quot;);
/*display result rows */
while (SQL_SUCCEEDED(rc=SQLFetch(hstmt))) {
    errmsg[0] = '\0';
    for (i=0; i&lt;nresultcols; i++)  {
        if (outlen[i] == SQL_NULL_DATA || outlen[i] &gt;= collen[i])
            /* set data text to &quot;NULL&quot; or add to errmsg */
            BuildMessage(errmsg, (SQLPOINTER *)&amp;data[i], collen[i],
                    &amp;outlen[i], i);
        printf(&quot;%*,*s &quot;, outlen[i], outlen[i], data[i]);
    } /* for all columns in this row */
    /* print any accumulated error messages and new line */
    printf(&quot;%s\n&quot;, errmsg);
} /* while rows to fetch */
SQLCloseCursor(hstmt);
/* free data buffers */
for (i=0; i&lt;nresultcols; i++) {
    free(data[i]);
}
End Listings
</pre>
<p>

<p>

<p>

<p>

<p>

<p>

<p>

<p>

<p>

<p>

</body></html>
