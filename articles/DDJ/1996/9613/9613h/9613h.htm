<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>SP 96: 20/20</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>20/20<a name="0280_00d8"><a name="0280_00d8"><a name="0280_00d6"><a name="0280_0000"></h1><P>

<h2>Recycling Windows Controls for Delphi</h2><P>

<h3>Al Williams</h3><P>

<P>
<i><a name="0280_00d7"><a name="0280_0000">Al is a consultant specializing in software development, training, and documentation. He is also the author of Steal This Code! (Addison-Wesley, 1995). You can reach Al at 72010.3574@compuserve.com.</i></p><hr><P>

Remember Nehru jackets, hula hoops, and mood rings? Fads come and (thankfully) go. However, sometimes it's hard to tell what's a passing fad and what's here for the long term. Hey, even telephones, television, and computers were once considered fads. For that matter, who remembers the Cauzin strip reader? Bubble memory? The PS/2?<P>

But then, sometimes fads come back. I've recently seen kids wearing bell bottoms, for instance. Which brings me to Delphi....<P>

Delphi has brought new life to Pascal. Once, Pascal was a major PC language, but C and C++ have crowded it off most developer's PCs. Now that Delphi is one of the more exciting visual-development environments around, Pascal programmers are in higher demand. <P>

If you are using Delphi now, do you have to give up all the controls you use in your C programs? Of course not. Delphi is a complete programming language--you can create controls and link to DLLs as easily as you can with C. There are a few tricks you need to know, but there's not much to it.<P>

With a bit more effort, you can wrap your existing controls with a VCL component, then use them as simply as you use any other Delphi component. The control should reside in a DLL. You can link .OBJ files to your Delphi project, too. These techniques allow you to benefit from Delphi's component architecture without rewriting code. In this installment of &quot;20/20,&quot; I'll examine how you build wrappers for existing controls in DLLs or .OBJ files. <P>

<h3><a name="0280_00d9">The Control<a name="0280_00d9"></h3><P>

The existing C control I wanted to use with Delphi is a simple countdown timer: the <I>TimeCtrl</I> class (the complete source code is available electronically; see &quot;Availability,&quot; page 3). You send the timer a message (TC_SET) to set the number of seconds before the time-out period expires. Then you send a TC_GO message with <I>wParam</I> set to 1 to start the timer; a 0 in <I>wParam</I> suspends the timer. The control sweeps a clock hand around for each second until it reaches zero. The control sends its parent window a special message (TC_TICK) for each second that elapses with <I>wParam</I> set to the current count. When <I>wParam</I> is 0, the countdown is complete. You can also read the current timer value using TC_GETTIME.<P>

In addition to these four messages, the control's DLL defines the <I>TControl_Init()</I> function. This call does nothing; however, if you call it from within your code, you force Windows to load the DLL before your program loads.<P>

If you examine the code for this control you might argue that the countdown isn't truly accurate. It depends on each timer message received to compute the number of seconds. Of course, you can't depend on getting timer messages at exactly the interval you request. However, the intent for this control is to count down the time you have left to do something (cancel an operation, for example). Suppose the system load is so high that timer messages are not getting through to the application. Then the user probably couldn't interact with the system during that time either. So, although the elapsed time may not be correct, for this purpose, it is better to be incorrect.<P>

<h3><a name="0280_00da">The Plan<a name="0280_00da"></h3><P>

Delphi controls derive from the class <I>TWinControl</I>, which provides the base mechanisms for incorporating a window as a Delphi component. Normally, you derive a class from <I>TWinControl</I> (or one of its subclasses) and implement the control's functionality in the new class. In our example, you still need to derive a new class; however, this class will control an existing window--the <I>TimeCtrl</I> window.<P>

Although creating a wrapper class for a control may seem unusual, it isn't. Delphi creates <I>TWinControl</I>s to encapsulate the standard Windows controls (for example, <I>TButton</I>). Indeed, the easiest way to start is to examine the existing code for classes like <I>TButton</I>. To make this work you need to figure out the following: <P>
<ul>
<li>How to send a window a message.</li>
<li>How to handle an incoming message.</li>
<li>Where to tell Delphi what window class to use when it creates the window.</li>
</ul>
<h3><a name="0280_00db">Delphi Message Handling<a name="0280_00db"></h3><P>

Sending messages from a Delphi program is no problem--just use <I>SendMessage()</I> or <I>PostMessage()</I>. Receiving a message seems simple. Any <I>TContro</I><I>l</I>-derived class can contain a function that uses the <I>Message</I> keyword. This function will automatically receive the indicated message. <a href="9613h.htm#0280_00e5">Example 1</A> shows WM_SETFOCUS messages in a form (<I>TForm</I> derives from <I>TContro</I><I>l</I>).<P>

The message-handling procedure must take a single <I>var</I> argument (usually a record type from the <I>Messages</I> unit). By using a specific record type that corresponds to the message, the procedure will parse the message parameters correctly. For example, the <I>TWMActivate</I> record picks apart the <I>wParam</I> and <I>lParam</I> parameters into more-meaningful fields for WM_ACTIVATE messages. If the message has no special record, use the generic <I>TMessage</I> record. You can also define your own records to handle custom messages.<P>

Why does this work? Messages travel a convoluted route before they wind up in your <I>TContro</I><I>l</I>-derived class. All messages for the control go to the <I>WndProc</I> procedure (in the \DELPHI\SOURCE\VCL\ CONTROLS.PAS of the VCL source code). This function does some housekeeping and eventually calls <I>Dispatch</I> to route the message to the appropriate message-handling function. If there is no corresponding message function, <I>Dispatch</I> calls <I>DefaultHandler</I>. Since the <I>WndProc</I> procedure is virtual, derived classes may override it to handle particular messages. To handle a message yourself, you can override <I>WndProc</I> or, better still, define a method with the <I>Message</I> attribute.<P>

<h3><a name="0280_00dc">Inside <I>TWinControl</I><a name="0280_00dc"></h3><P>

To use legacy code, you may need a few items inside <I>TWinControl</I>. The first is the read-only <I>Handle</I> property, which accesses the ordinary window handle for the control. You'll need this almost every time you make a Windows API call.<P>

The biggest problem is how to make Delphi create a window of a specified class. To do this, you need to link the external DLL to your Delphi program and supply the correct class name. If the DLL has a function you call to initialize (the way the timer control does), you'll want to declare the function using the <I>external </I>statement. For example: <I>procedure TControl_Init; far; external 'TCONTROL' name </I><I>'</I><I>TControl_Init';.</I><P>

To load the DLL dynamically, use the <I>LoadLibrary</I> and <I>FreeLibrary</I> calls, just as in an ordinary Windows program.<P>

Once you have the DLL linked in, override the <I>CreatePara</I><I>m</I><I>s </I>procedure to make sure Delphi uses the new class name when it creates the new control. Call the base-class version and then <I>CreateSubClass,</I> which requires two arguments: a <I>TCreateParams</I> record (the one passed into <I>CreateParams</I>) and a class name.<P>

You may also want to override the new component's constructor. Set a reasonable default size using the <I>Width</I> and <I>Height</I> properties. If you don't, the control will be practically invisible when you first drop it on a form.<P>

You can now write properties and methods to control the window class. You can also define <I>const</I> message IDs to facilitate sending and receiving messages.<P>

<h3><a name="0280_00dd">The Wrapper<a name="0280_00dd"></h3><P>

<a href="9613h.htm#0280_00e7">Listing One</A> presents the final wrapper code for the timer control. Several <I>const</I> statements define each of the control's messages. Next, the code defines a <I>TTimeControl</I> class derived from <I>TWinControl</I>. The protected section of this class contains methods to support the <I>Time</I> property (defined later) and the override for <I>CreateParams</I>. The public section defines verbs that send messages to the control (<I>Go</I> and <I>Stop</I>) and overrides the constructor (<I>Create</I>). The class also defines a <I>Time</I> property.<P>

In the implementation section, the code defines an external reference to the DLL function <I>TControl_Init</I>. The <I>SetTime</I>, <I>GetTime</I>, <I>Go</I>, and <I>Stop</I> members simply use the <I>Handle</I> property to send messages to the control. The constructor sets a default size and also calls <I>TControl_Init</I>. Since this function does no actual work, it is safe to call it multiple times.<P>

<h3><a name="0280_00de">Where's the Message Handler?<a name="0280_00de"></h3><P>

You might expect to find a message handler for TC_TICK inside the <I>TTimeControl</I> class, but this isn't the right place for a handler--the message goes to the control's parent window, not the control itself. This is contrary to the way ordinary Delphi controls appear to work.<P>

When you press an ordinary button control, the WM_COMMAND message goes to the button's parent. A Delphi button allows you to intercept this message by setting the button's <I>OnClick</I> property. This only works because <I>TForm</I> (the class that typically receives the WM_COMMAND message) routes the command message back to the originating control (as a CN_COMMAND message). To get this same behavior from a custom control, you'd need to modify <I>TForm</I> or one of its base classes. Alternatively, you could add special code to your program's <I>TFor</I><I>m</I>-derived class.<P>

If you're adding a function to your <I>TFor</I><I>m</I>-derived class anyway, you might as well process the TC_TICK message in that function. While this is odd for a Delphi program, it closely models the work of ordinary controls.<P>

<h3><a name="0280_00df">Building the Control<a name="0280_00df"></h3><P>

To build and install the control, select Install Components from the Options menu. Press the Add button and select the TIMECTL.PAS file. When you close the dialog, Delphi will rebuild the component library including the new component. The TCONTROL.DLL file must be in a directory that appears in your path or Delphi will refuse to load the new component library.<P>

If you make changes to the component, select the Rebuild Library menu item from the Options menu. If you make a mistake and Delphi refuses to load the new library, recover with the backup library file (COMPLIB.~DC). The build can take quite some time. You might want to set the Show Compiler Progress option in the Environment dialog so you can see the progress of the build.<P>

<h3><a name="0280_00e0">Using the New Control<a name="0280_00e0"></h3><P>

<a href="9613h.htm#0280_00e9">Listing Two</A> is an example program called &quot;StartUp&quot; that uses the new control; <a href="9613d3f1.gif">Figure 1</A> is its startup screen. The program manages a list of .BAT files in a specific directory. Since Windows 95 batch files can execute Windows applications, this is a useful program to put in your startup group. When Windows starts, you'll see a list of batch files. You have several seconds to select one or cancel the program. If you select a batch file or the time expires, the selected batch file executes.<P>

StartUp uses an .INI file to control the amount of time it waits, the directory it looks for batch files in, and the default batch file to use. The program is unremarkable in most respects. It uses a standard file list box and a few buttons. All of the INI file settings are in the <I>[config]</I> section. The variables available are:<P>
<ul>
<li>DIR, the directory StartUp searches for batch files.</li>
<li>TIME, the time in seconds to wait for user input.</li>
<li>DEFAULT, the name of the batch file to execute if there is no user input.</li>
</ul>
StartUp uses a <I>TimeCtrl</I> to manage the time-out period. Once you install the <I>TimeCtrl</I> component, you can drop it on a form just like any other control. Here, the control's name is <I>CountDown</I>. There are only a few places the program interacts with <I>CountDown</I>:<P>
<ul>
<li>The form includes the <I>TimeCtl</I> unit in the <I>Uses</I> clause.</li>
<li>During the <I>FormCreate</I> procedure, StartUp reads its INI file, and sets the <I>CountDown.Time</I> property based on the information in the file.</li>
<li>After setting the <I>Time</I> property, the <I>FormCreate</I> procedure calls <I>CountDown</I>'s <I>Go</I> method to start the countdown.</li>
<li>When there is a change to the file list box (<I>FileBoxClick</I>), the program calls the <I>CountDown.Stop</I> procedure. This will allow you to select a file and stop the countdown.</li>
<li>The form incorporates a procedure that uses the <I>Message</I> keyword to intercept TC_TICK (the <I>Tick</I> procedure). When the parameter passed to <I>Tick</I> is 0, the code simulates a button push and calls <I>Close</I> to end the program.</li>
</ul>
<h3><a name="0280_00e1">Linking to Object Files<a name="0280_00e1"></h3><P>

You can also use the <I>external </I>keyword to link to an object file written in another language. Suppose you have an .OBJ file that contains a function named <I>AboutBox()</I> written in C (ABOUTBOX.C is available electronically). If the function uses the Pascal calling convention, you can declare it in your Delphi program this way: <I>function AboutBox(w:HWnd; s:PChar) : Integer; external;</I>.<P>

You also need to link the object file with your program by using the <I>$L</I> directive; for instance, <I>{$L ABOUTBOX.OBJ}</I>.<P>

Delphi sets strict limits on the object files you can use. In particular, all code must be in a segment named CODE, CSEG, or a name ending with _TEXT. Initialized data must reside in a segment named CONST or a name ending with _DATA. Uninitialized data must appear in a segment named DATA, DSEG, or a name ending with BSS.<P>

You can link C code into your Delphi program as long as you are careful about using C library calls. Some C calls (for example, <I>malloc(</I><I>)</I>) require initialization before their use. In a C program, that happens automatically, but in a Delphi program, you probably shouldn't use them. You can use Windows API and Delphi calls freely. If you use a standard C-library function, you'll get a link error that the symbol is undefined because Delphi doesn't search the C run-time library automatically.<P>

To bring the C functions in, extract the .OBJ files from the library (usually CWS .LIB). Those functions may use other functions--it can take a while to get it right. For example, if Delphi complains that <I>_strcat</I> is undefined, you need to generate STRCAT.OBJ. Use TLIB to extract the .OBJ file from the standard library: <I>tlib cws.lib </I><I>*</I><I>strcat.obj.</I><P>

Next, make Delphi link the file <I>{$L STRCAT.OBJ}</I>. After recompiling, you'll need <I>strcpy</I>, so repeat the process.<P>

Here are a few other tips for mixing C code into a Delphi program:<P>
<ul>
<li>Use the small model, but declare all pointers <I>far </I>(for example, LPSTR).</li>
<li>Use the PASCAL keyword to set the Pascal calling convention.</li>
<li>Pass any values you need as parameters.</li>
<li>Be aware that you can step through your C code with the integrated debugger, but you won't be able to inspect variables.</li>
<li>Enable TDW debugging information in both the C program and the Delphi program to use Turbo Debugger. (This only works if Delphi's linker and your copy of TDW agree on version numbers.)</li>
<li>Retrieve the window handle for any control (including a form) using the <I>Handle</I>.</li>
<li>Use the null-terminated string functions and the <I>PChar</I> type for strings.</li>
<li>Thoroughly test all C library functions to ensure they will work apart from a C program. </li>
</ul>
Of course, the example given here doesn't do anything exciting. However, if you had a large C-language algorithm available, being able to link it directly into your Delphi program could save a lot of time and frustration.<P>

<h3><a name="0280_00e2">Recycling Visual Basic<a name="0280_00e2"></h3><P>

If you have existing code in Visual Basic and you want to move to Delphi, Conversion Assistant from EarthTrek (Woburn, MA) may be just what you need. You can save your Visual Basic program as text and pass the MAK file into the Conversion Assistant.<P>

The conversion is not perfect--it won't handle some things, and it does a less-than-perfect job on others. Still, it does quite a bit of work to get you started. Since Delphi can use most Visual Basic controls, programs that rely heavily on VBXs are not a problem. At $149.00, this tool provides a cost-effective first pass at translation. <P>

<h3><a name="0280_00e3">I am Not Al Stevens<a name="0280_00e3"></h3><P>

Contrary to popular rumor, Al Stevens (<I>Dr. Dobb's Journa</I><I>l</I>'s C columnist) and I really are two different people. We even have witnesses who have seen us together in public. Perhaps we should hold a &quot;Name That Al&quot; contest where you win prizes for correctly identifying our pictures. Then again, if you've seen us, it would be too easy--we don't look a thing alike.<P>

<h3><a name="0280_00e4">About 20/20<a name="0280_00e4"></h3><P>

This column launches the first installment of 20/20. In future columns, I'll explore advanced visual-programming techniques for Visual Basic, Delphi, and PowerBuilder. Occasionally, I'll look at some tools off the beaten track--including some for non-Windows platforms.<P>

The complexity of Windows programming, coupled with the pressure to decrease product-development cycle times is fostering an explosion of visual-programming tools. Although current visual-programming environments are impressive, future releases promise to be even better. (If you don't think there's room for improvement, check out NeXT's Interface Builder.)<P>

As the visual-programming milieu changes, you'll read about it here. In the meantime, drop me some e-mail and let me know what you are doing with visual development and what you would like to talk about in future columns. Oh, and tell me if you know where I can trade some bell bottoms for some of those 8-track stereo tapes.... <P>

<h4><B><a href="9613d3f1.gif">Figure 1</A>:</B> The StartUp program's startup screen.</h4><P>

<h4><a name="0280_00e5"><B>Example 1:</B> Automatically receiving an indicated message.<a name="0280_00e5"></h4><P>

<pre>type
  TAWindow = class(TForm)
private
    { Private declarations }
    procedure OnFocus(var Msg : TMessage);
       message WM_SETFOCUS;
       .
       .
       .</pre>

<P>

<h4><a name="0280_00e6"><a name="0280_00e7">Listing One<a name="0280_00e7"></h4><pre>
unit TimeCtl;
interface
uses Messages, Controls, Classes, WinTypes, WinProcs, DsgnIntf;
const
  TC_SET = WM_USER;
  TC_GO = WM_USER + 1;
  TC_TICK = WM_USER + 2;
  TC_GET = WM_USER + 3;
type
TTimeControl = class(TWinControl)
protected
  procedure SetTime(seconds : Integer);
  function GetTime : Integer;
  procedure CreateParams(var Params: TCreateParams); override;
public
  procedure Go;
  procedure Stop;
  constructor Create(AOwner : TComponent); override;
published
  property Time : Integer read GetTime write SetTime;
end;
procedure Register;
implementation
procedure Register;
begin
  RegisterComponents('Samples', [TTimeControl]);
end;
  procedure TControl_Init; far; external 'TCONTROL' name 'TControl_Init';
  procedure TTimeControl.SetTime(seconds : Integer);
  begin
    SendMessage(Handle,TC_SET,seconds,0);
  end;
  function TTimeControl.GetTime : Integer;
  begin
    result:=SendMessage(Handle,TC_GET,0,0);
  end;
  procedure TTimeControl.CreateParams(var Params: TCreateParams);
  begin
    inherited CreateParams(Params);
    CreateSubClass(Params,'TimeCtrl');
  end;
  procedure TTimeControl.Go;
  begin
    SendMessage(Handle,TC_GO,1,0);
  end;
  procedure TTimeControl.Stop;
  begin
    SendMessage(Handle,TC_GO,0,0);
  end;
  constructor TTimeControl.Create(AOwner : TComponent);
  begin
    inherited Create(AOwner);
    Width:=33;
    Height:=33;
    TControl_Init;
  end;
end.
</pre>
<h4><a name="0280_00e8"><a name="0280_00e9">Listing Two<a name="0280_00e9"></h4><pre>
unit Mainunit;
interface
uses
  SysUtils, WinTypes, WinProcs, Messages, Classes, Graphics, Controls,
  Forms, Dialogs, StdCtrls, ExtCtrls, Buttons, FileCtrl, IniFiles, TimeCtl;
type
  TForm1 = class(TForm)
    FileBox: TFileListBox;
    Label1: TLabel;
    ExecuteBtn: TBitBtn;
    BitBtn2: TBitBtn;
    CountDown: TTimeControl;
    procedure ExecuteBtnClick(Sender: TObject);
    procedure FileBoxClick(Sender: TObject);
    procedure BitBtn2Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  private
    { Private declarations }
    procedure Tick(var Msg : TMessage); message TC_TICK;
  public
    { Public declarations }
  end;
var
  Form1: TForm1;
  ini : TIniFile;
implementation
{$R *.DFM}
procedure TForm1.ExecuteBtnClick(Sender: TObject);
var
Buffer : PChar;
Size : Byte;
index : Integer;
ps : String;
begin
index := FileBox.ItemIndex;
if index &lt;&gt; -1 then
begin
  ps := FileBox.Items[index];
  Size := Length(ps);
  Inc(Size);
  GetMem(Buffer,Size);
  StrPCopy(Buffer,ps);
  WinExec(Buffer,SW_MINIMIZE);
  FreeMem(Buffer,Size);
end;
Close;
end;
procedure TForm1.FileBoxClick(Sender: TObject);
begin
Countdown.Stop;
end;
procedure TForm1.BitBtn2Click(Sender: TObject);
begin
Close;
end;
procedure TForm1.FormCreate(Sender: TObject);
var
  dir : String;
  i : Integer;
begin
ini:=TIniFile.Create('STARTUP.INI');
dir := ini.ReadString('Config','Dir','');
if (dir &lt;&gt; '') then
   ChDir(dir);
FileBox.Directory:=dir;
FileBox.Update;
dir := ini.ReadString('Config','Default','');
i := FileBox.Items.IndexOf(dir);
if i = -1 then
  FileBox.ItemIndex:=0
else
  FileBox.ItemIndex:=i;
Countdown.Time := ini.ReadInteger('Config','Time',30);
Countdown.Go;
end;
procedure TForm1.Tick(var Msg : TMessage);
begin
if Msg.wParam=0 then
  begin
  ExecuteBtnClick(Self);
  Close;
  end;
end;
end.
End Listings
</pre>
<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
