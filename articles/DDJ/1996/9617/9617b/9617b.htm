<HTML> <HEAD> <!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<META NAME="year" CONTENT="1996">
<TITLE>Java Sourcebook 96: Server Side JavaScript</TITLE></HEAD> <body bgcolor="FFFFFF"> <P>

<h1>Server-Side JavaScript</h1><P>

<P>

<P>

<h2>Developing Netscape LiveWire applications</h2><P>

<P>

<P>

<h3>Sudhakar Ramkrishnan</h3><P>

<P>

<P> <i>Sudhakar is a software-development engineer for Informix Software's Advanced Technology Group.
He can be contacted at sudha@informix.com. This article is adapted from an article in TechNotes, an
internal Informix publication.</i></p><hr><P>

<P>

Java is an object-oriented programming language that can be used to write portable applications that are
later compiled by the Java compiler. The Java compiler generates bytecodes for the Java Virtual Machine.
An interpreter runs these Java applications using run-time support (the Java run-time environment is
provided with the Netscape and other browsers). When a Java application is embedded within a web page, it
is known as an "applet." Writing applets requires programming experience. <P>

JavaScript, on the other hand, is an object-oriented scripting language that can be written within specified
tags and embedded in an HTML document. It gives HTML authors the ability to write simple programs and
scripts that interact with web-page objects like forms, frames, and applets. In short, JavaScript is neither
a scaled-down version of Java nor a replacement for CGI scripts. It augments both. <P>

JavaScript is interpreted by the browser from the source code. In contrast, Java applets must be
precompiled into a class before use. JavaScript uses built-in extensible objects, but has no classes or
inheritance. JavaScript data types are loosely typed; that is, you don't have to specify a type for a
variable. Moreover, object references are checked at run time (dynamic binding).<P>

<h3>Server-Side JavaScript</h3><P>

Understanding server-side JavaScript is central to developing JavaScript applications. Server-side
JavaScript is a language for developing applications that execute on the server. The Netscape LiveWire
development environment comes with server extensions designed to work with the Netscape Server API
and to run as an integral part of Netscape servers. (This discussion is based on the Netscape LiveWire for
Sun Solaris Beta1 documentation.) The server extensions provide the needed run-time interpreter to
execute scripts on the server.<P>

Server-side JavaScript augments CGI programming and maintains client information across transactions. A
predefined set of objects is included for application development. Built-in functions are also provided to
enhance features such as navigation and input/output. Server-side JavaScript statements are delimited by
the <I>&lt;</I><I>serve</I><I>r</I><I>&gt; </I>and <I>&lt;</I><I>/</I><I>serve</I><I>r</I><I>&gt;
</I>tags.<P>

<a href="9617b.htm#02ae_014e">Example 1</A> is a server-side script that prints the message "hello
world." To print, use a built-in print function on the server side to display values in an HTML format. The
file "hello.html" illustrates the use of the print function.<P>

Next, compile <a href="9617b.htm#02ae_014f">Example 1</A> into a web file and install the program
on the server. Use the command-line compiler to compile and generate a binary file (a bytecode version of
the script); for instance, <I>lwcomp -v -o hello.web hello.html</I>. <P>

Finally, use the Application Manager (included with Netscape LiveWire) to install the web file so that it is
identified by the server. Users can then access the application by providing the URL. The server extension
dynamically creates HTML code based on the statement and sends the HTML to the client.<P>

<a href="199702b0.htm">Figure 1</A> illustrates the steps required for server-side JavaScript to
process a request from a client.<P>

<h3>Maintaining Client Information Across Pages</h3><P>

JavaScript has an object framework that allows for the addition of simple, persistent states that can be
shared across pages, applications, and servers--extending the capabilities of web-based, client-server
applications. The advantage is that users no longer need to keep track of preferences; the application
registers them. <P>

There are a number of concepts central to the JavaScript programming model:<P>

<P>

<B>Objects.</B> Objects are program constructs that have properties and methods. Every object has a
name. Software objects are modeled after real-world objects in the sense that they have a state and
behavior. A database programmer can consider the result of a query as a query object. Objects have
relevance to the programmer's application domain.<P>

<B>Properties.</B> Properties can be thought of as attributes that represent the state of objects, such as
weight, color, taste, and so on.<P>

<B>Property values. </B>Property values can be referred to using the syntax: <I>object.property</I>. For
example, if the result of a database query is considered as an object <I>result</I> and one of the attributes
in the object identifies the number of returned rows as <I>returnedrows</I>, you can access the value and
use it for substitution into a page at a later time. The value returned is always a string. It is also possible
to assign values to properties. For example, <I>result.returnedrow</I><I>s</I><I>=4;</I>. Equivalently, it
is possible to assign the values as <I>resul</I><I>t</I><I>[0</I><I>]</I><I>=4;</I>. The ordering of the
defined properties corresponds to the array element order; see <a href="199702b1.htm">Figure
2</A>.<P>

<B>Methods. </B>Methods are functions associated with an object. A function <I>init_name(name)</I> can
be written to initialize the name of the object associated with the name that is passed. A function definition
consists of the <I>function </I>keyword, followed by the name of the function, a list of arguments
separated by commas and enclosed within parentheses, and finally, the JavaScript statements enclosed in
curly braces; see <a href="9617b.htm#02ae_03c4">Example 2(a)</A>. To convert the function into a
method, associate the function with an object, as in <a href="9617b.htm#02ae_03c4">Example
2(b)</A>. A method can be invoked on an object; see <a href="9617b.htm#02ae_03c4">Example
2(c)</A>. Invoking a method is akin to sending a message to the object.<P>

<h3>LiveWire Object Framework</h3><P>

Netscape's LiveWire object framework provides the predefined objects <I>Request</I>, <I>Client</I>,
<I>Project</I>, and <I>Server</I> for application development. While some of these objects contain
predefined data provided by LiveWire, you retain the flexibility to define properties. These properties
maintain application data; for example, the object can hold the customer number or user ID and transport
these items across pages. The key difference between these objects is the lifetime during which they are
accessible. <a href="9617b.htm#02ae_03c5">Table 1</A> lists all the predefined objects and some of
the accessible default properties. Note that LiveWire objects can be accessed in functions by passing the
above objects as parameters.<P>

<I>Request</I> objects are created by the server for each client request. When users click on the Submit
button or request a URL, the transaction is considered a request. The <I>request</I> object has the shortest
lifetime. The advantage of the <I>request</I> object is that its properties are initialized with some of the
default properties and with parameters such as form variables and URL-encoded variables. The properties
of the <I>request</I> object can be referred to from the moment that the <I>request</I> object is created.
After the server has finished responding to the request, the <I>request</I> object is destroyed.<P>

Consider an HTML form called "new.html," which takes certain attributes about a defect from the user as
input; for example, the priority level of the defect (either 1, 2, or 3). The user clicks on the appropriate
level and then clicks the Submit button. The action part of the form dictates the page that will process the
input. The name of each input element in an HTML form corresponds to a <I>request </I>property. The name
of each request is the name of the field on the associated form. When using CGI as a way to process the
form element, you obtain the parameters from the URL (using the GET method or environment variable
QUERY_STRING), or from the standard input via the POST method. By using the <I>request </I>object, it is
possible to obtain the parameter values in a uniform way. Assume that new.html contains<a href="9617b.htm#02ae_0150"> Example 3(a)</A>. The file insert.html can refer to user input in the
priority field by using <I>request.priority</I>; see<a href="9617b.htm#02ae_0151"> Example
3(b)</A>.<P>

The default properties of the <I>request </I>object are <P>

<P>
<ul>
<li><I>agent</I>, the name and version information of the client's software.</li> <li><I>ip</I>, a property
that provides the IP address of the client.</li> <li><I>method</I>, the HTTP protocol method associated
with the request (GET, POST, or HEAD).</li> <li><I>protocol</I>, the HTTP protocol level supported by the
client's software.</li>
</ul>
<P>

The <I>request </I>object is automatically initialized with the values for the default properties.<P>

It is possible to pass <I>request </I>variables to the URL by appending a question mark. For example, in the
issue-tracking tool application (to be discussed later), this facility helps determine the sorting order for
the defects (priority, issueid, status, and so on).<P>

The ordering is achieved by manually encoding <I>request </I>variables as follows: First, a question mark
is appended, then the variable, equal sign, and the value. Multiple variables can be passed by separating the
variables using the "&amp;" sign. The variables that are encoded as a part of the URL appear as <I>request
</I>properties, initialized with values that have been passed.<P>

For example, in the HTML file view.html, hyperlinks enable users to sort defects in the database. The
<I>request.choice</I> value will be "bypriority" when the <I>request </I>object is created for the URL
request <I>&lt;A
HRE</I><I>F</I><I>=&quot;view.html?choic</I><I>e=</I><I>bypriority&quot;&gt;Priorit</I><I>y</I><I>&lt;</I><I>/A&gt;</I>.
<P>

When an application is accessed by many clients, it is necessary to deal with each client individually, since
the state of each client may be different. In a shopping-cart example, each client can have different sets of
items stacked in a cart. It is also necessary to maintain these client objects between transactions. The
object framework provides a choice of different techniques to deploy an application. The client object is
alive for each subsequent request. Additionally, the client object can be explicitly destroyed.<P>

Often, multiple clients use a common pool of data. The project object provides a means to share an object
among them. When a new application is started, a new project object is created. Correspondingly, when the
application is stopped, the project object is destroyed.<P>

To ensure that multiple clients do not modify shared data at the same time, a locking facility is provided.
This locking provision ensures that only one client may modify a project object at a given time. Other
clients must wait until the client releases the lock. Consider a project involving the creation of a
defect-tracking tool. One of the tool's subcomponents adds newly discovered defects. Each defect has an ID
by which it can be uniquely identified. When multiple clients try to log a new defect, it is first necessary to
ascertain that each defect has a unique key, namely, the ID.<P>

Using a project object and locks, it is possible to ensure that only one client at a time can increment this ID.
To obtain the last <I>issueid</I> in the database, the HTML file new.html makes use of a feature of
server-side JavaScript called "cursors." Setting the <I>issueid</I> in ascending order helps ensure that the
<I>lastId</I> is the largest. The project object is locked, and incremented by 1. The property
<I>newissueid</I> of the client object is initialized to contain the new value used while logging the new
defect and issue. <a href="9617b.htm#02ae_043b">Example 4 </A>illustrates the use of the project
object.<P>

Server objects contain global data for the entire server. When multiple applications must share
information, the server is indispensible. The server object provides the following default properties:<P>

<P>
<ul>
<li><I>agent</I>, which provides the name and version of the server software.</li> <li><I>protocol</I>,
which refers to the HTTP protocol level.</li>
</ul>
<h3>Server-Side Functions</h3><P>

Server-side JavaScript provides functions for use in an application; some of these are used in the sample
application included with this article. You can also create your own functions in a separate file and include
them with any applications to be deployed. <a href="9617b.htm#02ae_03ba">Example 5(a) </A>can be
used to define a function, while<a href="9617b.htm#02ae_03ba"> Example 5(b)</A> can be used to
find a maximum of three numbers and return the values.<P>

A detailed description of server-side JavaScript's syntax and statement makeup is provided in the
reference manuals for JavaScript.<P>

<h3>Managing Applications</h3><P>

Netscape's LiveWire comes with an Application Manager that can be used to install your application using
these steps: <P>

<P>

1.Complete the application using JavaScript embedded in HTML files.<P>

2. Use the command-line compiler or the Site Manager tool to compile the LiveWire application and link it on
the server. A single output binary file is produced with a .web extension.<P>

3. Install the application using the Application Manager. If an existing application is modified, it may be
necessary to restart it. The Application Manager adds a URL prefix to reference the application, the path to
the compiled binary file (.web), and the method used to maintain the client state. (You can also remove an
application using the delete option.)<P>

<P>

LiveWire provides techniques to maintain the client object on either the client or the server. The technique
you use depends on the needs of the application and environment. Techniques to maintain the client object
solely on the client include client cookies, and client URL encoding. Techniques to maintain the client object
solely on the server include <I>ipaddress,</I> short cookies, and short URL encoding.<P>

Run the application by specifying the URL to access the server with the prefix (as determined during the
installation process). Trace the application execution by loading and appending the trace to the URL. The
trace feature helps display the properties of the various objects.<P>

<h3>Example Application of Server-Side JavaScript</h3><P>

<a href="199702b3.htm">Figure 3</A> shows the issue-tracking tool created using JavaScript. This tool
was made with the built-in object framework and was designed to work with Informix-OnLine Dynamic
Server. It is based on the Web Integrated Software Environment (WISE) project sponsored through a
cooperative agreement between the NASA Software IV&amp;V Facility in Fairmont, West Virginia, and the
Concurrent Engineering Research Center (CERC) at West Virginia University. (For more information, see
http://research.ivv.nasa.gov/projects/WISE/wise.html.)<P>

<a href="9617b.htm#02ae_03b9">Listing One</A> is the HTML file tool.html, which contains the script
required to open a connection to the database. The user is informed of any errors in connection. Netscape
Navigator supports frames, a tool that can be used to create multiple scrollable regions. Each region can be
assigned an individual URL and can load information independent of the other frames on the page. The main
purpose of this file is to divide the web page into five frames, one each for action buttons, metrics buttons,
the title, viewing all issues, and a console window to display error messages.<P>

<a href="9617b.htm#02ae_03bb">Listing Two</A> is view.html, which contains the JavaScript
statements necessary to print all defects and issues in the database. By default, the sorting of defects and
issues is assumed to be by an ID (a unique numerical identifier).<P>

The client object has a property <I>choice</I>, which is initialized by default to <I>byid</I> if the requested
object does not have a property <I>choice</I> defined. A database cursor is returned as a consequence of
the SELECT statement. Different types of database objects can be created depending upon the value of the
client object's <I>choice</I> property. A table of all defects and issues is printed with a header displaying
the titles for each of the columns. The cursor is used to retrieve all rows in the database that satisfy the
query. Once the answer set is printed, the cursor is closed.<P>

You should provide the flexibility to view defects and issues sorted in different orders: by choice, by
status, by priority, and by category. Note the way that encoded variables have been added. When a user
clicks on any hyperlinks, the requested object is created with a property <I>choice</I> that is initialized by
either <I>bystatus</I>, <I>bypriority</I>, <I>bycategory</I>, or <I>byid</I>.<P>

<a href="9617b.htm#02ae_03bc">Listing Three</A> (new.html) contains JavaScript statements that
enable a client to add a new defect or issue to the database. A project object is used to update the unique ID
among multiple clients. Since every defect and issue has a unique ID, it is necessary to ensure that each
new issue is also assigned a unique ID or key for general referencing purposes. A lock is put on the project
object whenever a client logs a new issue; other clients must wait until a unique key is assigned for their
defects. A few statements are added to iterate through the database and to find the largest ID used (in this
article's example, they're stored in ascending order). The ID is incremented and the clients'
<I>newissueid</I> properties are initialized.<P>

In most cases, it is useful to have metrics associated with an issue- or defect-tracking tool. Metrics help
clients view the number of defects yet to be resolved, providing an idea of the process state.<a href="9617b.htm#02ae_03bd"> Listing Four</A> (ovc.html) queries the database for the number of open
and closed issues and prints the output. The file contains two SELECT statements, which define two cursors.
Iteration is through the cursor. The variables <I>open</I> and <I>closed</I> keep track of the number of
open and closed issues. The print function is used to print output in HTML format.<P>

The new.html file (<a href="9617b.htm#02ae_03be">Listing Five</A>) uses HTML to provide a fill-in
form in which the user can enter data relevant to a particular defect. This file contains all the statements
required to service the request from the form in new.html. When a user clicks the Submit button to submit a
new issue, a new <I>request</I> object is created and all named elements of the form are transformed to
the <I>request</I> object's properties. The issue is inserted using the database.execute statement.<P>

When clients view an issue, a hyperlink reference is provided (as an action button) to remove the issue (see
remove.html, <a href="9617b.htm#02ae_03bf">Listing Six</A>). This delete feature can be restricted
to authorized users only. The encoded variables of this hyperlink contain the issue ID. A <I>request</I>
object property is used to selectively remove the issue from the database. Once the defect and issue are
deleted, control is redirected to the view.html page.<a href="9617b.htm#02ae_03c0"> Listing
Seven</A> (title.html) initializes the title of the application.<P>

<a href="9617b.htm#02ae_03c1">Listing Eight</A> (action.html) targets the appropriate frame, which
will display an HTML file. This file contains the necessary action buttons to view, enter a new issue, or
provide online help.<P>

<a href="9617b.htm#02ae_03c2">Listing Nine</A> (detail.html) prints the detail pertaining to each issue
in HTML format. When view.html processes a request and displays the defects in the database, each issue's
ID is displayed as a hyperlink. The hyperlink in view.html that is associated with each issue's ID has encoded
variables that indicate the issue/ defect ID. Thus, when users click on the link, the <I>request</I> object's
<I>id</I> property is initialized to its <I>uniqueid</I>, as stored in the database. The <I>uniqueid</I> is used
to reference the issue selected by the client. Using the <I>requestid</I>, <a href="9617b.htm#02ae_03c2">Listing Nine</A> contains statements that declare a cursor; that
cursor then returns an answer set with a matching ID. Subsequently, details of the issue are printed.<P>

Finally,<a href="9617b.htm#02ae_03c3"> Listing Ten</A> is used to compile all HTML files containing
JavaScript statements into bytecode. This program must be installed using the LiveWire Application
Manager.<P>

<P>

<h4><a name="02ae_03c5"><B>Table 1:</B> LiveWire object framework.</h4><P>
<pre> 
Object Type   Default Property   Methods               Features
           
Request       agent ip                                 Shortest lifetime. New request 
              protocol method                          created for each client 
              (from Form                               request. Destroyed when server
              Elements or                              has finished responding to 
              URLs)                                    request.
              
Client        No predefined      expiration(seconds)   All requests by the same
              property           destroy()             client will share the
                                                       same client object. Server
                                                       creates new client object
                                                       each time a new client
                                                       accesses the application.

Project       No predefined      lock ()               Contains global data
              property           unlock ()             for the entire
                                                       application.
                                                       Project object is
                                                       automatically destroyed
                                                       when the application is
                                                       stopped.

Server        agent              lock ()               Contains global data for
              protocol           unlock ()             the entire server.
              host                                     Server object is destroyed
              port                                     when the server is
              hostname                                 stopped.

</pre>

<h4><a name="02ae_014f"><a name="02ae_014e"><B>Example 1:</B> Typical server-side script.</h4><P>
<pre>&lt;html&gt;
&lt;head&gt; &lt;title&gt; Print hello program &lt;/title&gt; &lt;/head&gt;
&lt;body&gt;
&lt;server&gt; print(&quot;hello world&quot;); &lt;/server&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>

<h4><a name="02ae_03c4"><B>Example 2:</B> (a) Function definition; (b) converting a function into a method; (c) invoking a method on an object.</h4><P>
<pre>
(a)
function init_name(name) {
    this.name = name;
}

(b)
<b>Syntax: <I>object.MethodName = FunctionName;</I></b>
cust.init_name = init_name;

(c)
<B>Syntax:<I> object.MethodName(arguments)</B></I>
cust.init_name(&quot;charles&quot;);
</pre>

<h4><a name="02ae_0151"><a name="02ae_0150"><B>Example 3: </B>(a) The new.html file; (b) using insert.html to refer to user input.</h4>
<pre>
(a)
&lt;FORM METHOD=&quot;post&quot; ACTION=&quot;insert.html&quot;&gt;
Priority:
&lt;input type=radio name=priority value=1 checked&gt;Level1
&lt;input type=radio name=priority value=2&gt;Level2
&lt;input type=radio name=priority value=3&gt;Level3
&lt;input type=submit value=insert&gt;
&lt;/FORM&gt;

(b)
&lt;server&gt;
database.execute(&quot;insert into issue(priority)
 values (&quot;+ request.priority &quot;')&quot;);
&lt;/server&gt;
</pre>

<h4><a name="02ae_043b"><B>Example 4:</B> Using the project object.</h4>
<pre>
&lt;server&gt;
project.lock();
project.lastIssueID = 0;
/* using aggregate functions to get last issue id */
cursor = database.cursor(&quot;select ID from issue&quot;);
while(cursor.next())
{
  project.lastIssueID = cursor.id;
}
cursor.close();
project.lastIssueID = 1 + project.lastIssueID;
client.newissueID = project.lastIssueID;
project.unlock();
&lt;/server&gt;
</pre>

<h4><B><a name="02ae_03ba">Example 5:</B> (a) Defining a function; (b) finding the maximum of three numbers and returning the value.</h4>
<pre>
(a) function name ([param [,param......] ]) {
//server side JavaScript statements
}

(b) function max(a ,b, c) {
      var max = a;
      if (b &gt; c ){
          if (max &lt; b){
             max = b;
          }
      else if (max &lt; c) {
          max = c;
      }
      return max;
    }
</pre>

<B>Figure 1:</B> Steps required to process a request from a client.

<B>Figure 2:</B> Object properties.

<B>Figure 3:</B> An issue-tracking tool.

<a name="02ae_03b9"><H4>Listing  One</H4>
<PRE>

&lt;HEAD&gt;
&lt;TITLE&gt; Demonstration of JavaScript Server Side Feature&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;! try to connect to Informix Online 7.1 &gt;
&lt;server&gt;
/* Trying to connect to test database */
if(!database.connected())
{
database.connect(&quot;INFORMIX&quot;, &quot;sumapaz_ol1shm&quot;, &quot;&quot;, &quot;&quot;, &quot;test&quot;);
}
/* Print error message */
if (!database.connected())
{
print(&quot;Error: Unable to connect to database.&quot;);
}
&lt;/server&gt;
&lt;! create the screen dump for showing the issues using frames&gt;
&lt;FRAMESET ROWS=&quot;10%,75%,15%&quot;&gt;
&lt;NOFRAMES&gt;
&lt;h1 align=center&gt;&lt;blink&gt;Frame ALERT!&lt;/blink&gt;&lt;/h1&gt;
&lt;p&gt;
This document is designed to be viewed using &lt;b&gt;Netscape 2.0&lt;/b&gt;'s
Frame features. If you are seeing this message, you are using
a frame &lt;i&gt;challenged&lt;/i&gt; browser.
&lt;/p&gt;
&lt;p&gt;
A &lt;b&gt;Frame-capable&lt;/b&gt; browser can be gotten from
&lt;a href=http://home.netscape.com/&gt;Netscape
Communications&lt;/a&gt;.
&lt;/p&gt;
&lt;/NOFRAMES&gt;
&lt;! assign a region for the title window &gt;
&lt;FRAME SRC=&quot;title.html&quot; NAME=title MARGINWIDTH=5
MARGINHEIGHT=5 SCROLLING=NO&gt;
&lt;! assign a region for displaying action buttons &gt;
&lt;FRAMESET COLS=&quot;25%,75%&quot;&gt;
&lt;FRAME SRC=&quot;action.html&quot; NAME=action MARGINWIDTH=5 MARGINHEIGHT=5 SCROLLING=NO&gt;
&lt;!assign a region for displaying the issues in the database&gt;
&lt;FRAME SRC=&quot;view.html&quot; NAME=&quot;view&quot; MARGINWIDTH=&quot;5&quot;
MARGINHEIGHT=&quot;5&quot; SCROLLING=&quot;YES&quot; &gt;
&lt;/FRAMESET&gt;
&lt;FRAMESET COLS=&quot;70%,30%&quot;&gt;
&lt;!region to hold action buttons for metrics&gt;
&lt;FRAME SRC=&quot;metrics.html&quot; NAME=metrics SCROLLING=NO&gt;
&lt;!assign region for error message display&gt;
&lt;FRAME SRC=&quot;console.html&quot; NAME=console SCROLLING=NO&gt;
&lt;/FRAMESET&gt;
&lt;/FRAMESET&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;


<a name="02ae_03bb"></PRE>
<H4>Listing  Two</H4>
<PRE>

&lt;html&gt;
&lt;head&gt;
&lt;title&gt; Customer Database &lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;server&gt;
/*test to see if the choice property is defined */
if( request.choice != null)
{
client.choice = request.choice;
}
else
{
/*make byid the default ordering choice for viewing issues */
client.choice = &quot;byid&quot;;
}
/*create database object based on the ordering requested*/
if (client.choice == &quot;byid&quot;){
cursor = database.cursor(&quot;select * from issue order by ID&quot;);
}
else
if (client.choice == &quot;bystatus&quot;){
cursor = database.cursor(&quot;select * from issue order by status&quot;);
}
else if (client.choice == &quot;bypriority&quot;){
cursor = database.cursor(&quot;select * from issue order by priority&quot;);
}
else if (client.choice == &quot;bycategory&quot;){
cursor = database.cursor(&quot;select * from issue order by category&quot;);
}
&lt;/server&gt;
&lt;!create table headers with URLs that have order choice encoded&gt;
&lt;TABLE BORDER&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A HREF=&quot;view.html?choice=byid&quot;&gt;Issue No&lt;/A&gt;&lt;/TD&gt;
&lt;TD COLSPAN=4&gt;&lt;A HREF=&quot;view.html&quot;&gt;Abstract&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;A HREF=&quot;view.html?choice=bystatus&quot;&gt;Status&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;A HREF=&quot;view.html?choice=bypriority&quot;&gt;Priority&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;A
HREF=&quot;view.html?choice=bycategory&quot;&gt;Category&lt;/A&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;!Iterate through cursor and print individual records&gt;
&lt;server&gt;
while(cursor.next()) {
&lt;/server&gt;
&lt;tr&gt;
&lt;td&gt; &lt;a
href=`&quot;detail.html?ID=&quot;+cursor.id`&gt;&lt;server&gt;print(cursor.id);
&lt;/server&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td colspan=4&gt; &lt;server&gt;print(cursor.summary);&lt;/server&gt;&lt;/td&gt;
&lt;td&gt; &lt;server&gt;print(cursor.status);&lt;/server&gt;&lt;/td&gt;
&lt;td&gt; &lt;server&gt;print(cursor.priority);&lt;/server&gt;&lt;/td&gt;
&lt;td&gt; &lt;server&gt;print(cursor.category);&lt;/server&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;server&gt;
}
/*close the cursor */
cursor.close();
&lt;/server&gt;
&lt;/table&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;


<a name="02ae_03bc"></PRE>
<H4>Listing  Three</H4>
<PRE>

&lt;html&gt;
&lt;head&gt;
&lt;title&gt; Creating new issue &lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;server&gt;
/*obtain lock on the project object*/
project.lock();
project.lastIssueID = 0;
/* using aggregate functions to get last issue id */
cursor = database.cursor(&quot;select ID from issue&quot;);
while(cursor.next())
{
project.lastIssueID = cursor.id;
}
cursor.close();
/*get unique id */
project.lastIssueID = 1 + project.lastIssueID;
client.newissueID = project.lastIssueID;
/*release lock*/
project.unlock();
&lt;/server&gt;
&lt;!create an input entry form for logging a new issue&gt;
&lt;h1&gt; NEW ISSUE: &lt;server&gt; print(project.lastIssueID);
&lt;/server&gt; &lt;/h1&gt;
&lt;FORM METHOD=&quot;post&quot; ACTION=&quot;insert.html&quot;&gt;
&lt;table cellspacing=2 margin=3 border&gt;
&lt;tr&gt;&lt;td&gt;IssueID:&lt;/td&gt;&lt;td&gt;
&lt;server&gt;print(project.lastIssueID)&lt;/server&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;input type=&quot;hidden&quot; name=&quot;ID&quot; value=`project.lastIssueID`
size=&quot;4&quot;&gt;&lt;br&gt;
&lt;tr&gt;
&lt;td&gt;Category&lt;/td&gt; &lt;td&gt;
&lt;select name=&quot;category&quot;&gt;
&lt;option&gt; error &lt;option&gt; change request &lt;option&gt; unclassified
&lt;/select&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; Priority &lt;/td&gt; &lt;td&gt;
&lt;input type=radio name=priority value=1 checked&gt;Level1
&lt;input type=radio name=priority value=2&gt;Level2
&lt;input type=radio name=priority value=3&gt;Level3
&lt;tr&gt;
&lt;td&gt;Abstract:&lt;/td&gt;
&lt;td&gt;&lt;textarea rows=4 cols=50 name=summary&gt;&lt;/textarea&gt;&lt;/td&gt;
&lt;/td&gt;
&lt;tr&gt;
&lt;td&gt; Status: &lt;/td&gt;&lt;td&gt;Open &lt;/td&gt;
&lt;input type=&quot;hidden&quot; name=&quot;status&quot; value=open &gt;&lt;br&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;input type=&quot;submit&quot; value=&quot;submit Issue!&quot;&gt;
&lt;input type=&quot;reset&quot; value=&quot;Reset&quot;&gt;
&lt;/FORM&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;


<a name="02ae_03bd"></PRE>
<H4>Listing  Four</H4>
<PRE>

&lt;html&gt;
&lt;head&gt;
&lt;title&gt; Customer Database &lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;server&gt;
/*query for number of open issues*/
var open = 0. closed =0;
cursor = database.cursor(&quot;select * from issue i where
i.status = 'open'&quot;);
while(cursor.next())
{
open = open +1;
}
cursor.close();
/*query for number of closed issues*/
cursor = database.cursor(&quot;select * from issue i where
i.status = 'close'&quot;);
while(cursor.next())
{
closed = closed +1;
}
cursor.close();
print(&quot;&lt;h1&gt;CURRENT STATE:&lt;/h1&gt;&quot;);
print(&quot;&lt;hr&gt;# of open issues:&quot;);
print(open);
print(&quot;&lt;hr&gt;# of closed issues:&quot;);
print(closed);
&lt;/server&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;


<a name="02ae_03be"></PRE>
<H4>Listing  Five</H4>
<PRE>

&lt;html&gt;
&lt;head&gt;
&lt;title&gt; Customer Added &lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;server&gt;
/*insert the issue into database using the request object*/
database.execute(&quot;insert into
issue(id,summary,priority,status,category) value
s (&quot; +
request.ID + &quot;,'&quot; +
request.summary + &quot;',&quot; +
request.priority + &quot;,'&quot; +
request.status + &quot;','&quot; +
request.category + &quot;')&quot;);
/*
database.execute(&quot;insert into issue(id) values (&quot; +
request.ID + &quot;)&quot;);
*/
redirect(&quot;view.html&quot;);
&lt;/server&gt;
&lt;/body&gt;
&lt;/html&gt;



<a name="02ae_03bf"></PRE>
<H4>Listing  Six </H4>
<PRE>

&lt;html&gt;
&lt;head&gt;
&lt;title&gt; Issue Removed &lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;server&gt;
/*delete issue from database*/
if(request.ID != null)
{
database.execute(&quot;delete from issue where issue.id = &quot; + request.ID)
}
redirect(&quot;view.html&quot;);
&lt;/server&gt;
&lt;/body&gt;
&lt;/html&gt;


<a name="02ae_03c0"></PRE>
<H4>Listing  Seven</H4>
<PRE>

&lt;HTML&gt;
&lt;BODY BACKGROUND=&quot;http:/images/gray_rock.gif&quot;
BODY TEXT=&quot;#FFFFFF&quot;
BODY LINK=&quot;#FFFF00&quot; VLINK=&quot;0FFFFF&quot; ALINK=&quot;FF0000&quot;&gt;
&lt;PRE&gt;
&lt;H2&gt; &lt;IMG ALIGN=middle WIDTH=125 HEIGHT=20
SRC=&quot;http:/images/informix.gif&quot;&gt;
Issue Tracking Tool &lt;/h2&gt; (For Demo Purpose) Demonstration of JavaScript 
Server side feature, January 1996. sudha@informix.com &lt;/PRE&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;


<a name="02ae_03c1"></PRE>
<H4>Listing  Eight</H4>
<PRE>

&lt;HTML&gt;
&lt;BODY BACKGROUND=&quot;http:/images/chalk.jpg&quot;&gt;
&lt;h3&gt; ACTION BUTTONS &lt;/h3&gt;
&lt;P&gt;
&lt;IMG ALIGN=MIDDLE SRC=&quot;http:/images/tombullet.gif&quot;&gt;&lt;A
HREF=&quot;new.html&quot;
TARGET=&quot;view&quot; &gt;New Issue&lt;/A&gt;
&lt;P&gt;
&lt;IMG ALIGN=MIDDLE SRC=&quot;http:/images/tombullet.gif&quot;&gt;
&lt;A HREF=&quot;help.html&quot; TARGET=&quot;view&quot;&gt;Help&lt;/A&gt; &lt;P&gt;
&lt;P&gt;
&lt;IMG ALIGN=MIDDLE SRC=&quot;http:/images/tombullet.gif&quot;&gt;
&lt;A HREF=&quot;view.html&quot; TARGET=&quot;view&quot; &gt;Show List&lt;/A&gt; &lt;P&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;


<a name="02ae_03c2"></PRE>
<H4>Listing  Nine</H4>
<PRE>

&lt;html&gt;
&lt;head&gt;
&lt;title&gt; Issue Details &lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;server&gt;
/*get details of issue matching requestID property of request object*/
if(request.ID != null)
{
client.isd = request.ID;
cursor = database.cursor(&quot;select * from issue r where r.id = &quot; + request.ID);
}
while(cursor.next()) {
&lt;/server&gt;
&lt;!print the respective fields of the issue&gt;
&lt;h1&gt;ISSUE NO: &lt;server&gt; print(cursor.id) &lt;/server&gt;&lt;/h1&gt;
&lt;table border&gt;
&lt;tr&gt; &lt;td&gt;Abstract&lt;/td&gt;&lt;td&gt;
&lt;server&gt;print(cursor.summary)&lt;/server&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;Status&lt;/td&gt;&lt;td&gt;
&lt;server&gt;print(cursor.status)&lt;/server&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;Priority&lt;/td&gt;&lt;td&gt;
&lt;server&gt;print(cursor.priority)&lt;/server&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Category&lt;/td&gt;&lt;td&gt;
&lt;server&gt;print(cursor.category)&lt;/server&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;server&gt;
}
cursor.close();
&lt;/server&gt;
&lt;hr&gt;
&lt;IMG SRC=&quot;http:/images/redball.gif&quot;&gt;
&lt;A HREF=`&quot;remove.html?ID=&quot;+client.isd`&gt;Delete this issue&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;


<a name="02ae_03c3"></PRE>
<H4>Listing  Ten</H4>
<PRE>

 ../../bin/lwcomp -v -o tool.web tool.html new.html
   insert.html view.html remove
   .html detail.html ovc.html
<PRE>

</BODY></HTML>
