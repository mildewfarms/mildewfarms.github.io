<HTML> <HEAD> <!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<META NAME="year" CONTENT="1996">
<TITLE>Java Sourcebook 96: Combining Visual Elements </TITLE></HEAD> <body bgcolor="FFFFFF"> <P>

<h1>Combining Visual Development Environments</h1><P>

<P>

<h2>JFactory and Cafe mix it up</h2><P>

<P>

<h3>Wm. Ellis Oglesby</h3><P>

<P>

<P>

Rogue Wave's JFactory and Symantec's Cafe are visual tools for Java-based development. Fundamentally,
Cafe 1.20 is a fast compiler with a graphical debugger, a class browser, an editor that highlights Java
syntax, a screen painter, and a code generator. It is an open environment, so you can add menu items to the
Tools popup to spawn stand-alone applications such as Netscape Navigator or a calculator. Cafe organizes
these tools in a tabbed desktop, allowing you to set up one desktop configuration for editing, another for
debugging, and another for browsing. A tab control allows swapping between desktops, and you can easily
add new tabs for new configurations.<P>

JFactory 1.1, on the other hand, is primarily an application designer and code generator. It includes
JWidgets--a collection of packages that augments the JDK with toolbars, image buttons, animation, and a
table object. In addition to the WYSIWYG screen-painting facilities, JFactory includes an option that allows
programmers to run prototypes--not just individual screens but entire interfaces--before compiling.
JFactory is also an open environment. After code generation, it can spawn a command-line compiler,
debugger, and applet viewer. It also allows you to add tools like Navigator to its menu structure.<P>

Theoretically, JFactory and Cafe are complete solutions to visual Java development, but they have
different strengths. In developing the JavaTax project I present here (available electronically), I used the
best features of each. In the process, I learned the hazards and rewards of mixing and matching third-party
tools.<P>

<h3>JavaTax</h3><P>

Tax-preparation software is ideally suited for a web-based applet. Online tax-return filing is yesterday's
news, so online preparation must be the next logical step. Taxpayers generally only file once a year, so it
makes sense to rent the software for one-time use. HTML is the perfect medium to navigate the tomes of
IRS regulations and requirements, but return preparation requires calculation. Users could print a copy for
their records and e-mail the other to Uncle Sam. Finally, the emergence of electronic signatures and online
banking could provide the technological infrastructure and safeguards needed to make online tax preparation
a reality.<P>

JavaTax takes users step-by-step through the U.S. Form 1040 via a series of "wizard" dialogs, accepting
tax data and automatically calculating subtotals and totals. When the 1040 requires data from other forms
or schedules, such as my personal favorite, Schedule C--Profit or Loss from Business, JavaTax offers a
button that pops up the appropriate form. When complete, the schedule data is automatically transferred to
the 1040. Users can navigate back and forth through the screens, massaging the numbers until they reach
an acceptable bottom line. Finally, a print option simulates printing the tax return and a submit button pops
up an animation of a shrinking dollar sign that simulates sending the data back to the server. A commercial
version of JavaTax would require implementing these features, but that is beyond the scope of this
article.<P>

<h3>Making Tools Work Together</h3><P>

In theory, Cafe and JFactory fit together well. Prototype the front end with JFactory. When that's done,
generate the code and load it into a Cafe project. Use Cafe's integrated editor, class browser, compiler,
and debugger to add data structures and calculation functions. Voila! A finished application.<P>

Unfortunately, I don't write applications like that, and I'm not sure anyone else does, either. Even late in the
development cycle, I find myself in the Designer, resizing text fields or correcting spelling mistakes in
dialog captions. This blurs the line between prototyping and developing, making tool integration more error
prone.<P>

When integrating tools for projects such as JavaTax, the first task is to set up the desktop. After adding
JFactory to Cafe's menu bar, I create a new workspace tab for designing. It contains only two Cafe tools:
the class browser and the project manager. Fortunately, Cafe does not frame its tools within the
application window (MDI style). The "empty" space on the display is available for JFactory components,
such as Project Manager, Object Manager, and Designer. <a href="199702b4.htm">Figure 1 </A>shows
this arrangement in action.<P>

JFactory's Project Manager (<a href="199702b5.htm">Figure 2</A>) organizes all interface objects in a
hierarchy. Applications contain windows and dialogs. Windows contain menus, toolbars, and controls. Menus
contain menu items. Toolbars contain tool items and controls, and so on. Creating a new project adds one
window (an applet frame) to the project manager. Users can add new objects by right-clicking on object
containers.<P>

Every interface object has a set of properties (such as location or color) and a set of events to which it can
respond (<I>gotFocus</I>, <I>lostFocus</I>, <I>clicked</I>, and the like). These are listed in JFactory's
Object Manager (<a href="199702b6.htm">Figure 3)</A>. A programmer can modify these properties at
any time.<P>

Double-clicking on a window or dialog in the project manager opens that object in JFactory's visual
designer--a floating canvas with a tool palette for drag-and-drop construction of windows and dialogs. It has
all the sizing, spacing, and alignment features expected in a WYSIWYG screen painter. In addition to the
standard Java components (text areas, choices, buttons, and so on), JFactory's tool palette supports
JWidgets, and JavaTax takes advantage of these highly graphical features.<P>

<h3>Building the Applet Interface</h3><P>

Since the JDK 1.03 does not support menubars in applet frames, JavaTax (<a href="199702b9.htm">Figure 4</A>) is driven by a toolbar with three tool buttons: one to fill out the
return, one to print it, and one to submit it. Dragging, dropping, and aligning these components in the
designer is a 60-second task. In the Object Manager, I specify how the components respond to mouse clicks.
Choices include calling an external object, linking to source code, and popping up windows and dialogs.<P>

The tax return itself, as everyone knows, is an interminable series of lines, each consisting of a line
number, some explanatory text, and a blank to enter the data. Form 1040 groups these lines into sections
for Income, Tax Credits, Payments, and other categories. JavaTax reproduces this form with a series of
wizard-like dialogs. Labels hold the line numbers and explanatory text, and text fields provide a mechanism
for data entry.<P>

Graphical buttons on the bottom of the dialog allow users to cancel the task or navigate through the form. In
total, JavaTax uses eight graphical buttons: five dialog buttons (Okay, Cancel, Prev, Next, and Finish) and
three toolbar buttons (Process, Submit, and Print). The bitmap associated with each of these must contain
images for six possible button states: off, off disabled, off depressed, on depressed, on, and on disabled.
Because JavaTax uses single-state buttons, only three slots are actually used. Creating these six-slot
images is one of the most time-consuming steps in the entire project.<P>

Although the content of the wizard pages is varied, the layout is essentially the same. Instead of creating
each dialog individually, I design a generic page with ten labels, ten text fields, and three buttons; and I
store it in JFactory's Object Gallery. This is a holding tank for reusable applications, windows, dialogs, and
menus. A large firm might use this feature to maintain company-standard screens like logon dialogs and
About boxes--situations where multiple applications use the same compound objects--but it's also an easy
way to store templates. Now, when I create a new dialog, I can choose from JFactory's prepackaged dialogs
(blank, About, and standard), or select my own wizard. From the template, I create nine wizard pages and
modify their properties in the Object Manager. Though some dialogs require other components, such as
group boxes, radio buttons, and button links to other forms, the Object Gallery cuts the interface
development time in half.<P>

When the interface is complete, I can test it to make sure it behaves as expected. Although I have not yet
compiled it, it looks just like it's running in the applet viewer. It proves I'm on the right track before I begin
adding back-end code.<P>

<h3>Generating, Compiling, and Running</h3><P>

After achieving the desired interface, JFactory generates the corresponding Java source code. You have
the option of generating a .java file for each object or one large file. Like any other application generator,
the code is longer than what an experienced programmer would write, but it is well commented and easy to
follow. Most importantly, it works. I could only find one situation that makes JFactory generate
compiler-choking code--defining the applet frame to be an empty dialog--but this doesn't seem like a practical
problem.<P>

JFactory provides the option of compiling the files with javac and starting the applet viewer. For what it's
worth, it works just fine, but I haven't used command-line tools since Reaganomics. Instead, I simply click
on Cafe's Browse workspace tab. JFactory disappears, obscured by Cafe's project manager, class
browser, and hierarchy editor.<P>

<h3>Adding Custom Code</h3><P>

There are three tasks to accomplish programatically in Cafe:<P>

<P>
<ul>
<li>Create a tax-data object to calculate and store tax data.</li> <li>Write functions to read/write data to/
from the tax-data object.</li> <li>Capture the Enter key to process data and navigate among text
fields.</li>
</ul>
<P>

Cafe's Project Manager organizes the files that comprise an application. Since JFactory does not
automatically generate the project, you must create a new one, add the generated source files, and point
Cafe to Rogue Wave's JWidget package. Once the project is correctly defined, the application compiles and
executes without any problem. If I have bugs down the road, I can't blame them on the tools (I can blame
them on the JDK).<P>

<h3>Using the Class Browser</h3><P>

I prefer to do all my work in Cafe's browser. Like the editor, it highlights Java syntax. The top-left panel
lists the applet classes either alphabetically or in their creation order. The top right shows the methods and
data members of the selected class, and the bottom half displays the corresponding source code. Because
Cafe's parser is independent of the compiler, it is not necessary to recompile to update the browser. This
tool gives a good class-oriented overview of the application.<P>

The only problem with using Cafe and JFactory together is trying to add member data and methods via the
browser in such a way that JFactory doesn't overwrite them when it regenerates the code.<P>

JFactory preserves user code by placing protect blocks at locations throughout the source. When it
regenerates the application, it simply copies the contents of these blocks into the updated file. It is a
flawless system, as long as the programmer doesn't make changes outside of these safe zones. Protect
blocks occur often, so this shouldn't be an inconvenience. For  example, Hello World has 14 of them.<P>

<a href="9617c.htm#02b2_0152">Example 1</A> is an excerpt from the main applet class definition as
generated by JFactory. The protect blocks are marked by the comments <I>zpb_begin</I> and
<I>zpb_end</I>.<P>

Of course, Cafe isn't aware of these protect blocks, and it has its own ideas about where to place code.
When I use the browser to add member data or methods, they appear at the top of the class, and user
classes are declared at the bottom of the file unless a new source file is specified. If the code remains in
these places, JFactory erases it when it regenerates the application.<P>

Simple workarounds include using the editor to define new members within protect blocks and flesh them
out in the browser, or cutting and pasting into protect blocks. Either way, Cafe's browser finds them just
fine.<P>

<h3>Data Storage</h3><P>

JavaTax uses a custom data class, <I>taxData</I>, to store and calculate its data. This keeps all the
information in a central location, and simplifies calculations involving data from multiple dialogs.<P>

I created the new class with Cafe's Hierarchy Editor (<a href="199702b7.htm">Figure 5</A>). It's
basically an interactive class diagram that can manipulate an application's inheritance structure. By
default, the Hierarchy Editor places new base classes in their own file. Because JFactory is not aware of
this file, it is completely safe to regenerate code. In addition to a default constructor, the <I>taxData</I>
class contains variables to hold the application's data and a <I>calculate()</I> function that computes all
subtotals and totals at once. This ensures the data is always current. When the application is initialized, I
instantiate the <I>taxData</I> class by adding a line to the appropriate protect block, as in<a href="9617c.htm#02b2_0153"> Example 2</A>.<P>

Each dialog class has a protect block for "user variables" where I've added the entry <I>taxData
myTaxDat</I><I>a</I><I>=</I><I>taxapp.pTaxData,</I> which allows each dialog to manipulate the tax-data
object directly.<P>

<h3>Managing the Text Fields</h3><P>

Java handles data entry into its fields, but you are responsible for writing that information to and from the
application's variables. JavaTax does this on a dialog-by-dialog basis. Each one has a <I>saveData()</I>
function that takes the strings in its text fields, converts them to integers, and stores them in the data
object. <I>updateEdits()</I> does the reverse.<a href="9617c.htm#02b2_0154"> Example 3 </A>shows
how these two methods are implemented.<P>

<h3>Calling the Functions</h3><P>

I call <I>myTaxData.calculate()</I> and <I>upda</I><I>teEdits()</I> in the dialog's constructor after the
components are created and before the window is shown. This ensures all data is displayed correctly.<P>

The dialogs must save their data when the user navigates from one page to another. JFactory already
generated the action method that processes the <I>Prev</I> and <I>Next</I> buttons; I just add a call to
<I>saveData()</I> to that method.<P>

So far, JavaTax displays each dialog correctly and saves the data when the user is done. However, I also
want it to update the calculated fields as the user enters data. I accomplish this by trapping the Enter
key.<P>

JFactory generates a <I>handleEvent()</I> function for each window, and I extend it to check for key
presses. If the user presses the Enter key while in a text field, I save the data, calculate and update the
subtotals in the dialog, and place focus in the next component. Example 4 shows the necessary changes.<P>

The reference to <I>((Component)(e.target)).nextFocus();</I> in<a href="9617c.htm#02b2_0155">
Example 4 </A>works because JFactory allows you to rearrange the component's creation order. (It's
called "tab order," although the JDK 1.03 for Win32 doesn't support tabbing.) By ordering the text fields
consecutively, I ensure that <I>nextFocus()</I> puts focus into the next text field and not, for example, in a
button.<P>

<h3>Debugging</h3><P>

After writing user code with Cafe's source editor and the class browser, I can compile and execute the
applet from within the Cafe environment. <P>

And it doesn't work.<P>

Cafe's graphical debugger is extremely useful. The 1.20 version doesn't even require TCP/IP. After setting
breakpoints, I can step "over" methods, stopping on the next executed line, or step "into" them, which
takes me line by line into the method's source code. Cafe also has a data/object window that displays the
contents of class members and variables.<P>

The debugger has a few other features I haven't used, but they'd probably be helpful in other situations. The
first is a Thread View window that allows you to freeze and thaw individual threads while others continue
to run. The second is a remote debugger for working with applets running on another machine. This could
help find pesky problems that don't manifest themselves in a stand-alone environment.<P>

<h3>Conclusion</h3><P>

After a few rounds of debugging, JavaTax is up and running. As with many software tasks, the program
logic is relatively simple, yet the applet required over 3500 lines of code. Writing it from scratch would be
tough, but using the right combination of tools makes it a manageable task.<P>

Cafe and JFactory are both remarkably robust for 1.x releases, but they have their share of bugs.
However, my primary reservations about the Java language spring not from the available tools but from
performance problems in the run-time environment. JavaTax runs fine in the applet viewer, but it brings
Netscape 3.0b4 to its knees. Nonetheless, I'm confident that these issues will resolve themselves and that
Java will soon mature into formidable presence in the commercial development arena.<P>

<P>

<P>

<B>Figure 2: </B>JFactory's Project Manager.<P>

<P>

<B>Figure 1: </B>JFactory and Cafe in a combined workspace.<P>

<P>

<B>Figure 3: </B>JFactory's Object Manager.<P>

<P>

<B>Figure 4: </B>The JavaTax applet.<P>

<P>

<B>Figure 5: </B>Cafe's Hierarchy Editor.<P>

<P>

<P>

<P>

<H4><a name="02b2_0152"><B>Example 1: </B>Main applet class generated by JFactory.</h4><P>
<PRE>
<P>
public
class taxapp extends Applet {
    private static Applet applet;
    // Initial size in logical units
    Dimension initialSize = new Dimension(158, 64);
    // zpb_begin MainUserVars
    // zpb_end
    public
    void init() {
        applet = this;
        // zpb_begin AppletInit
        // zpb_end
        setBackground(Color.lightGray);
        setFont(new Font(&quot;Helvetica&quot;, Font.PLAIN, 12));
        LogFontLayout lfLayout = new LogFontLayout(this);
        setLayout(lfLayout);
 . . .
    // zpb_begin MainAppletUserMethods
    // zpb_end
}
// zpb_begin UserClasses
// zpb_end
<P>
<P>
</PRE>
<H4><a name="02b2_0153"><B>Example </B><B>2</B><B>: </B>Instantiating a taxData <I>object.</I></h4><P>
<PRE>
<P>
public
void init() {
    applet = this;
    // zpb_begin AppletInit
    pTaxData = new taxData();
    // zpb_end
<P>
<P>
</PRE>
<H4><a name="02b2_0154"><B>Example </B><B>3</B><B>: </B>Methods added to a typical dialog.</h4><P>
<PRE>

// zpb_begin Inc2DialogUserMethods
void saveData(){
    myTaxData.rental = 
(Integer.valueOf(pRentalEdit.getText())).intValue();
    myTaxData.farm = 
(Integer.valueOf(pFarmEdit.getText())).intValue();
    myTaxData.unemployment = 
(Integer.valueOf(pUnemploymentEdit.getText())).intValue();
    myTaxData.SSBenefits = 
(Integer.valueOf(pSocialSecurityEdit.getText())).intValue();
    myTaxData.otherIncome = 
(Integer.valueOf(pOtherIncomeEdit.getText())).intValue();
}
void updateEdits(){
    pRentalEdit.setText(String.valueOf(myTaxData.rental));
    pFarmEdit.setText(String.valueOf(myTaxData.farm));
    pUnemploymentEdit.setText(String.valueOf(myTaxData.unemployment));
    pSocialSecurityEdit.setText(String.valueOf(myTaxData.SSBenefits));
    pOtherIncomeEdit.setText(String.valueOf(myTaxData.otherIncome));
    pTotalIncomeEdit.setText(String.valueOf(myTaxData.totalIncome));
}
// zpb_end
<P>
</PRE>
<H4><a name="02b2_0155"><B>Example 4: </B>Checking for the Enter key.</h4><P>
<PRE>
<P>
public boolean handleEvent(Event e) {
 ...
  // zpb_begin Inc2DialogHandleEvent
  if (e.target instanceof TextField
     &amp;&amp; e.id == Event.KEY_PRESS
     &amp;&amp; e.key == 10){
     saveData();
     myTaxData.calculate();
     pTotalIncomeEdit.setText
         (String.valueOf(myTaxData.totalIncome));
     ((Component)(e.target)).nextFocus();
  }
  // zpb_end
...

</pre>
For More Information<P>

<P>

Symantec Corp.<P> 10201 Torre Avenue<P> Cupertino, CA 95014-2132<P> 408-253-9600  <P>
http://www.symantec.com<P>

<P>

Rogue Wave Software<P> 260 SW Madison Avenue<P> Corvallis, OR 97333<P> 800-487-3217<P>
http://www.roguewave.com<P>

<P>

<P>

<P>

</BODY></HTML>
