<HTML> <HEAD> 
<META NAME="year" CONTENT="1996">
<TITLE>Java Sourcebook 96:  User Interface Design</TITLE>
</HEAD> <body bgcolor="FFFFFF"> <P>

<h1>Java User-Interface<P> Design</h1><P>

<h2>Interactive Java applets for Web searching</h2><P>

<P>

<h3>Jeffrey Kay</h3><P>

<P>

<P> <i>Jeffrey specializes in software design and development for IBM.
He can be contacted at jeffrey_kay@ vnet.ibm.com.</i></p><hr><P>

<P> <i></i></p><hr><P>

IBM infoMarket is one of the first major web-based search services to
implement a user interface written entirely in Java. This Java
interface accomplishes two things. First, it provides advanced
capabilities similar to those available in stand-alone applications.
Second, the software demonstrates Java's capabilities in a serious and
significant application. Some of the most interesting Java software on
the Internet is presented as more of a window decoration than a
primary interface. This Java interface brings users functionality
previously found only in software nat ively installed on the users'
computers.<P>

IBM infoMarket (http://www.infomarket.ibm.com/) lets users search
multiple source databases simultaneously. These databases are
categorized by subject area and name, providing a way to select which
sources are searched. Users may perform simple searches by entering
keywords or enter a more-advanced Boolean query. The search results in
a "hit" list that returns the title of the content, an exhibit, date,
author, relevance rank, and price.<P>

The original IBM infoMarket interface uses HTML forms. The simple
search screen includes an edit box for keywords and the source list
coded as a series of check-box list elements. The search returns a hit
list as an HTML page, 25 hits at a time. The original interface,
including the generation of the search screen, source list, hit list,
and user-requested data reductions, is implemented almost entirely as
CGI scripts.<P>

While HTML and CGI comprise a viable approach, a more interactive
interface enhances usability. The HTML version requires users to page
forward and backward to refine a query because the search page and the
results page are separate. And because the results are all page
oriented, the hit list is limited to a quantity that is reasonably
visible on a screen.<P>

The design goals of the Java version were to improve the overall
usability and to increase functionality. The hierarchical nature of
the sources is easily represented by a hierarchical listbox with
expanding and collapsing entries. This listbox allows users to see
just topic areas or to delve deeper into the available sources for a
particular topic area. Users can even mix and match topic areas and
particular sources if it makes sense for a query.<P>

Users can experiment with different ways of formulating queries by
toggling between the simple search and advanced search. The
search-entry fields retain the terms as users try different searches
to see which results in the best hit list.<P>

By displaying the results as a multicolumn listbox or grid control,
users can access a wider range of functions, including sorting and
selecting. In addition, a multicolumn listbox can hold many more lines
than might make sense for HTML-based output.<P>

In the end, the user interface should adopt the style of most
interactive applications, with the search query, source list, and
results list residing on the same screen. Users then have all of the
information in view when searching.<P>

<a href="199702ab.htm">Figure 1</A> is the enhanced, Java-based IBM
infoMarket user interface. The search-word entry portion of the window
flips between the simple search and the advanced search. This source
list appears to the right in an expanding and collapsing entry
listbox. The results are in the bottom part of the panel in a single
multicolumn listbox. In the center of the listbox are the buttons used
to control the operations and a message label indicating the status of
the operation.<P>

<h3>Basic Applet Structure</h3><P>

The basic applet structure is a single flow from the entry of search
terms to the review of results. The interface to the web server is
implemented through CGI scripts. In early implementations, a CGI
script parsed the HTML pages returned by our production system, but
later versions of the software use CGI scripts that return "raw"
output in a format easily parsed in the Java code. All CGI interfaces
are implemented using the GET method to avoid the additional code
necessary to implement a POST in Java.<P>

The sources listbox is a derivation of the standard Java
<I>ListBox</I> class. The listbox keeps track of which list elements
are expandable and which are not. In addition, the titles of the
sources are matched with the terms that are returned as part of the
CGI call to the web server when executing a search.<P>

The entire screen display is implemented using a series of panels. The
outermost panel and all but two of the inner panels use the
<I>GridBagLayout</I> Manager. Although it is the most complicated
layout manager in the Java Abstract Windows Toolkit (AWT), the
<I>GridBagLayout</I> Manager is also the most functional when the user
interface requires precise layout instructions. It allows each
component in the panel to be placed precisely with respect to its
neighbors. The only panels that do not use the <I>GridBagLayout</I>
are the Message panel (<I>BorderLayout</I>) and the Button panel
(<I>FlowLayout</I>).<a href="199702ac.htm"> Figure 2 </A>shows each of
the panels in the display.<P>

To easily switch between the simple and advanced search options, each
entry screen is built into a separate panel. When pressing the toggle
button (designated "Simple search" or "Advanced search" depending on
what is currently displayed), the applet quickly rebuilds the
interface using the appropriate display panel. The rebuilding of the
display is also aided by having each of the main interface components
in its own panel, reducing the complexity of the code. <a href="199702ad.htm">Figure 3</A> is a subsection of the search screen
with the advanced-search panel visible.<P>

<h3>Threads</h3><P>

Threads play a minor role in the applet, implementing the "cancel
search" functionality and the asynchronous collection of status
information during a search. The use of threads allows the applet to
perform some minor functions without polluting object encapsulations
in the code.<P>

The cancel search function uses a thread to allow the search operation
to run independently. The applet can then continue processing messages
in the message queue, a necessary function when user input is
required. When a search starts (a user presses the "Search" button),
the search thread starts and the Search button is retitled "Cancel
search." All other buttons are disabled. If the Cancel search button
is pressed, the search thread is stopped using a <I>Thread.stop()</I>
function call.<P>

The status functionality is implemented in a similar fashion. The
search code is fully encapsulated in a single object, a derivation of
the multicolumn listbox class. That class initiates the search CGI
call, retrieves the results, and displays them. The search thread,
while running, polls that object every half second to find out how
many elements it currently has in the list. This method informs the
user that something is happening while the search results are
retrieved, and does not burden the Java applet significantly.<P>

<h3>The Multicolumn Listbox</h3><P>

The most interesting class in the applet is the multicolumn listbox
(<I>MCList</I>). While not the most ideal or efficient implementation
of a basic grid control, the code employs many of the more subtle Java
language elements. In particular, a C++ software developer may not be
familiar with some of these techniques because they are unavailable in
C++. It is also the one place in the code that extensive work had to
be done to ensure compatibility across platforms.<P>

The multicolumn listbox is implemented as the public class
<I>MCList</I> (available electronically), which encapsulates three
subcomponents: horizontal and vertical scroll bars
(<I>MCScrollbar</I>) and <I>MCCanvas</I>, an extension of the
<I>Canvas</I> class. In addition, two public interface classes allow a
developer to implement "owner-drawing" and "owner-defined sorting"
objects that can be used in a cell.<P>

<h3><I>MCList</I></h3><P>

<I>MCList</I> is an extension of the <I>Panel</I> class that
implements many of the "pass-through" function calls. Since most of
the functionality of the class resides in <I>MCCanvas</I>,
<I>MCList</I> must expose certain function calls to provide a single
interface point. An alternate approach would have been to build most
of the functionality into <I>MCList</I> directly, but the
encapsulation of the drawing routines in the <I>MCCanvas</I> class
reduces the complexity of the code and takes advantage of the layout
capabilities in Java. The constructors in <I>MCList</I> set up the
number of rows and columns that the listbox must initially display.
While the number of rows is variable, there are no provisions in this
implementation to add columns. The <I>validate()</I> and
<I>setFont()</I> functions have been overridden to ensure that the
horizontal scroll bar limits are set properly. The vertical scroll bar
increments by row count rather than pixel count, so its limits are
only updated when the row count changes.<P>

<h3><I>MCScrollbar</I></h3><P>

Perhaps the most frustrating thing about Java is its relative infancy.
<I>MCScrollbar</I> is a class designed to address just that issue.
Because of the variations in Java implementations, the limits and
line- and page-increment values of the default scroll bars were
inconsistent. To work around these problems, the <I>MCScrollbar</I>
class overrides several of the <I>Scrollbar</I> class functions and
replaces them with equivalent functions that work better across
platforms.<P>

<h3><I>MCPainx</I> and <I>MCSortable</I> Interface Classes</h3><P>

Interface classes define functional interfaces that allow an object to
provide functionality without having to define a new superclass.
Specifically, the <I>MCSortable</I> and <I>MCPaintable</I> interface
classes (Listings One and Two, respectively) allow an object stored in
a cell to provide functions for painting and sorting itself even
though the object's base class is <I>Object</I>. These classes are
used to display the icon in the header row, to draw the description
column with bold and plain fonts, and to sort columns alphabetically
or numerically. The <I>MCImage</I> and <I>TitleAbstract</I> classes,
private classes implemented as part of the main program, demonstrate
the use of these classes (Listing Three).<P>

The <I>MCImage</I> class defines an extension to the <I>Object</I>
class that implements <I>MCPaintable</I> to draw a picture in a cell
area. The <I>MCPaintable</I> class requires that the <I>paint()</I>
function be implemented, which in this case just draws the image on
the supplied <I>Graphics</I> object. Because the class is derived from
the base <I>Object</I> class, it can be used as the contents of a
cell.<P>

The <I>TitleAbstract</I> class is more complicated, implementing both
the <I>MCPaintable</I> and <I>MCSortable</I> interfaces. This is as
close to multiple inheritance as Java permits. The
<I>TitleAbstract</I> class extends <I>Object</I> (as required for use
with <I>MCList</I>) and implements the <I>toString()</I> function to
return an appropriate value. The <I>paint()</I> function draws the
title string in bold while the abstract part is drawn using a plain
text face. The <I>lessthan()</I> and <I>greaterthan()</I> functions
compare the joined title and abstract to the string value of any other
object.<P>

<h3><I>MCCanvas</I></h3><P>

<I>MCCanvas</I> is the centerpiece of the multicolumn listbox. It
draws the rows and maintains the values of the cells. Each cell value
must be derived from the <I>Object</I> class and all values are stored
in <I>Vecto</I><I>r</I>s, one per column. The column headers are also
stored in a single <I>Vector</I> and one additional <I>Vector</I> is
defined to store the sort index. Because the widths of the columns are
fixed, a single array of integers is defined to hold the width of each
column. The width of a column is defined in characters based on the
average width of the characters in the selected font.<P>

As rows are added, cell values are set to zero-length
<I>Strin</I><I>g</I>s. The cell values are set individually using the
<I>setValue()</I> function, where the arguments are the row, the
column, and the <I>Object</I> to be stored in the cell. As cells are
set, they are painted using the <I>paintCell()</I> function. This
function is called directly, rather than using a <I>repaint()</I>
call, to update the display synchronously.<P>

The <I>paint()</I> function itself is split into several function
calls so that individual parts of the display can be drawn as needed
or as part of a global update. The <I>paint()</I> function calls the
drawing routines for all of the display components:<P>

<P>
<ul>
<li> <I>paintHeaders()</I> paints the header row of the listbox.</li>
<li> <I>paintRow()</I> paints a single row of the display.</li> <li>
<I>paintCell()</I> paints a single cell.</li>
</ul>
<P>

The <I>paintHeaders()</I> function does not call <I>paintCell()</I>
even though <I>paintCell()</I> duplicates much of
<I>paintHeaders(</I><I>)</I>'s functionality. The
<I>paintHeaders()</I> function does some additional manipulation of
the cell contents before it is displayed (it adds "**" to the primary
sort-column header), preventing the use of <I>paintCell()</I> in its
present form.<P>

The <I>paintCell()</I> function draws the contents of each cell.
Because of the possibility of a cell implementing its own painting
routine, <I>paintCell()</I> must check the object before it is drawn
to see if it implements the <I>MCPaintable</I> interface class. It
does this using the <I>instanceof</I> operator, an operator that can
test the object to see what classes it instantiates. If the object is
an instance of the <I>MCPaintable</I> class, it is recast and its
<I>paint()</I> function is called. If the object is just a string, it
is automatically fit into the cell area using word wrapping. <a href="9617a.htm#02aa_014d">Figure 4</A>, an excerpt from
<I>paintCell()</I>, shows this code.<P>

The <I>paintCell()</I> function uses the <I>create()</I> method of the
<I>Graphics</I> class to create subsections for drawing. This is
required because only one clipping rectangle can be established for a
<I>Graphics</I> object. When <I>paintCell()</I> is called, a new
<I>Graphics</I> object is created based on the original
<I>Graphics</I> object. This new <I>Graphics</I> object clips to the
dimensions of the cell and is used for all subsequent graphics
operations.<P>

Sorting is implemented in <I>MCCanvas</I> using a low-tech insertion
sort. Though there are many container classes provided with Java, no
sorting functions are provided. The <I>sort()</I> function is called
explicitly by the owner of the <I>MCList</I> object. During a sort,
each object is tested with <I>instanceof</I> to see if it implements
<I>MCSortable</I>; if it does, the <I>lessthan()</I> and
<I>greaterthan()</I> functions of <I>MCSortable</I> are used for
comparisons. If not, the object is sorted based on the value of the
<I>toString()</I> function.<P>

<h3>Lessons Learned</h3><P>

I encountered several problems using Java as a development language
and environment. The good news, however, is that these are not
inherent problems; almost all stem from Java's relative immaturity. As
Java matures, many of these problems should go away.<P>

The development platform was the Java Development Kit (JDK) Version
1.02 under Windows 95 with Netscape Navigator as the target platform.
I wrote all of the code by hand using an editor and a make program,
and used the JDK Appletviewer for development testing. When it became
apparent that Navigator and the JDK Appletviewer did not function
exactly the same, I was forced to use Navigator more extensively and
earlier in the process than I desired. In most cases, the Appletviewer
did a better job displaying the applet than Netscape Navigator.<P>

Netscape Navigator 2.02 showed symptoms of memory problems. When the
multicolumn listbox reached 100 elements, Netscape Navigator crashed.
As a result, I reset my sights for Navigator 3.0 and beyond.<P>

The <I>showDocument()</I> function is the Java function that retrieves
documents in the search-results list. Because of a bug in early betas
of Navigator 3, any document retrieved that was processed by a helper
application crashed the browser. I developed a kludge using
JavaScript. Instead of using the <I>showDocument()</I> function
directly, <I>showDocument()</I> calls a JavaScript function and passes
the document URL to that function. This changed the call from<P>

<P>

<I>showDocument(&quot;http://</I><I> </I><I>xxx.xxx.xxx.xxx/</I><I>
</I><I>xxx.xx</I><I>x</I><I>&quot;);</I> to<P>

<I>showDocument(</I><I>&quot;</I><I>javascript:showdoc</I><I>(</I><I>\</I><I>&quot;</I><I>http://</I><I>
</I><I>xxx.xxx.xxx.xxx/xxx.xxx\&quot;));</I>. <P>

Of course, this prevented other browsers from retrieving documents,
since only Navigator currently implements JavaScript. Navigator 3.0
beta 5 cured this problem.<P>

Scroll bars continue to be a source of frustration. Each platform
seems to have a different idea about the scroll-bar limits and page-
and line-increment values. Some betas of Navigator had a bug that
would not allow the page- and line-increment values to be changed from
their defaults of 10 and 1, respectively. I coded <I>MCScrollbar</I>
to eliminate this inconsistency by trapping most of the scroll-bar
value sets.<P>

Double clicking on a <I>Canvas</I> also proved troublesome. The
<I>handleEvent()</I> function in <I>MCList</I> has several workarounds
to address this problem. This problem initially manifested itself on
UNIX/X-Windows and Macintosh platforms, where the double click could
not be trapped, but even Navigator 3.0 beta 5 for Windows 95 exhibited
this problem. The initial workaround counted Event.MOUSE_DOWN events,
but this also proved inconsistent. A second workaround counted
Event.MOUSE_UP events and this worked better. There are still
double-click problems on some platforms.<P>

A strange problem with the <I>setFont()</I> function occurred while
building the <I>paint()</I> routine for the <I>TitleAbstract</I>
class. Apparently, doing a <I>setFont()</I> while clicking on a scroll
bar could cause a thread (or the main thread) to freeze. I attempted
to correct the problem by disabling the multicolumn listbox during
screen painting. This worked in most cases. Fortunately, it appears
that this problem has vanished from later betas of Navigator 3.0.<P>

Font problems across platforms also seem to exist. Java uses the
"a-point-a-pixel" model: One point equals one pixel. On some Navigator
implementations, the font metrics returned from a selected font were
occasionally incorrect, sometimes even twice that of the selected
font. The text on the screen looked okay and demonstrated that the
system was returning the correct font size, but the font metrics that
the Java Virtual Machine returned were wrong. I found no particular
workaround that was acceptable.<P>

On Navigator 3.0 beta 5, invalidating the windows did not always
result in a <I>repaint()</I> call. I corrected this by adding a
<I>repaint()</I> call after the <I>invalidate()</I>. In addition, to
prevent flickering on screen updates, the <I>update()</I> function of
a component is overridden to just call <I>paint()</I>. This prevents
the <I>update()</I> function from clearing the component area.<P>

<h3>Conclusion</h3><P>

The IBM infoMarket Java user interface demonstrates great potential as
a primary user interface. It improves usability and increases
functionality. As the Java environment matures, this user interface
and others like it will drive the World Wide Web into the universe of
interactive applications.<P>

<P>

<P>

<P>

<P>

<B>Figure 1: </B>IBM infoMarket service Java search screen.<P>

<P>

<B>Figure 2: </B>Panels of the main display (highlighted in blue).<P>

<P>

<B>Figure </B><B>3</B><B>: </B>Subsection of search screen showing
advanced search panel.<P>

<P>

<h4><B><a name="02aa_014d">Figure 4: </B>Code excerpt from paintCell() showing the use of instanceof.</h4><P>
<pre>
if (values[col].elementAt(realRow(row)) instanceof MCPaintable) {
MCPaintable x = (MCPaintable)values[col].elementAt(realRow(row));
x.paint(newg,this,widths[col]*aveWidth+Inset,Inset);
}
</pre>

<H4>Listing  One</H4>
<pre>
import java.awt.*;
import java.awt.image.*;
import java.applet.*;
import java.net.*;
import java.util.*;
import java.io.*;

// Code is provided &quot;AS IS&quot; for example purposes only, without warranty 

public interface MCPaintable {
    abstract void paint(Graphics g, Object o,int width, int inset);
}

</pre>
<H4>Listing  Two</H4>
<pre>
import java.awt.*;
import java.awt.image.*;
import java.applet.*;
import java.net.*;
import java.util.*;
import java.io.*;

// Code provided &quot;AS IS&quot; for example purposes only, without warranty 
public interface MCSortable {
    abstract boolean lessthan(Object o);
    abstract boolean greaterthan(Object o);
}

</pre>
<H4>Listing  Three</H4>
<pre>
import java.awt.*;
import java.awt.image.*;
import java.applet.*;
import java.net.*;
import java.util.*;
import java.io.*;

// Code provided &quot;AS IS&quot; for example purposes only, without warranty 

class MCImage extends Object implements MCPaintable {
    Image image;
    public MCImage(Image i) {
        image = i;
    }
    public void paint(Graphics g, Object o,int width,int inset) {
        if (g == null) return;
        if (o instanceof ImageObserver) {
            g.drawImage(image,inset,0,(ImageObserver)o);
        }
    }
    public String toString() {
        return &quot;Cryptolope&quot;;
    }
}
class TitleAbstract extends Object implements MCPaintable, MCSortable {
    String Title = &quot;&quot;;
    String Abstract = &quot;&quot;;

    public TitleAbstract(String t, String a) {
        Title = t;
        Abstract = a;
    }
    public String toString() {
        return Title + &quot; &quot; + Abstract;
    }
    public boolean lessthan(Object o) {
        return toString().compareTo(o.toString()) &lt; 0;
    }
    public boolean greaterthan(Object o) {
        return toString().compareTo(o.toString()) &gt; 0;
    }
    // void wrapString(Graphics g,String s,int w)
    
    public void paint(Graphics g, Object o,int width, int inset) {
        if (g == null) return;
        width -= inset;
        if (width &lt;= 0) return; // hidden row
        String temp = &quot;&quot;;
        FontMetrics fm = null;
        Font f = g.getFont();
        
        int col = 0;  // x coordinate
        int y = 0;  // y coordinate
        int lineheight = 0; // lineheight
        
        Font newFont = new Font(f.getName(),Font.BOLD,f.getSize());

        for(int i=0;i&lt;2;i++) {
            StringTokenizer st = null;
            if (i == 0) {
                g.setFont(newFont);
                st = new StringTokenizer(Title);
                fm = g.getFontMetrics();
                y = fm.getMaxAscent();
            }
            else {
                g.setFont(f);
                fm = g.getFontMetrics();
                st = new StringTokenizer(Abstract);
            }
            lineheight = fm.getMaxAscent() + fm.getMaxDescent();
            while (st.hasMoreTokens()) {
                String tok = st.nextToken();
                if (temp == &quot;&quot;) {
                    temp = tok;
                }
                else {
                    if (fm.stringWidth(temp + &quot; &quot; + tok) &lt; width - col) {
                        temp += &quot; &quot; + tok;
                   }
                    else {
                      if ((col + fm.stringWidth(temp) &gt; width) &amp;&amp; (col != 0)) {
                          col = 0;
                          y += lineheight;
                          if (fm.stringWidth(temp + &quot; &quot; + tok) &lt; width - col) {
                                g.drawString(temp,col,y);
                                col = 0;
                                y += lineheight;
                                temp = tok;
                            }
                        }
                        else {
                            g.drawString(temp,col+inset,y);
                            col = 0;
                            y += lineheight;
                            temp = tok;
                        }
                    }
                }
            }
            if (temp != &quot;&quot;) {
                g.drawString(temp,col+inset,y);
                col += fm.stringWidth(temp)+fm.stringWidth(&quot;XX&quot;);
                temp = &quot;&quot;;
                if (col &gt; width) {
                    col = 0;
                    y += lineheight;
                }
            }
        }
    }
}
</pre>
</BODY></HTML>
