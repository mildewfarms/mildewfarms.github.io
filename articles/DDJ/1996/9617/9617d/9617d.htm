<HTML> <HEAD> 
<META NAME="year" CONTENT="1996">
<TITLE>Java Sourcebook 96: Calling Native Code From Java</TITLE>
</HEAD> <body bgcolor="FFFFFF"> <P>

<h1>Calling Native Code <P> from Java</h1><P>

<h2>Sometimes there's no other choice</h2><P>

<P>

<h3>Robi Khan</h3><P>

<P>

<P>

<P> <i>Robi is a developer at Corel Corp., where he works on
Java-related software projects. He can be reached at
robik@corel.com.</i></p><hr><P>

<P>

One of the benefits of programming in Java is that the Java Virtual
Machine (VM) hides platform differences. Applications can be developed
once and run anywhere a Java VM is implemented. Unfortunately, that
abstraction can get in the way of developing full-featured
applications. Although the AWT user-interface package, for instance,
provides a reasonable way to write cross-platform GUI code, it lacks
some basic services that users take for granted. For example, AWT
doesn't offer clipboard support. So even though all major GUIs
(Windows, Mac, Motif) have a clipboard, there's no way to access it
from Java. While it's relatively trivial to code a Java clipboard, it
would be nicer if the real clipboard were available, so data could be
exchanged with other applications.<P>

In this article I'll use native code to implement a Java <I>Clipboard
</I>class that does just that. Though the implementation of the
<I>Clipboard </I>class is for Win32, the basic principles of calling
native code are the same on all Java platforms. <P>

The tools and documentation needed to write native methods are
provided in the Java Development Kit (JDK) (http:// www.javasoft.com).
I used JDK 1.0.2 and Visual C++ 2.2 (4.x should work just as well) in
implementing <I>Clipboard. </I>The complete source code and related
files are available electronically.<P>

Purists may question using native code, since it is nonportable. Java
applets (as opposed to applications) aren't even allowed to load
native libraries for security reasons. Still, certain projects demand
access to native code. Anyone porting Java to a new platform must use
the native-code interface to call the underlying operating system
APIs. People writing stand-alone Java applications often need to use
existing code libraries until Java versions become available. In some
cases, execution speed may be critical enough that only compiled C/C++
code will suffice.<P>

<h3>Declaring Native Methods </h3><P>

Java doesn't support functions that exist outside a class--all
functions are methods bound to some Java object. So how can Java
programs call native C code, where objects and methods don't exist?<P>

The answer is that native code must be wrapped up in a Java class
definition. A Java class can be created where the methods are declared
in the standard fashion, but implemented in a C (or C++) library.
These methods are called "native" methods, and are identified by the
<I>native </I>modifier.<P>

A native method is just like a normal Java method except the
implementation is absent. As <a href="9617d.htm#02ba_03c7">Listing
One</A> illustrates, the <I>Clipboard </I>class has four native
methods. Notice that the class has a static block of code; this is how
the library containing the native code is loaded. This library is a
DLL on Win32, a shared library on the Macintosh, and shared object
(.so) under Solaris.<P>

<h3>Defining and Implementing the Class </h3><P>

Once a class with native methods is defined, it's compiled like any
other Java file (I used the JDK 1.0.2 javac compiler) to produce a
.class file; see <a href="9617d.htm#02ba_0156">Example 1(a)</A>.<P>

To allow access to the <I>Clipboard </I>object definition from native
code, a header file and stubs file are needed. The JDK tool javah does
this. It reads a .class file and outputs a header with the equivalent
C definition; see <a href="9617d.htm#02ba_0156">Example 1(b)</A>.
(Note that javah takes a class name--not a filename--as its argument.
This means that any class javah can find, including the standard java
classes or those specified in the CLASSPATH, can be used as an
argument.) You can easily generate class definitions for any class in
the CLASSPATH; see <a href="9617d.htm#02ba_0156">Example 1(c)</A>. <P>

The generated header file, Clipboard.h, shows what the class looks
like to C programs; see <a href="9617d.htm#02ba_03c6">Listing
Two</A>.<P>

The <I>ClassClipboard </I>struct mirrors the definition of the
<I>Clipboard </I>class. The lone member variable in the class, the
Boolean <I>auto_empty,</I> is defined in the C version as a
<I>long</I>.<P>

Javah generates a function prototype for each native method. The
function names are derived from the class name and method name; the
string <I>Clipboard_</I> is prepended to the method names to form the
function names. If <I>Clipboard </I>were defined as part of a package
(say, <I>my.ui.Clipboard)</I> the function names would begin with
<I>my_ui_Clipboard_</I> instead.<P>

Javah also does the work of generating the stubs file. The stubs file
is a C file that implements some glue code for the Java VM. Invoking a
native method at run time will cause the VM to call a stub function,
which, in turn, will call the function implementation. The stubs are
generated using the <I></I>-<I>stubs</I> option, passing the same
class name used when generating the header. In this case, the stubs
file will be Clipboard.c (<I>javah </I><I></I>-<I>stubs
Clipboard</I>).<P>

The actual implementation of <I>Clipboard</I>, ClipboardImpl.cpp, is
written in C++. Using C++ for the implementation is just as easy as
using C. The only requirement is that the class header be surrounded
in an <I>extern &quot;C&quot; </I>wrapper. The implementation file
implements the functions prototyped in Clipboard.h, calling various
Win32 APIs to manipulate the clipboard; see<a href="9617d.htm#02ba_03cd"> Listing Three</A>.<P>

<h3>Building the DLL </h3><P>

The final step in the native implementation is creating a DLL from the
header, stub, and implementation files. The DLL I'll create here is
Clipboard.dll.<P>

No special work has to be done to export functions in the DLL--the
stubs file already exports the required entry points. To build the
library, the stubs and implementation files (Clipboard.c and
Clipboard.cpp) should be compiled and linked into the same DLL. The
Java VM import library (javai.lib, found in the JDK lib directory)
should also be linked in: It provides entry points that allow the
native code to instantiate and call Java objects.<P>

The <I>Clipboard </I>class explicitly loads the Clipboard DLL in a
piece of static code run at class-load time. Once the DLL is loaded,
calls to any of the native methods are resolved dynamically by the VM
using <I>GetProcAddress()</I>. You should be aware that if a native
method is missing from the DLL, no error will occur until Java tries
to call it (at which point it will throw a <I>LinkageError</I>
exception). Similarly, if the entire DLL is missing or cannot be
found, Java will throw an <I>UnsatisfiedLinkError</I> when
<I>System.load </I>is called.<P>

The sample code includes an external makefile for Visual C++. Just run
nmake and all the necessary files will be built. The makefile requires
that<P>

<P>
<ul>
<li>The JDK 1.0.2 is properly installed. </li> <li>The ALT_BOOTDIR
environment variable is set to the JDK installation directory.</li>
<li>The JDK tools are in the PATH.</li>
</ul>
The virtual-machine headers
that <I>Clipboard </I>uses are all part of the JDK's include
directory.<P>

<h3>Running and Debugging the <I>Clipboard </I>Demo</h3><P>

Once everything is built, you can run the demo Java application with
the Java interpreter by typing <I>java NativeDemo</I>.<P>

<I>NativeDemo</I> uses <I>Clipboard </I>to read the contents of the
clipboard and prints the text to <I>System.out</I>. Then it calls
methods to set and retrieve text from the clipboard.<P>

<I>Clipboar</I><I>d</I>'s native code can be debugged by running
java.exe in the Visual C++ debugger. Just remember to specify
<I>NativeDemo</I> as the program argument. Also, add Clipboard.dll to
the list of additional DLLs in the debug-settings property page.<P>

<h3>Java Object Handles </h3><P>

If you look at the function prototypes that javah generates for the
<I>Clipboard </I>class, you'll notice that all the functions have the
same first parameter; see<a href="9617d.htm#02ba_03c8"> Example
2(a)</A>. This parameter is a handle to the object on which the method
operates. It is similar to the C++ <I>this</I> pointer, except that it
is explicitly declared. Like the <I>this</I> pointer, the handle
provides access to the class-member data.<P>

Unlike C++ object pointers, Java object handles cannot be dereferenced
with the <SUB>-</SUB>&gt; or * operators. Instead, you must use the
<I>unhand()</I> macro. This will return a pointer to the object's
data. The <I>Clipboard_getText</I> function uses <I>unhand()</I> to
check the <I>auto_empty</I> member variable; see <a href="9617d.htm#02ba_03c8">Example 2(b)</A>. <P>

It may seem tedious to use the <I>unhand()</I> macro to dereference
object handles every time member data needs to be accessed, but it is
necessary. If you dereference the handle and store the data pointer in
a temporary variable, you run the risk of the VM moving the data
somewhere else when garbage collection occurs. The VM will prevent
garbage collection if your data pointer is declared on the stack, but
this feature fails if you store the data pointer in a global. It is
just safer to use <I>unhand()</I> all the time.<P>

In the same header, you'll notice that javah created a type
<I>HClipboard </I>as a handle to <I>Clipboard </I>objects--it just used
the class name to make the type name. For classes that are in
packages, javah generates a handle name using the full package and
class name. For example, the class <I>java.lang.String</I> is referred
to internally with a handle named <I>Hjava_</I><I>
</I><I>lang_String</I>. As another example, <I>java.io.InputStream</I>
is referred to with <I>Hjava_io_InputStream</I>.<P>

<h3>Calling Java Code from C </h3><P>

The <I>Clipboard </I>class not only calls native code, but uses Java
objects like <I>String</I>s and <I>InputStream</I>s. Calling Java
objects from C is done with a set of functions exported from
javai.dll, the virtual machine DLL; see <a href="9617d.htm#02ba_7878">Example 3(a)</A>. <P>

The use of these functions is similar; they all take an execution
environment as their first parameter. An execution environment stores
the state of the Java stack--a zero is usually substituted for this
argument to refer to the current environment.<P>

The function <I>execute_java_constructor</I> instantiates a Java
object, either by class name or by using previously loaded class
information (pointed to by a <I>ClassClas</I><I>s</I>*). Using preloaded class information is faster
than resolving the class by name. Class information can be loaded
using <I>FindClass</I>; see<a href="9617d.htm#02ba_7878"> Example
3(b)</A>. When referring to a class by name, use the fully qualified
class name, and replace the periods with forward slashes; for example,
the class "java.lang.String" is referenced as "java/
lang/String."<P>

The <I>execute_java_static_method</I> function calls a static method
on a class. It requires the class information be found via
<I>FindClass</I> first. The method to be called is specified by the
method name.<P>

Similarly, <I>execute_java_dynamic_</I><I> </I><I>method</I> calls a
nonstatic method on an object. Instead of class info, you provide a
handle to the object on which the method operates. Curiously, the VM
does not provide a <I>FindMethod</I> call to bind to static or dynamic
methods--you always have to specify the method name when calling it.<P>

<h3>Method Signatures</h3><P>

When calling a constructor or method, you have to supply a method
signature. This is a string that describes the parameters for the
method. (The calls take a variable number of parameter arguments.) It
resembles <I>printf</I> format strings.<P>

The method signature is a string of the form
<I>(&lt;param_type&gt;...)&lt;return_type&gt;</I>. Parameter types are
simple, one-character values for intrinsic data types or a class name
for objects. If you supply an invalid method signature, an
<I>IncompatibleClassChangeError</I> exception will be thrown at run
time. You should carefully examine method signatures and their
parameters, since the parameters are untyped as with
<I>print</I><I>f</I>--an incorrect format string could cause a
crash.<P>

If you look at the stubs file generated in the example Clipboard.c,
you'll see that javah inserts comments with the method signature for
each of the native methods. If you are ever unsure about how to code
signatures, you can always use <I>javah </I><I></I>-<I>stubs </I>to
generate them directly from a method declaration. You can also use the
stubs file to see how intrinsic Java data types correspond to C data
types; see Table 1. Figure 1
provides some example method declarations and equivalent
signatures.<P>

<h3>Method Return Values </h3><P>

Both <I>execute_java_static_method</I> and
<I>execute_java_dynamic_method</I> return a <I>long</I>. If the method
being called returns an intrinsic type (whose size is less than or
equal to a <I>long</I>), you can simply cast the return value to that
type; see <a href="9617d.htm#02ba_03ca">Example 4(a)</A>.<P>

For methods that return objects, you can cast the return value to an
object handle of the appropriate type, as in ClipboardImpl.cpp; see <a href="9617d.htm#02ba_03ca">Example 4(b)</A>.<P>

<h3>Working with Strings </h3><P>

The VM provides a number of useful routines to convert strings from
Java to C and back. The routines are well documented in javastring.h
in the JDK include directory.<P>

<h3>Catching and Throwing Exceptions </h3><P>

You can throw Java exceptions from native code using the
<I>SignalError</I> function; see<a href="9617d.htm#02ba_03cb"> Example
5(a)</A>. It will instantiate an <I>Exception</I> (or
<I>Exception</I>-derived) object, and pass a message string to
<I>Exceptio</I><I>n</I>'s constructor. Note that <I>SignalError</I>
will not cause a C <I>lon</I><I>g</I><I>jmp</I> or C++ exception--the
code will still have to use <I>return, goto,</I> or C++
<I>exception</I> to exit out of the function. ClipboardImpl.cpp uses a
utility function <I>ThrowClipboardException</I> that, in turn, calls
<I>SignalError</I>.<P>

Catching Java exceptions is a little trickier. After looking through
the JDK header files, I turned up two macros in interpreter.h,
<I>exceptionOccurred</I> and <I>exceptionClear,</I> that allow you to
detect an exception and catch it. First use <I>exceptionOccurred</I>
to test if any exception has occurred. Then use <I>exceptionClear</I>
to clear the exception state so that it does not continue unwinding
the stack. These macros require an execution environment, and do not
accept zero as a default. A valid pointer to the current environment
can be obtained via the EE() function; see <a href="9617d.htm#02ba_03cb">Example 5(b)</A>.<P>

Unfortunately, these macros are not mentioned in the JDK online
documentation, so they may not be safe to call. Their use is also
limited by the fact that you cannot detect the type of exception that
occurred.<P>

<h3>Synchronization</h3><P>

If native methods are declared as <I>synchronized</I>, no additional
work is needed to make them thread safe. The VM will properly
synchronize native method calls.<P>

Functions corresponding to the <I>wait</I>, <I>notify</I>, and
<I>notifyAll</I> methods are exported from the VM. The macro
<I>obj_monitor</I> converts an object handle into a monitor usable by
these functions; see <a href="9617d.htm#02ba_03cc">Example 6</A>.<P>

<h3>Other Native Code Solutions </h3><P>

Both Microsoft and Netscape have alternative methods of accessing
native code from Java. Microsoft (which owns the reference
implementation of Java on Win32) has created a virtual machine where
the run-time layout of Java objects matches that of COM (Component
Object Model) objects. This makes Java objects callable as COM objects
from C/C++ code, and allows COM objects to be called from Java code.
This simplifies the calling protocol between Java and C greatly, and
may provide some execution-speed advantages. (Details can be found on
Microsoft's web site.) The big disadvantage is that it only works with
Microsoft's Java VM, and only on Windows. The original native code
interface at least provides source compatibility among platforms.
(Microsoft supports the existing interface as well.)<P>

Netscape has recently proposed an enhanced version of the native code
interface called JRI, (Java Runtime Interface). It is the same core
set of functions, plus additional functionality, including exception
handling. Its primary benefit over the Microsoft approach is that it
is a platform-independent API. It remains to be seen whether JavaSoft
will adopt JRI as a standard Java API.<P>

For most developers, the native method interface, with all its quirks,
is the only solution for applications today.<P>

<h4><a name="02ba_0156">Example 1: <B>(a) Compiling a class with native methods; (b) javah reads a .class file and outputs a header; (c) generating class definitions</B></h4><P>
<pre>
(a)   javac Clipboard

(b)   javah Clipboard

(c)   javah java.io.InputStream     
      javah java.lang.String
</pre>
<h4><a name="02ba_03c8"><B>Example 2: </B>(a) Functions all have the same first parameter; the Clipboard_getText function uses unhand to check the auto_empty member variable.</h4><P>
<pre>
(a)   extern void Clipboard_clear(struct HClipboard *hclip);

(b)   extern void Clipboard_clear(struct HClipboard *this_ptr)
      {
          ...
          if( unhand(this_ptr)-&gt;auto_empty ) ...
</pre>          

<h4><B>Figure 1: </B>Method declarations and equivalent signatures.</h4><P>
<pre>

<b>Method:</b>   boolean startsWith(String prefix, int toffset);
<b>Signature:</b>    &quot;(Ljava/lang/String;I)Z&quot;

<b>Method:</b>   void run();
<b>Signature:</b>    &quot;()V&quot;

<b>Method:</b>   Object put(Object key, Object value)
<b>Signature:</b>    &quot;(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;&quot;

<b>Method:</b>   void writeChars(char char_array[])
<b>Signature:</b>    &quot;([C)V;&quot;

</pre>

<h4><a name="02ba_7878"><B>Example 3: </B>(a) Calling Java objects from C; (b) class info can be loaded using FindClass.</h4>
<pre>
(a)  
HObject *execute_java_constructor(struct execenv *ee, 
  char *classname, ClassClass *c, char *signature, ... );
long execute_java_dynamic_method(struct execenv *ee, 
  HObject *obj, char *method_name, char *signature, ... );
long execute_java_static_method(struct execenv *ee, 
  ClassClass *c,   char *method_name, char *signature, ... );
ClassClass *FindClass(struct execenv *, char *classname, 
  bool_t resolve);

(b)   
ClassClass *      class_info;
Hjava_lang_string   *string_obj;

class_info= FindClass( 0, &quot;java/lang/String&quot;, true );
string_obj = (Hjava_lang_string)execute_java_constructor( 0, 0, 
                                            class_info, &quot;()&quot; );
</pre>

<h4><a name="02ba_03ca"><B>Example 4: </B>(a) Casting the return value; casting the return value to an object handle of the appropriate type.</h4><P>

<pre>

(a)   
char    a_byte;
a_byte = (char)execute_java_dynamic_method(0, obj_handle, 
            &quot;someMethodReturningByte&quot;, &quot;()B&quot; )

(b)   
Hjava_lang_String *clip_string;
long              retval;
retval = execute_java_dynamic_method(0, (Hobject *)this_ptr,
                         &quot;getText&quot;, &quot;()Ljava/lang/String;&quot;);
clip_string = (Hjava_lang_String)retval;

</pre>

<h4><a name="02ba_03cb"><B>Example 5: </B>(a) Throwing Java exceptions from native code; (b) catching Java exceptions.</h4>

<pre>

(a) 
SignalError( ExecEnv *, char * exception_classname, char * message);

(b)   
execute_java_dynamic_method(...)
If( exceptionOccured( EE() ) ) {
// some exception happened, so 'catch' it
    exceptionClear(EE());
   // will stop unwinding of stack
}

</pre>

<h4><a name="02ba_03cc"><B>Example 6: </B>Converting an object handle into a monitor.</h4>

<pre>

SomeClass_someMethod( HSomeClass * this_ptr )
{
    monitorWait( obj_monitor(this_ptr), timeout );
    monitorNotify( obj_monitor(this_ptr) );
    monitorNotifyAll( obj_monitor(this_ptr) );
}

</pre>

<h4><B>Table 1: </B>How intrinsic Java data types correspond to C data types.</h4><P>

<pre>
Java Type         C Equivalent                 Signature

long              int64_t (64-bit integer)     J
integer           long                         I
byte              char                         B
char              char                         C
enum              long                         E
float             float                        F
double            double                       D
boolean           long                         Z
void              void                         V
JavaObject        HObject * or derived         L&lt;classname&gt;;
Array of &lt;type&gt;   HarrayOf&lt;type&gt; * or          [&lt;type&gt;
                  HarrayOfObject *
</pre>

<a name="02ba_03c7"><PRE>
<H4>Listing  One</H4>
<PRE>

import java.io.*;

public class Clipboard
{
    static 
    {
    try {
        System.loadLibrary(&quot;Clipboard&quot;);
    } catch(UnsatisfiedLinkError e) {
        System.err.println(&quot;Could not load Clipboard dll&quot;);
    }
    }
    public Clipboard(boolean auto_empty) {
    this.auto_empty = auto_empty;
    }
    public native void clear();
    public native void putText( String clip_text );
    public native String getText();
    public native InputStream getStream();

    boolean auto_empty;
}


<a name="02ba_03c6"><PRE>
<H4>Listing  Two</H4>
<PRE>

/* DO NOT EDIT THIS FILE - it is machine generated */
#include &lt;native.h&gt;
/* Header for class Clipboard */

#ifndef _Included_Clipboard
#define _Included_Clipboard

typedef struct ClassClipboard {
    /*boolean*/ long auto_empty;
} ClassClipboard;
HandleTo(Clipboard);

#ifdef __cplusplus
extern &quot;C&quot; {
#endif
extern void Clipboard_clear(struct HClipboard *);
struct Hjava_lang_String;
extern void Clipboard_putText(struct HClipboard *,struct Hjava_lang_String *);
extern struct Hjava_lang_String *Clipboard_getText(struct HClipboard *);
struct Hjava_io_InputStream;
extern struct Hjava_io_InputStream *Clipboard_getStream(struct HClipboard *);
#ifdef __cplusplus
}
#endif
#endif


<a name="02ba_03cd"><a name="02ba_03c9"><PRE>
<H4>Listing  Three</H4>
<PRE>

// JDK headers do not include #ifdef __cpluscplus/extern &quot;C&quot; guards
// so we surround headers with extern &quot;C&quot;
extern &quot;C&quot; {
#include &quot;Clipboard.h&quot;
#include &quot;java_io_InputStream.h&quot;
#include &quot;java_io_StringBufferInputStream.h&quot;
}
#include &quot;windows.h&quot;

static void ThrowClipboardException(char * message)
{
    // throws a Java exception of type java.lang.Exception
    // and passes a given message string to the exception class constructor
    SignalError(0, &quot;java/lang/Exception&quot;, message );
}

// empties the Clipboard
void Clipboard_clear(struct HClipboard *)
{
    BOOL    emptied;

    emptied = EmptyClipboard();
}
// puts the given text string on the clipboard
void Clipboard_putText(
    struct HClipboard *     this_ptr,
    struct Hjava_lang_String *  text_string )
{
    HANDLE  hglb_clip_text;
    char *  text;
    int     text_len;

    if( !OpenClipboard(NULL) || !EmptyClipboard() ) {
    ThrowClipboardException(&quot;opening&quot; );
    return;
    }

    // make a C string out of the Java String
    text = makeCString( text_string );
    text_len = lstrlen(text);

    // allocate a global memory object for the text
    hglb_clip_text = GlobalAlloc( GMEM_DDESHARE, text_len + 1 );
    if( hglb_clip_text == NULL ) {
    // couldn't allocate block, so throw a Java exception
    ThrowClipboardException(&quot;allocating&quot;);
   return;
    }

    LPSTR   lpszClipBuffer;
    // lock the clip buffer, and copy the string into it
    lpszClipBuffer = (LPSTR)GlobalLock(hglb_clip_text);
    if( lpszClipBuffer == NULL ) {
    // couldn't lock memory so throw Java exception
    ThrowClipboardException(&quot;locking&quot;);
    }
    lstrcpy( lpszClipBuffer, text );
    GlobalUnlock( hglb_clip_text );

    SetClipboardData(CF_TEXT, hglb_clip_text );
    CloseClipboard();
}
// returns the clipboard text as a string
struct Hjava_lang_String *Clipboard_getText(
    struct HClipboard *     this_ptr)
{
    HANDLE  hglb_clip_text;
    char *  text;
    int     text_len;

    if( !OpenClipboard(NULL) ) {
    ThrowClipboardException(&quot;opening&quot; );
    return NULL;
    }

    // get the clipboard data
    hglb_clip_text = GetClipboardData(CF_TEXT);
    if( hglb_clip_text == NULL ) {
    return NULL;
    }

    LPSTR       lpszClipBuffer;
    Hjava_lang_String * clip_string;

    lpszClipBuffer = (LPSTR)GlobalLock(hglb_clip_text);
    if( lpszClipBuffer == NULL ) {
    ThrowClipboardException(&quot;locking&quot;);
    return NULL;
    }
    clip_string = makeJavaString(lpszClipBuffer, lstrlen(lpszClipBuffer));

    GlobalUnlock( hglb_clip_text);

    // if the auto_empty flag is set clear the clipboard
    if( unhand(this_ptr)-&gt;auto_empty ) {
    EmptyClipboard();
    }
    CloseClipboard();

    return clip_string;
}
// returns the clipboard text data in a stream
struct Hjava_io_InputStream *Clipboard_getStream(
    struct HClipboard * this_ptr )
{
    Hjava_io_StringBufferInputStream *  input_stream;
    long                retval;
    Hjava_lang_String *         clip_string;

    // call Clipboard.getString to get clipboard text
    retval = execute_java_dynamic_method( 0, (HObject *)this_ptr, &quot;getText&quot;,
    &quot;()Ljava/lang/String;&quot; );
    clip_string = (Hjava_lang_String *)retval;
    // construct a StringBufferInputStream from the string
    input_stream =(Hjava_io_StringBufferInputStream *)execute_java_constructor(
        0, &quot;java/io/StringBufferInputStream&quot;, 0, &quot;(Ljava/lang/String;)&quot;,
        clip_string );
    // StringBufferInputStream is derived from InputStream,
    // so this cast is perfectly valid
    return (Hjava_io_InputStream *)input_stream;
}
</PRE>

</BODY></HTML>
