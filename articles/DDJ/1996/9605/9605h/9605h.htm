<HTML> <HEAD> <!-- This document was built using HyperWriter Professional byNTERGAID Inc. --> <TITLE>MAY96: Improving Usenet News Performance</TITLE></HEAD>
<META NAME="year" CONTENT="1996">
<body bgcolor="FFFFFF"> <h1>Improving Usenet News Performance<a name="01c2_0096"><a name="01c2_0096"><a name="01c2_0094"><a name="01c2_0000"></h1><P>

<h2>A message-passing operating system is one place to start</h2><P>

<h3>Robert Krten</h3><P>

<P> <i><a name="01c2_0095"><a name="01c2_0000">Robert is a principal with PARSE
Software Devices. He can be contacted at rk@parse.com.</i></p><hr><P>

Usenet is a worldwide network of computers that allows users to post and read
messages (articles) categorized hierarchically into topical groups (newsgroups);
for instance, comp.os.qnx refers to the newsgroup &quot;computer science,&quot;
subgroup &quot;operating systems,&quot; thread &quot;qnx.&quot;<P>

In this article, I'll examine how Usenet news works on existing UNIX systems.
I'll then describe how the speed and efficiency of this arrangement can be
improved under the QNX operating system.<P>

<h3><a name="01c2_0097">How Does News Work?<a name="01c2_0097"></h3><P>

People from around the world post articles to various newsgroups. News servers
then distribute these articles to neighboring machines. Neighboring machines
distribute the articles to other machines until the article has been propagated
around the world. Machines check incoming articles to see if they already have a
copy, and delete the incoming article if they do. I won't detail the machines'
methods of getting articles, except to say there is a program on the user's
system that is responsible for getting articles from other machines and storing
them. <P>

For instance, a typical system accepts articles for about 4000 newsgroups (this
is by no means a huge system, either!). As each article comes in, the article's
header is scanned, and the news software determines which newsgroup the article
should be stored in.<P>

Before news traffic escalated, it seemed like a good idea to store one article
per file. Consequently, newsgroup names were simply converted into pathnames. For
example, the 1143rd article in the newsgroup  comp.os.qnx might be stored in a
file called &quot;/usr/spool/news/comp/os/qnx/1143.&quot; The next article that
came in for that newsgroup would go into /usr/spool/news/ comp/os/qnx/1144 and so
on.<P>

There are a number of reasons why this approach is no longer ideal. For one
thing, articles can arrive in any order: We're not always going to get all of the
articles for comp.os.qnx, then all of the articles for comp.os.rsx11, and then
comp.os.svr4. This means that as articles arrive, the news storage program is
creating files in an ad hoc manner all over the disk. Additionally, it creates
anywhere from a few-thousand to several-hundred-thousand files per day, depending
on the size of the feed!<P>

Given the volume of news these days, disks can fill up quickly. Consequently,
most news systems have an &quot;expiry policy.&quot; How long do you retain
articles before deleting them? This usually depends upon two factors--how much
disk space you have and which newsgroups you value. In the unlikely case that the
disk will never overflow, the volume of news coming in must equal the volume of
news being expired. On a typical news system, the expiry processing is done by a
batch file that runs periodically, say, once or twice a day. With current
implementations, expiry processing can take a few hours. Not only are there many
files being created in random places on the disk each second, there also are
roughly equal numbers of files being deleted from different random places each
second. This is suboptimal. <P>

Once the files are in their appropriate places, it is hoped that a large number
of users will read a large percentage of the articles that have been stored.
Sadly, the vast majority of news articles are never read. They simply expire.<P>

To make matters worse, the news systems in common use end up copying each article
many times over before placing it in its final resting place. Then, when it comes
time to expire the article, an additional read of the article takes place; see <a href="9605p1f1.gif">Figure 1</A>.<P>

<h3><a name="01c2_0098">How can this Process be Made Better?<a name="01c2_0098"></h3><P>

Rather than using a general-purpose file system to (suboptimally) manage a news
system, you can use your knowledge of how these files are created, read, and
deleted to create a file system uniquely tailored to handling this information.
However, the drawback of a &quot;new&quot; filing strategy is that a huge body of
free software available on the Internet is oriented toward the current
organization (the /usr/spool/news structure, for instance).<P>

<h3><a name="01c2_0099">The KNews Program<a name="01c2_0099"></h3><P>

Still, there are situations when you can leverage operating-system features to
improve things. KNews, the program I present here, takes advantage of some
features of the QNX operating system to more efficiently handle news articles.
Under KNews, one or more programs get and store articles, while a different
program implements a &quot;virtual file system&quot; to keep track of the
articles.<P>

The first program (the newsfeeder) knows how to get articles from other machines.
(There actually are two main variants of the newsfeeder: one that knows how to
get articles from NNTP-based hosts, and another that knows how to get articles
from UUCP/rnews feeds.) When the newsfeeder gets an article, it looks at the
header. In conjunction with the local expiration policy file, the newsfeeder
program immediately determines when the article will expire. The article is then
appended to a file that has other articles that expire at that same time. When
the article is placed into the file, the article's position and its length are
noted.<P>

For example, assume you were examining article 677, posted to ott.forsale on
January 15, 1996, at 10:34 GMT. The expiration period for that particular
newsgroup is four days. Consequently, you know that the article will expire on
January 19, 1996, at 10:34 GMT. Therefore, you store the article at the end of a
file called 960119.10 (ignore the :34 because you've defined the expiry
granularity to be one hour). You then make a note of the article's position
within the storage file, along with its length and number: ott.forsale, art#677,
exp 1996 01 19 10:00, pos 36554, len 495.<P>

By the time you received a day's worth of news, you would have created a number
of files, each containing collections of articles. The number of files created is
a function of the expiration policy and the expiration granularity. For example,
with a maximum expiration of ten days and expiration granularity of six hours,
you would create 40 files (10*24/6). This is between 3- and 4-orders-of-magnitude
fewer files than conventional means!<P>

<h3><a name="01c2_009a">Retrieving Articles<a name="01c2_009a"></h3><P>

Okay, so now all the articles are in a few big files--which I call expiry-ordered
heap (EOH) files--stored in a directory. By convention, this directory is
/usr/spool/ knews. What you really want to do is have the operating system
present a /usr/spool/ news directory structure to all applications. This way,
none of the applications have to be modified to work with KNews. What this means,
in effect, is that you map files under /usr/spool/news into portions of your EOH
files; see <a href="199601c9.htm">Figure 2</A>.<P>

The newsfeeder program already provides the information you need: the newsgroup
name, article number, EOH file name, position within the file, and length of the
article.<P>

Under most operating systems, creating a virtual file system that does this kind
of mapping is a major undertaking. Under the QNX operating system, it simply
involves writing a few hundred lines of code.<P>

<h3><a name="01c2_009b">Taking Over /usr/spool/news<a name="01c2_009b"></h3><P>

The first step to implementing a virtual file system is to fake the
/usr/spool/news directory structure. To applications programs, it must appear
that the directory exists and operates just like a disk-based file system
would.<P>

Our virtual file system (VFsys.knews) should export the illusion of two main
object types--subdirectories and files-- and it should support read-only attempts
to access these objects; see <a href="9605h.htm#01c2_00a2">Example 1</A>. Since
it is a read-only file system, you'll also need some method of telling
VFsys.knews about new articles, by giving it the article number, expiry date,
offset, and length.<P>

<h3><a name="01c2_009c">A Little Background<a name="01c2_009c"></h3><P>

QNX is a microkernel, message-passing operating system with most services
implemented via a message. For example, when an application (client) opens a
file, the application's C library <I>open </I>code places the arguments passed to
the <I>open()</I> call into a message, then sends this message to the process
that is managing the file system, <I>Fsys</I> (server).<P>

<I>Fsys</I> decides if the <I>open </I>should succeed or not (based on
permissions, existence of the file, or whatever) and returns a status. Sometime
later, the client might request a read of 200 bytes. Again, the client's library
composes a message, which it then sends out to the server, requesting that a read
be performed. The server will go out to disk, then return the data to the client.
<P>

<I>Fsys</I> isn't the only program that is allowed to receive and process
<I>open</I> and <I>read</I> calls, though. Under QNX there is no sacred attribute
associated with programs like <I>Fsys</I> versus user-written programs. However,
you can do a neat trick under QNX that you can't easily do under other operating
systems: You can write a program that assumes responsibility for a portion of the
pathname space. This functionality is a subset of what is generally termed a
&quot;resource manager&quot; under QNX.<P>

<h3><a name="01c2_009d">What Does a Resource Manager Have to Do?<a name="01c2_009d"></h3><P>

To successfully take over /usr/spool/news, you have to: <P>

<ol>1.     Tell someone that you are now responsible for a portion of the
pathname space (that is, you register yourself).</ol><P>

<ol>2.     Handle requests from clients (<I>open</I>, <I>read</I>, <I>close</I>,
and so on).</ol><P>

<ol>3.     Handle other messages from a cooperating newsfeeder program (new
article has arrived, expire, and so on).</ol><P>

In order to implement step 1, the function <I>resmgrInit</I> in resmgr.c
(available electronically; see &quot;Availability,&quot; page 3) calls
<I>qnx_prefix_attach</I> to associate the program with a particular pathname
prefix; in this case, /usr/spool/news. This causes any process opening files and
directories in this portion of the pathname space to send its messages to our
process instead of the process managing the actual disk drive.<P>

To implement steps 2 and 3, the function <I>serve</I> in resmgr.c waits for
messages from clients (the <I>Receive</I> function call). This is a blocking
call: The program does not continue past <I>Receive</I> until a message has been
received. Once you get a message, you call the appropriate routine from the jump
table. You can receive a whole range of messages, each corresponding to either
some C-function call that a client can execute, or some of the special newsfeeder
messages. In terms of regular messages, you receive messages corresponding to the
<I>open</I>, <I>read</I>, <I>write</I>, <I>readdir</I>, and <I>stat</I> calls. To
implement the virtual file system, you just have to handle these calls. <P>

The <I>open</I> call specifies which file is being opened. Because you can get
requests from multiple clients (for example, three different terminal sessions
can all do an ls on some portion of /usr/spool/news at the same time), you have
to track processing based upon who is sending the message. So, in the <I>open</I>
handler you will notice an open control block (OCB) associated with the
particular request, via <I>map_ocb</I>. This OCB holds the state information
associated with a particular client's use of the virtual file system.<P>

There are really two types of requests that you can handle: file requests and
directory requests. File requests deal with the functions in <a href="9605h.htm#01c2_00a1">Table 1(a)</A>. Directory requests are similar; see <a href="9605h.htm#01c2_00a1">Table 1(b)</A>. Once you have associated the context
with the <I>open</I> call, you can then expect that you will receive a <I>read
</I>request, followed by a <I>close </I>request. The <I>close </I>request is
where you disassociate the context from the request.<P>

The real work is done in the <I>open</I> (in the case of files) or <I>read</I>
(in the case of directories) functions. For a file, <I>open</I> has to verify
that the file actually exists, then it has to initialize the context for that
file.<P>

To determine if the file exists, you look at some internal data structures that
VFsys.knews maintains (in database.c, available electronically). This data is a
network of directories and files, similar to what a file-system manager would
actually maintain on disk; see <a href="199601c6.htm">Figure 3</A>. By following
the chain of directories (shown as circles in <a href="199601c7.htm">Figure
3</A>), you eventually get to a file entry (shown as a rectangle in the figure).
The file entry tells us the article number, EOH filename, position, and
length.<P>

You then open the EOH file, seek to the article's starting position, and store
the file descriptor in the context block. Then, whenever the client performs a
read, your server just reads bytes from the file descriptor and transfers them
back to the client.<P>

There is a similar flow for directories. The directory path is evaluated against
the internal database structure and checked for validity. If invalid, an error
status is returned to the client. If valid, an OK status is returned, and you can
expect that the client will send the server <I>io_readdir</I> messages to get the
directory entries. Again, you make use of the context block, but this time, you
drive the processing by a finite-state machine. The context block's state
variable, <I>ocb --&gt; state,</I> can have one of these state values:
<I>OCBState_Initial</I>, <I>OCBState_GetFiles</I>,
<I>OCBState_GetDirectories</I>, or <I>OCBState_Done</I>.<P>

<I>OCBState_Initial</I> generates the virtual directory entries &quot;.&quot; and
&quot;..&quot; (each directory must have these), then transits to either the
<I>OCBState_GetFiles</I> or <I>OCBState_</I><I> </I><I>GetDirectories</I> state,
depending upon what is contained in the internal database structure.
<I>OCBState_GetFiles</I> returns directory entries for files, one-by-one, from
the internal database structure. <I>OCBState_</I><I>
</I><I>Get</I><I>Directories</I> does the same thing for subdirectories.<P>

I use functions like <I>io_stat</I> (for the client's <I>stat</I> function call),
<I>io_chdir</I>, and so on. Their operation is analogous to the operation of the
simple <I>open</I>/ <I>read</I>/<I>close</I> and
<I>handle</I>/<I>readdir</I>/<I>close</I> messages.<P>

Apart from the standard resource manager messages, there also are a number of
messages that deal specifically with VFsys.knews itself; for example, messages
that tell VFsys.knews about a new article that's just become available, or tell
VFsys.knews to expire articles.<P>

<h3><a name="01c2_009e">Handling the Expiry Message<a name="01c2_009e"></h3><P>

When a client sends the expiry message, the <I>Receive</I> in procedure
<I>serve</I> (resmgr.c) gets the message and the <I>newsmsgsJT</I> jump table
ends up calling the procedure <I>newsExpire</I>. The procedure <I>newsExpire</I>
calls <I>journalExpire</I> and <I>databaseExpire</I>, which do the work.
<I>databaseExpire</I> runs through all of the internal database elements, finds
the articles that have expired, and removes them. I optimized for speed here by
having the database entries sorted by expiration. On my system, a 486/33 with
about 10 KB of articles being expired, this took under one second. You could run
expire once per minute if you wanted to, although a practical limit would be once
per hour. I run mine every three hours.<P>

<h3><a name="01c2_009f">So What's Available?<a name="01c2_009f"></h3><P>

VFsys.knews is an ongoing project. In addition to the work I've described here,
other developers around the world are working on source code for configuration,
newsfeeders, and management software. If you are interested in participating in
the project, send me e-mail at rk@parse.com. I'm particularly interested in
hearing from anyone who would like to port this architecture to other operating
systems. It might not be as simple as under QNX, but if we keep the same basic
functionality, we can save a lot of grief for system administrators on other
operating systems.<P>

<h3><a name="01c2_00a0">For More Information<a name="01c2_00a0"></h3><P>

QNX Software Systems Ltd.<P>

175 Terence Matthews Crescent<P>

Kanata, ON Canada, K2M 1W8<P>

613-591-0931<P>

http://www.qnx.com<P>

<h4><B><a href="9605p1f1.gif">Figure 1</A>:</B> Conventional news flow.</h4><P>

<h4><B><a href="199601c9.htm">Figure 2</A>:</B> Mapping /usr/spool/news to EOH
files in /usr/spool/knews.</h4><P>

<h4><B><a href="199601ca.htm">Figure 3</A>: </B>Internal database
organization.</h4><P>

<h4><a name="01c2_00a1"><B>Table 1:</B> (a) File request functions; (b) directory requests.<a name="01c2_00a1"></h4><P>
<pre>
File Request          resmgr.c Procedure
(a)
Open a file.          <I>io_open</I>
Read that file.       <I>io_read</I>
Close that file.      <I>io_close</I>

(b)
Open a directory.     <I>io_handle</I>
Read entries out of
  that directory.     <I>io_readdir</I>
Close that directory. <I>io_close</I>
</pre>

<h4><a name="01c2_00a2"><B>Example 1:</B> A virtual file system for news.<a name="01c2_00a2"></h4><P>
<pre>
 $ cd /usr/spool/news/comp/os/qnx
 $ ls
   1134    1136    1137    1142
 $ cat 1134
   &lt;contents of article 1134 show up&gt;
 $ cd ../vms
 $ pwd
   /usr/spool/news/comp/os/vms
</pre>
</BODY></HTML>
