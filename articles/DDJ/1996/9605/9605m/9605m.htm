<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>MAY96: JAVA Q&A</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>JAVA Q&amp;A<a name="01df_00a0"><a name="01df_00a0"><a name="01df_009e"><a name="01df_0000"></h1><P>

<h2>How Do I Display an Image? </h2><P>

<h3>Cliff Berg and Steve Alexander</h3><P>

<P>
<i><a name="01df_009f"><a name="01df_0000">Cliff is vice president of technology and Steve president of Digital Focus. They can be contacted at cliffbdf@digitalfocus.com and steveadf@digitalfocus.com, respectively.</i></p><hr><P>

This is the first installment of a new column designed to answer your questions about Java. Each month we will select questions submitted to The Java Developer Web site (http:// www.digitalfocus.com/faq/), an independent forum for the exchange of technical information about Java. We also are constructing a Java lab that will focus on the use of Java technology within intranets, the Internet, and embedded environments. This will provide a base from which to evaluate technology and explore new ways to use Java to solve real-world problems. We welcome you to this column and hope to answer the questions that are of most interest to you. If you have specific questions or contributions, please submit them via our Web site.<P>

<h3>--C.B. &amp; S. A.</h3><P>

Graphic image display in Java involves issues such as the types of supported image file formats, image source (local, remote, or program generated), and monitoring of the loading process.<P>

Currently, Sun's Java graphics programming library (AWT) supports GIF and JPEG images. Format considerations include local color palettes, feature restrictions (compression, color depth, and interlacing, for example), and dithering.<P>

This month, we'll examine the techniques necessary to load an image from a local file, remote location, and memory. In the coming months, we'll discuss issues such as monitoring the loading process.<P>

<h3><a name="01df_00a1">Loading an Image from a Local File<a name="01df_00a1"></h3><P>

To load a single image in an application (a Java program run from the command line), use <I>Image img = myWindow.getToolkit() .getImage(&quot;orion.jpg&quot;);</I> to load the JPEG image file <I>orion.jpg</I> (where <I>myWindow</I> is the Window or Frame object in which you want to display the image).<P>

In a browser applet, use <I>Image img = </I><I>((Window)(myApplet.getParent())) .getToolkit().getImage(&quot;orion.jpg&quot;);</I>, where <I>myApplet</I> is the applet in which you plan to display the image. Note that this assumes the applet is instantiated inside a Frame or Window, which is consistent with the way Netscape handles applets.<P>

After the Image is loaded, display the image by drawing it in a Graphics context. (Every AWT component object has a Graphics context.) This is done in the <I>paint()</I> method of a component, because <I>paint()</I> is called by AWT automatically when the image is done loading; see <a href="9605m.htm#01df_00a5">Listing One</A>. Image loading is asynchronous. Loading does not necessarily occur until you attempt to display the image, via <I>drawImage()</I>. The last parameter to <I>drawImage()</I> specifies which component to repaint when the image is finally ready. This is normally the component that calls <I>drawImage()</I> in the first place. The following sequence of events occurs:<P>

<ol>1.     When the applet is first loaded, <I>paint()</I> is called for each component; in <a href="9605m.htm#01df_00a5">Listing One</A>, the component calls <I>drawImage()</I>.</ol><P>

<ol>2.     The applet continues processing without waiting for the image. (The applet does not even know how big the image is.)</ol><P>

<ol>3.     AWT finishes fetching the image, if it has not already.</ol><P>

<ol>4.     When the image is ready to display, AWT calls <I>imageUpdate()</I> for the component you specified in <I>drawImage()</I>. This is effectively a callback, although we have achieved it in an object-oriented way--by passing an object instead of a function.</ol><P>

The default behavior of <I>imageUpdate()</I> is to repaint the component by calling its <I>paint()</I> method again. Since the image is now available, it will be redrawn. Its dimensions are now known as well.<P>

Since image loading is asynchronous, you cannot call <I>loadImage()</I> followed immediately by <I>drawImage()</I> and expect to see the image--<I>drawImage()</I> will start fetching the image, but it cannot display it until the image is available. You must take advantage of the callback mechanism that calls <I>paint()</I> to ensure that a final call to <I>drawImage()</I> is made when the image has been loaded.<P>

<h3><a name="01df_00a2">Loading a Remote Image<a name="01df_00a2"></h3><P>

Images loaded across a network have the same considerations, except you must use a version of <I>getImage() </I>that takes a URL object as a parameter. Construct the URL object in the <I>getImage()</I> call like this: <I>applet</I><I> </I><I>.getImage(new URL(&quot;www.somewhere .com/orion.jpg&quot;));</I>.<P>

Here, we have used an applet <I>getImage()</I> member function rather than the Toolkit member function used earlier. Since the applet <I>getImage()</I> method uses a URL argument (rather than a filename), it is appropriate for retrieving a remote file. Specifying a file URL using the <I>file:///</I> syntax apparently is not yet fully implemented.<P>

<h3><a name="01df_00a3">Loading from <I>MemoryImageSource</I><a name="01df_00a3"></h3><P>

If an image can be algorithmically generated, it may be more efficient to create the image on-the-fly rather than load it from a persistent source such as a disk or server. There is no need, for example, to obtain a simple color gradient from a bitmap file.<P>

Several objects and interfaces allow you to implement memory-based image objects in Java. The key class, <I>MemoryImageSource</I>, creates in memory an image object containing the color model, physical dimensions, offset, and (of course) actual pixel information. With this class, creating an image is a two-step process: First, define an <I>int</I> or <I>byte</I> array and populate it with data; see <a href="9605m.htm#01df_00a7">Listing Two</A>. Next, use that array to create a memory object (<I>MemoryImageSource</I>) that serves as the source of data for the new image; see <a href="9605m.htm#01df_00a9">Listing Three</A>.<P>

<I>MemoryImageSource</I> has six constructors that give you a range of options in array types, color models, and properties. The <I>createImage()</I> method can take either a width and height parameter or an <I>ImageProducer</I> object such as <I>MemoryImageSource</I>. For any type of image processing using data arrays, use the <I>MemoryImageSource</I> implementation.<P>

It is easy to introduce variations in image array processing. The result is a fast and efficient image-display technique for your Java applet or application. <a href="9605m.htm#01df_00ab">Listing Four</A> presents a complete working demo.<P>

<P>

<h4><a name="01df_00a4"><a name="01df_00a5">Listing One<a name="01df_00a5"></h4><pre>
class MyCanvas extends Canvas
{
    Image image;
    public MyCanvas(Image img) { image = img; }
    public void paint(Graphics g)
    {
      // Draw the image on the Graphics context. This is non-blocking.
      g.drawImage(image, 0, 0, this);
    }
}
</pre>
<h4><a name="01df_00a6"><a name="01df_00a7">Listing Two<a name="01df_00a7"></h4><pre>
public Image makeImage(int width, int height)
{
    int index = 0;
    int myImageData[] = new int[ width * height ];
    for(int y = 0; y &lt; height; y++)
    {
        int a = y * (255 / ((height/20)-1));
        for(int x = 0; x &lt; width; x++)
        {
            int b = x * (255 / ((width/20)-1));
            myImageData[index++] = (255 &lt;&lt; 24) | (a &lt;&lt; 16) | b;
        }
    }
</pre>
<h4><a name="01df_00a8"><a name="01df_00a9">Listing Three<a name="01df_00a9"></h4><pre>
  myImage = createImage(new MemoryImageSource(width, height, 
                                                     myImageData, 0, width));
  return myImage;       
}
</pre>
<h4><a name="01df_00aa"><a name="01df_00ab">Listing Four<a name="01df_00ab"></h4><pre>
import java.awt.*;
import java.applet.*;
public class ImageDemoApplet extends Applet
{
    static Frame frame;
    MyCanvas canvas;
    Image image = null;
    public void init()
    {
        image = getParent().getToolkit().getImage(&quot;orion.jpg&quot;);
        canvas = new MyCanvas(image);
        add(canvas);
    }
    public static void main(String args[])
    {
        frame = new Frame();
        ImageDemoApplet app = new ImageDemoApplet();
        frame.add(&quot;Center&quot;, app);
        frame.resize(200, 200);
        app.init();
        app.start();
        frame.show();
    }
}
class MyCanvas extends Canvas
{
    Image image;
    public MyCanvas(Image img)
   {
        image = img;
        setBackground(Color.white);
        resize(100, 100);
    }
    public void paint(Graphics g)
    {
      // Draw the image on the Graphics context. This is non-blocking.
      g.drawImage(image, 0, 0, this);
    }
}
</pre>
<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
