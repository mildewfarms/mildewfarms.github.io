<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>MAY96: Sharing Data Between Web Page Frames Using JavaScript</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>Sharing Data Between Web Page Frames Using JavaScript<a name="01cb_0098"><a name="01cb_0098"><a name="01cb_0096"><a name="01cb_0000"></h1><P>

<h2>Implementing a hidden-frame technique</h2><P>

<h3>Tom Tessier</h3><P>

<P>
<i><a name="01cb_0097"><a name="01cb_0000">Tom is a student in the engineering physics department at the University of Alberta, Canada. He can be reached at tessier@ee.ualberta.ca.</i></p><hr><P>

Although HotJava and client-side image maps are significant features in Netscape Navigator 2.0, the addition of frames and JavaScript may make a more immediate impact on average Web users. With these, the very nature of the Web will be changed from static, boring, non-interactive pages to sites that are different each time users visit them, containing table of contents information displayed at all times, interactive games, and more.<P>

In this article, I'll examine how to create such dynamic pages. <P>

<h3><a name="01cb_0099">The &lt;Frameset&gt; Tag<a name="01cb_0099"></h3><P>

Frames divide a Web page into multiple scrollable regions, allowing different HTML documents to be displayed in a single window. Frames can be targeted by other URLs on the same page, share data, display table of contents and copyright information at all times, and so on.<P>

The HTML code that initiates a frame-based page is actually quite small, its only purpose being to divide the page up into regions and load documents into these different areas. Two distinct tags are required: <P>
<ul>
<li>&lt;Frameset&gt;, used to specify exactly how the frames will appear on the Web page. </li>
<li>&lt;Frame&gt;, which defines the various aspects of each frame, including which URL to load. </li>
</ul>
A <I>COLS=&quot;parameter&quot;</I> attribute placed within the &lt;Frameset&gt; tag divides the page vertically, while a <I>ROWS=&quot;parameter&quot;</I> command splits the page horizontally. For example, to divide the page into two equal halves--one frame on the left and one on the right--you would enter the tag &lt;Frameset COLS=&quot;50%,50%&quot;&gt;. To implement both column and row frames, simply nest the &lt;frameset&gt; tags. The placement of the nested frames is important, since the frame order is based on the sequence in which the tags are positioned in the HTML; see <a href="9605i.htm#01cb_009e">Example 1</A> and the resulting page in <a href="199601cd.htm">Figure 1</A>. <P>

Frames, by default, are empty and non-functional. You must point each frame to a document using the identifier &lt;FRAME SRC=&quot;URL&quot;&gt;. The physical frame referenced by the SRC command depends on the location of the current &lt;Frame&gt; tag. For example, if the second FRAME SRC statement within a &lt;Frameset&gt; points to THISURL, then THISURL will be loaded into the second frame; see <a href="9605i.htm#01cb_009e">Example 1</A> and <a href="199601ce.htm">Figure 1</A>. For a complete list of attributes available for both the &lt;Frameset&gt; and &lt;Frame&gt; tags, see <a href="9605i.htm#01cb_009d">Figure 2</A>. Note that a frame HTML document has no BODY, and no tags normally associated with the &lt;Body&gt; identifier may appear before the &lt;Frameset&gt;.<P>

<h3><a name="01cb_009a">Referencing Frames<a name="01cb_009a"></h3><P>

Frames can be referenced using the TARGET command. By placing <I>TARGET=</I><I> </I><I>&quot;window_name&quot;</I> into the anchor, client-side image map, or form tags, the URL pointed to by the tag will be loaded into the frame called <I>window_nam</I><I>e</I>; see <a href="9605i.htm#01cb_009f">Example 2</A>.<P>

Another important JavaScript document object useful to frames is <I>location.href,</I> which lets you dynamically alter the location of the current window or frame. A particularly powerful use of this object is to make the frame point to itself, allowing the JavaScript code to generate a different page at various times. This is done by simply entering <I>location.href=location.href</I>. When encountered, this causes the page to reload and reexecute. The problem is, all of the data in the page will be reset every time the URL reloads. Obviously, if you plan to keep track of variables between frame sets, a different scheme must be used.<P>

The key is to store the page in a frame. Then, using an undocumented feature of JavaScript, a dynamically loadable page may be created. The undocumented  object, <I>parent.variable_name</I>, allows a child frame to freely access the parent's JavaScript data, as illustrated in <a href="9605i.htm#01cb_00a0">Example 3</A> (the page is displayed in <a href="199601cf.htm">Figure 3</A>). Notice that at least two frames must be set up before Netscape will initiate the frame session. The second frame is sized using the parent frame to hold all of the child's variables; the child may reload at will with no risk of the parent losing its data.<P>

You also can use the parent frame to store actual HTML code. This is useful in creating interactive pages by writing the variable's contents to the page at the start of the document (writing to the page after a document has loaded is illegal). For example, insert the line <I>document.write (parent.code); </I>see <a href="9605i.htm#01cb_00a0">Example 3</A>.<I> </I>It is even possible to have code change with time by simply writing new text into the <I>parent.code </I>variable. Conceivably, one could use this technique to store all of the required HTML documents for a page into a single file. <P>

It should be noted that Netscape Navigator 2.0, although now in release, is still buggy and can have problems with frame-data accessing. For example, resizing the page will cause the entire document to reset. Keep this in mind when using frame-data sharing.<P>

<h3><a name="01cb_009b">Creating an Interactive Questionnaire<a name="01cb_009b"></h3><P>

In my article, &quot;Using JavaScript to Create Interactive Web Pages&quot; (<I>DDJ</I>, March 1996), I presented JavaScript code that generated a simple multiple-choice page: It prompted the user to select an option and displayed the results via form inputs. Listings <a href="9605i.htm#01cb_00a2">One</A> and <a href="9605i.htm#01cb_00a4">Two</A> are that same multiple-choice code converted to the dynamic-frame method. As can be seen in <a href="199601d0.htm">Figure 4</A>, the resulting page is much more attractive, looking more like a CGI-generated document than a cheap form hack. The advantages of using the dynamic-frame method, as opposed to the form-output technique are many. The resulting Web pages are not restricted solely to forms for output: Pictures, fonts, colors, and anything else that would ordinarily be placed in HTML may be used.<P>

<h3><a name="01cb_009c">Conclusion<a name="01cb_009c"></h3><P>

Frames are a powerful addition to HTML. By simply adding frames to a Web page, the documents contained there can be much easier to use. Frame-based table of contents information, form results, and so on, increase the quality of the World Wide Web. Used in conjunction with JavaScript, filenames allow the creation of impressive pages previously realizable only through complex server-based CGI.<P>

<h4><B><a href="199601ce.htm">Figure 1</A>: </B>The Web page resulting from the HTML code in <a href="9605i.htm#01cb_009e">Example 1</A>.</h4><P>

<h4><a name="01cb_009d"><B>Figure 2: Summary of the frame tags and their attributes:</B> (a) &lt;Frameset&gt; tag; (b) &lt;Frame&gt; tag; (c) &lt;Noframe&gt; tag.<a name="01cb_009d"></h4><P>
<B>(a)</B><p>

&lt;FRAMESET<I> parameter</I>&gt; <I>frame data</I> &lt;/FRAMESET&gt;. Divide a page into 
frames, where frame data holds the &lt;FRAME&gt; and nested &lt;FRAMESET&gt; tags, 
while parameter is one of the following:<P>
<ul>
<li>ROWS = <I>&quot;height value list&quot;</I> --specifies the number
and height of row (horizontal) frames to divide the page into </li>
</ul>
<P>
<ul>
<li>COLS = <I>&quot;width value list&quot;</I> --indicates the number
and width of column (vertical) frames to divide the page into.</li>
</ul>
<P>

To have both columns and rows on a page, the &lt;FRAMESET&gt; tags
must be nested (see <a href="9605i.htm#01cb_009e">Example 1</A>). The
height and width value lists follow the same syntax: a comma separated
list, with the total number of items indicating the desired number of
row or column frames. The format of each item in the list is as follows:<p>

<B>Integer Value.</B> Indicates the size, in pixels, of the frame (if
not used in conjunction with the values below, NetScape will frequently
override this value to force the frame to fill up the entire window).<p>

<B>Percentage Value.</B> Indicates the percentage size of the frame (if
the total percentage does not equal 100 percent, NetScape will force the
frames to fill up the entire window). For example:  &lt;FRAMESET
COLS=&quot;50%,50%&quot;&gt; divides the page into two equally sized
column frames, one on the left and one on the right.<p>

<B>Relative Value.</B> Implied with the *, relative values specify the
size of each frame in relation to the remaining items in the list. For
example:<P>
<ul>
<li> &lt;FRAMESET ROWS=&quot;*,*,*&quot;&gt; creates a total ratio of 3
(1+1+1), dividing the page equally into three rows each taking up 1/3 of
the space: one frame on top, one in the middle, and one on the
bottom.</li>
</ul>
<P>
<ul>
<li> &lt;FRAMESET ROWS=&quot;2*,*&quot;&gt; creates a total ratio of 3
(2+1), giving 2/3 of the space to the top frame, 1/3 to the
bottom.</li>
</ul>
<P>
<ul>
<li> &lt;FRAMESET ROWS=&quot;2*,*,*&quot;&gt; creates a total ratio of 4
(2+1+1), giving 1/2 of the space to the top frame, 1/4 to the middle,
and 1/4 to the bottom.</li>
</ul>
<P>
<ul>
<li> &lt;FRAMESET ROWS=&quot;3*,*,2*,*&quot;&gt; creates a total ratio
of 7 (3+1+2+1), giving 3/7 for the top row, 1/7 for the second, 2/7 for
the third, and 1/7 for the bottom-most. </li>
</ul>
<P>

In general, it is easiest to use percentages. Mixing of the three
types of values is also allowed. For example:<P>
<ul>
<li> &lt;FRAMESET COLS=&quot;100,*,100&quot;&gt; assigns 100 pixels for
the width of the left-most and right-most frames, while the rest of the
space is given to the middle. </li>
</ul>
<P>
<ul>
<li> &lt;FRAMESET COLS=&quot;20%,*&quot;&gt; assigns 20 percent of the
space for the left frame, and gives the remaining space to the
right-most. A value of 80 percent in place of * is equivalent.</li>
</ul>
<P>


<B>(b)</B>
&lt;FRAME <I>parameters</I>&gt;. Define the document attributes of each
frame, where the parameters are:<P>
<ul>
<li> SRC--<I>&quot;url&quot;</I> specifies the document URL to load into
this frame. Without SRC, the frame is blank (and will not be
functional).</li>
</ul>
<P>
<ul>
<li> NAME=<I>&quot;window name&quot;</I> indicates the name to assign to
this frame so that it can be targeted by documents in separate frames,
via the TARGET attribute.</li>
</ul>
<P>
<ul>
<li> MARGINWIDTH=<I>&quot;value&quot;</I> controls the frame margin
width in pixels (used to control how the document text will be
constrained by the left and right sides of the frame).</li>
</ul>
<P>
<ul>
<li> MARGINHEIGHT=<I>&quot;value&quot;</I> controls the frame margin
height in pixels.</li>
</ul>
<P>
<ul>
<li> SCROLLING=<I>&quot;yes|no|auto&quot;</I> defines whether the frame
should have a scrollbar or not. <I>Auto</I> instructs Netscape to place
scroll bars as necessary.</li>
</ul>
<P>
<ul>
<li> NORESIZE if present, indicates that the frame cannot be resized by
the user. Useful in implementing a hidden frame.</li>
</ul>
<P>

<B>(c)</B>
&lt;NOFRAMES&gt; <I>Alternate HTML code</I> &lt;/NOFRAMES&gt;. The
NOFRAME tag provides alternative content viewable by non-Frame-capable
clients. NetScape Navigator 2.0 will ignore all tags and data contained
between the start and end NOFRAME tags.<p>


<h4><B><a href="199601d2.htm">Figure 3</A>: </B>The page resulting from <a href="9605i.htm#01cb_00a0">Example 3</A>.</h4><P>

<h4><B><a href="199601d3.htm">Figure 4</A>: </B>Typical page using JavaScript for frame data sharing (dynamic-frame method).</h4><P>

<h4><a name="01cb_009e"><B>Example 1:</B> Sample HTML file illustrating how to divide a page into frames.<a name="01cb_009e"></h4><P>

<pre>&lt;HTML&gt;
&lt;!-- COLS divide the page vertically; ROWS divide the page
horizontally --&gt;
&lt;FRAMESET COLS=&quot;50%,50%&quot;&gt; &lt;!-- divide page vertically down the
middle - creating two equal halves: one on the left, the other on the
right --&gt;
  &lt;FRAMESET ROWS=&quot;40%,20%,40%&quot;&gt; &lt;!-- divide the left half horizontally
into three pieces: one on top, a smaller one in the middle, and one on
the bottom --&gt;
    &lt;FRAME SRC=&quot;frame1.html&quot;&gt; &lt;!-- set the top 40% pointing to
frame1.html --&gt;
    &lt;FRAME SRC=&quot;frame2.html&quot;&gt; &lt;!-- point the middle 20% to URL
frame2.html --&gt;
    &lt;FRAME SRC=&quot;frame3.html&quot;&gt; &lt;!-- set the bottom 40% to
frame3.html --&gt;
  &lt;/FRAMESET&gt;
  &lt;FRAMESET ROWS=&quot;*,*&quot;&gt; &lt;!-- divide the right half horizontally
into two equal pieces: top and bottom. Could have used &quot;50%,50%&quot;
instead. --&gt;
    &lt;FRAME SRC=&quot;frame4.html&quot;&gt; &lt;!-- set the top half to
frame4.html --&gt;
    &lt;FRAME SRC=&quot;frame5.html&quot;&gt; &lt;!-- set the bottom half to
frame5.html --&gt;
  &lt;/FRAMESET&gt;
&lt;/FRAMESET&gt;
&lt;/HTML&gt;</pre>

<h4><a name="01cb_009f"><B>Example 2:</B> Sample HTML code showing how to use the TARGET command to load URLs into another frame. (a) index.html contents; (b) text1.html contents; (c) init.html contents.<a name="01cb_009f"></h4><P>

<pre>(a)
&lt;HTML&gt;
&lt;FRAMESET COLS=&quot;35%,*&quot;&gt;
    &lt;FRAME SRC=&quot;text1.html&quot;&gt;
    &lt;FRAME SRC=&quot;init.html&quot; NAME=&quot;main_frame&quot;&gt;
&lt;/FRAMESET&gt;
&lt;/HTML&gt;

(b)
&lt;HTML&gt;
&lt;BODY&gt;
Table of Contents:&lt;BR&gt;
&lt;!-- by default, target all links to frame &quot;main_frame&quot; --&gt;
&lt;BASE TARGET=&quot;main_frame&quot;&gt;
&lt;A HREF=&quot;learn.html&quot;&gt;1. Learning Opportunities&lt;/A&gt;&lt;BR&gt;
&lt;A HREF=&quot;codes.html&quot;&gt;2. Activation Codes&lt;/A&gt;&lt;BR&gt;
&lt;A HREF=&quot;hiring.html&quot;&gt;3. End of Year Hiring Positions&lt;/A&gt;&lt;BR&gt;
&lt;A HREF=&quot;firing.html&quot;&gt;4. End of Year Firing Positions&lt;/A&gt;&lt;BR&gt;
&lt;!-- place a clickable client side image map here now --&gt;
&lt;IMG SRC=&quot;navimage.gif&quot; ALIGN=&quot;center&quot;  USEMAP=&quot;#navbar&quot;&gt;
&lt;MAP NAME=&quot;navbar&quot;&gt;
&lt;!-- target the client side image map link to the main_frame --&gt;
&lt;AREA SHAPE=&quot;RECT&quot; COORDS=&quot;0,0,19,19&quot; HREF=&quot;copyright.html&quot;
TARGET=&quot;main_frame&quot;&gt;
&lt;AREA SHAPE=&quot;RECT&quot; COORDS=&quot;20,0,39,19&quot; HREF=&quot;logo.html&quot;
TARGET=&quot;main_frame&quot;&gt;
&lt;/MAP&gt;
&lt;!-- target the form results to the frame &quot;main_frame&quot; --&gt;
&lt;FORM METHOD=&quot;GET&quot; ACTION=&quot;cgi-bin/process.cgi&quot;
TARGET=&quot;main_frame&quot;&gt;
Please enter the job you are planning on applying for:&lt;BR&gt;
&lt;INPUT TYPE=&quot;text&quot; SIZE=50 NAME=&quot;JOBTITLE&quot;&gt;&lt;P&gt;
&lt;INPUT TYPE=&quot;submit&quot; VALUE=&quot;Send&quot;&gt;
&lt;INPUT TYPE=&quot;reset&quot; VALUE=&quot;Clear&quot;&gt;
&lt;/FORM&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;

(c)
&lt;HTML&gt;
&lt;BODY&gt;
&lt;H1 ALIGN=&quot;center&quot;&gt;Joe's Pizza Corp. Job Information&lt;/H1&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</pre>

<h4><a name="01cb_00a0"><B>Example 3:</B> Sample HTML files illustrating dynamic frame reloading and frame data sharing using JavaScript; (a) index.html contents; (b) main.html contents.<a name="01cb_00a0"></h4><P>

<pre>(a)
&lt;HTML&gt;
&lt;SCRIPT LANGUAGE=&quot;LiveScript&quot;&gt;
// variables defined here may be accessed by any of the frames defined
// below via parent.variable_name command. NOTE: if NetScape window
// is resized, the variables will be reset to their initial values.
var count=0
var code=&quot;&lt;BR&gt;HTML code stored in Parent frame.&quot;
code=code+&quot;&lt;BR&gt;Standard &lt;H1&gt;HTML&lt;/H1&gt; may be used.&quot;
&lt;/SCRIPT&gt;
&lt;!-- must define two frames... although the second frame is not used, a
minimum of two frames is needed before netscape will initiate a frame
setup --&gt;
&lt;FRAMESET ROWS=&quot;*,0&quot;&gt;
    &lt;FRAME SRC=&quot;main.html&quot;&gt;
    &lt;FRAME SCROLLING=&quot;no&quot; NORESIZE&gt;
&lt;/FRAMESET&gt;
&lt;/HTML&gt;

(b)
&lt;SCRIPT LANGUAGE=&quot;LiveScript&quot;&gt;
&lt;!-- hide this script tag's contents from old browsers
function refresh()
{
location.href=location.href // reload this frame
}
parent.count++  // increment variable which counts the number of
// times the page has been loaded
document.write ('&lt;FORM&gt;&lt;LI&gt;&lt;INPUT TYPE=&quot;radio&quot; onClick=&quot;refresh()&quot;&gt;')
document.write (&quot;The page has been loaded &quot;+parent.count+&quot; times.&quot;)  
document.write (&quot;&lt;BR&gt;&quot;+parent.code) // write the Parent frame HTML
// code stored in the code variable
&lt;!-- done hiding from old browsers --&gt;
&lt;/SCRIPT&gt;</pre>

<P>

<h4><a name="01cb_00a1"><a name="01cb_00a2">Listing One<a name="01cb_00a2"></h4><pre>
&lt;!-- contents of index.html file --&gt;
&lt;HTML&gt;
&lt;SCRIPT LANGUAGE=&quot;LiveScript&quot;&gt;
&lt;!-- hide from old netscape browsers --&gt;
// variables defined here may be accessed by any of the frames defined
// below via the parent.variable_name command. NOTE: if the NetScape window
// is resized, the variables will be reset to their initial values.
// ie: these variables are available to the child frames.
// variables
var totalnum=3 // total # of questions
var correctans=0 // the question # (from 0 to N-1) of the correct
// answer to each question. Set in Listing2 (scratcha.html)
var count=0 // counter variable. Initialized to zero
var arraycount=1 // index into the questans array. Intialized to 1
// since that is where the first array string begins.
var totalright=0 // total # of questions answered right (0 initially)
var correcttext=&quot;blank&quot; // the text of the correct answer
&lt;!-- done hiding from old netscape browsers --&gt;
&lt;/SCRIPT&gt;
&lt;!-- must define two frames... although the second frame is not used, a
minimum of two frames is needed before netscape will initiate a frame
setup --&gt;
&lt;FRAMESET ROWS=&quot;*,0&quot;&gt; &lt;!-- give the 2nd frame 0 pixels, and assign 
the rest of the space to frame 1 via the &quot;*&quot; --&gt;
    &lt;FRAME SRC=&quot;scratcha.html&quot;&gt;
    &lt;FRAME SCROLLING=&quot;no&quot; NORESIZE&gt;
&lt;/FRAMESET&gt;
&lt;/HTML&gt;
</pre>
<h4><a name="01cb_00a3"><a name="01cb_00a4">Listing Two<a name="01cb_00a4"></h4><pre>
&lt;!-- contents of scratcha.html file --&gt;
&lt;SCRIPT LANGUAGE=&quot;LiveScript&quot;&gt;
&lt;!-- hide this script tag's contents from old browsers
// editable local frame variables
        var totalans = 3 // total # of answers per question (used to
// generate the question/answer array below)
// This function defines an array such that the first property, length, (with
// index of zero), represents the number of elements in array. The remaining 
// properties have an integer index of 1 or greater, and are initialized to 0.
function MakeArray(n) {
   this.length = n;
   for (var i = 1; i &lt;= n; i++) {
     this[i] = 0 }
     return this
     }
function checkout(questionnum)
{
 if ( parent.count &gt; parent.totalnum ) // if user 
// clicks a radio button after the test is complete, display an alert
  {
 alert('To return to the main page, click on &quot;Return to Main Page.&quot;')
  }
 else
  {
    if ( questionnum == parent.correctans) // if the currently
// selected question is the correct response, say so
        {
// dunno if allowed to do below line
                parent.totalright++
                alert(&quot;Correct.&quot;)
        }
     else // if wrong answer, display the correct one
      {
       alert(&quot;Incorrect. The answer is:\n&quot;+parent.correcttext)
      }
   parent.count++ // increment count so can goto next question
   if ( parent.count == parent.totalnum) // if count =
// the total # of questions
      {
        parent.count++ // then increment count again so is 
// greater than totalnum so can activate the alert above if user
// tries to click on a radio button after the test is complete
      }
  }
location.href=location.href // reload the page (will reload the page
// into which this function is placed) so can update using the new
// values stored in the parent frame's variables
}
// formula for # of array elements:
// total number of questions + 1 (have to include the Test is 
// Complete question at the end of the question data) times total
// answers allowed per question + 2 (plus two because have to have a
// string for the actual question itself and for the value indicating
// the correct answer). eval used to convert (totalnum)*(totalans+2) 
// into a number usable to pass to MakeArray... need eval since the 
// expression is inside a function call (ie: inside the MakeArray call)
questans = new MakeArray(eval((parent.totalnum+1)*(totalans+2)));
// array for question list (start with question #2 - define question
// one in the document's html code below)
questans[1] = &quot;When our star (Sol) dies it will most&quot;+&quot; likely become:&quot;
questans[2] = &quot;A black hole.&quot;
questans[3] = &quot;A white dwarf.&quot;
questans[4] = &quot;A neutron star.&quot;
questans[5] = 1 // correct answer here is &quot;A white dwarf&quot; (list
// answers from 0 to ans#-1)
questans[6] = &quot;Pyconuclear reactions are:&quot;
questans[7] = &quot;reactions which require high density.&quot;
questans[8] = &quot;reactions which depend on heat.&quot;
questans[9] = &quot;reactions which require low density.&quot;
questans[10] = 0 // correct answer here is &quot;reactions which require
// high density&quot; (list answers from 0 to ans#-1)
questans[11] = &quot;A white dwarf maintains its compact shape via:&quot;
questans[12] = &quot;coulombic repulsion.&quot;
questans[13] = &quot;fermi neutron pressure.&quot;
questans[14] = &quot;fermi electron pressure.&quot;
questans[15] = 2 // correct answer: &quot;fermi electron pressure.&quot;
// end of editable questions. Don't change the below (just the text
// displayed at the end of the test)
questans[16] = &quot;The test is complete. Thank you.&quot;
questans[17] = &quot;&quot;
questans[18] = &quot;&quot;
questans[19] = &quot;&quot;
questans[20] = 255 // correct answer: none
// NOTE: will also need some variables in hiddenfr.html stored into
// separate forms so that can save data between URL reloads (ie: when
// location.href is set the variables will be destroyed if not stored
// in the new URL... easier to code if just place data in the hidden frame)
if ( parent.count &gt; parent.totalnum ) // if user 
// completed all questions, display the Finished page.
 {
   document.write(&quot;&lt;H1&gt;The Test is Complete. You got &quot;+
parent.totalright+&quot; correct out of &quot;+parent.totalnum+
&quot; questions.&lt;/H1&gt;&quot;)
 }
else
 {
// make arrayind = to the parent frame variable arraycount
arrayind=parent.arraycount
// write the form tag
document.write ('&lt;FORM METHOD=&quot;post&quot;&gt;')
// increment arrayind after each use below
// and place a &lt;BR&gt; tag after each to seperate each text item.
// write the question
document.write (&quot;&lt;H1&gt;&quot;,questans[arrayind++],&quot;&lt;/H1&gt;&quot;)
// write radio button for answer 1
document.write ('&lt;LI&gt;&lt;INPUT TYPE=&quot;radio&quot; onClick=&quot;checkout(0)&quot;&gt;')
// and check if the correct answer for this question is answer 1
if ( questans[arrayind+3] == 0 )
// and if so, set the rightans variable to the text of the correct answer
   { parent.correcttext = questans[arrayind] }
// write answer 1
document.write (questans[arrayind++],&quot;&lt;BR&gt;&quot;)
// write radio button for answer 2
document.write ('&lt;LI&gt;&lt;INPUT TYPE=&quot;radio&quot; onClick=&quot;checkout(1)&quot;&gt;')
// and check if the correct answer for this question is answer 2
if ( questans[arrayind+2] == 1 )
// and if so, set the rightans variable to the text of the correct answer
   { parent.correcttext = questans[arrayind] }
// write answer 2
document.write (questans[arrayind++],&quot;&lt;BR&gt;&quot;)
// write radio button for answer 3
document.write ('&lt;LI&gt;&lt;INPUT TYPE=&quot;radio&quot; onClick=&quot;checkout(2)&quot;&gt;')
// and check if the correct answer for this question is answer 3
if ( questans[arrayind+1] == 2 )
// and if so, set the rightans variable to the text of the correct answer
   { parent.correcttext = questans[arrayind] }
// write answer 3
document.write (questans[arrayind++],&quot;&lt;BR&gt;&quot;)
// write the closing form tag
document.write (&quot;&lt;/FORM&gt;&quot;)
parent.correctans = questans[arrayind++] // and set the new
// correct answer
// and save the new arrayind value into the parent frame variable
parent.arraycount=arrayind
// skip two lines
document.write (&quot;&lt;BR&gt;&lt;BR&gt;&quot;)
// now display the number of questions the user has chosen correctly so far
document.write (&quot;You have completed &quot;+parent.count+&quot; of &quot;+
parent.totalnum+&quot; questions, with &quot;+parent.totalright)
    if ( parent.totalright == &quot;1&quot; ) // if only one right, make
// sure use the word &quot;answer&quot; instead of the plural form &quot;answers&quot; 
     {
       document.write (&quot; correct answer.&quot;)
     }
    else
     {
       document.write (&quot; correct answers.&quot;)
     }
 }
// skip two lines
document.write (&quot;&lt;BR&gt;&lt;BR&gt;&quot;)
// link to main page:
document.write ('&lt;LI&gt;&lt;A HREF=&quot;index.html&quot;&gt;Return to main page.&lt;/A&gt;')
&lt;!-- done hiding from old browsers --&gt;
&lt;/SCRIPT&gt;
</pre>
<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
