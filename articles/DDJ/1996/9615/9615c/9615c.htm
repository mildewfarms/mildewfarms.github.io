<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>SP 96: Designing a Distributed Simulation Game</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>Designing a Distributed Simulation Game<a name="02eb_00f6"><a name="02eb_00f6"><a name="02eb_00f4"><a name="02eb_0000"></h1><P>

<h2>Communications classes and network services are the key</h2><P>

<h3>Ron van der Wal</h3><P>

<P>
<i><a name="02eb_00f5"><a name="02eb_0000">Ron, author of the Tarma Simulation Framework, can be contacted at tarma@pi.net.</i></p><hr><P>

Imagine students peering into computer monitors and arguing over investments, price settings, and wages--all the time pointing to charts that show how well (or badly) their company is faring in a simulated economy. The game I'm describing is a distributed application that my company developed for a Dutch university. Its object is to teach students the causes and effects of both micro- and macro-economic decisions. It consists of a set of Windows-hosted applications, interconnected through a LAN (Novell NetWare, Banyan VINES, NetBIOS, and a shared-memory network simulation are supported), which form a simulated national economy, consisting of 30-50 companies, a government, and a banking sector.<P>

The game is played in rounds that last anywhere between 1 and 30,000 seconds. A &quot;normal&quot; round lasts for 60-120 seconds. During each round, each company analyzes its position by means of its balance sheet, profit and loss statements, and production and inventory data. Spreadsheets and charts allow analysis of the corresponding historical data. Based on this information, its board of directors decides on its prices, investments, and so on. At the end of each round, current individual prices, investment and labor demands are fed into an economic model (created by the university for which the game was developed), and sales, labor allocations, and order stocks are distributed amongst the companies. The process then continues to the next round. A game normally lasts about two to three hours (or approximately 120 rounds).<P>

In this article, I'll focus on the design of the game software and the network communications that allow it to run on top of several different protocols. As a bonus, I'll share a trick for dynamically loading C++ classes from DLLs. <P>

<h3><a name="02eb_00f7">The Software Design Process<a name="02eb_00f7"></h3><P>

The game software is based on an object-oriented model in which companies, the national economy, and the game controller are all objects. Each object is responsible for the part of the economic model that it represents: Companies keep track of their own inventories, production, balance sheets, and so on, while the national economy consolidates summary data from individual companies, and adds its own monetary policies and market-distribution mechanisms. The game-controller object is responsible for overall control of the game and the login/logout process. Clearly, communication between objects is required.<P>

<a href="9615a3f1.gif">Figure 1</A> illustrates the basic communication pattern between the national-economy object and individual companies. Time runs from left to right. At the end of each round, the economy object uses up-to-date information from the company objects to perform the first series of calculations (which involve allocation of sales and labor, among other things) and relays this information back to the companies. On receipt of this information, each company finalizes the then-expired period, updates its balance sheet, inventory, and so forth, and prepares for the next round. Meanwhile, the economy waits until all companies have finalized the period, then performs its own finalization.<P>

<h3><a name="02eb_00f8">Publishers and Subscribers<a name="02eb_00f8"></h3><P>

The pattern in <a href="9615a3f1.gif">Figure 1</A> is appropriate for objects that live on a single computer, but less so for a truly distributed system. Network communications between objects living on different machines (or simply in different address spaces) require a more elaborate approach. As in many other distributed applications, communication is managed using a form of &quot;proxies.&quot; Each company object becomes a remote publisher of information, while the economy object communicates with local subscribers to that information. <a href="9615a3f2.gif">Figure 2</A> shows this modified communication pattern; note that the economy object and the company subscribers live on one computer, while the company publishers live on several other different computers.<P>

For efficiency, company subscribers cache the most important information from their publishers, which is updated as necessary by those publishers. This means that information pertaining to the current round is frequently updated as players make decisions regarding their company's policy, while at the end of a round, the information is frozen and added to the historical data that both publishers and subscribers maintain.<P>

Publishers and subscribers are not restricted to a one-to-one relation; in general, a publisher can have any number of subscribers. <a href="9615a3f3.gif">Figure 3</A> shows a publisher's publication channel, to which subscribers may connect. The channel has a bus-like structure that allows the publisher to send updates to its subscribers by means of a multicast. This is not the only communication pattern, however. Individual subscribers may also request specific information from their publisher (as in a classic client/server relationship), and conversely, a publisher may request information from one of its subscribers. In this situation, the subscriber under consideration acts as an &quot;author&quot; of information. In the game software, this is primarily used when a previous game is being reopened from the central game repository: The company subscribers (acting as authors) located on the economy's computer are used to initialize their publishers to the state where the game left off. This approach is feasible for other applications: for example, a &quot;blackboard&quot; architecture in which several parties contribute to a set of common knowledge that is maintained by the publisher.<P>

The publisher/subscriber approach is useful for other purposes, too. Each participating computer also displays a summary of the national economic data and, of course, the state of the game at large (current round, progress in the current round, and so on). Similar to the companies' information, economic and game information is distributed by the publisher/subscriber mechanism. The national economy object is turned into an economy publisher and all other computers are equipped with economy subscribers. The same applies to the game controller, whose subscribers display the simulated game date, time, and news bulletin messages broadcast by the &quot;government.&quot; To keep the information from different sources separated, there are as many different publishing channels as there are publishers; in this game, this amounts to <I>n+2</I>, where <I>n</I> is the number of companies and the two additional channels are for the economy and the game controller.<P>

<a href="9615a3f4.gif">Figure 4</A> illustrates a hypothetical situation involving four computers. The top computer is operated by the instructor. It contains publishers for game and economic information, and subscribers for all companies. Below it are two computers of teams that participate in the game; each has one subscriber for the game information and one for the economic data. In addition, they both house a publisher for their respective companies. Finally, at the bottom of the figure is a computer used by an outside observer, that subscribes to the game, the economic data, and all companies, but publishes nothing itself.<P>

<h3><a name="02eb_00f9">Publisher and Subscriber Classes<a name="02eb_00f9"></h3><P>

To capture the commonality of the publisher/subscriber pattern, I have developed a small hierarchy of classes; see <a href="9615a3f5.gif">Figure 5</A>. The top-level class is called <I>Actor</I> and captures the common aspects of both publishers and subscribers, including the ability to communicate across the network through the use of a <I>Po</I><I>r</I><I>t</I>--an object that represents an endpoint in a network connection, similar to like-named entities in network protocols (sometimes called &quot;sockets&quot;). <P>

Derived from the <I>Actor</I> base class are the <I>Publisher</I> and <I>Subscriber</I> classes. Their purposes are reflected in their interfaces: A <I>Subscriber</I> object is aware of the network address of its <I>Publisher</I>, while the converse is not true. A representative part of the C++ declarations of these classes is shown in <a href="9615c.htm#02eb_0100">Listing One</A>. Class <I>cActor</I>, contains a <I>cPort</I> object that takes care of the actual network communications, a number of functions relating to this port and the associated communication channel, and some functions for datagram management. These functions are, in fact, central to the purpose of the <I>cActor</I> hierarchy, which is to communicate across the network. At this level, communication is performed by means of a datagram abstraction (not shown here). A datagram contains fields to indicate the message type (for example, information update, shutdown notification), its class (request/response, broadcast, acknowledgment, and so on), some routing information, and the message contents. Internally, datagrams are kept in a preallocated pool, which is why <I>cActor</I>s and their derivations must explicitly acquire and release the <I>cDatagram</I> instances.<P>

Dispatch of incoming datagrams in the <I>cActor</I> hierarchy is done through message maps similar to those in Borland's OWL or Microsoft's MFC frameworks. The <I>cActor</I> class contains the dispatching mechanism proper, as well as a default message map that deals with a few predefined message types (such as diagnostics). Derived classes can add their own message handling or override existing mappings by including message maps in their own class declarations. Messages that do not appear in any map are handled by <I>cActor::UnknownMessage();</I> by default, this function simply releases the datagram (in the debug version, it also produces a trace message to that effect). A similar function, <I>cActor::IgnoreMessage()</I> can be used to explicitly indicate that the message type is known, but needs no further handling. It, too, will release the datagram to its pool.<P>

The derived classes <I>cPublisher</I> and <I>cSubscriber</I> specialize the default behavior by adding support for the maintenance of a publication channel, and the subscription to it, respectively. In particular, functions for the orderly shutdown of a channel are implemented for both parties. Only the <I>cSubscriber</I> class needs a message handler to cover this possibility.<P>

Finally, you may have noticed that the actual allocation of publication channels is not covered by one of the <I>cActor</I>-derived classes; instead, this responsibility is delegated to a helper class of the game controller which oversees channel management in general and is not part of the <I>cActor</I> hierarchy.<P>

<h3><a name="02eb_00fa">Combining <I>Actor</I> Classes with Domain Classes<a name="02eb_00fa"></h3><P>

The <I>cActor</I> hierarchy knows nothing about companies, the economy, or any domain-specific information. To create specific publishers and subscribers, you must combine the <I>cActor</I> functionality with domain-specific classes. I'll use the company classes as an example; the other domain classes are dealt with in much the same way.<P>

There are two basic company classes, <I>cCompany</I> and <I>cCompanyPlaye</I><I>r</I>; see <a href="9615a3f6.gif">Figure 6</A>. Class <I>cCompany</I> represents the basic structure of a company, including its historical data. Class <I>cCompanyPlayer</I> extends this functionality by adding detailed information about the machine inventory and the company's policy, both of which are only available to the companies themselves, not to outside observers. Class <I>cCompany</I> is derived from a document-type base class provided by the application framework that we used to interface to the Windows environment; I used Borland's OWL, but other frameworks with similar document/view architectures would work.<P>

To this basic company functionality, the publisher and subscriber functionality was added using the <I>cPublisher</I> and <I>cSubscriber</I> classes, respectively, as mix-in classes in a multiple-inheritance setting. Since there was no chance that both of them would appear as a base class for a further derived class, their common ancestor, <I>cActor,</I> didn't need to be virtual. The resulting classes are <I>cCompanyPublisher</I> (a player that also is active as a publisher), and <I>cCompanySubscriber</I> (an observer that tracks updates from its publisher). Each derived class has its own message map, which takes care of properly dispatching initialization and update broadcasts (in the case of the subscriber), and information requests (in the case of the publisher). In all, 14 different message types are currently defined for communication across a company publication channel. A similar number applies to both the economy and the game-control channels.<P>

<h3><a name="02eb_00fb">Network Communication Classes<a name="02eb_00fb"></h3><P>

As far as actors are concerned, a <I>Port</I> object is all they need to know about the network. Behind the scenes, however, a lot goes on to make this abstraction work. For one thing, the game has to run on top of several different LANs (Novell NetWare, Banyan VINES, generic NetBIOS, and occasionally AppleTalk) and several different operating systems. For the time being, I'll restrict my discussion to 16-bit Windows. Most of the implementation of the network layer runs on most of the platforms. Furthermore, the network protocol is freely selectable (given the presence of the corresponding network) and new protocols may even be added at run time.<P>

We were able to accomplish this through abstraction and encapsulation in a number of classes. In effect, we designed our own transport layer that operates in terms of an abstract network protocol. For each of the network protocols that must be supported, we provided concrete implementations of the abstract protocol in terms of the API of the protocol under consideration--we used IPX for Novell NetWare, IPC for Banyan VINES, and datagrams for NetBIOS and AppleTalk. When we implement a TCP/IP version, we'll use UDP. <a href="9615a3f7.gif">Figure 7</A> provides for an overview of the relationships among the classes. <a href="9615c.htm#02eb_0102">Listing Two</A> presents the corresponding class declarations.<P>

Class <I>cTransportManager</I> takes responsibility for overall communication management. It exposes its services to the actors by means of the intermediate <I>cPort</I> objects that we first encountered in the <I>cActor</I> hierarchy. As shown in <a href="9615c.htm#02eb_0102">Listing Two</A>, the <I>cPort</I> class offers its clients the ability to send datagram messages in several ways. Conversely, when a datagram is received, the <I>cPort</I> object will call back its <I>cActor</I> object and let it dispatch the datagram as dictated by the actor's message maps. Class <I>cTransportManager</I> does not create or destroy <I>cPort</I> objects, since they are normally assumed to be part of other objects, but does provide the means to connect them to and disconnect them from the network as appropriate. Furthermore, the <I>cPort</I> objects can use the <I>cTransportManager::Send...()</I> functions to forward the datagrams that are submitted by their own clients.<P>

On the network side, <I>cTransport</I><I>Manager</I> uses the abstract interface of class <I>cNetProtocol</I> to get the datagrams from and to the port objects across the physical network. Class <I>cNetProtocol</I> is responsible for implementing some basic network services present in all network protocols considered. In the concrete derivations of the abstract <I>cNetProtocol</I> class, functions such as <I>cNetProtocol::SendBroadcast()</I> and <I>cNetProtocol::SendMessage()</I> map almost immediately to corresponding-protocol API functions as indicated earlier. We have also implemented a shared-memory network simulation, which allows us to test the network classes on a single computer. Originally, we did this for testing only, but this pseudonetwork protocol turned out to be quite useful for stand-alone demonstrations of the simulation game, and is now a standard part of the software distribution.<P>

The final two classes in <a href="9615a3f7.gif">Figure 7</A> are <I>cDatagram</I> and <I>cDatagramPool</I>. Class <I>cDatagram</I> represents the actual datagram, as mentioned earlier; class <I>cDatagramPool</I> assists <I>cTransportManager</I> in the maintenance of a pool of these objects. There are several reasons for this pool. Datagram buffers must normally be present during (network) interrupts, since several of the network protocols use some kind of event-service routine on receiving or transmitting a datagram. In the 16-bit Windows environment, this implies that those buffers must be page locked. Since we need them often and without delay, it makes sense to preallocate an ample number of them and let them be managed by a separate class. Instead of <I>new</I> and <I>delete</I>, we use an acquire/release protocol to manipulate datagram buffers. (We could have overloaded operators <I>new </I>and <I>delete</I>, but they were already overloaded to allocate page-locked memory chunks, and we also didn't want frequent calls to constructors and destructors.)<P>

<h3><a name="02eb_00fc">Implementation of Network Services<a name="02eb_00fc"></h3><P>

The trio <I>cPort</I>/<I>cTransportManager</I>/<I>cNetProtocol</I> offers the following types of datagram transmission:<P>
<ul>
<li>Multicast to all ports connected to a given channel. Publishers use this to announce updates or send other information to all their subscribers at once.</li>
<li>Point-to-point request and reply with guaranteed delivery, used by subscribers and publishers in a client/server fashion (where the publisher itself sometimes assumes the role of a client to an authoring subscriber).</li>
<li>Point-to-point informational message without reply. This is used in particular during the shutdown of a node to announce its demise to the game-control publisher, and for acknowledgment messages.</li>
</ul>
The network protocol class <I>cNetProtocol</I> only needs to provide two services:  multicast (or broadcast) and point-to-point, both of which may be unreliable. Class <I>cTransportManager</I> improves upon this basic quality of service by maintaining queues of pending requests (to retransmit the request if no reply is received) and of recent replies (to respond to re-requests whose replies were accidentally lost). A third queue holds pending transmissions in general, since some network protocols cannot handle more than a few (perhaps ten) datagram submissions at a time. In a heavily loaded game, there may be bursts of a few hundred transmissions within a few seconds. The pending transmission queue allows the <I>cTransportManager</I> class to adjust its outgoing pace to the capabilities of the underlying protocol.<P>

The request/reply protocol is a straightforward implementation of a &quot;request/reply with acknowledgment&quot; algorithm with retransmission after a time-out, described in detail in books such as <I>Distributed Systems: Concepts and Design</I>, Second Edition, by G. Coulouris et al. (Addison-Wesley, 1994). The idea is to attach a unique identifier and an expiration field to each request, keep transmitted requests around until the corresponding reply is received, and retransmit the request if a time-out period expires without a reply. This may be repeated for several expiration periods, after which the other party is deemed unreachable and an error indication (instead of a reply) is returned to the original submitter of the request. If a reply is received, however, the request is satisfied, and an acknowledgment is sent to the replying party, which allows it to release any resources it might hold for retransmissions of the reply. In practice, the length of the time-out period, the maximum number of retries, and the expiration time of replies (in case acknowledgments are lost) are subject to the quality of the underlying network, the overall network load, the desired response times, and the risk one is willing to take of falsely declaring a node unreachable. In our implementation, these are all parameters that may be preset and that, to some extent, will adapt dynamically to the network conditions.<P>

<h3><a name="02eb_00fd">Dynamically Loading New Classes<a name="02eb_00fd"></h3><P>

To load new network protocol classes at run time without linking them into the code, place the class code in a DLL. You can call virtual functions through a <I>vtable</I>, which is a glorified jump table. Suppose that we knew the address of that jump table, and knew that index #3 would point to one function, #4 to another, and so on. If you implement class <I>cTransportManager</I> in terms of the (virtual) interface of class <I>cNetProtocol</I>, put them both in the application's executable, and at run time provide a pointer to a <I>cNetProtoco</I><I>l</I>-derived object in a DLL, you have:<P>
<ul>
<li>The pointer to the jump table (the <I>vtabl</I><I>e</I>; its address can be found at some offset from where the object's <I>this</I> pointer points).</li>
<li>The indices of the various functions in that table, since the C++ compiler courteously translates calls to virtual functions to look-up operations in that same jump table.</li>
</ul>
This works like a charm, and there's no need for you to export anything from the protocol's DLL. Remember, though, you must make the member functions themselves exportable, and the class must be compiled as huge to get full-size <I>vtable</I> pointers and contents, even if you don't actually export them in the DLL's export table. They will still be called in a situation where DS!=SS and that sort of thing, even if you didn't link to them or load their address in any obvious way. To get that pointer to the <I>cNetProtocol</I>-derived object in the first place, we do need a conventionally exported function--but only one. For the simulation game, we called that function <I>CreateProtocol()</I> and demanded that it have no parameters and return a pointer to <I>cNetProtocol</I> (but at run time, it should return an object of a derived class), and that's it. When we load a DLL for a network protocol, we call <I>GetProcAddress()</I> for the <I>CreateProtocol()</I> function, call <I>CreateProtocol()</I>, and if it returns a nonzero value, we have our network protocol. Thanks to the protocol's virtual destructor, we don't even need any further assistance to get rid of it when we're done. Finally, by placing a list of protocol descriptions, with the names of the corresponding DLLs, in the application's .INI file, you can add and remove protocols at run time.<P>

<h3><a name="02eb_00fe">Conclusion<a name="02eb_00fe"></h3><P>

In this article, I've covered a lot of material in a short space. Still, I hope that I've shed some light on yet another distributed computing design, and perhaps also shown some useful patterns and implementation techniques for immediate application.<P>

<h4><B><a href="9615a3f1.gif">Figure 1</A>:</B> Communication between national economy and company objects.</h4><P>

<h4><B><a href="9615a3f2.gif">Figure 2</A>:</B> Communication between economy and companies in a distributed environment.</h4><P>

<h4><B><a href="9615a3f3.gif">Figure 3</A>:</B> Communication channel between a publisher and its subscribers.</h4><P>

<h4><B><a href="9615a3f4.gif">Figure 4</A>:</B> Distribution of publishers and subscribers over participating computers.</h4><P>

<h4><B><a href="9615a3f5.gif">Figure 5</A>:</B> Hierarchy of publisher and subscriber classes.</h4><P>

<h4><B><a href="9615a3f6.gif">Figure 6</A>:</B> cCompany class hierarchy.</h4><P>

<h4><B><a href="9615a3f7.gif">Figure 7</A>:</B> Class diagram for network communications.</h4><P>

<P>

<h4><a name="02eb_00ff"><a name="02eb_0100">Listing One<a name="02eb_0100"></h4><pre>
// Assume declarations of the following classes:
class cPort;       // Network port abstraction
class cNetAddress; // Generic network address
class cDatagram;   // Datagram message
// Abstract base class for Publisher &amp; Subscriber
class cActor {
public:
    // Public virtual destructor; anyone can delete an Actor.
     virtual ~cActor();
     // Functions to obtain network information
     uint16         ChannelNo() const;
     void           NetAddress(cNetAddress &amp;adr) const;
     // Functions to interrogate &amp; change connection state
     void           DisconnectPort();
     bool           IsConnected() const;
     virtual void   Shutdown() = 0;
     virtual bool   IsPublisher() const = 0;
 protected:
     // Constructor for use by derived classes
     cActor();
 
     // Access to the port object for derived classes
     cPort &amp;        Port();
     // Functions relating to datagram management
     cDatagram *    AcquireDatagram();
     void           ReleaseDatagram(cDatagram *);
     virtual void   IgnoreMessage(cDatagram *);
     virtual void   UnknownMessage(cDatagram *);
     // Implementation of message dispatcher
     bool           DispatchMessage(cDatagram *);
     // Default message table
     DECLARE_MESSAGE_TABLE(cActor);
 private:
     // Actors own ports for their network communications.
     cPort          mPort;
 };
 // Publisher class
 class cPublisher: public cActor {
 public:
     cPublisher();
 
     // Functions to manage the publication channel
     void           BroadcastChannelDown();
     virtual void   Shutdown();
     // Implementations of other cActor functions
     virtual bool   IsPublisher() const { return true; }
     // Signature of the publisher
     uint16         Signature() const;
 };
 // Subscriber class
 class cSubscriber: public cActor {
 public:
     cSubscriber();
 
     // Functions that set the server address of the client.
     const cNetAddress &amp;PublisherNode() const;
     void           SetPublisherNode(const cNetAddress &amp;);
     // Implementations of other cActor functions
     virtual bool   IsPublisher() const { return false; }
     virtual void   Shutdown();
 protected:
     // Default message responders
     void           OnChannelDown(cDatagram *);
     virtual void   ChannelDownAction() {}
     // Subscriber message table
     DECLARE_MESSAGE_TABLE(cSubscriber);
 private:
     // We keep the node address of our publisher
     cNetAddress    mPublisherNode;
 };
</pre>
<h4><a name="02eb_0101"><a name="02eb_0102">Listing Two<a name="02eb_0102"></h4><pre>
// Network endpoint abstraction
class cPort {
public:
    cPort(cActor *);
    ~cPort();
    // Access to information regarding this port
    cTransportManager *Manager() const;
    void         NetAddress(cNetAddress &amp;) const;
     uint16       ChannelNo() const;
     // Function to check the connection state of the port
     bool         IsConnected() const;
     void         Disconnect();
     // Functions to send messages to our peers in other nodes.
     void         SendBroadcast(cDatagram *);
     void         SendInfo(cDatagram *, const cNetAddress &amp;);
     void         SendRequest(cDatagram *, const cNetAddress &amp;);
     void         SendReply(cDatagram *);
 private:
     friend class cTransportManager;
 
     // cPort instances are managed by the transport manager,
     // organized by channel number.
     cTransportManager *mManager;
     uint16       mChannelNo;
     // Pointer to the actor to be called back by the port.
     cActor *     mActor;
     // Function to handle incoming datagrams
     void         ReceiveDatagram(cDatagram *);
 };
 // Transport manager
 class cTransportManager {
 public:
     cTransportManager();
     ~cTransportManager();
 
     // Interface to start the network connection.
     int          StartGroupAdmin(const char *);
     int          StartGroupMember(const cGroupInfo &amp;);
     // Stopping the network occurs in two phases
     void         StartShutdown();
     void         FinishShutdown();
     // Function to enumerate the active groups.
     int          EnumGroups(cGroupList &amp;);
     int          LookupGroup(cGroupInfo &amp;);
     // Node-level information functions.
     bool         IsActive() const;
     bool         IsAdmin() const;
     const char * GroupName() const;
     // Low-level protocol information functions.
     cNetProtocol *Protocol();
     const char * ProtocolName() const;
     void         NetAddress(cNetAddress &amp;);
     const cNetAddress *GroupAdmin() const;
     // Interface to attach and detach ports.
     void         ConnectPortAt(cPort *, uint16);
     void         ConnectNextPort(cPort *);
     void         DisconnectPort(cPort *);
     uint16       NextChannelNo();
     // Functions for datagram buffer maintenance.
     cDatagram *  AcquireDatagram();
     void         ReleaseDatagram(cDatagram *);
     // Functions to send datagrams.
     void         SendBroadcast(cDatagram *);
     void         SendRequest(cDatagram *, const cNetAddress &amp;);
     void         SendInfo(cDatagram *, const TLNetAddress &amp;);
     void         SendReply(cDatagram *);
     void         SendAck(cDatagram *);
     // On reception of a datagram, ReceiveDatagram() is called.
     void         ReceiveDatagram(cDatagram *);
     void         DispatchDatagram(cDatagram *);
 private:
     // Current network protocol
     cNetProtocol *mProtocol;
     // List of connected ports and next available channel
     cPtrArray&lt;cPort&gt; mPortList;
     uint16       mNextChannel;
     // A pool of datagrams is maintained by a subobject.
     cDatagramPool mPoolMgr;
     // Queues for reply and request transactions
     int16        mNodeID;     // Unique node ID
    int16        mNextTid;    // Transaction counter
    cDataQueue   mRequestQ;   // Request queue
    cDataQueue   mReplyQ;     // Reply queue
    cDataQueue   mSendQ;      // Pending send queue
    // Protocol maintenance
    int          OpenProtocol();
    bool         CloseProtocol();
    bool         IsProtocolOpen() const;
    // Internal port maintenance
    void         DisconnectAllPorts();
    // Function to maintain send and receive queues
    void         PostSends();
    void         CheckTransactions();
};
// Abstract base class for network protocols
class cNetProtocol {
public:
    // Virtual destructor to cater for derivation
    virtual ~cNetProtocol();
    // Functions to initialize and terminate the protocol
    virtual int  InitProtocol() = 0;
    virtual int  TermProtocol() = 0;
    virtual bool IsInited() const = 0;
    virtual const char *ProtocolName() const = 0;
    // Functions to open and close the network connection.
    virtual int  OpenConnection(const cNetAddress * = 0) = 0;
    virtual int  CloseConnection() = 0;
    virtual bool IsConnected() const = 0;
    virtual void NetAddress(cNetAddress &amp;) = 0;
    // A node must be able to advertise its address.
    virtual int  StartAdvertising(const char *) = 0;
    virtual int  StopAdvertising(const char *) = 0;
    // Function to enumerate the active groups.
    virtual int  EnumGroup(cGroupList &amp;) = 0;
    virtual int  LookupGroup(const char *, cNetAddress &amp;) = 0;
    // Functions to send datagram messages.
    virtual bool SendBroadcast(cDatagram *) = 0;
    virtual bool SendMessage(cDatagram*, const cNetAddress&amp;)=0;
protected:
    // Back pointer to transport manager
    cTransportManager *mManager;
    // Constructor for derived classes
    cNetProtocol(cTransportManager *);
};
</pre>
<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
