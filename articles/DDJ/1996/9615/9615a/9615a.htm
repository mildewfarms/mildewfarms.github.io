<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>SP 96: Games Programming with DirectPlay</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>Games Programming with DirectPlay<a name="02d2_00f2"><a name="02d2_00f2"><a name="02d2_00f0"><a name="02d2_0000"></h1><P>

<h2>The Game SDK's multiplayer API</h2><P>

<h3>Chris Howard</h3><P>

<P>
<i><a name="02d2_00f1"><a name="02d2_0000">Chris is the president of Genus Microprogramming, a provider of programming tools and services. He can be reached at 75100.17@compuserve.com.</i></p><hr><P>

Games have come a long way since we began playing <I>Snipes</I> over a Novell network. A few years ago <I>Spectre</I> became popular because of its multiplayer capability. Recently, games like <I>Doom</I> and <I>Descent</I> have illustrated that there is a great demand for good, multiplayer games. And as a programmer, I've wanted a fast and easy way to add multiplayer support to my own games, without having to delve into the depths of modem communication and various network APIs. <P>

That's where DirectPlay comes in. DirectPlay, which comes with the Windows 95 Game SDK, provides access to communication services for your games. In this article I'll examine DirectPlay and show how you can use it. I'll also describe my experience with creating a multiplayer game called &quot;<I>NetRoid</I><I>s</I>&quot; using the DirectPlay interface. The source code and related files for <I>NetRoids</I> are available electronically; see &quot;Availability&quot; on page 3.<P>

<h3><a name="02d2_00f3">What Is DirectPlay?<a name="02d2_00f3"></h3><P>

DirectPlay is one of the DirectX components of the Microsoft Windows 95 Game SDK. The SDK includes components for video (DirectDraw), sound (DirectSound), input (DirectInput), setup (DirectSetup), and networking (DirectPlay), all designed for creating games. The name &quot;DirectPlay'' seems nonintuitive to me, but I guess &quot;DirectMultiPlayer&quot; was too long and &quot;DirectNet&quot; too limiting. DirectPlay allows easy access to communication services provided by your computer, including modems, networks, and on-line systems. DirectPlay servers allow games to skip connectivity and communication details by providing a common interface. The DirectPlay software interface provides a simple way for games to communicate with each other over a wide range of services. This frees you from the need to create complex communication implementations and allows you to concentrate on producing a great game. DirectPlay consists of two API functions and roughly two dozen member functions.<P>

The DirectPlay APIs initiate communication through the DirectPlay interface. <I>DirectPlayEnumerate</I> is used to obtain a list of available DirectPlay service providers, and <I>DirectPlayCreate</I> instantiates a DirectPlay object for a particular provider. There are service providers for modem communication and for network interfaces. A service provider for the Internet is reportedly being worked on. Again, what's important is that it doesn't matter which provider is selected--it is transparent to the programming of the game.<P>

As <a href="9615a.htm#02d2_00fc">Table 1</A> illustrates, the member functions are divided into four categories: <P>

<ul>
<li>Session management.</li>
<li>Player management.</li>
<li>Group management.</li>
<li>Message management.</li>
</ul>

A DirectPlay session is an instance of a game. Session member functions can open a new session or connect to an existing or saved session. You can also list the sessions currently available, save sessions, and close a session. You need to open a session with the <I>Open</I> member function to begin your game.<P>

The player-management functions manage the players in a game session. The most important functions in this category are <I>CreatePlayer</I> and <I>DestroyPlayer</I>. These are the only two functions in this category that I used in my game, but other functions allow you to list the current players, limit the number of players in a session, and set formal and friendly names.<P>

DirectPlay also lets you create groups of players. The group member functions available are similar to the player functions. By grouping players, you can simplify message handling and conserve bandwidth by sending a message to a group rather than to each individual player. (I didn't use any functions in this category.)<P>

The final category is what DirectPlay is all about: message management. The <I>Send</I> and <I>Receive</I> functions let you communicate with other players. Messages can be any kind of data your game requires. You can send messages to a particular player, to a group, or to all the players in the session. Obviously, I used both <I>Send</I> and <I>Receive</I>.<P>

<h3><a name="02d2_00f4">Using DirectPlay<a name="02d2_00f4"></h3><P>

Using DirectPlay in your game usually involves the following steps:<P>

<ol>1.     Request that the user select a communication method for the game. Use the <I>DirectPlayEnumerate</I> function to find all of the available service providers and then list them in a listbox.</ol><P>

<ol>2.     Once a service provider has been chosen, create a DirectPlay object for that provider by calling the <I>DirectPlayCreate</I> function. This causes DirectPlay to load the appropriate service provider library.</ol><P>

<ol>3.     Optionally, you can request information from the user, such as a friendly name. Other game-specific information can be stored in the DPSESSIONDESC structure in the <I>dwUser</I> fields.</ol><P>

<ol>4.     Ask if the player wants to start a new game or join an existing one. If the player is joining an existing game, proceed to step 5. Otherwise, create the game by specifying the DPOPEN_ CREATESESSION flag and using the <I>Open</I> member function. Skip to step 6.</ol><P>

<ol>5.     Find existing sessions with <I>EnumSessions</I> and present them to the player. After a selection is made, connect to it by specifying the DPOPEN _OPENSESSION flag and using the <I>Open</I> member function.</ol><P>

<ol>6.     Create a player or players using the <I>CreatePlayer</I> member function. You can also find other players by using <I>EnumPlayers</I>.</ol><P>

<ol>7.     Use the <I>Send</I> and <I>Receive</I> member functions to communicate with the system and with other players.</ol><P>

<ol>8.     When the player exits the game, use <I>DestroyPlayer</I> to delete the player from the session, and the <I>Close</I> member function to close the communication channel.</ol><P>

Now that you have the APIs and member functions, and an overview of how to use DirectPlay, all you need is a game to try it out on.<P>

<h3><a name="02d2_00f5"><I>NetRoids</I><a name="02d2_00f5"></h3><P>

To see what it takes to add multiplayer capabilities to a game, I decided to add network support to the <I>Roids</I> game, which is supplied with the Game SDK. While space does not permit the listings to be presented here, I've provided the source code and project files electronically. The Game SDK includes a multiplayer game called <I>Duel</I>, but it already contains DirectPlay support and I wanted something that I could do myself. This approach also allows us to focus on DirectPlay. <I>Roids</I> already has all of the drawing, sound, and art files--all it needs is more players. Additionally, it provides a good benchmark for determining how fast and easy it is to add multiplayer support to an existing game.<P>

Every game needs a globally unique identifier (GUID). This is a long, complicated-looking number that the game uses to identify itself over the communication interface. Fortunately, the GUID can be generated for you by a program called UUIDGEN.EXE, which is provided with the Microsoft Win32 SDK (GUIDs are sometimes called UUIDs). I used the GUIDGEN.EXE program that comes with Visual C++ 4.0. GUIDGEN.EXE presents several ways of formatting the number, and since it is a Windows program, it has the ability to place the GUID on the clipboard for you to paste into your program. The GUID for <I>NetRoids</I> looks like <a href="9615a.htm#02d2_00fd">Example 1</A>. You can see why placing this number on the clipboard would be a handy feature! You create the GUID once while developing the game and use it from then on. The number is unique, so you don't have to register it with Microsoft.<P>

For the DEFINE_GUID macro to work properly, you must <I>#define</I> INITGUID before the WINDOWS.H include file. And you need the DPLAY.H include file for the DirectPlay interface. Once you have the GUID, follow the outline given earlier. For <I>NetRoids</I>, I turned to the <I>Duel</I> multiplayer example provided by the SDK and borrowed its dialog boxes for choosing a provider and a session (they're not great, but they'll do for this test). The <I>Duel</I> DirectPlay code provided a starting point for the <I>NetRoids</I> DirectPlay support. Most of the code is for the support of the dialog boxes, since it only takes two function calls to establish the DirectPlay session and one to create the player.<P>

<h3><a name="02d2_00f6">Creating the Session<a name="02d2_00f6"></h3><P>

When the player presses Enter on the splash screen, the <I>RemoteCreate</I> function is called. This, in turn, calls <I>GetProvider</I>, which presents a dialog box listing the available service providers. You will find the <I>DirectPlayEnumerate</I> call in the dialog-box initialization section; see <a href="9615a.htm#02d2_00fd">Example 1(b)</A>. The <I>EnumSP</I> function receives the service-provider information and adds the name strings to the contents of the listbox. Once a service provider is chosen or the dialog box is canceled, you return to the <I>RemoteCreate</I> function.<P>

If a service provider was chosen, the <I>CreateGame</I> function is called, which presents a dialog box asking if the player wants to create a new game or connect to an existing one. If creating a new game, you can call the <I>Open</I> member function with DPOPEN_CREATESESSION; see Example2. If connecting to an existing game, the <I>GetGame</I> function is called. This displays a dialog box listing all of the currently available sessions of <I>NetRoids</I>. In the dialog box initialization, the <I>EnumSessions</I> member function is called, where the <I>EnumSession</I> callback (not to be confused with the <I>EnumSessions</I> member!) adds the sessions found to the listbox; see <a href="9615a.htm#02d2_00ff">Example 3</A>. <P>

<h3><a name="02d2_00f7">Let's Synchronize<a name="02d2_00f7"></h3><P>

DirectPlay provides everything you need, with the exception of guidelines for game synchronization. The SDK documentation skirts the issue by stating that &quot;DirectPlay does not attempt to provide a general approach for game synchronization; to do so would necessarily impose limitations on the game-playing paradigm.&quot; <P>

Well, an overview of how that might be accomplished would be nice. <P>

If you were writing a simple chat program, your work would be done. You would simply send what one player typed to the other player and receive what he or she typed. But how do you keep several ships and several hundred random and fast-moving objects synchronized across four different computers? What exactly do you send back and forth, and how do you keep it straight? For <I>NetRoids</I>, I selected a client/server approach. The creator of the session becomes the host and the keeper of the universe. The host becomes ship 0 (I added the ship number in the upper-right corner of the display for reference), and the game operates much like it did as a single-player game. In fact, you can still play the game by yourself.<P>

The <I>IsHost</I> variable is the key to making the game act like two different programs. The host does everything the single-player version does and more. But the client doesn't have to do certain tasks, like create the objects for the level or check for object collisions. Once the host has created a session, other players can connect to it. These players will be clients, and they need a way to tell the host that they are there. Our first two messages handle this. The MSG_HEREIAM message is sent by a client to all players in the session. The host will receive it, and then try to find a ship for the new player. If a ship is available, the host sends a MSG_INIT message back to the client (and only that client) telling the player his or her ship number and the current level number. The client then joins the game.<P>

The messaging in <I>NetRoids</I> is handled by the <I>SendGameMessage</I>, <I>ReceiveGameMessages</I>, and <I>EvaluateMessage</I> functions. A structure is defined for each message packet, which is initialized and then sent with the DirectPlay <I>Send</I> member. <a href="9615a.htm#02d2_0100">Example 4</A> shows how to create and send the MSG_HEREIAM message. The first parameter is the DirectPlay object, followed by the DirectPlay sender ID, receiver ID, message flags, the communication buffer, and the number of bytes to send. To send to everyone in the session, you send to ID 0, which represents the DirectPlay server.<P>

The message is received by <I>ReceiveGameMessages</I> using the <I>Receive</I> member function, see <a href="9615a.htm#02d2_0101">Example 5(a)</A>, and then handled by <I>EvaluateMessag</I><I>e</I>; see <a href="9615a.htm#02d2_0101">Example 5(b)</A>. As you can see, only the host answers MSG_HEREIAM message and then immediately tries to initialize that player. All messaging is handled through the <I>Send</I> and <I>Receive</I> member functions. It really is easy, but you still need a way to synchronize the game.<P>

Synchronization means the synchronization of data. The original <I>Roids</I> game managed all of the objects through a doubly linked list with dynamically allocated members, with the player's ship at the top of the list. You can tell the other players to add an object, but how do you tell them which object to delete? To make things simple, I changed the object list into a fixed array. Now each object is placed at a specific index entry, and is easily identified. The top of the array still contains the player ships, but now there can be more than one player. This didn't require many code changes, but it is an important change.<P>

Three messages control the objects in the game, including the ships: <P>
<ul>
<li>MSG_UPDATE is sent by the host to update the position of objects on the client machines, and the clients send it to update their own ship position. </li>
<li>MSG_ADDOBJ is sent by the clients when they want to add an object--usually bullets. The add object message uses the same structure as the update message (the host ignores update messages because it sends them, so a separate message type was created). </li>
<li>MSG_DELOBJ is sent by the host when an object should be deleted from the list.</li>
</ul>
The last two messages deal with synchronization as well. The MSG_LEVEL message tells the clients that the host has started a new level, and the MSG_SCORE message allows the host to update a client's score. The score message actually makes the most use of direct host-to-client messaging, since most messages from the host are broadcast to all players in the session. When an object is created, the DirectPlay ID of the creator is stamped into the structure. When the host sees that a bullet object has collided with another object, it credits the creator of the bullet by sending the score message directly to the bullet creator's ID.<P>

I didn't sit down and decide all at once that these were the messages needed for <I>NetRoids</I> to become multiplayer. I added them as I went along, in pretty much the order I presented them here. For instance, I didn't have a delete-object message at first--I handled that with an update message, because the object structure contains an enabled flag that determines whether the object is visible or not. This didn't allow for playing the appropriate sound when the object was destroyed, though, and the update message was already overloaded.<P>

<h3><a name="02d2_00f8">Multiplayer Changes<a name="02d2_00f8"></h3><P>

The display list (or object array) was one major change in turning the <I>Roids</I> game into <I>NetRoids</I>. There were many other details to add that didn't involve DirectPlay. The changes were necessary to make the game multiplayer capable. For example, any time the logic looked at the player ship, you had to worry about an array of ships. Global variables for controlling shields now had to be part of the ship structure. Ships couldn't be initialized at the center of the screen, since they all would appear on top of one another. And of course, there needed to be judicious use of the <I>IsHost</I> variable for controlling the host and client behavior.<P>

A lot of the original code remains intact, however. If you have Visual C++, run the WinDiff program. Compare ROIDS.C to NETROIDS.C, ROIDS.H to NETROIDS.H, and ROIDS.RC to NETROIDS.RC. This will give you a good idea of what had to be changed and what stayed the same.<P>

<h3><a name="02d2_00f9">Performance<a name="02d2_00f9"></h3><P>

In my first attempt, I sent an update message for an object every frame. On my 133-MHz Pentium machine, I was getting 85 frames per second (fps), which I sent to a 486/66 and got 60 fps. I was able to drive the 486 down to its knees as soon as I got about 15 objects on the screen, and by doing a little math it is easy to understand why. I was sending 85*15*120= 153,000 bytes per second down the wire. Since I wanted several hundred objects on the screen at once, this obviously wouldn't do.<P>

My second attempt was to update the objects only once per second, instead of 85. The client could move the objects in between the one-second sync pulse so they would still move smoothly. This would increase my bandwidth by 85 times! Add and delete messages would still occur immediately, and ship updates would still occur every frame. This worked a lot better, but there was a momentary pause at regular intervals when there were many objects on the screen. <P>

The pause occurred because the pipeline was being maximized once a second--like turning the water on full blast, and off again, at regular intervals. To keep the water flowing through the pipe at a constant rate, my last attempt was to time-stamp each object as it was created. Objects are created sporadically as roids are destroyed, which can happen at any point in a one-second interval. An update message is sent to the clients only when that object's unique timer has expired, thereby keeping its position in the pipeline each second. This produced a smooth update on all of the clients.<P>

I'm sure more tweaking could be done. The player ships probably don't need to be updated 85 times a second--only when their velocity, angle, or shields change. Decreasing the object update sync pulse to every two seconds would double the game bandwidth without sacrificing anything.<P>

<h3><a name="02d2_00fa">Exercises for the Reader<a name="02d2_00fa"></h3><P>

The dialog boxes could be kept from displaying over the splash screen. They have a funny green color because of the palette, and the mouse isn't visible outside the dialog box. For cosmetic reasons, they should probably appear before the game enters the DirectDraw display mode.<P>

The <I>Roids</I> game is not much of a challenge, since you can fire so many shots at a time. I left that part alone in <I>NetRoids</I>, because I wanted to see how the performance kept up. The game would be much more challenging if each player were limited in the number of shots they could fire at one time and if there were a minimum amount of elapsed time between shots. Then I would change it from a cooperative game to a head-to-head game, where the players could shoot each other.<P>

You could prompt the user for a friendly name, and then display it beside their ship as it moves around. You could use the <I>GetPlayerName</I> and <I>SetPlayerName</I> functions for this. Displaying the name is the harder task, however, since you would need a font and another display surface. Also, I didn't use any of the group functions, which may improve performance over some providers. The SDK recommends specifying a notification event when your application creates a player and then using the Win32 function <I>WaitForSingleObject</I> to find out whether there is a message pending for that player. And finally, I ignored all system messages. System messages are sent when players or groups are added or deleted, or when connections are lost. A robust DirectPlay game should monitor those messages.<P>

<h3><a name="02d2_00fb">Conclusion<a name="02d2_00fb"></h3><P>

I wanted to keep most of the <I>Roids</I> source intact and include a header file and a separate source file for the DirectPlay support. Eventually, I had to give up on that idea. You really have to plan ahead when writing a game for more than one player, especially in the area of data management. In some ways, starting with an existing single-player game is more of a hassle than starting from scratch.<P>

I found the DirectPlay interface to be exactly as I anticipated--quick and easy. I spent most of my time on synchronization and message management, and I suppose that will vary with the type of game. A card game would take considerably less effort, since timing is not critical. I spent about one week learning the DirectPlay interface and creating the <I>NetRoids</I> game, which isn't bad at all. If there is an Internet service provider on the horizon, you'll be able to create a single game that plays over a modem, a network, and the Internet. I'm game.<P>

<h2>DirectPlay Gotchas</h2><P>

<h3>Jim Mischel</h3><P>

<cite>Jim, who is coauthor of The New Delphi 2 Programming Explorer (Coriolis Group, 1996), can be contacted at jmischel@cinematronics.com.</cite><P>

Designed and developed by Cinematronics and published by Virgin Interactive Entertainment, <I>TriTryst</I> was one of the first Windows 95 games to incorporate multiplayer support using DirectPlay. As the primary programmer on that project, I was assigned, among other things, the unenviable task of implementing the multiplayer portions of the game. Working with a new library on a new project is usually difficult, and DirectPlay proved to be no exception. In the course of the project, I gained new insight into the structure of multiplayer games and learned quite a bit about DirectPlay's strengths, weaknesses, and limitations.<P>

<h3>Multiplayer First, Game Second</h3><P>

Multiplayer issues extend into all parts of your game, from the highest levels all the way down to the base-data structures. If there's any chance your game will turn into a multiplayer game, design the code around that eventuality. Don't make the mistake of writing code that works fine for a single-player game with the intention of revisiting it later to &quot;add&quot; multiplayer support. Almost always, you'll end up rewriting large amounts of code from the ground up, and regression testing the result is not pretty. The only alternative is to special case the single-player game, and that's an even worse mess.<P>

Get the multiplayer communications working before doing anything else. Even if your game is initially single-player, design and write the code so that the single-player game sends messages to and receives messages from itself in the same client/server fashion that you'll eventually use for the multiplayer game.<P>

<h3>Know Your Limitations</h3><P>

The greatest shortcoming of DirectPlay is that it doesn't use reliable transport. My understanding is that unreliable transport was used in the interest of performance--reliable network transport is somewhat slower. That argument doesn't hold water, though. If DirectPlay doesn't let the network guarantee transport, then your program has to do it. That means packet ACK/NAK code and a checksum or CRC to ensure data integrity. So, build the packet verification code into your program at the beginning of the development cycle. You're going to need it, and it's much easier to design it in up front than it is to retrofit later.<P>

On a related note, DirectPlay doesn't always tell you when a player leaves the game. If a player's network connection goes down or the computer crashes, your game gets no notification from DirectPlay. An added benefit of the packet verification is that you can determine when a player is no longer responding and act accordingly.<P>

Also keep in mind that there is a limit on packet size. This isn't a limitation of DirectPlay, but rather the service provider you're using. Normally, the maximum packet size will be at least 512 bytes, but you can't guarantee that. You can determine the maximum packet size for a particular provider by calling the DirectPlay object's <I>GetCaps()</I> member function, and examining the <I>dwMaxBufferSize</I> variable in the returned DPCAPS structure.<P>

The DirectPlay object's <I>Send()</I> member function won't always return an error if you attempt to send a packet that's longer than <I>dwMaxBufferSize</I>. <I>Send()</I> returns DP_OK, leaving you wondering why your packet didn't get there. If there's a possibility that your program's packet size will be too long, you'll have to add code that will split packets or reject an attempt to play the game using a service provider whose maximum packet size is too small.<P>

Another limitation is that <I>DirectPlayEnumerate()</I> is a &quot;call once&quot; function. I would never have discovered this if it weren't for the testers at Virgin Interactive. One of their people decided to see what would happen if he repeatedly pulled up and then canceled <I>TriT</I><I>r</I><I>ys</I><I>t</I>'s multiplayer game dialog. This worked six times. The seventh time it would crash, right in the middle of one of DirectPlay's DLLs.<P>

DirectPlay apparently allocates an internal array that will hold up to 20 service providers. Every time you call <I>DirectPlayEnumerate()</I>, all of the service providers it finds are added to this array--even if they were added on a previous call. Since there were three service providers supplied with DirectPlay, there was enough room for six calls to <I>DirectPlayEnumerate()</I> (3*6 = 18). The seventh call would overflow the array.<P>

This is an interesting limitation. If a user happens to install more than 20 different DirectPlay service providers (assuming that many ever exist), DirectPlay won't be able to run on that system, and the user is likely to blame the game or the manufacturer of the last service provider that was installed.<P>

<h3>DirectPlay Messages</h3><P>

You have to poll for DirectPlay messages. The rationale behind this design decision escapes me. Windows is event-driven from the ground up, and programmers are encouraged to make use of this architecture. But DirectPlay doesn't notify your program when a message is received. You have to write a separate polling loop to ask DirectPlay if there are any messages available. This &quot;feature&quot; of DirectPlay touches your program at a very basic level. Not only do you have to add a call to the message polling function in your <I>PeekMessage()</I> or <I>GetMessage()</I> loop, but you also have to set up a timer to ensure that the polling function gets called when a dialog box is being displayed or when some other application is active.<P>

<h3>Other Issues</h3><P>

DirectPlay is full of little oddities that make it very frustrating to work with. For example, many of the member functions have the annoying habit of returning DPERR_GENERIC when they're unable to execute a particular function. I'm happy that the function tells me that it didn't complete successfully, but I'd also like to know why.<P>

Another oddity is that when you call <I>EnumSessions()</I>, your program essentially locks up for the time period that you specify in the <I>dwTimeout</I> parameter. Empirical evidence shows that <I>EnumSessions()</I> will take at least two seconds and possibly longer. During this time, your program will not respond to the user's input. Two seconds doesn't seem like very long until you have to wait that long before a program responds to pressing the OK button in a dialog box.<P>

Finally, DirectPlay provides one outstanding feature--transport independence. With DirectPlay you're able to write and test your game on one system, and be confident that it will work without modification on other transports. This is the only hands-down &quot;plus&quot; of DirectPlay. A big one, to be sure, but it doesn't necessarily outweigh the drawbacks.<P>

<h4><a name="02d2_00fc"><B>Table 1:</B> DirectPlay member functions. (a) Session management; (b) player management; (c) group management; (d) message management.<a name="02d2_00fc"></h4><P>

<pre>
Function  Description

(a)

Close                  Closes a communication channel.

EnumSessions           Enumerates all of the sessions connected

                        to a specific DirectPlay object.

GetCaps                Retrieves the capabilities of the

                        specified DirectPlay object.

Open                   Establishes a new gaming session or

                        connects to an existing one.

SaveSession            Saves the current session in the

                        registry. Currently supported only by

                        modem service providers.



(b)

CreatePlayer           Creates a player for a session.

DestroyPlayer          Deletes a player from a session.

EnableNewPlayers       Enables or disables the addition of new

                        players or groups.

EnumPlayers            Enumerates all of the players in a

                        specified session.

GetPlayerCaps          Retrieves the capabilities of a player's

                        connection.

GetPlayerName          Retrieves a player's friendly and formal

                        names.

SetPlayerName          Changes the player's friendly and formal

                        names.



(c)

AddPlayerToGroup       Adds a player to an existing group.

CreateGroup            Creates an empty group of players for a

                        session.

ATTR 5|DeletePlayerFromGroup  Deletes a player from a group.

DestroyGroup           Destroys a group of players for a session.

EnumGroupPlayers       Enumerates the players in a group.

EnumGroups             Enumerates all of the groups associated

                        with a specified session.



(d)

GetMessageCount        Retrieves the number of messages waiting

                        for a player.

Receive                Retrieves messages that have been sent to

                        a player.

Send                   Sends messages to other players or all of

                        the players in a session.

</pre>

<h4><a name="02d2_00fd"><B>Example 1:</B> (a) Creating a globally unique identifier; (b) filling a list with names of DirectPlay service providers.<a name="02d2_00fd"></h4><P>

<pre>(a)
// NetRoids a64e8e40-5750-11cf-a4ac-0000c0ec0b9f<P>
DEFINE_GUID(NETROIDS_GUID,0xa64e8e40,0x5750,0x11cf,<P>
                            0xa4,0xac,0x00,0x00,<P>
                            0xc0,0xec,0x0b,0x9f);

(b)
DirectPlayEnumerate(EnumSP, (LPVOID) hWndCtl);</pre>

<h4><a name="02d2_00fe"><B>Example 2:</B> Creating a new game session.<a name="02d2_00fe"></h4><P>

<pre>// Create a new game, so we're the host
IsHost = TRUE;
// Initialize session description structure
memset(&amp;dpDesc, 0x00, sizeof(DPSESSIONDESC));
dpDesc.dwSize = sizeof(dpDesc);
dpDesc.dwMaxPlayers = MAXPLAYERS;
dpDesc.dwFlags = DPOPEN_CREATESESSION;
dpDesc.guidSession = pGuid;
strcpy(dpDesc.szSessionName, FullName);
// Try to open the session
if ((hr = lpIDC-&gt;lpVtbl-&gt;Open(lpIDC, &amp;dpDesc)) != DP_OK)
{
    // We failed
    lpIDC-&gt;lpVtbl-&gt;Release(lpIDC);
    lpIDC = NULL;
    return(FALSE);
}</pre>

<h4><a name="02d2_00ff"><B>Example 3:</B> (a) Opening an existing game; (b) if a session is selected, it is opened with DPOPEN_OPENSESSION; (c) creating a player.<a name="02d2_00ff"></h4><P>

<pre>(a)
// Initialize the session description structure<P>
memset(&amp;dpDesc, 0x00, sizeof(DPSESSIONDESC));<P>
dpDesc.dwSize = sizeof(dpDesc);<P>
dpDes.guidSession = *g_lpGuid;<P>
// Enum sessions with 5 second timeout<P>
lpIDC-&gt;lpVtbl-&gt;EnumSessions(lpIDC, &amp;dpDesc,<P>
    (DWORD)5000, EnumSession,<P>
    (LPVOID) hWndCtl, (DWORD)NULL);

(b)
// Initialize session description struc to open it<P>
memset(&amp;dpDesc, 0x00, sizeof(DPSESSIONDESC));<P>
dpDesc.dwSize      = sizeof(dpDesc);<P>
dpDesc.guidSession = *g_lpGuid;<P>
dpDesc.dwFlags     = DPOPEN_OPENSESSION;<P>
dpDesc.dwSession   = SendMessage((HWND) hWndCtl,<P>
LB_GETITEMDATA, iIndex, 0);
hr = lpIDC-&gt;lpVtbl-&gt;Open(lpIDC, &amp;dpDesc);

(c)
// Either way, we have to create a player<P>
if ((hr = lpIDC-&gt;lpVtbl-&gt;CreatePlayer(lpIDC, &amp;dcoID, NickName, &quot;NetRoids Player&quot;, &amp;dphEvent)) <P>
!= DP_OK)<P>
{<P>
    // We failed<P>
    lpIDC-&gt;lpVtbl-&gt;Close(lpIDC);<P>
    lpIDC-&gt;lpVtbl-&gt;Release(lpIDC);<P>
    lpIDC = NULL;<P>
    return(FALSE);<P>
}</pre>

<h4><a name="02d2_0100"><B>Example 4:</B> (a) Creating the MSG_HEREIAM message; (b) sending the message.<a name="02d2_0100"></h4><P>

<pre>(a)
case MSG_HEREIAM:<P>
    // Tell host we are here<P>
    lpHereIAm = (LPHEREIAMMSG)CommBuff;<P>
    lpHereIAm-&gt;MsgCode = msg;<P>
    lpHereIAm-&gt;ID = (DWORD)dcoID;<P>
    nBytes = sizeof(HEREIAMMSG);<P>
    break;

(b)
// Send the message<P>
lpIDC-&gt;lpVtbl-&gt;Send(lpIDC, dcoID, send_to, 0, 
(LPSTR) CommBuff, nBytes);</pre>

<h4><a name="02d2_0101"><B>Example 5:</B> (a) Receiving the MSG_HEREIAM message; (b) handling the message.<a name="02d2_0101"></h4><P>

<pre>(a)
status = lpIDC-&gt;lpVtbl-&gt;Receive(lpIDC,<P>
     &amp;fromID, &amp;dcoReceiveID, DPRECEIVE_ALL,<P>
     CommBuff, &amp;nBytes);

(b)
case MSG_HEREIAM:<P>
    // Someone wants to play<P>
    if (IsHost)<P>
    {<P>
        // I'm the host, so find out who is here<P>
        lpHereIAm = (LPHEREIAMMSG)CommBuff;<P>
        shipID = lpHereIAm-&gt;ID;<P>
        // Initialize them<P>
        SendGameMessage(MSG_INIT, shipID, 0);<P>
    }<P>
    break;</pre>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
