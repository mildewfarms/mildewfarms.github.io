<HTML> <HEAD> <!-- This document was built using HyperWriter Professional byNTERGAID Inc. --> <TITLE>JUN96: Reusable Binary Associations in C++</TITLE></HEAD>
<META NAME="year" CONTENT="1996">
<body bgcolor="FFFFFF"> <h1>Reusable Binary Associations in C++<a name="01fc_00ad"><a name="01fc_00ad"><a name="01fc_00ab"><a name="01fc_0000"></h1><P>

<h2>A cookie-cutter approach for representing abstract relationships</h2><P>

<h3>Terris Linenbach</h3><P>

<P> <i><a name="01fc_00ac"><a name="01fc_0000">Terris is a software engineer for
Sagent Technology Inc. and can be contacted at terris@rahul.net.</i></p><hr><P>

Understanding relationships between objects is crucial to the success of any
object-oriented software project. Relationships express real-world facts about
objects without delving into computer terminology. For example,
&quot;companies&quot; and &quot;employees&quot; can be related by the statement
&quot;an employee works for a company.&quot; Programmers have a much better
chance of implementing a design correctly if relationships are documented in a
clear and concise manner, free of any implementation details.<P>

<h3><a name="01fc_00ae">Association Semantics<a name="01fc_00ae"></h3><P>

Relationships are known as &quot;associations&quot; in the Object Modeling
Technique (OMT). Associations that relate two classes are known as &quot;binary
associations.&quot; Three, four, and even more classes can participate in
associations. However, binary associations are the easiest to conceptualize, and
they tend to be the most common. Associations have additional
semantics--multiplicity, bidirectionality, properties, and association objects.
(For more on associations, see <I>Object-Oriented Modeling and Design</I>, by
James Rumbaugh et al., Prentice Hall, 1991.)<P>

Associations can express one-to-one, one-to-many, and many-to-many relationships
between classes; this is known as &quot;multiplicity.&quot; Consider a simple
one-to-one relationship (like <a href="9606a3f1.gif">Figure 1</A>) between a
company and its board of directors, where the board has performed its duties for
a particular duration. A company and a board of directors participate in a simple
association called &quot;has,&quot; as in &quot;a company has a board of
directors.&quot; In this example, a path exists from a particular company to its
board of directors and from the board of directors to the company. This type of
association is called &quot;bidirectional&quot; since both participants can
locate each other.<P>

&quot;Properties&quot; describe <I>aspects</I> of the association. Without the
association, properties are meaningless. In the aforementioned example,
&quot;duration&quot; is an association  property--it describes the amount of time
that the board has performed its duties.<P>

Associations can be modeled and implemented as separate objects. An association
&quot;object&quot; in this example would contain a duration field, a pointer to a
company object, and another pointer to a board of directors object.<P>

Associations allow projects to leverage the power of various classes without
intermixing their implementations and creating unplanned dependencies.
Associations thus promote modularity. Instead of building one monolithic class
that does everything under the sun, classes can enlist other classes to store
specific information and carry out specific tasks.<P>

<h3><a name="01fc_00af">Implementing Associations<a name="01fc_00af"></h3><P>

The degree of effort required to implement associations depends on the target
language. SQL, for example, requires a properly prepared join between tables. In
C++, programmers typically implement associations using pointers.<P>

A pointer-based implementation of <a href="9606a3f1.gif">Figure 1</A> might look
like <a href="9606c.htm#01fc_00ba">Example 1</A>. There is a flaw in this
implementation, however. Although a board object can locate its company, the
company object cannot locate its board. This is a common oversight. The fact may
well be that the existing code base does not need to find a board of directors
object given a company object. In many cases, this is just a coincidence and is
not a true reflection of the project's needs. Some programmers take the point of
view &quot;this will get us by--we can add the other pointer later when we need
it.&quot; However, adding the pointer later means that the class implementation
will change, and depending on the code base, client code may need to be changed.
You should not allow existing code to bias class implementations. Large systems
should implement associations correctly up front; otherwise, the hasty decision
to implement half of the association may result in extra effort later. <P>

In a one-to-one association, both objects must point to each other. Pointers do
not enforce this constraint. At run time, this rule is easy to circumvent, and
doing so can lead to code with hidden bugs. Pointer management is even more
important in one-to-many associations.<P>

Dangling pointers can crop up easily at run time. Pointers can point to deleted
objects. Sometimes, pointers should be NULL when they aren't (these bugs are
difficult to track down).Properties should be shared by both the forward and
backward pointers in an association.<P>

Some methodologies include support for &quot;unidirectional&quot; relationships,
which map directly to pointers in C++. However, if your design includes
bidirectional associations, C++ programmers will face challenges. The extra
effort required to fully implement associations must be justified, so
implementers should use their best judgment. In short, don't do it unless you
really have to.<P>

<h3><a name="01fc_00b0">Association Cookie Cutter in C++<a name="01fc_00b0"></h3><P>

In this article, I'll present a design for implementing binary associations. The
design consists of both OMT object-model and dynamic-model diagrams. I'll then
implement the design in C++ (using templates to promote code reuse) and provide
examples that use it. All of the code associated with this article is available
electronically (see &quot;Availability,&quot; page 3) and at ftp.rahul.net, in
the pub/terris directory. The source code is freely distributable.<P>

I tried to create a design that would do the following:<P>

<ul><li>Automatically maintain forward and backward pointers.</li> <li>Support
one-to-zero-or-one, one-to-many, and many-to-many relationships.</li> <li>Allow
one class to be associated with many classes. For example, class A can
participate in a one-to-one association with class B, and participate in a
one-to-many association with class C.</li> <li>Support ordered one-to-many and
many-to-many associations, where the order of the objects on the &quot;many&quot;
side is an important design detail.</li> <li>Support binary association
objects.</li> <li>Support association properties. A property class is specified
by the user via a template. An association can &quot;own&quot; one (and only one)
property instance. When an association is broken, the property instance is
deleted (this is optional behavior).</li> <li>Be able to specify a container
class for one-to-many and many-to-many relationships, without reliance on a
particular container implementation.</li> <li>Provide type safety.</li>
<li>Provide compatibility with object-oriented databases.</li></ul> Keep in mind that
there are other approaches that could achieve these same goals. In his article
&quot;Automating Association Implementation in C++&quot; (<I>DDJ</I>, October
1995), David Papurt describes a template-based approach that uses inheritance to
express associations between objects. In his design, a parent class provides
functionality for linking to another object, locating a linked object, and
removing a link; see <a href="9606c.htm#01fc_00bb">Example 2(a)</A>. The class
<I>CompanyBase</I> provides all company-oriented functionality, without any
association details; see <a href="9606c.htm#01fc_00bb">Example 2(b)</A>. Finally,
the <I>Company</I> class mixes <I>Compa</I><I>nyBase</I> with association
functionality, as in <a href="9606c.htm#01fc_00bb">Example 2(c)</A>. This
approach works well for simple object models. However, since inheritance is used,
this approach is cumbersome when one class participates in associations with two
or more classes. In our company example, the board of directors participates in a
one-to-one relationship with a company but also participates in a one-to-many
relationship with company executives. Papurt does not directly address
one-to-many or many-to-many relationships (he mentions that the approach can be
used to implement such associations, but doesn't demonstrate how), nor does he
cover association properties and association objects.<P>

Another approach is described in chapter 15 of <I>Object-Oriented Analysis and
Design</I> by Rumbaugh et al. Private methods, such as <I>add_item()</I> and
<I>remove_</I><I> </I><I>item()</I>, are defined on the classes that participate
in an association. These functions maintain the backward and forward pointers.
However, code reuse is not optimal and the chapter glosses over the details.<P>

<h3><a name="01fc_00b1">My Solution<a name="01fc_00b1"></h3><P>

The approach I propose is illustrated in <a href="19960202.htm">Figure 2</A>
through <a href="19960201.htm">Figure 5</A>. <a href="19960202.htm">Figure 2</A>
and <a href="19960203.htm">Figure 3</A> illustrate the object models, while <a href="19960204.htm">Figure 4</A> and <a href="19960205.htm">Figure 5</A> show the
dynamic models. Table1 describes the classes and methods of the association
objects <I>ASToOne</I>, <I>ASToOneProp</I>, <I>ASToMany</I>, and
<I>ASToManyProp</I>. <I>DetachMe()</I> is called on destruction to minimize
&quot;dangling pointers.&quot;<P>

Notice that the <I>ASToOneBase</I> and <I>ASToManyBase </I>classes are indirectly
associated. <I>ASToOneBase</I> has a one-to-zero-or-one relationship with
<I>ASAssn,</I> and <I>ASToManyBase</I> has a one-to-many relationship with
<I>ASAssn</I>. This means that:<P>

<ul><li>One <I>ASToOneBase</I> object can have a one-to-zero-or-one relationship with
an <I>ASToOneBase</I> object; this is how one-to-one relationships are
implemented.</li> <li>One <I>ASToOneBase</I> object can have a one-to-zero-or-one
relationship with an <I>ASToManyBase</I> object; this is how one-to-many
relationships are implemented.</li> <li>One <I>ASToManyBase</I> object can have a
one-to-many relationship with <I>ASToOneBase</I> objects; this is how many-to-one
relationships are implemented.</li> <li>One <I>ASToManyBase</I> object can have a
one-to-many relationship with <I>ASToManyBase</I> objects; this is how
many-to-many relationships are implemented.</li></ul> The design consists of two
dynamic models, one for one-to-one relationships and another for one-to-many
relationships. The dynamic models show the behavior of the association objects,
and demonstrate how the &quot;forward&quot; and &quot;backward&quot; pointers are
maintained.<P>

<a href="19960206.htm">Figure 4</A> shows the behavior for the one-to-one case.
First, the object (call it &quot;A&quot;) starts in the &quot;unattached&quot;
state. Association objects are linked by sending one of the objects an
<I>Attach</I> event. Sending the object an <I>Attach</I> event has two results:
First, B is sent an <I>iAttach</I> event; then, A points to B. This ensures that
the two objects point to each other.<P>

When A receives a <I>DetachMe</I> event, B is sent an <I>iDetach</I> message.
This ensures that A and B are no longer linked.<P>

Finally, consider the case where A is attached to B, and A receives another
<I>Attach</I> event. Since A is a one-to-one association object, A's left-hand
side (LHS) object cannot be linked to more than one object. So, A sends B an
<I>iDe</I><I>tach</I> message.<P>

The one-to-many dynamic model (<a href="19960207.htm">Figure 5</A>) is similar to
<a href="19960208.htm">Figure 4</A>. The <I>Attach</I> and <I>Detach</I> events
have the same &quot;message forwarding&quot; behavior. <I>Attach</I> sends an
<I>iAttach</I> event and <I>Detach</I> sends an <I>iDetach</I> event.<P>

In the following discussion, I'll use the terms &quot;left-hand-side&quot; (LHS)
and &quot;right-hand-side&quot; (RHS) to identify the objects in an association.
The left-hand-side is the point of reference; there is only one object on the
left-hand-side of an association. The right-hand-side of the association is what
the left-hand-side object &quot;sees&quot; as it &quot;looks out&quot; through
the association, as if it were a sailor looking through a periscope. In a
one-to-many relationship, the left-hand-side object sees many objects through the
periscope. In a one-to-one relationship, the left-hand-side sees only one
object.<P>

Also note that I'll actually be implementing pseudoassociation objects, because
one association object in this design only tells half of the story; two
pseudoassociation objects are needed to express one association. In other words,
I use the term &quot;association object&quot; when I mean &quot;pseudoassociation
object.&quot;<P>

<h3><a name="01fc_00b2">One To One<a name="01fc_00b2"></h3><P>

In <a href="9606a3f1.gif">Figure 1</A>, both sides of the association are
implemented with <I>ASToOneProp</I> data members. <a href="1996020a.htm">Figure
6</A> is an instance diagram of the participants. The <I>Corporation</I> class
has its own <I>ASToOneProp</I> object that contains:<P>

<ul><li>A pointer to the corporation, as the LHS pointer.</li> <li>A pointer to the
board of directors' association object, as the RHS pointer.</li> <li>A pointer to
the association properties.</li></ul> The <I>BoardOfDirectors</I> class has its own
<I>ASToOneProp</I> object that contains:<P>

<ul><li>A pointer to the board, as the LHS pointer.</li> <li>A pointer to the
corporation's association object, as the RHS pointer.</li> <li>A pointer to the
association properties.</li></ul> The RHS pointers point to <I>Association</I>
objects, not to &quot;real&quot; objects. This allows both sides of an
association to be updated in one <I>Attach</I> or <I>Detach</I> operation. Two
association objects are needed because <I>Association</I> objects are not shared
on both sides of the relationship--their classes may differ (as in the case of
one-to-many relationships).<P>

Note that there is only one instance that holds the association properties. This
ensures consistency and may conserve memory.<P>

<h3><a name="01fc_00b3">Sample Code<a name="01fc_00b3"></h3><P>

One-to-zero-or-one relationships are fairly easy to implement using the template
classes. Two template classes exist for this purpose, <I>ASToOne</I> and
<I>ASToOneProp</I>. <I>ASToOne</I> accepts two parameters, which are the classes
that are involved in the association. <I>ASToOneProp</I> accepts an additional
parameter, which is the class that contains the association properties; see <a href="9606c.htm#01fc_00c1">Listing One</A>. <a href="9606c.htm#01fc_00c3">Listing
Two</A> links a company to a board of directors. By default, the properties
object is deleted when the link is broken. This can be overridden.<P>

A board can locate its company using <I>board.CompanyBoardAssn.GetRhsObject()</I>
and a company can locate its board using
<I>company.CompanyBoardAssn.GetRhsObject()</I>. The properties for the
association can be located starting from the company object using
<I>company.CompanyBoardAssn.GetProperties().m_duration</I> and also starting from
the board of directors object using
<I>board.CompanyBoardAssn.GetProperties().m_duration</I>.<P>

<h3><a name="01fc_00b4">Violating Encapsulation<a name="01fc_00b4"></h3><P>

Notice that the <I>Attach()</I> method accepts an <I>ASAssn</I> object. The code
that calls <I>Attach()</I> accesses a data member in <I>board. </I>Clearly, this
violates encapsulation. All other association implementations have this
encapsulation problem. Some object-oriented practitioners even argue against
associations entirely because of the encapsulation problem. Creating association
object &quot;getters&quot; on <I>company</I><I> </I>and <I>board </I>is a trivial
task, but this is not a complete solution. The objects are tightly bound by a
member name in either case.<P>

Other proposed solutions refer only to entire objects, as in <I>Link( objectA,
objectB )</I>, so they don't need to access data members; however, this violates
one of our design goals, which is to allow one class to participate in many
associations with other classes.<P>

The encapsulation problem is not as detrimental as it seems. First, associations
can be implemented without adding data members to a class, because <I>ASAssn</I>
objects can be declared anywhere in a program. The following section shows how.
However, this approach carries with it the problem of cataloging association
objects and finding them when you need them.<P>

Secondly, subclassing can be used to isolate classes. First, a stand-alone class
is built, free from any associations. Then, a subclass is created that has
association objects as data members. Any class that is reusable without a
particular association should be implemented in this manner. <a href="9606c.htm#01fc_00c5">Listing Three</A> demonstrates this approach.<P>

<h3><a name="01fc_00b5">Association Objects<a name="01fc_00b5"></h3><P>

Instead of embedding data members in the <I>Company</I> and
<I>BoardOfDirectors</I> classes, association objects can be declared as local or
global variables; see <a href="9606c.htm#01fc_00bc">Example 3(a)</A>. <a href="9606c.htm#01fc_00bc">Example 3(b)</A> declares local variables for the
company and board objects, while <a href="9606c.htm#01fc_00bc">Example 3(c)</A>
declares an association object for the company called <I>company_link</I>.
Finally, <a href="9606c.htm#01fc_00bc">Example 3(d)</A> declares an association
object for the board called <I>board_link</I>. The company and board are then
linked using <a href="9606c.htm#01fc_00bc">Example 3(e)</A>.<P>

Is this approach best, or should data members be used? I'm not recommending one
method or the other. Both schemes are valid and have their own strengths and
weaknesses.<P>

<h3><a name="01fc_00b6">One-To-Many<a name="01fc_00b6"></h3><P>

Consider the simple one-to-many relationship between a car and its accessories in
<a href="19960215.htm">Figure 7</A>. The &quot;car&quot; side of the
implementation uses an association of type <I>AS</I><I>ToManyProp,</I> and the
&quot;accessory&quot; side of the implementation uses an object of type
<I>ASToOneProp</I>. In <a href="1996020c.htm">Figure 8</A>, the <I>Car</I> object
has its own <I>ASToManyProp</I> object that contains:<P>

<ul><li>A pointer to the car, as the LHS pointer.</li>
<li>A list of objects, each of which contains a pointer to the accessory's association object and a pointer to the properties for the association.</li></ul>

The <I>Accessory</I> object has its own <I>ASToOneProp</I> object that contains the following:<P>

<ul><li>A pointer to the accessory, as the LHS pointer.</li> 
<li>A pointer to the
car's association object, as the RHS pointer.</li> 
<li>A pointer to the
association properties.</li></ul> 

<h3><a name="01fc_00b7">Sample Code<a name="01fc_00b7"></h3><P>

Implementing one-to-many associations requires more work than implementing
one-to-one associations. First, list and iterator classes must be implemented.
The list class inherits from <I>ASListAdapter</I> and the iterator class inherits
from <I>ASIteratorAdapter</I>. These are abstract template classes. Adapters
define an interface. They have no implementation details. Adapter interfaces are
typically implemented by forwarding messages to other objects. See <I>Design
Patterns: Elements of Reusable Object-Oriented </I><I>Software</I>, by Erich
Gamma et al., Addison-Wesley 1995.<P>

Lists contain different types of items, depending on whether the association has
properties. In the <I>ASToMany</I> case, the list contains <I>ASAssn</I> objects.
In the <I>ASToManyProp</I> case, the list contains <I>ASAssnPropTuple</I>
objects. Each <I>ASAssnPropTuple</I> (<a href="19960211.htm">Figure 3</A>) object
contains a pointer to an <I>ASAssn</I> object and a pointer to an association
properties object. The same list and iterator implementations can store both
types of objects.<P>

The sample code (available electronically) implements two classes,
<I>ListTempl</I> and <I>IteratorTempl</I>. <a href="9606c.htm#01fc_00c7">Listing
Four</A> is an example of the <I>car</I> and <I>accessory</I> classes. In <a href="9606c.htm#01fc_00bd">Example 4(a)</A>, one car is declared along with three
accessories. The car and accessories are then linked together in <a href="9606c.htm#01fc_00bd">Example 4(b)</A>. Given a car object, <a href="9606c.htm#01fc_00bd">Example 4(c)</A> steps through all of its accessories.
<I>Iterate()</I> is a factory method and returns a pointer to an object that must
be deleted. The code
<I>acc1.m_installedIn.Get</I><I>Properties().m_installationCost</I> demonstrates
how to access the properties, given an accessory object. <a href="9606c.htm#01fc_00be">Example 5</A> shows code that iterates through a list
of associations depending upon whether associations have properties. <a href="9606c.htm#01fc_00be">Example 5(a)</A> is code without properties, while
5(b) is code with properties. Note that the call to <I>GetLhsObject</I> is
missing in <a href="9606c.htm#01fc_00be">Example 5(a)</A>.<P>

Ordered associations can be implemented in two ways. First, the list itself can
be ordered: Items can be traversed in the order that they were added to the list;
or, a list can be built to sort items based on a key generated from RHS objects.
Secondly, traversal order can be specified explicitly when items are attached;
the <I>iOrder</I> parameter sent to the <I>Attach()</I> method can specify
relative order.<P>

<h3><a name="01fc_00b8">Many-to-Many<a name="01fc_00b8"></h3><P>

Many-to-many relationships can also be implemented. The difference is that
<I>ASToMany</I> (or <I>ASToManyProp</I>) objects appear as data members in both
classes. <P>

<h3><a name="01fc_00b9">Conclusion<a name="01fc_00b9"></h3><P>

Implementing associations is not a trivial task. Programmers should take the time
to design a standard approach for implementing associations; otherwise,
individual programmers will code unique solutions that require their own
debugging and documentation. In this article, I've described an approach for
implementing associations via OMT diagrams and working C++ code. Combining OMT
diagrams with real code can be an effective approach for documenting designs.
Unfortunately, the design does not solve the encapsulation violation problem, but
it does improve your chances of producing reusable code.<P>

<h4><a name="01fc_00ba"><B>Example 1:</B> Pointer-based implementation of <a href="9606a3f1.gif">Figure 1</A>. <a name="01fc_00ba"></h4><P>
<pre>class Company
{
  public:
    string name;
};

class Board
{
  public:
    Company *pCorporation;
};</pre>
<h4><a name="01fc_00bb"><B>Example 2:</B> (a) Parent class provides functionality for linking to another object, locating linked object, and removing link; (b) CompanyBase provides company-oriented functionality, without association details; (c) Company class mixes CompanyBase with association functionality.<a name="01fc_00bb"></h4>

<pre>(a)
template &lt;class parentClass, class linkClass&gt;
class Association :  public parentClass
{
    linkClass *pLinkedObject;
  public:
    link( linkClass * );
    getAssociatiedObject();
};

(b)
class CompanyBase
{
  public:
    string name;
};

(c)
class Company : public Association&lt; CompanyBase,
                  BoardOfDirectors &gt;
{
};</pre>
<h4><a name="01fc_00bc"><B>Example 3:</B> (a) Declaring association objects as local or global variables; (b) declaring local variables; (c) declaring an association object for company_link; (d) declaring an association object for board_link; (e) linking company and board.<a name="01fc_00bc"></h4>

<pre>(a)
class Company
{
  public:
  
    string name;
};

class BoardOfDirectors
{
};

(b)
Company company;
BoardOfDirectors board;

(c)
ASToOneProp&lt; Company, 
              BoardOfDirectors, 
              CompanyBoardProperties 
                  &gt; company_link(company);

(d)
ASToOneProp&lt; BoardOfDirectors, 
              Company, 
              CompanyBoardProperties 
             &gt;board_link(board);

(e)
company_link.Attach(board_link, 
                      *new Properties(1));</pre>
<h4><a name="01fc_00bd"><B>Example 4:</B> (a) One car is declared along with three accessories; (b) car and accessories are linked; (c) stepping through all of its accessories.<a name="01fc_00bd"></h4>

<pre>(a)
Car car;
  
Accessory acc1;
Accessory acc2;
Accessory acc3;

(b)
car.m_hasAccessories.Attach( acc1.m_installedIn, 
  *new CarAccessoryProperties( 500 ) );

acc2.m_installedIn.Attach( car.m_hasAccessories, 
    *new CarAccessoryProperties( 1000 ) );

acc3.m_installedIn.Attach( car.m_hasAccessories, 
  *new CarAccessoryProperties( 7000 ) );

(c)
typedef AS_ITER_ADAPTER_PROP( Car, Accessory, 
   CarAccessoryProperties ) Iterator;

Iterator *pIterator = 
  car.m_hasAccessories.GetRhsObjects().Iterate(); 

for ( ; !pIterator -&gt; AtEnd(); pIterator -&gt; Next())
{
  printf( &quot;Cost %d\n&quot;, 
          pIterator-&gt;GetCurrent().GetProperties()
             .m_installationCost
        );
}
delete pIterator;</pre>
<h4><a name="01fc_00be"><B>Example 5:</B> Code that iterates through a list of associations. (a) Without properties; (b) with properties.<a name="01fc_00be"></h4>

<pre>(a)
for ( ; !pIterator -&gt; AtEnd(); pIterator -&gt; Next())
{
  printf( &quot;Many link:  %d\n&quot;, 
          pIterator-&gt;GetCurrent().i 
        );
}

(b)
for ( ; !pIterator -&gt; AtEnd(); pIterator -&gt; Next())
{
  printf( &quot;Many link:  %d\n&quot;, 
          pIterator-&gt;GetCurrent().GetLhsObject().i 
        );
}</pre>

<h4><B><a href="9606a3f1.gif">Figure 1</A>: </B>Simple one-to-one
relationship.</h4><P>

<h4><B><a href="19960210.htm">Figure 2</A>: </B>Object model #1.</h4><P>

<h4><B><a href="19960211.htm">Figure 3</A>: </B>Object model #2.</h4><P>

<h4><B><a href="19960212.htm">Figure 4</A>: </B>Dynamic model,
one-to-one.</h4><P>

<h4><B><a href="19960213.htm">Figure 5</A>: </B>Dynamic model,
one-to-many.</h4><P>

<h4><B><a href="19960214.htm">Figure 6</A>: </B>Instance diagram of the
association implementation. This type of diagram should not be specified in a
real design. Lines with arrows represent pointers.</h4><P>

<h4><B><a href="19960215.htm">Figure 7</A>: </B>Simple one-to-one relationship.
</h4><P>

<h4><B><a href="19960216.htm">Figure 8</A>: </B>Instance diagram of the
association implementation. This type of diagram should not be specified in a
real design. Lines with arrows represent pointers.</h4><P>

<h4><a name="01fc_00bf"><a name="01fc_00bf"><B>Table 1:</B> Classes and methods
of association objects.</h4><P>

<pre> 
<B>Method           ASToOne/ASToOneProp             ASToMany/ASToManyProp</B>

Attach(object)      Attaches the LHS object to          Attaches the LHS object to
                     passed-in object.                   the passed-in object.
                     If either object is already
                     attached, the previous 
                     attachments are revoked.

DetachMe()          Detaches the LHS and RHS            Detaches the LHS object
                     objects.                            from all of the objects
                                                         it is attached to.

Detach(object)      &lt;&lt;Not present&gt;&gt;                     Detaches the LHS object
                                                         from a specific RHS
                                                         object.

GetLhsObject()      Returns the LHS object.             Returns the LHS object.



GetRhsObject()      Returns the object that is           &lt;&lt;Not present&gt;&gt;
                     associated with the
                     LHS object.

</pre>

<P>

<h4><a name="01fc_00c0"><a name="01fc_00c1">Listing One<a name="01fc_00c1"></h4><pre>
// Forward
class Company;
class BoardOfDirectors;
class CompanyBoardProperties;

class Company
{
  public:
    Company() : CompanyBoardAssn ( *this )
    {
    }
    string name;
    ASToOneProp&lt; Company, BoardOfDirectors, CompanyBoardProperties &gt; 
      CompanyBoardAssn;
};
class BoardOfDirectors
{
  public:
    BoardOfDirectors() : CompanyBoardAssn ( *this )
    {}
    ASToOneProp&lt;BoardOfDirectors, Company, CompanyBoardProperties&gt; 
      CompanyBoardAssn;
};
class CompanyBoardProperties
{
  public:
  CompanyBoardProperties( const long duration )
    : m_duration( duration )
  {}
  long m_duration;
};
</pre>
<h4><a name="01fc_00c2"><a name="01fc_00c3">Listing Two<a name="01fc_00c3"></h4><pre>
Company company;
BoardOfDirectors board;

// Attach the board and the company - the board has served for 5 months
company.CompanyBoardAssn.Attach( board.CompanyBoardAssn, 
                                            *new CompanyBoardProperties( 5 ) );
</pre>
<h4><a name="01fc_00c4"><a name="01fc_00c5">Listing Three<a name="01fc_00c5"></h4><pre>
Class CompanyPure
{
  public:
    string name;
};
class BoardOfDirectorsPure
{
};
class Company : public CompanyPure
{
  public:
    Company() : CompanyBoardAssn ( *this )
    {
    }
    ASToOneProp&lt; Company, BoardOfDirectors, CompanyBoardProperties &gt; 
      CompanyBoardAssn; // You can use any name you want
};
class BoardOfDirectors : public BoardOfDirectorsPure
{
  public:
    BoardOfDirectors() : CompanyBoardAssn ( *this )
    {}
    ASToOneProp&lt;BoardOfDirectors, Company, CompanyBoardProperties&gt; 
     CompanyBoardAssn; // You use any name you want
}
</pre>
<h4><a name="01fc_00c6"><a name="01fc_00c7">Listing Four<a name="01fc_00c7"></h4><pre>
// Forward
class Car;
class Accessory;
class CarAccessoryProperties;

typedef AS_LIST_PROP( ListTempl, 
   Car, Accessory, CarAccessoryProperties ) List;

class Car
{
  public:
  Car() : m_hasAccessories( *this, *new List )
  {
  }
  ASToManyProp&lt; Car, Accessory, CarAccessoryProperties &gt;
   m_hasAccessories;
};
class Accessory
{
  public:
  Accessory() : m_installedIn( *this )
  {}
  ASToOneProp&lt;Accessory, Car, CarAccessoryProperties&gt; m_installedIn;
};
class CarAccessoryProperties
{
  public:
  CarAccessoryProperties( long cost )
    : m_installationCost( cost )
  {}
  long m_installationCost;
};
</pre>

</BODY></HTML>
