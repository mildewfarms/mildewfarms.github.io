<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>JUN96: Instantiating Code Patterns</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>Instantiating Code Patterns<a name="022f_00b7"><a name="022f_00b7"><a name="022f_00b5"><a name="022f_0000"></h1><P>

<h2>Patterns applied to software development</h2><P>

<h3>Fred Wild</h3><P>

<P>
<i><a name="022f_00b6"><a name="022f_0000">Fred is principal of Advantage Software Technologies and can be contacted at 72774.657@compuserve.com.</i></p><hr><P>

Although we often use patterns, we sometimes do so unconsciously--not by design. Whenever we follow a pattern, we are applying experienced-based learning. Whenever we need to accomplish something that we've seen others do, we tend to mimic the strategies and actions that made that thing successful in the past.<P>

Experienced software developers use patterns heavily in the design-level aspects of their work. Design patterns make us more productive, more likely to achieve success, and generally more valuable as project participants.  <P>

We might think that less-experienced engineers are disadvantaged in this respect, but rather than accepting the risks that lack of experience brings with it, effective organizations take an early and active role in sharing important domain knowledge with them. They gather the collective design wisdom of the group, and document those best practices in a descriptive language (manifest vocabulary) of what the important design patterns are, and when and how to apply them. A good example of this can be found in <I>Design Patterns: Elements of Reusable Object-Oriented Software</I>, by Erich Gamma et al. (Addison-Wesley, 1995). In my experience, developers of all ranks drink up such design patterns and quickly begin to apply them effectively.<P>

With respect to patterns of code, we can provide much more direct help and support than simply documenting best practices. We can build the use of those code patterns into the tools we use in the software-development process itself. SNIP is a commercially available tool I designed for that purpose. In this article, I'll discuss the use of patterns in the coding aspect of software development, and describe how to use SNIP to define and instantiate code patterns.<P>

<h3><a name="022f_00b8">Design Patterns and Code Patterns<a name="022f_00b8"></h3><P>

Design patterns are logical in nature. They embody approaches and strategies that are relevant to a number of possible implementations. A design pattern is something you can visualize independent of a particular programming language. For example, given that you need to manage the dynamic allocation and deallocation of objects, you can specify a logical strategy for minimizing memory utilization by keeping reference counts on objects and copying those objects only when an operation is performed to modify them. For a detailed C++ example of this strategy see &quot;Item 29&quot; within <I>More Effective C++: 35 New Ways to Improve Your Programs and Designs</I>, by Scott Meyers (Addison-Wesley, 1996). Having defined the strategy and given it a name, you can treat it as a design idiom. During design you can say, &quot;XYZ will be a reference-counted object,&quot; and experienced programmers will understand what that implies.<P>

In contrast, code patterns are physical in nature. They focus on how a particular structure or sequence of action is accomplished using the specific mechanisms of a programming language. With C++, we've been trained to create code-level abstractions to support certain design idioms (for example, using collection classes and templates), but this practice has limitations. Classes and templates are not adequate mechanisms to implement many of the code patterns that are interesting to us. Many important code patterns either describe how a class should deal with its parts (a parts-based pattern), or describe how a number of cooperating classes are created to implement a single design idea (a multiclass pattern). Developers currently use parts-based and multiclass patterns, but they do so via hand coding. You either know the pattern by heart, or you copy a code sample that already follows the pattern, and modify it to work in the specific case.<P>

<h3><a name="022f_00b9">Using Code Patterns<a name="022f_00b9"></h3><P>

Most production software environments operate under time and quality pressures. As a result, code patterns that should be staples are all-too-seldom used. This is not because the patterns are unknown. It is not because developers do not recognize cases in which they would be good strategies to apply. It is because hand-crafting patterns adds just enough time and risk to a schedule to cause them to be shunned. For example, a correct implementation of a reference-counted object in C++ requires careful attention to the use of a copy-on-write mechanism that each non-<I>const</I> function plays into. This adds unwelcome detail and complexity to a handcoding-based process.<P>

To make use of nontrivial code patterns, we just need an easy way to characterize objects during design and then have those characteristics influence how code is produced.<P>

<h3><a name="022f_00ba">Using SNIP for Pattern Instantiation<a name="022f_00ba"></h3><P>

SNIP is a tool for instantiating patterns of code that can be derived from object models. First, it allows you to define code patterns that are important, based on your own local standards and classifications of object characteristics. SNIP then provides the capability to instantiate those code patterns for any set of specific objects. Given a properly thought-out set of rules for creating code for objects and their parts, based on specific characteristics, you can realize gains in standardization, quality, and time-to-implementation. <P>

SNIP enables code patterns that use an object model as an instantiation contex to be defined; see <a href="9606w1f1.gif">Figure 1</A>. It applies the rules called out in an executable template to the objects and their parts, and produces code files based on those rules. <P>

To use SNIP, you first need a well-defined implementation strategy. You need to call out the characteristics of the objects (and their parts) that participate in that strategy, and decide how code should be created for each of them. Given that strategy, you create a set of code-creation rules, placing them in a SNIP template file. A number of template files that serve as good starting points for this come with the tool. For example, a template for handling frequent C++ class constructs that can be easily extended to include special rules is provided. <P>

You can develop the template files iteratively using SNIP's user interface. Once you are satisfied with the code pattern that is created by the template, you can add the command form of SNIP into makefiles for use in non-interactive builds. <P>

As an example of how SNIP is used, I'll use the common C++ programming task of properly managing dynamically allocated objects. Whenever you have a contained pointer, it is important for the code in the class containing the pointer to manage the dynamically allocated object correctly. (Although you might otherwise create a special container class or smart-pointer template, I'll use this example because it is familiar and brief.) <P>

First, I'll define what it means to manage an object via a contained pointer. (Feel free to disagree with the definition--it just means your template would be different than the one I present.) I define the code-pattern requirements as follows:<P>
<ul>
<li>All pointers to objects, both owned and shared, are initially set to NULL.</li>
<li>A <I>set</I> operation keeps the pointer passed into it in both the owned and shared pointer cases.</li>
<li>A <I>clear</I> operation deletes the object if it is owned, otherwise the pointer is set to NULL.</li>
<li>The destructor deletes the object if it is owned.</li>
<li>A copy constructor or assignment operation calls <I>makeCopy()</I> on an owned object and uses the returned pointer. Pointers are simply copied in shared object cases. </li>
</ul>
<a href="9606h.htm#022f_00c2">Listing One</A> shows how these rules are expressed in the SNIP-template file format. Before inspecting the listing, however, note that this template is pared down for illustration, so it won't be hard to find a case it doesn't handle (the production template that this example was taken from is much more sophisticated). Secondly, there are only a few constructs used in SNIP templates. Once you know them, readability isn't an issue.<P>

SNIP's template statements draw information from an object model and generate code based on that information. Before you can make sense of template statements, you need to see what they are referring to. <a href="9606h.htm#022f_00c4">Listing Two</A> is a simple object model I'll use as input to SNIP in this example. It has just one contained pointer of each type in it--one to an object that is owned (<I>PetOwner::Pet</I>), and another to an object that is shared (<I>PetOwner::Vet</I>). When you apply the template file in <a href="9606h.htm#022f_00c2">Listing One</A> to this object model, your rules will be used to generate the code in Listings <a href="9606h.htm#022f_00c6">Three</A> (the resulting header file) and <a href="9606h.htm#022f_00c8">Four</A> (the resulting body file). <P>

<h3><a name="022f_00bb">Reading Template Statements<a name="022f_00bb"></h3><P>

SNIP template files contain a mainline of executable statements and any number of modules that contain executable statements. Executable statements come in three forms: simple statements, blocks, and iterators. Simple statements have the form <I>left-hand-side ':' right-hand-side</I>. To the left of the colon is a selection expression. If the expression evaluates to True, the right side is expanded, and the resulting text is emitted into the active output file. <P>

The module <I>emit_class_decls</I> in <a href="9606h.htm#022f_00c2">Listing One</A> contains the segment of statements in <a href="9606h.htm#022f_00bf">Example 1</A>. The first five statements have no variables on the left, which means they are selected in all cases, so each of their right sides are expanded and emitted into the active output file (variables being substituted where indicated). A backslash on the end of a statement continues the line--no line feed is emitted when the right side's text is emitted. <P>

The next line has a single variable on the left, called <I>&lt;obj.has_parent&gt;</I>, which takes on the value true if the object has at least one parent object identified in the input model. When it is True, the statement is selected. It emits a colon and space, and continues the line. <P>

The next statement is an iterator, prefaced by <I>.each_parent</I>. It iterates over each parent identified for the current object in the model. The body of the iterator continues until its corresponding <I>.end</I> is reached. Within this parent iterator, each parent class name is emitted, followed by a comma, except with the last one. The variable <I>&lt;xxx.is_nth&gt;</I> is used to indicate the last member of an iterated list. The bang character (!) inverts the sense of the Boolean variable. <P>

This segment of the template emits code that properly creates the preamble of a class' declaration and takes into account cases where the class is a subclass of one or more parent classes. <P>

<h3><a name="022f_00bc">Code for Handling Contained Pointers<a name="022f_00bc"></h3><P>

<a href="9606h.htm#022f_00c4">Listing Two</A> contains the template module <I>emit_class_copy_ctor</I> that will emit the copy constructor for each object in the model. The pattern that the copy constructor follows demonstrates the need to treat contained pointers to owned objects differently from those that are shared. <P>

The module <I>emit_class_copy_ctor</I><I> </I>starts by emitting the copy constructor's signature and initialization list, including calls to copy constructors higher up the inheritance paths, if there are any. After emitting the opening brace of the constructor's body, the attributes that have been defined for the object are iterated, and three possibilities are used as selection criteria for producing code statements. The attribute may be simple, such as <I>Name</I>. In this case, the template assumes that the assignment operator is defined for the attribute type, and adds a statement to copy its associated value. Second, the attribute may be a pointer that is shared. In that case, the pointer value is copied. In the last case, you have a pointer that is owned. A call is issued to make a copy of the object in that case, and the pointer of the newly allocated object is retained. This module is also responsible for emitting the body of the <I>makeCopy</I> function, which appears at its end. When this module is applied to <I>PetOwner</I>, you get the code in the class <I>PetOwner</I><I> </I>shown in <a href="9606h.htm#022f_00c8">Listing Four</A>. <P>

The destructor pattern (see the module<I> emit_class_destructor</I> in <a href="9606h.htm#022f_00c4">Listing Two</A>) iterates similarly over the object's attributes. This time the iteration is done to find only the owned pointers. These are the only members that are interesting to the destructor (which is responsible for deleting them). The destructor for <I>PetOwner</I> has only one line, which deletes the <I>Pet</I> object, its sole owned pointer. <a href="9606h.htm#022f_00c0">Example 2</A> (excerpted from <a href="9606h.htm#022f_00c8">Listing Four</A>) is the code created for <I>PetOwne</I><I>r</I>'s destructor.<P>

<h3><a name="022f_00bd">Conclusion<a name="022f_00bd"></h3><P>

SNIP allows control of code generation, and is flexible enough that you can define code patterns that relate to how objects fit into your local frameworks. Where a consistent strategy and pattern of producing code can be identified, quality and productivity can be increased proportional to the amount of code that follows that strategy. The ratio of lines of code to lines of input model is typically 20:1. This is a great productivity advantage. Admittedly, SNIP does not provide a revolutionary new way to produce code. Instead, it offers the opportunity to automate what you are already doing to follow code patterns by hand. <P>

<h3><a name="022f_00be">For More Information<a name="022f_00be"></h3><P>

Advantage Software Technologies<P>

260 Abbott Run Valley Rd.<P>

Cumberland, RI 02864 <P>

401-334-4807 <P>

72774.657@compuserve.com.<P>

<h2>SNIP In Action</h2><P>

<h3>Mo Bjornestad</h3><P>

< cite>Mo, vice president of marketing for Mark V Systems, can be contacted at mob@ markv.com or http://www.markv.com.</ cite><P>

CASE tools have traditionally focused on providing a means of modeling analysis and design problems using the notations of prescribed methodologies, such as those offered by Booch and Rumbaugh. As such, CASE tools have too often been used as a special-purpose document-capture facility. This is an unenlightened use. Modern CASE tools are now used more appropriately as rapid application development (RAD) tools that generate applications in whole or in part. That is what Mark V's ObjectMaker is designed to do.<P>

ObjectMaker supplies a meta-CASE capability, which is another way to say that it offers a highly extensible system that provides a breadth of customization. ObjectMaker users simply build graphical models of their requirements and design. The graphical diagrams are transformed into a unified semantic model. The semantic model is then transformed to SNIP's macro language, which is sent to SNIP for template expansion into the targeted programming language(s). The template can be edited for form and content to conform to internal standards. (Templates are currently available for Ada 83, Ada 95, C, C++, and Smalltalk, with IDL and Java templates under development.) In short, users can define their own variants of traditional methods, or add completely new methods. They can then use the information captured in the repository in forward engineering into code. That's where SNIP comes in. <P>

SNIP allows ObjectMaker to remain customizable. ObjectMaker's front end is integrated with SNIP's capability to instantiate patterns of code from object models. SNIP integration is accomplished by using Mark V's meta rule language to traverse and transform the ObjectMaker semantic model contents into the SNIP macro language. The macro is handed off to a macro expander, which populates the templates, then exports the file as fully expanded code. We feed the object model information into SNIP from our repository, and let it generate code files according to user-modifiable code patterns delivered with ObjectMaker. SNIP is the right tool for this because it is largely model and language independent.<P>

Using SNIP has exposed many opportunities and possibilities for patterns to be applied in creating code from design-level information. As people's ideas about using code patterns become more focused, we see a renewed and growing interest in CASE as a front end for driving pattern-based approaches to creating software. SNIP provides a timely capability in this area.<P>

<h4><B><a href="9606w1f1.gif">Figure 1</A>: </B>SNIP's operating model.</h4><P>

<h4><a name="022f_00bf"><a name="022f_00bf"><B>Example 1:</B> Reading template statements.</h4><P>

<pre>               ://
               ://  Class &lt;obj.name&gt; -------------
               ://
               :
               :class &lt;obj.name&gt; \
&lt;obj.has_parent&gt;     :: \
.each_parent
               :public &lt;parent.name&gt;\
&lt;!parent.is_nth&gt;     :, \
&lt;parent.is_nth&gt;     :
.end
               :{</pre>

<h4><a name="022f_00c0"><a name="022f_00c0"><B>Example 2:</B> Code created for PetOwner's destructor.</h4><P>

<pre>PetOwner::~PetOwner()
{
   delete m_Pet ;
}</pre>

<P>

<h4><a name="022f_00c1"><a name="022f_00c2"><a name="022f_00c2">Listing One</h4><pre>
object PetOwner  
    Name            :       string ;
    Pet             :       ptr_to  Pet [is_owner] ;
    Vet             :       ptr_to  Veterinarian [is_shared] ;
end ;
object Veterinarian  
    Name            :       string ;
    StreetAddress   :       string ;
    Town            :       string ;
    Phone           :       string ;
end ;
object Pet 
    Name            :       string ;
    KindOfPet       :       string ;
end ;
foreign string [use_ref] ;
</pre>
<h4><a name="022f_00c3"><a name="022f_00c4"><a name="022f_00c4">Listing Two</h4><pre>
#   Create the header file ...
#
                :$$NEWFILE &lt;dsm.name&gt;.hxx
                :
                :#ifndef &lt;dsm.name&gt;_H
                :#define &lt;dsm.name&gt;_H
                :
                :// Forward references for each class
                :
.each_obj
                :class  &lt;obj.name&gt; ;
.end
                :
                :$$EXECMODULE emit_class_decls
                :
                :#endif
                :
#   Create the body file ...
#
                :$$NEWFILE &lt;dsm.name&gt;.cxx
                :
                :#include &quot;&lt;dsm.name&gt;.hxx&quot;
                :
                :$$EXECMODULE emit_class_bodies
                :
###################################################################
#   Module to emit class declarations
#
.module emit_class_decls
.each_obj
                        :
                        ://
                        ://  Class &lt;obj.name&gt; --------------------------------
                        ://
                        :
                        :class &lt;obj.name&gt; \
&lt;obj.has_parent&gt;        :: \
.each_parent
                        :public &lt;parent.name&gt;\
&lt;!parent.is_nth&gt;        :, \
&lt;parent.is_nth&gt;         : 
.end
                        :{
                        :$$EXECMODULE emit_member_variables
                        :
                        :   public:
                        :
                        :       &lt;obj.name&gt;();
                        :       &lt;obj.name&gt;(const &lt;obj.name&gt;&amp; obj);
                        :       &lt;obj.name&gt; *makeCopy() const ;
                        :       virtual ~&lt;obj.name&gt;();
                        :
                        :       &lt;obj.name&gt; &amp;operator=(const &lt;obj.name&gt; &amp;rhs) ;
                        :
                        :$$EXECMODULE emit_attr_access_ftn_decls
                        :
                        :} ;
.end
.end
###################################################################
#   Modules to emit class member variable declarations
#
.module emit_member_variables
.each_attr
&lt;attr.simple&gt;       :       &lt;attr.kind&gt;       &lt;30&gt;  m_&lt;attr.name&gt; ;
&lt;attr.ptr_to&gt;       :       &lt;attr.kind&gt;       &lt;30&gt; *m_&lt;attr.name&gt; ;
.end
.end
###################################################################
#   Module to emit attribute access function declarations
#
.module emit_attr_access_ftn_decls
.each_attr
                    :$$EXECMODULE emit_get_decl
                    :$$EXECMODULE emit_set_decl
                    :
.end
.end
###################################################################
#   Module to emit get functions for an attribute
#
.module emit_get_decl
&lt;attr.simple&gt;&lt;!attr.use_ref&gt; : &lt;attr.kind&gt;   &lt;35&gt;Get&lt;attr.name&gt; () const ;
&lt;attr.simple&gt;&lt;attr.use_ref&gt;  : const &lt;attr.kind&gt; &amp; &lt;35&gt;Get&lt;attr.name&gt; () const;
&lt;attr.ptr_to&gt;                : const &lt;attr.kind&gt; * &lt;35&gt;Get&lt;attr.name&gt; () const;
.end
###################################################################
#   Module to emit set functions for an attribute
#
.module emit_set_decl
&lt;attr.simple&gt;&lt;!attr.use_ref&gt; : void &lt;35&gt;Set&lt;attr.name&gt;(const&lt;attr.kind&gt; val);
&lt;attr.simple&gt;&lt;attr.use_ref&gt;  : void &lt;35&gt;Set&lt;attr.name&gt;(const&lt;attr.kind&gt; &amp; val);
&lt;attr.ptr_to&gt;                : void &lt;35&gt;Set&lt;attr.name&gt;(&lt;attr.kind&gt; *val) ; 
&lt;attr.ptr_to&gt;                : void &lt;35&gt;Clear&lt;attr.name&gt; () ; 
.end
###################################################################
#   Module to emit the bodies of member functions for each class
#
.module emit_class_bodies
.each_obj
            :
            ://////////////////////////////////////////////////////////
            ://     class &lt;obj.name&gt;
            :$$EXECMODULE emit_class_default_ctor
            :$$EXECMODULE emit_class_copy_ctor
            :$$EXECMODULE emit_class_destructor
            :$$EXECMODULE emit_assignment_op_body
            :$$EXECMODULE emit_get_and_set_ftn_bodies
.end
.end
###################################################################
#   Module to create a class' default constructor
#
.module emit_class_default_ctor
                                 :
                                 :&lt;obj.name&gt;::&lt;obj.name&gt;()
                                 :{
.each_attr
&lt;attr.ptr_to&gt;&lt;!attr.has_init&gt;    :   m_&lt;attr.name&gt; = NULL;
&lt;attr.has_init&gt;                  :   m_&lt;attr.name&gt; = &lt;attr.init_val&gt; ;
.end
                                 :}
.end
###################################################################
#   Module to create a class' copy ctor and 'makeCopy' function
#
.module emit_class_copy_ctor
                                 :
                                 :&lt;obj.name&gt;::&lt;obj.name&gt;(const &lt;obj.name&gt;&amp; obj)
&lt;obj.has_parent&gt;                 :   : \
.each_parent
                                 :&lt;parent.name&gt;(obj)\
&lt;!parent.is_nth&gt;                 :,
&lt;!parent.is_nth&gt;                 :     \
&lt;parent.is_nth&gt;                  :
.end
                                 :{
.each_attr
&lt;attr.simple&gt;                  : m_&lt;attr.name&gt; = obj.m_&lt;attr.name&gt;;
&lt;attr.ptr_to&gt;&lt;attr.is_shared&gt;  : m_&lt;attr.name&gt; = obj.m_&lt;attr.name&gt;;
&lt;attr.ptr_to&gt;&lt;attr.is_owner&gt;   : m_&lt;attr.name&gt; = obj.m_&lt;attr.name&gt;-&gt;makeCopy();
.end
                                 :}
                                 :
                                 :&lt;obj.name&gt; *&lt;obj.name&gt;::makeCopy() const 
                                 :{
                                 :    return new &lt;obj.name&gt;(*this);
                                 :}
.end
###################################################################
#   Module to create a class' destructor
#
.module emit_class_destructor
                                 :
                                 :&lt;obj.name&gt;::~&lt;obj.name&gt;()
                                 :{
.each_attr
&lt;attr.ptr_to&gt;&lt;attr.is_owner&gt;     :   delete m_&lt;attr.name&gt; ;
.end
                                 :}
.end
###################################################################
#   Module to create a class' assignment operator
#
.module emit_assignment_op_body
                                :
                                :&lt;obj.name&gt; &amp;
                                :&lt;obj.name&gt;::operator=(const &lt;obj.name&gt; &amp;rhs)
                                :{
                                :   if (this == &amp;rhs) return *this ;
                                :       // No changes if assignment to self 
                                :
.each_parent
                                :   ((&lt;parent.name&gt; &amp;) (*this)) = rhs ;  
                                :       // Assign base class members of &lt;parent.name&gt;
.end
.each_attr
&lt;attr.simple&gt;                  : m_&lt;attr.name&gt; = rhs.m_&lt;attr.name&gt;;
&lt;attr.ptr_to&gt;&lt;attr.is_shared&gt;  : m_&lt;attr.name&gt; = rhs.m_&lt;attr.name&gt;;
&lt;attr.ptr_to&gt;&lt;attr.is_owner&gt;   : m_&lt;attr.name&gt; = rhs.m_&lt;attr.name&gt;-&gt;makeCopy();
.end
                                :
                                :   return *this ;
                                :}
.end
###################################################################
# Module to create class member functions that access single valued member vars
#
.module emit_get_and_set_ftn_bodies
.each_attr
&lt;attr.getset&gt;   :$$EXECMODULE emit_get_ftn_body
&lt;attr.getset&gt;   :$$EXECMODULE emit_set_and_clear_ftn_bodies
.end
.end
###################################################################
#   Module to create a 'Get' function body for accessing an attribute
#
.module emit_get_ftn_body
&lt;attr.simple&gt;&lt;!attr.use_ref&gt;    :&lt;attr.kind&gt; Get&lt;attr.name&gt; () const
&lt;attr.simple&gt;&lt;attr.use_ref&gt;     :const &lt;attr.kind&gt; &amp; Get&lt;attr.name&gt; () const 
&lt;attr.ptr_to&gt;                   :const &lt;attr.kind&gt; * Get&lt;attr.name&gt; () const 
                                :{
                                :    return m_&lt;attr.name&gt; ;
                                :}
.end
###################################################################
#   Module to create a 'Set' and 'Clear' function bodies
#
.module emit_set_and_clear_ftn_bodies
&lt;attr.simple&gt;&lt;!attr.use_ref&gt;    :void Set&lt;attr.name&gt; (const &lt;attr.kind&gt; val)
&lt;attr.simple&gt;&lt;attr.use_ref&gt;     :void Set&lt;attr.name&gt; (const &lt;attr.kind&gt; &amp; val)
&lt;attr.ptr_to&gt;                   :void Set&lt;attr.name&gt; (&lt;attr.kind&gt; *val)
                                :{
&lt;attr.simple&gt;                   :  &lt;attr.name&gt; = val ;
&lt;attr.ptr_to&gt;&lt;attr.is_owner&gt;    :  if (&lt;attr.name&gt; != NULL) delete &lt;attr.name&gt;;
&lt;attr.ptr_to&gt;                   :  &lt;attr.name&gt; = val ;
                                :}
&lt;attr.ptr_to&gt;                   :
&lt;attr.ptr_to&gt;                   :
&lt;attr.ptr_to&gt;                   :void Clear&lt;attr.name&gt; ()
&lt;attr.ptr_to&gt;                   :{
&lt;attr.ptr_to&gt;&lt;attr.is_owner&gt;    : if (&lt;attr.name&gt; != NULL) delete &lt;attr.name&gt; ;
&lt;attr.ptr_to&gt;                   : &lt;attr.name&gt; = NULL ;
&lt;attr.ptr_to&gt;                   :}
.end
.end
</pre>
<h4><a name="022f_00c5"><a name="022f_00c6"><a name="022f_00c6">Listing Three</h4><pre>
#ifndef pets_H
#define pets_H
// Forward references for each class
class  PetOwner ;
class  Veterinarian ;
class  Pet ;
//  Class PetOwner --------------------------------
class PetOwner {
       string                  m_Name ;
       Pet                    *m_Pet ;
       Veterinarian           *m_Vet ;
   public:
       PetOwner();
       PetOwner(const PetOwner&amp; obj);
       PetOwner *makeCopy() const ;
       virtual ~PetOwner();
       PetOwner &amp;operator=(const PetOwner &amp;rhs) ;
       const string &amp;             GetName () const ;
       void                       SetName (const string &amp; val) ;
       const Pet *                GetPet () const ;
       void                       SetPet (Pet *val) ; 
       void                       ClearPet () ; 
       const Veterinarian *       GetVet () const ;
       void                       SetVet (Veterinarian *val) ; 
       void                       ClearVet () ; 
} ;
//  Class Veterinarian --------------------------------
class Veterinarian {
       string                  m_Name ;
       string                  m_StreetAddress ;
       string                  m_Town ;
       string                  m_Phone ;
   public:
       Veterinarian();
       Veterinarian(const Veterinarian&amp; obj);
       Veterinarian *makeCopy() const ;
       virtual ~Veterinarian();
       Veterinarian &amp;operator=(const Veterinarian &amp;rhs) ;
       const string &amp;             GetName () const ;
       void                       SetName (const string &amp; val) ;
       const string &amp;             GetStreetAddress () const ;
       void                       SetStreetAddress (const string &amp; val) ;
       const string &amp;             GetTown () const ;
       void                       SetTown (const string &amp; val) ;
       const string &amp;             GetPhone () const ;
       void                       SetPhone (const string &amp; val) ;
} ;
//  Class Pet --------------------------------
class Pet {
       string                  m_Name ;
       string                  m_KindOfPet ;
   public:
       Pet();
       Pet(const Pet&amp; obj);
       Pet *makeCopy() const ;
       virtual ~Pet();
       Pet &amp;operator=(const Pet &amp;rhs) ;
       const string &amp;             GetName () const ;
       void                       SetName (const string &amp; val) ;
       const string &amp;             GetKindOfPet () const ;
       void                       SetKindOfPet (const string &amp; val) ;
} ;
#endif
</pre>
<h4><a name="022f_00c7"><a name="022f_00c8"><a name="022f_00c8">Listing Four</h4><pre>
#include &quot;pets.hxx&quot;
//////////////////////////////////////////////////////////
//     class PetOwner
PetOwner::PetOwner()
{
   m_Pet = NULL;
   m_Vet = NULL;
}
PetOwner::PetOwner(const PetOwner&amp; obj)
{
   m_Name = obj.m_Name;
   m_Pet = obj.m_Pet-&gt;makeCopy();
   m_Vet = obj.m_Vet;
}
PetOwner *PetOwner::makeCopy() const 
{
    return new PetOwner(*this);
}
PetOwner::~PetOwner()
{
   delete m_Pet ;
}
PetOwner &amp;
PetOwner::operator=(const PetOwner &amp;rhs)
{
   if (this == &amp;rhs) return *this ;
       // No changes if assignment to self 
   m_Name = rhs.m_Name;
   m_Pet = rhs.m_Pet-&gt;makeCopy();
   m_Vet = rhs.m_Vet;
   return *this ;
}
//////////////////////////////////////////////////////////
//     class Veterinarian
Veterinarian::Veterinarian()
{
}
Veterinarian::Veterinarian(const Veterinarian&amp; obj)
{
   m_Name = obj.m_Name;
   m_StreetAddress = obj.m_StreetAddress;
   m_Town = obj.m_Town;
   m_Phone = obj.m_Phone;
}
Veterinarian *Veterinarian::makeCopy() const 
{
    return new Veterinarian(*this);
}
Veterinarian::~Veterinarian()
{
}
Veterinarian &amp;
Veterinarian::operator=(const Veterinarian &amp;rhs)
{
   if (this == &amp;rhs) return *this ;
       // No changes if assignment to self 
   m_Name = rhs.m_Name;
   m_StreetAddress = rhs.m_StreetAddress;
   m_Town = rhs.m_Town;
   m_Phone = rhs.m_Phone;
   return *this ;
}
//////////////////////////////////////////////////////////
//     class Pet
Pet::Pet()
{
}
Pet::Pet(const Pet&amp; obj)
{
   m_Name = obj.m_Name;
   m_KindOfPet = obj.m_KindOfPet;
}
Pet *Pet::makeCopy() const 
{
    return new Pet(*this);
}
Pet::~Pet()
{
}
Pet &amp;
Pet::operator=(const Pet &amp;rhs)
{
   if (this == &amp;rhs) return *this ;
       // No changes if assignment to self 
   m_Name = rhs.m_Name;
   m_KindOfPet = rhs.m_KindOfPet;
   return *this ;
}
</pre>
<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
