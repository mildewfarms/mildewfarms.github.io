<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>JUN96: JAVA Q&A</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>JAVA Q&amp;A<a name="0244_00bf"><a name="0244_00bf"><a name="0244_00bd"><a name="0244_0000"></h1><P>

<h2>How Do I Write a Chat Program?</h2><P>

<h3>Cliff Berg</h3><P>

<P>
<i><a name="0244_00be"><a name="0244_0000">Cliff is vice president of technology at Digital Focus. He can be contacted at cliffbdf@digitalfocus.com. Submit your questions to the Java Developer FAQ Web site at http://www.digitalfocus.com/faq/.</i></p><hr><P>

Chat programs allow people to communicate simultaneously across a network. Everything you type into a chat window is broadcast to the screens of all other users currently logged into the program. Chat programs originated with simple text-only capabilities (like the UNIX talk program) and have evolved into elaborate graphical environments. Unfortunately, everyone who wants to &quot;chat&quot; has had to obtain and install compatible chat programs. Java solves this problem by making it possible for chat programs to be hosted on a Web site and downloaded for execution with the click of a button--no installation, no purchase. Just click and start chatting!<P>

Chat programs are genuinely useful. Many chat programs allow discussions to be saved in a log file, as a record of points made or decisions reached (or jokes told). In short, chat programs are fun, but they can also be used to do real work. We've used a chat program to coordinate the activities of software developers separated by continents, and without adding a cent to our phone bill! (One relative of mine even uses a chat program to communicate with family in Rangoon.)<P>

Real chat programs have features such as private chat &quot;rooms,&quot; special identities, and so on. I'll ignore these embellishments to demonstrate the fundamental techniques.<P>

The two basic chat architectures are peer-to-peer and client/server. A peer-to-peer design requires no server program, but is far more complex to implement. A client/server design requires a chat &quot;server&quot; program that serves as a switchboard or data-routing center for all ongoing chat sessions.<P>

In this case, the server program runs on a UNIX Web server, since this is the typical configuration. The Java chat program can then be hosted on a Web page on the server machine, with the chat program server running on the same machine. In essence, to make this work, you need:<P>
<ul>
<li>A chat server program.</li>
<li>A Java chat client program.</li>
<li>An HTML page that loads the Java chat client program.</li>
</ul>
When someone goes to the HTML page that has the Java chat client on it, the Java client is automatically fetched and run on the user's machine. The client program will then set up a communication session with the chat server program, which must be running all the time on the Web server. Once the session is established, users can then join any ongoing chat session.<P>

<a href="19960247.htm">Figure 1</A> illustrates the basic architecture of the system. All data (keystrokes) entered by any client is sent to the server, which then rebroadcasts the data to all clients. It is conceptually simple, and thanks to Java's streamlined communications-programming classes, is surprisingly straightforward to implement.<P>

There is a hitch: Most Web servers still do not have Java available on them, and Java is needed to run the server component if it, too, is in Java. Therefore, we'll write the server in C++, and the client in Java. You can then put the client on a Web page: The Web server does not need to understand Java to host Web pages with Java on them. The only thing that is required is that the client platform (typically Netscape) be able to run Java.<P>

<h3><a name="0244_00c0">The Java Client<a name="0244_00c0"></h3><P>

The chat client has three main classes: <I>ServerChat</I>, <I>UserChat</I>, and <I>Chat</I>, the last of which is an applet class that instantiates the other two. <I>ServerChat</I>, a thread class, is capable of running asynchronously in its own thread. This is good because its main job is to monitor the connection with the chat server program across the network and handle asynchronous incoming data from the server. <I>UserChat</I>, on the other hand, is the component that handles asynchronous data (input characters as they are typed) from the user. <I>UserChat</I> forwards these characters to the server program over the communication line.<P>

The most complex part of the program is the <I>ServerChat</I> class. Yet Java makes even this component easy to write compared to an equivalent program in C. You don't have to worry about things like network byte order or any details usually required for TCP/IP programming.<P>

<I>ServerChat</I> has a constructor and two primary methods: <I>readln();</I> and <I>run()</I>. <I>ServerChat</I> extends the <I>TextArea</I> class, so it inherits all of the behavior and features of a Java <I>TextArea</I>, which is a scrollable text window. Data retrieved from the server is displayed in this window. <I>ServerChat</I> adds an important feature to <I>TextAre</I><I>a</I>--a thread. The constructor for <I>ServerChat</I> creates a new thread for itself to run in; later on, when the applet initializes itself, it will call the thread's <I>run()</I> method (actually it calls <I>start()</I>, which then calls <I>run()</I>), which starts the thread running.<P>

<I>ServerCha</I><I>t</I>'s <I>run()</I> method loops indefinitely, blocking on a read on the communication link. Whenever a character is received, the thread resumes and adds the incoming data to its text area by calling <I>insertText()</I>, automatically scheduling a repaint of the text area. Thus, incoming data is asynchronously displayed on the screen.<P>

Retrieving data from the server link is achieved by the <I>readln()</I> method, which performs a read on the socket's input stream and tests for the case in which there is no data to read. It returns any retrieved data as a Java string value.<P>

The <I>UserChat</I> class also extends from <I>TextArea</I>. Thus, user input is entered into this text area (one window), but data received from the server is displayed in <I>ServerCha</I><I>t</I>'s text area (another window). If you prefer a single window, you can refrain from making <I>ServerChat</I> extend <I>TextArea</I>, and modify <I>ServerChat</I> to do its <I>insertText()</I> on the <I>UserChat</I> window instead.<P>

<I>UserChat</I> has one primary method, <I>write()</I>. It converts a Java string to an equivalent stream of ASCII bytes, sending them to the server on the socket's output stream.<P>

The <I>Chat</I> class has a constructor and three primary methods in addition to a main method for running this applet as a stand-alone program from the command line. The three methods are <I>init()</I>, <I>makeConnection()</I>, and <I>handleEvent()</I>. <I>init()</I> establishes a connection with the chat server program on the Web server by calling <I>makeConnection()</I>. If it succeeds, it then starts the <I>ServerChat</I> thread.<P>

Java has built-in support for TCP/IP. This is implemented in the <I>Socket</I> and related classes. To establish a TCP/IP connection with a remote server, you create a <I>Socket</I> object. To send and receive data across that socket, you get the input and output stream handles of the socket. This is what <I>makeConnection()</I> does, along with providing a little user-friendly echoing of its progress along the way, including the remote and local IP addresses (proof that a connection was made).<P>

Finally, <I>handleEvent()</I> traps all GUI-related events that occur within the applet, then checks for a key-press event. When this occurs, the keystroke is inserted into the <I>UserChat</I> text area, and the keystroke is forwarded to the chat server program for rebroadcast to all other listening chat clients.<P>

<I>handleEvent()</I> must have some special code to work around a bug in the Java toolkit. The period character (&quot;.&quot;) does not generate a KEY_PRESS event when entered in a <I>TextArea</I>, like other characters do, so you have to watch for its KEY_RELEASE event instead. (Using KEY_PRESS is better for other characters, because characters seem to be converted to uppercase by the time KEY_RELEASE is generated.) A practical chat program will also handle backspacing (this one does not) and multiple-character events (the key held down).<P>

An alternative implementation would be to encapsulate the keystroke handling in the <I>UserChat</I> class. However, this has a disadvantage: The <I>UserChat</I> text area would always have to have focus to receive the input (an annoyance to users). If the applet processes the keystroke events instead, then it does not matter which subcomponent has focus, since the events will always bubble up to the applet that owns them.<P>

<h3><a name="0244_00c1">The Server Program<a name="0244_00c1"></h3><P>

Because Java has yet to be supported on most Web servers, we will provide a C++ implementation of a chat server program. (We used the gcc GNU C++ compiler.) The program must be running to be accessible; your Webmaster can explain options for having the program run all the time. Alternatively, you can simply log on with Telnet and start it by hand at any time. If you are lucky enough to have a dedicated Internet connection, you can install the server program on your own machine.<P>

It is interesting to compare the C++ program with the Java program. While they do different things, they are not too different in the functions they perform. However, the Java program is easier to read and understand.<P>

<h3><a name="0244_00c2">The Applet HTML<a name="0244_00c2"></h3><P>

To use the chat program, all you need to do is go to a Web page that hosts the client on a server running the chat server. <a href="9606l.htm#0244_00c3">Example 1</A> is the HTML code the Web page should contain. The <I>[Text Chat Applet Would Run Here]</I> is for those forlorn surfers who do not have a Java-capable browser. They will see this message, and dream about all the applets that they are missing. If you can run Java, you will see the chat applet with its two text area windows. For the browser to find the chat client's Java classes, the classes merely need be in the same directory on the server as the HTML page. Otherwise, you will have to include a <I>codebase</I> parameter in the applet tag specifying the directory or URL where the classes are to be found.<P>

The Java client and C++ server source code is available electronically; see &quot;Availability,&quot; page 3. Source code for a more advanced chat program,&quot;Whiteboard,&quot; is available at (http://www.digitalfocus.com/ ddj/code/). It uses the same principles to implement a graphical whiteboard that many people across the Internet can draw on simultaneously.<P>

<h4><B><a href="19960247.htm">Figure 1</A>: </B>Basic architecture of the chat system.</h4><P>

<h4><a name="0244_00c3"><a name="0244_00c3"><B>Example 1:</B> HTML code for a web page hosting the chat client.</h4><P>

<pre>&lt;html&gt;&lt;head&gt;&lt;title&gt;Chat Client&lt;/title&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ffffff&quot;&gt;

&lt;applet code=&quot;Chat.class&quot; width=600 height=400&gt;
&lt;h2&gt;[Text Chat Applet Would Run Here]&lt;/h2&gt;
&lt;/applet&gt;

&lt;/body&gt;&lt;/html&gt;</pre>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
