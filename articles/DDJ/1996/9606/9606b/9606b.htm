<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>JUN96: STL Iterators</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>STL Iterators<a name="01fa_00ab"><a name="01fa_00ab"><a name="01fa_00a9"><a name="01fa_0000"></h1><P>

<h2>Start with iterators to use STL effectively</h2><P>

<h3>Dan Zigmond</h3><P>

<P>
<i><a name="01fa_00aa"><a name="01fa_0000">Dan is a senior software engineer with Wink Communications. He can be reached at dan.Zigmond@wink.com.</i></p><hr><P>

The Standard Template Library (STL) developed by Alexander Stepanov and Meng Lee has been widely discussed since it became part of the proposed ANSI/ISO C++ standard. With compiler vendors lagging behind standards committees, however, many programmers are only now beginning to use STL in day-to-day programming tasks.<P>

In this article, I'll explore STL iterators. In future articles, I'll examine STL generic algorithms and go inside the standard STL implementation from HP, explaining some of the details of how generic algorithms and data structures can be specialized using iterator tags and adapters. <P>

<h3><a name="01fa_00ac">Iterators<a name="01fa_00ac"></h3><P>

Before discussing iterators, I'll take a step back and look at C pointers, which form the basis of the iterator abstraction. <P>

When passing an array to a function in C, you usually pass a pointer. Using this pointer (and some information about the size), you can do anything you want with the array: Traverse it in order, pick out an arbitrary element in the middle, copy it, and even destroy it. <a href="9606b.htm#01fa_00b7">Example 1(a)</A>, for instance, is a function that finds the first occurrence of a given character in an array of characters using only pointers to the beginning and end of the array (assuming you don't have <I>strchr</I> handy). <P>

Pointers are used as the interface to the data structure in <I>find_char</I>, which in this case is an array of characters. C++ lets you generalize this function to work with almost any sort of array by turning it into a template function. All you have to do is substitute a template parameter for all occurrences of the hard-coded type <I>cha</I><I>r</I>; see <a href="9606b.htm#01fa_00b7">Example 1(b)</A>. This generalized version of <I>find_char</I> works on virtually any array because it depends only on your ability to traverse an array using a pointer and compare the contents of the array with the inequality operator. In other words, if you have an array of objects of type <I>T</I>, <I>find_in_array</I> depends on your ability to traverse that array using pointers of type <I>T</I><I>*</I>. C guarantees this for C arrays.<P>

The difficulty comes when you decide that arrays are not the perfect internal representation for whatever you're trying to do, and you decide to move to, say, a linked-list structure. A typical implementation might look like <a href="9606b.htm#01fa_00b7">Example 1(c)</A>, which bears a resemblance to the original <I>find</I>, but the two are obviously incompatible. For simplicity, <I>list_nodes</I> are implemented as a simple <I>struct</I>, rather than a more complicated (and well encapsulated) class; other sorts of implementations would require some minor changes to the new <I>find_in_list</I>, but the structure would remain the same. <P>

There's something unsatisfying about <I>find_in_array</I> and <I>find_in_list</I>. At some level, they are the same function; if you were to describe the algorithms in plain English, you would probably use the same words for both. The only difference is in the interface to the underlying data structure. Simple pointers are the interface to C arrays, while pointers to <I>list_node</I> structures are the interface to the linked lists. Pointers are incremented with the ++ operator, while the list nodes are incremented using the idiom <I>node = node--&gt;next</I>. Pointers are dereferenced using the * operator, while the list nodes are dereferenced by extracting the item member. All this seems natural (almost all C and C++ linked lists work this way), yet completely arbitrary. Why can't we access lists and arrays the same way?<P>

<a href="9606b.htm#01fa_00b8">Example 2</A> is a slightly more complicated way of defining list nodes. Using this implementation, <I>list_nodes</I> act very much like C pointers, so you can now rewrite <I>find_in_list</I>. It's interesting that this <I>find_in_list</I> is virtually identical to the generalized <I>find_in_array</I>. The only difference is in the type of the pointer-like objects used to do the iteration through the data structure. In <I>find_in_array,</I> I use real pointers, while in <I>find_in_list,</I> I use the pointer-like <I>list_node</I> class.<P>

These type-only differences are exactly what templates are designed for. Just as I generalized <I>find_char</I> to <I>find_in_array</I> by substituting the template parameter <I>T</I> for the hard-coded type <I>char</I>, you can generalize both <I>find_in_array</I> and <I>find_in_list</I> to a truly generic <I>find</I> function by substituting a template parameter for the <I>list_node</I> class and <I>T</I><I>*</I> pointers; see <a href="9606b.htm#01fa_00b9">Example 3</A>. This raises the question: What is this new parameter (called <I>I</I><I> </I>in the example)? In STL, classes that meet the requirements of this parameter are called &quot;iterators&quot;--objects that function more or less like pointers. Like conventional pointers, iterators are used as the interface to a data structure so that you can define functions like <I>find</I> that will work with a variety of different data representations. Because the pointer semantics used by <I>find</I> (forward iteration using ++, dereference using *, and comparison with !=) can be implemented efficiently for both arrays and linked lists, the generalized <I>find</I> function is as efficient as the more specialized <I>find_in_array</I> and <I>find_in_list</I>; once you defined the pointer-like <I>list_node</I> template class, making a single <I>find</I> algorithm work for both arrays and lists costs nothing. Functions like <I>find</I> that use iterators to encapsulate efficient algorithms independent of the data representation are called &quot;generic algorithms.&quot;<P>

<h3><a name="01fa_00ad">Using Iterators<a name="01fa_00ad"></h3><P>

Iterators make a lot more sense when taken in context. If you haven't examined sample STL programs, I've included two that use iterators (and other parts of the standard libraries) to solve a basic problem: counting the number of words from standard input. The first program, wc (see <a href="9606b.htm#01fa_00be">Listing One</A>, simply stores all the words in a temporary vector, then counts them. (The program isn't very smart. A better implementation would count them on the fly and not store them at all.) The second program, uwc (see <a href="9606b.htm#01fa_00c0">Listing Two</A>), is a bit more sophisticated; it stores all the words in a sorted set before counting them so that duplicate words are discarded. <P>

The two programs look almost identical, even though they perform substantially different functions and use completely distinct internal data representations. This is because the interface to the <I>copy</I> algorithm is defined entirely with iterators. In fact, <I>copy</I> can be defined in a very similar way to the generic <I>find</I>; see <a href="9606b.htm#01fa_00ba">Example 4</A>. The only significant difference between <I>copy</I> and <I>find</I> is that <I>copy</I> deals conceptually with two types of iterators--one for the sequence it is copying from and the other for the sequence it is copying to. These two sequences need not be the same; they can be, but that is just a special case. To allow users to copy from, say, a linked list to a C array, you need to allow the two types of iterators to be distinct.<P>

In wc, you are copying from an <I>istream_iterator</I> to a vector. In uwc, you are copying from an <I>istream_iterator</I> to a set. The two have very different results: Copying into a vector in this way preserves the original word order, while copying into a set removes, duplicates, and sorts alphabetically. In both of these cases, the call to <I>copy</I> looks the same because its interface is defined entirely in terms of iterators. (The output line is also identical because both vectors and sets define a size member function.) The ability to abstract our algorithms from our data structures is the real power of the STL.<P>

The C++ library recognizes five major types of iterators. The reason to separate iterators into these types is that different algorithms ask different things of their data structures. The simple <I>find</I> algorithm, for example, makes only three demands of the class used as the iterator parameter: It must be incremented using ++, dereferenced using *, and compared using !=. Values in the underlying data structure are dereferenced only once, and the result of dereferencing is never used as an <I>lvalue</I>. In other words, you make a single pass through the structure, and read from it, but never write to it.<P>

The <I>copy</I> algorithm is slightly more complicated, with its two distinct types of iterators. While <I>SourceIterator</I> need only perform the same operations as the iterator used in <I>find</I>, <I>DestinationIterator</I> uses the * operator to establish somewhere to write to, not to read from. But it also makes a single pass through the structure, dereferencing each location exactly once.<P>

<h3><a name="01fa_00ae">Input and Output Iterators<a name="01fa_00ae"></h3><P>

The C++ standard library calls the first of these iterators (find-style) an &quot;input iterator.&quot; Technically, to be an input iterator, a type <I>X</I> must meet the following requirements:<P>
<ul>
<li><I>X</I> must have a constructor and destructor.</li>
<li><I>X</I> must have a copy constructor.</li>
<li>It must be possible to compare two objects of type <I>X</I> using the == operator and the != operator. The result of these comparisons must be convertible to <I>bool</I>.</li>
<li>It must be possible to dereference an object of type <I>X</I> using the * operator, but the resulting type need not be an <I>lvalue</I> type.</li>
<li>For objects <I>x</I> of type <I>X</I>, <I>++x</I> should return an object of type <I>X</I><I>&amp;</I> as long as <I>x</I> is dereferenceable. The result must be either dereferenceable or a value signifying past-the-end.</li>
<li>For objects <I>x</I> of type <I>X</I>, <I>x++</I> should return an object convertible to the type <I>const X</I><I>&amp;</I>. The expression should be equivalent to <I>{ X tmp = x; ++x; return tmp; }</I>. </li>
<li>For objects <I>x</I> of type <I>X</I>, it must be possible to dereference the object using <I>*</I><I>x++</I> if <I>x</I> is dereferenceable. </li>
</ul>
Any type that meets these criteria is an input iterator as far as the C++ library is concerned, regardless of how it meets the criteria. <P>

Iterators like <I>DestinationIterator</I> of the <I>copy</I> algorithm are called &quot;output iterators.&quot; A type <I>X</I> must satisfy a different set of requirements to be considered an output iterator:<P>
<ul>
<li><I>X</I> must have a constructor and destructor.</li>
<li><I>X</I> must have a copy constructor. </li>
<li>For objects <I>x</I> of type <I>X</I> and objects <I>t</I> of type <I>T</I> where <I>X</I> is an iterator on a data structure containing objects of type <I>T</I>, it must be possible to alter the data structure using <I>*</I><I>x = t</I> if <I>x</I> is dereferenceable and not past-the-end.</li>
<li>The ++ operator must be usable in both prefix and postfix fashion with objects of type <I>X</I>, as described for input iterators.</li>
<li>For objects <I>x</I> of type <I>X</I> and objects <I>t</I> of type <I>T</I> where <I>X</I> is an iterator on a data structure containing objects of type <I>T</I>, it must be possible to alter the data structure using <I>*</I><I>x++ = t</I> if <I>x</I> is dereferenceable and not past-the-end.</li>
</ul>
For both input and output iterators, the assumption is that only one pass will be made through the underlying structure. This makes it possible to create iterators for I/O streams. It allows you to write programs like wc and uwc that work with standard input and output without having to write any special code. You can copy to or from one of these streams just by creating a special kind of input or output iterator (called an <I>istream_iterator</I> or an <I>ostream_iterator</I>) and using the <I>copy</I> algorithm in the usual way.<P>

I/O streams demonstrate perfectly what input and output iterators are really for. An input iterator is for any sequence that, like an input stream, is intended to be read only once, in order. An output iterator is for any sequence that, like an output stream, is intended to be written to once and in consecutive order. The reason the C++ library defines different sorts of iterators is that different data structures can support only certain types of iterator operations efficiently and different algorithms rely on different sets of these operations. If a structure (like an input stream) can support an input iterator, you can use the <I>find</I> algorithm to search it. If a structure (like an output stream) can support an output iterator, you can use the <I>copy </I>algorithm to fill it.<P>

<h3><a name="01fa_00af">Forward Iterators<a name="01fa_00af"></h3><P>

If you think of the five types of iterators as forming a hierarchy, input/output iterators represent the bottom, the simplest of all the iterators. On the next level up are objects that effectively combine the properties of input and output iterators and remove the single-pass requirement. These are called &quot;forward iterators.&quot; More formally, a type <I>X</I> is a forward iterator if it meets all of the requirements for both input and output iterators, plus:<P>
<ul>
<li>It must be possible to assign one object of type <I>X</I> to the value of another using the = operator, with the result having the type <I>X</I><I>&amp;</I>. </li>
<li>For all objects <I>x1</I> and <I>x</I><I>2</I> of type <I>X, x1 == </I><I>x</I><I>2</I> implies <I>*</I><I>x1 == </I><I>*</I><I>x2</I> and <I>++x1 == ++</I><I>x</I><I>2</I>.</li>
</ul>
Together, these requirements allow multipass algorithms to work as expected with forward iterators. A good example of a data structure that supports a forward iterator well is a singly linked list. You can pass through a list as many times as you want without seeing different results (unlike some streams), and you can both read to and write from most lists. A good example of an algorithm that requires forward iterators is <I>remove</I>, which searches for all instances of a given object in a sequence and takes them out. <a href="9606b.htm#01fa_00bb">Example 5(a)</A>, taken from HP's original implementation of STL, presents this algorithm. The algorithm depends on <I>find</I> and <I>remove_copy</I> (which is like <I>remove</I> except that it stores the resulting sequence in another container, rather than overwriting the original). In essence, all <I>remove</I> does is search the sequence described by <I>first</I> and <I>last</I> for <I>value. </I>If there are no instances of <I>value </I>in the sequence, you're done. If there is at least one occurrence, you call <I>remove_copy</I> to take them out, putting the resulting<I> valu</I><I>e</I>-free sequence on top of the existing sequence. <a href="9606b.htm#01fa_00bb">Example 5(b)</A> is the code for <I>remove_copy</I>.<P>

<I>remove_copy</I> requires only input and output iterators, because it is always reading from one place and writing to another. <I>remove</I> itself requires a forward iterator, because it is essentially the special case of <I>remove_copy</I> in which both the source and destination are the same.<P>

<h3><a name="01fa_00b0">Bidirectional Iterators<a name="01fa_00b0"></h3><P>

The next step for iterators is to provide decrementing as well as incrementing, allowing for multipass, bidirectional algorithms. A type <I>X</I> is considered a bidirectional iterator if it meets all the requirements of a forward iterator as well as the following stipulations regarding the<I>-</I><I>-</I>operator:<P>
<ul>
<li>For objects <I>x</I> of type <I>X</I>,<I>-</I><I>-</I><I>x</I> should return an object of type <I>X</I><I>&amp;</I> as long as <I>x</I> is dereferenceable. The result must be either dereferenceable or a value signifying past-the-end.</li>
<li>For objects <I>x</I> of type <I>X</I>, <I>x</I><I>-</I><I>-</I>should return an object convertible to the type <I>const X</I><I>&amp;</I>. The expression should be equivalent to <I>{ X tmp = </I><I>x</I><I>; </I><I>-</I><I>-</I><I>x; return tmp; }</I>. </li>
<li>For objects <I>x</I> of type <I>X</I>, the expression <I>*</I><I>x</I><I>-</I><I>-</I>must return an object of type <I>X</I><I>&amp;</I> (that is, an <I>lvalue</I>) if <I>x</I> is dereferenceable. </li>
</ul>
An example of a data structure that supports bidirectional iterators (but nothing more) is a doubly linked list. There aren't many standard algorithms that require bidirectional iterators, but one is <I>reverse_</I><I> </I><I>copy</I>, which functions like <I>copy</I> except that the elements are copied from the source to the destination in reverse order; see <a href="9606b.htm#01fa_00bc">Example 6</A>.<P>

<h3><a name="01fa_00b1">Random-Access Iterators<a name="01fa_00b1"></h3><P>

At the top of the iterator hierarchy are random-access iterators. These add to bidirectional iterators the ability to jump to arbitrary locations with a structure in constant (not linear) time by introducing the following requirements:<P>
<ul>
<li>For all objects <I>x</I> of type <I>X</I>, you can add an arbitrary distance <I>d</I> to <I>x</I> using <I>x += d</I>, or subtract it from <I>x</I> using <I>x </I><I></I>--<I>= d</I>.</li>
<li>For all objects <I>x</I> of type <I>X</I> and a distance <I>d</I>, you can create a new, temporary object of type <I>X</I> by adding the distance using <I>x + d</I>, or subtracting the distance using <I>x -- d</I>.</li>
<li>You can compute the distance between two objects <I>x1</I> and <I>x2</I> of type <I>X</I> using <I>x1 -- x2</I>. </li>
<li>You can compare two objects <I>x1</I> and <I>x2</I> of type <I>X</I> using &lt;, &gt;, &gt;=, and &lt;=.</li>
</ul>
The classic example of a random-access iterator is a C pointer into an array. One major advantage of arrays is that they support random access. The various sorting algorithms included in the C++ standard libraries (<I>sort</I>, <I>stable_sort</I>, <I>partial_sort</I>, and <I>partial_sort_</I><I> </I><I>copy</I>) all require random-access iterators. Other data structures (such as the STL <I>list</I> class) that do not provide random access but may need to be sorted require their own special-purpose sorting routines.<P>

<h3><a name="01fa_00b2">Other Distinctions<a name="01fa_00b2"></h3><P>

Iterators can have other properties. One of the most basic distinctions among various types of iterators is whether one is dereferenceable or past-the-end. A dereferenceable iterator is one that can be dereferenced using the unary * operator. A past-the-end iterator, on the other hand, cannot be assumed to be dereferenceable. Rather than describing an element in some container, a past-the-end iterator is intended to bound the container itself by pointing just past the last value in it.<P>

Among dereferenceable iterators, there are both mutable and constant iterators. A mutable iterator can be assigned, as in <I>*</I><I>i = a</I>. Constant iterators cannot. In other words, the result of <I>*</I><I>i</I> is an <I>lvalue</I> for a mutable iterator, but not for a constant iterator.<P>

<h3><a name="01fa_00b3">Specialized Iterators<a name="01fa_00b3"></h3><P>

The basic sorts of iterators are useful, but there are times when more variations are needed. The C++ standard library provides several types of predefined, specialized iterators for other purposes.<P>

<h3><a name="01fa_00b4">Iterators for Streams<a name="01fa_00b4"></h3><P>

I have alluded to the two types of iterators used on C++ streams. The <I>istream_iterator</I> template class is used to read from input streams. When the iterator is constructed and every time the ++ operator is used, a new value is read from the stream using the  operator. The stream to read from is passed as an argument to the constructor of the iterator. Once the end of the stream is reached, the iterator becomes equal to a special, end-of-stream value. At this point, the results of dereferencing the iterator are undefined. An <I>istream_</I><I> </I><I>iterator</I> constructed with the default constructor is also set to this end-of-stream value, making it easy to test an <I>istream_</I><I> </I><I>iterator</I> before trying to dereference it. An <I>istream_iterator</I> is an input iterator.<P>

An <I>ostream_iterator</I> acts similarly, except that it writes values using the  operator each time it is assigned. Like all output iterators, an <I>ostream_iterator</I> cannot be read from. If you construct the iterator with both an <I>ostream</I> and <I>char</I><I>*</I>, the <I>char</I><I>*</I> will be written to the <I>ostream</I> after each new value is written. This is useful in delimiting output with spaces or new lines. For example, to copy a series of words from standard input to standard output and convert multiple spaces between them to a single space, you could use <I>copy (istream_iterato</I><I>r</I><I>&lt; string &gt;(cin), istream_</I><I> </I><I>iterato</I><I>r</I><I>&lt; string </I><I>&gt;</I><I>(), ostream_</I><I> </I><I>iterato</I><I>r</I><I>&lt; string </I><I>&gt;</I><I>(cout,' '</I><I>)</I><I>;.</I><P>

<h3><a name="01fa_00b5">Insert Iterators<a name="01fa_00b5"></h3><P>

When making a call like <I>cop</I><I>y</I><I>(</I><I>first, last, result)</I>, you normally expect the sequence starting with <I>result</I> and continuing to <I>result + last --first</I> to be overwritten. Sometimes, however, you want to insert a new sequence into another sequence, without having to do a series of copies into a new structure. Insert iterators facilitate this.<P>

When you increment an insert iterator, a new element is inserted in the sequence. The iterator is set to this new element, rather than the element that would have been next in the sequence. There are three types of insert iterators, and each one inserts the new element in a different place: <I>front_</I><I> </I><I>insert_iterator</I> adds it to the beginning of the container; <I>back_insert_iterator</I> adds it to the end of the container; and <I>insert_iterator</I> adds the new element where the iterator points to a container.<P>

Rather than having to create instances of these classes explicitly using constructors, the library provides template functions to create them. The functions <I>front_</I><I> </I><I>inserter</I> and <I>back_inserter</I> take the container and return a <I>front_insert_iterator</I> and a <I>back_insert_iterator</I>, respectively, on that container. For example, given a container <I>x</I>, <I>front_inserte</I><I>r</I><I>(x)</I> returns an iterator that will insert new elements at the beginning of <I>x</I>.<P>

For inserting in the middle of a structure, <I>inserter</I> takes two arguments: the container itself, and an iterator into the container describing where to insert. For example, <I>cop</I><I>y</I><I>(</I><I>front, back, inserte</I><I>r</I><I>(x,resul</I><I>t</I><I>))</I> will take the sequence from <I>front</I><I> </I>to <I>bac</I><I>k</I><I> </I>and insert it into container <I>x</I> starting at <I>result</I>.<P>

<h3><a name="01fa_00b6">Reverse Iterators<a name="01fa_00b6"></h3><P>

Sometimes you want to move backwards through a container. You can always do this explicitly using the<I>-</I><I>-</I>operator (as long as you're using a bidirectional or random access iterator), but this requires changing all of the code that traverses the container in order to change directions. An easier way is simply to create a &quot;reverse iterator&quot;--one that goes &quot;backwards&quot; with each ++ and &quot;forwards&quot; with each<I>--</I>. The C++ library provides two template classes of reverse iterators, <I>reverse_</I><I> </I><I>bidirectional_</I><I> </I><I>iterator</I> and <I>reverse_iterator</I>. The latter assumes that you are reversing a random-access iterator.<P>

The STL containers that can support reverse iterators have special member functions to create them. <I>rbegin</I>, for example, returns a reverse iterator pointing to the end of a sequence (which is the beginning if you want to traverse the sequence in reverse); <I>rend</I> returns a &quot;past-the-end&quot; reverse iterator (which actually points just before the first element). To create a for loop that goes all the way through some vector <I>v</I> in reverse order, you can use <I>for (r = v.rbegin(); r != v.rend(); ++r) {}</I>.<P>

In the end, all these iterators are only useful as the interface for manipulating our data structures with generic algorithms. I'll explore this algorithm more in the next article in this series.<P>

<h4><a name="01fa_00b7"><B>Example 1:</B> (a) Function that finds the first occurrence of a given character in an array of characters using only pointers to the beginning and end of the array; (b) generalizing this function to work with almost any sort of array by turning it into a template function; (c) this resembles, yet is incompatible with, (a).<a name="01fa_00b7"></h4><P>

<pre>(a)
char* find_char(char* first, char* last, const char&amp; value)
{
  while (first != last &amp;&amp; *first != value) ++first;
  return first;
}

(b)
template&lt; class T &gt;
T* find_in_array(T* first, T* last, const T&amp; value)
{
  while (first != last &amp;&amp; *first != value) ++first;
  return first;
}

(c)
template &lt;class T&gt;
struct list_node
{
  list_node* next;
  T          item;
};
template &lt;class T&gt;
T find_in_list(list_node&lt;T&gt;* first, list_node&lt;T&gt;* last, const T&amp;<P>
              value)
{
  while (first != last &amp;&amp; first-&gt;item != value) first = first-
     &gt;next;
  return first;
}</pre>

<h4><a name="01fa_00b8"><B>Example 2:</B> Defining list nodes.<a name="01fa_00b8"></h4><P>

<pre>template &lt;class T&gt;
class list_node {

public:
  list_node() : next(0) {}
  list_node(list_node&lt; T &gt;&amp; ln) : next(ln.next), item(ln.item) 
      {}
  ~list_node() { delete next; }
  list_node&lt;T&gt;&amp; operator=(const list_node&lt;T&gt;&amp; ln) {
    if (ln != this) {
      delete next;
      next = ln.next;
      item = ln.item;
    }
    return *this;
  }
  bool operator==(list_node&lt;T&gt; ln) { return (item==ln.item &amp;&amp;
                                            next==ln.next); }
  bool operator!=(list_node&lt;T&gt; ln) { return (item!=ln.item ||
                                            next!=ln.next); }

  T&amp; operator*() { return item; }

  list_node&lt;T&gt; operator++() { return *(next = next-&gt;next); }
  list_node&lt;T&gt; operator++(int) { list_node&lt;T&gt; tmp = *this;
                                 ++*this; return tmp; }

private:
  list_node&lt;T&gt;* next;
  T              item;
};

template&lt; class T &gt;
list_node&lt; T &gt; find_in_list(list_node&lt; T &gt; first, list_node&lt; T &gt; last,
                            const T&amp; value)
{
  while (first != last &amp;&amp; *first != value) ++first;
  return first;
}</pre>

<h4><a name="01fa_00b9"><B>Example 3:</B> Substituting a template parameter for the list_node class and T* <I>pointers</I>.<a name="01fa_00b9"></h4><P>

<pre>template&lt; class I, class T &gt;
I find(I first, I last, const T&amp; <P>
      value)
{
  while (first != last &amp;&amp; *first != <P>
        value) ++first;
  return first;
}</pre>

<h4><a name="01fa_00ba"><B>Example 4:</B> copy can be defined in a way very similar to the generic find.<a name="01fa_00ba"></h4><P>

<pre>     template &lt;class SourceIterator, class DestinationIterator&gt;
     DestinationIterator copy(SourceIterator first, SourceIterator last,
                             DestinationIterator result) {
         while (first != last) *result++ = *first++;
         return result;
     }</pre>

<h4><a name="01fa_00bb"><a name="01fa_00bb"><B>Example 5:</B> (a) The HP remove algorithm; (b) remove_copy.</h4><P>

<pre>(a)
template &lt;class ForwardIterator, class T&gt;
ForwardIterator remove(ForwardIterator first, ForwardIterator last, const T&amp;<P>
                      value) {
    first = find(first, last, value);
    ForwardIterator next = first;
    return first == last ? first : remove_copy(++next, last, first, value);
}

(b)
template &lt;class InputIterator, class OutputIterator, class T&gt;
OutputIterator remove_copy(InputIterator first, InputIterator
                          last,OutputIterator<P>
                          result, const T&amp; value) {
    while (first != last) {
      if (*first != value) *result++ = *first;
      ++first;
    }
    return result;
}</pre>

<h4><a name="01fa_00bc"><a name="01fa_00bc"><B>Example 6:</B> reverse_copy.</h4><P>

<pre>     template &lt;class BidirectionalIterator, class OutputIterator&gt;
     OutputIterator reverse_copy(BidirectionalIterator first,
                                BidirectionalIterator last,
                                OutputIterator result) {
         while (first != last) *result++ = *--last;
         return result;
     }</pre>

<P>

<h4><a name="01fa_00bd"><a name="01fa_00be">Listing One<a name="01fa_00be"></h4><pre>
#include&lt;string.h&gt;
#include&lt;vector.h&gt;
#include&lt;iostream.h&gt;
void main()
{
  if (argc != 1) throw(&quot;usage: wc\n&quot;);
  vector&lt; string, less&lt; string &gt; &gt; words;
  copy(istream_iterator&lt; string &gt;(cin),
       istream_iterator&lt; string &gt;(),
       inserter(words, words.end()));
  cout &lt;&lt; &quot;Number of words: &quot; &lt;&lt; words.size() &lt;&lt; endl;
}
</pre>
<h4><a name="01fa_00c0"><a name="01fa_00c0">Listing Two</h4><pre>
#include&lt;string.h&gt;
#include&lt;set.h&gt;
#include&lt;iostream.h&gt;

void main() 
{
  if (argc != 1) throw(&quot;usage: uwc\n&quot;);

  set&lt; string, less&lt; string &gt; &gt; words;
  copy(istream_iterator&lt; string &gt;(cin),
       istream_iterator&lt; string &gt;(),
       inserter(words, words.end()));
  cout &lt;&lt; &quot;Number of unique words: &quot; &lt;&lt; words.size() &lt;&lt; endl;
}
</pre>
<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
