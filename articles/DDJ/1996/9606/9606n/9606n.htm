<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>JUN96: UNDOCUMENTED CORNER</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>UNDOCUMENTED CORNER<a name="024a_00c3"><a name="024a_00c3"><a name="024a_00c1"><a name="024a_0000"></h1><P>

<h2>Customizing MFC</h2><P>

<h3>Scot Wingo and George Shepherd</h3><P>

<P>
<i><a name="024a_00c2"><a name="024a_0000">Scot is a cofounder of Stingray Software, an MFC extension company. He can be contacted at ScotWi@aol.com. George is a senior computer scientist with DevelopMentor where he develops and delivers courseware for developers using MFC and OLE. George can be contacted at 70023.1000@compuserve.com. They are the coauthors of MFC Internals (Addison-Wesley, 1996).</i></p><hr><P>

Customization is one of the best uses of undocumented MFC information. In our April column, for instance, we examined the undocumented MFC print-preview class <I>CPreviewView</I>. While <I>CPreviewVie</I><I>w</I>'s default print-preview support is a good start for most applications, you'll have to customize it for enhanced support. This month, we show you how to customize the MFC print-preview and print-status dialog. Along the way we'll point out some techniques for working with undocumented MFC classes that weren't really designed to be customized. To its credit, Microsoft does outline print-preview customization in a tech note; as you'll see, however, it's not the simple three-step task Microsoft describes.<P>

<h3><a name="024a_00c4">A Generic <I>CPreviewView</I> Derivative<a name="024a_00c4"></h3><P>

By customizing the appearance of <I>CPreviewView</I>, you can create and plug in a generic <I>CPreviewView</I> derivative that serves as a jumping-off point for print-preview customization. Since <I>CPreviewView</I> is an undocumented class, however, you have to create a derivative by hand instead of using a Wizard or Expert. Our <I>CPreviewView</I> derivative, called <I>CDDJPrintPrevie</I><I>w</I> (see Listings <a href="9606n.htm#024a_00d1">One</A> and <a href="9606n.htm#024a_00d3">Two</A>), is a plain-vanilla derivative that overrides <I>CPreviewView::</I><I> </I><I>OnDraw()</I> with <I>CDDJPrintPreview::OnDraw()</I>. In the overriding <I>CDDJPrintPreview::OnDraw()</I>, there's a TRACE statement and a call to the overridden <I>CPreviewView::OnDraw()</I>. The TRACE statement lets you know that your application is using the new print-preview class.<P>

<h3><a name="024a_00c5">Plugging in <I>CDDJPrintPreview</I><a name="024a_00c5"></h3><P>

Print previewing starts when the user selects File/Print Preview, thus invoking the <I>CView</I> member function <I>OnFilePrintPreview(),</I> which is in MFC\SRC\ VIEWPREV.CPP. <I>OnFilePrintPreview()</I> does some error checking, then calls <I>DoPrintPreview()</I>, passing along <I>CRuntimeClass</I> information for the print-preview class.<P>

To make MFC use a view other than <I>CPreviewView</I>, override <I>OnFilePrintPreview()</I> in your application's view. Next, copy MFC's <I>CView::OnFilePrintPreview()</I> code into your <I>OnFilePrintPreview()</I> and change the <I>DoPrintPreview()</I> call to use the <I>CPreviewView</I> derivative; see <a href="9606n.htm#024a_00ca">Examples 1(a) and 1(b)</A>.<P>

Finally, change the message map in your application's view to call your view's <I>OnFilePrintPreview()</I> instead of <I>CView:: OnFilePrintPreview()</I>. After this step, you can compile and run your application and the new print-preview view will be displayed instead of <I>CPreviewView</I> (double check with your debugger, or by looking for TRACE output).<P>

In any <I>CPreviewView</I> derivative, you will need to customize the way the view looks by changing how <I>OnDraw()</I> works. The best way to do this is to copy the <I>CPreviewView::OnDraw()</I> code from MFC into your <I>CPreviewView</I> derivative's <I>OnDraw()</I> routine.<P>

Unfortunately there's a snag: <I>OnDraw()</I> calls <I>CView::OnPrint(), </I>which is a protected <I>CView</I> member function, through a <I>CView</I> pointer, <I>m_pPrintView</I>. Your <I>CPreviewView</I> derivative cannot call this protected <I>CView</I> member function, but <I>CPreviewView</I> can call <I>CView::OnPrint(),</I> since it is a &quot;friend&quot; of <I>CView</I>. There are several ways around the problem. You could add your <I>CPreviewView</I> derivative to the list of MFC's <I>CView</I> friends by changing the MFC source code and rebuilding your MFC library. (We discourage tweaking MFC source code since there are numerous version problems, build issues, and the like.) <P>

To get around this particular problem, we recommend the following steps:<P>

<ol>1.     Override <I>CView::OnPrint()</I> in your application's view. Instead of making it protected, make it a public member function. You can also keep it protected, then make <I>CDDJPrintPreview</I> a friend--the choice is up to you.However, we also discourage friends because they usually indicate a class design problem. If a friend class needs to get to a protected/private member, others most likely will too, so it is more flexible to make the member public.</ol><P>

<ol>2.     Copy the code from <I>CView::OnPrint()</I> into the override (this code is in MFC\SRC\VIEWCORE.CPP).</ol><P>

<ol>3.     Make sure that the new <I>OnPrint()</I> is called instead of <I>CView::OnPrint()</I>. <I>OnDraw()</I> calls <I>OnPrint()</I> through a <I>CView</I> pointer: <I>m_pPrintView-&gt;OnPrint(m_pPreviewDC, m_pPreviewInfo);</I>. </ol><P>

This will always call <I>CView::OnPrint()</I> instead of your application view's <I>OnPrint()</I>. To fix the problem, you have to typecast (or &quot;up-cast&quot;) the <I>CView</I> into a <I>CDDJPrintPreview</I>. Whenever you do this, it's wise to ASSERT that you are performing a safe typecast; see <a href="9606n.htm#024a_00cb">Example 2</A>.<P>

With this final <I>OnDraw()</I> adjustment, you have a fully customizable <I>CPreviewView</I> derivative. Depending on how much you want to customize your application's print preview, you will probably have to override or substitute some other <I>CPreviewView</I> member functions.<P>

For example, if you want to change the number of pages displayed by print preview from two to four, you'll need to change the <I>CalcPageDisplaySize()</I> member function, since it makes calculations that are hard coded for a two-page display. Since <I>CalcPageDisplaySize()</I> is not a virtual function, you can't just override it. Instead, you have to override its caller, <I>PositionPage()</I>, which is virtual, then copy the MFC code into your <I>PositionPage()</I> override, and change the function to call your own version of <I>CalcPageDisplaySize()</I> instead of <I>CPreviewView::CalcPageDisplaySize()</I>.<P>

<h3><a name="024a_00c6">The Notepad Example <a name="024a_00c6"></h3><P>

We thought it would be interesting to customize our generic customizable print preview to display something other than a white piece of paper. For example, what if your application prints checks, labels, or forms that don't look like the default print preview? Consequently, we decided to create three-hole punched, lined notebook paper. <P>

The first step is to create red and blue pens for drawing the vertical and horizontal lines; see <a href="9606n.htm#024a_00cc">Example 3(a)</A>. Since <I>OnDraw()</I> already creates a black pen to draw the three-dimensional page outlines (called <I>rectPen</I>), there's no need to create a pen for drawing the three holes. The best point in the existing <I>OnDraw()</I> for the creation of the new pens is at the top, where the other pens are created. <a href="9606n.htm#024a_00d5">Listing Three</A> implements the complete notebook paper <I>OnDraw()</I> routine.<P>

Once the pens are created, the next step is to draw the lines and holes. <I>OnDraw()</I> has a <I>for</I> loop that iterates through each page and draws it. New per-page drawing logic should be added to this loop after the <I>FillRect</I> call that paints the page white. <P>

In the page-drawing <I>for</I> loop, the variable <I>pRect</I> contains the current print-preview page's rectangle. You can use this (with some small offsets so that you don't draw over the page's border) in your own drawing. <a href="9606n.htm#024a_00cc">Example 3(b)</A> is code for drawing the red line.<P>

After selecting the pen, we set the x-coordinate of the red line to 1/8 of the page size on the left side of the page. Once x is calculated, draw the red line from the top of the page to the bottom of the page.<P>

The algorithm for drawing the blue lines is trickier, since there are 30 lines per page. <a href="9606n.htm#024a_00cd">Example 4</A> is what we came up with. <I>nBlueCurrentY</I> starts at 1/8 of the page from the top. After the initial line, each subsequent line is 1/30 of the remaining 7/8 page away from the previous blue line (that's the <I>nBlueYIncrement</I> calculation). Once the starting <I>y</I> and <I>y</I> increment are calculated, a <I>for</I> loop draws the lines down the page.<P>

After the blue lines, it's time to draw the holes. Since there are only three, you can take the brute-force approach and draw each hole individually instead of using a loop; see <a href="9606n.htm#024a_00d5">Listing Three</A>. After selecting a black pen with a black brush, we calculate the left- and right-hole rectangle, which will be the same for each of the three holes. We reused the already-calculated <I>nBlueYIncrement</I> as the diameter of the hole in our print-preview algorithm. The first hole is drawn 1/8 down the page; the second hole, the 1/2 page mark; and the last hole is 1/8 of the page from the bottom of the page.<P>

<a href="1996024c.htm">Figure 1</A> shows this algorithm in action. <a href="9606n.htm#024a_00d5">Listing Three</A> presents the complete customized <I>OnDraw()</I> routine. Code we added is marked with <I>//DDJ -- New </I>and <I>//DDJ -- End new</I>.<P>

<h3><a name="024a_00c7">Undocumented Printing-Status Dialog<a name="024a_00c7"></h3><P>

When you print a view through MFC, a standard printing-status dialog displays the name of the document, printer name, and current page being printed. <a href="9606d5f2.gif">Figure 2</A> shows the default MFC printing-status dialog. Admittedly, this is a dull dialog. Let's look at how it is implemented in MFC and see how to customize the printing-status dialog.<P>

The printing-status dialog is implemented by the undocumented class <I>CPrintingDialog</I>. The definition of <I>CPrintingDialog</I> is embedded in the MFC source file VIEWPRNT.CPP.<P>

<a href="9606n.htm#024a_00d7">Listing Four</A> includes the class declaration. From this listing, you can see that <I>CPrintingDialog</I> is a <I>CDialog</I> derivative that uses the resource ID AFX_ IDD_PRINTDLG. You can view this resource by opening FC\INCLUDE\ MFCDLL.RC.<P>

The implementation of <I>CPrintingDialog</I> doesn't do much. The constructor calls <I>CDialog::Create()</I> to create the modeless dialog. <I>CView</I> does all of the <I>CPrintingDialog</I> creation and updating in <I>OnFilePrint()</I>. <a href="9606n.htm#024a_00ce">Example 5(a)</A> creates the <I>CPrintingDialog</I>.<P>

After creating a local <I>CPrintingDialog</I> variable on the stack called <I>dlgPrintStatus</I>, <I>OnFilePrint()</I> sets the document, printer, and port name. The <I>AfxFormatString1()</I> call is an internal MFC convenience function that performs a <I>sprintf</I>-like operation. After setting the text in the dialog, <I>OnFilePrint()</I> shows and displays the dialog.<P>

Next, <I>CView::OnFilePrint()</I> has a loop that iterates through the pages of a document. <a href="9606n.htm#024a_00ce">Example 5(b)</A> contains the logic that updates the <I>CPrintingDialog</I> page number. Finally, when MFC is done printing, it cleans up by destroying the <I>CPrintingDialog</I> using <I>dlgPrintStatus.DestroyWindow();</I>.<P>

<h3><a name="024a_00c8">Customizing the MFC Printing-Status Dialog<a name="024a_00c8"></h3><P>

You can now customize the MFC printing-status dialog. For example, we'll add a progress bar indicating the percentage complete to the user. There are five steps to creating a custom MFC print-status dialog:<P>

<ol>1.     Create a dialog resource with a progress bar in it. We copied the <I>CPrintingDialog</I> resource and added a progress control with IDC_PROGRESS.</ol><P>

<ol>2.     Create a <I>CDialog</I> derivative that uses the resource created in step 1.</ol><P>

<ol>3.     Add an <I>OnFilePrint()</I> override to your application's <I>CView</I> derivative and copy MFC's <I>CView::OnFilePrint()</I> code into your override. Delete all references to <I>CPrintingDialog</I> so you do not have to copy the class out of MFC. (<I>CView::OnFilePrint()</I> is in VIEWPRNT.CPP.)</ol><P>

Several complications are caused by copying this code out of its usual MFC source home. First, <I>OnFilePrint()</I> calls <I>AfxGetFileTitle()</I> and other implementation-specific MFC routines. To get over this hurdle, include the MFC implementation file MFC\SRC\AFXIMPL.H. This file requires several other internal MFC OLE header files. To get around this problem, wrap the <I>include</I> in <I>ifdef</I>/<I>unde</I><I>f</I>s to turn off the need for the extra OLE header files. For example:<P>

<pre>#define _AFX_NO_OLE_SUPPORT
#include &quot;..\src\afximpl.h&quot;
#undef _AFX_NO_OLE_SUPPORT</pre>

The second problem is that <I>OnPrint()</I> uses the undocumented callback function <I>_AfxAbortProc()</I> to cancel a print job. The easiest solution would be to declare the function <I>extern</I> and call the version of the function that lives in MFC. Unfortunately, <I>_AfxAbortProc()</I> is not exported in the MFC DLLs, so you have to be more creative. Another potential solution would be to copy the routine from MFC into your code. However, this doesn't work because <I>_AfxAbortProc()</I> accesses a private MFC global (also not exported in the DLL), called <I>_afxWinState,</I> to set and check a Boolean value that is set to TRUE when the user presses the <I>CPrintingDialog</I> cancel button.<P>

To get around this, you need to get rid of the <I>afxWinState</I> dependence:<P>

<ol>a.     In your view source file, duplicate the <I>_AfxAbortProc()</I> callback function and give it a new name. We renamed it  <I>_DDJAbortProc()</I>.</ol><P>

<ol>b.     Create a global BOOL variable to act as the replacement for the <I>_afxWinState </I>variable.</ol><P>

<ol>c.     Replace all instances of <I>_afxWinState.m_bUserAbort </I>with your new global variable.</ol><P>

<ol>d.     In your printing-dialog constructor, be sure to initialize this variable to FALSE.</ol><P>

<ol>e.     Override <I>CDialog::OnCancel()</I> to set this variable to TRUE.     </ol><P>

<ol>f.     Change all of the <I>_AfxAbortProc()</I> references in <I>OnPrint()</I> to use the new abort procedure. </ol><P>

Now that all of the <I>OnFilePrint()</I> issues are resolved, we can continue the customization.<P>

<ol>4.     Change your application's view message map to use the overridden <I>OnFilePrint()</I> instead of <I>CView::OnFilePrint()</I>.</ol><P>

<ol>5.     Change <I>OnFilePrint()</I> to use the <I>CDialog</I> derivative created in step 2 instead of <I>CPrintingDialog</I>. <a href="9606n.htm#024a_00cf">Example 6(a)</A> illustrates how to initialize the dialog with the progress bar, while <a href="9606n.htm#024a_00cf">Example 6(b)</A> shows how to update the progress bar dialog along with the page number.</ol><P>

<h3><a name="024a_00c9">Conclusion<a name="024a_00c9"></h3><P>

That's it. A few easy steps (well, step 3 was tricky) and you have created your own customized printing-status dialog! The customized printing-status dialog (see <a href="19960250.htm">Figure3</A>) is also part of the sample available electronically (see &quot;Availability,&quot; page 3). In our next column, we'll take a look at some undocumented areas of MFC's OLE support.<P>

<h2>Learn from Microsoft's Mistakes</h2><P>

There's an important lesson on MFC class design to be learned by customizing MFC's print preview. When designing an MFC class, be sure to make virtual any member functions that could ever conceivably be customized. With this approach, you dramatically increase the possibilities for your class users. Assume that fellow developers will try to override behavior you never thought they'd be interested in. <P>

Also, break long segments of implementation-specific code into fine-grained member functions. For example, if <I>CPreviewView::OnDra</I><I>w</I><I>()</I> made several function calls like: <I>PrepareView()</I>, <I>DrawOutline()</I>, <I>DrawPages()</I>, <I>CleanView()</I>, and the like, it would be easy to change the way a page is drawn by overriding <I>DrawPages(),</I> instead of having to override all of <I>OnDraw()</I> and copy the code into your derivative.<P>

Another common problem in MFC involves embedded classes. Embedding a class makes it hard to customize (see <a href="9606n.htm#024a_00ce">Example 5</A>). <I>CDocument</I> has a good solution to this problem. In older versions of MFC, <I>CDocument</I> had an embedded <I>CFile</I> object, so making <I>CDocument</I> use a <I>CFile</I> derivative instead of <I>CFile</I> was very difficult. In MFC 4.0, Microsoft changed <I>CDocument</I> so that it calls the virtual function <I>GetFile()</I>. The default implementation of this creates a <I>CFile</I> (really <I>CMirrorFile</I>, as we exposed in the last article) and returns it. To customize the <I>CFile</I> used by <I>CDocument</I>, all the <I>CDocument</I> user has to do is override <I>GetFile()</I> to return a <I>CFile</I> derivative. Wouldn't it be nice if <I>CView</I> had a <I>GetPrintingDialog()</I> routine that let you customize the printing dialog?<P>

--S.W. &amp; G.S.<P>

<h4><B><a href="1996024e.htm">Figure 1</A>: </B>Customized notebook paper example.</h4><P>

<h4><B><a href="1996024f.htm">Figure 2</A>: </B>Default MFC printing-status dialog.</h4><P>

<h4><B><a href="19960250.htm">Figure 3</A>: </B>Customized printing-status dialog.</h4><P>

<h4><a name="024a_00ca"><B>Example 1:</B> (a) Copying MFC's CView::OnFilePrintPreview() into your OnFilePrintPreview(); (b) change the DoPrintPreview() call to use the CPreviewView derivative.<a name="024a_00ca"></h4><P>

<pre>(a)
DoPrintPreview(AFX_IDD_PREVIEW_TOOLBAR, this,
        RUNTIME_CLASS(CPreviewView), pState));

(b)
DoPrintPreview(AFX_IDD_PREVIEW_TOOLBAR, this,
        RUNTIME_CLASS(CDDJPrintPreview), pState));</pre>

<h4><a name="024a_00cb"><B>Example 2:</B> Using ASSERT for a safe typecast.<a name="024a_00cb"></h4><P>

<pre>CDdjsampView * pMyView;
ASSERT(m_pPrintView-&gt;IsKindOf(RUNTIME_CLASS(CDdjsampView)));
pMyView = (CDdjsampView *)m_pPrintView;
pMyView-&gt;OnPrint(m_pPreviewDC,m_pPreviewInfo);</pre>

<h4><a name="024a_00cc"><B>Example 3:</B> (a) Creating red and blue pens for drawing the vertical and horizontal lines; (b) drawing the red line.<a name="024a_00cc"></h4><P>

<pre>(a)
CPen redPen, bluePen;<P>
redPen.CreatePen(PS_SOLID,2,RGB(255,0,0)); //thickness 2 pixels<P>
bluePen.CreatePen(PS_SOLID,1,RGB(0,0,255)); //thickness 1 pixel<P>


(b)
pDC-&gt;SelectObject(&amp;redPen);<P>
int nRedX = pRect-&gt;left + pRect-&gt;Width()/8; <P>
pDC-&gt;MoveTo(nRedX,pRect-&gt;top + 2);<P>
pDC-&gt;LineTo(nRedX,pRect-&gt;bottom - 2);</pre>

<h4><a name="024a_00cd"><a name="024a_00cd"><B>Example 4:</B> Algorithm for drawing the blue lines.</h4><P>

<pre>int nBlueCurrentY = pRect-&gt;top + pRect-&gt;Height()/8;
int nBlueYIncrement = (pRect-&gt;bottom - nBlueCurrentY)/30;
pDC-&gt;SelectObject(&amp;bluePen);
for (int nBlueCount = 0; nBlueCount &lt; 30; nBlueCount++){
  pDC-&gt;MoveTo(pRect-&gt;left + 3,nBlueCurrentY);
  pDC-&gt;LineTo(pRect-&gt;right - 2,nBlueCurrentY);
  nBlueCurrentY += nBlueYIncrement;
}//end blue line loop.</pre>

<h4><a name="024a_00ce"><B>Example 5:</B> (a) Creating CPrintingDialog; (b) logic that updates the CPrintingDialog page number.<a name="024a_00ce"></h4><P>

<pre>(a)
CPrintingDialog dlgPrintStatus(this);<P>
CString strTemp;<P>
dlgPrintStatus.SetDlgItemText(AFX_IDC_PRINT_DOCNAME, strTitle);<P>
dlgPrintStatus.SetDlgItemText(AFX_IDC_PRINT_PRINTERNAME,<P>
                printInfo.m_pPD-&gt;GetDeviceName());<P>
AfxFormatString1(strTemp, nFormatID, strPortName);<P>
dlgPrintStatus.SetDlgItemText(AFX_IDC_PRINT_PORTNAME, strTemp);<P>
dlgPrintStatus.ShowWindow(SW_SHOW);<P>
dlgPrintStatus.UpdateWindow();<P>


(b)
// write current page<P>
TCHAR szBuf[80];<P>
<P>
wsprintf(szBuf, strTemp, printInfo.m_nCurPage);<P>
dlgPrintStatus.SetDlgItemText(AFX_IDC_PRINT_PAGENUM, szBuf);</pre>

<h4><a name="024a_00cf"><B>Example 6:</B> (a) Initializing custom dialog with progress bar; (b) updating the progress bar.<a name="024a_00cf"></h4><P>

<pre>(a)
CDDJPrintDialog ddjPrintDlg(this);<P>
CString strTemp;<P>
//Now initialize the progress control<P>
CProgressCtrl * pProgress =<P>
  (CProgressCtrl*)ddjPrintDlg.GetDlgItem(IDC_PROGRESS);<P>
ASSERT(pProgress != NULL);<P>
<P>
pProgress-&gt;SetPos(0); //start at 0<P>
pProgress-&gt;SetRange(0,printInfo.GetMaxPage());//stop at max<P>
pProgress-&gt;SetStep(1); //increment by 1 (not 10)<P>


(b)
TCHAR szBuf[80];<P>
wsprintf(szBuf, strTemp, printInfo.m_nCurPage);<P>
ddjPrintDlg.SetDlgItemText(AFX_IDC_PRINT_PAGENUM,szBuf); <P>
pProgress-&gt;StepIt();</pre>

<P>

<h4><a name="024a_00d0"><a name="024a_00d1">Listing One<a name="024a_00d1"></h4><pre>
class CDDJPrintPreview : public CPreviewView
{
// Construction
protected:
    // protected constructor used by dynamic creation
    CDDJPrintPreview(); 
    DECLARE_DYNCREATE(CDDJPrintPreview)
// Attributes - none
// Operations - none
// Overrides
protected:
    virtual void OnDraw(CDC* pDC); // overridden to draw this view
// Implementation
protected:
    virtual ~CDDJPrintPreview();
#ifdef _DEBUG
    virtual void AssertValid() const;
    virtual void Dump(CDumpContext&amp; dc) const;
#endif
protected:
    //Message map in case you want to handle any user
    //interaction.
    DECLARE_MESSAGE_MAP()
};
</pre>
<h4><a name="024a_00d2"><a name="024a_00d3">Listing Two<a name="024a_00d3"></h4><pre>
IMPLEMENT_DYNCREATE(CDDJPrintPreview, CPreviewView)

CDDJPrintPreview::CDDJPrintPreview()
{
//Do any custom print preview initialization here.    
}
CDDJPrintPreview::~CDDJPrintPreview()
{ //Destroy any custom print preview stuff here.
}
BEGIN_MESSAGE_MAP(CDDJPrintPreview, CPreviewView)

//Insert any custom print preview message handlers here.
END_MESSAGE_MAP()

//OnDraw override just calls TRACE and overriden OnDraw().
void CDDJPrintPreview::OnDraw(CDC* pDC)
{
    TRACE0(&quot;Called CDDJPrintPreview::OnDraw()!!&quot;);
    CPreviewView::OnDraw(pDC);
}
#ifdef _DEBUG
void CDDJPrintPreview::AssertValid() const
{
//Add any checks for customized print preview members here.
    CView::AssertValid();
}
void CDDJPrintPreview::Dump(CDumpContext&amp; dc) const
{
//Add debug output for any customized print preview members here.
    CView::Dump(dc);
}
#endif //_DEBUG
</pre>
<h4><a name="024a_00d4"><a name="024a_00d5">Listing Three<a name="024a_00d5"></h4><pre>
void CDDJPrintPreview::OnDraw(CDC* pDC)
{
    // don't do anything if not fully initialized
    if (m_pPrintView == NULL || m_dcPrint.m_hDC == NULL)
        return;
    //DDJ - New
    CDdjsampView * pMyView; 
        //DDJ - End New
    CPoint ViewportOrg = pDC-&gt;GetViewportOrg();
    CPen rectPen;
    rectPen.CreatePen(PS_SOLID, 2, GetSysColor(COLOR_WINDOWFRAME));
    CPen shadowPen;
    shadowPen.CreatePen(PS_SOLID, 3, GetSysColor(COLOR_BTNSHADOW));
    //DDJ - New 
    CPen redPen;
    redPen.CreatePen(PS_SOLID,2,RGB(255,0,0));
    CPen bluePen;
    bluePen.CreatePen(PS_SOLID,1,RGB(0,0,255));
    //DDJ - End New
    m_pPreviewInfo-&gt;m_bContinuePrinting = TRUE;    
    for (UINT nPage = 0; nPage &lt; m_nPages; nPage++)
    {
        int nSavedState = m_dcPrint.SaveDC();       
        // Use paint DC for print preview output
       m_pPreviewDC-&gt;SetOutputDC(pDC-&gt;GetSafeHdc());
        m_pPreviewInfo-&gt;m_nCurPage = m_nCurrentPage + nPage;
    // Only call PrepareDC if within page range, otherwise use default
    // rect to draw page rectangle
        if (m_nCurrentPage + nPage &lt;= m_pPreviewInfo-&gt;GetMaxPage())
            m_pPrintView-&gt;OnPrepareDC(m_pPreviewDC,                     m_pPreviewInfo);
        m_pPreviewInfo-&gt;m_rectDraw.SetRect(0, 0,
            m_pPreviewDC-&gt;GetDeviceCaps(HORZRES),
            m_pPreviewDC-&gt;GetDeviceCaps(VERTRES));
        m_pPreviewDC-&gt;DPtoLP(&amp;m_pPreviewInfo-&gt;m_rectDraw);
        // Draw empty page on screen
        pDC-&gt;SaveDC();          // save the output dc state
        CSize* pRatio = &amp;m_pPageInfo[nPage].sizeScaleRatio;
        CRect* pRect = &amp;m_pPageInfo[nPage].rectScreen;
        if (pRatio-&gt;cx == 0)
        {   // page position has not been determined
            PositionPage(nPage);    // compute page position
            if (m_nZoomState != ZOOM_OUT)
                ViewportOrg = -GetDeviceScrollPosition();
        }
        //This section draws the page and outline and 3-d shadow 
        pDC-&gt;SetMapMode(MM_TEXT);// Page Rectangle is in screen 
        pDC-&gt;SetViewportOrg(ViewportOrg);
        pDC-&gt;SetWindowOrg(0, 0);
        pDC-&gt;SelectStockObject(HOLLOW_BRUSH);
        pDC-&gt;SelectObject(&amp;rectPen); 
        pDC-&gt;Rectangle(pRect);
        pDC-&gt;SelectObject(&amp;shadowPen);
        pDC-&gt;MoveTo(pRect-&gt;right + 1, pRect-&gt;top + 3);
        pDC-&gt;LineTo(pRect-&gt;right + 1, pRect-&gt;bottom + 1);
        pDC-&gt;MoveTo(pRect-&gt;left + 3, pRect-&gt;bottom + 1);
        pDC-&gt;LineTo(pRect-&gt;right + 1, pRect-&gt;bottom + 1);
        // erase background to white (most paper is white)
        CRect rectFill = *pRect;
        rectFill.left += 1;
        rectFill.top += 1;
        rectFill.right -= 2;
        rectFill.bottom -= 2;
        ::FillRect(pDC-&gt;m_hDC, rectFill,                                (HBRUSH)GetStockObject(WHITE_BRUSH));
        //DDJ - New 
        //Now that the page is white we can draw our notebook paper!
        //If you want yellow legal paper, change the FillRect above.
        //Draw the red line
        pDC-&gt;SelectObject(&amp;redPen);
        int nRedX = pRect-&gt;left + pRect-&gt;Width()/8; 
        pDC-&gt;MoveTo(nRedX,pRect-&gt;top + 2);
        pDC-&gt;LineTo(nRedX,pRect-&gt;bottom - 2);
        // Draw 30 blue lines - start 1/8th page from top
        int nBlueCurrentY = pRect-&gt;top + pRect-&gt;Height()/8;
        int nBlueYIncrement = (pRect-&gt;bottom - nBlueCurrentY)/30;
                pDC-&gt;SelectObject(&amp;bluePen);
        
        for (int nBlueCount = 0; nBlueCount &lt; 30; nBlueCount++){
           pDC-&gt;MoveTo(pRect-&gt;left + 3,nBlueCurrentY);
            pDC-&gt;LineTo(pRect-&gt;right - 2,nBlueCurrentY);
            nBlueCurrentY += nBlueYIncrement;
        }//end blue line loop.
        //Now let's do some three-hole-punching!
        //Draw one every 1/4 page except for last one.
        //Make it the size of a blue increment which looks good.
        pDC-&gt;SelectObject(rectPen);
        pDC-&gt;SelectObject(GetStockObject(BLACK_BRUSH));
        //All holes have same left/right, different top/bottom
        CRect rectHole;     
        rectHole.left = pRect-&gt;left + pRect-&gt;Width()/16;
        rectHole.right = rectHole.left + nBlueYIncrement;
        //Hole 1 
        rectHole.top = pRect-&gt;Height()/8;
        rectHole.bottom = rectHole.top + nBlueYIncrement;
        pDC-&gt;Ellipse(rectHole);
        //Hole 2
        rectHole.top = pRect-&gt;Height()/2;
        rectHole.bottom = rectHole.top + nBlueYIncrement;
        pDC-&gt;Ellipse(rectHole);
        //Hole 3
        rectHole.top = pRect-&gt;Height()/8 * 7;
        rectHole.bottom = rectHole.top + nBlueYIncrement;
        pDC-&gt;Ellipse(rectHole);
        //DDJ - End New
        pDC-&gt;RestoreDC(-1);     // restore to synchronized state
        // Some old OnDraw() code removed for brevity.
    }  //end of the page for loop.
    rectPen.DeleteObject();
    shadowPen.DeleteObject();
    //DDJ - New Nuke our pens..
    bluePen.DeleteObject();
    redPen.DeleteObject();
    //DDJ - end new
}
</pre>
<h4><a name="024a_00d6"><a name="024a_00d7">Listing Four<a name="024a_00d7"></h4><pre>
class CPrintingDialog : public CDialog
{
public:
    enum { IDD = AFX_IDD_PRINTDLG };
    CPrintingDialog::CPrintingDialog(CWnd* pParent)
        {
            Create(CPrintingDialog::IDD, pParent
            _afxWinState-&gt;m_bUserAbort = FALSE;
        }
    virtual ~CPrintingDialog() { }
    virtual BOOL OnInitDialog();
    virtual void OnCancel();
protected:
};
</pre>
<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
