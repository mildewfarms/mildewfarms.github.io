<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>JUN96: Removing Blocking Network I/O From Windows Programs</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>Removing Blocking Network I/O From Windows Programs<a name="0223_00b3"><a name="0223_00b3"><a name="0223_00b1"><a name="0223_0000"></h1><P>

<h2>Save your code when moving to Windows </h2><P>

<h3>George F. Frazier and Derek Yenzer</h3><P>

<P>
<i><a name="0223_00b2"><a name="0223_0000">George, a senior software development engineer at Farallon Computing, can be reached at georgef@farallon.com. Derek is a software development engineer at Farallon and can be contacted at dereky@farallon.com.</i></p><hr><P>

Deciding whether to use blocking or nonblocking network I/O is an essential step in the design of Windows programs that use BSD-style<B> </B>sockets, such as those provided by the Winsock interface. A socket function that takes an indeterminate amount of time to complete is said to &quot;block.&quot; <P>

Sockets were designed for UNIX, and if needed, the operating system can preempt a blocked task and begin running another program. But 16-bit Windows 3.x can't preempt a task, so calling a blocking function puts all other programs on hold until the call returns. In 16-bit Windows, it is better to use nonblocking socket function calls that return immediately. When these nonblocking functions complete, a notification message is posted to the application's message queue.<P>

Unfortunately, in the rush to bring Internet applications to Windows, many UNIX programs were directly ported. Insufficient consideration was given to the inherent differences between Windows and UNIX. Blocking I/O crept into other programs as a result of poor design decisions. Besides causing performance degradation and locking out other applications, blocking I/O in 16-bit Windows can lead to serious reentrancy issues. Sprinkling <I>PeekMessage</I> loops throughout blocking code won't adequately fix most problems arising from the use of blocking calls. To keep messages flowing, modeless dialogs and keyboard accelerators require special handling in every place you insert <I>PeekMessage</I> loops. In addition, your application cannot handle the special processing that other applications require. Fixing the problems that arise from blocking network I/O is nontrivial.<P>

Porting to Win32 is one solution. Since Windows NT and Windows 95 can preempt a suspended task, blocking I/O no longer locks out other applications. But only true 32-bit programs benefit from preemptive multitasking; 16-bit programs running in Windows 95 cannot be preempted. Also, to really take advantage of Win32's network enhancements, multiple threads should be used in all but the simplest programs. In a multithreaded application, if one of your program's threads is preempted, another can proceed. If you only recompile your 16-bit program for Win32 it will run in a single thread, and the entire application will be suspended when a network I/O function call blocks. Using multiple threads is great if your program only needs to run in Windows NT or Windows 95 (and you are willing to spend the time to redesign it for this much-different paradigm), but if your application also has to run in Windows 3.x, you have only one real choice--remove the blocking network I/O function calls. In this article, we'll present a method for doing this without rewriting the application from scratch.<P>

<h3><a name="0223_00b4">Network I/O in 16-Bit Windows<a name="0223_00b4"></h3><P>

Although our focus is on reading from and writing to TCP/IP sockets, the concepts apply to other transports that provide blocking and nonblocking versions of network I/O to a reliable stream. To use sockets in Windows, it is necessary to make calls to a driver that implements the TCP/IP protocols. The most commonly used API for 16-bit Windows is Winsock 1.1. The advantage of writing to the Winsock specification is that your program will be able to dynamically link with any WINSOCK.DLL provided by a TCP/IP vendor.<P>

To communicate reliably between two processes, a connection-oriented stream provided by a TCP/IP socket is established between the processes. Then data is sent across the connection as a stream of bytes. The traditional BSD socket operations <I>send()</I> and <I>recv()</I> are used to send data to and receive data from a host. Whether or not calls to these functions block is determined by the mode in which the socket was created. Winsock extends the BSD standard to include a special set of nonblocking functions that begin with the prefix <I>WSAAsync</I>. By creating a nonblocking socket and using the <I>WSAAsynchSelect()</I> function call, an application will receive messages informing it when it can send or receive data.<P>

Because most of the overhead of using Winsock has been abstracted in the Microsoft Foundation Classes, we've used the <I>CAsyncSocket</I> and <I>CSocket</I> classes in our example program. <I>CSocket</I> derives from <I>CAsyncSocket</I> and simply pumps messages until the operation completes or an error occurs. We've derived a <I>TAsyncSocket</I> class from <I>CAsyncSocket</I> and a <I>TSyncSocket</I> class from <I>CSocket</I>. All the code is written in C++.<P>

The <I>TAsyncSocket</I> class abstracts the message-based nature of Winsock into an interface that notifies the caller when a particular I/O operation completes. To perform a nonblocking read, you call the <I>TAsyncSocket::Read</I> member function and tell it how many bytes to read, where to store the data, which function to call when the operation completes, and two reference constant (refcon) values. A refcon is a user-defined value that is passed back to the completion routine when the I/O operation finishes (so appropriate actions can be taken after the call completes). The completion function must have three parameters: the two refcon values and the result value for the I/O operation. The <I>TAsyncSocket::Write</I> operation functions in a similar manner.<P>

As implemented, the <I>TAsyncSocket</I> class permits only one outstanding read and one outstanding write, but could easily be extended to allow multiple read/write requests.<P>

<h3><a name="0223_00b5">Watch Me Draw<a name="0223_00b5"></h3><P>

Our sample application, Watch Me Draw, is designed to provide an example of how blocking I/O can be used in a client/server scenario. Once a connection is established, the side that initiated the connection becomes the &quot;drawing&quot; side. The other end of the connection is the &quot;watching&quot; side. The user on the drawing side can draw points and lines on the dialog. Those graphic objects are then transmitted to the watching side, which duplicates the drawing commands on its dialog. To keep the application as simple as possible, there is no code to handle repainting the dialog or to compensate for different dialog sizes in various video modes. In addition, error handling is minimal.<P>

The protocol consists of three possible wire messages sent from the drawing side to the watching side: done, pixel, and line (see <a href="9606f.htm#0223_00ba">Figure 1</A>). The done message signifies that the drawing side is closing the connection and, thus, the watching side should close its end. The pixel message tells the watching side that a PIXEL_DATA structure will follow. Finally, the line message tells the watching side that a LINE_DATA structure will follow.<P>

<h3><a name="0223_00b6">Implementation Using Blocking I/O<a name="0223_00b6"></h3><P>

The drawing side responds to the user's mouse button clicks and performs the appropriate drawing on its dialog box. Once a transmit structure is filled out, the appropriate wire message is sent over the connection, followed by the structure containing the data. <a href="9606f.htm#0223_00bf">Listing One</A> presents three synchronous functions that transmit the information.<P>

Once a connection is established, the watching side issues a synchronous read for a wire message. Once received, if it is a message for a pixel or line, another read is issued to fill in the appropriate structure. The pixel or line is drawn on the watching side's dialog box to duplicate the activity on the drawing side. Then, another read for a wire message is performed and the process begins again. The series of synchronous reads terminates when the done message is received. <a href="9606f.htm#0223_00c1">Listing Two</A> contains the basic structure of the watching side's implementation.<P>

<h3><a name="0223_00b7">Removing the Blocking Calls<a name="0223_00b7"></h3><P>

Because nonblocking network I/O calls return immediately, code that depends on the results of a blocking call will not work in a nonblocking paradigm. In <a href="9606f.htm#0223_00b9">Example 1</A>, <I>Recv()</I> is a blocking call. Since the if statement depends on a result obtained by the blocking call (namely, the value of <I>i</I>), making the <I>Recv()</I> call nonblocking will break the code.<P>

If recursion and loops are ignored, we can think about the execution paths through functions as trees with the first statement executed at the root and the last statement executed at the leaf. <a href="19960225.htm">Figure 2</A> illustrates the execution path tree of <a href="9606f.htm#0223_00b9">Example 1</A>.<P>

When analyzing a blocking program to convert, look for blocking calls that occur at nonleaf positions in the execution path of a function. In our example, the <I>Recv()</I> call is at the root of the tree, not at a leaf position. To convert blocking programs to nonblocking programs you must finesse your code to assure that all nonblocking calls appear as leaves in your execution path trees, and that the paths through your functions containing nonblocking calls contain no loops. You must eliminate loops in the old program that contained blocking calls.<P>

After you've changed your socket initialization so that your network I/O operations won't block, you have to solve three main problems. The first is to guarantee that all nonblocking calls appear at leaf positions in any function's execution path. In <a href="9606f.htm#0223_00bb">Figure 3(a)</A>, the function <I>func1</I> contains a single blocking call potentially preceded and followed by other groups of statements (represented as Processing Code Blocks 1 and 2). To convert <I>func1</I>, the blocking call becomes a nonblocking call that passes <I>func2</I> (the callback function that will be called when the operation completes); see <a href="9606f.htm#0223_00bb">Figure 3(b)</A>. The code in Processing Code Block 2 has been moved to the body of <I>func2</I>. Thus, if Processing Block 2 depends on a result obtained by the nonblocking call, that result will be available after the call completes.<P>

But how does <I>func2</I> get access to local variables or parameters from <I>func</I><I>1</I>? This is the second issue that needs to be resolved during the conversion. <a href="9606f.htm#0223_00bc">Figure 4(a)</A> adds a few details to our generic <I>func1</I>: parameters <I>x</I> and <I>y,</I> and local variables <I>ch</I> and <I>Arr</I>. Since we are splitting up code that once was in a single function (and had access to the parameters and local variables of that function), we need to either pass the necessary variables to the nonblocking calls (so that they can be sent in as parameters to the callback function that calls the rest of the code) or provide another method for this data to be accessed. Passing a potentially lengthy list of arguments to the nonblocking functions makes the new nonblocking code unnecessarily complex and increases the chances you'll overlook something. A better solution is to define a local variable structure for each nonblocking function call containing parameters and local variables needed for code that will be executed by the nonblocking operation's callback function. <a href="9606f.htm#0223_00bc">Figure 4(b)</A> shows the local variable <I>struct</I> for <I>func1</I>.<P>

<a href="9606f.htm#0223_00bd">Figures 5(a) and 5(b)</A> show how the local variable structure is used in the final nonblocking code. The last problem, removing loops that contain blocking calls in the original program, also is solved here. Again <I>func1</I> is shown with a blocking call in a For<I> </I>loop. The nonblocking version of this code contains two new functions, <I>func2</I> and <I>func3</I>. In the new <I>func1</I>, the local variable <I>i</I> has been encapsulated into a structure accessible to all three functions. In <I>func1</I>, it is simply initialized and <I>func2</I> is called. In <I>func2</I>, the termination condition of the loops is tested and the initial code is executed (Processing Block 1) before the nonblocking call is made. When that call completes, <I>func3</I> is called. This increments the index variable, executes the code that followed the original blocking call (Processing Block 2), and calls <I>func2</I> again, simulating the loop in the original code.<P>

We've used this general approach to remove the blocking calls from Watch Me Draw. Programs that implement the converted asynchronous transmit and receive portions of the application are available electronically; see &quot;Availability,&quot; page 3.<P>

<h3><a name="0223_00b8">Conclusion<a name="0223_00b8"></h3><P>

Although removing blocking calls from shipping code may seem a daunting task at first, we've found that the investment more than pays for itself in increased reliability, robustness, and performance. Also, we've found that adhering to a method such as this is much better than simply diving into the code and haphazardly attempting to remove the blocking calls. As in all reengineering efforts, a small amount of planning will save headaches down the road.<P>

<h4><a name="0223_00b9"><a name="0223_00b9"><B>Example 1:</B> Recv() is a blocking call.</h4><P>

<pre>char i;
Recv(s, &amp;i, sizeof(char), NULL);
if (i != '0')
{
    ErrorHandler();
}
else
{
    ComputeResult(i);
}</pre>

<h4><a name="0223_00ba"><B>Figure 1:</B> Wire messages used in the Watch Me Draw application.<a name="0223_00ba"></h4><P>

<pre>done       (char)

pixel      (char)
x          (int)
y          (int)
color      (COLORREF)

line       (char)
x1         (int)
y1         (int)
x2         (int)
y2         (int)
color      (COLORREF)
nPenWidth  (int)</pre>

<h4><B><a href="19960225.htm">Figure 2</A>:</B> Execution path tree for <a href="9606f.htm#0223_00b9">Example 1</A>.</h4><P>

<h4><a name="0223_00bb"><B>Figure 3:</B> Forcing all nonblocking calls to leaf positions in a function's  execution tree. (a) Blocking version; (b) nonblocking version.<a name="0223_00bb"></h4><P>

<pre>(a)
void func1(void)               
{                      
// Processing Code Block 1  
BlockingCall();        
// Processing Code Block 2
}

(b)
void func1(void)         
{                    
  // Processing Code Block 1
 NonBlockingCall(, func2);
}                      
void func2(void)           
{                   
 // Processing Code Block 2
 }</pre>

<h4><a name="0223_00bc"><a name="0223_00bc"><B>Figure 4:</B> A struct for storing parameters and local variables for a function with blocking calls.</h4><P>

<pre>(a)
void func1(int x, float y) 
{                      
    char ch;        
    int Arr[10];     
    // Processing Block 1
    BlockingCall(x, y, ch, Arr);
    // Processing Block 2
}

(b)
typedef struct func1 
{                  
     int param_x; 
     float param_y;     
     char local_ch;     
     char local_Arr[10];
} FUNC1STRUCT;     </pre>

<h4><a name="0223_00bd"><a name="0223_00bd"><B>Figure 5:</B> Removing loops with blocking calls. (a) Blocking version; (b) nonblocking version.</h4><P>

<pre>(a)
void func1(void)
{
  int i;
  for (i = 0; i &lt; 10; i++)
  {
      // Processing Block 1
      BlockingCall();
      // Processing Block 2
  }
}

(b)
void func1(void)       
{              
    func1struct.local_i = 0;   
    func2();           
}              
void func2(void)       
{              
  if (func1struct.local_i &lt; 10)
  {              
  // Processing Block 1    
  NonBlockingCall(, func3);   
  }                            
}                           
void func3(void)              
{                             
  // Processing Block 2
  func1struct.local_i++;       
  func2();                     
}</pre>

<P>

<h4><a name="0223_00bf"><a name="0223_00bf">Listing One</h4><pre>
BOOL TMainDialog::TransmitDoneMessage()
{
    HEADER_DATA  toTransmit;
    
    toTransmit.message = kchDoneMessage;
    if(m_CommunicationSocket.Send(&amp;toTransmit, 
                                    sizeof(toTransmit)) != sizeof(toTransmit))
    {
        return(FALSE);
    }
    return(TRUE);
}  // TMainDialog::TransmitDoneMessage
BOOL TMainDialog::TransmitPixelMessage(LPPIXEL_DATA lpData)
{
    HEADER_DATA  toTransmit;
    
    toTransmit.message = kchPixelMessage;
    if(m_CommunicationSocket.Send(&amp;toTransmit, 
                                    sizeof(toTransmit)) != sizeof(toTransmit))
    {
        return(FALSE);
    }
    if(m_CommunicationSocket.Send(lpData, 
                                  sizeof(PIXEL_DATA)) != sizeof(PIXEL_DATA))
    {
        return(FALSE);
    }
    return(TRUE);
}  // TMainDialog::TransmitPixelMessage
BOOL TMainDialog::TransmitLineMessage(LPLINE_DATA lpData)
{
    HEADER_DATA  toTransmit;
    
    toTransmit.message = kchLineMessage;
    if(m_CommunicationSocket.Send(&amp;toTransmit, 
                                   sizeof(toTransmit)) != sizeof(toTransmit))
    {
        return(FALSE);
    }
    if(m_CommunicationSocket.Send(lpData, 
                                   sizeof(LINE_DATA)) != sizeof(LINE_DATA))
    {
        return(FALSE);
    }
    return(TRUE);
}  // TMainDialog::TransmitLineMessage
------------------------ receive code ------------------------
void TMainDialog::ReadSocketData()
{
    HEADER_DATA  toRead;
    
    if(m_CommunicationSocket.Receive(&amp;toRead, 
                                           sizeof(toRead)) != sizeof(toRead))
    {
        // ... handle error ...
        return;
    }
    while(toRead.message != kchDoneMessage)
    {
        if(!ProcessMessage(toRead.message))
        {
            // ... handle error ...
            return;
        }
        if(m_CommunicationSocket.Receive(&amp;toRead, 
                                            sizeof(toRead)) != sizeof(toRead))
        {
            // ... handle error ...
            return;
        }
    }
    // ... normal close ...
}  // TMainDialog::ReadSocketData
BOOL TMainDialog::ProcessMessage(char chMessage)
{
    BOOL  bConnectionOK = FALSE;
    switch(chMessage)
    {
        case(kchPixelMessage):
            bConnectionOK = ProcessPixelMessage();
            break;
        case(kchLineMessage):
            bConnectionOK = ProcessLineMessage();
            break;
    }
    return(bConnectionOK);
}  // TMainDialog::ProcessMessage
BOOL TMainDialog::ProcessPixelMessage()
{
    PIXEL_DATA  toRead;
    if(m_CommunicationSocket.Receive(&amp;toRead,sizeof(toRead)) != sizeof(toRead))
    {
        return(FALSE);
    }
    // ... draw pixel ...
    return(TRUE);
}  // TMainDialog::ProcessPixelMessage
BOOL TMainDialog::ProcessLineMessage()
{
    LINE_DATA  toRead;
    if(m_CommunicationSocket.Receive(&amp;toRead,sizeof(toRead)) != sizeof(toRead))
    {
        return(FALSE);
    // ... draw line ...
    return(TRUE);
}  // TMainDialog::ProcessLineMessage
</pre>
<h4><a name="0223_00c1"><a name="0223_00c1">Listing Two<a name="0223_00c1"></h4><pre>
void TMainDialog::ReadSocketData()
{
    HEADER_DATA  toRead;
    
    if(m_CommunicationSocket.Receive(&amp;toRead,sizeof(toRead)) != sizeof(toRead))
    {
        // ... handle error ...
        return;
    }
    while(toRead.message != kchDoneMessage)
    {
        if(!ProcessMessage(toRead.message))
        {
            // ... handle error ...
            return;
        }
        if(m_CommunicationSocket.Receive(&amp;toRead,
                                           sizeof(toRead)) != sizeof(toRead))
        {
            // ... handle error ...
            return;
        }
    }
    // ... normal close ...
}  // TMainDialog::ReadSocketData
BOOL TMainDialog::ProcessMessage(char chMessage)
{
    BOOL  bConnectionOK = FALSE;
    switch(chMessage)
    {
        case(kchPixelMessage):
            bConnectionOK = ProcessPixelMessage();
            break;
        case(kchLineMessage):
            bConnectionOK = ProcessLineMessage();
            break;
    }
    return(bConnectionOK);
}  // TMainDialog::ProcessMessage
BOOL TMainDialog::ProcessPixelMessage()
{
    PIXEL_DATA  toRead;
    
    if(m_CommunicationSocket.Receive(&amp;toRead,sizeof(toRead)) != sizeof(toRead))
    {
        return(FALSE);
    }
    // ... draw pixel ...
    return(TRUE);
}  // TMainDialog::ProcessPixelMessage
BOOL TMainDialog::ProcessLineMessage()
{
    LINE_DATA  toRead;
    
    if(m_CommunicationSocket.Receive(&amp;toRead,sizeof(toRead)) != sizeof(toRead))
    {
        return(FALSE);
    }
    // ... draw line ...
    return(TRUE);
}  // TMainDialog::ProcessLineMessage
</pre>
<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
