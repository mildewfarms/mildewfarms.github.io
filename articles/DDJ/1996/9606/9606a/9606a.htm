<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>JUN96: Managing Dynamic Objects in C++</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>Managing Dynamic Objects in C++<a name="01f8_00a9"><a name="01f8_00a9"><a name="01f8_00a7"><a name="01f8_0000"></h1><P>
<h2>The Localized Ownership pattern language makes it possible</h2><P>
<h3>Tom Cargill</h3><P>
<P><i><a name="01f8_00a8"><a name="01f8_0000">Tom is an independent consultant, the author of C++ Programming Style (Addison-Wesley, 1992), and a columnist for C++ Report. This article is based on his PLoP '95 paper published in Pattern Languages of Program Design 2 (Addison-Wesley, 1996). Tom can be contacted at cargill@csn.org.</i></p><hr><P>
The lifetime of a dynamic object in C++--one allocated from heap memory (the free-store)--is managed explicitly by the program. The program must guarantee that each dynamic object is deleted when it is no longer needed, and certainly before it becomes garbage. (There is no garbage collection in standard C++, and few programs can afford to produce garbage.) For each dynamic allocation, a policy that determines the object's lifetime must be found and implemented.<P>
Localized Ownership is a pattern language that tackles the management of dynamic object lifetimes in C++. It forms a sequence of patterns that address a range of design constraints. Early patterns in the sequence emphasize simplicity and locality of the responsible code. Later patterns offer greater flexibility at the expense of a more complex implementation that is dispersed more widely.<P>
The simplest policies for managing a dynamic object's lifetime are those that localize the work within a single component, such as a function, object, or class. A simple solution that suffices is ideal. Unfortunately, attempts to localize lifetime policies are confounded by rich object architectures that require their objects to play multiple roles in cooperation with many collaborators. What ownership policies are applicable in these more complex contexts?<P>
<h3><a name="01f8_00aa">Terminology<a name="01f8_00aa"></h3><P>
<B>Lifetime.</B> The lifetime of an object in C++ is the interval of time it exists by occupying memory. An object is created from one of three &quot;storage classes:&quot; automatic (local), static, and dynamic. The lifetimes of automatic and static objects are controlled <I>implicitly </I>by the execution of the program. The lifetime of an automatic object ends when execution exits its block. The lifetime of a static object continues until the end of the execution of the entire program. However, the lifetime of a dynamic object continues until the program <I>explicitly </I>destroys that object.<P>
<B>Creator.</B> A dynamic object is created by the execution of a <I>new</I> expression. The entity that executes the <I>new </I>expression is the dynamic object's <I>creator</I>. The creator may be a (member) function, object, or class. The creator cannot be inferred from the source code alone. In general, a <I>new </I>expression that creates a dynamic object is executed by a member function; that member function executes on behalf of an object; and that object is an instance of a class. Therefore, the creator of the dynamic object might be deemed to be the function, object, or class. In the following code, the creator could be the member function <I>f</I>, the object executing <I>A::f</I>, or the class <I>A</I>.<P>
<pre>void A::f(){  . . .  new Resource  . . .}</pre>
Although the creator is determined by the intent of the programmer, the language constrains the choice. If the <I>new </I>expression is executed by a static member function, the creator is either the function or its class. (There is no object.) If the new expression is executed by a nonmember function, only the function may be the creator. (There is neither object nor class.)<P>
<B>Owner.</B> The <I>owner </I>of a dynamic object is the function, object, or class that bears the responsibility for ending the lifetime of the dynamic object. Upon creation of a dynamic object, its creator becomes the owner. A dynamic object may acquire an owner other than its creator. A dynamic object may have more than one owner at a time.<P>
Ownership does not imply exclusive access to the dynamic object. Other parts of the program may legitimately access the dynamic object, but that access must be consistent with the owner's policy. In particular, other parts of the program must guarantee not to attempt any access after the owner has deleted the object.<P>
<h3><a name="01f8_00ab">Localized Ownership<a name="01f8_00ab"></h3><P>
The Localized Ownership pattern language contains three primary patterns, of which the first is divided into three sub-cases. The three patterns are as follows:<P>
<ul>
<li>Creator As Sole Owner (Function As Sole Owner, Object As Sole Owner, and Class As Sole Owner).</li>
<li>Sequence of Owners.</li>
<li>Shared Ownership.</li>
</ul>
The patterns are ordered by decreasing localization of the ownership responsibility. Earlier patterns localize the responsibility narrowly; later patterns distribute the responsibility more widely. Localized responsibility generally simplifies design and implementation. Therefore, use the lowest numbered pattern that suffices.<P>
<h3><a name="01f8_00ac">Resources Other than Dynamic Objects<a name="01f8_00ac"></h3><P>
Although Localized Ownership patterns might be used to manage other resources (such as files or database locks), they are presented specifically in terms of dynamic objects. There are two reasons for this. First, the focus on dynamic objects makes the discussion more concrete. Second, for most C++ programmers, the effort expended on managing dynamic objects dominates the effort expended on managing other resources.<P>
<h3><a name="01f8_00ad">Pattern 1: Creator As Sole Owner<a name="01f8_00ad"></h3><P>
<B>Context.</B> The creator of a dynamic object is in a position to fully determine the object's lifetime. A narrow, specific purpose for the dynamic object suggests that its creator may be able to control its lifetime. A narrow purpose does not imply that the object is short-lived or that the creator has exclusive access to the object.<P>
<B>Solution.</B> Upon creation of the dynamic object, its creator becomes the owner. Ownership responsibility is never transferred; the creator must eventually dispose of the dynamic object. Other parts of the system must access the dynamic object according to the owner's policy. When the identity of the dynamic object passes through an interface (such as a pointer or reference as a function parameter or return value), constraints on the object's lifetime must be part of that interface.<P>
The three types of creator result in the following three specializations of this pattern.<P>
<h3><a name="01f8_00ae">Pattern 1.1: Function As Sole Owner<a name="01f8_00ae"></h3><P>
<B>Context.</B> An object with access restricted to the function that creates it, and to other functions whose execution is nested within that function's execution, is a candidate for sole ownership by the function in which it is created. The lifetime of the object can be established without considering the lifetimes of any other objects.<P>
<B>Solution.</B> When the sole owner is a function, that function must eventually <I>delete </I>the object. The <I>delete</I> expression is coded explicitly in the function. If the dynamic object is required for only the current invocation of the function, the <I>delete</I> occurs before the function returns to its caller. If the dynamic object's lifetime spans many invocations, the function may retain the object from call to call using a local static pointer. Eventually, the function itself executes the <I>delete</I> when the object is no longer needed.<P>
<B>Examples.</B> The creator function creates and deletes during a single invocation; see <a href="9606a.htm#01f8_00b6">Listing One</A>.<P>
A function that holds a dynamic buffer from one call to the next is shown in <a href="9606a.htm#01f8_00b8">Listing Two</A>. On each call, the function determines if the current buffer is large enough, allocating a larger buffer when needed.<P>
<h3><a name="01f8_00af">Pattern 1.2: Object As Sole Owner<a name="01f8_00af"></h3><P>
<B>Context.</B> The lifetime of the dynamic object cannot be tied to a single function, but its lifetime can be bounded by the lifetime of the object that creates it. Creation occurs in a nonstatic member function.<P>
<B>Solution.</B> If the sole owner is an object, then the owner acquired the dynamic object by executing one of its member functions and must delete the dynamic object before the end of its own lifetime. The last opportunity the owner object has to delete the owned object is during the execution of the owner's destructor. <P>
<B>Examples.</B> Stroustrup's &quot;Resource Allocation is Initialization&quot; is an example of Object As Sole Owner (see <I>The C++ Programming Language</I>, Second Edition, Addison-Wesley, 1991).<P>
The &quot;Cheshire Cat&quot; technique (a term coined by John Carolan in &quot;Constructing Bullet-Proof Classes,&quot; <I>Proceedings C++ At Work</I>, SIGS Publications, 1989) reduces unwanted, indirect header-file dependencies by moving the private members of a class into an auxiliary object, to which the class delegates its operations. Typically, the auxiliary structure is dynamically allocated in the constructor and deallocated in the destructor; see <a href="9606a.htm#01f8_00ba">Listing Three</A>.<P>
If a communications <I>Connection</I> object encounters an error, it opens a <I>Window</I> to display pertinent information. The <I>Connection</I> object lazily defers creation of the <I>Window</I> until an error occurs. If instructed to <I>clearErrors()</I>, the <I>Connection</I> disposes of the <I>Window</I> if it has one. If the <I>Connection</I> still holds a <I>Window</I> at the end of its own lifetime, the destructor performs the delete; see <a href="9606a.htm#01f8_00bc">Listing Four</A>.<P>
<h3><a name="01f8_00b0">Pattern 1.3: Class As Sole Owner<a name="01f8_00b0"></h3><P>
<B>Context.</B> Even though there is no single function or object to serve as the owner, the ownership responsibility can be localized to a single class. The function that creates the object is a static or nonstatic member function of the class.<P>
<B>Solution.</B> All parts of the class collaborate to determine the lifetime of the owned object. The implementation of the ownership responsibility is distributed across the member functions as they execute on behalf of all objects of that class. Static member functions may also participate.<P>
<B>Example.</B> A <I>Query</I> object provides end-user database services. <I>Query</I> objects are created and destroyed arbitrarily. All <I>Query</I> objects share a single <I>DataBase</I> server. To conserve resources, the <I>DataBase</I> object should exist only when there is at least one <I>Query</I> object. Collectively, the constructor and destructor of <I>Query</I> use static data members to implement this policy on behalf of the class; see <a href="9606a.htm#01f8_00be">Listing Five</A>.<P>
<h3><a name="01f8_00b1">Pattern 2: Sequence of Owners<a name="01f8_00b1"></h3><P>
<B>Context.</B> No suitable creator that can assume on-going ownership responsibility can be found. For example, a factory creates objects on behalf of others. Once the object has been successfully created, the factory's ownership responsibility should end, but the created object's lifetime must not.<P>
<B>Solution.</B> Ownership may be transferred from the creator to another owner. Ownership may then be further transferred any number of times. At each point of transfer, the outgoing owner relinquishes its ownership obligation, whereupon the incoming owner assumes it. The transfer of ownership must be considered as an explicit part of the interface between the two. Although the owner may change many times, at any particular time, ownership rests with exactly one owner.<P>
<B>Examples.</B> The code in <a href="9606a.htm#01f8_00c0">Listing Six</A> shows ownership transfer from a factory to a function. The transfer could as easily be to an object or a class as the incoming owner.<P>
The function in <a href="9606a.htm#01f8_00c2">Listing Seven</A> transfers ownership to a local <I>auto</I><I>_</I><I>ptr</I> object. The <I>auto</I><I>_</I><I>ptr</I> template is part of the draft C++ standard library (ANSI Document X3J16/95-0091, &quot;Working Paper for Draft Proposed International Standard for Information Systems Programming Language C++,&quot; April 1995). The only purpose of an <I>auto</I><I>_</I><I>ptr</I> object is to assume ownership of a dynamic object. The <I>auto</I><I>_</I><I>ptr</I> destructor deletes the object. The advantage of transferring ownership to an automatic object is that its destructor will execute under almost all control-flow scenarios that leave the block.<P>
<h3><a name="01f8_00b2">Pattern 3: Shared Ownership<a name="01f8_00b2"></h3><P>
<B>Context.</B> When a dynamic object is shared widely by diverse components, it may be impossible to identify a single owner or even a sequence of owners. An object that defies simple characterization and management of its lifetime is likely to be long-lived. <P>
<B>Solution.</B> Allow arbitrary owners to declare unilateral interest in a dynamic object. The lifetime of the dynamic object continues until all of the owners have relinquished their interest in it. Constraints on the owners and the owned object vary depending on the style of implementation.<P>
<B>Examples.</B> A conventional reference-counted implementation of a string class (see <I>The C++ Programming Language</I>) uses Shared Ownership of the representation object, which in turn is Object As Sole Owner of the underlying array of characters. Usually, the representation class is specifically designed to carry a reference count to support its shared ownership; that is, the implementation of the ownership intrudes into the class of the owned object. Ownership is intentionally restricted to the string objects.<P>
Reference counting &quot;smart pointers&quot; (see <I>Advanced C++ Programming Styles and Idioms</I>, by James Coplien, Addison Wesley, 1992) also use Shared Ownership. As with a reference-counted string class, the mechanism usually intrudes into the owned object and restricts ownership to the smart pointer objects.<P>
The following example demonstrates that the intrusion on the owned object and constraints on the owners are not intrinsically part of the pattern.<P>
Shared ownership information with respect to arbitrary objects is recorded in a global instance of the class <I>Shared</I>. <I>Shared::adopt()</I> records an arbitrary owner declaring an interest in an arbitrary object. <I>Shared::disown()</I> records an owner relinquishing that interest. A <I>true </I>result, from <I>disown(),</I> informs the departing owner that no other owners remain, and the dynamic object should be deleted. Effectively, <I>Shared</I> provides reference counting that constrains neither owner nor owned object; see <a href="9606a.htm#01f8_00c4">Listing Eight</A>.<P>
A <I>Journal</I> object logs messages to a <I>Window</I>. The current <I>Window</I> is established in its constructor, but may be changed by the <I>bind</I> member function. A <I>Journal</I> object assumes shared ownership of its <I>Window</I> by registering its ownership with <I>clerk</I> and deleting any unowned <I>Window</I>. The <I>Window</I> class does not participate in the implementation of this ownership mechanism. The other owners of <I>Window</I> may be arbitrary functions, objects, and classes. <I>Journal</I> requires only that they observe the protocol with respect to <I>cle</I><I>r</I><I>k</I>; see <a href="9606a.htm#01f8_00c6">Listing Nine</A>.<P>
<h3><a name="01f8_00b3">Related Topics<a name="01f8_00b3"></h3><P>
<B>Dangling Pointers.</B> Any discussion of garbage avoidance often leads to the separate, but related, topic of dangling pointers. A pointer dangles when use of its value becomes invalid at the end of the lifetime of the object that it addresses. Use of a dangling pointer is undefined behavior, which can result in a program crash or worse. A pointer that refers to a dynamic object dangles if the dynamic object is deleted (by its owner). However, dangling pointers can also arise without the use of dynamic allocation: A pointer to an automatic object dangles if the pointer outlives the object. A dangling pointer must never be dereferenced.<P>
<B>Reference Counting versus Garbage Collection. </B>Reference counting (mentioned with respect to Shared Ownership) is easily confused with garbage collection. However, the two mechanisms are not equivalent. There are circumstances under which reference counting reclaims memory that garbage collection misses, and vice versa. By tolerating a dangling pointer, reference counting that depends on an explicit decrement operation can recover a dynamic object that garbage collection must retain. On the other hand, a cycle of mutual references can cause reference counting to overlook a set of objects that garbage collection would reclaim.<P>
<B>Exception Handling.</B> An exception handling (EH) mechanism for C++ (using termination semantics) has been proposed in the draft standard, and implementations are becoming available. Clearly, a nonlocal <I>goto</I> mechanism introduces further analysis in determining that a program is coded correctly, including any use of dynamic memory. Unfortunately, to date, the C++ community has little experience using EH. It appears that object state and resource management (including dynamic memory) are the two key problems to address when using EH and that resource management is the easier of the two.<P>
<h3><a name="01f8_00b4">Acknowledgment<a name="01f8_00b4"></h3><P>
My thanks to Paul Jensen, David Leserman, Doug Schmidt, John Vlissides, and the members of my PLoP '95 workshop for their comments.<P>
<P>
<h4><a name="01f8_00b5"><a name="01f8_00b6">Listing One<a name="01f8_00b6"></h4><pre>
void some::SoleOwner()
{
  . . .
  Resource *res = new Resource;
  . . .
  delete res;
  . . .
}
</pre>
<h4><a name="01f8_00b7"><a name="01f8_00b8">Listing Two<a name="01f8_00b8"></h4><pre>
void
Transport::xmit(const Packet *p)
{
  static char *buffer = 0;
  static int allocated = 0;
  int sz = formattedSize(p);
  if( sz &gt; allocated ){
    delete [] buffer;
    buffer = new char[sz];
    allocated = sz;
  }
  . . .
}
</pre>
<h4><a name="01f8_00b9"><a name="01f8_00ba">Listing Three<a name="01f8_00ba"></h4><pre>
class Server {
public:
  Server();
  ~Server();
  . . .
private:
  class Auxiliary *aux;
};
Server::Server()
{
  aux = new Auxiliary;
}
Server::~Server()
{
  delete aux;
}
</pre>
<h4><a name="01f8_00bb"><a name="01f8_00bc">Listing Four<a name="01f8_00bc"></h4><pre>
class Connection {
public:
  Connection();
  ~Connection();
  void clearErrors();
  . . .
private:
  Window *errWin;
  void error(Text);
  . . .
};
Connection::Connection()
{
  errWin = 0;
}
Connection::~Connection()
{
  clearErrors();
}
void
Connection::error(Text t)
{
  if( errWin == 0 )
    errWin = new Window;
  . . .
  errWin-&gt;write(t);
}
void Connection::clearErrors()
{
  delete errWin;  // may be null
  errWin = 0;
}
</pre>
<h4><a name="01f8_00bd"><a name="01f8_00be">Listing Five<a name="01f8_00be"></h4><pre>
class Query {
public:
  Query();
  ~Query();
  . . .
private:
  static DataBase *db;
  static int population;
  . . .
};
DataBase *Query::db = 0;
int Query::population = 0;
Query::Query()
{
  if( population == 0 )
    db = new DataBase;
  population += 1;
}
Query::~Query()
{
  population -= 1;
  if( population == 0 ){
    delete db;
    db = 0;
  }
}
</pre>
<h4><a name="01f8_00bf"><a name="01f8_00c0">Listing Six<a name="01f8_00c0"></h4><pre>
Resource *Creator::factory()
{
  Resource *res = new Resource;
  if( res-&gt;valid() )
    return res;     // transfer
  // retain
  delete res;
  return 0;
}
void Client::usesFactory()
{
  Resource *res =
           Creator::factory();
  if( res != 0 ){
    // transferred
    . . .
    delete res;  // eventually
  }
}
</pre>
<h4><a name="01f8_00c1"><a name="01f8_00c2">Listing Seven<a name="01f8_00c2"></h4><pre>
void Use_auto_ptr()
{
  Resource *res = new Resource;
  auto_ptr&lt;Resource&gt; owner(res);
  . . .
  // use res
  . . .
} // owner deletes
</pre>
<h4><a name="01f8_00c3"><a name="01f8_00c4">Listing Eight<a name="01f8_00c4"></h4><pre>
template&lt;class R&gt;
class Shared {
public:
    void adopt(R*);
    bool disown(R*);
private:
    map7&lt;void*,int&gt; owners;
};
template&lt;class R&gt;
void Shared&lt;R&gt;::adopt(R *r)
{
    if( owners.find(r) == owners.end() )
        owners[r] = 1;
    else
        owners[r] += 1;
}
template&lt;class R&gt;
bool Shared&lt;R&gt;::disown(R *r)
{
    assert( owners.find(r) != owners.end() );
    owners[r] -= 1;
    if( owners[r] &gt; 0 )
        return false;
    owners.erase(r);
    return true;
}
</pre>
<h4><a name="01f8_00c5"><a name="01f8_00c6">Listing Nine<a name="01f8_00c6"></h4><pre>
class Journal {
public:
  void bind(Window*);
  void log(Message);
  Journal(Window*);
  ~Journal();
  . . .
private:
  Window *current;
  . . .
};
void Journal::bind(Window *w)
{
  clerk.adopt(w);
  if( clerk.disown(current) )
    delete current;
  current = w;
}
void Journal::log(Message m)
{
  current-&gt;display(render(m));
}
Journal::Journal(Window *initial)
{
  current = initial;
  clerk.adopt(current);
}
Journal::~Journal()
{
  if( clerk.disown(current) )
    delete current;
}
</pre>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
</BODY></HTML>
