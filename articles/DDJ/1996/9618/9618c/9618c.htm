<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>Web Development: Access Counters...</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>Access Counters <P>
for Web Pages</h1><P>

<P>

<h2>Server-side includes versus the CGI protocol</h2><P>

<P>

<h3>Andrew Davison</h3><P>

<P>
<i>Andrew is a lecturer in the department of computer science at the University of Melbourne, Australia.
He can be contacted at ad@cs .mu.oz.au.</i></p><hr><P>

<P>

An access counter is a useful addition for any World Wide Web page, since it allows both page authors and
users to gauge a page's popularity. Naturally, the access counter should be incremented automatically and
be pleasing to the eye. In this article, I'll present two approaches to creating access counters, one based on
NCSA-supported server-side includes (SSIs), and another that utilizes the Common Gateway Interface (CGI)
protocol. For more details on SSIs and CGI-based access counters, see "Using Server Side Includes," by
Matt Kruse (<I>Dr. Dobb's Journal</I>, February 1996) and "Tracking Home Page Hits," by Ann Lynnworth
(<I>Dr. Dobb's Sourcebook on Web Development</I>, November/December 1995), respectively. Of course,
there are other ways of coding access counters, many of them collected at
http://www.yahoo.com/Computers/World_ Wide_Web/Programming/Access_Counts/.<P>

<h3>An SSI Access Counter</h3><P>

SSIs are supported by the NCSA HTTPD server and have the form shown in<a href="9618c.htm#0389_0207"> Example 1(a)</A>. Such commands are embedded in an HTML file and are
processed before the file is displayed. The results of the processing will replace the command as the file is
displayed by the browser. The features supported by SSIs include<P>

<P>
<ul>
<li>Inserting the contents of another file.</li>
<li>Embedding the current date or time.</li>
<li>Adding file information (for example, the size of the HTML file or the last time it was modified). </li>
</ul>
<P>

The SSI #exec command is very useful and can be used to execute UNIX Bourne-shell scripts and CGI
scripts. For example, the #exec in <a href="9618c.htm#0389_0207">Example 1(b)</A> executes a shell
script. This command will insert details about the current users on the system, filtered to include only lines
that mention "andrew." <P>

CGI scripts are executed as in<a href="9618c.htm#0389_0207"> Example 1(c)</A>, which executes the
CGI script called ssi_vis in the cgi-bin directory at the WWW server's site. The crucial difference between
#exec and a normal CGI-script evaluation is that with #exec, the output will not replace the WWW page
containing the command but will be inserted into the page. (More details on SSIs can be found at
http://hoohoo.ncsa.uiuc .edu/docs/tutorials/includes.html.)<P>

There are four drawbacks to using SSIs. First, since the WWW server must parse each file, the server will
take longer to send the file. Normally, the Website administrator avoids this by configuring the server to
distinguish between ordinary HTML files and those using SSI features. Typically, this is achieved by
specifying that only files ending with the extension ".shtml" contain SSIs, and so only those need to be
parsed. SSIs appearing in ordinary HTML files (those ending with ".html") are treated as comments. <P>

Another drawback with SSIs is that the #exec command can be very insecure, and may be used to damage a
web site. However, if the web server is properly set up, this can be limited by executing scripts as owned
by user <I>Nobody</I>, which limits their destructive capabilities. Also, processing of SSI features can be
restricted to a specified directory (or directories). However, the best safeguard is to disable the #exec
command altogether.<P>

The third drawback is that SSIs are not widely supported. The popular CERN server, for instance, does not
have SSI capabilities, although it may in the future. A fix for this is available at
http://sw.cse.bris.ac.uk/WebTools/fakessi.html. (fakessi is a Perl script that simulates SSI
functionality.)<P>

The final SSI drawback is the way that arguments are passed to the CGI script named in an SSI #exec
command. With an ordinary CGI script, the argument can be appended to the end of the script name,
preceded by a "?". In <a href="9618c.htm#0389_0208">Example 2(a)</A>, for instance, the argument of
the ssi_vis script is <I>pub</I>. Unfortunately, this will not work with the #exec command. Instead, the
argument must be added to the end of the filename that contains the #exec command when that file is
accessed. For example, assume that the file examp.shtml contains the SSI command in <a href="9618c.htm#0389_0208">Example 2(b)</A>. The argument expected by ssi_vis must be added
to the end of examp.shtml when it is accessed, as in <a href="9618c.htm#0389_0208">Example
2(c)</A>.<P>

So why are SSIs worth considering at all? The main reason for using the #exec command is that it makes
coding the CGI script straightforward.<P>

<h3>The ssi_vis.c Program</h3><P>

<a href="9618c.htm#0389_0414">Listing  One</A> is the C program ssi_vis.c, which takes a single
argument assumed to be the name of a file holding an integer. ssi_vis.c reads the value in from the file,
prints it, increments the value, and writes the new value back to the file. (The program is also available at
http://www.cs.mu.oz.au/~ad/code/counters/ssi_vis.c.)<P>

ssi_vis.c assumes that the counter file is in the directory /home/staff/ad/www_public/code/counter, and
ends with the extension .cnt. The file must already exist, contain a number, and be writable by anyone.<P>

The examp.shtml file (see <a href="9618c.htm#0389_0415">Listing  Two</A>) illustrates calling the
compiled program (called ssi_vis). The counter filename is passed to ssi_vis as an argument to
examp.shtml, either through an <I>href</I> call in another document, as in <a href="9618c.htm#0389_0208">Example 2(c)</A>, or directly when examp.shtml is invoked in <a href="9618c.htm#0389_0208">Example 2(d)</A>. When examp.shtml is processed, it appears on the
screen as in <a href="1997038a.htm">Figure 1</A>. Note that the count appears at the location of the
#exec command in examp.shtml.<P>

<h3>A CGI Access Counter</h3><P>

Using an ordinary CGI script as an access counter allows the code to be used by many different servers.
The drawback is that its output completely replaces the calling HTML file in the browser's window.<P>

For instance, assume that you have a CGI access-counter program called "viscount.c" (its compiled version
is called "viscount") that, like ssi_vis.c, takes a single argument, which is the name of the file holding the
counter. Then an HTML file could contain the line in <a href="9618c.htm#0389_0209">Example 3(a)</A>.
The CGI protocol dictates that viscount should generate a complete WWW page, which will replace the
original file in the browser's window. This is undesirable for access counters, since the author probably
wants the contents of the WWW page and the counter value to be on the screen together. The other drawback
of this approach is that the counter web page will appear only when the user clicks on the "Show Counter"
anchor string. <P>

A better approach is to embed the CGI call inside an <I>img</I> tag, as in <a href="9618c.htm#0389_0209">Example 3(b)</A>. One immediate advantage is that <I>img</I> tags are
executed automatically when a WWW page is loaded. In addition, the output from the script joins the original
page in the browser window without replacing it. Unfortunately, this output must be in a recognized image
format, such as GIF or JPEG.<P>

Further details on the CGI protocol can be found at http://hoohoo.ncsa.uiuc.edu/cgi, but we now have
enough information to develop a strategy for writing viscount.c. It will read in, increment, and update a
counter value in a way similar to ssi_vis.c, but will output the value as a GIF image. When the script is
called from an <I>img</I> tag, the GIF will be displayed automatically, without replacing the calling file.<P>

Before explaining the details of viscount.c, I'll briefly describe the gd graphics library, which is used to
generate the output image.<P>

<h3>The gd Graphics Library</h3><P>

The gd library (Version 1.2 at the time of writing) offers a set of extremely useful C data structures and
functions for manipulating GIFs, including functions for working with (colored) text, lines, polygons, and
circles. The library was developed by Thomas Boutell (boutell@boutell.com) for the Quest Protein Database
Center at Cold Spring Harbor Labs. gd can be downloaded via anonymous ftp as a compressed tar file from
isis.cshl.org in the subdirectory pub/gd.<P>

Most of the library features important for our purposes are illustrated in mk_err.c in <a href="9618c.htm#0389_0416">Listing  Three</A> (also at http://<P>
www.cs.mu.oz.au/~ad/code/counters/mk_err.c).<P>

mk_err.c takes two arguments, a string and a filename, and generates a GIF that is placed in
filename-err.gif. The image (which is meant to be used as an error message) contains the string, preceded
by "ERROR:", drawn in a large black font against a yellow background, complete with black border. For
instance, the call <I>mk_err &quot;use viscount?filename&quot; wrong-args</I> produces the file
wrong-args-err.gif; see <a href="1997038b.htm">Figure 2</A>.<P>

In mk_err.c, the <I>errstr</I> variable holds the input string preceded by "ERROR: ". The image being built,
<I>im</I>, is initialized using <I>gdImageCreate()</I>, which takes as its arguments the width and height of
the image. <I>im</I> is of type <I>gdImagePtr</I>, the key gd data structure for image representation.<P>

The image's background color is set by the first call to <I>gdImageColorAllocate()</I>. The second, third,
and fourth arguments of the function are the RGB (red, green, blue) values for the color (0 means off; 255
means full on). There are many utilities for working out these values; I used the UNIX utility xv. The second
call to <I>gdImageColorAllocate()</I> defines the color black, which is used to paint the border of the image.
The border is actually two rectangles (for a thickness of two pixels) drawn around the edge of the image.
<I>gdImageRectangle()</I> takes the x- and y-coordinates of the rectangle's upper-left corner as its second
and third arguments. Its fourth and fifth arguments define the lower-right corner.<P>

The call to <I>gdImageString()</I> is the most complicated--it specifies the font (<I>gdFontGiant</I>) and
locates <I>errstr</I> in the middle of the image. The starting coordinate is determined by accessing the
image's width (<I>im-&gt;sx</I>), the width of a font character (<I>gdFontGiant-&gt;w</I>), the image's
height (<I>im-&gt;sy</I>), and the height of a font character (<I>fdFontGiant-&gt;h</I>). The image is
written out to a file using <I>gdImageGif()</I>, which automatically saves it in GIF format.<P>

The gd library used for this example is located in the directory /home/staff/ad/gd1.2, and the header files
for general gd functions (gd.h) and the font (gdFontg.h) come from that directory. In addition, the
compilation of mk_err.c with gcc utilizes the -L option to specify the location of the library. The full call to
gcc is <I>gcc mk_err.c -o mk_err </I>-<I>L</I><I>/home/staff/ad/gd1.2 -lgd -lm</I>. It is necessary to
include both the gd and maths libraries.<P>

<h3>The viscount.c Program</h3><P>

At this point, we can begin coding the CGI script (viscount.c), which reads a counter from a file, outputs a
GIF representing the number, and stores the incremented counter back to the file. <a href="9618c.htm#0389_0417">Listing  Four </A>presents viscount.c, also available at
http://www.cs.mu.oz.au/ ~ad/code/counters/viscount.c. The compiled program, viscount, is called from
list.html, shown in <a href="9618c.htm#0389_0418">Listing  Five</A> (also
http://www.cs.mu.oz.au/~ad/code/counters/list.html). The important line in list.html is <I>&lt;img
src=&quot;http://www</I><I> </I><I>.cs.mu.oz.au/cgi-bin/viscount?pub</I><I>&quot;</I><I>&gt;</I>.
viscount treats its input argument as a filename and assumes (in a similar manner to ssi_vis) that the file
is in /home/ staff/ad/www_public/code/counters and ends with the .cnt extension. Also, as before, the
counter file must be writable by anyone and contain a single integer. In the example, if pub.cnt contains the
value 212 when list.html is invoked, then it will appear as in <a href="1997038c.htm">Figure 3</A>.<P>

A number of files and directories must be present in the directory specified in CNT_PATH. For the filename
input argument, there must be a corresponding .cnt file and  a GIF file (which can initially contain anything,
and must be writable by anyone). There are two directories: /numbers and /errs. /numbers must contain
ten GIF files--0.gif, 1.gif,...9.gif--each holding a GIF for the number in the title. These GIFs should be roughly
the same size as the values in XIMAG and YIMAG defined in viscount.c. The dimensions of the GIFs can be
calculated and adjusted using a tool such as xv. The /errs directory must contain GIF files holding error
messages, which are required because viscount can communicate with the user only by outputting a GIF.
These files can be easily constructed using mk_err.c.<P>

When invoked, viscount opens the counter file and reads the value into <I>count</I>. Note that a read error
is reported using <I>serv_err()</I>, which outputs a GIF to <I>stdout</I>. <I>serv_err()</I> utilizes
<I>write_gif()</I>, which uses UNIX file descriptors to output the GIF. Using stream I/O might seem a
reasonable alternative (for instance, using file pointers and functions like <I>printf()</I>); however, when I
tried this approach, the browser failed to display the image between 5 and 10 percent of the time. It seems
that reliable GIF output can only be guaranteed by using file descriptor-based functions.<P>

Once <I>count</I> has been given a value, <I>fill_digits()</I> pulls the number apart into its component
digits and assigns each to an element of the digits array. This array is passed to <I>concat_</I><I>
</I><I>images()</I>, which uses the GIFs from the /numbers subdirectory to build a single GIF
corresponding to the count value.<P>

The count image, <I>cnt_im,</I> is big enough to hold NUMSLOT digits in the x-direction, where the image
for each individual digit is XIMAGxYIMAG large. An added feature is a scaling factor for the overall
image.<P>

<I>cnt_im</I> is filled from the left with GIFs for the digit "0" until the start position of the left-most digit
in the digits array is reached. This ensures that <I>cnt_im</I> has a digit in all of its NUMSLOT positions.
Each digit of the digits array is represented in <I>cnt_im</I> by using the corresponding /numbers GIF,
loaded into <I>num_im</I>. <I>num_im</I> is built via a call to <I>load_image()</I>, which utilizes
<I>gdImageCreateFromGif()</I> to extract a gd-formatted image from the specified GIF file.<P>

<I>gdImageCopyResized()</I> is used to insert <I>num_im</I> into the right place in <I>cnt_im</I>, scaling
the loaded image so that it fits smoothly. The third and fourth arguments of <I>gdImageCopyResized()</I>
are the x- and y-coordinates in <I>cnt_im</I> where the upper-left corner of <I>num_im</I> will be placed.
The fifth and sixth arguments make up the upper-left starting coordinates in <I>num_im</I> (in other
words, all of <I>num_im </I>is drawn into <I>cnt_im</I>). The seventh and eighth arguments are the width
and height that <I>num_im</I> should be scaled to before insertion. The ninth and tenth arguments are its
original width and height.<P>

<I>cnt_im</I> is completed with a black border and saved to a GIF file whose name is the filename supplied
to viscount.c. This file is immediately read in by <I>print_gif()</I>, which transmits it to <I>stdout</I>, so
that it joins the HTML file in the browser window. The output of the GIF is preceded by a Content-type line
to signal that a GIF is being sent.<P>

<h3>A Brief Comparison</h3><P>

Viscount.c has two main advantages over the SSI-based approach used in ssi_vis.c. First, its use of images
allows the access-counter output to be more interesting than the text output from ssi_vis.c. For instance,
viscount.c uses different colored GIF images. A more fanciful variation might display the counter in the
form of a speedometer dial. This would require some major changes to <I>concat_images()</I>, but could be
accomplished with the line- and circle-drawing features of the gd library.<P>

Second, the CGI approach is more portable than the SSI encoding approach, since it is based on features
supported by more servers.<P>

The increased number of files needed to support image processing in the CGI approach is a disadvantage, but
it permits the style of the image to be adjusted. The code is also more complicated than that found in
ssi_vis.c, since it manipulates images.<P>

<P>

<P>

<P>

<h4><a name="0389_0207"><B>Example 1</B>: (a) Format of a typical SSI supported by the NCSA HTTPD server; (b) #exec executes a shell script; (c) executing the ssi_vis CGI
script.</h4><P>

<P>

<pre>(a)     &lt;!--#command arg1=&quot;value1&quot; arg2=&quot;value2&quot; ... --&gt;

(b)     &lt;!--#exec cmd=&quot;who | grep andrew&quot;  --&gt;

(c)     &lt;!--#exec cgi=&quot;/cgi-bin/ssi_vis&quot; --&gt;</pre>

<h4><a name="0389_0208"><B>Example 2: </B>(a) The argument of the ssi_vis script is pub; (b) the file examp.shtml contains this SSI command; (c) adding the argument expected by ssi_vis to examp.shtml when it is accessed; (d) invoking examp.shtml.</h4><P>

<pre>(a)     /cgi-bin/ssi_vis?pub

(b)     &lt;!--#exec cgi=&quot;/cgi-bin/ssi_vis&quot; --&gt;

(c)     &lt;a href=&quot;examp.shtml?pub&quot;&gt;Counter Example&lt;/a&gt;

(d)     netscape examp.shtml?pub
</pre>

<h4><a name="0389_0209"><B>Example 3:</B> (a) Building a CGI counter; (b) embedding the CGI call inside an img tag.</h4><P>

<pre>(a)     &lt;a href=&quot;http://www.cs.mu.oz.au/cgi-bin/viscount?pub&quot;&gt;Show Counter&lt;/a&gt;

(b)     &lt;img src=&quot;http://www.cs.mu.oz.au/cgi-bin/viscount?pub&quot;&gt;</pre>

<B>Figure 1:</B> Screen display produced when examp.shtml is processed.<P>

<B>Figure 2: </B>Output of the call mk_err &quot;use viscount?filename&quot; wrong-args.<P>

<B>F<a name="0389_03ed">igure 3: </B>Screen display produced when list.html is invoked.<P>

<a name="0389_0414"><H4>Listing  one</H4>
<pre>
/* ssi_vis.c  -- by Andrew Davison, (ad@cs.mu.oz.au), October 1995 */
/* Output a counter value to an HTML file using server-side includes. For 
example, inside examp.shtml, the count will replace the command:
&lt;!--#exec cgi=&quot;/cgi-bin/ssi_vis&quot; --&gt;. A counter filename argument (e.g. pub) 
must be supplied when the SSI HTML document is accessed. For example 
&lt;a href=&quot;examp.shtml?pub&quot;&gt;Counter Example&lt;/a&gt;. There should be a file called 
pub.cnt in CNT_PATH which is writable by anyone. The count is read from the 
counter file, output, incremented, and written back to the file.
*/
#include &lt;stdio.h&gt;

#define PATHLEN 70      /* max length of a filename with path */
#define CNT_PATH &quot;/home/staff/ad/www_public/code/counters&quot;
    /* location of the &quot;.cnt&quot; files; change to suit */
void serv_err(char *msg);
int main(int argc, char *argv[])
/* argv[1] contains the counter filename */
{
  char fnm[PATHLEN];
  FILE *fp;
  int count;
  if (argc != 2)
    serv_err(&quot;use ssi_vis?filename&quot;);
  else {
    sprintf(fnm, &quot;%s/%s.cnt&quot;, CNT_PATH, argv[1]);
    if ((fp = fopen(fnm, &quot;r&quot;)) == NULL)
      serv_err(&quot;counter file cannot be read&quot;);
    else {
      fscanf(fp, &quot;%d&quot;, &amp;count);
      fclose(fp);
      printf(&quot;%d&quot;, count);
      count++;
      if ((fp = fopen(fnm, &quot;w&quot;)) == NULL)
        serv_err(&quot;counter file cannot be updated&quot;);
      else {
        fprintf(fp, &quot;%d&quot;, count);
        fclose(fp);
      }
    }
  }
  return 0;
}
void serv_err(char *msg)
/* Output an HTML line reporting an error */
{
  printf(&quot;&lt;br&gt;&lt;b&gt;ERROR:&lt;/b&gt; %s.&lt;p&gt;\n&quot;, msg);
  exit(-1);
}

</pre>
<a name="0389_0415"><H4>Listing  Two</H4>
<pre>
&lt;!-- This example will only work with servers which support server side 
includes, such as the NCSA server. The server must also have been set 
up to process &quot;.shtml&quot; files. --&gt;

&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Simple Counter&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;Simple Counter&lt;/h1&gt;
&lt;br&gt;
You have accessed this page:
&lt;!--#exec cgi=&quot;cgi-bin/ssi_vis&quot; --&gt;
 times.&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;

</pre>
<a name="0389_0416"><H4>Listing  Three</H4>
<pre>
/* mk_err.c -- by Andrew Davison, (ad@cs.mu.oz.au), October 1995 */
/* Usage: mk_err &quot;string&quot; filename. Creates a GIF file called filename-err.gif
which contains the string preceded by &quot;ERROR: &quot;. The black text is in gd's 
giant font, with a yellow background. There is a black border. */

/* Makes use of the gd graphics library, 
by Thomas Boutell and the Quest Protein Database Center 
at Cold Spring Harbor Labs. 
COPYRIGHT 1994,1995 BY THE QUEST PROTEIN DATABASE CENTER 
AT COLD SPRING HARBOR LABS. */
/* compilation: gcc mk_err.c -o mk_err -L/home/staff/ad/gd1.2 -lgd -lm   */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &quot;/home/staff/ad/gd1.2/gd.h&quot;
#include &quot;/home/staff/ad/gd1.2/gdfontg.h&quot;

#define YIMAG   40      /* height of the gif image */
#define LENFACTOR  12   /* scaling factor for the gif's width */

int main(int argc, char *argv[])
/* arg[1] is the error string; arg[2] is the filename */
{
  char *errstr;
  int errlen;
  int black, yellow;
  gdImagePtr im;
  char *errfnm;
  FILE *fp;

  if (argc != 3) {
    printf(&quot;Usage: mk_err \&quot;string\&quot; filename\n&quot;);
    exit (-1);
  }
  errstr = (char *)malloc(sizeof(char)*(strlen(argv[1])+8));
  sprintf(errstr, &quot;ERROR: %s&quot;, argv[1]);
  errlen = strlen(errstr);

  im = gdImageCreate((LENFACTOR*errlen), YIMAG);
  /* yellow background */
  yellow = gdImageColorAllocate(im, 255, 255, 0);
  black = gdImageColorAllocate(im, 0, 0, 0);
  /* a black border */
  gdImageRectangle(im, 0, 0, (LENFACTOR*errlen)-1, YIMAG-1, black);
  gdImageRectangle(im, 1, 1, (LENFACTOR*errlen)-2, YIMAG-2, black);
  /* a black centered error string */
  gdImageString(im, gdFontGiant,
    im-&gt;sx / 2 - (errlen * gdFontGiant-&gt;w / 2),
    im-&gt;sy / 2 - gdFontGiant-&gt;h / 2,
    errstr, black);
  errfnm = (char *)malloc(sizeof(char)*(strlen(argv[2])+9));
  sprintf(errfnm, &quot;%s-err.gif&quot;, argv[2]);

  if ((fp = fopen(errfnm, &quot;wb&quot;)) == NULL)
    printf(&quot;Cannot write to %s gif file\n&quot;, errfnm);
  else {
    gdImageGif(im, fp);
    fclose(fp);
  }
  gdImageDestroy(im);
  return 0;
}

</pre>
<a name="0389_0417"><H4>Listing  Four</H4>
<pre>
/* viscount.c -- by Andrew Davison, (ad@cs.mu.oz.au), October 1995 */
/* viscount reads a counter from its input file, and builds a gif representing 
the counter. The gif is output, the counter is incremented, and written back 
to the file. The intention is that the gif will appear inside an IMG tag in a
WWW page. Usage: &lt;img src=&quot;http://www.cs.mu.oz.au/cgi-bin/viscount?pub&quot;&gt;
The 'viscount' script name must be followed by a &quot;?&quot; and the name of the file 
holding the access counter (i.e. &quot;pub&quot; in this case). This is assigned to 
countnm. The counter file is assumed to be in the directory CNT_PATH and be 
called &lt;countnm&gt;.cnt. There must also be a gif file called &lt;countnm&gt;.gif. Both
these files must be writable by anyone. The &lt;countnm&gt;.cnt file should 
initially contain the value 1. The &lt;countnm&gt;.gif file can initially contain 
any kind of picture. &lt;countnm&gt;.gif is built from a series of 'number' gifs
which should be in a subdirectory below CNT_PATH called /numbers. There should
also be an /errs subdirectory  holding gifs for possible 'viscount' errors.
A countnm gif can consist of at most NUMSLOTS digits.
*/
/* Makes use of the gd graphics library, by
   Thomas Boutell and the Quest Protein Database Center 
   at Cold Spring Harbor Labs.
   COPYRIGHT 1994,1995 BY THE QUEST PROTEIN DATABASE CENTER 
   AT COLD SPRING HARBOR LABS.
*/
/* compilation: gcc viscount.c -o viscount -L/home/staff/ad/gd1.2 -lgd -lm  */

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;     /* for write(), close(), read() */
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;      /* for creat(), open() */
#include &quot;/home/staff/ad/gd1.2/gd.h&quot;

#define PATHLEN 90      /* max length of a filename with path */
#define NUMSLOTS 4      /* maximum number of digits in the countnm gif */
#define BUFSIZE 512     /* size of chunk to be read from gif file */

/* the original size of a digit GIF is 50 by 60 (approximately) */
#define XIMAG   50
#define YIMAG   60

/* scale factor for the countnm gif */
#define SCALE  2 

#define CNT_PATH &quot;/home/staff/ad/www_public/code/counters&quot;
   /* location of &lt;countnm&gt;.cnt, &lt;countnm&gt;.gif, 
      the /number and /errs gifs subdirectories; change to suit */
void fill_digits(int cnt, int ds[], int *p);
void concat_images(int ds[], int dignum, char *cnm);
void load_image(gdImagePtr *im, int num);
void save_image(gdImagePtr im, char *cnm);
void print_gif(char *cnm);
void serv_err(char *errnm);
void write_gif(int fd);
void wstring(char *s);

int main(int argc, char *argv[])
/* argv[1] is the access counter filename */
{
  char *countnm;          /* full name of &quot;.gif&quot; file holding the count */
  char cntfnm[PATHLEN];   /* full name of &quot;.cnt&quot; file */
  FILE *cfp;              /* file pointer to &quot;.cnt&quot; file */
  int count;
  int digits[NUMSLOTS];
  int dignum = 0;

  if (argc != 2)
    serv_err(&quot;wrong-args&quot;);
  countnm = argv[1];
  sprintf(cntfnm, &quot;%s/%s.cnt&quot;, CNT_PATH, countnm);
  if ((cfp = fopen(cntfnm, &quot;r&quot;)) == NULL)
    serv_err(&quot;cnt-noread&quot;);
  else {
    fscanf(cfp, &quot;%d&quot;, &amp;count);
    fclose(cfp);
  }
  fill_digits(count, digits, &amp;dignum);
  concat_images(digits, dignum, countnm);
  print_gif(countnm);

  count++;
  if ((cfp = fopen(cntfnm, &quot;w&quot;)) == NULL)
    serv_err(&quot;cnt-noupdt&quot;);
  else {
    fprintf(cfp, &quot;%d&quot;, count);
    fclose(cfp);
  }
  return 0;
}
void fill_digits(int cnt, int ds[], int *p)
/* Divide cnt into its component digits and store them in the ds[] array. e.g.
for the number &quot;214&quot;, &quot;2&quot; is stored in ds[0], &quot;1&quot; in ds[1], etc */
{
  if (cnt !=0) {
    fill_digits(cnt/10, ds, p);
    if ((*p) &lt; NUMSLOTS)
      ds[*p] = cnt%10;
    else
      serv_err(&quot;cnt-toobig&quot;);
    (*p)++;
  }
}
void concat_images(int ds[], int dignum, char *cnm)
/* Build the counter image by first filling it with '0' gifs upto the beginning
of the number. Then add the gif corresponding to each digit in the ds[] array.
Finish by adding a black border.
*/
{
  int x;
  int im_pos = 0;
  gdImagePtr num_im, cnt_im;
  int black;
  int xsize = SCALE*XIMAG;    /* x size of the counter image */
  int ysize = SCALE*YIMAG;    /* y size of the counter image */

  cnt_im = gdImageCreate((xsize*NUMSLOTS), ysize);
  black = gdImageColorAllocate(cnt_im, 0, 0, 0);

  /* If necessary, fill from the left with '0' gifs */
  if (dignum &lt; NUMSLOTS)
    for (x = NUMSLOTS-1; x  &gt;= dignum; x--) {
      load_image(&amp;num_im, 0);
      gdImageCopyResized(cnt_im, num_im, im_pos*xsize, 0, 0, 0,
                           xsize, ysize, num_im-&gt;sx, num_im-&gt;sy);
      im_pos++;
      gdImageDestroy(num_im);
    }
  /* Now add the gifs for the ds[] array values */
  for (x=0; x &lt; dignum; x++) {
    load_image(&amp;num_im, ds[x]);
    gdImageCopyResized(cnt_im, num_im, im_pos*xsize, 0, 0, 0,
                       xsize, ysize, num_im-&gt;sx, num_im-&gt;sy);
    im_pos++;
    gdImageDestroy(num_im);
  }
  /* a black border */
  gdImageRectangle(cnt_im, 0, 0, xsize*NUMSLOTS-1, ysize-1, black);
  gdImageRectangle(cnt_im, 1, 1, xsize*NUMSLOTS-2, ysize-2, black);

  save_image(cnt_im, cnm);
  gdImageDestroy(cnt_im);
}
void load_image(gdImagePtr *im, int num)
/* Load the 'number' gif corresponding to num into an image structure. The gif
should be in numbers/num.gif */
{
  char nm[PATHLEN];
  FILE *fp;
  sprintf(nm, &quot;%s/numbers/%d.gif&quot;, CNT_PATH, num);
  if ((fp = fopen(nm, &quot;rb&quot;)) == NULL)
    serv_err(&quot;gif-noread&quot;);
  else {
    *im = gdImageCreateFromGif(fp);
    fclose(fp);
  }
}
void save_image(gdImagePtr im, char *cnm)
/* Save the counter image into a gif file called cnm.gif */
{
  char nm[PATHLEN];
  FILE *fp;
  sprintf(nm, &quot;%s/%s.gif&quot;, CNT_PATH, cnm);
  if ((fp = fopen(nm, &quot;wb&quot;)) == NULL)
    serv_err(&quot;gif-nowrite&quot;);
  else {
    gdImageGif(im, fp);
    fclose(fp);
  }
}
void print_gif(char *cnm)
/* Load and print the gif file called cnm.gif. The intention is that the image
will appear inside an IMG tag in a WWW page. */
{
  char nm[PATHLEN];
  int fd;
  sprintf(nm, &quot;%s/%s.gif&quot;, CNT_PATH, cnm);
  if((fd = open(nm, O_RDONLY)) == -1)
    serv_err(&quot;gif-noread&quot;);
  else { 
    wstring(&quot;Content-type: image/gif\n\n&quot;);
    write_gif(fd); 
    close(fd);
  }
}
void serv_err(char *errnm)
/* Output an error gif to the HTML page. Assumes the existence of the file 
/errs/errnm-err.gif, otherwise it quietly dies. */
{
  char nm[PATHLEN];
  int fd;
  sprintf(nm, &quot;%s/errs/%s-err.gif&quot;, CNT_PATH, errnm);
  if((fd = open(nm, O_RDONLY)) != -1) {
    wstring(&quot;Content-type: image/gif\n\n&quot;);
    write_gif(fd);
    close(fd);
  }
  exit(-1);
}
void write_gif(int fd)
/* Use read() to access the file with the fd file descriptor. */
{
  char buffer[BUFSIZE];
  int nread;
  while ((nread = read(fd, buffer, BUFSIZE)) &gt; 0)
    if (write(STDOUT_FILENO, buffer, nread) == -1)
      exit(0);
}
void wstring(char *s)
/* Write the s string to stdout */
{
  if (write(STDOUT_FILENO, s, strlen(s)) == -1)
    exit(0);
}

</pre>
<a name="0389_0418"><H4>Listing  Five</H4>
<pre>
&lt;html&gt;
&lt;head&gt;
&lt;TITLE&gt;Published Stuff in 1995&lt;/TITLE&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;H1&gt;Published Stuff in 1995&lt;/H1&gt;

The access count for this page is:&lt;p&gt;
&lt;img src=&quot;http://www.cs.mu.oz.au/cgi-bin/viscount?pub&quot;&gt;
&lt;p&gt;

Further information can be found by clicking on its title (although
I haven't got round to that for all of them). &lt;p&gt;

&lt;ul&gt;
&lt;li&gt; Lee, J., and Davison, A. 1995.
&quot;The BeBOP System&quot;, &lt;i&gt;ACSC'95,
18th Australasian Computer Science Conf.&lt;/i&gt;, Adelaide,
South Australia, January. &lt;p&gt;

&lt;li&gt; Davison, A. (editor). 1995a. 
&lt;i&gt;&lt;a href=&quot;../../humour/humour.html&quot;&gt;Humour The Computer&lt;/a&gt;&lt;/i&gt;,
The MIT Press, May. &lt;p&gt;

&lt;li&gt; Davison, A. 1995b. 
&quot;&lt;a href=&quot;../../paper-links/forms.html&quot;&gt;Programming with HTML Forms&lt;/a&gt;&quot;,
&lt;i&gt;Dr. Dobb's Journal&lt;/i&gt;, Vol. 20, No. 6, June, p.70-75. &lt;p&gt;

&lt;li&gt; Davison, A. 1995c. 
&quot;&lt;a href=&quot;../../paper-links/images.html&quot;&gt;Clickable Images in HTML&lt;/a&gt;&quot;,
&lt;i&gt;Dr. Dobb's Journal&lt;/i&gt;, Vol. 20, No. 9, September,
p.18-27. &lt;p&gt;

&lt;li&gt; Loke, S.W. and Davison, A. 1995.
&quot;Logic Programming and the World Wide Web&quot;, &lt;i&gt;INAP-95:
The 8th Symp. and Exhibition of Industrial Applications
of Prolog&lt;/i&gt;, Tokyo, Japan, October. The paper in 
&lt;code&gt;gzip&lt;/code&gt; compressed
postscript format (71K) is available
&lt;a href=&quot;http://www.cs.mu.oz.au/~swloke/papers/paper1.ps.gz&quot;&gt;here&lt;/a&gt;.&lt;p&gt;

&lt;li&gt; Davison, A. 1995d.
&quot;Teaching C after Miranda&quot;, &lt;i&gt;FPLE'95:
Symp. on Functional Programming Languages in Education&lt;/i&gt;,
Mook, The Netherlands, December. &lt;p&gt;

&lt;li&gt; Davison, A. 1995e.
&quot;&lt;a href=&quot;../../paper-links/animate.html&quot;&gt;Animation in Netscape&lt;/a&gt;&quot;,
To appear in &lt;i&gt;Dr. Dobb's Journal&lt;/i&gt;. &lt;p&gt;

&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;
</pre>


</BODY></HTML>
