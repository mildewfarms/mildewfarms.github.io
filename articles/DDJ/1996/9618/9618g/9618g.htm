<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAIDInc. -->
<TITLE>Web Development: Your Own Netscape...</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>Your Own Netscape Plug-in Installer </h1><P>

<P>

<P>

<h2>It's small, fast, and flexible</h2><P>

<P>

<h3>Mark Carolan</h3><P>

<P>

<P>
<i>Mark is principal developer at HeadsOff Software and can be contacted
at mark@headsoff.com.</i></p><hr><P>

<P>

PlugInstall, the application I present in this article, lets you install
plug-ins for Netscape Navigator. The main reason I wrote PlugInstall
(rather than using a commercial installer) was file size--I needed the
smallest possible package, since the delivery medium was to be the
Internet. Also, anything but the simplest installation routine required
knowledge of the commercial installer's scripting language. I felt that
I'd already had to learn more proprietary scripting languages than I'd
ever wanted to. Writing more than about five lines of logic is always
going to be easier in a familiar programming language (in this case
C/C++). More specifically, the program<P>

<P>
<ul>
<li>Searches the registry for Navigator's Program directory.</li>
<li>Gets the user's okay to go ahead with a disk scan.</li>
<li>Scans specified disks in a separate thread, checking for other
unregistered or deregistered copies of Navigator, while allowing users
to bypass this stage at any point.</li>
<li>Presents all the Navigator program locations, allowing users to
choose which are to be plug-in destinations.</li>
<li>Accepts user instructions to abort the process or to proceed with
the installation.</li>
<li>Installs the files and updates the Registry with user approval.</li>
</ul>
Although I've targeted this tool at plug-in installation, you can easily
modify it into a general Windows 95-friendly application or extension
installer/uninstaller. The parts of the program that are
Netscape-specific are obvious. Since Netscape's installer does not
provide all the information necessary for other software to get complete
information on its components, a couple of possible conditions must be
taken into account. In time, when installation packages conform more
closely to Windows 95 Registry guidelines, the process will become
simpler.<P>

Compared to the simple text-line .INI settings in 16-bit Windows,
installation routines for Windows 95 require handling the system
Registry. The Windows 95 Registry is extremely powerful and flexible,
allowing any application or module to "know" what is going on in the
system, and what applications or modules it can communicate with. For
all its power, however, the Registry is a fairly finicky API, not what
I'd consider the fun part of application development. <P>

Uninstallation is accomplished by updating a particular section of the
Registry, and enabling the program to accept a command-line argument
from the uninstall control panel to run the uninstall routine.<P>

The program is written in C, although it needs C++ compilation because
it uses an external utility class and some local variable declarations.
There are no special project-compilation requirements, except for the
need to link with Version.lib. Although the supplied project files are
Visual C++ 4.1, there are no 4.1-specific requirements, and it was
actually a port from a working Visual C 2.0 project.<P>

<h3>How PlugInstall Works </h3><P>

How PlugInstall scans the disk is central to how the program works. The
search is important in this case, as any updates to Netscape (installing
new or alternative versions, for example) overwrite the Registry
entries, leaving the old application orphaned. They are still usable,
but the only sure way of finding them is dredging the user's disks. <P>

I first considered a directory-locator dialog box for this (as is done
by many other plug-in installers), but decided this would defeat my
purpose--to make it easy for novice Navigator users to get the new
plug-in working, and to alert them to any other deregistered copies of
Netscape in the system. If users aren't aware of other copies, there's a
good chance the plug-in will go into the officially registered
Navigator's Program\Plugins directory, instead of a more frequently used
copy. Since each copy of Navigator has its own private plug-ins folder,
users could be left wondering why the newly installed plug-in doesn't
work, when it's probably residing within another Navigator's plug-ins
folder. <P>

Furthermore, a directory-locator dialog box is hardly the easiest way to
do a manual disk search. The automated search routine is general
purpose, but could easily be optimized for specific tasks (you could,
for example, eliminate a few system locations on the boot disk as search
targets, although there's nothing in most install routines to prevent
novice users from putting their application in the system directory
along with their OCX collection). In other applications of PlugInstall,
if you knew that the host application had a more-thorough registry
entry, the broad disk scan should not be necessary.<P>

The other significant aspects of PlugInstall include<P>

<P>
<ul>
<li>Updating the Registry with information required by the Windows 95
control panel's software install/remove option.</li>
<li>Updating the Registry with information required by the plug-in to
locate its perpetual cache.</li>
<li>Installing the plug-in to the locations specified by the user.</li>
<li>Employing <I>VerInstallFile()</I> to carry out basic version
checking.</li>
</ul>
<P>

I use a string-table resource for most of the variable parameters,
enabling a simple and fast resource recompile and link to generate
alternate versions. With minimal effort, the string arrays indicating
Netscape specifics, as well as Netscape's directory-locator key set,
could be made general purpose by being sourced from the string table or
an external ASCII file. These components are easy to identify. <a href="9618g.htm#039c_021c">Listing One</A>, for instance, includes
containers for registry-search parameters and entries, which are loaded
by using the resource-load routines in<a href="9618g.htm#039c_021d">
Listing Two</A>.<P>

These are initialized within the program body, and probably remain
reasonably consistent through each plug-in version; see <a href="9618g.htm#039c_021e">Listing Three</A>.<P>

I've listed the first field as "preset," and the rest are assumed to be
installer specified. PlugInstall takes care of accommodating existing
entries and creating new keys where required.<P>

<a href="9618g.htm#039c_021f">Listing Four</A> is the key set specified
by Netscape to identify the Netscape.exe program location, while <a href="9618g.htm#039c_0220">Listing Five</A> is the uninstall entry
location specified by Microsoft. Next, the registry needs a couple of
bits of information on how to examine the keys; see <a href="9618g.htm#039c_0221">Listing Six</A>.<P>

Although it works fine,<a href="9618g.htm#039c_0221"> Listing Six</A> is
not strictly correct procedure with respect to the initialization of
<I>n</I>, which is declared in the initialization of a <I>for(;;)</I>
loop but referenced again outside the body of the loop.<P>

<I>RegQueryValue</I> and <I>RegSetValue</I> are the primary methods for
accessing the Registry and getting/setting information relevant to the
plug-in. For the recursive disk scan, a separate thread is spawned
simply to watch for a cancellation by the user (it would be a bit
unresponsive if it was sharing processing time on the same thread with a
recursive function); see <a href="9618g.htm#039c_0222">Listing
Seven</A>.<P>

While one thread does the scanning, the other handles dialog response.
This is certainly much easier than having to rig up your own
time-sharing calls. <a href="9618g.htm#039c_0223">Listing Eight</A> is
the actual function for getting the dialog going.<P>

These threads don't need to chatter a lot, so a couple of Boolean
variables do the trick: CONTINUE and CANCEL_COMMAND. While the button
offers immediate response to the user, the CANCEL_COMMAND flag is
checked at the head of the recursive function and once more within a
work loop, as in <a href="9618g.htm#039c_0224">Listing Nine</A>. This is
not an optimized search routine, and you probably have your own, more
efficient routine you can substitute.<P>

The routines for the actual installation come from Version.lib; see<a href="9618g.htm#039c_0225"> Listing Ten</A>.<P>

<h3>The String List Manager</h3><P>

The other handy utility included in this package is a string list
manager for interfacing data with a Windows multiselection listbox. The
<I>StringList</I> class is initialized in the last stage of the install
procedure, after the disk scan. Users can select multiple destinations
for the plug-in. These selections are fed into the <I>StringList</I> and
passed to the install routine; see <a href="9618g.htm#039c_0226">Listing
Eleven</A>.<P>

One of the most frequently used functions in PlugInstall is
<I>MakeKey()</I> (<a href="9618g.htm#039c_0227">Listing Twelve</A>),
which is worth discussing since it is compact and illustrates basic
Registry calls.<P>

Traversing Registry key trees is obviously made much simpler by
packaging a few general-purpose functions for getting and sending
information.<P>

<h3>Uninstalling</h3><P>

For space efficiency, the same program should be able to respond to a
call to perform an uninstall operation. After making the Registry entry
for the uninstall program name, path, and command-line options, there is
enough information available for the Windows 95 Control Panel to call
the program--when the user selects it in the "remove programs" dialog
box--and pass it a command-line argument that puts it into uninstall
mode; see <a href="9618g.htm#l13">Listing Thirteen</a>.<P>

Much of the setup code is shared between the install and uninstall
routines, so the uninstall switch is checked once all the relevant
information has been obtained.<P>

As far as the final cleanup goes, there are many possible approaches,
but for our purposes, the safest is to remove any installed software and
registry entries, then notify the user that they are free to remove the
named directory (along with its contents). A useful routine to add here
would be a readme-file generator. If the user doesn't get around to
deleting the folder immediately, their memory could be refreshed with
the contents of a contextual readme file created and dropped into
PlugInstall's folder just before PlugInstall quits. This readme file
would have information on the purpose of the folder's contents (which,
by then, may be swollen with cached data), the last operation performed
(in this case, an uninstall operation), and the options available from
here, including a reinstall or a final trashing of the folder.<P>

There's nothing particularly complex about the install/uninstall
procedures or the necessary Registry accesses; in fact, it's probably
one of the simplest routines you'll ever write. When your mind is on the
main job of delivering reliable software, negotiating with a necessarily
pedantic Registry is a job that most of us would rather knock over with
as little fuss as possible. Hopefully, the routines described here
(along with complete project makefile and source code in Visual C++ 4.1
format (available electronically) will help you get on with the main
job.<P>

One small modification, necessary for some versions of Netscape, sits at
the end of the install location Registration query; see Listing
Fourteen. This simply appends the subpath "Program" (tagged as
<I>programID</I>) if it is not already there, since, in some cases, the
path only points as far as "\Navigator\", whereas Netscape.exe actually
sits one level deeper. To make the installer more general, specific
check routines like this could be packaged into your own polymorphic
handlers within a drop-in .DLL or .COM object. The .COM format is
perfect for this, as it has built-in support for polymorphism (enabling
you to specify interface groups and retrieve them with
<I>QueryInterface()</I>), so the code in the main installer can remain
static.<P>

For my purposes, I call the final compiled program "Setup.exe" for
obvious reasons. For space considerations, I used WinZip SE to generate
the self-extracting file and specified Setup.exe as the routine to
execute after decompression. Admittedly, the current production version
of WinZip SE is a little dated, with no support for long filenames
(which is a shame, since you'd probably specify "\Program Files\Your
Company\Your Product\" as the default extraction location), but it is
certainly compact, adding a minimal amount to the original ZIP file.<P>

<h3>Conclusion</h3><P>

PlugInstall is not a substitute for comprehensive commercial packages
like InstallShield, which are more appropriate for CD-based productions.
But with current Internet-based delivery, it harks back a little to the
early days of PC programming when every kilobyte counted.<P>

<P>

<P>

<P>

<a name="039c_021c"><H4>Listing  One</H4>
<pre>
char    version[REG_STRING], module[REG_STRING], 
        company[REG_STRING], program[REG_STRING],
        InstallSubdir[REG_STRING], 
        programID[REG_STRING], SearchFile[REG_STRING};

</pre>
<a name="039c_021d"><H4>Listing  Two</H4>
<pre>
LoadString(AppInstance, IDS_MODULE, module, REG_STRING);
LoadString(AppInstance, IDS_COMPANY, company, REG_STRING);
LoadString(AppInstance, IDS_PROGRAM, program, REG_STRING);
LoadString(AppInstance, IDS_VERSION, version, REG_STRING);
LoadString(AppInstance, IDS_INSTALLSUBDIR, InstallSubdir, REG_STRING);
LoadString(AppInstance, IDS_PROGRAMID, programID, REG_STRING);
LoadString(AppInstance, IDS_SEARCHFILE, SearchFile, REG_STRING);

</pre>
<a name="039c_021e"><H4>Listing  Three</H4>
<pre>
char    *pathsReg[] =
{   &quot;SOFTWARE&quot;, // preset
    company,    // your company
    program,    // your product
    &quot;Paths&quot;     // your private registry info
};
char    *regEntry[] = 
{   &quot;SOFTWARE&quot;, 
    company,
    program,
    &quot;Cache&quot;     // more private registry info
};


</pre>
<a name="039c_021f"><H4>Listing  Four</H4>
<pre>
char    *sections[] = 
{   &quot;Software&quot;, &quot;Netscape&quot;, &quot;Netscape Navigator&quot;, &quot;Main&quot;, &quot;Install Directory&quot; 
};

</pre>
<a name="039c_0220"><H4>Listing  Five </H4>
<pre>
char    *uninstall[] =
{   &quot;SOFTWARE&quot;, &quot;Microsoft&quot;, &quot;Windows&quot;, &quot;CurrentVersion&quot;, &quot;Uninstall&quot;
};

</pre>
<a name="039c_0221"><H4>Listing  Six</H4>
<pre>
hkey        = HKEY_CURRENT_USER;
samDesired  = KEY_ENUMERATE_SUB_KEYS;
phkResult   = 0;

for (int n = 0; n &lt; sectionElements - 1; n++)
{
    res = RegOpenKeyEx( hkey, sections[n], 0, samDesired,  &amp;phkResult );
    if (phkResult)
        hkey = phkResult;
    else
        break;
}
res = RegQueryValueEx(  hkey, sections[n], NULL, &amp;type, buffer, &amp;bufferSize );

</pre>
<a name="039c_0222"><H4>Listing  Seven</H4>
<pre>
hThread = CreateThread( NULL, 0, (LPTHREAD_START_ROUTINE)DialogThread, 
                                                 (void*) &amp;ds, 0, &amp;dwThreadId);

while (!CONTINUE)
    Sleep(0);
if (!CANCEL_COMMAND)
    FindFile(&amp;pathList, SearchFile);
CANCEL_COMMAND = CONTINUE = FALSE; // reset
dbRes = DialogBoxParam(hInstance,
            MAKEINTRESOURCE(IDD_DIALOG1), NULL,
                 (DLGPROC)IntroDialog, (LPARAM)&amp;pathList);
if (CANCEL_COMMAND)
    return 0;
COMPLETE = TRUE;

</pre>
<a name="039c_0223"><H4>Listing  Eight</H4>
<pre>
DWORD DialogThread(LPDWORD dw)
{           
    DLGSTRUCT *dlg = (DLGSTRUCT*) dw;
    int dbRes = DialogBox(  AppInstance,  MAKEINTRESOURCE(dlg-&gt;dlgRes),
                                NULL, (DLGPROC)dlg-&gt;dlgProc);
    ExitThread(0);
    CONTINUE = TRUE;
    return 0;
}

</pre>
<a name="039c_0224"><H4>Listing  Nine</H4>
<pre>
void RecurseFileSearch(const char *dirPath, StringList *sl, 
                                                      const char *fileName)
{
    HANDLE      h;
    BOOL            searchResult = TRUE;
    char            *bogusFile = &quot;*.*&quot;;
    char            local[MAX_PATH];
    WIN32_FIND_DATA     findData;
    DWORD       attr;

    // Did user cancel out in other thread?
    if (CANCEL_COMMAND)
        return;
    strcpy(local, dirPath);
    if (local[strlen(local) - 1] != '\\')
        strcat(local, &quot;\\&quot;);
    strcat(local, bogusFile);
   searchResult = (BOOL) 
        ((h = FindFirstFile(local, &amp;findData)) != (HANDLE)0xffffffff);
    while (searchResult)
    {
        if (CANCEL_COMMAND) // check again, as some time has elapsed
        {
            FindClose(h);
            return;
        }
        local[strlen(local) - strlen(bogusFile)] = 0;
        strcat(local, findData.cFileName);
        attr = GetFileAttributes(local);
        SetDlgItemText(WaitDlg, IDC_WAITINFO, local);
        
        if ((attr &amp; FILE_ATTRIBUTE_DIRECTORY) &amp;&amp; 
             (*findData.cFileName != '.'))
            RecurseFileSearch(local, sl, fileName);
        else if (CompareFile(local, fileName))
        {
            strcpy(local, dirPath); // refresh path info
            strcat(local, &quot;\\&quot;);
            if (sl-&gt;FindIndex(local) == 0)
                sl-&gt;Insert(local);  
        }
        strcpy(local, dirPath); // refresh path info
        if (local[strlen(local) - 1] != '\\')
            strcat(local, &quot;\\&quot;);
        strcat(local, bogusFile);
        searchResult = FindNextFile(h, &amp;findData);
    }
    FindClose(h);
}

</pre>
<a name="039c_0225"><H4>Listing  Ten</H4>
<pre>
BOOL InstallFile(char *szSrcDir, char *szDestDir, char *szSrcFileName)
{
    char        szTmpFile[MAX_PATH];
    UINT        uTmpFileLen;
    int         res;

    CreateDirectory(szDestDir, NULL);
    uTmpFileLen = (unsigned)MAX_PATH;   // &lt;-size of szTmpFile

    res = VerInstallFile(   0, szSrcFileName, szSrcFileName, szSrcDir,
                szDestDir, &quot;&quot;, szTmpFile, &amp;uTmpFileLen );
    if (res== 0)
    {
        DeleteFile(szTmpFile);
        return TRUE;
    }
    else if (res &amp; VIF_SRCOLD)
        MessageBox(GetFocus(),  &quot;The module you are trying to install &quot;
                    &quot;is older than that already installed.&quot;, 
                    &quot;Bailing out...&quot;, 
                    MB_OK | MB_ICONHAND);
   else if (res &amp; VIF_FILEINUSE)
        MessageBox(GetFocus(),  &quot;The old file is still in use. &quot;
                                        &quot;Quit Netscape first.&quot;, 
                    &quot;Bailing out...&quot;, 
                    MB_OK | MB_ICONHAND);
    . . .

</pre>
<a name="039c_0226"><H4>Listing  Eleven</H4>
<pre>
BOOL CALLBACK IntroDialog( HWND  hwndDlg, UINT  uMsg, WPARAM  wParam,
                                                LPARAM  lParam )
{
    static      StringList *pl;
    char        pathStr[MAX_PATH];
    int     nBuffer[512];
    int     nSelItemsInBuffer, nSelItems, i;

    MainWin = hwndDlg;
    switch (uMsg)
    {
         case WM_INITDIALOG:
         pl = (StringList *)lParam;
         pl-&gt;FillListBox(GetDlgItem(hwndDlg, IDC_LIST1));
         SetDlgItemText(hwndDlg, IDC_REGISTEREDPATH, PathBuffer);
         SendMessage(GetDlgItem(hwndDlg, IDC_LIST1), LB_SETSEL, TRUE, 
                (LPARAM) 0);
           CenterWindow(hwndDlg, GetDesktopWindow());
               return TRUE;
        ...

</pre>
<a name="039c_0227"><H4>Listing  Twelve</H4>
<pre>
BOOL MakeKey( HKEY hkey, char *regEntry[], int sectionElements,
         char *newKey[], int newElements, char *item, char *val)
{
    LPBYTE  bytePtr;
    DWORD   createStatus;
    char    *parentKey;
    int     n, res;

    HKEY    phkResult   = 0;
    REGSAM  samDesired  = KEY_ALL_ACCESS;

    for (n = 0; n &lt; sectionElements; n++) 
    {
        res = RegOpenKeyEx( hkey, regEntry[n], 0, samDesired, &amp;phkResult );
        if (phkResult)
            hkey = phkResult;
        else
            return FALSE;
    }
    if (res != ERROR_SUCCESS)
        return FALSE;
    n--;
    parentKey = regEntry[n];
    for (n = 0; n &lt; newElements; n++)

   {
        hkey = phkResult;
        res = RegCreateKeyEx(   hkey, newKey[n], 0, parentKey,
                    REG_OPTION_NON_VOLATILE, samDesired,
                    NULL, &amp;phkResult, &amp;createStatus);
        if (phkResult)
        {
            hkey = phkResult;
            parentKey = newKey[n];
        }
        else
            return FALSE;
    }
    if (res != ERROR_SUCCESS)
        return FALSE;

    bytePtr = (unsigned char*) val;
    res = RegSetValueEx(hkey, item, 0, REG_SZ, bytePtr, strlen(val) + 1);
    if  (res != ERROR_SUCCESS)
        return FALSE;
    else
        return TRUE;
}

</pre>
<H4><a name="l13">Listing  Thirteen</H4>
<pre>
    // the uninstall command line switch
    if (strstr(lpszCmdLine, &quot;-u&quot;))
        REMOVE = TRUE;
</pre>
<H4><a name="l14">Listing  Fourteen</H4>
<pre>
buffPtr = (char*)buffer;  // contains retrieved path to &quot;Navigator&quot; directory
                          // conversions are to avoid compile warnings when 
                          // moving between signed and unsigned char pointers
if (res == ERROR_SUCCESS)
    AppendDirectory(buffPtr, programID);
else
    *buffer = 0;
</pre>


</BODY></HTML>
