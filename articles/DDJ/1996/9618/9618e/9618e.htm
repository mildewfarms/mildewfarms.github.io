<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>Web Development: Networking With Java</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>Networking with Java</h1><P>

<P>

<P>

<h2>Client/server development using the java.net package</h2><P>

<P>

<h3>Anil Hemrajani</h3><P>

<P>

<P>
<i>Anil currently provides software engineering and training consulting services to a Fortune 500
corporation in McLean, VA. He can be contacted at anil@patriot.net or via http://
www.patriot.net/users/anil/.</i></p><hr><P>

<P>

Conceptually, programming for the Internet is fairly simple: You have two processes that communicate
with each other via sockets and exchange data using a certain protocol. One of these two processes can
generally be identified as a client and the other as the server. One example of an Internet client/server
paradigm is the combination of a web-browser client and a web server using HTTP to exchange data with
each other.<P>

Server applications such as HTTP usually listen to an assigned port on a host machine for incoming requests
from clients. Upon satisfying a request, the server goes back to listening to its designated port to process
the next request from a client. Clients connect to the server by specifying a host name (or an IP address)
and an optional port number that the server is listening to on that host (HTTP servers generally listen to
port 80 on a host).<P>

Java provides the necessary tools for developing client and server applications for the Internet. All the
classes you need for communications over the Internet are provided in the java.net package (class library).
java.net comes bundled with classes for socket programming, datagrams, and helper classes that represent
Internet addresses and URLs. Some of these classes include <I>ServerSocket</I>, <I>Socket</I>,
<I>DatagramPacket</I>, <I>DatagramSocket</I>, <I>InetAddress</I>, <I>URL</I>, and
<I>URLConnection</I>.<P>

<h3>Sockets</h3><P>

Socket programming is conceptually similar to programming with files: You open a connection to a socket,
read and/or write to it using streams of bytes, and close the connection when done. Although socket
programming is more dynamic in nature than file programming (because it involves communication between
two independent processes), both generally require reading and/or writing data in some form or
another.<P>

Java provides two platform-independent classes for socket communication, <I>Socket</I> and
<I>ServerSocket</I>, which can be used to develop client and server applications. Data is exchanged
between the client and server application using input and output streams of bytes. Once a connection is
established, a new <I>Socket</I> object is constructed, which provides input and output streams to the
socket on the other end of the two-way socket connection.<P>

<a href="19970393.htm">Figure 1</A> is a client application that uses sockets to send SQL queries to a
server application and receive results from it. <a href="9618e.htm#0392_020f">Listings One</A> and
<a href="9618e.htm#0392_0210">Two </A>provide the source code for both applications. <a href="19970395.htm">Figure 2</A> describes how these two applications interact. Basically, the client
applet/application (javaSQL) sends SQL queries to an intermediate server application (javaSQLd) which, in
turn, queries a database and forwards the query results back to the client. The protocol used by these two
applications is simple: The client sends five parameters (server, user, password, database, and SQL
statement) as tokens separated by the "|" character (see <a href="9618e.htm#0392_0211">Example 1</A>) with "\0" at the end of the data to mark the end of
input; the server simply sends back the query results.<P>

The socket-related source code in the client and server applications is similar. The main difference is in
how a <I>Socket</I> object is constructed on each side. On the server side, two steps are required to get a
<I>Socket</I> object. The first step, required only once in a program, is to create a <I>ServerSocket</I>
object with a port number to listen to; a value of "0" can be used to connect to an anonymous port. The
second step is to use the <I>accept</I> method to accept a connection request from a client. The
<I>accept</I> method waits (blocks) until a connection is established. Once a connection is made, a
<I>Socket</I> object is returned by the <I>accept</I> method, which is essentially a reference to the
socket on the client side of the two-way socket connection. It is common to put the call to the <I>accept</I>
method in a <I>while</I> loop so multiple client requests can be handled (since socket connection requests
are queued, multiple requests would be processed sequentially).<a href="9618e.htm#0392_0212">
Example 2 </A>(from<a href="9618e.htm#0392_0210"> Listing Two</A>) demonstrates this.<P>

Clients connect to a server by creating a new <I>Socket</I> object with the required parameters pointing to
the location of the server socket. The <I>Socket</I> class provides two ways of constructing a new
<I>Socket</I> object, one by using an <I>InetAddress</I> object and port number, the other by using the
host name and a port number. <a href="9618e.htm#0392_0213">Example 3(a)</A> (from<a href="9618e.htm#0392_020f"> Listing One</A>) creates a socket connection to the javaSQLd server
application using the host name and port number obtained from the screen. Once a <I>Socket</I> object is
successfully created, an input and output stream can be obtained for receiving and sending data to the
program on the other end of the socket connection (see <a href="9618e.htm#0392_0213">Example
3(a)</A>). Reading and writing to streams can be achieved by using the various forms of the <I>read</I>
and <I>write</I> methods available in the <I>java.io.InputStream</I> and <I>java.io.OutputStream</I>
classes. These lines let you read and write one character at a time:<P>

<P>

<I>int onechar;</I>
<I>onechar = i.read();</I>
<I>o.write((char)onechar);</I>
<P>

Additionally, there are other forms of <I>Input</I>/<I>Output</I> stream classes available in the java.io
package that can be constructed using an existing <I>InputStream</I> or <I>OutputStream</I> object. These
classes make the task of working with incoming and outgoing bytes of data slightly easier. These classes
include <I>BufferedInputStream</I>, <I>BufferedOutputStream</I>, <I>DataInputStream</I>,
<I>DataOutputStream</I>, <I>FilterInputStream</I>, and <I>FilterOutputStream</I>.<P>

<h3>Datagrams</h3><P>

Datagram communication is an unreliable way of sending self-contained messages (datagram packets) over
the network. The delivery of the packets is not guaranteed, nor is the order or contents of packets
guaranteed to be the same upon arrival. However, datagrams are useful in situations where noncritical data
needs to be broadcast to several clients: For example, a server application that periodically broadcasts the
current date and time to clients for synchronization purposes.<P>

Java provides two classes for datagram communication: <I>DatagramPacket</I> and
<I>DatagramSocke</I><I>t</I>. Both classes are required by any application that needs to send and/or
receive datagrams; hence, the source code for client and server datagram applications is almost
identical.<a href="9618e.htm#0392_0214"> Listing Three</A> is a client datagram application that
communicates with the server application in<a href="9618e.htm#0392_0215"> Listing Four</A>.
These programs are simplethe client program (dgClient.java) sends a "Hello" string to the server program
(dgServer.java) and the server responds by sending a "Hello Back" string back to the client.<P>

In<a href="9618e.htm#0392_0216"> Example 4</A> (from <a href="9618e.htm#0392_0214">Listing Three</A>), a <I>DatagramPacket</I> object contains all the
necessary information for sending a message over the network; that is, the contents of the message, the
destination Internet address, and the port number are all embedded in the <I>DatagramPacket</I> object.
Both the <I>send</I> and <I>receive</I> methods in the <I>DatagramSocket</I> class accept a
<I>DatagramPacket</I> as a parameter. The difference is in how the <I>DatagramPacket</I> object is
constructed for each method. For receiving, a <I>DatagramPacket</I> is constructed with the buffer to hold
the received data and the maximum length of data to receive. For sending, the destination Internet address
and port number are also required.<P>

<h3>Internet Addresses and URLs</h3><P>

To connect to an Internet server application, you need the Internet address (for example, 161.107.9.87) of
the host machine the application is running on, and the port number the application is listening to on that
host. The <I>InetAddress</I> class is used to represent an Internet address. <I>InetAddress</I> objects are
generally constructed by using the <I>getByName</I> static method, which accepts a string parameter
pointing to a host name or an Internet address. Once an <I>InetAddress</I> object is constructed, it can be
passed in as a parameter to other classes (<I>Socket</I>, for instance). <a href="9618e.htm#0392_0217">Example 5(a)</A> opens a socket connection to the HTTP server running
on www.javasoft.com. Java provides the <I>URL</I> and <I>URLConnection</I> classes to work with URLs.
These classes, which use sockets and HTTP as part of their underlying implementation, simplify the task of
reading data from and writing data to the resources on the Internet. Additionally, many of the methods in
the <I>java.applet.Applet</I> class accept the URL object as a parameter in order to access audio and image
files from a host machine or request a Java-enabled browser to pull up a resource pointed to by a URL
object, as in <a href="9618e.htm#0392_0217">Example 5(b)</A>.<P>

Listing Five is a Java program (copyURL.java) that can be used to copy the contents of a resource on the
Internet to a local file. The logic of this program is simple: It constructs a URL object, gets an input stream
to the URL, opens a local file for writing, then reads from the URL and writes to the local file. In <a href="9618e.htm#0392_0218">Example 6(a)</A> (from<a href="9618e.htm#0392_0219"> Listing
Five</A>), opening an input stream to a resource on the Internet can be accomplished by two lines of Java
codeone line to create a URL object (using one of the four constructors available), and one to get a
reference to the URL's input stream.<P>

Opening an output stream to a resource referenced by a URL requires a call to the <I>openConnection</I>
method in the URL class, which returns a <I>URLConnection</I> object. Alternatively, a
<I>URLConnection</I> object can be created directly by passing in a URL object in the constructor. The
<I>URLConnection</I> object represents an active connection to a resource on the Internet. <a href="9618e.htm#0392_0218">Example 6(b)</A> shows the first method of constructing a
<I>URLConnection</I> object.<P>

In addition to providing input and output streams to a resource, the <I>URL</I> class also provides methods
to obtain information about the current URL, such as the host name and port number. The
<I>URLConnection</I> class contains more informative methods such as <I>getContentType</I>,
<I>getContentLength</I>, <I>getHeaderField</I>, <I>getLastModified</I>, <I>getExpiration</I>, and related
methods that provide details about the contents of a resource. <a href="9618e.htm#0392_021a">Example 7(a)</A> presents two uses of these methods, while <a href="9618e.htm#0392_021a">Example 7(b)</A> is sample output generated by <a href="9618e.htm#0392_021a">Example 7(a)</A>.<P>

<h3>Interfacing with CGI Scripts</h3><P>

For some time now, HTML forms and CGI scripts have been used to exchange data between the client and
server parts of a web application. Java programs can be written to interface with CGI scripts using the
classes provided in the java.net package. CGI provides two methods for sending parameters from HTML
forms to CGI scriptsGET and POST. For the GET method, a web browser sends parameters as a CGI query
string appended to the URL; for the POST method, the browser sends parameters in the data block of the
information sent to a web server. While a browser automatically handles the specifics of how the data is
sent to the server based on the method specified in an HTML form, Java requires that you construct the
parameter data and send it to the web server. Let's look at a simple CGI script example (login.sh), that
requires a "User" and "Password" parameter, and see how we would simulate the GET and POST methods in
Java.<P>

Simulating the CGI GET method is easy: Create a URL object with a string containing the protocol, host
name, script name, and a CGI query string; see <a href="9618e.htm#0392_021b">Example 8(a)</A>.
Alternatively, you can use the <I>showDocument</I> method in the <I>java.applet.Applet</I> class to
request that the browser process the URL as if a user typed it in; see<a href="9618e.htm#0392_021b"> Example 8(b)</A>. Simulating the CGI POST method takes a little
more work. Since this method requires the parameters to be passed in the data block of the information sent
to a server, you have to write the parameter data to the output stream of the <I>URLConnection</I> object
as in <a href="9618e.htm#0392_021b">Example 8(c)</A>. Note that this example works with
NCSA's HTTP server; other servers might require you to also send the HTTP header.<P>

After using either the GET or POST method successfully, you can read any results sent back by the CGI
script (unless the <I>showDocument</I> method was used) using an input stream; see <a href="9618e.htm#0392_021b">Example 8(d)</A>.<P>

<h3>Conclusion</h3><P>

Whether or not you have experience in Internet programming, developing client/server Internet
applications in Java is straightforward. If you like network programming, Java makes accessing the
resources on the World Wide Web almost as easy as accessing local files.<P>

<P>

<P>

<P>

<h4><a name="0392_0211"><B>Example 1:</B> Client sending queries to an intermediate server
application.</h4><P>

<pre>
// Send User
for (idx=0; idx &lt; tUser.getText().length(); idx++)
     o.write (tUser.getText().charAt(idx));
o.write('|');


</pre>

<h4><a name="0392_0212"><B>Example 2:</B> Calling the accept method.</h4><P>

<pre>
Socket client;
 ...
ServerSocket server = new ServerSocket(0, 10);
while (true)
{
 ...
    client  = server.accept();
    InputStream  i = client.getInputStream();
    OutputStream o = client.getOutputStream();
 ...
}


</pre>

<h4><a name="0392_0213"><B>Example 3:</B> Creating a socket connection to the javaSQLd server application.</h4><P>

<pre>
(a)

Integer port=new Integer(tPort.getText());
Socket s =new Socket(tHost.getText(), port.intValue(), true);


(b)

OutputStream o = s.getOutputStream();
InputStream  i = s.getInputStream();


</pre>

<h4><a name="0392_0216"><B>Example 4:</B> A DatagramPacket object contains all the necessary information for sending a message.</h4><P>

<pre>
DatagramSocket socket = new DatagramSocket(4444);
DatagramPacket packet = new DatagramPacket(Data, 6, 
InetAddress.getByName(&quot;somehost&quot;), 5555);
socket.send(packet);

packet = new DatagramPacket(Data, 20);
socket.receive(packet);


</pre>

<h4><B><a name="0392_0217">Example 5:</B> (a) Opening a socket connection to the HTTP server; (b) methods in the java.applet.Applet class can accept the URL object as a parameter.</h4><P>

<pre>
(a)

InetAddress inet=InetAddress.getByName(&quot;www.javasoft.com&quot;);
Socket s = new Socket(inet, 80, true);


(b)

getAppletContext().showDocument(new URL(&quot;http://www.patriot.net/users/anil/java/javaSQL&quot;));



</pre>

<h4><a name="0392_0218"><B>Example 6:</B> (a) Opening an input stream to a resource; (b) constructing a URLConnection object.</h4><P>
<P>

<pre>(a)

URL url = new URL(args[0]);
InputStream is = url.openStream();


(b)

URLConnection urlConnect = url.openConnection();
</pre>


<h4><B><a name="0392_021a">Example 7:</B> (a) Providing input and output streams to a resource; (b) sample output generated by Example 7(a).</h4><P>
<P>
<pre>(a)

System.out.print(&quot;Type: &quot; + urlC.getContentType());
Date date=new Date(urlC.getLastModified());
System.out.print(&quot;, Modified on: &quot; + date.toLocaleString())


(b)

Type: image/gif, Modified On: Fri Mar 15 10:07:15 1996

</pre>


<h4><a name="0392_021b"><B>Example 8:</B> (a) Create a URL object with a string; (b) using the showDocument method in the java.applet.Applet class; (c) writing the parameter data to the output stream of the URLConnection object; (d) reading results sent back by the CGI script.</h4><P>

<pre>
(a)

URL url  = new URL(&quot;http://www.somehost.com/cgi-bin/login.sh?User
          =anil&amp;Password=letmein&quot;);
URLConnection urlC = url.openConnection();


(b)

getAppletContext().showDocument(new URL(&quot;http://www.somehost.com/cgi-bin/
          login.sh?User=anil&amp;Password=letmein&quot;));


(c)

URL url = new URL(&quot;http://www.somehost.com/cgi-bin/login.sh&quot;);
urlC = url.openConnection();

urlC.setDoOutput(true);
DataOutputStream dos =
     new DataOutputStream(urlC.getOutputStream());
dos.writeBytes(&quot;User=anil&amp;Password=letmein&quot;);
dos.writeBytes(&quot;\r\n&quot;);


(d)

int oneChar;
InputStream is = urlC.getInputStream();
while ((oneChar=is.read()) != -1)
     System.out.print((char)oneChar);
</pre>

<P>

<B>Figure 1:</B> javaSQL and javaSQLd.<P>

<P>

<B>Figure 2:</B> How javaSQL and javaSQLd interact.<P>

<P>

<P>

<P>

<P>

<a name="0392_020f"><H4>Listing  One</H4>
<pre>
///////////////////////////////////////////////////////
// Program: javaSQL.java
// Author: Anil Hemrajani -- anil@patriot.net
// Purpose: JavaSQL Application/Applet
///////////////////////////////////////////////////////

import java.io.*;
import java.net.*;
import java.awt.*;
import java.util.Properties;


/**************************************************************************
 * &quot;javaSQL&quot; is the main class which provides a Java Applet/Application.
 * It creates all the necessary components (TextArea/Edit, Push Buttons)
 * to perform free-form SQL queries.
 * This class operates in 2 modes: demo and other.  In demo mode, it loads
 * data from file &quot;demo.dat&quot;.  In other/normal mode, it communicates with
 * the &quot;javaSQLd&quot; server/daemon by sending it SQL and getting results back.
 * The communication is accomplished via Java sockets.
 **************************************************************************/
public class javaSQL extends java.applet.Applet
{
   TextArea   taSQL, taResults;
   TextField  tHost, tPort, tServer, tDatabase, tUser, tPassword;
   String     EXECUTE=&quot;Execute&quot;, EXIT=&quot;Exit&quot;;
   Label      statusBar;
   boolean    inAnApplet=true;
   Properties properties;
   String     propertyFile=&quot;javaSQL.ini&quot;,
              readyMsg=&quot;To query, enter SQL statement and click on Execute.&quot;;
   boolean    inDemoMode=false;

   // Send SQL to javaSQLd and receive results
   private void executeSQL()
   {
      try {
            if (inDemoMode)
            {
                showDemoData();
                return;
            }
            if (tHost.getText().trim().length()   &lt; 1 ||
                tPort.getText().trim().length()   &lt; 1 ||
                tServer.getText().trim().length() &lt; 1 ||
                tUser.getText().trim().length()   &lt; 1)
            {
                statusMsg(&quot;Please specify Host, Port, Server and User.&quot;);
                return;
            }
            Integer port=new Integer(tPort.getText());
            Socket    s =new Socket(tHost.getText(), port.intValue(), true); 

            OutputStream o = s.getOutputStream();
            InputStream  i = s.getInputStream();

            int idx;
            // Send Server
            for (idx=0; idx &lt; tServer.getText().length(); idx++)
                 o.write (tServer.getText().charAt(idx));
            o.write('|');
            // Send User
            for (idx=0; idx &lt; tUser.getText().length();
                 idx++)
                 o.write (tUser.getText().charAt(idx));
            o.write('|');
            // Send Password
            for (idx=0; idx &lt; tPassword.getText().length();
                 idx++)
                 o.write (tPassword.getText().charAt(idx));
            o.write('|');
            // Send Database
            for (idx=0; idx &lt; tDatabase.getText().length();
                 idx++)
                 o.write (tDatabase.getText().charAt(idx));
            o.write('|');
            // Send SQL
            for (idx=0; idx &lt; taSQL.getText().length();
                 idx++)
                 o.write (taSQL.getText().charAt(idx));

            o.write('\0');
            o.flush();

            StringBuffer sb=new StringBuffer();
            int oneChar;
            while ((oneChar=i.read()) != -1)
                  sb.append((char)oneChar);
            taResults.setText(sb.toString());

            o.close();
            i.close();
          }
          catch (UnknownHostException e)
          { showCatchError(e); }
          catch (IOException e)
          { showCatchError(e); }
          finally
          {
            statusMsg(readyMsg);
          }
   }
   public void init()
   {
       // Get application icon image, play sounds, etc.
       Image iconImage;        if (inAnApplet)

       {
           String mode=getParameter(&quot;MODE&quot;);
           if (mode != null &amp;&amp; mode.trim().toLowerCase().equals(&quot;demo&quot;))
               inDemoMode=true;

           iconImage=getImage(getCodeBase(), &quot;javaSQL.gif&quot;);
           play(getCodeBase(), &quot;javaSQL.au&quot;);
       }
       else
           iconImage=Toolkit.getDefaultToolkit().getImage(&quot;javaSQL.gif&quot;);
       //*** Create shared GridBag* stuff for all panels ***
       GridBagLayout gb       = new GridBagLayout();
       GridBagConstraints gbc = new GridBagConstraints();
       //*** Push Button Panel ***
       Panel buttonPanel = new Panel();
       buttonPanel.setLayout(new GridLayout(2,1));
       buttonPanel.add(new Button(EXECUTE));
       if (!inAnApplet)
           buttonPanel.add(new Button(EXIT));
       //*** Data Source Information Panel ***
       tServer   = new TextField(10);
       tDatabase = new TextField(10);
       tUser     = new TextField(10);
       tPassword = new TextField(10);
       tPassword.setEchoCharacter('*');

       Panel dbPanel = new BorderPanel();
       dbPanel.setLayout(gb);

       // Set default constraints
       gbc.weightx   = 1.0;
       gbc.weighty   = 0.0;
       gbc.ipady     = 0;
       gbc.ipadx     = 0;
       gbc.anchor    = GridBagConstraints.CENTER;
       gbc.fill      = GridBagConstraints.HORIZONTAL;
       gbc.gridwidth = GridBagConstraints.REMAINDER;

       Label l = new Label(&quot; Data Source Information &quot;, Label.CENTER);
       l.setFont(new Font(&quot;TimesRoman&quot;, Font.ITALIC|Font.BOLD, 14));
       gbc.ipady     = 5;
       gb.setConstraints(l, gbc);
       dbPanel.add(l);

       gbc.anchor    = GridBagConstraints.WEST;
       gbc.ipady     = 0;
       gbc.gridwidth = 4;
       l             = new Label(&quot; User: &quot;, Label.RIGHT);
       gb.setConstraints(l, gbc);
       dbPanel.add(l);
       gb.setConstraints(tUser, gbc);
       dbPanel.add(tUser);
        l = new Label(&quot; Password: &quot;, Label.RIGHT);
       gb.setConstraints(l, gbc);

       dbPanel.add(l);

       gbc.gridwidth = GridBagConstraints.REMAINDER;
       gb.setConstraints(tPassword, gbc);
       dbPanel.add(tPassword);

       gbc.gridwidth = 4;
       l             = new Label(&quot; DataServer: &quot;, Label.RIGHT);
       gb.setConstraints(l, gbc);
       dbPanel.add(l);

       gb.setConstraints(tServer, gbc);
       dbPanel.add(tServer);

       l = new Label(&quot; Database: &quot;, Label.RIGHT);
       gb.setConstraints(l, gbc);

       dbPanel.add(l);
       gbc.gridwidth = GridBagConstraints.REMAINDER;
       gb.setConstraints(tDatabase, gbc);
       dbPanel.add(tDatabase);

       //*** javaSQL Server/daemon Information Panel ***
       tHost         = new TextField(24);
       tPort         = new TextField(6);

       Panel hostPanel = new BorderPanel();
       hostPanel.setLayout(gb);

       // Set default constraints
       gbc.weightx   = 1.0;
       gbc.weighty   = 0.0;
       gbc.ipady     = 5;
       gbc.ipadx     = 0;
       gbc.anchor    = GridBagConstraints.CENTER;
       gbc.fill      = GridBagConstraints.NONE;
       gbc.gridwidth = GridBagConstraints.REMAINDER;

       l = new Label(&quot; javaSQLd Server Information &quot;, Label.CENTER);
       l.setFont(new Font(&quot;TimesRoman&quot;, Font.ITALIC|Font.BOLD, 14));
       gb.setConstraints(l, gbc);
       hostPanel.add(l);

       gbc.anchor    = GridBagConstraints.WEST;
       gbc.ipady     = 0;
       gbc.gridwidth = 2;
       l             = new Label(&quot; Host: &quot;, Label.RIGHT);
       gb.setConstraints(l, gbc);
       hostPanel.add(l);

       gbc.gridwidth = GridBagConstraints.REMAINDER;
       gb.setConstraints(tHost, gbc);        hostPanel.add(tHost);

       gbc.gridwidth = 2;

       l             = new Label(&quot; Port: &quot;, Label.RIGHT);
       gb.setConstraints(l, gbc);
       hostPanel.add(l);
       gbc.gridwidth = GridBagConstraints.REMAINDER;
       gbc.fill      = GridBagConstraints.NONE;
       gb.setConstraints(tPort, gbc);
       hostPanel.add(tPort);

       //*** Build Applet Panel ***
       setLayout(gb);
       // Set default constraints
       gbc.weightx   = 0.0;
       gbc.weighty   = 0.0;
       gbc.ipady     = 10;
       gbc.ipadx     = 10;
       gbc.fill      = GridBagConstraints.NONE;
       gbc.gridwidth = 2;

       //*** Application's icon image ***
       AppIcon ai    = new AppIcon(iconImage);
       gb.setConstraints(ai, gbc);
       add(ai);

       //*** Status Message ***
       statusBar     = new Label(&quot;Welcome to javaSQL. &quot; + readyMsg,Label.LEFT);
       gbc.ipady     = 0;
       gbc.ipadx     = 0;
       gbc.gridwidth = GridBagConstraints.REMAINDER;
       gbc.weightx   = 1.0;
       gbc.fill      = GridBagConstraints.HORIZONTAL;
       gb.setConstraints(statusBar, gbc);
       add(statusBar);

       //*** Button, DB and Host Panels ***
       gbc.gridwidth = 3;
       gbc.fill      = GridBagConstraints.BOTH;
       gb.setConstraints(buttonPanel, gbc);
       add(buttonPanel);

       gbc.gridwidth = GridBagConstraints.RELATIVE;
       gb.setConstraints(dbPanel, gbc);
       add(dbPanel);

       gbc.gridwidth = GridBagConstraints.REMAINDER;
       gb.setConstraints(hostPanel, gbc);
       add(hostPanel);

       //*** SQL and Results Components ***
       l = new Label(&quot; SQL Statement: &quot;, Label.LEFT);
       l.setFont(new Font(&quot;TimesRoman&quot;, Font.ITALIC|Font.BOLD, 12));
       gbc.gridwidth = GridBagConstraints.REMAINDER;        gbc.ipady     = 5;
       gb.setConstraints(l, gbc);
       add(l);


       gbc.anchor    = GridBagConstraints.CENTER;
       gbc.ipady     = 0;
       gbc.weightx   = 1.0;
       gbc.weighty   = 1.0;
       taSQL         = new TextArea(10, 70);
       taSQL.setFont(new Font(&quot;Courier&quot;, Font.PLAIN, 12));
       gbc.fill      = GridBagConstraints.BOTH;
       gbc.gridwidth = GridBagConstraints.REMAINDER;
       gb.setConstraints(taSQL, gbc);
       add(taSQL);

       taResults     = new TextArea(10, 70);
       taResults.setEditable(false);
       taResults.setFont(new Font(&quot;Courier&quot;, Font.PLAIN, 12));
       gbc.gridwidth = GridBagConstraints.REMAINDER;
       gb.setConstraints(taResults, gbc);
       add(taResults);

       // Load Defaults
       loadProperties();
   }
   public boolean handleEvent(Event evt)
   {
       if (evt.id == Event.WINDOW_DESTROY)
       {
           saveProperties();
           System.exit(0);
       }
       else
       if (evt.id == Event.ACTION_EVENT)
       {
          if (evt.target instanceof Button)
          {
            String buttonLabel = (String)evt.arg;
            if (buttonLabel.equals(EXECUTE))
                executeSQL();
            else
            if (buttonLabel.equals(EXIT))
            {
                saveProperties();
                System.exit(0);
            }
          }
          taSQL.requestFocus();
          return true;
       }
       return false;
   }
   private void statusMsg(String msgText)
   {        statusBar.setText(msgText);
   }
   private void showCatchError(Throwable e)
   {
       statusMsg(e.toString());

       if (inAnApplet)
           showStatus(e.getMessage());
       else
           System.err.println(e.getMessage());
   }
   private void loadProperties()
   {
      properties=new Properties();
      try
      {
         if (inAnApplet)
         {
             URL url        = new URL(getCodeBase(), propertyFile);
             InputStream is = url.openStream();
             properties.load(url.openStream());
         }
         else
             properties.load(new FileInputStream(propertyFile));
         tHost.setText(properties.getProperty(&quot;Host&quot;, &quot;&quot;));
         tPort.setText(properties.getProperty(&quot;Port&quot;, &quot;&quot;));
         tServer.setText(properties.getProperty(&quot;Server&quot;, &quot;&quot;));
         tDatabase.setText(properties.getProperty(&quot;Database&quot;, &quot;&quot;));
         tUser.setText(properties.getProperty(&quot;User&quot;, &quot;&quot;));
         tPassword.requestFocus();
      }
      catch (FileNotFoundException e) {}
      catch (IOException e) {}
   }
   private void saveProperties()
   {
      if (!inAnApplet)
      {
          properties.put(&quot;Host&quot;, tHost.getText());
          properties.put(&quot;Port&quot;, tPort.getText());
          properties.put(&quot;Server&quot;, tServer.getText());
          properties.put(&quot;Database&quot;, tDatabase.getText());
          properties.put(&quot;User&quot;, tUser.getText());

          try properties.save(new FileOutputStream(propertyFile),
                                                  &quot;javaSQL Properties&quot;);
          catch (IOException e) {}
      }
   }
   public void showDemoData()
   {
      try
      {
         int oneChar;
         StringBuffer sb;          sb=new StringBuffer();
         DataInputStream dis;
         if (inAnApplet)
         {
            URL url = new URL(getCodeBase(), &quot;demo.dat&quot;);
            dis     = new DataInputStream(url.openStream());

         }
         else
            dis     = new DataInputStream(new FileInputStream(&quot;demo.dat&quot;));
         taSQL.setText(dis.readLine());

         while ((oneChar=dis.read()) != -1)
            sb.append((char)oneChar);
         taResults.setText(sb.toString());
      }
      catch (MalformedURLException e)
      { showCatchError(e); }
      catch (IOException e)
      { showCatchError(e); }
   }
   public Insets insets()
   {
      return new Insets(5,5,5,5);
   }
   public void paint(Graphics g)
   {
       g.drawRect(1, 1, size().width-3, size().height-2);
   }
   static public void main(String args[])
   {
       String  localHost=&quot;&quot;;
       javaSQL js=new javaSQL();

       if (args.length &gt; 0 &amp;&amp; args[0].trim().toLowerCase().equals(&quot;-demo&quot;))
           js.inDemoMode=true;
       js.inAnApplet=false;
       js.init();

       try localHost=&quot;(&quot; + InetAddress.getLocalHost().getHostName() + &quot;)&quot;;
       catch (UnknownHostException e) {}

       Frame f=new Frame(&quot;javaSQL &quot; + localHost);

       f.add(&quot;Center&quot;, js);
       f.pack();
       f.show();
   }
}
//*** Provide a Panel with a border ***
class BorderPanel extends Panel
{
   public Insets insets()
   {
      return new Insets(5,5,5,5);    }
   public void paint(Graphics g)
   {
       g.drawRect(1, 1, size().width-3, size().height-2);
   }
}
//*** Draw a 32x32 image file ***

class AppIcon extends Canvas
{
   Image currImg;
   int width=32, height=32;

   public AppIcon(Image imageFile)
   {
       currImg=imageFile;
   }
   public void paint(Graphics g)
   {
       if (currImg != null)
           g.drawImage(currImg, 0, 0, width, height, getBackground(), this);
   }
   public Dimension minimumSize()
   {
       return new Dimension(width, height);
   }
   public Dimension preferredSize()
   {
       return minimumSize();
   }
}

</pre>
<a name="0392_0210"><H4>Listing  Two</H4>
<pre>
/////////////////////////////////////////////////////////
// Program: javaSQLd.java
// Author: Anil Hemrajani -- anil@patriot.net
// Purpose: Java ISQL Server/Daemon
////////////////////////////////////////////////////////

import java.io.*;
import java.net.*;
import java.util.StringTokenizer;

class javaSQLd
{
   public static void main(String args[])
   {
      Socket client;
      int onechar;

      try {
             ServerSocket server = new ServerSocket(0, 10);
             while (true)
             {                  System.out.print(&quot;Listening to port: &quot;);
                 System.out.print(server.getLocalPort());
                 System.out.print(&quot;\n&quot;);
                 System.out.flush();

                 client  = server.accept();
                 InputStream  i = client.getInputStream();

                 OutputStream o = client.getOutputStream();
                 StringBuffer sb = new StringBuffer();

                 while (true)
                 {
                   onechar = i.read();
                   if (onechar == '\0')
                       break;
                   else
                       sb.append((char)onechar);
                 }
                 StringTokenizer st=new StringTokenizer(sb.toString(), &quot;|\0&quot;);
                 String Server  =new String(),
                        User    =new String(),
                        Password=new String(),
                        Database=new String(),
                        SQL     =new String();
                 int token=0;
                 while (st.hasMoreTokens())
                 {
                     token++;
                     switch (token)
                     {
                        case 1: Server=st.nextToken();
                                break;
                        case 2: User=st.nextToken();
                                break;
                        case 3: Password=st.nextToken();
                                break;
                        case 4: Database=st.nextToken();
                                break;
                        case 5: SQL=st.nextToken();
                                break;
                       default: System.err.println(
                                     &quot;More tokens received than expected&quot;);
                                break;
                     }
                 }
                 if (SQL.trim().equalsIgnoreCase(&quot;exit&quot;) ||
                     SQL.trim().equalsIgnoreCase(&quot;quit&quot;))
                 {
                     client.close();
                     server.close();
                     System.out.println(&quot;Exit request received.&quot;);
                     System.out.flush();
                     System.exit(0);
                 }                  String dbCmd=&quot;/usr/sybase/bin/isql&quot;
                             + &quot; -S&quot; + Server
                             + &quot; -U&quot; + User
                             + &quot; -P&quot; + Password;
                 Process proc=Runtime.getRuntime().exec(dbCmd);

                 // Provide input to command
                 StringBufferInputStream sbis=

                      new StringBufferInputStream(SQL);
                 OutputStream os=proc.getOutputStream();

                 while ((onechar=sbis.read()) != -1)
                       os.write((char)onechar);
                 os.write('\n');
                 os.flush();
                 os.close();

                 // Capture command's output
                 InputStream is=proc.getInputStream();
                 while ((onechar=is.read()) != -1)
                     o.write((char)onechar);
                 o.flush();
                 is.close();

                 proc.destroy();

                 i.close();
                 o.close();
                 client.close();
             }
          }
          catch (IOException e)
          {
             e.printStackTrace(System.err);
             System.err.flush();
          }
   }
}

</pre>
<a name="0392_0214"><H4>Listing  Three</H4>
<pre>
/////////////////////////////////////////////////////////
// Program: dgClient.java
// Author: Anil Hemrajani -- anil@patriot.net
// Purpose: Sample Client Datagram App
////////////////////////////////////////////////////////

import java.net.*;
import java.io.*;

class dgClient
{
   static public void main(String args[])
   {
      byte Data[] = new byte[20];       String sendMsg=&quot;Hello&quot;;
      sendMsg.getBytes(0, sendMsg.length(), Data, 0);

      try
      {
          // Client on port 4444, Server on 5555
          DatagramSocket socket = new DatagramSocket(4444);
          DatagramPacket packet = new DatagramPacket(Data, 6,
                                       InetAddress.getByName(&quot;hq3unxh0&quot;),

                                       5555);
          socket.send(packet);

          packet = new DatagramPacket(Data, 20);
          socket.receive(packet);
          String received = new String(packet.getData(), 0);
          System.out.println(received);
      }
      catch(UnknownHostException e)
      { System.err.println(e.toString()); }
      catch(SocketException e)
      { System.err.println(e.toString()); }
      catch(IOException e)
      { System.err.println(e.toString()); }
   }
}

</pre>
<a name="0392_0215"><H4>Listing  Four</H4>
<pre>
///////////////////////////////////////////////////////
// Program: dgServer.java
// Author: Anil Hemrajani -- anil@patriot.net
// Purpose: Sample Server Datagram App
///////////////////////////////////////////////////////

import java.net.*;
import java.io.*;

class dgServer
{
   static public void main(String args[])
   {
      byte Data[] = new byte[20];

      try
      {
          // Client on port 4444, Server on 5555
          DatagramSocket socket = new DatagramSocket(5555);
          DatagramPacket packet = new DatagramPacket(Data, 20);

          socket.receive(packet);
          String received = new String(packet.getData(), 0);
          System.out.println(received);

          String sendMsg=&quot;Hello Back&quot;;
          sendMsg.getBytes(0, sendMsg.length(), Data, 0);
          packet  = new DatagramPacket(Data, 20, packet.getAddress(),
                                       packet.getPort());
          socket.send(packet);
      }
      catch(UnknownHostException e)
      { System.err.println(e.toString()); }
      catch(SocketException e)
      { System.err.println(e.toString()); }
      catch(IOException e)
      { System.err.println(e.toString()); }
   }
}

</pre>
<a name="0392_0219"><H4>Listing  Five</H4>
<pre>
///////////////////////////////////////////////////////
// Program: copyURL.java
// Author: Anil Hemrajani -- anil@patriot.net
// Purpose: URL demo Application
////////////////////////////////////////////////////////

import java.net.*;
import java.io.*;
import java.util.Date;

class copyURL
{
  public static void main(String args[])
  {
      if (args.length &lt; 2)
      {
          System.err.println
               (&quot;usage: java copyURL URL LocalFile&quot;);
          System.exit(1);
      }
      try
      {
          URL           url  = new URL(args[0]);
          URLConnection urlC = url.openConnection();
          // Print info about resource
          System.out.print(&quot;Type: &quot; + urlC.getContentType());
          Date date=new Date(urlC.getLastModified());
          System.out.println(&quot;, Modified On: &quot; + date.toLocaleString());
          System.out.flush();

          // Copy resource to local file
          InputStream is = url.openStream();
          FileOutputStream fos =
            new FileOutputStream(args[1]);
          int oneChar, count=0;

          while ((oneChar=is.read()) != -1)
          {
             fos.write(oneChar);              count++;
          }
          is.close();
          fos.close();

          System.out.println(count + &quot; byte(s) copied&quot;);
      }
      catch (MalformedURLException e)
      { System.err.println(e.toString()); }
      catch (IOException e)

      { System.err.println(e.toString()); }
  }
}
</pre>


</BODY></HTML>
