<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>FEB96: Java Command-Line Arguments</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>Java Command-Line Arguments<a name="00ba_0031"><a name="00ba_0031"><a name="00ba_002f"><a name="00ba_0000"></h1><P>

<h2>A Java package for parsing command-line parameters</h2><P>

<h3>Greg White</h3><P>

<P>
<i><a name="00ba_0030"><a name="00ba_0000">Greg, a programmer at I/NET, is currently working on the Web Server/400 product, a commercially available Web server for AS/400 computers. He can be contacted at gwhite@inetmi.com.</i></p><hr><P>

Users of the first release of the Web server my company developed made one request more often than any other: &quot;Please include printed documentation.&quot; In the first release, documentation consisted of more than 160 HTML files, viewable from any browser supporting HTML 2.0. While users could load documents into a browser and print them, all links ended up getting lost--not to mention that the printing sequence wasn't clear. For our part, we also needed a formatted text version of some of the documentation for reference as comments within configuration files.<P>

While trying to solve this problem, I ran across RtfToHtml, a program that converts rich text format (RTF) documents to HTML (see ftp://ftp.cray.com/src/WWWstuff/RTF/rtftohtml_overview.html). Unfortunately, our source documentation was already in HTML, so we would have had to convert it to RTF and manually insert the styles that RtfToHtml can handle. Instead, I wrote a program that reads in HTML and writes out RTF. By the time I was done, I had written a system that has, at its core, a Java application that converts an HTML file to an RTF file (with links preserved as bookmarks) or text file. The name of the application (and its package of classes) is <I>HtmlXlate</I>.<P>

In this article, I'll introduce <I>CmdLnArg</I>, a package of Java classes which parses the command-line parameters for the application. In future articles, I'll detail the process of converting HTML to RTF and formatting text. This article and the accompanying code are based on the 1.0 beta of the Java development kit (JDK).<P>

<h3><a name="00ba_0032">The Java Programming Language<a name="00ba_0032"></h3><P>

Developed by Sun Microsystems, Java is an object-oriented language similar to C++. The language has garnered attention because its portability, security, and support for distributed programming make it useful for Internet programming. To find out more about Java, refer to the articles &quot;Java and Internet Programming,&quot; by Arthur van Hoff (<I>DDJ</I>, August 1995), &quot;Net Gets a Java Buzz,&quot; by Ray Valdes (<I>Dr. Dobb's Developer Update</I>, August 1995), and &quot;Programming HotJava Applets,&quot; by John Rodley (<I>Dr. Dobb's Web Sourcebook</I>, November/December 1995). You can also find Java-related information at http://java.sun.com. <P>

There are differences between Java and C++ in both the language and the environment. Java does not include familiar C++ features such as pointers, preprocessing, multiple inheritance, goto, and automatic coercion. While I might have liked to keep some of these features, Sun makes a case for their elimination, and the net effect is good. Sun has also added features, such as automatic garbage collection.<P>

Most of the interest in Java currently centers around &quot;applets.&quot; Applets are like programs, but are loaded and run by a Java-enabled browser such as HotJava or Netscape Navigator 2.0 beta. A normal HTML document can contain a reference to an applet that causes the applet to be loaded and run (similar to the way images are referenced). Applets are given an area of the screen to work with and tend (but don't have) to be oriented towards graphics and GUI.<P>

Java applications, like applets, are written in the Java language, but are loaded and run directly by the Java interpreter rather than by a browser. These are usually command-line programs, but don't have to be. (In the Alpha3 release of the JDK, the HotJava browser was implemented as a Java application. At this writing, there is no HotJava browser available for the Beta 1.0 release of the JDK.) I chose to make <I>HtmlXlate</I> an application instead of an applet because I didn't need to display graphics. It is also useful to be able to call the application from within other command-line programs (a make program, for example).<P>

When developing in Java, you must compile the source, but you don't have to explicitly link it. It will be dynamically linked and loaded at run time by the Java interpreter. The interpreter also checks the code it is loading for errors and virus-like behavior. The code can then either be interpreted or converted to the machine code for the current platform. This delayed (optional) conversion to machine code allows any machine and operating system with a Java interpreter to run the application without recompiling.<P>

A Java &quot;package&quot; provides a way to collect a related group of classes. Within the package, each class can be public or not. Only classes declared public can be used outside of a package. When I originally wrote <I>HtmlXlate</I>, I put the classes that process command-line arguments into the same package as the rest of the code. Afterwards, I put those classes into a separate package (<I>CmdLnAr</I><I>g</I>) for easier maintenance and reuse. <P>

Sun defines conventions for command-line arguments in the documenthttp://java.sun.com/progGuide/java/cmdLineArgs/conventions.html. The document describes &quot;word&quot; arguments, &quot;arguments that require arguments,&quot; and &quot;flags.&quot; <P>
<ul>
<li>Word arguments are full words that turn an option on or off; for example, a typical word argument is <I>-verbose</I>. </li>
<li>Arguments that require arguments consist of a keyword followed by additional information (such as what format to output). In <I>HtmlXlate</I>, for example, the keyword is <I>-to</I> and the argument is <I>RtfWriter</I>, <I>TextWriter</I>, or <I>CommentWriter</I>.</li>
<li>Flags are like word arguments except that they have only one letter and can be combined (for example, <I>-vg</I> would be two separate flags--<I>v</I> and <I>g</I>). I didn't use flags in <I>HtmlXlate</I>.</li>
</ul>
<I>HtmlXlate</I> requires support for word arguments and for arguments that require arguments. All arguments should have a leading hyphen. If more than one flag argument is specified on the command line, they can be combined behind one hyphen. <P>

<h3><a name="00ba_0033">The Test Program<a name="00ba_0033"></h3><P>

At this point, I'm going to assume that you have the beta version of the JDK installed. If not, you can get it at http://java.sun.com/. Although I've tested this code only with the Windows 95 JDK, it should work with other implementations as well.<P>

To start, pick a directory that will contain your Java-related files. You will need to modify your CLASSPATH environment variable to include this drive and directory. Below the directory you just created, create the subdirectory <I>CmdLnArg</I> (the same name as the package), which will contain the Java source files presented in Listings <a href="9602e.htm#00ba_003a">One</A> through <a href="9602e.htm#00ba_0040">Four</A>. <P>

The directory in which you place the source file must have the same name as the package, or the Java compiler won't know where to look for the classes when you use them from outside the package. (At first, I gave them different names, which resulted in strange compiler errors.)<P>

To compile the source, enter the commands in <a href="9602e.htm#00ba_0037">Example 1</A>. (Note that the same case must be used for the filenames entered on the command line.) <P>

Of the classes being compiled, all but the last (<I>Go</I>) are part of the <I>CmdLnArg</I> package. The <I>Go</I> class is a test application that uses the package and prints the results to STDOUT. To test the program, type <I>java Go -in file.in -out file.out</I>. This starts the Java interpreter (java.exe) and tells it to run the Go application (see <a href="9602e.htm#00ba_0042">Listing Five</A>). The rest of the parameters are passed into the <I>Go</I> class for interpretation. To see all the parameters <I>Go </I>supports, run the application without parameters: <I>java Go</I>. (<I>Go </I>is not a reserved name, just the name of the class I picked to include a static main method.)<P>

<h3><a name="00ba_0034">Using the Package<a name="00ba_0034"></h3><P>

To use the package in your applications, follow the model provided in the <I>processArgs</I> method of the <I>Go </I>application. All applications must follow the same basic steps:<P>

<ol>1.     Create a new instance of <I>ArgProcessor</I> and pass it the arguments the application received from the interpreter; see <a href="9602e.htm#00ba_0038">Example 2(a)</A>.</ol><P>

<ol>2.     Create and add <I>ArgReqArgType</I> and <I>WordArgType</I> instances for each argument you want to process; see Examples <a href="9602e.htm#00ba_0038">2(b) and 2(c)</A>. <a href="9602e.htm#00ba_0038">Example 2(c)</A> uses a shortcut: <I>ArgReqArgType</I> takes a <I>StringBuffer</I> as input during construction. Because a <I>StringBuffer</I> is a modifiable object, the original <I>StringBuffer</I> (<I>inputName</I>) can be modified in step 3. This means that your code does not need to maintain a reference to the <I>ArgReqArgType</I> object, but can just check the <I>StringBuffer</I> object for the results later.</ol><P>

<ol>3.     Call the <I>ArgProcessor.process</I> method to update the <I>ArgReqArgType</I> and <I>WordArgType</I> objects added in step 2; see <a href="9602e.htm#00ba_0038">Example 2(d)</A>.</ol><P>

<ol>4.     Interpret the results. For both <I>WordArgType</I> and <I>ArgReqArgType</I>, the result is stored in a public member named <I>argDest</I>. For <I>WordArgType,</I> <I>argDest</I> is a Boolean; for <I>ArgReqArgType</I>, it is a <I>StringBuffer</I>. Note that for <I>ArgReqArgType</I>s, you can also reference the <I>StringBuffer</I> used to create the <I>ArgReqArgType</I> (it is the same object that <I>argDest</I> references); see Examples <a href="9602e.htm#00ba_0038">2(e) and 2(f)</A>.</ol><P>

<h3><a name="00ba_0035">How the Package Works<a name="00ba_0035"></h3><P>

The package can be divided into the <I>ArgProcessor</I> class (<a href="9602e.htm#00ba_003a">Listing One</A>) and the argument type classes that it processes (Listings <a href="9602e.htm#00ba_003c">Two</A> through <a href="9602e.htm#00ba_0040">Four</A>).<P>

The <I>ArgProcessor</I> class maintains a <I>Vector</I> of argument types (<I>vArgs</I>) passed in through the add method. <I>Vector</I> is a class in the package <I>java.util</I> and is described as a &quot;growable array.&quot; When the process method is called, each argument passed into the application is compared to the argument types stored in <I>vArgs</I> (via a call to <I>getArg</I>). If an argument type is found, it will be set through a call to its <I>set</I> method.<P>

The <I>getArg</I> method makes use of the <I>Enumeration</I> interface, also in the java.util package. Java interfaces are meant to provide the benefits of multiple inheritance without the complications. An interface is a type that specifies methods and constants, but does not specify how the methods will be implemented. The <I>Enumeration</I> interface, for example, specifies the <I>hasMoreElements</I> and <I>nextElements</I> methods. It is up to the class implementing the interface to implement those methods (in this case, <I>VectorEnumerator</I>, found in Vector.java, which is shipped with the JDK).<P>

The use of the <I>Enumeration</I> interface and <I>Vector</I> class illustrates these features of the Java API, but I probably should have used the <I>Dictionary</I> class instead. This would have made my code simpler and probably faster; I know more now about the Java API than I did when I started.<P>

<I>GenericArgType</I> (<a href="9602e.htm#00ba_003c">Listing Two</A>) is an abstract class that provides little implementation, but defines a method that <I>ArgReqArgType</I> and <I>WordArgType</I> must implement. The <I>abstract </I>keyword in the class declaration means that it is not possible to instantiate an object of this type, only a nonabstract subclass. (Even though a <I>GenericArgType</I> object cannot be instantiated, variables can be declared to be <I>GenericArgType</I> if they reference objects that subclass <I>GenericArgType</I>.)<P>

The constructor in <I>WordArgType</I> (<a href="9602e.htm#00ba_003e">Listing Three</A>) shows how a superclass constructor can be called. The <I>super(argID)</I> line is a call to <I>GenericArgType</I>'s constructor. The <I>set</I> method will toggle the Boolean <I>argDest</I> the first time it is called and do nothing if called after that. This stops <I>argDest</I> from flipping back and forth if the user inadvertently specifies the argument more than once on the command line.<P>

The constructor for <I>ArgReqArgType</I> (<a href="9602e.htm#00ba_0040">Listing Four</A>) is not much different than the constructor for <I>WordArgType</I>. The <I>set</I> method is more complicated because it needs to use the command-line argument after the one containing the leading hyphen. If the user has specified an argument requiring an argument and the required argument is missing, an exception will be thrown. Otherwise, <I>argDest</I> will be set, and the index will be incremented by one.<P>

<h3><a name="00ba_0036">Conclusion<a name="00ba_0036"></h3><P>

One enhancement to the package would be the addition of support for flag arguments. This would not be too difficult and would probably require another <I>Vector</I> class in <I>ArgProcessor</I> to keep track of the flag arguments separately. This would allow a check first for word arguments and arguments that require arguments. If that check failed, then a check for flag arguments would be made.<P>

Another logical enhancement for this package might be to warn the user when the arguments are not valid. This could be done in the process method of the <I>ArgProcessor</I> class by adding an Else clause at the bottom of the While loop.<P>

I encourage you to download the JDK and work through a few small example programs on your own. Java is relatively easy to pick up, especially if you are familiar with C++. Java also comes with an API that includes enough functionality to let you concentrate on the interesting parts of your program. You may also want to watch my page at http://www.inetmi.com/~gwhi since I plan on putting up interesting Java code and information as time permits. <P>

<h4><a name="00ba_0037"><B>Example 1:</B> Enter these commands to compile Java source.<a name="00ba_0037"></h4><P>

<pre>javac GenericArgType.java
javac WordArgType.java
javac ArgReqArgType.java
javac ArgProcessor.java
javac Go.java</pre>

<h4><a name="00ba_0038"><B>Example 2:</B> Using the CmdLnArg package.<a name="00ba_0038"></h4><P>

<pre>(a)
ArgProcessor processor = new ArgProcessor(args)

(b)
WordArgType verboseArg = new WordArgType(&quot;-verbose&quot;, false);<P>
processor.add(verboseArg);

(c)
StringBuffer inputName = new StringBuffer(&quot;&quot;);<P>
processor.add(new ArgReqArgType(&quot;-in&quot;, inputName);

(d)
processor.process();

(e)
boolean bVerbose = verboseArg.argDest;

(f)
String s = inputName.toString();<B></B></pre>

<P>

<h4><a name="00ba_0039"><a name="00ba_003a">Listing One<a name="00ba_003a"></h4><pre>
// -- Declare this source to be a part of the CmdLnArg package. 
package CmdLnArg;
// -- Make use of shipped package for Vector, String, StringBuffer classes
import java.util.*;
public class ArgProcessor
    {
    // -- Args as passed into application
    String args[] = null;
    // -- All arg types we will process. Must be derived from GenericArgType.
    Vector vArgs = new Vector();
    // -- Constructor. Hang on to the arguments for when we need to
    // -- process them later.
    public ArgProcessor
        (
        String args[]
        )
        {
        this.args = args;
        } // -- end constructor
    // -- Adds one argument type for when we process
    public void add
        (
        GenericArgType arg
        )
        {
        vArgs.addElement(arg);
        } // -- end add
    // -- Process the args that were passed into the application and store
    // -- the results back in the argument types passed into the add method
    public void process
        (
        )
        throws
            Exception
        {
        int iArgIndex = 0;
        // -- Loop through all of the args passed into the application
        while (iArgIndex &lt; args.length)
            {
            String thisArg = args[iArgIndex++];
            GenericArgType arg = getArg(thisArg);
            // -- Set the argument and (possibly) increase the arg index.
            if (arg != null)
                iArgIndex = arg.set(args, iArgIndex);
            } // -- end while
        } // -- end process
    // -- Look for an argument type that matches the passed-in target
    protected GenericArgType getArg
        (
        String argTarget
        )
        {
        Enumeration allArgs  = vArgs.elements();
        GenericArgType foundArg = null;
        // -- Loop through each arg type until we find a match or there are
        // -- no more arg types.
        while (foundArg==null && allArgs.hasMoreElements())
            {
            GenericArgType testArg = (GenericArgType)allArgs.nextElement();
            if (testArg.argID.equalsIgnoreCase(argTarget))
                foundArg =  testArg;
            } // -- end while
        return foundArg;
        } // -- end getArg
    } // -- end class ArgProcessor
</pre>
<h4><a name="00ba_003b"><a name="00ba_003c">Listing Two<a name="00ba_003c"></h4><pre>
// -- Declare this source to be a part of the CmdLnArg package.
package CmdLnArg;
// -- Make use of shipped packages for Vector, String, StringBuffer classes
import java.util.*;
public abstract class GenericArgType
    {
    public String argID = null;
    protected boolean wasSet;
    public GenericArgType
        (
        String argID
        )
        {
        this.argID = argID;
        wasSet = false;
        } // -- end constructor
    public boolean wasSet
        (
        )
        {
        return wasSet;
        } // -- end wasSet
    public abstract int set
        (
        String args[],
        int    iThisIndex
        )
        throws
            Exception
        ;
    } // -- end GenericArgType
</pre>
<h4><a name="00ba_003d"><a name="00ba_003e">Listing Three<a name="00ba_003e"></h4><pre>
// -- Declare this source to be a part of the CmdLnArg package.
package CmdLnArg;
// -- Make use of shipped packages for Vector, String, StringBuffer classes
import java.util.*;
public class WordArgType extends GenericArgType
    {
    public boolean argDest;
    public WordArgType
        (
        String argID,
        boolean argDest
        )
        {
        super(argID);
        this.argDest = argDest;
        } // -- end constructor
    public int set
        (
        String args[],
        int    iThisIndex
        )
        {
        if (!wasSet)
            {
            argDest = !argDest;
            wasSet = true;
            } // -- end if
        return iThisIndex;
        } // -- end set
    } // -- end class WordArgType
</pre>
<h4><a name="00ba_003f"><a name="00ba_0040">Listing Four<a name="00ba_0040"></h4><pre>
// -- Declare this source to be a part of the CmdLnArg package.
package CmdLnArg;
// -- Make use of shipped packages for Vector, String, StringBuffer classes
import java.util.*;
public class ArgReqArgType extends GenericArgType
    {
    public StringBuffer argDest = null;
    public ArgReqArgType
        (
        String       argID,
        StringBuffer argDest
        )
        {
        super(argID);
        this.argDest = argDest;
        } // -- end constructor
    public int set
        (
        String args[],
        int    iThisIndex
        )
        throws
            Exception
        {
        if (args.length &lt;= iThisIndex)
            throw new Exception(&quot;Command line param &quot;
                                + argID
                                + &quot; must be followed by a string&quot;);
        // -- We can't directly change the string, so truncate it and add
        // -- what we want.
        argDest.setLength(0);
        argDest.append(args[iThisIndex]);
        wasSet = true;
        return iThisIndex + 1;
        } // -- end set
    } // -- end class ArgReqArgType
</pre>
<h4><a name="00ba_0041"><a name="00ba_0042">Listing Five<a name="00ba_0042"></h4><pre>
// -- Declare this source to be a part of the CmdLnArg package.
import CmdLnArg.*;
// -- Make use of shipped packages for Vector, String, StringBuffer,
// -- System classes
import java.util.*;
import java.io.*;
class Go
    {
    // -- Set by cmd line arguments
    static boolean       bVerbose    = false;
    static StringBuffer  inputName   = new StringBuffer(&quot;&quot;);
    static StringBuffer  outputName  = new StringBuffer(&quot;&quot;);
    static StringBuffer  to          = new StringBuffer(&quot;TextWriter&quot;);
    static StringBuffer  sWidth      = new StringBuffer(&quot;&quot;);
    static StringBuffer  sTabSize    = new StringBuffer(&quot;&quot;);
    static Vector vArgs = new Vector();
    public static void main
        (
        String args[]
        )
        {
        int iReturn = 0;
        try {
            processArgs(args);
            } // -- end try
        catch (Exception e)
            {
            e.printStackTrace();
            iReturn = 1;
            } // -- end catch
        System.exit(iReturn);
        } // -- end main
    static void processArgs
        (
        String args[]
        )
        throws
            Exception
        {
        ArgProcessor processor = new ArgProcessor(args);
        add(processor, new ArgReqArgType(&quot;-in&quot;,  inputName));
        add(processor, new ArgReqArgType(&quot;-out&quot;,  outputName));
        add(processor, new ArgReqArgType(&quot;-to&quot;,  to));
        add(processor, new ArgReqArgType(&quot;-width&quot;,  sWidth));
        add(processor, new ArgReqArgType(&quot;-tabsize&quot;, sTabSize));
        WordArgType verboseArg = new WordArgType(&quot;-verbose&quot;, false);
        add(processor, verboseArg);
        WordArgType includeRefs = new WordArgType(&quot;-NoRefs&quot;, true);
        add(processor, includeRefs);
        WordArgType refSections = new WordArgType(&quot;-NoSections&quot;, true);
        add(processor, refSections);
        WordArgType refPage = new WordArgType(&quot;-NoPages&quot;, true);
        add(processor, refPage);
        WordArgType horzRule = new WordArgType(&quot;-HR&quot;, true);
        add(processor, horzRule);
        processor.process();
        checkSomethingSet();
        // -- Print the results back to the user.
        System.out.println(&quot;Input name:&quot; + inputName);
        System.out.println(&quot;Output name:&quot; + outputName);
        System.out.println(&quot;to:&quot; + to);
        System.out.println(&quot;width:&quot; + sWidth);
        System.out.println(&quot;tabsize:&quot; + sTabSize);
        if (verboseArg.wasSet())
            System.out.print(&quot;Verbose was set to &quot;);
        else
            System.out.print(&quot;Verbose left at the default of &quot;);
        System.out.println(String.valueOf(verboseArg.argDest));
        if (includeRefs.wasSet())
            System.out.print(&quot;IncludeRefs was set to &quot;);
        else
            System.out.print(&quot;IncludeRefs left at the default of &quot;);
        System.out.println(String.valueOf(includeRefs.argDest));
        if (refSections.wasSet())
            System.out.print(&quot;RefSections was set to &quot;);
        else
            System.out.print(&quot;RefSections left at the default of &quot;);
        System.out.println(String.valueOf(refSections.argDest));
        if (refPage.wasSet())
            System.out.print(&quot;RefPages was set to &quot;);
        else
            System.out.print(&quot;RefPages left at the default of &quot;);
        System.out.println(String.valueOf(refPage.argDest));
        if (horzRule.wasSet())
            System.out.print(&quot;HR was set to &quot;);
        else
            System.out.print(&quot;HR left at the default of &quot;);
        System.out.println(String.valueOf(horzRule.argDest));
        } // -- end processArgs
    // -- Adds an argument type to the processor and to our vector so we can
    // -- later make sure somethine was set.
    protected static void add
        (
        ArgProcessor   processor,
        GenericArgType argType
        )
        {
        processor.add(argType);
        vArgs.addElement(argType);
        } // -- end add
    // -- Prints info and generates and exception of nothing is set
    protected static void checkSomethingSet
        (
        )
        throws
            Exception
        {
        Enumeration allArgs  = vArgs.elements();
        boolean bAnythingSet = false;
        while (bAnythingSet==false && allArgs.hasMoreElements())
            {
            GenericArgType thisArg = (GenericArgType)allArgs.nextElement();
            if (thisArg.wasSet())
                bAnythingSet = true;
            } // -- end while
        if (!bAnythingSet)
            {
            System.out.println(&quot;Valid arguments requiring arguments:&quot;);
            System.out.println(&quot;  -in&quot;);
            System.out.println(&quot;  -out&quot;);
            System.out.println(&quot;  -to&quot;);
            System.out.println(&quot;  -width&quot;);
            System.out.println(&quot;  -tabsize&quot;);
            System.out.println();
            System.out.println(&quot;Valid word arguments:&quot;);
            System.out.println(&quot;  -verbose&quot;);
            System.out.println(&quot;  -NoRefs&quot;);
            System.out.println(&quot;  -NoSections&quot;);
            System.out.println(&quot;  -NoPages&quot;);
            System.out.println(&quot;  -HR&quot;);
            throw new Exception(&quot;No valid command-line arguments found&quot;);
            } // -- end if
        } // -- end checkSomethingSet
    } // -- end class Go
</pre>
<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
