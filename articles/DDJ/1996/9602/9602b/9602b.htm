<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>FEB96: Improving Kermit Performance</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>Improving Kermit Performance<a name="00ab_002b"><a name="00ab_002b"><a name="00ab_0029"><a name="00ab_0000"></h1><P>

<h2>A windowing strategy makes all the difference</h2><P>

<h3>Tim Kientzle</h3><P>

<P>
<i><a name="00ab_002a"><a name="00ab_0000">Tim, a technical editor with DDJ, is the author of
The Working Programmer's Guide to Serial Protocols (Coriolis, 1995) and Internet File Formats (Coriolis,
1995). He can be contacted at kientzle@ddj.com.</i></p><hr><P>

Many people associate Kermit with ponderously slow file transfers. Conservative encoding, small packets,
and &quot;stop-and-go&quot; half-duplex transfers make speed a common complaint about the original
1981 protocol. (For a discussion of the original Kermit protocol, see &quot;Kermit Meets Modula-2,&quot;
by Brian Anderson, <I>DDJ</I>, May 1989.)<P>

A lot can change in 15 years, however. Developers at The Source Telecomputing began to experiment with
&quot;windowing Kermit,&quot; also known as &quot;SuperKermit,&quot; in 1985. Windowing allows the
Kermit sender to send multiple packets before expecting a reply. The combination of windowing, longer
packets, and relaxed encoding constraints makes today's Kermit protocol one of the most flexible and
best-performing file-transfer protocols available.<P>

Kermit's windowing approach is clearly faster than protocols such as XModem and YModem, which must
wait after each packet. What many people don't realize is that under less-than-ideal conditions, Kermit's
windowing approach is significantly faster than ZModem, a protocol with a well-deserved reputation for
fast transfers over good-quality connections. The difference lies in how these two protocols respond to
errors.<P>

In this article, I'll compare the error-handling strategies of a variety of popular protocols. I'll then give a
brief overview of Kermit and describe some simple heuristics I've developed to improve the performance of
Kermit's windowing strategy.<P>

<h3><a name="00ab_002c">Error-Handling Strategies<a name="00ab_002c"></h3><P>

Most serial and networking protocols use a general error-correction strategy called
&quot;retransmission.&quot; The sender computes an error-detecting signature value, such as a checksum
or cyclic redundancy check (CRC), for each block of data and sends that signature value with the data. The
receiver recomputes the signature and compares it with the value received from the sender. If the two
values don't match, the receiver asks the sender to retransmit the block.<P>

XModem and YModem use this strategy in a simple way. The sender sends a single packet at a time and
waits for a response. This works well if there is no delay; that is, if each packet arrives immediately at its
destination. In that case, the sender sees an instantaneous response to each packet, allowing it to maintain
an almost continuous flow of data, even when there are errors.<P>

In practice, most connections have delays. Each sent packet must navigate through system I/O buffers,
modems, networks, and other obstacles before being received. XModem can be slow when there are delays;
the sender must wait after each packet for a complete round-trip from the sender to the receiver and back.
When there are both delays and errors, there will be several round-trip delays for some packets.<P>

Because of these delays, many protocols send several packets before expecting a response. This allows the
sender to continue sending while awaiting the receiver's response, with corresponding speed gains.
However, the price of these performance gains is more-complex error handling.<P>

Protocols such as ZModem and UUCP's G protocol allow multiple outstanding packets, but attempt to reduce
the complexity by only transferring packets in order. At any point in time, the receiver only accepts the
next consecutive packet. If the receiver sees the wrong packet (for example, if the packet the receiver
expected was lost or damaged and it's now receiving a later packet), it will ignore it and send an error
notification to the sender. This simplifies both the receiver and sender. However, when an error occurs,
the two sides must wait for a complete round-trip, as the receiver's error message travels back to the
sender and the sender resends the correct packet. Intervening packets are simply discarded. As a result,
much of the speed advantage of these protocols is lost when errors occur.<P>

The most complex approach is &quot;packet reassembly,&quot; used by TCP (Transmission Control
Protocol) and Kermit. In this approach, the receiver stores each correct packet, even if it arrives out of
order. The name &quot;packet reassembly&quot; comes from the process of reassembling the packets into
the correct order before passing the received data to its destination. If a packet is damaged, only that
single packet will be resent; in ZModem, a number of subsequent packets may also have to be repeated.
When properly implemented, a protocol using packet reassembly need never wait for a full round-trip, even
when there are errors.<P>

<h3><a name="00ab_002d">Kermit Basics<a name="00ab_002d"></h3><P>

Kermit was developed at Columbia University in 1981 by Frank da Cruz and Bill Catchings to provide a way
of transferring data between a variety of different computers. Since then, Kermit has been extended to
support packet reassembly (&quot;windowing&quot;), a variety of file attributes, crash recovery,
character-set translation, and other features. Modern Kermit is efficient and flexible, providing fast
transfers under less-than-ideal conditions.<P>

In a Kermit transfer, the sender and receiver exchange packets of data. <a href="9602a2f1.gif">Figure
1</A> is the original Kermit packet format. An important design feature of Kermit is that all of the packet
overhead--including the length, sequence number, and error check--is in ASCII form. This allows Kermit,
with the optional eighth-bit encoding, to function in situations where only the printable ASCII characters can
be safely transferred. Two additional formats--&quot;long&quot; and &quot;extra-long&quot;--support
longer packets and a separate error check for the header; see <a href="199600ae.htm">Figure 2</A>.<P>

Generally, the Kermit sender sends a packet, possibly containing some data, and the receiver responds with
an <I>Acknowledge</I> packet whose data field contains the response. For example, when a file transfer
begins, the sender sends a <I>Send-Init</I> packet with an encoded string specifying the sender's
capabilities; the receiver's acknowledgment specifies the receiver's capabilities. A packet and its response
have the same sequence number. You can think of a <I>Negative Acknowledge</I> packet as a request by the
receiver for a particular packet; an idle receiver waiting to see a <I>Send-Init</I> will periodically emit
<I>Negative Acknowledgments</I> with sequence number zero. I'll use the term &quot;exchange&quot; to
refer to a single packet sent by the sender and the receiver's corresponding <I>Acknowledge</I> packet.<P>

A complete transaction starts with a <I>Send-Init</I> exchange to establish the common capabilities of the
sender and receiver. Each file transferred requires a <I>File</I> exchange to establish the filename, the
transfer of the actual file data (which I'll explain later) and an <I>End-of-File</I> exchange. After all files
are transferred, a <I>Break</I> exchange terminates the transaction.<P>

Kermit's original strategy for transferring file data used this exchange mechanism in a simple fashion. The
sender would send a <I>Data</I> packet containing some file data and wait for the corresponding
<I>Acknowledge</I> packet. The receiver would respond to the correct packet with an
<I>Acknowledg</I><I>e</I>; a timeout or an out-of-sequence packet would prompt a <I>Negative
Acknowledge</I> requesting the correct packet.<P>

If you are familiar with XModem, Kermit's original transfer strategy is similar, but with one important
difference. Every response from the receiver specifies the particular packet being acknowledged or
requested. This feature, lacking in XModem, allowed Kermit to easily add support for full-duplex packet
reassembly.<P>

<h3><a name="00ab_002e">Kermit's Packet-Reassembly Strategy <a name="00ab_002e"></h3><P>

Modern Kermit retains the original strategy for everything except the actual data transfer. The initial
handshake, start-of-file, and end-of-file negotiations would be more complex if the sender were allowed to
send multiple packets. While transferring file data, however, Kermit allows the sender to send multiple
packets before receiving an acknowledgment. The range of packets that a Kermit sender or receiver is still
actively managing is called the &quot;window.&quot;<P>

Like most protocols, Kermit limits the size of the window. The window size is negotiated by the sender and
receiver at the beginning of the transfer. If the negotiated window size is 1, the sender will wait after each
packet for a response. This is completely compatible with the original protocol. If the negotiated window
size is 20, then the sender can send a string of 20 packets before requiring an acknowledgment for the first
one. <P>

The window size is not a limit on the number of packets that have not been acknowledged. If the window size
is 20, the sender cannot send packet number 207 until it receives an acknowledgment for packet number
187, even if every intervening packet has been acknowledged. In addition, the window size cannot exceed
32 packets. Both of these restrictions are necessary to avoid ambiguity. When the receiver sees a packet
from the sender, it must determine the full packet sequence number from the six bits stored in the packet
header. The only additional information the receiver has for determining the full packet-sequence number is
the window size; the full packet number of the packet just received cannot differ from the packet expected
by the receiver by more than the window size.<P>

<h3><a name="00ab_002f">Window Management<a name="00ab_002f"></h3><P>

In my Kermit implementation, the details of packet reassembly are handled by the &quot;reliability&quot;
layer. Lower layers handle the transmission and reception of single packets. Higher layers handle the
transfer of entire files. The reliability layer ensures that each packet arrives at its destination; this is
where errors are handled.<P>

For simpler protocols such as XModem and YModem, the receiver's reliability functions wait for the
correct packet, sending negative acknowledgments until the expected packet is successfully received. The
sender's reliability layer repeatedly sends a packet until it is acknowledged.<P>

For Kermit, this simple picture isn't sufficient. To the higher layers, the reliability layer looks the same as
the simple case previously described. The reliability layer functions are still called once to send or receive
each packet. Internally, however, there are significant differences. The reliability layer must cache data so
it can juggle out-of-order packets.<P>

Under good conditions, the sender's reliability function can always return immediately. Every time the
function is called, it has already received an acknowledgment for the first packet in the window, so the
function can return as soon as it sends the new packet, stores the packet in the cache, and processes any
pending packets.<P>

Under less ideal conditions, the sender must exercise some care to keep the transfer moving smoothly. For
example, consider the situation in <a href="9602b.htm#00ab_0035">Figure 3</A>. Each <I>D</I> is a
<I>Data</I> packet sent; the <I>Y</I>s are the corresponding <I>Acknowledge </I>packets. As you can see,
packet 32 was just sent; the most recent <I>Acknowledge</I> was for packet 25. However, no
<I>Acknowledge</I> has been received for packet 13. If the window size is 20, then no further packets can
be sent until the acknowledgment for packet 13 is received; the window is said to be &quot;blocked.&quot;
In my implementation, the sender's reliability function will not return until the window becomes unblocked.
<P>

The challenge for the sender is to keep the window from blocking. It can do this by correctly determining
when to resend a packet. In <a href="9602b.htm#00ab_0035">Figure 3</A>, if the sender had resent
packet 13 earlier, it might have received an acknowledgment by now and avoided having the window
block.<P>

Just keeping the window from blocking isn't enough, however. One naive strategy is to resend a packet
whenever a later packet is acknowledged. With that strategy, the sender would have sent a total of 13
copies of packet 13 by the time the situation in <a href="9602b.htm#00ab_0035">Figure 3</A> arose,
and would likely have received a response from one of those repeated packets in time to avoid having the
window block. But that approach would slow the rest of the transfer; time spent needlessly repeating
packet 13 could have been spent sending additional data. The trick is to repeat packets soon enough that a
response can be obtained before the window blocks, but infrequently enough to avoid needless
duplication.<P>

<h3><a name="00ab_0030">Keeping the Books<a name="00ab_0030"></h3><P>

As you might expect, the way to break this apparent impasse is to track the correct data about each packet.
There are two basic sources of information: sequence and time. <P>

Unlike some networking protocols, Kermit operates over serial connections in which packet order is
preserved. If you get an acknowledgment for packet 14 without seeing one for packet 13, then you can
reasonably assume that packet 13 should be repeated; see <a href="9602b.htm#00ab_0036">Figure
4</A>.<P>

Using packet sequence to detect lost packets does not mean using the packet-sequence numbers. In <a href="9602b.htm#00ab_0036">Figure 4</A>, packets 21 and 22 were just sent; the next packets sent
will be 13 and 23. If at some point you receive an acknowledgment for packet 13, you can use that to check
if packets 21 or 22 should be repeated. You can track the actual packet sequence by storing, for each packet
sent, the number of the previously sent packet. That way, each time you receive an acknowledgment, you
can chain back to check the previously sent packets.<P>

This chaining must be handled carefully to avoid degenerate situations. For example, if a packet is sent
twice in a row, you don't want it to indicate itself as the previously sent packet. I maintain this list as a
doubly linked list and remove each sent packet from the list and reinsert it at the end. <a href="9602b.htm#00ab_0037">Example 1</A> is an outline of the code that's executed every time a
packet is sent.<P>

Of course, even with this sequencing heuristic, the window will sometimes block. For example, at the end of
the file-data transfer, the window size is reduced to one, which will almost always result in a blocked
window as the final packets of file data are handled.<P>

As before, a blocked window is no reason to needlessly repeat the first packet in the window. Instead,
repeat a packet only when you're reasonably certain that enough time has elapsed for a response to have
been received. Most protocol implementations rely on fixed or user-specified timeouts. My Kermit
implementation instead measures the round-trip delay and adjusts the timeout based on the observed
behavior. This only requires timestamping each sent packet and measuring the delay when an
acknowledgment is received. To avoid ambiguity, I only use round-trip measurements for packets that were
sent once.<P>

Knowing the average round-trip delay isn't quite sufficient. Some connections have a wide variation in the
delay. One packet might require only four seconds for a round-trip; the next might require ten. This kind of
variation is common on some packet-switched networks and when transferring files with heavily loaded
hosts. Again, rather than hard-wiring assumptions about the connection, I measure the standard deviation
of the round-trip delay. <a href="9602b.htm#00ab_0038">Example 2</A> is the method I use for
tracking the average round-trip time and the standard deviation. To avoid overflow, I use the definition of
standard deviation (root-mean-square of the differences from the mean) rather than one of the many
standard formulas. My time routines return time values in milliseconds and the standard formulas require
keeping the sum of the squares of the delays. These squares will be quite large, and overflowing a 32-bit
integer is a real possibility. By keeping a decaying average of the squares of the differences, I can more
easily bound the intermediate values in my standard-deviation computation. To compute the square root, I
use one iteration of Newton's method on each iteration. From these statistics, I use a timeout interval of the
round-trip time plus three times the standard deviation plus two seconds.<P>

<h3><a name="00ab_0031">Implementation<a name="00ab_0031"></h3><P>

<a href="9602b.htm#00ab_003a">Listing One</A> (beginning on page 91) presents
<I>KSendPacketReliable</I>, the primary reliability function from my implementation of Kermit. This
function is called with a packet of data to be sent. It tracks information about the currently outstanding
packets and processes responses from the receiver. The KERMIT_PRIVATE structure maintains information
about the transfer; a pointer to it is passed to each function. In particular, the KERMIT_PRIVATE structure
maintains a cache of 64 EXCHANGE structures, one for each possible packet-sequence number. Each
EXCHANGE structure maintains information about a particular packet exchange, including the type of the
packets sent and received, the time the packet was sent, the number of times the packet was sent, and
pointers to the actual packet data.<P>

The full implementation for my program, which provides basic Kermit file-transfer support, is available
electronically (see &quot;Availability,&quot; page 3). The UNIX version has been compiled using GCC 2.6 on
FreeBSD 2.0. The serial routines in ftserial.c may require tweaking for other UNIX-like platforms. <P>

<h3><a name="00ab_0032">Conclusion<a name="00ab_0032"></h3><P>

My earlier Kermit implementations used a variety of different heuristics for deciding when to repeat
packets. One simply resent the first packet when the window blocked; another resent it when certain later
acknowledgments were received. Replacing those approaches with the heuristics described in this article
substantially improved performance and answered questions that had arisen from the earlier attempts. (For
example, it was clear early on that retransmission should be considered when the window is blocked and
when an <I>Acknowledge </I>is received. The two different heuristics described in this article neatly
answered the requirements of those two different situations.)<P>

I've timed file transfers with two Kermit implementations and two ZModem implementations over a local
modem connection that lacks proper flow control. In this situation, my Kermit implementation achieved
more than twice the transfer speed of any of the three alternatives, and was nearly five times as fast as
one of the ZModem implementations. Although inconclusive, these results suggest that these heuristics can
allow even imperfect connections to achieve good throughput.<P>

<h3><a name="00ab_0033">Acknowledgment<a name="00ab_0033"></h3><P>

Tom Lippincott originally suggested the sequencing heuristic described in this article.<P>

<h3><a name="00ab_0034">References<a name="00ab_0034"></h3><P>

Frank da Cruz's <I>Kermit: A File Transfer Protocol</I> (Digital Press, 1987) is the definitive reference on
the Kermit protocol. Also see http://www.columbia.edu/kermit.<P>

The source code described here is more fully explained in my book <I>The Working Programmer's Guide to
Serial Protocols</I> (Coriolis Books, 1995), which also gives in-depth explanations of ZModem and Kermit.
The sequencing and timeout heuristics presented here are new, however.<P>

The complete source code from the book is available from ftp.coriolis.com in the /pub/bookdisk/serial
directory. It's periodically updated with bug fixes and other improvements.<P>

<h4><B><a href="9602a2f1.gif">Figure 1</A>:</B> Kermit short packet format.</h4><P>

<h4><B><a href="199600b0.htm">Figure 2</A>:</B> Kermit long and extra-long packet format.</h4><P>

<h4><a name="00ab_0035"><B>Figure 3:</B> Window blocked (window size of 20).<a name="00ab_0035"></h4><P>

<pre>             1    1   2    2    3   3    4    4    5    5    6
   0....5....0....5....0....5....0....5....0....5....0....5....0...
Tx:             DDDDDDDDDDDDDDDDDDDD                              :
Rx:             .YYYYYYYYYYYY.......                              :</pre>

<h4><a name="00ab_0036"><B>Figure 4:</B> Acknowledgement for Packet 13 lost.<a name="00ab_0036"></h4><P>

<pre>             1    1    2    2    3    3    4    4    5    5    6
   0....5....0....5....0....5....0....5....0....5....0....5....0...
Tx:   DDDDDDDDDDDDDDDDDDDD                                        :
Rx:   YYYYYYYYYY.Y........                                        :</pre>

<h4><a name="00ab_0037"><B>Example 1:</B> Maintaining the list of sent packets.<a name="00ab_0037"></h4><P>

<pre>/* Step 1: Unlink this packet from doubly-linked list */
  slot = sequence number of this packet
  prev = exchange[slot].previousPacket;
  next = exchange[slot].nextPacket;
  if (slot == lastPacket) lastPacket=prev;
  if (prev &gt;= 0) exchange[prev].nextPacket = next;
  if (next &gt;= 0) exchange[next].previousPacket = prev;
/* Step 2: Link at end of list */
  exchange[slot].previousPacket = lastPacket;
  exchange[slot].nextPacket = -1;
  exchange[lastPacket].nextPacket = slot;</pre>

<h4><a name="00ab_0038"><B>Example 2:</B> Estimating the average and standard deviation.<a name="00ab_0038"></h4><P>

<pre>thisDelay = now - &lt;time packet was sent&gt;;
if (roundTripSamples++ == 0) {
   /* Handle first sample differently */
   roundTripDelay = thisDelay;
   roundTripDelayDifference = 0;
}else{
   /* Use real average for first 30 samples, then decaying average */
   if (roundTripSamples &gt; 30)
      roundTripSamples=30;
   /* Compute the square of the difference */
   differenceSquared = (thisDelay-roundTripDelay)*(thisDelay-roundTripDelay);
   /* Update the average */
   roundTripDelay += (thisDelay-roundTripDelay)/roundTripSamples;
   /* Update the mean square */
   roundTripDelayVariance += (differenceSquared-roundTripDelayVariance)
/roundTripSamples;
   /* Update root-mean-square using Newton's method */
   roundTripDelaySD = (roundTripDelaySD +
              roundTripDelayVariance/roundTripDelaySD) / 2;
}</pre>

<P>

<h4><a name="00ab_0039"><a name="00ab_003a">Listing One<a name="00ab_003a"></h4><pre>
STATIC int KSendPacketFromCache(KERMIT_PRIVATE *pK,long sequence,int addToList)
{
   int     slot = sequence &amp; 63;
   long    prev, next;
   if ((pK-&gt;exchange[slot].myPacket.type == 0) 
                                || (pK-&gt;exchange[slot].myPacket.data == NULL))
      return kOK;
   prev = pK-&gt;exchange[slot].previousPacket; /* Unlink from list */
   next = pK-&gt;exchange[slot].nextPacket;
   if ((pK-&gt;lastPacket &amp; 63) == slot) pK-&gt;lastPacket = prev;
   if (prev &gt;= 0) pK-&gt;exchange[prev &amp; 63].nextPacket = next;
   if (next &gt;= 0) pK-&gt;exchange[next &amp; 63].previousPacket = prev;
   pK-&gt;exchange[slot].nextPacket = -1;
   pK-&gt;exchange[slot].previousPacket = addToList ? pK-&gt;lastPacket : -1;
   if (addToList) {
      if (pK-&gt;lastPacket &gt;= 0) /* Add to end of list */
          pK-&gt;exchange[pK-&gt;lastPacket &amp; 63].nextPacket = 
                                                  pK-&gt;exchange[slot].sequence;
      pK-&gt;lastPacket = pK-&gt;exchange[slot].sequence;
   }
   pK-&gt;exchange[slot].tries++; /* Count number of sends */
   pK-&gt;exchange[slot].sendTime = SerialTime (pK-&gt;initTime); 
                                                       /* Stamp time of send */
   return StsWarn (KSendPacket (pK, slot, pK-&gt;exchange[slot].myPacket.type, 
                                                                  /* Send it */
                                pK-&gt;exchange[slot].myPacket.data,
                                pK-&gt;exchange[slot].myPacket.length));
}
STATIC int KSendPacketReliable(KERMIT_PRIVATE *pK, BYTE type,
                  const BYTE *pSendData, unsigned long sendDataLength, 
                                                  unsigned long rawDataLength)
{
   int     blocked = FALSE;
   int     err;
   int     slot = pK-&gt;sequence &amp; 63;
   int     timeout = pK-&gt;my.timeout;
   { /* Put packet into cache */
      EXCHANGE *pThisExchange = &amp;(pK-&gt;exchange[slot]);
      if (pThisExchange-&gt;myPacket.data == NULL) {
         if (pK-&gt;minCache &lt; pK-&gt;minUsed) {
            SwapSlots (pK-&gt;minCache, slot); 
                                      /* Move free exchange to end of window */
            pK-&gt;minCache++;
            pThisExchange-&gt;yourPacket.type = 0;
         } else return StsWarn (kFail); /* Internal consistency failure */
      }
      if (pSendData == pK-&gt;spareExchange.myPacket.data) { 
                                                 /* In the reserved slot ? */
         BYTE   *pTmp = pThisExchange-&gt;myPacket.data;   /* Just swap it in */
         pThisExchange-&gt;myPacket.data = pK-&gt;spareExchange.myPacket.data;
         pK-&gt;spareExchange.myPacket.data = pTmp;
      } else /* copy it */
         memcpy (pThisExchange-&gt;myPacket.data, pSendData, sendDataLength);
      if (pK-&gt;sequence &gt; pK-&gt;maxUsed) pK-&gt;maxUsed = pK-&gt;sequence; 
                                                    /* Update end of window */
      pThisExchange-&gt;sequence = pK-&gt;sequence;  
                                       /* Finish initializing this exchange */
      pThisExchange-&gt;myPacket.length = sendDataLength;
      pThisExchange-&gt;myPacket.type = type;
      pThisExchange-&gt;rawLength = rawDataLength;
      pThisExchange-&gt;tries = 0;
      pK-&gt;txPacket.data = pK-&gt;spareExchange.myPacket.data;
      pK-&gt;txPacket.length = 0;
   }
   StsRet (KSendPacketFromCache (pK, pK-&gt;sequence, TRUE)); /* Send packet */
   if (pK-&gt;minUsed &lt;= pK-&gt;minCache)  blocked = 1; /* Are we blocked? */
   if (pK-&gt;maxUsed - pK-&gt;minUsed + 1 &gt;= pK-&gt;currentWindowSize)
                                                      /* How blocked are we? */
      blocked = (pK-&gt;maxUsed - pK-&gt;minUsed + 1) - pK-&gt;currentWindowSize + 1;
   err = KReceivePacketCache (pK, 0); /* Get a packet if one's ready */
   do { /* Until we're not blocked and there are no more packets pending */
      switch (err) {
      case kBadPacket: /* Didn't get a packet */
      case kTimeout:
         break;
      default:  /* Unrecognized error, pass up to caller */
         return StsWarn (err);
      case kOK: /* Got one! */
        {
          EXCHANGE *pThisExchange = &amp;(pK-&gt;exchange[pK-&gt;rxPacketSequence &amp; 63]);
          switch (pK-&gt;rxPacket.type) {
          case 'N': /* Got a NAK */
             if (pThisExchange-&gt;myPacket.type != 0) /* Resend packet */
               StsRet (KSendPacketFromCache (pK, pK-&gt;rxPacketSequence, FALSE));
             if ((pK-&gt;currentWindowSize &gt; 1) || (pK-&gt;maxUsed &gt; pK-&gt;minUsed))
               break; /* Don't generate implicit ACKs for large windows */
             pThisExchange = &amp;(pK-&gt;exchange[(pK-&gt;rxPacketSequence - 1) &amp; 63]);
             pThisExchange-&gt;yourPacket.type = 'Y';
          case 'Y': /* Got an ACK */
             if (pThisExchange-&gt;rawLength &gt; 0) { /* ACKed before?*/
                if (pThisExchange-&gt;tries == 1) { /* Update round-trip stats */
                    long    now = SerialTime (pK-&gt;initTime);
                    long    thisDelay = now - pThisExchange-&gt;sendTime;
                    if (pK-&gt;roundTripSamples++ == 0) { /* First sample? */
                        pK-&gt;roundTripDelay = thisDelay;
                        pK-&gt;roundTripDelayVariance = 0;
                 } else {
                        long    oldAverage = pK-&gt;roundTripDelay;
                        long    diffSquared;
                        if (pK-&gt;roundTripSamples &gt; 30) /* Average first 30 */
                           pK-&gt;roundTripSamples = 30;
                                                    /* Then decaying average */
                        pK-&gt;roundTripDelay += (thisDelay - pK-&gt;roundTripDelay) 
                                  / pK-&gt;roundTripSamples;
                        diffSquared = (thisDelay - oldAverage) * 
                                                      (thisDelay - oldAverage);
                        pK-&gt;roundTripDelayVariance += (diffSquared - 
                                         pK-&gt;roundTripDelayVariance) / 
                                         pK-&gt;roundTripSamples;
                        pK-&gt;roundTripDelaySD = (pK-&gt;roundTripDelaySD +
                                         pK-&gt;roundTripDelayVariance / 
                                         pK-&gt;roundTripDelaySD) / 2;
                     }
                  }
                  if (pK-&gt;sending) /* Update file progress on receipt of ACK */
                     pK-&gt;filePosition += pThisExchange-&gt;rawLength;
                  pThisExchange-&gt;rawLength = 0; /* Don't count packet again */
               }
           {
                  long    j, i = pThisExchange-&gt;previousPacket;
                  while (i &gt;= 0) { /* Resend packets based on send order*/
                     j = pK-&gt;exchange[i &amp; 63].previousPacket;
                     if (pK-&gt;exchange[i &amp; 63].yourPacket.type != 'Y')
                        StsRet (KSendPacketFromCache (pK, i, TRUE));
                     i = j;
                  }
               }
               while ((pK-&gt;exchange[pK-&gt;minUsed &amp; 63].yourPacket.type == 'Y')
               &amp;&amp; (pK-&gt;exchange[pK-&gt;minUsed &amp; 63].sequence == pK-&gt;minUsed)) {
                { /* Free up slots that have been acknowledged */
                  long    prev, next;
                  prev = pK-&gt;exchange[pK-&gt;minUsed &amp; 63].previousPacket; 
                                                                   /* Unlink */
                  next = pK-&gt;exchange[pK-&gt;minUsed &amp; 63].nextPacket;
                  if ((pK-&gt;lastPacket &amp; 63) == (pK-&gt;minUsed &amp; 63))  
                                                         pK-&gt;lastPacket = prev;
                  if (prev &gt;= 0) pK-&gt;exchange[prev &amp; 63].nextPacket = next;
                  if (next &gt;= 0) pK-&gt;exchange[next &amp; 63].previousPacket = prev;
                  pK-&gt;exchange[pK-&gt;minUsed &amp; 63].previousPacket = -1;
                  pK-&gt;exchange[pK-&gt;minUsed &amp; 63].nextPacket = -1;
                  }
                  pK-&gt;minUsed++; /* Mark this exchange as free */
                  if (blocked &gt; 0) blocked--; /* Reduce count to unblock window*/
               }
               break;
            case 'E': /* Received error packet, terminate transfer */
               return StsWarn (kFailed);
            default: /* Received unrecognized packet type, terminate */
               return StsWarn (kFail);
            }
         }
         break;
      }
      { /* Resend timed-out packets */
         long    i;
         unsigned long now = SerialTime (pK-&gt;initTime);
         unsigned long packetTimeout = pK-&gt;roundTripDelay + 
                        3 * pK-&gt;roundTripDelaySD + 2 * SERIAL_TIME_SCALE; 
                       /* Avg + 3 standard deviations + 2 seconds */
         long    oldest = -1;
         unsigned long oldestTime = ULONG_MAX;
         long    firstOld = -1;
         for (i = pK-&gt;minUsed; i &lt;= pK-&gt;maxUsed; i++) {
            if (pK-&gt;exchange[i &amp; 63].yourPacket.type != 'Y') {
               if ((firstOld == -1) &amp;&amp; (pK-&gt;exchange[i &amp; 63].sendTime + 
                                                          packetTimeout &lt; now))
                  firstOld = i; /* Find first timed-out packet */
               else if (pK-&gt;exchange[i &amp; 63].sendTime &lt; oldestTime) { 
                                                      /* Find oldest packet */
                  oldestTime = pK-&gt;exchange[i &amp; 63].sendTime;
                  oldest = i;
               }
            }
         }
         if (firstOld != -1) /* Resend first timed-out packet */
            StsRet (KSendPacketFromCache (pK, firstOld, FALSE));
         if (oldestTime == ULONG_MAX) timeout = pK-&gt;my.timeout;
         else if (packetTimeout + oldestTime &lt; now) /* Next oldest? */
            timeout = 0;
         else /* Compute interval until next timeout */
            timeout = (packetTimeout - (now - oldestTime)) / SERIAL_TIME_SCALE;
         if (timeout &lt; 1) timeout = 1; /* Minimum is one second */
         if (timeout &gt; pK-&gt;my.timeout) timeout = pK-&gt;my.timeout; 
                                                 /* Max is negotiated value */
      }
      err = KReceivePacketCache (pK, blocked ? timeout : 0); 
                                                  /* Try to receive a packet */
   } while (blocked || (err == kOK));
   if (pK-&gt;exchange[pK-&gt;sequence &amp; 63].yourPacket.type &amp;&amp;
       (pK-&gt;exchange[pK-&gt;sequence &amp; 63].sequence == pK-&gt;sequence))
      pK-&gt;rxPacket = pK-&gt;exchange[pK-&gt;sequence &amp; 63].yourPacket;
   pK-&gt;sequence++;
   if (err == kTimeout)  return kOK;
   if (err == kBadPacket) return kOK;
   return StsWarn (err);
}
</pre>
<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
