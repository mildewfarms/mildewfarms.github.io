<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>FEB96: Examining RogueWave's Tools.h++</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>Examining RogueWave's Tools.h++<a name="00c8_0039"><a name="00c8_0039"><a name="00c8_0037"><a name="00c8_0000"></h1><P>

<h2>A class library for C++ programmers</h2><P>

<h3>P.W. Scherer</h3><P>

<P>
<i><a name="00c8_0038"><a name="00c8_0000">Perry is a senior systems analyst for Arco Alaska
and can be contacted at laspws@aai.arco.com.</i></p><hr><P>

A while back I wrote a fairly complex system for storing and retrieving petroleum-reservoir simulation
X/Y plot output. Using only a compiler, it took me over a year to develop the application, which consisted of
about 30,000 lines of C++ code.<P>

When the time came to port the program to another platform, a fellow developer introduced me to
RogueWave's Tools.h++ foundation-class library. Surprisingly, it only took me three months to write the
new version, which was only 6000 lines long. Furthermore, the run-time speed of the app increased by
more than an order of magnitude. <P>

This project made me a believer in good foundation-class libraries. Luckily, C++ programmers have a
variety of options, including STL, MFC, Booch, and RogueWave. In this article, I'll examine RogueWave's
Tools.h++, the cornerstone for all of my C++ work since that first successful project.<P>

<h3><a name="00c8_003a">RogueWave Tools.h++ Overview<a name="00c8_003a"></h3><P>

RogueWave's Tools.h++ is a C++ class library consisting of more than 100 C++ classes, including those for
time, dates, strings, linked lists, and other fundamental structures. Other classes support virtual streams,
string and character manipulation, file management, regular expressions, tokenizers, virtual-page and
buffered-page heaps, buffered-disk page heaps, timers, benchmarks, templates, bit vectors, cache
managers, error handling, iterators, and more. The classes can be run as a DLL, allowing smaller
executables and code sharing. <P>

Tools.h++ also includes a complete set of Smalltalk-like collection classes. Class Set, for instance, can be
used to collect a group of screen windows that will need to be refreshed, eliminating redundant refreshes.
All classes support persistence, allowing objects to be saved to disk and restored later. Multiple pointers to
the same object can also be restored. All classes are extensible so that you can create your own custom
classes. <P>

The class library is compatible with most compilers and platforms, including Windows 3.x, Windows 95,
Windows NT, MS-DOS, OS/2, Macintosh, Sun/SunOS, Solaris, IBM RS/6000/AIX, Silicon Graphics
Iris/IRIX, HP/HP-UX, DG/DG/UX, UNIX System V, and even Linux. <P>

<h3><a name="00c8_003b">String Support<a name="00c8_003b"></h3><P>

String manipulation is an area where class libraries can shine, and RogueWave's <I>RWCString</I> class
family is no exception. In addition to the expected behaviors for strings (dynamic resizing, concatenation
operators, and so on), <I>RWCString</I> is multithread safe and supports multibyte character sets. It uses
&quot;copy on write&quot; methods during copy construction for higher efficiency. &quot;Copy on
write&quot; maintains reference counts to a single instance until copying is forced by a change to one of the
referenced instances.<P>

<I>RWCString</I> is typically one of the first classes new Tools.h++ users become familiar with. In <a href="9602i.htm#00c8_0045">Listing One</A>, for example, <I>Operato</I><I>r</I><I>()</I> has been
overloaded to accept a regular-expression argument. The operator returns a reference to a substring
(<I>RWCSubString</I>, cousin of <I>RWCString</I>) whose extent is the segment &quot;34.5&quot;. The
assignment operator &quot;=&quot; is used to replace segment &quot;34.5&quot; with segment
&quot;184.9&quot;. This syntax is elegant and cleverly designed. <P>

Note that in <a href="9602i.htm#00c8_0047">Listing Two</A>, <I>RW</I><I>C</I><I>Tokenizer</I> does
not alter the string being tokenized. This behavior is entirely different from the standard <I>strtok</I>,
which deposits NULLs between every token in the tokenized string. Note also that <I>RWCString</I>s are
aware of <I>streambuf</I> and virtual stream I/O. RogueWave gives all of its foundation classes this
ability. <I>RWWString</I>, the multibyte analog of <I>RWCString</I>, contains much of the functionality of
<I>RWCString</I>, but understands <I>wchar_t</I> (wide <I>cha</I><I>r</I>*) character units.<P>

<h3><a name="00c8_003c">Date/Time Handling <a name="00c8_003c"></h3><P>

If you have ever written (or maintained) time/date functions based upon time.h, you will appreciate
Tools.h++'s time and date functionality. Classes such as <I>RWDate</I> and <I>RWTime</I> let you program
at the level of a Visual Basic programmer for such standard concepts as date and time. <a href="9602i.htm#00c8_0049">Listing Three</A> illustrates how you can use these two classes. As <a href="9602i.htm#00c8_004b">Listing Four</A> shows, RogueWave has also gone a long way toward
supporting internationalization. <P>

The only thing I've struggled with concerning <I>RWTime</I> is &quot;4294967295,&quot; the largest
unsigned <I>long</I>. One of <I>RWTim</I><I>e</I>'s private members is the number of seconds since
1/1/1901 UTC. Given that &quot;02/05/2037 21:18:15&quot; is exactly 4,294,967,295 seconds from
1/1/1901, you have discovered an upper time bound that you should be aware of if you need dates past
2037. There are many obvious workarounds, but I nonetheless forgot about it--and users discovered it for
me.<P>

<h3><a name="00c8_003d">Template Classes<a name="00c8_003d"></h3><P>

Templates are parametrized collection classes, where the parameter is the type of the object being
collected. Tools.h++ templates come in three flavors: intrusive lists, value-based collections, and
pointer-based collections. Most of my recent development work has been with the <I>pointer</I> and
<I>value</I> template classes. The stricter class typing inherent in template-based programming offers
significant advantages over the older polymorphic-inheritance approaches. Templates greatly simplify
complex data-structure manipulation. <P>

In general, value-based collections offer easier syntax (less pointer manipulation and manual free-store
destruction) at the expense of decreased performance during insertions and deletions. The performance
issue is related to the fact that value-based collections make copies of inserted items rather than simply
referencing the pointer. <P>

I typically use value-based templates on small data structures of fairly constant size,
&quot;template-ready&quot; classes from RogueWave (<I>RWCString</I> or <I>RWDate</I>, for instance),
or built-in types like <I>floa</I><I>t</I>s or <I>in</I><I>t</I>s. When the data-structure complexity
warrants, or when the collection is frequently updated through resizing or insertion, I generally pick a
pointer-based template.<P>

Consider the data structure in <a href="9602i.htm#00c8_004d">Listing Five</A>, which could represent
a point on an X/Y curve and a textual description of the point. In order to collect this <I>XYPoint</I>
structure in a Tools.h++ template, you must extend the data structure so that the semantics of the
structure can be supported by the template. Clearly, these <I>XYPoin</I><I>t</I>s should be stored in a
sorted collection. The sort order should be determined by the <I>xDate</I> member. We must also know
when two items are &quot;equal.&quot; In addition, copy construction, default construction, and
assignment semantics should be defined; see <a href="9602i.htm#00c8_004f">Listing Six</A>. The class
<I>XYPoint</I> is now ready to be used with nearly any of the Tools.h++ pointer or value templates. In
short, the templates features in <a href="9602i.htm#00c8_0043">Table 1</A> are automatically
available when you use Tools.h++ templates. <a href="9602i.htm#00c8_0051">Listing Seven</A>
illustrates both pointer- and value-sorted vector template usage.<P>

All expected behavior for collections with the exception of object persistence is well covered by Tools.h++
templates. Templates in both the pointer and value variety include hash dictionaries, sorted vectors,
ordered vectors, singly and doubly linked lists, hash sets (uniqueness enforced), stacks, and queues. For
those few compilers that do not yet support templates or support them incompletely, Tools.h++ provides
&quot;generic&quot; collection classes, similar to templates but less efficient. These use some of the
macro-based parametrized types described by Stroustrup. Few users will need these classes, but they may
come in handy for the occasional compiler incompatibility problems that may come up during RogueWave
installation. Gnu's g++ has had some historical compatibility problems with Tools.h++, so future releases of
g++ may require the generic pseudotemplates.<P>

<h3><a name="00c8_003e">Adding Persistence <a name="00c8_003e"></h3><P>

Persistence is not built into the Tools.h++ templates, but RogueWave makes it easy to add object
persistence by providing the <I>RWvistream</I> and <I>RWvostream</I> abstract base classes. These
classes capitalize on the considerable strengths of the <I>iostream</I> model, but extend the functionality
for arbitrary binary data and abstraction of byte sources and sinks. Tools.h++ provides its own instantiable
ASCII and binary veneer over the <I>streambuf</I> class (<I>RWp[io]stream</I> and
<I>RWb[io]strea</I><I>m</I>, respectively). <P>

The beauty of virtual streams is the power that the generalization of data sources and sinks implies. When
you send a class to a <I>RWvostream</I>, you are effectively sending it without concern for its storage
format within the stream pipeline. This opens up all sorts of possibilities, such as using object persistence
over network protocols like Berkeley sockets. You could write your object to a socket-based child of
<I>RWvostream</I>, whereupon it could be received and read across the network by another socket-based
child of <I>RWvistream</I>. The implementation of the streaming operators to accomplish this behavior is
invariant across the choice of storage media. In other words, the same streaming functions can be used to
store a class onto a network or an ASCII file. I've implemented such a scheme using Tools.h++'s
<I>RWbistream</I> and <I>RWbostream</I> by adding virtual stream capabilities to a class of my own
design. Then, I constructed <I>bistreams</I> and <I>bostreams</I> on either end of an interprocess pipeline.
I could then simply send the binary data as a class through the pipeline, whereupon it could be caught at the
other end of the pipeline in exactly the state we had sent it. The result is elegant: Instead of sending a
stream of bytes that must be reparsed on the other end, we send an entire object capable of reconstructing
itself on the other side. The reconstructed object retains all of its original methods and properties.<P>

In another recent engineering project, we discovered that an application of ours had become I/O bound. This
program performed a series of material balance calculations on 600 multiwell patterns for the Kuparuk
River Unit, the second largest oil field in the United States. It was too time consuming for the engineers to
request the data from a relational database because the data required for the material-balance calculations
was extremely hierarchical. We decided, therefore, to implement a persistent RogueWave class capable of
being written to and read from a RogueWave virtual stream. This class encapsulated the entire time-valued
behavior of a material-balance pattern, including the cumulative fluid amounts, reservoir-volume
conversion factors, and initial properties of the pattern. The Oracle access speed per pattern was about 30
seconds. With Tools.h++ virtual streams, we were able to cut access time to a fraction of a second. The
Oracle data was processed at night in a huge batch process into the RogueWave object database. In the
morning, the engineers were able to rapidly flip through the patterns and make decisions at a much faster
rate. <P>

<a href="9602i.htm#00c8_0053">Listing Eight</A> extends the <I>XYPoint</I> class to be
&quot;virtual-stream aware.&quot; Since <I>RWDate</I> and <I>RWCString</I> are already virtual-stream
aware, this task becomes trivial. <P>

These functions store the individual class you are collecting, but what about the collection itself? How do
you implement persistence for a Tools.h++ template collection? For simple vectors, you must store only
the integer number of elements followed by the individual members of the collection. This is not a preferred
method due to the loss of objectmorphology. However, if you purchase the source code from RogueWave,
you can build children of the template classes which contain some of the persistence methods of the
Smalltalk collectable classes. I've implemented a child of <I>RWTPtrSortedVector</I> with some basic
persistence capabilities without much trouble. <P>

<h3><a name="00c8_003f">Smalltalk-like Collection Classes<a name="00c8_003f"></h3><P>

If you use polymorphic inheritance trees in your class design, you will not be disappointed with
RogueWave's implementation of its Smalltalk-80-like Collection Classes. Any object of this variety must
ultimately be derived from the <I>RWCollectable </I>abstract base class, the root of the inheritance tree.
Although the trend seems to be moving away from this variety of class design and toward templates, this
approach has distinct advantages. The programming interface is a bit cleaner. There is an aesthetic
&quot;goodness&quot; in the fact that inheritance trees reuse object code rather than source code (as
templates do). Tools.h++ also provides elegant, more-complete persistence methods for all children of
<I>RWCollectable</I>. The persistence methods alone make <I>RWCollectable</I> worthwhile for projects
that store and retrieve objects from files other than traditional databases. <P>

The methods for making a class <I>RWCollectable</I> are similar to those for making it compatible with
Tools.h++ templates, but more extensive. The usual methods for equality, comparison, construction, and
destruction must be defined. <I>RWCollectable</I> classes must additionally redefine virtual persistence
functions <I>restoreGuts</I> and <I>saveGuts</I>. These functions have been overloaded for both
<I>RWFile</I> (a file I/O veneer class) and <I>RWv[io]stream</I> classes. An <I>isA()</I> function must be
defined to return the type of an <I>RWCollectable</I> child. This allows you to identify object types during
ambiguous moments such as construction of collectibles whose type is unknown until run time. The weak
typing of such class design can lead to the usual casting problems of all inheritance trees, but being able to
store several types of <I>RWCollectable</I> classes within common containers such as
<I>RWSortedVector</I> and <I>RWBTreeDictionary</I> is compensation enough.<P>

<h3><a name="00c8_0040">Object-Database Management <a name="00c8_0040"></h3><P>

The strong suit of the Smalltalk Tools.h++ classes is their advanced persistence mechanisms. However, a
database must know how to organize multiple objects on a disk all at once and be able to retrieve them
rapidly. <I>RWFileManager</I>, child of <I>RWFile</I>, performs such a function by maintaining a linked list
of free-space blocks within a disk file. Requests can be made to <I>RWFileManager</I> for just enough space
to store a given class instance. <I>RWCollectable</I> classes can return the space required to store
themselves with member function <I>binaryStoreSize()</I>. <I>RWBTreeOnDisk</I> maintains a B-tree on
the disk file. The disk-based B-tree is used in conjunction with <I>RWFileManager</I> to associate a name
(<I>const cha</I><I>r</I>*) with each object stored with <I>RWFileManager</I>.<P>

The name can be used later to retrieve the object from the disk file using the high-speed disk B-Tree. I've
used this technique when storing large amounts (up to 50-MB files) of X/Y curve objects. These
file-management classes are robust and extremely fast and provide an alternative storage mechanism for
data that does not fit well within the relational paradigm. (For details on an application that implements this
feature, see my article &quot;Simplifying C++ GUI Development,&quot; <I>DDJ</I>, September 1995.) <P>

In <a href="9602i.htm#00c8_0055">Listing Nine</A>, which illustrates how to use the Tools.h++
object-database management facilities, my address is stored on the disk file with the key
&quot;Perry.&quot; As <a href="9602i.htm#00c8_0057">Listing Ten</A> shows, retrieving the address
is straightforward.<P>

<h3><a name="00c8_0041">Conclusion<a name="00c8_0041"></h3><P>

The parts of the Tools.h++ library I've examined in this article barely scratch the surface of what
RogueWave offers. The library also provides database wrappers, graphics libraries, linear-algebra
support, a Motif wrapper, and even its own version of the Booch Components. In short, RogueWave has a
tool for just about any standard programming task.<P>

<h3><a name="00c8_0042">For More Information<a name="00c8_0042"></h3><P>

Tools.h++<P>

RogueWave Software<P>

260 SW Madison Avenue<P>

Corvallis, OR  97333<P>

503-754-3010<P>

http://www.roguewave.com<P>

<h4><a name="00c8_0043"><B>Table 1:</B> Tools.h++ template features.<a name="00c8_0043"></h4><P>

<pre>
Feature                                        Benefit

Dynamic resizing                               No extra coding or checks required.
Array indexing for all vector templates        arr[i]...
Searching                                      <i>find</i> and <i>index</i> operators locate members.
Insertion                                      Resizing.
Removal                                        Any items in the collection can be removed.
Entry count                                    <i>entries()</i> method returns number of items.

</pre>

<P>

<h4><a name="00c8_0044"><a name="00c8_0045">Listing One<a name="00c8_0045"></h4><pre>
RWCString wonderTool(&quot;Rogue&quot;);
wonderTool += &quot;Wave tools.h++&quot;;
cout &lt;&lt; wonderTool &lt;&lt; endl;   // Prints &quot;RogueWave tools.h++&quot; 
                              //             ( '+=' concatenates)
RWCString aString = &quot;I am 34.5 years young&quot;;
RWCRegexp re1(&quot;[0-9]+*[\\.]*[0-9]*&quot;);   // Construct regexp object.
                    // Recognizes decimal #s.
aString(re1) = &quot;184.9&quot;;
cout &lt;&lt; aString &lt;&lt; endl; // Prints &quot;I am 184.9 years young&quot;
</pre>
<h4><a name="00c8_0046"><a name="00c8_0047">Listing Two<a name="00c8_0047"></h4><pre>
    
size_t ind = aString.index ( &quot;young&quot; );
aString(ind,0) = &quot;old&quot;;
cout &lt;&lt; aString &lt;&lt; endl; // Prints &quot;I am 184.9 years old&quot;
RWCTokenizer tok ( aString );   // Class RWCTokenizer performs 
                // strtok-like functions.
cout &lt;&lt; tok() &lt;&lt; endl; // Prints &quot;I&quot;
cout &lt;&lt; tok() &lt;&lt; endl; // Prints &quot;am&quot;
cout &lt;&lt; aString &lt;&lt; endl; // Prints &quot;I am 184.9 years old&quot;
</pre>
<h4><a name="00c8_0048"><a name="00c8_0049">Listing Three<a name="00c8_0049"></h4><pre>
RWDate today;
cout &lt;&lt; today &lt;&lt; endl; // Prints the current date (default constructor)
RWDate weekAgo = today-7; // Subtracts 7 days from today.
RWDate myBirthDay ( 24, 2, 61); // m,d,y constructor.
cout &lt;&lt; myBirthDay.weekDayName() &lt;&lt; endl; // Prints &quot;Friday&quot;! 
cout &lt;&lt; today - myBirthDay &lt;&lt; endl;  // Prints number of days I've been alive.
</pre>
<h4><a name="00c8_004a"><a name="00c8_004b">Listing Four<a name="00c8_004b"></h4><pre>
// This example alters the date string for French-speaking users.
RWLocale&amp; french = *new RWLocaleSnapshot(&quot;fe&quot;);
cout &lt;&lt; myBirthday.asString ( 'x', french ) &lt;&lt; endl;
</pre>
<h4><a name="00c8_004c"><a name="00c8_004d">Listing Five<a name="00c8_004d"></h4><pre>
struct XYPoint {
    RWDate xDate; // Independent (X) value.
    float yValue; // Dependent (Y) value.
    RWCString ptDescription;    // Text associated w/point.
};
</pre>
<h4><a name="00c8_004e"><a name="00c8_004f">Listing Six<a name="00c8_004f"></h4><pre>
class XYPoint 
{
private:
    
    RWDate xDate;   // Independent (X) value.
    float yValue;   // Dependent (Y) value.
    RWCString ptDescription;// Text associated w/point
public:
    // Main constructor.
    XYPoint ( unsigned mo, unsigned day, 
        unsigned year, float val, const char* descrip ) :
        xDate ( day, mo, year ), yValue(val),
        ptDescription ( descrip ) { }
    // Key-only constructor.
    XYPoint ( unsigned mo, unsigned day, unsigned year ) :
        xDate ( day, mo, year), yValue(0.0), ptDescription()
        { }
    // Default constructor.
    XYPoint() : 
        xDate(), yValue(-9999.99), ptDescription() { }
    // Copy constructor.
    XYPoint ( const XYPoint&amp; xyp ) :
        xDate(xyp.xDate), 
        yValue(xyp.yValue),
        ptDescription(xyp.ptDescription ) { }
    // Assignment operator = 
    XYPoint&amp; operator=(const XYPoint&amp; xyp )
    {
        xDate = xyp.xDate;
        yValue = xyp.yValue;
        ptDescription = xyp.ptDescription;
    }
    // Equality == operator
    RWBoolean operator==( const XYPoint&amp; xyp ) const
    {
        if ( xDate == xyp.xDate )
            return TRUE;
        else
            return FALSE;
    }
    // Less then &lt; operator.
    RWBoolean operator&lt;( const XYPoint&amp; xyp ) const
    {
        if ( xDate &lt; xyp.xDate )
            return TRUE;
        else
            return FALSE;
    }
};
</pre>
<h4><a name="00c8_0050"><a name="00c8_0051">Listing Seven<a name="00c8_0051"></h4><pre>
RWTValSortedVector&lt;XYPoint&gt; myValCurve; // Create a new curve of XYPoints.
// Insert 1/1/95, 2/1/95, 3/1/95, 4/1/95 data points into curve.
myValCurve.insert ( XYPoint ( 1, 1, 95, 1000.0, &quot;Point 1&quot; ) ); 
myValCurve.insert ( XYPoint ( 1, 2, 95, 1050.0, &quot;Point 2&quot; ) );
myValCurve.insert ( XYPoint ( 1, 4, 95, 2000.0, &quot;Point 4&quot; ) );
myValCurve.insert ( XYPoint ( 1, 3, 95, 1500.0, &quot;Point 3&quot; ) );
// Value-based collection now has 4 points in correct order.
XYPoint locator ( 1, 1, 95 );   // Create a temporary point to be 
                // used for searching.
myValCurve.remove ( locator );  // Remove the first point only.
cout &lt;&lt; myValCurve.entries() &lt;&lt; endl;   // Prints '3', since 3 pts are left.
myValCurve.clear(); // Removes all elements.
RWTPtrSortedVector&lt;XYPoint&gt; myPtrCurve; // Pointer-based analog of above.
myPtrCurve.insert ( new XYPoint ( 1, 1, 95, 1000.0, &quot;Point 1&quot; ) ); 
myPtrCurve.insert ( new XYPoint ( 1, 2, 95, 1050.0, &quot;Point 2&quot; ) );
        ...
        ...
// Pointer-based collection must explicitly free the dynamically
// allocated points!  This can be the source of huge memory leak! BEWARE! ;-)
myPtrCurve.clearAndDestroy();   // Deletes each XYPoint and 
                    // removes from collection.
</pre>
<h4><a name="00c8_0052"><a name="00c8_0053">Listing Eight<a name="00c8_0053"></h4><pre>
RWvostream&amp; operator&lt;&lt; ( RWvostream&amp; s ) const
{
    s &lt;&lt; xDate &lt;&lt; yValue &lt;&lt; ptDescription;
    return s;
}
RWvistream&amp; operator&gt;&gt; ( RWvistream&amp; s )
{
    s &gt;&gt; xDate &gt;&gt; yValue &gt;&gt; ptDescription;
    return s;
}
</pre>
<h4><a name="00c8_0054"><a name="00c8_0055">Listing Nine<a name="00c8_0055"></h4><pre>
RWFileManager fm(&quot;mydb.dat&quot;);   // Create file manager class on a disk file.
RWBTreeOnDisk bt(fm); // Construct B-Tree for the file manager.
RWCString myAddress ( &quot;11915 Merry Lane&quot; );
RWOffset loc = fm.allocate ( myAddress.binaryStoreSize() );
fm.SeekTo ( loc );
fm &lt;&lt; myAddress;
bt.insertKeyAndValue ( &quot;Perry&quot;, loc );
</pre>
<h4><a name="00c8_0056"><a name="00c8_0057">Listing Ten<a name="00c8_0057"></h4><pre>
RWOffset foundLoc = bt.findValue ( &quot;Perry&quot; );
fm.SeekTo ( foundLoc );
RWCString foundAddress;
fm &gt;&gt; foundAddress;
cout &lt;&lt; &quot;My address is: &quot; &lt;&lt; foundAddress &lt;&lt; endl;
</pre>
<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
