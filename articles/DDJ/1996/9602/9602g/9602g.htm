<HTML>
<META NAME="year" CONTENT="1996">
<HEAD>
<!-- This document was built using HyperWriter Professional by NTERGAID Inc. -->
<TITLE>FEB96: Networking Intelligent Devices</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>Networking Intelligent Devices<a name="00be_0035"><a name="00be_0035"><a name="00be_0033"><a name="00be_0000"></h1><P>

<h2>NEST brings client/server to embedded systems</h2><P>

<h3>Gil Gameiro</h3><P>

<P>
<i><a name="00be_0034"><a name="00be_0000">Gil is an engineer with Novell's NEST group. He can be contacted at gil_gameiro@novell.com or http://www.vii.com/~bird/.</i></p><hr><P>

As any coffee aficionado will tell you, there's more to a good cup of cappuccino than freeze-dried flakes and hot water. Today's coffee makers, in fact, do just about everything but drink the java for you. The espresso machine in <a href="9602e1f1.gif">Figure 1</A>, for instance, grinds beans, compacts a wafer, and serves a good strong cup of espresso--then discards the grounds in a garbage drawer. <P>

However, what really makes this espresso maker unique is that I've connected it to a Novell network and control it with a Windows application I call &quot;Expresso Maker.&quot; <a href="199600c1.htm">Figure 2</A> shows how the application lets you remotely select a coffee maker, heat the water, specify the serving size and strength, make the coffee, and gather real-time information about the process and statistics about usage--all across the network. The program provides system administration feedback for the resident &quot;javameister&quot;; see <a href="199600c2.htm">Figure 3</A>.<P>

<h3><a name="00be_0036">Just Another Embedded System<a name="00be_0036"></h3><P>

In many ways, the Expresso Maker system is nothing more than a typical, networked embedded system. The system designer has to provide a secure connection, make it possible for the supplier to perform diagnostics and maintenance tasks, and enable a broker service so that end users can locate any given item/service, check for availability, and find the closest supplier.<P>

At the heart of the Expresso Maker application is Novell's Embedded Systems Technology (NEST), which is designed to let you incorporate network protocols and client services into embedded systems. Even though my application runs under Windows, I could have written it for OS/2 PM because the library for NEST remote clients is given in source format. The development of the NEST target is hosted on whatever environment an operating-system vendor supports. For WindRiver's VxWorks on an AMD29K processor, for instance, I use a SunSPARC workstation. For FlexOS, I use DOS and Watcom C. Byte-order dependencies and alignment differences are therefore reconciled, and all system-level functions for memory and process management and event, timer, interrupt, and I/O services are specified in an API that's available for implementation on any kernel or operating system that supports preemptive multitasking. <P>

The NEST architecture consists of the following: <P>
<ul>
<li>Application layer, which hides the differences between OSs by providing an easy-to-port set of common OS services. </li>
<li>NetWare services layer, which provides access to NetWare services (queue, bindery, directory, connection, file, message, auditing, and authentication services).</li>
<li>Connection layer, which contains the protocol stacks and the underlying &quot;plumbing&quot; that interconnects every network node. It provides the connection between the Services layer and the physical network.</li>
</ul>
Developing NEST-based applications (like Expresso Maker) requires the NEST SDK. This toolkit is DOS based, although the SPX and IPX test tools included with it are Windows hosted. Also included is a Print test tool for testing embedded NEST printers, which requires a server with NetWare 3.x or 4.x, a Windows workstation, and the embedded printer to test.<P>

The NEST requester supports--but does not require--connection to NetWare 3.x and 4.x servers. It includes support for packet signatures, packet burst, RSA login authentication, and directory services. NEST also supports the NetWare protocol stack. C source for SPX/IPX, LSL, and MLID is based on the ODI model standard with open interfaces to the transport services for applications and the MLID to accommodate different media types. The LSL supports Ethernet 302.2, Ethernet 802.3, Ethernet II, and Ethernet SNAP frame types. The next version of NEST will also come with source code for IP, TCP, UDP, SNMP, NP, IPX, SPX, NCP, and NDS protocols. <P>

To connect the off-the-shelf coffee maker to the network, I had to design, build, and install a custom interface card. The original espresso maker (a &quot;Super Automatica&quot; model from SAECO, an Italian company) was designed around a mechanical sequencer. I had to redesign the coffee maker from the ground up, since it did not provide the easy hooks needed for microprocessor-based embedded devices. At the heart of the hardware is a 286-based board (in the PC104 form with 1 MB of RAM; I could have used less but this amount of memory was on board) and a 27C010 256-KB EPROM.<P>

For the network adapter, I used an AMD79C960 (PCNet/ISA) chip, mainly because it is a one-chip adapter and NEST provides a sample HSM that can be modified to support the PCNet/ISA. The network chip does not require additional RAM and needs only a little decoding logic, a 256-byte EPROM (mostly for the MAC address), and the line transformer.<P>

Finally, I designed an I/O interface based on an 8255 Programmable I/O chip, an 8253 3-channel counter timer (to count the debit of water being served), a 2x16 LCD display, some push-buttons, and six opto-triacs with zero-crossing detection. These opto-triacs are boosted by TO-220AB case triacs to control the power elements in the maker--the grinder, drop-dose solenoid, a motor that compacts the grounds in a wafer, a pump and gate for the water, and a water heater that keeps the machine ready at all times to serve a cup of brew in seconds. <P>

I used FlexOS Lite, a multitasking, real-time operating system from ISI (FlexOS was originally developed by Digital Research). Since ISI's implementation does not provide ROMing tools, I had to write a utility that links the compiled operating system with the NESTed application, compresses it, and generates an Intel Hex file along with a loader header. The loader code presents a valid signature to the ROM POST that initializes it. It then handles the boot process by loading the operating system along with its NEST driver application without returning.<P>

Even with all this, the most difficult part of the job was cutting a square hole on the thick metal back of the coffee maker to insert the RJ45 10baseT network connection.<P>

<h3><a name="00be_0037">Building the Expresso Maker Program<a name="00be_0037"></h3><P>

Central to any NEST app is the NEST Protocol (NP), a &quot;light&quot; protocol especially developed for embedded devices allowing for secure remote configuration and operation. NP's design puts the connection burden on the remote client, minimizing the code on the NEST side, while maintaining a secure connection based on a login with a randomly generated access key and encrypted password. Moreover, each packet contains a running public-key signature. NP works on top of the IPX layer to minimize the required protocol stack. It wants less than 10 KB of code on the embedded device. This protocol does not provide real-time management. It was aimed at browsing and maintaining settings of predefined configurable items (given that the logged-in user has relevant access rights).<P>

When building Expresso Maker, I wanted NP to transfer information other than remote-configuration data. Fortunately, I found an undocumented function, <I>NPRegisterClassHandler()</I>, used by the remote configuration component to register its services with the NP daemon. The call requires a pointer to a function <I>(void (</I><I>*</I><I>)(NPConnection</I><I>*</I><I>, ECB</I><I>*</I><I>, ECB</I><I>*</I><I>))</I> and an integer that is a function number of NP to manage.<P>

NP is composed of an <I>NPHeader</I> and IPX; see <a href="9602g.htm#00be_003e">Listing One</A>. The <I>Function</I> and <I>SubFunction</I> fields give the type of information carried by the data following the header. When the NP daemon receives a request from a remote client, it matches the <I>Function</I> number to known services and normally discards the packet if the service is unknown--unless it matches a user-defined registered handler (also confusingly referred to as &quot;Class Number&quot; in the source comments). <a href="9602g.htm#00be_0040">Listing Two</A> handles my extended class of services. <P>

The <I>ClassHandler</I> of incoming data is rather simple, but its expected behavior is rather tricky: It takes a pointer to a <I>ConnectionHandle</I>, a structure maintained by the NP for every logged-in and active connection. (I strongly recommend not modifying any of the contents of this structure, as it is apparently present for the <I>ClassHandler</I> in charge of the login and authentication process.)<P>

The two remaining parameters are pointers to event control block (ECB) structures that send and receive network packets. The first <I>ECB</I><I>*</I> is the received ECB for the request, and the second is an ECB preallocated and formatted for a reply to the request. You can assume that the <I>ECB_Fragment[1].FragmentAddress</I> will always contain the full NP data, including the header, and that any remaining lower-level protocol (IPX) would be taken in the <I>ECB_Fragment[0]</I>. Supposedly, future releases of NP will run on top of UDP as well as IPX. For now, however, forget about the protocol used, since it has been preformatted by the NP daemon.<P>

The preallocated buffer for the NP data is big enough to contain the largest amount of data (504 bytes) supported by NP. Although IPX/Ethernet can transmit up to 1514 data bytes, Novell limited the protocol size to a total of 576 bytes because NP was designed to remain as small as possible; as such, it cannot disassemble and reassemble large packets. In fact, 576 is the largest number of bytes that can be transmitted between two IPX/Ethernet nodes in a heterogeneous network (ARCNet suffers this limit, for example). All together, SNAP (a larger frame type than most common 802.2), IPX, and the <I>NPHeader</I> make up close to 504 bytes.<P>

The class-handler routine extracts the pointer in the ECB's <I>Fragment[1]</I> by casting it to a pointer to an <I>NPRequestBuffer</I>. The <I>SubFunction</I> number in the NP header allows routing and processing of the request made by the remote client.<P>

<h3><a name="00be_0038">A Few Caveats <a name="00be_0038"></h3><P>

Since NP was designed to be small and secure, it combines system-maintenance packets with user data. In other words, when the remote client sends a request to be handled by the class handler, the system acknowledgment is also the packet that will contain the user-reply data should the request generate data on the reply (unlike SPX).<P>

Moreover, the way the class handler retrieves the number of OEM data bytes in the request and specifies the amount of data in the reply is still awkward: That's probably why <I>NPRegisterClassHandler</I> is undocumented.<P>

<a href="9602g.htm#00be_003c">Example 1</A> (from my class handler) shows how the amount of data in the request is retrieved. The field length of the <I>NPHeader</I> is converted to the CPU native order using the <I>NSwapHiLo16()</I> macro. The result is then increased by 4 and subtracted from <I>SIZEOF_NPHeader</I>. The reason for the addition is that the <I>Length</I> field describes the total length of the NP packet excluding the first two fields of the <I>NPHeader</I> (that is, <I>CheckSum</I> and <I>Length</I>). Subtracting <I>SIZEOF_NPHeader</I> (a <I>define</I> equal to the actual size of the <I>NPHeader</I>) gives the amount of data bytes placed in the packet for OEM usage.<P>

Another caveat concerns declaring the amount of data attached to the reply. The class handler must not set the <I>Length</I> field of the <I>NPHeader</I> in the reply ECB; it must instead set the actual size of data to be transmitted plus <I>SIZEOF_NPHeader</I> in the <I>ECB_Fragment[1].FragmentSize</I>. The <I>NPDaemon</I> will modify the <I>NPHeade</I><I>r</I>'s <I>Length</I> field to reflect the proper size.<P>

The <I>FragmentCount</I> must be set to 2; otherwise no response is generated. This step is mandatory for proper use of the undocumented <I>ClassHandle</I><I>r</I>s: Failure to do so will make the remote client retry the same request repeatedly, causing your handler to be called until a timeout happens.<P>

A last rule of thumb is to process the packet as quickly as possible: Ideally, this should take no more than 200 ms or so (if no error code is to be returned because the action takes longer, a success should be sent right back with no data, and some other mechanism should be used for reporting the actual error).<P>

<h3><a name="00be_0039">Inside the Expresso Maker Code<a name="00be_0039"></h3><P>

The class-handler code extracts the <I>SubFunction</I> number in the NP header and routes the request to the appropriate code, which returns an error code. The <I>NSwapHiLo16()</I> macro is defined to convert a 16-bit value from the CPU native format to <I>HiLo</I> or vice versa: It swaps or does nothing, depending on whether LITTLE_ENDIAN is defined. You can use your data the way you want, but <I>NPHeader</I> 16-bit data is carried in the <I>HiLo</I> format for portability.<P>

The error code returned by my function is placed on the <I>Status</I> field of the <I>NPHeader</I> in the reply ECB. There, too, the <I>NSwapHiLo16()</I> macro is used for portability. The error code must match the philosophy of the NEST protocol: 0 is success, 70xx is an error from NP, 71xx is an error from the remote configuration. For errors in my module, I used 76xx and kept the low byte in predefined NP error code.<P>

When <I>SubFunction</I> is beyond what you expect, it is reasonable to use the error in the NP range (NPER_UNKNOWN_REQUEST), as this is what NP would have otherwise returned.<P>

The next challenge was determining how to notify the remote client of an asynchronous event, provided NP is based on a client request (NP <I>ack+reply</I> scheme).<P>

Novell tipped me that the <I>Sequence</I> number was also to be used when the NEST side takes the initiative to notify a remote client, along with a flag 0x1000 set in the NP <I>Flags</I> field. This way, it can notify the client's library that a packet is not an ack/reply and requires a reply from the client. The <I>Flags</I> are set with that same bit, plus another 1, to show that it is a reply: That is how the sequence number is matched to either the previous request or previous notification.<P>

Novell plans to ship this code with NEST's next release; unfortunately, when I originally designed this project, I had to write it myself. The modification of the client library was rather easy, requiring an existing internal function (<I>makeAckPacke</I><I>t</I>) to reply (without forgetting to turn on the extra bit NP_FLAG_IS_ACK with the appropriate swapping macro on the client side) and the use of the Windows <I>PostMessage()</I> API. The modification of the NEST side was a little harder, as I had to create <I>Timeout</I> and <I>Retry</I> for every asynchronous request. We'll dispense with the low-level details of creating asynchronous retries on the NEST side without a specific thread because Novell plans to provide this functionality in future versions of NEST.<P>

The client deals with sending OEM extended requests by using a DLL call (undocumented at the time): <I>NPSendExtendedNP(ConnHandle</I><I>*</I><I>, EDB</I><I>*</I><I>)</I> that allows for sending extended NP packets on an existing connection. It takes a <I>ConnHandle</I><I>*</I> (obtained by the <I>NPLoginToNestDevice()</I> API call) and an <I>EDB</I><I>*</I> (a new structure). The EDB will probably be used for two tasks in future releases of the <I>pEST</I> protocol library: describing an extended packet for the call I am about to explain, and notifying events asynchronous to the application that's using the DLL (like the code I wrote on the NEST side). Toward this end, the program must post a few EDBs waiting for asynchronous events using the <I>NPListenForEDB()</I> API call. (When I looked at the DLL code, <I>NPListenForEDB()</I> was in an <I>#if</I> 0 condition block and I had to enable it.)<P>

For now, we need consider only the following fields in the EDB: <I>edbFunction</I> and <I>edbSubFunction</I> must be filled with the functions we made our NEST device aware of, while <I>edbDataBlock[]</I> and <I>edbDataSize</I> contain eventual user data to attach to the NP system header. No special care is required with the byte ordering of <I>edbFunction</I> and <I>edbSubFunction</I>: The DLL swaps those two to network <I>HiLo</I> order. However, the data block is up to the OEM. If your NEST device is based on, say, an AMD29K CPU and the client is Windows, you have to swap entities other than bytes. If you stick to the network order (<I>HiLo</I> format), you'll always know what you are looking at, even when you use a LanAlyzer to look at network traffic.<P>

According to Novell, the current release of the NPDLL library will complete all the calls synchronously, so the EDB used for an extended OEM NP message will come back modified with the answer from the NEST device (if the latter generates user data attached to the NP system ack). The next version of the DLL will complete an <I>NPSendExtendedNP()</I> by posting an EDB message back to the application instead of modifying the one used for the request. This change means Expresso Maker will be incompatible with future versions of the NPDLL, which will allow you to work synchronously or asynchronously by requesting the operating mode after logging into a NEST device (with the <I>NPSetConnFlags()</I> API, which is also in an <I>#if</I> 0 block in the preliminary version of the DLL).<P>

<h3><a name="00be_003a">Conclusion<a name="00be_003a"></h3><P>

The main purpose of environments such as NEST is to provide more services so that a network device actually becomes a &quot;server.&quot; Such a device does not necessarily need to authenticate to a tree, but rather to exchange data and services with a remote client (which could even be another embedded device). NP is a small, reliable, secure protocol that can be leveraged to provide more than just remote configuration without paying the price of large code.<P>

<h3><a name="00be_003b">Acknowledgment<a name="00be_003b"></h3><P>

I'd like to thank computer journalist Philippe Guichon for his invaluable assistance in writing this article. <P>

<h4><B><a href="9602e1f1.gif">Figure 1</A>: </B>Off-the-shelf espresso maker that's modified for network control.</h4><P>

<h4><B><a href="199600c4.htm">Figure 2</A>: </B>Expresso Maker user menu.</h4><P>

<h4><B><a href="199600c5.htm">Figure 3</A>:</B> Expresso Maker sysadm screen.</h4><P>

<h4><a name="00be_003c"><B>Example 1:</B> How data is retrieved. <a name="00be_003c"></h4><P>

<pre>int msgSize = NSwapHiLo16(reqECB-&gt;Header.Length);
msgSize -= (SIZEOF_NPHeader - 4);</pre>

<P>

<h4><a name="00be_003d"><a name="00be_003e">Listing One <a name="00be_003e"></h4><pre>
typedef struct {
   nuint16   CheckSum;
   nuint16   Length;
   nuint16   ConnectionID;
   nuint16   SequenceNumber;
   nuint16   PacketVersionID;
   nuint16   Reserved;
   nuint16   Function;
   nuint16   SubFunction;
   nuint16   Flags;
   nuint16   Status;
} NPHeader;
/* NPHeader structure is part of every NP packet going on the wire. */
void doNPEspressoMaker(NPConnection *hConn, ECB *reqECB, ECB *replyECB);
{
  /* Get a pointer to the request */
  NPRequestBuffer *stdReq = reqECB-&gt;ECB_Fragment[1].FragmentAddress;
  /* Get a pointer to the reply packet */
  NPReplyBuffer *stdReply = replyECB-&gt;ECB_Fragment[1].FragmentAddress;
  /* Extract the SubFunction number from the NP Header */
  int replySize = 0;
  int SubFunction = NSwapHiLo16(stReq-&gt;Header.SubFunction);
  switch (SubFunction) {
     /* Remotely fake a local control pannel key press */
     case EX_MAKER_FAKE_KEY: {
        /* the key ID to fake is in the first byte */
        nuint8 key = stdReq-&gt;DataBuffer[0];
        espressoAddKeyToQueue(key);
        break;
     } 
     /* Remote client is requesting the current status */
     case EX_MAKER_REQUEST_STATUS: {
        memcpy(stdReq-&gt;DataBuffer, espressoGetStatus(),
               replySize = SIZEOF_EspressoStatus);
        break;
     }
     /* Display a message on the Maker LCD Display */
     case EX_MAKER_POST_MESSAGE: {
        /* Get NP Lenght field, convert HiLo to Native */
        int msgSize = NSwapHiLo16(reqECB-&gt;Header.Length);
        msgSize -= (SIZEOF_NPHeader - 4);
        espressoPostLCD(stdReq-&gt;DataBuffer, msgSize);
     }
     /* don't forget to report an error otherwise */
     default: stdReply-&gt;Header.Status = NSwapHiLo16(NPER_UNKNOWN_REQUEST);   
  };
  /* Always reply */
  replyECB.ECB_FragmentCount = 2;
  replyECB-&gt;ECB_Fragment[1].FragmentLength = replySize + SIZEOF_NPHeader;
}
</pre>
<h4><a name="00be_003f"><a name="00be_0040">Listing Two<a name="00be_0040"></h4><pre>
typedef struct _eventDataBlock {
   struct _eventDataBlock  *edbNext;
   void                    *edbConenction;
   int                      edbFunction;
   int                      edbSubFunction;
   int                      edbStatus;
   int                      edbRequestID;
   long                     edbDataSize;
   nuint8                   edbDataBlock[420];
} EDB;
/* The EDB Structure as defined in the NPCAPI.H file; the DLL API. */
int TMainWindow::sendNP(int subFunction, unsigned char *req, int reqSize, char *reply)
{
  EDB edb;
  memset(&amp;edb, 0, sizeof(edb));
  edb.edbFunction = EX_ESPRESSO_CLASS;
  edb.edbSubFunction = subFunction;
  if (edb.edbDataSize = reqSize)
     memcpy(edb.edbDataBlock, req, reqSize);
  int error = ::NPSendExtendedNP(hConn, &amp;edb);
  // If that request generated a reply, transfer it to the user
  if (!error &amp;&amp; edb.edbDataSize &amp;&amp; reply)
     // that guy's buffer better be big enough!
     memcpy(reply, edb.edbDataBlock, edb.edbDataSize);
  return error;
}
int TMainWinow::fakeKeyPress(int keyID)
{
  unsigned char key = (unsigned)keyID;
  sendNP(EX_MAKER_FAKE_KEY, &amp;key, 1, NULL);
}
</pre>
<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

<P>

</BODY></HTML>
