<html>
<head>
<title>Aug01: Programmer's Toolchest</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Examining the  FDF Toolkit </h1>
<p><i>Dr. Dobb's Journal</i> August 2001</p>
<h2>Making PDF files come alive</h2>

<h3>By Lauren Hightower</h3>

<I>
Lauren is a partner at Spin Solutions, LLC. She can be reached at lhightower@ spinsolutions.com.</I>

<hr>

<p>Adobe's Portable Document Format (PDF) has become a standard format for creating and viewing documents that need to retain special formatting beyond what you can produce using HTML. The Adobe PDF Reader is built into Internet Explorer and Netscape Navigator, and is probably the most common plug-in downloaded for older browsers. As a result of the growing popularity and acceptance of PDF documents, the developer community has turned to them to alleviate some of the inherent printing and formatting weaknesses of HTML. </p>
<p>Organizations most frequently use PDF documents to deliver blank forms to users. For instance, the IRS uses PDFs to distribute tax forms to taxpayers who then download them, fill them out, and mail them in. This saves taxpayers the time and hassle of going to the Post Office or library to find forms, and saves the IRS the postage and manpower of mailing them out. But that only scratches the surface of what you can do with PDFs on web sites.</p>
<DDJADVERTISEMENT INLINE>

<p>In this article, I'll show you how to use Adobe's Forms Data Format (FDF) Toolkit to make PDF documents come alive. When used in conjunction with other tools, you can use PDF documents in place of HTML forms, interact with databases, and deliver highly formatted, completed documents, even if the documents use complex logic to derive the contents of the fields. </p>



<h3>The Adobe Forms  Data Format (FDF) Toolkit</h3>


<p>The FDF Toolkit (http://partners.adobe.com/asn/developer/acrosdk/forms.html) targets developers who want not only to deliver blank forms to users, but also want to work programmatically with the data that populates the form. You can use the toolkit with the full version of Adobe Acrobat to design smart forms that have functionality beyond static, blank PDF documents. The key to unlocking the power of the toolkit lies in understanding Acrobat Forms.</p>


<p>Acrobat Forms are extensions to the PDF format that overlay a PDF document and let you add form elements like buttons, text fields, radio buttons, drop-down listboxes, and the like. The elements you can add to a form are the same as those you can have on an HTML page. To add these elements, you use the Form tool in the full version of Adobe Acrobat. Once you add the fields using Acrobat, the FDF Toolkit lets you populate them programmatically before displaying them on the PDF. </p>

<p>The FDF Toolkit is a threadsafe API you can run on any web server under Windows NT, Windows 2000, any flavor of UNIX, or Linux. You can use the toolkit with C/C++, Java, Perl, Visual Basic, and Active Server Pages (ASP). For this article, I'll use Windows NT 4.0, Visual Basic, and Active Server Pages.</p>



<h3>An FDF Example</h3>


<p>To illustrate how to use a PDF document with the FDF Toolkit, I'll use the IRS Form 4868, Application for Automatic Extension of Time to File U.S. Individual Tax Return. As <A NAME="rf1"></a><A HREF="0108hf1.htm">Figure 1</A> shows, this form has five short sections and two calculated fields. </p>


<p>The FDF Toolkit makes it possible for users to enter information directly into the PDF document, eliminating the need to create an HTML data-entry form. However, I prefer to assume the added work of creating an HTML form because I can do more validation and error checking using JavaScript in a familiar HTML development environment. The Adobe-specific Acrobat Forms JavaScript Object Model, which comes integrated into the full version of Acrobat, is clunky and difficult to use. Because users are so accustomed to PDF documents being static rather than interactive, it is also an unfamiliar environment for users entering the data who might be stumped when they see an empty PDF form with no instruction on how to enter data. </p>

<p>You can see the finished example in action at http://www.spinsolutions.com/pdfArticle/.</p>



<h3>Creating HTML Forms </h3>


<p>For this example, I'll assume the user is a CPA who is filing an extension for a client. The basic client information is stored in a database on the CPA firm's intranet. Using a component written for another application, I can call a function <i>GetClient</i> to retrieve the Identification information required in Part I of Form 4868. </p>


<p>The code that generates the HTML form in the extension.asp file is available electronically (see "Resource Center," page 5). The Visual Basic source code for retrieving the data from a relational database is also included. Because the focus of this article is not on COM objects or ASP, I won't delve into the details of either of those code snippets, but will assume you are familiar with a method of creating an ASP page with a form and populating the form fields with data.</p>



<h3>Marking Up the PDF Document</h3>


<p>You can retrieve a copy of IRS Form 4868 from the IRS at http://www.irs.gov/. To mark up a document, you need the full version of the Adobe Acrobat software, Version 4.0 or above. To draw the fields on the PDF document, you use the Form tool. For step-by-step instructions on drawing fields on a PDF, see the documentation that comes with Adobe Acrobat. Immediately after you finish drawing each form field, the Field Properties dialog appears so you can define the field. </p>


<p>For simplicity's sake, I assign the same name to each PDF field that I assigned to the corresponding HTML field. For instance, the <i>TaxPayerName</i> field on the HTML form corresponds with the <i>TaxPayerName</i> field on the PDF. As you'll see, this lets me cycle through the results of the form and set values on the PDF without mapping specific form names on the PDF to specific form names on the HTML form. </p>

<p>Acrobat gives you a lot of flexibility in defining the way a field looks and acts. I focus on the cosmetic aspects of the Properties dialog because I do most of the processing of data using other tools and let the PDF simply display the results. Using the Appearance tab, I set each of the fields as <i>Text</i> fields and mark them as Read Only, prohibiting users from changing the information once the PDF is generated. The Format tab lets me set all of the number fields in sections III, IV, and V on the form to <i>Number</i> fields that display with two decimal places and a dollar sign ($) preceding the number. </p>

<p>Although I do most of the processing of data in the ASP page, I let the PDF document handle one of the calculations for me. The Total Liability field in Section V of the form is a simple calculation that sums lines 6, 7, and 8. To set this field to display the sum of those fields, I choose the Calculate tab, then select the Pick button and add all three fields. </p>

<p>Once the PDF is marked up, save and close it. The next step is getting the data from the HTML form and displaying it on the PDF document. You can download a marked up copy of the IRS form from http://www.spinsolutions.com/pdfArticle/f4868.pdf.</p>



<h3>Using the FDF Toolkit</h3>


<p>Once you download the toolkit from http://partners.adobe.com/asn/developer/acrosdk/</p>


<p>forms.html, you must install it. The installation for each version of the toolkit is different, but to install the Windows version, simply double-click the downloaded executable and follow the directions. The download contains two DLLs: FdfacX.dll and FdfTk.dll. You must install and register FdfacX.dll into a directory that has execute permissions (Adobe recommends \winnt\system32\inetsrv\ASP\cmpnts). FdfTk.dll does not have to be registered, but it must be in the same directory as FdfacX.dll or in the system directory (\winnt\system32). If you are running NTFS, both DLLs must have execute permissions.</p>

<p>The FDF Toolkit can be used with a number of languages. For this example, I use it with VBScript in an Active Server Page. I instantiate the component the way I do any other component. Once instantiated, it has a series of methods and properties that I can call.</p>

<p><A NAME="rl1"></a><A HREF="#l1">Listing One</A> displays the ASP code that instantiates the object, then calls the function <i>FDFCreate,</i> which returns an object of type <i>FDFACXLib.FdfDoc</i> with 36 methods. One of the methods associated with the FDF object is <i>FDFSetValue</i>. I use this method to set the values for each field on the PDF document. The first code segment in <A NAME="rl2"></a><A HREF="#l2">Listing Two</A> cycles through the fields on the HTML form and sets the value of the corresponding field on the PDF document. The second code segment calculates the Balance on line 6 of Part III, then sets the value on the corresponding field. </p>

<p><A NAME="rl3"></a><A HREF="#l3">Listing Three</A> shows the final step in creating the FDF &#151; defining which PDF document it goes with and saving the file. (I've hard coded the paths for both files to make the example easy to read, but you should use the registry or an ini file to hold the values of a working directory so the application is easy to move from server to server.)</p>

<p>Once I create and save the file, I can look at the generated FDF in a text editor to see what I generated. <A NAME="rl4"></a><A HREF="#l4">Listing Four</A> shows the contents of the generated FDF file.</p>

<p>The FDF Toolkit documentation describes the format of the file in detail. In reality, I don't need the FDF Toolkit to generate an FDF file, but it does make it easier. Because it is a simple text file, I could also use the <i>FileSystem</i> object to create and save an FDF file in the specific FDF format.</p>



<h3>Displaying the Results</h3>


<p>To display the completed Form 4868, I redirect the user's browser to the generated FDF file using <A NAME="rl5"></a><A HREF="#l5">Listing Five</A>.</p>


<p>The big drawback of generating and displaying FDF files is that individual users must specifically set up their browser to display FDF files in the Adobe Acrobat Reader. To do this is not simple and could be a daunting experience for some inexperienced users. For instance, to accomplish this in Internet Explorer 5.0, users would:</p>


<p>1.	Open Windows Explorer, choose Tools... Folder Options...File Types.</p>

<p>2.	Scroll to FDF in the list of file types. (If FDF is not in the list, click the New button and add it to the list.)</p>

<p>3.	Select the Change button, then select the Portable Document Format and click OK. (If PDF is not an option, users need to download and install the Adobe Acrobat Reader from http://www.adobe.com/.)</p>

<p>4.	Click Close.</p>

<p></p>

<p>The instructions for associating FDF files with the Adobe Acrobat Reader are different for different browsers and different versions of the browsers. If your target audience is the general population, this is probably not the best option. Unfortunately, Adobe doesn't offer a way to dynamically merge FDF and PDF files, allowing you to redirect the user to a completed PDF document instead of an FDF file. The best bet is to invest in FDFMerge, a tool from Digital Applications (http://www.digapp.com/). </p>

<p>FDFMerge is a command-line utility that merges an FDF file and a marked up PDF, then uses flattening technology to display it as a completed PDF document. Once you merge the FDF and the PDF, you can display the completed PDF through a web browser like any PDF document. FDFMerge is easy to install, but a little more difficult to use. </p>

<p>Because FDFMerge is a synchronous utility, you must execute the application on a command line, then check for the completion of the process before you can display the PDF file to the user. <A NAME="rl6"></a><A HREF="#l6">Listing Six</A> shows how to do this in Visual Basic.</p>

<p>The <i>ExecCmd</i> function is included in the downloadable code. The <i>ExecCmd</i> function starts the utility and stops processing of the calling function until the utility has completed its task. By breaking down the <i>fdfmerge.exe</i> command line, you can see the parts of the string that affect how the PDF is generated. <A NAME="rt1"></a><A HREF="0108ht1.htm">Table 1</A> displays the pieces of the string and their functions.</p>

<p>Once I generate the PDF, I can redirect users to the generated PDF document just as I did the generated FDF document. But in this case, if users have the Adobe Acrobat Reader installed, the PDF opens automatically in the browser with no specific configuration required on the user's part.</p>



<h3>Writing Contents of the PDF </h3>


<p>In some cases, you might want to write the contents of the generated PDF document directly to the screen instead of redirecting users to a generated file. The benefit of this approach is that you can delete the file after generating it and it won't take up space on the server. It is also a more secure method of delivering sensitive data since a generated file is not stored on the server. </p>


<p>A PDF document is a Postscript binary file. To write the file directly to the browser, the page displaying the document must have a content type of "application/pdf." This automatically tells the browser to use the plug-in associated with content type "application/pdf," the Adobe Acrobat Reader.</p>

<p><A NAME="rl7"></a><A HREF="#l7">Listing Seven</A> shows the function <i>Generate4868</i>, which opens and reads the generated PDF file, returns the contents of the PDF file in binary format to the ASP page, then deletes the generated PDF. Once the object returns the binary contents of the PDF file, the ASP page can display the PDF file in the Acrobat Reader by writing the binary contents to the page with <A NAME="rl8"></a><A HREF="#l8">Listing Eight</A>.</p>



<h3>Conclusion</h3>


<p>As the Web evolves into a true application platform, the necessity to gather, manipulate, and display data in highly formatted forms is outpacing the tools provided by Adobe. Until Adobe can offer a complete forms solution, using a combination of tools is the best strategy for delivering interactive forms.</p>


<p>The IRS has implemented its own version of the fill-in 4868 form (http://ftp.fedworld.gov/pub/irs-fill/f4868.pdf). This version allows the taxpayer to fill in the fields directly on the PDF, but provides no validation and no automatic calculation. This is fine for a simple form, but users are starting to expect smarter forms that are prepopulated with data and have automatic calculations and validation. </p>



<p><b>DDJ</b></p>

<H4><A NAME="l1"></a>Listing One</H4>


<pre>&lt;%
    Set objFDF = Server.CreateObject("FdfApp.FdfApp")
    Set FDF = objFDF.FDFCreate
%&gt;
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2"></a>Listing Two</H4>


<pre>&lt;%
    For Each vpItem In Request.Form
        FDF.FDFSetValue vpItem, UCase(Request.Form(vpItem)), False
    Next
    fpBalance = Request.Form("Liability") - Request.Form("Payments")
    FDF.FDFSetValue "Balance",fpBalance,False
%&gt;
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3"></a>Listing Three</H4>


<pre>&lt;%        
    FDF.FDFSetFile "c:\prj\pdfarticle\f4868.pdf"
    FDF.FDFSaveToFile "c:\prj\pdfarticle\temp.fdf"
%&gt;
</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>
<H4><A NAME="l4"></a>Listing Four</H4>


<pre>%FDF-1.2
%bcOS
1 0 obj
&lt;&lt; 
/FDF &lt;&lt; /Fields 2 0 R /F (c:\\prj\\pdfarticle\\f4868.pdf)&gt;&gt; &gt;
&gt; 
endobj

2 0 obj
[ 
&lt;&lt; /T (TaxPayerName)/V (JANE MARIE DOE)&gt;&gt; 
&lt;&lt; /T (TaxPayerAddress)/V (123 MAIN STREET)&gt;&gt; 
&lt;&lt; /T (TaxPayerCityStateZip)/V (ANYTOWN, CA  99097)&gt;&gt; 
&lt;&lt; /T (SSN_1)/V (111)&gt;&gt; 
&lt;&lt; /T (SSN_2)/V (11)&gt;&gt; 
&lt;&lt; /T (SpouseGiftGSTExtension)/V ()&gt;&gt; 
&lt;&lt; /T (SSN_3)/V (1111)&gt;&gt; 
&lt;&lt; /T (SpouseSSN_1)/V (999)&gt;&gt; 
&lt;&lt; /T (SpouseSSN_2)/V (99)&gt;&gt; 
&lt;&lt; /T (SpouseSSN_3)/V (9999)&gt;&gt; 
&lt;&lt; /T (Payments)/V (2000)&gt;&gt; 
&lt;&lt; /T (GiftGSTExtension)/V (X)&gt;&gt; 
&lt;&lt; /T (Payment)/V (5000)&gt;&gt; 
&lt;&lt; /T (Liability)/V (5000)&gt;&gt; 
&lt;&lt; /T (SpouseGSTPayment)/V (89)&gt;&gt; 
&lt;&lt; /T (GSTPayment)/V (3000)&gt;&gt; 
&lt;&lt; /T (Balance)/V (3000)&gt;&gt; 

]
endobj
trailer
&lt;&lt;
/Root 1 0 R 
&gt;
&gt;
%%EOF
</pre>
<P>
<A HREF="#rl4">Back to Article</A>
</P>
<H4><A NAME="l5"></a>Listing Five</H4>


<pre>&lt;%  
    Response.Write "&lt;a href=temp.fdf&gt;Click Here to see the PDF&lt;/a&gt;"
%&gt;
</pre>
<P>
<A HREF="#rl5">Back to Article</A>
</P>
<H4><A NAME="l6"></a>Listing Six</H4>


<pre>spCommand = c:\fdfmerge\fdfmerge.exe -l Log.txt -o 
            c:\prj\pdfarticle\temppdf.pdf 
            c:\prj\pdfarticle\f4868.pdf 
            c:\prj\pdfarticle\temp.fdf
vpShell = ExecCmd(spCommand)
</pre>
<P>
<A HREF="#rl6">Back to Article</A>
</P>
<H4><A NAME="l7"></a>Listing Seven</H4>


<pre>Public Function Generate4868(ByVal vhPDFFileName As Variant, 
                              ByVal vhFDFFileName As Variant) As Variant
Dim spPDFTemp As String
Dim vpShell As Variant
Dim spCommand As String
Dim opFileSys As Object

'====================================================
' GET A TEMPORARY NAME FOR THE GENERATED PDF DOCUMENT
'====================================================
    Set opFileSys = CreateObject("Scripting.FileSystemObject")
    spPDFTemp = opFileSys.GetTempName()
    spPDFTemp = Replace(spPDFTemp, ".tmp", ".pdf")
    spPDFTemp = "c:\prj\pdfArticle\" &amp; spPDFTemp
'=====================================
' GENERATE THE PDF FILE USING FDFMERGE
'=====================================
   spCommand = "c:\fdfmerge\fdfmerge.exe -l Log.txt -o " &amp; spPDFTemp &amp; " " &amp;_
   vhPDFFileName &amp; " " &amp; vhFDFFileName
   vpShell = ExecCmd(spCommand) ' Run FDFMerge.
'====================================
' READ THE BINARY FILE AND SEND IT
' TO THE USER
'====================================
    If vpShell = 0 Then
        Generate4868 = readBinFile(spPDFTemp)
        opFileSys.DeleteFile vhFDFFileName, True
        opFileSys.DeleteFile spPDFTemp, True
    Else
        Generate4868 = "There was an error in the generation."
    End If
'====================================
' CLEAN UP
'====================================
    Set opFileSys = Nothing
End Function
</pre>
<P>
<A HREF="#rl7">Back to Article</A>
</P>
<H4><A NAME="l8"></a>Listing Eight </H4>


<pre>&lt;%
Set oPDFGenerator = Server.CreateObject("pdfArticle.clsInterface") 
vPDFContent = oPDFGenerator.ReadPDF(TempPDF)
Response.BinaryWrite vPDFContent
%&gt;

</pre>
<P>
<A HREF="#rl8">Back to Article</A>
</P>


</body>
</html>
