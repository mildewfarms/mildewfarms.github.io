<html>
<head>
<title>Aug01: Letters</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Letters</h1>
<p><i>Dr. Dobb's Journal</i> August 2001</p>



<h3><b>Huge GCC Executables</b></h3>


<p>Dear <i>DDJ</i>,</p>


<p>Somewhere in an old <i>DDJ</i> column, Al Stevens noted how big GCC-produced executables can be &#151; up to 1.6 MB for a simple "Hello World!" compiled with the Standard C++! I found this statement on the Cygwin FAQ (http://sources.redhat.com/cygwin/faq/faq.html#SEC77): "By default, GCC compiles in all symbols [...]. If that bothers you, just use the 'strip' program, part of the binutils package. Or compile with the '-s' option to gcc."</p>
<DDJADVERTISEMENT INLINE>

<p>I guess that this behavior's purpose is to let you identify in which function a program crashed just by loading a coredump in a debugger. I don't know if this is linked to the extreme sizes that you noted, but I suspect that it is.</p>

<p>Paolo Bonzini</p>

<p>bonzi@pc-amo3.elet.polimi.it</p>




<h3><b>Java Class Loader</b></h3>


<p>Dear <i>DDJ</i>,</p>


<p>Thanks for including an article on class loaders, "A Java 2 Network Class Loader," by Lorenzo Bettini and Donato Cappetta (<i>DDJ,</i> February 2001). Class loaders are fundamental to understanding Java, and are all too often ignored in intro-level materials.</p>

<p>Readers should note that Java does include a built-in network class loader, <i>java.net.URLClassLoader</i>, so there is no need to write your own. Also, the built-in URL and <i>URLClassLoader</i> classes let you separate the two key tasks performed by most class loaders: resource resolution and security. The URL class permits pluggable protocol handlers, which abstract away the details of network connection, as discussed in Brian Maso's article "A New Era for Java Protocol Handlers" (http://developer.java.sun.com/ developer/onlineTraining/protocolhandlers/). The <i>URLClassLoader</i> extends <i>SecureClassLoader</i>, which associates property permissions with class loaders. <i>SecureClassLoader</i> is the backbone of Java security. However, if you extend <i>ClassLoader</i> instead, as the code in the article did, the entire security architecture goes out the window. Finally, the article's <i>NetworkClassLoader</i> is insecure, and is a poor abstraction of resource resolution when compared to the classes that are already part of the core API. Readers should view the <i>NetworkClassLoader</i> as an educational example, not as a recommendation for how to write or use class loaders in any production environment.</p>

<p>Stuart Halloway</p>

<p>http://staff.develop.com/halloway/</p>





<h3><b>Department of Dumb Ideas</b></h3>

<p>Dear <i>DDJ</i>,</p>


<p>Here's one for your department of dumb ideas. In its online catalog (http://www .radioshack.com/product.asp?catalog%5 Fname=CTLG&amp;category%5Fname=CTLG%5F002%5F003%5F018%5F000&amp;product%5Fid=33%2D2055), Radio Shack is selling a digital VU meter. However, the picture in the catalog shows the case, not the meter. </p>

<p>John Penry</p>

<p>jpenry@satx.rr.com</p>




<h3><b>Setting the Record Straight</b></h3>


<p>Dear <i>DDJ</i>,</p>


<p>Richard Stallman would receive far more sympathy and positive response if he were more courteous and polite (see "Letters," <i>DDJ</i>, April 2001). As it is, most of the comments, though valid, are simply ignored by the community at large.</p>

<p>The operating system popularly referred to as "Linux" will never be called "GNU/Linux." Get over it, RMS. For as much as Linux is no OS without GNU, GNU is no OS without a kernel, and HURD is still a ways off. Furthermore, it was the Linux kernel that drew the large crowd of users, not GNU. Linux was the project that essentially sparked the "Bazaar" model of development, leveraging the Internet and a large community of developers to rapidly improve and enhance itself. While GNU is an extremely laudable effort, its development was much more controlled until recently. Thus, more people associate the entire GNU/Linux system with the Linux kernel and the Open-Source philosophy than with the GNU operating-system software and the Free Software Foundation and its ideology.</p>

<p>Berating people's intelligence also doesn't further your cause, nor does declaring projects "problems" as you did with KDE due to its dependence on Trolltech's QT under the previous, more restrictive license.</p>

<p>I respect your abilities, and understand &#151; though I disagree markedly &#151; with your philosophies. I also disagree with the continuous, bigoted insistence of adherents of both Free Software and Open Source to characterize other operating systems as inferior and their manufacturers as evil. These operating systems possess strengths that neither GNU nor Linux have, and fulfill needs that their Free or Open counterparts can't.</p>

<p>Oluseyi Sonaiya</p>

<p>oluseyi@twcny.rr.com</p>




<h3><b>The Legacy of C# </b></h3>


<p>Dear <i>DDJ</i>, </p>


<p>After reading Marc Eaddy's article "C# versus Java" (<i>DDJ</i>, February 2001), it is interesting to note that Microsoft is taking a page from IBM's mainframe Common Language Environment that supports all the programming languages on the IBM mainframe OS, such as OS/390. All the IBM compilers use the APIs that are in the CLE and so produce the same results. IBM has addressed the interoperability problems quite nicely. Perhaps Microsoft can be successful in CLR.</p>

<p>As for cross-language rather than cross-platform, perhaps Microsoft should take another leaf from IBM's notebook. I doubt that will ever happen, however, as Microsoft's business model is to sell software in a monopoly environment, where only it sells the software. Microsoft is completely dependent on Windows. Microsoft sees no reason to dilute its monopoly by entering other platform markets. It had no success with Windows NT on the DEC Alpha platform (now Compaq).</p>

<p>Microsoft has been predatory in its take overs of software such as Kerberos. That security software is now fractured and the promise of cross-platform security is dead as far as connecting Kerberos on Windows to any other implementation, due to Microsoft making a Windows-specific modification.</p>

<p>Without a monopoly on the Internet and on Java, Microsoft will not grow. The momentum is building in the open OS arena with Linux and Java for cross-platform development. IBM is investing US$1B in Linux development. It has already invested a lot in Java on all its platforms. Where Microsoft is single platform, cross language, IBM is multiplatform single language. IBM's business model is based on its hardware sales, and it could care less whose software runs on IBM's hardware. It is obvious that Microsoft and IBM are at odds in the business arena. Microsoft's success with Windows and the extension of Windows-dependent software to the Internet and enterprise is to the detriment of IBM.</p>

<p>In a way, I'm in favor of C#. I can add yet another language to my r&eacute;sum&eacute; and another certification to the list I have, and presumably that makes me a more valuable resource for the job market. On the other hand, I'm paid for success, and the most stable platforms for large enterprise systems of applications are not Windows. I must also contend with interfacing with legacy systems, and the cross-platform approach is where established enterprise data processing solutions succeed best.</p>

<p>Bruce E. Hogman</p>

<p>bruce.hogman@eds.com</p>

<p></p>



<h3><b>DHTML Source-Code Correction</b></h3>


<p>Dear <i>DDJ</i>,</p>


<p>Both <i>DDJ</i> and DDJ.com are good resources for the programming community. 
  I particularly enjoyed the February 2001 issue, especially the excellent article 
  "Cross-Platform DHTML" by Charlie Ma. However, there is a typo in Listing Two 
  (page 128 in the magazine) that prevents the samples from running. The "x" on 
  the last line of the excerpt below (after the "+" and before the "='") is extraneous 
  and stops the code from executing properly.</p>

<blockquote><p>
&lt;! &#151; StartFragment &#151; &gt;</p>

<p>
if (obj.nodeType == 1) {</p>

<p>  // nodeType==1 for all HTML tags other than comments and CDATA.</p>

<p>    msg += "&amp;lt;" + obj.nodeName;</p>

<p>  for (var j=0; j&lt;obj.attributes.length; j++) {</p>

<p>     if (obj.attributes.item(j).nodeValue) {</p>

<p> msg += " " + obj.attributes.item(j).nodeName</p>

<p>  +  x"='" + obj.attributes[j].nodeValue + "'";</p>

<p>
&lt;! &#151; EndFragment &#151; &gt;</p>

</blockquote>

<p>I learned a lot from the article and the samples are cool.</p>

<p>Greg Bissell</p>

<p>gerui@artofchina.com</p>




<h3><b>Shared Libraries Aren't All Bad</b></h3>


<p>Dear <i>DDJ</i>,</p>


<p>Okay, I'll be the first to admit that it's bad form to reply to a reply to a response. However, I feel a slight twinge of moral imperative to reply to Jeff Duntemann's reply to Michael Wojcik's response to Jeff's original assertion that "[t]he worst idea ever to arise in the history of computing is shared code libraries" ("Letters," <i>DDJ</i>, March 2001). Two things need to be sharply pointed out. First, I feel that Jeff is obliged at the very least to admit that his original statement was far too broadly stated. After reading his reply, it seems that what he really meant to say is that the worst idea ever to arise in the history of computing is Windows' implementation of shared code libraries. Second, the conservation of disk and memory space is only 20 percent of the issue, if that much. To say that we should get rid of this concept of shared code libraries is like saying that we should get rid of this concept of subroutines; after all, any modern editor can perform a copy-and-paste in a jiff. Any programmer who has been too liberal with copying-and-pasting will quickly learn the error of his ways as soon as he discovers a bug in one of those lines of code.</p>

<p>Michael Hobbs</p>

<p>hobbs1@acm.org</p>




<h3><b>Zuse and Intel</b></h3>


<p>Dear <i>DDJ</i>,</p>


<p>In his recent "Letter" (<i>DDJ</i>, December 2000), Oleg Kiselyov points out that Intel's excitement over the "advance" of predicated execution is inappropriate, as it was massively predated by Zuse. Well, Intel may be forgiven for not being aware of the inner workings of Zuse, but if they are unaware that Acorn's ARM chip had this feature more than a decade ago, they're even more stupid than they are arrogant.</p>

<p>Ben Laurie </p>

<p>ben@algroup.co.uk</p>




<p><b>DDJ</b></p>

</body>
</html>
