<html>
<head>
<title>Mar01: Consistency-Based Diagnosis</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Consistency-Based Diagnosis</h1>
<p><i>Dr. Dobb's Journal</i> March 2001</p>
<h2>Identifying faulty  components </h2>

<h3>By Girish Keshav Palshikar</h3>

<I>
Girish is a scientist at the Tata Research Development and Design Centre (TRDDC), Pune, India. His research interests are in AI and mathematical logic. He can be contacted at girishp@pune.tcs.co.in. </I>

<hr>

<p>When a device or a system generates expected outputs for given inputs, we say that it is functioning normally; for instance, normally a bulb lights up when the switch is pressed. However, when a system behaves unexpectedly &#151; the bulb fails to light up when the switch is pressed &#151; we have a diagnostic problem on hand. Essentially, the presence of a fault in a system is indicated by observing outputs, which are incompatible with inputs given to the system, based on some (explicit or implicit) model of the system's normal behavior. A diagnosis involves identifying the cause for a specific fault, which may be a faulty component (a broken bulb or an open switch) or a fault condition (no electricity supply).  </p>
<p>It is easy to appreciate that diagnosis of large real-world systems is a complex problem. It requires keen observation of the problem symptoms, formation and ranking of the most likely hypotheses that can account for the observations, patient exploration of the system under various experiments or tests, and zeroing in on (and confirming) the actual diagnosis. A confirmed diagnosis is often followed by selection and implementation of remedial actions such as repairs or reconfigurations. Diagnosis is, of course, a cornerstone of medicine. Even outside the exalted world of medicine, diagnosis, repairs, maintenance, and support of engineering systems are integral functions in a range of industries &#151; automobiles, aerospace, chemical and petrochemicals, power, manufacturing, electronic circuits, mechanical equipment, and more. In computing, debugging can be thought of as a diagnosis problem. Of course, software is not a physical artifact and bugs are actually logical conditions that cause a mismatch between program specification and the behavior of the code. In a general sense, diagnosis is actually a fundamental human skill. Many human activities include diagnostic reasoning in some form, such as with analysis of battle situations, business problems, crime, financial irregularities, and the like. </p>
<DDJADVERTISEMENT INLINE>

<p>Troubleshooting handbooks are the simplest and widely used representations of diagnostic knowledge. They are useful in simple situations when there is a (nearly) one-to-one match between observations and diagnosis. However, such approaches are ineffective in dealing with large systems with a large number of components as well as with complex combinations of a large number of observations. They are also brittle, not extendible, and limited in interpreting and grouping observations, selecting tests, handling uncertainty, generating/testing hypotheses, and so on. The diversity of systems embodying a variety of phenomena (electronic, electrical, mechanical, chemical, biological, and social) and the knowledge-intensive nature of the task of diagnosis has given rise to a need for human experts and inevitably, for specialized automation software that captures the diagnosis expertise.</p>

<p>There are many ways in which computers can assist in the diagnosis tasks. In this article, I focus on the perspective of artificial intelligence (AI) where the goal is to symbolically represent diagnosis knowledge within computers and build diagnosis procedures that use this knowledge in problem solving. As a matter of fact, diagnostic expert systems have traditionally been among the most common applications of AI. For simplicity and ease of presentation, I'll focus on the diagnosis of simple systems such as digital circuits; they are simple in the sense that they can be precisely presented by simple mathematical logic.</p>

<p>In the rule-based expert-system approach, a number of rules can relate symptoms to diagnoses for a specific system. For example:</p>

<blockquote><p>
IF switch is off, </p>

<p>
AND light is on, </p>

<p>THEN switch is shorted. </p>

</blockquote><p>However:</p>


<blockquote><p>
IF switch is on,</p>

<p>
AND bulb is off, </p>

<p>AND fan is working,</p>

<p>THEN bulb is faulty.</p>

</blockquote><p>However, the latter approach is unsatisfactory for several reasons: </p>


<ul>
  <li>It is not based on any insight about how the normal system behaves.
  <li>It needs considerable rework, even when small changes are made to the system's structure or function (a fuse may be added to the bulb example).

  <li>It is difficult to test whether the rules are complete (cover all possible faults and associations between causes and diagnoses). 


</ul>

<p>What can be done to handle these problems? The fundamentally different "model-based diagnosis" (MBD) approach attempts to work out the diagnosis from a model of the normal behavior of the system, rather than work with an exhaustive list of faults and methods to diagnose each of them. It proposes a separation of the diagnostic knowledge and the diagnostic procedure (see <A NAME="rf1"><A HREF="0103df1.htm">Figure 1</A>). The diagnostic procedure is general enough so that it can systematically analyze the given model (of any system) for generating diagnoses. Like a human expert, the MBD approach attempts to reason from the model of the normal (or expected) behavior to work out all possible diagnoses that can explain the observations; for this reason, MBD is also called "deep-knowledge diagnosis" or "diagnosis from first principles."</p>

<p>MBD has been used for diagnosis in a variety of practical domains such as digital circuits, onboard aerospace systems, automobile systems, and the like. The MBD approach is also a hot research subfield, particularly to extend its applicability to more complex systems represented in a variety of notations for specifying system models. </p>

<p>The MBD approach can be specialized to work with a number of mathematical or textual notations to express and analyze models of systems. Here, I focus on functional models of systems expressed using the propositional logic. I then discuss a particular approach to MBD, called "consistency-based diagnosis" (CBD), which relies on the notion of logical consistency. To be sure, propositional logic is simple and not very expressive &#151; it prohibits a proper modeling of dynamic systems having time-evolving inputs and outputs (process control systems, for example). However, it is adequate to model important aspects of static systems such as digital circuits. The original papers in CBD (see "A Theory of Diagnosis from First Principles," by R. Reiter, <i>Artificial Intelligence, </i>1987, which first proposed the CBD approach and is the basic reference for this article), do not presume any particular logic. CBD can work with predicate logic or Horn clause logic as in the programming language Prolog. </p>



<h3>Propositional Logic</h3>


<p>A "proposition" is an atomic symbol (without any internal structure) that stands for a declarative statement that can be true or false. Let PROP denote the set of propositions. Propositional logic provides the logical connectives <img src="and.gif" width="14" height="14"> (and), <img src="or.gif" width="14" height="15">(or), <img src="not.gif" width="21" height="14">(not), <img src="arrow14.gif" width="14" height="7">(implies), and <img src="dblarr12.gif" width="14" height="7"> (if-and-only-if). Additional connectives like <img src="xor14.gif" width="10" height="9">(XOR) can also be defined. <img src="not.gif" width="21" height="14"> is a unary connective and the others are binary connectives. A formula is a string of symbols constructed from propositions in PROP and the logical connectives; for example, <i>p</i><img src="arrow14.gif" width="14" height="7"><i>(q</i><img src="arrow14.gif" width="14" height="7"> <i>(</i><img src="not.gif" width="21" height="14"><i>r))</i> and<i> (p</i><img src="and.gif" width="14" height="14"><img src="not.gif" width="21" height="14"><i>q)</i><img src="arrow14.gif" width="14" height="7"><i>r</i>. An interpretation is a function<i> I:PROP</i><img src="arrow14.gif" width="14" height="7"><i>{true, false}</i> that associates a Boolean truth-value with each proposition in PROP. Truth-value <i>TV(F) </i>of a formula <i>F </i>is computed by combining the truth-values of its subformulae, according to the truth-table in <A NAME="rf2"><A HREF="0103df2.htm">Figure 2</A>. </p>


<p>For example, the formulae <i>p</i><img src="arrow14.gif" width="14" height="7"><i>p</i> and <i>p</i><img src="or.gif" width="14" height="15"><img src="not.gif" width="21" height="14"><i>p </i>are both true under all possible interpretations (<i>p</i>=true or <i>p</i>=false); such a formula is called a "tautology" or "validity." The formula <i>p</i><img src="and.gif" width="14" height="14"><img src="not.gif" width="21" height="14"><i>p </i>is not true (it is always false) under any possible interpretation; such a formula is called "unsatisfiable" or a "contradiction." A formula like <i>p</i><img src="arrow14.gif" width="14" height="7"><i>q</i> evaluates to true in at least one interpretation; such a formula is called "consistent" or "satisfiable" and the corresponding interpretation is called a "model" for <i>F. </i>Given a formula <i>F</i>, checking whether <i>F </i>is satisfiable is called the "satisfiability problem." There is no known efficient (polynomial time) algorithm to solve this problem that works for any arbitrary formula <i>F </i>in propositional logic. </p>



<h3>Checking Satisfiability</h3>


<p>A literal is a proposition or its negation; for example, <i>p </i>and <img src="not.gif" width="21" height="14"><i>q</i>. A clause is a disjunction (<img src="or.gif" width="14" height="15">) of zero or more literals; for example, <i>p</i><img src="or.gif" width="14" height="15"><img src="not.gif" width="21" height="14"><i>q</i>. A unit clause is the clause containing exactly one literal; for instance, <img src="not.gif" width="21" height="14"><i>p</i>. The empty clause, denoted [], is the clause that contains no literals; it is unsatisfiable. A formula <i>F </i>is said to be in conjunctive normal form (CNF) if <i>F </i>has the form <i>F</i><sub>1</sub><img src="and.gif" width="14" height="14"><i>F</i><sub>2</sub><img src="and.gif" width="14" height="14">...<img src="and.gif" width="14" height="14"><i>F</i><i><sub>n</i></sub><sub>, </sub>where each<i> F</i><i><sub>i</i></sub><i> </i>is a disjunction of literals; for instance <i>(p</i><img src="or.gif" width="14" height="15"><img src="not.gif" width="21" height="14"><i>q)</i><img src="and.gif" width="14" height="14"><i>(r</i><img src="or.gif" width="14" height="15"><i>s)</i>. There are efficient algorithms to transform any given formula in propositional logic into an equivalent formula in CNF. You represent a formula <i>F</i> in CNF by the set <i>{F</i><sub>1</sub><i>,F</i><sub>2</sub><i>,...,F</i><i><sub>n</i></sub><i>}. </i></p>


<p><A NAME="rf3"><A HREF="0103df3.htm">Figure 3</A> shows the basic Davis-Putnam algorithm (see "Implementing the Davis-Putnam Method," by H. Zhang and M. Stickel, <i>Journal of Automated Reasoning </i>24(1-2), February 2000) for checking the satisfiability of a propositional formula in CNF. The unit subsumption rule is as follows: If there is a unit clause <i>L </i>in <i>S, </i>obtain <i>S' </i>from <i>S" </i>by deleting those clauses in <i>S </i>containing <i>L</i>;<i> </i>if <i>S' </i>is empty, then <i>S </i>is satisfiable. The unit resolution rule is as follows. Obtain a set<i> S" </i>from <i>S' </i>by deleting <img src="not.gif" width="21" height="14"><i>L</i> from every clause in which it occurs; <i>S" </i>is unsatisfiable if-and-only-if <i>S'</i> is. Note that if <img src="not.gif" width="21" height="14"><i>L</i> is a unit clause, then it becomes [] when <img src="not.gif" width="21" height="14"><i>L </i>is deleted from it. These rules are based on the facts that <i>A</i><img src="and.gif" width="14" height="14"><i>(A</i><img src="or.gif" width="14" height="15"><i>B)</i> is equivalent to <i>A </i>and <i>A</i><img src="and.gif" width="14" height="14"><i>(</i><img src="not.gif" width="21" height="14"><i>A</i><img src="or.gif" width="14" height="15"><i>B)</i> is equivalent to<i> A</i><img src="and.gif" width="14" height="14"><i>B. </i> </p>

<p>It is easy to verify, using the algorithm in <A NAME="rf3"><A HREF="0103df3.htm">Figure 3</A>, that the set <i>{p</i><img src="or.gif" width="14" height="15"><i>q</i><img src="or.gif" width="14" height="15"><img src="not.gif" width="21" height="14"><i>r,p</i><img src="or.gif" width="14" height="15"><img src="not.gif" width="21" height="14"><i>q,</i><img src="not.gif" width="21" height="14"><i>p,r,u} </i>is unsatisfiable, the set <i>{p</i><img src="or.gif" width="14" height="15"><i>q,</i><img src="not.gif" width="21" height="14"><i>q,</i><img src="not.gif" width="21" height="14"><i>p</i><img src="or.gif" width="14" height="15"><i>q</i><img src="or.gif" width="14" height="15"><img src="not.gif" width="21" height="14"><i>r} </i>is satisfiable, and the set <i>{p</i><img src="or.gif" width="14" height="15"><img src="not.gif" width="21" height="14"><i>q,</i><img src="not.gif" width="21" height="14"><i>p</i><img src="or.gif" width="14" height="15"><i>q, q</i><img src="or.gif" width="14" height="15"><img src="not.gif" width="21" height="14"><i>r,</i><img src="not.gif" width="21" height="14"><i>q</i><img src="or.gif" width="14" height="15"><img src="not.gif" width="21" height="14"><i>r}</i> is satisfiable. </p>

<p>You could also add the tautology rule to the algorithm: Delete all clauses from <i>S </i>that are tautologies; the remaining set is unsatisfiable if-and-only-if <i>S </i>is. We could also add the pure literal rule, which is as follows: A<i> </i>literal <i>L </i>is pure in <i>S </i>if the literal <img src="not.gif" width="21" height="14"><i>L</i> does not appear in any clause in <i>S</i>. If a literal <i>L </i>is pure in <i>S, </i>delete all clauses in <i>S </i>which contain<i> L. </i>The remaining set <i>S' </i>is unsatisfiable if-and-only-if <i>S </i>is.</p>



<h3>System Models in Propositional Logic</h3>


<p>Propositional logic can be used to model (which has nothing to do with a model as an interpretation that makes a formula true) the functionality of simple circuits. We use the set notation <i>{F</i><sub>1</sub><i>,..., F</i><i><sub>n</i></sub><i>}</i> to express the formula <i>F</i><sub>1</sub><img src="and.gif" width="14" height="14"><i>...</i><img src="and.gif" width="14" height="14"><i>F</i><i><sub>n</i></sub><i>.</i> A system description is a tuple (SD, COMPONENTS) where SD<i> </i>is a set of formulae in propositional logic, constructed over the set PROP of propositions and where COMPONENTS is a subset of PROP that corresponds to components in the system. Since each component is a proposition, we adopt the convention that a truth-value of true (respectively false) for a component corresponds to a normally functioning (respectively faulty) component. <A NAME="rf4"><A HREF="0103df4.htm">Figure 4</A> shows a simple digital circuit for a 3-bit adder, and <A NAME="rf5"><A HREF="0103df5.htm">Figure 5</A> shows a model in propositional logic for this circuit.</p>


<p>An observation of a system is a set OBS<i> </i>of formulae over PROP. In normal system behavior, no components are faulty; this is expressed as a logical condition that SD<img src="union.gif" width="14" height="13">OBS<img src="union.gif" width="14" height="13">{<i>c</i>|<i>c</i><img src="memof14.gif" width="9" height="9">COMPONENTS} is consistent (satisfiable). However, if SD<img src="union.gif" width="14" height="13">OBS<img src="union.gif" width="14" height="13"> {<i>c</i>|<i>c</i><img src="memof14.gif" width="9" height="9">COMPONENTS} is not consistent, then you need to perform a diagnosis; that is, identify the subset of faulty components that caused the observation. </p>

<p>Formally, a minimal subset <img src="delta10.gif" width="9" height="10"><img src="rtubar.gif" width="16" height="16">COMPONENTS is a diagnosis if SD<img src="union.gif" width="14" height="13">OBS<img src="union.gif" width="14" height="13">{<img src="not.gif" width="21" height="14"><i>d</i>| <i>d</i><img src="memof14.gif" width="9" height="9"><img src="delta10.gif" width="9" height="10">}<img src="union.gif" width="14" height="13">{<i>c</i>|<i>c</i><img src="memof14.gif" width="9" height="9">COMPONENTS-<img src="delta10.gif" width="9" height="10">} is consistent; <img src="delta10.gif" width="9" height="10"> is minimal in the sense that no proper subset of <img src="delta10.gif" width="9" height="10"> is itself a diagnosis. In the adder example, an observation may consists of OBS={in1, <img src="not.gif" width="21" height="14">in2, in3, out1, <img src="not.gif" width="21" height="14">out2} (for example, in1=1, in2=0, in3=1, out1=1, out2=0). Clearly, the adder is faulty; the expected output is out1=0 and out2=1. The diagnosis task now is to identify which of the five components from the set COMPONENTS={<i>x</i>1, <i>x</i>2, <i>a</i>1, <i>a</i>2, <i>o</i>1} are faulty; that is, whose faulty behavior can explain this observation. For the aforementioned example, there are three diagnoses: <img src="delta10.gif" width="9" height="10"><sub>1</sub>= {<i>x</i>1}, <img src="delta10.gif" width="9" height="10"><sub>2</sub>={<i>x</i>2, <i>a</i>2}, and <img src="delta10.gif" width="9" height="10"><sub>3</sub>={<i>x</i>2, <i>o</i>1}. It is easy to check that each of these is indeed a diagnosis; that is, to check whether {<i>x</i>2, <i>a</i>2} is a diagnosis, you can verify that SD<img src="union.gif" width="14" height="13">OBS<i> </i><img src="union.gif" width="14" height="13">{<img src="not.gif" width="21" height="14"><i>x</i>2, <img src="not.gif" width="21" height="14"><i>a</i>2}<i> </i><img src="union.gif" width="14" height="13"><i> </i>{<i>x</i>1,<i> a</i>1,<i> o</i>1} is consistent.</p>

<p>The central question in consistency-based diagnosis is how to systematically identify all possible diagnoses.</p>



<h3>Consistency-Based Diagnosis</h3>


<p>The fundamental result of consistency-based diagnosis consists of a characterization of the faulty components. For this purpose, you need the concepts of conflict sets, hitting sets, and an HS-tree. </p>


<p>A conflict set for (SD, COMPONENTS, OBS) is a set {<i>c</i><sub>1</sub>,<i>c</i><sub>2</sub>,...,<i>c</i><i><sub>k</i></sub>} ( COMPONENTS such that SD<img src="union.gif" width="14" height="13">OBS<img src="union.gif" width="14" height="13">{<img src="not.gif" width="21" height="14"><i>c</i><sub>1</sub>,<img src="not.gif" width="21" height="14"><i>c</i><sub>2</sub>,...,<img src="not.gif" width="21" height="14"><i>c</i><i><sub>k</i></sub>} is inconsistent. A conflict set for (SD, COMPONENTS, OBS) is minimal if no proper subset of it is itself a conflict set for (SD, COMPONENTS, OBS). Intuitively, a conflict set (minimal or otherwise) consists of those components, at least one of which is definitely faulty. </p>

<p>Let <i>C </i>be a collection of sets. A "hitting set" for <i>C </i>is a set <i>H</i> of elements such that every element in <i>H</i> belongs to at least one set <i>S</i> in <i>C</i> and <i>H</i><img src="intersect.gif" width="16" height="15"><i>S</i><img src="noteq.gif" width="10" height="12"><img src="phiblock12.gif" width="9" height="9"> for every set <i>S</i> in <i>C.</i> A hitting set for <i>C</i> is minimal if no proper subset of <i>H</i> is itself a hitting set for <i>C</i>. The central characterization of a diagnosis is given by the following result. <img src="delta10.gif" width="9" height="10"><img src="rtubar.gif" width="16" height="16">COMPONENTS is a diagnosis for (SD, COMPONENTS, OBS) if <img src="delta10.gif" width="9" height="10"> is a minimal hitting set for the collection <i>C</i> of conflict sets for (SD, COMPONENTS, OBS). This result holds even when <i>C</i> is a collection of only minimal conflict sets for (SD, COMPONENTS, OBS). For the adder, there are two minimal conflict sets {<i>x</i>1, <i>x</i>2} and {<i>x</i>1, <i>a</i>2,<i> o</i>1}. This is because SD<img src="union.gif" width="14" height="13">OBS <img src="union.gif" width="14" height="13">{<img src="not.gif" width="21" height="14"><i>x</i>1, <img src="not.gif" width="21" height="14"><i>x</i>2} is inconsistent and SD<img src="union.gif" width="14" height="13">OBS<img src="union.gif" width="14" height="13"> {<img src="not.gif" width="21" height="14"><i>x</i>1, <img src="not.gif" width="21" height="14"><i>a</i>2, <img src="not.gif" width="21" height="14"><i>o</i>1} is inconsistent. There are three diagnoses, given by the minimal hitting sets for <i>C</i>={{<i>x</i>1, <i>x</i>2}, {<i>x</i>1, <i>a</i>2, <i>o</i>1}}: <img src="delta10.gif" width="9" height="10"><sub>1</sub>={<i>x</i>1}, <img src="delta10.gif" width="9" height="10"><sub>2</sub>={<i>x</i>2, <i>a</i>2}, <img src="delta10.gif" width="9" height="10"><sub>3</sub>={<i>x</i>2, <i>o</i>1}. </p>

<p>Let <i>F</i> be a collection of sets. An HS-Tree <i>T</i> is an edge-labeled and node-labeled tree if it is the smallest tree with the following properties: </p>

<ul>

  <li>Its root is labeled by <img src="check.gif" width="14" height="16"> if <i>F</i> is empty. Otherwise, it is labeled by an arbitrary set of <i>F</i>. 

  <li>If <i>n</i> is a node of <i>T,</i> then define <i>H(n)</i> to be the set of edge labels on the path from the root to <i>n.</i> If <i>n</i> is labeled by <img src="check.gif" width="14" height="16">, then it has no successor nodes. If <i>n</i> is labeled by a set <img src="sum14.gif" width="9" height="10"> in <i>F,</i> then for each <img src="sigma12.gif" width="8" height="7"> in <img src="sum14.gif" width="9" height="10">, <i>n</i> has a successor node <i>n</i><sub><img src="sigma12.gif" width="8" height="7"></sub><i>,</i> joined to <i>n</i> by an edge labeled by <img src="sigma12.gif" width="8" height="7">. The label for <i>n</i><sub><img src="sigma12.gif" width="8" height="7"></sub> is a set <i>A</i> in <i>F</i> such that <i>A</i><img src="intersect.gif" width="16" height="15"><i>H</i>(<i>n</i><sub><img src="sigma12.gif" width="8" height="7"></sub>)=<img src="phiblock12.gif" width="9" height="9"> if such a set exists; otherwise, <i>n</i><sub><img src="sigma12.gif" width="8" height="7"></sub> is labeled by <img src="check.gif" width="14" height="16">. 

  <li>An HS-Tree has the following properties: 


  <li>If <i>n</i> is a node of the HS-tree labeled by <img src="check.gif" width="14" height="16">, then <i>H(n)</i> is a hitting set for <i>F.</i>

  <li>Each minimal hitting set for <i>F</i> is <i>H(n)</i> for some node <i>n</i> of the HS-tree such that <i>n</i> is labeled by <img src="check.gif" width="14" height="16">. An HS-tree does not include all hitting sets for <i>F</i> but is does include all minimum hitting sets for <i>F.</i> 


</ul>

<p>The essential idea behind Reiter's algorithm for computing all diagnoses for (SD, COMPONENTS, OBS) is to treat <i>F</i> as the set of all conflict sets for (SD, COMPONENTS, OBS) and to construct an HS-tree to generate all minimal hitting sets of <i>F. F </i>will not be explicitly available. We assume that a conflict-set generator function <i>GetConflictSet(SD,COMPONENTS,OBS)</i> is available to generate a conflict set whenever required. In this paper, I do not develop an algorithm for this function; it is not very complex for propositional logic. Computing a conflict set is a very time-consuming operation and Reiter's algorithm attempts to minimize the number of times this generator is called. </p>


<p>1.	Generate the HS-Tree <i>T</i> in the breadth-first order, generating nodes at any fixed level in the tree from the left to right order.</p>

<p>2.	Reusing node labels: If <i>n</i> is labeled by a set <i>S</i> in <i>F</i> and if <i>n'</i> is a node such that <i>H(n')</i><img src="intersect.gif" width="16" height="15"><i>S</i>=<img src="phiblock12.gif" width="9" height="9"> then label <i>n'</i> also by <i>S</i>. You indicate that the label of <i>n'</i> is a reused label by underlining it in the tree. Computing <i>label(n') </i>does not require a call to the function <i>GetConflictSet()</i>. </p>

<p>3.	Tree Pruning: (a) If a node <i>n</i> is labeled by <img src="check.gif" width="14" height="16"> and a node <i>n'</i> is such that <i>H(n)</i><img src="rtubar.gif" width="16" height="16"> <i>H(n') </i>then close <i>n'</i> &#151; do not compute a label for <i>n'</i> and do not generate any successors for <i>n'</i>. (b) If node <i>n</i> has been generated and node <i>n'</i> is such that <i>H(n')=H(n),</i> then close <i>n'.</i> We indicate a closed node in the HS-tree by marking it with &times;. (c) If nodes <i>n</i> and <i>n'</i> have been respectively labeled by sets <i>S</i> and <i>S' </i>of <i>F,</i> and if <i>S' </i>is a proper subset of <i>S</i>, then for each <img src="alpha12.gif" width="7" height="6"><img src="memof14.gif" width="9" height="9"><i>S-S'</i> mark as redundant the edge from node <i>n</i> labeled <img src="alpha12.gif" width="7" height="6">. A redundant edge, together with the subtree beneath it, may be removed from the HS-tree. A redundant edge is marked with the symbol )( in the tree.</p>

<p> </p>

<p>As a last heuristic to improve the efficiency, whenever a node <i>n</i> in the tree needs a conflict set as a node label, we call <i>GetConflictSet(SD, COMPONENTS - H(n), OBS)</i> rather than <i>GetConflictSet(SD, COMPONENTS, OBS).</i> Such a call is guaranteed to return a set <i>S</i> such that <i>S</i><img src="intersect.gif" width="16" height="15"><i>H(n)= </i><img src="phiblock12.gif" width="9" height="9">, if it exists. </p>



<h3>An Example</h3>


<p>The adder example in <A NAME="rf4"><A HREF="0103df4.htm">Figures 4</A> and <A NAME="rf5"><A HREF="0103df5.htm">5</A> shows how the algorithm works (see <A NAME="rf6"><A HREF="0103df6.htm">Figure 6</A>). Suppose the first call to <i>GetConflictSet(SD, {x1,x2,a1,a2,o1},OBS) </i>yields the set<i> {x1,x2}</i>; this is the label of the root. This generates two nodes, <i>n</i>1 and <i>n</i>2, on the next level where the edges from the root to them are labeled by<i> x</i>1 and <i>x</i>2, respectively. Node <i>n</i>1 is labeled by the call <i>GetConflictSet(SD,{x1,x2,a1,a2,o1}-H(n1),OBS)=GetConflictSet(SD,{x2,a1,a2, o1},OBS),</i> which returns <img src="check.gif" width="14" height="16">, since SD<img src="union.gif" width="14" height="13">OBS<img src="union.gif" width="14" height="13"> {<img src="not.gif" width="21" height="14"><i>x</i>2, <img src="not.gif" width="21" height="14"><i>a</i>1, <img src="not.gif" width="21" height="14"><i>a</i>2, <img src="not.gif" width="21" height="14"><i>o</i>1} is consistent. Node <i>n</i>2 is labeled by the call <i>GetConflictSet(SD, {x1,a1,a2,o1},OBS);</i> suppose it returns {<i>x</i>1, <i>a</i>2, <i>o</i>1}. Node <i>n</i>3 is marked closed because of rule 3(a); that is, since there is a node <i>n</i>1 marked by <img src="check.gif" width="14" height="16"> such that <i>H</i>(<i>n</i>1)= {<i>x</i>1} is a subset of <i>H</i>(<i>n</i>3)={<i>x</i>1,<i>x</i>2}. Node <i>n</i>4 is labeled by the call <i>GetConflictSet(SD,</i> <i>{x1,a1,o1},OBS),</i> which returns <img src="check.gif" width="14" height="16"> since SD<img src="union.gif" width="14" height="13">OBS<img src="union.gif" width="14" height="13">{<img src="not.gif" width="21" height="14"><i>x</i>1, <img src="not.gif" width="21" height="14"><i>a</i>1, <img src="not.gif" width="21" height="14"><i>o</i>1} is consistent. Similarly, the node <i>n</i>5 is labeled <img src="check.gif" width="14" height="16"> by a call to <i>GetConflictSet(SD, {x1,a1,a2},OBS).</i> The set of all diagnoses is read from the tree of <A NAME="rf6"><A HREF="0103df6.htm">Figure 6</A> as {{<i>x</i>1}, {<i>x</i>2,<i>a</i>2}, {<i>x</i>2,<i>o</i>1}}. This particular HS-tree required five calls to the <i>GetConflictSet() </i>function. A different implementation for this function may yield different conflict sets in subsequent calls (see <A NAME="rf7"><A HREF="0103df7.htm">Figure 7</A>). </p>


<p>Since the algorithm constructs the HS-tree in a breadth-first manner, it generates diagnoses in increasing order of cardinality (number of faulty components). </p>



<h3>Conclusion</h3>


<p>Consistency-based diagnosis systematically works out the set of all possible diagnoses by reasoning from a logical model of the normal behavior of the system. In CBD, the model of a system is a set of formulae in some mathematical logic and a diagnosis is a set of faulty components in the system, which explains the observations by means of the notion of logical consistency. CBD is a fundamental and robust approach to systematic diagnosis (as opposed to heuristic diagnosis). Its diagnostic procedure is independent to any changes in the system model. In this article, I discussed a specialized version of CBD where a model and an observation both consist of a set of formulae in propositional logic, and the components are a set of propositions. CBD has been applied in a variety of interesting practical domains. </p>




<h3>Acknowledgments</h3>


<p>I sincerely appreciate the support and encouragement of Professor Mathai Joseph. I also wish to thank Dr. Manasee Palshikar for her confidence and perseverance. </p>




<h3>References</h3>


<p>Hamscher,W., L. Console, and J. de Kleer. <i>Readings in Model-based Diagnosis</i>, Morgan Kaufmann, 1992. A collection of important papers in model-based diagnosis. Also includes a paper by Greiner, Smith, and Wilkerson containing a correction to Reiter's algorithm.</p>


<p>Palshikar, G.K. and D. Khemani. "Diagnosing Dynamic Systems Using Trace Patterns," <i>Pattern Recognition Letters</i>, July 1999. In this work, we used context-free grammar to model a dynamic system, and an observation was a string over an alphabet. The notion of logical derivations was used to identify nonterminals, corresponding to faulty behavioral components. </p>

<p>Reiter, R. "A Theory of Diagnosis from First Principles," <i>Artificial Intelligence</i>, 1987. Proposed the CBD approach and the basic reference for this article. </p>

<p>Zhang, H. and M. Stickel. "Implementing the Davis-Putnam Method," <i>Journal of Automated Reasoning, </i>February 2000. The issue also contains articles defining the state of the art about the SAT problem in propositional logic. </p>




<p><b>DDJ</b></p>
</body>
</html>
