<html>
<head>
<title>Mar01: Algorithm Alley</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Rijndael: The Advanced Encryption Standard</h1>
<p><i>Dr. Dobb's Journal</i> March 2001</p>

<h3>By Joan Daemen and Vincent Rijmen</h3>

<I>
Joan and Vincent are the inventors of the Rijndael algorithm, which won the NIST AES competition. They can be contacted at joan.daemen@protonworld.com and vincent.rijmen@esat.kuleuven.ac.be, respectively.</I>

<hr>

<p>On October 2, 2000, the National Institute of Standards and Technology announced that the winner of the Advanced Encryption Standard competition was our submission, Rijndael. In this article, we'll present our design and explain our design choices and how they make the cipher resistant against currently known cryptanalytic attacks. We'll also give some guidelines for an efficient implementation.</p>
<p>All operations used in Rijndael are either byte-shuffling operations, or those defined over the finite field <i>GF</i>(2<sup>8</sup>). Addition in this field corresponds to the well-known bitwise XOR operation. The multiplication operation in this field is more complex, and often implemented with lookup tables. More information on finite fields can be found in <i>Introduction to Finite Fields and Their Applications,</i> by R. Lidl and H. Niederreiter (Cambridge University Press, 1986). We also provided a brief introduction to finite fields in the document that accompanied our submission, available at http://www.rijndael.com/.</p>
<DDJADVERTISEMENT INLINE>

<p>Because Rijndael uses no arithmetic operations, the description of Rijndael assumes no endianness. The performance on specific platforms may be influenced by the representation that the implementer uses. We use hexadecimal notation to represent byte values. However, the numerical value of a byte is never used.</p>



<h3>Description</h3>


<p>Rijndael is a block cipher, not unlike Square (described in our article "The Block Cipher Square Algorithm," <i>DDJ</i>, October 1997). Both Rijndael's input block length and key length are variable: They can independently be varied between 128 and 256 bits in increments of 32 bits. NIST will only standardize the versions with an input block length of 128 bits and a key length of 128, 192, or 256 bits.</p>


<p>Rijndael has been designed following the wide-trail strategy, which provides resistance against linear and differential cryptanalysis. In the strategy, the round transformation is divided into different components, each with its own functionality. </p>

<p>We define the state of the block cipher as the intermediate result of the encryption process. The state is represented by a rectangular byte array with four rows. The number of columns is determined by the block length: If the block length is <i>N,</i> the number of columns <i>N</i><i><sub>b</sub></i> equals<i> N/</i>32. The state is initialized with plaintext in the order <i>a</i><sub>0,0</sub>,<i> a</i><sub>1,0</sub><i>, a</i><sub>2,0</sub><i>, a</i><sub>3,0</sub><i>, a</i><sub>0,1</sub><i>, a</i><sub>1,1</sub><i>...,</i> as in <A NAME="rf1"></a><A HREF="0103pf1.htm">Figure 1</A>.</p>

<p>The round transformation is built from component transformations that operate on the state. Finally, at the end of the cipher operation, the ciphertext is read from the state by taking the state bytes in the same order. </p>

<p>The cipher key is similarly pictured as a rectangular array with four rows. The number of columns of the cipher key is denoted by <i>N</i><i><sub>k </sub></i>and is equal to the key length divided by 32; see <A NAME="rf2"></a><A HREF="0103pf2.htm">Figure 2</A>. Sometimes the cipher key is pictured as a linear array of 4-byte words. The words consist of the 4 bytes that are in the corresponding column. The number of rounds is denoted by <i>N</i><i><sub>r</sub></i> and depends on the values <i>N</i><i><sub>b</sub></i> and <i>N</i><i><sub>k</sub></i>; see <A NAME="rt1"></a><A HREF="0103pt1.htm">Table 1</A>.</p>

<p>The round transformation is composed of four different component transformations. In pseudo-C notation, you have <A NAME="re1"></a><A HREF="0103pe1.htm">Example 1</A>(a). The final round of the cipher is slightly different. It is defined by <A NAME="re1"></a><A HREF="0103pe1.htm">Example 1</A>(b). In this notation, the functions (<i>Round, ByteSub</i>) operate on arrays to which pointers (<i>State, RoundKey</i>) are provided. In the final round, the <i>MixColumn</i> step has been removed. The component transformations are specified in the following paragraphs.</p>

<p>The <i>ByteSub</i> transformation is a nonlinear byte substitution, operating on each of the state bytes independently. The transformation uses the same substitution table (or S-box) for every byte. The S-box has been selected to make Rijndael resistant against linear and differential attacks, as well as interpolation attacks. This is ensured by requirements such as having a low correlation between input bits and output bits and the fact that the output cannot be described as a simple mathematical function of the input.</p>

<p>In <i>ShiftRow</i>, the last three rows of the state are shifted cyclically over different offsets. Row 1 is shifted over <i>C</i><sub>1</sub> bytes, row 2 over <i>C</i><sub>2</sub> bytes, and row 3 over <i>C</i><sub>3 </sub>bytes. The shift offsets <i>C</i><sub>1</sub>, <i>C</i><sub>2</sub>, and <i>C</i><sub>3</sub> depend on the block length <i>N</i><i><sub>b</sub></i>. The different values are specified in <A NAME="rt2"></a><A HREF="0103pt2.htm">Table 2</A>. The operation in <A NAME="rf3"></a><A HREF="0103pf3.htm">Figure 3</A> ensures that bytes of one column are spread out to four different columns. </p>

<p>In <i>MixColumn</i>, the <i>N</i><i><sub>b</sub></i> columns of the state are transformed by means of a multiplication with a fixed matrix; see <A NAME="rf4"></a><A HREF="0103pf4.htm">Figure 4</A>. The operations are performed in <i>GF</i>(2<sup>8</sup>): Addition is the bitwise XOR, and multiplication is not the standard integer multiplication. The coefficients of the matrix are based on a linear code with maximal distance between code words. This ensures a good mixing between the bytes of each column. Together with the <i>ShiftRow</i> operation, this operation ensures that after a few rounds, all output bits depend on all input bits. A second design criterion for the coefficients was the possibility of efficient implementation. </p>

<p>In the round-key addition operation, a round key is applied to the state by a simple bitwise XOR. The round-key length is equal to the block length <i>N</i><i><sub>b</sub></i>.</p>

<p>The round keys are derived from the cipher key by means of the key schedule. This consists of two components: the key expansion and round-key selection. The basic principles are:</p>

<ul>
  <li>The total number of round-key bits is equal to the block length multiplied by the number of rounds plus 1 (for example, for a block length of 128 bits and 10 rounds, 128&times;(10+1)=1408 round-key bits are needed).
  <li>The cipher key is expanded into an expanded key.

  <li>Round keys are taken from this expanded key in the following way: The first round key consists of the first <i>N</i><i><sub>b </sub></i>words, the second one of the following <i>N</i><i><sub>b</sub></i> words, and so on.

</ul>


<p>The expanded key is a linear array of 4-byte words and is denoted by <i>W[N</i><i><sub>b</sub></i>(<i>N</i><i><sub>r</sub></i>+1<i>)].</i> The first <i>N</i><i><sub>k</sub></i> words contain the cipher key. All other words are defined recursively in terms of words with smaller indices. The key schedule depends on the value of <i>N</i><i><sub>k</sub></i>: There is a version for <i>N</i><i><sub>k</sub></i><img src="lteq12.gif" width="6" height="7">6, and a version for <i>N</i><i><sub>k</sub></i>&gt;6; see <A NAME="re2"></a><A HREF="0103pe2.htm">Example 2</A> for a pseudo-C description.</p>

<p>When the cipher key words have been used, every following word<i> W[i] </i>is equal to the XOR of the previous word <i>W[i-</i>1<i>] </i>and the word <i>N</i><i><sub>k</sub></i> positions earlier <i>W[i-N</i><i><sub>k</sub></i><i>]</i>. For words in positions that are a multiple of <i>N</i><i><sub>k</sub></i>, a transformation is applied to <i>W[i-1] </i>prior to the XOR and a round constant is XORed. This transformation consists of a cyclic shift of the bytes in a word, denoted with <i>Rot</i>, followed by <i>SubByte</i>, and the application of a table lookup to all 4 bytes of the word. <i>SubByte</i> uses the same S-box as <i>ByteSub</i> but operates on 4-byte words instead of states. If <i>N</i><i><sub>k</sub></i>&gt;6, there is an extra application of <i>SubByte</i>: For <i>i-</i>4, a multiple of <i>N</i><i><sub>k</sub></i>, <i>SubByte</i> is applied to <i>W[i-</i>1<i>]</i> prior to the XOR.</p>

<p><A NAME="re2"></a><A HREF="0103pe2.htm">Example 2</A> is admittedly a bit sloppy. When the total number of round-key bits needed is not an exact multiple of the number of bits in the cipher key, the given code will calculate too many round-key bits.</p>

<p>The round constants are independent of <i>N</i><i><sub>k</sub></i> and defined by: <i>Rcon[i]=(RC[i],</i>0,0,0), with <i>RC[</i>1<i>]</i>=1, <i>RC[i]=</i>2<img src="dot12.gif" width="6" height="9"><i>RC[i-</i>1<i>]</i> multiplication in the field <i>GF</i>(28).</p>

<p>Round key <i>i</i> is given by the round-key buffer words <i>W[N</i><i><sub>b</sub></i><i>i]</i> to <i>W[N</i><i><sub>b</sub></i><i>(i</i>+1<i>)]</i>. The key schedule can be implemented without explicit use of the array <i>W</i>. For implementations where RAM is scarce, the round keys can be computed just-in-time using a buffer of <i>N</i><i><sub>k</sub></i> words.</p>

<p>The cipher Rijndael consists of an initial round-key addition, followed by <i>N</i><i><sub>r</sub></i><sup></sup>-1 rounds, and a final round. In pseudo-C code, this gives <A NAME="re3"></a><A HREF="0103pe3.htm">Example 3</A>. When encrypting multiple blocks, the key expansion can be done once beforehand and stored.</p>



<h3>Implementation Aspects</h3>


<p>Rijndael can be programmed by simply implementing the different component transformations. This is straightforward for <i>RowShift</i> and <i>AddRoundKey</i>. The implementation of <i>ByteSub</i> requires a table of 256 bytes. <i>AddRoundKey</i>, <i>ByteSub</i>, and <i>RowShift</i> can be efficiently combined and executed serially per state byte.</p>


<p>The transformation <i>MixColumn</i> requires matrix multiplication in the field <i>GF</i>(28). The choice for the coefficients of the polynomial <i>c(x)</i> has been influenced by implementation considerations. Indeed, the matrix has only entries 1, 2, and 3. Multiplication with 1 doesn't take any instructions. Multiplication with 2 can be implemented with a shift and a conditional XOR. Since 3<img src="dot12.gif" width="6" height="9"><i>x</i>=(2<img src="xor18.gif" width="11" height="12">1)<img src="dot12.gif" width="6" height="9"><i>x</i>=(2<img src="dot12.gif" width="6" height="9"><i>x</i>)<img src="xor18.gif" width="11" height="12">(1<img src="dot12.gif" width="6" height="9"><i>x</i>), multiplication with 3 can be done by multiplying with 2, then XORing the argument.</p>

<p>However, the use of a conditional instruction can cause weaknesses with respect to timing attacks (see "Timing Attacks on Implementations of Diffie-Hellman, RSA, DSS and Other Systems," by P.C. Kocher, <i>Advances in Cryptology, Proceedings of Crypto'96,</i> edited by N. Koblitz, Springer-Verlag, 1996), because the execution time of the operation may depend on the input value. The timing attack can be countered by inserting additional NOP-operations to make the execution time of both branches equal to one another, but this will probably introduce weaknesses with respect to a power analysis attack. The use of a table effectively counters these types of attacks. We define the 256-byte table <i>X</i>2 as: <i>X</i>2<i>[i]=i</i><img src="dot12.gif" width="6" height="9">2. Thus, multiplication with 2 is implemented as a table lookup, while multiplication with 3 can be implemented as <i>i</i><img src="dot12.gif" width="6" height="9">3=<i>X</i>2<i>[i]</i><img src="xor18.gif" width="11" height="12"><i>i</i>. The matrix multiplication can now be implemented with a fixed succession of XORs in table lookups.</p>

<p>The straightforward implementation uses only 8-bit operations. On many processors, this results in suboptimal performance. We'll now examine how the performance can be improved on 32-bit processors with a reasonable size of cache. Similar techniques can be applied to 16-bit or 64-bit processors.</p>

<p>The performance increase results from the combination of the operations <i>ByteSub</i>, <i>ShiftRow</i>, and <i>MixColumn</i>. Let <i>a</i> denote the value of the state before the application of the three operations and let <i>b</i> denote the output. The equalities in <A NAME="rf5"></a><A HREF="0103pf5.htm">Figure 5</A>(a) hold for the first column of <i>b</i>. You now define four extended tables <i>Ti[x]</i>; see <A NAME="rf5"></a><A HREF="0103pf5.htm">Figure 5</A>(b), and you get <A NAME="rf5"></a><A HREF="0103pf5.htm">Figure 5</A>(c).</p>

<p>The operations <i>ByteSub</i>, <i>ShiftRow</i>, and <i>MixColumn</i> can be executed with four table lookups and three XOR operations per column. The same tables can be used for each column of <i>b.</i> Each <i>T-</i>table has a size of 1 KB. One additional XOR operation per column implements <i>AddRoundKey</i> and completes the implementation of the round transformation. </p>

<p>This feature makes Rijndael very fast on Pentiums and other high-end processors, while not overburdening low-end processors. It is probably one of the most important factors in the selection of Rijndael over the other fast finalists.</p>



<h3>The Inverse Cipher</h3>


<p>The round transformation of Rijndael is not a Feistel network. An advantage of a Feistel cipher is that the inverse cipher is almost the same as the cipher.</p>


<p>Since the round transformation of a Feistel cipher is an involution, only the order of the round keys has to be inverted. For Rijndael, this is not the case. In principle, the decryption has to be done by applying the inverses of the component transformations in inverse order.</p>

<p>However, the round transformation and the cipher structure have been designed to alleviate this problem partially. By using some algebraic properties, we can derive an equivalent representation of the inverse cipher that has the same structure as the cipher. This means that a round of the inverse cipher looks the same as a round of the cipher, except that <i>ByteSub</i>, <i>MixColumn</i>, and <i>ShiftRow</i> have been replaced by their inverses. The round keys in this representation are different from the round keys used in the encryption mode. A more detailed description of the inverse cipher can be found in the document that accompanies the submission, or in our upcoming book on Rijndael (to be published by Springer-Verlag).</p>



<h3>Performance</h3>


<p>In "Fast Implementations of AES Candidates," (<i>Proceedings of the Third AES Candidate Conference</i>, 2000), K. Aoki and H. Lipmaa report a performance of 243 Mbps for an assembly-language implementation on a 450-MHz Pentium II. An online performance table for various platforms can be found at http://www.tml.hut.fi/~helger/aes/table.html.</p>




<h3>Further Reading</h3>


<p>More details about the AES process can be found on NIST's AES site: http://www.nist.gov/aes. For more information on Rijndael, go to http://www.esat.kuleuven.ac.be/~rijmen/rijndael, or visit the Rijndael fan page at http://www.rijndael.com/.</p>


<p></p>

<p><b>DDJ</b></p>
</body>
</html>
