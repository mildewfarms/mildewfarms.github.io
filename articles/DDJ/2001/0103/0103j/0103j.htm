<html>
<head>
<title>Mar01: Diagnosing Proxy Server Problems</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Diagnosing Proxy Server Problems</h1>
<p><i>Dr. Dobb's Journal</i> March 2001</p>
<h2>TCPMapper peeks inside network connections</h2>

<h3>By Russ Ethington</h3>

<I>
Russ is a programmer in New York, New York. He can be contacted at russ.eth@ix.netcom.com./</I>

<hr>

<p>Proxy servers play an essential role on the Internet, even though they go almost entirely unnoticed by most Internet users. Invisible as they may be, proxy servers make it possible for companies to access the Web without compromising their own security, and for online businesses to offer products and services. But to many web developers, proxy servers are a mystery, and unsuspecting developers can find proxy servers to be a formidable obstacle when designing new web applications.</p>
<p>In this article, I will present a background on proxy servers, describing their use and operation, and some complications they introduce. I'll then introduce a Java utility called "TCPMapper" that lets you peek inside the network connections between your browser and a proxy server so that you can explore problems you might face with web applications. </p>
<DDJADVERTISEMENT INLINE>



<h3>Proxy Backgrounder </h3>


<p>A proxy server is a program that acts as a relay for network connections between browsers or other web applications and the Internet. Proxies usually work in conjunction with a firewall to allow controlled access to the Internet from inside a private corporation, a small business, or a home network. The proxy server accepts network connections on well-known ports and executes commands defined by the HTTP (or other) protocol specification. Typically, a browser program will connect to a proxy server and ask the proxy to load a resource from the Internet. While the proxy loads the data for the requested resource it passes that data back to the browser, standing in for the requesting program and living up to its name as a proxy.</p>


<p>If a proxy server is to be used by a web application or browser, the client program must be configured to talk to the proxy server when it needs to make a connection to the Internet. Here's how it works. Say you want to load http://www.yahoo.com/ from your browser. If you had a direct connection to the Internet, you would configure your browser to bypass any proxy servers and connect straight to the address www.yahoo.com. Now say your site uses a proxy server called "my-proxy," you first need to configure your browser to use the my-proxy server on a well-known port, usually port 80. Next, when you try to load http://www.yahoo.com/ the browser effectively ignores the request at first, connecting to the my-proxy server instead. Once connected to the proxy, the browser asks it to load the page at http://www.yahoo.com/ and return the data contained in it. The proxy may access the site directly, or with the help of other proxy servers, downstream from the request. In any case, the proxy attempts to load the requested page on behalf of your browser.</p>



<h3>Proxies and Programmers</h3>


<p>While the principle of proxying is fairly simple, the myriad details of their practical use complicates matters, sometimes making life difficult for programmers. Whether you are building a browser-based application with client-side script, or a custom app that needs access to the Internet, you almost certainly have users accessing your site from behind a firewall and proxy server. When things go wrong, it may be necessary to diagnose a problem, not with your web server or client script, but with a proxy server.</p>


<p>Proxy servers try to provide a wide assortment of features without interfering with the intended outcome (they are supposed to be invisible to the application, remember). But sometimes features such as caching, site filtering, clustering, and proxy authentication can have unintended consequences to programmers. Like it or not, proxies have become an integral part of our Internet experience, and when things go wrong, proxies matter to everyone involved in the production of a web application.</p>

<p>Developers are usually insulated from the network level of the applications they build. Most often, the browser handles the network connections and the proper execution of HTTP and HTTPS requests. For this reason, many developers are in the dark about what is actually going on in the execution of a request. To understand proxy servers, you must also understand something about the data exchanged in the conversations taking place between browsers, proxies, and servers on the network.</p>

<p>Proxy servers can interfere with an otherwise well-behaved web application in a number of ways. The most common problem is caching. Proxies like to save a copy of previously visited URLs in order to minimize the number of times pages are loaded from their source. This can be confusing if your application depends on dynamically created content, or uses form content to maintain state information. Other problems can arise if a proxy is configured to block access to certain URLs. Sometimes a pattern-matching expression intended to block access to multiple sites can accidentally block access to legitimate sites as well. Proxies aren't always passive in their job of relaying data from a server to a client program, either. In fact, some proxies can modify the HTTP headers being sent back and forth. This can potentially interfere with the exchange of cookies and other header information. Finally, proxies can be configured to force users to supply a user name and password each time proxy services are requested. This feature can provide an audit trail showing the usage history for each person who accesses the proxy. But it can also prevent certain browsers and applications from working properly, as you will see in the case study that follows.</p>

<p>When trying to delve into a problem that might be caused by a proxy server, there are a few different techniques that can help &#151; the most obvious being to collect the data sent to/from the application that is having trouble and to analyze it. This can be done by running a low-level trace on the network to collect all of the traffic going in and out of the application in question. Using a tool that can separate out the data from each socket connection on the network, you can single out the connection that is having problems and look at the data exchanged between client and proxy. However, the tools for doing this kind of trace turn out to be either very expensive, or free but tedious and difficult to work with. A better alternative to doing network sniffer traces is to put a mapper program between the client and the proxy. The mapper accepts connections from the client program and forwards them to the proxy. If the mapper program can also log all of the data that it copies between the client and the proxy, then you can just open the logs for a postmortem search through the data sent back and forth.</p>

<p>One such tool that I have found essential in my work with proxy servers is TCPMapper, a Java program written specifically for this task. TCPMapper maps socket connections between a browser or other Internet client program and a proxy server (or any server, really). I wrote TCPMapper (available electronically; see "Resource Center," page 5) specifically for debugging and troubleshooting proxy and other network programming problems. To illustrate its use, I'll analyze a nasty incompatibility between Netscape 4.7 and Microsoft Proxy Server 2.0.</p>



<h3>Eavesdropping on  Proxy Servers With TCPMapper</h3>


<p><A NAME="rf1"><A HREF="0103jf1.htm">Figure 1</A> is an example of the HTTP header data captured by TCPMapper as it traveled between a browser program and a web proxy. Shown in this example is a successful attempt to load the home page at the web site http://www.yahoo.com/.</p>


<p>First we see the request made by the browser program to the web proxy, in this case using Internet Explorer 5.0 (see <A NAME="rf1"><A HREF="0103jf1.htm">Figure 1</A>). The request contains a command statement in the first line where you see "GET..." and several lines of header text that can supply both the web proxy and ultimately the web server with information about the browser and the type of connection it requires.</p>

<p>The response that comes back from the proxy server (see <A NAME="rf2"><A HREF="0103jf2.htm">Figure 2</A>) includes a line of text indicating the response code followed by a series of headers giving the browser information about the content being returned. Finally, after the headers, the actual HTML of the requested document would appear (though it is omitted in this excerpt).</p>



<h3>Diagnosing Problems  Caused by Proxy Servers</h3>


<p>The ability to peer into the conversation between web browser and web proxy lets you dig into a complicated proxying problem and attempt to analyze it. With that in mind, let's consider a problem that comes up occasionally and try to diagnose it using the TCPMapper.</p>


<p>Say you have just installed Netscape Navigator 4.7 where, until now, only Microsoft products were used. In the past, you have had no problem running Internet Explorer 5.0, but today you cannot make Netscape load any web pages from the Internet. You decide to insert the TCPMapper program in between the browser and the Microsoft Proxy Server to see what is going wrong when you attempt to load the URL http://www.yahoo.com/. </p>

<p>Looking at <A NAME="rf3"><A HREF="0103jf3.htm">Figure 3</A>, you notice little difference between this request, coming from the Netscape browser, and the request in the previous transcript coming from the Microsoft browser. Bear in mind that, just as in the other case, this request is going to a proxy server that will attempt to contact the web server and return the results to the browser. But there is a catch. <A NAME="rf3"><A HREF="0103jf3.htm">Figure 3</A> is using a proxy server that does authentication. That means the proxy demands a valid user name and password from the browser before it will load any web pages.</p>

<p>In the response text in <A NAME="rf4"><A HREF="0103jf4.htm">Figure 4</A>, you see a different response code than before. This time a 407 error is being reported with a brief description of the error. Browsers usually recognize this error code as the proxy's way of requesting a user name and password. The second line gives a hint at how the browser should reformulate the request giving user credentials for the authentication check. It says "Proxy-Authenticate: NTLM." In a more widely used form of authentication, the proxy would return "Proxy-Authenticate: Basic."</p>

<p>Normally, the browser would see the Proxy-Authenticate directive and prompt users for a user name and password for the given proxy. Next, the browser would send a new request with a special header that encoded the user information for the proxy to authenticate.</p>

<p>But there is a problem. In this example, the Netscape browser doesn't recognize the NTLM authentication request and gets confused. If you were looking at the browser trying to make this request, you would wait while the progress bar bobbed back and forth indefinitely. By studying the TCPMapper trace, you get a clue as to what is going wrong.</p>



<h3>Analysis and a Solution</h3>


<p>In the full TCPMapper trace, the identical request and 407 response are repeated over and over again. This tells you that the Netscape browser is not recognizing the authentication request sent back to it from the proxy. It turns out that the NTLM method of authenticating is a proprietary Microsoft technology not implemented in the Netscape browser. </p>


<p>By reconfiguring the proxy server to use Basic authentication as well as NTLM authentication, the problem can be easily fixed to enable both Microsoft and Netscape browsers to work with this authenticating proxy server. This slight modification to the proxy server causes the proxy to respond to an initial request with an extra header line not seen in the previous trace; see <A NAME="rf5"><A HREF="0103jf5.htm">Figure 5</A>, which offers Basic authentication as an option to the browser program. Now the Netscape browser sees a familiar form of authentication being offered to it, and will prompt the user for a valid user name and password. Assuming the user credentials are acceptable to the proxy server the request will be granted by the proxy and the problem will be solved.</p>



<h3>Understanding the  TCPMapper Program</h3>


<p>The job of the TCPMapper is to accept network connections on a well-known port and, much like a proxy, relay that connection to a server listening for connections somewhere else on the network. TCPMapper can be used with web proxy servers or any other TCP/IP-based server program. Running the TCPMapper requires a Java virtual machine and the compiled Java classes. Say you wanted to use the TCPMapper to intercept requests to a proxy called "my-proxy" on port "80." If you were to run TCPMapper on a machine called "my-pc" and have it listen on port 8080, you would run it as in <A NAME="rf6"><A HREF="0103jf6.htm">Figure 6</A>. By configuring your browser program to use my-pc port 8080 as its proxy server (instead of the usual my-proxy port 80), you effectively sandwich the TCPMapper between your browser and web proxy where it can trace all communication sent back and forth between the two.</p>


<p>Once TCPMapper is collecting data, you will see data files being created in its working directory. For each network connection relayed by the TCPMapper there is one log file containing the data sent to the server by the client, and another log file containing the data sent from the server to the client. Each pair of files is given a sequence number corresponding to the order in which connections were handled. For text-based protocols (such as HTTP), these log files reveal network conversations in plain text. When using the TCPMapper with binary protocols, interpreting the log files is a more difficult undertaking.</p>



<h3>Source Code Highlights</h3>


<p>The main TCPMapper class extends a base class called <i>ConcurrentServer</i>; see <A NAME="rf7"><A HREF="0103jf7.htm">Figure 7</A>(a). This avoids having to handle both server-side and client-side socket connections in one class. Separating the server code also makes it possible to reuse code when building other tools. The base class is a general-purpose, multithreaded network server capable of receiving multiple concurrent network connections and delegating the processing on these connections to separate threads, each running a method called <i>handleSession()</i> in the <i>TCPMapper</i> class; see <A NAME="rf7"><A HREF="0103jf7.htm">Figure 7</A>(b). </p>


<p>After a connection has been accepted by TCPMapper, the next step is to relay that connection to the actual proxy server by setting up another socket connection, as in <A NAME="rf7"><A HREF="0103jf7.htm">Figure 7</A>(c). From <A NAME="rf7"><A HREF="0103jf7.htm">Figure 7</A>(c), <i>proxyHost</i> would be my-proxy and <i>proxyPort</i> would have the value 80.</p>



<h3>Routing Packets  Between Browser and Proxy</h3>


<p>With TCPMapper handling incoming and outgoing socket connections, you need a simple way to shuttle the data back and forth in a manner that hides TCPMapper from the other two programs trying to communicate with each other. To handle this chore, you delegate the work to two more threaded classes whose job it will be to read incoming data from one socket and immediately copy that data out to another socket. Using two such instances, TCPMapper can concurrently copy data back and forth bidirectionally.</p>


<p>In <A NAME="rl1"><A HREF="#l1">Listing One</A>, the program first creates data input and output streams from the socket connected to the client program. It then opens the socket connection to the proxy server (shown already) and creates data input and output streams connected to that program. Next, TCPMapper creates instances of the <i>ByteCopier</i> class, initializing them with two data streams connecting one to the client and the other to the server program. Depending on the value of the logging flag, the copier objects may also be initialized using a reference to an object that will log all of the data passed through TCPMapper to output files. When all of this setup is completed, the program starts the copier objects (remember that these run as separate threads) and simply waits until one of the copiers detects a broken connection indicating that the active mapping (still under the control of the <i>handleSession()</i> thread) should be shut down.</p>



<h3>Logging the Network Trace  Captured by TCPMapper</h3>


<p>TCPMapper includes logging capabilities. If logging is enabled, TCPMapper saves all of the data sent to and from the proxy server into files, one pair of output files for each connection. To facilitate different kinds of logging, the <i>DataLogger</i> class created and passed into the <i>ByteCopier</i> implements a special interface called <i>LineListener</i> (see <A NAME="rl2"><A HREF="#l2">Listing Two</A>). When data arrives in the <i>ByteCopier</i> class, it will invoke a <i>dataAlert() </i>method on its corresponding <i>LineListener</i>. How the presentation of this data is handled is up to the class implementing <i>LineListener</i> or, in this case, the <i>DataLogger</i> class.</p>




<h3>Extending TCPMapper </h3>


<p>Some clear limitations of TCPMapper appear in practical use. First, with or without logging, TCPMapper introduces a performance bottleneck when it is placed in front of a proxy server. Although the program can handle large numbers of concurrent connections from client programs, the data- copying process is inefficient and slow.</p>


<p>For strictly HTTP traffic, one simple enhancement would be to replace the current <i>ByteCopier</i> class with another called <i>LineCopier</i> (also included with the source code), which buffers input and output.</p>

<p>Next, by writing a new <i>LineListener</i> implementation, it would be possible to put a prettier face on TCPMapper, perhaps displaying the traced data in a window instead of just writing the raw data out to a file. You might even go so far as to interpret the meaning of the HTTP statements and response codes to produce an annotated and color-coded transcript of an HTTP session.</p>



<h3>Further Study</h3>


<p>The protocol specification for HTTP describes the use of proxies in detail. It is a tedious document to read, but as a reference it can be an invaluable help. Several editions are available online, but I suggest you get the nicely formatted online version from http://www.w3.org/Protocols/rfc2616/rfc2616.html.</p>


<p>If you are interested in further reading on the subject of proxies, a short list of definitive sources must also include the the book <i>Web Proxy Servers</i>, by Ari Luotonen (Prentice Hall Computer Books, 2000). While written for the network administrator to a large extent, this book covers the nuts and bolts of proxying and troubleshooting, as well as rules of thumb for capacity planning.</p>

<p>Free proxy software or trial versions (see <A NAME="rt1"><A HREF="0103jt1.htm">Table 1</A>) of commercial products are easy to find on the Web and can give you a solid test platform for working through proxy-related development problems. For developing inside of a corporate network, you can chain a development proxy to a production proxy and still access external web pages while testing a new application.</p>




<p><b>DDJ</b></p>

<H4><A NAME="l1">Listing One</H4>


<pre>clientIn = new DataInputStream(socketFromClient.getInputStream());
clientOut = new DataOutputStream(socketFromClient.getOutputStream());

socketToServer = new Socket(proxyHost, proxyPort);
serverIn = socketToServer.getInputStream();
serverOut = socketToServer.getOutputStream();

ByteCopier copier1 = null;
ByteCopier copier2 = null;
DataLogger logger1 = null;
DataLogger logger2 = null;

if (logging)
{
    logger1 = new DataLogger(uniqueId, "To");
    logger2 = new DataLogger(uniqueId, "From");
    copier1 = new ByteCopier(clientIn, serverOut, logger1);
    copier2 = new ByteCopier(serverIn, clientOut, logger2);
}
else 
{
    copier1 = new ByteCopier(clientIn, serverOut);
    copier2 = new ByteCopier(serverIn, clientOut);
}
copier1.start();
copier2.start();
while (copier1.isAlive() &amp;&amp; copier2.isAlive()) waitHere(100);

</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two</H4>


<pre>public interface LineListener
{
    public void dataAlert(int data);
    public void dataAlert(String data);
}

</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>


</body>
</html>
