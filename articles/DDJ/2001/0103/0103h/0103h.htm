<html>
<head>
<title>Mar01: PocketPyro for  Palm Development</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>PocketPyro for  Palm Development</h1>
<p><i>Dr. Dobb's Journal</i> March 2001</p>
<h2>Big sounds out  of a small package</h2>

<h3>By Linden deCarmo</h3>

<I>
Linden is a senior software engineer at Netspeak and the author of Core Java Media Framework (Prentice Hall, 1999). He can be contacted at lindend@mindspring.com.</I>

<hr>

<a name="rs1"><a href="0103hs1.htm">The Secure Digital Music Interface </a><hr>

<p>Most Palm users crave access to the multimedia gadgets found in Windows CE-based handheld devices. Fortunately, PocketPyro (http://www.pocketpyro.com/), which makes accessories for the Palm, produces the "Pyro for Palm" (see <A NAME="rf1"><A HREF="0103hf1.htm">Figure 1</A>) that fulfills these multimedia cravings. Not only can the Pyro play MP3 files, but it provides filesystem management and is capable of speech recognition, text-to-speech, and other such multimedia applications. In this article, I'll examine the PocketPyro architecture, explore its SDK, and show how you can use it to create exciting multimedia applications.</p>
<p>Of course, most people are initially attracted by Pyro's MP3 playback capabilities. However, its expendability is what separates the Pyro from similar devices. This expendability is enabled by open interfaces, mass storage, and its processor. Much of Pyro's flexibility stems from its use of industry-standard interfaces and components. For example, multimedia content can be transmitted to and from its USB interface at 12 Mbps, rather than the paltry 35 kbps capacity of the Palm's serial port.</p>
<DDJADVERTISEMENT INLINE>

<p>The Pyro ships with main memory configurations ranging from 64-192 MB of flash memory, and you can add additional storage with a Secure Digital (SD) memory card. While a significant advantage of SD cards is their ability to store multimedia content in minuscule form factors, the real reason for their popularity is security. </p>

<p>Content providers (aka Hollywood) have been hesitant to deliver digital content for portable devices. Fortunately, since each SD card contains hardware security features that minimize the risk of piracy, their fears have been pacified (see the accompanying text box entitled "The Secure Digital Music Interface").</p>

<p>A second reason for Pyro's flexibility is its ample supply of nonvolatile flash memory. By default, this memory is formatted as a large, removable drive that is accessible when you connect the Pyro to the USB port on a Windows 98/2000 machine.</p>

<p>The driving force behind Pyro's flexibility is its signal-processing engine, called "DragonThunder," which consists of a general-purpose Texas Instruments TMS320VC5402PGE-100 Digital Signal Processor (DSP) and intelligent multimedia management software. Since DragonThunder includes a general-purpose DSP, it is not limited to MP3 playback, and can be used for a variety of processing applications. The Pyro's DSP workload is assisted by an AT90LS8535-4AC RISC I/O processor, which controls the Pyro's power, monitors the DSP's status, performs serial and expansion port I/O, and monitors battery status. </p>



<h3>Playing with Fire</h3>


<p>FireStream, Pyro's multimedia API, gives you access to these hardware capabilities. The initial version of FireStream concentrates on providing basic multimedia building blocks that you can add to your Palm applications. These APIs are divided into two categories &#151; enhanced file streaming and media APIs. </p>


<p>Since the Palm is a memory-constrained platform, its file I/O APIs are optimized to access and update information in place rather than copy data to and from a filesystem. The same principles are used to manipulate files on the Pyro's removable drive; see <A NAME="rt1"><A HREF="0103ht1.htm">Table 1</A>. </p>

<p>FireStream's file APIs are roughly equivalent to their Palm counterparts except they are prefaced with <i>Dev</i> and support multiple cards. To explain, the original Palm APIs require that the filesystem device be 0 since no other filesystems are supported. By contrast, the Pyro APIs not only work on the Palm's filesystem (device 0), but also on Pyro filesystems (device DEVICE_ID_POCKET_PYRO).</p>

<p>Unfortunately, Pyro developers had to replicate all of the functionality in Palm's file streaming APIs to implement multiple device support. Because the Palm OS does not offer installable filesystems, this is the only way to access nonPalm storage systems.</p>



<h3>Media Central</h3>


<p>Unlike the <i>DevFile</i> functions, Pyro's media APIs have no functional equivalent in Palm OS. These functions not only let you manipulate multimedia content, but they offer access to logical multimedia devices running on the Pyro DSP. </p>


<p>To manipulate content to the Pyro DSP, you use the media streaming APIs. These functions can stream content to or from files, memory, or remote Internet-based sources (only file streaming and memory buffers are supported in the initial release). To open a file, you use the<i> MediaFileOpen() </i>API; see <A NAME="rl1"><A HREF="#l1">Listing One</A>.</p>

<p>One interesting (and somewhat secretive) parameter of <i>MediaFileOpen() </i>is the <i>MediaDescriptor</i>, which describes file attributes such as file formats (MP3, WMA, or whatever). Theoretically, you can use them to retrieve the Digital Rights Management (DRM) information associated with the file. Traditional DRM attributes that could be contained in a <i>MediaDescriptor</i> are the number of times the file can be played or recorded. Should Pyro refuse to play your file due to DRM restrictions, these DRM attributes could be used to report a reasonable warning message to users rather than cryptic error numbers. Alas, the initial release of FireStream provides only a cursory description of <i>MediaDescriptors</i>. Therefore, we'll need to wait for the follow-up release to obtain the critical details on MediaDescriptors and DRM attributes.</p>

<p>Once you've created a media stream, use <i>MediaFilePlay()</i> to commence playback. Similarly, the <i>MediaPause(), MediaResume(),</i> and <i>MediaStop()</i> can be used to pause, resume, and stop a stream, respectively. When you're finished streaming, <i>DevFileClose() </i>releases any DSP resources you've allocated and destroys your stream object.</p>

<p>When you create a <i>MediaStream</i> object, Pyro configures a network of logical multimedia devices (such as amplifiers and speakers) necessary to stream the content (see <A NAME="rt2"><A HREF="0103ht2.htm">Table 2</A>). Since these devices are initialized with a vanilla set of audio attributes, you may alter them with the Media Device APIs.</p>

<p>You can get a listing of the Media Devices in a Pyro with <i>MediaControlGetCount</i>; see <A NAME="rl2"><A HREF="#l2">Listing Two</A>. Most Pyros contain at least an AUDIO_OUTPUT_CONTROL. However, since Pyros are likely to be deployed by a variety of OEMs, it's possible that the AUDIO_OUTPUT_CONTROL may not be present, or that additional devices (such as AUDIO_INPUT_CONTROL) will be reported (<A NAME="rt2"><A HREF="0103ht2.htm">Table 2</A>).</p>

<p>Once you've resolved the device you wish to use, call <i>MediaControlOpen()</i> to open it. Before you blindly change the device's default settings (<A NAME="rt3"><A HREF="0103ht3.htm">Table 3</A>), you should call <i>MediaControlGetAttr()</i> to determine the device's original settings. For instance, to retrieve the current volume setting, pass the AUDIO_CONTROL_VOLUME attribute to <i>MediaControlGetAttr() </i>(see <A NAME="rl3"><A HREF="#l3">Listing Three</A>).</p>

<p>When you're ready to change the volume, invoke <i>MediaControlSetAttr(),</i> which uses the same attributes as <i>MediaControlGetAttr(). </i>The only difference is that <i>MediaControlSetAttr()</i> updates a device's settings, whereas <i>MediaControlGetAttr()</i> retrieves the device's settings (see <A NAME="rl3"><A HREF="#l3">Listing Three</A>). </p>



<h3>Under the Covers</h3>


<p>Although <i>MediaControlSetAttr()</i> lets you modify the attributes of existing controls, you remain encumbered with the default network of multimedia devices that FireStream constructed for you. Thankfully, if your application requires a custom set of multimedia devices, you can create your own network of output devices with a <i>MediaContext </i>(see <A NAME="rl4"><A HREF="#l4">Listing Four</A>). </p>


<p><i>MediaContext</i>s are a grouping of logical devices that manipulate data. Contexts are created with the <i>MediaContextCreate() </i>API, which returns a <i>MediaContext</i> object that you can use to construct your multimedia network. </p>

<p>Although it is not obvious, the most important parameter associated with <i>MediaContextCreate() </i>is the callback parameter. This parameter lets FireStream send your application asynchronous notifications when the state of the <i>MediaContext</i> changes (see <A NAME="rt4"><A HREF="0103ht4.htm">Table 4</A>). To receive these notifications, your program must declare a function (or event handler) with the following calling convention:</p>

<blockquote><p>
typedef (*PFN_MediaEvents) (MediaContext  	     hContext, MediaEvent *pEvent);</p>

</blockquote><p>and pass the address of this function to <i>MediaContextCreate()</i>. <A NAME="rl5"><A HREF="#l5">Listing Five</A> illustrates how to monitor the <i>MediaPlayStop</i> and <i>MediaPlayPos</i> events inside a <i>MediaContext</i> event handler. </p>


<p><i>MediaContextAddComponent()</i> is used to add a device to the <i>MediaContext</i> (see <A NAME="rl6"><A HREF="#l6">Listing Six</A>). Similarly, <i>MediaContextRemoveComponent()</i> extracts a device from the context. These functions are useful when you need to adjust audio output options. For instance, to transfer audio output from the stereo headphone jack to the expansion port, you would remove the headphone jack with <i>MediaContextRemoveComponent(), </i>and add the expansion port via <i>MediaContextAddComponent().</i></p>

<p>Since a <i>MediaContext</i> produces or consumes content, it is worthless unless you attach it to a multimedia stream. This is accomplished with <i>MediaPlayFile</i> or <i>MediaPlayBuffer()</i>. In the previous <i>MediaPlayFile</i> example, I used the default context (0) to play the stream. However, to use a custom context rather than the default, the context parameter should be filled in with the value returned from <i>MediaContextCreate() </i>(see <A NAME="rl7"><A HREF="#l7">Listing Seven</A>). If you attach an event handler to the context, the handler can be used to monitor the health of the <i>MediaContext</i>. Event handlers are particularly useful when streaming audio buffers to the DSP. Unlike <i>MediaPlayFile(),</i> which operates on files, <i>MediaPlayBuffer()</i> lets you stream audio buffers to a <i>MediaContext</i>. If you have more than one buffer to play, use the MEDIA_GENERATE_BUFFER_REQUEST flag.</p>

<p>MEDIA_GENERATE_BUFFER_REQUEST causes FireStream to send you a <i>MediaBufferRequestEvent</i> when it has consumed your buffer and is ready to accept an additional buffer (see <A NAME="rl8"><A HREF="#l8">Listing Eight</A>). The primary reason for this event is underrun prevention. To explain, if you can't supply the DSP with data buffers in a timely fashion, it may belch out irritating noises before it finally ceases playback. <i>MediaBufferRequestEvent</i> alerts you that an underrun is imminent unless the DSP is either fed additional buffers or stopped.</p>

<p>When you're done with the <i>MediaContext</i>, call <i>MediaContextDestroy()</i> to release the resources associated with it. However, <i>MediaContextDestroy()</i> should be used carefully. For example, if you created a custom context and started playback with that context, you cannot delete the context until the playback stream is closed. If you try to close the context while it is actively attached to a stream, <i>MediaContextDestroy() </i>will fail. Furthermore, this may result in memory leaks since the resources associated with the context will not be released.</p>



<h3>Into the Future</h3>


<p>If you're a DirectX programmer who expects low-level access to audio hardware, it may surprise you that the initial revision of FireStream doesn't let you record or give you explicit control over buffer consumption. Fortunately, the Pyro developers realize these are critical features and intend to address these in updates to FireStream. Future enhancements to FireStream will include DSP documentation, recording, and enhanced streaming. </p>


<p>You may also be frustrated at the sparseness of the FireStream API when compared to the rich DirectX API set available on Win32 and WinCE. Programmers expecting an all-encompassing multimedia API will never be satisfied with the minimalist approach endorsed by FireStream. While DirectX is a wonderful solution for the PC, a Palm equivalent would have a huge footprint and devour battery power. </p>

<p>By contrast, FireStream attempts to provide a functional API while minimizing its memory footprint. Furthermore, FireStream does not shackle your applications to Pyro hardware. When other vendors write FireStream drivers for their hardware, your application will instantly be able to exploit the new devices. </p>



<h3>Conclusion</h3>


<p>The Pyro for Palm finally gives Palm developers access to multimedia capabilities. It not only supports MP3 playback, but can also be used for speech recognition, text-to-speech, and other multimedia tasks. This flexibility is enabled by the DragonThunder DSP infrastructure and the use of open interfaces such as USB and SD cards. </p>


<p>You can incorporate these multimedia capabilities in your Palm applications by using FireStream, the Pyro SDK. While the initial release of FireStream focuses on audio playback, it has specifically been designed to accommodate future technologies while minimizing the memory footprint. </p>

<p>Although the Pyro is an exciting device, it does have a few shortcomings. For instance, the FireStream SDK has limited streaming and no recording support. Furthermore, documentation on the DRM features are sketchy. Fortunately, Pyro has promised to address these software limitations in a follow-up release of FireStream. Despite these minor weaknesses, the Pyro for Palm's open interfaces, powerful DSP engine, and FireStream SDK is an evolutionary advance for the Palm platform.</p>



<p><b>DDJ</b></p>

<H4><A NAME="l1">Listing One</H4>


<pre>Err             err;
FileHandle      handle;
MediaFileDesc   *mediaDesc;
mediaDesc.size = sizeof(MediaFileDesc);
handle =   MediaFileOpen(libRef,
                         DEVICE_ID_POCKET_PYRO, 
                         pCallback,     // PFN_DEVFILE_EVENTS callback
                         &amp;mediaDesc,    // media description
                         0, fileModeReadOnly, &amp;err);
// interesting info is returned in the MediaFileDesc
// for instance mediaDesc.pFileName has the filename
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two</H4>


<pre>// open a file
handle =   MediaFileOpen(libRef,
                         DEVICE_ID_POCKET_PYRO,
                         pCallback,     // PFN_DEVFILE_EVENTS callback
                         &amp;mediaDesc, 0, fileModeReadOnly, &amp;err);
// start playing it
MediaFilePlay(libRef, hcontext, handle);
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3">Listing Three</H4>


<pre>Int count;
Err rc;
// get the number of devices in for the default device.
rc = MediaControlGetCount(libRef,
                        -1,                     // default device
                        AUDIO_OUTPUT_CONTROL, &amp;count);

if ( !rc )
{
        // if rc == 0, then  count contains the number of controls...
}
</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>
<H4><A NAME="l4">Listing Four</H4>


<pre>Err rc;
int value;
int id;

// get the control id, we'll use it to get/set attributes
rc = MediaControlGetId(libRef,
                        DEVICE_ID_POCKET_PYRO,
                        AUDIO_OUTPUT_CONTROL,   // control type
                        0, &amp;id);
// retrieve the current volume setting for the control...
rc =  MediaControlGetAttr(libRef,
                                 id,                    // control id
                                 AUDIO_CONTROL_VOLUME, &amp;value);
// modify the setting....
value++;

// change the current volume setting...
rc =  MediaControlSetAttr(libRef,
                        id,                     // control id
                        AUDIO_CONTROL_VOLUME, &amp;value);
</pre>
<P>
<A HREF="#rl4">Back to Article</A>
</P>
<H4><A NAME="l5">Listing Five</H4>


<pre>// this handler is called when the state of the MediaContext  changes
// pEvent-&gt;eType contains the type of event to monitor

Err MediaEventCallback(MediaContext hcontext, MediaEvent *pEvent)
{
        // pEvent-&gt;eType is the type of event that occurred
        // the switch illustrates the type of events you can check for.....
        switch(pEvent-&gt;eType)
        {
                case mediaPlayStartEvent:
                        break;
                case mediaPlayStopEvent:
                        break;
                case mediaPosEvent:
                        break;
                case mediaPausedEvent:
                        break;
                case mediaResumedEvent:
                        break;
        }
        return ( 0 );
}
</pre>
<P>
<A HREF="#rl5">Back to Article</A>
</P>
<H4><A NAME="l6">Listing Six</H4>


<pre>MediaContext    hContext;
Err             err;

// create a logical context...its empty be default.
hContext = MediaContextContext(libRef, pMediaEventCallback, &amp;err);
if ( !err )
{
        // indicate that we want audio output control...

        err = MediaContextAddComponent (libRef, hcontext, -1, 
                                         AUDIO_OUTPUT_CONTROL,
                                         0);    // component #
}
</pre>
<P>
<A HREF="#rl6">Back to Article</A>
</P>
<H4><A NAME="l7">Listing Seven</H4>


<pre>MediaContext    hContext;
Err             err;
FileHandle      handle;

handle =   MediaFileOpen(libRef,
                         DEVICE_ID_POCKET_PYRO,
                         pCallback,     // PFN_DEVFILE_EVENTS callback
                         &amp;mediaDesc, 0, fileModeReadOnly, &amp;err);
hContext = MediaContextContext(LibRef libRef, pMediaEventCallback, &amp;err);
if ( !err )
{
        err = MediaContextAddComponent (libRef, hcontext, -1,
                                         AUDIO_OUTPUT_CONTROL, 0);
        if ( !err )
        {
                // start playback to our media context....
                err = MediaPlay(LibRef libRef, hContext, handle);
        }
}
</pre>
<P>
<A HREF="#rl7">Back to Article</A>
</P>
<H4><A NAME="l8">Listing Eight</H4>


<pre>// this handler is called when the state of MediaContext changes pEvent-&gt;eType
// contains the type of event to monitor in this case, we're looking for 
// MediaBufferRequestEvent so we can feed FireStream additional buffers

Err MediaEventCallback(MediaContext hcontext, MediaEvent *pEvent)
{
        Err             err;
        UInt8           buffer[4096];
        switch(pEvent-&gt;eType)
        {
                case MediaBufferRequestEvent:
                        {
                        MediaFormat format;
                        format.size                   = sizeof(MediaFormat);
                        format.eType                  = mediaFormatAudio;
                        format.data.audioFormat.codec = audioMP3
                        format.data.audioFormat.bitRate = 88200;
                        format.data.audioFormat.bitsPerSample = 16;
                        format.data.audioFormat.samplesPerSecond = 44100;
                        format.data.audioFormat.channels        = 2;

                      // play another buffer and have an event generated when
                      // firestream is done with it..
                      err = MediaPlayBuffer(LibRef libRef,  // ??? value ????
                                         hContext, &amp;buffer, 4096, &amp;format,
                                         MEDIA_GENERATE_BUFFER_REQUEST );
                      }
                      break;
        }
        return ( 0 );
}</pre>
<P>
<A HREF="#rl8">Back to Article</A>
</P>


</body>
</html>
