<html>
<head>
<title>Mar01: Programming Paradigms</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Mostly Math</h1>
<p><i>Dr. Dobb's Journal</i> March 2001</p>

<h3>By Michael Swaine</h3>

<I>
Michael is editor-at-large for DDJ. He can be contacted at mike@swaine.com.</I>

<hr>

<p>The length of the representation of a number in Roman numerals increases fractally with the size of the number.</p>
<p>That's a factoid from one of the mathematicians I write about this month. Here's another: The idea of using the Greek letter pi for the ratio of the circumference of a circle to its radius was originally suggested by some character named William Jones, who though of it as a shorthand for the word perimeter.</p>
<DDJADVERTISEMENT INLINE>

<p>One more: During the writing of <i>Principia Mathematica</i>, Bertrand Russell could be seen pushing wheelbarrows full of specially designed lead type to the Cambridge University Press &#151; if true, an early example either of an author's technological needs oustripping a publisher's capabilities.</p>

<p>Stephen Wolfram, the mathematical and scientific prodigy who wrote the program Mathematica to help him with his research and founded Wolfram Research to sell it, and who not so long ago crossed the threshold into his 40s, is the source of those factoids. The Russell factoid is of some personal interest to Wolfram, who is hoping to publish his own <i>Principia Mathematica</i> this year, a book whose title <i>A New Kind of Science</i> is no overstatement of its ambitious scope. Like Russell, Wolfram is planning to push current printing capabilities with this massive tome, using cutting-edge printing technology and high-quality paper to render the gigabyte plus of graphics in the 992-page book with the highest resolution possible.</p>

<p>Massive and intellectually weighty this opus is likely to be, although perhaps not as physically hefty as the manual for Mathematica.</p>



<h3>Mathematica, Java, and Linux</h3>


<p>Four point one, the latest version of Wolfram Research's Mathematica, recently rolled off the UPS truck and I dutifully hand-carted it to my office and installed it. Okay, it doesn't really take a hand cart to move the documentation, but at roughly 1500 pages, <i>The Mathematica Book</i> is pretty hefty. And it still bears a single byline &#151; Stephen Wolfram. This Wolfram guy is one of the reasons I always load up the latest version of Mathematica and play with it for a while before putting it away until the next version rolls off the UPS truck. Stephen Wolfram is a genius. He published his first scientific paper at age 15; got his Ph.D. in theoretical physics from Caltech at 20; became at 21 or 22 the youngest ever recipient of a MacArthur Prize Fellowship; and in the 1980s did foundational research in cellular automata, complexity theory, and artificial life.</p>


<p>Then, at the top of his game, he decided that the tools available to do mathematics were not adequate to his needs. So he took some time out to write his own mathematical software, calling it "Mathematica." One is reminded of Ted Nelson inventing hypertext because he needed a way to organize his index cards. But while Ted was not programmer enough to implement his concept himself, and while the goal that got sidetracked while Ted pursued Xanadu was to become the next Orson Welles, Wolfram wrote his own code, and the goal that he sidelined was, the best evidence suggests, to become the next Isaac Newton.</p>

<p>The product Mathematica led to the company Wolfram Research, and the product and the company occupied a lot of Wolfram's time for the next five years. Soon, though, he was back to the research, running the company by day and doing science by night.</p>

<p>More about his moonlighting work shortly, but the day job produced some impressive results. The company is actually a group of four companies with over 300 employees and an enviable record of profitability. The product that feeds the profits and the research and development, Mathematica, is an impressive piece of work, clearly reflecting Wolfram's no-compromises approach. When users report some limitation of Mathematica, the development team sees it as an opportunity to generalize solutions, to dig deeper into the math, rather than to come up with a quick fix. That's not just the corporate line, you can tell from using the product that those are the priorities at Wolfram Research.</p>

<p>The product itself is the other reason I feel I have to load it up and play with it for a while every time the UPS truck delivers a new version. Among other things, Mathematica is the classroom on programming paradigms. You can program with Mathematica in a C-like procedural fashion, with the usual assignments and loops and such, or you can treat it as a rule-based language like Prolog, or as a string-based language like Snobol, or as a pure functional language &#151; pretty much everything you type in Mathematica is a function and returns a value. You can write programs that look something like Lisp. You can do object-oriented programming in Mathematica, to an extent. Certainly, you can do things like overloading the standard addition operator to accommodate new kinds of addition on new mathematical objects that you create. (Or discover?) The latest version extends the list of supported platforms to two more Linux implementations: LinuxPPC and AlphaLinux. There are speed improvements and improved algorithms and specific new capabilities in various components of the program. Then there's the Java integration. J/Link 1.1 lets Mathematica call Java functions and lets any Java program control the Mathematica kernel.</p>

<p>And there's the increased support for MathML, that's the W3C Standard for displaying and reusing mathematics on the Web. Mathematica is better at dealing with MathML; for example, you can grab MathML code from a web browser, paste it into Mathematica for evaluation, and copy the result back to a web page as MathML.</p>



<h3>Math on the Web</h3>


<p>Pulling together Java and web publishing of mathematics, Wolfram Research has come up with webMathematica, a server-based technology for supporting math on the Web, built on top of Java servlets. Basically, it's a collection of tools that let you embed Mathematica commands in HTML code. When the page is requested from the server, the embedded commands are routed to Mathematica for processing. No special technology on the browser side is required. One intriguing application is courseware: You could develop some pretty nifty online courses if you could have all the calculational, programming, typesetting, and display capabilities of Mathematica serverside.</p>


<p>Outside the halls of Wolfram Research, one researcher is doing work that could change the "feel" part of the Mathematica look and feel rather dramatically.</p>

<p>The Mathematica manual says, "You absolutely must know how to type your input to Mathematica." And so you must, but maybe not forever. Mathematicians since Euclid have done math by hand, and even the advent of the digital computer, Mathematica, and the computational solution to the four-color problem haven't cured mathematicians of their pigheaded preference for handwriting their work on blackboards or in notebooks (or on napkins or the backs of their hands when no better medium is available). They'd handwrite on graphics tablets if it would do them any good, but that would require software that knew how to interpret that input, and such software doesn't exist &#151; yet. Soon, maybe, it will and mathematicians will be able to handwrite their input to Mathematica. </p>

<p>Masakazu Suzuki at Kyushu University is working on a system to edit mathematical expressions from a handwriting interface. The input and output formats he is initially trying to support are LaTeX and MathML. "Mathematical expressions written on the display of the system can be evaluated, factorized, expanded, or presented by graphs, etc., by Mathematica linked to the system by the protocol MathLink," Suzuki said at a recent MathML conference. The handwriting recognition component is good enough that less than an hour's training lets a user write complex expressions at a quite reasonable speed, including the time for the system to interpret the input and the user to enter any corrections. But that's the work of an independent developer. What's Stephen Wolfram himself been up to in his spare time? Ah, that would be <i>A New Kind of Science.</i></p>



<h3>The Man Who Would Be Newton</h3>


<p>"Almost all the science that's been done for the past three hundred or so years has been based in the end on the idea that things in our universe somehow follow rules that can be represented by traditional mathematical equations. The basic idea that underlies <i>A New Kind of Science</i> is that that's much too restrictive, and that in fact one should consider the vastly more general kinds of rules that can be embodied, for example, in computer programs."</p>


<p>That's Stephen Wolfram, explaining the motivation behind <i>A New Kind of Science.</i> The computer programs that got Wolfram thinking along these lines back before he took time out to write Mathematica are simple indeed &#151; cellular automata, simple systems like the game of Life, that start with some simple starting state and recursively apply some simple rule. The simplicity of such programs is what caught Wolfram's attention, or rather the fact that from extremely simple initial conditions and rules, enormous complexity can be derived.</p>

<p>Others have been intrigued by this complexity-from-simplicity, like the researchers in complexity theory and chaos theory and explorers of fractal geometry in nature and those who tend their flocks of a-life critters. Wolfram's view, characteristically, is that they are all just chipping away at the edges of something much bigger and more important. Something that he plumbed to a greater depth, and that has great promise for reshaping our approach to doing science. At least he thinks it does, but he's not quite there yet. Sometime this year, though, he hopes to open our minds with his big book.</p>



<h3><i>The Man Who Loved Only Numbers</i></h3>


<p>This forthcoming book of Wolfram's raises intriguing questions. Is it still possible for one person to make a significant contribution to such a wide range of scientific disciplines? Is it possible to discover something as fundamental as Wolfram hints his new approach to science is? And has this child prodigy still got it now that he's past 40? </p>


<p>As evidence that child prodigies can stay prodigies, at least if they stay childlike, I point to the case of Paul Erdos. I recently revisited a wonderful book about this mathematical genius, Paul Hoffman's <i>The Man Who Loved Only Numbers</i> (Hyperion, 1998; ISBN 0-7868-8406-1). I recommend it highly. The Erdos story is well known among mathematicians, less so among computer scientists and engineers and physicists, but not completely unknown among the general educated book-reading public. Born in Budapest, Hungary, in 1913, the son of two mathematics teachers, a child prodigy who could multiply three-digit numbers in his head at the age of three, Erdos lived for mathematics and only mathematics. He never married or had children, had no hobbies and no possessions to speak of except his notebooks. He didn't even have a real job or a home. He relied on his mother for many things &#151; he first buttered bread for himself at the age of 21, and that may also have been the last time. For years, he and his mother traveled together. When she died, others took over the mundane matters that he couldn't be bothered with &#151; like driving, cooking, arranging plane flights, getting him to the plane on time, providing a place to stay when he got to his destination, getting him to that place to stay. The flights and the places to stay were crucial because from 1934, on Erdos really had no fixed home. His life had become, and remained until his death in 1996, a series of guest lectures and visiting scholar appointments all over the world. For all this traveling that he did, Erdos lacked any of the skills that other professional travelers acquire out of necessity. He arranged to have others make all his arrangements, he wangled invitations to stay in the homes of the mathematicians who made the arrangements, he got them to pay for his meals. What money he did have from speaking engagements and awards he tended to give away, as prizes for problems he set, as "loans" to promising young mathematicians, to charities, or, often, to beggars on the street.</p>

<p>One could say that Erdos never grew up. And in a way, even his professional career supports this view. In mathematics, it is the young prodigies who solve problems. As mathematicians mature, they either burn out or become system builders, leaving the mere puzzles behind for grander schemes of thought.</p>

<p>Not Erdos. Ignoring all social conventions, Erdos also ignored this intellectual convention. Throughout his life, Erdos remained mathematics' most formidable formulator &#151; and solver &#151; of problems. During the last 25 years of his life, he worked on mathematics 19 hours a day. How does an 80-year-old man keep up such a pace? The caffeine and amphetamines were a factor, I'm sure, but there was more to it than that. I think it had to do with staying childlike. Erdos was the premier mathematical problem solver of our time. He wrote or coauthored 1475 academic papers, all of them substantial. He collaborated with more mathematicians than any other mathematician in history, 485 coauthors; and this led to an interesting tradition among mathematicians &#151; computing one's Erdos number. Those 485 have an Erdos number of 1, other mathematicians who have collaborated with them have an Erdos number of 2, and so forth.</p>

<p>I don't know what Stephen Wolfram's Erdos number may be. But I do know that Wolfram's plan to remake all science has an unworldly, childlike na&iuml;vet&eacute; about it, and that could be its strength. If Wolfram, like Erdos, has managed the trick of keeping his mind somehow childlike, maybe this Newton-like scheme of remaking science has a chance. Or maybe not. Anyway, I've got my order in at Amazon.com.</p>



<h3><i>eBusiness Essentials</i></h3>


<p>And now for something completely different &#151; a clever bit from those wacky British comedians, the boys of BT, or British Telecom. While BT richly deserves to be laughed at for claiming to own hyperlinking, and even filing a lawsuit against an ISP to try to enforce its claim, the company is not all patent lawyers, and some useful work does come out of the company (I mean besides the invention of hyperlinking). As evidence of this, I mention <i>eBusiness Essentials: Technology and Network Requirements for the Electronic Marketplace</i>, by Mark Norris, Steve West, and Kevin Gaughan (John Wiley &amp; Sons Ltd. BT Series, Chichester, 2000; ISBN 0 471 85203 1).</p>


<p>The book is written for "planners, engineers, managers, and developers" and it seems to hit the right technical level for that mix of readers most of the time. The range of material that is covers is pretty broad: the different models of the electronic marketplace, many different kinds of catalogs and how to implement them, payment systems, trust and security, B2B and the need to move beyond traditional EDI in the supply chain, integration of diverse elements of an e-business, and an overview of underlying technologies and standards.</p>

<p>The overviews are helpful to one who is new to some or all of the subjects. I had just finished reading the book when my partner Nancy called and said she was filling out a form and needed to know what our EDI strategy was. Before reading the book, I could have told her that EDI stood for Electronic Data Interchange and that was about it. After reading the book, I could chat knowledgeably about different EDI strategies, and tell her that we don't have one, and why we don't want one.</p>

<p>The book isn't a cookbook on setting up an e-business; the cookbook approach necessarily constrains your options, and that's not what this book is about. I was impressed with the variety of approaches presented and pleased to see some very low-tech implementations presented as serious options. For a retail business that already has systems in place for most of the operations of an e-commerce site, it may make sense to piggyback the e-commerce site onto the existing system initially with little or no effort to take advantage of the efficiencies of e-commerce, even to the point of keying in credit-card numbers into a card processor manually. Converting a working manual system into an electronic one may be easier than building the electronic one from scratch.</p>

<p>The two case studies worked through in the book are from the other end of the spectrum &#151; monster e-commerce implementations from Federal Express and Cisco. It would be daunting to delineate the e-commerce strategy of either company, and the book scarcely tries; the case studies chapter is pretty skimpy and unenlightening.</p>

<p>Overall, though, the book is accurate, broad in its coverage, and willing to take a stand when appropriate. I think it's worth a look by anyone starting an e-business.</p>

<p>Of course, the most important piece of advice for anyone starting an e-business is never, ever refer to it as a dot-com. But you already knew that.</p>


<p><b>DDJ</b></p>
</body>
</html>
