<html>
<head>
<title>Jul01: Web-Based Video Monitoring</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Web-Based Video Monitoring</h1>
<p><i>Dr. Dobb's Journal</i> July 2001</p>
<h2>All web sites aren't monitored equally</h2>

<h3>By Michael Larson</h3>

<I>
Michael is a developer working and living in San Francisco. He can be contacted at mike@lrlart.com.</I>

<hr>

<a name="rs1"></a><a href="0107hs1.htm">Real-Time Streaming Protocol</a><hr>

<p>Ensuring that a web site delivers the goods can be a full-time job. What can help, of course, is an automated monitoring system that watches important components on your site and alerts you (or the webmaster) of an immediate failure. </p>
<p>While there are a number of available web services that monitor broken links, page delivery times, transactions, and the like for standard HTML web sites, tools are generally lacking when it comes to monitoring dynamic configurations with streaming content. I recently worked on a project that had just such a requirement &#151; to monitor the health of a web site where a large chunk of the content was streaming video. In particular, there was a fear (and a well-founded one) that the site would lose live video feeds from time to time. With no monitoring tools in place, the broken video link(s) would at best look sloppy and at worst give the site investors cold feet. </p>
<DDJADVERTISEMENT INLINE>

<p>The design of the web site called for initially supporting up to 50 concurrent, independent live video feeds while a team of content authors cranked out newsworthy content, adding (and deleting) new streams to the site day and night. Designing and delivering web pages with no errors is tough with any site. Adding video streams to a site is even tougher (just think about all the additional hardware/software components that can fail &#151; the camera, encoder, or leased line for each signal). Consequently, what we needed was a server application designed to continuously monitor video and image streams. I wanted to deploy this monitor on a staging server running Linux, and given the nature of this being a quick burn job (what isn't?), I wanted development to take place on Windows. And since I was concerned about debugging time before an upcoming vacation (memory leaks and the like), I elected to write the application in Java. Finally, I expected that as the web site matured, this monitor would be asked to perform additional work not included in the original design such as supporting new streaming video protocols and reporting methods. </p>



<h3>Consuming What You Produce</h3>


<p>The monitoring tool I developed is called "StreamHealth" and modeled after a producer/consumer object design. (The complete source code and related files for StreamHealth is available electronically; see "Resource Center," page 5.) <A NAME="rf1"></a><A HREF="0107hf1.htm">Figure 1</A> is a simple producer/consumer relationship. The advantages of this design are that the producer and consumer run on separate time schedules in their own execution threads. They are loosely connected through a notification protocol. For the producer, this means querying for the video connection state and posting important results when they arrive; and for the consumer, reporting on the state of the connection. The producer communicates its results to the consumer through a shared data object that is synchronized to prevent concurrent reading and writing to this object.</p>


<p>In the StreamHealth design (<A NAME="rf2"></a><A HREF="0107hf2.htm">Figure 2</A>), <i>SiteState</i> is the producer of the data objects (<i>StreamData</i>) describing the stream's health. The consumer is the <i>ReportMgr</i> that consumes the <i>StreamData</i> object and publishes the results. The <i>StreamData</i> object is used to represent the state information of a single stream. <i>StreamData</i> objects are represented by the structure in <A NAME="re1"></a><A HREF="0107he1.htm">Example 1</A>.</p>

<p>These <i>StreamData</i> objects are posted to the <i>ReportMgr</i> whenever one of four types of events occurs:</p>


<ul>
  <li><i>kSTATUS_HAS_STARTED</i> indicates a new monitor cycle has initiated. This also indicates that the stream configuration has been updated and has been produced for notification by the reporting objects.
  <li><i>kSTATUS_IS_UPDATED</i> is an event triggered when the state of a stream has changed. A change of state is of particular and immediate interest to the reporting manager. This event is sent immediately when a stream has reported the change.

  <li><i>kSTATUS_IS_COMPLETE</i> is an event that provides a complete recap of all streams status (changed and unchanged).

  <li><i>kSTATUS_NO_STREAMS</i> can be treated as an error if you are expecting at least one stream to always be monitored. If this condition is configured as an error, the <i>ReportMgr</i> receives this event.

</ul>


<p>Events are posted to the <i>ReportMgr</i> when <i>SiteState</i> identifies an important condition (one that fits one of the aforementioned four events). <i>SiteState</i> creates a new <i>StreamData</i> object using the constructor that copies <i>SiteState</i>'s internal <i>StreamData</i> record. The <i>StreamData</i> objects (or object) are then inserted into a <i>StatusAList</i> (an extended <i>ArrayList</i> containing an event flag) in the <i>SiteState.doneWithStatus()</i> method.</p>

<p>The status flag is added to the <i>ArrayList</i>, the <i>ArrayList</i> is pushed onto a <i>Vector (SiteState.mSDBufferVect)</i>, and finally the <i>ReportMgr</i> is notified of consumable data through the <i>notifyAll()</i> method in <i>SiteState.postUpdate()</i>; see <A NAME="re2"></a><A HREF="0107he2.htm">Example 2</A>. The <i>notifyAll()</i> call wakes any thread that is currently sleeping in a <i>wait()</i> call. <i>ReportMgr</i> then makes a call to <i>SiteState.getUpdateBuf()</i> for the event and <i>StreamData</i> object; see <A NAME="rl1"></a><A HREF="#l1">Listing One</A>. All events are dispatched through <i>SiteState.postUpdate()</i>. <i>StreamData</i> objects are always copied when inserted into the <i>StatusAList</i>. This is to prevent concurrent reading and writing of a <i>StreamData</i> object and to ensure that the <i>StreamData</i> internal state matches the state of the posted event. One area of potential thread mischief (that is, where you want mutual exclusion) is with the <i>ReportMgr</i> and <i>SiteState</i> access to the <i>mSDBufferVect</i>. However, the <i>Vector</i> class in Java is a synchronized class (note that <i>ArrayList</i> is the unofficial unsynchronized version of <i>Vector</i> in Java); therefore, the only explicit thread synchronization occurs between the <i>ReportMgr</i> and <i>SiteState</i> objects with their Wait/Notify protocol. Finally, when the <i>ReportMgr</i> calls <i>SiteState.getUpdateBuf()</i> for new events, concurrent access can occur between calls to <i>mSDBuffVect</i>. However, the <i>IsEmpty()</i> call is only able to transition from True to False (items are only inserted in this <i>Vector</i> outside of this method). This lets the logic in <i>SiteState.getUpdateBuf()</i> proceed without fear of <i>mSDBuffVect</i> reflecting an indeterminate state.</p>

<p>Notification is handled within a spinlock pattern that synchronizes the notification and the wait cycle of the <i>SiteState</i> and <i>ReportMgr</i> threads. The <i>SiteState.postUpdate()</i> method contains the <i>notifyAll()</i> call that wakes up the <i>ReportMgr.run()</i>. This approach is more CPU efficient over a polling thread as the JVM is responsible for notifying the waiting thread to wake up and check for data from <i>SiteState</i>. When <i>ReportMgr.run()</i> calls <i>wait(),</i> the thread will remain suspended until a <i>notifyAll()</i> call is made by <i>SiteState.postUpdate()</i>. The <i>ReportMgr</i> will awake and find data waiting through a call to <i>SiteState.getUpdateBuf()</i>. The <i>ReportMgr</i> will proceed to consume (that is, <i>ReportMgr</i> obtains a reference to the <i>ArrayList</i> and this object is removed from the <i>mSDBufferVect</i>). <i>ReportMgr</i> will continue to consume all of the <i>StatusAList</i> objects until the <i>Vector</i> is empty (returns NULL). <i>ReportMgr</i> will then drop into its wait state. </p>

<p>Within <i>SiteState</i> (producer) and <i>ReportMgr</i> (consumer), there are several helper objects that actually perform the specific tasks of reporting and watching the streams. <A NAME="rf2"></a><A HREF="0107hf2.htm">Figure 2</A> is the more detailed view of the role of these objects in monitoring streams.</p>



<h3>Acting on Events of Importance</h3>


<p><i>ReportMgr</i> is responsible for managing and coordinating <i>Report</i> objects. <i>Report</i> objects (<i>ReportHTML</i> and <i>ReportDIR</i>) encapsulate the specific reporting/publishing details and must implement the <i>Report</i> interface. The report interface is a generic interface that enforces four methods: </p>


<blockquote><p>
Public void startUpdate(ArrayList al);	</p>

<p>
  //init update cycle</p>

<p>Public void update(ArrayList al);		</p>

<p>  //report important status</p>

<p>Public void finishUpdate(ArrayList al); </p>

<p>  //update completed</p>

<p>Public void reportGeneralError();</p>

<p>
 //general failure to report</p>

</blockquote><p>These methods are analogous to the events that can be posted by the <i>SiteState</i> object and are dispatched within <i>ReportMgr</i> to the <i>Report</i> interface implementations. This interface lets additional report objects be added to the <i>ReportMgr</i> with minimal change. Currently in StreamHealth, the implemented <i>Report</i> objects are: <i>ReportDir</i>, a directory notification scheme; and <i>ReportHTML</i>, an HTML status page. Of the two, the <i>ReportDIR</i> is designed to notify of a failure immediately within a server directory. This mechanism is one way to notify another process of a failed stream. <i>ReportHTML</i> summarizes all stream status at the end of the testing cycle. </p>


<p>When the <i>ReportMgr</i> wakes up and finds data through its call to <i>SiteState.getUpdateBuf()</i>, it passes the data down to the individual <i>Report</i> objects to do their work. In the future, the webmaster (or even, heaven forbid, the marketing department) might request that results are e-mailed or faxed, or some additional analysis of failures be reported. The <i>Report</i> interface is designed to minimize the source changes outside of the specific reporting implementation.</p>



<h3>The Producer</h3>


<p>On the producer side, <i>SiteState</i> is responsible for the querying, receiving, recording, and notification of the state of streams to the <i>ReportMgr</i>. The SiteState object can also make decisions on the health of the stream and whether an event is important enough to notify the ReportMgr. </p>

<p><i>SiteState</i> runs in its own thread by extending the Java thread class. Within the <i>SiteState.run()</i> method, the health of the streams are checked within an infinite loop, only pausing for a sleep period between cycles. After each sleep period, <i>SiteState.run()</i> parses the list of active streams (StreamList.xml), reconciles the internal stream list, initializes new stream monitors, notifies of important events (the four events of interest listed previously), and finally updates the changes found in StreamList.xml against the internal data representation. Another important role of the <i>SiteState</i> object is to provide services to the <i>ReportMgr</i> through the <i>SiteState.getUpdateBuf()</i> method, and to the individual <i>StreamWatch</i> objects through the <i>SiteState.doneWithStatus()</i> method. </p>



<h3>Communicating with the Streaming Server </h3>


<p><i>StreamWatch</i> is an abstract class that contains some implementation details, but as an abstract class, requires specific streaming implementations to be derived from it. Derived classes are responsible for defining the algorithm to probe a stream's health. New <i>StreamWatch</i> objects are instantiated for each connection by the <i>StreamWatchFactory</i> (see the Factory pattern from <i>Design Patterns</i>, by Erich Gamma et al., Addison-Wesley, 1995). The two implemented stream types are <i>kTYPE_STREAM_VIDEO</i> (RTSP protocol), and <i>kTYPE_STREAM_IMAGE</i> (HTTP streaming images). This design allows future derived implementations to add support for additional streaming protocols (why not multicasting, for instance, once ISPs decide to update all their router's support for this protocol). Implementation requires coding the new <i>StreamWatch</i> object and adding a new identifier (stream typemaybe <i>kTYPE_STREAM_MULTI</i>, for example) that is recognized by the <i>StreamWatchFactory</i> object. <i>StreamWatch</i> implementations probe the state of the socket and report back on three pieces of information: server response, status state of the stream, and auxiliary response data. The status state reported back is an <i>int</i> that signifies whether the stream is ultimately functioning or not; that is, it's GOOD, BAD, or UNDEFINED. The auxiliary data is an <i>ArrayList</i> that contains specific response information from the server, as captured by the specific <i>StreamWatch</i> implementations. This could include streaming bandwidth, packet size, and so on, and is ultimately handed over to the <i>ReportMgr</i> to do with as it sees fit. </p>


<p>Within <i>StreamWatch</i>, the server response is more interesting: Depending on the protocol being used, the server response can be informational, warn of potential problems, or provide insight into the reason for the stream failure. In the cases of RTSP and HTTP only 2xx server codes are considered successful responses. A <i>StreamWatch</i> object continuously monitors the state of the stream with a predetermined delay between each check. I didn't want to continuously load or waste precious unicast streams from the server. Therefore, when a server response has been received (or an exception thrown), the <i>StreamWatch</i> object is then responsible for reporting back to the parent object with the results via the <i>SiteState.doneWithStatus()</i> (<A NAME="rl2"></a><A HREF="#l2">Listing Two</A>) method, and the probing socket is closed. It is important for the implementation of the <i>StreamWatch</i> object to complete its status check in a timely manner. The responsiveness of the <i>StreamWatch</i> object determines the responsiveness of the system and the timely delivery of important results. To aid performance, the <i>StreamWatch</i> objects are preserved between testing cycles and referenced from the <i>StreamData</i> object. <i>StreamWatch</i> objects are threaded, mainly because I don't want a delay in one socket response to block reporting by other <i>StreamWatch</i> objects. With the current load on the staging server, 50 <i>StreamWatch</i> objects would be acceptable, but if this number increased in the future &#151; say 200 or more &#151; then I'll implement a <i>StreamWatch</i> pool within the <i>StreamWatchFactory</i> object to help reduce memory and performance requirements. </p>



<h3>Dynamic Site Configuration via XML</h3>


<p>While the video streams on this web site are under constant surveillance, the site undergoes changes on a daily basis. This means that video streams will be added, modified, and deleted. StreamHealth should be able to read the StreamList.xml stream configuration file, update its own internal representation, and most importantly, not fail on error. The stream configuration file had to be designed to reduce the risk of a misedited file causing the StreamHealth service to crash while being parsed. Of primary concern is a catastrophic failure in StreamHealth such that no notifications are sent. A good choice in satisfying the desire for robust parsing and providing a relatively easy file structure to edit by hand is to use XML.</p>


<p>Each stream is represented by the following node structure:</p>

<blockquote><p>
&lt;Stream Type="RTSP_VIDEO"&gt;</p>

<p>
    &lt;Location Path="super/video.rm"&gt;&lt;/Location&gt;</p>

<p>    &lt;Server IP="127.0.0.1" Port="8080"&gt;&lt;/Server&gt;</p>

<p>
&lt;/Stream&gt;</p>

</blockquote>

<p>For StreamHealth, two types of errors can occur when parsing an XML file: The node for a stream entry can fail and the entry for that stream will be incomplete; and the parsing of the file can fail. </p>

<p>A parsing error that occurs at a <i>&lt;Stream&gt;, &lt;Server&gt;</i>, or <i>&lt;Location&gt;</i> node will only affect a single entry, and in this case will be identified to the <i>ReportMgr</i> as an undefined stream. A more general file parsing failure will prevent any <i>&lt;Stream&gt;</i> nodes from being read. This is more difficult to trap as the parser may or may not throw an exception during a failed parsing. In general, a parsing error will either generate a zero length <i>mStreamVector</i> in <i>SiteState</i> or throw any one of six exceptions listed in <i>StreamFile.readConfigFile()</i>. In either case, <i>StreamFile.readConfigFile()</i> throws a <i>RunTimeException</i> that is caught in the main <i>SiteState.run()</i> routine. This failure is reported to the <i>ReportMgr</i> as an event. There are occasions when a zero length stream list is intentional, such as the process of removing all streams from the site temporarily. This error can be suppressed by the <i>mNotifyOfNoStreams</i> flag in the configuration file (important if this condition is expected). Exceptions thrown and caught during parsing are always treated as errors and are reported as the <i>kSTATUS_NO_STREAMS</i> event, while a zero stream file can be ignored.</p>

<p>The actual reading of the XML file is performed by recursive calls to the <i>StreamFile.traverse()</i> method through the nested node structure of the file. <i>StreamFile.traverse()</i> is called when encountering a child node(s). When the node name or attribute value matches strings in the <i>StreamFile.traverse()</i> method, this information is stuffed into a <i>StreamData</i> object. A <i>StreamData</i> object is created upon encountering a <i>&lt;Stream&gt;</i> node. </p>

<p>The streams listed in StreamList.xml can be updated at anytime; therefore, on each clock pass (via <i>SiteState.run()</i>). <i>SiteState</i> must initially check the file for its stream listing. Three things can occur to a listing on each pass:</p>


<ul>
  <li>A stream is removed as it is taken out of service or is no longer accessible via the web site.
  <li>A stream is added as a new stream to monitor.

  <li>A stream is modified or its location is changed.


</ul>

<p>Removed streams are deleted from the internal representation in <i>SiteState</i> at the end of the clock pass (after the <i>ReportMgr</i> receives a report that a stream has been removed from service). Newly added streams are allocated and initialized. Finally, modified streams are treated as a combination of the two previous StreamList.xml file modifications and are treated as new entries by resolving on the <i>Path</i> attribute on the <i>&lt;Location&gt;</i> tag, otherwise IP and Port are updated.</p>



<h3>Conclusion</h3>


<p>As the site hopefully increases in popularity, I expect to be asked to add new reporting techniques, monitor new stream types, and support ever-increasing numbers of concurrent streams. With all of these, I would expect to update the report mechanism to support dynamically added reporting modules and update the <i>StreamWatchFactory</i> to support pooling of <i>StreamWatch</i> objects.</p>


<p>StreamHealth lets webmasters sleep a bit easier knowing that this service is keeping an eye on those important video streams. The best aspect of this design is that with the expected success (and consequently growth) of the site, the design can be augmented to allow for scalability, additional reporting techniques, and for new stream types.</p>



<p><b>DDJ</b></p>
<H4><A NAME="l1"></a>Listing One</H4>


<pre>public void run() {
	StatusAList aList;

	System.out.println(new Date().toString() + " ReportMgr::run() running");
	
	try {
		while(true) {
			while ((aList = (StatusAList)mSiteState.getUpdateBuf()) != null) {
				switch (aList.mStatus) {
					case Konstants.kSTATUS_HAS_STARTED:
						startUpdate((ArrayList)aList);
						break;
					case Konstants.kSTATUS_IS_UPDATED: 
						update((ArrayList)aList);
						break;
					case Konstants.kSTATUS_IS_COMPLETE:
						finishUpdate((ArrayList)aList);
						break;
					case Konstants.kSTATUS_NO_STREAMS:
						reportGeneralError(); 
						break;
					default:
						System.out.println(new Date().toString() + 
							" Bad Status flag in  ReportMgr:run() "); } }
			synchronized(mSiteState) {
				mSiteState.wait(); } } }  //wait for an event to be posted.
	catch (InterruptedException ie) {
		System.out.println(new Date().toString() + 
			" InterruptedException thrown in  ReportMgr:run() " + ie);  } 
	catch (ClassCastException cce) { 
		System.out.println(new Date().toString() + 
			" ClassCastException thrown in  ReportMgr:run() " + cce);  } 
} 
}
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2"></a>Listing Two</H4>


<pre>public boolean doneWithStatus(Object sdobj, int status, 
				String resp, ArrayList auxData) {
	boolean bChanged = false;
	StatusAList updateAList;
	StreamData sd;
	
	sd = (StreamData)sdobj;
	sd.mTimeOfLastTest = new Date().toString();
		
	//find stream, update then notify if status|server response has changed
	if (mStreamVector.contains(sd)) {
		if (sd.mOpStatus != status || sd.mServerResponse != resp) {
			sd.mState = Konstants.kSTATE_UPDATED; 
			bChanged = true; }
		else {
			sd.mState = Konstants.kSTATE_UNCHANGED; }

		//copy monitored data into StreamData object
		sd.mOpStatus = status;
		sd.mServerResponse = resp;
		sd.mAddConnInfo = auxData;

		//post update if status has changed
		if (bChanged == true) {		
			updateAList = new StatusAList();
			updateAList.add(new StreamData(sd));
			updateAList.mStatus = Konstants.kSTATUS_IS_UPDATED;
			postUpdate(updateAList); }
		
		return true; }		//this stream is still actively monitored
	else {
		return false;}		//didn't find match, will be deleted
}
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3"></a>Listing Three</H4>


<pre>public void run()
{
/*
	Checks on an RTSP streaming server for the existance of the DESCRIBE method, 
	then probes for the existance of the live stream.
*/	
	Socket sock = null;
	BufferedReader inStream = null;
	PrintStream outStream = null;
	StringBuffer response = null;
	int status = Konstants.kOPSTATUS_STREAM_UNDEFINED;
	ArrayList addStatus = null;
		
	//this indicates a faulty streamlist.xml entry		
	if (mURL == "") {
		return; }
			
	while (true) { //monitor stream until doneWithStatus() returns false
		System.out.println(new Date().toString() + 
					" starting to probe video stream: " + mURL);
		response = new StringBuffer();
			
		try { 
			sock = new Socket(mIP, mPort);
			System.out.println(new Date().toString() + 
					" socket opened to server: " + mURL);
			inStream = new BufferedReader(new 
					InputStreamReader(sock.getInputStream()));
			outStream = new PrintStream(sock.getOutputStream()); 

			//now let's start communicating with the RTSP server		
			if (supportsDescribe(outStream, inStream)) {	
				if (isGood(outStream, inStream, response)) {						
					status = Konstants.kOPSTATUS_STREAM_OK;
					System.out.println(new Date().toString() + 
							" Stream is good: " + mURL);

					//let's see if we can capture some additional details
					addStatus = new ArrayList();						
					getAuxData(outStream, inStream, addStatus); }	
		
				else {	//stream not available from RTSP server
					status = Konstants.kOPSTATUS_STREAM_BAD;
					addStatus = null;
					System.out.println(new Date().toString() + 
							" Stream is BAD: " + mURL); } } }
		catch (IOException ioe) {
			status = Konstants.kOPSTATUS_STREAM_BAD;
			System.out.println(new Date().toString() + 
				" IO Exception thrown in RealVideoWatch.run() " + ioe); }

		try {
			if (sock != null) {
				sock.close(); 
				inStream.close();
				outStream.close(); }
			if (!mSiteState.doneWithStatus(mUniqueID, status, 
							response.toString(), addStatus) ) { 
				return; } //I've been removed from monitoring

			sleep(Konstants.mDelayBetweenCycles.intValue()); }
		catch (InterruptedException ie) {
			System.out.println(new Date().toString() + 
				" Interrupted Exception thrown in RealVideoWatch.run() " + ie); }
		catch (IOException ioe) {
			System.out.println(new Date().toString() + 
				" IO Exception thrown in RealVideoWatch.run() " + ioe); } }
}


private boolean supportsDescribe(PrintStream ps, BufferedReader br) 
				throws IOException {
	String s;
	boolean bFlg = false;

	//let's see what the RTSP server supports
	ps.println("OPTIONS * RTSP/1.0");
	ps.println("");

	while (!(s = br.readLine()).equals("")) {
		if (s.indexOf("DESCRIBE") &gt;= 0) {
			//we do support DESCRIBE
			bFlg = true; 
			break; } }

	while (!(br.readLine()).equals("")) { } 
	
			
	return bFlg;
}

private boolean isGood(PrintStream ps, BufferedReader br, StringBuffer response) 
				   throws IOException {
	String s, testStr;
	boolean bFlg = false;
	int statusLength = 12;
	
	//probe the server with DESCRIBE
	ps.println("DESCRIBE " + mURL + " RTSP/1.0");
	ps.println(""); 

	//now let's the parse the output stream for the results of the signal
	if ((s = br.readLine()) != null) {
		response.append(s); //let's save this response for reporting
		testStr = s.substring(0, statusLength);
		if (testStr.equals("RTSP/1.0 200") ||		//OK
			testStr.equals("RTSP/1.0 201") || 	//CREATED
			testStr.equals("RTSP/1.0 250")) {	//LOW ON STORAGE SPACE
			bFlg = true; } }
	
	while (!(br.readLine()).equals("")) { }

	return bFlg;
}</pre>
</body>
</html>
