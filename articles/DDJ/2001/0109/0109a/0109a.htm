<html>
<head>
<title>Sep01: DevelopingScalable Distributed Applications</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Developing Scalable Distributed Applications</h1>
<p><i>Dr. Dobb's Journal</i> September 2001</p>
<h2>A generic model implemented in Java</h2>

<h3>By Mario A. Torres</h3>

<I>
Mario is a computer engineer with the U.S. Army Research Lab at White Sands Missile Range, New Mexico. He can be contacted at <A href="mailto:atorres@arl.mil">atorres@arl.mil.</A></I>

<hr>

<p>The pervasiveness of the Internet and area networks has pushed computing from a desktop environment into a distributed one. Resources employed by applications are often distributed across a network of computers. For example, a spreadsheet application running on a desktop workstation may have been launched from a disk drive that is stored on a remote application server. The data used by the spreadsheet application may be loaded from a database server hosted on a different computer. Furthermore, the processed data could in turn be published on a web server that is hosted on yet another computer. </p>
<p>It is not difficult to imagine scenarios that employ distributed computing technologies, mainly because distributed computing has become so commonplace that it is hardly noticed. For software engineers, however, this is exactly the challenge they must constantly conquer. Software must be designed with the capability of operating in a dynamic distributed-computing environment.  </p>
<DDJADVERTISEMENT INLINE>

<p>Some common motivations for designing distributed applications are:  </p>

<ul>
  <li>Parallel computing.
  <li>Employment of data sets from multiple sources (database access).

  <li>Redundant processing agents for fault-tolerant systems.

  <li>Collaborative applications. 

</ul>


<p>Any one of these motivations is sufficient reason for developing software applications as distributed agents. These types of applications require that data distribution be effective, adaptive, efficient, and flexible to evolving environments and requirements.</p>

<p>In this article, I present a generic model designed to serve as a blueprint for development of scalable distributed-computing applications. I included Java source code that you can use to assemble simple or complex distributed-computing applications.</p>



<h3>Advantages of Developing with Java</h3>


<p>The most promising advantage of developing with Java is its platform independence. This yields the potential for hosting a developed application across various platforms. Java's employment of the object-oriented paradigm is another advantage. An object-oriented application uses class inheritance that goes a long way in making the distributed model scalable. However, a more important advantage of Java technology is its abstract interface facility. A Java interface lets you simply declare variables and methods (subroutines) without actually implementing them. The interface is useful because other classes can implement the interface and define exactly how those methods will operate. This means that an interface can be declared once and defined many times and in different ways. Later, it will become more evident how Java's interface facility is the primary key to making this model both scalable and distributed. Java does have other built-in advantages such as multilevel networking, multithreading, convenient error handling, and security. </p>




<h3>A Generic  Distributed-Computing Model</h3>


<p>There are a few basic requirements that a distributed application must be able to satisfy:</p>


<p></p>

<ul>
  <li>It must effectively employ data distribution. Simply, it must be able to successfully load and store data from any other computing agent in the network.  
  <li>It must be adaptive and flexible to various communication protocols. Communications between clients and servers (or between computing agents) can exist in many forms. They can be as basic as direct socket connections or use more sophisticated protocols such as Java's Remote Method Invocation (RMI) or Common Object Request Broker Adapter (CORBA). A scalable, distributed application must be able to operate through more than one communication protocol.

  <li>It should be multithreading/multitasking capable. Multithreading is especially important with distributed applications. It provides an efficient multiprocessing mechanism for the management and distribution of its computing tasks.

  <li>It must be secure. Data transmitted between computing agents may be sensitive. Therefore, a distributed application must be able to secure and verify its transactions. Security of transmitted data is crucial for mission- or business-critical computing.

</ul>

<p> </p>

<p><A NAME="rf1"></a><A HREF="0109af1.htm">Figure 1</A> illustrates the basis for the distributed-computing model I present here. This figure depicts a simple client-server application that utilizes information stored in a database. The design of this model lets a client application easily execute in different modes. It may be executed directly on the database host computer, or it may operate remotely in another computer on the network and utilize different communication protocols. However, as far as the client application is concerned, the data always originates from the same source, the interface manager (<i>IntfMgr</i>: see <A NAME="rl1"></a><A HREF="#l1">Listing One</A>). Since an interface only declares methods, the actual implementation of those methods can be defined differently to accommodate the necessary protocols employed for data transfer.  </p>

<p>In <A NAME="rf1"></a><A HREF="0109af1.htm">Figure 1</A>, the majority of the work is performed in a local manager class labeled <i>LocalMgr </i>(<A NAME="rl2"></a><A HREF="#l2">Listing Two</A>). The local manager essentially implements the interface manager (<i>IntfMgr</i>) and explicitly defines the methods that extract the information from the database on the host computer. </p>

<p>The keystones for this model are the interface manager (<i>IntfMgr</i>) and its implementation in the <i>LocalMgr</i> class. All other implementations of the <i>IntfMgr</i> (<i>SocketMgr</i>, <i>RmiMgr</i>, <i>CorbaMgr</i>) are simply bindings that connect the local manager with a client application through different means. To better illustrate how this model functions, a simplified step-by-step sample implementation will be presented. For the purpose of brevity, only the RMI manager will be implemented and bound to the local manager. <A NAME="rf2"></a><A HREF="0109af2.htm">Figure 2</A> shows the simplified model.</p>



<h3>Foundations of the Generic Distributed Application</h3>


<p>The first step in the development process is to generate the interface construct; see <A NAME="rl1"></a><A HREF="#l1">Listing One</A>. Basically, the interface is just a source file that contains only the declarations of methods that will be implemented, or defined, in other classes. For this generic example, there are only two simple methods declared in the interface. The first method, <i>getHostOS</i>, is declared to return a <i>String</i> object containing the operating-system name of the hosting computer. The second method declared <i>getHostTime</i>, returns a <i>String</i> containing the hosting system date and time.</p>


<p>The <i>LocalMgr</i> class (<A NAME="rl2"></a><A HREF="#l2">Listing Two</A>) implements the interface <i>IntfMgr</i> and defines the <i>getHostOS</i> and <i>getHostTime</i> methods. This class is where the actual work gets done. Of course, the <i>LocalMgr</i> class could have much more sophisticated methods. For instance, the methods could query a database or sample data from sensors, and return more complex objects than a <i>String</i> object.</p>



<h3>Client Application</h3>


<p>Using the interface is simple for a client application. <A NAME="rl3"></a><A HREF="#l3">Listing Three</A> is source code for the client (DCEx.java) that will use the interface manager described earlier. Simply, a reference is declared for the interface <i>IntfMgr</i> and labeled <i>mgr</i>. The declared interface manager (<i>mgr</i>) is then defined by setting it equal to its new implementation of <i>LocalMgr</i>. At this time, DCEx is ready to employ the methods declared in the interface as implemented (defined) by <i>LocalMgr</i>. The DCEx program only calls the <i>mgr.getHost</i> method and prints out the returned string containing the name of the operating system.</p>




<h3>Extending the Client Into a Distributed Application</h3>


<p>After building the foundation (the interface), the other building blocks may be constructed on top to create a more useful distributed application. In the example being presented, the client application is extended to a distributed application by using Java RMI. </p>


<p>Through RMI, Java provides a powerful mechanism to distribute objects across a network. Essentially, RMI is "a set of classes and interfaces that enables one Java object to call the public methods of another Java object running on a different virtual machine" (see <i>Beginning Java</i>, by I. Horton, Wrox Press, 1997). In practice, RMI lets you design distributed applications just as if they were nondistributed applications. A step further is taken for this example, and RMI is simply used as a scaling step to reach the previously implemented <i>LocalMgr</i> methods.</p>

<p>To accomplish the RMI extension, first create an RMI manager (<i>RmiMgr</i>; 
  <A NAME="rl4"></a><A HREF="#l4">Listing Four</A>) that implements the original 
  interface manager (<i>IntfMgr</i>). <A NAME="rl4"></a><A HREF="#l4">Listing 
  Four</A> shows this implementation. Notice that <i>RmiMgr</i> delegates the 
  final definition of the implemented methods (<i>getHostOS</i> and <i>getHostTime</i>) 
  to yet another interface, the <i>RmiIntf</i>. The <i>RmiIntf</i> manager is 
  in turn implemented remotely through the <i>RmiImpl </i>object that is registered 
  in a remote host's RMI registry; see <A NAME="rl5"></a><A HREF="#l5">Listings 
  Five</A> and<a name="rl6"></a> <a href="#l6">Six</a>. Then the implementation 
  of the RMI interface (<i>RmiImpl</i>) once again delegates the actual definition 
  of the declared methods to the <i>LocalMgr</i> implementation. Here lies the 
  strength of scaling an application by employing interfaces and reusing previously 
  defined classes and methods. Consequently, the RMI interface and implementation 
  simply become transports for a previously developed capability.</p>

<p>Only a simple modification is needed in the DCEx client to make it executable from a remote computer. <A NAME="rl7"></a><A HREF="#l7">Listing Seven</A> shows the modified DCEx client utilizing the manager <i>RmiMgr</i>. <i>LocalMgr </i>is commented out. Also, the remote host name and port number must be provided. These must match the host name and port number where the RMI server (<i>RmiImpl</i> object) is initialized.</p>

<p>The implementation of the RMI manager (<i>RmiImpl</i>) can be automatically registered in the RMI registry of a host computer through a simple RMI server program; as in <A NAME="rl8"></a><A HREF="#l8">Listing Eight</A>. The example program <i>MyRmiServerReg</i> creates a registry using a specified port number (1099 default RMI port). An instance of the <i>RmiImpl </i>object is created and bound to the created registry. The DCEx client can reach the <i>RmiImpl</i> object by providing the <i>RmiMgr</i> with the remote host name and a port number. In <A NAME="rl4"></a><A HREF="#l4">Listing Four</A>, the <i>RmiMgr</i> constructor explicitly looks for the <i>RmiImpl </i>object at a given host name and port number.</p>

<p>Explanations of other RMI intricacies are out of scope for this article. However, all the necessary source-code listings are included here to fully implement the RMI server. You need only to deal with proper compilation of source code. Java source code is compiled using the Java compiler javac: javac DCEx.java, javac RmiImpl.java, and so on. Then the RMI compiler (rmic) must be used to produce a Skeleton and Stub to serve as the transport between the client (DCEx) and remote object (<i>RmiImpl</i>). This is accomplished by executing rmic <i>RmiImpl</i>, where <i>RmiImpl</i> refers to its previously compiled class (RmiImpl.class, for example). </p>

<p>To keep this example simple, I've omitted a security manager. However, Java does provide security models (<i>RMISecurityManager</i>, for example) that can be easily added to the DCEx client and to the RMI server. </p>



<h3>Conclusion</h3>


<p>In this article, I've presented a generic model for building scalable distributed-computing applications that can easily adapt to support various communication protocols. The strength of this basic model lies in the effective use of Java's interface facility. Basically, this model illustrates the interface's ability to provide multiple definitions for a declared base set of methods (polymorphism). Through the interface facility, an application can scale several levels deep and be used to developed sophisticated applications. The source code presented here also serves as a clear illustration of how to deploy a distributed application. </p>


<p>Employing this type of interface model provides many conveniences for developers and users. Interfaces can be viewed as isolators that can prevent extensive modifications to a software application when it changes computing environments. Ultimately, the principal beneficiary of this interface model will be the client software application. By employing this model, client applications will be minimally impacted when there are changes to underlying data infrastructure or to data delivery mechanisms. </p>


<p><b>DDJ</b></p>
<H4><A NAME="l1"></a>Listing One</H4>


<pre>public interface IntfMgr
{
    public String getHostOS() throws Exception;
    public String getHostTime() throws Exception;
}
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2"></a>Listing Two</H4>


<pre>import java.util.Date;
public class LocalMgr implements IntfMgr
{
    protected String strMgrType;
    LocalMgr() { strMgrType = "Local"; }
    
    public String getHostOS() throws Exception {
    return System.getProperty("os.name");
    }
    public String getHostTime () throws Exception {
    Date d = new Date();
    Return d.toString();
    }
}
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3"></a>Listing Three</H4>


<pre>// Client for Distributed Computing Example
import java.util.*;

public class  DCEx
{
    DCEx() { }
  public static void main (String argv[ ])
     throws Exception
  {  // Let the interface be defined by local manager
    IntfMgr mgr = new LocalMgr();
  // Execute a manager method
    String str = mgr.getHostOS();
    System.out.println("Returned Host name: "+str);
  }
}
</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>
<H4><A NAME="l4"></a>Listing Four</H4>


<pre>// RMI Manager
import java.rmi.*;
import java.rmi.registry.*;

public class RmiMgr implements IntfMgr
{
private RmiIntf mgrRmi;
// Constructor
public RmiMgr(String host, int port) 
    throws Exception {
     String strURL = "rmi://"+host+":"+ port+"/RmiImpl";
     mgrRmi = (RmiIntf)Naming.lookup(strURL);
  }
 public String getHostOS() 
   throws Exception {
     return mgrRmi.getHostOS();
 }
 public String getHostTime() 
    throws Exception {
     return mgrRmi.getHostTime();
  }
}
</pre>
<P>
<A HREF="#rl4">Back to Article</A>
</P>
<H4><A NAME="l5"></a>Listing Five </H4>


<pre>// Interface RmiIntf 
import java.rmi.*;

public interface RmiIntf extends Remote 
{ 
  public String getHostOS()
 throws Exception,  RemoteException;
  public String getHostTime() 
throws Exception, RemoteException;
}
</pre>
<P>
<A HREF="#rl5">Back to Article</A>
</P>
<H4><A NAME="l6"></a>Listing Six</H4>


<pre>// Implementation of the interface RmiIntf 
import java.rmi.*;
import java.util.*;

public class  RmiImpl
   extends java.rmi.server.UnicastRemoteObject
   implements RmiIntf
{
  IntfMgr mgr;

  public RmiImpl() 
    throws Exception, RemoteException {
      mgr = new LocalMgr();
  }
  public String getHostOS()
    throws Exception, RemoteException { 
      return mgr.getHostOS(); 
  }
  
  public String getHostTime()
    throws Exception, RemoteException { 

    return mgr.getHostTime();
  }
}
</pre>
<P>
<A HREF="#rl6">Back to Article</A>
</P>
<H4><A NAME="l7"></a>Listing Seven</H4>


<pre>// Client for Distributed Computing Example
import java.util.*;

public class  DCEx
{
    DCEx() { }
  public static void main ()
  { // Interface is not defined by LocalMgr anymore 
    // IntfMgr mgr = new LocalMgr();
  // manager is now defined by  RMI manager
  IntfMgr mgr = new RmiMgr("remoteHostName",  1099 );
  // Execute a manager method
    String str = mgr.getHostOS();
    System.out.println("Returned Host name: "+str);
  }
}
</pre>
<P>
<A HREF="#rl7">Back to Article</A>
</P>
<H4><A NAME="l8"></a>Listing Eight</H4>


<pre>import java.rmi.*;
import java.rmi.registry.*;

public class MyRmiServerReg
{
  public static void main(String args[])
  {
    try {
      int port=1099;
      Registry reg =
                    LocateRegistry.createRegistry(port);
      RmiImpl rmiImpl = new RmiImpl();
      Naming.rebind("//:"+port+ "/RmiImpl",  rmiImpl);
      System.out.println(
          "*** MyRmiServerReg: rmiregistry is ready "+
          " to execute remote method invocations of " +
          " RmiImpl on port# "+port);
    }
    catch (Exception e) {
      System.out.println("Rmi Server Error:" +  e.getMessage());
    }
  }
}

</pre>
<P>
<A HREF="#rl8">Back to Article</A>
</P>


</body>
</html>
