<html><head><title>May01: Making a Statement with JDBC</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h2>Making a Statement with JDBC</h2><p>JDBC provides three methods for executing SQL statements: normal statements, prepared statements, and callable statements. The first method is to obtain a <i>Statement</i> interface handle by calling <i>dbConnection.createStatement().</i> Then a <i>ResultSet</i> can be obtained using <i>ResultSet resultSet = statement.executeQuery(''select </i>*<i> from member");</i>. The <i>executeQuery() </i>method is used for, big surprise, queries; while the <i>executeUpdate()</i> method is used to execute <i>insert</i>, <i>update</i>, and <i>delete</i> statements. The Java documentation calls this "static SQL" due to the hardcoded nature of the SQL statement. Others often refer to this as dynamic SQL because the query must be dynamically created by the database instead of being precompiled. </p><p>Precompiled statements are known as prepared statements in JDBC. They are more efficient than regular statements if you are executing similar statements multiple times. Prepared statements can take up to 70 percent of the time required by raw queries (see "JDBC and Database Connection Pooling" in Marty Hall's book <i>Core Servlets and Java Server Pages</i>). When a <i>PreparedStatement</i> is created, the SQL statement is sent to the database for precompilation. The statement declaration includes query parameters denoted by the question mark symbol. Methods such as <i>setString</i> are provided to set the parameters like this:</p><DDJADVERTISEMENT INLINE><blockquote><p>PreparedStatement statement =</p><p>  dbConnection.prepareStatement("select * from member </p><p>  where firstname = ?");</p><p>Statement.setString( 1, "John");</p></blockquote><p>The same parameters will remain in force for repeated use of a statement until <i>clearParameters()</i> is called. Currently, the precompiled form of a prepared statement is cached only as long as the <i>PreparedStatement</i> instance is alive, so the performance benefits are only obtained when reusing the same <i>PreparedStatement</i> instance, setting different parameters on each invocation. However, the current proposal for JDBC 3.0 specifies pooling prepared statements transparently. No syntax changes would be necessary, according to the proposal, in order to have prepared statements seamlessly cached across instances of <i>PreparedStatement</i> lifetimes.</p><p>The other type of statement available in JDBC is a callable statement. It's used to execute SQL stored procedures and allows them to be called in the same way for all RDBMSs. Stored procedures can have a variable number of parameters used for input (IN parameters), output (OUT parameters), or both (INOUT parameters). Like prepared statements, callable statements also use a question mark as a placeholder for a parameter. The <i>CallableStatement </i>interface extends <i>PreparedStatement</i>, which extends the <i>Statement</i> interface. <i>CallableStatement </i>has methods dealing with OUT and INOUT parameters. Methods inherited from <i>PreparedStatement</i> are used for setting IN parameters. Procedures that return multiple result sets are handled with methods inherited from <i>Statement</i>. For procedures with OUT or INOUT parameters, the type of the parameter must be registered before executing the statement. A basic stored procedure invocation will resemble the following:</p><blockquote><p>CallableStatement statement = dbCon-				nection.prepareCall</p><p> ("{? = call getDepartmentID(?)}");</p><p>statement.registerOutParameter(1, 			           java.sql.Types.INTEGER);</p><p>statement.setInt(2, employeeID);</p><p>ResultSet resultSet = statement.execute-				Query();</p><p>int departmentID = statement.getInt(1);</p></blockquote><p> &#151; T.S.</p><a href="0105n.htm#rs1">Back to Article</a></body></html>