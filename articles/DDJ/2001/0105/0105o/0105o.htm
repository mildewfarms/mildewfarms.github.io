<html>
<head>
<title>May01: Algorithm Alley</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Computational Geometry: Finding the Convex Hull</h1>
<p><i>Dr. Dobb's Journal</i> May 2001</p>

<h3>By Thomas Gettys</h3>

<I>
Thomas is a senior software developer for PSC Inc. He can be contacted at tpgettys@ teleport.com.</I>

<hr>

<a name="rs1"></a><a href="0105os1.htm">Finding the Area of a Triangle</a><hr>

<p>Computational geometry, a branch of computer science christened by Michael Shamos in his Ph.D thesis in 1978, is the study of algorithms for solving geometric problems. It has gone from a collection of scattered results in the 1970s to a thriving, mature discipline today.</p>
<p>The success of computational geometry can be attributed to the fundamental role that geometric algorithms play in many application domains, coupled with the beauty and far-reaching nature of the results that have been obtained so far.</p>
<DDJADVERTISEMENT INLINE>

<p>An essential topic in computational geometry is convex hulls, which have found use in many diverse applications: statistics, soil sciences, medical imaging, character recognition, parts inspection, and robotics systems, to name a few. Additionally, finding the convex hull is the first step in the solution to a number of other problems in computational geometry.</p>



<h3>The Convex Hull</h3>


<p>Convexity may be an abstract mathematical concept, but it is fairly easy to recognize if an object has it or not. A shape is convex if the line connecting any two points in the shape is itself completely contained in the shape. Intuitively, we realize that convex shapes are basically ball-like; they have no indentations or holes.</p>


<p>The convex hull of a set of points is the smallest convex shape that contains all the points. Again, intuitively, we realize that the convex hull must be a polygon (a shape with straight edges), and that the vertices of the polygon must be points in the set.</p>

<p>In fact, you can easily visualize the convex hull of a set of points by doing the following thought experiment: Let each point be represented by a nail, stretch a rubber band around all the nails, and then let go. The shape of the rubber band is the convex hull of the original set of points.</p>



<h3>Cross Products Defined</h3>


<p>The Swiss-army knife of computational geometry is arguably the cross product, a computation borrowed from the study of vectors. Vectors are fundamental to the disciplines of physics, and you will have encountered them in linear algebra and calculus courses. In this article, I will use this versatile tool in two different ways as well as provide examples of its many uses.</p>


<p>A vector has direction as well as magnitude (length). For example, consider the two vectors <i>P</i><sub>1</sub> and <i>P</i><sub>2</sub> in <A NAME="rf1"></a><A HREF="0105of1.htm">Figure 1</A>. <i>P</i><sub>1</sub> goes from the origin to the point (<i>x</i><sub>1</sub>,<i>y</i><sub>1</sub>) and <i>P</i><sub>2</sub> goes from the origin to the point (<i>x</i><sub>2</sub>,<i>y</i><sub>2</sub>). The sum <i>P</i><sub>1</sub>+<i>P</i><sub>2</sub>=<i>P</i><sub>3</sub> is another vector that goes from the origin to the point (<i>x</i><sub>1</sub>+<i>x</i><sub>2</sub>,<i>y</i><sub>1</sub>+<i>y</i><sub>2</sub>).</p>

<p>The cross product <i>P</i><sub>1X<i>P</i></sub><sub>2</sub> can then be interpreted as the signed area of the parallelogram formed by the origin, <i>P</i><sub>1</sub>, <i>P</i><sub>2</sub>, and <i>P</i><sub>3</sub> (for more details, see the accompanying text box entitled "Finding the Area of a Triangle"). The value of the cross product is given by the formula in <A NAME="re1"></a><A HREF="0105oe1.htm">Example 1</A>(a). Finally, if the point common to <i>P</i><sub>1</sub> and <i>P</i><sub>2</sub> is <i>P</i><sub>0</sub>(<i>x</i><sub>0</sub>,<i>y</i><sub>0</sub>) instead of the origin, you simply translate the origin to <i>P</i><sub>0</sub>. In this translation, the formula for the cross product becomes as in <A NAME="re1"></a><A HREF="0105oe1.htm">Example 1</A>(b).</p>



<h3>Cross Products Applied</h3>


<p>How can you use the cross product to solve problems in computational geometry? Recall that the cross product is the area of a parallelogram, which is twice the area of the triangle formed by the three points <i>P</i><sub>0</sub>, <i>P</i><sub>1</sub>, and <i>P</i><sub>2</sub>. Thus, with just five subtracts and two multiplies you can compute the area of any triangle given the coordinates of its three vertices.</p>


<p>An extremely useful observation is that <i>P</i><sub>1</sub>X<i>P</i><sub>2</sub> will be positive whenever <i>P</i><sub>1</sub> is clockwise from <i>P</i><sub>2</sub>, and negative whenever <i>P</i><sub>1</sub> is counterclockwise from <i>P</i><sub>2</sub>. (Since the cross product is an area, if the three points <i>P</i><sub>0</sub>, <i>P</i><sub>1</sub>, and <i>P</i><sub>2</sub> are collinear you can anticipate that the cross product will be 0.)</p>

<p>Therefore, using just the sign of the cross product, you can tell if the point <i>P</i><sub>2</sub> is on the left or right side of the line going from <i>P</i><sub>0</sub> to <i>P</i><sub>1</sub>. </p>

<p>As an example, using just this orientation information provided by the cross product, you can easily determine if a point <i>P</i>(<i>x,y</i>) is inside or outside of the triangle formed by the three points <i>P</i><sub>0</sub>, <i>P</i><sub>1</sub>, and <i>P</i><sub>2</sub>.</p>

<p>Here's how: As you go clockwise around the triangle, if the point <i>P</i> is inside, it will always be to the right of the edge you are on. If it is not inside, the point <i>P</i> will be on the left of some edge but to the right of another.</p>

<p>Thus, the point <i>P</i> is inside the triangle only if the three cross products (<i>P</i><sub>1</sub>-<i>P</i><sub>0</sub>)X (<i>P</i>-<i>P</i><sub>0</sub>), (<i>P</i><sub>2</sub>-<i>P</i><sub>1</sub>)X(<i>P</i>-<i>P</i><sub>1</sub>), and (<i>P</i><sub>0</sub>-<i>P</i><sub>2</sub>)X(<i>P</i>-<i>P</i><sub>2</sub>) all have the same sign. A moment's reflection will convince you that this result is correct regardless of the direction you go around the triangle. (If the point <i>P</i> is on the perimeter of the triangle, one of the cross products will be 0; it is your call as to whether such a point should be classified as inside, outside, or treated in some other special way.)</p>



<h3>Graham's Scan</h3>


<p>Because of its fundamental nature, the problem of finding the convex hull of a set of points has received much attention, and as a result several efficient algorithms now exist. </p>


<p>The problem of sorting <i>N</i> numbers is linear-time transformable to finding the convex hull of <i>N</i> points, and therefore finding the convex hull must require at least <i>O</i>(<i>N log N</i>) time to compute the solution.</p>

<p>Graham's Scan, the algorithm presented here, achieves this lower bound. Additionally, it is known to be optimal in the worst-case sense. Jarvis's March is another popular algorithm that is asymptotically faster than Graham's Scan, but its worst-case performance is <i>O</i>(<i>N</i><sup>2</sup>). For this reason Graham's Scan may be the better choice for a general-purpose convex hull algorithm.</p>

<p>I will first describe the algorithm for Graham's Scan by giving an overview, ignoring any nasty details and special cases that might get in the way. I will then use a small example to expose the heart of the algorithm, and finally the code and essential details will be presented.</p>



<h3>Algorithm Overview</h3>


<p>Graham's Scan begins by locating the lowest point; call it the pivot point. Since none of the other points are below the pivot, sweeping in the counterclockwise direction from 0 to 180 degrees you know you will encounter them all.</p>


<p>As each point is encountered, it is added to a candidate convex hull list. The newest point may reveal that one or more points added earlier cannot be part of the convex hull, and so they are removed from the list. This step is the heart of the algorithm.</p>

<p>Notice that you always turn to the left as you move counterclockwise from one point to the next on the convex hull. Thus, if you ever turn right, the point you turned right from cannot be part of the convex hull; it must be on the inside.</p>

<p>If this happens, remove the offending point from the list, then check to see if you turn left or right to get from the new head of the list to the new point. Repeat this step until the left-turn-only property is restored.</p>

<p>After all points have been visited, the list will contain all the points that lie on the convex hull of the original set and no others.</p>



<h3>Algorithm Example</h3>


<p>To illustrate the Graham's Scan algorithm, consider the set of points in <A NAME="rf3"></a><A HREF="0105of3.htm">Figure 3</A>. The pivot point is labeled <i>P</i><sub>0</sub>, and the other points are labeled in increasing order by the angle they make with <i>P</i><sub>0</sub> and the positive <i>x</i>-axis.</p>


<p>Both <i>P</i><sub>0</sub> and <i>P</i><sub>1</sub> must be on the convex hull, and that <i>P</i><sub>2 </sub>cannot be right of the line from <i>P</i><sub>0</sub> to <i>P</i><sub>1</sub>. This is important: The algorithm begins with two points guaranteed to be on the convex hull and with the left-turn-only property intact.</p>

<p>So, begin with points <i>P</i><sub>0</sub>, <i>P</i><sub>1</sub>, and <i>P</i><sub>2</sub> in the convex hull candidate list, and consider point <i>P</i><sub>3</sub>. Since you turn left from <i>P</i><sub>2</sub> to get to <i>P</i><sub>3</sub> it is added to the list; the same goes for <i>P</i><sub>4</sub>.</p>

<p>However, <i>P</i><sub>5</sub> is on the right side of the line from <i>P</i><sub>3</sub> to <i>P</i><sub>4</sub>, so you now know that <i>P</i><sub>3</sub> cannot be part of the convex hull after all. After removing <i>P</i><sub>4</sub> from the list you again consider <i>P</i><sub>5</sub>. This time <i>P</i><sub>5</sub> is on the left side of the top two points on the list (<i>P</i><sub>2</sub> and <i>P</i><sub>3</sub>), so it is added to the list.</p>

<p>Points <i>P</i><sub>6</sub>, <i>P</i><sub>7</sub>, and <i>P</i><sub>8</sub> all get added to our list, since they do not cause us to violate the left-turn-only rule.</p>

<p>When you get to point <i>P</i><sub>9</sub>, however, you are led to remove <i>P</i><sub>8 </sub>from the list. After doing so, you find that <i>P</i><sub>9</sub> is still to the right of the top two points on the list (<i>P</i><sub>6</sub> and <i>P</i><sub>7</sub>), and so <i>P</i><sub>7</sub> must be removed also. This restores the left-turn-only property to our list, so<i> </i><i>P</i><sub>9</sub> can now be added.</p>

<p>Finally, point <i>P</i><sub>10</sub> is added to the list without incident and you are done. The dashed lines in <A NAME="rf3"></a><A HREF="0105of3.htm">Figure 3</A> show the points that were added to the convex hull candidate list that later had to be deleted.</p>



<h3>Algorithm Details</h3>


<p>Assume you are given as input an array <i>S</i> of <i>N</i> points, and must produce as output the set of points of <i>S</i> that are on the convex hull of <i>S</i> in clockwise order.</p>


<p>With the example fresh in mind, <A NAME="rl1"></a><A HREF="#l1">Listing One</A> presents the Graham Scan algorithm proper. Assume that the pivot point has already been located and placed in <i>S</i>[0], and that the rest of the array has been sorted in order of increasing polar angle.</p>

<p>It turns out to be most convenient to implement the convex hull candidate list as a stack. To begin, you initialize the list by simply pushing the first three points onto the stack. The rest of the points <i>P</i><sub>3</sub> through <i>P</i><i><sub>N</sub></i><sub>-1</sub> are then processed in order within the <i>for</i> loop.</p>

<p>The first two items in the parameter list of the call to the <i>CrossProduct</i> function require explanation. <i>StackTop</i> and <i>Stack2nd</i> are macros defined to reference the point most recently pushed onto the stack and the point pushed before that, respectively; that is, they provide access to the top two points on the stack.</p>

<p>For each new point, if the left-turn-only rule is violated, the <i>while</i> loop removes points from the stack until it is restored, and then the new point is pushed (recall that the cross product provides the necessary orientation information).</p>

<p>The rest of the code is fairly straightforward. <A NAME="rl2"></a><A HREF="#l2">Listing Two</A> shows the point data type and the function that locates the pivot point. If there is more than one point with the smallest <i>y</i>-coordinate, the leftmost of these is chosen as the tiebreaker.</p>

<p><A NAME="rl3"></a><A HREF="#l3">Listing Three</A> provides the stack defines, data structures, and functions. Since every point in the original set may be on the convex hull, the stack must be able to accommodate <i>N</i> points.</p>

<p><A NAME="rl4"></a><A HREF="#l4">Listing Four</A> contains the function to compute the cross product and the function used in sorting the points by their polar angle they make with the pivot and the positive <i>x</i>-axis. I used the standard library <i>qsort</i> function, and this requires you to provide an item comparison function. I again use the cross product, this time to determine which of two points has the greater polar angle.</p>

<p>Finally, <A NAME="rl5"></a><A HREF="#l5">Listing Five</A> shows everything glued together. The pivot is global so that it can be accessed by the point comparison function. Its value is set at the same time that the pivot point is swapped into array location 0.</p>



<h3>One Small Detail</h3>


<p>If you study <A NAME="rl1"></a><A HREF="#l1">Listing One</A> closely you may realize that the "left-turn-only" rule as implemented should really be called the "no-right-turn" rule; a cross product of zero does not cause any points to be removed from the list.</p>


<p>This detail allows some messy special case handling to be sidestepped. The effect is that all points on the convex hull are returned, even if they are collinear, which may be undesirable in some applications.</p>

<p>Happily, it is a simple and straightforward matter to remove any in-between points after the fact by taking a final lap around the hull, deleting the middle point of any triple having a cross product of zero.</p>



<h3>A Refinement</h3>


<p>The Graham Scan achieves the theoretical lower bound of <i>O(N log N).</i><i> </i>Locating the pivot point and extracting the hull points from the sorted list take only linear time; it is sorting the points by their polar angles that takes up the bulk of the time.</p>


<p>The sort's comparison function will be executed about <i>N log N </i>times, so it would help if the cross product computation could be removed. An obvious approach is to calculate the actual angles. This, however, requires you to use the arctangent function. Not only is this computationally expensive, but you are suddenly forced into using floating-point numbers.</p>

<p>If your application is such that the point coordinates must be floating-point numbers, this may not be a problem. Nonetheless, there is a beautiful device by which the angle computation can be avoided.</p>

<p>To set the stage, locate the leftmost and rightmost points, call them <i>P</i><i> </i>and <i>Q,</i> and let <i>L</i><i> </i>be the line through them. Let <i>S</i><i><sub>A</sub></i><i><sub> </sub></i>be the points above <i>L,</i><i> </i>and <i>S</i><i><sub>B</sub></i> be the points below <i>L</i>. It is clear that the points in the upper part of the convex hull must come from <i>S</i><i><sub>A</sub></i>, and the points in lower part must come from <i>S</i><i><sub>B</sub></i>.</p>

<p>You are now ready. Let the point at<i> </i><i>y</i>=-<img src="infinity.gif"> be the pivot point. Then the lines connecting the pivot to the points in <i>S</i><i><sub>A</sub></i> are vertical, and so the ordering by polar angles is the same as the ordering by the <i>x</i><i>-</i>coordinates.</p>

<p>Thus, you sort the points in <i>S<sub>A</sub></i> by their <i>x</i>-coordinates in descending order, and apply Graham's Scan starting at <i>Q</i><i> </i>to determine the upper portion of the convex hull. The same thing is done with the points in <i>S</i><i><sub>B</sub></i>, except you sort them in ascending order and apply Graham's Scan starting at <i>P</i><i> </i>to determine the upper portion of the convex hull.</p>



<h3>Conclusion </h3>


<p>You now have a very efficient algorithm for computing the convex hull of a set of points to add to your library. Additionally, the cross product was used for two different purposes here, and other uses were hinted at. You will likely find use for it in solving other problems in computational geometry.</p>




<h3>References</h3>


<p>F.P. Preparata and M.I. Shamos, <i>Computational Geometry</i>, 1985.</p>


<p>T.H. Cormen, C. E. Leiserson, and R.L. Rivest, <i>Introduction to Algorithms</i>, 1994.</p>



<p><b>DDJ</b></p>
<H4><A NAME="l1"></a>Listing One</H4>


<pre>//***********************************************************************
// This is the actual Graham scan algorithm. It is called after the pivot 
// point has been located and the rest of the points have been sorted by 
// their polar angle.

void Graham_Scan(point S[], int N)
{
   int i;
   point p;

   Push(S[0]);
   Push(S[1]);
   Push(S[2]);

   for (i = 3; i &lt; N; i++)
   {
      while (CrossProduct(Stack2nd, StackTop, S[i]) &lt; 0)
      {
         Pop(&amp;p);
      };
      Push(S[i]);
   }
}
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2"></a>Listing Two</H4>


<pre>typedef struct
{
   int x, y;
} point;

// Find point with smallest y coordinate; if there is more
// than one select the one with the smallest x coordinate.

int LocatePivot(point S[], int N)
{
   int i, ndx, minx, miny;

// initialize minimum coordinates found so far
   ndx  = 0;
   minx = S[ndx].x;
   miny = S[ndx].y;

// locate lowest point in set
   for (i = 1; i &lt; N; i++)
   {
      if (S[i].y &gt; miny) continue;

//    found a candidate for a new pivot
      if (S[i].y &lt; miny)
      {
         ndx = i;
         miny = S[i].y;
      }
      else if (S[i].x &lt; minx)
      {
         ndx = i;
         minx = S[i].x;
      }
   }

// all done - return index of pivot point
   return(ndx);
}
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3"></a>Listing Three</H4>


<pre>#define sizeof_Stack 100
#define StackTop     stack[TOS_ptr-1]
#define Stack2nd     stack[TOS_ptr-2]

int TOS_ptr = 0;           // Top Of Stack pointer
point stack[sizeof_Stack]; // the actual point stack array

//*********************************************************
// pushes point p onto the stack
// if successful Push() returns 1
// on stack overflow Push() returns 0

int Push(point p)
{
   if (TOS_ptr == sizeof_Stack) return(0);

   stack[TOS_ptr++] = p;
   return(1);
}
//*********************************************************
// pops a point off of the stack
// if successful Pop() returns 1
// on stack underflow Pop() returns 0

int Pop(point *p)
{
   if (TOS_ptr == 0) return(0);
   *p = stack[--TOS_ptr];
   return(1);
}
</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>
<H4><A NAME="l4"></a>Listing Four</H4>


<pre>//*************************************************************************
// Computes the cross product (p1-p0)x(p2-p0). If p2 is to the left of the 
// line from p0 to p1 the result will be positive.

int CrossProduct(point p0, point p1, point p2)
{
   int xprod;
   xprod = (p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y);
   return(xprod);
}
//*********************************************************
// Support function for qsort()
// a &lt; b if a makes a smaller angle with Pivot than does b

int compare_points(const void *a, const void *b)
{
   int xprod;
   point *point_a, *point_b;

   point_a = (point *)a;
   point_b = (point *)b;

   xprod = CrossProduct(Pivot, *point_a, *point_b);

   if (xprod &lt; 0) return(+1);    // a &gt; b
   else
   if (xprod &gt; 0) return(-1);    // a &lt; b

   return(0);                    // a = b
}
</pre>
<P>
<A HREF="#rl4">Back to Article</A>
</P>
<H4><A NAME="l5"></a>Listing Five</H4>


<pre>point Pivot, S[100];

void main(void)
{
   int i, N;
   point p;

// make up some points
   N = 12;
   randomize();
   for (i = 0; i &lt; N; i++)
   {
      S[i].x = random(10);
      S[i].y = random(10);
      printf("(%3d, %3d)\n", S[i].x, S[i].y);
   }
// find the convex hull
   i = LocatePivot(S, N);
   Pivot = S[i];
   S[i]  = S[0];
   S[0]  = Pivot;

   qsort((void *)&amp;S[1], N-1, sizeof(S[0]), compare_points);

   Graham_Scan(S, N);

// output points of convex hull in clockwise order
   for (i = 0; Pop(&amp;p) != 0; i++)
   {
      printf("(%3d, %3d)\n", p.x, p.y);
   }
   printf("%d points in convex hull\n", i);
}</pre>
<P>
<A HREF="#rl5">Back to Article</A>
</P>


</body>
</html>
