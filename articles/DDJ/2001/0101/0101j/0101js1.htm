<html><head><title>Jan01: File I/O Commands</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h2>File I/O Commands</h2><p><b>FileOpen().</b> FileOpen (drivenumber, filepath, filemode, fileID). Example: <i>FileOpen ( 2, "System/myfile.txt", 1, uFileIDNum )</i>.</p><p><b>drivenumber.</b> The first item indicates the drive type. It is set to 2 for the removable memory card. This is the only supported media type at this time.</p><DDJADVERTISEMENT INLINE><p><b>filepath.</b> (String variable type <i>s</i> or <i>t</i>.) Sets the filename and path. If you want this file placed in a subdirectory, the folder must be present. <i>MakeFolder()</i> is used to create the folder.</p><p><b>filemode.</b> Sets the file open mode: 1, Append; 2, Open at beginning of file, used for <i>Read()</i>/<i>ReadLine()</i>; 3, If the file already exists, the file is deleted and a new empty file is created. (If mode 3 is used to delete the previous file, you must close the file and reopen it in a different mode. Otherwise, the file will be deleted and recreated with every <i>Write()</i> or <i>WriteLine()</i>.)</p><p><b>fileID.</b> (Unsigned integer.) Stores the file ID number returned by <i>FileOpen()</i>. This value is used to reference the file in other file manipulation commands.</p><p><b>FileClose().</b> Closes the file specified by the ID <i>uFileIDNum</i>. Example: <i>FileClose (uFileIDNum)</i>.</p><p><b>Write()</b>. Writes data to the file identified by <i>FileOpen()</i>. It leaves the pointer at the end of the data written. Variables can be used for the data written, or a quoted string as in this example. Example: <i>Write (uFileIDNum, "Some text")</i>.</p><p>WriteLine(). Same as <i>Write()</i>, but with a carriage return added to the end of the data written to the file. Example: <i>WriteLine(uFileIDNum, "Some text").</i></p><p><b>SetDelimiter().</b> Required for <i>Read</i> function. End of line (the return character) always represents a delimiter regardless of the type of delimiter set. The delimiter is not returned with the data. Example: <i>SetDelimiter ( delimitertype )</i>. Delimiter Types: comma, comma delimiter; whitespace, all tabs and spaces between data/text, consecutive tabs and/or spaces are combined and considered one delimiter; tab, each individual tab is a delimiter; none, end of line (return character); no delimiter set, same as whitespace.</p><p><b>Read()</b>/<b>ReadLine()</b>. Use mode 2 with <i>FileOpen()</i> for the <i>read </i>function. <i>Read()</i> leaves a pointer where the last delimiter was found. <i>ReadLine()</i> leaves the pointer at the beginning of the next line. <i>FileClose()</i> must be issued if you want to make sure the next read starts at the top of the file. As data is returned to each variable the pointer is moved to the next data item. In the following examples, the line of text needs to match the data type sequence <i>i, u, f, b, s,</i> and <i>t</i>. First line of the .txt file: 15, 287, 2.45, 1, string of text, more text data. If a comma delimiter is used, as in the following example, the items can be read individually: <i>SetDelimiter (comma)</i>; <i>Read( uFileIDNum, iVar, uVar, fVar, bVar, sVar, tVar )</i>. If the data retrieved does not match the variable type used, the values will be affected. Generally, a null value is returned. Here, <i>none</i> is used as the delimiter, so it defaults to end of line: <i>SetDelimiter ( none )</i>; <i>Read ( uFileIDNum, sVar1 )</i>. This would return: "15,287,2.45,1, string of text, m"<i> </i>(<i>s</i> "string" variables have a 31 character limit). If a<i> t </i>variable were used in the above example, the full line would be returned, as it has a 255-character maximum.</p><p> &#151; R.R.</p><a href="0101j.htm#rs1">Back to Article</a></body></html>