<html><head><title>Jan01: Linux's Filesystem</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h2>Linux's Filesystem</h2><p>Linux's ext2 filesystem does not delete the location of the first 12 data blocks stored in the inode when a file is removed. This means that data may be restored directly by using icat (which is part of The Coroner's Toolkit) on the inode number in question. As with any data recovery method, there is no guarantee that the data will still be there, but this can be a very easy way of recovering deleted information.</p><p>Of course, knowing what inode number to look at can be challenging, but other tools in TCT may be used to help locate the correct one. We've already learned that when a file is deleted in Linux, the inode's <i>dtime </i>is updated. Using that, you can recover the data from the most recent 20 inode numbers that were deleted (not quite the same as the last 20 files deleted, but close enough) with this little bit of Bourne shell code:</p><DDJADVERTISEMENT INLINE><p>for inode_num in `ils /dev/device | </p><p>     sort -n +7 -t \| </p><p>     tail -20 |</p><p>     awk -F \| {print $1}'`</p><blockquote><p>     do</p><p>     icat /dev/device $inode_num &gt;  		     $inode_num.result</p><p>     done</p></blockquote><p>If not recently deleted, the data can potentially still be recovered if the approximate time that the data was deleted is known ("3am last night"). The ils2mac program converts ils output to the input the the mactime program understands, which can, in turn, be used to fuel icat to recover the data in question. Of course, if desperate, the data pointed at by all inode numbers can be recovered and searched.</p><p> &#151; D.F.</p><a href="0101h.htm#rs1">Back to Article</a></body></html>