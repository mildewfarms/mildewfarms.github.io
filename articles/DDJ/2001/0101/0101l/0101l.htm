<html><head><title>Jan01: Managing Team-Based Web Development</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>Managing Team-Based Web Development</h1><p><i>Dr. Dobb's Journal</i> January 2001</p><h2>Managing source-code and version control  in Windows-based  web projects</h2><h3>By Jacob Gsoedl</h3><I>Jacob is a corporate MIS manager responsible for data networking and Internet communications systems. He can be reached at jgsoedl@yahoo.com.</I><hr><p>As web applications become more complex, the old "webmaster does it all" approach no longer works, even for relatively small applications. Going from a one-person shop to team development brings new requirements, such as the need for a source-code control and versioning applications that may be familiar to programmers, but not web developers.</p><p>Unfortunately, the tools used for traditional software development don't work well for web site development. First of all, unlike a software-development team, which consists of programmers with similar qualifications, a web team is more diversified. Designers, writers, HTML coders, and programmers are typical members of a web team. Traditional software-development tools might be fine for programmers, but other members of web teams can quickly become lost.</p><DDJADVERTISEMENT INLINE><p>More importantly, the process of developing a web application is not the same as designing a stand-alone C++, Java, or Visual Basic application. <A NAME="rf1"><A HREF="0101lf1.htm">Figure 1</A> illustrates a typical web site infrastructure. All development work is performed on the development server. This is quite different from traditional software development, where developers work with their own copy of the source code. For web development, team members would need their own web servers with all applications and add-ons. Not only would this be expensive, but it would require a tremendous administrative effort. Therefore, a shared development server used by all members of the web team makes sense. Again, tools tailored for the traditional software developer don't support this process very well. </p><p>Companies such as Interwoven (http://www.interwoven.com/) do offer software packages that address this problem. Unfortunately, many of these tools are expensive, and some organizations can't justify the investment. Consequently, in this article I present a web-based source-code control and versioning application that jumpstarts team-based web application development. The complete source code for the application, which my group developed for our own use, is available electronically; see "Resource Center," page<b> </b>5. </p><h3>Application Overview</h3><p>Using the tool I present here, a web team can access the same set of files and folders on the development server. In developing this tool, we made it our first requirement that all files and folders on the development server are read-only for everyone &#151; except administrators, and the account used for replicating the content to the staging server. This lets everyone run and test the application they work on, and at the same time, guarantees that no one modifies files without first getting permission from the source-code control application.</p><p>To make modifications, you need to use our application (see <A NAME="rf2"><A HREF="0101lf2.htm">Figure 2</A>): </p><ul>  <li>The icons on the left describe the state of a file or folder.   <li>Green indicates that a file or folder is checked-in, which means no one can make modifications to it.   <li>Red shows that an item is checked-out by another user; the name of the user is listed under "LockedBy."  <li>Files and folders that are checked-out by the user are displayed in blue. </ul><p>Permissions on checked-out items are handled as follows: The user who checked out an item has full access to it, which means he can modify, delete, or add new items. The Replication account has no access to checked-out files and folders to ensure that checked-out items don't get replicated to the staging server. Everyone else has read-access to enable team members to run and test their web application while items are checked out by other users. </p><p>You navigate the directory tree of the application by clicking on the appropriate folder link; see <A NAME="rf2"><A HREF="0101lf2.htm">Figure 2</A>. To return to a previous level, click on the link at the upper left of the application, which lets you go back to any number of folders with one click. </p><p>To check items in or out, the Checkin/ Checkout checkbox next to the item name must be selected. The actual checkin/ checkout is performed as soon as you click the Check Out&amp;In button. The Scan checkbox is used to search for items that have been added or deleted; the actual scanning is executed by clicking the Scan for New&amp;Deleted Items button. Checkin, checkout, and scanning are performed recursively if the Recursive checkbox is checked.</p><h3>Under the Hood</h3><p>The source-control program is an Active Server Page (ASP) application that takes advantage of several COM components. First of all, we use Visual SourceSafe's Automation Interface to keep track of versioning as well as the checkin/checkout mechanics. We take advantage of <i>FileSystemObject</i>, which is part of the Scripting Runtime Library, to navigate to files and folders. While the <i>FileSystemObject</i> is an integral part of IIS4 and IIS5, you need to install Visual SourceSafe on the development server to be able to use its methods and properties via its Automation Interface.</p><p>You also need a COM component to manipulate NTFS file and folder permissions. Unfortunately, Microsoft doesn't provide a component that deals with this rudimentary task. Our source-control program uses the third-party COM component from Persits Software that deals with NT User and Security Management. To be able to change file and folder permissions, we install the <i>ASPUser</i> component as a Transaction Server (IIS4) or Component Services (IIS5) application. Transaction Server lets you run the component under the Administrator account, which is necessary to change file and folder permissions. (Persits Software, http://www.persits.com/, provides an evaluation copy of <i>ASPUser</i> at http://www.aspuser.com/.) </p><h3>Visual SourceSafe 6.0 Automation</h3><p>As you can see in <A NAME="rf3"><A HREF="0101lf3.htm">Figure 3</A>, the SourceSafe Object Model is straightforward. The <i>VSSDatabase</i> object represents one SourceSafe database, logged in as one user. To access a SourceSafe database via its Automation Interface, you create an instance of a <i>SourceSafe</i> database object, login by calling its <i>Open</i> method and create a <i>VSSItem</i> object, which is the start point for all other SourceSafe commands:</p><blockquote><p>Set objVSSdb = CreateObject("SourceSafe")</p><p>objVSSdb.Open SrcSafeIni, UserName,  			      Password</p><p>Set objVssItem = objVSSdb.vssItem("$/")</p></blockquote><p>The <i>VSSItem</i> object represents a file or folder. As in <A NAME="rf3"><A HREF="0101lf3.htm">Figure 3</A>, there is also a <i>VSSItems</i> object, which is a collection for all the children in one project. You can get to any file or folder in the SourceSafe database by iterating through the <i>VSSItems</i> collection. </p><p>You can find a detailed description of the Visual SourceSafe 6.0 Automation interface at http://msdn.microsoft.com/library/techart/vssauto.htm. I also found the information at http://members.home.net/preston/VSS_OLE_Automation.html helpful, especially for Visual C++ developers.</p><h3>Constants.asp</h3><p>Our application consists of two ASP files. While default.asp renders the user interface, submit.asp performs checkin/checkout, sets the proper file permissions, and scans for new and deleted files and folders depending on the selections users make in default.asp (again, see <A NAME="rf2"><A HREF="0101lf2.htm">Figure 2</A>).</p><p>Both default.asp and submit.asp include constants.asp; see <A NAME="rl1"><A HREF="#l1">Listing One</A>. Constants.asp defines the user names for the Replication, Administrator, and Everyone accounts. It also initializes three variables:</p><ul>  <li><i>SSIni,</i> which defines the location of the  srcsafe.ini file.  <li><i>SSTempDir,</i> which defines the location of the SourceSafe Working folder.  <li><i>SSDocs,</i> which contains the directory location of the application files and folders.</ul><p>The first time the source-code control application is called, the values of <i>SSIni</i>, <i>SSTempDir</i>, and <i>SSDocs</i> are passed in the URL and stored in Session variables: http://default.asp?SSIni=c:\srcsafe.ini&amp;SSTempDir=c:\VSSTemp&amp;VSSDocs=c:\htdocs. After the initial call, <i>SSIni</i>, <i>SSTempDir</i>, and <i>SSDocs</i> are loaded with the values of the ASP session variables.</p><h3>The User Interface</h3><p>In <A NAME="rl2"><A HREF="#l2">Listing Two</A>, default.asp creates an instance of a SourceSafe database object at the beginning. In contradiction to the SourceSafe Object model, the <i>objVSSdb.Open</i> method does not provide a password. To avoid maintaining SourceSafe passwords, we utilize an option in the Visual SourceSafe Administrator program that enables SourceSafe to use the network login for authentication. </p><p>Users navigate through our application by clicking on a folder name or the navigation link in the upper-left corner. Either action triggers default.asp to call itself with a new path (<i>cp</i>) passed along in the URL: default.asp?cp=/newpath. Default.asp stores the value of <i>cp</i> in the <i>currentPath</i> variable. </p><p>We then create the <i>VSSItem</i> object <i>objVssRoot</i>, which contains all files and folders of the current location (<i>currentPath</i>). To be able to render the elements of the <i>objVssRoot</i> object into HTML, we create two arrays &#151; folders and docs. Next, we iterate through the <i>objVSSRoot</i> object, check the item type of each element we find, and write the item name to the docs array if the item is a file, or the folders array if the item is a folder. </p><p>In addition to the item name, we store the username in the folders and docs array. For files, Visual SourceSafe provides this information in the <i>VSSCheckouts</i> collection. Unfortunately, Visual SourceSafe doesn't give you this information for folders. However, we can get the account information by looking at the folder's NTFS permissions. If a user account other than the Administrator and Replication accounts has full access to the folder, we know it was checked out by that user. The <i>getItemCreator</i> function returns the user name of the person who checked out the folder, or an empty string if it wasn't checked out.</p><p>The rest of default.asp iterates through the docs and folders array, displaying the checkin/checkout status of files and folders, the name of the account that checked out an item, as well as checkboxes that allow users to select items for checkin, checkout, and scanning.</p><h3>Checkin and Checkout</h3><p>The submit.asp page is available electronically; see "Resource Center," page 5. Depending on the hidden variable <i>Mode</i>, which is set on the default.asp page, we perform either a scan for new/deleted items, or a checkin/checkout of selected items.</p><p>If the CheckIn&amp;Out Mode applies, the <i>CheckInOut</i> subroutine is called, which scans the <i>Request.Forms</i> collection for items to be checked in and out. In default.asp, we use a special naming convention for the various checkboxes: The name of the checkin checkbox starts with <i>i1_</i>, checkout with <i>o1_</i>, scan with <i>s1_</i>, and the name of the recursive checkbox with <i>r1_</i>. If we find items in the <i>Request.Forms</i> collection that start with <i>i</i> or <i>o</i>, we call the <i>CheckIn</i> or <i>CheckOut</i> subroutines.</p><p>The <i>CheckIn</i> and <i>CheckOut</i> subroutines perform the actual checkin/checkout in Visual SourceSafe, but also call the <i>SetFile Permission</i> or <i>SetFolderPermission</i> subroutines to adjust NTFS permissions. If the item to be checked-in or checked-out is a folder, the operation is performed recursively if the variable <i>iFlag</i> is set. <i>CheckSetFolderItemPermission</i> is called by <i>SetFolderPermission</i> to adjust the NTFS permission if necessary. <i>CheckSetFolderItemPermission</i> guarantees that NTFS permissions of items that are already checked out by another user aren't overwritten.</p><p>The actual NTFS permission change is performed in the <i>SetNTFSPermission</i> subroutine using the <i>ASPUser</i> component. If <i>SetNTFSPermission</i> is called with permission set to <i>Full</i>, users get full access to the file and folder. At the same time, the Replication account gets no access to the item, if the item is a file, to ensure that checked-out files are not replicated to the staging server. If permission is set to <i>Read</i>, users get read-only access to the item, and the Replication account gets full access if the item is a file. <i>Revoke</i> reverses a previously set permission.</p><h3>Scan for New and Deleted Items</h3><p>Visual SourceSafe keeps track of versions as well as the checkin and checkout status of files and folders. The challenge is to keep the SourceSafe database synchronized with the files and folders on the file system. Our application provides a <i>Scan</i> function, which scans a folder for items that have been added or deleted, and updates the SourceSafe database accordingly.</p><p>The <i>UpdateVSS</i> subroutine calls the <i>AddNewItems</i> and <i>DelOrphantItems</i> subroutines to synchronize SourceSafe with the actual content on the file system. <i>AddNewItems</i> scans the file system using the <i>FileSystemObject</i> and checks if the item exists in the Visual SourceSafe database. If the file or folder doesn't exist within SourceSafe, it is added.</p><p><i>DelOrphantItems</i> traverses the <i>SourceSafe</i> database and checks if the item exists on the file system. If an item was deleted from the file system, our application deletes the item in Visual SourceSafe as well. Both <i>AddNewItems</i> and <i>DelOrphantItems</i> can be performed recursively to synchronize a complete folder tree.</p><h3>Deployment</h3><p>To install the source-code control application, perform the following steps:</p><p></p><p>1. The development server needs to be either Windows NT 4.0 Server running IIS4 or Windows 2000 Server. I used Microsoft Site Server 3.0 to replicate the content from the development server to the staging server. Whatever replication software you use, make sure that the replication service runs under the replication account that you define in constants.asp. Also, make sure that the Administrators and Everyone accounts are set properly in constants.asp.</p><p>2. Download the <i>ASPUser</i> component from Persits Software's web site and install it on the development server.</p><p>3. Create a new COM Application ASPUser in Component Services (Windows 2000) or Microsoft Transaction Server (Windows NT 4.0). Make sure that the account the COM Application will run under is part of the Administrators group; this is required for <i>ASPUser </i>to change file and folder permissions. Finally, add the <i>ASPUser</i> component installed in Step 2 to the Components of our new COM Application.</p><p>4. Install Visual SourceSafe Administrator and Client on the development server.</p><p>5. Create a Visual SourceSafe database in the Visual SourceSafe Administrator for the web application you want to manage. Make sure to check "Use network name for automatic user login" under the SourceSafe Options. I recommend using the Visual SourceSafe client to initially add the files and folders you want to manage.</p><p>6. Change permissions on all the files and folders you want to manage to read-only for the Everyone account, and full control for the Administrators and Replication accounts. </p><p>7. Create a web site for the source-code control application in IIS4 or IIS5. Depending on the performance of your development server and the number of files and folders you will manage, you may have to adjust the ASP <i>Script</i> timeout setting from 90 seconds to a higher number. For instance, scanning an application with thousands of files and folders recursively may take several minutes. If you don't increase the <i>Script</i> timeout value, you get a timeout error before the application has finished searching for new/deleted items.</p><p>8. Determine the location of the srcsafe.ini file, the SourceSafe Working Folder (can be set to any location on the Development server), as well as the location of the application you want to manage. You will need these values to properly set the <i>SSIni</i>, <i>SSTempDir</i>, and <i>SSDocs</i> variables to start the application in a browser: http://default.asp?SSIni=c:\srcsafe.ini&amp;SSTempDir=c:\VSSTemp&amp;VSSDocs=c:\htdocs.</p><h3>Conclusion</h3><p>The application presented here gives you an easy-to-use tool for team-based web development. It uses Visual SourceSafe and lets experienced users use the Visual SourceSafe client for more advanced features, such as going back to a previous version, or retrieving all versions of a particular file. </p><p></p><p><b>DDJ</b></p><H4><A NAME="l1">Listing One</H4><pre>&lt;% 'Global variables initializationdim SSIni, Username, SSTempDir, DocsDir, ReplicationUser,                                               AdminUser, EveryoneUserUserName       = Request.ServerVariables("Remote_USER")'-----------------------------------------------------------------------------'Account may need to be adjusted to match account names used in environment'-----------------------------------------------------------------------------ReplicationUser = "replica"EveryoneUser    = "Everyone"AdminUser       = "Administrators"'-----------------------------------------------------------------------------'-----------------------------------------------------------------------------' This section does not have to be changed!' Following Session variables are initialized the first time app is called:' -- SSini:     Location of the srcsafe.ini file.' -- SSTempDir: Location of the SourceSafe Working Folder' -- SSDocsDir: Location of the Document folder of app you want to manage.'-----------------------------------------------------------------------------If Session("SSIni") = "" OR Session("SSTempDir") =                                       "" OR Session("DocsDir")=""  Then   'Session has expired or missing parameters!   If Request.QueryString("SSIni")="" OR Request.QueryString("SSTempDir")=""                                      OR Request.QueryString("DocsDir")="" Then      Response.Write("&lt;br&gt;&lt;b&gt;The User Session has expired or arguments                            are missing! You need to login again!&lt;/b&gt;&lt;br&gt;&lt;br&gt;")      Response.Write("&lt;b&gt;This application expects 3 parameters in                                                            the URL:&lt;/b&gt;&lt;br&gt;")      Response.Write("-- &lt;b&gt;SSIni:&lt;/b&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;                The path to the srcsafe.ini file of the current project&lt;br&gt;")      Response.Write("-- &lt;b&gt;SSTempDir:&lt;/b&gt;&amp;nbsp;The location of                 the Working Folder for Visual Source Safe&lt;br&gt;")      Response.Write("-- &lt;b&gt;DocsDir:&lt;/b&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;                &amp;nbsp;&amp;nbsp;The location of the Project&lt;br&gt;&lt;br&gt;")      Response.Write("Example: default.asp?SSIni=           c:\Project\SRCSAFE.INI&amp;SSTempDir=e:\VSStemp&amp;DocsDir=c:\htdocs&lt;br&gt;")      Response.End   Else      Session("SSIni")     = Request.QueryString("SSIni")      Session("SSTempDir") = Request.QueryString("SSTempDir")      Session("DocsDir")   = Request.QueryString("DocsDir")   End IfEnd IfSSIni = Session("SSIni")SSTempDir  = Session("SSTempDir")DocsDir    = Session("DocsDir")%&gt;</pre><P><A HREF="#rl1">Back to Article</A></P><H4><A NAME="l2">Listing Two</H4><pre>&lt;%@ Language=VBScript %&gt;     &lt;%option explicit%&gt;&lt;!-- #include file="inc/constants.asp"--&gt;&lt;!-- #include file="inc/vssconst.asp"--&gt;&lt;%  Dim currentPath, index, docCount,FolderCount,                                   strSlash, segmentCnt, strDBName,FSPath  dim docs(),folders(),segments(50)  dim  objVSSdb, objVSSObject,objVssRoot '--- Create an instance of a Visual Source Database object --- On Error Resume Next Set objVSSdb = CreateObject("SourceSafe") objVSSdb.Open SSIni, UserName If Err.Number &lt;&gt; 0 Then    Response.Write "User '&lt;b&gt;" &amp; Username &amp; "&lt;/b&gt;' doesn't exist in             SourceSafe, or the path to the srcsafe.ini (&lt;b&gt;" &amp;             SSIni &amp; "&lt;/b&gt;) file is wrong!"    Session.Abandon()    Response.End End If  '--- Variable initialization  strDBName = objVSSdb.databasename  currentPath= Request.QueryString("cp")  If currentPath=empty  Then    currentpath="/"  Else      currentpath=BPath(currentPath)  End If     If currentPath = "/" Then     strSlash = ""  Else     strSlash = "/"  End If  '--- Create vssItem Object ---  set objVssRoot=objVSSdb.vssItem("$" + currentPath,False)  If currentPath = "/" Then     objVssRoot.LocalSpec=SSTempDir  End If  FSPath = Replace( DocsDir &amp; currentPath,"/","\")                       'File System equivalent of the VSS Folder  '--- Create docs and folders array of the proper size ---  docCount=0  folderCount=0  for each objVSSObject In objVssRoot.items  if  objVSSObject.Type = VSSITEM_FILE Then    docCount=docCount+1  else      foldercount=foldercount+1  end If  Next  redim docs(doccount,2)  redim folders(FolderCount,2)  '--- Fills the docs &amp; folders array with items in the current folder ---  '--- Docs array stores: filename &amp; Username in case file is checked out ---  '--- Folders array stores: foldername &amp; Username in case folder is checked out  ---   docCount=0  folderCount=0  for each objVSSObject In objVssRoot.items    if objVSSObject.Type = VSSITEM_FILE Then      docs(docCount,0)=objVSSObject.Name      if objVSSObject.isCheckedOut = VSSFILE_NOTCHECKEDOUT then         docs(docCount,1)=""      else        docs(docCount,1)=LCase(objVSSObject.checkouts(1).username)      end if        docCount=docCount+1    else        folders(foldercount,0)=objVSSObject.Name      folders(folderCount,1)= LCase(getItemCreator(FSPath &amp; "\" &amp; objVSSObject.Name))      foldercount=foldercount+1     end If  Next   '--------------------------------------------------------------------------   ' getItemCreator: Returns the Username that created the file or folder   ' Input:  ItemName --&gt; File or Folder name   '--------------------------------------------------------------------------   Function getItemCreator(ByVal ItemName)      Dim Au, Item, Ace, AceUser, ItemCreator      On Error Resume Next      ItemCreator = ""      Set Au = Server.CreateObject("Persits.AspUser")      Set Item = Au.File(ItemName)      If Err.Number &lt;&gt; 0 Then        'An error is generated if the Folder was deleted from the File System'        Response.Write "&lt;b&gt;A File or Folder doesn't exist!&lt;/b&gt;&lt;BR&gt;"        Response.Write "Go one page back, check the Scan checkbox next                                                     to the folder name, &lt;BR&gt;"        Response.Write "and click on the 'Scan for                                               New&amp;Deleted Items' button!&lt;BR&gt;"         Response.End      End If      For i = 1 to Item.AllowanceCount         Set Ace = Item.GetAllowanceAce(i)         AceUser = LCase(Ace.AccountName)         If AceUser &lt;&gt; LCase(AdminUser) AND AceUser &lt;&gt; LCase(EveryoneUser)                                   AND AceUser &lt;&gt; LCase(ReplicationUser) Then            ItemCreator = AceUser            Exit For         End If      Next      getItemCreator = ItemCreator   End Function   '--------------------------------------------------------------------------   ' BPath: Replaces // with /   ' Input: Path string   '--------------------------------------------------------------------------  function BPath(byVal s1)      if len(s1)&gt;2 then       if mid(s1,1,2)="//" then          s1=left(s1,1) &amp; right(s1,len(s1)-2)       end if       end if       Bpath=s1  end function    '--------------------------------------------------------------------------   ' getPathSegments: Breaks up a path string (separated by /) and puts each    '                  segment into the segments array.   ' Input: Path string   '--------------------------------------------------------------------------  function getPathSegments(byval s)     dim cnt,i,slen,sStr,iStr     cnt =0     iStr = s     i = InStr(iStr,"/")     do while i &gt; 0        if i&gt;1 then            sStr = Left(iStr,i-1)            segments(cnt) = sStr           cnt = cnt + 1        else            sStr=""         end if          iStr = Right(iStr,len(iStr)-len(sStr)-1)        i = InStr(iStr,"/")     loop     if iStr &lt;&gt; "" then        segments(cnt) = iStr        cnt = cnt + 1     end if     getPathSegments = cnt  end function%&gt;&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Source Code Control User Interface&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;SCRIPT LANGUAGE="JavaScript"&gt;&lt;!--   function doCheckInOut(){      document.frmItems.Mode.value = "CheckIn&amp;Out";      document.frmItems.submit();      return(true);   }   function doScan(){      document.frmItems.Mode.value = "Scan";      document.frmItems.submit();      return(true);   }--&gt;&lt;/SCRIPT&gt;&lt;BODY&gt;&lt;form name="frmItems" action="submit.asp" method="POST" &gt;  &lt;table cellspacing="2" cellpadding="2" border="0"&gt;  &lt;tr&gt;&lt;td colspan="8"&gt;&lt;center&gt;&lt;b&gt;&lt;%=strDBName%&gt;&lt;/b&gt;&lt;/center&gt;&lt;/td&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td colspan="8"&gt;&lt;HR&gt;&lt;/td&gt;&lt;/tr&gt;  &lt;!-- -------------------------- --&gt;  &lt;!-- Render the Navigation Link --&gt;  &lt;!-- -------------------------- --&gt;  &lt;tr&gt;&lt;td colspan="8"&gt;&lt;font size="2"&gt;  &lt;%  segmentCnt = getPathSegments(currentpath)      dim i,ii,strcp,strSlsh1,strSlsh      strSlsh1 = ""      for i=0 to segmentCnt            strcp="/"            strSlsh = ""            for ii=0 to (i-1)               strcp = strcp &amp; strSlsh &amp; segments(ii)               strSlsh = "/"            next  %&gt;        &lt;a href="default.asp?cp=&lt;%=strcp%&gt;"&gt;            &lt;%=strSlsh1%&gt;&lt;%=segments(i)%&gt;  &lt;%        strSlsh1 = "/"      next   %&gt;  &lt;/font&gt;  &lt;/td&gt;&lt;/tr&gt;  &lt;tr&gt;  &lt;th&gt;&lt;/th&gt;  &lt;th&gt;&amp;nbsp;Checkout&amp;nbsp;&lt;/th&gt;  &lt;th&gt;&amp;nbsp;Checkin&amp;nbsp;&lt;/th&gt;  &lt;th&gt;&amp;nbsp;Recursive&amp;nbsp;&lt;/th&gt;  &lt;th&gt;&amp;nbsp;&lt;/th&gt;  &lt;th&gt;&amp;nbsp;Name&amp;nbsp;&lt;/th&gt;  &lt;th&gt;&amp;nbsp;Scan&amp;nbsp;&lt;/th&gt;  &lt;th&gt;&amp;nbsp;LockedBy&amp;nbsp;&lt;/th&gt;  &lt;/tr&gt;  &lt;!-- -------------------------- --&gt;  &lt;!--       Render Folders       --&gt;  &lt;!-- -------------------------- --&gt;&lt;%for index=0 to foldercount-1 %&gt;  &lt;tr&gt;&lt;td&gt;&lt;% if LCase(folders(index,1))= LCase(username) then %&gt;     &lt;IMG SRC="images/bl_diam.gif"&gt; &lt;% else      if folders(index,1)&lt;&gt;""  then %&gt;      &lt;IMG SRC="images/or_diam.gif"&gt;&lt;%   else %&gt;        &lt;IMG SRC="images/gr_diam.gif"&gt;&lt;%   end if   end if  %&gt;&lt;/td&gt;  &lt;td align=center&gt;     &lt;input type="Checkbox" name="o1_&lt;%=index%&gt;"&gt;&amp;nbsp;  &lt;/td&gt;  &lt;td align=center&gt;     &lt;input type="Checkbox" name="i1_&lt;%=index%&gt;"&gt;&amp;nbsp;  &lt;/td&gt;  &lt;td align=center&gt;     &lt;input type="Checkbox" name="r1_&lt;%=index%&gt;"&gt;&amp;nbsp;  &lt;/td&gt;  &lt;td&gt;&lt;IMG SRC="images/dir.gif"&gt;&lt;/td&gt;  &lt;td&gt;&lt;A href="default.asp?cp=&lt;%=currentpath &amp; strSlash &amp; folders(index,0)%&gt;"&gt;                              &lt;%=folders(index,0)%&gt;&lt;/A&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;  &lt;td align=center&gt;&lt;input type="Checkbox" name="s1_&lt;%=index%&gt;"&gt;&lt;/td&gt;  &lt;td align="left"&gt;&lt;%=folders(index,1)%&gt;&amp;nbsp;&lt;/td&gt;  &lt;/tr&gt;  &lt;input type="Hidden" name="t1_&lt;%=index%&gt;" value="&lt;%=currentpath  &amp;                                             strSlash &amp; folders(index,0)%&gt;"&gt;&lt;%next%&gt;&lt;!-- -------------------------- --&gt;&lt;!--         Render Files       --&gt;&lt;!-- -------------------------- --&gt;&lt;% for index=0 to doccount-1 %&gt;  &lt;tr&gt;&lt;td&gt;&lt;% if LCase(docs(index,1))= LCase(username) then %&gt;     &lt;IMG SRC="images/bl_diam.gif"&gt;&lt;% else     if docs(index,1)&lt;&gt;""  then %&gt;      &lt;IMG SRC="images/or_diam.gif"&gt;&lt;%   else %&gt;        &lt;IMG SRC="images/gr_diam.gif"&gt;&lt;%   end if   end if  %&gt;   &lt;/td&gt;  &lt;td align=center&gt;&lt;% if docs(index,1)=""  then %&gt;      &lt;input type="Checkbox" name="o2_&lt;%=index%&gt;"  align="MIDDL"&gt;&lt;% end if %&gt;&amp;nbsp;  &lt;/td&gt;  &lt;td align=center&gt;&lt;% if LCase(docs(index,1))= LCase(username) then %&gt;      &lt;input type="Checkbox" name="i2_&lt;%=index%&gt;" align="MIDDL"&gt;&lt;%end if %&gt;&amp;nbsp;  &lt;/td&gt;  &lt;td align=center&gt;&amp;nbsp;&lt;/td&gt;  &lt;td&gt;&lt;IMG SRC="images/text.gif"&gt;&lt;/td&gt;  &lt;td&gt;&lt;%=docs(index,0)%&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;  &lt;td align=center&gt;&amp;nbsp;&lt;/td&gt;   &lt;td align=left&gt;&lt;%=docs(index,1)%&gt;&amp;nbsp;&lt;/td&gt;  &lt;/tr&gt;  &lt;input type="Hidden" name="t2_&lt;%=index%&gt;"                      value="&lt;%=currentpath &amp; strSlash &amp; docs(index,0)%&gt;"&gt;&lt;%next%&gt;  &lt;tr&gt;&lt;td colspan="8"&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td colspan="8" align="center"&gt;       &lt;input type="Hidden" name="Mode"&gt;       &lt;input type="Button" value="Check Out&amp;In"                                         onClick="return doCheckInOut();"&gt;       &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;       &lt;input type="Button" value="Scan for New&amp;Deleted Items"                                         onClick="return doScan();"&gt;  &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;input type="hidden" name="parent" value=&lt;%=currentPath%&gt;&gt;&lt;/form&gt;&lt;/BODY&gt;&lt;/HTML&gt;</pre><P><A HREF="#rl2">Back to Article</A></P></body></html>