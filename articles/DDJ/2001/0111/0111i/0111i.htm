<html><head><title>Nov01: XML for  Instrument Control and Monitoring</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>XML for  Instrument Control and Monitoring</h1><p><i>Dr. Dobb's Journal</i> November 2001</p><h3>By David Cox</h3><I>David is a senior software engineer at ABB's Electric Systems Technology Institute in Raleigh, NC. He can be contacted at <a href="mailto:david.cox@us.abb.com">david.cox@us.abb.com</a>.</I><hr><p>Objects are used for machine-to-machine communications. However, both Microsoft's DCOM object technology and the Object Management Group's CORBA are "multiport protocols," which means they don't work too well with firewalls that limit the number of open ports. So much for efficient machine-to-machine communications. Partly because of this, Microsoft introduced a third protocol &#151; the Simple Object Access Protocol (SOAP) &#151; that piggybacks on the single port protocol, HTTP. All three protocols &#151; DCOM, CORBA, and SOAP &#151; let client applications create objects that appear to be local, but really execute elsewhere on a network.</p><p>In the near term, DCOM, CORBA, and SOAP will likely remain the preferred choices for distributed computing. Even in the world of instrument monitoring and control, for instance, COM and DCOM have been adopted as a standard for controlling instruments, at least in terms of the Open Process Control (OPC) Standard, promoted by the OPC Foundation (<a href="http://www.opcfoundation.org/">http://www.opcfoundation.org/</a>). However, efforts are underway to use XML for electronic data interchange and all types of business transactions, as people begin exchanging everything from purchase orders to medical records as XML-formatted messages.</p><DDJADVERTISEMENT INLINE><h3>The Instrument Markup Language</h3><p>In fact, a group at NASA's Goddard Space Flight Center is using a dialect of XML called the "Instrument Markup Language" (IML; <a href="http://pioneer.gsfc.nasa.gov/public/iml/">http://pioneer.gsfc.nasa.gov/public/iml/</a>) to control remote instruments. IML is being developed by NASA and Commerce One (<a href="http://www.commerceone.com/">http://www.commerceone.com/</a>) with the goal of creating a very general and highly extensible framework that applies to any kind of instrument that can be controlled by a computer. The Astronomical Instrument Markup Language (AIML; <a href="http://pioneer.gsfc.nasa.gov/public/aiml/">http://pioneer.gsfc.nasa.gov/public/aiml/</a>) is the first implementation of IML. Although AIML was created for the astronomy domain in general and infrared instruments in particular, both AIML and IML were designed to apply to just about any instrument control domain.</p><p>The goals of IML are to:</p><ul>  <li>Provide as much platform independence as possible.   <li>Create a system that is easy to develop, modify, maintain, and extend.   <li>Promote reusability by utilizing emerging technologies that enable reuse.   <li>Reduce the implementation time for facility instruments used by scientists.  <li>Define the interface between hardware and software engineers.   <li>Facilitate multiple iterations of the instrument description during design and implementation by means of a software architecture that is readily adaptable to such changes.   <li>Separate implementation (representation) from description. </ul><p>In short, IML is a specification for using XML to aid in the exchange of data and commands with instruments. XML itself is not sent between computer and instrument. However, XML is used to describe the commands and data that can be transferred. For instance, a software tool reads the XML, automatically creates an appropriate user interface for issuing commands, and finally sends the commands in response to user input. When responses come back, the same tool can &#151; using the XML specification &#151; interpret the incoming data and automatically present it with an appropriate user interface.</p><p>The original version of IML was written as an XML Data Type Declaration (DTD). The most recent version is written as an XML Schema. Both define rules for naming tags and attributes, and how the tags can be nested. For the purpose of this article, I will present the DTD version of IML. The newer schema version changes IML in several ways. However, the DTD version is easier to understand and serves as a good background.</p><p>A valid IML document will begin with an <i>Instrument</i> tag. This tag can stand alone or contain <i>Instrument</i> tags nested to any arbitrary level where nested tags represent subsystems. Intermingled with nested <i>Instrument</i>s can be an arbitrary number of <i>Port</i>s. IML, therefore, has a basic structure like that in <A NAME="re1"><A HREF="0111ie1.htm">Example 1</A>.<i></p><p>Port</i>s contain one or more <i>Command</i> records or one or more <i>Telemetry</i> records. A <i>Command</i> record is defined as a <i>Command</i> tag followed by a <i>RecordFormat </i>tag. A <i>Telemetry</i> record is defined as a <i>Telemetry</i> tag followed by a <i>RecordFormat</i> tag. You can, therefore, flesh out <A NAME="re1"><A HREF="0111ie1.htm">Example 1</A> so that it looks like <A NAME="re2"><A HREF="0111ie2.htm">Example 2</A>.<i></p><p>Command</i>s are sent to instruments while <i>Telemetry</i> contains responses. <i>Command</i>s contain optional arguments and <i>Telemetry</i> will contain one or more fields of data. <i>RecordFormat</i>s help to describe the format of the commands or data being sent.</p><p>Going down yet another level, each <i>Command</i> can have zero or more <i>Argument</i>s. Each <i>RecordFormat</i> will have a <i>Format </i>tag for each <i>Argument</i>. Similarly, each <i>Telemetry</i> record will have one or more <i>Field</i>s (if there weren't any <i>Field</i>s, no <i>Telemetry</i> records would be sent). Again, each <i>RecordFormat </i>will have a <i>Format</i> tag for each field. IML also provides for arrays of <i>Field</i>s and arrays of <i>Format</i>s.</p><p>Each <i>Command Argument</i> has two required and several optional attributes. The first required attribute is the <i>Argument</i>'s name and the second is the <i>Argument</i>'s data type. Currently, IML uses strings to specify a Java data type. The <i>required</i> attribute is optional and specifies if the argument itself is optional. If <i>required</i> is not given as an attribute, then the default value for <i>required</i> is False. The <i>hidden</i> attribute is also a Boolean that determines if the argument appears in the user interface. The default is False, making all <i>Command Argument</i>s visible as a user-interface control. The remaining optional attributes include <i>class</i>, <i>style</i>, <i>docHelp</i>, and <i>title</i>. These control various aspects of the user interface for the argument.</p><p>Each <i>Telemetry</i> field also has two required and several optional attributes. Again, the first two are the <i>Field</i>'s name and the <i>Field</i>'s type. The remaining attributes include <i>required</i>, <i>class</i>, <i>style</i>, <i>docHelp</i>, and <i>title</i>.</p><p>For instance, assume that <A NAME="re3"><A HREF="0111ie3.htm">Example 3</A> is XML code to help control the Canadarm on Space Station Alpha. (Canadarm is a robotic arm used for payload manipulation and retrieval on space flights. The device is best known for the successful repair work it did on the Hubble Space Telescope and its role in assembling the International Space Station.) In reality, <i>Instrument</i> and <i>Port</i> have some required and optional attributes, but I am leaving them out to focus attention on the <i>Command</i>, <i>Telemetry</i>, and <i>RecordFormat</i> tags, and the overall structure of the XML.</p><p>In this example, the XML says that you have a <i>Move</i> command that takes two arguments. The first argument is a string for the command and the second is an integer. The <i>RecordFormat</i> shows that the string for the <i>Move</i> command will be "MOVE". The <i>Distance</i> argument will be an integer between 0 and 1000. Again, the <i>RecordFormat</i> shows that <i>Distance</i> will be sent to the device as a header, followed by the argument. In this case, the header is "DISTANCE=".</p><p>The application software reads the XML and creates a slider control labeled <i>Distance</i>. Users can slide the control to the desired value. The <i>Command</i> argument is hidden and will not appear in the user interface. However, the <i>Command</i> argument is used to construct the command to send to the device. In this case, the command is MOVE DISTANCE=500. This ASCII message will be sent out of a computer port directly to the Canadarm. With a really good pair of binoculars, you can see it move 500 units along the space station.</p><p>If you don't have any binoculars, you can rely on the Canadarm to send back a status response saying how far it really moved. Two fields will be included &#151; the time of the move and the distance. The time will come to you formatted as a string and the distance formatted as a Java <i>Integer</i>. Knowing this, the application will display the response, possibly using an odometer for the distance and a digital clock for the time.</p><h3>Advantages of XML</h3><p>By using XML to describe how commands and data move between computers and instruments, manufacturers will no longer need to create custom software, specialized device drivers, and/or distributed objects to communicate with their products. Instead, an instrument manufacturer will only need to provide an XML description of how the communication takes place. Tools that can parse and interpret the XML will be able to automatically generate the required user interface to control the instrument, automatically construct messages to the instrument, and automatically display the data that is returned. IML represents a first attempt at making this capability a reality. </p><p><b>DDJ</b></p></body></html>