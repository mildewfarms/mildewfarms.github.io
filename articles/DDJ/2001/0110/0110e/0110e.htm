<html><head><title>Oct01: C# & Perl</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>C# &amp; Perl</h1><p><i>Dr. Dobb's Journal</i> October 2001</p><h2>C# has a lot in common with many languages</h2><h3>By Talbott Crowell</h3><I>Talbott  is an instructor teaching Java and Perl for Sun Microsystems, and Java and other languages for Boston University's Corporate Education Center. He can be contacted at <a href="mailto:talbott@thirdm.com">talbott@thirdm.com</a>.</I><hr><p>Although C# has evolved from C/C++ very much like Java, it also borrows from languages such as Delphi, Pascal, Visual Basic, and Smalltalk. Interestingly, C# also has facilities familiar to Perl, including <i>join</i> and <i>split</i>, <i>foreach</i> loops, regular expressions, and the like. In this article, I'll focus on common Perl scripts that you can implement in C#. In the process, I will also discuss the difference between instance and static methods in C#. </p><p>Most of the examples in this article relate to C#'s use of the .NET Framework. C# was designed to heavily depend on the .NET Framework, a universal type library similar to the standard Perl modules or the Java class libraries. The main difference between them is that these classes are accessible to every language on the .NET platform (VB, C++, JScript, Perl, and so on). Consequently, it is not exactly C# that is similar to Perl, but rather the .NET Framework &#151; which C# relies on &#151; that provides many seemingly common facilities.</p><DDJADVERTISEMENT INLINE><h3><i>Join</i></h3><p>For instance, <i>Join</i> is a Perl command used to join elements of an array with a delimiter. <A NAME="rl1"><A HREF="#l1">Listing One</A> (a) is a tab-delimited string of <i>fruit</i> using the built-in Perl <i>join</i> function. The key section of code is the command to join the fruit array (<i>@fruit</i>) using a tab (<i>"\t"</i>) between each element of the array: <i>join("\t", @fruit)</i>. </p><p>In C#, the <i>join</i> function is actually a static method of the <i>string</i> class:<i> string.Join("\t", fruit)</i>. Because C# is a strongly typed language, you must declare your variable of string or string array type; see <A NAME="rl1"><A HREF="#l1">Listing One</A> (b).</p><h3><i>Split</i></h3><p><i>Split</i> can be viewed as the opposite of <i>join</i>. <i>Split</i> accepts a single string and returns an array of elements separated by a delimiter. <i>Split</i> is also a built-in Perl function, but in C# it is a string instance method. In <A NAME="rl2"><A HREF="#l2">Listing Two</A> (a), I use a string with tabs called <i>beverages</i> to create an array of drinks. The key section of code is the command to split the beverage string (<i>$beverages</i>) using a tab (<i>"\t"</i>) as the delimiter: <i>split("\t", $beverages)</i>. </p><p>In C#, the <i>split</i> function is in fact an instance method of every string object. Since the <i>split</i> function belongs to the object, I call it directly from the item that I want to split: <i>beverages.Split(separator).</i> The separator must be a character array, so you can declare the character array earlier or you can create it on-the-fly. The latter would look like this: <i>beverages.Split(new char[] {'\t'})</i>. </p><p>We use the <i>foreach</i> construct to print each item in the array. <A NAME="rl2"><A HREF="#l2">Listing Two</A> (b) is C# code to replace the Perl code.</p><p>One difference between Perl and C# is that while Perl has built-in functions, C# does not. C# uses the .NET Framework's definition of a string to do the splitting and joining. Because of this, the C# language is separated from the utility functions. Another item to be aware of when learning C# is the difference between a static method and an instance method. <i>Join</i> is a static method, whereas <i>Split</i> is an instance method. They both come from the .NET Framework <i>String</i> class.  </p><h3>Static versus Instance</h3><p>The difference between static and instance methods is where they exist conceptually &#151; not physically. Physically, both are defined in the same class definition. Conceptually, instance methods belong to or are encapsulated inside the string object (instance), and static methods belong to or are encapsulated inside the <i>String</i> class. What this means is that the object reference has no access to the shared static method. In C#, you must use the class name to invoke a static method (unlike Java, which allows an instance reference to invoke static methods). <A NAME="rl3"><A HREF="#l3">Listing Three</A> demonstrates the conceptual distinction between an instance and static method.</p><p>In <A NAME="rl3"><A HREF="#l3">Listing Three</A> (a), you must recognize that asking the greeting string <i>"hello"</i> to join two unrelated objects (the string <i>\t </i>and a string array of <i>fruit</i>) is silly and distracting. By forcing you to ask the <i>String</i> class to join the two objects, the code becomes more readable and creates a mental divide between belonging to the class (static member) and belonging to the object (instance member).<i></p><p>Split,</i> on the other hand, is an instance method. So, conceptually, every string object has the ability to split itself and return an array. In C#, you never ask the <i>String</i> class to split up a string, instead you ask any string object to split up its own private data; see <A NAME="rl3"><A HREF="#l3">Listing Three</A> (b).</p><h3><i>Foreach</h3><p></i>The <i>foreach </i>keyword is a built-in construct of both Perl and C# that operates in a similar fashion. <A NAME="rl4"><A HREF="#l4">Listing Four</A> (a) uses the <i>foreach</i> construct in Perl to loop through an array. The local variable <i>$drink</i> contains each item from the array and prints each drink in a separate iteration of the loop. This <i>foreach</i> loop invokes the <i>print</i> function on four separate iterations. The <i>$drink </i>variable is, in fact, a reference pointer to the array and moves forward one element per iteration. </p><p>In C#, you use a string reference to refer to the elements in the array; see <A NAME="rl4"><A HREF="#l4">Listing Four</A> (b). Just like Perl, the variable <i>drink</i> points to an element in the array and moves forward through the array at each iteration. Because C# is strongly typed, you must declare the data type of the local variable <i>drink</i> as a string. The <i>foreach</i> is a bit more powerful in C# because not only can it iterate through arrays, but it can also iterate through objects that implement the <i>IEnumerable</i> interface, such as the various collection classes <i>Queue, Stack, </i>and <i>Hashtable</i>.</p><h3>Regular Expressions</h3><p>Both Perl and C# have regular expression facilities. Regular expressions (<i>regex</i>) are built into the Perl syntax, but C# uses the <i>System.Text.RegularExpressions</i> namespace from the .NET Framework. Some .NET classes from this namespace are: <i>Regex, Match, Capture,</i> and <i>Group</i>. Here, I'll focus on the <i>Regex</i> class.</p><p>Unfortunately, C# is not as terse as Perl because regular expressions are not part of the syntax, but rather a group of classes. <A NAME="rl5"><A HREF="#l5">Listing Five</A> (a) is a Perl script that uses regular expressions. The key section of code here is the regular expression <i>/ee/ </i>following the match operator<i> =~ </i>(equals, tilde), which returns True if there is a match between the expression <i>ee</i> and the string <i>$drink: if $drink =~ /ee/. </i></p><p>Basically, Perl's <i>if</i> modifier conditionally executes the statement preceding it if the result of the clause containing the regular expression is True. In this case, that's if two <i>e</i> characters appear in sequence together in the <i>$drink</i> string. This should match on <i>"root beer"</i> and <i>"coffee"</i>. The syntax for regular expressions in Perl is simply a forward slash followed by characters, and regex metacharacters terminated by a slash. This expression example only uses characters, a similar example using metacharacters might be: <i>if $drink =~ /e../. </i>The dot (period) is a regex metacharacter that represents a wildcard for any single character. Therefore, this would match any <i>e </i>character followed by any two characters. This clause would return True for <i>"orange juice"</i> and <i>"root beer"</i>. It would not match <i>"coffee"</i> because the first "<i>e</i>" in coffee is only followed by one character and zero characters follow the second "<i>e</i>."</p><p>Look at the same code in C#. First you want to have a <i>using</i> statement before the class declaration: </p><blockquote><p>using System.Text.RegularExpressions;</p></blockquote><p>next, you instantiate the <i>Regex</i> class: </p><blockquote><p>Regex regex = new Regex("ee");</p></blockquote><p>Finally, you check for a match by calling an instance method on our <i>regex</i> object asking it the True/False question is there a match between the expression and the drink:</p><blockquote><p>regex.IsMatch(drink)</p></blockquote><p><A NAME="rl5"><A HREF="#l5">Listing Five</A> (b) is C# code to replace the equivalent Perl in <A NAME="rl5"><A HREF="#l5">Listing Five</A> (a). In Perl, the special variable <i>$_ </i>can be used in place of <i>$drink. </i>The <i>$_ </i>variable is implicitly used by regular expressions, the <i>print</i> function, and <i>foreach</i> loops to make the Perl source code even more terse; see <A NAME="rl5"><A HREF="#l5">Listing Five</A> (c).</p><p>As you can see, C# is more verbose than Perl, but the regex functionality makes C# a nice language to resolve many problems Perl is also suited to solve. Another note about the <i>IsMatch</i> method of the <i>Regex</i> class in the .NET Framework is that there are two versions &#151; the instance method and the static method. If you don't want to instantiate a <i>Regex</i> object, you could use the static method as in <A NAME="rl6"><A HREF="#l6">Listing Six</A>.</p><p><b>DDJ</b></p><H4><A NAME="l1">Listing One</H4><b>(a)</b><pre># Perl@fruit = ("apples", "pears", "bananas", "oranges");# turn the array into one scalar string$line = join("\t", @fruit);print $line, "\n";<b>(b)</b><pre>// C#string[] fruit = {"apples", "pears", "bananas", "oranges"};// turn the array into a single stringstring line = String.Join("\t", fruit);Console.WriteLine(line);</pre><P><A HREF="#rl1">Back to Article</A></P><H4><A NAME="l2">Listing Two</H4><b>(a)</b><pre># Perl$beverages = "orange juice\troot beer\tcoffee\twater";# turn a string into an array@drinks = split("\t", $beverages);foreach $drink (@drinks) {   print $drink, "\n";}<b>(b)</b><pre>// C#string beverages = "orange juice\troot beer\tcoffee\twater";char[] separator = {'\t'};// turn a string into an arraystring[] drinks = beverages.Split(separator);foreach (string drink in drinks) {   Console.WriteLine(drink);}</pre><P><A HREF="#rl2">Back to Article</A></P><H4><A NAME="l3">Listing Three</H4><b>(a)</b><pre>// C#string greeting = "hello";// the following is not allowed: Join is not an instance methodgreeting.Join("\t", fruit); // error// must use the String class name to invoke the static Join methodString.Join("\t", fruit);  // OK<b>(b)</b><pre>// C#string beverages = "orange juice\troot beer\tcoffee\twater";// the following is not allowed: Split is not a static methodString.Split(separator, beverages); // error// must use a String object reference to invoke the Split methodbeverages.Split(separator);         // OK</pre><P><A HREF="#rl3">Back to Article</A></P><H4><A NAME="l4">Listing Four</H4><b>(a)</b><pre># Perl@drinks = ("orange juice", "root beer", "coffee", "water");foreach $drink (@drinks) {   print $drink, "\n";}<b>(b)</b><pre>// C#string[] drinks = {"orange juice", "root beer", "coffee", "water"};foreach (string drink in drinks) {   Console.WriteLine(drink);}</pre><P><A HREF="#rl4">Back to Article</A></P><H4><A NAME="l5">Listing Five </H4><b>(a)</b><pre># Perl@drinks = ("orange juice", "root beer", "coffee", "water");foreach $drink (@drinks) {   print $drink, "\n" if $drink =~ /ee/;}<b>(b)</b><pre>// C#string[] drinks = {"orange juice", "root beer", "coffee", "water"};     Regex regex = new Regex("ee");foreach (string drink in drinks) {   if (regex.IsMatch(drink)) {      Console.WriteLine(drink);   }}<b>(c)</b><pre># Perl@drinks = ("orange juice", "root beer", "coffee", "water");foreach (@drinks) {   print if /ee/;}</pre><P><A HREF="#rl5">Back to Article</A></P><H4><A NAME="l6">Listing Six</H4><pre>// C#string[] drinks = {"orange juice", "root beer", "coffee", "water"};     foreach (string drink in drinks) {   if (Regex.IsMatch(drink, "ee")) {      Console.WriteLine(drink);   }}</pre><P><A HREF="#rl6">Back to Article</A></P></body></html>