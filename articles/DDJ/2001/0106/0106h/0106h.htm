<html>
<head>
<title>Jun01: Creating HTML User Interfaces for Server Programs</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Creating HTML User Interfaces for Server Programs</h1>
<p><i>Dr. Dobb's Journal</i> June 2001</p>
<h2>For both IIS  and Apache</h2>

<h3>By Michael Janulaitis</h3>

<I>
Michael is manager of applications interface services for emWare. He can be contacted at mjanulaitis@emware.com.</I>

<hr>

<p>The success of server programs is dependent on their ability to be remotely managed. Given that clients can run one of many different operating systems, creating a Windows-only or Linux-only solution may not be enough. However, creating native client interfaces for numerous platforms can be very costly. First, you need developers that specialize in each platform you plan to support. Second, you also need installation and testing engineers to tackle your project. Finally, you have to sustain each platform. Sustaining multiple code bases can be a nightmare in itself. For these reasons, many companies have gone to an HTML user-interface (UI) solution.</p>
<p>The HTML UI lets you create one interface into your server application, significantly lowering the total cost of research, development, and sustaining of multiple code bases. Not only are you able to save money and man hours, but users can access the program remotely from any operating system without installing a client interface. Lastly, aside from a few differences in the browser presentation, the UI is identical on all platforms.</p>
<DDJADVERTISEMENT INLINE>

<p>In this article, I'll step you through the process of creating HTML interfaces to server applications. In doing so, I use both Apache Web Server 1.3.14 (Apache) and Microsoft's Internet Information Services 5.0 (IIS). Although I wrote the sample code for Windows 2000, it can be modified to run on Linux and other platforms with minimal changes.</p>



<h3>Overview</h3>


<p>HTTP servers are the engines that serve up Internet content. This content includes, but isn't limited to, HTML files. IIS includes an HTTP server. At this time, IIS only runs on Windows. Apache, on the other hand, runs on many platforms. Apache is an HTTP server originally written for UNIX. Over time, Apache has been ported to other operating systems including Linux and Windows.</p>


<p>Sending a command from a browser to your server application is the same, regardless of the HTTP server you choose. Users send requests to HTTP servers via browsers. When the HTTP server receives the request, it puts the request through a series of filters, if applicable. The HTTP server in this article has one filter. Once the filter determines that the request needs to be handled by a special handler, the request is passed on to that handler. The handler, in this case, determines what command should be sent to the external server application. The command is sent and the server application handles the command via its own internal command handler. Once finished, the server application returns a response to the requester. The requester, or handler, then creates an HTML page in response. Finally, the HTTP server returns the dynamically created HTML page to the remote browser. <A NAME="rf1"></a><A HREF="0106hf1.htm">Figure 1</A> depicts this process.</p>



<h3>Server Application</h3>


<p>Your server application must have an external or preferably a remote application interface. A remote interface lets your users isolate the HTTP server from the application server. I have provided a simple server application with a socket interface. As you can see in <A NAME="rl1"></a><A HREF="#l1">Listing One</A>, the application supports three commands &#151; <i>login</i>, <i>logout</i>, and <i>gettime</i>. </p>


<p>The <i>login</i> function takes a key that can be used for an encryption scheme. <A NAME="rl1"></a><A HREF="#l1">Listing One</A> doesn't do anything with the passed-in key. The server application creates its own key and passes it back to the client. For this sample to work, the key that is passed back must be used when making future requests. You need to create your own encryption scheme. The <i>gettime</i> function validates the request by looking up the passed key in the list of user accounts. If the key exists, the application sends the time back to the client. The <i>logout</i> function validates the request and invalidates the key associated with the user. </p>

<p>This application assumes that all data is received with one call to <i>recv</i>. It also assumes that the correct amount of data is sent and the data received is well formed. To make your code robust, you need to create a protocol handler that lets you only handle valid requests. For example, if a rogue client is attempting to crash the sample code, the application could attempt to invoke a <i>login</i> function without specifying a key, username, or password. If any of the parameters are missing, the sample code may access uninitialized memory, possibly causing a memory read overrun. Clearly, this sort of behavior is not only undesirable but may cause the application to crash.</p>



<h3>HTTP Server</h3>


<p>The HTTP server is really the core of the HTML interface. It lets a request be passed to your handler code, which in turn communicates with your server application. Before you can begin your project, you need to decide which HTTP server to use &#151; Apache or IIS. When I created emWare's HTML interface to its emGateway, an embedded device proxy server, I initially chose Apache. Why? Because like Apache, emGateway runs on Windows as well as Linux. You need to make your decisions based on your customers' requirements. Once you have successfully implemented a solution based on one of these HTTP servers, you will probably want to support the other.</p>


<p>Why not just use CGI to interface with your server application? Using a CGI only solution will enable your customers to run with any HTTP server that supports CGI. However, CGI is optimal on systems where creating a new process is inexpensive. Such is the case with UNIX and Linux. On Windows, firing up a new process is expensive. In an environment where server resources are limited or server responsiveness is important, you want to avoid CGI. You will, however, still pass parameters to the HTTP server via POST/GET methods. Your HTTP server handler routines need to parse these parameters to create the appropriate pages and interface with your server application.</p>



<h3>Cookies</h3>


<p>Again, <i>gettime</i> and <i>logout</i> require a key to authenticate the request. One of the most popular ways to save state information between browsers and servers is to use cookies. One of the problems with cookies is that the state information is saved on the hard drive. Another way to save state information is to use a session cookie. A session cookie is the same as a regular cookie except it resides in memory. When the browser is closed, the cookie is lost. The HTTP server creates session cookies by adding a header to the request response; for example, <i>Set-Cookie: YourData; path=/\r\n.</i> To expire a session cookie, set the expiration date to a prior data; for example, <i>Set-Cookie: YourData; path=/; expires=Thu, 01-Jan-1970 00:00:00 GMT\r\n.</i></p>




<h3>Apache Implementation</h3>


<p>When you install Apache (available at http://www.apache.org/), make sure you install the Web Server Source Code. Installing this source code lets you create Apache modules, and Apache modules let you execute C code when a specific HTTP request is sent to Apache. To interface with your server application, you need to create an Apache module such as  AcmeModule.c (available electronically; see "Resource Center," page 5).</p>


<p>In AcmeModule.c, the <i>acme_module</i> variable defines the callbacks. The first callback in the structure is <i>acme_create_dir_config</i> and lets me initialize the configuration parameters. The <i>acme_cmds</i> structure defines a callback for each configuration parameter. After Apache reads the configuration parameters from the httpd.conf file, the callbacks are called and the values saved. Finally, the <i>acme_handlers</i> structure defines an array of handlers. In this case, only <i>acme_handler</i> is passed back. The handler is called whenever the filter determines the request that needs to be handled by this Apache module.</p>

<p>This can be confusing, but understanding the Apache module framework is the hard part. The rest is easy. The call to <i>ap_get_module_config</i> returns a pointer to the configuration that was saved off at startup. The <i>util_read</i> function reads any data that is sent via a POST method. If the data is sent via a GET method, the <i>request_rec.args</i> structure member points to the data. If the browser passes a cookie, the call to <i>ap_table_get</i> retrieves the value. At this point you have all the data you need.</p>

<p>The <i>handle_request</i> function determines the command and any specified parameters. Once determined, an outgoing packet is created and sent to the awaiting server application. Finally, the server application response is handled. If the user is attempting to log in and the command was successful, a key is passed back to the handler. The handler creates a cookie and sends back a successful HTML page. If the user is attempting to get the time from the server application, the time is returned in string format and an HTML page with the time is created. If the user is attempting to log out of the system, the handler invalidates the cookie and sends back a successful HTML page. If any of the commands fail, a failure HTML page is returned.</p>

<p>After you compile the module you must copy the file to the appropriate directory. On Linux, the module should be copied to /usr/lib/apache. On Windows, the default location is c:\program files\apache group\apache\modules.</p>

<p>At this point, Apache still doesn't know when to call the module. To do this, a filter must be created to enable Apache to redirect the request to the Apache module. To create a filter, you must modify the httpd.conf file. On Linux, this file is located in /etc/httpd/conf. On Windows, the default location is c:\program files\apache group\apache\conf. <A NAME="re1"></a><A HREF="0106he1.htm">Example 1</A> shows the modifications. As mentioned earlier, configuration parameters are needed. These parameters are defined in the httpd.conf file. The port the server application runs on is <i>acmeServerPort</i><b>.</b> I use the value of 28500 for this example. The host the server application is running on is <i>acmeServerHost</i>. Once you have made your modifications to the httpd.conf file, you must restart Apache. Refer to the Apache documentation for more information.</p>

<p>To confirm that the module is working correctly, start the server application. Once the server application is running, open your browser and type:  </p>

<blockquote><p>
http://localhost/acme?cmd=login&amp;user= 		Manny&amp;pswd=manny</p>

</blockquote>

<p>If all the pieces are working correctly, the browser displays "Successfully logged in." To invoke the <i>gettime</i> function, enter: </p>

<blockquote><p>
http://localhost/acme?cmd=gettime</p>

</blockquote><p>Lastly, to log out type:</p>


<blockquote><p>
http://localhost/acme?cmd=logout</p>

</blockquote><p>You can easily modify the sample code to return HTML pages, which include links to the <i>login, gettime, </i>and <i>logout</i> functionality.</p>




<h3>IIS Implementation</h3>


<p>If you don't already have IIS, you need to install and configure it before you can test the sample code. Refer to http://www.microsoft.com/ for more information.</p>


<p>When using IIS you must create an ISAPI extension and filter. Extensions are DLLs that let you execute C/C++ code. Users must explicitly call extensions. For example, to call an extension called "foo.dll" that is located in the Scripts directory, you must specify the URL http://localhost/scripts/foo.dll. Most likely, you won't want to place this burden on your users. For this reason you can create a filter. Among other things, filters let you rewrite the URL that the user specifies. For example, if the user specifies http://localhost/acme?cmd=gettime you can rewrite the URL to be http://localhost/scripts/acme.dll?cmd=gettime. When a filter changes the URL, only IIS is aware of the change. The browser and user never know the difference.</p>

<p>Using Developer Studio 6.0, you can use the ISAPI Extension Wizard to create an extension and filter. On the first page of the wizard, make sure you check "Generate a Filter object." On the second page, check the "Post-preprocessing of the request headers" option. Once you create the project, you are ready to add the handler code.</p>

<p>Open the source code and modify the <i>GetFilterVersion</i> to retrieve the 
  server application host and port from the registry. For this sample, I decided 
  to store the values in global variables. You will want to come up with your 
  own scheme. <A NAME="rl2"></a><A HREF="#l2">Listing Two</A> shows the modifications 
  that I made. To implement the filter code that rewrites the URL, modify the 
  <i>OnPreprocHeaders</i> function. <A NAME="rl3"></a><A HREF="#l3">Listing Three</A> 
  shows the functions I created. Now users are ready to implement the extension 
  code (see <A NAME="rl4"></a>Listing Four; available electronically). The first 
  thing I did was remove the code in the <i>Default</i> function. Using the Class 
  Wizard, I added a handler for the <i>HttpExtensionProc</i> message. In essence, 
  the <i>HttpExtensionProc</i> handler is the same as the <i>acme_handler</i> 
  previously mentioned. </p>

<p>The <i>util_read</i> function returns any parameters that were sent via the POST method. If the parameters were sent via a GET method, the data is retrieved from the QUERY_STRING server variable. The HTTP_COOKIE variable contains any cookies that were sent by the browser. </p>

<p>Once you have retrieved all the sent data, call <i>handle_request</i>. I didn't duplicate the code, but it is virtually the same. The only difference is the first parameter. For the Apache implementation, the server application parameters are retrieved through the Apache API and passed to the <i>handle_request</i> function. In the IIS implementation, the parameters are global variables so they don't need to be passed on the stack. </p>

<p>Once the request and response are handled, the HTTP headers are created. If the user is attempting to log in, the session cookie is created. If the user is attempting to logout, the session cookie is invalidated. The <i>SendHttpHeaders</i> function sends the headers to the browser. The last section of the code sends the HTML content to the browser.</p>

<p>After you finish implementing the code, compile the project and install the filter into IIS. For more information, refer to the IIS documentation. To test the filter and extension, use the same URLs specified earlier.</p>



<h3>Conclusion</h3>


<p>In this article, I've shown how to create the framework to create an HTML interface to your server application. You will still need to do a lot of work to complete your project. For example, you need to decide on a method for secure remote access. You also need to implement a protocol handler library so your extension DLL and Apache module are robust and fool proof against attacks. Finally, you need to create your HTML generation code. This portion is probably the most labor-intensive portion of the entire project (at least it was for me because I'm not an HTML guru). Still, you should be ready to get started on your HTML interface.</p>




<h3>For More Information</h3>


<p>Stein, Lincoln and Doug MacEachern<i>. Writing Apache Modules With Perl and C, </i>O'Reilly &amp; Associates, 1999.</p>


<p></p>




<p><b>DDJ</b></p>

<H4><A NAME="l1"></a>Listing One</H4>


<pre>/* The sample code provided is for Windows only */
/* main.c */


#include &lt;winsock2.h&gt;
#include &lt;conio.h&gt;
#include &lt;stdio.h&gt;
#include "acmeprotocol.h"

/* user entry which contains a key and a name */
typedef struct {
    DWORD key;
    char *user;
    char *pswd;
}USER_T;
/* static list that contains three users */
static USER_T users[] = {
    { 0xFFFFFFFF, "Manny", "manny" },
    { 0xFFFFFFFF, "Moe", "moe" },
    { 0xFFFFFFFF, "Jack", "jack" }
};
int main(int argc, char **argv) {
    ACMEPROTOCOL_T command, response;
    BOOL bQuit = FALSE;
    BYTE *pbt;
    char input, packet[256], *pswd, *user;
    DWORD key, localkey = 0, *pdw;
    int fromlen, i, rc;
    FD_SET fdsErr, fdsRead, fdSet;
    struct sockaddr_in  from, local;
    SOCKET s, msgsock;
    SYSTEMTIME ts;
    struct timeval t = { 1, 0};
    WORD *pw;
    WSADATA wsadata;
    /* create the server */
    if (WSAStartup(MAKEWORD(2,2), &amp;wsadata))
        return -1;
    local.sin_family = AF_INET;
    local.sin_port = htons(28500);
    local.sin_addr.s_addr = htonl(INADDR_ANY);
    s = socket(AF_INET, SOCK_STREAM, 0);
    if(INVALID_SOCKET == s) {
        WSACleanup(); return -1;
    }
    if (bind(s,(struct sockaddr*)&amp;local,sizeof(local) ) == SOCKET_ERROR)
        bQuit = TRUE;    
    if (listen(s,SOMAXCONN) == SOCKET_ERROR)
        bQuit = TRUE;    
    FD_ZERO(&amp;fdSet);
    FD_SET(s, &amp;fdSet);
    while(!bQuit) {
        while(!kbhit()) {         
            memcpy((void*)&amp;fdsRead,(void*)&amp;fdSet, sizeof(fd_set));
            memcpy((void*)&amp;fdsErr, (void*)&amp;fdSet, sizeof(fd_set));
            rc = select(0, &amp;fdsRead, NULL, &amp;fdsErr, &amp;t);
            if (SOCKET_ERROR == rc) {
                bQuit = TRUE;
                break;
            }
            if (!rc)
                continue;            
            if (FD_ISSET(s, &amp;fdsErr)) {
                bQuit = TRUE;
                break;
            }
            if (!FD_ISSET(s, &amp;fdsRead))
                continue;
            fromlen = sizeof(from);
            msgsock = accept(s,(struct sockaddr*)&amp;from, &amp;fromlen);
            if (msgsock == INVALID_SOCKET) {
                bQuit = TRUE;
                break;
            }
            /* Get the command.  Note that the data must be sent in one 
            packet otherwise this program will fail. This program also 
            assumes the correct data is sent. You will need to write a packet 
            handler to deal with these issues */
            rc = recv(msgsock,packet,sizeof(packet),0 );
            if (SOCKET_ERROR != rc &amp;&amp; rc &amp;&amp; 
                rc &gt;= sizeof(ACMEPROTOCOL_T) + sizeof(DWORD)) {
                /* handle the command */
                pbt = packet;
                pw = (WORD*)pbt;
                command.cmd = (WORD)ntohs(*pw);
                pbt += sizeof(WORD);
                pw = (WORD*)pbt;
                command.status = (WORD)ntohs(*pw);
                pbt += sizeof(WORD);
                pdw = (DWORD*)pbt;
                command.size = (DWORD)ntohl(*pdw);
                pbt += sizeof(DWORD);
                pdw = (DWORD*)pbt;
                key = (DWORD)ntohl(*pdw);
                pbt += sizeof(DWORD);

                response.cmd = command.cmd;
                response.status = 0;
                response.size = 0;
                switch (command.cmd)
                {
                case CMD_LOGIN:
                    user = pbt;   /* protocol handler required */
                    pbt += strlen(user) + 1;
                    pswd = pbt;   /* protocol handler required */
                    for (i = 0; i &lt; 3; i++) {
                        if (!strcmp(users[i].user, user)) {
                            if (!strcmp(users[i].pswd, pswd)) {
                                users[i].key = ++localkey;
                                pbt = packet;
                                pbt += sizeof(ACMEPROTOCOL_T);
                                pdw = (DWORD*)pbt;
                                *pdw = htonl(users[i].key);
                                response.size = sizeof(DWORD);
                                response.status = 1;
                            }
                            break;
                        }
                    }
                    break;
                case CMD_LOGOUT:
                    for (i = 0; i &lt; 3; i++) {
                        if (users[i].key == key) {
                            users[i].key = 0xFFFFFFFF;
                            response.status = 1;
                            break;
                        }
                    }
                    break;
                case CMD_GETTIME:
                    for (i = 0; i &lt; 3; i++) {
                      if (users[i].key == key) {
                        GetSystemTime(&amp;ts);
                        pbt = packet;
                        pbt += sizeof(ACMEPROTOCOL_T);
                        _snprintf(pbt, 
                          sizeof(packet) - sizeof(ACMEPROTOCOL_T), 
                          "%02d:%02d:%02d", ts.wHour, ts.wMinute, ts.wSecond);
                        pbt[sizeof(packet) - sizeof(ACMEPROTOCOL_T) - 1] = 0;
                        response.size = strlen(pbt) + 1;
                        response.status = 1;
                        break;
                      }
                    }
                    break;
                }
                pbt = packet;
                pw = (WORD*)pbt;
                *pw = htons(response.cmd);
                pbt += sizeof(WORD);
                pw = (WORD*)pbt;
                *pw = htons(response.status);
                pbt += sizeof(WORD);
                pdw = (DWORD*)pbt;
                *pdw = htonl(response.size);
                pbt += sizeof(DWORD);
                send(msgsock,packet,sizeof(ACMEPROTOCOL_T) + response.size,0);
            }
            closesocket(msgsock);
        }
        input = getch();
        if (input == 'q')
            break;
    }
    closesocket(s); 
    WSACleanup(); 
    return 0;
}
/* acmdprotocol.h */
#ifndef ACMEPROTOCOL_H
#define ACMEPROTOCOL_H
typedef struct {
    WORD cmd;
    WORD status;
    DWORD size;
}ACMEPROTOCOL_T;
typedef enum {
    CMD_LOGIN, CMD_LOGOUT, CMD_GETTIME,
}CMD;
#endif
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2"></a>Listing Two</H4>


<pre>static char g_host[256];
static WORD g_port = 28500;
BOOL CAcmeISAPIFilter::GetFilterVersion(PHTTP_FILTER_VERSION pVer)
{
    // Call default implementation for initialization
    CHttpFilter::GetFilterVersion(pVer);
    // Clear the flags set by base class
    pVer-&gt;dwFlags &amp;= ~SF_NOTIFY_ORDER_MASK;
    // Set the flags we are interested in
    pVer-&gt;dwFlags |= SF_NOTIFY_ORDER_LOW | SF_NOTIFY_SECURE_PORT |
                     SF_NOTIFY_NONSECURE_PORT | SF_NOTIFY_PREPROC_HEADERS;
    // Load description string
    TCHAR sz[SF_MAX_FILTER_DESC_LEN+1];
    ISAPIVERIFY(::LoadString(AfxGetResourceHandle(),
            IDS_FILTER, sz, SF_MAX_FILTER_DESC_LEN));
    _tcscpy(pVer-&gt;lpszFilterDesc, sz);
    DWORD   port, type, size;
    HKEY    hKey; 
    g_host[0] = 0;
    // Open the registry
    if (ERROR_SUCCESS != RegOpenKeyEx(HKEY_LOCAL_MACHINE, 
                               _T("software\\acme"), 0, KEY_READ, &amp;hKey))
        return FALSE;
    // Get the server application host
    size = sizeof(g_host);
    if (ERROR_SUCCESS != RegQueryValueEx(hKey, _T("host"), 
                                       0, &amp;type, (BYTE*)&amp;g_host, &amp;size)) {
        RegCloseKey(hKey);
        return FALSE;
    }
    // Get the mas port
    size = sizeof(port);
    if (ERROR_SUCCESS != RegQueryValueEx(hKey, _T("port"), 
                                      0, &amp;type, (BYTE*)&amp;port, &amp;size)) {
        RegCloseKey(hKey);
        return FALSE;
    }
    g_port = (WORD)port;
    // Close the registry
    RegCloseKey(hKey);     
    return TRUE;
}
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3"></a>Listing Three</H4>


<pre>DWORD CAcmeISAPIFilter::OnPreprocHeaders(CHttpFilterContext* pfc, 
                                    PHTTP_FILTER_PREPROC_HEADERS pHeaders) 
{
    TCHAR url[256], newurl[256], *test;
    DWORD size = sizeof(url);
    if (pHeaders-&gt;GetHeader(pfc-&gt;m_pFC,_T("URL"),url,&amp;size)) {
        test = _tcsstr(url, _T("/acme"));
        if (test) { 
            test += _tcslen(_T("/acme"));
            if (test[0]) {
                _sntprintf(newurl, 256, _T("/Scripts/AcmeISAPI.dll%s"), test);
                newurl[255] = 0;
            } else
                _tcscpy(newurl, _T("/Scripts/AcmeISAPI.dll"));
            pHeaders-&gt;SetHeader(pfc-&gt;m_pFC, _T("URL"), newurl);
        }
    }
    return CHttpFilter::OnPreprocHeaders(pfc, pHeaders);
}


</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>


</body>
</html>
