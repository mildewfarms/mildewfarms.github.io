<html><head><title>Dec01: The Menuet Operating System</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>The Menuet Operating System</h1><p><i>Dr. Dobb's Journal</i> December 2001</p><h2>Packing a lot of punch into a small package</h2><h3>By Ville Mikael Turjanmaa</h3><I>Ville is a computer science student in Finland. He can be contacted at <a href="mailto:villemt@cc.jyu.fi">villemt@cc.jyu.fi</a>.</I><hr><p>Menuet is a small multitasking real-time operating system with a graphical user interface; see <A NAME="rf1"><A HREF="0112bf1.htm">Figure 1</A>. Written entirely in x86 32-bit assembly language, I designed Menuet to fit on a single 1.44-MB floppy diskette, requiring only an 80386 (or greater) CPU, 32 MB of RAM, and mouse. Menuet provides protection for memory and code, runs at 16 million colors and at 44.1-KHz sound, and currently supports the Fat12 and Fat32 filesystems. Menuet is freely available at <a href="http://www.menuetos.org/">http://www.menuetos.org/</a> and from <i>DDJ</i> (see "Resource Center," page 5) and distributed under the GPL. The system includes a 32-bit assembler, text editor application, demos, and other relevant information.</p><p>Among my design principles is the belief that the more complex an operating system is, the more likely it is to have bugs. That's why most of Menuet's functions are implemented as in a monolithic kernel, rather than a microkernel (see <A NAME="rf2"><A HREF="0112bf2.htm">Figure 2</A>). And since complexity can lead to poor performance, another of my goals with Menuet was to get rid of the built-in layers between applications and hardware that slow down and complicate programming.</p><DDJADVERTISEMENT INLINE><p>Developing Menuet with 16-bit assembly language would have been a very complex task. However, 32-bit assembly language, with its six registers and linear memory access, makes programming a relatively straightforward task. Because of this, if you want to use other operating system applications in Menuet, the best place to start would be by writing a layer outside the OS, much like Wine has done with the Win32 API.</p><p>Menuet lets you use both event-based and real-time processing. System functions are accessed using<i> int 0x40</i> with the function number in register <i>eax</i>. Other parameters are in other registers or a memory table. When creating Menuet-based applications, your main focus should be on the <i>system_event</i> function. System events can include buttons, keys, IRQs, and the like. You have three different accesses to events: wait for event (function 10), ask for event without wait (function 11), and time limited wait (function 23). By the time an event happens you will receive the event type in <i>eax</i>.</p><p>Functions 10, 11, and 23 return the event type in <i>eax</i>. For a key press it's 2, for a button it's 3. When an <i>event_button</i> occurs, you can ask for the button number from the system via function 17, which returns with the button ID saved in <i>ah</i>. If there is a key in buffer, you can ask the ASCII value with function 2, which returns the ASCII value in <i>ah</i>. If there are no events in buffer, functions 2 and 17 set <i>al</i> to 1.</p><p>There are three event types that are set as the default: key press, button press, and window draw. Applications are expected to handle these three by default. When the <i>window_draw</i> event occurs, the OS is requesting the application to redraw its contents since there has been some activity on screen and some parts of the application has to be drawn.</p><p>The place to start when programming the Menuet API is to draw the window so that you have a canvas onscreen. The <i>draw_window</i> function starts with acknowledging the OS for window draw. Next, use function 0 with appropriate parameters to set the window position, size, and colors. This function draws the basic UI (text and buttons). Buttons are set with function 8, which takes the color, coordinates, and button ID number as inputs. When the button is pressed, the OS acknowledges the application with a <i>system_event</i> and the button ID can be fetched. Text is drawn using function 4, which takes position, text, and color as input.</p><p>Data and code can be mixed, and you can use self-modifying code since the segments are set to the same base address. Overall, the general coding scheme for application involves assembly coding similar to other environments.</p><p>Among my future plans for Menuet is to enhance compatibility, add support for TCP/IP protocol, and port the kernel to the Flat Assembler (FASM; <a href="http://www.programmersheaven.com/zone5/code25/">http://www.programmersheaven.com/zone5/code25/</a>) so that external compilers will no longer be needed.</p><p><b>DDJ</b></p></body></html>