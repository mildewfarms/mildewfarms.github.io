<html><head><title>Apr03: Programmer's Bookshelf</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>Parkinson's Other Law</h1><p><i>Dr. Dobb's Journal</i> April 2003</p><h3>By Gregory V. Wilson</h3><I>Greg, a DDJ contributing editor, is the author of Practical Parallel Programming (MIT Press, 1995), and currently works on access control software for Baltimore Technologies in Toronto. Greg can be reached at gvwilson@ddj.com.</I><hr><h4><br><b>Creating  Applications  With Mozilla</b><i><br>David Boswell, Brian King, Ian Oeschger, Pete Colins, and Eric Murphy</i><br>O'Reilly &amp; Associates, 2002<br>454 pp., $39.95<br>ISBN 0596000529<br><b><br>Java NIO</b><i><br>Ron Hitchens</i><br>O'Reilly &amp; Associates, 2002<br>282 pp., $34.95<br>ISBN 0596002882<br><b><br>Performance Analysis  For Java Web Sites</b><i><br>Stacy Joines, Ruth Willenborg,  and Ken Hygh</i><br>Addison-Wesley, 2003<br>425 pp., $49.99<br>ISBN 0201844540<br><b><br>Herding Cats:  A Primer for Programmers  Who Lead Programmers</b><i><br>J. Hank Rainwater </i><br>Apress, 2002<br>252 pp., $34.95<br>ISBN 1590590171<br></h4><p>Most people know Parkinson's First Law, which states that work expands to fill the time available. Fewer people have heard his Second Law: "Perfection is achieved only at the point of collapse." Based on my own experience, this is a fundamental rule of software. By the time a language or application does everything that its users want it to do, it has become so complicated that it is starting to fall apart.</p><p>I was reminded of the Second Law while reading <i>Creating Applications with Mozilla</i>, by David Boswell, Brian King, Ian Oeschger, Pete Colins, and Eric Murphy. As the blurb on the back cover says, Mozilla is more than just a browser. It is a complete application framework built on JavaScript, Cascading Style Sheets (CSS), an XML format for specifying GUIs called XUL, another XML format for binding actions to components, and a new component model called XPCOM. This is all very cool, and I'm sure each element's existence can be justified, but the result is significantly more complex than other systems that achieve the same ends.<i></p><DDJADVERTISEMENT INLINE><p>Creating Applications with Mozilla</i> does its best to make Mozilla comprehensible, but it is certainly an uphill struggle. After a quick introduction, the book tackles each of Mozilla's components in successive chapters: XUL, CSS, scripting, packaging and installing, XBL, XPCOM, and so on. There are plenty of examples and screenshots along the way, and a good index, but I really did get the feeling that I was reading about the world's biggest, most complicated steam engine, when the internal combustion era had already arrived.</p><p>Java's New I/O (NIO) package is not nearly as complex as Mozilla, although that doesn't mean it is simple. Like many programmers, I have always felt that Java I/O was more painful than it needed to be. The NIO package doesn't make simple things any simpler, but it does (finally) add regular expressions, nonblocking multiplexed streams, and (my favorite) scattered reads and writes.</p><p>Ron Hitchens's <i>Java NIO</i> explains these new facilities clearly and succinctly. Most of the content is available in the API documentation, but Hitchens organizes and illustrates it to make it more accessible. I found Chapter 4, on Selectors, particularly helpful, while Chapter 5 (regular expressions) did a good job of clarifying the differences between regular expressions in Java and in Python.</p><p>One of the reasons the NIO package exists is that low performance is still a major headache for Java programmers. You often hear claims that Java's performance is approaching that of C++, but the difference in reality is still often a factor of two or three. <i>Performance Analysis for Java Web Sites</i>, by Stacy Joines, Ruth Willenborg, and Ken Hygh, looks at the various factors that determine the speed of a Java-based web site, from garbage collection and multithreading inside the JVM to the performance of JSPs and EJBs and the impact of routers and firewalls. The authors' focus is on how to figure out where the bottlenecks are, rather than on tricks for fixing particular problems. Measurement and testing are major parts of their methodology, using both off-the-shelf tools and custom harnesses. The book is practical, down-to-earth, and well written; the only thing that is missing are exercises at the end of each chapter, so that it can be used as a textbook.</p><p>Last, and definitely least, is Hank Rainwater's <i>Herding Cats: A Primer for Programmers Who Lead Programmers</i>. This is, quite simply, a bad book. Its references to <i>Star Wars</i> are tiresome, while the author's attempt to bring Hitler and 9/11 into the discussion are both pretentious and offensive. Equally offensive is his advice to put bad programmers in testing (now doesn't that show a lot of respect for QA?), and comments like, "If you were a woman..." Perhaps his editors should have reminded the author that many programmers <i>are</i> women, or better still, perhaps they should have found a different book to publish.</p><p><b>DDJ</b></p></body></html>