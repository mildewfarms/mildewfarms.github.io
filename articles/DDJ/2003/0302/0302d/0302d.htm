<html>
<head>
<title>Feb03: A Java-Based Music Player For MP3, Ogg, & WAV</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>A Java-Based Music Player For MP3, Ogg, &amp; WAV</h1>
<p><i>Dr. Dobb's Journal</i> February 2003</p>
<h2>Putting the JavaSound API to work</h2>

<h3>By Sing Li</h3>

<I>
Sing is an author and consultant, and his most recent book is Early Adopter JXTA: P2P Java (Wrox Press, 2001). He can be reached at westmakaha@yahoo.com.</I>

<hr>

<p>The speed of today's desktop PCs coupled with breakthroughs in Java Virtual Machine (VM) optimization technology opens the door to Java-based, real-time signal processing, like that required by digital music players. In this article, I'll examine the design and construction of a digital music player written in Java that supports real-time decoding/playback of music in MP3, WAV, and Ogg Vorbis formats. In the process, I'll also explore audio programming using the JavaSound API.</p>
<p>JavaSound is a lightweight, low-level programming API that supports recording/playback of digital audio and MIDI data. Beginning with Java 2 Version 1.3.0, JavaSound is part of the base JDK distribution. Any JavaSound-based audio application (such as my music player) should run without additional software downloads or installation on any Java 1.3.x implementation across operating system and hardware platforms. Before JDK 1.3.0, JavaSound was a standard Java extension API. However, the JavaSound API is currently available for JDK 1.1 (and later) through the Java Media Framework (JMF) distribution (http://java.sun.com/products/java-media/jmf/). There is also an open-source JavaSound implementation (http://www.tritonus.org/), which was written to provide Linux support.</p>
<DDJADVERTISEMENT INLINE>



<h3>JavaSound Architecture</h3>


<p><A NAME="rf1"><A HREF="0302df1.htm">Figure 1</A> illustrates the general architecture of the JavaSound API. The thick dotted lines indicate the API calls specified by Sun Microsystem's JavaSound standard. The one at the top is the API you write to. The JavaSound APIs are contained in the javax.sound.sampled and javax.sound.midi packages. The area in the middle of <A NAME="rf1"><A HREF="0302df1.htm">Figure 1</A> is the actual implementation of the JavaSound API. </p>


<p>Like the API on top, the Service Provider Interface (SPI) is standardized across all implementations of JavaSound. The SPI is created to support customized extensions in the form of plug-ins. By coding plug-ins extensions compatible with this SPI, you can extend the features of the JavaSound implementation without modifying the implementation itself. The SPI is contained in the javax.sound.sampled.spi and javax.sound.midi.spi packages.</p>

<p>One interesting outcome of this architecture is the ability to extend JavaSound features without affecting existing applications. In fact, you can add features to applications without changing the code. For example, consider a music player application that supports only WAV-file playback. By adding a plug-in module supporting the decoding of MP3 files, you can add MP3 playback as a feature to the player&#151;without changing a single line of code in the player itself.</p>

<p>Also, well-designed SPI extensions (plug-ins) are independent of both the JavaSound implementation and the platform. Take, for example, a plug-in that supports the decoding of MP3 encoded music files written to the JavaSound SPI. When coded in 100-percent Java, this plug-in is compatible with all JavaSound implementations across the hardware/software platform. <A NAME="rf2"><A HREF="0302df2.htm">Figure 2</A> shows how the same plug-in code can run across three completely different platforms and operating systems.</p>



<h3>JavaSound Basics</h3>


<p><A NAME="rf3"><A HREF="0302df3.htm">Figure 3</A> illustrates a JavaSound-based audio mixer. For audio input applications, the mixer can be used to control input mixing from a set of audio input ports (one or more microphones, line-in, CD player, tape player, or whatever) before it reaches the <i>TargetDataLine</i>&#151;a line from which you can obtain an incoming digitized stream of audio programmatically. </p>


<p>For audio output applications, the mixer is used to control the mixing of a set of <i>SourceDataLines</i> before it is played through a set of output ports (speakers, headphones, line-out, and so on). <i>SourceDataLine</i> is a line from which you can send a digitized stream of audio data. For example, you can read a WAV file and write to a <i>SourceDataLine</i> for playback over a pair of speakers. Alternatively, the input to the mixer can also be sourced from a clip&#151;a special type of data line that you can load a complete stream of audio data into. In practice, a clip is a completely in-memory buffered stream of audio data. Clips are useful for applications requiring repeated playing of different audio segments (background music for games, for instance).</p>

<p><A NAME="rf4"><A HREF="0302df4.htm">Figure 4</A> shows the relationships among some of the frequently used interfaces and classes in the JavaSound API. The <i>Line </i>interface unifies all of the classes in <A NAME="rf4"><A HREF="0302df4.htm">Figure 4</A>. This base interface provides access to controls (objects that can be used to vary the audio quality; for instance, gain control for volume manipulations), lets lines be opened/ closed, and handles event-listening registration. The <i>AudioSystem</i> class serves as a class factory in JavaSound, containing a set of static methods (methods that can be called without creating an instance of an <i>AudioSystem</i>) that you can use to create or obtain JavaSound resources from a default configuration. Incidentally, the default configuration for the current implementation of JavaSound (as of JDK 1.4) is to input sound from the local soundcard's microphone, and output sound to speakers attached to the local soundcard. The support for ports and mixer in this implementation of JavaSound is incomplete. However, this default configuration suffices for many audio applications, including this music player.</p>



<h3>Audio Data and Storage Formats</h3>


<p>Sampled digital audio data&#151;those coming in via <i>TargetDataLine</i> or going out on <i>SourceDataLine</i>&#151;must be in standard audio formats. The <i>AudioFormat</i> class encapsulates the parameters that specify an audio format. These parameters include: encoding used, Pulse Code Modulation (PCM), or MPEG-1 Audio Layer 3 (MP3) or other encoding; the number of channels, sample rate, bits per sample, frame rate and size; and byte ordering. </p>


<p>When audio data is stored on disk, there are several file formats you can use. The JavaSound reference implementation includes support for the WAV (Windows), AIFF (Apple Macintosh), and AU (UNIX) file formats. These formats can be specified using the <i>AudioFileFormat</i> class. Not all audio data formats can be stored in (or played back from) all audio file formats&#151;the specifics are highly platform and OS dependent. In this player, I only consider WAV files that contain PCM mono or stereo data. This is a popular audio data/file-format combination, and often used for CD-quality music data. Compressed audio encoding (such as MP3 and Ogg Vorbis) typically have their own file storage format (.MP3 and .OGG, respectively), and usually are not stored in WAV/AIFF/AU format.</p>



<h3>Designing the Music Player</h3>


<p>The music player I present here (<A NAME="rf5"><A HREF="0302df5.htm">Figure 5</A>) consists of several interoperating classes; see <A NAME="rt1"><A HREF="0302dt1.htm">Table 1</A>. The GUI consists of a Swing JFrame with menu, JList called <i>filenamesList</i>, and set of JButtons. <i>PlayerFrame</i> has a private <i>PlayerBase</i> member; this <i>PlayBase</i> instance is instantiated at the end of the <i>GUIInit()</i> method:</p>


<blockquote><p>
pBase = new PlayerBase();</p>

</blockquote>

<p>Each button in the GUI is created in the code similar to <A NAME="rl1"><A HREF="#l1">Listing One</A>. The <i>addButtonIconText()</i> method is a private method that places the icon graphics above the text label of the button. The icon graphics are standard Java graphics from the Java Look-and-Feel Graphics Repository (http://developer.java.sun.com/developer/ techDocs/hi/repository/). When these buttons are pressed, an <i>xxxxClicked()</i> event-handling function is called. The <i>playClicked()</i> handler gets the selected file from the <i>JList</i>, and calls a helper <i>playFile()</i> method in the <i>PlayerBase</i> instance. </p>

<p><A NAME="rl2"><A HREF="#l2">Listing Two</A> shows the operating-system-independent way of concatenating the music directory and the filename to form the path of the file to be played. The <i>stopClicked()</i> and <i>pauseClicked()</i> methods call the corresponding <i>stop()</i> and <i>pause()</i> method in <i>PlayerBase</i>; see <A NAME="rl3"><A HREF="#l3">Listing Three</A>. The <i>prevClicked()</i> and <i>nextClicked()</i> methods perform multiple steps in their task. First, they stop the player via the <i>stop()</i> method in <i>PlayerBase</i>, then adjust the currently selected item in the <i>JList</i> by advancing or moving backwards the selection. Finally, it calls <i>playClicked()</i> to play the newly selected entry; see <A NAME="rl4"><A HREF="#l4">Listing Four</A>.</p>



<h3>Coding the Player Logic</h3>


<p>The <i>PlayerBase</i> class manages the logic of the music player. The code in the <i>play()</i> method (<A NAME="rl5"><A HREF="#l5">Listing Five</A>), called when the Play button is clicked, shows how it is carried out.</p>


<p>First, the code in <i>play()</i> checks to make sure that the player is stopped, not paused. Then it determines if it is the first time that <i>play()</i> has been called. If it is, it creates a thread, <i>playerThread</i>, which is passed a reference to the <i>PlayerBase</i> instance itself. This is possible because <i>PlayerBase</i> implements the <i>Runnable</i> interface. You need to use a separate thread to handle playing to keep the GUI responsive while the thread reads from the file, decodes, and writes audio data to the speaker.</p>

<p>After starting the thread, the <i>play()</i> method seizes the monitor on the static synch object, sets the stopped flag to False, and notifies the waiting thread (<i>playerThread</i> will be waiting for a notify on the static "synch" monitor before starting to play). </p>

<p>If you now check the <i>run()</i> method in <i>PlayerBase</i>, <A NAME="rl6"><A HREF="#l6">Listing Six</A> is the newly created thread executing. This thread loops until the <i>threadExit</i> flag becomes True: it starts up, waits to be signaled (which happens when someone clicks the Play button), then plays the music. <A NAME="rt2"><A HREF="0302dt2.htm">Table 2</A> lists the flags that maintain the player's state information.</p>



<h3>Playing Music from a WAV File</h3>


<p>The <i>playMusic()</i> method is where you use JavaSound to play the selected file. To do this, first use the <i>AudioSystem</i> class to obtain an <i>AudioInputStream</i> (variable <i>ais</i>) based on the file:</p>


<blockquote><p>
ais= AudioSystem.getAudioInputStream(new 		      File(fileToPlay));</p>

</blockquote>

<p>Then, get the audio data format of the file using the <i>getFormat()</i> method of the <i>AudioInputStream</i>. Using this format, you try to get a <i>SourceDataLine</i> that supports the format using the <i>getLine()</i> method in <A NAME="rl7"><A HREF="#l7">Listing Seven</A>. If you are dealing with WAV files, the audio data is now in uncompressed PCM format and you can begin using the line that is obtained to play the audio data read from the <i>AudioInputStream </i>(<i>ais</i>). </p>



<h3>Playing Music from  A Compressed Audio File</h3>


<p>If you are working with compressed audio (MP3 and/or Ogg Vorbis), however, <A NAME="rl7"><A HREF="#l7">Listing Seven</A> won't work because you need to perform a transformation first&#151;decoding MP3/Ogg Vorbis to PCM. You do this with code like <A NAME="rl8"><A HREF="#l8">Listing Eight</A> (see the <i>play()</i> method) does this:</p>


<p></p>

<p>1. Creates a custom <i>AudioFormat</i> that is the outcome of the decompression&#151;PCM encoded, but maintains the same sample rate and channel information as the compressed stream.</p>

<p>2. Creates an <i>AudioInputStream</i> that converts the original <i>AudioInputStream</i> into the new <i>AudioFormat</i>.</p>

<p>3. Gets a <i>SourceDataLine</i> that handles the decoded format.</p>

<p></p>



<h3>Obtaining a  Compatible <i>SourceDataline</i></h3>


<p><A NAME="rl7"><A HREF="#l7">Listing Seven</A> includes the <i>getLine()</i> helper method, which gets a <i>SourceDataLine</i> compatible with the <i>AudioFormat</i> that is passed in. Null is returned if no compatible <i>SourceDataLine</i> can be obtained. To get a compatible line, you must fill in a DataLine.info structure and pass it to the <i>AudioSystem</i> class factory via a call to <i>AudioSystem.getLine()</i> method. <A NAME="rl9"><A HREF="#l9">Listing Nine</A> is my <i>getLine()</i> method. Note how a <i>DataLine.info</i> instance is created.</p>


<p>The rest of the <i>playMusic()</i> method contains a loop that reads from the <i>AudioInputStream</i> and writes to the <i>SourceDataLine</i>.</p>



<h3>Extending JavaSound with SPI</h3>


<p>To compile the source, you can use the compile.bat file (easily modifiable for UNIX use). From the code directory of the distribution, you can also use the command line javac com/ddj/ddjplayer/*.java. After compiling, run the player using java com.ddj.ddjplayer.DdjPlayer. The player works, but only plays the sample WAV file because the JDK JavaSound implementation only supports WAV, AIFF, and AU. You can use the JavaSound SPI to add MP3 and Ogg Vorbis support to the player, but it needs the JAR files plug-in from open-source projects to do this.</p>

<p>To get these files, download the 100-percent Java Vorbis decoder from JavaCraft (http://www.jcraft.com/jorbis/). The most recent available version at the time of writing is 0.0.12. Next, there is an SPI wrapper for the JOrbis decoder; this is the glue that makes the decoder work with JavaSound transparently. You can find binaries for this project at JavaZoom (http://www.javazoom.net/vorbisspi/vorbisspi.html). The most recent available version of VorbisSPI at the time of writing is 0.6. Finally, you also need to provide MP3 support. JavaZoom also has a JavaSound-compatible, 100-percent Java decoder called JavaLayer (http://www.javazoom.net/javalayer/javalayer.html). The latest available version of JavaLayer at the time of writing is 0.2.0. Be sure that you download the classic version of JavaLayer (not the J2ME version).</p>

<p>After you've extracted all the binaries from the downloaded OSS projects, place all the JAR files in the code directory of the source distribution for this article. Start the player using the command line: <i>java -classpath .;.\jogg-0.0.5.jar;.\jorbis-0.0.12.jar;.\jl020.jar;.\mp3sp.jar;.\vorbisspi0.6.jar com.ddj.ddjplayer.DdjPlayer</i>. You may need to change the version numbers if you are downloading later versions of the libraries and plug-ins. By including the SPI extensions in the player's classpath, the JavaSound run time automatically locates and uses them. The source code for the player (available electronically) includes three audio files for test: a WAV file, MP3 file, and OGG file (under the music directory). </p>



<h3>Conclusion</h3>


<p>The JavaSound API makes it easy to incorporate audio features into any application. Likewise, the Service Provider Interface (SPI) lets you extend and enhance JavaSound's audio format-handling capability without requiring application code changes. </p>


<p></p>


<p><b>DDJ</b></p>
<H4><A NAME="l1">Listing One</H4>


<pre>JButton pauseButton;
 ...
addButtonIconText(pauseButton, "Pause", "Pause24.gif");
     playButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        playClicked(e);
      }
    });
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two</H4>


<pre>void playClicked(ActionEvent e) {
   String fileToPlay = (String) filenamesList.getSelectedValue();
   if (fileToPlay != null) {
        pBase.playFile(searchDir + 
            System.getProperty("file.separator") + fileToPlay);
   }
  }
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3">Listing Three</H4>


<pre>void stopClicked(ActionEvent e) {
   pBase.stop();
  }
void pauseClicked(ActionEvent e) {
   pBase.pause();
  }
</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>
<H4><A NAME="l4">Listing Four</H4>


<pre>  void prevClicked(ActionEvent e) {
    pBase.stop();
    filenamesList.setSelectedIndex(   filenamesList.getSelectedIndex() - 1);
    playClicked(e);
  }
  void nextClicked(ActionEvent e) {
    pBase.stop();
    filenamesList.setSelectedIndex((filenamesList.getSelectedIndex()+1) 
                                                     % curPlayListLength);
   playClicked(e);
  }
</pre>
<P>
<A HREF="#rl4">Back to Article</A>
</P>
<H4><A NAME="l5">Listing Five</H4>


<pre>public void play() {
   if ((!stopped) || (paused)) return;
   if (playerThread == null)  {
     playerThread = new Thread(this);
     playerThread.start();
     try { Thread.sleep(500); 
               } catch (Exception ex) {}
     }
    synchronized(synch) {
              stopped = false;
              synch.notifyAll();
      }
  }
</pre>
<P>
<A HREF="#rl5">Back to Article</A>
</P>
<H4><A NAME="l6">Listing Six</H4>


<pre>public void run() {
    while (! threadExit)  {
       waitforSignal();
       if (! stopped)
           playMusic();
       }
  }
</pre>
<P>
<A HREF="#rl6">Back to Article</A>
</P>
<H4><A NAME="l7">Listing Seven</H4>


<pre>if (ais != null)  {
  baseFormat = ais.getFormat();
line = getLine(baseFormat);
  ...
  }
</pre>
<P>
<A HREF="#rl7">Back to Article</A>
</P>
<H4><A NAME="l8">Listing Eight</H4>


<pre>AudioFormat  decodedFormat = new AudioFormat(
    AudioFormat.Encoding.PCM_SIGNED,
    baseFormat.getSampleRate(),
    16,
    baseFormat.getChannels(),
    baseFormat.getChannels() * 2,
    baseFormat.getSampleRate(),
    false);
ais = AudioSystem.getAudioInputStream(decodedFormat, ais);
line = getLine(decodedFormat);
</pre>
<P>
<A HREF="#rl8">Back to Article</A>
</P>
<H4><A NAME="l9">Listing Nine     </H4>


<pre>private SourceDataLine getLine(AudioFormat audioFormat)  {
        SourceDataLine res = null;
            DataLine.Info info = new DataLine.Info(SourceDataLine.class,
                                                           audioFormat);
    try  {
       res = (SourceDataLine) AudioSystem.getLine(info);
       res.open(audioFormat);
      }
    catch (Exception e) {
     }
      return res;
  }
</pre>
<P>
<A HREF="#rl9">Back to Article</A>
</P>


</body>
</html>
