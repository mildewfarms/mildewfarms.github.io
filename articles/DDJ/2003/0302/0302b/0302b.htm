<html>
<head>
<title>Feb03: Testing Java Interfaces with JUnit</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Testing Java  Interfaces with JUnit</h1>
<p><i>Dr. Dobb's Journal</i> February 2003</p>
<h2>Writing tests for  inherited logic</h2>

<h3>By Matt Albrecht</h3>

<I>
Matt is a senior QA engineer for Zilliant and can be contacted at groboclown@users.sourceforge.net.</I>

<hr>

<p>JUnit is a freely available Java framework built by Erich Gamma and Kent Beck (http://www.junit.org/). In general, JUnit's design encourages good testing habits by moving much of the menial bookkeeping to the automated system. However, JUnit does not provide an easy way to write tests for testing subclasses. Some developers cut-and-paste their tests between test classes, which makes the tests hard to maintain. Others attempt to subclass one test from another, which does not scale when interfaces need testing. If you intend to make your tests maintainable and robust, then they need a design just as much as the core system.</p>
<p>The GroboUtils project (http://groboutils.sourceforge.net), a project that I maintain, is a collection of useful Java utilities. Included in these utilities is the GroboUtils JUnit Extension (GJE) that helps you write tests for inherited logic. Among other features, GJE helps reflect the source structure in the tests&#151;if a class extends a class and/or implements an interface, then so do its test suites.</p>
<DDJADVERTISEMENT INLINE>



<h3>The JUnit Extension</h3>


<p>The standard use for JUnit Version 3.7 test cases typically involves creating a class that contains test methods covering the features for a specific development class. This test class includes a public static method named <i>suite()</i>, which creates a <i>junit.framework.TestSuite</i> instance containing all the tests covered by the test case. <i>TestSuite</i> contains logic to parse test classes into separate instances, one for each test method. <i>TestSuite</i> creates each instance of the test class by passing the test method name to the test class's constructor. (In this article, I use the term "test suite" to refer to the group of tests created by a test class's static <i>suite()</i> method, and "concrete test classes" to refer to traditional JUnit test classes. I also refer to the nontest classes as "project classes," which are the set of classes being tested. JUnit Version 3.8.1 has slightly different requirements.)</p>


<p>GJE (available electronically, see "Resource Center," page 5) lets all test classes define an inheritance hierarchy used by the project class under test. For example, a test class for the <i>javax.swing.JComboBox</i> class in the Java Foundation Classes could define that it inherits all tests from the <i>java.awt.event.ActionListener</i> interface and the <i>javax.swing.JComponent</i> class. I refer to these inheritance hierarchy tests as "inherited test classes;" see <A NAME="rf1"><A HREF="0302bf1.htm">Figure 1</A>.</p>

<p>These inherited test classes use an externally instantiated factory to create instances of the project class under test. Thus, abstract classes and interfaces can define tests that rely on the factory, and concrete tests can add specific factories to the inherited test classes to test for compatibility with the concrete class. Since concrete test classes can associate multiple factories per inherited test class, they can ensure that many different initial states of the concrete class all behave in accordance with the inherited specification. This means that each inherited test can run in the concrete class's context. <A NAME="rf2"><A HREF="0302bf2.htm">Figure 2</A> is the public GJE UML diagram.</p>



<h3>Using GJE</h3>


<p><i>Sample1</i> (all sample code is available electronically) is a simple interface that presents a contract to all implementations, telling them that they must throw an <i>IllegalArgumentException</i> when receiving a Null argument&#151;something that should be tested for in all implementations. The corresponding test class for this interface, <i>Sample1TestI</i> (Sample1TestI.java), has the same general form as a standard JUnit test. One test method, <i>testAddString1()</i>, passes a <i>Null</i> value to an instance of the interface, and ensures that an <i>IllegalArgumentException</i> was thrown, while the other test method, <i>testAddString2()</i>, ensures that no exception is thrown when the test passes an empty string to the instance. (You should not consider any of the test classes presented here a thorough test.)</p>


<p>But since I declared Sample1 as an interface, it cannot be instantiated. So the test class inherits from <i>net.sourceforge.groboutils.junit.v1.iftc.InterfaceTestCase</i> (itself a subclass of <i>junit.framework.TestCase</i>). The constructor for <i>InterfaceTestCase</i> requires as a parameter a factory that knows how to create the particular instance of the interface, and subclasses of <i>InterfaceTestCase</i> can access this factory through the method <i>getImplObject()</i>. <i>InterfaceTestCase</i> performs assertions on the factory-created object to ensure it does not equal <i>Null</i>, and it is an instance of the class passed into the constructor, which, in this case, is <i>Sample1</i>.</p>

<p>Standard JUnit provides the <i>java.framework.TestSuite</i> class to parse test classes into individual tests. <i>TestSuite</i>'s parsing behavior creates a new instance of the test class for every discovered test method, passing the name of the method to the test class's constructor. Each test class should provide a static <i>suite()</i> method to return a collection of tests for itself. A standard JUnit test class may define the <i>suite()</i> method as:</p>

<blockquote><p>
return new TestSuite( Sample1TestI.class );</p>

</blockquote>

<p>Instead of using <i>TestSuite</i>, Sample1TestI uses the GJE <i>InterfaceTestSuite</i> class (see <A NAME="rl1"><A HREF="#l1">Listing One</A>; also available electronically), which can parse both standard JUnit test classes as well as <i>InterfaceTestCase</i>-style classes. Just as with <i>TestSuite</i>, test classes don't have to extend <i>InterfaceTestCase</i> for <i>InterfaceTestSuite</i> to recognize the test classes as interface tests, as long as the test class provides a constructor in the correct form: <i>'( String, ImplFactory )'</i>.<i></p>

<p>Sample1Impl</i> (Sample1Impl.java) is a minimal implementation of <i>Sample1</i>. The corresponding test class, <i>Sample1ImplTest</i> (Sample1ImplTest.java), defines a concrete test class for <i>Sample1Impl</i>. This is identical to a standard JUnit test class, except for the <i>suite()</i> method (see <A NAME="rl2"><A HREF="#l2">Listing Two</A>, also available electronically). Step by step, this <i>suite()</i> method: </p>


<p>1. Gets the inherited test suite by calling <i>Sample1TestI.suite()</i>, which contains the tests for <i>Sample1</i>.</p>

<p>2. Adds itself to the retrieved test suite by calling <i>suite.addTestSuite(THIS_CLASS)</i>, just like a call to the corresponding method in the <i>TestSuite</i> class.</p>

<p>3. Creates an inner class from the <i>ImplFactory</i> interface, which creates the default <i>Sample1Impl</i> instance.</p>

<p>4. Returns the new test suite.</p>

<p></p>

<p>The returned test suite delays the creation of the individual test instances until necessary, so that you can add additional tests. When the suite creates all the tests, <i>InterfaceTestSuite</i> processes all standard JUnit <i>TestCase</i> classes as normal (one instance per test method). For inherited test classes, it creates one test instance per test method per factory. For the <i>Sample1ImplTest</i> example, three tests are created: <i>Sample1TestI</i> defines two test methods, <i>Sample1ImplTest</i> only specifies one factory for these (that's two tests), and <i>Sample1ImplTest</i> defines one test. If another factory was added, then five tests would be created: one set of each <i>Sample1TestI</i> test for each factory, plus the <i>Sample1ImplTest</i> test. </p>



<h3>Abstract and Base Classes</h3>


<p>You can test abstract and base classes the same way interfaces are tested. In these situations, more than just contracts can be tested&#151;you can test real code again.</p>


<p><i>Sample2</i> (Sample2.java) is an abstract class that also implements <i>Sample1</i>. Its corresponding inherited test class (<i>Sample2TestI.java</i>) tests the newly defined method, and relies on the <i>suite()</i> method to perform contract tests for <i>Sample1</i> (see <A NAME="rl3"><A HREF="#l3">Listing Three</A>, also available electronically).</p>



<h3>Complex Initialization</h3>


<p>Using the factory, concrete test classes can initialize their classes in different ways to ensure that the integrity of the class is maintained with different initial states. But what if the tests themselves need to dictate the initial setup data?</p>


<p>In <i>Sample3</i> (Sample3.java) an interface whose only method returns an array of strings is shown. The just mentioned use-case for the factory doesn't let inherited test classes test much more than if the method causes an exception. It would be more interesting if the inherited tests could define the input data and validate the return value.<i></p>

<p>Sample3TestI</i> (Sample3TestI.java) declares an inner factory to create <i>Sample3</i> instances with a specific initial setup. Instead of declaring that <i>Sample3TestI</i> tests <i>Sample3</i> instances, it tells the superclass in the constructor that it tests these internal factories. Now the tests become much more interesting.</p>



<h3>Complex Inheritance</h3>


<p>The class signature for <i>Sample5Impl</i> (Sample5Impl.java) poses a problem for most test tools, and at first glance, it poses several problems for GJE as well (see <A NAME="rl4"><A HREF="#l4">Listing Four</A>, also available electronically). <i>Sample5Impl</i> implements <i>Sample3</i>, whose test class requires a special factory, while the other test classes only need the standard <i>ImplFactory</i>. The implementation of <i>InterfaceTestSuite</i> shares all added factory instances between all added <i>InterfaceTestCase</i> classes, so these two inherited factories cannot be added to the same <i>InterfaceTestSuite</i>. </p>


<p><i>Sample5ImplTest</i> (Sample5ImplTest.java) changes the start of the <i>suite()</i> method by creating a new <i>TestSuite()</i> instance, initializing it with the concrete test class. This allows for adding as many inherited test suites as needed, so that each suite has its own independent set of factories, and there will still only be a single test suite.</p>

<p>The returned test suite has a test containment that looks something like <A NAME="rf3"><A HREF="0302bf3.htm">Figure 3</A>, for a total of 12 tests. Not too shabby for a group of woefully inadequate test classes.</p>



<h3>Other Languages</h3>


<p>This framework can be implemented for the other xUnit-like libraries (http://www.xprogramming.com/software.htm).</p>


<p>Languages that allow for multiple inheritance (C++ and Python) may be tempted to use proper language-supported inheritance on the inherited test classes. This, however, causes three unexpected results: inherited tests with the same name to be "hidden" and not executed unless explicitly called or logic is added to explicitly search all inherited classes; allowing for multiple types of factories becomes difficult to track properly and could potentially become a maintenance nightmare for complex inherited classes; and multiple contexts (initial states for factory-created objects) increase the complexity of creating a suite of tests from a concrete test class.</p>



<h3>Conclusion</h3>


<p>If a project doesn't have tests, then the adage "any tests are good tests" looks absolutely right, but as development code matures, so should its set of automated tests. In particular, maintainability should remain as much a priority as metrics such as code coverage. Without descent maintainability, the cut-and-paste approach can lead to holes in your test suites as the project matures, and those holes cannot be detected easily. Introduction of simple testing patterns, such as the inherited testing model presented here, can lead to better maintainability and lower test development costs.</p>



<p><b>DDJ</b></p>
</body>
</html>
