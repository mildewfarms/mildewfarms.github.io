<html>
<head>
<title>Feb03: The New Adventures of Verity Stob</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Revenge of the Anti-patterns</h1>

<p><i>Dr. Dobb's Journal</i> February 2003</p>
<I>
Verity is the pseudonym of a programmer based in the UK. She can be contacted at VerityStob@ddj.com.</I>

<hr>

<p>
<i>Verity has created two new anti-patterns.</i>
</p>


<p>I admit it&#151;I've bottled out. My first thought was to present you with a few new design patterns that I have worked out. But ever since the GoF (Gang of Four) first thrust its modest list of 23 out into an admiring world, the competition has been beavering away into the night, tirelessly flicking through dictionaries in search of new abstract nouns that can be used to name them: Spiral of Dexterity, Sanity Principle, Circumstantial Vista. Giant catalogues containing hundreds of patterns have plopped out from the big publishers. Reading them, one is soon overtaken by the suspicion&#151;and this is a difficulty that recalled a rather different catalogue of patterns I once thumbed through, a tome translated from Sanskrit by Sir Richard Burton and entirely lacking UML illustration&#151;one is overtaken by the suspicion that #245 is pretty much the same as #121 but with its pinkies crossed.</p>
<p>It is too late for patterns. The competition is just too plentiful. </p>
<DDJADVERTISEMENT INLINE>

<p>On the other hand, with antipatterns, the field remains wide open. True, the MoF (Mob of Five) has got the discipline off the ground by writing the first ever book dealing with the subject (and on the evidence of Amazon.com, also the second, third, and fourth). But there remains plenty of work to be done.</p>

<p>Extensive research (I asked Dave) suggests that only one antipattern has really "taken" in the world at large. "Lava Flow" is an excellent antipattern with a clever name&#151;for the benefit of A-P neophytes, I should explain it refers to those swathes of nasty obsolete code prefaced with a comment like this:</p>

<blockquote><p>
// Dunno how/if this works</p>

<p>
// LEAVE IT ALONE!</p>

</blockquote>

<p>Lava Flow is good, but it's lonely. Hands up everybody who remembers "Poltergeists" or "Stovepipes." Well, exactly. It is no good sitting there sniggering. This is serious. What would you do if tomorrow you were required to implement a RavioliCode system? Oh yes, there is such a thing. No soldier, ordinary spaghetti code is not good enough.</p>

<p>What is needed here is that a mature programmer, with extensive close-up experience of creating a large variety of badly written code, takes this discipline to the next level. It goes against my English bashfulness to say this, but I have become convinced that I am the person to take this on. I am to be known, henceforth, as the CoO (Crowd of One). </p>

<p>Here are two brand new antipatterns for the twenty-first century.</p>



<h3>Classtorbaitor</h3>


<p>Consider a class, probably from a library, whose interface looks like this:</p>


<blockquote><p>
class CBaitor</p>

<p>
{</p>

<p>public:</p>

<p>  virtual T method1();</p>

<p>  virtual T method2();</p>

<p>protected:</p>

<p>  virtual T method3();</p>

<p>  virtual T method4();</p>

<p>private:</p>

<p>  // instance data and</p>

<p>  // accessor methods here </p>

<p>
}</p>

</blockquote>

<p>You would like to vary some aspect of the behaviour of this class. How would you go about it? Look at all those lovely virtual methods, flaunting their signatures in public and protected scope. Can you hear them calling out to you: "C'mon Big Boy! Override me if you dare!" What are you going to do about it?</p>

<p>Why, you derive of course. And just about halfway through implementing a new version of <i>method1(), </i>you discover you need access to some bit of state&#151;and the trap closes. That protected section is just bait, put there to draw you into the Classtorbaitor. All the instance data is locked away, beyond your reach, in the private scope. There may be a couple of methods that look as though they might be shoe-horned into the roles of accessors, but closer examination reveals that they have ghastly side effects when called. You are comprehensibly stuffed.</p>

<p>You might think that such monsters don't exist in real life, but they do and, some years ago, I have written their ilk. And I didn't do it out of malicious intent, either. It's quite easy to make such a thing, when one is rather inexperienced in the Ways of OOP. All you need do is apply the principles "virtual is good" and "inheritance is desirable" with blind naivety.</p>



<h3>Clever Clogs Comment</h3>


<p>We are all familiar with the basic duh comment</p>


<blockquote><p>
i++; // add one to i</p>

</blockquote><p>that is an unsung foundation of antipatternery. But, in fact, it does no more damage than clutter the layout and could even be argued to be useful in that it warns the reader that the module-writer is quite thick.</p>


<p>But there is another kind of comment, in some sense from the other end of the scale, which is much more unhelpful. The Clever Clogs Comment has three distinguishing features: Its writer correctly identifies that a comment would be useful at this juncture; Its writer understands what information is needed: Its writer is a smartarse.</p>

<p>Here is an example I recently found written by Ms V Stob:</p>

<blockquote><p>
// This function doesn't have a no-throw guarantee; </p>

<p>
// however it does offer a no-throw six month </p>

<p>
// return-to-base warranty ;-)</p>

</blockquote>

<p>What, by all the hairy Norse gods, did I mean by that? Does it throw or doesn't it throw? Honestly, it's enough to make me want to develop a primitive time travel vehicle, so that I can travel back to 1999 and punch myself.</p>

<p>I have an absolute peach of an example of a vintage CCC that can be found on the Net. This comes from a famous app that I know you know, even if the guilty party, one Bernard S. Greenberg, may not be the first programmer whose name springs to your lips in this context. The app is the Emacs editor, the programming language is LISP, and the header comment of the redisplay module is in Latin:</p>

<blockquote><p>
;;; 3/6/78 inceptus Luna meo adjutorio.</p>

<p>
;;; 4/19/78 duas fenestras feci.</p>

<p>;;; 5/30/78 ^V creavi.</p>

<p>
;;; 6/18/78 signum linearum elongatarum, ^0^L, &amp;c</p>

</blockquote>

<p>This carries on until 1981, when commenting switches to English "at popular demand." I should cocoa. Illiud Latine dici non potest.</p>

<p>We seem to have a little space before the next article, so here is a treat. Following my recent mention of the cult BBC TV programme "What Not To Wear," I have been deluged with requests for more Susannah/Trinny dialogue, especially from those who can't yet get BBC2. Happy to oblige. Here is a classic exchange from the week before last. The girls are watching secretly filmed footage of their next victim. Enjoy.</p>

<blockquote><p>
<b>S:</b> She looks slovenly. Slobby T-shirt, and the leggings, she looks...</p>

<p>
<b>T:</b> (who hisses a little on her sibilants when excited): Ssslovenly!<b></p>

<p>S:</b> (rolling the word around her mouth): Like a SLOVERN.</p>

<p>
<b>T:</b> (immense relish): SSSLOVERNLY!</p>

</blockquote>

<p><b>DDJ</b></p>
</body>
</html>
