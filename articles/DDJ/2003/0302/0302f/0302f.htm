<html>
<head>
<title>Feb03: Programmer's Toolchest</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>A Report Generator for PC-Lint</h1>
<p><i>Dr. Dobb's Journal</i> February 2003</p>
<h2>Large projects can  generate way too many error messages</h2>

<h3>By Jon Zyzyck</h3>

<I>
Jon is a professional programmer with experience in medical imaging processing, biotech robotics, embedded software, and interpreters. He can be reached at jonz@cts.com.</I>

<hr>

<p>PC-Lint, from Gimpel Software (http://www.gimpel.com/), is a source-code checker that finds bugs, glitches, inconsistencies, nonportable constructs, redundant code, and other such anomalies in C/C++ code. I've used PC-Lint on projects ranging from 100,000 to 200,000 lines of C++ source code and have always run across bugs that otherwise would have been extremely hard to find and fix&#151;<i>sprintf</i> formatting-type errors, uninitialized variables, division-by-zero, case statement fall-through, buffer overruns, and the like.</p>
<p>As you may expect, however, the number of messages that PC-Lint generates from large projects can be overwhelming. Clearly, PC-Lint would be even more useful if it had better report facilities, especially for linting entire projects&#151;and most especially for linting projects for the first time. An extended reporting tool would help in going through generated messages in a scheduled, prioritized manner.</p>
<DDJADVERTISEMENT INLINE>

<p>To that end, in this article I present a report generator that reads in all the PC-Lint messages generated from all the files in the project, and then displays them organized into user-specified categories. This gives you an overview of the state of the project, and helps you decide which are the most important messages to deal with first. It also encourages the use of PC-Lint for project management.</p>

<p>The report generator consists of a C++ program and several batch files (available electronically; see "Resource Center," page 5) to help integrate it into Microsoft's DevStudio. I've used these programs on Windows 98/2000/XP. Although I still mostly use DevStudio 6, I've also used them with DevStudio 7. While I've oriented the descriptions toward Microsoft MFC DevStudio, the programs are simple C-type command-line code that should easily port to other development environments. The report generator works on either a single C++ file or all C++ files in a directory. The report generator can be easily executed from DevStudio. The report output is sent to DevStudio's output window pane, making it convenient to use. Double clicking on a message brings up the source-code line in DevStudio.</p>

<p><A NAME="rl1"><A HREF="#l1">Listing One</A> is a simple program with errors, and <A NAME="rl2"><A HREF="#l2">Listing Two</A> is excerpted output from the report generator based on <A NAME="rl1"><A HREF="#l1">Listing One</A>. It includes several typical programming errors/warnings, such as:</p>


<ul>
  <li>Formatting errors in <i>sprintf</i>.
  <li>Unreachable code.

  <li>Out-of-bounds access.

  <li>Using uninitialized variables.

  <li>Unintended fall-through in a switch statement.

  <li>Using <i>goto</i>.

  <li><i>If</i> statement always evaluates True.

  <li>Pointer errors.

</ul>


<p>The first time you use PC-Lint, it generates far too many messages to handle in one sitting. Consequently, I've developed a process flow (<A NAME="rf1"><A HREF="0302ff1.htm">Figure 1</A>) to help you review messages in multiple debug sessions.</p>

<p>Start by installing and configuring PC-Lint for your project, then run PC-Lint on your project. Using the methods described here, messages can then be generated for all .c/.cpp files in the project. </p>

<p>After running the program, messages from all files are automatically sorted by message number. This lets you scan the messages and determine which messages you'd like to work on first. For example, you might want to look at all uninitialized variables first, as this is a common source of programming errors. Another group of key messages are errors in <i>sprintf</i>-format statements. PC-Lint does a great job in syntax checking all the <i>sprintf</i> formatting errors, which is good for legacy code. </p>

<p>I recommend grouping the messages into the following categories:</p>


<ul>
  <li>Critical errors, which should be looked into in detail. They are probably causing memory overwrites, uninitialized variables, <i>sprintf</i>-formatting errors, unintentional case statement fall-throughs, and miscasting.
  <li>Less-critical errors, which can be scheduled for code cleanup; for example, <i>goto</i>s and making parameters <i>const</i>.

  <li>Noise messages, which are hidden in all the noise.

</ul>


<p>Deal with the critical messages first. I've found it helpful to schedule the less-critical errors into the project schedule. Noise messages can be eliminated by using the PC-Lint message commands in the configuration (.lnt) file. Then iterate this process as needed.</p>



<h3>Noise Messages</h3>


<p>Noise messages are the huge number of miscellaneous messages generated by PC-Lint in legacy projects that could be meaningful in another project, but you have decided can be safely ignored in the current one. I've found that a lot of these are signed/unsigned match, loss of precision, and the like. When using PC-Lint with new code, I do pay attention to these messages.</p>


<p>Examples of turning off specific messages include:</p>


<ul>
  <li>MACRO. I usually turn these off in the lintCPP.lnt file; <i>emacro(506, TRACE) // Warning 506: Constant value Boolean turns off message 506 for the MFC macro "TRACE"</i>.
  <li>Routine. I usually turn these off in the lintCPP.lnt file; <i>esym(534,close,create, fclose,fprintf,fputc) // The return values of these routines are commonly ignored turns off message 534</i>.

  <li>Library include file. I usually turn these off in the lintCPP.lnt file; <i>elib(652) turns off message 652</i>.

  <li>File. I use this when I want to turn off a message in source code; for example, <i>/</i>*<i>lint -sem(CDNMCompute::ProcessError, s3) </i>*<i>/ // doesn't return, throws exception.</i>

  <li>Specific source-code line. For example, <i>/</i>*<i>lint -e825</i>*<i>/ // allow case fall-thru without warning</i>.

</ul>

<h3>PC-Lint</h3>


<p>Since PC-Lint is a DOS-type program, it doesn't require DLLs or registry entries. All examples I present here assume that PC-Lint is installed in the c:\lint directory. Included electronically is the source code for the command-line programs jzLintReport.exe and EchoAndSave.exe, along with the batch files LintAllCPP.bat, LintAllCPPHelper.bat, LintCPP.bat, and DisplayFileToOutputPane.bat. Other files include Cr.txt, LintCPP.lnt, and PC-Lint Header.h.</p>


<p>Although PC-Lint provides several configurations (.lnt), you will want to use your own. I call mine "LintCPP.lnt" (available electronically) and use that filename in my examples. LintCPP.lnt is an input to PC-Lint that contains the configuration information PC-Lint needs to successfully process your project:</p>


<ul>
  <li>Lists of paths to search for the include files.
  <li>Lists of predefined MACROs.

  <li>Lists of messages to ignore in the include files. (This is important. Without this, MFC header files generate lots of errors.)

  <li>Lists of messages to ignore for all your project files.

  <li>Lists of messages to ignore for specific MACROs.

  <li>Lists of messages to ignore for specific routines.

  <li>Lists of special attributes for specific routines. This makes it possible to tell PC-Lint that some routines are similar to <i>sprintf</i> or exit. For example, I commonly use a routine called "csFMT" that returns a <i>Cstring</i>, given <i>sprintf</i>-type inputs. This way, PC-Lint performs format checking on the parameters (see <A NAME="rl1"><A HREF="#l1">Listing One</A>).

  <li>Tells PC-Lint how to format the messages. By properly formatting the messages, PC-Lint output can be sent to the DevStudio output pane, and you can navigate to the source code by clicking on PC-Lint messages.

</ul>

<p>To install my report generator, go to the DevStudio Tools menu, select Customize, and click on the Tools tab. For illustration, I define three new tools: Lint This File, Lint All Files, and Display File To Output Pane. <A NAME="rf2"><A HREF="0302ff2.htm">Figure 2</A> shows how to set up the Lint This File tool; the other two tools are similar. (More detailed installation instructions for DevStudio are available electronically.) </p>

<p>Running PC-Lint with my report generator from DevStudio is straightforward. For a single file, for instance, just select and open the file. Use DevStudio's Tools menu to select the menu item Lint This File. Output messages should start appearing in the output pane window. Sample output of file "Sample lint output.txt" is available electronically. To keep the size manageable, I deleted the first part, which is the raw file-by-file output from PC-Lint. The second part contains the output from the report generator. Messages are sorted by message number. This normally appears in the DevStudio output window, so you would be able to click on the Message and DevStudio would navigate you to the source-code line.</p>

<p>You can also cut the PC-Lint output from the output window pane in DevStudio and paste it into a new file. Later, you can open the file and redisplay it in the output pane using the Display File to Output Pane tool.</p>



<h3>Enhancements</h3>


<p>Since different parts of the source code are sensitive to different types of programming styles, it would be nice if the program allowed the user to determine which messages were more important on a file-by-file basis. For example, this would allow relaxation of the signed/unsigned messages for GUI event handling, while having them at a higher priority for math intensive routines.</p>


<p>This could be accomplished by having the report generator read in a file containing a list of file names and the category file to use. The report generator would then parse the file name from the PC-Lint message and use the definitions from the associated category definition file.</p>

<p>Another method would have the report generator read the source-code file itself, parsing it for directives specifying the category definition file to use. Then, when the report generator parses the PC-Lint message, it would use the line number to determine which category file to use. This would allow more flexibility; however, it would take longer for the report generator to execute.</p>



<p><b>DDJ</b></p>
<H4><A NAME="l1">Listing One</H4>


<pre>#include &lt;stdio.h&gt;
// This is a short file to show some examples of PC-Lint error/warning
// detection and reporting of common errors
/*lint +e716*/
#define MAX_BUF ( 1024 )
void main()
{
char buf[MAX_BUF];
int i;
for (i = 0; i &lt; MAX_BUF; i++)
    {
buf[i+1] = 0; // Warning 661: Possible access of out-of-bounds pointer
    }
char sbuf[1024];
float fVal;
float fMax = 100.0;
int nCount = 0;
fVal = fMax/nCount; // Warning 414: Possible division by 0 
//                                 sprintf(sbuf, "the answer is: %d", fVal);
// Warning 559: Size of argument no. 3 inconsistent with 
//                    format sprintf(sbuf, "the answer is: %g for %d", fVal);
// Warning 558: Too few arguments for format (1 missing) 
//                                      int nRet; int nTest = nRet * 10;
// Warning 530:Symbol 'nRet' (line 28) not initialized int nFoo;switch (nTest)
    {
case 1:
nFoo = 1; break;
case 2:
nFoo = 21; 
case 3:
// Info 825: control flows into case/default 
//                            without -fallthru comment nFoo = 321; break;
    }
int nFooVal = nFoo;
// Warning 644: Variable 'nFoo' (line 31) may not have 
//                             been initialized int nTest2 = 0; for(;;)
    {
nTest2++;
if (nTest2 &gt; nFoo)
goto done; // Info 801: Use of goto is deprecated
    }
done:
unsigned int nTest3 = 1; while (1) // Info 716: while(1) ...
    {
nTest3 = nTest3 &lt;&lt; 1;
    }
//Warning 527: Unreachable
int nTest4 = 0;
if (nTest4 == 0)
// Info 774: Boolean within 'if' always evaluates to True
     {
     }
float *fTest;
int *Int;
pInt = (int *) &amp;fTest;
// Info 740: Unusual pointer cast (incompatible indirect types) 
//                                     int *pInt; unsigned char nByte;
*pInt = (int *) &amp;nByte;
// Info 826: Suspicious pointer-to-pointer conversion (area too small)
}
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two</H4>


<pre>C:\Projects\jzLintReport&gt;echo off
Current date is Fri 10-25-2002
Enter new date (mm-dd-yy): 
Current time is  3:12:30.06p
Enter new time: 

--- Module:   C:\Projects\jzLintReport\example.cpp
                    _
        buf[i+1] = 0; // Warning 661: Possible access of out-of-bounds pointer
C:\Projects\jzLintReport\example.cpp(18) :  Warning 661: Possible access of out-of-bounds pointer (1 beyond end of data) by operator '['
C:\Projects\jzLintReport\example.cpp(16) :  Info 831: Reference cited in prior message
C:\Projects\jzLintReport\example.cpp(18) :  Info 831: Reference cited in prior message
                      _
    fVal = fMax/nCount; // Warning 414: Possible division by 0
C:\Projects\jzLintReport\example.cpp(25) :  Warning 414: Possible division by 0
C:\Projects\jzLintReport\example.cpp(24) :  Info 831: Reference cited in prior message
                                            _
    sprintf(sbuf, "the answer is: %d", fVal); // Warning 559: Size of argument no. 3 inconsistent with format
C:\Projects\jzLintReport\example.cpp(26) :  Warning 559: Size of argument no. 3 inconsistent with format
                                                   _
    sprintf(sbuf, "the answer is: %g for %d", fVal); // Warning 558: Too few arguments for format (1 missing)
C:\Projects\jzLintReport\example.cpp(27) :  Warning 558: Too few arguments for format (1 missing)
                         _
    int nTest = nRet * 10; // Warning 530: Symbol 'nRet' (line 28) not initialized
C:\Projects\jzLintReport\example.cpp(30) :  Warning 530: Symbol 'nRet' (line 29) not initialized
    _
    case 3:            // Info 825: control flows into case/default without -fallthrough comment
C:\Projects\jzLintReport\example.cpp(40) :  Info 825: control flows into case/default without -fallthrough comment
                      _
    int nFooVal = nFoo; // Warning 644: Variable 'nFoo' (line 31) may not have been initialized
C:\Projects\jzLintReport\example.cpp(44) :  Warning 644: Variable 'nFoo' (line 32) may not have been initialized
            _
            goto done; // Info 801: Use of goto is deprecated
C:\Projects\jzLintReport\example.cpp(52) :  Info 801: Use of goto is deprecated
            _
    while (1) // Info 716: while(1) ... 
C:\Projects\jzLintReport\example.cpp(57) :  Info 716: while(1) ... 
    _
    int nTest4 = 0;
C:\Projects\jzLintReport\example.cpp(64) :  Warning 527: Unreachable
                   _
    if (nTest4 == 0) // Info 774: Boolean within 'if' always evaluates to True
C:\Projects\jzLintReport\example.cpp(65) :  Info 774: Boolean within 'if' always evaluates to True
C:\Projects\jzLintReport\example.cpp(64) :  Info 831: Reference cited in prior message
C:\Projects\jzLintReport\example.cpp(65) :  Info 831: Reference cited in prior message
    _
    pInt = (int *) &amp;fTest; // Info 740: Unusual pointer cast (incompatible indirect types)
C:\Projects\jzLintReport\example.cpp(71) :  Error 40: Undeclared identifier 'pInt'
C:\Projects\jzLintReport\example.cpp(71) :  Info 740: Unusual pointer cast (incompatible indirect types)
C:\Projects\jzLintReport\example.cpp(71) :  Error 63: Expected an lvalue
                          _
    *pInt = (int *) &amp;nByte; // Info 826: Suspicious pointer-to-pointer conversion (area too small)
C:\Projects\jzLintReport\example.cpp(75) :  Error 64: Type mismatch (assignment) (int = pointer)
C:\Projects\jzLintReport\example.cpp(75) :  Info 826: Suspicious pointer-to-pointer conversion (area too small)
C:\Projects\jzLintReport\example.cpp(75) :  Warning 530: Symbol 'pInt' (line 73) not initialized


********************************************************

*            Lint Error/Warning messages follow         *

*********************************************************


********** Category: OTHER - Messages that haven't been defined in a category
C:\Projects\jzLintReport\example.cpp(71) :  Error 40: Undeclared identifier 'pInt'
C:\Projects\jzLintReport\example.cpp(71) :  Error 63: Expected an lvalue
C:\Projects\jzLintReport\example.cpp(75) :  Error 64: Type mismatch (assignment) (int = pointer)
C:\Projects\jzLintReport\example.cpp(25) :  Warning 414: Possible division by 0
C:\Projects\jzLintReport\example.cpp(64) :  Warning 527: Unreachable
C:\Projects\jzLintReport\example.cpp(30) :  Warning 530: Symbol 'nRet' (line 29) not initialized
C:\Projects\jzLintReport\example.cpp(75) :  Warning 530: Symbol 'pInt' (line 73) not initialized
C:\Projects\jzLintReport\example.cpp(44) :  Warning 644: Variable 'nFoo' (line 32) may not have been initialized
C:\Projects\jzLintReport\example.cpp(18) :  Warning 661: Possible access of out-of-bounds pointer (1 beyond end of data) by operator '['
C:\Projects\jzLintReport\example.cpp(57) :  Info 716: while(1) ... 
C:\Projects\jzLintReport\example.cpp(65) :  Info 774: Boolean within 'if' always evaluates to True
C:\Projects\jzLintReport\example.cpp(52) :  Info 801: Use of goto is deprecated
C:\Projects\jzLintReport\example.cpp(40) :  Info 825: control flows into case/default without -fallthrough comment
********** Category: Critical Errors
C:\Projects\jzLintReport\example.cpp(27) :  Warning 558: Too few arguments for format (1 missing)
C:\Projects\jzLintReport\example.cpp(26) :  Warning 559: Size of argument no. 3 inconsistent with format
C:\Projects\jzLintReport\example.cpp(71) :  Info 740: Unusual pointer cast (incompatible indirect types)
C:\Projects\jzLintReport\example.cpp(75) :  Info 826: Suspicious pointer-to-pointer conversion (area too small)
********** Category: Less Critical Errors
 No messages have been defined for this category
********** Category: Noise Messages
 No messages have been defined for this category

Total Files Processed: 1
Total Files With Messages: 1
Total Messages Processed: 17
Current date is Fri 10-25-2002
Enter new date (mm-dd-yy): 
Current time is  3:12:31.81p
Enter new time: 

C:\Projects\jzLintReport&gt;rem ************ Done **************

C:\Projects\jzLintReport&gt;
C:\Projects\jzLintReport&gt;
C:\Projects\jzLintReport&gt;
C:\Projects\jzLintReport&gt;

Tool returned code: 0






</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>


</body>
</html>
