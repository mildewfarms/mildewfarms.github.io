<html><head><title>Sep03: Programmer's Bookshelf</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>Reading Code</h1><p><i>Dr. Dobb's Journal</i> September 2003</p><h3>By Gregory V. Wilson</h3><I>Greg is a DDJ contributing editor and can be contacted at gvwilson@ddj.com.</I><hr><h4><br><b>Code Reading:  The Open Source  Perspective</b><i><br>Diomidis Spinellis </i><br>Addison-Wesley, 2003<br>455 pp., $45.00<br>ISBN 0201799405<br></h4><p>This is the 43rd book review I have written for <i>DDJ</i>. According to grep, I have only used the word "wonderful" once in all that time (to describe Stewart Brand's<i> How Buildings Learn</i>). Half an hour after I started reading Diomidis Spinellis's new book<i> Code Reading: The Open Source Perspective,</i> I knew I was going to use the word again.</p><p><i>Code Reading </i>is a wonderful book, and an important one. It doesn't matter whether you're still in high school, or have been programming every day for the last 30 years&#151;this book will teach you things you really need to know. More importantly, I think this book just might change the way programming is taught and learned.</p><DDJADVERTISEMENT INLINE><p>The book's preface says it best:</p><blockquote><p>The reading of code is likely to be one of the most common activities of a computing professional, yet it is seldom taught as a subject or formally used as a method for learning how to design and program.</p></blockquote><p>Spinellis isn't the first person to make this point, but he is the first person I know of to do something about it. In <i>Code Reading, </i>he walks through hundreds of examples of C, C++, Java, and Perl, drawn from dozens of open-source projects such as Apache, NetBSD, and Cocoon. Each example illustrates a point about how programs are actually built. How do people represent multidimensional tables in C? How do people avoid nonreentrant code in signal handlers? How do they create packages in Java? How can you recognize that a data structure is a graph? A hashtable? That it might contain a race condition? And on, and on, real-world issue after real-world issue, each one analyzed and cross-referenced.</p><p>But Spinellis doesn't stop there. There's a section on "Additional Documentation Sources," which tells you places to look for information about code that may not be obvious. There's a whole chapter on code-reading tools, which covers regular expressions, common editor features, and tricks you can get your compiler to do to help you find things.</p><p>And to cap it all off, there's Chapter 11 (no, not the kind that most dot-commers have become so familiar with). Here, Spinellis sets himself the goal of adding a new SQL date/time function to the hsqldb database in order to return the moon's phase on a given date. This excerpt gives you a feeling for how he goes about it:</p><blockquote><p>Immediately below the array initialization, I see that the strings are inserted into another structure:</p><p>for (int i=0; i&lt;keyword.length; i++) {</p><p>   hKeyword.put(keyword[i], hKeyword);</p><p>}</p><p>   I then search for <i>hKeyword</i> to see what else is included in that structure since most SQL function names are not there. I see that <i>hKeyword</i> is a <i>Hashable</i> instance, local to the class, used for identifying keywords in the <i>wasName</i> method. No other methods add elements to the <i>hKeyword</i> variable, and since it is local to the class, there is no need to further examine it. However, one use of <i>hKeyword</i> provides me with my next lead...</p></blockquote><p>Of course, no book is perfect. While there is some coverage of Windows-specific issues, for example, the book (like the open-source projects on which it is based) is primarily UNIX oriented. Some of the diagrams showing the structure of various source trees are too detailed for my eyes and, well, that's about it, really. The writing is crystal clear, and completely free of hyperbole and strained jokes; the index (including a code index) and bibliography are rock-solid; and gee, I'm back to praising it, aren't I? Go figure.</p><p>According to the preface, Spinellis is already working on a second volume, which will cover interfacing, internationalization, commonly used libraries, low-level code, and other topics. If these two books get the attention they deserve&#151;in particular, if college instructors start using them as texts&#151;I think they could do more to change our profession for the better than any of the bandwagons that have rolled by in the last 20 years.</p><p><b>DDJ</b></p></body></html>