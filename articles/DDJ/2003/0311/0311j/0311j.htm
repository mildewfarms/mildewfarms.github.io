<html><head><title>Nov03: Programmer's Bookshelf</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>UNIX Zen and Now</h1><p><i>Dr. Dobb's Journal</i> November 2003</p><h3>By Jack J. Woehr</h3><I>Jack is a DDJ contributing editor and can be contacted at http://www.softwoehr.com/softwoehr/.</I><hr><h4><br><b>The Art of UNIX  Programming</b><i><br>Eric S. Raymond</i><br>Addison-Wesley, 2003<br>512 pp., $39.99<br>ISBN 0-13-142901-9<br><b><br>UNIX Systems Programming: Communication, Concurrency And Threads, Second Edition</b><i><br>Kay A. Robbins and Steven Robbins</i><br>Prentice Hall, 2003<br>912 pp., $69.99<br>ISBN 0-13-042411-0<br><b><br>Absolute OpenBSD:  UNIX for the Practical Paranoid</b><i><br>Michael W. Lucas</i><br>No Starch Press, 2003<br>600 pp., $39.95<br>ISBN 1-886411-99-9<br></h4><p>The white-robed roshi and juvenile shaved-head monk on the cover suggest that Eric Raymond probably intended to call his book "The Zen of UNIX Programming." Cooler editorial heads prevailed and we ended up with <i>The Art of UNIX Programming</i>. </p><p>Though Raymond covers everything from operating-system origins (including IBM/VM and DEC VMS) and HTTP, C, Lisp, and C++, to Docbook and CVS (and every blessed thing beyond and between), <i>The Art of UNIX Programming</i> is not a tutorial.</p><DDJADVERTISEMENT INLINE><p>Raymond rambles through a bizarre exposition of what he finds to be the "kozmik trooths" of the UNIX programming environment. If you're actually trying to learn UNIX programming, this is the wrong book. To the extent the book has focus, the focus is something like this:</p><blockquote><p>Eric drove the Reader's chariot out onto the Field of UNIX. They stood for a while between the two armies of the Ideal and the Necessary. The Reader threw down his keyboard and said, "I shall not fight!" Eric then expounded the True Nature of the Programming Field, the Knower and the Known. The Reader, now wiser, picked up his keyboard afresh and coded on. </p></blockquote><p>In case you think I'm stretching the point, here are a few headings&#151;just a few, mind you&#151;to give you some of the savor of the opus:</p><ul>  <li>TCP/IP and the UNIX Wars: 1980-1990  <li>Blows Against the Empire: 1991-1995  <li>Case Study: C Considered as Thin Glue  <li>Security Wrappers and Bernstein Chaining  <li>Case Study: Metaclass Hacking in fetchmailconf.  <li>The "Separated Engine and Interface" Pattern  <li>The Present Chaos and the Possible Way Out</ul><p>The book is always informative, albeit in a patchwork fashion. Raymond palms off metaphysics as computer science and confounds aesthetics with epistemology as well as any of us FORTH programmers did a couple of decades ago. He also manages to broaden the reader's perspective, in a critique that sports a literary sheen. It would be a more intellectually uplifting workplace if more gifted programmers were as erudite as Raymond, though it is possible in that case that less actual work would be performed.</p><p>The <i>Art of UNIX Programming</i> settles down around Chapter 14 (Languages) or 15 (Tools), and starts giving some practical programming advice. In this book much is true and much is good. The reading of it does serve to stimulate the imagination and the pride of communal ownership of the UNIX Ideal.</p><p>In contrast, <i>UNIX Systems Programming: Communication, Concurrency and Threads,</i> by Kay Robbins and Steven Robbins, is not at all a fanciful book. It's about How. To. Program. UNIX. Emphasis on multiprogramming.<i></p><p>UNIX Systems Programming</i> is as dry as (or drier than) a Sun Microsystems manual, and typeset identical to Sun publications, just in case the point was otherwise missed. It's the second edition of the 1995 opus <i>Practical UNIX Programming: A Guide to Communication, Concurrency and Multithreading. </i>We're informed in the Preface that the title was changed "to better convey [sic] what the book was [sic] about."<i></p><p>Unix Systems Programming </i>is nerdly arcana for corporate staff programmers. That's why I was surprised the authors missed an important point about threading. Thread implementations are mined with guarantees that functions will appear in libraries whether they have the desired effect or not. The function <i>pthread_attr_setschedpolicy() </i>has tripped up programmers before: POSIX insists it appear in a compatible library without demanding that it actually perform its specified work. Solaris <i>pthread</i> programmers know to <i>#ifdef</i> for Solaris and use the nonportable platform function <i>thr_setconcurrency().</i><i></p><p>UNIX Systems Programming</i> is detailed, indexed, cross referenced, generally accurate, useful, enduring, attractive, and hardbound. If you do serious UNIX programming and do not yet have a complete overview of pipes and/or sockets and/or exec calls and/or POSIX threads, this book is a good bet, but a close perusal of your system manuals will still be necessary.<i></p><p>Absolute OpenBSD: UNIX for the Practical Paranoid,</i> by Michael Lucas, is the book all newbies exploring one of the free or open-source community's most secure and austere operating systems have long demanded. It is the "missing manual" to obtaining, installing, using, and administering OpenBSD. Much of this information can be gleaned from the FAQs at the OpenBSD web site (http://www.openbsd.org/) and all of it has been asked, over and over again, on the mailing lists. <i>Absolute OpenBSD</i> is nicely written, organized in the order newbies need during install, cleanly laid out, and well indexed. New users should buy the book at the same time they buy the OpenBSD distribution CD. Because, if it's half as good as I'm saying it is, <i>Absolute OpenBSD </i>will save newbies weeks of anguished whining on the mailing lists.</p><p><b>DDJ</b></p></body></html>