<html><head><title>Aug03: Programmer's Bookshelf</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>Extreme Forth</h1><p><i>Dr. Dobb's Journal</i> August 2003</p><h3>By Tim Kientzle</h3><I>Tim is a DDJ contributing editor and can be reached at kientzle@acm.org.</I><hr><h4><br><b>Thinking Forth:  A Language and  Philosophy for  Solving Problems,  	Second Edition<br></b><i>Leo Brodie</i><br>Fig Leaf Press, 1998<br>272 pp., $37.50<br>ISBN 0-13-917576-8<br></h4><p>I've had a number of conversations recently about Extreme Programming (XP). Although many people seem to share my distaste for the name, I've encountered remarkably little controversy about the ideas themselves.</p><p>Ultimately, XP is just a collection of best practices, many of which have been around for decades. I recently reread Leo Brodie's 1984 <i>Thinking Forth: A Language and Philosophy for Solving Problems, </i>which covers many of the same ideas, but in a different fashion. Still, <i>Thinking Forth </i>(now out of print, but available from Taygeta Scientific, http:// www.taygeta.com/thinking_forth.html, and from bookstores such as Amazon.com and Powells.com) provides a thought-provoking counterpoint to newer writings.</p><DDJADVERTISEMENT INLINE><h3>First, Make It Work</h3><p><i>Thinking Forth</i> is very much a book of best practices. Brodie started by interviewing the best software developers he could find. He then mixed extracts from these interviews with his own commentary and short, to-the-point tips, such as this gem:</p><blockquote><p><i>Tip: Today, make it work. Tomorrow, optimize it.</i></p></blockquote><p>This statement has been my software-development mantra for nearly two decades now, and it echoes clearly through much of the XP literature. Software development is, after all, about solving problems. Working code must always be the first priority.</p><p>A more subtle issue is also involved here. Working code provides you with positive feedback and encouragement, which makes it less intimidating to take the next step and thus leads to improved productivity. This is a key idea both in XP and in Brodie. One of Brodie's interviews even refers to the "fun-down approach" of software development&#151;start where you will get the most immediate gratification.</p><h3>Second, Make It Work Well</h3><p>But working code is merely the first step. XP's "refactoring" is more than simply a cookbook list of code transformations. It is a fundamental dictum that improving code is not just a matter of adding features.</p><p>Brodie explores this idea in detail: An entire chapter is devoted to "Factoring," and another discusses the merits of prototyping and iterative design. Few XP treatises could hope to do better:</p><blockquote><p><i>Tip: Look for repetition of patterns.</i></p><p><i>Tip: Don't change too much at once.</i></p><p><i>Tip: Be sure you can name what you factor.</i></p></blockquote><p>The interviews are especially helpful here. Chuck Moore, for example, urges you to challenge your solutions: "You need a feeling for the size of the problem...When you're done, look back and say 'Did I come up with a solution that is reasonable?'" If your result seems out of touch with your intuition, maybe you haven't yet found a good solution: </p><blockquote><p><i>Tip: You don't understand a problem until you can simplify it.</i></p></blockquote><p>Brodie uses a variety of somewhat contrived textbook examples to illustrate his ideas, but these are the book's weak point. They also require you know Forth.</p><h3>Forth Matters?</h3><p>Knowing Forth is not a remarkably marketable skill these days. Forth's compact size and portability are less important now than they once were. Forth's very weak type- and syntax-checking are also drawbacks, as are its somewhat unusual syntax. Forth is still in use, but it is becoming much more of a niche language.</p><p>Even if you never use Forth, however, you might benefit from studying some of its features. For example, all of the internal code used by the Forth interpreter and compiler is available to application developers. This simple idea has many benefits&#151;it exposes a complete standard set of tools, it lets you extend the environment and language in deep ways, and it enables some very advanced development paradigms.</p><p>Forth's interactive development model is also very appealing: A Forth system encourages you to type in and test a line of code, then add it to the application once you are certain it is right. This kind of short-cycle development, strongly advocated by XP, may be better supported in Forth than in any other language environment.</p><h3>Thinking Matters</h3><p>Of course, any programming language is just a tool, and no tool or methodology will make up for carelessness. Brodie's insights, like those of XP, can only provide raw materials for building excellent software development teams. But it is far better to start with ideas that have worked for generations of developers before you.</p><p><b>DDJ</b></p></body></html>