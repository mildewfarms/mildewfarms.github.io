<html><head><title>Jul03: JavaServer  Pages 2.0 </title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>JavaServer  Pages 2.0 </h1><p><i>Dr. Dobb's Journal</i> July 2003</p><h2>JSP technology takes a big step forward in 2.0</h2><h3>By Aaron E. Walsh</h3><I>Aaron is chairman of Mantis Development Corp. and teaches computer graphics and Internet/web application development at Boston College. He is also author of J2EE 1.4 Essentials (http://www.wiley.com/ compbooks/walsh/). Aaron can be contacted at aaron@mantiscorp.com.</I><hr><a name="rs1"><a href="0307ds1.htm">JavaServer Pages Standard Tag Library</a><hr><p>JavaServer Pages (JSPs) work hand-in-hand with Java servlets to form the backbone of many Java-based web applications. Together they comprise the bulk of the Java 2 Platform Enterprise Edition's (J2EE's) so-called "web tier" that is ultimately responsible for connecting clients to server-side application components. Servlets are Java classes that extend and enhance the web server, and can be thought of as industrial-strength alternatives to CGI scripts. Servlets are commonly used to generate dynamic content on the fly in response to client requests, and can also act as controllers that govern aspects of client interaction with server-side application components. </p><p>While servlets give you a programmatic solution for handling web clients and generating dynamic content in response to HTTP client requests, JSPs are text-based documents that provide a familiar tag-based markup approach to creating static and dynamic web content. JSPs are relatively easy to create and offer an attractive alternative to servlets for nonprogrammers. They are intended primarily for web-page authors who aren't necessarily comfortable writing Java programs.</p><DDJADVERTISEMENT INLINE><p>As a document-oriented servlet extension mechanism, JSPs offer many of the same capabilities of servlets without requiring extensive programming experience. Page authors create JSPs by entering JSP code consisting of elements and template data (markup such as HTML, XML, WML, and so on) directly into text documents, a process similar to that involved in creating normal web pages. JSP template data is markup that establishes the overall structure or layout of the page, while JSP elements include directives, actions, and scripting elements that are used to create various forms of dynamic content for the page. </p><p>JSPs are typically packaged in web applications with other JSP files, tag files and libraries, tag-handler Java classes, scripts, images, and any other files that make up the application. Packaged applications are then deployed to either JSP/Servlet or J2EE containers, where their contents are executed in response to client requests. Although JSPs are deployed as text documents, they are ultimately compiled into servlets that execute when the JSP is requested at run time, effectively putting the power of servlets directly in the hands of page authors. The JSP container automatically compiles JSPs into servlets that handle a request/response, as in <A NAME="rf1"><A HREF="0307df1.htm">Figure 1</A>. The JSP is translated into a servlet and compiled the first time the page is requested, although these steps are skipped for subsequent requests of the same page. This process is entirely transparent to page authors who don't need to know or care about the low-level interaction between JSPs and servlets. </p><h3>JSP 2.0 </h3><p>JSP 2.0, a required part of J2EE 1.4, improves on the 1.2 release by introducing features such as:</p><ul>  <li>Support for the Servlet 2.4 specification, which JSPs use for web semantics. At a minimum, JSP 2.0 and Servlet 2.4 require a compliant standalone container that runs Version 1.3 or later of the Java 2 Platform, Standard Edition (J2SE). They can also be used in any conforming J2EE 1.4 container, which, in turn, requires J2SE 1.4.  <li>An Expression Language (EL) that page authors can use to access data from JSPs along with an API for invoking the EL. The EL paves the way for scriptless JSPs that are free of scriptlets and Java expressions, providing a clean separation of presentation and logic.  <li>Syntax elements that enable custom actions to be defined using JSP, meaning custom tags can now be implemented using pure JSP code (a custom action is invoked by a custom tag in a JSP, the underlying implementation for which now can be provided by a tag file that contains reusable JSP code). The JSP code that implements such custom actions is stored in tag files that have the .tag file extension (displayCatalog.tag, for instance) to facilitate encapsulation and encourage reuse.   <li>A simplified tag-invocation protocol that corresponds to a new type of tag extension called "Simple Tag Extension." This extension makes it easier for both page authors and Java developers to implement custom tags in either JSP code or Java. Page authors who don't know Java can implement new tags using JSP code in tag files, for example, while Java developers can create more complex tag-handler classes either by implementing the <i>javax.servlet.jsp.tagext.SimpleTag</i> interface or extending the related <i>javax.servlet.jsp.tagext.SimpleTag- Support</i> class that provides a default implementation of the <i>SimpleTag</i> interface.  <li>Support for JSP fragments, which are reusable pieces of JSP code that can be passed to a tag handler and invoked as needed. Whereas simple attributes are evaluated by the JSP container, fragment attributes are evaluated by tag handlers at the time the tag is invoked. In other words, JSP fragments enable a portion of JSP code to be encapsulated into a Java object that may be passed around and evaluated any number of times.  <li>Better XML integration, thanks to a revised XML syntax that solves many of the XML-related problems found in JSP 1.2.</ul><p>In short, JSP 2.0 is a major step forward that should substantially change the way JSP page authors and developers work. </p><h3>The JSP 2.0 API</h3><p>JSPs and servlets are inseparable from the perspective of JSPs&#151;JSPs simply can't exist without servlets, although the opposite isn't true (servlets don't require JSPs). This dependency of JSPs on servlets is reflected in the JSP 2.0 API, which consists of packages defined by the Servlet API. In addition to the <i>javax.servlet</i> and <i>javax.servlet.http</i> packages already familiar to servlet developers, the JSP API consists of the <i>javax.servlet.jsp, javax.servlet.jsp.el,</i> and <i>javax.servlet.jsp.tagext</i> packages shown in <A NAME="rt1"><A HREF="0307dt1.htm">Table 1</A>. The JSP API is used by container vendors to implement JSP/Servlet containers, and by servlet programmers to implement tag handlers for custom actions.</p><h3>The Expression Language </h3><p>JSP 2.0 Expression Language is an outgrowth of the expression language originally defined by the JavaServer Pages Standard Tag Library (JSTL) 1.0 spec (see the accompanying text box entitled "JavaServer Pages Standard Tag Library"). EL is an official part of the JSP 2.0 spec, which has added features beyond the language introduced by JSTL 1.0. To accommodate these changes, JSTL 1.1 has been developed as a maintenance release that uses JSP 2.0 EL. </p><p>Influenced by ECMAScript and XPath, EL simplifies JSP development by making it easy for you to access JavaBeans, scoped variables, context-initialization and request parameters, and similar objects without resorting to Java. To take advantage of the EL, you write EL code in your pages using the syntax <i>${EL expression}.</i></p><p>EL can be used in JSP template text and within attribute values for both standard and custom actions that accept expressions. <A NAME="rl1"><A HREF="#l1">Listing One</A> illustrates how EL can be used in attribute values; for example, where <i>web3Dlogo</i> identifies a JavaBean used by the page to display an image logo. When the page this code appears in is executed, the EL code is evaluated on the server-side by the container, sending the HTML in <A NAME="rl2"><A HREF="#l2">Listing Two</A> to the client.</p><p>With EL, you can craft scriptless JSPs that are free of embedded Java code, encouraging a clean boundary between the presentational aspects of a page and the program logic it uses (typically, in the form of JavaBeans components). The scriptless JSP page in <A NAME="rl3"><A HREF="#l3">Listing Three</A>, for instance, uses the code shown in <A NAME="rl4"><A HREF="#l4">Listing Four</A> to dynamically populate the Web3D Web media submission form <i>&lt;select&gt;</i> menu in <A NAME="rf2"><A HREF="0307df2.htm">Figure 2</A>.</p><p>EL is used in combination with the JSTL <i>&lt;forEach&gt; </i>tag to iterate over the collection of media-category names provided by the <i>MediaCategories</i> JavaBean (<A NAME="rl5"><A HREF="#l5">Listing Five</A>) to populate the form menu presented to end users. After executing on the server, <A NAME="rl4"><A HREF="#l4">Listing Four</A> generates the HTML code in <A NAME="rl6"><A HREF="#l6">Listing Six</A> that is returned to the client as part of the larger web page created by this JSP.</p><p>Prior to JSP 2.0 and EL, the scriptlet in <A NAME="rl7"><A HREF="#l7">Listing Seven</A> was used to achieve the same result (the complete application is available electronically; see "Resource Center," page 5), which required the unfortunate commingling of Java code with JSP code.</p><p>Although writing scriptlets such as this isn't a problem for Java programmers, it can be difficult for page authors. With JSP 2.0, Java programmers can focus on implementing tag handlers and low-level application development, leaving page authors to craft scriptless pages using pure JSP code. Granted, EL isn't as easy to use as basic markup and will take time for less experienced page authors to master. However, EL is considerably less complex than Java and easy enough for experienced page authors to learn. In particular, page authors already comfortable with client-side scripting languages (such as JavaScript, JScript, VBScript, and so forth) will find EL a cinch by comparison.</p><h3>Simple Tag Handlers</h3><p>Custom actions let the JSP language be extended to support tags that aren't built into it. Thanks to the extensible nature of JSP technology, both Java developers and page authors can implement custom tags to simplify page creation. Starting with JSP 2.0, page authors can implement custom tags using JSP code in tag files, while Java developers can create Java classes that implement the streamlined <i>SimpleTag </i>interface in <A NAME="rt2"><A HREF="0307dt2.htm">Table 2</A>. </p><p>Although JSP 2.0 still supports the classic tag handlers, you'll find the simple tag-handling mechanism easier to use. This is especially true if you extend the related <i>javax.servlet.jsp.tagext.SimpleTagSupport</i> class that provides a default implementation of all methods defined by the <i>SimpleTag</i> interface, as illustrated by the <i>Media</i> tag handler class in <A NAME="rl8"><A HREF="#l8">Listing Eight</A>. This Java class extends the <i>SimpleTagSupport</i> class to implement a simple tag handler for the custom Web3D Web media action, and only has to override the <i>doTag() </i>method to completely handle this tag. When custom media tags appear in a JSP page, as shown in <A NAME="rl9"><A HREF="#l9">Listing Nine</A>(a), the container automatically invokes the corresponding <i>doTag() </i>method defined by the <i>media</i> simple tag handler in <A NAME="rl8"><A HREF="#l8">Listing Eight</A>.</p><p>This custom tag is used in the seaside.jsp page in <A NAME="rl10"><A HREF="#l10">Listing Ten</A>. The first line of this JSP defines a prefix for all tags found in the given tag-library descriptor (TLD). A TLD is an XML file that describes the tag library and each tag that it contains. In <A NAME="rl9"><A HREF="#l9">Listing Nine</A>(b), the prefix "web3Dweb" provides a unique namespace for all tags described in the <i>web3Dweb.tld</i> tag-library descriptor, of which "media" is one. When the custom media tag shown in <A NAME="rl10"><A HREF="#l10">Listing Ten</A> is processed, the HTML code in <A NAME="rl9"><A HREF="#l9">Listing Nine</A>(c) is generated by the handler and returned by the server to the client, which, in turn, delivers the specified 3D world to end users (see <A NAME="rf3"><A HREF="0307df3.htm">Figure 3</A>).</p><p>The true power behind this custom action lies in its flexibility. Any piece of media content provided by the Web3D Web media network, regardless of its format, can be woven into a JSP using this tag. <A NAME="rl9"><A HREF="#l9">Listing Nine</A>(d), for example, displays the snapshot of the animated Flash movie in <A NAME="rf4"><A HREF="0307df4.htm">Figure 4</A>. In this case, the HTML code generated by the tag handler is different than that of the previous example because the tag configuration specifies a different piece of media. Similarly, if the page author configures the media tag incorrectly (specifying, for instance, media that doesn't exist on the network) or if the network can't deliver the requested media for any reason, the tag handler generates HTML code presenting an error message to the client. </p><h3>Conclusion</h3><p>Sun's J2EE 1.4 SDK supports JSP 2.0, and is freely available through Sun's J2EE homepage (http://java.sun.com/j2ee/). If you just want to use JSP 2.0, however, try Apache's free Tomcat 5 JSP/Servlet container (http://jakarta.apache.org/tomcat/). Sun's SDK is actually based, in part, on Apache Tomcat. In either case, arm yourself with the JSP 2.0 spec and related API documentation, both available at http://java.sun.com/products/jsp/. Additionally, you may find the JSP sections of Sun's J2EE Tutorial Addendum helpful (http://java.sun.com/j2ee/1.4/docs/tutorial/).</p><h3>Acknowledgments</h3><p>The JSP 2.0 examples I present here are provided courtesy of the Web3DWeb digital media network. Accessible through the traditional Web at http://Web3DWeb.com/, the Web3DWeb is a massively scalable digital-media network for interactive digital cinema, multiplayer 3D games, streaming media, and other forms of rich digital content. Built using open Internet and web standards layered on J2EE 1.4, the web client interface is constructed using JSP and servlets, a few of which I present here as real-world examples of JSP 2.0 in action. The media submission form, for instance, provides end users and members with a mechanism for submitting content to the network. <A NAME="rf3"><A HREF="0307df3.htm">Figures 3</A> and <A NAME="rf4"><A HREF="0307df4.htm">4</A>, on the other hand, illustrate how custom tags are used to simplify the process of delivering rich media content for page authors. The complete code for these applications, along with instructions on how to deploy and test them using the Tomcat 5 JSP/Servlet container, are also available electronically.</p><p></p><p><b>DDJ</b></p><H4><A NAME="l1">Listing One</H4><pre>&lt;jsp:useBean id="web3Dlogo" scope="application" class="web3Dweb.Logo"/&gt;&lt;img src    = "${web3Dlogo.URL}"      height = "${web3Dlogo.high}"      width  = "${web3Dlogo.wide}"/&gt;</pre><P><A HREF="#rl1">Back to Article</A></P><H4><A NAME="l2">Listing Two</H4><pre>&lt;img src="http://web3dweb.com/images/web3Dweb_banner_75dpi.png"      width="780" height="239" /&gt; </pre><P><A HREF="#rl2">Back to Article</A></P><H4><A NAME="l3">Listing Three</H4><pre>&lt;%@ taglib prefix="c" uri="http://java.sun.com/jstl/core_rt" %&gt;&lt;%@ page import="web3Dweb.MediaCategories" %&gt;&lt;%@ page contentType="text/html; charset=ISO-8859-5" %&gt;&lt;html&gt; &lt;head&gt;  &lt;title&gt;Web3D Web Media Submission Form : JSP SCRIPTLET VERSION&lt;/title&gt;  &lt;meta name="Author" content="Milena Mejia, Dean Hantzis,                                Ian Lamont, Aaron Walsh"&gt;  &lt;meta name="Copyright" content="Web3DWeb.com"&gt;   &lt;meta name="License" content="http://Web3DWeb.com/license"&gt;  &lt;link href="style.css" rel="stylesheet" type="text/css"&gt;  &lt;script src="validate.js" language="JavaScript"           type="text/javascript"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt;  &lt;h1&gt;.: Web3D Web :.&lt;/h1&gt;  &lt;h2&gt;.: Media Submission Form :.&lt;/h2&gt;  &lt;form name="submitForm" onsubmit="return validateForm(this)"        method="post"     action="confirmSubmission.jsp"&gt;  &lt;table width="340" cellpadding="5" cellspacing="0"         border="0" align="center" summary="Submission form"&gt;   &lt;tbody&gt;    &lt;tr&gt;&lt;td colspan="3"&gt;     &lt;strong&gt;Title:&lt;/strong&gt;      &lt;img alt="Required Field" name="titleerror"            src="blank.gif" width="118" height="10" border="0"&gt;&lt;br&gt;      &lt;input name="title" type="text" size="55"              maxlength="255" value=""&gt;     &lt;/td&gt; &lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="3"&gt;     &lt;br&gt;     &lt;strong&gt;Creator:&lt;/strong&gt;       &lt;img alt="Required Field" name="creatorerror"             src="blank.gif" width="118" height="10" border="0"&gt;&lt;br&gt;       &lt;input name="creator" type="text" size="55"               maxlength="255" value=""&gt;    &lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="3"&gt;     &lt;br&gt;     &lt;strong&gt;URL:&lt;/strong&gt;     &lt;img alt="Required Field" name="urlerror"           src="blank.gif" width="118" height="10" border="0"&gt;&lt;br&gt;     &lt;input type="text" size="55" maxlength="255"             name="url" value="http://"&gt;    &lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td colspan="3" height="5"&gt; &lt;/td&gt;&lt;/tr&gt;     &lt;tr&gt;&lt;td colspan="3" align="center"&gt;      &lt;strong&gt;Category:&lt;/strong&gt;        &lt;select name="category"&gt;         &lt;option value="0" selected="selected"&gt;????&lt;/option&gt;            &lt;jsp:useBean id="categories" scope="application"                          class="web3Dweb.MediaCategories"/&gt;            &lt;c:forEach var="item" items="${categories.mediaCategories}"&gt;              &lt;option&gt;&lt;c:out value="${item}" /&gt;&lt;/option&gt;            &lt;/c:forEach&gt;       &lt;/select&gt;     &lt;img alt="Required Field" name="categoryerror"           src="blank.gif" width="118" height="10" border="0"&gt;    &lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt; &lt;td colspan="3" height="5"&gt; &lt;/td&gt; &lt;/tr&gt;    &lt;tr&gt; &lt;td colspan="3"&gt;     &lt;strong&gt;Brief Description:&lt;/strong&gt;      &lt;img alt="Required Field" name="summaryerror"            src="blank.gif" width="118" height="10" border="0"&gt;&lt;br&gt;      &lt;textarea name="summary" cols="42" rows="8"&gt;&lt;/textarea&gt;    &lt;/td&gt; &lt;/tr&gt;    &lt;tr&gt; &lt;td colspan="3" height="5"&gt; &lt;/td&gt; &lt;/tr&gt;    &lt;tr&gt; &lt;td colspan="3" align="center"&gt;    &lt;input type="submit" name="submitform" value="Submit"&gt;     &lt;/td&gt; &lt;/tr&gt;   &lt;/tbody&gt;  &lt;/table&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</pre><P><A HREF="0307ds1.htm#rl3">Back to Article</A></P><H4><A NAME="l4">Listing Four </H4><pre>&lt;select name="category"&gt; &lt;option value="0" selected="selected"&gt;????&lt;/option&gt;   &lt;jsp:useBean id="categories"                scope="application" class="web3Dweb.MediaCategories"/&gt;  &lt;c:forEach var="item" items="${categories.mediaCategories}"&gt;    &lt;option&gt;&lt;c:out value="${item}" /&gt;&lt;/option&gt;  &lt;/c:forEach&gt;&lt;/select&gt;</pre><P><A HREF="0307ds1.htm#rl4">Back to Article</A></P><H4><A NAME="l5">Listing Five</H4><pre>package web3Dweb;import java.util.*;/**  * Web3D Web Media Categories testing JavaBean. Note that in production media  * categories are actually pulled live from a database. * @author Aaron E. Walsh * Copyright 2003, Web3D Web. All Rights Reserved. * Use subject to license terms: http://web3Dweb.com/license */public class MediaCategories {   private ArrayList mediaCategories;   public MediaCategories() {      mediaCategories = new ArrayList();      mediaCategories.add("Movies");        mediaCategories.add("Music");      mediaCategories.add("Games");      mediaCategories.add("Fun");      mediaCategories.add("Shopping");      mediaCategories.add("Sports");      mediaCategories.add("Videos");           mediaCategories.add("Worlds");            Collections.sort(mediaCategories);      mediaCategories.add("Misc.");    }   public Collection getMediaCategories() {      return mediaCategories;   }}</pre><P><A HREF="#rl5">Back to Article</A></P><H4><A NAME="l6">Listing Six</H4><pre>&lt;select name="category"&gt; &lt;option value="0" selected="selected"&gt;????&lt;/option&gt; &lt;option&gt;Fun&lt;/option&gt; &lt;option&gt;Games&lt;/option&gt; &lt;option&gt;Movies&lt;/option&gt; &lt;option&gt;Music&lt;/option&gt; &lt;option&gt;Shopping&lt;/option&gt; &lt;option&gt;Sports&lt;/option&gt; &lt;option&gt;Videos&lt;/option&gt; &lt;option&gt;Worlds&lt;/option&gt; &lt;option&gt;Misc.&lt;/option&gt;&lt;/select&gt;</pre><P><A HREF="#rl6">Back to Article</A></P><H4><A NAME="l7">Listing Seven</H4><pre>&lt;select name="category"&gt; &lt;option value="0" selected="selected"&gt;????&lt;/option&gt; &lt;jsp:useBean id="categories"              scope="application" class="web3Dweb.MediaCategories"/&gt; &lt;%    Iterator i = categories.getMediaCategories().iterator();   while (i.hasNext()) {     String cat = (String)i.next(); %&gt;   &lt;option&gt;&lt;%=cat%&gt;&lt;/option&gt; &lt;%     }  %&gt;&lt;/select&gt;</pre><P><A HREF="#rl7">Back to Article</A></P><H4><A NAME="l8">Listing Eight</H4><pre>/** * Media.java. JSP 2.0 Simple Tag Handler for the Web3D Web "media" tag * @author Aaron E. Walsh * Copyright 2003, Web3D Web. All Rights Reserved. * Use subject to license terms: http://web3Dweb.com/license */package web3Dweb;import javax.servlet.jsp.JspException;import javax.servlet.jsp.tagext.SimpleTagSupport;import java.io.IOException;/* Dymamically constructs the appropriate HTML tag(s) for the * media specified by the Web3D Web "media" tag */public class Media extends SimpleTagSupport {  private String name, category, width, height;  // tag attribute setter methods  public void setName(String name) {this.name=name;}   public void setCategory(String category) {this.category=category;}   public void setWidth(String width) {this.width=width;}   public void setHeight(String height) {this.height=height;}   // tag handler doTag() method  public void doTag() throws JspException, IOException {    MediaResolver mr = new MediaResolver(name, category);     getJspContext().getOut().write(      "&lt;object" +     " data=\"" + mr.getURL() + "\"" +     " type=\"" + mr.getMimeType() + "\"" +     " width=\"" + width + "\"" +     " height=\"" + height + "\"" +     "&gt;" +     mr.getParameters() +     "&lt;/object&gt;"    );  }}</pre><P><A HREF="#rl8">Back to Article</A></P><H4><A NAME="l9">Listing Nine</H4>(a)<pre>&lt;web3Dweb:media name="seaside" category="world"                 width="800" height="600"/&gt;(b) <pre>&lt;%@ taglib prefix="web3Dweb" uri="/WEB-INF/tlds/web3Dweb.tld" %&gt;(c)<pre>&lt;object data="http://web3dchat.com/seaside/wrl.wrl" type="model/vrml"        width="800" height="600"&gt; &lt;param name="src" value="http://web3dchat.com/seaside/wrl.wrl"&gt;&lt;/object&gt;(d)<pre>&lt;web3Dweb:media name="valentine card" category="movie"                 width="800" height="600"/&gt;</pre><P><A HREF="#rl9">Back to Article</A></P><H4><A NAME="l10">Listing Ten</H4><pre>&lt;%@ taglib prefix="web3Dweb" uri="/WEB-INF/tlds/web3Dweb.tld" %&gt;&lt;html&gt;  &lt;head&gt;    &lt;title&gt;Web3D Web : Web3DWeb.com&lt;/title&gt;    &lt;link href="style.css" rel="stylesheet" type="text/css"&gt;    &lt;meta name="Author" content="Aaron E. Walsh"&gt;    &lt;meta name="Copyright" content="Web3DWeb.com"&gt;     &lt;meta name="License" content="http://Web3DWeb.com/license"&gt;  &lt;/head&gt;  &lt;body bgcolor="white"&gt;   &lt;h1 align="center"&gt;IMMERSIVE WORLDS @ web3Dweb.com&lt;/h1&gt;   &lt;h2&gt;Your immersive 3D experience begins in a rustic seaside cabin.    Open the red doors and walk down to the sea, jump into the wooden boat,    dive into the water, and touch floating portals to enter new worlds...&lt;/h2&gt;   &lt;web3Dweb:media name="seaside" category="world" width="800" height="600"/&gt;  &lt;/body&gt;&lt;/html&gt;</pre><P><A HREF="#rl10">Back to Article</A></P></body></html>