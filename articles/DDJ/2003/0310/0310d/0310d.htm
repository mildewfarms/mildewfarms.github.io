<html><head><title>Oct03: Java 2D  &Web Pages</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>Java 2D  &amp;Web Pages</h1><p><i>Dr. Dobb's Journal</i> October 2003</p><h2>Graphics and  dynamic data</h2><h3>By Paul Tremblett</h3><I>Paul is a member of the technical staff at AudioAudit. He can be reached at ptremblett@audioaudit.com.</I><hr><p>When you think of Java 2D, you usually think of Swing applications that render graphics onto displays. The only way web applications can access screens is via browsers, which retrieve and display images. However, because the images are provided by servers, you really need to think in terms of server-side Java 2D. In this article, I show how to add graphics containing dynamic data to web pages using the Java 2D API&#151;a set of classes for advanced 2D graphics and imaging that encompasses line art, text, and images in a single comprehensive model. </p><h3>A Web Application with Graphics</h3><p>One of my web sites, http://www.tremblett .ca/, features a server-side Java 2D application. The web page (<A NAME="rf1"><A HREF="0310df1.htm">Figure 1</A>) contains a navigation bar and HTML form containing radio buttons, a text-entry field, and a submit button. The only unfamiliar element is probably the "ballot validation number" (in the gray box), which prevents scripted bulk submission of HTML forms.  This validation technique assumes that it is difficult to write a script that reads a string from an image and transcribes it into a text-entry field, especially when the rules can be randomly varied; for example, enter only the digits that appear in red, enter only the odd digits and uppercase characters, and so on. </p><DDJADVERTISEMENT INLINE><p>Implementing this technique using server-side Java 2D is Poll.jps (available electronically; see "Resource Center," page 5), the JavaServer Page (JSP) that emits the web page in <A NAME="rf1"><A HREF="0310df1.htm">Figure 1</A>. The JSP action in:</p><blockquote><p>&lt;jsp:useBean id="ballotBean" scope="session" </p><p>  class="ca.tremblett.beans.BallotBean"/&gt;</p></blockquote><p>defines a JavaBean (<A NAME="rl1"><A HREF="#l1">Listing One</A>) with a scope of <i>session</i> referred to in the JSP by the identifier <i>ballotBean</i>, and that is an instance of <i>ca.tremblett.beans.BallotBean</i>. The bean's constructor uses the <i>Random</i> class to generate a series of five random numbers that are used to select five alphanumeric characters from the string that contains all of the characters allowed in a ballot control number. It stores a <i>String</i> containing the ballot control number in an instance variable, which is returned by the getter method <i>getBallotControlNumber()</i>. </p><p>In Poll.jsp, the line <i>&lt;%@ taglib prefix="ballot" uri="WEB-INF/tld/ballot.tld"%&gt;</i> is a JSP <i>taglib</i> directive that declares that the page uses a tag library. It specifies the Uniform Resource Identifier (URI) from which the path to the XML document that describes the library can be found. This XML document is called a "Tag Library Descriptor" (TLD). The <i>taglib</i> directive also associates the prefix ballot with usage of actions in the library.</p><p>At approximately line 137 in Poll.jsp, the line <i>&lt;ballot:getBallotControlNumber/&gt;</i> indicates that the tag library defined earlier and identified by the prefix ballot contains a <i>getBallotControlNumber</i> element type that is to be included in the page. <A NAME="rl2"><A HREF="#l2">Listing Two</A> contains the TLD and the <i>&lt;tag-class&gt;</i> tag, which specifies that the tag handler implementation class for the tag <i>getBallotControlNumber</i> is specified by the <i>&lt;name&gt;</i> tag that precedes it&#151;<i>ca.tremblett.taglib.ballot.GetBallotControlNumberTag</i>. GetBallotControlNumberTag.java (available electronically) is the source code for this class. </p><p>Since the ballot control number is generated by the <i>BallotBean</i>, you start by retrieving an instance of <i>BallotBean</i> from the session object (if one exists). If the session object does not contain a <i>BallotBean</i> object stored with the key <i>ballotBean</i>, I use the <i>Beans.instantiate()</i> method to create an instance and save it in the session object.</p><p>Next, get an instance of the class <i>ImageWriter</i> by invoking the method <i>getPNGImageWriter()</i>. JDK 1.4 introduced the package <i>javax.imageio</i>, which contains the basic classes and interfaces for describing the contents of image files, including metadata and thumbnails. The <i>javax.imageio</i> package also has tools for controlling the image reading/writing process, performing transcoding between formats, and reporting errors. One class in <i>javax.imageio</i> is <i>ImageWriter</i>, an abstract superclass for encoding and writing images. If you examine the <i>getPNGImageWriter()</i> method, you see that to obtain an <i>ImageWriter</i>, you start by invoking the static method <i>getImageWritersByFormatName()</i> of the <i>ImageIO</i> class. Specify ".png" (Portable Network Graphics) as the format to obtain a writer. I chose Portable Network Graphics because it is patent free and rendered most uniformly by a variety of browsers. The <i>getImageWritersByFormatName()</i> method returns an <i>Iterator</i> containing all currently registered <i>ImageWriters</i> that claim to be able to encode the specified format. For simplicity, I chose the first element. </p><p>The image you generate must ultimately be written to an output stream associated with a file that can be requested by the browser. To get this stream, invoke <i>getImageOutputStream()</i> and pass the path name of the real directory that corresponds to the /images directory (in the context in which the web application is running) as an argument. The <i>getImageOutputStream()</i> method creates a temporary file in the specified directory. The file has the prefix "pollControl_" and the extension ".png." It passes the file name to the static method <i>createImageOutputStream()</i> of class <i>ImageIO</i> and returns the resulting instance of <i>ImageOutputStream</i>.</p><p>Don't write directly to the output stream, but rather to a <i>BufferedImage</i>. You get this buffered image by invoking the method <i>getControlNumberImage()</i>, which takes as an argument a <i>String</i> containing the random number returned by the <i>getBallotControlNumber()</i> method of the <i>BallotBean</i> retrieved from the session object.</p><p>Looking at the <i>getControlNumberImage()</i> method, you start by passing a width of 1200, height of 1200, and image type of TYPE_INT_RGB to the constructor of the <i>BufferedImage</i> class. TYPE_INT_RGB represents an image with 8-bit RGB color components packed into integer pixels. To draw in the <i>BufferedImage</i>, you need a <i>Graphics2D</i>, which you get by invoking the <i>createGraphics()</i> method of the instance of <i>BufferedImage</i>. The rendering engine represented by this <i>Graphics2D</i> object is designed to do the best possible job for any given device. It accepts hints that it incorporates into its rendering algorithms. I use the <i>setRenderingHint()</i> method to request that the rendering engine use antialiased fonts.</p><p>You next invoke the <i>fillBackground() </i>method, which creates a <i>Color</i> object using a value of 0xcc for the red, green, and blue components. I generally try to limit my choice of colors to nondithering using colors that limit their RGB values to 0x33, 0x66, 0x99, xcc, and 0xff. (For more on nondithered colors, see http://www.lynda.com/hex.html.) Pass the instance of <i>Color</i> to the <i>Graphic2D's setPaint()</i> method to set the <i>Color</i> attribute of the graphics context. Next, create a <i>Rectangle2D</i> object, set its interior color using <i>g.fill()</i>, and draw it using <i>g.draw()</i>.</p><p>The ballot control number that was received as an argument is text, so rendering it requires a <i>Font</i>. Create an instance of <i>Font</i> that uses the <i>sanserif</i> logical font&#151;one of the five font families defined by the Java platform that must be supported by any Java run-time environment. After getting the <i>Font()</i> object, pass it as an argument to the <i>Graphic2D</i> object's <i>setFont()</i> method. After the graphic context's font has been set, get the rendering context of the font using <i>getFontRenderContext()</i> and pass the font rendering context and the <i>String</i> containing the ballot control number to the <i>Font </i>object's <i>createGlyphVector()</i> method. The <i>GlyphVector</i> that is returned is a collection of glyphs containing geometric information for the placement of each glyph in a transformed coordinate space that corresponds to the device on which the <i>GlyphVector</i> is ultimately displayed (or, in this case, drawn).</p><p>To make the ballot control number awkward to read by text-scanning software, you invoke <i>randomlyShearGlyphs()</i>. It generates pairs of random double-precision values that it uses to create a shearing transformation using the static method <i>getShearInstance()</i> of <i>AffineTransform</i>. The matrix representing the returned transform is:</p><blockquote><p>  [  1  shx  0 ]</p><p>  [ shy  1   0 ]</p><p>  [  0    0   1 ]</p></blockquote><p>where <i>shx</i> and <i>shy</i> are the values passed to <i>getShearInstance()</i>. <A NAME="rf2"><A HREF="0310df2.htm">Figure 2</A>(a) shows the bounding rectangles for each of the transformed glyphs as well as the bounding rectangle that encloses the sheared glyphs. Even though no drawing has taken place yet, I included the glyphs to make things a little easier to see.</p><p>It is possible that the transformation could result in a portion of the left-most character falling outside the user space of the graphics context, so you use <i>adjustForNegativeShear()</i> to compensate for this. This method determines the minimum <i>X</i> and <i>Y</i> values for the array of glyphs, and uses these values as arguments to the <i>translate()</i> method. This method concatenates the current <i>Graphics2D Transform</i> with a translation transform represented by this matrix:</p><blockquote><p>  [ 1 0 tx ]</p><p>  [ 0 1 ty ]</p><p>  [ 0 0 1  ]</p></blockquote><p>where <i>tx</i> and <i>ty</i> are the values passed to the <i>translate()</i> method. Subsequent rendering is translated by the specified distance relative to the previous position.</p><p>After performing the adjustment, get the containing rectangle that represents the area into which the sheared glyphs will ultimately be drawn. This containing rectangle is the blue rectangle in <A NAME="rf2"><A HREF="0310df2.htm">Figure 2</A>(b). You can see its position relative to the original containing rectangle in <A NAME="rf2"><A HREF="0310df2.htm">Figure 2</A>(a).</p><p>Now it's time to actually draw the glyphs that represent the ballot control numbers, so you invoke <i>drawGlyphs().</i> I use a nondithering color with RGB components of 0x66, 0x66, and 0x66. I also use an <i>AlphaComposite</i> object to set the degree to which the rendered characters are transparent. <A NAME="rf2"><A HREF="0310df2.htm">Figure 2</A>(c) shows the rendered glyphs. The edges are bumpy because I drew them using a <i>BasicStroke</i> that draws a dotted line using a dash pattern of two opaque sections followed by two transparent sections. This is just another attempt to foil software that might try to use edge-detection to read the ballot control number. The green rectangle you see is the rectangle calculated by the <i>getOuterFrame()</i>.</p><p>Now call <i>drawEllipticalCrossHatching()</i>. This method calls the methods <i>drawHorizontalEllipses()</i> and <i>drawVerticalEllipses()</i>. The drawing performed by <i>drawHorizontalEllipses()</i> is shown in <A NAME="rf2"><A HREF="0310df2.htm">Figure 2</A>(d). The trick in drawing such a series of shapes lies in not burdening yourself with devising an algorithm that calculates the position at which each shape is to be drawn, but rather drawing the same figure repetitively and transforming the graphics context each time you finish drawing. You can think of this as "leave the pen where it is; move the paper." After <i>drawVerticalEllipses()</i> has been invoked, the ballot control number looks like <A NAME="rf2"><A HREF="0310df2.htm">Figure 2</A>(e). You can now see why I needed the green rectangle calculated by <i>getOuterFrame()</i>.</p><p>Finally, use <i>getSubImage()</i> to obtain only that portion of the large <i>BufferedImage</i> that actually contains the ballot control number. Near the end of the <i>doStartTag()</i> method (see GetBallotControl NumberTag.java, available electronically), you write the image to the <i>ImageWriter </i>and close the <i>ImageOutputStream</i>. Then you get the actual name of the file containing the image and save it as a session attribute using the key "fileName." You get the output stream being used as a JSP writer and write HTML that looks like <i>&lt;img src="filename.png"&gt;</i>. The final result is that the <i>&lt;ballot:getBallotControlNumber/&gt;</i> tag in Poll.jsp is replaced by <i>&lt;img src="images/pollControl_57932.png"&gt;</i>.</p><h3>Presenting  Dynamic Data Graphically</h3><p>After you complete the ballot in <A NAME="rf1"><A HREF="0310df1.htm">Figure 1</A> and click on the Complete Poll button, your browser displays <A NAME="rf3"><A HREF="0310df3.htm">Figure 3</A>. Here's how that screen was generated: The <i>&lt;form&gt;</i> tag in Poll.jsp looks like this:</p><blockquote><p>&lt;form name="ballot" method="post" action=</p><p>"&lt;%=request.getContextPath()%&gt;/servlet/ca.trem- 		           blett.VoteServlet"&gt;</p></blockquote><p>The <i>action</i> element specifies that the POST request constructed (using the elements of the form) is sent to the servlet code contained in the class <i>ca.tremblett.VoteServlet</i> (see VoteServlet.java, available electronically). The servlet's <i>init() </i>method uses the Java Naming and Directory Interface (JNDI) to get a <i>DataSource</i> object that it later uses to get a connection to a MySQL database containing the table used to record each ballot.</p><p>The <i>doPost()</i> method uses the Reflection API to invoke a method that it constructs dynamically using the value of the hidden field command contained in the HTML form in Poll.jsp. Although it is not entirely necessary in the present situation, using this dynamic dispatch technique enables me to extend the servlet to process other commands by simply adding an entry to the <i>commands[]</i> array and writing a method with a name that corresponds to the name of the new command (a technique I first discussed in my article "Java Reflection," <i>DDJ</i>, January 1998). Looking at the <i>vote()</i> method that processes the vote command, you see that it contains code that:</p><ul>  <li>Prevents the casting of multiple votes in the same session by checking the value of the variable <i>ballotEligible</i> in the <i>BallotBean</i>.  <li>Checks to make sure that one of the radio buttons was checked.  <li>Checks to make sure that the ballot control number was transcribed from the image into the text-entry field.  <li>Retrieves the value of the ballot control number that was saved in the <i>BallotBean </i>and checks that it matches the one that was entered in the text-entry field.</ul><p>If these conditions are met, you save the value of the checked radio button in the <i>stats</i> table in the <i>polldb1</i> database. <A NAME="rl3"><A HREF="#l3">Listing Three</A> (cr_stats.sql) is the SQL code used to create the <i>stats</i> table.</p><p>After setting the <i>ballotEligible</i> variable in the <i>BallotBean</i> to <i>false</i> to prevent duplicate votes, you forward the request to PollResults.jsp (available electronically). </p><p>PollResults.jsp contains the custom tag <i>&lt;ballot:getPollResults/&gt;</i>. If you examine the <i>taglib</i> directive at the top of the PollResults.jsp, you see that the URL gets you to the TLD from which you can ascertain that the handler code is found in the class <i>GetPollResultsTag</i>. The code for this class is in GetPollResultsTag.java (available electronically). In the <i>doStart()</i> method, you retrieve ballot results from the <i>stats</i> table. The results are in the <i>count[]</i> array. I used these values to draw a pie chart containing a different color slice for each of the three choices users can make. I use the same technique I applied to draw the ellipses created when I generated the image containing the ballot control number; but instead of drawing complete ellipses, I draw arcs with central angles that are the same percentage of a full circle as the percentage the arc represents of the total ballots cast.</p><p>The final result is that the <i>&lt;ballot:getPollResults/&gt;</i> tag in PollResults.jsp is replaced by <i>&lt;img src="images/pollresults_12169.png"&gt;</i>.</p><p>The only remaining task, which is beyond the scope of this article, is the addition of code that deletes old copies of the .png files so that they do not accumulate and cause the server to run out of space. </p><h3>Conclusion</h3><p>When appropriate, you can and should provide users with a graphical representation of data in lieu of rows and columns of plain text. Server-side Java 2D incorporated into standard web application components provides you with an easy way to do this.</p><p></p><p><b>DDJ</b></p><H4><A NAME="l1">Listing One</H4><pre>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE taglib        PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN"        "http://java.sun.com/dtd/web-jsptaglibrary_1_2.dtd"&gt;&lt;!-- template test --&gt;&lt;taglib&gt;    &lt;tlib-version&gt;1.0&lt;/tlib-version&gt;    &lt;jsp-version&gt;1.2&lt;/jsp-version&gt;    &lt;short-name&gt;ballot&lt;/short-name&gt;    &lt;uri&gt;/ballot&lt;/uri&gt;    &lt;display-name&gt;ballot&lt;/display-name&gt;    &lt;description&gt;A blank tag library template.     &lt;/description&gt;        &lt;!-- Forte4J_TLDX:  This comment contains code generation       information. Do not delete.    &lt;tldx&gt;        &lt;tagHandlerGenerationRoot&gt;          C:\paul\DrDobbs\WEB-INF\classes        &lt;/tagHandlerGenerationRoot&gt;        &lt;JarFile&gt;&lt;/JarFile&gt;    &lt;/tldx&gt;    --&gt;            &lt;tag&gt;        &lt;name&gt;getBallotControlNumber&lt;/name&gt;        &lt;tag-class&gt;          ca.tremblett.taglib.ballot.GetBallotControlNumberTag        &lt;/tag-class&gt;        &lt;body-content&gt;JSP&lt;/body-content&gt;        &lt;display-name&gt;getBallotControlNumber&lt;/display-name&gt;        &lt;description&gt;&lt;/description&gt;        &lt;!-- Forte4J_TLDX:  This comment contains code generation           information. Do not delete.        &lt;tldx&gt;            &lt;packagename&gt;ca.tremblett.taglib.ballot&lt;/packagename&gt;            &lt;extendsSupportClass&gt;TRUE&lt;/extendsSupportClass&gt;            &lt;supportClass&gt;BodyTagSupport&lt;/supportClass&gt;            &lt;implementsTryCatchFinally&gt;              FALSE            &lt;/implementsTryCatchFinally&gt;            &lt;findparent&gt;FALSE&lt;/findparent&gt;        &lt;/tldx&gt;        --&gt;        &lt;example&gt;&lt;/example&gt;    &lt;/tag&gt;    &lt;tag&gt;        &lt;name&gt;getPollResults&lt;/name&gt;        &lt;tag-class&gt;          ca.tremblett.taglib.ballot.GetPollResultsTag        &lt;/tag-class&gt;        &lt;body-content&gt;JSP&lt;/body-content&gt;        &lt;display-name&gt;getPollResults&lt;/display-name&gt;        &lt;small-icon&gt;&lt;/small-icon&gt;        &lt;large-icon&gt;&lt;/large-icon&gt;        &lt;description&gt;&lt;/description&gt;        &lt;!-- Forte4J_TLDX:  This comment contains code generation           information. Do not delete.        &lt;tldx&gt;            &lt;packagename&gt;ca.tremblett.taglib.ballot&lt;/packagename&gt;            &lt;extendsSupportClass&gt;TRUE&lt;/extendsSupportClass&gt;            &lt;supportClass&gt;BodyTagSupport&lt;/supportClass&gt;            &lt;implementsTryCatchFinally&gt;              FALSE            &lt;/implementsTryCatchFinally&gt;            &lt;findparent&gt;FALSE&lt;/findparent&gt;            &lt;parenttype&gt;&lt;/parenttype&gt;            &lt;parentvariable&gt;&lt;/parentvariable&gt;        &lt;/tldx&gt;        --&gt;        &lt;example&gt;&lt;/example&gt;    &lt;/tag&gt;    &lt;!-- Validators are new in JSP1.2. You may have zero or one       validator in a tag library. They look like this:      &lt;validator&gt;          &lt;validator-class&gt;            org.your.web.app.ValidateTaglibUsage          &lt;/validator-class&gt;          &lt;init-param&gt;             &lt;param-name&gt;aparameter&lt;/param-name&gt;             &lt;param-value&gt;value&lt;/param-value&gt;             &lt;description&gt;Describe this parameter&lt;/description&gt;      &lt;/init-param&gt;      &lt;/validator&gt;   --&gt;   &lt;!-- listeners are new in JSP1.2. You may have as many listeners       as you like in a tag library. They look like this:     &lt;listener&gt;        &lt;listener-class&gt;           org.your.web.app.TaglibListener1        &lt;/listener-class&gt;      &lt;/listener&gt;   --&gt;&lt;/taglib&gt;</pre><P><A HREF="#rl1">Back to Article</A></P><H4><A NAME="l2">Listing Two</H4><pre>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE taglib        PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN"        "http://java.sun.com/dtd/web-jsptaglibrary_1_2.dtd"&gt;&lt;!-- template test --&gt;&lt;taglib&gt;    &lt;tlib-version&gt;1.0&lt;/tlib-version&gt;    &lt;jsp-version&gt;1.2&lt;/jsp-version&gt;    &lt;short-name&gt;ballot&lt;/short-name&gt;    &lt;uri&gt;/ballot&lt;/uri&gt;    &lt;display-name&gt;ballot&lt;/display-name&gt;    &lt;description&gt;A blank tag library template.     &lt;/description&gt;        &lt;!-- Forte4J_TLDX:  This comment contains code generation       information. Do not delete.    &lt;tldx&gt;        &lt;tagHandlerGenerationRoot&gt;          C:\paul\DrDobbs\WEB-INF\classes        &lt;/tagHandlerGenerationRoot&gt;        &lt;JarFile&gt;&lt;/JarFile&gt;    &lt;/tldx&gt;    --&gt;            &lt;tag&gt;        &lt;name&gt;getBallotControlNumber&lt;/name&gt;        &lt;tag-class&gt;          ca.tremblett.taglib.ballot.GetBallotControlNumberTag        &lt;/tag-class&gt;        &lt;body-content&gt;JSP&lt;/body-content&gt;        &lt;display-name&gt;getBallotControlNumber&lt;/display-name&gt;        &lt;description&gt;&lt;/description&gt;        &lt;!-- Forte4J_TLDX:  This comment contains code generation           information. Do not delete.        &lt;tldx&gt;            &lt;packagename&gt;ca.tremblett.taglib.ballot&lt;/packagename&gt;            &lt;extendsSupportClass&gt;TRUE&lt;/extendsSupportClass&gt;            &lt;supportClass&gt;BodyTagSupport&lt;/supportClass&gt;            &lt;implementsTryCatchFinally&gt;              FALSE            &lt;/implementsTryCatchFinally&gt;            &lt;findparent&gt;FALSE&lt;/findparent&gt;        &lt;/tldx&gt;        --&gt;        &lt;example&gt;&lt;/example&gt;    &lt;/tag&gt;    &lt;tag&gt;        &lt;name&gt;getPollResults&lt;/name&gt;        &lt;tag-class&gt;          ca.tremblett.taglib.ballot.GetPollResultsTag        &lt;/tag-class&gt;        &lt;body-content&gt;JSP&lt;/body-content&gt;        &lt;display-name&gt;getPollResults&lt;/display-name&gt;        &lt;small-icon&gt;&lt;/small-icon&gt;        &lt;large-icon&gt;&lt;/large-icon&gt;        &lt;description&gt;&lt;/description&gt;        &lt;!-- Forte4J_TLDX:  This comment contains code generation           information. Do not delete.        &lt;tldx&gt;            &lt;packagename&gt;ca.tremblett.taglib.ballot&lt;/packagename&gt;            &lt;extendsSupportClass&gt;TRUE&lt;/extendsSupportClass&gt;            &lt;supportClass&gt;BodyTagSupport&lt;/supportClass&gt;            &lt;implementsTryCatchFinally&gt;              FALSE            &lt;/implementsTryCatchFinally&gt;            &lt;findparent&gt;FALSE&lt;/findparent&gt;            &lt;parenttype&gt;&lt;/parenttype&gt;            &lt;parentvariable&gt;&lt;/parentvariable&gt;        &lt;/tldx&gt;        --&gt;        &lt;example&gt;&lt;/example&gt;    &lt;/tag&gt;    &lt;!-- Validators are new in JSP1.2. You may have zero or one       validator in a tag library. They look like this:      &lt;validator&gt;          &lt;validator-class&gt;            org.your.web.app.ValidateTaglibUsage          &lt;/validator-class&gt;          &lt;init-param&gt;             &lt;param-name&gt;aparameter&lt;/param-name&gt;             &lt;param-value&gt;value&lt;/param-value&gt;             &lt;description&gt;Describe this parameter&lt;/description&gt;      &lt;/init-param&gt;      &lt;/validator&gt;   --&gt;   &lt;!-- listeners are new in JSP1.2. You may have as many listeners       as you like in a tag library. They look like this:     &lt;listener&gt;        &lt;listener-class&gt;           org.your.web.app.TaglibListener1        &lt;/listener-class&gt;      &lt;/listener&gt;   --&gt;&lt;/taglib&gt;</pre><P><A HREF="#rl2">Back to Article</A></P><H4><A NAME="l3">Listing Three</H4><pre>drop table stats;create table stats (  visitdate date,  medium set('1','2','3'))type=bdb;</pre><P><A HREF="#rl3">Back to Article</A></P></body></html>