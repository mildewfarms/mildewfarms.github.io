<html>
<head>
<title>Jan03: Robotic Control & 3D GUIs</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Robotic Control &amp; 3D GUIs</h1>
<p><i>Dr. Dobb's Journal</i> January 2003</p>
<h2>Operating GPS-enabled robots with an OpenGL GUI</h2>

<h3>By Hank Jones and Martin Snyder</h3>

<I>
Hank is a Ph.D. candidate in Aeronautics and Astronautics at Stanford University. Martin is president of Ethermoon Entertainment. They can be reached at hlj@arl.stanford.edu and msnyder@ ethermoon.com, respectively.</I>

<hr>

<p>Outside the realm of science fiction, robots and advanced user interfaces have a meager common history. For the most part, interfaces for real robots are extensions of output systems designed by development engineers. Only recently has the number of sophisticated interfaces increased due to the availability of easy-to-use window- and graphics-creation tools. In this article, we describe a GUI based on the OpenGL 3D API (http://www.opengl.org/) that we use to operate GPS-enabled robots.</p>
<p>The proliferation of high-performance systems with 3D graphics capability makes it possible to implement real-time computer systems that accurately display dynamic real-world environments. The most important prerequisite for such systems is knowledge of the position and motion of objects in the world. An increasing number of mobile machines and electronics are enabled with just this type of positioning information, thanks to inexpensive global-positioning system (GPS) receivers.  </p>
<DDJADVERTISEMENT INLINE>

<p>The basic tasks for real-world UIs include:</p>


<ul>
  <li>Collecting the data from available sensors.
  <li>Displaying this data.

  <li>Issuing commands that alter the state of the system.  

</ul>


<p>While robotics has not evolved to the point where it is possible to develop generic solutions to the first and third tasks, technologies for displaying real-time positional information are widespread enough to allow for such a solution. Here, we focus on one implementation of a real-time display, with only a general discussion of how our robots send data and receive commands.</p>



<h3>System Description</h3>


<p>The Free Flying Space Robot (FFSR) testbed at Stanford University's Aerospace Robotics Laboratory (http://arl.stanford.edu/) consists of three robots (0.5m&times;0.5m&times;0.75m; 75 kg) developed for research on advanced spaceborne motion, manipulation, and construction tasks; see <A NAME="rf1"><A HREF="0301af1.htm">Figure 1</A>. The FFSRs are designed to operate autonomously, with onboard electrical power, computation, sensing, and propulsion. A bank of batteries powers a Motorola MVME 167-33 MHz (68040) real-time processor that has ably controlled all basic robot functions for over 10 years. The robots wirelessly send live video to remote PCs for vision processing, the only aspect of their operation not conducted using onboard resources. Compressed air is carried in three tanks and used for levitation and propulsion via eight cold-gas thrusters. A large horizontal momentum wheel allows efficient orientation changes, and two arms with grippers enable complex manipulation tasks.</p>


<p>Position sensing of the robot is accomplished with four GPS antennae that provide both position and attitude using Differential Carrier Phase (DCPGPS) techniques. An indoor constellation of pseudosatellite transmitters provides a GPS environment simulating low Earth orbit. From an implementation standpoint, this system is no different than the more familiar outdoor satellite-based GPS system.</p>

<p>As <A NAME="rf1"><A HREF="0301af1.htm">Figure 1</A> shows, the workspace of the robots contains objects to be manipulated. The positions of these objects are calculated relative to the robot using onboard video cameras. Objects are detected and classified using unique infrared LED patterns on their surface. A product of this sensing method is that the measurements are unreliable. Even with a low-pass filter to take out most of the noise, errors are likely in all measurements, and there are biases in object positions due to the robots' position errors. As the objects get farther away, the errors tend to increase. These conditions can cause problems when two robots are supposed to perform a cooperative task with an object.</p>



<h3>Software</h3>


<p>Four applications run onboard in a real-time VxWorks (http://www.vxworks.com/) environment: </p>


<p></p>

<ul>
  <li>A low-level, servo-control feedback controller for thrusters, momentum wheel, arms, and grippers.
  <li>A first-order theorem prover to determine robot capability depending on the state of the robot and its environment.

  <li>A trajectory planner to build collision-free paths.

  <li>A task manager to execute high-level commands.  

</ul>

<p>These applications, as well as the GUI and any other off-board programs, communicate over IP via RTI's NDDS publish-subscribe middleware (http://www.rti.com/). Although direct sockets could be used (with slightly less overhead) for simpler systems, the publish-subscribe model provides flexibility and robustness for distributing information.</p>



<h3>GUI Software</h3>


<p>The GUI software is written in C++ for a Windows 2000 environment. We used the GLT library (http://www.nigels.com/glt/), a descendant of the GlutMaster library, to provide a C++ wrapper for the native C OpenGL Library and to permit cross-platform capability. GLT provides classes for "examiner" windows from which the robot GUI display window class <i>C3DGUI</i>Window was derived. This derived window class sets up mouse event handling for zooming, panning, and rotating the view. <A NAME="rl1"><A HREF="#l1">Listing One</A> is the setup and initialization calls we used.</p>


<p>GLT also provides a <i>GltShape</i> class for basic drawing capability in an object-based model. Derived classes draw specific objects ranging from cubes and cylinders to dodecahedrons and teapots. Our <i>CGUIShape</i> class is a container class for a list of <i>GltShape</i> objects, allowing assembly of complex structures.</p>

<p>We created a <i>CGUIData</i> class to contain all the relevant state data about a particular object, including its position, orientation, and data age. We then created a <i>CGUIEntity</i> class that inherited from both the <i>CGUIShape</i> and <i>CGUIData</i> classes to give us a one-class-per-physical-object structure. For those readers familiar with design patterns, <i>CGUIEntity</i> is an implementation of the well-known Composite pattern. The <i>CGUIShape</i> child list lets us arrange the objects in a logical tree structure based on physical location and sensing capabilities. <A NAME="rf2"><A HREF="0301af2.htm">Figure 2</A> shows how this construct is used to instantiate the robot system.</p>

<p>We included a virtual FFSR class as a child object of the robot class because each robot must sense other robots to interact with them and include them in their plans. This sensing is done directly by the robot, as relative position measurements are important for the robot's physical safety. Although the robots could sense one another by subscribing to other robots' position reports, this is generally unsatisfactory since the errors using this method can be large enough to cause collisions. The onboard sensor is the best sensor for planning and movement. </p>

<p>OpenGL is capable of effectively handling any scale of scene, from microscopic to universal, by using appropriate dimensions and a corresponding viewport. In our case, we used the actual dimensions of all physical entities, which gave us the added advantages of avoiding normalization calculations and a better sense of feedback about object velocities, relative positions, and collision possibilities. The GPS receivers onboard the robots sense their location as if they were in orbit, but apply a coordinate translation so that the center of the table is at the (0, 0, 0) <i>x</i>-<i>y</i>-<i>z</i> position. The robot thus publishes state update packets <i>CStatePkt</i> (<A NAME="rl2"><A HREF="#l2">Listing Two</A>) that range from +3 to -3 meters in <i>x</i>, <i>y</i>, and <i>z</i>. However, OpenGL could have easily handled the raw orbital data with a change in the viewport values. </p>

<p>Because we required a high screen-refresh rate to make robot motions appear smooth, we needed solid performance when drawing the scene. We used the OpenGL display list functionality (a good idea for almost any OpenGL application) so that our draw commands would get compiled and, if possible, stored in the graphics card memory. Using display lists can lead to significant performance improvements, and it certainly did in our case. We create the display list during each object's initialization (<A NAME="rl3"><A HREF="#l3">Listing Three</A>). The three important calls to create the display list are <i>glGenLists()</i>, to create a valid list index, and <i>glNewList()</i> and <i>glEndList(),</i> which bracket the drawing calls. There are some limitations on what may be in a display list; see the OpenGL documentation for details. </p>

<p>One of the more rewarding capabilities of OpenGL is the use of bitmapped textures to give objects a more realistic appearance. We included a <i>GltTexture</i> (from the GLT library) in many of our <i>CGUIEntity</i>-derived classes to provide this improved look. Use of textures on planes, as on the table, floor, and wall in <A NAME="rf3"><A HREF="0301af3.htm">Figures 3</A> and <A NAME="rf4"><A HREF="0301af4.htm">4</A>, is relatively straightforward. All we had to do was specify, on each vertex of the plane, which relative coordinate of the texture should be attached to that vertex. In <A NAME="rl3"><A HREF="#l3">Listing Three</A>, we show an alternative method that lets us use <i>glutSolidCube()</i> to draw the six planes that make up the FFSR body. This method is also useful for other <i>Glut</i> calls that create more complex shapes.  </p>

<p>Our GUI application also utilizes the GLUI library (http://www.cs.unc.edu/~rademach/glui/) to enable cross-platform UI controls, particularly dialog boxes. GLUI is built on GLT, so the two libraries worked together well. The dialog boxes are used to provide operators with a choice of high-level commands for the robot system. When operators choose a robot or robots and then select an object in the environment, the robot is notified of the selection and responds with a list of possible commands as determined by the onboard first-order theorem prover. This list is then displayed as a column of buttons in a dialog box, affording operators only the currently possible commands.</p>



<h3>Receiving Data</h3>


<p>To get data from the robots, the GUI subscribes to all published sensing data. This data comes in two forms: the direct GPS measurements of the robots, and the position and orientation of any nearby objects as determined by the robots. Each data packet comes with the name of the entity being described as well as the data source so that subscribers can distinguish between an object sensed by one robot and an object (perhaps the same one) sensed by another.</p>


<p>When new data comes in, it is assimilated into the data structure. The use of the <i>CGUIEntity</i> base class lets this happen recursively, with each <i>CGUIEntity</i> looking for a match between itself and the name and source of the data packet, or then sending it to each of its children in turn. When a home for the data packet is found, the state of the entity and the data age is updated. <A NAME="rl4"><A HREF="#l4">Listing Four</A> includes parts of the code to accomplish this data assimilation (note the use of the Chain of Responsibility pattern).</p>



<h3>Displaying the Environment</h3>


<p>Displaying the environment takes place in two parts: setting the current viewport correctly and then recursively drawing all the items in the tree. The relevant calls take place in the <i>OnDisplay()</i> function; see <A NAME="rl5"><A HREF="#l5">Listing Five</A>.</p>


<p>Again, the viewport is maintained by the <i>GlutWindow</i> base class and is manipulated through mouse and keyboard event handlers. OpenGL provides <i>glutLookAt()</i> as a simple mechanism for changing the viewport. We used a <i>CWindowPOV</i> class to maintain the important viewpoint values&#151;the location of the observer, the location of the focus of attention, and a vector pointing up; see <A NAME="rl6"><A HREF="#l6">Listing Six</A>. Most useful viewport manipulations can be achieved by changing the values in one of these three parameter sets. </p>

<p>The function <i>glutPostRedisplay()</i> starts the drawing sequence for the OpenGL viewport. This routine is called whenever the scene should be redrawn, as determined by the user's input or by the OS. It is also called by a timer loop, so the screen updates regardless of other factors to show robot motion. Following standard practice, we utilize the <i>Glut</i>'s "double-buffering" facility. Double buffering is the process of drawing into an offscreen image, then updating the actual display in one operation. This increases performance and reduces the flickering artifacts of a direct screen update. </p>

<p>Drawing takes place by calling the <i>Draw()</i> member function of the application's root <i>CGUIEntity</i> instance, which then calls all of the other members of the tree recursively. <i>CGUIEntity</i> implements <i>Draw()</i> by translating and rotating the current display matrix by the raw values of the object state (thanks to the use of real-world dimensions throughout) and calling on the appropriate display list set during the object initialization process. <A NAME="rl5"><A HREF="#l5">Listing Five</A> is the base class <i>Draw()</i>.</p>

<p>From this point on, OpenGL takes care of most of the hard work. The lighting, material properties, textures, unseen surface clipping, and antialiasing processes are all done automatically. <A NAME="rf3"><A HREF="0301af3.htm">Figure 3</A> shows the result for a typical robot experiment.</p>



<h3>Object Correspondence</h3>


<p>Notice in <A NAME="rf3"><A HREF="0301af3.htm">Figure 3</A> that many objects appear twice. This is an artifact of the sensing and data-reporting methods of the robots. Objects that appear twice are sensed by two robots but with a slight disagreement about where the object is actually located. This object correspondence problem is fundamental in systems without a global point of view. Dealing with correspondence is critical for improving the clarity of the user interaction, as well as for enabling the robots to conduct cooperative tasks using these objects.</p>


<p>We designed and implemented an independent software agent we call the Correspondence Agent (CA) to provide assistance with this issue. The CA subscribes to all of the robot sensor publications, just as the GUI does. By identifying similar, overlapping objects, the CA determines which packets of information appear to be describing the same object. For each apparently unique object, an instance of a <i>CCorrespondenceGroup</i> class is created, which includes a unique identification number and a list of the robot-sensed entities that the CA believes to be of the same object.</p>

<p>The CA also listens to publications of correspondence assertions, typically generated by the GUI according to input by operators. This functionality was added when we saw some cases where two objects were displayed that were clearly the same to operators, but did not fall within the rules the CA had been given.</p>

<p>The GUI subscribes to the correspondence publications and turns off the display of duplicate objects accordingly. (The robots would also benefit from knowing the correspondence between objects for planning cooperative tasks, but this capability has not yet been implemented.) As <A NAME="rf4"><A HREF="0301af4.htm">Figure 4</A> shows, the screen is much less cluttered and operators are able to command cooperative tasks thanks to the CA. A keystroke toggles this functionality in case a view of all objects would be useful to operators.</p>

<p>There are many options for displaying these duplicate objects. We could gray out all but one of each object, connect the objects with a web of lines or some other structure, or display an object at the position of the average of the group members' states. We chose to simply display the first object for three reasons: It reduced screen clutter, was simple to implement without creating a new entity to draw, and more closely reflects reality&#151;at least one robot believes the object is in that particular location.</p>



<h3>Conclusion</h3>


<p>Although our implementation involves robots in a research lab, this basic technique has been used to operate helicopters, submarines, and space systems. We encourage you to try a test implementation of a simple system. Most GPS receivers generate output to a serial line that can be tapped, with some receiver manufacturers also providing basic SDKs. A laptop with such a receiver becomes a surrogate robot, and a wide variety of projects can proceed from there.  </p>



<p><b>DDJ</b></p>

<H4><A NAME="l1">Listing One</H4>


<pre>#include "glutm/window.h"
// C3DGUIWindow is derived from GlutWindow, which performs all system 
// initialization for us. InitializeWindowValues performs additional 
// initialization for our app to specify drawing parameters we require.
void C3DGUIWindow::InitializeWindowValues()
{
  glEnable(GL_DEPTH_TEST);
  glEnable(GL_LIGHTING);
  glEnable(GL_NORMALIZE);
  glEnable(GL_CULL_FACE); // An optimization that prevents OpenGL from 
                          // rendering sides of an object that cannot be seen.
  glCullFace(GL_BACK);    // So, don't worry about rendering the 'back' side 
                          // of objects since they should all be solids
  glClearDepth(1.0);
  glDepthRange(0.0, 1.0);
  glClearColor(0.3, 0.3, 0.5, 0.0);  // Provides a sky blue background
  SetLightingValues();
}
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two</H4>


<pre>class CStatePkt
{
    char*  m_sName; // e.g. "Huey"
    char*  m_sType; // e.g. "FFSR"
    char*  m_sSource;   // e.g. "Louie"
    double x;       // e.g. 2.348756;  x = 0.0 at table center
    double y;       // e.g. 1.235445;  y = 0.0 at table center
    double z;       // usually 0.0 (Robots and objects move on table surface)
    double yaw;     // ranges from 0 to 2p
    double roll;    // usually 0.0 for our robots and objects
    double pitch;   // usually 0.0 for our robots and objects
};
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3">Listing Three</H4>


<pre>// nWrapParam can be GL_REPEAT or GL_CLAMP
// GL_REPEAT will tile the texture; GL_CLAMP will stretch it out
// nEnvParam can be GL_MODULATE or GL_DECAL (others values are possible 
//    but we don't use them)
// GL_MODULATE is makes the texture somewhat see-through; GL_DECAL is 
//    not see-through at all
// nWrapParam and nEnvParam are basically the only options 
//    needed to specify in initialization
bool CGUIShape::InitializeTexture(GLenum nWrapParam, Glenum nEnvParam)
{
  if (m_pTextureData == NULL) return false;  
     // m_pTextureData is defined in the constructor, and points to
     //   the proper texture bitmap structure if it exists
  m_pTexture = new GltTexture();
  m_pTexture-&gt;init(m_pTextureData);
  m_pTexture-&gt;set();
  m_nTextureEnvParam = nEnvParam;
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, nWrapParam);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, nWrapParam);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
  return true;
}
// CGUIFreeFlyer is a child class of CGUIEntity, which inherits from CGUIShape
int CGUIFreeFlyer::CreateDisplayList()
{
  int nIndex;
  double xScale, yScale, zScale;
  InitializeTexture(GL_REPEAT, GL_DECAL);
  GLfloat sReflectPlane[] = {1.0, 1.0, 0.0, 0.0};
  GLfloat tReflectPlane[] = {0.0, 0.0, 1.0, 0.0};
  GLUquadric *qobj;
  // The FFSR is represented graphically by a cube. It has to be scaled to 
  // achieve the proper dimensions
  xScale = FFSR_DIAMETER;
  yScale = FFSR_DIAMETER;
  zScale = FFSR_HEIGHT;
  nIndex = glGenLists(1);
  glNewList(nIndex, GL_COMPILE);    
  glColor3f(1.0, 1.0, 1.0);
  glPushMatrix();
  // Start Texture-related calls
  if (m_pTexture-&gt;id() != 0) {
    m_pTexture-&gt;set();
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, m_nTextureEnvParam);
    glTexGeni(GL_T, GL_TEXTURE_GEN_MODE, GL_OBJECT_LINEAR);
    glTexGenfv(GL_T, GL_OBJECT_PLANE, tReflectPlane);
    glTexGeni(GL_S, GL_TEXTURE_GEN_MODE, GL_OBJECT_LINEAR);
    glTexGenfv(GL_S, GL_OBJECT_PLANE, sReflectPlane);
    glEnable(GL_TEXTURE_GEN_S);
    glEnable(GL_TEXTURE_GEN_T);
    glEnable(GL_TEXTURE_2D);
  }
  // End Texture-related calls
    glTranslatef(0, 0, FFSR_HEIGHT * 0.5);
    glScalef(xScale, yScale, zScale);
    glutSolidCube(1.0);
  // Texture-disabling calls
  if (m_pTexture-&gt;id() != 0) {
    glDisable(GL_TEXTURE_2D);
    glDisable(GL_TEXTURE_GEN_S);
    glDisable(GL_TEXTURE_GEN_T);
  }
  glPopMatrix();
  glEndList();
  return nIndex;
}
</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>
<H4><A NAME="l4">Listing Four</H4>


<pre>int CGUIEntity::ConsiderIncomingStatePkt(CStatePkt *pPkt)
{
  int nDigested = 0;
  if (ShouldDigestThisStatePkt(pPkt)) {
    nDigested = ProcessStatePkt(pPkt);  
    // printf("Home for packet from %s was found!\n", pPkt-&gt;sSource);
  }
  // Send it to the child objects to see if one of them will digest it
  // Won't send it to the child nodes if it returned an answer above
  CGUIEntity* pChild;
  for (int j=0; !nDigested &amp;&amp; j&lt;size(); j++) {
    if (pChild = (CGUIEntity*)(*this)[j].get()) {
        nDigested = (pChild-&gt;ConsiderIncomingStatePkt(pPkt));
    }
  }
  return nDigested;
}
// Handles packets for objects that it senses (i.e. served as the source)
bool CGUIEntity::ShouldDigestThisStatePkt(CStatePkt *pPkt)
{
  return (strcmp(pPkt-&gt;sSource, GetName()) == 0);
}
CGUIEntity* CGUIEntity::FindObjectPtrByName(char *sName)
{
  if (strcmp(Name(), sName) == 0) return this;
  // Send it to the child objects to see if one of them is the right name
  //  Check the child nodes, and return their answer if they give one
  CGUIEntity* pChild;
  CGUIEntity* result = NULL;
  for (int j=0; j&lt;size(); j++) {
    if (pChild = (CGUIEntity*)(*this)[j].get()) {
      result = pChild-&gt;FindObjectPtrByName(sName);
      if (result != NULL) return result;
    }
  }
  return NULL;
}
// The following function is virtual for CGUIEntity. It is implemented
// by CGUIRobot for all robots, including FFSRs (which inherit from CGUIRobot)
bool CGUIRobot::ProcessStatePkt(CStatePkt *pPkt)
{
  CGUIEntity* pObject = NULL;
  if (!(pObject = FindObjectPtrByName(pPkt-&gt;sObjName))) {
    return false;
  }
  if (!pObject-&gt;SetStateData(pPkt)) {
    return false;
  } 
  pObject-&gt;SetLastUpdateTime();
  // printf("Processed Object %s from %s\n", pPkt-&gt;sObjName, pPkt-&gt;sSource);
  return true;
}
</pre>
<P>
<A HREF="#rl4">Back to Article</A>
</P>
<H4><A NAME="l5">Listing Five</H4>


<pre>void OnDisplay()
{
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  m_pEntityRoot-&gt;Draw();
}
void CGUIShape::Draw() const
{
  if (!ShouldDraw()) return;
  // Save time by not calling this if there are no children; 
  // Default is that children exist
  if (m_bHasChildrenToDraw) GltShapes::draw();    
    // Calling GltShapes::draw(), not GltShape::draw() to get 
 // the child objects drawn
  if (GetDisplayListID()) {     // A display list exists
    int nMode = 0;
    glGetIntegerv(GL_RENDER_MODE, &amp;nMode);
    if (nMode == GL_SELECT) glLoadName(GetDisplayListID());
    glPushMatrix();
      color().glColor();
      glTranslatef(translation()[0], translation()[1], translation()[2]);
      glScalef(scale()[0], scale()[1], scale()[2]); 
      // Perform a 3-2-1 coordinate transformation
      glRotatef(rotation()[0]*RAD2DEG, 0, 0, 1);
      glRotatef(rotation()[1]*RAD2DEG, 0, 1, 0);
      glRotatef(rotation()[2]*RAD2DEG, 1, 0, 0);
      if (m_nDisplayListID != 0) glCallList(GetDisplayListID());
    glPopMatrix();
  }
}
</pre>
<P>
<A HREF="#rl5">Back to Article</A>
</P>
<H4><A NAME="l6">Listing Six</H4>


<pre>// Basic starting POV looks at the origin of the coordinate system from the 
// (1,1,1) position  with the z axis pointing up in the viewport
CWindowPOV::CWindowPOV
{
  SetPOV(1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0);
}
void CWindowPOV::SetPOV(double EX, double EY, double EZ, double CX, 
                    double CY, double CZ, double UX, double UY, double UZ)
{
  SetEyeLocation(EX, EY, EZ);
  SetFocusPoint(CX, CY, CZ);
  SetUpVector(UX, UY, UZ);
}
void C3DGUIWindow::UpdateWindowViewport(CWindowPOV *POVinfo)
{
  glMatrixMode(GL_MODELVIEW); // Ensure you're manipulating model view matrix,
  glLoadIdentity();           // then reset it before calling gluLookAt()
  gluLookAt(POVinfo-&gt;Eye(0), POVinfo-&gt;Eye(1), POVinfo-&gt;Eye(2), 
    POVinfo-&gt;Focus(0), POVinfo-&gt;Focus(1), POVinfo-&gt;Focus(2),
    POVinfo-&gt;Up(0), POVinfo-&gt;Up(1), POVinfo-&gt;Up(2));
}
</pre>
<P>
<A HREF="#rl6">Back to Article</A>
</P>


</body>
</html>
