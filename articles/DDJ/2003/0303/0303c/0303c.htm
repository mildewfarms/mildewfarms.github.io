<html><head><title>Mar03: SVG &  Smart Maps</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>SVG &amp;  Smart Maps</h1><p><i>Dr. Dobb's Journal</i> March 2003</p><h2>Finding your way with flash graphics</h2><h3>By Keith Bugg</h3><I>Keith works for KGIS (http://www.kgis.org/), which provides mapping services to Knoxville and Knox County, in Tennessee. Keith can be reached at kebugg@comcast.net.</I><hr><p>The emergence of Scalable Vector Graphics (SVG) has given rise to new possibilities in the area of geospatial presentation. SVG, which is a dialect of XML and a W3C standard (see http://www.w3.org/TR/SVG/), is simply a plain-text format that can make graphics look "flashy," &agrave; la Macromedia's Flash graphics file format (http://www.macromedia.com/software/flash/). </p><p>One SVG feature is that you can code intelligence into graphical applications. In this article, I'll examine how SVG can be used to create "smart maps" that, unlike static JPEGs, can be dynamically updated, animated, and even searched. </p><DDJADVERTISEMENT INLINE><p>Imagine, for instance, that you're planning a trip from Los Angeles to San Francisco. Wouldn't it be convenient to know where the road delays were due to construction, accidents, inclement weather, and the like? Or perhaps you need to provide a process-control interface and would like operators to see tanks being filled in real time, or maybe you need to send a bar chart of monthly sales figures to offices worldwide. SVG can be applied to these situations and many more. </p><p>To get started with SVG, you need a web browser with an SVG plug-in; several are available for free. I use the plug-in from Adobe (http://www.adobe.com/svg/viewer/install/main.html) with Internet Explorer. To actually create SVG maps/images, all you then need is an ASCII text editor (Notepad is fine). If you want to dynamically update SVG maps/images, you'll need something like a Java servlet, and if you plan on doing lots of really cool stuff with SVG, you should get an XML parser.</p><h3>SVG Basics</h3><p>SVG lets you draw graphic primitives&#151;circles, rectangles, lines, polygons, and paths. Furthermore, SVG exposes a DOM interface, and the properties of these primitives can be changed on-the-fly with JavaScript, including animation. <A NAME="rf1"><A HREF="0303cf1.htm">Figure 1</A> and <A NAME="rl1"><A HREF="#l1">Listing One</A> demonstrate simple SVG animation where a small black rectangle travels along the solid red line (an SVG path object). This example could also have been built using JavaScript and the DOM, which is the approach I take with the SmartMap program (available electronically; see "Resource Center," page 5). While this is a straightforward example, it illustrates some useful SVG features. For example, the Interstate 40 highway symbol is a .GIF file using the xlink tag. </p><p>Another important SVG basic concerns the "z order" of objects shown in the map. Objects are drawn in the order in which they appear in the source code. For example, if I had first drawn the (red) interstate highway in <A NAME="rf2"><A HREF="0303cf2.htm">Figure 2</A> and then the (blue) river, it would appear that the highway is a tunnel at the intersection with the river, instead of a bridge. </p><h3>The SmartMap Program</h3><p>For this article, I've created the SVG smart map in <A NAME="rf2"><A HREF="0303cf2.htm">Figure 2</A>. The code consists of two parts&#151;an HTML document (SmartMap.htm), and the SVG source code (SmartMap.svg). (Both are available electronically.) I'll limit my discussion to the SVG code, since the HTML is self explanatory. </p><p>There are a couple of important features regarding this map. First, the map is embedded in the HTML document that sports an edit box and check box. The edit box is used as a feedback device for objects in the map. For example, you can click on the river, city park, and the gas station (the exact location of this object is in <A NAME="rf3"><A HREF="0303cf3.htm">Figure 3</A>). Doing so sends information about that object to this text box. The check box is used to show/hide all rivers and streams. The map also demonstrates "bubble help"&#151;moving your mouse over the airport object to view pop-up information about the airport.</p><p>Another feature of the program is that some of the buildings (the small squares along the streets) change color. When the building is green, the store is open; when red, the store is closed. The gas station also sends text automatically to the HTML document when it is open or closed. This illustrates how you can push information to users whether they want it or not. The opening/closing of stores is tied to the computer's clock, which is also displayed inside the SVG map in the upper-left corner. This demonstrates dynamic updating. Otherwise, the map looks like any other map&#151;it has a scale to provide a distance reference and a compass pointing north for orientation. </p><p>The SVG code begins with the opening tags. I've included both style and &lt;defs&gt; sections. A &lt;defs&gt; section is used to define objects that can be reused in several places. This helps keep the SVG file size to a minimum. The only thing that might be of interest to you here is the &lt;pattern&gt; tag, which is used for drawing the crossties in the railroad tracks; you may have to zoom in to see them more clearly. To zoom an SVG image, right-click the mouse and pick an option from the pop-up menu; otherwise, I just draw the objects in their proper order. </p><p>The interesting stuff is in the JavaScript code. You can embed JavaScript in SVG files by enclosing it inside these tags:</p><blockquote><p>&lt;script&gt;</p><p>&lt;![CDATA[</p><p>// your Javascript here</p><p>]]&gt;</p><p>&lt;/script&gt;</p></blockquote><p>When the document loads, the <i>init()</i> function is called, which also creates the buildings used in the map. The clock is also initialized in this function, and a call is made to <i>UpdateClock()</i>. In addition to updating the clock on the screen, this function opens/closes some of the buildings ("stores") at regular intervals. The remaining functions are purely for housekeeping chores; like showing/hiding the bubble help message when the mouse is over the airport and responding to mouse clicks on the city park, river, and gas station.</p><p>The cars moving along the roads are created as SVG objects, not JavaScript objects. While I could have created them exactly as I did the buildings, seeing a variety of methods gives you a broader field of vision regarding SVG. The SVG file concludes by drawing the compass (which is defined as a symbol) and a few other objects. The code is well commented.</p><p>Furthermore, you can add an event listener when creating SVG objects via JavaScript. This lets you create objects (circles, rectangles, lines, or whatever), and trap mouse events for those objects. For example:</p><blockquote><p>newRect.addEventListener("click",  		  OnObjectClick, false);</p></blockquote><p>where <i>newRect</i> is an SVG object created elsewhere in your SVG document (or JavaScript), and <i>OnObjectClick</i> is the name of the function to call when the object is clicked. This could come in handy if you create new objects dynamically and need to interact with them. The <i>OnObjectClick(event)</i> function could then get the ID of the object, and react accordingly. For instance, in <A NAME="rl2"><A HREF="#l2">Listing Two</A> you could test the value of <i>objId</i> and, if it's something you're interested in, take appropriate action. The SVG DOM is powerful, and you should become familiar with it if you want to do serious SVG programming.</p><p>The last SmartMap feature concerns turning off/on layers (sometimes called "levels"). Maps can become crowded, and often times you're only interested in looking at certain things&#151;hydrological features, vegetation, roads, and so on. SmartMap has a check box on the HTML document that lets you toggle water on/off. Since my map has only one river, this is toggled on/off in response to the check box. The river is part of a group in the SVG by use of the &lt;g&gt; tag. Inside this group tag you'll also find the text label for the river. This lets you toggle both the graphic and text label. In more complex applications, you would probably make use of a technique called "feature tagging"&#151;a way of associating features with a class (rivers, roads, and so on) as previously described. For example, all rivers and streams might have a tag of 1, all primary roads a tag of 2, all secondary roads a tag of 3, and so on. You could then loop through all your SVG objects and show/hide the appropriate features.</p><h3>Real-Time Updating</h3><p>The easiest way to update the map in real time is to use a Java servlet. Although writing and presenting a servlet is beyond the scope of this article, I do want to explain how you might integrate this into the map in <A NAME="rf2"><A HREF="0303cf2.htm">Figure 2</A>. Suppose the temperature in the fictitious town drops to 30 degrees Fahrenheit and it starts to rain. Ideally, traffic should slow down and the speed of the cars needs to reflect this. The solution is to regularly call a function that checks for any new updates. This JavaScript calls a function every five seconds:</p><blockquote><p>setTimeout('CheckForUpdate()',5000);</p></blockquote><p>Inside <i>CheckForUpdate()</i> you would call a Java servlet that lives on your server. This servlet's only job is to send you either an XML file containing new update instructions or a text stream containing new processing information. This servlet could take HTML form data as input; for example, a human would have to tell the servlet what needs to be updated (road construction at such-and-such location). In this way, the loop gets closed from start to finish. Some data, such as weather conditions, could be "pulled" from other sites, obviating the need for human intervention. Your map could then be updated client-side by using whatever algorithms you've plugged into the map for this purpose.</p><p>Another option for dynamic updating might be to leave your SVG map on your server, and have your servlet do the updating there. This is a trade-off: If you lose your connection, you have neither a map nor live updates. With the map on the client, as in my example, you would lose updates, but at least you'd have the map.</p><h3>Conclusion</h3><p>In many cases, data necessary for creating SVG maps is readily available. For instance, raw geographical data is available at http://edc.usgs.gov/geodata/. You can also work with aerial photographs by inserting images from http://terraserver.homeadvisor.msn.com/. For illustration purposes, my boss was gracious enough to let me post a map of Knox County, Tennessee, on my personal web site (http://mywebpages.comcast.net/kebugg/ knoxcounty.htm). You will need the SVG plug-in to view it.</p><p></p><p><b>DDJ</b></p><H4><A NAME="l1">Listing One</H4><pre>&lt;?xml version="1.0" standalone="yes"?&gt;&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN"   "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"&gt;&lt;svg width="800" height="600" viewBox="0 0 800 600"     xmlns="http://www.w3.org/2000/svg"&gt;     &lt;desc&gt;Simple animation&lt;/desc&gt;    &lt;defs&gt;       &lt;rect id="car" x="0" y="0" width="10" height="5"          style="stroke:black;fill:black;"/&gt;    &lt;/defs&gt;&lt;path id="i40" d="M 0,300 h800 "style="fill:black; stroke:red; stroke-width:3;fill:none" /&gt;&lt;image x="400" y="275" width="23" height="21" xlink:href="i40.gif"/&gt;&lt;use xlink:href="#car"&gt;&lt;animateMotion begin="0s" dur="4s" repeatCount="indefinite"&gt;&lt;mpath xlink:href="#i40"/&gt;&lt;/animateMotion&gt;&lt;/use&gt;&lt;/svg&gt;</pre><P><A HREF="#rl1">Back to Article</A></P><H4><A NAME="l2">Listing Two </H4><pre>function OnObjectClick(evt){    var target = evt.target;    // evt.target is obj. clicked    var objId=target.getAttribute("id");// id of object     // now have object-change its properties, etc   }       </pre><P><A HREF="#rl2">Back to Article</A></P></body></html>