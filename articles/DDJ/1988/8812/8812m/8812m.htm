<HTML>
<META NAME="year" CONTENT="1988">
<HEAD>

<TITLE>DEC88: LETTERS</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>LETTERS<a name="021c_0001"><a name="021c_0001"></h1><P>
<h3><a name="021c_0002">Find That Function With AWK<a name="021c_0002"></h3><P>
Dear DDJ<P>
In the article &quot;Find That Function!&quot; (August 1988), Marvin Hymowech provides two C programs for building and searching a file of where-defined information about C functions and their related source files. I don't want to denigrate what Marvin has done (because he has obviously put a substantial amount of work into the programs), but this task (among many others!) is perfectly suited to awk.<P>
I have provided two awk programs that do basically the same thing as his C programs. Note that the code is much more compact (by an order of magnitude or two). The bldfuncs routine has been implemented using a different algorithm than Marvin's. I consider only those lines of C source where the last character on the line is a closing parenthesis. This set of lines includes all function definition lines. (This is coding style dependent, but it's true for the way I and Marvin and 99 percent of others code C.) Of these lines, the ones that begin with if for, while, ||, and &amp;&amp; are discarded. This leaves just the function definition lines (with a slight possibility of a comment line).<P>
The functionality of the second program, getf has actually been enhanced in the awk version. One can search for function names using regular expression syntax --decidedly more powerful than wildcards. Note also that the awk version invokes Marvin's editor directly instead of relying on DOS environment variables.<P>
I didn't benchmark the two versions of the program, but my guess would be that the awk version runs a little slower. Since awk is not compiled and linked, but rather interpreted, it will be inherently slower (but not slow). But this is actually an advantage when going through the code-test-debug iteration cycle.<P>
Although awk is certainly not suitable for developing major applications, it is beautifully suited to developing this kind of utility program. With C, these &quot;quick little utility functions&quot; take on many of the aspects of major application development. With awk, they truly are quick and little. See <a href="8812m.htm#021c_0003">Examples 1</A> and <a href="8812m.htm#021c_0004">2</A>, below.<P>
<pre><a name="021c_0003"><H4><B>Example 1</B></H4><a name="021c_0003">
#----------------------------------------------------------------------
#    Bldfuncs            Joseph L. Kidd
#    This awk program mimics the function of the same name given
#    in ``Find That Function'', by Marvin Hymowech in DDJ, Aug. 1988
#
#    Usage: awk  bldfuncs.awk srcfile1 srcfile2 ...
#         where srcfile1, ... may contain wildcard characters.
#    Output: A file named funcs.txt with the format:
#         srcfile1:
#              function_1 lineno1
#              function_2 lineno2
#              ...
#              function_n lineno3
#         srcfile2:
#              ...
#    (where lineno1,... are the line numbers where the functions are
#         defined.)
#----------------------------------------------------------------------

FNR == 1 { print FILENAME &quot;:&quot;      &gt;&quot;funcs.txt&quot;   }
/\)$/     {
     if ($1 ~ /^if\(*/   ||   $1 ~ /^for\(*/ || $1 ~ /^while\(*/ ||
         $1 ~ /^\|\|/    ||   $1 ~ /^\&amp;\&amp;/*
          next
     else
          for (i=1; i&lt;=NF; i++)
               if (x=index($i,&quot;(&quot;))     {
                    if (x==1)
                         print &quot; &quot; $(i-1) &quot; &quot; FNR &gt;&quot;funcs.txt&quot;
                    else
                         print &quot; &quot; substr($i,1,x-1)  &quot; &quot; FNR &gt;&quot;funcs.txt&quot;
                    break
               }
}
</pre><P>
<P>
<h4><a name="021c_0004"><a name="021c_0004"><B>Example 2</B></h4><P>
<pre>
---------------------------------------------------------------------------
#    GETF                Joseph L. Kidd
#    This awk program mimics the program of the same name given
#    in the article ``Find That Function'', by Marvin Hymowech in DDj, aug. #    1988.
#    Usage: awk getf.awk req+&lt;req_func_name&gt; funcs.txt
#         where &lt;req_func_name&gt; is the requested function name.
#         Note that &lt;req_func_name&gt; is the requested function name.
#         which is significantly more powerful that DOS's wildcards.
#--------------------------------------------------------------------------
$1 ~ /:$/ { file = substr($1,1,length($1)-1) }
$1 ~ req  { print &quot;Pattern=\&quot;&quot;,req,&quot;\&quot;. &quot;,
                    $1, &quot;can be found in file&quot;, file,
                    &quot;at line&quot;, $2 &quot;.&quot;
               req_func = $1
               req_file = file
               req_count++
}
END       {    if (req_count==0)
                    print &quot;Could not find&quot;, req
               if (req_count&gt;1)
                    print &quot;Multiple functions found.&quot;
               if (req_count==1)   {
                    cmd = &quot;b  -m\search_fwd &quot; req_func &quot;\&quot; &quot; req_file
                    system (cmd)
               }
}

</pre><P>
<P>
Joseph L. Kidd<P>
San Jose, Calif.<P>
Dear DDJ,<P>
I have found that two changes should be made to Marvin Hymowech's function finding programs.<P>
1.  In bldfuncs.c, get_names_one_file() is confused by the declaration of a pointer to a function, as in:<P>
<pre>     int (*point1)( )=puts;</pre><P>
It eats through the next function body and records int as a function. To fix this, after<P>
<pre>        if(c ==';' || c ==',')  /*functions
             type check declaration, */
   continue;               /* so bypass it */</pre><P>
add<P>
<pre>    if(c == PARENS)
/* something pointing to a function */
continue;                    /* so bypass it */</pre><P>
Actually, it could still be fooled by a function that returned a pointer to a function, as in:<P>
<pre>        int (*function( ))(){ ... }</pre><P>
or odd but perfectly legal declarations like<P>
<pre>        (main)(argc, argv) { ... }</pre><P>
or<P>
<pre>        (main(argc, argv)){ ... }</pre><P>
2.  In patn_match(), change<P>
<pre>       while( *s++)           ;</pre><P>
to<P>
<pre>        while( *s)       s++;</pre><P>
Otherwise, s gets incremented past the terminating zero, and the returned value can be incorrect.<P>
I also changed bldfuncs to write the line number of each function definition so that getf could use the line number rather than the function name in the command line for the editor. I believe I'll add Unix-style pattern matching as well. Thank you for a very handy tool!<P>
James R. Van Zandt<P>
Nashua, New Hampshire<P>
Dear DDJ,<P>
In his article &quot;Find That Function!&quot;, Marvin Hyrnowech puts his finger on a major practical problem with C, namely the poor recognizability of function definitions. I have a solution to the problem that, though so crude and lowtech it's almost embarrassing, may be of use to your readers. Namely, whenever I write or revise a C source-code file, I put the token FUNC, #defined to be nothing either in stdio.h or at the head of the file at the beginning of every function definition and the comment /* FUNC */ after the #define in every macro definition, as in:<P>
<pre>        #define FUNC

        FUNC char *strend(register char *s)
    {
    while (*s++)
    return s;
    }

        #define /* FUNC */ max(a,b) ((a)&gt;(b)?(a):(b))</pre><P>
To find a specific definition I use one of the two greps as follows:<P>
<pre>             grep &quot;FUNC .* strend(&quot;*.c</pre><P>
or:<P>
<pre>             grep &quot;FUNC .* max(&quot; *.c</pre><P>
To list all the definitions I do:<P>
<pre>             grep &quot;FUNC&quot; *.c</pre><P>
To list just function definitions:<P>
<pre>             grep &quot;^FUNC&quot; *.c</pre><P>
And to list just macro definitions:<P>
<pre>             grep &quot;FUNC&quot; *.c</pre><P>
It should be fairly simple to write a program that would insert FUNCs into a &quot;raw&quot; C file, especially with awk. But whatever you do, always make sure that FUNC does not denote any real C object. If it does, and you #define it away, there's bound to be trouble. Normally it will show up as a syntax error, but occasionally it won't.<P>
Margaret Armstrong<P>
Cambridge, Mass.<P>
<h3><a name="021c_0005">Compiler Review: Clarification and Crotchet<a name="021c_0005"></h3><P>
Dear DDJ<P>
I enjoyed the compiler review in &quot;The State-of-the-Art in Modula-2.&quot;(See September 1988.) I was encouraged to see that Kent Porter was as enthusiastic about JPI TopSpeed Modula-2 as I was. Although a 286 with hard disk and color is nicer, I found it to work quite well on a dual floppy monochrome system. (A small RAM disk with COMMAND.COM is quite helpful.) The multiple window environment worked well for learning the language. I could work on a program in one window, pull over a section of code into another window to test an unfamiliar feature of the language, and use a third window to look at library .DEF files.<P>
There are a few things I felt the article may have overlooked, and so I have a request for clarification and a mention of a small &quot;crochet.&quot;<P>
No mention was made about Library Source Code. JPI includes it on a third disk. Some vendors charge extra. One of the libraries is a 34-function window library. Again, some other vendors charge extra.<P>
I had trouble with the formula 0=(C-N)/C. Running it through my calculator, I got the following results: FTL = 59.03, Logitech = 62.70, TopSpeed = 83.69, Stony Brook = 88.48. As you can see, the only number that agrees with the article is the one for Stony Brook. By the way, what was the formula used for Geometric Average? I looked &quot;Geometric Average&quot; up in a CRC and tried to use the formula but couldn't get the results shown in the article.<P>
One reason Logitech code sizes are so large is that all of the library object is linked in, even if only one procedure is used. If that library uses a procedure from another library, then all of the object code from the other library is also included, and so forth. (This is from page 283 of Modula-2, A Complete Guide by K.N. King.)<P>
JPI TopSpeed used LONGREAL for all MATHLIB functions, which might explain the large difference in size for the FPMATH code when compared with other code sizes.<P>
It would be nice if, in addition to the benchmarks themselves, you could show the changes needed to make the benchmarks run on each compiler. By the way, what was the environment used in making the speed and size tests? I suspect it was not a dual floppy monochrome 8088 XT compatible under DOS 3.2 at 4.77 MHz. I also suspect it was not a 386 with 1-Mbyte RAM disk and 1-Mbyte disk cache at 16 MHz. I wanted to get some idea of Modula-2 speed and code size when compared with the C compilers you had reviewed in a recent issue.<P>
And now for the small &quot;crochet.&quot; It would be very helpful if all compiler reviewers could pick a small suite of programs --say Sieve, Acker, and Drystone (which almost everybody uses anyway)-- to run against a standard environment, say 286 with 20-Mbyte hard disk at 6 MHz, so that readers could get some idea of relative compiler efficiencies. That way, readers could see if the improvement of Microsoft C 6.0 (whenever it comes out) over Microsoft C 5.1 would justify the big bucks or (more interesting to me) how an efficient C compiler stacks up against an efficient Modula-2 compiler. This could be in addition to any other benchmarks they felt necessary.<P>
Robert A. Durtschi<P>
Jolon, Calif.<P>
Kent responds: The algorithm used to compute geometric average is too complex to reproduce in this limited space. If anyone wants it, they can send a request and a 5 1/4-inch floppy to DDJ, and we'll furnish the source code and .EXE for a geometric average spreadsheet that I've written in TopSpeed Modula-2.<P>
The test platform for the benchmark: appear: at the top of page 74. We'll also furnish the code for the timing program If you request it.<P>
The only changes Inane in the benchmark programs were the necessary changes in IMPORT lists, plus a couple of output statements required to adapt to TopSpeed's nonstandard calls.<P>
As for the &quot;crochet,&quot; I agree in principle, but there are practical problems, like what constitutes a &quot;standard&quot; environment. Our contributors are freelancers whose machines have little in common. We haven't the time to rerun benchmarks in the editorial offices. Thus, the best we can do in a practical sense is to make sure all benchmarks in a given article are run in the same environment.<P>
<h3><a name="021c_0006">Codeview Can Work With Turbo C<a name="021c_0006"></h3><P>
Dear DDJ,<P>
Microsoft's Codeview and Turbo C 1.5 can work together. One compiles the source code with Turbo C's line numbering option on. Microsoft's linker is then used to link the object code with the /CO option enabled, which tells the linker that Codeview is going to be used on the program. The program is now ready for source level debugging.<P>
I had purchased MASM 5.1 to help optimize some of the critical routines written in Turbo C. I ran into a bug while testing a serial port driver and was wishing for a good source level debugger that would work with Turbo C. After some tinkering, I found Codeview will work, provided one uses Microsoft' s linker.<P>
Richard J. Clark<P>
Tetragenics Company<P>
Butte, Montana<P>

<P>
<P>
</pre></BODY></HTML>
