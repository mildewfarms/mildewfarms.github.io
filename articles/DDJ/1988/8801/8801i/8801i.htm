<HTML>
<META NAME="year" CONTENT="1988">
<HEAD>

<TITLE>JAN88: RUNNING LIGHT</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>RUNNING LIGHT<a name="001d_0003"><a name="001d_0003"></h1><P>
<h3><a name="001d_0001"><a name="001d_0000">Michael Swaine</h3><P>
<a name="001d_0002"><a name="001d_0000">Tyler surfaced from writing this month's lead article just long enough to ask me to step onto this page and tell you what to expect from the arrival of HyperCard. Here goes:<P>
<ol>1.     Expect to see explosive growth in the number of &quot;light&quot; programmers in the Macintosh environment as a result of HyperCard, well beyond the effect of Turbo Pascal when it burst upon the PC environment. There are several facts that support this claim:</ol><P>
It's bundled. A million people will have HyperCard by the end of this year. Nearly all will actually use it (as an application).<P>
The path from using HyperCard to writing your own programs in HyperTalk is smooth. The stages, from browsing to cut-and-paste application building to modifying existing scripts to writing short scripts of your own to developing full stackware applications with HyperTalk, may be the easiest gradient up to programming ever.<P>
The pressure for a truly easy Mac development tool has been building for four years. and the floodgates are now open.<P>
<ol>2.     Expect prolific output from these &quot;light&quot; programmers. Again, there are several reasons to believe this:</ol><P>
Ease of programming. Even though it embodies principles unfamiliar to a BASIC programmer, HyperTalk is about as easy as BASIC or Pascal.<P>
The power of the language. HyperTalk objects and messages are generally higher-level components than BASIC statements, so you can do more with fewer of them.<P>
Expected aids to programming. Apple is developing enhancements that will make it easier to do more, including toolkits for controlling serial communications, AppleTalk communications, and interactive video. And there will be more public-domain and shareware programming aids like Andy Hertzfeld's PICT file importer. Commercial products will serve as lessons in programming, since the source is examinable.<P>
<ol>3.     Deduce from these expectations an overwhelming outpouring of stackware (as it is called). The evidence is already coming in: ten megabytes of shareware and public domain stackware was developed in the first three months after the announcement.</ol><P>
<ol>4.     Expect the inevitable result: HyperGlut. While some amateurs will produce software that is far from amateurish, we will soon see unprecedented amounts of poor work. But obviously-bad software is just noise in the channel; the real HyperGlut will be in the stackware products that meet needs cheaply but poorly. That will, sadly, be used.</ol><P>
<ol>5.     Expect the end of the predictable Macintosh user interface. That only worked while nearly everybody conformed nearly all the time.</ol><P>
<ol>6.     Expect bad practices and poor programming style to become ingrained. This is a more depressing thought the more you dwell on it, because there are more ways to program badly with HyperCard than with BASIC. With HyperCard, snippets of code can reside in various places. such as attached to a button or to the card on which the button resides, and the inheritance structure of HyperCard allows events to drop through various objects, searching for a handler.</ol><P>
The object-oriented equivalent of spaghetti: what a concept.<P>

<P>
<P>
</pre></BODY></HTML>
