<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal February 1997: A Disassembler Written in Perl</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>A Disassembler Written in Perl</h1>

<p><i>Dr. Dobb's Journal</i> February 1997
</p>
<h2>Using Perl's built-in pattern-matching capabilities</h2>

<h3>By Tony Zhang</h3>

<I>Tony, a systems software developer at Texas Instruments, can be contacted at tt-zhang@ti.com.</I>

<hr>

<p>Reverse engineering has many applications, including disassembly and microprocessor debugging. Disassembly can be helpful in understanding code written by other programmers. In this article, I'll present the core subroutines of a disassembler written in Perl. This disassembler core is designed for the Intel x86 instruction set. You can modify or customize the disassembler for your own applications. To do so, simply design your application and write a low-level function to read assembled machine code (which may be from a static .EXE file or a bus trace fetched at run time). You then call the core disassembler routines to translate the assembled machine code (that is, the .EXE code) back into human-readable code, which should be close enough to the original source code for most purposes. For instance, I built a caller routine based on bus trace data collected by a logic analyzer connected to a PC system. The caller extracts the executive code from the bus traces and disassembles it by calling the core disassembler routines presented here.</p>

<p>There are several reasons for writing the disassembler in Perl:</p>

<ul>
<li>Perl has rich built-in features to easily manipulate text, files, and processes.  <li>Perl is ideal for providing quick solutions to programming problems because it needs neither a special compiler nor a linker to convert the source code to machine code. 
  <li>Perl is rapidly becoming a popular scripting language across almost all platforms.
</ul>

<h3>Instruction Format</h3>

<p><a name="rf1"><a href="9702df1.htm">Figure 1</A> shows the general format of the x86 instruction set. All instruction encodings are subsets of the general format. An instruction consists of four main parts. The first part is an optional prefix. The second part -- the opcode (operation code) -- is the most important and is one or two bytes long. The third part is an address specifier consisting of the ModR/M and scale index base (SIB) bytes, also optional. The last is for displacement or immediate data, if required. </p>

<h3>Construct Instruction Look-Up Table</h3>

<p>The file disasm.lut (available electronically; see "Availability," page 3) is an instruction look-up table based on the opcode map of the x86 instruction set given by Intel (see <i>Pentium Processor Family Developer's Manual, Volume 3: Architecture and Programming Manual</i>, Intel 1995). The ":" is used to separate the instructions and operand types. The number value of the first column indicates whether it is a 1-byte opcode map, a 2-byte opcode map, or another map determined by some attribute.</p>

<p>Each operand follows a "%" sign for parsing purposes. There are several windows in 1-byte and 2-byte opcode maps, such as <i>%g0</i> and <i>%g[a-q]</i>, that will link to 2-byte or other code maps.</p>

<p>A subroutine called "MakeLUT" is called to read the instruction look-up table into three arrays in memory when the disassembler is run for the first time. The three arrays are <i>@One_Byte_LUT</i>, <i>@Two_Byte _LUT</i>, and <i>%Three_Bit_LUT</i>. The last one, <i>%Three_Bit_LUT</i>, is an associative array, indexed by a string, <i>$lsTemp_1</i>, in the subroutine MakeLUT. The associative array is one of the most important features in Perl because it can be used for efficient database manipulation. It's often said that you are not thinking in Perl until you start thinking in terms of associative arrays.</p>

<p>The second column in the instruction look-up table gives the start index to the arrays of <i>@One_Byte_LUT</i> and <i>@Two_Byte_ LUT</i>. For the associative array <i>%Three_Bit_ </i>LUT, the combination of the second and third columns is used as the index to it. For instance, when the string <i>1:94:xchg %eax, %esp:xchg %eax, %ebp:xchg %eax, %esi:xchg %eax, %edi</i> is read in, MakeLUT first determines that the string should go to the array <i>@One_Byte_LUT</i>, because the number in the first <i>column(field)</i> is 1. The number 94 will be used as the start index to the array. Therefore, it will look some-thing like <a name="re1"><a href="9702de1.htm">Example 1</A>(a) in the array <i>@One_Byte_LUT</i> after the reading.</p>

<p>Similarly, after reading the string <i>3:b:0:add %Ev, %Iv:or %Ev, %Iv:adc %Ev, %Iv:sbb %Ev, %Iv</i>, the associative array <i>%Three_Bit_LUT</i> will have four more items, as in <a href="9702de1.htm">Example 1</A>(b).</p>

<h3>Parse Instruction</h3>

<p>The main routine of the disassembler core, <i>X86_Disasm</i>, accepts a string containing the name of a low-level function that will be passed to subroutine <i>ImageByteRead </i>to read in image data (that is, assembled machine code). Also, the start address (either a linear or physical address) and the operand size (16 or 32 bit) will be passed to <i>X86_Disasm. </i>An instruction that accesses words (16 bit) or double words (32 bit) has an operand size attribute of either 16 or 32 bits.</p>

<p>When one byte of machine code is fetched by calling <i>ImageByteRead, </i>it is used as an index to find a string of symbolic instruction from array <i>@One_Byte_ LUT</i>. Then a <i>while</i> loop is applied in order to find prefixes in the symbolic string (see <a href="9702df1.htm">Figure 1</A>). Perl provides two operators to check pattern matching. In the <i>while</i> loop, you check whether the <i>$lsOpcode</i> contains <i>%P</i> or not by using one of the patterns matching operator <i>$lsOpcode =~ /\%P.*/</i>. </p>

<p>The subroutine <i>MethodP </i>contains all four possible prefix groups:</p>

<ul>
  <li>Instruction Prefixes: <i>rep</i>, <i>repe/repz</i>, <i>repne/repnz</i>, and <i>lock</i> (where <i>rep</i> and <i>repe/repz</i> share the same cell in the opcode map).
  <li>Segment Override Prefixes: <i>cs</i>, <i>ds</i>, <i>es</i>, <i>fs</i>, <i>gs</i>, and <i>ss</i>.
  <li>Operand Size Override (<i>$DisasmnOS</i>).
  <li>Address Size Override (<i>$DisasmnAS</i>).
</ul>

<p>According to Intel, most instructions that can refer to an operand in memory have an addressing-form byte (the ModR/M byte) following the primary opcode byte(s). The ModR/M byte specifies what kind of address form is to be used. Also, in certain cases, the ModR/M byte is followed by a second addressing byte, called the SIB byte, that is required to fully specify the addressing form.</p>

<p>The disassembler I present here (available electronically; see "Availability," page 3) has three subroutines -- <i>ModBits, RegBits, </i>and <i>RMBits. </i>These check the three fields of <i>mod</i>, <i>reg</i>, and <i>r/m</i> in the ModR/M byte. <i>SIBField </i>returns the displacement and the register number of the index register, or the base register, according to the format of the SIB byte. <a name="rf2"><a href="9702df2.htm">Figure 2</A> illustrates the formats of the ModR/M and SIB bytes. </p>

<p>After the prefix-adding <i>while</i> loop, the symbolic string is parsed further to find if there are any links to arrays <i>@Two_Byte_ LUT</i> or <i>%Three_Bit_LUT</i>. The pattern <i>%g0</i> implies that a new string of symbolic instruction will be needed from <i>@Two_ Byte_LUT</i>, while <i>%g[a-q]</i> leads to the associative array <i>%Three_Bit_LUT</i>, according to how you built your look-up table.</p>

<p>Later, each character in the symbolic string is extracted and checked in order to find the corresponding opcode, necessary information regarding the ModR/M byte, the SIB byte, displacement, or immediate data. The Perl <i>substr</i> function is applied to extract those characters from the symbolic string. The tested characters will help to determine which subroutines should be called to interpret the opcode following the addressing methods.</p>

<p>The subroutines in the sample disassembler complete the job of translating the symbolic string into text-like assembly code for X86 instructions.</p>

<ul>
<li><i>MethodA </i>represents the direct address in which the instruction has no ModR/M byte except the encoded address of the operand. Therefore, no base register, index register, or scaling factor can be applied in the addressing method.  <li>While <i>MethodC </i>uses the <i>reg</i> field of the ModR/M byte to select a control register, <i>MethodD </i>uses the <i>reg</i> field value to determine a debug register. 
  <li><i>MethodE </i>fetches the ModR/M byte that follows the opcode and specifies the operand. The operand can be either a general register or a memory address. If the operand is a memory address, it is calculated from a segment register and any of the following values: a base register, an index register, a scaling factor, or a displacement. Following the calculated address, the subroutine can obtain all operand codes, convert them into proper formats, and save the results into a string variable that contains the final disassembled code. 
  <li><i>MethodM </i>is basically the same as <i>MethodE, </i>except that <i>MethodM </i>is used only for a memory address. Similarly, <i>MethodR </i>is the same as <i>MethodE, </i>except that <i>MethodR </i>is used only for a general register.
  <li>A general register can be selected by calling <i>MethodG, </i>which checks the value of the <i>reg</i> field in the ModR/M byte. For the immediate data encoded in subsequent bytes of the instruction, <i>MethodI </i>can be used. <i>MethodJ </i>computes the relative offset in an instruction and adds the offset to the instruction pointer.
  <li>For an instruction that has no ModR/M byte, the offset of the operand can be determined by calling <i>MethodO. </i>In this case, the offset is encoded as a word or double word in the instruction. The address-size attribute, <i>$DisasmnAS</i>, can tell whether it is a word or double word.
  <li>Finally, <i>MethodS </i>selects a segment register by checking the value of the <i>reg</i> field in the ModR/M byte.
</ul>

<p>There are three variable scopes in Perl -- global (the default), local, and my. The life span of the global is as long as that of the whole program module. A local variable in a calling routine can extend its life to a called subroutine. A my variable is limited to the scope of a routine itself. <i>$DisasmnPrefix</i>, <i>$DisasmnOp</i>, <i>$DisasmnModRM</i>, <i>$DisasmnSIB</i>, <i>$DisasmnDispl</i>, <i>$DisasmnImmed</i>, and <i>$DisasmnMapIndex</i> are defined as local variables so that they can be updated and passed easily among different subroutines.</p>

<p>Currently, <i>ImageByteRead </i>returns only one byte at a time. The string <i>$mem_read</i> in ImageByteRead contains the name of a low-level function that reads an image file (assembled machine code) and returns data in bytes. The integer <i>$byte_num</i> determines how many bytes of data should be read and returned.</p>

<h3>Building a Sample Disassembler</h3>

<p>Disasm.pl (available electronically) is a sample disassembler that demonstrates how you call the disassembler core function <i>X86_Disasm</i> when building disassemblers. Essentially, the disassembler takes your input (in hex format, separated by space), splits them into bytes, and save those bytes in  memory. It then calls <i>X86_Disasm</i> to disassemble one byte at a time, and prints the disassembled result on the screen. Remember the first item you feed into the disassembler should always be the operand size (16 or 32). The disassembler keeps running until you type "q" to quit. You can run the program on under UNIX or Windows 95/NT.</p>

<h3>Branch-Trace Message Analysis</h3>

<p>One of the uses of the disassembler core in this project is to decode the branch-trace messages (BTM) collected from a logic analyzer. The disassembler is called by a program that can parse the bus cycles and extract BTM data by figuring out the target linear addresses and source linear addresses. </p>

<p>Once the code is retrieved, the disassembler can translate the code back into text-like assembly code by calling a low-level memory-read subroutine through <i>ImageByteRead. </i>I've tested the disassembler package on both UNIX and Windows platforms. The disassembled code matches the original source code (written in assembly) very well.</p>

<h3>Conclusion</h3>

<p>Clearly, there are many improvements you could make to this disassembler. You might want to rewrite the code for <a name="re2"><a href="9702de2.htm">Example 2</A>(a) to <a href="9702de2.htm">Example 2</A>(b) if you can make <i>ImageByteRead </i>return more than one byte at a time, so that you can reduce the redundancy of the <i>for</i> loop. Also, you can add a subroutine to select a test register determined by the <i>reg</i> field of the ModR/M byte. Finally, you can add the part for the coprocessor (floating-point unit) instruction set, similar to the way the integer instructions were added in the article. </p>

<p>Searching, extracting, and pattern matching are three things Perl does very well. Perl lets you concentrate on logic flow and algorithm design while it handles the implementation details -- that's the beauty of programming in Perl. </p>

<h3>Acknowledgment</h3>

<p>I'd like to thank Dr. Ed Ferguson at Texas Instruments for his help in designing the x86 disassembler. Dr. Ferguson originally wrote a disassembler in awk.</p>

<p><b>DDJ</b></p>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
