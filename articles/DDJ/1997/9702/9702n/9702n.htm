<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal February 1997: Undocumented Corner</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Applying <i>CSplitterWnd</i> Internals</h1>

<p><i>Dr. Dobb's Journal</i> February 1997
</p>
<h3>By George Shepherd and Scot Wingo</h3>

<I>Scot is a cofounder of Stingray Software. He can be contacted at ScotWi@aol.com. George is a senior computer scientist with DevelopMentor and can be contacted at 70023.1000@compuserve.com. They are the coauthors of MFC Internals (Addison-Wesley, 1996).</I>

<hr>

<p>In our December 1996 column, we took a look at the internal structures of the popular <i>CSplitterWnd</i> class. This month, we'll show how you can apply knowledge of the <i>CSplitterWnd</i> internals to solve a <i>CSplitterWnd</i> problem that MFC programmers frequently encounter.</p>

<p>When using static or dynamic <i>CSplitterWnd</i>s in applications, you may want to change the splitter position programmatically. <i>CSplitterWnd</i> provides one undocumented solution that is easy to use -- simply add a menu/toolbar item that has ID_WINDOW_SPLIT as the identifier. When a user selects this menu/toolbar item, it will place the splitter into a mode where the user has to change the position of the splitter bar. The mouse cursor moves to the splitter bar, and the splitter bar is also put into tracking mode: The user can choose its position by moving the mouse and clicking to lock in the new position. Let's see how this seemingly magical feature works.</p>

<p>ID_WINDOW_SPLIT is a global MFC resource ID defined in AFXRES.H. The resource ID is used in VIEWCORE.CPP; see <a name="re1"><a href="9702ne1.htm">Example 1</A>. <i>OnUpdateSplitCmd()</i> disables the menu/toolbar item if the parent of the view is not a splitter window. The real work is done by <i>CView::OnSplitCmd()</i>. <a name="rl1"><a href="9702n.htm#l1">Listing One</A> is the pseudocode for this member function. </p>

<p><i>OnSplitCmd()</i> first verifies that the parent of the view handling the command is a <i>CSplitterWnd</i> by calling <i>GetParent-Splitter()</i>. If the view is inside a <i>CSplitterWnd</i>, it then ASSERTs that the splitter bar is not already in tracking mode, which should be impossible since the menu/toolbar item should be disabled by <i>OnUpdateSplitCmd()</i>. MFC has many such ASSERTs that check the validity of states that should be True. This catches the problem of a user mistakenly changing the behavior of <i>OnUpdateSplitCmd()</i> to allow the splitter bar to enter tracking mode twice. Once everything is validated,</p>

<p><i>OnSplitCmd()</i> calls <i>CSplitterWnd::DoKeyboardSplit()</i>. <a name="rl2"><a href="9702n.htm#l2">Listing Two</A> is the pseudocode for this member function.</p>

<p>First, <i>DoKeyboardSplit()</i> does some if/else checking to find out which part of the <i>CSplitterWnd</i> needs to be "activated." For example, if there are two splits open, <i>DoKeyboardSplit()</i> will need to move both bars, so it sets the value of <i>ht </i>to <i>splitterIntersection1</i>. Once the value of <i>ht</i> is determined, <i>DoKeyboardSplit()</i> calls <i>StartTracking()</i> -- the same function that is called when the user presses the mouse button to "grab" a splitter bar. Finally, after calling <i>StartTracking()</i>, <i>DoKeyboardSplit()</i> makes some calculations and then programmatically moves the mouse cursor over the splitter bar (or intersection) being manipulated by calling <i>SetCursorPos()</i>.</p>

<p>While the ID_WINDOW_SPLIT trick is helpful and easy to use, there are common <i>CSplitterWnd</i> situations it does not address.</p>

<h3>Not So Static <i>CSplitterWnd</i></h3>

<p>Many of today's applications have a Microsoft Explorer look-and-feel with a vertical static splitter that separates a tree view on the left, and list view on the right. The problem with using <i>CSplitterWnd</i> for this functionality is that in static mode you cannot change the orientation of the splitter bar. For example, what if you want to provide users with the ability to switch from a vertical presentation to a horizontal presentation? </p>

<p>In our previous column, we showed that <i>CSplitterWnd</i> has key data members that maintain the row/column information for the class; see <a name="rt1"><a href="9702nt1.htm">Table 1</A>. We'll need to manipulate these members to implement the static-bar flipping functionality. Since these <i>CSplitterWnd</i> data members are all protected, the first step is to create a <i>CSplitterWnd</i> derivative so that you can freely access the data members and encapsulate your <i>CSplitterWnd</i> enhancement in a stand-alone class. The enhanced <i>CSplitterWnd</i> is called "<i>CDobbsSplitter</i>," and its declaration is presented in <a name="rl3"><a href="9702n.htm#l3">Listing Three</A>. From <a href="9702n.htm#l3">Listing Three</A> you can see that a couple of data members have been added to <i>CDobbsSplitter</i> to help with the implementation of the <i>FlipSplit()</i> function. <a name="rt2"><a href="9702nt2.htm">Table 2</A> lists these data members.</p>

<p><a name="rl4"><a href="9702n.htm#l4">Listing Four</A> is the implementation of the <i>CDobbsSplitter</i> class. The main functionality provided by the class comes from the <i>FlipSplit()</i> member function. This member function determines whether the <i>splitterwindow</i> is currently split horizontally or vertically, then calls either <i>SplitVertically()</i> or <i>SplitHorizontally()</i> to "flip" the split. The logic for detecting whether the current split is horizontal or vertical is based on the number of rows. For example, if the number of rows is greater than the number of columns, then the split is horizontal. If the number of columns is greater than the number of rows, then there is a vertical split.</p>

<p>The <i>SplitHorizontally()</i>/<i>SplitVertically()</i> functions actually perform the manipulations of the split. They do this by programmatically swapping the numbers of rows (<i>m_nRows</i>/<i>m_nMaxRows</i>) and columns (<i>m_nCols</i>/<i>m_nMaxCols</i>). After swapping the values of these data members, the row and column information arrays are also swapped (<i>m_pColInfo</i> and <i>m_pRowInfo</i>). Next, the ID given to each pane is swapped so that there are no focus problems using the <i>SetDlgCtrlID()</i> API. Finally, whenever you programmatically change a splitter window, you must call <i>RecalcLayout()</i> to cause the splitter window to update.</p>

<p>Notice also that <i>SplitHorizontally()</i> and <i>SplitVertically()</i> make a call to the <i>UpdatePanes()</i> member function. This member updates the <i>m_pColInfo</i> and <i>m_pRowInfo</i> size information arrays with new data based on the new split. This data is calculated using the previous split ratios and sizes of the panes.</p>

<h3>Conclusion</h3>

<p>By applying some of our undocumented <i>CSplitterWnd</i> knowledge, you have added new functionality to the <i>CSplitterWnd</i> and given end users the flexibility to change the appearance of a program that uses a static splitter. You can take this example and extend it to swap panes, or work in a <i>CDialog</i>. For a real challenge, you might even try to make a dynamic <i>CSplitterWnd</i> that can have more than two rows and columns. A sample application that further illustrates how this additional functionality can be implemented is available electronically (see "Availability," page 3).</p>

<p><b>DDJ</b></p>


<H4><a name="l1">Listing One</H4>

<pre>BOOL CView::OnSplitCmd(UINT){
    CSplitterWnd* pSplitter = GetParentSplitter(this, FALSE);
    if (pSplitter == NULL)
        return FALSE;
    ASSERT(!pSplitter-&gt;IsTracking());
    pSplitter-&gt;DoKeyboardSplit();
    return TRUE;    
}
<p></p>
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>BOOL CSplitterWnd::DoKeyboardSplit(){
    int ht;
    if (m_nRows &gt; 1 &amp;&amp; m_nCols &gt; 1)
        ht = splitterIntersection1; // split existing row+col
    else if (m_nRows &gt; 1)
        ht = vSplitterBar1;         // split existing row
    else if (m_nCols &gt; 1)
        ht = hSplitterBar1;         // split existing col
    else if (m_nMaxRows &gt; 1 &amp;&amp; m_nMaxCols &gt; 1)
        ht = bothSplitterBox;       // we can split both
    else if (m_nMaxRows &gt; 1)
        ht = vSplitterBox;          // we can split rows
    else if (m_nMaxCols &gt; 1)
        ht = hSplitterBox;          // we can split columns
    else
        return FALSE;               // can't split
<p></p>
   // start tracking
    StartTracking(ht);
<p></p>
    CRect rect;
    rect.left = m_rectTracker.Width() / 2;
    rect.top = m_rectTracker.Height() / 2;
    if (m_ptTrackOffset.y != 0)
        rect.top = m_rectTracker.top;
    if (m_ptTrackOffset.x != 0)
        rect.left = m_bTracking2 ? m_rectTracker2.left :m_rectTracker.left;
    rect.OffsetRect(-m_ptTrackOffset.x, -m_ptTrackOffset.y);
    ClientToScreen(&amp;rect);
    SetCursorPos(rect.left, rect.top);
<p></p>
    return TRUE;
}
<p></p>
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>class CDobbsSplitter : public CSplitterWnd{
// Construction
public:
    CDobbsSplitter();
<p></p>
// Attributes
public:
    BOOL m_bPanesSwapped;
    int m_nSplitRatio;
    int m_nSplitResolution;
// Operations
public:
  void SetSplitRatio( int nRatio );
  BOOL IsSplitHorizontally() const;
  BOOL IsSplitVertically() const { return !IsSplitHorizontally(); }
  BOOL ArePanesSwapped() const { return m_bPanesSwapped; }
protected:
    BOOL UpdateSplitRatio();
    BOOL UpdatePanes( int cx, int cy );
    BOOL UpdatePanes();
public: 
void FlipSplit();     //DDJ
    void SplitVertically();
    void SplitHorizontally();
    // Implementation
public:
    virtual ~CDobbsSplitter();
protected: // Generated message map functions
    afx_msg void OnSize(UINT nType, int cx, int cy );
    DECLARE_MESSAGE_MAP()
};
<p></p>
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>CDobbsSplitter::CDobbsSplitter(){
    //Intialize extended state.
<p></p>
   m_nSplitRatio = -1;
    m_bPanesSwapped = FALSE;
    nSplitResolution = 1;
}
BEGIN_MESSAGE_MAP(CDobbsSplitter, CSplitterWnd)
    ON_WM_SIZE()
END_MESSAGE_MAP()
void CDobbsSplitter::SetSplitRatio( int nRatio )
{
    m_nSplitRatio = nRatio;
}
BOOL CDobbsSplitter::IsSplitHorizontally() const
{
    ASSERT(( m_nRows &gt; 1 ) != ( m_nCols &gt; 1 ));
    ASSERT( max( m_nRows, m_nCols ) == 2 ); 
    return ( m_nCols &gt; 1 );
}
void CDobbsSplitter::SplitHorizontally()
{
    if( IsSplitHorizontally())
        return;
    ASSERT( m_nCols = 1 );
    ASSERT( m_nRows = 2 );
    CWnd* pPane = GetDlgItem( IdFromRowCol( 1, 0 ));
    ASSERT( pPane );
    // swap the H/V information
    m_nMaxCols = m_nCols = 2;
    m_nMaxRows = m_nRows = 1;
    CRowColInfo* pTmp = m_pColInfo;
    m_pColInfo = m_pRowInfo;
    m_pRowInfo = pTmp;
   // change the last pane's ID reference
    pPane-&gt;SetDlgCtrlID( IdFromRowCol( 0, 1 ));
    ASSERT( GetPane( 0, 1 )-&gt;GetSafeHwnd() == pPane-&gt;GetSafeHwnd() );
    if( UpdatePanes())
        RecalcLayout();
}
void CDobbsSplitter::SplitVertically()
{
    if( IsSplitVertically())
        return;
    ASSERT( m_nCols = 2 );
    ASSERT( m_nRows = 1 );
    CWnd* pPane = GetDlgItem(IdFromRowCol( 0, 1 ));
    ASSERT( pPane );
    // swap the H/V information
    m_nMaxCols = m_nCols = 1;
    m_nMaxRows = m_nRows = 2;
    CRowColInfo* pTmp = m_pColInfo;
    m_pColInfo = m_pRowInfo;
    m_pRowInfo = pTmp;
    // change last pane's ID reference (no need to change ID for first one)
    pPane-&gt;SetDlgCtrlID( IdFromRowCol( 1, 0 ));
    ASSERT( GetPane( 1, 0 )-&gt;GetSafeHwnd() == pPane-&gt;GetSafeHwnd() );
<p></p>
<p></p>
    if( UpdatePanes())
        RecalcLayout();
}
void CDobbsSplitter::FlipSplit()
{
    if( IsSplitHorizontally())
        SplitVertically();
    else
    {
        ASSERT( IsSplitVertically());
        SplitHorizontally();
    }
}
int CDobbsSplitter::UpdateSplitRatio()
{
    CRowColInfo* pPanes;
    int czSplitter;
    if( IsSplitHorizontally())
    {
        pPanes     = m_pColInfo;
        czSplitter = m_cxSplitter;
    }
    else
    {
        pPanes     = m_pRowInfo;
        czSplitter = m_cySplitter;
    }
    TRACE( "CDobbsSplitter::UpdateSplitRatio: 1:%i, 2:%i\n",
           pPanes[0].nCurSize, pPanes[1].nCurSize);
    if(( pPanes[0].nCurSize != -1 ) &amp;&amp;
       ( pPanes[0].nCurSize + pPanes[1].nCurSize != 0 ))
    {
        m_nSplitRatio = nSplitResolution * pPanes[0].nCurSize /
                   ( pPanes[0].nCurSize + pPanes[1].nCurSize + czSplitter );
    }
    TRACE("m_nSplitRatio=%i\n", m_nSplitRatio );
    return m_nSplitRatio;
}
BOOL CDobbsSplitter::UpdatePanes()
{
    CRect rcClient;
    GetClientRect( rcClient );
    return ( !rcClient.IsRectEmpty() &amp;&amp;
             UpdatePanes( rcClient.Width(), rcClient.Height()));
}
BOOL CDobbsSplitter::UpdatePanes( int cx, int cy )
{
    TRACE("UpdatePanes: cx=%i, cy=%i\n", cx, cy );
    CRowColInfo* pPanes;
    int cz;
    if( IsSplitHorizontally())
    {
        pPanes = m_pColInfo;
        cz     = cx;
    }
<p></p>
    else
    {
        pPanes = m_pRowInfo;
        cz     = cy;
    }
    BOOL bRes = UpdateSplitRatio();
    if( m_nSplitRatio &gt;= 0 )
    {
        ASSERT( (ULONG)m_nSplitRatio * cz / 
            nSplitResolution &lt;= (ULONG)INT_MAX );
       pPanes[0].nIdealSize =
            int( (ULONG)m_nSplitRatio * cz / nSplitResolution );
    }
    return bRes;
}
void CDobbsSplitter::OnSize( UINT nType, int cx, int cy )
{
    TRACE("CDobbsSplitter::OnSize: cx:%i, cy:%i\n", cx, cy );
    if(( nType != SIZE_MINIMIZED )&amp;&amp;( cx &gt; 0 )&amp;&amp;( cy &gt; 0 ))
        UpdatePanes( cx, cy );
    CSplitterWnd::OnSize( nType, cx, cy );
}
<p></p>
<p></p>
<p></p>
<P>
<a href="#rl4">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
