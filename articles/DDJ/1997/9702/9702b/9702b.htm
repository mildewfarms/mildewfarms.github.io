<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal February 1997: A Debug/Trace Tool</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>A Debug/Trace Tool</h1>

<p><i>Dr. Dobb's Journal</i> February 1997
</p>
<h3>By Rainer Storn</h3>

<I>Rainer, who studied at the University of Stuttgart, Germany, is a postdoctoral fellow at the International Computer Science Institute and can be contacted at storn@ icsi.berkeley.edu or rainer.storn@zfe.siemens.de.</I>

<hr>

<p>When it comes to debugging, programmers usually fall into one of two camps: those who regard <i>printf()</i> as old-fashioned and believe that modern source-level debuggers do everything necessary, and those who claim that source-level debuggers often don't. For instance, the former argue that nothing can replace features such as stepping forward and backward and the option of looking at arbitrary variables at any time. The latter, however, claim that source-level debuggers often don't let you set the granularity or skip breakpoints for a certain amount of times, that few offer CRC capabilities, that regression tests require code instrumentation anyway, and that they are tired of setting each breakpoint anew once they've changed and recompiled their sources. </p>

<p>The debug/trace tool I present in this article provides help for the second camp, and maybe even for the first one -- if you are willing to exploit the advantages of both strategies. The tool is also appropriate when you don't have a powerful debugger available, or when you need trace functionality built into your code to support error-spotting at the client site.</p>

<p>This tool has its roots in the debugger developed by Robert Ward in <i>Debugging C</i> (Que, 1986). However, I have changed and extended it significantly. Although my tool uses Borland C++ 3.1 and runs on a 486 PC, its parts are independent of the 80x86 family's memory organization and have run on a SPARC 5 under SunOS 4.1.3. The complete source code, sample data, and executables are provided electronically; see "Availability," page 3.</p>

<h3>The Debug/Trace Tool</h3>

<p>The <i>dbg()</i> function is central to the functionality of the debug/trace tool I present here. For practical purposes, <i>dbg()</i> constitutes an extended <i>printf()</i>; it is declared as in <a name="re1"><a href="9702be1.htm">Example 1</A>(a) and can be used as in <a href="9702be1.htm">Example 1</A>(b). The first variable in <i>dbg()</i>, arbitrarily chosen to be <i>7_stp</i>, is a label and will be used by the tool like a breakpoint address or a trace identifier. The second <i>dbg()</i> variable, arbitrarily chosen to be <i>2</i>, is a trace level and will be used to enable or disable the printing part of a <i>dbg()</i> statement, depending on the trace level activated by the tool. If you choose the trace level to be <i>2</i>, then all <i>dbg()</i> statements that exhibit the levels 0, 1, or 2 will perform the appropriate printout, which is defined by the subsequent parameters. These parameters follow the syntax used in a regular <i>printf()</i> statement.</p>

<h3>The Command Interpreter</h3>

<p>Once you've started to run your program, the tool will start to display <i>DBG&gt;&gt;</i> in order to give you access to the tool's command interpreter. The commands that you have access to are grouped into basic and advanced commands. In many cases, the basic commands suffice to spot the error you are looking for. For more intricate bugs, however, you can resort to the more advanced commands.</p>

<h3>Basic Commands</h3>

<p>From a programmer's point of view, the basic commands allow for an enhanced <i>printf</i> facility with the option of switching the <i>printf</i> function on and off as well as stopping the execution at predefined stop points (breakpoints). A major asset is the ability to store and load the breakpoint configuration.</p>

<p>The question mark (?) activates the help comment, which will display all commands of the interpreter along with brief descriptions of their use.</p>

<p>The command <i>STOP</i> <i>n</i> <i>pattern</i> defines stop pattern <i>n</i>, where <i>n</i>=1, 2,...,10, which indicates a breakpoint. If the tool detects a <i>dbg()</i> statement with this pattern in the label part of <i>dbg()</i>, it will stop execution and prompt <i>DBG&gt;&gt;</i>. For <a href="9702be1.htm">Example 1</A>(b), an appropriate command to reach the stop point would be <i>STOP 1 7_stp1</i>. Note that the parameters after STOP must be separated with blanks and that the parameter <i>pattern</i> does not store spaces; the label "<i>7_stp1 "</i> (note the trailing space) will not trigger the <i>dbg()</i> function, as it cannot be represented properly by <i>pattern</i>. Always finish a stop label in <i>dbg()</i> with a nonwhitespace character. </p>

<p>For <i>pattern</i>, you can also use the wildcards "?" and "*". For example, the pattern <i>7_s</i>* will match all labels in your program starting with <i>7_s</i>. The pattern <i>7_stp??</i> will match any label starting with <i>7_stp </i>and having two additional arbitrary characters. Again, only the stop numbers 1 through 10 are available. However, this can be extended easily in the source code if you need more than ten stop points.</p>

<p>The GO command resumes execution and returns control to the program being tested. The program will run until the next stop point is encountered. </p>

<p>The command TRACE <i>n</i> <i>pattern</i> defines the trace pattern, where <i>n</i>=1, 2,...,10. If the tool detects a <i>dbg()</i> statement with this pattern, it will execute the <i>dbg()</i> statement; that is, it will print the desired message if the trace level allows it to. For <a href="9702be1.htm">Example 1</A>(b), an appropriate command to achieve printout would be <i>TRACE 1 7_stp1</i>. The treatment of the parameters is the same as described for STOP. As with the stop command, only the trace numbers 1 through 10 are available. However, this can be extended if you need more than ten trace points. As a default, all trace labels are enabled, and the debugger acts as if <i>TRACE 1 </i>* were used at initialization.</p>

<p>The command LEVEL <i>n</i> specifies trace level <i>n</i> and suppresses all enabled trace points with a level parameter greater than <i>n</i>.</p>

<p>The STAT command displays the status of the debug/trace tool. The status comprises the activated stop and trace points, the trace level, and some advanced command parameters.</p>

<p>SAVE <i>filename</i> saves the status of the debug/trace tool in the file specified by <i>filename</i>. If just the command SAVE is used, STAT.DAT will be used as the default filename. The <i>save </i>feature is helpful if multiple runs of a program with the same trace, stops points, and the like are required, especially if the program code has been changed between runs. You can use this command not only for debugging, but also for regression testing, provided that your <i>dbg()</i> statements remain in the code. SAVE is used together with LOAD.</p>

<p>The LOAD <i>filename</i> command loads the status of the debug/trace tool from the file specified by <i>filename</i>. If just the command LOAD is used, STAT.DAT will be used as the default filename.</p>

<p>Finally, the command QUIT quits the debug/trace tool and finishes the program.</p>

<h3>Advanced Commands </h3>

<p>Advanced commands extend the basic commands. For instance, you can skip the stop and trace points, store the trace output, and gain insight into the physical memory by using a dump and checksum facility.</p>

<p>The GRAN <i>n</i> command sets the trace granularity to <i>n</i> so that only every <i>n</i>th <i>dbg()</i> call, the level variable of which is smaller or equal to the current trace level, will be printed. The argument <i>n</i> must always be greater than zero. GRAN <i>n</i> can be helpful when you know that a bug involves a certain variable. The variable ends up with a wrong value, but you are uncertain where or when the variable acquired that value. In such a case, you may decide to examine every thousandth reference to the suspect variable. Then, within the 1000 references that surround the error, you examine every hundredth reference. Finally, within the 100 references that surround the error, every reference is examined. This is referred to as an "adjustment in granularity."</p>

<p>The command SSKIP <i>n</i> is the stop-point skip command to skip <i>n</i> stop points. For example, by entering <i>SSKIP 3</i>, you tell the debug/trace tool to skip the next three activated stop points. The SSKIP command is particularly useful when you don't want to cancel the stop points (because you want to use them all again); just skip some in the present run to concentrate on a specific part of your program. A good example of this involves loops, where you just want to examine their beginning and end.</p>

<p>For instance, once you've examined the first output for u=0 and v=0 in <a name="re2"><a href="9702be2.htm">Example 2</A>, you might want to skip the next 34 stop points by entering <i>SSKIP 34</i> and resume with the last one. As an aside, once you've activated tracing on label <i>1_init1</i>, the output portion of the <i>dbg()</i> statement will always be executed, which means that 34 outputs are running over your screen. If you don't like this, you should first switch off tracing by entering LEVEL 1 before you type GO, thus changing the trace level. Alternatively, you can use the TSKIP <i>n</i> command, which is analogous to SSKIP <i>n</i> but has influence on the activated trace points.</p>

<p>The command TRCMD <i>c</i> <i>filename</i> specifies the trace mode, which selects either the console, the file specified by <i>filename</i>, or both as the output device. If no filename is specified, TRACE.DAT is the default. The options for <i>c</i> are: c, tracing to console only; f, tracing to file only; and a, tracing to console as well as file. The default setting for <i>c</i> is "console only." This is used every time the debugger is started and cannot be influenced by the LOAD command.</p>

<p>WATCH <i>n</i> <i>addr</i> defines a memory address that will be watched and assigns this address the identification number <i>n</i> (up to now, only 1, 2, and 3 have been implemented). Watch addresses are examined automatically at certain <i>dbg()</i> calls according to the watch mode selected. Whenever an examination reveals that the contents of a watch address have changed, a stop point is forced. The syntax of <i>addr</i> depends on the memory model used for 80x86 processors. For the tiny and small model, <i>addr</i> is a four-digit hexadecimal number. For the medium, compact, large, and huge models, <i>addr</i> consists of two four-digit hexadecimal numbers separated by a colon.</p>

<p>The command WATMD <i>c</i> specifies which <i>dbg()</i> calls trigger automatic watch examination. The options, specified by a single character, are: o, all watches off (the default); s, examine at stop points only; t, examine at trace points only; and a, examine at all occurrences of <i>dbg()</i>. </p>

<p>DUMP <i>len</i> <i>start</i> prints, in hexadecimal and ASCII format, the <i>n</i>-byte block of memory beginning at address <i>start</i>. The syntax of <i>start</i> depends on the memory model used for 80x86 processors (see WATCH <i>n</i> <i>addr</i>). If the parameters <i>len</i> and <i>start</i> are not specified (that is, only DUMP is used), the dump is performed using the previous values for <i>len</i> and <i>start</i>, if any.</p>

<p>The CRCK <i>len</i> <i>start</i> command computes a cyclic redundancy check over the <i>n</i>-byte block of memory, beginning at <i>start</i>. The notational remarks for <i>len</i> and <i>start</i> are the same as for DUMP <i>len</i> <i>start</i>. Checksums are a powerful technique for detecting errant pointers that write on code. The user simply recomputes the checksum at regular intervals during the program's execution. If the checksum at one computation differs from the previous computation, an intervening pointer reference must have modified the code. If the parameters <i>len</i> and <i>start</i> are not specified (that is, only CRCK is used), the checksum is computed using the previous values for <i>len</i> and <i>start</i>, if any.</p>

<h3>Additional Advanced Commands</h3>

<p>Some commands are available only in basic form because their implementations depend either on the memory model, compiler, or application program. I've implemented these commands using the DOS small memory model. However, since the source code of the debugging facility is available and documented, you can adapt the appropriate functions to fit your environment.</p>

<p>STACK gives a stack dump of all stack locations with return addresses (frame-pointer chain). </p>

<p>The command STCMD <i>c</i> specifies which <i>dbg()</i> calls trigger automatic stack examination. The options, specified by a single character, are: o, stack examination off (the default); s, examine only at stop points; t, examine only at trace points; and a, examine at all occurrences of <i>dbg()</i>.</p>

<p>The LOCAL <i>n</i> command prints the local variables and parameters associated with the last <i>n</i> stack frames. </p>

<p>SNAP <i>n</i> invokes one of three user-defined snapshot functions (<i>n</i>=1,2,3). Snapshots usually are defined separately for each program tested and are used to dump global or local variables accessible via a globally known pointer.</p>

<h3>Using the Debug/Trace Tool</h3>

<p>To use the debug/trace tool, you must include <i>dbg()</i> statements in your code wherever necessary. You must also include the statements in <a name="re3"><a href="9702be3.htm">Example 3</A>(a) in the program you want to debug. Next, you must place the function <i>dbg_init()</i> at the beginning of your program to initialize the tool, as in <a href="9702be3.htm">Example 3</A>(b). Finally, you need to link the object file of the tool to the object file of the program under test. You can then run the program to be tested.</p>

<p>When instrumenting your program, it sometimes helps to think of the code as divided into logical sections. In the first section, all labels might start with <i>1_</i>, in the second, all labels start with <i>2_</i>, and so on. In each section, the trace level can be used to distinguish the nesting level, starting with level 1. Level 0 should be reserved so that tracing can be switched off if necessary. <a name="rl1"><a href="9702b.htm#l1">Listing One</A> is C code that illustrates this approach. </p>

<p><b>DDJ</b></p>


<H4><a name="l1">Listing One</H4>

<pre>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;
#include &lt;stdarg.h&gt;
<p></p>
#define INF 1000       /*Infinity must be higher than the largest path  value */
#define N     10       /*Maximum number of nodes in the network */
#define TRUE   1
#define FALSE  0
#define PERM   1       /*Permanently labeled */
#define TEMP   0       /*Temporarily labeled */
<p></p>
/*--------Function declarations------------------------------------*/
<p></p>
int dijkstra(int s, int t, int w[][N], int final[], int dist[], int pred[]);
extern void dbg_init(void);
extern void dbg(char *, int, char *, ...);
<p></p>
/*--------Function definitions-------------------------------------*/
int dijkstra(int s, int t, int w[][N], int final[], int dist[], int pred[])
{
  int u, v, y, recent, newlabel, min, path;
<p></p>
/*--------Initialization---------------------------*/
dbg_init();
  for (v=0; v&lt;N; v++)
  {
    dist[v]  = INF;   /*Set all distances to infinity */
    final[v] = TEMP;  /*Set all nodes to "temporarily labeled" */
    pred[v]  = -1;    /*Set nodes in shortest path trace to "non existent" */
  }
  dist[s]  = 0;       /*Distance from s to s is 0 */
  final[s] = PERM;    /*Set node s to "permanently labeled" */
  path     = TRUE;    /*Assume there is a path from s to t */
  recent   = s;       /*Most recent node is s */
<p></p>
<p></p>
/*--------Run Dijkstra's Algorithm------------------*/
  for(u=0;u&lt;6;u++)
  {
     for(v=0;v&lt;6;v++)
       dbg("1_init1",2,"w[%d][%d] = %d   ",u,v,w[u][v]);
  }
  dbg("1_init2",1,"&amp;u = %p\n",&amp;u);
  while(final[t]==TEMP)   /*while destination node t is temporarily labeled */
  {
     for(v=0; v&lt;N; v++)
     { 
    if ((w[recent][v] &lt; INF) &amp;&amp; (final[v]==TEMP)) /*node temporarily labeled */
        {
           newlabel = dist[recent] + w[recent][v];
           if (newlabel &lt; dist[v]) /*new distance, smaller than previous one */
           {
          dist[v] = newlabel;   /*update distance */
          pred[v] = recent;     /*put predecessor in shortest path */
          dbg("2_dist",4,"recent = %d   newlabel = %d \n",recent,newlabel);
           }
        }
     }
     min = INF;           /*reset temporary minimum */
     for(u=0; u&lt;N; u++)   /*Find smallest labeled node */
     {
    dbg("3_u",1,"u=%d\n",u);
        if ((final[u]==TEMP) &amp;&amp; (dist[u] &lt; min))  /*node temporarily labeled */
        {
           y   = u;       /*Save node in y */
           min = dist[u]; /*Reduce temporary minimum */
        } 
     }
     if (min &lt; INF)       /*if there is a path */
     {
        final[y] = PERM;
        recent   = y;
     }
     else                 /*if there is no path */
     {
        path     = FALSE;
        final[t] = PERM;  /*induce break of while loop */
     }
  }
  return(path);
}
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
