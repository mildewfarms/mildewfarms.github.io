<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal February 1997: Java Q&amp;A</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>How Do I Access a SQL Database from an Applet?</h1>

<p><i>Dr. Dobb's Journal</i> February 1997
</p>
<h3>By Cliff Berg</h3>

<I>Cliff, vice president of technology of Digital Focus, can be contacted at cliffbdf@digitalfocus.com. To submit questions, check out the Java Developer FAQ Web site at http://www.digitalfocus.com/faq/.</I>

<hr>

<p>In the past year, a lot has been written about the usefulness of the Web as an alternative to conventional custom software-based solutions for distributing business and other information. In the traditional approach, a vertical application is programmed using embedded SQL or some other technique, and application programs that access the database are distributed to users within a corporation. One disadvantage of this approach is that the application has to be redistributed every time it is changed. The web-based alternative instead relies on the simple (but powerful) HTML publishing model for the user interface and on centrally maintained CGI programs for accessing the database and making the data available to web pages.</p>

<p>While this approach is an improvement in cost and flexibility over the deployed application approach -- and much has been written about the cost advantages of doing things this way -- it suffers from the very limited feature set provided by the CGI protocol, which is primarily a transaction-oriented mechanism in which a server program accepts a parameter stream from the user's web-page form,  then generates a new web page as output, and possibly accesses a database along the way. Tools such as Javascript make it possible to perform local processing prior to sending the query to the database --  for example, to do checking on fields -- but Javascript is a poor choice for large applications. Because it does not provide a mechanism for reusing code, commonly used routines must be cut-and-pasted into each place they are needed.</p>

<p>A better approach is to utilize the distributed programming model of Java, so that we can have the best of both worlds: a flexible and highly interactive (even real-time) UI, but with the low cost of a web-based approach. The need to use CGI, which is notoriously difficult to debug, is also obviated.</p>

<h3>JDBC</h3>

<p>Java 1.1 will incorporate a package called "java.sql," which provides a standard Java binding for accessing an ODBC-compliant database. This package is available now as a beta release from Sun's Java site (http://java.sun.com/). To use it, all you need is a JDBC/ODBC-compliant driver. Eventually, such drivers will be available in Java-only versions. At the moment, most are implemented with Java native methods which, in turn, call ODBC driver libraries on a platform-specific basis. Since native methods cannot be called from within a remotely loaded applet in most browsers, this limits these drivers to applications that run on the same host as the database. This is not practical for a web application.</p>

<p>The solution implemented by many driver providers is to use a special server program that resides on the same machine as the database and fields remote JDBC requests, then calls the required ODBC driver functions. To achieve this, the JDBC driver (which runs within the applet) must be designed to communicate with this special server program.</p>

<p>In this column, I'll use a driver provided by XDB Systems (available from http://www.xdb.com/). All of the code will use the standard JDBC packages. The only vendor-specific impact on the program is the instantiation of XDB's driver. Most vendors, including XDB, also provide a rich set of user-interface components, written in Java, to assist in the construction of an interactive web-based database application. Since those tools are vendor specific, however, I won't use them for this column and will instead concentrate on the JDBC aspects.</p>

<h3>A Query Tool</h3>

<p>For a demonstration applet, I'll create a query tool that allows you to enter any arbitrary SQL query and displays the resulting table in a separate browser window.</p>

<p>I could simply sprinkle JDBC calls throughout the code directly, the way you might have embedded SQL wherever you want to make a query. Database vendors seem to think that developers want to use their interface in this way. It is not good programming practice, however. For example, suppose you want to develop most of the application independent of the database, and merely have a test stub, which simulates a database connection. If there are database calls everywhere, it will be impossible to test the application as a whole without access to the database -- a poor strategy. It is better to encapsulate database access in a single class. You could then have a test version of this class and a real version. The test version's methods could return simulated data, whereas the real version's methods return live data.</p>

<p>I've encapsulated my use of java.sql into a class called <i>QuerySvcsImpl</i> that implements an interface called <i>QuerySvcs</i>. For testing, I am free to have a test version of this class, called <i>QuerySvcsTestImpl</i>.</p>

<p><i>QuerySvcs</i> (see <a name="re1"><a href="9702le1.htm">Example 1</A>) specifies these methods. Each of these may throw <i>java.sql.SQLException</i>, which would indicate an error was detected by the driver. These methods are implemented in <i>QuerySvcsImpl</i>. The <i>initConnection()</i> method checks if a driver has been instantiated yet (static component), and if one has not, calls <i>new</i> <i>JetDriver()</i> -- XDB's driver object. This is the last time you have to refer to the client-side driver object. <i>initConnection()</i> also performs <a name="re2"><a href="9702le2.htm">Example 2</A>.</p>

<p>The <i>java.sql.DriverManager</i> class has a static method called <i>getConnection()</i> (<a href="9702le2.htm">Example 2</A>) that takes three parameters: a dataset URL, database user id, and password. The URL is the concatenation of the driver protocol, host, and database dataset name. JDBC defines a driver-protocol syntax composed of two parts separated by a colon. The first part is simply "jdbc," while the second part specifies the name of the driver and is vendor specific. In this case, the full protocol is "jdbc:jet.jettp:". </p>

<p>The host is normally the Internet DNS name or the IP address of the database host machine. For example, it could be <i>www.somewhere.com</i>, or <i>205.123.456.789</i>. If you are testing your database on your own machine, however, you will probably want to specify "loopback" if your machine's TCP/IP stack has loopback support (Windows 95 does not; NT does). However, note that Netscape Navigator requires you to have a real connection, and will not like loopback. If you are testing on Windows 95 and only have a dial-up connection, you can put code into your applet to get your dynamic IP address with the <i>java.net.InetAddress.getLocalHost()</i> method and use this IP address in your <i>getConnection()</i> call -- all this to make the browser happy!</p>

<p>The <i>getMetaData()</i> method obtains a database meta data object that can be used to query information about the status of the database. For example, from a <i>DatabaseMetaData</i> object you can obtain the dataset URL, the database product name and version, and the name and version of the driver.</p>

<p>The <i>select()</i> method executes a SQL query against the database; see <a name="re3"><a href="9702le3.htm">Example 3</A>. As you can see, you first have to create a <i>java.sql.Statement</i> object before you can perform a query. You then call <i>executeQuery()</i> against the <i>Statement</i> object, passing it the SQL string to evaluate. The result that is returned is a <i>java.sql.ResultSet</i>, which is essentially a currency pointer on the query result. No data is actually returned to the client until the <i>ResultSet</i> is traversed.</p>

<p><i>vselect()</i> does all this, then traverses the <i>ResultSet</i>, and converts it into a <i>java.util.Vector</i> object, with each element of the vector consisting of an array of objects corresponding to the fields in each row of the result. This method is useful if you want to get the whole result and then do something with it, like graph it.</p>

<p><a name="re4"><a href="9702le4.htm">Example 4</A> is the core of <i>vselect()</i>. Thus, to find out how many columns are contained in the result, you can get the <i>ResultSetMetaData</i> object and then call <i>getColumnCount()</i>. Note that many of the <i>ResultSetMetaData</i> methods can only be called once during the life of any <i>ResultSet</i> instance.</p>

<p>What you've discovered is that the <i>ResultSet.getObject()</i> method involves a lot of overhead and results in very slow performance. Alternatively, you could use the JDBC type-specific methods of the form <i>get&lt;type&gt;();</i>. The disadvantage is that when using these, you must anticipate the type of each column in the result.</p>

<p>The JDBC standard also provides for parameterized precompiled statements (<i>java.sql.PreparedStatement</i>), which will result in faster performance if a <i>select</i> is executed within a loop.</p>

<p>To put all this together into a query tool, I wrote an applet, Client.java (see <a name="rl1"><a href="9702l.htm#l1">Listing One</A>,that instantiates a text field for capturing the input query from the user. A button <i>handleEvent()</i> method retrieves this text, and passes it to my <i>QuerySvcs.select()</i> method, which returns a <i>ResultSet</i>. I then call <i>toHTML()</i> with this result set, to generate HTML output for the results window. I use the "javascript:" content protocol to display the generated string of HTML statements: <i>getAppletContext().showDocument(querySvcs.toHTML(resultSet), "OUTPUT_WINDOW");</i>. <a name="rf1"><a href="9702lf1.htm">Figure 1</A> is the completed applet and <a name="rf2"><a href="9702lf2.htm">Figure 2</A> is a results table generated by it.</p>

<h3>Notes about Data Types</h3>

<p><a name="rt1"><a href="9702lt1.htm">Table 1</A> lists some of the more useful datatypes. In addition, the Microsoft SQL types DATETIME and SMALLDATETIME are mapped by most ODBC drivers to the ODBC type TIMESTAMP, which maps to <i>java.sql.Timestamp</i>. While you cannot create more than one TIMESTAMP field in a record, there is no such restriction on the DATETIME types, and so you can, from your JDBC program's point of view, have more than one <i>java.sql.Timestamp</i> object in a record. This is useful for storing <i>java.util.Date</i> objects, since <i>java.sql.Timestamp</i> derives from <i>java.util.Date</i>, and because some databases do not support DATE and TIME, but instead have a DATETIME type. Simply use the <i>java.sql.Timestamp</i> type in your program instead of <i>java.util.Date</i>, and you will be okay -- the <i>Timestamp</i> object should work wherever a <i>Date</i> object is required. The only consideration is that <i>java.sql.Timestamp</i> overrides <i>java.util.Date</i>'s date parsing and <i>toString()</i> methods, and so it has different (more TIMESTAMP-like) rules for how it parses and displays date and time strings. Note that <i>java.util.Date</i> objects can only represent dates as far back as 1970; <i>java.sql.Timestamp</i> objects have this same limitation. If you want to represent dates beyond this, you may have to add an offset. Beware of a bug in the parsing of <i>java.util.Date</i> objects, which has been fixed in Netscape's version of Java, but not in Internet Explorer. This bug causes a date expressed as 3/1/95 to be interpreted as April 1, 1995 (no joke).</p>

<p>The <i>Bignum</i> datatype is very inefficient, and should be used only where monetary values are represented or where exact precision is required.</p>

<h3>The Browser Factor</h3>

<p>Sun made a mistake in making the <i>sql</i> package part of package <i>java</i>. Package <i>java.sql</i> will be a standard component of package <i>java</i> when JDK 1.1 is released. In the meantime, however, the fact that this package is part of package <i>java</i> makes it impossible to load it into Netscape Navigator or Internet Explorer in a normal manner. A browser generally will not let you download any component of package <i>java</i> from a remote source, for security reasons. Since package <i>java.sql</i> is not incorporated into either of the aforementioned browsers (and probably will not be until after JDK 1.1 is released), this means that package <i>java.sql</i> is effectively inaccessible to a browser.</p>

<p>A fairly ugly but usable workaround, until 1.1 is released, is to add <i>java.sql</i> to the browser's own class library. In the case of Netscape Navigator, as of this writing, these classes are hidden in a ZIP file called java_30. To put <i>java.sql</i> into this ZIP archive, you must rename the archive to java_30.zip, open it with a tool such as WinZip, add <i>java.sql</i> immediately after the other java packages in the file, and then rename the file back to its original name. For Internet Explorer, the procedure is similar, except that the ZIP file is called classes.zip, and it is in the \Windows\java\classes directory.</p>

<p>Now that you have added <i>java.sql</i> to your java_30, users of your applet will have to replace their Netscape java_30 file with yours. You can put it on the web site that serves the applet, with instructions about where to put it after it is downloaded. While this is a little bit cumbersome, it is workable for an intranet application.</p>

<p>An even better alternative is to use a product such as Marimba's Castinet (http://www.marimba.com/), which automatically installs applets on a client system. Castinet does not have the same restrictions that browsers have, because the assumption is that the user has approved the applet and trusts its source. This kind of setup allows you to download new components of package java (such as <i>java.sql</i>).</p>

<p>The complete code for the query tool is available electronically (http://www.digitalfocus.com/ddj/code/; or see "Availability," page 3). </p>

<h3>Conclusion</h3>

<p>The JDBC interface, combined with a suitable driver, makes it easy to create portable database applications with Java. As of this writing, some installation is required for users to use JDBC applets within a browser, but this obstacle will likely disappear with the next major round of browser releases. There are also alternatives to browsers.</p>

<p>JDBC makes it possible to make enterprise data available, from dynamic and interesting Java applications, without requiring the developer to use precompilers or to write stored procedures: The full power and flexibility of Java is available. Further, these applications can be used with any database for which there are JDBC/ODBC or pure JDBC drivers, and most ODBC driver vendors are developing or now provide JDBC drivers. Java has become a formidable business tool.</p>

<p><b>DDJ</b></p>


<H4><a name="l1">Listing One</H4>

<pre>/* Copyright (c) Digital Focus, 1996, 1997. * This code may be used for non-commercial purposes.
 * Digital Focus gives no warrantee or guarantee.
 */
<p></p>
import java.applet.*;
import java.awt.*;
import java.io.*;
import java.util.*;
import java.net.*;
<p></p>
/** Query Tool.  */
public class Client extends Applet
{
    TextArea queryWindow = new TextArea(3, 40);
    Button go = new Button("Execute");
    QuerySvcsImpl querySvcs;
<p></p>
    /** Initialize the applet. */
    public void init()
    {
   add(queryWindow);
  add(go);
   // Instantiate query services
   try
   {
  querySvcs = new QuerySvcsImpl(getParameter("protocol"), 
getParameter("host"), getParameter("dsn"), getParameter("uid"), 
getParameter("pwd"));
   }
   catch (java.sql.SQLException ex)
   {
  ex.printStackTrace();
  showStatus(ex.getMessage());
  return;
   }
    }
    /** Handle the button press event. */
    public boolean handleEvent(Event e)
    {
   if ((e.target == go) &amp;&amp; (e.id == Event.ACTION_EVENT))
   {
  java.sql.ResultSet r = null;
  String html = null;
  URL url = null;
<p></p>
  try
  {
 r = querySvcs.select(queryWindow.getText());
 html = querySvcs.toHTML(r);
 System.out.println(html);
 url = new URL("javascript:'" + html + "'");
 getAppletContext().showDocument(url, "results_window");
  }
  catch (Exception ex)
  {
 ex.printStackTrace();
 showStatus(ex.getMessage());
 return true;
  }
  return true;
   }
   else return super.handleEvent(e);
    }
}
<p></p>
<p></p>
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
