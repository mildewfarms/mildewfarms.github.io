<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal August 1997: Concurrent Database Commands and C++</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Concurrent Database Commands and C++</h1>

<p><i>Dr. Dobb's Journal</i> August 1997
</p>
<h2>Executing multiple database commands within different threads</h2>

<h3>By Harold R. Kasperink and John C. Dekker</h3>

<I>Harold and John are developers for Document Access and can be contacted at harokasp@docuaccess.nl and johndekk@docuaccess.nl, respectively.</I>

<hr>

<p>During the process of porting multithreaded server applications from HP-UX System 9 to Windows NT, we encountered problems with the execution of multiple database commands within different threads using the same database connection. The applications worked properly on HP(UX), but after executing the recompiled and relinked HP-UX source code on an NT system, the applications failed when they tried to access the database. On HP-UX System 9, threads share the same process space and, within each thread, it is possible for multiple database commands to use the same database connection, so database commands can execute concurrently. Under Windows NT, each thread has its one process space; therefore, database commands can only be executed in the thread in which the database connection is made. Because we didn't want each thread to create its own database connection, these threads must execute commands via "database threads." In this article, we will explain how we resolved this problem by using design patterns.</p>

<h3>Design Patterns</h3>

<p>Class structures developed to solve problems in one program can often be used to solve similar problems in other programs. For instance, common object structures can be reused. If you describe a structure and its objects' interaction and interrelation, and give some examples of the structure's use, software developers can map your structure to their problems. </p>

<p><i>Design Patterns: Elements of Reusable Object Oriented Software</i>, by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides (Addison-Wesley, 1994), provides suggestions for creating coding patterns in your software. Gamma et al. distinguishes three families of patterns: </p>

<ul>
<li>Creational patterns, which deal with the creation of objects.  <li>Structural patterns, which describe the composition of objects.
  <li>Behavioral patterns, which focus on the communication and behavior of objects.
</ul>

<p>We will describe a pattern for each of these purposes: the Singleton, Strategy, and Bridge pattern, respectively. <a name="rf1"><a href="9708jf1.htm">Figure 1</A> presents the Singleton and Strategy patterns represented in terms of a class association diagram (CAD). The Singleton is represented as the class <i>CArrayDbase</i>. From this class, there could only be one instance throughout the program; hence, it is called a "Singleton." The Strategy pattern separates the algorithm from the class, so that the algorithm can vary independently from the class. In <a href="9708jf1.htm">Figure 1</A>, the class is represented by the <i>CDbase</i> class, while the algorithms are represented by <i>CDbCommand</i> and its derivations. The Bridge pattern can be used to achieve portability.</p>

<h3>Implementation</h3>

<p>To illustrate how you use these patterns, we'll approach the problem from a database perspective. The complete source code for our multithreaded library is available electronically (see "Availability," page 3). The database used is an Oracle database, and the database transactions are implemented using Oracle ProC as an embedded database command language. For setting up a multithreaded environment for the applications, we use the HP-UX DCE pthread library for HP(UX). For Windows NT, we use Digital's DCE pthread library (Version 1.1).</p>

<p>At the outset, two classes from our code library must be discussed. The classes <i>CThread</i> and <i>CMutex</i> are wrapped around the C-API of DCE and are used for obtaining an object-oriented skeleton for building multithreaded applications. The <i>CThread</i> class () consists of basic thread functions such as <i>Create</i> (creates a thread and start the thread-processing loop); <i>Cancel</i> (stops the created thread); <i>Detach</i> (frees the allocated thread space from memory); and <i>Process</i> (a virtual function, which is implemented in a derived class, where the actual thread execution takes place). See <a name="rl1"><a href="9708j.htm#l1">Listing One</A>.</p>

<p>The <i>CMutex</i> class (<a name="rl2"><a href="9708j.htm#l2">Listing Two</A>) is used for mutually exclusive use of objects in our program. Through this class, instances of objects and threads can be locked and unlocked. The class has three member functions: <i>Lock()</i>, <i>Trylock()</i>, and <i>Unlock()</i>. With <i>CMutex</i>, you can ensure that data or functions are used by only one thread at a time, if necessary.</p>

<p>The solution to our porting problem sounds simple: Construct a mechanism of special database threads for SQL execution that can be used by the normal application threads. If, within one thread, multiple database actions are executed concurrently, make sure the different actions don't disturb each other. Because different classes in the program will use the database for retrieving, adding, updating, and deleting data, you could use a global point of access for database connections. If a database command executes, it must ensure that it is the only one that uses that connection within its thread of execution. Each implemented database action makes use of a locking mechanism to ensure that there is only one connection to the database at a time in the thread; however, in another thread, another database action can be executed at the same time. In this way, the database can be concurrently accessed.</p>

<p>In our program, the actual database connection is maintained in a thread class <i>CDbase</i>,<b> </b>which requires writing an object for controlling the database connections. On the old HP(UX), a global pointer to a <i>CDbase</i> object was defined, so every class or module from the program could access this object via that global pointer for executing database commands. But can we avoid global variables and address this problem with a design pattern instead? </p>

<p>If you examine the patterns in the book by Gamma et al., you will see the Singleton is a logical choice. The intent of this pattern is to define a class that has only one instance and that provides a point for global access to that instance. The class itself is responsible for ensuring that a unique instance exists. The Singleton pattern is used within the <i>CArrayDbase</i> class (<a name="rl3"><a href="9708j.htm#l3">Listing Three</A>). </p>

<p>The constructor of this class checks whether there is already an instance by using the static pointer <i>g_pDbArray</i>. If not, it will set this pointer to its own address, then create the database connection objects. References to these objects are stored in the static array <i>m_pDbases</i>. The destructor of the class checks to see if the static pointer points to itself. If so, it will reset that pointer. The static functions in the class work on the attributes of the object, referred to by <i>g_pDbArray</i>. If that pointer does not point to a valid object, the static functions will throw exceptions. </p>

<p><i>CArrayDbase</i> has a link association with the mutex class (<i>CMutex</i>) for locking and unlocking the usage of the Singleton instance, to make sure that only one instance of this object is used at a time. The parameter <i>m_nNrDbases</i> holds the number of database connections. The <i>ReserveDbase</i> function returns a pointer to the first available database connection. If, later on, this pointer is passed as a parameter of <i>ReleaseDbase</i>, the connection is freed. The object is created only once; therefore, the Singleton pattern is a typical example of a creational pattern.</p>

<p>Another important object is <i>CDbase</i> (<a name="rl4"><a href="9708j.htm#l4">Listing Four</A>), which is derived from <i>CThread</i> and maintains the real connection to the database. Through this class, the actual database commands are executed. Within the constructor, the <i>Create</i> method of the <i>CThread</i> base class is called. The thread that is created will immediately jump into the <i>Process</i> method of the <i>CDbase</i> instance. In this method, the first thing to do is make the database connection, after which the thread is ready to execute the database commands. When the database connection is to be closed, the thread will jump out of the loop in which the database commands are executed and close the database connection. This also ends the process method and finishes the thread.</p>

<p>Again, the intent of the Strategy pattern is to define a family of algorithms where each class encapsulates its own algorithm implementation. There is an abstract base class that prescribes the template of the algorithm by its pure virtual functions. Deriving from this base class enables the implementation of a new algorithm. Introducing a new algorithm changes the behavior of the implementation; therefore, the Strategy pattern is called a "behavioral" pattern.</p>

<p>The Strategy implementation in the program consists of an abstract base class <i>CDbCommand</i> (see <a href="9708jf1.htm">Figure 1</A> and <a name="rl5"><a href="9708j.htm#l5">Listing Five</A>), which is the template for our database algorithms. The implementation of the various algorithms can be achieved by deriving from this abstract class. The base class has two virtual methods, <i>Do()</i> and <i>Execute()</i>. The <i>Do()</i> method is the interface of the clients (that is, applications that use the database classes). Within this <i>Do()</i> method, the <i>CDbase</i> object is instructed to execute this database command. The <i>Execute</i> method executes the actual database actions. This method is called by the process thread of the <i>CDbase</i> object, in which the actual database connection is made. The transfer of the database command from the client thread to the process thread is achieved by two mutexes, <i>startsql</i> and <i>endsql</i>.</p>

<p>Putting the connected classes together, you obtain the object model in <a href="9708jf1.htm">Figure 1</A>. In this object model, only the methods that you need for resolving the database problem are mentioned. For the complete interface of each class, study <a href="9708j.htm#l1">Listings One</A> through Five. <i>CDbase</i> is an aggregation of <i>CArrayDbase</i> because the database object is part of the array of database connections. The association is also qualified through the usage of <i>CurCon,</i> which is an integer containing the database connection number that is the position in the array of database connections. <i>CDbase</i> has a parent abstract base class <i>CThread</i>. The mutex class contains several associations to <i>CArrayDbase</i> and <i>CDbase</i> for the protection of attributes, class instances, or functionality. Between <i>CDbase</i> and <i>CDbCommand</i> you see an association called "executes." This means that a database command is executed in the database class. The abstract class <i>CDbCommand</i> has two abstract members, <i>Do()</i> and <i>Execute()</i>. These class members are implemented in their derived classes <i>CDbXXX</i> where the actual database algorithm is implemented.</p>

<p>While <a href="9708jf1.htm">Figure 1</A> only shows the commit command, other commands (like rollback, connect, disconnect, and so on) or queries (such as "find all persons younger than 30 years old who live in Holland") are defined here as <i>CDbCommand</i>-derived classes. The event flow of the execution of a database command is shown in the event-trace diagram (ETD); see <a name="rf2"><a href="9708jf2.htm">Figure 2</A>.</p>

<p>The call for starting this event trace could look like the following:</p>

<blockquote><p>
CDbCommit	lCommit(*this);	lCommit.Do();</p>
</blockquote>

<p>As <a href="9708jf2.htm">Figure 2</A> illustrates, the ETD starts from the source code where two create arrows are drawn. <i>Create</i> denotes that a constructor is called. At the top, the <i>CDbase</i> constructor is called and a thread is created for a connection to the database. The thread locks <i>startsql</i>, which means the thread is waiting until a database command has to be executed. When the client constructs a <i>CDbCommand,</i> it calls the <i>ReserveDbase</i> method, which looks for the first free database connection and locks the database object for usage (<i>Trylock</i>). Next, the client calls the command <i>Do()</i> method, which calls the database <i>Do()</i> method. Within this method, the following actions are performed:</p>

<p>1. First, the <i>docmd</i> mutex is locked, and the <i>CDbase</i> object makes sure that only one client uses the <i>Do()</i> method at a time.</p>

<p>2. The <i>startsql</i> mutex is then unlocked, informing the processing thread that a database command needs to be executed.</p>

<p>3. The <i>endsql</i> mutex is locked until execution of the database command is completed.</p>

<p>4. The processing thread, which is waiting until it can lock the <i>startsql</i> mutex (unlocked in step 2), instructs the database command object to execute the database actions.</p>

<p>5. When execution is finished, the processing thread unlocks the <i>endsql</i> mutex, causing the client thread to continue.</p>

<p>6. The client thread unlocks the <i>docmd</i> mutex, returning the results of the database action.</p>

<p>7. By releasing the database connection, other threads use this object for performing their database actions.</p>

<p>At this point, the command is executed safely in one thread. The locking mechanism prevents the second command from disturbing execution of the first. This is true whether the second (interrupting) command comes from the same or a different thread. Database commands can execute concurrently through multiple threads.</p>

<h3>Extensions </h3>

<p>The main intent of the Bridge pattern is to decouple the class structure from its implementation, thus achieving portability. This means that you could use several implementations based on an abstract class structure with an implementation class that is part of an abstraction class. <a name="rf3"><a href="9708jf3.htm">Figure 3</A> is the result of translating this to the database-command implementation.</p>

<p>The client creates the implementation instance, for example, <i>COdbcCommit</i>, and uses this instance for the creation of the <i>CDbCommit</i> object. The <i>CDbase</i> class does not know which implementation object is used because it communicates only with the <i>CDbCommit</i> instance. The entire database structure is now independent of the chosen database. The disadvantage is that the client is responsible for the creation of the implementation and bridge objects. This means that porting an application to another database still is difficult, because the creation of the implementation objects is spread all over the client's source code. By using the Abstract Factory (see Gamma et al.) pattern, the creation of the implementation objects can be centralized. This can even allow a for change to a different database at run time.</p>

<h3>Conclusion</h3>

<p>By mapping design problems to programming problems, you'll end up with software solutions that are easy to extend and reuse. And by documenting these solutions with techniques such as OMT notation, you can easily discuss them with other software developers and understand your own source code long after applications have shipped.</p>

<HR>
<H4><a name="l1">Listing One</H4>

<pre>class CThread;void ThreadFunc(CThread *);
<p></p>
class CThread 
{
public:
        CThread();
        virtual ~CThread();
<p></p>
        void    Create();
        void    Cancel();
        void    Detach();
        void    Join();
<p></p>
        friend  void    ThreadFunc(CThread *);
        virtual void    Process(void) = 0;
private:
        pthread_t       m_Thread;
};
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>class CMutex {
public:
        CMutex();
        ~CMutex();
        void    Lock();
        void    Unlock();
        int     TryLock();
private:
        pthread_mutex_t         m_Mutex;
};
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>#define MAX_NR_DBASES   15<p></p>
class CArrayDbase 
{
private:
    // Pointer to global database connection
    static CArrayDbase      *g_pDbArray;                    
    // Mutex to make sure only one reserve/release at a time
    static CMutex           g_mtxArray;                 
    // Array of database connections
    CDbase*             m_pDbases[MAX_NR_DBASES];   
    // Number of database connections
    int             m_nNrDbases;
public:
    CArrayDbase(int nNrConnections, const char *szUsr, 
                                   const char *szPasswd, const char *szDB);
    virtual ~CArrayDbase();
    // Get pointer to free database connection and reserve database connnection
    static  CDbase*     ReserveDbase();
    // Release database connection
    static  void        ReleaseDbase(CDbase &amp;dbase);
private:
    static void         Lock();
    static void         Unlock();
};
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>{private:
    friend class    CArrayDbase;
<p></p>
    // Locks usage of object
    CMutex      m_mtxInuse; 
    // Instruct dbase-thread to do command
    CMutex      m_mtxStartSql;  
    // Informs instruct-thread command is done
    CMutex      m_mtxEndSql;    
    // Make sure no parallel usage of do 
    CMutex      m_mtxDoCmd;     
    // boolean flag indicates if connected
    boolean         m_bConnected;   
    // Continue flag
    boolean         m_bContinue;    
    // Current command
    CDbCommand*     m_pCommand;     
    // Return code of command execution
    long            m_lSql;         
public:
    CDbase();
    virtual ~CDbase();
    // Command functions
    long            Do(CDbCommand &amp;command);
private:
    // Thread loop overwrite
    virtual void    Process();
    // Inuse Funtions
    boolean         TryLock();
    void            Lock();
    void            Unlock();
};
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<H4><a name="l5">Listing Five</H4>

<pre>class CDbCommand{
private:
    friend class CDbase;
    CDbase *    m_pDbase;
protected:
    long        m_lSql;
public:
    CDbCommand();
    CDbCommand(CDbase &amp;dbase);
    virtual ~CDbCommand();
<p></p>
    virtual void    Do() = 0;
<p></p>
    // Get and set functions
   CDbase *        Dbase();
    void            Dbase(CDbase &amp;dbase);
private:
    // Is called by database object to instruct command to go
    virtual long    Execute() = 0;
};
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>

<p><b>DDJ</b></p>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
