<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal August 1997: Algorithm Alley</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Topological Sorting</h1>

<p><i>Dr. Dobb's Journal</i> August 1997
</p>
<h3>By Jonathan Pincus and Jerry Schwarz</h3>

<I>Jonathan is the chief technical officer and one of the founders of Intrinsa Corp. Jerry is a member of the technical staff at Intrinsa and a veteran of the ANSI C++ Standards Committee. They can be reached at jon@intrinsa.com and jerry@intrinsa.com, respectively.</I>

<hr>

<p>An old adage claims that "Anyone can make a bridge that stands, but it takes an engineer to make one that just barely stands." This is as true of software as bridges. It takes considerable skill to design efficient software that only does as much work as necessary. For example, traditional sorting may be overkill if you really only have a few conditions you need to satisfy. This month, Jonathan and Jerry show how topological sorting does only enough work to satisfy a few constraints. They then extend the basic algorithm to provide good results even when those constraints are contradictory.</p>

<p> -- Tim Kientzle</p>
<HR>
<p>In developing our PREfix software component simulator, we realized that to get the best results, we should analyze functions in a particular order. For example, if <i>Foo()</i> calls <i>Bar()</i>, it's best to analyze <i>Bar()</i> before analyzing <i>Foo()</i>. Given an entire program, we needed to sort the various functions so that a called function was analyzed before the function that called it. Note that there are many different orders that might work; we just needed to find one.</p>

<p>This is an example of a "topological sort." Most sorting techniques require a "total order," where you have to be able to compare any two elements. A topological sort uses a "partial order" -- you may know that A precedes both B and C, but not know (or care) whether B precedes C or C precedes B. Topological sorting is a useful technique in many different domains, including software tools, dependency analysis, constraint analysis, and CAD.</p>

<p>Topological sorting works well in certain situations. If there are very few relations (the partial order is "sparse"), then a topological sort is likely to be faster than a standard sort. Given <i>n</i> objects and <i>m</i> relations, a topological sort's complexity is <i>O(n+m)</i> rather than the <i>O(n log n)</i> of a standard sort. In our case, most functions typically call a handful of other functions, meaning the total number of relations (caller/callee pairs) is relatively small, so topological sorting makes sense.</p>

<p>Topological sorts can also deal gracefully with cycles. For example, imagine that two functions X and Y are mutually recursive: X calls Y and Y calls X. In this case, it is useful to detect the cycle and the specific relations that cause the cycle. Standard sorting algorithms, however, will simply fail in this situation. We developed an extension to topological sorting that can produce a "best" order, even in the presence of cycles.</p>

<p>In this article, we present a basic topological sorting algorithm and implementation, then extend the algorithm and implementation to deal with cycles. The implementations presented here make heavy use of, the C++ Standard Template Library (STL). Much of the work involves manipulating vectors and queues, and STL's primitives make it easier. Furthermore, packaging the various functions as STL algorithms allows them to be reused on different types of data.</p>

<h3>The Basic Algorithm</h3>

<p>For simplicity, we'll describe the algorithm in terms of a generic "precedes" relation: If X precedes Y, we say that X is the predecessor and Y is the successor. Our terminology and discussion follows Donald Knuth's presentation in <i>The Art of Computer Programming, Volume 1</i> (Addison-Wesley, 1997).</p>

<p>For example, <a name="rf1"><a href="9708nf1.htm">Figure 1</A> illustrates the following set of relations on the input set { A, B, C, D }: A precedes B, C precedes D, and B precedes D. For these relations, there are several valid orderings:</p>

<p>{ A, B, C, D }</p>

<p>{ A, C, B, D }</p>

<p>{ C, A, B, D }</p>

<p>However, { C, D, A, B } would not be valid, because it violates the relation that B precedes D.</p>

<p>One way of ensuring a correct order is to simply copy the data, making sure that whenever we copy one item, we know that all of its predecessors have already been copied. As a shorthand for this notion of "already been copied," we'll define a predecessor X as an "active" predecessor of Y if X precedes Y and X has not (yet) been copied. Then this basic algorithm can be summed up quite succinctly:</p>

<blockquote><p>
While there is a member that has no active predecessors, repeat:</p>
<p>1.	Pick a member X with no active predecessors.</p>

<p>2.	Copy X to the output.</p>

</blockquote>

<p></p>

<p>Clearly, the output will indeed be ordered. What is not so obvious is that -- assuming there are no cycles in the input -- the <i>while</i> loop will not terminate until every item has been output.</p>

<p>The key to an efficient implementation of this algorithm is to be able to pick members with no active predecessors without having to rescan the entire list at each iteration. One way of accomplishing this is to associate a count of predecessors and a list of successors to each input item, and use an auxiliary queue Q as interim storage of nodes that have no active predecessors but have not yet been output. In fact, Knuth uses the topological sorting algorithm as an example of using a linked list as a queue.</p>

<p>Assume we have an array, <i>count,</i> which stores the predecessor count for each member. Using the basic queue operations <i>add</i> (at the end of the queue) and <i>pop</i> (from the front of the queue), we can refine the algorithm as in <a name="rf2"><a href="9708nf2.htm">Figure 2</A>.</p>

<p>The <i>while</i> loop terminates when there are no items left on the queue, either because everything in the input list has been processed, or because there is a cycle.</p>

<h3>Complexity</h3>

<p>The overall time complexity of this basic algorithm is <i>O(n+m)</i>. The <i>O(n)</i> comes from the number of times that the <i>while</i> loop (and initial <i>for</i> loop) is executed, and the <i>O(m)</i> from the nested <i>for</i> loop. </p>

<p>Although there is no way to calculate how many times the inner loop will be executed on any one iteration of the outer loop, it will only be executed once for each successor of each member, which means that the total number of times that it will be executed is the total number of successors of all the members -- or the total number of relations.</p>

<p>Space complexity is also <i>O(n+m)</i>. The <i>O(n)</i> component comes from the predecessor count information stored for each member, and the maximum length of the auxiliary queue. The <i>O(m)</i> comes from storing the successors for each member; once again, the total number of successors is the number of relations, so <i>O(m)</i>. </p>

<h3>Cycles</h3>

<p>The basic algorithm's usefulness may be limited because of its inability to give detailed information about cycles. In practice, there are often one or more cycles in real-world problems. In program analysis, mutually recursive functions cause cycles.</p>

<p>For example, <a name="rf3"><a href="9708nf3.htm">Figure 3</A> illustrates the set of relations on the set { A, B, C, D, E, F, G }: A precedes B, B precedes C, C precedes D, C precedes B, D precedes B, D precedes E, D precedes F, F precedes G, and G precedes F. Note that there is a cycle involving B, C, and D; and another cycle involving F and G. There is also a cycle involving just B and C, but we can ignore that because of the B, C, D cycle; we are only interested in the maximal cycles.</p>

<p>In <i>The Design and Analysis of Computer Algorithms</i> (Addison Wesley, 1974), Aho, Hopcroft, and Ullman present a complete -- and efficient -- algorithm for identifying strongly connected components in a graph, which we can use for finding cycles.</p>

<p>The basic approach is to iterate through all the members of the set and perform a depth-first search of the relations from each. As we visit each member for the first time, we number it (Aho et al. refer to this as the "depth-first number") and push it onto a stack. </p>

<p>For each member, we also keep a record of the lowest-numbered potential root of a cycle involving that member. Initially, this is simply the member itself; when we are done with the depth-first search from a member, if any of its successors has a lower-numbered potential root, we update the member's potential root.</p>

<p>A member is potentially the base of a cycle if its lowest-numbered potential root is itself. Because the search is depth-first, any cycle will end up at the end of the stack, so we can find the cycle by popping the stack repeatedly until we get to the base node. (Unlike the Aho et al. algorithm, we ignore members that do not have any members following them on the stack; these members are not in any cycle.) Since each member is popped off the stack only once, it is in at most one cycle. The file topsort.h (available electronically; see "Availability," page 3) implements this algorithm. </p>

<h3>Dealing with Cycles</h3>

<p>In a dependency-analysis tool, it might be enough just to identify the cycles so that you know which dependencies overconstrain the problem. In other cases, however, what you want is a "best" ordering -- an ordering that preserves as much of the information as possible. In our case, we want to warn the user of the approximation caused by mutually recursive functions, but still proceed with bottom-up analysis.</p>

<p>In <a href="9708nf3.htm">Figure 3</A>, there is no definitive ordering between B, C, and D, or between F and G. However, the first cycle precedes the second cycle because D precedes F (but there is no member of the second cycle preceding any member of the first cycle). Similarly, A precedes the first cycle, and the first cycle precedes E.</p>

<p>Possible "best" orderings for <a href="9708nf3.htm">Figure 3</A> include { A, B, C, D, E, F, G } and { A, D, C, B, F, G, E }, but not { A, E, B, C, D, F, G }.</p>

<p>You can extend the topological sorting algorithm to deal with cycles by first finding the cycles of the set, then creating a set where all members of a cycle are replaced by a single placeholder. Next, topologically sort this smaller set. Finally, replace each placeholder with all the members of the corresponding cycle. <a name="rf4"><a href="9708nf4.htm">Figure 4</A> shows this extended topological sorting algorithm.</p>

<p>The key point is that the topological sort in step 5 will not encounter any cycles, since we have replaced them all in step 2.</p>

<h3>Complexity</h3>

<p>The Aho, Hopcroft, and Ullman cycle-finding algorithm is <i>O(n+m)</i>. Since the worst-case number of cycles is <i>O(n)</i>, and the number of relations between cycles is <i>m</i> (or fewer, if relations between the same cycle can be weeded out efficiently), the extended algorithm is also <i>O(n+m)</i>.</p>

<p>Oddly, the worst case for the extended algorithm is the situation where there are no cycles, and it performs a topological sort on all <i>n</i> members. If this is the typical case for some data, it may be more efficient to first perform a topological sort with the basic algorithm, and only fall back on the advanced algorithm if cycles actually appear.</p>

<p>In some real-world problems, cycles of length 2 may be much more common than longer cycles. Mutual recursion is a good example of this; pairs of mutually recursive functions are not infrequent, but larger combinations are rarer (although they certainly occur in practice). In this case, you might optimize the basic topological sorting algorithm by making an <i>O(m)</i> initial pass through the members. Simply look for mutually recursive pairs; when both members in a mutually recursive pair's predecessor counts are reduced to 1, that pair is eligible to be put on the output queue. While this computation remains <i>O(m)</i>, the constant factor may be high enough that it is not worth doing.</p>

<h3>Implementation</h3>

<p>We've tested the implementation on Windows 95/NT with Microsoft Visual C++ 4.2, and on Solaris with the Sparcworks compiler and ObjectSpace's STL library.</p>

<p>The file topsort.h (available electronically; see "Availability," page 3) is the complete implementation of the <i>topsort</i>, <i>cycles</i>, and <i>topsortWithCycles</i> algorithms presented here. The file driver.cpp (also available electronically) illustrates different ways of calling the functions. <a name="re1"><a href="9708ne1.htm">Example 1</A> is driver.cpp's output for the example illustrated in <a href="9708nf3.htm">Figure 3</A>.</p>

<p>Packaging these algorithms completely in a header file is not ideal, since they define auxiliary types, which include some noninline functions; however, it makes the clearest explanation.</p>

<p>The <i>topsort</i> algorithm produces a linear order for its input obeying the partial order specified by the relations. It returns true if there is a cycle, and false otherwise (but does not give any information about the cycle). The <i>cycles</i> algorithm produces a list of cycles in the input. The <i>topsortWithCycles</i> algorithm extends topsort to return an order whether or not cycles are present.</p>

<p>The functions are templatized to allow them to operate on arbitrary types. <a name="re2"><a href="9708ne2.htm">Example 2</A> shows the declaration of <i>topsort</i>.</p>

<p>For efficiency, the underlying <i>GraphInfo</i> class operates on integer indices, rather than the iterators that are used in the external interface. The functions <i>topsort</i>, <i>cycles</i>, and <i>topsortWithCycles</i> first convert the relations to relations between integer indices, and use <i>GraphInfo</i> to operate on the integers, then use the result to order their output.</p>

<p>While this may appear unnecessary, it is actually important to ensure the time complexity of algorithm. The aforementioned complexity analysis assumed that the time to index into the count array and get the list of successors of a member is <i>O(1)</i>, and that the time to assign a result is also <i>O(1)</i>. If strings were being used as indices, for example, array lookups would be <i>O(log n)</i> complexity, rather than <i>O(1)</i>, and so the overall complexity would be <i>O((n+m) </i>&#183; <i>log n)</i>. For integers, both assignments and lookups are indeed <i>O(1)</i>.</p>

<p>One additional implementation note: <i>topsort</i> checks for relations between an integer and itself, and simply ignores them. Strictly speaking, such a relation is a cycle of length 1, but such a cycle does not affect the linear ordering. It is easy and efficient to deal with this as a special case.</p>

<p><i>topsortWithCycles</i> illustrates the combination of cycle-finding and topological sorting to produce an approximate topological sort in the presence of cycles. For simplicity, this implementation always searches for cycles; if cycles are relatively rare, it may be more efficient to first perform a topological sort, and then find and expand cycles from the remaining relations only if there is at least one cycle.</p>

<p><b>DDJ</b></p>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
