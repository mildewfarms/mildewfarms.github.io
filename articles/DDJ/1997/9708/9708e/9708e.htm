<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal August 1997: The Java Native Method Interface and Windows</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>The Java Native Method Interface and Windows</h1>

<p><i>Dr. Dobb's Journal</i> August 1997
</p>
<h2>Converting data types between Java and C++</h2>

<h3>By Andrew Wilson</h3>

<I>Andy, a developer for NuMega Technologies, can be contacted at andyw@numega.com.</I>

<hr>

<p>Java's Virtual Machine (VM) acts as a layer of abstraction between Java bytecode and machine-dependent instructions, enabling operating-system autonomy and platform-independent executables. There are circumstances, however, where the VM may not have support for special implementations, such as those in the java.net and java.sql packages. Luckily, you can use native system function libraries to implement system-dependent functionality outside of the VM.</p>

<p>Prior to the JDK 1.1, native functions were used only to implement classes that required system-dependent functions. One such class was <i>SocketImpl,</i> which had to be custom written for each operating system because of the differences between Windows and UNIX Socket implementations. However, native system functions were little more than a series of stub functions that called the actual system libraries. This was necessary because of calling convention differences between Java and Windows DLLs or UNIX libraries.</p>

<p>The JDK 1.1 implements a native calling convention -- the Java Native Method Interface (JNI) -- that makes it possible for the stub library to do more than just convert types between Java and C++. With JDK 1.1, you can create new instances of Java classes, call Java methods, and interact with the VM from within the native system library. This lets you create complex libraries for developing robust interfaces between Java and special system libraries.</p>

<p>Native functions interact directly with the operating system, bypassing the VM. For example, to create a Windows message box, you create a short Java class that loads a JNI library, which in turn calls <i>MessageBox</i>. Whenever you work with the JNI, you will have to use an intermediate library to make the actual system call.</p>

<h3>Data Types</h3>

<p><a name="rt1"><a href="9708et1.htm">Table 1</A> lists Java, JNI, and C types. Each time you pass an integer in Java to a JNI function, it is converted into a <i>jint,</i> which is a C <i>long</i> (also known as a 32-bit <i>int</i>). <a name="rt2"><a href="9708et2.htm">Table 2</A> lists types that are used to expose Java classes and methods within your library. They will give you the ability to create new instances of classes and interact with both data members and methods. </p>

<p>Another important JNI item is the <i>JNIEnv</i> structure, a C++ structure used by the native library to interact with the Java environment. For example, say you need to create an instance of the Java class <i>Vector</i>. <i>JNIEnv</i> provides the functionality that allows you to create a new instance of the class and expose all of <i>Vector</i>'s methods. You can then call <i>Vector</i>'s methods from within your library.</p>

<h3>Creating Java Objects in C?</h3>

<p>Granted, it seems strange to have the functionality to create new Java objects from within C/C++ code. Although cumbersome, this functionality is extremely useful. The process of creating a new class instance begins by calling <i>JNIEnv</i>'s <i>FindClass</i> member, which takes the name of a class as a parameter, searches the CLASSPATH, loads the class, and returns a pointer (<i>jclass</i>) to the instance. The class is not a Java object yet; it is simply loaded into memory.</p>

<p>Next, the desired constructor must be found. This is done by calling <i>JNIEnv</i>'s <i>GetMethodID</i> with the pointer to the class, the constructor "token" ("&lt;init&gt;"), and the signature for that constructor. <i>GetMethodID </i>returns a pointer (<i>jmethodID</i>) to the instance of the function. To use any member method of a Java class, you must first have a pointer to the method. This sounds odd, but it really isn't. Windows developers should remember that they had to do the same thing with DLLs using <i>GetProcAddress</i> to expose DLL functions before import libraries became common.</p>

<p>Finally, you need to create an instance of the class. This is done by calling <i>JNIEnv</i>'s <i>NewObject</i>, which takes the class pointer (<i>jclass</i>), the method pointer (<i>jmethodID</i>), and any additional arguments the constructor may need. If successful, you should get a new pointer to the object (<i>jobject</i>). You can now expose its member functions and begin to use the class. The object's memory is not allocated within your code. Instead, <i>NewObject</i> works its way back into the VM, where the actual memory allocation occurs.</p>

<p>Why would you want to do any of this? Say, for example, you wanted to use a system structure in Java. You would start by creating a Java class for it. Then, inside your library, you load the class, find its constructor, expose its data and method members, populate the object, and return it to the VM. The data from the object can now be used in the Java application. </p>

<h3>Signatures</h3>

<p>A function's signature is a representation of its return value and argument list. In Java code, you simply call a Java function that is overridden and let the compiler sort out what method you wanted to call. But when you are calling a Java method from within a system library, you are making the call dynamically from the VM. The VM uses the signature to determine the exact function you want to invoke.</p>

<p>A function signature is fairly straightforward. You start with the argument list, which is enclosed in parentheses. You then work backwards, starting with the last parameter, working your way to the return value. <a name="rt3"><a href="9708et3.htm">Table 3</A> shows the various signature types. For example, <i>int bar(long a, boolean b, Vector c, byte d)</i>, would have a signature of "(BLjava.util.Vector;ZJ)I". As bizarre as this appears, it is one of the few ways to get around the problem of function overriding, and it lets you call any Java method.</p>

<h3>Exposing and Using Java Data and Method Members</h3>

<p>The <i>GetFieldID</i> and <i>GetMethodID </i>functions give access to Java class data and method members. They work similarly, and use the same argument list, beginning with an instance of the class (<i>jclass</i>), a string pointer of the data or method member's name, and the signature. <i>GetFieldID</i> returns a <i>jfieldID (void *)</i>, while <i>GetMethodID</i> returns a <i>jmethodID (void *)</i>.</p>

<p>Once you have the pointers to the various fields, you can use the <i>GetField</i> and <i>SetField</i> family of functions to manipulate the data. For example, if you called <i>GetLongField()</i> with the <i>jfieldID</i> for some long data member within a Java object, you would get back its current value. In contrast, if you call <i>SetLongField</i>, with the object instance, the correct <i>jfieldID,</i> and a <i>long</i> value, you will set the field for that Java object.</p>

<p>Calling a function is not much different, though you have a bit more versatility. There are two families of function-calling methods, <i>CallMethod</i> and <i>CallNonvirtualMethod</i>. <i>CallMethod</i> is broken down into three functions: <i>CallMethod</i>, <i>CallMethodA</i>, and <i>CallMethodV</i>. <i>CallMethod</i> takes an instance of the Java object, a <i>jmethodID</i>, and any parameters you wish to pass. <i>CallMethodA</i> uses an array of arguments to pass to the Java method, while <i>CallMethodV</i> takes a <i>va_list</i> of arguments. Each member of the <i>CallMethod</i> family is further broken down based on return type. For example <i>CallObjectMethod(...)</i> should call a Java method that returns a <i>jobject</i>. <i>CallNonvirtualMethod</i> differs from <i>CallMethod</i> in that you specify the <i>jclass</i> and <i>jobject</i> of the method you want to invoke.</p>

<p>This covers nonstatic data and method members, but what about static types and methods? The static <i>GetFieldID</i> is <i>GetStaticFieldID</i>. The remaining functions that allow the manipulation of methods and data members are the same except that you add the word "static" to the <i>JNIEnv</i> function.</p>

<h3>Character Pointers</h3>

<p>Character pointers are used in many Windows API functions and constitute a key piece of functionality. To make life easier, you can call directly a series of functions through the <i>JNIEnv</i> structure that allow you to create Java <i>String</i> class objects that have the key <i>String</i> class functionality already exposed. You can use these functions to manipulate both Unicode and byte-character strings, and pass them to both Windows API calls and Java methods.</p>

<h3>Building a JNI Library</h3>

<p>The first step in creating a JNI library is to create a Java class that declares a function native to the operating system. The implementation of this function is written in some other language (preferably C/C++) and is stored within a DLL that follows the JNI calling convention. The class will dynamically load the native function's library when an instance of the class is created.</p>

<p>Once the Java class has been written and compiled, you then run a tool called "JavaH" against the class to create a JNI header file. This header contains the C/C++ declaration for the Java native function. For example, <i>javah -jni foo</i> will yield a new JNI header file called foo.h -- a Windows C DLL header that declares the native function. You will need to use this header to determine what the native function library's functions are declared as. Oddly enough, they differ from the original function declaration in the Java class.</p>

<p>The last step is to take the JNI header and implement the various functions using a mix of JNI functions and Windows API calls. You then compile it and have a new native function library capable of providing any extra support you may require.</p>

<h3>LittleWalk</h3>

<p>The ToolHelp library provides functionality for viewing processes, modules, and heap information. LittleWalk, the program I present here, simply displays a list of all the running processes on a Windows 95 system -- functionality that Java does not provide from within the VM. (The complete LittleWalk system is available electronically; see "Availability," page 3.)</p>

<p><a name="rl1"><a href="9708e.htm#l1">Listing One</A> s the original Java class for my ToolHelp Java implementation. There are three important steps to note. The first, which loads my TLH.DLL (<i>static { System.loadLibrary(</i><SPECIAL>&lt;=</SPECIAL><i>lh</i><SPECIAL>&lt;=</SPECIAL><i>); }</i>), causes the DLL to get loaded into the VM's process space when a new instance of ToolHelp is created. At the bottom of the class you see a native declaration for <i>CreateToolhelp32Snapshot</i>; this is the function we will have to implement in TLH.DLL.</p>

<p>The second step is to create the header file using JavaH. <a name="rl2"><a href="9708e.htm#l2">Listing Two</A> is the header and a few calling convention items. First you have JNIEXPORT, which translates to <i>__declspec(dllexport)</i>, and JNICALL is <i>__stdcall</i>. Although this is nothing out of the ordinary for a DLL, there is a strange function called <i>Java_ToolHelp_CreateToolhelp32Snapshot</i>. The <i>Java_ToolHelp_</i> portion is simply the fully qualified path to the native method.</p>

<p>The last step is the implementation of the native function (<a name="rl3"><a href="9708e.htm#l3">Listing Three</A>), which is where you generate a list of the processes that will be displayed in the main Java application. There isn't very much to see in this function. However, there are two other functions, <i>CreateProcessEntry32</i> and <i>AddObject,</i> that are far more interesting.</p>

<p><a name="rl4"><a href="9708e.htm#l4">Listing Four</A> shows <i>CreateProcessEntry</i>. Note the first three actual statements (ignoring the <i>If</i> clauses). Earlier I mentioned how to create a new instance of a class by loading the class, finding the constructor, and creating an instance of the class using the constructor. That is exactly what these statements do. The remainder of the statements populate the various member functions.</p>

<p>Creating a Java class to represent a system structure lets you package the data in the Java class in nearly the same way that you would expect to see the structure in our native operating system. <a name="rl5"><a href="9708e.htm#l5">Listing Five</A> presents a Java <i>ProcessEntry32</i> class that is nearly identical to the Windows ToolHelp API PROCESSENTRY32 type, missing only the <i>dwSize</i> member. This makes it easy to pass data from the native library to our Java class, since its data members have already been exposed.</p>

<p><a name="rl6"><a href="9708e.htm#l6">Listing Six</A> presents the <i>AddObject</i> function. This function takes a Java <i>ProcessEntry32</i> object and adds it to an existing Java <i>Vector</i> class. Note the process of first getting a pointer to the <i>Vector</i>'s <i>AddElement</i> member and calling it using <i>CallVoidMethod</i>.</p>

<p><a href="9708e.htm#l4">Listing Four</A> included several references to a <i>SetDWORDField</i> function in <a href="9708e.htm#l7">Listing Seven</A>. <i>SetDWORDField</i> sets a Java class integer member. The process for setting a field is fairly simple: First you get a pointer to the field (<i>GetFieldID</i>), then assign it a value (<i>SetIntField</i>).</p>

<h3>Conclusion</h3>

<p>The JNI provides the connection between Java's ability to design and implement large scale applications and C/C++'s ability to create fast, system-dependent code. This makes it possible to write large scale applications in Java, while keeping the <sub></sub>system-dependent function implementations native to the operating system.</p>

<HR>
<H4><a name="l1">Listing One</H4>

<pre>import ProcessEntry32;import java.util.*;
<p></p>
class ToolHelp extends Object
{
    static { System.loadLibrary("tlh"); } 
    // Load the native system library
<p></p>
    final private int TH32CS_SNAPPROCESS = 2;
<p></p>
    private Vector ProcEntries;
    public ToolHelp()
    {
        ProcEntries = new Vector();
        CreateToolhelp32Snapshot( 
        TH32CS_SNAPPROCESS, 0, ProcEntries);
    }
    public Vector getProcList()
    {
        return ProcEntries;
    }
    // native function declaration
    private native boolean CreateToolhelp32Snapshot( 
        int dwFlags, int th32ProcessID, Vector vector);
}
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>/* DO NOT EDIT THIS FILE - it is machine generated */#include &lt;jni.h&gt;
/* Header for class ToolHelp */
<p></p>
#ifndef _Included_ToolHelp
#define _Included_ToolHelp
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     ToolHelp
 * Method:    CreateToolhelp32Snapshot
 * Signature: (IILjava/util/Vector;)Z
 */
JNIEXPORT jboolean JNICALL Java_ToolHelp_CreateToolhelp32Snapshot
  (JNIEnv *, jobject, jint, jint, jobject);
<p></p>
#ifdef __cplusplus
}
#endif
#endif
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>JNIEXPORT jboolean JNICALL Java_ToolHelp_CreateToolhelp32Snapshot  (JNIEnv *env, jobject, jint, jint process, jobject vector)
{
    HANDLE handle =  CreateToolhelp32Snapshot(
        TH32CS_SNAPPROCESS, process);
    BOOL first = TRUE;
    jobject ProcEntry32;
    PROCESSENTRY32 ppe;
    do {
        ppe.dwSize = sizeof( PROCESSENTRY32 );
        if(first)
        {
            first = FALSE;
            if ( !Process32First( handle, &amp;ppe))
                return FALSE;
        }
        else
        {
            if ( !Process32Next( handle, &amp;ppe))
                return FALSE;
        }
        ProcEntry32 = CreateProcessEntry32(env, &amp;ppe);
    }
    while(AddObject(env, vector,ProcEntry32 ) );    
    return TRUE;
}
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>jobject CreateProcessEntry32( JNIEnv * env, LPPROCESSENTRY32 lppe){
    jclass jcProcEntry32 =  env-&gt;FindClass("ProcessEntry32");
    if(jcProcEntry32 == NULL)
        return NULL;
    jmethodID jmProcEntry32 = env-&gt;GetMethodID(jcProcEntry32,
        "&lt;init&gt;", "()V");
    if(jmProcEntry32 == NULL)
        return NULL;
      jobject joProcEntry32 = env-&gt;NewObject(jcProcEntry32,jmProcEntry32,"");
    if(joProcEntry32 == NULL)
        return NULL;
    if (!SetDWORDField(env, lppe-&gt;cntUsage, joProcEntry32, "cntUsage"))
        return NULL;
    if (!SetDWORDField(env, lppe-&gt;th32ProcessID, 
                              joProcEntry32, "th32ProcessID"))
        return NULL;
    if (!SetDWORDField(env, lppe-&gt;th32DefaultHeapID, joProcEntry32, 
                                                        "th32DefaultHeapID"))
        return NULL;
    if (!SetDWORDField(env, lppe-&gt;cntThreads, joProcEntry32, "cntThreads"))
        return NULL;
    if (!SetDWORDField(env, lppe-&gt;th32ModuleID, joProcEntry32, 
                                                      "th32ModuleID"))
        return NULL;
    if (!SetDWORDField(env, lppe-&gt;th32ParentProcessID, joProcEntry32, 
                                                      "th32ParentProcessID"))
        return NULL;
    if (!SetDWORDField(env, lppe-&gt;pcPriClassBase, joProcEntry32, 
                                                           "pcPriClassBase"))
        return NULL;
    if (!SetDWORDField(env, lppe-&gt;dwFlags, joProcEntry32, "dwFlags"))
        return NULL;
    if (!SetStringField(env, lppe-&gt;szExeFile, joProcEntry32, "szExeFile"))
        return NULL;
    return joProcEntry32;
}
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<H4><a name="l5">Listing Five</H4>

<pre>class ProcessEntry32 extends Object{
    public int cntUsage;
    public int th32ProcessID;
    public int th32DefaultHeapID;
    public int th32ModuleID;
    public int cntThreads;
    public int th32ParentProcessID;
    public int pcPriClassBase;
    public int dwFlags;
    public String szExeFile;
}
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>
<H4><a name="l6">Listing Six</H4>

<pre>BOOL AddObject (JNIEnv *env, jobject vector, jobject ProcEntry32){
    if(ProcEntry32 == NULL)
        return FALSE;
    jmethodID jmAddElement = env-&gt;GetMethodID(
        env-&gt;GetObjectClass(vector),
        "addElement", 
        "(Ljava/lang/Object;)V");
    if(jmAddElement == NULL)
        return FALSE;
    env-&gt;CallVoidMethod(vector, jmAddElement, ProcEntry32);
    return TRUE;
}
</pre>
<P>
<a href="#rl6">Back to Article</A>
</P>
<H4><a name="l7">Listing Seven</H4>

<pre>BOOL SetDWORDField(JNIEnv * env,DWORD field,               jobject procEntry32,char *szField)
{
    jfieldID jfield =  env-&gt;GetFieldID( 
        env-&gt;GetObjectClass(procEntry32),
        szField, 
        "I");
    if ( !IsValidField(jfield, szField) )
        return FALSE;
    env-&gt;SetIntField(procEntry32, jfield, field);
    return TRUE;
}
</pre>
<P>
<a href="#rl7">Back to Article</A>
</P>

<p><b>DDJ</b></p>


<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
