<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal September 1997: Tagged Data Storage </title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Tagged Data Storage </h1>

<p><i>Dr. Dobb's Journal</i> September 1997
</p>
<h2>Less coding, more flexibility</h2>

<h3>By Jeremy Vineyard</h3>

<I>Jeremy, a senior software engineer for Viperware, can be contacted at jeremyv@viperware.com.</I>

<hr>

<p>One of the most common problems software developers face is object storage. And one of the most common solutions to this problem is encoding the object into a specialized data-storage record that holds the information necessary to recreate the stored object at a later time. The disadvantage of this approach is that, for every object you want to store, you need a new class/struct definition for the data. In addition to the data-storage record, you need storage and restoration methods for every object. If the storage format changes, you must code conversion routines that read old stored objects and translate them into the new format -- a lengthy and complicated process.</p>

<p>You can greatly improve the efficiency and robustness of your data-storage architecture using a technique called "tagged data storage." Tagged data greatly decreases the time spent writing code to store and restore data. The tagged data storage architecture transforms one of the most painstaking tasks of software engineering into something that is natural, flexible, and extremely powerful. For instance, I use this architecture in a user-interface prototyping tool called "Grayscale Kitchen" that lets you visually build views, saving them as tagged objects for restoration at another time. To edit the view object properties, I've written a tag editor that can edit any tagged object. (One of the key advantages of tagged data is that all objects can be treated the same way.) In short, Grayscale Kitchen lets you design user interfaces without writing code. An implementation of a tagged data storage architecture is available electronically; see "Availability," page 3. The source code, which was developed using Metrowerks CodeWarrior for Macintosh, includes code for attaching and retrieving tags to/from taggable objects. The source also includes code for packing tags into and unpacking tags from a chunk of data.</p>

<h3>Object Properties</h3>

<p>To illustrate tagged data storage, I'll begin by breaking an object that is to be stored down into its basic properties. <a name="rf1"><a href="9709ef1.htm">Figure 1</A>, for example, shows the properties of a typical window object. Once you have code to store and restore these properties, you can easily recreate a window object by inspecting the stored values.</p>

<p>It is a good idea to have classes that handle common interfaces to methods and member variables. This can save time when designing classes with similar properties. For example, for every object that has a size defined by a rectangle, you create a class called <i>CSizable</i> from which every object that has a size is descended; see <a name="rl1"><a href="9709e.htm#l1">Listing One</A> By inheriting <i>CSizable</i>'s methods and member variables, all sizable objects use exactly the same interface to the class methods dealing with the object's size. This technique will help you when implementing tagged data storage. In addition to the interface methods, each property class has storage and restoration methods so you don't have to write store/restore code for basic properties more than once.</p>

<h3>Tags</h3>

<p>Simply breaking an object down into its properties doesn't help you define a data storage/restoration format. For this, you must extend the concept to include tags. A tag is a property of an object that can be removed from or attached to an object, hence the name "tag."</p>

<p>A tagged object consists of a collection of tags attached to an object; the tags represent its basic properties; see <a name="rf2"><a href="9709ef2.htm">Figure 2</A>.</p>

<p>There are several features of the tagged data-storage architecture that make it powerful and flexible: </p>

<p><b>Flexible storage format.</b> Tags can be attached to an object in any order. Therefore, when the data storage format changes and the order of the tags is changed, it doesn't affect the ability to restore the object.</p>

<p><b>Defined default values.</b> Every storable object defines default values for each of its basic properties. If one of the basic property tags for the object is removed, no crashes or data loss will occur. The storable object simply looks for the tag and, if no tag is there, uses the default value. Notice that there is no attached "Has Resize Box" tag in <a href="9709ef2.htm">Figure 2</A>. The window was reconstructed correctly because the default value for "Has Resize Box" is False.</p>

<p><b>Common data format.</b> Every object that is stored with the tagged data-storage architecture has exactly the same data format. This represents a decrease in the amount of code to be written because all objects use the same data storage and restoration code.</p>

<h3>Extending Data Type With Tags</h3>

<p>Even if the object-restoration system knows only about certain tags, you can extend the object's definition by attaching a new tag without disrupting the data format. </p>

<p>Assume, for example, that you have two programs that edit .GIF files: One editor stores only the .GIF data, and the other also stores special hot-click and transparency information that is not part of the .GIF data format. When you create a .GIF file in the simple editor, you store only one tag -- the .GIF data. If you reopen the file in the advanced editor, it attaches the hot-click and transparency tags before the .GIF tag. Open the object in the simple editor again, and it has the added tags. Extra data or a change in the order of the data causes absolutely no problems.</p>

<h3>Implementing Tagged Objects</h3>

<p>To implement a tagged object, you must have a class that attaches and retrieves tags to/from the object in memory. For every object that can have tags attached to it, you create the class <i>FT_TaggableObject</i>; see <a name="rl2"><a href="9709e.htm#l2">Listing Two</A>. For the tags that are attached to the object, you create the class <i>FT_Tag</i> (<a name="rl3"><a href="9709e.htm#l3">Listing Three</A>). You must also have a collection class that you use to store the tags that are attached to the object. To illustrate, a simple linked-list class will suffice (I don't supply this; however, you should be able to find linked-list code easily).</p>

<p>As you can see, the most important methods of <i>FT_TaggableObject</i> are for attaching, retrieving, and removing tags. <i>FT_Tag</i> holds the necessary information for each tag, and includes accessor/mutator methods to get/set the tag field values. If you are unhappy with the linked-list implementation used by <i>FT_TaggableObject</i>, override/rewrite the appropriate methods. </p>

<h3>Storing Tagged Objects</h3>

<p>Storing a tagged object requires several new classes. You need a class that packs the tags attached to an object into a data format and unpacks tags from packed tag data; see <i>TK_PackerObject</i> in <a name="rl4"><a href="9709e.htm#l4">Listing Four</A>.</p>

<p>The class <i>TK_StorableObject</i> (<a name="rl5"><a href="9709e.htm#l5">Listing Five</A>) descends from <i>FT_TaggableObject</i>, and represents every object that can have tags attached to it and can be stored/restored. The class <i>LB_DataChunk</i> (<a name="rl6"><a href="9709e.htm#l6">Listing Six</A>) represents the chunk of data in memory that will be the packed representation of the stored object. The purpose of <i>LB_DataChunk</i> is to abstract OS-dependent memory routines to a single class, allowing you to make the other classes as portable as possible.</p>

<p>I have chosen a storage format that is suitably generic, but if you are unhappy with it, you can override and rewrite TK_ PackerObject to pack the tags differently. The tagged data format consists of:</p>

<ul>
<li>Tag header (see <a name="rl7"><a href="9709e.htm#l7">Listing Seven</A>), which has four <i>long</i> word fields: <i>tagType</i>, <i>tagName</i>, <i>unused</i>, and <i>tagDataSize</i>. <i>tagType</i> is a four-character <i>long</i> word that represents the tag type (<i>CRect</i> is <i>TcRct</i>, <i>boolean</i> is <i>Tbool</i>, and so on). <i>tagName</i> is a four-character <i>long</i> word that uniquely identifies that tag. <i>unused</i> is an unused field that allows extension of the data format. <i>tagDataSize</i> tells the size of the tag's data.  <li>Tag data (see <a name="rf3"><a href="9709ef3.htm">Figure 3</A>). Every tag header with a <i>tagDataSize</i> value greater than 0 is followed by the tag's data of that size. The tag's data may be the tags of another object that has been packed.
</ul>

<p>Each packed object is a collection of packed tags, with the next tag header coming directly after the previous tag's data. As in most code systems, it's a good idea to establish naming conventions for your tag types. I use the following convention:</p>

<ul>
<li>All basic data types (<i>short</i>, <i>long</i>, <i>boolean</i>, and so on) are stored as all lowercase.  <li>All classes (<i>CWindow</i>, <i>CMenu</i>, and the like) are stored in mixed case, with the first two characters of the <i>long</i> word representing the class system; see <a name="rl8"><a href="9709e.htm#l8">Listing Eight</A>.
</ul>

<p>Assuming the object you want to store doesn't have storage tags attached, packing tags into the tagged data storage format involves two steps:</p>

<p>1.	Create a temporary <i>TK_PackerObject</i> and attach the object's storage tags to that object. Call <i>TK_StorableObject:: At</i>tachStorageTags(tempObj); see Listings <a name="rl9"><a href="9709e.htm#l9">Nine</A> and <a name="rl10"><a href="9709e.htm#l10">Ten</A>.</p>

<p>2.	Iterate through the collection of tags, appending the tag header and tag data for each; see <a name="rl11"><a href="9709e.htm#l11">Listing Eleven</A>.</p>

<p>There are two types of tags you can store: basic data types (<i>short</i>, <i>boolean</i>, and the like) and object classes (<i>CRect</i>, <i>CWindow</i>, and so on). Storing a basic data type is simple: Set the tag header's data-size member to the <i>sizeof(basicType)</i> and append the value of that type after the tag header.</p>

<p>Storing object classes is just an extension of what you are already doing. If you want to store subobjects (such as panes inside a view), pack the subobject data and attach that packed data as a tag; see <a name="rf4"><a href="9709ef4.htm">Figure 4</A>.</p>

<h3>Restoring Tagged Objects</h3>

<p>Restoring a basic data type is as simple as instantiating that data type and stuffing the tag data into it. Restoring object classes is not as simple. Because the object classes are themselves packed data, you must retrieve the tag data and unpack it into the instantiated object class variable.</p>

<p>There is an additional complication for restoring object classes. Because all you have of the stored object class is an identifier that represents its class type, you must have a method for instantiating the correct object class when you unpack the data. There are at least a few good methods for doing this:</p>

<ul>
<li>Use factory classes that store template classes that create other objects based on their type. Pass the object's class type to the factory, which searches for a template that will create the appropriate object.  <li>Use an extended <i>switch</i> statement (see <a name="rl12"><a href="9709e.htm#l12">Listing Twelve</A>) that creates any object based on the object class type.
  <li>Use a hash table in which the object class identifiers correspond to a method that instantiates the correct object class. A hash table will most likely be faster than an extremely long <i>switch</i> statement, but requires significantly more coding.
</ul>

<p></p>

<p>The process of unpacking tagged data involves two steps:</p>

<p>1.	Parse the packed data and attach the packed tags to a temporary taggable object. This taggable object may be the object being restored; see <a name="rl13"><a href="9709e.htm#l13">Listing Thirteen</A>.</p>

<p>2.	Once all tags are attached, translate the tag values to values of member variables inside the object. If a specific tag is not attached, use the default value for that tag;<a name="rl14"> <a href="9709e.htm#l14">Listing Fourteen.</A></p>

<h3>Storing References</h3>

<p>How do you store a reference to another object? For example, if you have a member variable that is a pointer, this pointer has a value of something like "0x12345321." Yes, you can store that value, but it will be invalid when you later load it.</p>

<p>Most of the time, you can't store references because you can't assume that the object being referred to has been instantiated in the system restoring the object. There are many solutions to this problem.</p>

<p>One approach is to attach a name tag to each object that uniquely identifies the object. If you have all of your objects in some sort of collection (linked list, array), you can search through that collection for a specifically named object and assign a reference to the object at run time. Another solution, particularly for objects that are already collection based, such as views, is to store the object's index in the collection.</p>

<h3>Disadvantages of Tagged Data</h3>

<p>The foremost disadvantage of the tagged data format is that, for each tag stored, you must store a 16-byte tag header. The effects of tag headers are most evident when storing objects with lots of small tags. However, today, disk space is seldom a major factor in a design implementation. Don't be afraid to come up a tagged data format to better suit your needs. Tagged objects, for instance, exhibit redundancy (unused tag types, tag sizes), making compression an ideal extension to the data format.</p>

<p>Another disadvantage of the tagged data architecture is that you cannot immediately access a tag -- you must search through the list of tags attached to the object to find the appropriate one. This slowdown is most obvious with objects that have lots of tags attached and you are searching for the last tag in the list. This is where using advanced coding techniques and data structures (such as hash tables) can speed things up.</p>

<h3>Conclusion</h3>

<p>By using a common, flexible, and expandable data storage architecture, developers can save hundreds of hours in determining data-storage formats for objects and writing the storage/restoration code. Since all objects are represented in the same way, every object can be manipulated with the same code, greatly reducing the amount of code that needs to be written. Although tagged data storage does have a few disadvantages, the positive far outweighs the negative.</p>

<HR>
<H4><a name="l1">Listing One</H4>

<pre>class CSizable{
protected:
    CRect    cs_dimensions;   // Assume we already have a CRect class.
public:
   virtual CRect GetDimensions();
    virtual void Resize(CRect&amp; rNewSize);
    ...
}
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>class FT_TaggableObject{
public:
    // Basic tag routines.  
    virtual SN_Error AttachTag(FT_TagName tagName, FT_TagType tagType,
                      FT_TagData tagData, FT_TagDataSize tagDataSize);
    virtual SN_Error RemoveTag(FT_TagName tagName);
    virtual SN_Error RemoveAllTags();
    virtual SN_Error RetrieveTag(FT_TagName tagName, FT_Tag*&amp; rpTag);
    virtual SN_Error CountTags(FT_TagIndex&amp; rTagCount);
    ...
};
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>class FT_Tag{
protected:
    FT_TagData          ftt_tagData;
    FT_TagDataSize      ftt_tagDataSize;
    FT_TagName          ftt_tagName;
    FT_TagType          ftt_tagType;
    ... 
};
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>class TK_PackerObject{
public:
    virtual SN_Error PackData(LB_DataChunk&amp; rDataChunk);
    virtual SN_Error UnpackData(LB_DataChunk&amp; rPackedData);
    ...
};
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<H4><a name="l5">Listing Five</H4>

<pre>class TK_StorableObject{
public:
    virtual SN_Error PackData(LB_DataChunk&amp; rDataChunk);
    virtual SN_Error UnpackData(LB_DataChunk&amp; rPackedData);
public:
    virtual SN_Error AttachStorageTags(TK_PackerObject&amp; rObject);
    virtual SN_Error ExtractStorageTags(TK_PackerObject&amp; rObject);
};
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>
<H4><a name="l6">Listing Six</H4>

<pre>class LB_DataChunk{
public:
    virtual void* GetDataReference();
    ...
};
</pre>
<P>
<a href="#rl6">Back to Article</A>
</P>
<H4><a name="l7">Listing Seven</H4>

<pre>class TK_TagHeader{
public:
    FT_TagType          tkt_tagType;
    FT_TagName          tkt_tagName;
    long                tkt_unused;
    FT_TagDataSize      tkt_tagDataSize;
public: 
    TK_TagHeader();
};
</pre>
<P>
<a href="#rl7">Back to Article</A>
</P>
<H4><a name="l8">Listing Eight</H4>

<pre>// This is the class ID of CA_ObjectPane.const long ca_kObjectPane   = TcaOPU;
</pre>
<P>
<a href="#rl8">Back to Article</A>
</P>
<H4><a name="l9">Listing Nine</H4>

<pre>SN_Error TK_StorableObject::PackData(LB_DataChunk&amp; rDataChunk){
    SN_Error            result;
    TK_PackerObject     tempObject;
    
    EX_TRY
    {
        EX_THROW_ERROR(AttachStorageTags(tempObject));
        EX_THROW_ERROR(tempObject.PackData(rDataChunk));
    }
    catch (SN_Exception&amp; rException)
    {
        result = rException;
    }
    return result;  
}
</pre>
<P>
<a href="#rl9">Back to Article</A>
</P>
<H4><a name="l10">Listing Ten</H4>

<pre>SN_Error CA_ColoredObject::AttachStorageTags(TK_PackerObject&amp; rObject){
    SN_Error            result;
    EX_TRY
    {
        EX_THROW_ERROR(TK_AttachRGBColor(rObject, kColorName, 
                                       cac_color.GetRGBColor()));
    }
    catch (SN_Exception&amp; rException)
    {
   }
    return result;
}
</pre>
<P>
<a href="#rl10">Back to Article</A>
</P>
<H4><a name="l11">Listing Eleven</H4>

<pre>SN_Error TK_PackerObject::PackData(LB_DataChunk&amp; rDataChunk){
    SN_Error            result;
    EX_TRY
    {
        // Pack the object's tags into a chunk of data.
        EX_THROW_ERROR(PrepareForPackingData(rDataChunk));
        EX_THROW_ERROR(PackMyData(rDataChunk));
        EX_THROW_ERROR(FinishPackingData(rDataChunk));
    }
    catch (SN_Exception&amp; rException)
    {
        result = rException;
        FailPackingData(rDataChunk);
    }
    return result;
}
SN_Error TK_PackerObject::PackMyData(LB_DataChunk&amp; rDataChunk)
{
    LB_DataSize             totalSize, chunkSize;
    SN_Error                result;
    EX_TRY
    {
        EX_THROW_ERROR(CalculateTotalDataSizeWithHeader(totalSize,
                                                   sizeof(TK_TagHeader)));
        // Resize the chunk of data to fit all of the packed tag 
        // data.
        chunkSize = totalSize;
        rDataChunk.SetDataSize(chunkSize);
        // Pack the object's tags into a chunk of data.
        long            stuffOffset = 0;
        EX_THROW_ERROR(KeepPackingData(rDataChunk, stuffOffset));
    }
    catch (SN_Exception&amp; rException)
    {
        result = rException;
    }
    return result;
}
SN_Error TK_PackerObject::KeepPackingData(LB_DataChunk&amp; rDataChunk, 
                                                       long&amp; rStuffOffset)
{
   TK_TagHeader         tagHeader;
    FT_TagIndex         tagCount;
    FT_Tag*             pTag;
    FT_TagDataSize      headerSize = sizeof(TK_TagHeader);
    SN_Error            result;
    
    // KeepPackingData() stuffs tag info at specified offset into data.
    EX_TRY
    {
        EX_THROW_ERROR(CountTags(tagCount));
        for (FT_TagIndex tagIndex = 1; tagIndex &lt;= tagCount; tagIndex++)
        {
            // Retrieve the current tag.
            EX_THROW_ERROR(RetrieveTagWithIndex(tagIndex, pTag));
            EX_THROW_NIL(pTag);
            // Stuff the tag information into the tag header.
            tagHeader.tkt_tagType = pTag-&gt;GetType();
            tagHeader.tkt_tagName = pTag-&gt;GetName();
            tagHeader.tkt_tagDataSize = pTag-&gt;GetDataSize();
            // Stuff the tag info into the data chunk.
            rDataChunk.StuffAndOffsetData((Ptr) &amp;tagHeader, 
                                                rStuffOffset, headerSize);
            rDataChunk.StuffAndOffsetData(FT_GetTagDataReference(
             pTag-&gt;GetData()), rStuffOffset, pTag-&gt;GetDataSize());
        }
    }
    catch (SN_Exception&amp; rException)
    {
        result = rException;
        // The data chunk is no longer valid.
        rDataChunk.DestroyData();
    }
    return result;
}
</pre>
<P>
<a href="#rl11">Back to Article</A>
</P>
<H4><a name="l12">Listing Twelve</H4>

<pre>void* CreateAnyObject(long objectType){
    switch (objectType)
    {
        case ca_kObjectPane:
            return new CA_ObjectPane;
            break;  
        case vp_kView:
            return new VP_View;
            break;  
        ...
        default:
            return nil;
    }
}
</pre>
<P>
<a href="#rl12">Back to Article</A>
</P>
<H4><a name="l13">Listing Thirteen</H4>

<pre>SN_Error TK_PackerObject::UnpackMyData(LB_DataChunk&amp; rPackedData){
    TK_TagHeader*   pTagHeader;
    FT_TagData      tagData = nil;
    SN_Error        result;
    LB_DataSize     unpackOffset = 0;
    LB_DataSize     dataSize = rPackedData.GetDataSize();
    // Unpack the packed data to restore the object. Add each tag as you come 
    // upon it in data chunk. For now, assume all data is packed tag data.
    EX_TRY
    {
        // Make sure that if the data is a handle, it doesn't get purged.
        LB_ChunkData            chunkData;
        EX_THROW_ERROR(rPackedData.RetrieveData(chunkData));
        EX_THROW_NIL(chunkData.GetData());
        
        // Remove all existing tags.
        EX_THROW_ERROR(RemoveAllTags());
        
        // This object has been stored with tags- extract them.
        while (unpackOffset &lt; dataSize)
        {
            // Extract the current tag header.
            pTagHeader = (TK_TagHeader*) ((long) chunkData.GetData() + 
                                                               unpackOffset);
            tagData = nil;
            // Advance past the tag header.
            unpackOffset += sizeof(TK_TagHeader);
            if (pTagHeader-&gt;tkt_tagDataSize &gt; 0)
            {
                // This tag has data. Allocate space in memory for tag data.
                tagData = GetAllocatedTagData(pTagHeader-&gt;tkt_tagDataSize);
                EX_THROW_NIL(tagData);
                EX_THROW_NIL(FT_GetTagDataReference(tagData));
                {
                  FT_UseTagData   useTagData(tagData);
                  // Copy the tag data into the pointer.
                  BlockMove((Ptr) ((long) pTagHeader + sizeof(TK_TagHeader)),
                                      FT_GetTagDataReference(tagData), 
                                      FT_GetTagDataSize(tagData));
                  // Advance past the tag data.
                  unpackOffset +=
                              pTagHeader-&gt;tkt_tagDataSize;
                }
           }
            // Attach each tag.
            EX_THROW_ERROR(AttachTag(pTagHeader-&gt;tkt_tagName, 
              pTagHeader-&gt;tkt_tagType, tagData, FT_GetTagDataSize(tagData)));
        }
    }
    catch (SN_Exception&amp; rException)
    {
        result = rException;
        if (tagData)
            // Release the unused tag data from memory.
            DisposeTagData(tagData);
    }
    return result;
}
</pre>
<P>
<a href="#rl13">Back to Article</A>
</P>
<H4><a name="l14">Listing Fourteen</H4>

<pre>SN_Error CA_ColoredObject::ExtractStorageTags(TK_PackerObject&amp; rObject){
    SN_Error            result;
    EX_TRY
    {
        RGBColor            rgbColor;
        if (!TK_RetrieveRGBColor(rObject, kColorName, rgbColor).NoError())
            // Use the default value.           
            SetColor(0, 0, 0);      
        else
            cac_color.SetRGBColor(rgbColor);
    }
    catch (SN_Exception&amp; rException)
    {
        result = rException;
    }
    return result;
}
</pre>
<P>
<a href="#rl14">Back to Article</A>
</P>

<p><B>DDJ</B></p>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
