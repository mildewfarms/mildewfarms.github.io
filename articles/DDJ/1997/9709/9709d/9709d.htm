<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal September 1997: A Text UI for the Java AWT</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>A Text UI for the Java AWT</h1>

<p><i>Dr. Dobb's Journal</i> September 1997
</p>
<h2>Tomorrow's software for yesterday's terminals</h2>

<h3>By Stuart D. Gathman</h3>

<I>Stuart, a software developer for Business Management Systems, can be contacted at stuart@bmsi.com.</I>

<hr>

<p>The Java Abstract Window Toolkit (AWT) provides a user interface that is available on many different platforms without recompiling. Most programmers simply use the AWT implementation provided with the Java distribution. However, the java.awt package also provides java.awt.peer, a documented interface that lets you roll your own AWT.</p>

<p>In this article, I present a text user-interface (TUI) toolkit called TUIKit that was created with java.awt.peer. TUIKit consists of a pure Java server that runs anywhere, and a C++ client program that runs on UNIX servers. The main reason I developed the TUI look-and-feel for the Java AWT was to allow ASCII terminals to run Java applications on UNIX servers. In addition to implementing a TUI look-and-feel, TUIKit enables a multiuser Virtual Machine (VM). It is also a good starting point for creating a new AWT implementation because it is simple, yet complete. Finally, TUIKit solves Java's untrusted browser security problem.</p>

<p><a name="rf1"><a href="9709df1.htm">Figure 1</A> is the freely available Teikada IDE environment for Java (dejava@snow.trad .pfu.fujitsu.co.jp) running a memory manager on the graphical screen. <a name="rf2"><a href="9709df2.htm">Figure 2</A>, on the other hand, is the same memory manager running on a TUI screen. The memory monitor contains a canvas with a bar graph of memory usage. Because of the scaling, the <i>fillRect()</i> calls collide with the <i>drawRect()</i> calls and erase parts of the rectangles just drawn. <a href="9709df1.htm">Figures 1</A> and 2 are from the same Java binary on the same server. </p>

<p>The complete source code for the toolkit is available electronically (see "Availability," page 3). The code is in a Java package named bmsi.tui and the Toolkit is named bmsi.tui.TUIKit. There are no interpackage references, so you can rename the package simply by changing all the Java package statements. </p>

<h3>Creating the TUI Toolkit</h3>

<p>Every AWT component creates a parallel object called its "peer." In turn, peer objects implement interfaces in the java.awt.peer package. For instance, every <i>java.awt.Button</i> uses a peer that implements <i>java.awt.peer.ButtonPeer</i>. An AWT component calls peer methods to draw components on screen, and the peer interprets and forwards user input to the AWT. The peer determines the look-and-feel of a component.</p>

<p>The first step to building an AWT peer package is to create a class derived from <i>java.awt.Toolkit</i>. This class, called <i>Toolkit</i>, is responsible for creating the objects that implement the interfaces in <i>java.awt.peer</i>. Each instance of a <i>Toolkit</i> class represents a complete UI, including screen, keyboard, and pointer device. The UI elements that <i>Toolkit</i> creates are called "AWT Peers." </p>

<p><a name="rl1"><a href="9709d.htm#l1">Listing One</A> hows how to make AWT use a custom <i>Toolkit</i>. For starters, you set the <i>awt.toolkit</i> property to the fully qualified name of your <i>Toolkit</i> class. Do this before any AWT components are created to change the default <i>Toolkit</i> for the entire VM. To make <i>bmsi.tui.TUIKit</i> the default <i>Toolkit</i> for a specific class, I derive a class from <i>java.awt.Frame</i> and override the <i>getToolkit()</i> method to return an instance of the custom <i>Toolkit</i>. All java.awt <i>Components</i> placed in a <i>Frame</i> inherit that <i>Frame</i>s<i> Toolkit</i> by default. (The exception to this is <i>MenuComponent</i>, which always uses the default <i>Toolkit</i>.)</p>

<h3>Extending AWT Abstract Base Classes</h3>

<p>Before AWT can use your <i>Toolkit</i>, you must implement several foundation classes:</p>

<ul>
<li><i>java.awt.image.ColorModel</i>, which maps pixel values used by a <i>Toolkit</i> to RGB.  <li>	<i>java.awt.FontMetrics</i>, which lets applications get size information about a <i>Font</i> and compute the size of text to be displayed in a <i>Font</i> supported by a <i>Toolkit</i>.
  <li><i>java.awt.Graphics</i>, which lets applications draw on devices supported by a <i>Toolkit</i>.
  <li><i>java.awt.PrintJob</i>, which lets applications draw on printers supported by a <i>Toolkit</i>.
</ul>

<p></p>

<p>Although <i>ColorModel</i> is only used for images, you still must define it. (Besides, most terminals can support icons via downloadable fonts.) <i>TUIColorModel</i> maps all colors to black, white, gray, or transparent -- that is, a 2-bit pixel. Some terminals do support color, but in an abstract fashion. The colors of various logical text attributes are changed to suit user preference, such as system colors in a GUI. There are no pictures where concrete colors are required.</p>

<p>In addition to mapping 2-bit pixels to RGB required for image processing, <i>TUIColorModel</i> maps colors to one of three gray levels with <i>getTextPixel()</i>; see <a name="rl2"><a href="9709d.htm#l2">Listing Two</A>. These pixel values are used by the TUI client program to combine foreground and background colors with a font style to form a text attribute. This works well with data-oriented applications that tend to use white, gray, and black -- even in a GUI.</p>

<p><i>TUIFontMetrics</i> describes the height and width of characters; every <i>Font</i> is always set to 1. You can find the full listing for <i>TUIFontMetrics</i> and <i>TUIColorModel</i> in <i>TUIhelp.java</i>. <a name="rl3"><a href="9709d.htm#l3">Listing Three</A> shows how to make these classes available to AWT from TUIKit. </p>

<p>The <i>java.awt.Graphics</i> abstract class gives Java applications a way to draw on a <i>Component</i>. Unlike the other abstract classes in AWT, <i>Graphics</i> is returned by a <i>Component</i> rather than a <i>Toolkit</i>. Thus, the TUI version is returned by <i>TUIComponent</i> rather than TUIkit. </p>

<h3>Remote Partners</h3>

<p>I wanted to write the Java TUI package without resorting to native code, yet I needed it to be as flexible as possible. Consequently, TUIKit has little TUI code itself, but instead establishes a Socket connection to a client program that implements the UI. The two sides communicate via an RMI-like protocol called AWT Thin Client (ATC). <a name="rf3"><a href="9709df3.htm">Figure 3</A> shows the control flow when a user presses Return on a client Button, while <a name="rf4"><a href="9709df4.htm">Figure 4</A> illustrates the control flow when an application invokes <i>setLabel()</i> on an AWT Button.</p>

<p>One of the advantages of this approach is that the client program can be implemented in any language and run on any platform. My client program is currently written in C++ for terminals attached to UNIX servers. The client program can be running on the same UNIX box that is running the Java VM, but usually is not.</p>

<p>Also, the ATC is designed to minimize the "turnaround" that can occur when one side has to stop sending and wait for a response before continuing. This means it can work efficiently over networks. Full duplex text terminals do not work efficiently over networks because every keystroke requires a response from the server. The client program can run on a machine with a direct serial line to the terminal, while the Java program runs on a central server with a network connection. Turnaround delay is why block mode (half duplex) text terminals are often used with network connections.</p>

<p>Finally, the client program does not have to implement a TUI interface. </p>

<h3>The AWT Thin Client Protocol</h3>

<p>The ATC protocol connects the client and server with a symmetric stream of method calls. The server is an instance of TUIKit or ATCKit. The client is an independent program with a UI that is typically running on another computer. The client needs to notify the TUIKit when user input takes place, and the TUIKit needs to notify the client when AWT calls a peer method.</p>

<p>Each method call has two or more elements:</p>

<ul>
<li>Object ID, a short integer identifying the ATC object on which to invoke the method.  <li>Method ID, a short integer identifying which method to invoke. Each Method ID is given a symbolic name to use in program code. Symbolic names are defined in <i>RemotePeer.java</i>.
  <li>Arguments, zero or more integers, and strings. Number and type are determined by the Method ID. Short integers serve as Object references here as well.
</ul>

<p></p>

<p>Object references are symmetric. Every ATC object has a partner on the other side of the connection. When an ATC connection is first established, the <i>Toolkit</i> and its peer are the only ATC objects, each with an object ID of 0. The <i>Toolkit</i> provides methods to create and destroy ATC objects and methods for global functions such as setting screen size. Integers are transmitted in Java network format (MSB first).</p>

<p>Strings are transmitted as an unsigned short <i>char</i> (not byte) count followed by the 8-bit encoded bytes of the string. The default encoding is CP437 (IBM PC), which is supported by most ASCII terminals. An ATC client may request another encoding by invoking the SETTEXT method for the <i>Toolkit</i> with the Java name of the encoding. The default encoding supports 7-bit ASCII as a subset for the initial encoding change request.</p>

<p>TUIKit provides a set of <i>writeCmd()</i> methods for invoking methods on an ATC object. <a name="rl4"><a href="9709d.htm#l4">Listing Four</A> shows how <i>TUITextComponent</i> sends a new text value to its remote partner using the SETTEXT remote method.</p>

<p>Immediate return values should be avoided where possible since this results in turnaround delay. When an immediate return value is required, the <i>Toolkit</i> (Object ID 0) provides RETSHORT and RETSTRING methods, which put the returned objects in a FIFO queue where they can be retrieved locally with <i>getIntegerRet()</i> and <i>getStringRet()</i>. The FIFO queue is only required to have one entry.</p>

<p>Since the Java application creates most (currently all) peer objects when it initiates, TUIKit is responsible for assigning Object IDs. This avoids the turnaround delay of obtaining IDs from the client.</p>

<p>All partner objects have a type, which is implied by the <i>methodID</i> used to create the object. This <i>methodID</i> can be considered the type ID of the object it creates.</p>

<p>ATC can be extended by assigning new peer object types and new Method ids. The current set of Method ids for ATC will fit comfortably in a byte, but I used a short integer to make sure there is plenty of room for expansion. As an example, implementing a <i>Grid</i> component in an ATC client might reduce network traffic and give better performance for the user.</p>

<p>All ATC extensions must be optional. An ATC client supporting an extension package such as <i>GridComponents</i> must indicate that it does so by calling the SETEXTENSION Toolkit method with a unique string identifying the extension. This method may be safely ignored if the Java Toolkit has never heard of <i>GridComponents</i>. This method of negotiating extensions implies that new Method ids require a central registry. On the chance that this ATC protocol becomes immensely popular and there is no central registry, negative Method IDs are reserved for local extensions.</p>

<p>Method IDs used to create new objects must be unique. A given object type can be defined to obey any Method ids in any manner desired. To automate ATC protocol debugging tools, however, a given Method ID should always be used with the same type and number of arguments and serve a purpose related to its symbolic name. All currently defined Method IDs are listed in <i>RemotePeer.java</i> and <i>TUIGraphics.java</i>. (<i>TUIGraphics</i> defines a subset of <i>Graphics</i> methods that make sense to a text terminal. A full <i>ATCGraphics</i> class is under development.) The argument types are: <i>I</i> (short integer), <i>s</i> (string), <i>o</i> (object reference as short integer), <i>RI</i> (returns an integer), and <i>Rs</i> (returns a string). Additionally, method.def is a C preprocessor-compatible table of ATC methods that can be used to generate C or Java code.</p>

<h3>Back to the Toolkit</h3>

<p>Once the ATC protocol is defined, implementing the <i>Toolkit</i> is straightforward. In my TUIKit implementation, all Java objects with ATC remote partners must implement the <i>RemotePeer</i> interface; see <a name="rl5"><a href="9709d.htm#l5">Listing Five</A>. </p>

<p>Each <i>RemotePeer</i> must define <i>remoteMethod()</i> to execute the method IDs defined for its type of ATC object. TUIKit itself is a <i>RemotePeer</i> with <i>objectID 0</i> and has a <i>remoteMethod()</i> for global commands. Executing method calls from the remote client (the program with the actual UI running somewhere else on the network) is handled by <i>TUIKit.readCmd()</i>; see <a name="rl6"><a href="9709d.htm#l6">Listing Six</A>. It reads an Object id and Method id from the client, looks up the <i>RemotePeer</i> in its Object id table, and invokes <i>remoteMethod()</i> with the Method id for that <i>RemotePeer</i>. <i>remoteMethod()</i> is responsible for reading any additional arguments by invoking the <i>readShort()</i>, and <i>readUTF()</i> methods of TUIKit for integers and strings, respectively.</p>

<p>Each TUIKit instance has an event thread so that user input and screen updates can occur in parallel. <a name="rl7"><a href="9709d.htm#l7">Listing Seven</A> shows that the event thread <i>run()</i> method calls <i>readCmd()</i> in a loop. Since only the event thread calls <i>readCmd()</i>, it does not need to be synchronized.</p>

<p>TUIKit runs in single- or multiuser mode. By default, TUIKit is in multiuser mode, and each instance listens for a new connection to a <i>ServerSocket</i>. The AWT application creating the <i>Toolkit</i> instance will be a login program of some description.</p>

<p>If <i>TUIKit.setport(0)</i> is called at startup, the <i>TUIKit</i> constructor uses <i>FileDescriptor.out</i> as the client connection. This is the case when the Java VM is invoked by the UNIX inetd or similar program. In this case, there is only one instance of <i>TUIKit</i> for a single-user VM. Finally, if the <i>bmsi.tuikit</i> property is set, <i>TUIKit</i> will use its value with <i>Runtime.exec()</i> to load the ATC peer on the local system and run in single-user mode.</p>

<p>After establishing a client connection, the TUIKit constructor reads commands from the client (by invoking <i>readCmd()</i>) until the client invokes SCREENSIZE. This allows the client to select options and extensions. Then an event thread is started to read commands from the client in parallel with AWT component processing. The commands from the client will consist primarily of events such as keyboard, mouse, focus, item selection, or action.</p>

<p>Once the ATC protocol is running, the <i>TUIKit</i> constructor returns, and the Toolkit is ready to create AWT peers. There are numerous AWT peer-creating methods to define, but they are all trivial; see <a name="rl8"><a href="9709d.htm#l8">Listing Eight</A>.</p>

<p>The AWT peers we create will need to create their remote partners and invoke their methods. AWT peers call the <i>createRemotePeer()</i> method (see <a name="rl9"><a href="9709d.htm#l9">Listing Nine</A>) to assign an Object ID. Because most components are added to a container, all containers in the remote client must implement remote methods to create any of the objects they contain. Invoking one of these methods creates the object and adds it to the container in one step. The "par" argument is the local peer of the container; the TUIKit itself is a container whose remote partner can create any object. When an AWT peer is disposed, it must remove its remote partner with <i>removePeer()</i>.</p>

<p>In JDK 1.0, AWT peers called <i>postEvent()</i> for a target <i>Component</i> directly. Since each TUIKit has its own event thread, there was no interference between <i>Toolkit</i>s with multiple instances running. JDK 1.1 introduces the <i>EventQueue,</i> which serializes event processing. Synchronization is simplified because there is only one thread (started by AWT) to read events from a queue and post them. AWT calls the <i>Toolkit</i> method to get the <i>EventQueue</i>; see <a name="rl10"><a href="9709d.htm#l10">Listing Ten</A>.</p>

<p>Unfortunately, events generated internally by AWT post to the <i>EventQueue</i> returned by a static <i>Toolkit</i> method (which returns the <i>EventQueue</i> of the default <i>Toolkit</i>). This makes a multiuser Java VM vulnerable to "hanging" if a buggy or malicious application loops or waits forever while processing an AWT-generated event. This is probably acceptable when the server is running a fixed set of applications. But the Java AWT will need separate event threads for each user for a secure multiuser Java operating system. When running arbitrary applications under a multiuser operating system, each user should run their own instance of the Java VM. This uses more resources, but is secure.</p>

<p>For efficiency, the input and output stream for a TUIKit are buffered. This creates the problem of when to flush the output stream to avoid a deadlock. The <i>writeCmd()</i> method generates a delayed flush by posting an <i>AWTEvent</i> to the event queue; see <a name="rl11"><a href="9709d.htm#l11">Listing Eleven</A>. The <i>TUISync</i> class is a dummy <i>MenuItem</i> that flushes the toolkit output buffer on an <i>ActionEvent</i>. The <i>queue()</i> method queues an <i>ActionEvent</i> for the dummy component. The <i>needFlush</i> flag avoids queueing redundant <i>Sync</i> events.</p>

<h3>AWT Peers</h3>

<p>An AWT peer is created by the <i>addNotify()</i> method of a <i>Component</i> in java.awt. The <i>addNotify()</i> method invokes a corresponding method in the <i>Toolkit</i> to create the AWT peer. The <i>TUIComponent</i> base class has most of the common code for the TUI AWT peer classes. A look at the <i>TUIComponent</i> constructor in <a name="rl12"><a href="9709d.htm#l12">Listing Twelve</A> helps explain the <i>create()</i> and <i>initialize()</i> methods.</p>

<p>The <i>create()</i> method creates a remote partner of the proper type. The <i>initialize()</i> method copies the relevant state from the target AWT Component to the remote partner. Relevant state includes location, size, colors, and the like.</p>

<p>Each peer simply needs to define <i>remoteMethod()</i> and forward most peer calls to the remote partner. <a name="rl13"><a href="9709d.htm#l13">Listing Thirteen</A> shows the complete <i>TUIButton</i> class, which is a simple AWT peer for TUIKit. The <i>setLabel()</i> method, which is unique to <i>java.awt.peer.ButtonPeer</i>, forwards the new label to the remote partner. <i>TUIButton</i> handles only one ATC Method id in <i>remoteMethod()</i>, MENUPICK, which indicates that the user pressed the button. The <i>initialize()</i> method copies the button label to the remote partner. Additional component state is initialized by <i>super.initialize()</i>. All AWT peers must define <i>getMinimumSize()</i> and <i>getPreferredSize()</i>. As a convenience, <i>TUIComponent</i> defines <i>getPreferredSize()</i> to call <i>getMinimumSize()</i> when there is no difference.</p>

<p>TUI peers that implement selection objects maintain the selection state locally. This keeps the selection state in sync.<a name="rl14"> <a href="9709d.htm#l14">Listing Fourteen</A> shows how the <i>TUICheckbox remoteMethod()</i> toggles the AWT <i>Component</i> state and posts the corresponding event when the remote checkbox is activated. The remote client does not change the state itself. It merely invokes the MENUPICK remote method and receives a SETSTATE in return.</p>

<h3><i>TUIGraphics</i></h3>

<p>While data-processing applications will rarely need to do any drawing beyond that provided automatically by the AWT peers, applications will sometimes want to do their own drawing on a Canvas or Panel. One of the drawing methods in <i>java.awt.Graphics</i> is <i>drawString()</i>, which has an obvious implementation. <i>DrawRect()</i> is also useful where line-drawing glyphs are available, as is <i>drawLine</i> (and hence, <i>polyLine</i>) when the lines are horizontal and vertical. <i>copyArea</i> is also straightforward. <i>TUIGraphics</i> forwards any drawing commands that are remotely feasible in text mode to the remote component.</p>

<p>The most important job of <i>java.awt.Graphics</i> is to keep track of graphics state information for each instance. This avoids having to specify every parameter for every drawing command. <a name="rl15"><a href="9709d.htm#l15">Listing Fifteen</A> shows the state variables for <i>TUIGraphics</i>.</p>

<p><i>TUIGraphics</i> does not have a remote partner. Instead, the drawing commands are sent to the remote partner of its associated <i>TUIComponent</i> target. This arrangement lets the remote client manage its own graphics contexts, which is especially important when the remote client is a GUI. Since multiple <i>Graphics</i> instances can be created for a <i>Component</i>, <i>TUIGraphics</i> checks in the <i>getID()</i> method whether this instance was the last instance to send <i>Graphics</i> commands through the <i>Component</i>. If not, the current <i>Graphics</i> state is retransmitted before invoking the drawing command. Each remote partner must maintain a <i>Graphics</i> state independently of any state used for local painting. As <a name="rl16"><a href="9709d.htm#l16">Listing Sixteen</A> shows, the <i>getID()</i> method transmits the graphics state when required and returns the <i>TUIComponent</i> target where the drawing will occur.</p>

<p>The <i>setXXX</i> methods need to transmit the state information immediately when the <i>TUIGraphics</i> instance currently owns the component; see <i>setClip()</i> in<a name="rl17"> <a href="9709d.htm#l17">Listing Seventeen</A>.</p>

<p>For this scheme to work with multiple threads drawing on a single component, most methods need to be synchronized on the target <i>TUIComponent</i>. I didn't do this because it is messy and I couldn't think of a situation where I would want multiple threads drawing on a single component. Multithreading works fine as long as there is only one thread per component.</p>

<h3>Conclusion </h3>

<p>Apart from <i>Image</i> support, a GUI ATC client needs only a few extensions to the protocol. <i>ATCColorModel</i> maps RGB to 16-bit pixels. <i>ATCTextMetrics</i> needs to actually query the remote client. Since this is slow, ATCKit needs to cache the size of average text samples by <i>Font</i> for use in <i>getMinimumSize()</i> and friends.</p>

<p>Despite a few minor flaws, the Java AWT lives up to its name with amazing adaptability. I hope that Java AWT Client (or something like it) will help make server- based Java applications more practical.</p>
<HR>
<H4><a name="l1">Listing One</H4>

<pre>class SomeClass {  static void main(String args[]) {
 Properties props = System.getProperties();
 props.put("awt.toolkit","bmsi.tui.TUIKit");
  }
import java.awt.*;
class TUIFrame extends Frame {
  public Toolkit getToolkit() {
 return new bmsi.tui.Toolkit();
  }
}
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>class TUIColorModel extends java.awt.image {  static int getGrayLevel(Color c) {
 int red = c.getRed();
 int blue = c.getBlue();
 int green = c.getGreen();
 return (red + blue + blue + green) / 4;
  }
  static int getTextPixel(Color c) {
 int gray = getGrayLevel(c);
 if (gray &lt; 32) return 0;
 if (gray &lt; 192) return 1;
 return 2;
  }
}
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>class TUIKit extends java.awt.Toolkit {  private TUIColorModel colorModel = new TUIColorModel();
  private String[] fontlist = { "Terminal" };
<p></p>
  public ColorModel getColorModel() { return colorModel; }
  public String[] getFontList() { return fontlist; }
  public FontMetrics getFontMetrics(Font f) {
 return new TUIFontMetrics(f);
  }
}
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>class TUITextComponent extends TUIComponent  implements TextComponentPeer {
  private String txt;
  void setText(String s) {
 txt = s;   // keep a local copy
 toolkit.writeCmd(this,SETTEXT,s);
  }
}
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<H4><a name="l5">Listing Five</H4>

<pre>interface RemotePeer {  /** execute a command from our remote partner */
  void remoteMethod(int cmd) throws IOException;
  /** return the object id our remote partner knows us by. */
  int getID();
  /** return the java.awt Component or MenuComponent for this
   peer. */
  Object getTarget();
}
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>
<H4><a name="l6">Listing Six</H4>

<pre>class TUIKit extends Toolkit implements RemotePeer {  private Vector objs;
  private DataInput in;
  /** wait for an input event from our remote client. */
  private void readCmd() {
 try {
   flush();
   int id = in.readShort();
   int cmd = in.readShort();
   RemotePeer peer = (RemotePeer)objs.elementAt(id);
   peer.remoteMethod(cmd);
 }
 catch (IOException e) {
   throw new AWTError(e.toString());
  }
 }
}
</pre>
<P>
<a href="#rl6">Back to Article</A>
</P>
<H4><a name="l7">Listing Seven</H4>

<pre>class TUIKit extends Toolkit implements Runnable, RemotePeer {  public void run() {
 try {
   for (;;)
     readCmd();
 }
 // remote client has gone away
 catch (AWTError e) {
   debug(e);
   // exit if loaded via inetd
   if (server == null)
     System.exit(0);
  }
 }
}
</pre>
<P>
<a href="#rl7">Back to Article</A>
</P>
<H4><a name="l8">Listing Eight</H4>

<pre>class TUIKit extends Toolkit implements RemotePeer {  protected TextFieldPeer createTextField(TextField t) {
 return new TUITextField(t,this);
  }
}
</pre>
<P>
<a href="#rl8">Back to Article</A>
</P>
<H4><a name="l9">Listing Nine</H4>

<pre>class TUIKit extends Toolkit implements RemotePeer {  synchronized int createRemotePeer(RemotePeer par,
  int type,RemotePeer peer) {
 if (par == null)
   par = this;
 /* Vector won't search for null, so we search for ourselves
 knowing that a real TUIKit reference will be in pos 0 only */
 int id = objs.indexOf(this,1);
 if (id &lt; 0) {
   id = objs.size();
   objs.addElement(peer);
 }
 else
   objs.setElementAt(peer,id);
 writeCmd(par,type,id);
 return id;
  }
  void removePeer(int id) {
 if (id &lt; 0) return;
 objs.setElementAt(this,id);
 writeCmd(id,DISPOSE);
  }
}
</pre>
<P>
<a href="#rl9">Back to Article</A>
</P>
<H4><a name="l10">Listing Ten</H4>

<pre>class TUIKit {  EventQueue theQueue = new EventQueue;
  protected EventQueue getSystemEventQueueImpl() {
 return theQueue;
  }
}
</pre>
<P>
<a href="#rl10">Back to Article</A>
</P>
<H4><a name="l11">Listing Eleven</H4>

<pre>class TUIKit extends Toolkit implements RemotePeer {  flushTarget = new TUISync(this);
  synchronized void writeCmd(RemotePeer peer,int cmd) {
 writeCmd(peer.getID(),cmd);
 if (!needFlush) {
   needFlush = true;
   flushTarget.queue();
  }
 }
}
</pre>
<P>
<a href="#rl11">Back to Article</A>
</P>
<H4><a name="l12">Listing Twelve</H4>

<pre>class TUIComponent implements ComponentPeer, RemotePeer {  protected Component target;
  protected TUIKit toolkit;
  protected int winID = -1;
  protected TUIComponent(Component comp,TUIKit toolkit) {
 this.toolkit = toolkit;
 target = comp;
 Container parent = target.getParent();
 TUIContainer parentpeer = null;
 if (parent != null)
   parentpeer = (TUIContainer)parent.getPeer();
 create(parentpeer);   // create our remote partner, set winID
 initialize();         // copy target state to remote partner
  }
}
</pre>
<P>
<a href="#rl12">Back to Article</A>
</P>
<H4><a name="l13">Listing Thirteen</H4>

<pre>class TUIButton extends TUIComponent implements ButtonPeer {  TUIButton(Button but,TUIKit toolkit) { super(but,toolkit); }
  protected void create(TUIContainer parent) {
 winID = toolkit.createRemotePeer(parent,NEWBUTTON,this);
  }
  public Dimension getMinimumSize() {
 Button but = (Button)target;
 return new Dimension(but.getLabel().length(),1);
  }
  protected void initialize() {
 Button but = (Button)target;
 String text = but.getLabel();
 if (text != null)
   setLabel(text);
 super.initialize();
  }
  public void setLabel(String s) {
 toolkit.writeCmd(winID,SETTEXT,s);
  }
  public void remoteMethod(int cmd) throws IOException {
 if (cmd == MENUPICK) {
   Button but = (Button)target;
   toolkit.theQueue.postEvent(
     new ActionEvent(but,
       ActionEvent.ACTION_PERFORMED,but.getActionCommand()
     )
   );
   return;
 }
 super.remoteMethod(cmd);
}
</pre>
<P>
<a href="#rl13">Back to Article</A>
</P>
<H4><a name="l14">Listing Fourteen</H4>

<pre>class TUICheckbox extends TUIComponent implements CheckboxPeer {  public void remoteMethod(int cmd) throws IOException {
 if (cmd == MENUPICK) {
   Checkbox cb = (Checkbox)target;
   boolean flag = !cb.getState();
   cb.setState(flag);
   toolkit.theQueue.postEvent(
     new ItemEvent(cb,
       ItemEvent.ITEM_STATE_CHANGED,cb.getLabel(),
       flag ? ItemEvent.SELECTED : ItemEvent.DESELECTED
     )
   );
   return;
 }
 super.remoteMethod(cmd);
 }
}
</pre>
<P>
<a href="#rl14">Back to Article</A>
</P>
<H4><a name="l15">Listing Fifteen</H4>

<pre>class TUIGraphics extends Graphics {  private TUIKit toolkit;
  private TUIComponent target;
  private Color color;
  private Font font;
  private Rectangle clipRect;
  private int posx, posy;
  private boolean XORmode;
}
</pre>
<P>
<a href="#rl15">Back to Article</A>
</P>
<H4><a name="l16">Listing Sixteen</H4>

<pre>class TUIGraphics extends Graphics {  private RemotePeer getID() {
 if (target.currentGraphics != this) {
   toolkit.writeCmd(target,INITGRAPHICS);
   target.currentGraphics = this;
   if (font != null)
     setFont(font);
   // Should XORmode affect color?
   if (color != null)
     setColor(color);
   if (clipRect != null)
     setClip(clipRect);
   if (posx != 0 || posy != 0)
     translate(0,0);
  }
 return target;
 }
}
</pre>
<P>
<a href="#rl16">Back to Article</A>
</P>
<H4><a name="l17">Listing Seventeen</H4>

<pre>class TUIGraphics extends Graphics {  public void setClip(Shape s) {
 clipRect = s.getBounds();
 if (target.currentGraphics == this)
   toolkit.writeCmd(target,CLIPRECT,
     clipRect.x,clipRect.y,clipRect.width,clipRect.height);
  }
}
</pre>
<P>
<a href="#rl17">Back to Article</A>
</P>
<p><b>DDJ</b></p>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
