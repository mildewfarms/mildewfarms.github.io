<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal September 1997: Server-Side Scripting in Visual Basic</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Server-Side Scripting in Visual Basic</h1>

<p><i>Dr. Dobb's Journal</i> September 1997
</p>
<h2>Turning a scripting language into an extensible powerhouse</h2>

<h3>By Al Williams</h3>

<I>Al is a Dr. Dobb's Sourcebook contributing editor. You can find Al on the Web at http://www.al-williams.com/awc/.</I>

<hr>

<p>Not long ago, building a dynamic web page required you to write CGI scripts -- not very difficult, but a bit clumsy. With the introduction of Microsoft's IIS 3.0 (Internet Information Server), you can use Visual Basic (VB) to provide dynamic content -- well, sort of. In this article, I'll show how you can transform a boring web page to an interactive powerhouse using IIS 3.0, VBScript, and server-side ActiveX components.</p>

<p> Microsoft uses the term "VBScript" to describe the Basic language system in both Internet Explorer (IE) and IIS. However, the "V" in VB is supposed to stand for "Visual." Real VB is visual -- you create programs visually using a variety of drag-and-drop tools, wizards, and other modern conveniences.</p>

<p> VBScript, however, is a different story. Yes, VBScript programs are Basic. However, there is little that is visual about building them. For IE, you can use ControlPad or InterDev to give you a simplistic visual interface (one that is not much better than notepad for HTML). For server-side (IIS) scripts, you have to wing it with an ASCII text editor.</p>

<p>Still, in most cases, writing a server-side VBScript is better than creating a CGI script or ISAPI program. Not only is server-side scripting easier, but it is quite powerful. If you run into something that VBScript can't do easily, you can always create an ActiveX object (in VB or C++) that you can use from inside your script. With the proper objects, there is almost nothing a script can't do.</p>

<h3>Basic Script Basics</h3>

<p>To use server-side scripting, place your HTML in a file with an .ASP extension. These files are just like HTML files with three exceptions:</p>

<ul>
<li>IIS handles some server-side includes (SSIs) in these files.   <li>You can use &lt;% and &lt;%= tags to mark blocks of Basic code.
  <li>You can use the RUNAT=SERVER option in &lt;SCRIPT&gt; and &lt;OBJECT&gt; tags to indicate that these tags apply to the server.
</ul>

<p>SSIs are nothing new. If you want to include one file in another, just use an <i>include</i>. For example, if the file COPY.INC contains the text in <a name="re1"><a href="9709he1.htm">Example 1</A>(a), then you might write an .ASP file like <a href="9709he1.htm">Example 1</A>(b). The effect is that the copyright notice appears at the bottom of the page as though it were coded in the main file.</p>

<p>The interesting part is when you use the &lt;% tag to create scripts. All statements in one .ASP file that appear between &lt;% and %&gt; tags are in the same VB module. The &lt;%= tag is the same as &lt;%, except it forces its value into the HTML stream. Consider a page that shows the Fibonacci numbers in <a name="re2"><a href="9709he2.htm">Example 2</A>(a). Notice that you can freely intermix HTML and VBScript code. You can even subject HTML to an <i>if</i> statement, as in <a href="9709he2.htm">Example 2</A>(b).</p>

<h3>VBScript and ActiveX</h3>

<p>By itself, server-side VBScript is interesting, but not earth shattering. The real power of VBScript is its relationship with ActiveX. Scripts can access built-in ActiveX objects (see <a name="rt1"><a href="9709ht1.htm">Table 1</A>) to control IIS. Scripts can also create ActiveX objects and use them. These aren't usually the visual ActiveX objects you use on HTML pages. These aren't useful because they display on the screen. (You typically don't want to display things on the server's screen.) Instead, these are ActiveX components that generate HTML.</p>

<p>Microsoft supplies several components with IIS that you can use (see <a href="9709ht1.htm">Table 1</A>). There are other objects available as well. The Microsoft Personalization System, for example, allows you to recognize users and customize your script based on their preferences.</p>

<p>If you can't find a control you want to use, you can always write your own. In the past, you had to write sophisticated C++ code to create ActiveX objects. Now, Visual Basic 5 makes it easy to write them. You can write some objects with VB4, but it is a bit more difficult.</p>

<p>In this article, I'll show you how to use VBScript to connect to a database. The database in question (available electronically; see "Availability," page 3) tracks sightings of "the King" (a near-mythical figure spotted in various locations) and uses two VBScripts: DDJRPT.ASP (see <a name="rl1"><a href="9709h.htm#l1">Listing One</A> and <a name="rf1"><a href="9709hf1.htm">Figure 1</A>which lets you enter data into the database; and DDJFIND.ASP (see <a name="rl2"><a href="9709h.htm#l2">Listing Two</A> and <a name="rf2"><a href="9709hf2.htm">Figure 2</A>), which retrieves the data. To successfully create these two scripts, you need to understand more about IIS built-in objects and database access objects (DAOs).</p>

<h3>Inside IIS</h3>

<p>IIS provides several objects you can use to control its operation (see <a name="rt2"><a href="9709ht2.htm">Table 2</A>). For the purposes of the database example, you'll be most interested in the <i>Request</i> object, which contains data passed in as part of the query string, form data, certificate data, or cookies. It can also return server variables. In this case, you want the data from the input form, so you'll use the <i>Request</i> object to retrieve it. </p>

<p>The object contains collections for each type of data, so if you want to know the value of the <i>Name</i> field in a form, you could write: <i>Thename = Request.Form("Name").</i> However, the <i>Request</i> object will search all of its collections by default. Suppose you write: <i>Thename = Request("Name")</i>. The object first searches for the variable in the URL's query string (the portion after the question mark). If it can't match the variable (<i>"Name"</i>) there, it searches the form, then the cookies, then the client's certificates, and finally the internal server variables. The only time you need to specify a collection directly is if you think there might be a conflicting variable name. For example, if there is a query string entry called "Name," you'd need to explicitly ask for the <i>Form </i>collection to read a field value.</p>

<p>Reading the server variables can be useful, as well. The script in <a href="9709h.htm#l1">Listing One</A> shows how you can encapsulate a form and the script that process the form in the same file. The trick is simple: Just check the server to see if the current request has any content (that is, form data). You can find out by examining the <i>Content_Length</i> server variable. If the variable is zero, then show the form. Make sure the submit button posts the data back to the same .ASP file. When the data is sent back to the form, <i>Content_Length</i> will be nonzero and you can process the data in the <i>else</i> part of the<i> if</i>. You can see the entire arrangement in <a href="9709h.htm#l1">Listing One</A>.</p>

<h3>Database Details</h3>

<p>If you've programmed with Microsoft's DAO objects in VB or C++, you won't find any surprises with the database objects IIS uses. You open a connection to your database by creating an <i>ADODB.Connection</i> object. Then you have two choices:</p>

<p></p>

<ul>
<li>Call the <i>Execute</i> function to execute a SQL statement. This returns a record set.  <li>	Create a <i>RecordSet</i> object and open a table. Then you can manipulate the rows in the table directly using the <i>RecordSet</i>.
</ul>

<p></p>

<p>Both methods have their place. If you are comfortable with SQL, you'll no doubt prefer the first method. However, getting all your arguments quoted and formatted properly can be a nightmare. Opening a table with a <i>RecordSet </i>object is simple, although there may be some performance penalty relative to executing SQL.</p>

<p><a href="9709h.htm#l1">Listings One</A> and Two show both methods. When inserting data into the database, <a href="9709h.htm#l1">Listing One</A> uses a <i>RecordSet</i>. First, the code opens a table using the <i>Open</i> member of the <i>RecordSet</i>. Next, it creates a new record by calling <i>AddNew</i>. After that, you can treat any field in the database as a member of the <i>RecordSet</i>'s default collection. For example, to set the <i>Before</i> field to zero, the code uses the line: <i>RS("Before")=0.</i> If it is more convenient, you can also reference the fields by number starting with index 0. This is often useful when using computed values in a SQL statement, or if you are writing code that has no prior knowledge of the fields in use.</p>

<p>Finally, the code calls <i>Update</i> to write the data to the database table. You can find a list of useful <i>RecordSet </i>members in <a name="rt3"><a href="9709ht3.htm">Table 3</A>.</p>

<p><a href="9709h.htm#l2">Listing Two</A> takes the SQL approach to generate an HTML table that contains the contents of the database. This still involves a record set, but in this case, the connection object creates the record set in response to the <i>Execute</i> statement (see <a name="rt4"><a href="9709ht4.htm">Table 4</A> for common connection members). After the script calls <i>Execute</i>, it is a simple matter to create an HTML table. The code that does this is in two parts. The first part reads the field names from the database (the first field's name is in <i>RS(0).Name</i>, for example) and emits them as the table's headers.</p>

<p>The second portion of the script loops through each row in the table and writes out the fields. Because the script doesn't know how many fields you are using (or their names), it is quite general purpose. The only thing specific about this piece of script is that it chops off the last field. This allows the script to use <i>Select *</i> in the <i>Execute</i> statement and still not display the last field (the entry time). To make the code truly general purpose, you could change each <i>for </i>loop to terminate at <i>RS.Fields.Count-1</i>.</p>

<h3>Odds and Ends</h3>

<p>You can see a good use of server-side includes in both <a href="9709h.htm#l1">Listings One</A> and Two. These scripts include ADOVBS.INC. This file ships with IIS and allows you to use symbolic constants instead of integers in many of the database calls. For example, instead of writing <i>&lt;% rs.Open "Tbl", Conn, 3, 3 %&gt;</i>, you can write <i>&lt;% rs.Open "Tbl", Conn, adOpenStatic, adLockOptimistic %&gt;.</i></p>

<p>Another interesting point is the location of the VBScript code. Notice that the <i>include</i> statement comes before the &lt;HTML&gt; tag. This is perfectly legitimate. VBScript isn't HTML. It is more like a template that the server uses to generate HTML. Putting script outside the HTML is not uncommon. Don't confuse VBScript with HTML.</p>

<h3>Summary</h3>

<p>Although ASP won't completely eliminate CGI scripts or ISAPI programming, it certainly goes a long way toward making those tools obsolete (under IIS, anyway). Once you get used to server-side scripting you won't want to go back and write CGI or ISAPI -- it will seem much too difficult. Server-side scripting is an excellent example of how ActiveX can play a major role in future programming systems. ActiveX can turn a simple scripting language into an extensible powerhouse. Your own custom ActiveX objects can even access the built-in objects from <a href="9709ht2.htm">Table 2</A>.</p>

<HR>
<H4><a name="l1">Listing One</H4>

<pre>&lt;!--#include file="adovbs.inc" --&gt;&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Report Your Sightings!&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;!-- decide if data is present
     If data is present, process
     Otherwise, show form --&gt;
&lt;% if Request("Content_Length")=0 then %&gt;
&lt;H1&gt;Report your King Sightings Here!&lt;BR&gt;
&lt;/H1&gt;
&lt;FORM NAME="KingForm" ACTION="ddjrpt.asp" METHOD="POST"&gt;
&lt;PRE WIDTH=132&gt;
&lt;FONT SIZE=2&gt;Date:     &lt;/FONT&gt;
&lt;INPUT NAME="KDate" VALUE="" MAXLENGTH="8" SIZE=8&gt;
&lt;FONT SIZE=2 FACE="Courier New"&gt;
I've seen the King before: &lt;/FONT&gt;
&lt;INPUT TYPE="CHECKBOX" NAME="Before"&gt;
<p></p>
&lt;FONT SIZE=2 FACE="Courier New"&gt;Location: &lt;/FONT&gt;
&lt;INPUT NAME="Loc" VALUE="" MAXLENGTH="128" SIZE=64&gt;
&lt;FONT SIZE=2 FACE="Courier New"&gt;
<p></p>
&lt;FONT SIZE=2 FACE="Courier New"&gt;Your name: &lt;/FONT&gt;
&lt;INPUT NAME="Name" VALUE="" MAXLENGTH="128" SIZE=64&gt;
&lt;FONT SIZE=2 FACE="Courier New"&gt;
<p></p>
Comments:
&lt;/FONT&gt;
&lt;TEXTAREA NAME="Comment" ROWS=3 COLS=80&gt;
&lt;/TEXTAREA&gt;
&lt;/PRE&gt;
&lt;INPUT TYPE=SUBMIT NAME="Enter" VALUE="Enter" &gt;
&lt;/FORM&gt;
&lt;%else %&gt;
&lt;% ' Using record set which is easy, but an Insert would
   ' have better performance (see DDJFIND.ASP)
   Set Conn = Server.CreateObject("ADODB.Connection")
   Conn.Open "KingSight","guest",""
   set RS=Server.CreateObject("ADODB.RecordSet")
   Conn.BeginTrans ' start a unit of work
   rs.Open "Sighting", Conn, adOpenStatic, adLockOptimistic
   rs.AddNew ' new record
   rs("Date")=CDate(Request("KDate"))
   if Request("Before")="on" then
     rs("Before")=-1
   else
     rs("Before")=0
   end if
   rs("Location")=Request("Loc")
   rs("Name")=Request("Name")
   rs("Comment")=Request("Comment")
   rs("subtime")=now
   rs.Update
   Conn.CommitTrans
   rs.Close
   Conn.Close
%&gt;
&lt;H1&gt; Thanks for your report &lt;/H1&gt;
&lt;P&gt;Thank you very much!
&lt;A HREF=ddjfind.asp&gt;Click here to view recent sightings!&lt;/A&gt;
&lt;% end if %&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>&lt;!--#include file="adovbs.inc" --&gt;&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Find the King&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Recent King Sightings: &lt;/H1&gt;
&lt;!-- Create a connection to the database --&gt;
&lt;% Set Conn = Server.CreateObject("ADODB.Connection")
   Conn.Open "KingSight","guest",""
   ' Execute SQL select
   SQL="Select * from Sighting order by date desc"
   set RS = Conn.Execute(SQL)
%&gt;
&lt;P&gt;
&lt;TABLE BORDER=1&gt;
&lt;TR&gt;
  &lt;!-- print headers --&gt;
  &lt;!-- last field is hidden --&gt;
  &lt;% For i = 0 to RS.Fields.Count - 2 %&gt;
     &lt;TD&gt;&lt;B&gt;&lt;%= RS(i).Name %&gt;&lt;/B&gt;&lt;/TD&gt;
  &lt;% Next %&gt;
&lt;/TR&gt;
&lt;!-- print table (except for last field --&gt;
&lt;% Do While Not RS.EOF %&gt;
  &lt;TR&gt;
  &lt;% For i = 0 to RS.Fields.Count - 2 %&gt;
       &lt;TD VALIGN=TOP&gt;
    &lt;% if RS(i).Name&lt;&gt;"Before" then %&gt;
       &lt;%= RS(i) %&gt;
    &lt;% else %&gt;
       &lt;% if RS(i)=0 then %&gt;
         N
       &lt;% else %&gt;
         Y
       &lt;% end if %&gt;
    &lt;% end if %&gt;
       &lt;/TD&gt;
  &lt;% Next %&gt;
  &lt;/TR&gt;
&lt;%
  RS.MoveNext  &lt;!-- go to next record --&gt;
  Loop
  RS.Close
  Conn.Close
%&gt;
&lt;/TABLE&gt;
&lt;P&gt;
Be sure to add your sightings by clicking
&lt;A HREF="ddjrpt.asp"&gt;here&lt;/A&gt;.
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>

<p><b>DDJ</b></p>



<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
