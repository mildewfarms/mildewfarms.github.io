<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal September 1997: Editorial</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>There Once Was a Programmer from Poughkeepsie...</h1>

<p><i>Dr. Dobb's Journal</i> September 1997
</p>
<HR>
<p>If you want to pit poetry against computers, I reckon the place to start is in the friendly confines of a poetry convention, rather than, say, SIGGRAPH, OOPSLA, or a Microsoft Developer's Conference. That's the tack U.S. poet laureate Robert Pinsky took, anyway. Speaking before the International Poetry Forum, Pinsky told attendees that "school systems are making a big mistake if they think they're preparing kids for the future with hardware and software that will become obsolete," adding that "Wallace Stevens and T.S. Eliot won't become obsolete."</p>

<p>Before writing him off as yet another liberal arts Luddite, consider that -- when it comes to poetry, education, and (yes) software -- Pinsky knows what he's talking about. Compared to the Robert Frost-ian image of poet laureates we've come to expect, Pinsky is a bard of a different feather. In addition to being a professor of creative writing at Boston University, Pinsky is poetry editor for Microsoft's online magazine <i>Slate</i>; author of the best-selling <i>The Inferno of Dante: A New Verse Translation</i>; occasional guest lecturer at technology towers like MIT; and collaborator on the 1984 interactive adventure game <i>Mindwheel</i> (loosely based on the <i>Inferno</i> and eventually marketed by Broderbund). </p>

<p>In a March 19, 1995, <i>New York Times Book Review</i> essay, entitled "The Muse in the Machine: Or, the Poetics of Zork," Pinsky asked -- and answered -- a rhetorical question that sums up his view on the subject: </p>

<BLOCKQUOTE><p>
What has poetry to do with computer software? They share...an image that could be called the secret passage, the discovery of large, manifold channels through a small, ordinary-looking or all but invisible aperture.</p>
</BLOCKQUOTE>

<p>Pinsky goes on to say that "speed and memory" are what link poetry with computers, a concept he elaborated on in a <i>New York Times</i> (April 10, 1997) op/ed, entitled "The People's Verse": </p>

<BLOCKQUOTE><p>
The conventional notion is that technology and poetry are opposites, but poetry is itself a technology: an ancient technology that uses the human body. Like the digital computer, verse is a memory system; a means of storing information that can be called up with great speed, compactly.</p>
</BLOCKQUOTE>

<p>Can studying poetry make programmers better programmers? Perhaps, says Pinsky, since "programming is a refined or specialized version of ordinary language...Learning the moves of poetry, or being steeped in them, might help elevate what one does from being very good to being whatever is better than very good." </p>

<p>Certainly Pinsky changed the way Steve Hales, lead programmer on the <i>Mindwheel</i> project and currently director of audio technologies at Headspace, approached programming. </p>

<BLOCKQUOTE><p>[After working with Pinsky], I viewed what I did -- programming commercial entertainment and authoring tools -- as my craft and art. I started listening to my creative side. To be more free with engineering ideas. Sometimes I failed, but the more I tried, the better I got. Now given a particular situation I can code a good engineering solution on the spot. Working with Robert, I learned to be forgiving of my own mistakes, and continue to evolve without fear of failure.</p>
</BLOCKQUOTE>
<p>But when it comes to education, should students, as Pinsky says, be spending more time studying poetry than, say, "Reader Rabbit" software? Before considering this question, you might want to read "The Computer Delusion," by Todd Oppenheimer (<i>The Atlantic Monthly</i>, July 1997). Oppenheimer, an associate editor for <i>Newsweek Interactive,</i> describes how schools across the country are eliminating music, art, and similar programs to buy computers -- even though there's little hard evidence they improve teaching or learning. </p>

<p>That's not to say that computers don't have a place in the classroom. As with a book or any other teaching aid, it comes down to how the tool is used. Instead of cobbling together reports or learning how to operate software, students at all levels -- experienced programmers included -- would be better served examining the logic and problem-solving techniques that go into creating software in the first place. </p>

<p>In an ideal world, this might mean studying the source code of "good" programs. In reality, this isn't going to happen, except maybe in a few computer-science classes. There are simply too many barriers, the least of which include programming language differences.</p>

<p>For that matter, even if schools did begin using source code as a problem-solving adventure, it remains that the code would be just another teaching tool -- like computers and books, chalk and blackboards. In wrapping up his article, Oppenheimer quotes a Massachusetts electrical engineer who says "tools come and tools go" and what schools need to do is "teach carpentry, not hammer." That noise you hear in the background is Pinsky saying "Amen."</p>

<P>
--Jonathan Erickson
</P>
<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
