<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal September 1997: Converting MFC Toolbars into Taskbars</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Converting MFC Toolbars into Taskbars</h1>

<p><i>Dr. Dobb's Journal</i> September 1997
</p>
<h2>You can do it -- in just four simple steps!</h2>

<h3>By Mark Janczura</h3>

<I>Mark, a software engineer for Novell, can be contacted at mjanczura@novell.com.</I>

<hr>

<p>The taskbar is an object new to Windows. Until I read the article "Extend the Windows 95 Shell with Application Desktop Toolbars," by Jeffrey Richter (<i>Microsoft Systems Journal</i>, March  1996), I did not fully appreciate all the possible uses for a taskbar. In his article, Richter provides the code for a generic class that implements the functionality of a taskbar. By deriving from his class, you can easily create your own taskbar. The class is derived from <i>CDialog</i>, so the taskbar can easily contain any type of control. </p>

<p>One practical use for a taskbar is to display information to users. The taskbar is ideally suited for this because, when it is docked to the shell, it cannot be covered up by any other window. However, this requires users to forfeit some precious screen real estate. While taskbars do have an "autohide" property, they are still docked to the shell. But what if a taskbar could be undocked from the shell and docked to an application's window like a toolbar? And when an application window is hidden or closed, the taskbar would go  with it? This gives users a choice: If they want the information to always be displayed, they can dock the taskbar to the Windows 95 shell; otherwise, they can dock it to the application window. </p>

<p>I have created an object that exhibits the properties of both a toolbar and taskbar. The object behaves exactly like a standard MFC toolbar, except that when it is positioned on the screen's edges, it becomes a taskbar and docks to the shell. The strategy I used to create this object was to start with a basic toolbar, so that it inherited all of the functionality for docking to a framed window. Then I added the necessary code from Richter's generic class to support taskbar behavior. For this article, I have used a toolbar, but the procedure I describe can be applied to any class derived from <i>CControlBar</i> (the parent class of <i>CToolBar</i>). The complete source code and related files for a sample application that implements these techniques are available electronically; see "Availability," page 3.</p>

<p>Modifying the behavior of a normal toolbar to mimic that of a taskbar requires an understanding of how MFC implements the toolbar and the docking process. The MFC class <i>CToolBar</i> encapsulates the functionality of a standard toolbar. The docking of this toolbar to a framed window is provided by the help of three other MFC classes: </p>

<ul>
<li><i>CFrameWnd</i>, the base class for a framed window. The frame handles the docking and floating of the toolbar.   <li><i>CDockContext</i>, the class that handles the dragging and resizing of a toolbar object. The dock context prompts the frame when the toolbar needs to be docked or floated. 
  <li><i>CMiniDockFrameWnd</i>, the class that implements the frame window that appears around a toolbar when it is floated. 
</ul>

<p></p>

<p>By deriving your own classes from these classes and massaging the MFC code a little, you can -- in just four steps -- create a toolbar that can be docked to both a framed window and the system shell. </p>

<h3>Step 1: Modify Class <i>CMiniDockFrameWnd</i></h3>

<p>The <i>CMiniDockFrameWnd</i> class requires the most work. A frame of this class is created around a toolbar any time the toolbar is undocked from the main frame of the application. You need to derive your own class from this base class and add all of the taskbar functionality. The result: When a toolbar with your frame class is dragged to the edge of the screen, the frame will change shape and dock to the shell. Voil&agrave;! A combination toolbar and taskbar!</p>

<p>You need to incorporate the implementation of Richter's <i>CAppBar</i> class into a class derived from <i>CMiniDockFrameWnd,</i> rather than <i>CDialog</i>. My <i>CFloatingFrame</i> class shows how this is done. The key methods to understand are the handlers <i>OnWindowPosChanging</i>, <i>OnWindowPosChanged</i>, and <i>SetState</i>. While the window's position is changing, the state of the floating frame is calculated based on the current position of the window when the message is received. This state is remembered in the internal variable <i>m_uStateProposedPrev</i>. Then, when a WM_WINDOWPOSCHANGED message is received, the state of the floating frame is set by a call to <i>SetState</i>. The <i>SetState</i> method handles the core of the work required to dock the frame to the system shell. <i>SetState</i> and the methods that it calls will adjust the size and position of the frame window, as well as notify the shell of the movement. For a more detailed explanation of the meaning of the internal variables and methods, refer to Richter's original article. The class definition for <i>CMiniDockFrameWnd</i> is located in the MFC file AfxPriv.h.</p>

<h3>Step 2: Modify Class <i>CFrameWnd</i> </h3>

<p>Now that you have created a floating-frame class with taskbar properties, you have to ensure that the framework will use your class when the toolbar is floated, rather than a standard <i>CMiniDockFrameWnd</i>. The main frame window of the application is actually responsible for creating the floating frame. The three methods on the class <i>CFrameWnd</i> that need modification are <i>EnableDocking</i>, <i>Create</i>FloatingFrame, and <i>FloatControlBar</i>. The implementation for all three of these methods is in WinFrm2.cpp. You need to derive your own class from <i>CFrameWnd</i> and redefine these methods so that your floating-frame class is substituted everywhere the class <i>CMiniDockFrameWnd</i> occurs. My sample application includes a <i>CMainFrame </i>class<i>,</i> which demonstrates these changes. <a name="rl1"><a href="9709b.htm#l1">Listing One</A> resents <i>CreateFloatingFrame</i>.</p>

<h3>Step 3: Modify Class <i>CDockContext</i> </h3>

<p>The method <i>FloatControlBar</i> on the framed window is called in response to several methods on a <i>CDockContext</i> object. The class <i>CDockContext</i> handles dragging or resizing of the toolbar by the user. The definition for <i>CDockContext</i> is in the header file AfxPriv.h and the implementation is in the file DockCont.cpp. Specifically, the method <i>EndDrag</i> of the class <i>CDockContext</i> calls <i>FloatControlBar</i> or <i>DockControlBar,</i> depending on the position of the toolbar window. Unfortunately, the method <i>FloatControlBar</i> is not declared virtual in the <i>CFrameWnd </i>class. When the user stops dragging the toolbar, the base class version of the method will be called rather than the overridden version in your derived class. To remedy this situation, you need to derive your own class from <i>CDockContext</i>. You override the method <i>EndDrag</i> so that the pointer to the main frame is typecast to your derived framed window class before any methods like <i>FloatControlBar</i> are called. <a name="rl2"><a href="9709b.htm#l2">Listing Two</A> is my modified version of <i>EndDrag</i>.</p>

<p>The <i>EndDrag</i> method is not declared virtual either. The methods of the class <i>CDockContext</i> that call <i>EndDrag</i> also must be overridden so that the derived version of <i>EndDrag</i> is called by the framework. The <i>StartDrag</i> method is a virtual method that is called by the framework when the user begins to drag the toolbar object. <i>StartDrag,</i> in turn, calls a method, <i>Track,</i> which monitors the movement of the toolbar. It is the <i>Track</i> method that calls <i>EndDrag</i>. By overriding these two methods in your derived class, your version of <i>EndDrag</i> will be called. Neither <i>StartDrag</i> nor <i>Track</i> require any changes, so you can cut and paste them into your derived class.</p>

<p>Similar to the <i>StartDrag</i> and <i>EndDrag</i> methods, there are also the <i>StartResize</i> and <i>EndResize </i>methods. The <i>EndResize</i> method calls <i>FloatControlBar</i> on the frame when users resize the toolbar. Follow the same just-mentioned procedure and override the <i>EndResize</i> method so that the pointer to the frame is typecast to your derived framed window class. Likewise, you need to override the <i>StartResize</i> method so that your derived version of <i>EndResize</i> is called.</p>

<p>The <i>ToggleDocking</i> method is called when users double-click on the toolbar.  Double-clicking toggles between a floating and docked toolbar. This method is declared virtual, so you can just cut and paste the method into your derived dock-context class and typecast the main frame pointer to your derived frame-window class.</p>

<p>There is one last change to the <i>CDockContext</i> class that should be made. This is not a necessary change, but one of style. The <i>Move</i> method of the dock-context class handles the sizing of the drag rectangles for a toolbar. By overriding the <i>Move</i> method you can change the shape of the drag rectangle when it is positioned over the edges of the shell. This gives users a visual clue that the toolbar may be docked to the shell. You can resize the drag rectangle by using a helper method such as <i>GetDimsFromPoint</i>. I based my <i>GetDimsFromPoint</i> method on the method <i>GetEdgeFromPoint</i> from Richter's <i>CAppBar</i> class. The method uses the point that is passed in as a parameter to determine if the toolbar needs to be docked. In the derived version of the <i>Move</i> method, save the original size of the drag rectangle. Then call <i>GetDimsFromPoint</i> to modify the size of the rectangle, if necessary. After drawing the rectangle with <i>DrawFocusRect</i>, return the saved size of the drag rectangle to the original dimensions. <a name="rl3"><a href="9709b.htm#l3">Listing Three</A> is the <i>GetDimsFromPoint</i> helper method.</p>

<h3>Step 4: Modify Class <i>CToolBar</i></h3>

<p>The last class that needs modification is the <i>CToolBar</i> class. The toolbar must be modified so that it uses your derived context class. The toolbar object maintains a pointer to the dock context in a member variable called <i>m_pDockContext,</i> which is inherited from the base class <i>CControlBar</i>. The instantiation and assignment of the dock context object to this variable occurs in the <i>EnableDocking</i> method of the <i>CControlBar</i> class. The implementation of the <i>EnableDocking</i> method can be found in the MFC source file BarDock.cpp. You need to derive your own class from <i>CToolBar</i> and override the <i>EnableDocking</i> method. Where an object of type <i>CDockContext</i> is normally instantiated, insert an object of your derived dock context class instead; see <a name="rl4"><a href="9709b.htm#l4">Listing Four</A>.</p>

<h3>Conclusion</h3>

<p>That's all there is to it. By following these four steps, you can create a combination taskbar/toolbar for your applications. The majority of the work is already taken care of by MFC and the <i>CAppBar</i> class. All you have to do is put everything together. </p>

<HR>
<H4><a name="l1">Listing One</H4>

<pre>CFloatingFrame* CMainFrame::CreateFloatingFrame(DWORD dwStyle){
     CFloatingFrame* pFrame = NULL;
     ASSERT(m_pFloatingFrameClass != NULL);
     pFrame = (CFloatingFrame*)m_pFloatingFrameClass-&gt;CreateObject();
     if (pFrame == NULL)
        AfxThrowMemoryException();
     ASSERT_KINDOF(CFloatingFrame, pFrame);
     if (!pFrame-&gt;Create(this, dwStyle))
        AfxThrowResourceException();
     return pFrame;
}
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>void CMyDockContext::EndDrag(){
     CancelLoop();
     if (m_dwOverDockStyle != 0)
     {
     CDockBar* pDockBar = GetDockBar(m_dwOverDockStyle);
     ASSERT(pDockBar != NULL);
<p></p>
     CRect rect = (m_dwOverDockStyle &amp; CBRS_ORIENT_VERT) ?
     m_rectDragVert : m_rectDragHorz;
<p></p>
     UINT uID = _AfxGetDlgCtrlID(pDockBar-&gt;m_hWnd);
     if (uID &gt;= AFX_IDW_DOCKBAR_TOP &amp;&amp;
         uID &lt;= AFX_IDW_DOCKBAR_BOTTOM)
     {
        m_uMRUDockID = uID;
        m_rectMRUDockPos = rect;
        pDockBar-&gt;ScreenToClient(&amp;m_rectMRUDockPos);
     }
     // dock it at the specified position, RecalcLayout will snap
     ((CMainFrame*)m_pDockSite)-&gt;DockControlBar(m_pBar, pDockBar, &amp;rect);
     ((CMainFrame*)m_pDockSite)-&gt;RecalcLayout();
     }
     else if ((m_dwStyle &amp; CBRS_SIZE_DYNAMIC)||(HORZF(m_dwStyle) &amp;&amp; !m_bFlip)
    || (VERTF(m_dwStyle) &amp;&amp; m_bFlip))
     {
       m_dwMRUFloatStyle = CBRS_ALIGN_TOP | (m_dwDockStyle &amp; CBRS_FLOAT_MULTI);
       m_ptMRUFloatPos = m_rectFrameDragHorz.TopLeft();
       ((CMainFrame*)m_pDockSite)-&gt;FloatControlBar(m_pBar,
                                       m_ptMRUFloatPos, m_dwMRUFloatStyle);
     }
     else // vertical float
     {
       m_dwMRUFloatStyle = CBRS_ALIGN_LEFT|(m_dwDockStyle &amp; CBRS_FLOAT_MULTI);
       m_ptMRUFloatPos = m_rectFrameDragVert.TopLeft();
       ((CMainFrame*)m_pDockSite)-&gt;FloatControlBar(m_pBar, 
                                       m_ptMRUFloatPos, m_dwMRUFloatStyle);
     }
}
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>void CMyDockContext::GetDimsFromPoint (CRect&amp; rect, CPoint pt) {
   UINT uState = ABE_FLOAT;   // Assume that the AppBar is floating
   // Let's get floating out of the way first
   // Get the rectangle that bounds the size of the screen
   // minus any docked (but not-autohidden) AppBars.
   CRect rc, rcSav;
   ::SystemParametersInfo(SPI_GETWORKAREA, 0, &amp;rc, 0);
<p></p>
   rcSav = rc;
   // Leave a + width/height-of-a-scrollbar gutter around the workarea
   rc.InflateRect(-GetSystemMetrics(SM_CXVSCROLL), 
                                         -GetSystemMetrics(SM_CYHSCROLL));
   if (rc.PtInRect(pt)) 
   {
     // If the point is in the adjusted workarea
        return; 
   }
   // If we get here, the AppBar should be docked; determine the proper edge
   // Get the dimensions of the screen
   int cxScreen = GetSystemMetrics(SM_CXSCREEN);
   int cyScreen = GetSystemMetrics(SM_CYSCREEN);
<p></p>
   // Find the center of the screen
   CPoint ptCenter(cxScreen / 2, cyScreen / 2);
<p></p>
   // Find the distance from the point to the center
   CPoint ptOffset = pt - ptCenter;
<p></p>
   // Determine if the point is farther from the left/right or top/bottom
   BOOL fIsLeftOrRight = (AbsoluteValue(ptOffset.y) * cxScreen) &lt;=
      (AbsoluteValue(ptOffset.x) * cyScreen);
<p></p>
   // If (it should be left/right) 
   if (fIsLeftOrRight){
       rect.top = rcSav.top;
       rect.bottom = rcSav.bottom;
       int width = rect.Width();
       if (0 &lt;= ptOffset.x)
       {
            int width = rect.Width();
            rect.right = rcSav.right;
            rect.left  = rect.right - width;
       }
       else
       {
            rect.left = rcSav.left;
            rect.right = rect.left + width;
       }
   } 
   else if( !fIsLeftOrRight )
    {
            rect.left = rcSav.left;
            rect.right = rcSav.right;
            int height = rect.Height();
            if (0 &lt;= ptOffset.y)
            {
                rect.bottom = rcSav.bottom;
                rect.top =  rect.bottom - height;
            }
            else
            {
                rect.top = rcSav.top;
                rect.bottom = rect.top + height;
            }
    }
}
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>void CMyToolBar::EnableDocking(DWORD dwDockStyle){
     // must be CBRS_ALIGN_XXX or CBRS_FLOAT_MULTI only
     ASSERT((dwDockStyle &amp; ~(CBRS_ALIGN_ANY|CBRS_FLOAT_MULTI)) == 0);
     // CBRS_SIZE_DYNAMIC toolbar cannot have the CBRS_FLOAT_MULTI style
     ASSERT(((dwDockStyle &amp; CBRS_FLOAT_MULTI) == 0) || 
           ((m_dwStyle &amp; CBRS_SIZE_DYNAMIC) == 0));
     m_dwDockStyle = dwDockStyle;
     if (m_pDockContext == NULL)
        // instantiate my own dock context
        m_pDockContext = (CDockContext*) new CMyDockContext(this);
     // permanently wire the bar's owner to its current parent
       m_hWndOwner = ::GetParent(m_hWnd);
}
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>

<p><b>DDJ</b></p>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
