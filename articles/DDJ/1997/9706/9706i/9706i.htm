<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal June 1997: An Unlimited Undo/Redo Stack Pattern For PowerBuilder</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>An Unlimited Undo/Redo Stack Pattern For PowerBuilder</h1>

<p><i>Dr. Dobb's Journal</i> June 1997
</p>
<h2>Design patterns simplify development</h2>

<h3>By David Van Camp</h3>

<I>David is a principle consultant with Keane Inc., a national computer services firm. You can contact him at 70323.3510@compuserve.com.</I>

<hr>

<p>Users have become accustomed to applications that provide multilevel undo and redo capabilities. Undo/redo lets users quickly recover from simple mistakes and can save time and frustration. However, undo/redo is typically only available in mass-marketed applications, such as Microsoft Word.</p>

<p>Still, users of enterprise database applications can also benefit from an effective undo/redo facility. The main reason undo/redo is not usually provided in these applications is the perceived cost of implementation. If you can provide undo/redo capabilities for these applications in an easily reused component, the costs for providing this feature are drastically reduced.</p>

<p>In this article, I present a solution for providing unlimited undo and redo capabilities to windows developed using PowerBuilder. I used design patterns in the discovery of this solution to provide a simple, standardized approach that is quickly understood and highly adaptable to a variety of specific problems. <a name="rf1"><a href="9706if1.htm">Figure 1</A> shows an application that demonstrates this design and provides a collection of reusable and extendable components that you can readily incorporate into any PowerBuilder application or component library. The .PBL and related files that implement this capability are available electronically; see "Availability," page 3.</p>

<h3>Why Use Design Patterns?</h3>

<p>Design patterns provide good solutions to the problems that arise in the development of component features. These patterns explain the benefits and drawbacks of specific approaches and allow you to find the ideal solution quickly. Additionally, patterns provide an excellent description of how the resulting design works, thus reducing the time and effort required to explain each specific design. And, of course, reducing the documentation effort reduces development costs. Design patterns can also minimize training requirements because they provide clear, well-documented examples of good design.</p>

<p>But design patterns have even more advantages. Because each one discusses how it can work with other patterns, you can easily find ways to extend your existing designs when new or more flexible features must be incorporated into an evolving system. As your library of component features expands, existing applications can automatically receive feature enhancements if you are careful to encapsulate the features in a standardized manner. By consistently and continually applying design patterns, you can significantly reduce costs while increasing quality, maintainability, and enhanceability over long periods of time.</p>

<h3>The Basic Approach</h3>

<p>An effective approach to creating an undo/redo facility is to combine and enhance two of the design patterns described in <i>Design Patterns: Elements of Reusable Object-Oriented Software</i>, by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides (Addison-Wesley, 1995). I'll start with the Command pattern to encapsulate the basic undoable operations. Next, I incorporate elements of the Memento pattern to allow the commands to store the state information needed to actually perform undo and redo. Finally, I add an extended last-in-first-out (LIFO) stack to maintain a command history.</p>

<p><a name="rf2"><a href="9706if2.htm">Figure 2</A> shows the basic structure of the Command pattern. This pattern describes a simple solution that encapsulates an operation as a parameterized object. A <i>SpecificCommand</i> is created by a <i>Client</i> and works in concert with a target object, called the <i>Receiver</i>, upon which the command is performed. The command is executed at the request of the <i>Invoker</i>. <i>Invoker</i> calls the <i>Execute()</i> method in a <i>Command</i>, which then performs its encapsulated operation by calling the <i>Action()</i> method in its associated <i>Receiver</i>. I will use the Command pattern to form the fundamental structure of the undo/redo facility.</p>

<p>The Memento pattern (see <a name="rf3"><a href="9706if3.htm">Figure 3</A>) describes a way to capture the state of an object so that you can return the object to that state at a later time without violating encapsulation. In this pattern, the <i>Memento</i> object captures the state of the <i>Originator</i>. The <i>Originator</i> creates and initializes a <i>Memento</i> when its <i>CreateMemento()</i> method is invoked. A <i>Caretaker</i> is needed to maintain the <i>Memento</i>s in the system. Finally, whenever the <i>Originator</i> needs to be restored to a previous state, the <i>SetMemento()</i> method calls the <i>GetState()</i> method in <i>Memento</i> to retrieve and restore <i>Originator</i> to its previously saved state.</p>

<p>I incorporated the Memento pattern in the undo/redo design to hold the information a command needs by merging the state-holding capabilities of the <i>Memento</i> object directly into the <i>Command</i> objects. Also, since <i>Command</i>s must act on the same target object, both initially to perform an operation and to undo that operation by restoring the target's previous state, I merge the roles of Memento's <i>Originator</i> and Command's <i>Receiver</i>.</p>

<p>In addition to parameterizing commands and maintaining undo states, you also need a history of executed commands. This is achieved by combining the responsibilities of the Command pattern's <i>Invoker</i> and Memento's <i>Caretaker</i>. The resulting object is responsible both for maintaining this history and for invoking the commands. This history object places commands on a stack, initially executing a command as it is stacked. Later, it tells the top-most stacked command to reverse its effects when undo is requested and pop the command off the stack.</p>

<p><a name="rf4"><a href="9706if4.htm">Figure 4</A> illustrates how this history operates. The effect on the history as commands are first pushed onto the stack are shown in step 1. When users decide to undo an action, the command at the top is asked to undo its operation, then it's popped off the top of the stack, as step 2 illustrates.</p>

<p>Since you want to be able to redo items that have been previously undone, you need to enhance this operation. As you can see in step 2 of <a href="9706if4.htm">Figure 4</A>, whenever a command is undone, a second pointer is set to point to that command. As more commands are undone, those commands remain above the top of the undo stack, thus forming a second stack in the opposite direction. Consequently, the undo/redo history actually consists of two opposing stacks.</p>

<p>As soon as a new command is placed on the top of the undo stack, however, all commands are removed from the redo portion of the history. This is essentially how Microsoft Word handles redoing previously undone commands. If you have a copy of Word or another application that supports undo and redo, you may wish to experiment with it to get a feel for how this process is handled.</p>

<h3>A New Design Pattern</h3>

<p>The result of this merging of the Command and Memento patterns is a new Undo/Redo pattern; see <a name="rf5"><a href="9706if5.htm">Figure 5</A>. Like all good patterns, Undo/Redo provides a highly generalized solution that is widely applicable to many kinds of applications and programming languages.</p>

<p>The <i>Target</i> object creates a <i>SpecificCommand</i> that will act upon the <i>Target</i>. Alternately, the <i>Client</i> may create the command and pass it to the <i>Target</i>. Either way, the <i>Target </i>is then responsible for setting the command's internal state by calling the <i>SetState()</i> method in the command. The command then internalizes the information that will be needed both to perform the command initially and to completely reverse the effects of that command if an undo action is requested. The <i>Target</i> then passes the command to the <i>Client,</i> which passes it to the <i>UndoStack</i> by calling its <i>Do()</i> method.</p>

<p><i>UndoStack</i> maintains the history of <i>SpecificCommand</i>s and calls the <i>Do()</i>, <i>Undo()</i>, and <i>Redo()</i> methods in each command at the appropriate times. When the <i>UndoStack.Do()</i> method is invoked, the <i>Do()</i> method in the command is executed and the command is pushed onto the history stack. <i>UndoStack</i> also provides the <i>CanUndo()</i> and <i>CanRedo()</i> methods so that the application can determine what actions are currently possible. These methods are typically called by <i>Client </i>at strategic times to enable or disable command buttons in the user interface as appropriate.</p>

<p>The <i>Do()</i> method in <i>Command</i> is analogous to the <i>Execute()</i> method in the Command pattern. <i>Undo()</i> and <i>Redo()</i> are new. <i>Undo()</i> is responsible for restoring the <i>Target</i> to the state it was in prior to the command's initial execution. <i>Redo()</i> usually performs the same operation as <i>Do()</i>; however, it is provided for special cases where re-execution of a command must somehow differ from the initial execution. By default, <i>Redo()</i> simply calls <i>Do()</i>. Minimally, each <i>SpecificCommand</i> must override the <i>SetState()</i>, <i>Do()</i>, and <i>Undo()</i> methods.</p>

<h3>Dealing with Datawindows</h3>

<p><a name="rf6"><a href="9706if6.htm">Figure 6</A> shows the solution I implemented in PowerBuilder. It has a generalized window class containing a datawindow and a number of command buttons to support various undo/redo operations on the datawindow as well as update the database and close the window (see <a href="9706if1.htm">Figure 1</A>). In this design, <i>wa_sSpreadsheet</i> and <i>waBase</i> together are the generalized window <i>Client</i>, <i>udwa</i> is the datawindow <i>Target</i>, <i>nvUndoRedo</i> is the <i>UndoStack</i>, <i>nvaCmd</i> is the abstract <i>Command</i>, and each of <i>nvaCmd</i>'s descendants are the <i>SpecificCommand</i>s. The stack and each of the command classes are defined in PowerBuilder as nonvisual user objects.</p>

<p>This design required some minor deviations from the idealized Undo/Redo pattern. Modifications were needed because PowerBuilder datawindows are not fully object oriented. Datawindows are composed of two tightly bound components: a datawindow object and a datawindow control.</p>

<p>New users of PowerBuilder often confuse these components. A datawindow control is a visual element that we place in a window. It fully supports methods, attributes, inheritance, and encapsulation and thus can be considered a true object-oriented component. </p>

<p>A datawindow object, on the other hand, is fundamentally a data structure -- it does not support methods or inheritance. A datawindow object encapsulates a SQL Select statement, defines the visual presentation used to display and edit a result set, and provides some predefined attributes to specify behavior. Together the object and control provide a view into a particular set of tables and columns from a database and determine the ways users can manipulate and update that data.</p>

<p>When you design a window in PowerBuilder, you drop a datawindow control class onto the window, then specify the associated datawindow object. Since the datawindow objects cannot be extended, you are forced to implement the Undo/ Redo pattern's <i>Target</i> as a datawindow control. This imposes a few restrictions on the design. First, since the visual elements are defined in the datawindow object, you cannot directly control or extend them. Second, datawindows are specifically designed to handle and process many actions internally. Consequently, you must take care when overriding the normal behavior to ensure that you do not cause unexpected results or serious errors.</p>

<p>Fortunately, finding solutions to these problems was not too difficult. Most of the specific commands in <a href="9706if6.htm">Figure 6</A> can be implemented in a straightforward manner by providing alternate methods in the datawindow control ancestor class, <i>udwa</i>. These methods use the appropriate command to later do the required action by calling the original datawindow method provided for that purpose. For example, the <i>InsertRow()</i> function is provided for inserting a new row into a datawindow. To encapsulate this operation, <i>udwa </i>provides an alternate function, <i>ufInsertRow,</i> which passes an <i>nvCmdInsertRow</i> command object to <i>nvUndoRedo</i>. Now <i>nvCmdInertRow </i>is responsible for calling the original <i>InsertRow()</i> method in the datawindow. No other object should ever call <i>InsertRow()</i> directly to perform this command.</p>

<p>Implementation of the other commands is similar. Each has a replacement in <i>udwa</i> for the associated PowerBuilder method -- except <i>nvCmdEdit</i>. Editing a column or field in a datawindow is normally handled directly by the datawindow itself. Encapsulating an edit operation could be done by capturing the <i>editchanged</i> and <i>itemchanged</i> events, creating a command object, forcing the datawindow to reject the user's actions, then having the command object apply the edit, but this would be difficult and inefficient. Instead, <i>udwa</i> simply creates an <i>nvCmdEdit </i>instance and passes it to the undo stack <i>nvUndoRedo</i> whenever the user makes the first change to any particular field in the associated datawindow object. Unlike the other commands, however, <i>nvCmdEdit</i> simply records user edits -- it does not attempt to control user actions. As further changes are made to that same field, <i>udwa</i> will notify the edit command by calling the <i>ufUpdate()</i> function so that it can update the value it stores. This continues until the user begins working in a new field, then the process repeats with the new edit command.</p>

<p>Since the <i>ufDo()</i> function in <i>nvCmdEdit</i> acts only as a passive observer, however, the <i>ufRedo()</i> function has to be overridden to properly support redo. This is the only kind of command that requires an alternate implementation for redo -- all others simply use the default callback to <i>ufDo() </i>as defined in the command ancestor.</p>

<h3>Creating Specialized Windows and Commands</h3>

<p>You can easily incorporate undo/redo in your own applications. The <i>waSpreadsheet</i> ancestor window provides a fully working default implementation that has been rigorously tested. The design of <i>waSpreadsheet</i> is documented in <a name="rf7"><a href="9706if7.htm">Figure 7</A>. To use <i>waSpreadsheet</i>, follow these steps:</p>

<p>1. Place UNDOREDO.PBL in your library path.</p>

<p>2. Change the declaration of the default global-error variable type to <i>nv_error</i> using the Default Global Variables option of the Edit menu in the application painter.</p>

<p>3. Create each new window by inheriting from <i>wa_spreadsheet</i>.</p>

<p>4. Create a datawindow object and place it in the provided <i>dw_spreadsheet</i> datawindow control for each window.</p>

<p>5. Write the code needed to set the transaction object and retrieve the data for the datawindow in the open event of each window. (You must use <i>SetTransObject()</i>; do not use <i>SetTrans(),</i> as it is not supported by <i>udwa</i>.)</p>

<p>Your new window will automatically support full undo and redo capabilities for edit, insert, copy, delete, and column sorting (the user may sort on any column by clicking the right mouse button over a column header label). Additionally, <i>waSpreadsheet</i> provides automatic support for database updates and window closing. If the user has made any unsaved changes, <i>waSpreadsheet</i> will prompt the user with a standard "Save changes? Yes, No, Cancel" message.</p>

<p>Most real-world applications will need some customized processing. You may override or extend any of the methods that <i>waSpreadsheet</i> provides. Typically, you might want to change the way database updates are handled by overriding <i>ufUpdate()</i>, or you might provide customized command handling.</p>

<p><a name="rf8"><a href="9706if8.htm">Figure 8</A> shows how to create a customized command and associate it with your window. First, you must create a new nonvisual user-object class using the User Object painter and inheriting from the appropriate command. In the sample application shown in <a href="9706if1.htm">Figure 1</A>, I extended the <i>ncCmdDeleteRow </i>command to pop up an "Are you sure?" message before deleting a row. To do this, I created a new command, called <i>nvDeletePart</i>, which extends the <i>ufDo()</i> function and pops up the message. If the user confirms the deletion, then <i>ufDo()</i> calls back to its superclass to allow the default action to proceed using <i>super::ufDo()</i>. If users decide not to delete the row, however, the function simply returns 0 to cancel the command. </p>

<p>Returning zero from the do, redo, or undo functions of any command tells the stack that the command was not performed. Returning a negative value indicates that the command failed and the stack will respond by generating an error. If the command completes successfully, it must return a positive value that is expected to be the current row in the datawindow. </p>

<p>Next, you must associate the command with the new window. You tell <i>w_pwParts</i> to use the extended <i>nvCmdDeletePart</i> command by overriding the <i>wfDeleteRow() </i>function; see <a href="9706if8.htm">Figure 8</A>. This function must be defined with the same parameter and return type declarations used in <i>waSpreadsheet</i>  -- failure to properly define the function will result in incorrect operation. The simplest way to override one of the command functions is to copy the code from <i>waSpreadsheet</i>, paste it into your new window, and make the required changes.</p>

<p>In a real application, you may need to extend the commands in more complex ways. For example, in an application I recently developed using this architecture, I extended the insert command <i>nvCmdInsert</i> to prefill some hidden fields after inserting a new row. More interesting, however, was a window that required the user to select an item from a list in a pop-up window, and prefilled the foreign key columns with the selected information. </p>

<p>Both of these cases required that I override the <i>ufSetup()</i> and <i>ufDo()</i> functions in the extended commands. The <i>ufSetup()</i> functions were extended to add the additional state information needed to perform the commands, and the <i>ufDo()</i> functions added the necessary functionality in much the same way that this was done for <i>nvCmdDeletePart</i>.</p>

<h3>Conclusion</h3>

<p>Design patterns simplify the development and documentation of reusable components. By combining design patterns in innovative ways, you can quickly create new patterns that are robust and easily understood.</p>

<p>The example application I have provided demonstrates PowerBuilder's ability to support these designs. This example implements a highly generic and widely applicable component that you can incorporate directly into your applications with little effort. Windows you develop using the simple steps I've outlined will automatically support the unlimited undo and redo features this component provides. By incorporating undo/redo in your applications, you can bring a new level of protection and enjoyment to your users. And your users will thank you for this.</p>

<h3>Comments</h3>

<p>The source code identifiers used in this article differ slightly from the actual identifiers in the sample code. I have removed the underscores normally used by PowerBuilder naming conventions to enhance readability. In all cases, the actual identifier name includes an underscore between each name part. For example, the actual source code name of <i>nvCmdEdit </i>is <i>nv_cmd_edit.</i></p>

<h3>References</h3>

<p>Beck, K. and R. Johnson. "Patterns Generate Architectures." <i>ECOOP '94 Proceedings</i>. Bologna, Italy: Springer-Verlag Lecture Notes in Computer Science #821. July 1994.</p>

<p>Coplien, J. and D. Schmidt, eds. <i>Pattern Languages of Program Design</i>. Reading, MA: Addison-Wesley, 1995.</p>

<p>Gamma, E., R. Helm, R. Johnson, and J. Vlissides. <i>Design Patterns: Elements of Reusable Object-Oriented Software</i>. Reading, MA: Addison-Wesley, 1995.</p>

<p>Nielsen, M. and N. Abdo. "Applying Design Patterns to PowerBuilder." San Mateo, CA: <i>Dr. Dobb's Journal</i>, June 1996.</p>

<p><b>DDJ</b></p>

<p></p>

<p></p>

<p></p>

<p></p>

<p></p>

<p></p>

<p></p>

<p></p>


<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
