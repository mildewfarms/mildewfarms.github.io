<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal June 1997: SBI: The Small Basic Interpreter</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>SBI: The Small Basic Interpreter</h1>

<p><i>Dr. Dobb's Journal</i> June 1997
</p>
<h2>Adding Visual Basic scripting to your VB applications</h2>

<h3>By Steve Reichenthal and Tom Bennett</h3>

<I>Steve works at Boeing North American and teaches object-oriented programming at California State University, Fullerton. He can be reached at sreich@titan.fullerton.edu. Tom, who owns Polar Engineering and Consulting, can be contacted at http://www.kenai.com or at 907-776-5509.</I>

<hr>

<p>With the Internet's increasing ability to provide a complete interactive experience, scripting languages such as JavaScript and VBScript (along with their corresponding interpreter engines) have received lots of attention. But the Web isn't the only place to find scripting -- it's also a core part of desktop applications like Microsoft Word, Excel, and Access. In fact, the VBA (Visual Basic for Applications) engine lies at the heart of almost all of Microsoft's software.</p>

<p>Although interpreted code typically runs slower than compiled code, it can give your applications several advantages. First, you can promote key functionality to the run-time domain. Run-time programmability gives you the latest possible binding, which results in the ultimate flexibility. Users instantly gain the capability to modify a program's functionality. Scripts also bridge the gap between code and data. When you put scripts into databases, plain files, or remote sites, programs suddenly take on different characteristics, and changes to your application can take place without having to recompile. If your program was written in Visual Basic, having a Visual Basic scripting language also makes it easier to design and maintain your code -- you can selectively choose which code to put into the run-time domain. Microsoft thought of all these things when it developed its Office applications with the underlying COM (Component Object Model) mechanism. </p>

<p>In this article, we'll share the capabilities of COM that make it easier to write a scripting language. We'll present the Small Basic Interpreter (SBI) -- an engine that interprets a significant subset of Visual Basic.  The complete SBI system, which you can immediately use and extend, is available electronically (see "Availability," page 3) and at http://www.kenai.com/. </p>

<h3>Scripting Options</h3>

<p>If you want to provide scripting in an application, you have several options, including JavaScript, VBA, and the like. However, you'll have to talk with the vendors about licenses, which usually have usage limitations, involve royalties, and cost money. </p>

<p>You can also use a VBA-compatible library such as the Sax Basic Engine, an OCX control you drop onto a Visual Basic form or MFC window. It gives you VBA with minimal limitations and no royalties -- for only a few hundred dollars. Its user interface includes a source-code editor with an integrated, step-mode debugger. </p>

<p>Polar Engineering designed both the Sax Basic Engine and SBI. SBI serves two primary purposes. First, it demonstrates the power of VB's general polymorphism mechanism, which makes it easy to implement the Interpreter design pattern (see <i>Design Patterns</i>, by Erich Gamma and others, Addison-Wesley, 1994). It also demonstrates a DLL called the InvokeMethod Library that makes it easy for VB applications to tap into COM. You can download the InvokeMethod library, register it in the Registry, and add the library to a VB project using the Tools|References dialog in VB. It gives your VB app the ability to manipulate an object's methods using strings.</p>

<h3>SBI Characteristics</h3>

<p>SBI, which implements a simple version of the VB syntax, consists of language control structures, expressions, and built-in functions/instructions.</p>

<p>SBI implements a useful subset of VB's language control structures. Code passed to <i>SbiEngine</i>'s <i>RunThis</i> method must contain a Sub Main; see <a name="rl1"><a href="9706f.htm#l1">Listing One</A> (<i>SbiEngine</i> is the public interface exposed by the SbiDll32.DLL. <i>SbiEngine</i> has two methods and three properties; see <a name="rt1"><a href="9706ft1.htm">Table 1</A>.) No other procedure definitions are allowed. Variables are declared automatically and arrays are not supported.</p>

<p>As <a name="rt2"><a href="9706ft2.htm">Table 2</A> shows, SBI's expressions include nearly all of the normal VB capabilities. Complex expressions are allowed. SBI also provides most of the power that VB's built-in functions and instructions provide; see <a name="rt3"><a href="9706ft3.htm">Table 3</A>.</p>

<p>A set of VB class modules implements SBI. <a name="rf1"><a href="9706ff1.htm">Figure 1</A> illustrates the Interpreter design pattern used in the SBI. Before using the interpreter, you can optionally create some VB classes to use as extension objects. All of the public members (methods, properties) of your extension objects become global variables and methods to the script code. Next, create an instance of <i>SbiEngine</i> and call its <i>AddExtension</i> method to add each extension. The first parameter to <i>AddExtension</i> is an empty string in SBI. However, you could improve it so that it works like the Sax Basic Engine's <i>AddExtension</i> method, which lets you pass a name such as "MyClass" to make your extensions behave like objects. Now you're ready to load the script from a database or wherever, and pass it to the engine by calling <i>RunThis</i>. Internally, the engine goes through two main steps. </p>

<p>It first creates a parser that translates the entire script, including extensions, into a hierarchical collection of <i>SbiObject</i>s. Each <i>SbiObject</i> subclass represents a grammar rule. To implement the parser's recursive descent mechanism, a parsing subroutine also exists for each grammar rule. These subroutines further contain a <i>Select</i> statement for each token fetched from the code stream. Whenever the parser detects a call to a method on an extension object, the parser checks that such a method exists, then generates an <i>SbiFunctionFactorOp</i> object. (It checks for the method's existence by calling <i>VirtualGetIDsOfNames</i> in the <i>InvokeMethod</i> library and checking for an error.) Each <i>SbiFunctionFactorOp</i> object stores a reference to the language extension, the method ID, type of method invocation (<i>Function</i>, <i>Sub</i>, <i>Property</i>) and other <i>SbiObject</i>s representing the arguments of the call. The parse method returns an <i>SbiBlock</i> that contains a collection of <i>SbiObject</i>s corresponding to the statements in the block. To execute the code, the engine calls <i>Execute</i> on the block, which in turn calls <i>Execute</i> on all of the statements, which also call <i>Execute</i> as necessary. The <i>Execute</i> method takes as a parameter an <i>SbiController,</i> which maintains the execution state (the run-time stack). The controller also has methods used by <i>SbiObject</i>s for invoking methods on extensions.</p>

<h3>Looking Under SBI's Hood</h3>

<p>Even though VB does not support inheritance, it can still be used in the design of a VB class library. Since all VB classes are descended from <i>Object</i>, you can use an inheritance tree. There are 18 classes used to implement the SBI; see <a name="rf2"><a href="9706ff2.htm">Figure 2</A>. There are 5 abstract classes. The abstract classes are not implemented, but are used to classify the classes.</p>

<p>All descendants of the <i>SbiObject</i> abstract class implement <a name="re1"><a href="9706fe1.htm">Example 1</A>(a). These classes implement the executable objects in the SBI class library. All descendants of the <i>SbiAdicOp</i> abstract class implement <a href="9706fe1.htm">Example 1</A>(b). These classes implement the monadic and dyadic operators in expressions. Operator precedence affects the order in which operators are evaluated in expressions. All descendants of the <i>SbiFactorOp</i> abstract class implement <a href="9706fe1.htm">Example 1</A>(c). These classes implement the factors in expressions. All descendants of the <i>SbiStmt</i> class implement <a href="9706fe1.htm">Example 1</A>(d). The classes in <a name="rt4"><a href="9706ft4.htm">Table 4</A> implement the executable statements.</p>

<h3>Converting Code to Executable Objects</h3>

<p>Parsing the code is done in two steps: As the text is tokenized, the tokens are recognized and the appropriate executable objects are generated. Tokenizing extracts the VB identifiers and operators from the code string. This simplifies the parsing logic since tokens (words) can be examined one at a time. SBI's tokenizing is sped up by using a number of tables (arrays) that can be indexed by number. VB's collections are used for symbol lookup.</p>

<p>As the code is being parsed, executable objects are emitted from the parser. These objects are created to represent the appropriate action that the controller should take.</p>

<p>Once the entire code string has been parsed, it is packaged up as a single <i>SbiBlock</i> object that contains the list of statements. <i>SbiBlock</i>'s <i>Execute</i> method is then called to execute the code.</p>

<h3>Polymorphic Execution</h3>

<p>The <i>SbiController</i> object implements a stack machine. Most interpreters are implemented as stack machines, because that is an easy way to manage partial expressions and nested execution. The <i>Execute</i> method of every executable object is passed a reference to the <i>SbiController</i>. This allows the executable object to push or pop values from the controller's stack.</p>

<p><i>SbiMonadicOp</i> implements the monadic operators +, -, and Not. It is a good example of how the <i>Execute</i> method is implemented. The definition of a monadic operator determines what the <i>Execute</i> method needs to do. As <a name="rl2"><a href="9706f.htm#l2">Listing Two</A> illustrates, monadic operators replace the top value on the stack with the appropriate result.</p>

<h3>Virtual Invocation</h3>

<p>One weakness of VB is its inability to call methods/properties of an object by providing a string expression for the name. Normal VB syntax requires that the name be an identifier (like the name of a variable) and it can't be adjusted at run time. One solution is to make a <i>Select Case</i> statement and call each method explicitly. This assumes, however, that the names of all the methods are known at compile time.</p>

<p>Without a solution to this problem, SBI could not add extensions to the language. Fortunately, the InvokeMethod Library from Polar Engineering and Consulting (http://www.kenai.com/polar/) comes to the rescue. It is an OLE DLL written in C++ that adds some very useful capabilities to VB. Most importantly, it allows SBI to call methods/properties by name. <i>SbiController</i>'s <i>InvokeName</i> method provides the necessary glue to call an object's method/property with a string value as its name (<a name="rl3"><a href="9706f.htm#l3">Listing Three</A>), which in turn makes implementing <i>SbiMethOp</i>'s <i>Execute</i> method straightforward (see <a href="9706f.htm#l4">Listing Four</A>).</p>

<h3>Conclusion</h3>

<p>SBI does not execute code as fast as VB. The simple timing test in <a name="re2"><a href="9706fe2.htm">Example 2</A> was run on a Pentium 120 in three different environments: VB, Sax Basic/WinWrap Basic, and SBI. <a name="rt5"><a href="9706ft5.htm">Table 5</A> presents its results. Even at 1/15th the speed of VB, having the ability to execute strings of code at run time can be very useful.</p>

<p>Executing code at run time has two potential pitfalls: First, the code may not be syntactically valid; second, the code may cause a run-time error. In both cases, SBI returns the errors to the calling application via its <i>Error</i> properties. It is the application's responsibility to decide what action, if any, needs to be taken.</p>

<p>Additional control structures could be added to the SBI. This is not as easy as adding new keywords by using <i>AddExtension</i>. To add a new control structure, new classes must be added to the SBI that implement its execution. Also, <i>SbiParser</i>'s <i>ParseStmt</i> method would need to be modified to parse the new control structure.</p>

<p><b>DDJ</b></p>

<H4><a name="l1">Listing One</H4>

<pre>Sub Main    ...
End Sub
[Let] var = expr
[Let] obj.prop[(args]) = expr
[Let] obj!index = expr
Set var = expr
Set obj.prop[(args]) = expr
Set obj!index = expr
func [args]
obj.method [args]
Call func[(args)]
Call obj.method[(args)]
If expr Then
    ...
[Else
    ...]
End If
While expr
    ...
Wend
For var = expr To expr _
          [Step expr]
    ...
Next [var]
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>' push (monadicop pop)Sub Execute _
  (Controller As SbiController)
  Dim Value As Variant
  Controller.PopValue Value
  Select Case m_OpNum
  Case SbiPosOpNum ' +
    Value = Value + 0
  Case SbiNegOpNum ' -
    Value = -Value
  Case SbiNotOpNum ' Not
    Value = Not Value
  End Select
  Controller.PushValue Value
End Sub
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>Sub InvokeName(_    ByVal Obj As Object, _
    Name As String, _
    InvokeType As Integer, _
    Exprs As Collection, _
    Optional Result As Variant)
  Dim N As Integer
  Dim Args() As Variant
  If Not Exprs Is Nothing Then
    ' evaluate all of the exprs
    ' place results in Args
     ReDim Args(1 To _
       Exprs.Count) As Variant
     Dim Expr As SbiExpr
     For Each Expr In Exprs
       Expr.Execute Me
       N = N + 1
       PopValue Args(N)
     Next Expr
   End If
  ' call method/prop by name
   VirtualInvokeByName
     Obj, _
     Name, _
     InvokeType, _
     Args, _
     Result
End Sub
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>Sub Execute _  (Controller As SbiController)
  m_FactorOp.Execute Controller
  Dim Value As Variant
  Controller.PopValue Value
  Dim Obj As Object
  Set Obj = Value
  Select Case m_InvokeType
  Case imcInvokeMethod + _
       imcInvokePropertyGet
    Controller.InvokeName _
      Obj, _
      m_Method, _
      m_InvokeType, _
      m_Exprs, _
      Value
    Controller.PushValue Value
  Case Else
    Controller.InvokeName _
      Obj, _
      m_Method, _
      m_InvokeType, _
      m_Exprs
  End Select
End Sub
<P>
<a href="#rl4">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
