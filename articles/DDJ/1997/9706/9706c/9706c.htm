<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal June 1997: Design Guidelines for Is-A Hierarchies</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Design Guidelines for Is-A Hierarchies</h1>

<p><i>Dr. Dobb's Journal</i> June 1997
</p>
<h2>Using the principles of logic to improve class libraries</h2>

<h3>By John A. Grosberg</h3>

<I>John, a principal staff engineer for Motorola, is currently on the team developing satellite software for the Iridium communication system. He can be reached at grosberg@email.mot.com.</I>

<hr>

<p>When developing object-oriented designs, one of your goals is to define a set of classes that are related hierarchically through inheritance. One school of thought, call it the modeling school, holds that each class in an object-oriented design should represent a concept from the problem domain and that a class inheritance hierarchy should model the "is-a" relationships among the concepts. (Two concepts participate in an "is-a" relationship if every instance of one "is an" instance of the other. For example, every instance of <i>Dog</i> is an instance of <i>Animal</i>.) The second school of thought, which I'll call the "implementation-oriented" school, holds that inheritance is a convenience for the reuse and extension of class behavior.</p>

<p>Both viewpoints are valid, and each is useful in its appropriate phase of the software-development cycle. The modeling point of view tends to be most helpful in the earlier phases of development (analysis and top-level design, for instance). The implementation approach tends to prevail in the later phases (detail design and code). </p>

<p>In this article, I'll focus on the modeling viewpoint, examining issues that are often overlooked when this viewpoint is applied. In doing so, I'll work with two kinds of diagrams: Venn diagrams and Object Models. Venn diagrams are traditionally used to show logical relationships among concepts. The Object Model was developed by James Rumbaugh et al. in <i>Object-Oriented Modeling and Design</i> to show relationships among classes and instances. Venn diagrams help explain the logic behind the design principles; Object Models show their application to OOD. </p>

<h3>The Problem</h3>

<p><a name="rf1"><a href="9706cf1.htm">Figure 1</A> is a Venn diagram representing a single class (conceptual) hierarchy. The rectangular box represents the "universe," the class of all classes of interest to us. You could think of it as a context diagram -- it defines the scope of our interest. In this case, the universe is rectangles. The circular region serves to isolate a particular part, or subclass, of that universe for attention. The Venn diagram is a conceptual, or logical, map of the problem domain.</p>

<p>Any object or instance we discuss belongs to some compartment in the diagram. Any rectangle that is a square belongs inside the circle, any that is not a square belongs outside. Think about how you would implement this diagram in an object-oriented language. Typically, the first attempt would be to define two classes, <i>Rectangle</i> and <i>Square</i>, with <i>Square</i> as a subclass of <i>Rectangle</i>. In <a name="rf2"><a href="9706cf2.htm">Figure 2</A>, an Object Model of this, the square-cornered boxes represent classes, the line connecting the boxes indicates they are related, and the empty triangle indicates the relationship is "is-a." The triangle always points to the superclass. The round-cornered boxes represent instances. The arrows point to the class to which an instance belongs. <a name="rl1"><a href="9706c.htm#l1">Listing One</A> shows how <a href="9706cf2.htm">Figure 2</A> might be implemented in C++.</p>

<p><a href="9706c.htm#l1">Listing One</A> looks reasonable, but has three problems:</p>

<ul>
<li>Each <i>Square</i> is carrying around a <i>length</i> and <i>width</i>, when it really only needs a single value, since <i>length</i> and <i>width</i> are always equal.   <li>It is possible to create a <i>Square</i> instance, and then, using the inherited <i>set_length</i> and/or <i>set_width</i> member functions, make the <i>length</i> and <i>width</i> unequal, violating the definition of a square. 
  <li>A simpler calculation is possible for a <i>Square</i>'s perimeter (4&times;side) but can only be implemented (inelegantly) by selecting either <i>length</i> or <i>width</i> as a stand-in for <i>side</i>.
</ul>

<p>These problems are not incidental to this particular example. They are the result of an incorrect mapping of the Venn diagram into an Object Model. This mapping arises from an inadequate understanding of the Venn diagram and the "is-a" relationship.</p>

<h3>A Closer Look</h3>

<p>The left-hand region of <a name="rf3"><a href="9706cf3.htm">Figure 3</A> repeats <a href="9706cf1.htm">Figure 1</A>, adding some dots to represent instances. Since the dots are inside the box called <i>Rectangle</i>, every dot represents some kind of <i>Rectangle</i>. The dots inside the circle represent instances of <i>Square</i>, but what do the other dots represent? They are in the area that is outside <i>Square</i> but inside <i>Rectangle</i>. Clearly, they are rectangles, but since they can never be guaranteed to have equal lengths and widths, they must belong to the class of rectangles that are not squares. You begin to see that this diagram actually represents three classes, not two: all rectangles, rectangles that are squares, and rectangles that are not squares. The right side of <a href="9706cf3.htm">Figure 3</A> illustrates this.</p>

<p>Although there are three regions (classes), a dot (an instance) must belong to either the <i>Square</i> region or its complement. Further, since both of these regions are subdivisions of the universe region, each instance also belongs to the universe. The universe class itself can have no instances that are not also members of either <i>Square</i> or <i>NotSquare</i> because these two classes completely cover the universe with no gaps or overlap.</p>

<h3>The Solution</h3>

<p>To correctly represent the Venn diagram in an Object Model, you must use all three classes; see <a name="rf4"><a href="9706cf4.htm">Figure 4</A>. Since the universe class cannot have its own instances, you make it an abstract class, called <i>ARectangle</i>, with the "A" standing for "Abstract." Alternative names for the abstract class might be <i>Rectangleness</i> or <i>AnyRectangle</i>. The class <i>Square</i> and its complement become concrete classes subordinate to <i>ARectangle</i>. The complement, "Not Square," is given the name <i>Rectangle</i> because all you know about any instance that is not a <i>Square</i> is that it is a <i>Rectangle</i>. Alternative names for the complement class might be <i>GenericRectangle</i> or <i>OtherRectangle</i>. A good way to think of the concrete <i>Rectangle</i> class is that it is the class of <i>Rectangles</i> that cannot be guaranteed to be <i>Squares</i>, that is, to have equal widths and lengths. </p>

<p>What about a <i>Rectangle</i> instance that has both sides equal? Is it a <i>Square</i>? In a geometrical or mathematical context, a rectangle becomes a square, incurring all the properties of a square, whenever its length becomes equal to its width. This means that in <a href="9706cf3.htm">Figure 3</A>, a dot can cross the boundary between <i>Square</i> and <i>Rectangle</i> if its attributes change. By contrast, in a statically typed language, such as C++, an instance's type does not change merely because the values of its attributes (member data) change. After all, there is more to a class than its data attributes: It also has operations or functions that cannot change when the data changes. Thus, even if a <i>Rectangle</i>'s sides happen to be equal, its type doesn't change to <i>Square</i> -- once a <i>Rectangle</i>, always a <i>Rectangle</i>. This means that in <a href="9706cf3.htm">Figure 3</A>, for a statically typed language, the dots cannot move across a boundary. </p>

<p>Nevertheless, the principles advocated here are not affected by whether or not the dots can cross the boundary, because at any one time, a dot must be in one region or the other -- it can't be in both. Thus, if you had a dynamically typed language, where an instance's type could change depending on its attribute values, the Venn diagram of <a href="9706cf3.htm">Figure 3</A> would still map to the Object Model of <a href="9706cf4.htm">Figure 4</A>. You can see in <a name="rl2"><a href="9706c.htm#l2">Listing Two</A>, which is an implementation of the improved Object Model of <a href="9706cf4.htm">Figure 4</A>, that the three problems mentioned earlier have disappeared. <i>Square</i> is not carrying around any extra data or function baggage, and both concrete classes can be extended or specialized as much as desired without affecting each other or their base class. A <i>Square</i> can no longer be given unequal sides. You have collected what is truly common to both classes and factored it into the abstract base class.</p>

<p>In this code you now have a true universe class, <i>ARectangle</i>, which, while it can't have separate instances of its own, can be used to create pointers and/or references to instances of its derived classes. Thus, all instances of <i>ARectangle</i> must be either instances of <i>Rectangle</i> or of <i>Square</i> as in the logic and the Venn diagrams. The abstract class <i>ARectangle</i> is the point in our class hierarchy at which polymorphism is centered so that a call to the member function <i>area()</i> via an <i>ARectangle</i> pointer that points to an instance of <i>Square (pAR-&gt;area())</i> will get the special calculation appropriate to a <i>Square</i>. Likewise, a call to a similar pointer that indicates a <i>Rectangle</i> will invoke the calculation appropriate to that class.</p>

<h3>Abstract and Concrete Classes</h3>

<p>Thus far, I've discussed the construction of a class hierarchy consisting of only two types of classes, which are "duals," or polar opposites: </p>

<ul>
<li>Classes that have subclasses but no instances, which are called "abstract classes."   <li>Classes that have instances but no subclasses, which are called "concrete classes." To properly implement an "is-a" hierarchy, those are the only types of classes allowed.
</ul>

<p></p>

<p>An abstract class defines a family of classes. It provides a single place to hold the common features of its "descendants." Common interfaces and behaviors are united in the function members of the abstract class. Common attributes are collected in the data members of the abstract class. These interfaces, behaviors, and attributes are shared by the abstract and concrete descendants of the abstract class through the inheritance mechanism. In C++, an abstract class has at least one pure virtual function.</p>

<p>A concrete class defines a family of object instances. It adds the behaviors and attributes that are unique to a group of instances to the behaviors and attributes inherited from its parent abstract classes. In C++, a concrete class has no virtual functions except those that it inherits or overrides. </p>

<p>In an "is-a" hierarchy, using a "mixed class" (one that has both instances and subclasses) is forbidden because it leads to the difficulties encountered earlier. C++ allows you to subclass a concrete class, but doing so is inconsistent with implementing a true "is-a" hierarchy.</p>

<h3>The Mapping Rules</h3>

<p>You can codify the mapping from Venn diagram to Object Model to code into two rules that apply to "is-a" hierarchies of any complexity:</p>

<ul>
<li>Rule 1. In a Venn diagram, every region that includes (or overlaps) another region will become two classes on the Object Model. One of those classes will be an abstract supertype of the other. The subtype will be concrete.   <li>Rule 2. Every region that does not include or overlap another region will map to a single concrete class that is a subclass of the abstract class(es) mapped from the immediately including region. 
</ul>

<p>A Venn diagram with two subclasses permits three possible relationships: </p>

<ul>
<li>Case 1. The two subclasses are mutually exclusive.   <li>	Case 2. One subclass includes the other. 
  <li>Case 3. The two subclasses overlap. 
</ul>

<h3>Single Inheritance</h3>

<p>The first two cases are examples of single inheritance, which is said to hold when a subclass is subordinate to only one immediate parent class. <a name="rf5"><a href="9706cf5.htm">Figure 5</A> shows both the Venn diagram and the Object Model for Case 1. (In this and subsequent figures, the prefix "A" emphasizes that a class is an abstract class.) From Rule 1, since <i>Animal</i> contains other classes (<i>Dog</i> and <i>Cat</i>), it must become two classes on an Object Model -- one an abstract superclass (<i>AAnimal</i>) and one a concrete subclass (<i>Animal</i>). The other subclasses, <i>Dog</i> and <i>Cat</i>, contain no subclasses and therefore become concrete classes by Rule 2. Since the Venn diagram shows them within the <i>Animal</i> region, they are drawn as subclasses of <i>AAnimal</i>. Concrete classes are always "leaves" of the class hierarchy. Abstract classes are never leaves.</p>

<p>Rule 1 reminds you that the identified subclasses (<i>Dog</i>, <i>Cat</i>, and <i>Animal</i> on the Venn diagram) are not the only subclasses -- there is usually a "difference class." The difference class is the subclass on a Venn diagram that remains after all named subclasses are subtracted from a superclass. The reason for staying aware of the difference class is so that you do not confuse it with its superclass, as in <a href="9706cf2.htm">Figure 2</A>. </p>

<p>In <a href="9706cf5.htm">Figure 5</A>, the difference class is (<i>(not Dog) and (not Cat)</i>). In the Object Model of <a href="9706cf5.htm">Figure 5</A>, I called it "Animal." Members of that class can be thought of as "Animals that cannot be guaranteed to be either a Dog or a Cat." Notice that as you add classes, the meaning of the difference class <i>Animal</i> changes. For example, if we add Gerbil as a subclass of <i>AAnimal</i>, then <i>Animal</i> becomes (<i>(not Dog) and (not Cat) and (not Gerbil)</i>).</p>

<p>In a particular application, if a difference class is null or of no interest, it can be left out. Implementing the difference class is usually necessary when dealing with traditional taxonomies such as geometric shapes (rectangles, squares, and so on), types of numbers (complex, real, rational, and so on), and biological taxonomies as in the current example. If your "is-a" hierarchy does not need it, leave it out. Just make sure you use only abstract and concrete classes, and no mixed classes. </p>

<p>In <a name="rf6"><a href="9706cf6.htm">Figure 6</A>, which illustrates Case 2, there is a three-level class structure. How many classes are there? If you count the difference classes, you get <i>Animal</i>, <i>Mammal</i>, <i>Dog</i>, <i>Mammals</i> <i>that are not</i> <i>Dogs</i>, and <i>Animals</i> <i>that are not</i> <i>Mammals</i>, for a total of five classes. </p>

<p>Following the rules leads you from the Venn diagram in <a href="9706cf6.htm">Figure 6</A> to the Object Model in <a name="rf7"><a href="9706cf7.htm">Figure 7</A>. Note that both <i>Animal</i> and <i>Mammal</i> have become pairs of classes, one abstract and one concrete.</p>

<h3>Multiple Inheritance</h3>

<p>Turning to Case 3, the Venn diagram in <a name="rf8"><a href="9706cf8.htm">Figure 8</A> shows two overlapping classes. An instance of the intersection class has characteristics of both <i>Mammal</i> and <i>EggLaying Animals</i>. This is an example of multiple inheritance, which is said to hold when a subclass has more than one immediate parent. For the curious, actual biological examples (concrete subclasses) of the <i>EggLayingMammal</i> class are the <i>platypus</i> class and the <i>spiny anteater</i> class (I'm no expert -- I had to look it up). </p>

<p>In the Object Model, the triangle is filled in to indicate that the subclasses are not mutually exclusive -- there is overlap among at least some of its subclasses. In contrast to the empty triangle, which I used to represent the Exclusive OR relationship, the solid triangle represents the Inclusive OR relationship. The Object Model shows the multiple inheritance of the <i>EggLayingMammal</i> class simply, by connecting the subclass to both of its superclasses. The difference classes <i>Animal</i>, <i>Mammal</i>, and <i>EggLaying</i> are shown, and the abstract classes <i>AAnimal</i>, <i>AMammal</i>, and <i>AEggLaying</i> are added in accordance with the rules.</p>

<p>As an exercise, try drawing the Object Model for the case of multiple inheritance in <a name="rf9"><a href="9706cf9.htm">Figure 9</A>(a). The resulting Object Model has 15 classes, comprising 7 abstract and 8 concrete classes; see <a href="9706cf9.htm">Figure 9</A>(b). If it will help you to have meaningful classes in the figure, then try letting W be <i>Animals</i>, X be <i>LandAnimals</i>, Y be <i>AirAnimals</i>, and Z <i>WaterAnimals</i>. You can easily name animals for each of the concrete classes. This might be a case where the difference class W is null.</p>

<h3>Rationalizing Legacy Hierarchies</h3>

<p>It may happen that you have a class library that is not in the form prescribed here, but you want to extend its hierarchy. And because the library is provided by a third party, or because existing code depends on the library, you can't make changes. How can you create a "rationalized" or "fully-factored" library (for example, one that follows the rules described earlier) without revising the existing one?</p>

<p>Let's take the first example of this article (<a href="9706cf1.htm">Figures 1</A> and 2 and the C++ code in <a href="9706c.htm#l1">Listing One</A>) as the class library to be rationalized. You already know that its Object Model should look like <a href="9706cf4.htm">Figure 4</A>. So, you can construct a class library based on <a href="9706cf4.htm">Figure 4</A>, and carry the existing implementations into the new library using private inheritance as in <a name="rl3"><a href="9706c.htm#l3">Listing Three</A>.</p>

<p>From now on, you would use these new classes to develop code instead of the original library classes. I could have derived <i>CSquare</i> privately from <i>Square</i> to inherit <i>Square</i>'s implementation. But I complained earlier that <i>Square</i> was carrying the length and width data members it inherited from <i>Rectangle</i>. To avoid that overhead, I provided <i>CSquare</i> with its own implementation.</p>

<p>Private inheritance is probably the simplest and most efficient way to implement a rationalized hierarchy from an unrationalized one, but you can also use delegation. Delegation means that the new concrete class will have a data member that is an instance of the class whose implementation it is borrowing. <a name="rl4"><a href="9706c.htm#l4">Listing Four</A> shows how to use delegation to implement the <i>CRectangle</i> class.</p>

<h3>Summary</h3>

<p>Inheritance is used to implement "is-a" relationships, but inheritance is not the same thing as an "is-a" relationship. Inheritance is simply a language mechanism with characteristics that can be used for a variety of implementation objectives and given various interpretations. My focus here is on just one of those applications of inheritance -- the "is-a" relationship. The rules advocated here are essential for the "is-a" interpretation of inheritance, but they do not necessarily apply to any of the other uses or interpretations of inheritance. They also aren't intended to preclude the many uses of mixed classes that might be appropriate in implementing working code outside the "is-a" realm. </p>

<h3>References</h3>

<p>Coplien, James O. <i>Advanced C++ Programming Styles and Idioms</i>. Reading, MA: Addison-Wesley, 1992, ISBN 0-201-54855-0.</p>

<p>Lavazza, L., A. Raybould, and J. Grosberg, "Technical Correspondence: Comments on Considering 'class' Harmful," <i>Communications of the ACM</i>, Vol. 36, No. 1, January 1993.</p>

<p>Meyer, Bertrand. <i>Object-Oriented Software Construction</i>. Englewood Cliffs, NJ: Prentice Hall, 1988, ISBN 0-13-629049-3.</p>

<p>----. "The Many Faces of Inheritance: A Taxonomy of Taxonomy," <i>IEEE Computer</i>, May 1996.</p>

<p>Rumbaugh, James, M. Blaha, W. Premerlani, F. Eddy, and W. Lorensen. <i>Object-</i>Oriented Modeling and Design. Englewood Cliffs, NJ: Prentice Hall, 1991, ISBN 0-13-629841-9.</p>

<p>Winkler, J&uuml;rgen F.H., "Objectivism: 'Class' Considered Harmful," <i>Communications of the ACM</i>, Vol. 35, No. 8., August 1992.</p>

<p>Wirfs-Brock, Rebecca, Brian Wilkerson and Lauren Wiener. <i>Designing Object -Oriented Software</i>. Englewood Cliffs, NJ: Prentice Hall, 1990, ISBN 0-13-629825-7.</p>

<p><b>DDJ</b></p>



<H4><a name="l1">Listing One</H4>

<pre>class Rectangle {    public:
        Rectangle(int l, int w):length(l),width(w){}
        void set_length(int l) {length = l;}
        void set_width(int w) {width = w;}
        virtual int area(void){return (length*width);}
        virtual int perimeter(void) {return (2*(length+width));}
    private:
        int length;
        int width;
};
class Square: public Rectangle {
    public:
        Square(int s):Rectangle(s,s){}
        void set_side(int s) {set_length(s); set_width(s)};
};
// Make some instances:
Rectangle R1(3,5);
Square    S1(7);
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>class ARectangle {    public:
        virtual int area(void) = 0;
        virtual int perimeter(void) = 0;    
        virtual ~ARectangle() = 0;      
};
class Rectangle: public ARectangle{
    public:
        Rectangle(int l, int w):length(l),width(w){}
        void set_length(int l) {length = l;}
        void set_width(int w) {width = w;}
        int area(void){return (length*width);}
        int perimeter(void) {return (2*(length+width));}
    private:
        int length;
       int width;
};
class Square: public ARectangle {
    public:
        Square(int s):side(s){}
        void set_side(int s) {side = s;}
        int area(void){return (side*side);}
        int perimeter(void) {return (4*side);}
    private:
        int side;
};
// Make some instances:
Rectangle R1(3,5);
Square    S1(7);
ARectangle *pAR = &amp;S1;
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>class ARectangle {    public:
        virtual int area(void) = 0;
        virtual int perimeter(void) = 0;            
        virtual ~ARectangle() = 0;      
};
class CRectangle: public ARectangle, private Rectangle{
    public:
        CRectangle(int l, int w):Rectangle(l,w){}
        void set_length(int l) {Rectangle::set_length(l);}
        void set_width(int w) {Rectangle::set_width(w);}
        int area(void){return Rectangle::area();}
        int perimeter(void) {return Rectangle::perimeter();}
};
class CSquare: public ARectangle {
    public:
        CSquare(int s):side(s){}
        void set_side(int s) {side = s;}
        int area(void){return (side*side);}
        int perimeter(void) {return (4*side);}
    private:
        int side;
};
// Make some instances:
CRectangle R1(3,5);
CSquare    S1(7);
ARectangle *pAR1 = &amp;S1;
ARectangle &amp;rAR2 = R1;
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>class CRectangle: public ARectangle{    public:
        CRectangle(int l, int w):rect(l,w){}
        void set_length(int l) {rect.set_length(l);}
        void set_width(int w) {rect.set_width(w);}
        int area(void){return rect.area();}
        int perimeter(void) {return rect.perimeter();}
    private:
       Rectangle rect;
};
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
