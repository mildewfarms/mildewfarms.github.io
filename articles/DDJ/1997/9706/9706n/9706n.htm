<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal June 1997: Symbolic Integration using CLIPS</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Symbolic Integration using CLIPS </h1>

<p><i>Dr. Dobb's Journal</i> June 1997
</p>
<h3>By John Swartz</h3>

<I>John is a programmer/analyst at the Texas Department of Human Services. He can be contacted at alexander.swartz@polaris.dhs.state.tx.us.</I>

<hr>
<p>There are two fundamentally different approaches to integration. Numerical techniques, like those presented by Dann Corbit in "Numerical Integration: From Trapezoids to RMS" (<i>DDJ, </i>"Algorithm Alley," October 1996), always work, but roundoff and other arithmetic errors can make it hard to trust the answers. Conversely, symbolic techniques (the methods you were taught in calculus class) provide exact answers, but they don't always work; for example, <img src="9706nq1.gif" width="29" height="23"> cannot be evaluated symbolically. This month, John Swartz examines techniques for symbolic integration.</p>

<p> -- Tim Kientzle</p>
<HR>
Sidebar:<a name="rs1"> <a href="9706ns1.htm">"CLIPS: C Language Integrated Production System"</A>
<HR>

<p>I recently read a comment by John McCarthy indicating that one of his students, James Slagle, had a program that took three minutes to determine an integral on MIT's IBM 7090 computer. Several searches of library databases and one interlibrary loan later, I read Dr. Slagle's 1961 dissertation "A Heuristic Program that Solves Symbolic Integration Problems in Freshman Calculus, Symbolic Automatic Integrator (SAINT)." One of the approval signatures on the dissertation was Marvin Minsky's.</p>

<p>Slagle's original program was written in LISP, but the source code was not included with the dissertation. Fortunately, his description is quite detailed, and I was able to use it to implement a subset of his system in CLIPS, a "C Language Integrated Production System" (see the accompanying text box for more details on CLIPS).</p>

<h3>The Art of the Integral</h3>

<p>Slagle considered three different solution methods: </p>

<p></p>

<ul>
<li>Standard forms, corresponding to the basic integrals found in first-year calculus texts.  <li>Algorithmic transformations, which are always applicable.
  <li>Heuristics, which may or may not be appropriate. 
</ul>

<p>Although Slagle identified 26 standard forms, I'll focus on the 14 listed in <a name="rf1"><a href="9706nf1.htm">Figure 1</A>.</p>

<h3>Algorithm-like Transformations</h3>

<p>If an integrand is not in standard form, Slagle tries an algorithm-like transformation. An appropriate algorithm-like transformation is a transformation that is the correct next step to bringing the current goal nearer to achievement.</p>

<p><a name="rf2"><a href="9706nf2.htm">Figure 2</A> shows Slagle's eight algorithm-like transformations. My prototype only used the transform in <a href="9706nf2.htm">Figure 2</A>(c).</p>

<h3>Heuristic Transformations</h3>

<p>Slagle's symbolic integration system used trial-and-error to apply a suite of symbolic integration tricks, a concept known as "backtracking." He describes this approach as follows:</p>

<blockquote><p>
A transformation of a goal is called heuristic when, even though it is applicable and plausible, there is a significant risk that it is not the appropriate next step. A transformation may be inappropriate either because it leads no closer to the solution or because some other transformation would be better. The heuristic transformations are analogous to methods of detachment, forward chaining and backward chaining in general AI theory.</p>
</blockquote>

<p>Slagle used ten heuristic transformations (described later) in his dissertation. My prototype only implemented two of them, heuristics b(3) and e. I implemented the heuristics as CLIPS rules. I include all the heuristics in case you want to work further with this problem. </p>

<p>What follows is one continuous, if slightly paraphrased, quotation from Slagle's dissertation:</p>

<p>"a. Transform an elementary function of trigonometric functions.</p>

<p>An integrand (which was not itself generated by a transformation of this type) and which is an elementary function of trigonometric functions; i.e., is of the form elf {sin<i>v</i>, cos<i>v</i>, tan<i>v</i>, cot<i>v</i>, sec<i>v</i>, csc<i>v</i>} is transformed into two or three of the following forms:</p>

<p>1.	elf {sin<i>v</i>, cos<i>v</i>, sin<i>v</i>/cos<i>v</i>, cos<i>v</i>/sin<i>v</i>, 1/cos<i>v</i>, 1/sin<i>v</i>} when the integrand is not already an elementary function of sines and cosines (seventh characteristic);</p>

<p>2.	elf {tan<i>v</i>/sec<i>v</i>, 1/sec<i>v</i>, tan<i>v</i>, 1/tan<i>v</i>, sec<i>v</i>, sec<i>v</i>/tan<i>v</i>} when the integrand is not already an elementary function of secants and tangents (eighth characteristic);</p>

<p>3.	elf {1/csc<i>v</i>, cot<i>v</i>/csc<i>v</i>, 1/cot<i>v</i>, cot<i>v</i>, csc<i>v</i>/cot<i>v</i>, csc<i>v</i>} when the integrand is not already an elementary function of cosecants and cotangents (ninth characteristic).</p>

<p></p>

<p>b. Substitute for a trigonometric function.</p>

<p>The form of the integrand often suggests a substitution for a particular trigonometric function.</p>

<p>1.	When the integrand is an elementary function of sines and cosines (seventh characteristic) and, in fact, is of the form elf {sin<i>v</i>, cos<sup>2</sup><i>v</i>)} cos<sup>2<i>n</i>+1</sup><i>v</i> where elf {sin<i>v</i>, <i>cos<sup>2</sup>v</i>)} is an elementary function of sines and even powers of cosines and where <i>n</i> is an integer. Substitution of <i>u</i>=sin<i>v</i> often transforms the goal into the often simpler subgoal </p>


<p><img src="integ.gif" width="6" height="17"> elf{<i>u</i>, 1-<i>u</i><sup>2</sup>} (1-<i>u</i><sup>2</sup>)<sup><i>n</i></sup> <i>du</i></p>

<p></p>

<p>2.	Similarly when the integrand is of the form elf{cos<i>v</i>, sin<sup>2</sup><i>v</i>} sin<sup>2<i>n</i>+1</sup>, try <i>u</i>=cos<i>v</i>.</p>

<p>3.	Similarly when the integrand is of the form elf{tan <i>v</i> , sec<sup>2</sup> <i>v</i>} try <i>u</i>=tan<i>v</i>.</p>

<p>4.	Similarly when the integrand is of the form elf{cot<i>v</i>, csc<sup>2</sup><i>v</i>}, try <i>u</i>=cot<i>v</i>.</p>

<p>5.	Similarly when the integrand is of the form elf{sec<i>v</i>, tan<sup>2</sup><i>v</i>} tan<sup>2<i>n</i>+1</sup><i>v</i>, try <i>u</i>=sec<i>v</i>.</p>

<p>6.	Similarly when the integrand is of the form elf{csc<i>v</i>, cot<sup>2</sup><i>v</i>} cot<sup>2<i>n</i>+1</sup><i>v</i>, try <i>u</i>=csc<i>v</i>.</p>

<p></p>

<p>c. Substitute for a subexpression whose derivative divides the integrand.</p>

<p>Let <i>g(v)</i> be the integrand. For each nonconstant nonlinear subexpression <i>s(v)</i> such that neither its main connective is MINUS nor is it a product with a constant factor and such that the number of nonconstant factors of the fraction <i>g(v)</i>/<i>s(v)</i> (after cancellation) is less than the number of factors of <i>g(v)</i>, try substituting <i>u</i>=<i>s(v)</i>.</p>

<p>d. Integrate by parts.</p>

<p>For each partition into a product of two factors <i>G</i>*<i>h</i> of an integrand which is partial (eleventh characteristic) such that <i>G</i> <img src="noteq.gif" width="7" height="8"> 1 and such that this procedure, with the allotment of no resources, finds integral(<i>h</i> <i>dv</i>)=<i>H</i>, try integration by parts.</p>

<p>e. Eliminate the middle term of a quadratic subexpression.</p>

<p>For each quadratic subexpression: <i>q(v)</i>=<i>c</i><sub>3</sub>+<i>c</i><sub>2</sub><i>v</i> +<i>c</i><sub>1</sub><i>v</i><sup>2</sup> where <i>c</i><sub>1</sub> and <i>c</i><sub>2</sub> are nonzero constants, eliminate the middle term by the substitution <i>u</i>=<i>v</i>+<i>c</i><sub>2</sub>/2c<sub>1,</sub> which transforms <i>q(v)</i> into <i>c</i><sub>3</sub>-<i>c</i><sub>2<sup>2</sub></sup>/4<i>c</i><sub>1</sub>+<i>c</i><sub>1</sub><i>u</i><sup>2</sup>.</p>

<p>f. Distribute nonconstant sums.</p>

<p>If at least one nonconstant sum occurs as a factor of a product in the integrand, try transforming the integrand by distributing the products with respect to all such sums.</p>

<p>g. Trigonometric substitution</p>

<p>For each quadratic subexpression of the form <i>c</i><sub>2</sub>+<i>c</i><sub>1</sub> <i>v</i><sup>2</sup> where <i>c</i><sub>1</sub> and <i>c</i><sub>2</sub> are nonzero constants:</p>

<p>1.If both <i>c</i><sub>1</sub> and <i>c</i><sub>2</sub> are positive, try the substitution</p>

<BLOCKQUOTE><i>v</i> = <img src="9706nq2.gif" width="37" height="34"> tan <i>u</i>.
</BLOCKQUOTE>

<p>2.If <i>c</i><sub>1</sub> is negative and <i>c</i><sub>2</sub> is positive, try the substitution</p>

<BLOCKQUOTE><i>v</i> = <img src="9706nq3.gif" width="37" height="34"> sin <i>u</i>.
</BLOCKQUOTE>

<p>3.If <i>c</i><sub>1</sub> is positive and <i>c</i><sub>2</sub> is negative , try the substitution</p>

<BLOCKQUOTE><i>v</i> = <img src="9706nq4.gif" width="39" height="34"> sec <i>u</i>.
</BLOCKQUOTE>


<p>h. Expand positive integer powers of nonconstant sums.</p>

<p>If the integrand contains at least one nonconstant sum raised to an integer power <i>n</i>&gt;1, try expanding all such sums.</p>

<p>i. Exponent base.</p>

<p>Suppose the integrand has an exponent base <i>b</i> which is not NIL; i.e., has the form elf {<i>b<sup>n</i><sub>1</sup><i>v</i></sub>, <i>b<sup>n</i><sub>2</sup><i>v</i></sub> ..., <i>b<sup>n<sub>k</sup>v</i></sub>} where <i>n</i><sub>1</sub>, <i>n</i><sub>2</sub>, ..., <i>n<sub>k</sub> </i>are integers. Let <i>g</i> be the greatest common divisor or these integers. Try the substitution <i>u</i> = <i>b<sup>gv</i></sup></p>

<p>j. Rational function of sines and cosines.</p>

<p>When the integrand is a rational function of sines and cosines (sixth characteristic), try substituting <i>u</i>=tan(<i>v</i>/2) which replaces sin <i>v</i> by 2<i>u</i>/(1+<i>u</i><sup>2</sup>) and replaces cos <i>v</i> by (1-<i>u</i><sup>2</sup>)/(1+<i>u</i><sup>2</sup>) and replaces <i>dv</i> by 2/(1+<i>u</i><sup>2</sup>)<i>du</i>. This substitution transforms the integrand into a rational function."</p>

<h3>Code Walkthrough</h3>

<p>My source-code implementation of Slagle's technique (available electronically; see "Availability," page 3) has four sections:</p>

<p></p>

<p>1.	The template section contains the knowledge base. CLIPS uses a LISP-like syntax in which structures and statements are bounded by parentheses.</p>

<p>2.	The utility functions cope with the type constraints of CLIPS. Symbolic and string types are lexemes, which are distinct from the numeric type. These functions perform simple arithmetic on string types.</p>

<p>3.	The rules section contains the executable portion of the program. The rule syntax is more accessible than the Horn clause notation used by Prolog. In CLIPS, the required conditions (hypotheses) precede the implication arrow, which points to the right. The rule actions (conclusions) follow the implication arrow. <a name="rf3"><a href="9706nf3.htm">Figure 3</A> presents the rule syntax. Each rule must be surrounded by parentheses. Each of the rule conditions and actions must be surrounded by parentheses. Single field variables begin with a question mark; for example, "?alfa." Multifield variables begin with a combination dollar-sign question mark; for example, "$?beta." The <i>integrate</i> rule performs a pattern match against the standard integral forms. Execution of this rule means the integration was successful. The <i>integer</i> rule handles the case where the integrand is just an integer. The <i>plusform</i> rule distributes the integral across a sum. The <i>spawn</i> rule activates the transform and heuristic rules when the <i>integrand</i> is a multifield value.</p>

<p>4.	The final section is the initial state rule, which contains an assertion for each standard integral form. The final line of the program is the statement of the problem to be solved. The listing contains statements for three integration problems. The code example is constructed to execute one problem assertion at a time. To disable execution of an assertion, insert a comment-tag (semicolon) in front of the assertion. I toggle out two of these using the semicolon comment tag. The uncommented assertion executes.</p>

<h3>Program Output</h3>

<p>The output corresponds to integrating <a name="rf4"><a href="9706nf4.htm">Figure 4</A>. The dissertation states that the original system successfully accomplished this problem in 18 minutes. I wanted to see how much time my version would take. As you can see from the difference between the start time value and the end time value, the problem took 98 seconds.</p>

<p>I used CLIPS' built-in debugging capabilities to track the integration through its various steps. These are the <i>watch activations</i> and <i>watch facts</i> lines just following the date-time group at the top of the output.</p>

<p>The start of the runstream output shows the initial state rules being asserted. You then see that fact f-16, the problem statement, activates the spawn rule.</p>

<p>You can read down the output listing and watch rules activating and facts asserting until you encounter the "value of integral is" line at the bottom. This is followed by the date time group at the end of the output listing (available electronically).</p>

<p>The difference in the execution times is not the whole story. If my system were fully implemented, execution would take longer due to the system's need to check out more rules. Also my treatment of the algebraic manipulations of the intermediate results is somewhat ad hoc and cursory, and more time would be used here.</p>

<h3>James Slagle's Conclusions</h3>

<p>In the spirit of beginning the second half-century of the information age, it is illuminating to assess some of the conclusions from this 36-year old dissertation.</p>

<p>Under the heading "Natural Intelligence -- pedagogy," Slagle asserted "the integral calculus teacher should teach in detail each of the algorithm-like and heuristic transformations which [characterize the system]. First the student should learn the algorithm-like transformations which he then could apply to solve suitable problems. Then the student should learn and use the heuristic transformations."</p>

<p>Under the heading "Artificial Intelligence -- computer design," he stated "some computers should be designed with symbol manipulating applications in mind, e. g., much computer time and space could be saved if one computer instruction represented the very frequently used symbol manipulating functions, such as, an f-r chain in LISP."</p>

<h3>Conclusion</h3>

<p>Slagle's second conclusion was in fact implemented in the 1980s, resulting in special-purpose LISP machines and the Great AI Stampede. This, as we all know, was followed by the Great AI Bust. My experience has taught me that, except in a very few well defined cases -- communications and graphics--hard-wired solutions to software problems are not the way to go.</p>

<p>His first conclusion is as yet unimplemented. So we don't know if it is true or not. I believe it yet holds some promise. An extension of the implementation presented here, together with more explanation capabilities, would serve to walk a calculus student through some meaty examples and save the lecturer a lot of tutoring time.</p>

<p>Regarding the automation of symbolic integration, I conclude that, based on the rapid prototype presented here, calculus lecturers are still telling their students that automation is not the way to go. It looks like coding up the symbolic integration rules is analogous to the implementation of computer chess. It can be implemented in stages and every year it will improve, but there will always be a case it can't handle.</p>

<p>I hope I have convinced you of the usefulness of the CLIPS language, particularly as a rapid prototyping tool. I continue to be amazed by the power and elegance of this system, especially for the price (CLIPS is free). </p>

<p>Since 1984, Dr. Slagle has been Distinguished Professor of Computer Science at the University of Minnesota.</p>

<h3>Acknowledgment</h3>

<p>Thanks to my associate Brian Lynch, who reviewed this article in detail for me.</p>

<p><b>DDJ</b></p>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
