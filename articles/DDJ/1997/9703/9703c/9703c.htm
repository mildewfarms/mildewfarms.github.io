<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal March 1997: Distributed Active Objects</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Distributed Active Objects</h1>

<p><i>Dr. Dobb's Journal</i> March 1997
</p>
<h2>Using Obliq for collaborative and distributed apps</h2>

<h3>By Marc H. Brown and Marc A. Najork</h3>

<I>Marc Brown and Marc Najork are members of the research staff at Digi-tal Equipment Corp.'s Systems Re-search Center in Palo Alto, CA. They can be reached at mhb@src.dec.com and najork@src.dec.com, respectively.</I>

<hr>

<p>One of the most exciting recent developments in web-browser technology involves active objects, which make it possible for a browser to download a program, execute it, and display the program's user interface in a web page. Sun's HotJava browser with Java applets pioneered active objects, showing web pages with a wide range of content, from bouncing balls to spreadsheets to simulated science experiments. Most browsers now offer some form of active objects, written in a variety of languages.</p>

<p>In this article, we'll describe distributed active objects that can communicate with other active objects located on different machines across the Internet. High-level support for distributed computation makes it easy to write groupware, computer-supported cooperative work (CSCW) applications, and multiplayer games as active objects. </p>

<p>The environment we are using for writing distributed active objects is based on Obliq, an object-oriented scripting language specifically designed for constructing distributed applications in a heterogeneous environment (see "A Language with Distributed Scope," by Luca Cardelli, <i>Computing Systems</i>, January 1995). We call active objects written in Obliq "Oblets" (short for "Obliq applets"). We have also built a family of browsers -- DeckScape, WebCard, and WebScape -- capable of running Oblets (see http://www.research.digital.com/SRC/webbrowsing/).</p>

<p>Obliq supports distributed computation by implementing all objects as network objects (see "Network Objects," by Andrew D. Birrell, Greg Nelson, Susan Owicki, and Edward P. Wobber, <i>Proceedings of the 14th ACM Symposium on Operating System Principles</i>, December 1993). The methods of a network object can be invoked by processes other than the one that created the object. The initial connection between two processes occurs when one process registers an object with a name server under a unique name, and another process subsequently imports the object from that name server. Once the connection is established, network objects can be passed to other processes just as easily as any other type of data can be passed.</p>

<p>For a network object, method calls and field accesses have the same syntax regardless of the object's location. It need not be on the same machine or even on the same type of machine as the caller. As network objects, Oblets benefit from this uniformity. They can communicate with each other regardless of their location. Moreover, they communicate directly, without server intervention. Thus, Oblets do not impose any load on an HTTP server, nor does a heavily loaded server affect their performance.</p>

<h3>A Simple Oblet</h3>

<p>An Oblet is an Obliq program that defines a variable named <i>oblet</i>. This variable must contain an Obliq object with at least two fields, <i>vbt </i>and <i>run</i>: </p>

<ul>
<li>The <i>vbt</i> field is bound to a widget that will be installed on the screen when the web page containing the Oblet is loaded.   <li>The <i>run</i> field is bound to a method that is invoked just after the <i>vbt</i> field is evaluated.
</ul>

<p>Oblets are placed into HTML documents via OBJECT, an HTML tag proposed by the World Wide Web Consortium for inserting multimedia objects into web pages. The markup for putting the Oblet at URL adder.obl into a document is:</p>

<p>&lt;OBJECT </p>

<p>   CLASSID="adder.obl" </p>

<p>   CODETYPE="application/x-oblet"&gt; </p>

<p>&lt;/OBJECT&gt;. </p>

<p>The OBJECT tag also supports a variety of standard attributes, such as suggested dimensions, border size, and alignment. If suggested dimensions are not specified, the preferred dimensions of the widget contained in the Oblet's <i>vbt</i> field are used.</p>

<p><a name="rf1"><a href="9703cf1.htm">Figure 1</A> is a simple Oblet for adding two numbers. The user interface (UI) of the Oblet defined by a FormsVBT s-expression (see "A Two-View Approach To Constructing User Interfaces," by Gideon Avrahami, Kenneth P. Brooks, and Marc H. Brown, <i>Computer Graphics</i>, July 1989), is stored in the file adder.fv; see <a name="rl1"><a href="9703c.htm#l1">Listing One</A> </p>

<p>A UI in FormsVBT is a hierarchical arrangement of components. These include passive visual elements (<i>Text</i>, for instance), basic interactors (<i>Numeric</i>), modifiers that add interactive behavior to other components (<i>Button</i>), and layout operators that organize other components geometrically (<i>HBox</i>). Components can also be categorized based on the number of child components they support: A "split" can have any number of children (<i>HBox</i>), a "filter" has exactly one child (<i>Border</i>), and a "leaf" has no children (<i>Text</i>).</p>

<p>A component in FormsVBT can be given a name so that its attributes can be queried and modified at run time. Names are also used for attaching callback procedures to interactors. In this Oblet, the two <i>Numeric</i> interactors are <i>num1</i> and <i>num2</i>, and the <i>Text</i> component where the sum will be displayed is named <i>sum</i>.</p>

<p><a name="rl2"><a href="9703c.htm#l2">Listing Two</A>, the source for this Oblet, defines the variables <i>doAdd</i> and <i>oblet.</i> <i>doAdd</i> retrieves the values of both numeric interactors, and displays their sum in the component named <i>sum</i>.</p>

<p>Variable <i>oblet</i> contains an object with the fields <i>vbt</i> and <i>run</i>. The <i>vbt</i> field is bound to a form, a widget that displays a FormsVBT s-expression. The procedure <i>form_fromURL</i> takes a URL as an argument and returns a form whose description is stored at this URL. The global variable <i>BaseURL</i> is the Oblet's absolute URL up through the last slash. The <i>run </i>method in this Oblet just attaches the callback procedure <i>doAdd</i> to the two numeric interactors. This procedure will be invoked whenever the user clicks on the plus or minus buttons of either interactor, or types a number into the editing field between the buttons. The form in which the event occurred is passed as an argument to the callback procedure. Recall that when the web page containing this Oblet is loaded, the <i>vbt</i> field will be evaluated and the result displayed on the page, the <i>run</i> method will be invoked, and finally the page will become visible.</p>

<h3>A Distributed Game Oblet</h3>

<p><a name="rf2"><a href="9703cf2.htm">Figure 2</A> shows an Oblet for playing a tic-tac-toe game at two sites. <a href="9703cf2.htm">Figure 2</A>(a) is the WebScape browser used by player "O" and 2(b) is the DeckScape browser used by player "X." The message line indicates that player X is next, and the Oblet of player O is grayed out, indicating it is nonresponsive for the time being.</p>

<p>The FormsVBT description for this Oblet contains a message line that indicates whose turn it is, a game grid consisting of nine squares, and a RESET button that clears the squares. The message line is a <i>Text</i> component named <i>status</i>. Each square of the game grid consists of a <i>Button</i> and a <i>Text</i> component. The <i>Button</i> components are named <i>btn1, ..., btn9</i>, and the <i>Text</i> components are named <i>lab1, ..., lab9</i>. The RESET button is named <i>reset</i>. Finally, the form's top-level component is named <i>board</i>. </p>

<p><a name="rl3"><a href="9703c.htm#l3">Listing Three</A> shows the code for the tic-tac-toe Oblet. In addition to the required <i>vbt</i> field and <i>run</i> method, the Oblet also has fields <i>symbol</i> and <i>opp</i> and methods <i>reset</i> and <i>move</i>. The field <i>symbol</i> is a string indicating the player running the Oblet, either X or O. The field <i>opp</i> will be the Oblet of the opponent. The <i>reset</i> method clears the label displayed in each square of the game grid. The <i>move</i> method stores the string <i>symbol </i>into the <i>label</i> component, updates the message line to indicate whose turn is next, and changes turns by changing the responsiveness of the game board. Consequently, each player can press a button only when it is his turn to move.</p>

<p>We start a game by visiting the tic-tac-toe web page, which causes the tic-tac-toe Oblet to be loaded and its <i>run</i> method to be invoked. The first part of the <i>run</i> method attempts to import an object named <i>TicTacToe</i> from the name server at machine ash.pa.dec.com. This succeeds if there is already a player waiting for a game to begin. In this case, the opponent's <i>oblet</i> is stored in our <i>opp</i> field, our <i>oblet</i> is stored in our opponent's <i>opp</i> field, and we choose "X" as our symbol. If the attempt to import <i>TicTacToe</i> fails, then we export our <i>oblet</i> to the name server at ash.pa.dec.com, make our game board dormant (grayed out and unresponsive to mouse activity), and choose "O" as our symbol. For simplicity, we ignore the race condition of more than one player executing this code simultaneously.</p>

<p>The <i>run</i> method then attaches callback procedures to the various interactors on the board. Procedure <i>doReset</i> is attached to the RESET button; it will invoke the <i>reset</i> methods of our Oblet and of our opponent's Oblet. A procedure <i>p</i> is attached to each of the nine buttons, <i>btn1, ..., btn9</i>. This procedure effectively captures the value of <i>i</i>, the index of each square on the game grid. When <i>p</i> is invoked (in response to a user clicking in a square), it calls procedure <i>doPress(i)</i>, which checks that the square is empty and invokes the <i>move</i> method on both Oblets. </p>

<p>It is worth emphasizing that <i>self.opp</i> denotes an object that resides on the opponent's machine. This implies that the assignment to <i>self.opp.opp</i> and the execution of the <i>self.opp.reset</i> and <i>self.opp.move</i> method calls take place on that machine.</p>

<h3>A Distributed Chat-Room Oblet</h3>

<p>Oblets are flexible enough to allow distributed computations to have arbitrary topologies. In the tic-tac-toe example, two <i>oblet</i> objects were performing peer-to-peer communication. In the next example, we use a star topology to implement a multiperson chat room. At the center of the star, we have a conference control object; the Oblets belonging to the participants are at the periphery. When a user types something into his chat-room Oblet, it informs the conference controller of the new text. The controller relays the update to all the participating Oblets; in other words, Oblets do not communicate with other Oblets directly. Our chat room also provides a rudimentary mechanism for floor control.</p>

<p><a name="rf3"><a href="9703cf3.htm">Figures 3</A>(a), 3(b), and 3(c) show the chat-room Oblet running in different browsers (WebScape, WebCard, and DeckScape, respectively). Each browser is running on a different machine. The participants in the chat room are Moe, Larry, and Curly (respectively). The floor is with Moe, as indicated by the status line over the editing region and by the color of the editing region in Moe's browser.</p>

<p><a name="rl4"><a href="9703c.htm#l4">Listing Four</A> is the FormsVBT s-expression for the chat-room Oblet. The <i>floorWith</i> component is the message line above the large editing region; it will contain a message indicating who owns the floor. The <i>mainEditor</i> is the large (300&times;200) editing region. The <i>Filter</i> component surrounding the region is used to set the reactivity of the region; in the passive state, the region is unresponsive to mouse and keyboard activity, but it is not grayed out, as it would be in the dormant state. The type-in field where each participant identifies himself is named <i>myName</i>. Finally, the Grab Floor button has been given the name <i>grabFloor</i>.</p>

<p>Callback procedures will be attached to the Grab Floor button and to the large editing region. When the user clicks on the Grab Floor button, the message line on all participating Oblets indicates who owns the floor (using the contents of the type-in field of the Oblet now owning the floor); the editing region of all Oblets (other than the one owning the floor) become passive; and the editing region of the Oblet owning the floor becomes active, and its color changes to pink. When the user who owns the floor types a keystroke into the editing region, all participating Oblets are notified of the updated text by the conference-control object. </p>

<p><a name="rl5"><a href="9703c.htm#l5">Listing Five</A> is the definition of the conference-control object. The <i>oblets</i> data field is an array of the Oblets that have registered themselves with the conference-control object. Each element of this array is an Oblet that typically resides on a different machine. The <i>onFloor</i> data field is the name of the user who currently has the floor, and the <i>contents</i> data field contains the current contents of the editing region. These two fields are needed to initialize the display of a new participant entering the chat room.</p>

<p>The <i>register</i> method is called by a new Oblet when it is initialized as part of its <i>run</i> method. The new Oblet is appended to the <i>oblets</i> array and is notified both of the current contents of the editing region and of the owner of the floor, if there is one.</p>

<p>The <i>transferFloor</i> method is called by an Oblet when the user clicks on the Grab Floor button. This method stores in <i>onFloor</i> the name of the user who now owns the floor, then iterates through all of the Oblets in the conference, invoking the <i>transferFloor</i> method on each Oblet to inform it of the new floor owner.</p>

<p>Finally, the <i>updateText</i> method is called on each keystroke by the Oblet that owns the floor, passing in the current contents of the editing region. (Passing just the keystroke is not sufficient, since a single character could result in various editing actions, depending on the key bindings used by the Oblet.) The <i>updateText</i> method stores in <i>contents </i>the new contents of the editing region, then updates all of the Oblets in the chat room by invoking the <i>updateText</i> method on each one. </p>

<p><a name="rl6"><a href="9703c.htm#l6">Listing Six</A> shows the code for a chatroom Oblet. In addition to <i>vbt</i> and <i>run</i>, the Oblet has two additional methods, <i>transferFloor</i> and <i>updateText</i>, which are invoked by the conference-control object in response to a user in an arbitrary Oblet in the chat room grabbing the floor or typing into the editing region. These methods are straightforward: The <i>transferFloor</i> method makes the editing region passive and sets its background to white, then updates the message line. The <i>updateText</i> message changes the contents of the editing region.</p>

<p>The Oblet's <i>run</i> method first contacts the name server on the machine ash.pa.dec.com to obtain a conference-control object registered under the name <i>ConfControl</i>. If there is such an object, it is stored in the variable <i>confControl</i>. Otherwise, a new conference-control object is registered with the name server and is stored in <i>confControl</i>. As in the tic-tac-toe example, we do not show the code necessary for preventing the race condition of several users executing the <i>try-except</i> statement simultaneously. After defining callback procedures <i>doGrabFloor</i> and <i>doKeyEvent</i>, this Oblet registers itself with the conference controller and attaches the callback procedures to the Grab Floor button and editing region.</p>

<p>The <i>doGrabFloor</i> callback procedure invokes the <i>transferFloor</i> method on the <i>confControl</i> object (which then calls the <i>transferFloor</i> method on all Oblets in the chat room, including this one), and makes its own editing region active and colored pink. The <i>doKeyEvent</i> callback procedure invokes the <i>updateText</i> method on the <i>confControl</i> object, passing to it the text in the editing region.</p>

<p>Again, it is important to point out that invoking a method <i>m</i> on the <i>confControl</i> object is done by calling <i>confControl.m()</i>, regardless of where the <i>confControl</i> object resides. In this example, the conference-control object is local to the Oblet that creates it and remote to all other Oblets.</p>

<p>There are many features that could be added to the chat room. For example, it would be nice to be able to prevent another user from taking away the floor, allow users to leave the chat room, create new chat rooms, see existing chat rooms, handle exceptions that might result from network partitions, and so on. In addition, the implementations could be more efficient, reporting only changes to the editing region rather than reporting the region's entire contents after each keystroke.</p>

<h3>Oblets for Algorithm Animation</h3>

<p>As we have seen, Obliq's network objects provide a uniform and elegant way for objects to communicate, regardless of the address space they exist in and machine they reside on. The two previous examples showed the obvious use for network objects -- to communicate among objects on different machines. The next example uses network objects to allow Oblets running in the same browser (on the same web page or on different web pages) to communicate. This could be achieved through simpler mechanisms; after all, Oblets running on the same browser are in the same address space. However, network objects minimize the number of concepts needed by a programmer, since they handle this case in the exact same way as the distributed case. Moreover, network objects make it easy to reuse Oblets in distributed settings without any code changes.</p>

<p>The previous example uses network objects to coordinate multiple Oblets in the domain of algorithm animation (see "A System for Algorithm Animation," by Marc H. Brown and Robert Sedgwick, <i>Computer Graphics</i>, July 1984). A typical algorithm animation system has a control panel and a collection of views, each in its own window. The control panel is used for specifying data, starting the algorithm, controlling the animation speed, and so on. To animate an algorithm, strategically important points of its code are annotated with procedure calls that generate "interesting events." These events are reported to the algorithm animation system, which forwards them to all interested views. Each view responds to interesting events by updating its display appropriately.</p>

<p><a name="rf4"><a href="9703cf4.htm">Figure 4</A> is an animation of first-fit binpacking. The control panel and the views are implemented by separate Oblets. We use an event-manager object, similar to the conference-control object in the chat-room example, to relay interesting events from the algorithm to the views. For each interesting event, there is a corresponding method both in the event-manager object and each view Oblet. When an interesting event occurs, the algorithm Oblet invokes the corresponding method of the event-manager object, which relays the event to each view. Typically, views react by showing some animation reflecting the changes in the program. For the animations in the views to happen simultaneously, the event manager forks a thread for each registered view, the thread calls the view's method corresponding to the interesting event, and the event manager waits until all of the threads have completed before returning to the algorithm.</p>

<p>For example, when a binpacking algorithm is trying to insert a particular weight <i>w</i> into a bin <i>b</i> that already contains a number of weights totaling up to <i>amt</i>, it calls <i>z.probe(w,b,amt)</i>. The <i>probe</i> method of the event-manager object <i>z</i> is implemented in <a name="rl7"><a href="9703c.htm#l7">Listing Seven</A>.</p>

<p><a href="9703cf4.htm">Figure 4</A> shows the Oblets for the control panel and each view -- all on the same web page. However, there is no need for the Oblets to be located on the same page. In fact, if we put each Oblet on a separate page, users can dynamically select the set of views visible (or even have more than one copy of any view). In <a name="rf5"><a href="9703cf5.htm">Figure 5</A>, the web page containing the control panel has links for pages containing the various views. Clicking on a link brings up a page for the view, which the DeckScape browser can optionally display in a separate window.</p>

<p>At first blush, it would appear that this example uses network objects merely for the coding elegance they offer, rather than for any of their distributed aspects. That is, in <a href="9703cf4.htm">Figures 4</A> and 5, all the Oblets exist in the same address space, namely, that of the browser. However, because Oblets are network objects, we have far more flexibility. For instance, we can use the Oblets -- without any changes -- in an electronic classroom. In such a setting, the instructor and all students run DeckScape on their individual machines (using the same name server). The instructor uses the control page Oblet to drive the animation, and each student sees a set of views portraying the workings of the algorithm. (This scenario is discussed in our paper "Collaborative Active Textbooks: A Web-Based Algorithm Animation System for an Electronic Classroom," <i>Proceedings of the 1996 IEEE Symposium on Visual Languages</i>, September 1996.) </p>

<h3>Related Work and Conclusions</h3>

<p>Oblets bring together active objects and distributed computation. Although Java is the best-known language for active objects, it does not have language-level support for distributed programming. The Java Developer's Kit 1.1 will contain an API for remote method invocations, giving it the equivalent of network objects. Still, Java objects are not network objects by default, so is it harder to adapt Java code to a distributed setting. Moreover, Obliq is a higher-order language, making it possible to migrate computations (in the form of closures) over the network.</p>

<p>The Oblets shown here have been small for didactic reasons. However, Obliq is a full-strength programming language with access to a rich set of libraries, including multimedia objects and even web pages.</p>

<p>For more information on our work on Oblets and web browsers, visit http://www. research.digital.com/SRC/webbrowsing/.</p>

<p><b>DDJ</b></p>


<H4><a name="l1">Listing One</H4>

<pre>(HBox  (Numeric %num1)
  (Text "+")
  (Numeric %num2)
  (Text "=")
  (Text %sum "0"))
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>let doAdd =  proc (fv)
    let n1 = form_getInt (fv, "num1");
    let n2 = form_getInt (fv, "num2");
    form_putText (fv, "sum", fmt_int (n1+n2))
  end;
let oblet = {
<p></p>
  vbt =&gt; form_fromURL (BaseURL &amp; "adder.fv"),
  run =&gt;
    meth (self)
      form_attach (self.vbt, "num1", doAdd);
      form_attach (self.vbt, "num2", doAdd);
    end
};
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>let oblet = {  vbt    =&gt; form_fromURL (BaseURL &amp; "tic-tac-toe.fv"),
  symbol =&gt; ok,
  opp    =&gt; ok,
  reset =&gt;
    meth (self)
      for i = 1 to 9 do
        form_putText (self.vbt, "lab" &amp; fmt_int(i), "");
      end;
    end,
  move =&gt;
    meth (self, label, symbol)
      form_putText (self.vbt, label, symbol);
      let other = if symbol is "X" then "O" else "X" end;
      form_putText (self.vbt, "status", other &amp; " is next");
      if form_getReactivity(self.vbt, "board") is "active" then
        form_putReactivity(self.vbt, "board", "dormant");
      else
        form_putReactivity(self.vbt, "board", "active");
      end;
    end,
  run =&gt;
    meth (self)
      try
        self.opp := net_import ("TicTacToe", "ash.pa.dec.com");
        self.opp.opp := self;
        self.symbol := "X";
      except net_failure =&gt;
        net_export ("TicTacToe", "ash.pa.dec.com", self);
        form_putReactivity (self.vbt, "board", "dormant");
        self.symbol := "O";
      end;
      let doReset =
        proc(fv)
          self.reset ();
          self.opp.reset ();
        end;
      let doPress =
        proc (m)
          let label = "lab" &amp; fmt_int(m);
          if form_getText (self.vbt, label) is "" then
            self.move (label, self.symbol);
            self.opp.move (label, self.symbol);
          end;
        end;
      form_attach (self.vbt, "reset", doReset);
<p></p>
      for i = 1 to 9 do
        let p = proc(fv) doPress(i) end;
        form_attach (self.vbt, "btn" &amp; fmt_int(i), p)
      end;
    end
};
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>(Rim (Pen 10)  (VBox
    (Text %floorWith "The floor is free right now")
    (Glue 10)
    (Shape (Width 300) (Height 200)
      (Frame Lowered
         (Filter Passive
           (TextEdit (BgColor "White") %mainEditor))))
    (Glue 10)
    (HBox
      (Text "Your Name:")
      (Frame Lowered (TypeIn (BgColor "White") %myName))
      Fill
      (Button %grabFloor "Grab Floor"))))
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<H4><a name="l5">Listing Five</H4>

<pre>let ProtoConfControl = {  oblets =&gt; [],
  onFloor =&gt; ok,
  contents =&gt; "",
  register =&gt;
    meth (self, oblet)
      self.oblets := self.oblets @ [oblet];
      oblet.updateText (self.contents);
      if self.onFloor isnot ok then
        oblet.transferFloor (self.onFloor);
      end;
    end,
  transferFloor =&gt;
    meth (self, name)
      self.onFloor := name;
      foreach o in self.oblets do
        o.transferFloor (name);
      end;
    end,
  updateText =&gt;
    meth (self, contents)
      self.contents := contents;
      foreach o in self.oblets do
        o.updateText (contents);
      end;
    end
};
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>
<H4><a name="l6">Listing Six</H4>

<pre>let oblet = {  vbt =&gt; form_fromURL (BaseURL &amp; "chatroom.fv"),
<p></p>
  transferFloor =&gt;
    meth (self, name)
      form_putReactivity (self.vbt, "mainEditor", "passive");
      form_putBgColor (self.vbt, "mainEditor", color_named("white"));
      form_putText (self.vbt, "floorWith", "The floor is with " &amp; name);
    end,
  updateText =&gt;
    meth (self, contents)
      form_putText (self.vbt, "mainEditor", contents);
    end,
  run =&gt;
    meth (self)
      var confControl = ok;
      try
        confControl := net_import("ConfControl", "ash.pa.dec.com");
      except net_failure =&gt;
        confControl := ProtoConfControl;
        net_export("ConfControl", "ash.pa.dec.com", confControl);
      end;
      let doGrabFloor =
        proc (fv)
          confControl.transferFloor (form_getText (fv, "myName"));
          form_putReactivity (fv, "mainEditor", "active");
          form_putBgColor (fv, "mainEditor", color_named("pink"));
        end;
      let doKeyEvent =
        proc (fv)
          confControl.updateText (form_getText (fv, "mainEditor"));
        end;
      confControl.register (self);
      form_attach (self.vbt, "grabFloor", doGrabFloor);
      form_attach (self.vbt, "mainEditor", doKeyEvent);
    end
};
</pre>
<P>
<a href="#rl6">Back to Article</A>
</P>
<H4><a name="l7">Listing Seven</H4>

<pre>let z = {  views =&gt; [],
  ...
  probe =&gt;
    meth (self,w,b,amt)
      let threads =
        foreach v in self.views map
          let closure = proc() v.probe(w,b,amt) end;
          thread_fork(closure)
        end;
      foreach t in threads do
        thread_join(t)
      end;
    end;
    ...
};
</pre>
<P>
<a href="#rl7">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
