<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal March 1997: RPC for Windows 95/NT </title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>RPC for Windows 95/NT </h1>

<p><i>Dr. Dobb's Journal</i> March 1997
</p>
<h2>C/C++ client/server development </h2>

<h3>By Steve Sipe</h3>

<I>Steve is a developer with INOVA Corp. in Charlottesville, Virginia. He can be contacted at ssipe@inovacorp.com.</I>

<hr>

<p>In "Calling 16-bit DLLs from Windows 95" (<i>DDJ</i>, April 1996), I presented a simple technique to allow 32-bit Windows 95 applications to thunk to 16-bit DLLs. In this article, I borrow from parts of that technique to simplify Remote Procedure Calls (RPC) in 32-bit Windows 95/NT applications.</p>

<p>The sample programs I present here demonstrate how to build simple RPC clients and servers using Microsoft Visual C++ 4.x (sample programs are available electronically; see "Availability," page 3). The programs should compile with other compilers or previous 32-bit versions of Visual C++ as well, but you will need the Win32 SDK to obtain the RPC development tools.</p>

<h3>What is RPC?</h3>

<p>Remote Procedure Call programming is a specification that allows client programs to call server-based functions. Though RPC is designed to be compliant with the Open Software Foundation's Distributed Computing Environment (OSF/DCE) specification (which allows communications with UNIX-based servers), it has also become a fundamental part of the Win32 platform. Technologies such as OLE and Distributed OLE (DCOM) use RPC as an underlying transport mechanism. While a complete description of RPC programming is beyond the scope of this article, its general purpose and functionality can be described in only a few words: RPC lets you develop function calls that may execute on local or remote machines. For the most part, the location of the code that implements these functions is transparent to the application. <a name="rf1"><a href="9703df1.htm">Figure 1</A>, which shows how the function <i>AddData()</i> might be executed through RPC on a remote system, depicts two different PCs connected on a network. RPC uses a transport layer over this network to communicate between client and server programs. This transport layer transfers data according to a certain type of transport protocol. <a name="rt1"><a href="9703dt1.htm">Table 1</A> lists some of the transport protocols supported in Windows 95/NT.</p>

<p>Although my sample server only uses named pipes and local transport protocols, it still contains definitions for most of the other protocols as well (see the various RPC_PROTxxx values in rpcparm.h). For instance, it can also use TCP/IP, but you will need to take a look at some RPC reference material (such as on the Microsoft Developer's Network CD) for the specific parameters that are needed.</p>

<p>Also note in <a href="9703dt1.htm">Table 1</A> that Windows 95 only supports named pipes on the client side. This means that a Windows 95 client can use named pipes to communicate, but the server must run on Windows NT. Named pipes are an efficient transport protocol and would certainly be a good choice for many applications -- as long as the server can run on Windows NT.</p>

<h3>The Problem</h3>

<p>One of my goals in developing the flat-thunking technique was to find a way to avoid the tedious intermediate steps needed to add new thunking functions. These steps involve adding the new function description to a thunking language script, then running a thunking script compiler on the script. This compiler then produces an assembly-language output file which is eventually assembled and linked to a C/C++ program.</p>

<p>Adding RPC function calls to a program involves some of the same tedious steps. Each new RPC function must be described in the Interface Definition Language (IDL) file script language, then compiled by the IDL compiler, which produces C output files. These C output files are then linked into the client and server C/C++ programs. </p>

<p>I simplified the thunking development process by providing a "generic" function that only needs to be defined once in the thunk script. This generic function is designed to handle many different parameter types without the need to change its definition. </p>

<p>I simplified the RPC development process by taking the same approach. The RPC IDL file contains the definition for a generic function that can handle many different types of data. Having this function handle many data types also eliminates the need to define many new RPC functions.</p>

<h3>A Solution</h3>

<p>The RPC client I developed implements a function <i>InvokeRPCFunc()</i> (see rpccltin.c, available electronically) that works like an OLE marshaling routine. It basically takes the variable parameters passed to it and groups them into a set of fixed parameters that my generic RPC function can handle. Each of these parameter types are described by a special set of <i>DTC_*** #define</i>s (see rpcparm.h). The client program implements a proxy method that defines each parameter type using these values, then calls <i>InvokeRPCFunc()</i> with a specified function.</p>

<p>The server contains my RPC generic function <i>CallRPC()</i> (see rpcsvrmn.c) that performs the opposite of <i>InvokeRPCFunc()</i>. It performs a function similar to OLE unmarshaling. In other words, it takes the fixed arguments passed to it and turns them back into variable arguments by pushing them onto the stack using inline assembly language. It then looks up and calls the function specified in <i>InvokeRPCFunc(),</i> which will receive the parameters on the stack.</p>

<p><a name="rl1"><a href="9703d.htm#l1">Listing One</A> hows a proxy method that loads a server-based DLL called "dummydll.dll." <i>InvokeRPCFunc()</i> takes four fixed arguments, followed by 0 to <i>n</i> variable arguments (depending on the function being called). The first argument is a dispatch table ID (in this example,  SRVDISP_LOADLIBRARY; see rpcparm.h, available electronically). <i>CallRPC()</i> looks up the server-based function corresponding to this ID in the dispatch table (see rpcsvrds.c), then invokes it. The second argument is a pointer to the unsigned long variable that will contain the result of the function call. Note that this is always returned as an unsigned <i>long</i>, but it can easily be cast to any type upon <i>return</i>. The third argument is an array of lengths for DTC_PTR type fields. The fourth argument is a pointer to an array of DTC_ values that describe each of the variable argument types.</p>

<h3>Describing Parameters for <i>InvokeRPCFunc()</i></h3>

<p>Each of the variable arguments passed to InvokeRPCFunc() must be described using the various DTC_ values found in rpcparm.h. For instance, the sample <i>LoadDummyDLL()</i> method passes one parameter -- a NULL-terminated string (which is described by DTC_STR). If you are familiar with the way my thunking code works, then you might recall that it had a few basic data types and a DTC_PTR type that could be a pointer to any type of data. </p>

<p>If you compare the parameter types defined in rpcparm.h with those in my thunking code's parm.h, you will see that rpcparm.h contains specific data pointer types instead of the thunking code's generic DTC_PTR data-pointer type. For instance, DTC_PCHAR tells the RPC generic function to expect a pointer to a CHAR field. You might gather from these specific data types that RPC functions always need to know the size of each data item that is being passed. That is true because RPC must transmit each data item from the client program across a transport layer to the corresponding server stub. Without this size, the RPC mechanism would have no idea how much data to transfer.</p>

<p>If each data item must contain a specific size, then how do you handle pointers to your own data types, such as structure pointers or dynamically allocated memory? This is where the third argument to <i>InvokeRPCFunc()</i> comes into play. The DTC_PTR type used in my RPC code is a special parameter type. In C terms, think of DTC_PTR as a pointer to a void (<i>void *</i>). Since DTC_PTR allows you to tell RPC that you have a pointer, the only thing left is to tell RPC exactly how much data you have. This is where you use the third argument to <i>InvokeRPCFunc()</i>. This third argument points to an array of <i>long</i> values that describe the lengths of the various data that the DTC_PTR values addresses.</p>

<p>There is one important thing to keep in mind when passing your own memory buffers: Data can be passed in both directions, but the size of the buffer is always controlled by the client. For example, the client program can define a character array of 40 bytes that will receive data from the server program. The server program can copy data into this buffer, but must not copy more than 40 bytes of data into the buffer. An RPC run-time exception occurs if the server program copies more data into the buffer than the client has allocated. It might be a good idea to also pass a parameter to the server along with the buffer that contains the buffer's maximum size.</p>

<p>Adding new RPC functions is now a simple matter of implementing a new function in the server and adding an entry point in the server's dispatch table (rpcsvrds.c). Another easy way to add new functions is to place them in server-based DLLs. Adding DLLs requires no changes to the server's code, only the copying of the DLL to the server. (Loading DLLs is accomplished by using some of the sample RPC server's system-level functions.)</p>

<h3>Server-Based Functions</h3>

<p>To make the sample RPC server easier to extend and debug, I've provided some system-level server-based functions. These system-level functions are called by building a proxy method that uses their dispatch ID (in rpcparm.h) along with their required parameters. <a name="rt2"><a href="9703dt2.htm">Table 2</A> describes the system-level functions provided, along with their required parameter types.</p>

<p>Note that SRVDISP_LOADLIBRARY and SRVDISP_FREELIBRARY are identical in syntax to the <i>LoadLibrary()</i> and <i>FreeLibrary()</i> Win32 API calls. SRVDISP_CALLPROC is equivalent to doing a <i>GetProcAddress()</i> Win32 API call, then calling the function using the pointer returned.</p>

<p>Be careful when using the SRVDISP_TRACE function. It is typically a good function to use when debugging client programs, but in production can have a devastating effect on performance. The reason for this is that enabling tracing causes the server to display status for every parameter of every task. The sheer volume of data being written to the console causes the server to expend a large amount of processing time displaying output. If there are enough clients running, this time delay causes the server's queues to become overloaded with unhandled requests.</p>

<h3>Sample Program Description</h3>

<p>The sample programs (available electronically) demonstrate how to build simple RPC client and server applications using a mixture of C and C++. They also demonstrate how to use the various server-based system<sub></sub>level functions to do such things as loading a server-based DLL and calling functions within it. My goal in providing these samples is not to give you the complete ins-and-outs of RPC programming, but rather to give you a working set of RPC client/server code that you can extend. These programs use only a subset of RPC programming, but they do give you something that works out of the box. They are a good starting platform for building extended RPC client/server programs.</p>

<p>The sample code is designed to work on Windows 95/NT (x86 versions only). It makes some assumptions about the type of processor that it is running on -- it expects x86-type byte ordering and x86-style stack frame. These requirements are necessary because of the way the unmarshaling code (see <i>CallRPC()</i> in rpcsvrmn.c) turns the fixed arguments back into variable arguments. The inline assembly-language instructions and byte-ordering assumptions in the unmarshaling code will have to change if the server is to run on non-x86 versions of Windows NT.</p>

<p>It is important to keep in mind that RPC servers operate using multiple threads of execution. DLLs loaded by the server must therefore be multithreaded. This is generally not a problem if you are building your own DLLs. You can set the run-time library to multithreaded under the Settings...C/C++ Code Generation option in the Visual C++ IDE. Commercial DLLs, on the other hand, may not be able to handle multiple threads of execution, and this may result in segment faults and so forth when several client applications begin to call them at the same time. The best rule of thumb is to try the DLL with one active client, then gradually add additional clients until a problem surfaces.</p>

<h3>Expansion</h3>

<p>You can extend my RPC client and server many ways. For example, new functions might be added to build a server-based data repository. Or you might develop a server-based launch program to automatically download and distribute newer versions of files or programs to each client workstation. You might also want to extend the server by adding support for different NT platforms by changing the inline assembly<sub></sub>language marshaling code in rpcsvrmn.c.</p>

<p>There are also some advanced RPC capabilities to consider when using the sample server and clients in a production environment. For instance, because RPC allows access to remote machines and resources, security might be a concern. There are several RPC APIs for handling client and server security, but for simplicity they are not implemented in my samples. </p>

<p><b>DDJ</b></p>


<H4><a name="l1">Listing One</H4>

<pre>BOOL CRpcClient::LoadDummyDLL(){
    BYTE parms[] = {DTC_STR,DTC_END};
    ULONG ulError;
<p></p>
    // Tell the server to load the dummydll.dll. SRVDISP_LOADLIBRARY is 
    //   a function in the dispatch table (see rpcsvrds.c)
    InvokeRPCFunc(SRVDISP_LOADLIBRARY,&amp;ulError,NULL,parms,"dummydll.dll");
<p></p>
    // This return value is our DLL handle (see LoadLibrary() 
    //   for a description) 
    m_hDummyDLL = (HANDLE) ulError;
<p></p>
    // Return success/fail to caller
    return(m_hDummyDLL != 0);
}
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
