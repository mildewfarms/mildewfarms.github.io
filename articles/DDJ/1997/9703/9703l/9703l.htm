<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal March 1997: Algorithm Alley</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>The I-String Strategy</h1>

<p><i>Dr. Dobb's Journal</i> March 1997
</p>
<h2>A winner in both space and time</h2>

<h3>By Fred Wild</h3>

<I>Fred is a principal of Advantage Software Technologies. He can be contacted at 72774.657@compuserve.com.</I>

<hr>

<p>C/C++ programmers often shy away from heavy use of strings, because the built-in string operations can be expensive. The C standard library's <i>strXXX()</i> functions use a data format that is simple and compact, but doesn't provide fast comparison or editing. But if you know which operations are important, you can investigate alternatives that provide different trade-offs. For example, you might store all of your strings in a trie (see "Algorithm Alley," <i>DDJ</i>, April 1994) for quick searching, or use hash codes to quickly detect when two strings are different. This month, Fred shows a hash technique that provides both compact storage and fast equality tests.</p>

<p> --  Tim Kientzle</p>

<p>Many programs keep data that needs to be searched. We often find ourselves identifying and finding items according to a name or key. In many cases, that key is a string.</p>

<p>We know from experience that programs that keep data of any respectable volume will not perform well if they are searching for keys as strings. Why? Because string comparison functions are expensive -- much more so than, say, register-value comparisons. Also, the longer and more similar the strings are, the worse the performance will be.</p>

<p>A C/C++ string is a null-terminated array of characters with a pointer to the first character in the array. When you want to compare two strings for equality, you need to traverse the strings and compare their individual characters for equality. If one string terminates before the other, they are not equal. If a character in a given position is different, they are again not equal.</p>

<p>The C library <i>strcmp</i> function does this for you by returning zero (0) if the two strings are equal, a negative value if the first is less than the second, and a positive value if the first is greater than the second. Using <i>strcmp</i> is convenient, but burdensome at run time for two reasons: First, it is a function call; and second, it must laboriously walk through each string from the front each time it is called. There's lots of room for improvement here, mostly by minimizing the number of times you call <i>strcmp</i>.</p>

<h3>Abstractions for Strings</h3>

<p>Most people who use C++ have either created or used a string class. One feature of nearly every one of those string classes is that it saves the strings' lengths. The classes also usually have comparison operators to allow code to be specific for handling ==, &lt;, and &gt;. Tests for equality can be short-circuited by first ensuring that the lengths are the same before vectoring off into <i>strcmp</i>. If the lengths are not the same, then the strings are not equal. When the lengths are the same, the strings still need to have their characters traversed in entirety before declaring them equal.</p>

<h3>Optimizing Tests for Equality</h3>

<p>The ultimate string comparison for equality would not require a call to <i>strcmp</i> at all (nor a traversal of each of the characters). How can this be accomplished? By paying some of the cost of comparison up front, before we need to do a comparison.</p>

<p>An adage in software development is, "The longer you take to store something, the faster you can retrieve it." In more-specific terms, an extra preparation step is sometimes all you need to make all subsequent processing of that data more efficient. This is the pivotal idea behind the remainder of the strategy I'll discuss here. As you will see, the up-front cost of preparing for efficient string comparisons for equality is not exorbitant.</p>

<h3>The I-String Strategy</h3>

<p>I originally heard about this strategy from an associate who said that he'd seen it used in Scheme and LISP implementations. He said it had been "internalizing" the string. In honor of that rumor, I'll call this approach the "I-String strategy." Informally, this is how it works: </p>

<p></p>

<ul>
<li>Encapsulate strings in <i>Istring</i> class instances.  <li>Keep unique string values in a table.
  <li>On construction, look up each new <i>Istring</i>'s value in the table and assign/find its unique ID.
  <li>When doing comparisons for equality, just compare the IDs.
</ul>

<p></p>

<p>You encapsulate strings in an <i>Istring</i> class so you get control of how they are created, copied, compared, and destroyed. You'll use the <i>Istring</i> class to perform the preprocessing necessary to optimize comparisons for equality. The <i>Istring</i> class will keep a table of string values it knows about, as well as reference counts for them. When a new instance is created, the string value is found or added to the table, and its ID is saved in the <i>Istring</i> class-instance data. The <i>Istring</i> operator == simply compares the ID values to determine equality, based on the ID values mapping one-to-one onto unique string values. (The complete source code for the <i>Istring</i> class, as well as a make file and test program, are provided electronically; see "Availability," page 3.)</p>

<h3>Expected Time and Space Benefits</h3>

<p>In most applications the I-String strategy is a winner in space, because the underlying values of <i>Istring</i> instances are mapped onto the same storage locations. This means that redundancy in the storage of equal string values is eliminated. All roads in optimization lead ultimately to <i>malloc</i> and <i>free</i> (or <i>new</i> and <i>delete</i>), and avoiding redundant storage also means avoiding memory-management calls (a time benefit as well).</p>

<p>The I-String strategy is also a winner in speed. When you use <i>Istring</i>s as search keys, you are doing register-value comparisons. Compared with the usual function call and string-scanning overhead of <i>strcmp</i>, <i>Istring</i>s are quite optimal. The benefits of avoiding <i>strcmp</i> overhead also increase as string sizes grow, and as the string values have more character-for-character similarities at their beginnings. Consider, for example, the string values: </p>

<p>window.popup_dialog_1.title</p>

<p>window.popup_dialog_1.xpos</p>

<p>window.popup_dialog_1.ypos </p>

<p>When comparing one of the aforementioned string values against the other with <i>strcmp</i>, you'd need to traverse the bulk of each string to discover ultimately that they do not match. <i>Istring</i>s allow a single 32-bit (address) comparison to do the same job, regardless of the length or similarity of the strings.</p>

<h3>Implementation Notes</h3>

<p>Now that you understand the strategy, you need to make a few low-level implementation choices: </p>

<p></p>

<ul>
<li>Physical form for unique ID values. Since a memory address is necessarily unique for unique values, and you need to store the address of string values for other purposes anyway, let's use the unique string value's memory address as the <i>Istring</i>'s ID. You'll hold this value in the <i>Istring</i>'s <i>unique_string</i> member variable.  <li>String-class pointer values. For a string, you don't need or want to revert to using character pointers. You likely already have a string class, so let's make use of it. The address of one of the string-class instances works equally well as a unique ID. Further, within the <i>Istring</i> class, you'll define the operators -&gt; and * so that they surface the string-class value, which allows clients to directly use all of the string's utility functions. This allows your <i>Istring</i> class to remain a lightweight wrapper around the old standby string classes.
  <li>Use of STL. In this example, I'll use STL to gain use of both its string class and its map template class. The map template will be used to create a table to map string values onto their own addresses, which I will in turn use as the <i>Istring</i>'s unique string value ID. I'll also use the map template to create a store for the reference counts for each string value. This way, you'll also be able to determine when you can safely destroy the string values. The two maps are class-wide static resources that are shared by all instances of <i>Istring</i>.
</ul>

<h3><i>Istring</i> Class Declaration</h3>

<p><a name="rl1"><a href="9703l.htm#l1">Listing One</A> is the <i>Istring</i> class declaration. You start by declaring two static map class instances: one to hold the unique string-value pointers, the other to keep track of the reference counts for the unique string-value pointers.</p>

<p>Next, you declare the only data value that an <i>Istring</i> possesses, which is the one pointer it keeps to its shared string value. The private members section ends with the declaration of the default constructor for this class. Since the default constructor is declared as a private member, clients must use one of the other constructors (either the constructor taking a string, or the class's copy constructor).</p>

<p>You also declare an assignment operator to allow the shared unique string values to be managed properly when <i>Istring</i>s are copied. (Whenever a copy constructor is needed to satisfy required bookkeeping or storage-management requirements, an assignment operator is usually needed as well.)</p>

<p>Next, you supply dereferencing operators so that clients can get at the string, and use it as they normally would if it were not encapsulated. This is a quick way for the class to export all of the contained class's operations through its interface. When you allow dereferencing of this type, a client can compose a reference to the underlying string by dereferencing the <i>Istring</i>. <a name="re1"><a href="9703le1.htm">Example 1</A>, for instance, shows references to the underlying string in the two allowed forms.</p>

<p>Last, you supply the operators that are the focus of the <i>Istring</i> implementation -- equality and inequality testing. Note that you have given the code for the functions inline, and that it consists of simply comparing the unique string-value addresses. By declaring them as inline, you have also avoided function-call overhead in performing the comparison operations. </p>

<h3>Construction from a String</h3>

<p>Creating an <i>Istring</i> that doesn't have a value doesn't make much sense, since you can't modify an <i>Istring</i>. Instead, the constructor in <a name="rl2"><a href="9703l.htm#l2">Listing Two</A> takes a string value as input, and uses that value to correctly set the unique string address from the shared string-to-string-pointer map. If the string is not found, a new entry is made for the string in both the table of string pointers and the reference counts. You handle the creation of entries first, and then allow the general code to deal with adopting the shared pointer and increasing the reference count for it.</p>

<h3>Copy and Assignment</h3>

<p><a name="rl3"><a href="9703l.htm#l3">Listing Three</A> shows the copy constructor and assignment operator. The only twist in copying is correctly updating the reference count for the string so it will be destroyed only when no active references exist.</p>

<p>Assignment also requires carefully tracking reference counts. If the pointers are already the same, then nothing need be done. If they're different, you need to reduce the count for the value being overwritten, and increase the count on the value being copied.</p>

<p>The destructor in <a name="rl4"><a href="9703l.htm#l4">Listing Four</A> also uses the reference count. Only when the reference count drops from 1 to 0 should you remove the shared string from the map.</p>

<h3><i>Istring</i>s versus Reference-Counted Strings</h3>

<p>You might be tempted to compare<i> Istring</i>s to reference-counted strings, but this would be an apples-to-oranges comparison. <i>Istring</i>s are designed to behave differently. First, unlike reference counted strings, separate <i>Istring</i>s can be constructed in various places in your program, and still come up sharing the underlying unique string. Reference-counted strings only share a value within a single chain of copying and assignment.</p>

<p>Second, reference-counted strings employ a copy-on-modify strategy of delaying, and potentially avoiding, copying of a string until the value of the string is changed. They are useful for general string purposes. In contrast, <i>Istring</i>s are best thought of as unchanging values that are used most effectively as search keys. Unlike reference-counted strings, they impose a shared value model on all of their instances with no copy-on-modify semantics.</p>

<h3>Conclusion</h3>

<p>An application that needs to do frequent searches based on names or string key values, through relatively nontrivial collections, will easily and dramatically reduce its search overhead by incorporating the <i>Istring</i>s strategy. This can be done without subjugating the internal data structures of the application entirely to hash tables (which introduces additional issues if your data is ordered by those keys as well), and the <i>Istring</i> class can be used as a plug-compatible replacement for your current use of strings as keys.</p>


<p><b>DDJ</b></p>



<H4><a name="l1">Listing One</H4>

<pre>//////////////////////////////////////////////////////////////////////////////  Istring class internalizes strings for fast comparison for equality
<p></p>
using std::string ;
<p></p>
#define StrStrptrMap_t std::map&lt;string, string*, std::less&lt;std::string&gt; &gt;
#define StrptrIntMap_t std::map&lt;string*, int, std::less&lt;string*&gt; &gt;
<p></p>
class Istring {
private:
    static StrStrptrMap_t ustrings ;
    static StrptrIntMap_t ustring_counts ;
    
    string *m_ustring ;       // the "unique string" value being shared
<p></p>
    // Empty Istring case thwarted by declaring def. ctor private
    Istring() { } 
public:
    // Standard parts 
    Istring(const Istring &amp;istr);
    ~Istring();
<p></p>
    // Special ctors
    Istring (const string &amp;str);
    // Assignment
    const Istring &amp; operator=(const Istring &amp;istr);
    // Deferencing operators
    const string * operator-&gt;() const { return  m_ustring ; }    // dangerous
    const string &amp; operator*() const  { return *m_ustring ; }    // more safe
    int operator==(const Istring &amp;istr) const 
        { return this-&gt;m_ustring == istr.m_ustring ; }
    int operator!=(const Istring &amp;istr) const 
        { return this-&gt;m_ustring != istr.m_ustring ; }
};
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>Istring::Istring (const string &amp;str){
    if ( ustrings.find(str) == ustrings.end() ) {
        string *s = new string(str);
        ustrings[str] = s ;
        ustring_counts[this-&gt;m_ustring] = 0 ;
    }
    // Adopt the shared string ptr from the map
    this-&gt;m_ustring = ustrings[str] ;
    // Increase usage by one
    int n_users = ustring_counts[this-&gt;m_ustring] ;
    ustring_counts[this-&gt;m_ustring] = ++n_users ;
}
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three </H4>

<pre>Istring::Istring(const Istring &amp; istr){
    this-&gt;m_ustring = istr.m_ustring ;
    // Increase usage by one
    int n_users = ustring_counts[this-&gt;m_ustring] ;
    ustring_counts[this-&gt;m_ustring] = ++n_users ;
}
const Istring &amp; 
Istring::operator=(const Istring &amp;istr)
{
    if (this == &amp;istr || this-&gt;m_ustring == istr.m_ustring) return *this ;
    // Reduce usage by one on current m_ustring
    int n_users = ustring_counts[this-&gt;m_ustring] ;
    ustring_counts[this-&gt;m_ustring] = --n_users ;
    this-&gt;m_ustring = istr.m_ustring ;
    // Increase usage by one on assigned m_ustring
    n_users = ustring_counts[this-&gt;m_ustring] ;
    ustring_counts[this-&gt;m_ustring] = ++n_users ;
    return *this ;
}
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>Istring::~Istring(){
    int n_users = ustring_counts[this-&gt;m_ustring] ;
    n_users-- ;
<p></p>
    // We can delete the ustring when it is no longer referenced 
    if (n_users == 0) {
        ustrings.erase(*m_ustring) ;
        ustring_counts.erase(m_ustring) ;
        delete m_ustring ;
    }
    else {
        ustring_counts[this-&gt;m_ustring] = n_users ;
    }
}
<P>
<a href="#rl4">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
