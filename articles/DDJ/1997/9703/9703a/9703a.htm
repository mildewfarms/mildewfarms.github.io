<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal March 1997: Agent Tcl</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Agent Tcl</h1>

<p><i>Dr. Dobb's Journal</i> March 1997
</p>
<h2>A flexible and secure mobile-agent system </h2>

<h3>By Robert S. Gray</h3>

<I>Robert is a Ph.D. candidate at Dartmouth College. He can be contacted at robert.s.gray@dartmouth.edu. </I>

<hr>

<p>A mobile agent is a program that can migrate under its own control from machine to machine in a heterogeneous network. In other words, an agent can suspend its execution at any point, transport its code and state to another machine, then resume execution on the new machine. By migrating to the location of an electronic resource, an agent can access the resource locally and eliminate the network transfer of all intermediate data. Thus the agent can access the resource efficiently even if network conditions are poor or the resource has a low-level interface. </p>

<p>Mobile agents move you away from the rigid client/server model toward a model in which programs communicate as peers and act as either clients or servers depending on their current needs. Existing applications for mobile agents include electronic commerce, active documents and mail, information retrieval, and workflow. Potential applications include most distributed applications, particularly those that must run on disconnected platforms or that must invoke multiple operations at each remote site.</p>

<p>Agent Tcl (available at http://www.cs.dartmouth.edu/~agent/) is a mobile-agent system under development at Dartmouth College. Agent Tcl uses the scripting language Tcl as its main language but provides a framework for incorporating additional languages. It provides migration and communication primitives that do not require you to explicitly capture state information and that hide the actual transport mechanisms, but which are low-level enough to be used as building blocks for a range of protocols. It is intended as a general environment for distributed applications, both in the Tcl/Tk community and the computing community at large. Although Agent Tcl is far from complete, it is in active use at several sites and has been used in several information-management applications.</p>

<h3>Architecture </h3>

<p>The Agent Tcl architecture (see <a name="rf1"><a href="9703af1.htm">Figure 1</A>) has four levels. The lowest level is an API for the available transport mechanisms. The second level is a server that runs at each network site. The tasks performed by the server include:</p>

<p></p>

<ul>
<li>Keeping track of the agents running on its machine and answering queries about their status.  <li>Accepting incoming agents, authenticating the identity of their owners, and passing the authenticated agent to the appropriate interpreter. The server selects the best transport mechanism for each outgoing agent.
  <li>Providing a flat namespace for agents and allowing agents to send messages to each other within this namespace. Each name includes the network location of the agent. The server buffers incoming messages and selects the best transport mechanism for outgoing messages.
  <li>Providing access to a nonvolatile store so that agents can back up their internal states as desired. The server restores the agents from the nonvolatile store in the event of machine failure.
</ul>

<p></p>

<p>All other services -- navigation, network sensing, group communication, fault tolerance, location-independent addressing, and access control -- are provided by agents. The most important service agents in the Agent Tcl prototype are resource-manager agents, which guard access to critical system resources such as the screen, network, and disk.</p>

<p>The third level of the Agent Tcl architecture consists of an interpreter for each available language. I say "interpreter" because most languages will likely be interpreted for portability and security. Each interpreter has four components: the interpreter itself; a security module that prevents an agent from taking malicious action; a state module that captures and restores the internal state of an executing agent; and an API that interacts with the server to handle migration, communication, and checkpointing. Adding a new language involves writing the security and state-capture modules and a language-specific wrapper for the generic API. The security module does not determine access restrictions, but ensures that an agent does not bypass the resource managers or violate the restrictions imposed by the resource managers. The state-capture module must provide two functions for use in the generic API: <i>captureState</i>, which takes an interpreter instance and constructs a machine-independent byte sequence that represents its internal state; and <i>restoreState</i>, which takes the byte sequence and restores the internal state. Finally, the top level of the Agent Tcl architecture consists of the agents themselves. </p>

<h3>Tcl and Agent Tcl </h3>

<p>Tcl is a high-level scripting language that has several advantages as a mobile-agent language. For instance, it is:</p>

<p></p>

<ul>
<li>Easy to learn and use due to its simplicity and an imperative style that is immediately familiar to programmers.   <li>Interpreted, so it is highly portable and easier to make secure. 
  <li>Embeddable in other applications, allowing those applications to implement part of their functionality with mobile Tcl agents. 
  <li>Extendable with user-defined commands, making it easy to tightly integrate agent functionality with the rest of the language and allowing a resource to provide a package of Tcl commands that an agent uses to access the resource. 
</ul>

<p></p>

<p>A package of Tcl commands can be more efficient than encapsulating the resource within an agent and is an attractive alternative in certain applications.</p>

<p>Tcl has several disadvantages. It is slower than native machine code. Additionally, Tcl provides no code modularization aside from procedures, which makes it difficult to write and debug large scripts. These disadvantages have not been a major hindrance since mobile agents tend to involve high-level resource access wrapped with straightforward control logic. A mobile Tcl agent is usually short even if it performs a complex task, and is usually more than efficient enough when compared to resource and network latencies. Several groups are working on structured-programming extensions to Tcl and faster Tcl interpreters. </p>

<p>Tcl is not suitable for every mobile-agent application, such as performing search operations against large, distributed collections of numerical data. For this reason, Agent Tcl includes a framework for incorporating additional languages. We are using this framework to add support for Java, which is much more structured than Tcl and has the potential to run at near-native speed through "just-in-time" compilation. We expect, however, that Tcl will continue to be the main agent language, and Java will be used only for speed-critical agents (or portions of agents). </p>

<p>The main disadvantage of Tcl is that it does not provide facilities for capturing the complete internal state of an executing script. Such facilities are essential for providing transparent migration at arbitrary points. Adding these facilities to Tcl was straightforward but required modification of the Tcl core.</p>

<p>The basic problem is that the Tcl core evaluates a script by making recursive calls to <i>Tcl_Eval</i>. The handler for the <i>while</i> command, for example, recursively calls <i>Tcl_Eval</i> to evaluate the body of the loop. Thus, a portion of the script's state is on the C run-time stack and is not easily accessible. Our solution adds an explicit stack to the Tcl core. We split the command handlers into one or more subhandlers where there is one subhandler for each code section before or after a call to <i>Tcl_Eval</i>. Each call to <i>Tcl_Eval</i> is replaced with a push onto the stack. <i>Tcl_Eval</i> iterates until the stack is empty and always calls the current subhandler for the command at the top of the stack. The subhandlers are responsible for specifying when the command has finished and should be popped. <a name="rf2"><a href="9703af2.htm">Figure 2</A> illustrates this process for the <i>while</i> command. </p>

<p>The modified Tcl core is compatible with the standard Tcl core. A command procedure that makes a recursive call to <i>Tcl_Eval</i> will work correctly on top of the modified core; it will just be impossible to capture the script's complete state when that command procedure is on the invocation stack. This means that existing Tcl extensions will work without modification (as long as the extension does not change the Tcl core itself). An extension has to be modified only if you want an agent to be able to carry the extension's state from machine to machine. In this case, you must make the same changes as for the <i>while</i> command and provide callback routines for state capture and restoration. Once the explicit stack was available, it was trivial to write procedures that save/restore the internal state of a Tcl script. These save/restore procedures are the heart of the state-capture module for the Tcl interpreter. They capture and restore the stack, procedure call frames, and all defined variables and procedures. Open files and linked variables are currently ignored.</p>

<p>The current implementation of Agent Tcl has two components -- a server and a modified version of Tcl 7.5 with a Tcl extension. The server, which runs at each network site, accepts, authenticates, and starts incoming agents; buffers incoming messages; provides the agent namespace; and answers queries about the status of the agents that are running on its machine. The server is implemented as two cooperating processes -- one that watches the network, and another that maintains a table of running agents. </p>

<p>The modified version of Tcl 7.5 provides the explicit stack and the state-capture routines. The extension provides the commands that agents use to migrate, communicate, and create child agents. The most important commands are <i>agent_begin</i>, agent_submit, <i>agent_jump</i>, <i>agent_send</i>, <i>agent_receive</i>, <i>agent_meet</i>, <i>agent_accept</i>, and <i>agent_end</i>. Internally each command uses the server API to contact an agent server, transfer an agent, message or request, and wait for a response. The main difference between the current implementation and the proposed architecture is that, when migrating, creating a child agent, or sending a message, the current implementation bypasses the local server and interacts directly with the destination server over TCP/IP. We adopted this approach to simplify the initial implementation, and we will change it as additional transport mechanisms are added. </p>

<p>An agent is simply a Tcl script that runs on top of the modified version of Tcl 7.5. The agent uses the <i>agent_begin</i> command to register with a server and obtain a name in the namespace. A name currently consists of the IP address of the server, a unique integer, and an optional symbolic name that the agent specifies with the <i>agent_name</i> command. The <i>agent_submit</i> command is used to create a child agent on a particular machine. <i>agent_submit</i> accepts a Tcl script, encrypts and digitally signs the script, and sends the script to the destination server. The server authenticates this agent, selects a name for it, and starts a Tcl interpreter in which to execute the agent. If the agent wants a symbolic name as well as a unique, integer identifier, it can call <i>agent_name</i> once it starts executing. </p>

<p>The <i>agent_jump</i> command migrates an agent to a particular machine. <i>agent_jump</i> captures the internal state of the agent, encrypts and digitally signs the state image, and sends the state image to the destination server. The server authenticates this agent, selects a new name for the agent, and starts a Tcl interpreter. The Tcl interpreter restores the state image and resumes agent execution at the statement immediately after the <i>agent_jump</i>.</p>

<p>The <i>agent_send</i> and <i>agent_receive</i> commands are used to send and receive messages. <i>agent_meet</i> and <i>agent_accept</i> are used to establish a direct connection between agents. A direct connection is a named-message stream. Direct connections are not required for communication but are more efficient and convenient. The source agent uses <i>agent_meet</i> to send a connection request to the destination agent. The destination agent uses <i>agent_accept</i> to receive the connection request and send either an acceptance or rejection. An acceptance includes a TCP/IP port number to which the source agent connects. The protocol works even if both agents use <i>agent_meet</i>. The agent with the lower IP address and integer identifier selects the port and the other agent connects to that port. A flexible RPC mechanism has been built on top of the direct-connection mechanism.</p>

<p>Agent Tcl also includes a (slightly) modified version of Tk 4.1 so that an agent can present a GUI and interact with the user of its current machine. Event handlers can be associated with incoming messages and with direct connections. </p>

<h3>Authentication </h3>

<p>Agent Tcl authentication is based on the Pretty Good Privacy (PGP) public-key cryptosystem. In the current implementation, we run PGP as a separate process and pipe the data to be encrypted through this process. This is clearly less efficient than tightly integrating PGP with the rest of the system, but is simpler and more flexible, especially since it becomes trivial to create an Agent Tcl distribution that does not include PGP or that uses different encryption software.</p>

<p>When an agent registers with a server using <i>agent_begin</i>, the registration request is digitally signed using the owner's private key, encrypted using the server's public key, and sent to the server. The server makes sure that the agent's owner is allowed to register on its machine and records the authenticated identity of the agent's owner. Then an IDEA secret key is used as a session key for all further communication between the agent and its newly registered server. The session key is needed to prevent a malicious program from contacting the server and masquerading as an existing agent. When the agent and its registered server are on the same machine (which is the predominant case), we do not actually encrypt with the session key since there is no possibility of message interception. A sequence number is included in the messages to prevent replay attacks.</p>

<p>When an agent migrates using <i>agent_jump</i>, it is digitally signed with the current server's private key and encrypted with the recipient server's public key. We digitally sign using the server's private key since the owner's private key is unavailable once the agent leaves its home machine. This approach requires the servers to have a high degree of trust in each other, so we will eventually adopt the Itinerant Agent solution, in which as much of the agent as possible is encrypted with the owner's private key on creation and remains encrypted throughout the agent's lifetime. The identity of the agent's owner is included in the migration message.</p>

<p>The recipient server chooses whether to believe the owner's identity based on its trust in the sending server. If the server accepts the agent, it records the apparent identity of the agent's owner, the authenticated identity of the sending server, and its degree of confidence that the owner's identity is valid. A session key is used for all further agent-server communication as in the <i>agent_begin</i> case. The same steps occur when a child agent is created with the <i>agent_submit</i> command except that a Tcl script is encrypted rather than a state image. The same steps also occur when an agent sends a message to an agent on another machine. In the case of a direct connection, an IDEA secret key is used as session key for all messages sent along the connection. A sequence number associated with the connection prevents replay attacks.</p>

<p>There are two weaknesses with the current implementation. First, there is no automatic distribution mechanism for the PGP public keys. Each server must already know all possible public keys so that it can authenticate incoming agents. An automatic distribution mechanism must be added when we start to use Agent Tcl in WANs. Second, the system is vulnerable to replay attacks in which an attacker replays a migrating agent or any message sent from one agent to another (outside of a direct connection). An obvious solution is for each server to have a distinct sequence number for all servers with which it is in contact. </p>

<h3>Authorization and Enforcement </h3>

<p>Once the identity of an agent's owner has been determined, the system must impose access restrictions on the agent (authorization) and ensure that the agent does not violate these restrictions (enforcement). In other words, the system must guard access to all available resources. We divide resources into two types: indirect resources accessed through another agent, and built-in resources directly accessible through language primitives for reasons of efficiency or convenience or simply by definition. Built-in Tcl/Tk resources include the screen, filesystem, wall-clock time, and CPU time.</p>

<p>For indirect resources, the agent that controls the resource enforces the relevant access restrictions. For each message from another agent, the local server attaches to the message a 5-tuple that contains the apparent identity of the agent's owner, the apparent identity of the sending server, a flag indicating whether the owner could be authenticated, a flag indicating whether the sending server could be authenticated, and a numerical confidence level representing how much trust the local server places in the sending server. The agent uses this 5-tuple along with its own internal access lists to respond appropriately to the incoming message. For built-in resources, security is maintained using Safe Tcl and a set of resource-manager agents. Safe Tcl is a Tcl extension that is designed to allow the safe execution of untrusted Tcl scripts. Safe Tcl provides two interpreters. One interpreter is a "trusted" interpreter with access to the standard Tcl/Tk commands. The other is an "untrusted" interpreter from which all dangerous commands (opening/writing a file and creating a network connection, for example) have been removed.</p>

<p>Although the dangerous commands have been removed from the untrusted interpreter, we do not want to deny all access to the resources associated with these commands. Thus, instead of removing a dangerous command entirely, Safe Tcl can replace the command with a link to a command in the trusted interpreter. This trusted command either severely restricts the functionality of the original command or examines the command arguments and the identity of the script's owner to determine if the command should be allowed. Agent Tcl uses the generalization of Safe Tcl that appears in the Tcl 7.5 core. </p>

<p>Agent Tcl creates a trusted and untrusted interpreter for each incoming agent. The agent executes in the untrusted interpreter. All dangerous commands have been removed from the untrusted interpreter and replaced with links to secure versions in the trusted interpreter. These secure versions check a set of access lists to see if the command is allowed. In the current implementation, there is an access list for wall-clock and CPU time, screen, network, filesystem, and external programs. Each access list is a set of (name, quantity) pairs where name specifies the name of the required resource and quantity specifies the number of instances of that resource (if applicable). </p>

<p>Initially the access lists are empty except that the agent is given a minimal amount of wall-clock and CPU time (our modified Tcl interpreter aborts a script if the script exceeds the time limits). To obtain additional time or to obtain access to other built-in resources, the agent must explicitly or implicitly ask a resource-manager agent for permission. There are five resource managers in the current system. These managers correspond to the five access lists and control access to wall-clock and CPU time, screen, network, filesystem, and external programs. </p>

<p>Our implementation does not yet provide a safe version of all dangerous commands. For example, an agent that arrives from another machine cannot use the <i>source</i> and <i>send</i> commands (the <i>send</i> command will probably never be available since it is difficult to make secure, and agents should communicate within the agent framework anyway). In addition, "annoyance" security threats (such as ringing the bell over and over) have not been eliminated. Agent Tcl currently protects the machine well using the simple kernel-user model of Safe Tcl. No direct access to system resources is possible. There is no way for an agent to subvert the resource-manager system since there is no way for the agent to modify the access lists contained in the trusted interpreter. It is possible for the agent to contact a resource manager directly, but this accomplishes nothing because the response will correctly grant or deny access, and, even so, will not be added to the access lists. In our case, Safe Tcl is the mechanism for enforcing the policy provided by the resource managers. When Java is added to the system, existing Java security mechanisms will be used to enforce the same policy provided by the same resource managers. </p>

<p>In addition to the resource managers, Agent Tcl includes a console agent. The console agent tracks all agents running on the machine and allows the machine's owner to deny entry to incoming agents and terminate running agents. It also provides a pathway through which a resource manager can ask the owner whether an agent should be able to perform a particular action. The owner will eventually be able to specify exactly those situations that require owner confirmation. </p>

<h3>Applications</h3>

<p><a name="rf3"><a href="9703af3.htm">Figure 3</A> shows the "who" agent, which illustrates some of the agent commands. <a name="rl1"><a href="9703a.htm#l1">Listing One</A> hows the Tcl source code for "who," and <a name="rf4"><a href="9703af4.htm">Figure 4</A> is sample output. The "who" agent's task is to determine which users are logged on to a set of machines. The agent uses <i>agent_submit</i> to create a child agent. The child agent jumps from machine to machine using <i>agent_jump</i> and executes the UNIX <i>who</i> command on each machine (named Bald, Cosmo, Lost-Ark, Temple-Doom, and Tuolomne). The child then sends the list back to its parent with <i>agent_send</i>. The parent has been waiting for the list with <i>agent_receive</i> and displays the list to the user. Although its task is simple and can be accomplished without a mobile agent, the "who" agent illustrates the general form of any agent that migrates through a sequence of machines.</p>

<p>Another example is our "alert" agent that monitors a specified set of remote resources and notifies its owner of any change in resource status. <a name="rf5"><a href="9703af5.htm">Figure 5</A> shows an "alert" agent that monitors a set of files and notifies users if the status of a file changes significantly (monitored characteristics include the UNIX <i>rwx</i> bits and the file size). <a name="rl2"><a href="9703a.htm#l2">Listing Two</A> is a simplified version of the "alert" agent (the procedures <i>file_watch</i>, which polls the files at regular intervals using the <i>file stat</i> command, and <i>construct_mail</i>, which constructs a human-readable mail message, are not shown). The agent creates one child agent for each remote filesystem using <i>agent_submit</i>. Each child agent monitors one or more files in its filesystem and sends a message to the parent when the status of a file changes significantly. The parent then contacts the owner's "mail" agent to send an e-mail message. </p>

<p>Since the child agents know which status changes are "significant," only the status changes that the user actually wants to see are transmitted across the network. Without mobile agents, either the remote machine would have to send back a notification of every change (which the application would filter on the home machine) or the appropriate monitoring routines would have to be preinstalled on the remote machine, limiting the application to the changes that the remote administrator considers significant. With mobile agents, the application can monitor for status changes according to any desired criteria while minimizing network traffic. </p>

<p>A hybrid of the two examples is our text-retrieval agent that searches distributed collections of text documents. This agent is designed to be launched from a mobile device. It first obtains the query from the user and then jumps to a permanently connected machine somewhere in the network. It then spawns one child agent for each collection. The child agents travel to the remote collections, perform the query using the available retrieval tools, and return to the permanently connected machine with the query results. The original agent then discards all duplicates and carries the results back to the mobile device. This allows the agent to continue its retrieval work even when the mobile device is disconnected and minimizes the total number of bytes transferred across the low-bandwidth connection between the mobile device and the network (each document entry consists of the title, author, and abstract so it takes only a few duplicates to add up to the agent's code size). In addition, there is no need to provide high-level search operations at each collection; since the child agents move to the collections, they can perform their search efficiently even if they must combine low-level primitives into the desired search operation. </p>

<h3>Future Directions</h3>

<p>The first area of future work is to finish the proposed architecture. We plan to add the nonvolatile store and multiple languages and transport mechanisms (such as Lisp, Java, e-mail, and HTTP). Additionally, we plan on enhancing the resource managers and adding the security mechanisms that will protect an agent from a malicious machine and a group of machines from a malicious agent. Finally, we must extend our existing application agents so that they use the available security information.</p>

<p>The second area of future work is to add support agents. The resource managers that specify the security policies are one type of support agent. An effective mobile-agent system requires several more. We are in the process of identifying and constructing the necessary agents. Work on agents that provide directory services, navigation services, network-sensing tools, high-level communication services, and graphical construction tools is in progress. Some of these will be available by the time that you read this.</p>

<p>The third area of future work is to experimentally compare the performance of mobile agents against traditional client/server solutions and to formally characterize when an agent should remain stationary and when and how far it should migrate. Such a characterization must consider such things as network latency and bandwidth, relative machine speeds, code sizes, and data volumes.</p>

<p><b></b></p>

<p>DDJ</p>

<H4><a name="l1">Listing One</H4>

<pre>  # procedure WHO is the child agent that does the jumping proc who machines { 
  global agent 
  set list "" 
    # jump from machine to machine and execute Unix who command on each machine
  foreach m $machines { 
    if {catch "agent_jump" $m"} { 
      append list "$m:\n unable to JUMP to this machine" 
    else { 
      set users [exec who] 
      append list "$agent(local-server):\n$users\n\n" 
    } 
  } 
  agent_send $agent(root) $list 
  exit
} 
set machines "bald cosmo lost-ark temple-doom moose muir tenaya tioga tuolomne"
  # get a name from the server 
agent_begin 
  # submit the child agent that jumps 
agent_submit $agent(local-ip) -vars machines -procs who -script {who $machines}
  # wait for and output the list of users 
agent_receive code string -blocking 
puts $string 
  # agent is done 
agent_end 
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>set email_agent "bald rgray_email"      # machine and name of email agent set machines "bald moose" 
set directory "~rgray" 
  # get a name from the server 
agent_begin  
  # submit the "file" agents that watch for changes in file size 
for each m $machines { 
  agent_submit $m -vars directory -proc file_watch {file_watch $directory} 
} 
  # wait for one of the "file" agents to send a message saying that the 
  # status of a file has changed; then send an alert message to the user 
  # by asking the user's email agent to send a message to its owner 
while {1} { 
  agent_receive code string -blocking 
  set alert [construct_alert $string] 
  agent_send $email_agent {SEND OWNER $alert} 
}
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
