<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal November 1997: Template-Driven Web Pages</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Template-Driven Web Pages</h1>

<p><i>Dr. Dobb's Journal</i> November 1997
</p>
<h2>A CGI program that parses templates</h2>

<h3>By Jay Johansen</h3>

<I>Jay, a webmaster in Ohio, can be reached at jayj@ohiolife.org.</I>

<hr>

<p>My organization's web site has two pages -- a calendar of events and the obligatory list of links to related sites -- that are updated with new information e-mailed by visitors. While the volume, which is of e-mail requesting these updates has not been huge, I am often too busy to update the pages promptly.</p>

<p>The obvious solution is to allow users to update these pages themselves, using a web form and Common Gateway Interface (CGI) program that updates the HTML page automatically, so that changes appear instantly. Rather than create a unique CGI program for updating each particular page, I wrote a more general, template-driven CGI application that can easily be extended to support updates of any page. In this article, I'll present an application called "dynadd" that uses the template language and parsing techniques I developed.</p>

<h3>Structure </h3>

<p>As <a name="rf1"><a href="9711gf1.htm">Figure 1</A> illustrates, dynadd (available electronically; see "Availability," page 3) involves four files (not counting the program itself):</p>

<ul>
<li>An HTML form for the users to supply updates. It includes hidden parameters specifying the names of the remaining files.  <li>A comma-delimited ASCII file that holds the data supplied by users.
  <li>An output-file template. This, of course, is the key to the application. Most of the template consists of generic HTML and plain text that will be copied verbatim to the output file. Additionally, there are some special pseudotags and pseudoentities to control where and in what format data from the data file is inserted in the fixed text.
  <li>An HTML output file created by dynadd from the template file and the raw data.
</ul>

<p></p>

<p><a name="rl1"><a href="9711g.htm#l1">Listings One</A>, <a href="9711g.htm#l2">Two</A>, and <a href="9711g.htm#l3">Three</A> are examples of the template file (dyndemo.htx), data file (dyndemo.dat), and input form (dyndemo.html), respectively UNIX users may have to change the file permissions to permit updates to the data file. If your security does not permit web users to create new files -- and it normally should not -- you must create a writeable dummy output HTML file before the first run.</p>

<p>Once the output page is created, it is accessed like any ordinary HTML file. I could have implemented a program to generate the page on-the-fly every time it is accessed, but this would have been less efficient, since the page will most likely be read more often than it is updated.</p>

<h3>The Template </h3>

<p>The template file is ordinary HTML with the addition of some special markup tags and entities. Any text (including markup) that the program does not recognize is simply passed through to the output file. The program makes no attempt to process or validate the HTML. This is done quite deliberately: It means that any legal HTML, including future tags and extensions, will process successfully. Of course illegal HTML will also pass, but there are plenty of other ways to validate your HTML.</p>

<p>The additional information resembles HTML tags and entities. I deliberately made this look like "real" HTML because it seemed like an elegant solution. It has the drawback of possibly conflicting with future HTML enhancements. In the case of such a conflict, the constructs would be interpreted as dynadd constructs and not as HTML, because dynadd processes the file before a web browser ever sees it. </p>

<p>Specifically, dynadd uses two pairs of pseudotags, &lt;detail&gt; and &lt;if&gt;, and their corresponding terminators, &lt;/detail&gt; and &lt;/if&gt;.</p>

<p>&lt;detail&gt; and &lt;/detail&gt; identify blocks of text containing markers that identify where the data from the data file should go. Everything between these two tags is processed once for each record in the data file.</p>

<p>Fields from the data file are included by using the field name as if it were an entity; that is, preceding the name of the field with an ampersand, and ending it with a nonalphanumeric character. If this character is a semicolon, the semicolon is discarded; any other terminator is retained as part of the text. Any additional text is passed through unchanged. Note that the text can include markup, and fields can be included in markup, so you can say things like "&lt;a href=&amp;someurl&gt;".</p>

<p>The &lt;if&gt; pseudotag allows you to define conditional constructs. The word "if" is followed by a logical expression. If the expression evaluates to false, any text up to the corresponding <b>&lt;/</b>if<b>&gt; </b>is discarded; otherwise, the encapsulated text is processed normally. You may nest &lt;if&gt;s.</p>

<p>&lt;if&gt;s can be used to exclude records that fail some criteria. For example, in the calendar of events, I exclude events with past dates. &lt;if&gt;s can also be used to eliminate headings when the corresponding field is blank, or to vary text depending on the data for the particular record.</p>

<p>The only operations that may be used in &lt;if&gt; expressions in this version of the program are string comparisons and the logical operators "and" and "or." Other operators could be added if needed. There is no way to include the result of an expression in the output as text. Such a feature could easily be added, but again, I haven't needed it, so I haven't bothered.</p>

<p>My original version used conventional mathematical symbols like "&lt;" and "&gt;" for relations, but HTML uses these symbols to identify markup. So, instead, I resorted to the Fortran relational operators <i>gt</i> (greater than), <i>le</i> (less than or equal), <i>eq</i> (equal), and so on. All operators must have a space before and after. (You can also use "=" for equality, but it must be surrounded by spaces.) As a special case, an expression consisting of a single field name is considered true if the field is not empty, and false if it is empty. This conveniently handles the most common requirement: suppressing headings when a field is omitted.</p>

<p>The program allows more than one &lt;detail&gt; section in a single template, which causes the data file to be processed more than once. You can use this feature, combined with &lt;if&gt;s, to exclude entire records or to break the data into sections. That is, follow the first occurrence of &lt;detail&gt; with an &lt;if&gt; that will only pass records wanted for the first section; follow the second &lt;detail&gt; with an &lt;if&gt; that will only pass records for the second section; and so on. This is inefficient in that it causes the same records to be read multiple times, but for a modest-sized data file, it is perfectly adequate, and it provides the flexibility of including the same record in multiple sections if desired.</p>

<h3>Parsing</h3>

<p>Dynadd's parser has three levels:</p>

<p></p>

<ul>
<li>The "document level" copies HTML to the output, and stores &lt;detail&gt; text in a buffer.  <li>The "detail level" parses the &lt;detail&gt; text, reads the data file, and fills in the file data where appropriate.
  <li>The "expression level" parses the logical expressions contained within &lt;if&gt; tags.
</ul>

<p></p>

<p>In both the document and detail levels, you need to distinguish between three basic conditions: fixed text, tag, or entity. One buffer stores tag text and another buffer stores entity text. The pointers to these buffers double as flags: NULL means off and non-NULL means on. These pointer flags then describe the three possible conditions. A non-NULL entity pointer indicates that the current token is an entity. A non-NULL tag pointer shows that we are parsing a tag. When both are NULL, we are parsing fixed text. Technically, it is legal to have entities inside tags, so it is possible for both to be active, in which case entities takes precedence.</p>

<p>When dynadd reads "&lt;", indicating the start of a markup tag, it adds the subsequent text to the tag buffer until it sees a terminating "&gt;". At that point, dynadd checks the tag buffer to see if the tag is a pseudotag; if not, then it is just passed to the output.</p>

<p>When dynadd sees an "&amp;", it adds the subsequent text to the entity buffer. As with the markup tag, dynadd then checks the entity buffer to see if it is a pseudoentitity. If it is, dynadd copies the value of that field for this record to the output; otherwise, it just passes it through to the output.</p>

<h3>Expression Parser </h3>

<p>The expression parser works by converting the incoming expression to Shilop (reverse Polish). In normal "algebraic" notation, you write an operand, followed by an operator and another operand, like "3+7". In Shilop, you write "3,7+". This format is easier to parse.</p>

<p>All the operators are binary, which simplifies the parsing scheme. Since dynadd deals primarily with string operands in evaluating logical operations, a null string is considered false, and everything else is true. dynadd uses "Y" when it has to create a True string.</p>

<p>This implementation uses two stacks: one for values and one for operators. First, it collects a token. If it's a literal, it pushes it onto the top of the value stack. If it's a variable, it finds its value and pushes that on the value stack. In this program, you do almost no arithmetic, so everything is stored as a text strings. Extending the parser to handle other data types is not particularly difficult: The main catch is dealing with incompatible data types, such as the expression <i>if "hello" == 7</i>.</p>

<p>If the token is an operator, it pops an operator off the operator stack and compares the popped operator with the current operator. If the popped operator has higher precedence, it pops the two values from the value stack, evaluates them using the operator, and pushes the result to the value stack. If the current operator has higher precedence, the popped operator is pushed back onto the stack, then the current operator is pushed onto the stack. If the operator stack is empty, then the operator is simply pushed onto the stack. When the end of the expression is reached, anything remaining on the operator stack is popped and processed. You are left with the final result.</p>

<p>Consider the expression in <a name="re1"><a href="9711ge1.htm">Example 1</A> where the expression parser proceeds as follows: <i>year</i> is a variable, so it finds its value and pushes it onto the value stack. <i>ge</i> is an operator. Since the stack is empty, <i>ge</i> is pushed onto the operator stack. <i>1997</i>, a literal, is pushed onto the value stack.</p>

<p>The next token, <i>and</i>, is an operator with lower precedence than <i>ge</i>, the top value of the operator stack. So <i>ge</i> is popped along with <i>year</i> and <i>1997</i>. The expression is evaluated and pushed onto the value stack. <i>and</i> is pushed onto the operator stack.</p>

<p><i>event</i> is then read and pushed onto the variable stack. Now, the current operator, <i>eq</i>, has higher precedence than <i>and</i>, the operator on the top of the stack. So <i>eq</i> is pushed and nothing is popped or evaluated. <i>convention</i> is pushed onto the value stack, and nothing is left on the expression, so everything remaining on the value and operator stacks is popped and processed. This gives you the final result.</p>

<p>If you ever find that you don't have enough values on the stack, then there must have been a syntax error in the input. Ditto if you have more than one value on the value stack when you're done.</p>

<h3>Tying the Pieces Together </h3>

<p>Somehow the program must be able to put fields from the add-entry form into the proper place in the data file, and then retrieve these fields correctly when processing the template. In my first version, the fields were simply numbered, with the number reflecting the order in which they were stored in the data file. That is, field &amp;<i>1</i> was the first field in the record, field &amp;<i>2</i> was the second, and so on. This was simple, but it quickly proved difficult to work with. </p>

<p>Now, I use a slightly more sophisticated scheme. The data file uses a special parameter record, labeled with <i>#field=, </i>that lists the field names. When the add-entry form is processed, the form field names are matched against the field names in the data file parameter record. The fields are then stored in the order specified by the parameter record, which is not necessarily the order in which they occur on the form. When the template is processed, field names are again matched to the parameter record, and the appropriate field is extracted from the data record. Note that this means that new fields may be added without upsetting any existing data or the order in which users see the fields -- provided that they are added to the end of the data record. Fields on either the add-entry form or the output page may be freely rearranged.</p>

<h3>Security</h3>

<p>Providing ways for visitors to update data on your site without intervention is asking for trouble. For example, you have no assurance that the forms users submit are those you supplied  --  they may have copied one of yours, modified it, and returned their own version. Nor do you have assurances that users will not input "illegal" text. You must take these problems into account, and make your application extremely robust. I took numerous steps to plug as many holes as possible, although there may be some that I missed.</p>

<p>To make the program flexible, it must be able to access different templates and data files at different locations. These and other parameters must be specified in the HTML add-entry form, either as command-line parameters or as hidden fields. However, you don't want to allow users to read from or write to arbitrary files simply by modifying these parameters.</p>

<p>To prevent this, the only parameter on the add-entry form is the base name of the data file; all other necessary parameters are located within the data file. Thus, only files within the HTML document tree can be accessed; for example, there is no way to specify the password file. All associated files use the same base filename with specific extensions designating the file's purpose; these extensions are hardcoded into dynadd, so only files with these extensions can be accessed.</p>

<p>Whatever users enter into the form ultimately makes its way to the final HTML page. A careless user might insert an &lt;h1&gt; tag and forget to terminate it, causing all the text that follows -- including text entered by others -- to display in huge type. Malicious users could do similar visual tricks to render the page unreadable, or could take advantage of malicious Javascript or server-side <i>include</i>s.</p>

<p>To prevent "bad" HTML, I simply disallowed all markup tags from user input, by removing all "&lt;" and "&gt;" characters and everything in between. In the future, I will enhance the program to allow harmless markup, like bolding and italics, and ensure that all tags are properly terminated.</p>

<p>The data file assigns some characters special meaning: A newline is an end-of-record mark, vertical bars act as field separators, and pound signs specify parameter records. To prevent users from using these characters and causing parsing errors, I replace these with nonreserved characters (pound signs with asterisks, vertical bars with slashes, and newlines with spaces).</p>

<p>It would not take any great technical sophistication for malicious users to fill the form with obscenities or some other hostile message, then click the submit button a few hundred times. Even if readers were content to simply ignore the offensive material, they would have to sort through pages and pages of junk to find the real data. More sophisticated users could also try to execute malicious code on a server by overflowing the buffers in my application with carefully crafted strings.</p>

<p>Consequently, I impose certain limits. First, I limit and enforce the maximum length of a single entry, which prevents this buffer overflow problem. Second, I set a limit on the number of entries that can be added to the file from any single remote computer. CGI makes the name of the client's machine available through the REMOTE_HOST environment variable. Note that the limit must be set high enough so that a client machine with legitimate multiple inputs is not likely to go over the limit.</p>
<HR>
<H4><a name="l1">Listing One</H4>

<pre>&lt;html&gt;&lt;title&gt;Dynadd Demo -- A Link Page&lt;/title&gt;&lt;h1&gt;Dynadd Demo -- A Link Page&lt;/h1&gt;
<p></p>
&lt;hr&gt;
Return to &lt;a href="index.html"&gt;home page&lt;/a&gt;
<p></p>
&lt;hr&gt;
Add a link to this page using
&lt;a href="dyndemoa.htm"&gt;this handy form!&lt;/a&gt;&lt;p&gt;
<p></p>
&lt;i&gt;Probably some introductory text here, maybe disclaimers about not
taking responsibility for the content of links people added themselves,
etc.
The headings are, of course, intended only for illustration.&lt;/i&gt;&lt;p&gt;
<p></p>
&lt;h2&gt;Computers&lt;/h2&gt;
&lt;ul&gt;
<p></p>
&lt;detail&gt;&lt;if subj = "compute" and xdate ge xtoday&gt;
&lt;li&gt;&lt;a href="&amp;url"&gt;&amp;title&lt;/a&gt;
&lt;if submit&gt;&lt;br&gt;
submited by &amp;submit
&lt;/if&gt;&lt;/if&gt;&lt;/detail&gt;
&lt;/ul&gt;
<p></p>
&lt;h2&gt;Government&lt;/h2&gt;
&lt;ul&gt;
&lt;detail&gt;&lt;if subj = "gov" and xdate ge xtoday&gt;
&lt;li&gt;&lt;a href="&amp;url"&gt;&amp;title&lt;/a&gt;
&lt;if submit&gt;&lt;br&gt;
submited by &amp;submit
&lt;/if&gt;&lt;/if&gt;&lt;/detail&gt;
&lt;/ul&gt;
<p></p>
&lt;h2&gt;Miscellaneous&lt;/h2&gt;
&lt;ul&gt;
&lt;detail&gt;&lt;if subj = "misc" and xdate ge xtoday&gt;
&lt;li&gt;&lt;a href="&amp;url"&gt;&amp;title&lt;/a&gt;
&lt;if submit&gt;&lt;br&gt;
submited by &amp;submit
&lt;/if&gt;&lt;/if&gt;&lt;/detail&gt;
&lt;/ul&gt;
<p></p>
&lt;hr&gt;
Copyright 1997 by me&lt;p&gt;
&lt;/html&gt;
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>#limit=3#fields=url|title|submit|subj|xmonth|xday|xyear
cmh.infinet.com|http://hoohoo.ncsa.uiuc.edu|NCSA 
                                     Web Server Documentation||compute|
abc.org|http://www.ddj.com|Dr Dobb's Journal||compute
abc.org|http://www.wpafb.af.mil|Write-Patterson Air Force Base|Mary Jones|gov
abc.org|http://www.dole96.com|Dole for President||gov|Nov|4|1996
day-p005.infinet.com|http://www.cs.cmu.edu/books.html|
                                     On-Line Books||misc|Jun|30|1997
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>&lt;html&gt;&lt;title&gt;Dynadd demo: Add to link page&lt;/title&gt;&lt;h1&gt;Dynadd demo: Add to link page&lt;/h1&gt;
&lt;hr&gt;
Return to &lt;a href="dyndemo.htm"&gt;link page |
&lt;a href="index.html"&gt;home&lt;/a&gt;
&lt;hr&gt;
Use this form to add to our link page!&lt;p&gt;
<p></p>
&lt;form action="/cgi-bin/dynadd/test/dyndemo" method=post&gt;
&lt;table&gt;
&lt;tr&gt;&lt;td align=right&gt;URL&lt;br&gt;
    &lt;td&gt;&lt;input name=url size=40&gt;
&lt;tr&gt;&lt;td align=right&gt;Page title&lt;br&gt;
    &lt;td&gt;&lt;input name=title size=40&gt;
&lt;tr&gt;&lt;td align=right&gt;Submitter's name
    &lt;td&gt;&lt;input name=submit size=40&gt;
&lt;tr&gt;&lt;td align=right valign=top&gt;Heading you belong under&lt;br&gt;
    &lt;td&gt;&lt;input type=radio name=subj value=compute&gt;Computers&lt;br&gt;
      &lt;input type=radio name=subj value=gov&gt;Government&lt;br&gt;
      &lt;input type=radio name=subj value=misc&gt;Miscellaneous&lt;br&gt;
&lt;tr&gt;&lt;td align=right&gt;If this URL will no longer be valid after a
       certain date, enter expiration date here
    &lt;td&gt;&lt;select name=xmonth&gt;
      &lt;option value=""&gt;
      &lt;option value="Jan"&gt;Jan &lt;option value="Feb"&gt;Feb &lt;option value="Mar"&gt;Mar
      &lt;option value="Apr"&gt;Apr &lt;option value="May"&gt;May &lt;option value="Jun"&gt;Jun
      &lt;option value="Jul"&gt;Jul &lt;option value="Aug"&gt;Aug &lt;option value="Sep"&gt;Sep
      &lt;option value="Oct"&gt;Oct &lt;option value="Nov"&gt;Nov &lt;option value="Dec"&gt;Dec
      &lt;/select&gt;
      &lt;select name=xday&gt;
      &lt;option value=""&gt;
      &lt;option value="1"&gt;1 &lt;option value="2"&gt;2 &lt;option value="3"&gt;3
      &lt;option value="4"&gt;4 &lt;option value="5"&gt;5 &lt;option value="6"&gt;6
      &lt;option value="7"&gt;7 &lt;option value="8"&gt;8 &lt;option value="9"&gt;9
      &lt;option value="10"&gt;10 &lt;option value="11"&gt;11 &lt;option value="12"&gt;12
      &lt;option value="13"&gt;13 &lt;option value="14"&gt;14 &lt;option value="15"&gt;15
      &lt;option value="16"&gt;16 &lt;option value="17"&gt;17 &lt;option value="18"&gt;18
      &lt;option value="19"&gt;19 &lt;option value="20"&gt;20 &lt;option value="21"&gt;21
      &lt;option value="22"&gt;22 &lt;option value="23"&gt;23 &lt;option value="24"&gt;24
      &lt;option value="25"&gt;25 &lt;option value="26"&gt;26 &lt;option value="27"&gt;27
      &lt;option value="28"&gt;28 &lt;option value="29"&gt;29 &lt;option value="30"&gt;30
      &lt;option value="31"&gt;31
      &lt;/select&gt;
      &lt;select name=xyear&gt;
      &lt;option value=""&gt; &lt;option value=1997&gt;1997 &lt;option value=1998&gt;1998
      &lt;/select&gt;&lt;br&gt;
&lt;/table&gt;
<p></p>
&lt;p align=center&gt;
&lt;input type=submit value=" Add "&gt;
&lt;input type=reset value="Reset"&gt;
&lt;p&gt;
&lt;/form&gt;
&lt;hr&gt;
Copyright 1997 by me&lt;p&gt;
&lt;/html&gt;
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>

<p><b>DDJ</b></p>


<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
