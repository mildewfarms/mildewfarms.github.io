<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal November 1997: Scientific Computing: C++ Versus Fortran</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Scientific Computing: C++ Versus Fortran</h1>

<p><i>Dr. Dobb's Journal</i> November 1997
</p>
<h2>C++ has more than caught up</h2>

<h3>By Todd Veldhuizen </h3>

<I>Todd is a graduate student in systems design engineering at the University of Waterloo, Canada, and the author of the Blitz++ class library. He can be reached at tveldhui@monet.uwaterloo.ca.</I>

<hr>

<p>C++ has a number of features that make it attractive for scientific computing, including templates for generic programming, operator overloading for expressiveness, and object orientation for abstraction and code reuse. Despite these features, the scientific computing community has been reluctant to adopt C++, partly because of performance problems. In the early 1990s, C++ programs were indeed slower than their Fortran counterparts -- typical benchmarks showed C++ lagging behind Fortran's performance by anywhere from 20 percent to a factor of 10. Users of C++ often rewrote the number crunching parts of their programs in Fortran to get acceptable performance.</p>

<p>In the past five years, the performance of C++ programs has improved markedly due to a combination of better optimizing C++ compilers and new library techniques. In some recent benchmarks, C++ is even faster than Fortran. In this article, I'll explain these techniques and show benchmarks comparing Fortran to Blitz++, a C++ class library designed for scientific computing (http://monet.waterloo .ca/blitz/).</p>

<h3>Why C++ Programs are Faster Than They Used to Be</h3>

<p>There are a number of reasons for C++'s improved performance in numeric programming, including expression templates, optimization of small objects, and better compilers. </p>

<p><b>Expression Templates.</b> Operations on vectors, matrices, and arrays form the foundation of most scientific computing code. In C++, classes can customize the meaning of operators such as (+, -, *, /). This capability, called "operator overloading," enables C++ matrix/vector class libraries to provide a very natural notation. For example, <i>w=x+y+z;</i> might represent the summation of three vectors. </p>

<p>Operator overloading in C++ is pairwise: To evaluate this expression, C++ forces you to first evaluate <i>t1=x+y</i>, then <i>t2=t1+z</i>, and finally assign <i>w=t2</i>. The <i>t1</i> and <i>t2</i> objects are temporaries used to store intermediate results.</p>

<p>Pairwise expression evaluation for vectors is slow: Instead of a single loop to evaluate an expression, multiple loops and temporary vectors are generated. These temporary vectors are usually allocated dynamically, which causes a severe performance loss for small vectors. For example, suppose you evaluated <i>w=x+y+z</i> for vectors of length 3. The floating-point arithmetic takes only a handful of clock cycles; dynamically allocating and deleting the temporary vectors consumes hundreds (or even thousands) of cycles. Consequently, C++ matrix/vector libraries tended to be slow for operations on small objects.</p>

<p>For large vectors, the main performance issue is memory bandwidth. Many scientific computing codes are constrained in performance not by floating-point arithmetic, but by the time required to ship data between main memory and the CPU. Suppose that each vector contained 1 MB of data. The operator-overloaded version of <i>w=x+y+z</i> requires 8 MB of data to be transferred between the CPU and main memory, exactly twice what is actually needed. As a consequence, the speed is roughly half of what could be attained.</p>

<p>The pairwise evaluation problem has been solved by the expression templates technique. In an expression templates implementation, operators like "+" don't return intermediate results. From the compiler's point of view, the expression is still evaluated pairwise, but operators like "+" return partial parse trees of the expression (rather than intermediate results). The parse tree is encoded as a C++ class type using templates. When the parse tree is assigned to an object, the expression can be evaluated in one pass without having to generate intermediate results.</p>

<p>The technique has some overhead associated with expression parsing, but the performance for long vectors is just as good as hand-coded C. A good optimizing C++ compiler is able to eliminate this overhead completely, so that performance is reasonable for small vectors, too. (To get optimal performance, you have to unroll the loops completely for small vectors.)</p>

<p><b>Optimizations for Small Objects.</b> In "Linear Algebra with C++ Template Metaprograms," (<i>DDJ</i>, August 1996), I described special optimizations for small vectors and matrices using the template metaprogram technique. Briefly summarized, it turns out that C++ compilers can be persuaded to do arbitrary computations at compile time by metaprograms that exploit the template instantiation mechanism. One good use of template metaprograms is creating specialized algorithms. As an example, consider <a name="rl1"><a href="9711b.htm#l1">Listing One</A> which calculates a 3&times;3 matrix-vector product.</p>

<p>Calculating the result requires 15 floating-point operations, but this bit of code will consume hundreds of clock cycles. Why? The <i>Matrix</i> and <i>Vector</i> objects must allocate their memory dynamically, which takes a lot of time. The <i>product()</i> function resides in a library somewhere, and likely consists of two nested loops to compute the matrix-vector product. When compilers optimize loop code, they often assume that the loop will be executed many times. The result is code that is very fast for large matrices, but mediocre for small matrices.</p>

<p>The solution I've adopted in the Blitz++ class library is to provide two versions of objects like <i>Matrix</i> and <i>Vector</i>. One version is optimized for large objects (<i>Vector</i>, for example), and the other is optimized for small objects (<i>TinyVector</i>). The <i>Tiny...</i> objects use template metaprograms to create very fast code. <a name="rl2"><a href="9711b.htm#l2">Listing Two</A> is the matrix-vector product implemented with <i>Tiny...</i> objects, while <a name="rl3"><a href="9711b.htm#l3">Listing Three</A> is a skeletal declaration of <i>TinyVector</i>. Putting the vector data inside the object allows it to reside on the stack, so the overhead of allocating memory is avoided. The function <i>product()</i> invokes a template metaprogram that creates a specialized matrix-vector multiplication algorithm. The metaprogram produces <a name="rl4"><a href="9711b.htm#l4">Listing Four</A>.</p>

<p>Big blocks of uninterrupted floating-point code like this are exactly what's needed to get peak performance on modern pipelined, superscalar CPUs. The metaprogram version of the 3&times;3 matrix-vector product takes 13 clock cycles in sustained execution on an RS/6000 Model 43P. (It's this fast because matrix A is kept in registers, and combined multiply-add instructions are used.)</p>

<p><b>Better Compilers.</b> A large part of C++'s performance problem was inadequate compilers. Happily, C++ compilers have come a long way in the past decade. To demonstrate this, consider KAI C++ (from Kuck and Associates, http://www.kai.com/), which has incredible optimization abilities. To illustrate, I'll examine some code that reflects a ray of light off a surface. I'll call the incident ray vector <i>x</i>, the reflected ray <i>y</i>, and the surface normal vector <i>n</i>; see <a name="rf1"><a href="9711bf1.htm">Figure 1</A>.</p>

<p>I'll work in a three-dimensional space, so it makes sense to use the class <i>TinyVector</i>, which does special optimizations for small vectors. <a name="rl5"><a href="9711b.htm#l5">Listing Five</A> is the reflection function. The <i>reflect()</i> code looks very similar to the mathematical equation that it implements: <i>y=x-2(x<img src="dot09.gif" alt="[dot]" width="4" height="7"> n)n</i>. Behind this simplicity lies an elaborate implementation: First, a template metaprogram unrolls the dot product <i>dot(x,n)</i> into the code <i>x[0]*n[0]+x[1]*n[1]+x[2]*n[2]</i>. The vector arithmetic is then parsed using expression templates, producing temporary objects corresponding to partial parse trees. Evaluation of the expression for <i>y[0]</i>, <i>y[1]</i>, and <i>y[2]</i> is unrolled using another template metaprogram. KAI C++ is able to optimize away all the expression-template overhead using copy propagation and dead-code elimination, and produce code equivalent to <a name="rl6"><a href="9711b.htm#l6">Listing Six</A>.</p>

<p>Examining this code, you see six multiplies, three additions, three subtractions, six loads, and three stores for a total of 21 operations. On an RS/6000, the assembly code generated by KAI C++ and the back-end compiler consists of only 20 opcodes. The data is kept in registers, and combined multiply-add instructions are used. This is very impressive considering how complex the expression-template machinery is. But it gets better! Suppose you want to calculate the reflection of a particular ray. Overloading the comma operator is a concise way to assign vector literals; see <a name="rl7"><a href="9711b.htm#l7">Listing Seven</A>.</p>

<p>When this code is compiled, KAI C++ discards the temporary objects created by the overloaded comma operator, does the aforementioned optimizations for <i>reflect()</i>, and performs constant folding to evaluate arithmetic on constant values. The final code is equivalent to <a name="rl8"><a href="9711b.htm#l8">Listing Eight</A>. The compiler calculates the reflection at compile time, and ditches the <i>x</i> and <i>n</i> vectors, since they're no longer needed. Now that's an optimizing compiler!</p>

<h3>Benchmark Results</h3>

<p>The benchmarks I'll now turn to were measured on a 100-MHz IBM RS/6000 Model 43P (PowerPC) with 16 KB of L1 cache and 256 KB of L2 cache. The C++ programs were compiled using KAI C++ at +K3 -O2, and Fortran 77 code was compiled with XL Fortran at -O3.</p>

<p><b>Linear Algebra.</b> The first benchmark measures the performance of a DAXPY operation, short for "Double Precision A Times X Plus Y." This routine is the workhorse of many linear algebra operations, such as Gaussian elimination. <a name="rl9"><a href="9711b.htm#l9">Listing Nine</A> is a DAXPY operation using the Blitz++ class library.</p>

<p><a name="rf2"><a href="9711bf2.htm">Figure 2</A> shows benchmark results for the Blitz++ classes <i>TinyVector</i> and <i>Vector</i>, Fortran 77, and the class <i>valarray</i> (Modena implementation) from the draft ISO/ANSI C++ Standard. The class <i>TinyVector</i> is optimized for very small vectors, so its performance is much better than the other implementations for vectors of length 1..10. The <i>Vector</i> class and the Fortran 77 implementation have some loop overhead, which makes their performance poorer for small vectors. As you can see, for longer vectors their performance is very similar. The sudden performance drop around N=1000 occurs because the vectors are no longer small enough to fit in the L1 cache.</p>

<p>The performance of <i>valarray</i> is typical of older C++ class libraries that use pairwise evaluation and dynamically allocated temporaries. Notice that for very small vectors, memory allocation overhead causes the performance to be awful -- about a tenth that of <i>Vector</i> and Fortran 77. Its peak performance is also terrible, since pairwise evaluation forces it to move twice as much memory around as necessary. The extra memory use causes <i>valarray</i> to experience the L1 cache crunch much sooner than <i>Vector</i> or Fortran 77.</p>

<p>Fortran 90, the successor to Fortran 77, was also benchmarked, but on this platform the compiler had difficulty optimizing the DAXPY operation -- the performance was much worse than Fortran 77.</p>

<p><b>Array Stenciling.</b> Array stencils are common in signal processing and the solution of partial differential equations. A stencil updates an array element using a function of the elements in a local neighborhood. <a name="rl10"><a href="9711b.htm#l10">Listing Ten</A> is a Fortran 77 stencil operation that smooths a 3D array.</p>

<p>The performance of a stencil operation is heavily constrained by memory accesses, so efficient cache use is critical. Most computers have (at least) two levels of cache: the L1 cache, which is part of the CPU, and the external L2 cache. Of these, the L1 cache is faster. So, for good performance, the L1 cache must be used as much as possible. In the straightforward Fortran implementation just mentioned, the L1 cache-hit rate is typically about 54 percent for a large array (this means that 54 percent of the data is found in the L1 cache; the remaining data has to be pulled in from the L2 cache or main memory). To get a higher L1 cache-hit rate, it's necessary to traverse the array in a different order. One approach is dividing the array into smaller subarrays, and applying the stencil to each subarray in turn. This is commonly called "tiling" or "blocking." Converting <a href="9711b.htm#l10">Listing Ten</A> to a blocked version would require five (or six) nested loops. In some cases, Fortran compilers can transform an algorithm into a blocked version automatically, but often not for complicated stencils.</p>

<p>One problem with blocking is selecting the block size -- to get optimal performance, it has to be chosen carefully with the particular architecture and cache sizes in mind. In the Blitz++ library, I decided to adopt a slightly different approach, based on the Hilbert space-filling curve; see <a name="rf3"><a href="9711bf3.htm">Figure 3</A>. In this approach, there are two loops: an outer loop, which follows an approximation to the Hilbert space-filling curve (1), and an inner loop (2), which traverses the corresponding column of the array. The space-filling curve ensures good cache use, and the inner loop allows the CPU pipelines to pick up steam as the column is traversed.</p>

<p>This traversal ordering has a very nice property: Performance increases steadily for every extra bit of cache you have, resulting in good performance on all platforms. For most platforms, the L1 cache-hit rate is 70 to 76 percent (compared to only 54 percent for the Fortran 77 program previously described). This isn't the case for blocked algorithms, where performance makes abrupt jumps at critical cache sizes, making tuning very platform dependent.</p>

<p>Implementing the Hilbert curve traversal is complicated, requiring about a hundred lines of code. In Blitz++, this complexity is completely hidden inside the library. The user-level code looks like <a name="rl11"><a href="9711b.htm#l11">Listing Eleven</A>.</p>

<p>Using the expression templates technique, this code is transformed into a Hilbert curve traversal. To implement a similar traversal in Fortran, you'd have to write a hundred lines of code, or rewrite the compiler. </p>

<p><a name="rf4"><a href="9711bf4.htm">Figure 4</A> shows a benchmark comparing the Blitz++ version of the 3D array stencil with the Fortran 77 version for a variety of array sizes. For very small arrays, Fortran 77 has the upper hand, because its code is much simpler. For larger arrays, the extra complexity of the Hilbert curve traversal pays off: The higher L1 cache hit rate translates into better performance.</p>

<p><b>Lattice Quantum Chromodynamics.</b> The last benchmark I'll describe is drawn from Lattice Quantum Chromodynamics (QCD), a computational version of strong interactions in the Standard Model of particle physics. It's used to calculate particle properties (such as mass and charge) predicted by current theory. Lattice QCD is very demanding: These programs engage supercomputers for months or years at a time.</p>

<p>This benchmark is based on a Lattice QCD implementation from the Edinburgh Parallel Computing Centre. In the EPCC implementation, the bulk of CPU time is spent multiplying 3&times;3 and 3&times;2 matrices of complex numbers. This is an ideal application for the Blitz++ <i>TinyMatrix</i> class, which uses template metaprograms to create specialized algorithms for matrix-matrix multiplication. <a name="rl12"><a href="9711b.htm#l12">Listing Twelve</A> is an initial version of the Blitz++ benchmark. The arguments <i>res</i> and <i>src</i> are vectors of 3&times;2 complex matrices; M is a vector of 3&times;3 complex matrices.<a name="rl13"> <a href="9711b.htm#l13">Listing Thirteen</A> is the initial Fortran 77 version.</p>

<p><a name="rf5"><a href="9711bf5.htm">Figure 5</A> shows the benchmark results for these two codes. The performance of the initial Fortran 77 version was disappointing due to the poor memory layout of the data, and the failure of the compiler to unroll the inner loops. The performance doubled after optimizing the memory layout and manually unrolling the inner loops (see the series "Fortran 77 tuned" in <a href="9711bf5.htm">Figure 5</A>), but still wasn't as good as Blitz++. Examination of the assembly code revealed that the Fortran compiler was suffering from "register spillage" -- it was unable to fit all the data in registers, so their contents had to be spilled out onto the stack. This is a compiler problem; with a better code generator, the Fortran version ought to be as fast as the initial Blitz++ version.</p>

<p>To tune the Blitz++ version, I took a step that is second nature to C++ programmers. I encapsulated the related objects in a single class; see <a name="rl14"><a href="9711b.htm#l14">Listing Fourteen</A>. The revised <i>qcdCalc()</i> routine operates on a single vector of <i>latticeUnit</i> objects, rather than three separate vectors. This encapsulation ensures that related objects are stored nearby in memory, a property known as "locality of reference." Cache designs assume programs will exhibit locality of reference, so encapsulation tends to improve performance. In the QCD benchmark, encapsulation boosted performance by 15-20 percent (see the "Blitz++ tuned" series in <a href="9711bf5.htm">Figure 5</A>).</p>

<h3>Conclusion</h3>

<p>After nearly a decade of being dismissed as too slow for scientific computing, C++ has caught up with Fortran and is giving it stiff competition. The combination of new library design techniques (expression templates and template metaprograms) and better compilers means that programmers can enjoy the expressiveness and ease of C++ without paying a performance price.</p>

<HR>
<H4><a name="l1">Listing One</H4>

<pre>Matrix&lt;float&gt; A(3,3);Vector&lt;float&gt; b(3), c(3);
// ...
c = product(A,b);
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>TinyMatrix&lt;float,3,3&gt; A;TinyVector&lt;float,3&gt; b, c;
c = product(A,b);
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>template&lt;class T, int N&gt;class TinyVector {
...
private:
    float data[N];
};
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>c[0] = A[0][0]*b[0] + A[0][1]*b[1] + A[0][2]*b[2];c[1] = A[1][0]*b[0] + A[1][1]*b[1] + A[1][2]*b[2];
c[2] = A[2][0]*b[0] + A[2][1]*b[1] + A[2][2]*b[2];
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<H4><a name="l5">Listing Five</H4>

<pre>typedef TinyVector&lt;double,3&gt; ray;<p></p>
inline void reflect(ray&amp; y, const ray&amp; x, const ray&amp; n)
{
  y = x - 2 * dot(x,n) * n;
}
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>
<H4><a name="l6">Listing Six</H4>

<pre>double _t1 = x[0]*n[0] + x[1]*n[1]    + x[2]*n[2];
double _t2 = _t1 + _t1;
y[0] = x[0] - _t2 * n[0];
y[1] = x[1] - _t2 * n[1];
y[2] = x[2] - _t2 * n[2];
</pre>
<P>
<a href="#rl6">Back to Article</A>
</P>
<H4><a name="l7">Listing Seven</H4>

<pre>void test(ray&amp; y){
  ray x, n;
  x = 1.00,  0.40,  -1.00;
  n = 0.31,  0.20,   0.93;
  reflect(y, x, n);
}
</pre>
<P>
<a href="#rl7">Back to Article</A>
</P>
<H4><a name="l8">Listing Eight</H4>

<pre>void test(ray&amp; y){
  y[0] = 1.3348;
  y[1] = 0.6160;
  y[2] = 0.0044;
}
</pre>
<P>
<a href="#rl8">Back to Article</A>
</P>
<H4><a name="l9">Listing Nine</H4>

<pre>Vector&lt;double&gt; x(N), y(N);double a;
   ... 
y += a * x;
</pre>
<P>
<a href="#rl9">Back to Article</A>
</P>
<H4><a name="l10">Listing Ten</H4>

<pre>DOUBLE PRECISION A(N,N,N), B(N,N,N)<p></p>
DO k=2, N-1
 DO j=2, N-1
  DO i=2, N-1
   A(i,j,k) = (B(i,j,k)   + B(i+1,j,k) + B(i-1,j,k)
   .         + B(i,j+1,k) + B(i,j-1,k) + B(i,j,k+1)
   .         + B(i,j,k-1)) / 7.0;
  END DO
 END DO
END DO
</pre>
<P>
<a href="#rl10">Back to Article</A>
</P>
<H4><a name="l11">Listing Eleven</H4>

<pre>const int N = 64;Array&lt;double,3&gt; A(N,N,N), B(N,N,N);
 ...
Range I(1,N-2), J(1,N-2), K(1,N-2);
A(I,J,K) = (B(I,J,K) + B(I+1,J,K) + B(I-1,J,K)
  + B(I,J-1,K) + B(I,J+1,K) + B(I,J,K-1)
  + B(I,J,K+1)) / 7.0;
</pre>
<P>
<a href="#rl11">Back to Article</A>
</P>
<H4><a name="l12">Listing Twelve</H4>

<pre>typedef TinyMatrix&lt;complex&lt;double&gt;,3,3&gt; gaugeElement;typedef TinyMatrix&lt;complex&lt;double&gt;,3,2&gt; spinor;
<p></p>
void qcdCalc(Vector&lt;spinor&gt;&amp; res, Vector&lt;gaugeElement&gt;&amp; M,
  Vector&lt;spinor&gt;&amp; src)
{
  for (int i=0; i &lt; res.length(); ++i)
    res[i] = product(M[i], src[i]);
}
</pre>
<P>
<a href="#rl12">Back to Article</A>
</P>
<H4><a name="l13">Listing Thirteen</H4>

<pre>subroutine qcdf(M, res, src, V)       integer V, iters
       double complex M(V,3,3), res(V,3,2), src(V,3,2)
<p></p>
       DO site=1,V
         DO spin=1,2
           DO col=1,3
              res(site,col,spin) = M(site,col,1) * src(site,1,spin)
     .          + M(site,col,2) * src(site,2,spin)
     .          + M(site,col,3) * src(site,3,spin)
           ENDDO
         ENDDO
       ENDDO
<p></p>
       return
       end
</pre>
<P>
<a href="#rl13">Back to Article</A>
</P>
<H4><a name="l14">Listing Fourteen</H4>

<pre>class latticeUnit { ...
protected:
  spinor one;
  gaugeElement ge;
  spinor two;
};
</pre>
<P>
<a href="#rl14">Back to Article</A>
</P>

<p><b>DDJ</b></p>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
