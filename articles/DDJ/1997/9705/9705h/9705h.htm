<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal May 1997: Networked Systems</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Windows NT Printer Control</h1>

<p><i>Dr. Dobb's Journal</i> May 1997
</p>
<h2>Control print jobs before they control you</h2>

<h3>By Paul Trout</h3>

<I>Paul is a technology coordinator for the College of Applied Human Sciences at Colorado State University where he develops network management and control applications. He can be contacted at trout@cahs.colostate.edu.</I>

<hr>

<p>The College of Applied Human Sciences at Colorado State University maintains four student computer labs for about 4000 undergraduate and graduate students. Each lab has a dedicated file server running Windows NT Server 3.51, and a lab operator workstation running Windows NT Workstation 3.51. Early in the spring semester, printer paper and toner usage increased sharply. In one lab, for instance, paper usage went from about 2000 sheets a week to almost 12,000 sheets. After some analysis, I determined the increase was due to many users printing unnecessary copies of documents and presentations. Often they would reprint the entire document after changing only one page. The college technology staff got together and we came up with three possible solutions:</p>

<ul>
  <li>Configure the NT printers to automatically hold the print jobs as they are spooled. Then the lab operator could release the final copy of the print job. Unfortunately, Windows NT has no way to configure a printer to automatically hold the print jobs as they are spooled.
  <li>Have the lab operator pause all of the printers, and then, manually, pause all of the print jobs for a given printer, release the printer, then release the appropriate jobs. We decided this was too labor intensive and error prone.
  <li>For each printer, create a matching, inactive printer (that is, configure another printer with all of the same drivers, fonts, and so on, but without actually connecting it to a physical device), configure all of the lab computers to print to the appropriate inactive printer, and then have the lab operator use Print Manager to move the jobs from the inactive to the active printer. When we discovered that Print Manager cannot move print jobs from one printer to another, I decided to see if print jobs could be moved programmatically. I found out that they can, but with two caveats -- you can't move to a remote printer, and landscape orientation will not copy.
</ul>

<p>In this article, I'll explain how to move a print job from one printer to another and present a function library to perform this and several other tasks -- listing all printers and print servers in a domain, and pausing, resuming, and deleting a print job. The function library is available electronically (see "Availability," page 3). </p>

<p>Note that NT's printing nomenclature is slightly different from other server and network operating systems. Under NT, a "print server" is a computer with a local printer set up to be accessed by other computers across the network. Also, a "printer" is not necessarily the actual physical device responsible for producing the printout. It's the software configuration on the print server, defining the print driver, port connection, rights and privileges, and most importantly, the actual print queue itself. Under NT, it is unnecessary to create a separate print queue and then configure a printer to service the queue. When the printer is created, NT creates the queue and assigns it to the printer.</p>

<p>Also note that the Win32 API has a complete set of printer and print job control functions. While I didn't use all of them, I did use the following functions:</p>

<ul>
  <li><i>EnumPrinters</i>, which returns information about local and remote printers and print providers. This is useful for retrieving all of the print providers for a given domain or for retrieving the names for all locally attached printers. 
  <li><i>GetPrinter</i>, which does for a single printer what <i>EnumPrinters</i> does for print providers. It is almost identical to calling <i>EnumPrinters</i> with the PRINTER_ENUM_NAME flag, except it executes faster because <i>EnumPrinters</i> could be asked to return data about a specific print server or printer-container object. In order to avoid an "Access Denied" error, you must open the printer with PRINTER_ALL_ACCESS rights.
  <li><i>OpenPrinter</i> and <i>ClosePrinter</i>, both are fairly self-explanatory. Before any print job information can be retrieved or manipulated, you must have a valid handle for the printer. <i>OpenPrinter</i> returns the handle, and <i>ClosePrinter</i> closes it. <i>OpenPrinter</i> takes a PRINTER_DEFAULTS structure as one of its arguments. While not required, if you wish to change any of the print jobs, you must open the printer with administrator authority, and this is only possible by initializing the <i>DesiredAccess</i> field with the PRINTER_ALL_ACCESS flag.
  <li><i>AddJob</i>, which assigns a unique print job ID and returns a fully qualified path and filename for the spool file. The path appears to be identical for all print jobs on the same machine. The filename is simply the ASCII representation of the job ID left padded with zeros to a length of five characters. Because the path is the same for all jobs on a printer, knowing a job's ID makes it a simple matter to open the source print job.
  <li><i>GetJob</i>, which returns all sorts of descriptive and environment data for a given print job. To get correct printouts from the destination job, you need to copy the data type, print processor, print-processor parameters, and the printer initialization and environment information from the source to the destination job.
  <li><i>SetJob</i>, which allows the data read from the source job with <i>GetJob</i> to be saved to the destination job and gives you access to the job control flags, allowing a job to be deleted, paused, resumed, and so on. Do not attempt to set print-job information and use one of the control flags to change the job status at the same time. The status will change, but the job information will not.
  <li><i>ScheduleJob</i>, which is called when all of the job data, environment, and initialization data has been copied from source to destination. It actually submits the job to be scheduled and printed.
</ul>

<p></p>

<p>While not in the same category as the spooler and printer control functions, <i>CreateFile</i>, <i>GetFileSize</i>, <i>ReadFile</i>, <i>WriteFile</i>, and <i>CloseHandle</i> are also important. I used <i>CreateFile</i> both for opening an existing file and creating a new one. <i>GetFileSize</i> returns the length of a file. <i>ReadFile</i> and <i>WriteFile</i> are the Win32 equivalents of Standard C <i>fread</i> and <i>fwrite</i> functions. <i>CreateFile</i> returns a file handle, but there is no equivalent <i>CloseFile</i> function. Instead, it falls upon the more generic <i>CloseHandle</i> to take a handle, determine its type, and properly close it.</p>

<p>From the perspective of a C programmer, these functions are safe to use. The functions that return information as either structures, arrays, or both (<i>EnumPrinters</i>, <i>GetJob</i>, <i>AddJob</i>) do so in a unique and well-planned manner. You pass a pointer to a buffer, the size of the buffer to the function, and a pointer to an integer variable that will hold the bytes required. If the returned data will not fit in the buffer, the call returns an error and initializes a bytes-required variable to the proper amount. You reallocate the buffer to the new size and reissue the call -- and this time, success!</p>

<p>This is important, because almost all of these functions return varying amounts of information, depending on the level of data requested. For example, Microsoft has defined two levels of print-job data -- JOB_INFO_1 and JOB_INFO_2 -- each described by a structure. JOB_INFO_1 has the basic print-job information: printer name, machine name, user name, document ID, datatype, status, priority, position in queue, total pages, and pages printed. Good information, but not enough for our purposes. </p>

<p>JOB_INFO_2 contains all of the JOB_INFO_1 fields, plus print processor, print-processor parameters, print-driver name, and a structure defining all of the special printer initialization and environment information for the job. It is this structure that indicates whether the job gets printed in landscape or portrait orientation. For moving a print job, it is crucial to have access to all of the JOB_INFO_2 data. For deleting, pausing/resuming, or changing the priority, the JOB_INFO_1 data is sufficient. By returning the amount of data required for the results, Microsoft is getting more mileage out of a single function and making our lives easier.</p>

<p>None of these functions return an error code, per se. Instead, they return either True or False as an indication of success or failure. However, to get a precise reason for failure, it is necessary to call the Win32 function <i>GetLastError,</i> which returns a 32-bit error code describing the failure. The most common error code I encountered was "Access Denied" because I opened the printer without printer-administration authority.</p>

<h3>Print-Job Move Algorithm</h3>

<p>The algorithm I designed to move the print job is:</p>

<p></p>

<p>1. Determine the spooled file path. Call <i>AddJob</i> to get the job ID, path, and filename for the destination job. Using the path and filename returned from <i>AddJob</i>, parse it backwards to remove the filename. The path should be identical for both the source and destination jobs. Generally, it is in the \winnt35\system32\spool\printers directory on whichever drive NT is stored.</p>

<p>2. Open the source job spool file using the <i>CreateFile</i> function. The filename is the job ID, converted to ASCII, and left padded with zeros to a length of five characters. The extension is .SPL. Use the path from step 1. Open the source file with the OPEN_EXISTING creation distribution. This ensures the call fails if the source does not already exist.</p>

<p>3. Open the destination spool file with the <i>CreateFile</i> function. Open the destination file with CREATE_NEW creation distribution to ensure failure if the file exists already.</p>

<p>4. Use <i>GetFileSize</i> to find the file length for the source, and then <i>ReadFile</i> and <i>Writefile</i> to copy the spooled data from the source to the destination.</p>

<p>5. Pause the destination job by calling <i>SetJob</i> with the JOB_CONTROL_PAUSE flag. This ensures that the job does not get printed until all is ready.</p>

<p>6. Use <i>GetJob</i> to retrieve the level-2 job data for both the source and destination jobs. Copy the user name, document name, notify name, data type, print processor, DEVMODE, priority, start time, until time, and total pages fields from source to destination to ensure correct printout.</p>

<p>7. Delete the source job with <i>SetJob</i> and the JOB_CONTROL_CANCEL flag.</p>

<p>8. Resume the destination job with <i>SetJob</i> and the JOB_CONTROL_RESUME flag.</p>

<p>9. Submit the destination job for actual printing with the <i>ScheduleJob</i>.</p>

<h3>The Library Functions</h3>

<p>I have written a function library for moving print jobs and the supporting tasks. At the heart of this library is a printer data structure containing the smallest amount of data necessary to work with each printer. The printer-structure fields are:</p>

<p></p>

<ul>
<li><i>name: </i>the printer name as a null-terminated string.  <li><i>spool: </i>the path where spool files are kept as a null-terminated string.
  <li><i>driver: </i>the print driver name as a null-terminated string.
  <li><i>conn_used: </i>a Boolean variable set to True if a valid connection to the printer has been made.
  <li><i>conn: </i>a handle to the printer. Each of the functions initializes or operates on an array of these structures, or takes a single structure or structure member as an argument.
</ul>

<p></p>

<p><b><i>GetLocalPrinters</i> </b>returns an array of printer structures and the number of local printers attached to the machine; see <a name="rl1"><a href="9705h.htm#l1">Listing One</A> It uses <i>EnumPrinters</i> with the PRINTER_ENUM_LOCAL flag to retrieve all of the local print providers. <i>GetLocalPrinters</i> returns a pointer to an array of printer structures with the name fields initialized and sets a variable to the number of printers found.</p>

<p><I><B>FreePrinterArray</B></I> (<a name="rl2"><a href="9705h.htm#l2">Listing Two</A>) releases all of the memory associated with the array of structures returned by <i>GetLocalPrinters</i>. It frees the name and spool fields for each structure before finally freeing the array of structures. This function can be called any time after <i>GetLocalPrinters -- </i>even before the <i>GetLocalSpoolPaths</i> function has been called to initialize the spool fields.</p>

<p><b><i>OpenAllLocalPrinters</i> </b>(<a name="rl3"><a href="9705h.htm#l3">Listing Three</A>) uses the <i>OpenPrinter</i> function to open a handle for each local printer. It opens each printer with the PRINTER_ACCESS_ADMINISTER authority, so each call will fail if the user does not have the rights to administer the printer. <i>OpenAllLocalPrinters</i> takes a pointer to an array of printer structures and initializes the <i>conn_used</i> and <i>conn</i> fields.</p>

<p><b><i>CloseAllLocalPrinters</i> </b>(<a name="rl4"><a href="9705h.htm#l4">Listing Four</A>) uses the <i>ClosePrinter</i> function to close each handle opened with <i>OpenAllLocalPrinters</i>. <i>CloseAllLocalPrinters</i> operates on an array of printer structures in the same manner as <i>OpenAllLocalPrinters</i>.</p>

<p><B><I>GetLocalSpoolPaths</I></B> (available electronically) initializes the spool field for each printer structure in the array returned by <i>GetLocalPrinters</i>. It calls <i>AddJob</i> to create a new print job for the printer. It separates the path from the complete path and filename combination returned by <i>AddJob</i> and copies it to the spool field of the printer structure. Finally, it uses <i>SetJob</i> to delete the job. <i>GetLocalSpoolPaths</i> initializes the spool field of the printer structure.</p>

<p><B><I>GetLocalDriverNames</I></B> (available electronically) initializes the driver field for each printer structure in the array returned by <i>GetLocalPrinters</i>. It calls <i>GetPrinter</i> to retrieve the level-2 printer information for the printer and then copies the <i>pDriverName</i> into the driver field.</p>

<p><b><i>MovePrintJob</i> </b>(available electronically) actually moves a print job from one printer to another. This function is the application of the algorithm described earlier, but before it can execute, it must determine and store the connections, spool file paths, and driver names for each printer. Thus, <i>GetLocalPrinters</i>, <i>OpenAllLocalPrinters</i>, <i>GetLocalSpoolPaths</i>, and <i>GetLocalDriverNames</i> must be called before <i>MovePrintJob</i>. <i>MovePrintJob</i> uses two single printer structures for the source and destination printer names and spool file paths. It does not modify the contents of either structure.</p>

<p>The library contains no static data, and while it makes extensive use of dynamic-memory allocation, the good design of the Win32 functions keeps it remarkably free of memory leaks and buffer overruns.</p>

<p>The functions are designed to be used in a specific order. <i>GetLocalPrinters</i> initializes an array of printer structures and counts the local printers. <i>OpenAllLocalPrinters</i> initializes a connection for each printer in the array. <i>GetLocalSpoolPaths</i> retrieves the path for spool files for each printer. <i>GetLocalDriverNames</i> retrieves the driver name for each printer. Once these four functions have been called, <i>MovePrintJob</i> may be used. Before the application exits, <i>CloseAllLocalPrinters</i> and <i>FreePrinterArray</i> must be called (in that order). <i>CloseAllLocalPrinters</i> closes the connections and <i>FreePrinterArray</i> releases all memory associated with the printer structure.</p>

<h3>Limitations</h3>

<p>The <i>MovePrintJob</i> function does not work on a remote printer, because the <i>AddJob</i> function does not work properly for a remote printer. This failure is documented in the Win32 reference manual, but no reason is given. When the call fails, <i>GetLastError</i> returns ERROR_INVALID_PARAMETER. Without <i>AddJob</i>, it is impossible to create a new print job for the destination printer and to retrieve the spool file path of the destination printer.</p>

<p>Because <i>MovePrintJob</i> cannot be used on a remote printer, it is necessary to run the program performing the move on the same machine the printers are attached to. This is not a problem in the computer labs because each lab has a Windows NT Workstation at the lab operator's desk. We will simply make this the print server and run a monitoring program on it.</p>

<p>If the source job has been spooled in landscape mode, <i>MovePrintJob</i> does not orient the destination in landscape mode. I have been unable to figure out why, but the DEVMODE structure in the level-2 printer information for the source is not initialized for landscape orientation when it should be. All of the documentation indicates the DEVMODE structure is the holder of special environment information about the print job, but it has never been initialized in over three months of testing. </p>

<h3>Conclusions</h3>

<p>There is a huge demand for after-market add-on tools for both Windows NT and Windows 95. While there are many offerings available for command shells and processors, security enhancements, and Internet packages, there are almost none for printer and print-job management. I hope I have demonstrated this is not due to a lack of API support, nor inadequate functional documentation.</p>

<h3>References</h3>

<p>All of the research necessary for this article was done with the online documentation included with Microsoft Visual C++, Professional Edition. I specifically used the Win32 Software Development Kit Function Reference and Overviews.</p>

<h3>Acknowledgments</h3>

<p>I would like to thank the College of Applied Human Sciences at Colorado State University for supporting this development, and my colleagues, Don Hennen and Greg Bundy, for their help in defining the problem and suggesting possible solutions.</p>


<p><b>DDJ</b></p>


<H4><a name="l1">Listing One</H4>

<pre>/****************************************************************************** GetLocalPrinters uses EnumPrinters with the PRINTER_ENUM_LOCAL flag to
*   retrieve all of the local printers. It then counts them, allocates an 
*   array of printer structures, initializes name fields, sets numprinters, 
*   and returns a pointer to the array of printer structures.
****************************************************************************/
struct printer *GetLocalPrinters(unsigned int *numprinters) {
  char            *databuff;           /* Buffer for data */
  unsigned int     ctr;                /* FOR loop counter */
  unsigned int     cur_prt=0;          /* Which printer  */
  unsigned int     slen;               /* Scratch variable */
  struct printer  *localprns;          /* Local printers */
  DWORD            bytes_req;          /* Bytes req'd for data */
  DWORD            structs_ret;        /* # of structs returned */
  BOOL             rtc;                /* Win32 return code */
<p></p>
  /************************************************************
  * Allocate the buffer for the returned data, Call EnumPrinters
  * If the call fails because the bufffer is not large enough
  * free the buffer, reallocate it, and reissue the call
  ************************************************************/
  databuff=(char *)calloc(1,sizeof(PRINTER_INFO_1));
  rtc=EnumPrinters(PRINTER_ENUM_LOCAL,NULL,LEVEL1,databuff,\
                   sizeof(PRINTER_INFO_1),&amp;bytes_req,&amp;structs_ret);
  if(rtc==FALSE &amp;&amp; bytes_req&gt;0 &amp;&amp; structs_ret==0) {
    free(databuff);
    databuff=(char *)calloc(bytes_req,sizeof(char));
    rtc=EnumPrinters(PRINTER_ENUM_LOCAL,NULL,LEVEL1,databuff,\
                     bytes_req,&amp;bytes_req,&amp;structs_ret);
  }
  /************************************************************************
  * Count the number of printers by stepping thru the returned structures,
  * and incrementing the count whenever the Flags field is set to 
  * PRINTER_ENUM_ICON8, ISPRINTER is a more mnemonic name for the flag.
  *************************************************************************/
  *numprinters=0;
  for(ctr=0; ctr&lt;structs_ret; ctr++)
    if( ((PRINTER_INFO_1 *)(databuff)+ctr)-&gt;Flags &amp; ISPRINTER)
      (*numprinters)++;
  /***************************************************************************
  * Allocate the array of printer structures to return, and copy printer names
  * from returned data to appropriate fields. The cur_prt variable is req'd
  * because EnumPrinters call will have returned data about print objects other
  * than printers. Also initialize spool field to NULL so that FreePrinterArray
  * can be used before GetLocalSpoolPaths function has been called.
  ************************************************************/
  localprns=(struct printer *)calloc((*numprinters),\ sizeof(struct printer));
  for(ctr=0; ctr&lt;structs_ret; ctr++)
    if( ((PRINTER_INFO_1 *)(databuff)+ctr)-&gt;Flags &amp; ISPRINTER) {
      slen=strlen(((PRINTER_INFO_1 *)(databuff)+ctr)-&gt;pName);
      localprns[cur_prt].name=(char *)calloc(slen+1,\ sizeof(char));
      strcpy(localprns[cur_prt].name,\ 
                             ((PRINTER_INFO_1 *)(databuff)+ctr)-&gt;pName);
      localprns[cur_prt].spool=NULL;
      localprns[cur_prt].driver=NULL;
      cur_prt++;
    }
  free(databuff);                      /* Free working buffer */
  return(localprns);                   /* Return array of printers */
}
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>/*************************************************************************** FreePrinterArray frees all of the allocated space for an array of printer 
*   array of printer structures.  It frees the name and spool
*   fields, and then the entire array.
***************************************************************************/
void FreePrinterArray(struct printer *localprns, \
                      unsigned int    numprinters ) {
  unsigned int ctr;                    /* FOR loop counter */
  /************************************************************
  * Do not simply frre the array of structures.  You must also
  * free the name, spool, and driver  fields.
  ************************************************************/
  for(ctr=0; ctr&lt;numprinters; ctr++) {
    free(localprns[ctr].name);
    if(localprns[ctr].spool!=NULL)
      free(localprns[ctr].spool);
    if(localprns[ctr].driver!=NULL)
      free(localprns[ctr].driver);
  }
  free(localprns);
}
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>/***************************************************************************** OpenAllLocalPrinters takes the array of printer structures, and the number
*   of printers returned by GetLocalPrinters, and opens a handle for each one 
*   with OpenPrinter.
****************************************************************************/
void OpenAllLocalPrinters(struct printer *localprns, \
                          unsigned int    numprinters) {
  unsigned int     ctr;                /* FOR loop counter */
  PRINTER_DEFAULTS opener;             /* Default behavior */
  BOOL             rtc;                /* Win32 return code */
<p></p>
  /***************************************************************************
  * Initialize the PRINTER_DEFAULTS structure. The only field to worry about 
  * is the DesiredAccess field.  If this is not set to PRINTER_ALL_ACCESS, you
  * will not be able to change the level 2 data on the destination job during 
  * a move, nor will you be able to retrieve the printer driver
  * name with GetPrinter during the GetLocalDriverNames call.
  ****************************************************************************/
  opener.pDatatype=NULL;
  opener.pDevMode=NULL;
  opener.DesiredAccess=PRINTER_ALL_ACCESS;
<p></p>
  for(ctr=0; ctr&lt;numprinters; ctr++) {
    rtc=OpenPrinter(localprns[ctr].name,&amp;localprns[ctr].conn,\
                    &amp;opener);
    if(rtc==TRUE)
      localprns[ctr].conn_used=TRUE;
    else
      localprns[ctr].conn_used=FALSE;
  }
}
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>/*************************************************************** CloseAllLocalPrinters takes the array of printer structures,
*   and the number of printers returned by by GetLocalPrinters,
*   and closes the connection for each one with ClosePrinter.
**************************************************************/
void CloseAllLocalPrinters(struct printer *localprns, \
                          unsigned int    numprinters) {
  unsigned int     ctr;                /* FOR loop counter */
  BOOL             rtc;                /* Win32 return code */
  for(ctr=0; ctr&lt;numprinters; ctr++) {
    if(localprns[ctr].conn_used==TRUE) {
      rtc=ClosePrinter(localprns[ctr].conn);
      if(rtc==TRUE)
        localprns[ctr].conn_used=FALSE;
      else
        localprns[ctr].conn_used=TRUE;
    }
    else
      continue;
  }
}
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
