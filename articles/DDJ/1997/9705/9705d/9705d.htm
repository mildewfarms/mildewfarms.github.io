<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal May 1997: Converting Windows Metafiles to Java</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Converting Windows Metafiles to Java</h1>

<p><i>Dr. Dobb's Journal</i> May 1997
</p>
<h2>Examining the Windows Metafile Format</h2>

<h3>By Carmen Delessio</h3>
<HR>
<p>A typical Microsoft Windows Metafile Format (WMF) file contains functions and data to draw rectangles, lines, and polygons, and to select colors, pens, and brushes. WMF files support other, more esoteric operations as well, such as animating a palette or selecting a clip region. Each drawing operation in the WMF corresponds to a Windows Graphical Device Interface (GDI) function.</p>

<p>Many of these operations have a counterpart in the primitive drawing functions provided with Java. In this article, I'll present a program that converts a WMF into Java source code. The goal is to be able to faithfully recreate the original image in a format that can be easily modified. The generated Java code references classes provided with Sun's JDK. Developing this tool has the side benefit of identifying the deficiencies of Java's drawing classes. </p>

<h3>Windows Metafile Format</h3>

<p>The Windows Metafile Format stores information about the graphic in a vector format. Viewing a metafile is also referred to as "playing" the file, since the file stores information on what to draw, but it's up to the viewer to actually draw them. Since I am converting the WMF files to Java classes, I don't have the luxury of using Windows API functions that know how to play metafiles, such as <i>PlayMetaFile()</i>. Instead, I need to store within the file the code that actually draws the graphic. A conversion program, then, needs to parse the WMF file, determine what needs to be drawn, and generate Java code to draw the graphic.</p>

<p>As <a name="rt1"><a href="9705dt1.htm">Table 1</A> shows, three structures comprise a WMF: <i>MetaFileHeader</i>, <i>MetaHeader</i>, and <i>MetaRecord</i>. Normally, when Windows loads a metafile, it loads the entire file into memory and then plays it. This may not be desirable if your metafile is very large. For this reason, metafiles store certain file attributes in the <i>MetaFileHeader</i> and the rest of the information in the <i>MetaHeader</i>, as opposed to using one unified header. This way, the viewer can load just the <i>MetaFileHeader</i> and read the rest of the file information directly from the disk.</p>

<p>The <i>MetaFileHeader</i> and <i>MetaHeader</i> appear once in the metafile. <i>MetaRecord</i>s store the function and data for each drawing operation in the metafile. The <i>MetaRecord</i> consists of the size of the current record in 16-bit words as a <i>long</i>, an integer index value to the appropriate GDI function, and the parameters to the function as a <i>string. </i>Conversion of a metafile consists of reading the <i>MetaFileHeader</i> and <i>MetaHeader</i> data, then reading and interpreting each <i>MetaRecord</i>.</p>

<h3>Windows GDI Functions</h3>

<p>When dealing with Windows metafiles and GDI operations, it is not necessary to understand the intricacies of internal operations, such as the algorithms for drawing a rectangle. Windows GDI operations work by specifying handlers to a device context (DC). The DC is an object that contains information about the current drawing environment, such as the color or brush shape.</p>

<p>It is easy to understand how an operation to draw a rectangle works. The GDI function is <i>Rectangle</i>, and the parameters are the DC and four integers that describe the upper-left corner and lower-right corner of the rectangle.</p>

<p>When <i>Rectangle</i> is called, a rectangle is drawn into the specified DC using the currently selected pen and the currently selected brush. The pen contains information about the outline of the rectangle like color and thickness. The brush contains information about the inside of the rectangle. Brushes can be solid, hollow, or have patterns.</p>

<p>The corresponding <i>MetaRecord</i> contains a length, the integer 0x41b representing the GDI rectangle function, and four integers. The DC is not given. This makes sense, since the metafile viewer will have its own device context. The four integers that describe the corners are stored in reverse order. When called by the GDI function <i>Rectangle</i>, they are x1, y1, x2, y2. When stored in the metafile, they are y2, x2, y1, x1.</p>

<h3>Converting Metafiles into Java</h3>

<p>The converter, written in Java, reads the metafile structures and converts each metarecord into the Java code necessary to declare, initialize, and draw it. The main methods are <i>parsewmf</i>, <i>parseit</i>, <i>WMFlist</i>, and <i>WMFlistrecord</i>.</p>

<p><i>parsewmf</i> validates the input and output files using code based on the file copy code in David Flanagan's <i>Java in a Nutshell</i> (O'Reilly &amp; Associates, 1996). If the destination file exists, the user is asked if he wants to overwrite it.</p>

<p><i>parsewmf</i> calls <i>parseit</i>, which stores each metarecord into the vector <i>MetaRecordVector</i> as a <i>MetaRecord</i> object. The <i>MetaRecord</i> class is very simple and corresponds to the Windows metarecord structure. <i>MetaRecordVector</i> is a growable array that contains a set of <i>MetaRecord</i> class objects. The <i>WMFlist</i> method calls <i>WMFlistrecord</i> for each <i>MetaRecord</i> in <i>MetaRecordVector</i>. When all records have been processed, <i>wmflist</i> calls <i>writeCode</i> to write the code.</p>

<p>WMFlistrecord does the work of conversion. A switch is done on the function portion of the <i>MetaRecord</i>. Inside the switch, the metarecord data is read, massaged, and converted into the necessary Java code. <i>WMFlist</i> builds three strings: <i>javaDeclare</i>, <i>javaInit</i>, and <i>javaGraphic</i>. These three strings are used by <i>writeCode</i> to create the Java applet.</p>

<p>The supporting cast of conversion functions is fairly large. First, some type manipulation is required. WMF files are stored in Little-endian format. Byte flipping is necessary to process these files in Java. The methods <i>readInt</i> and <i>readLong</i> perform this byte flipping. A <i>long</i> in Windows corresponds to a Java <i>int</i>, and an <i>int</i> in Windows corresponds to a Java <i>short</i>.</p>

<p>Metafiles are stored in twips (one twentieth of a point), while Java source requires pixels. I created a utility class called <i>convertToolkit</i> to handle twip to pixel conversion and to handle color conversion. <i>convertToolkit</i> uses the Java <i>Toolkit</i> class, which provides information about the current environment. The <i>Toolkit</i> class contains methods for getting the screen size and screen resolution. I use the screen resolution information to convert twips to pixels.</p>

<p>Converting the metafile drawing functions is fairly straightforward. <a name="rl1"><a href="9705d.htm#l1">Listing One</A> hows a case statement from the <i>WMFlistrecord</i> method that converts a rectangle. The generated code declares a rectangle, initializes it, and draws it. The rectangle could have been drawn directly. I chose to create, declare, and initialize the rectangle because it allows the generated code to be more easily modified. By creating a class, I have access to all of the rectangle's values. To resize the rectangle, I would multiply the width and height by a constant.</p>

<p>Sometimes, my choice to make the generated code easy to modify comes at the expense of performance. This is seen most dramatically when rendering polylines. I considered two methods for polylines. The first was to declare, initialize, and draw the polygon. The second was to draw a line from point to point in the polyline. My intuition told me that the first method would create more efficient code, since the data for each point is referenced only one time.</p>

<p>My intuition was wrong. <a name="rl2"><a href="9705d.htm#l2">Listing Two</A> draws a smile on a cartoon dog. (I've been drawing this dog since I was seven; see <a name="rf1"><a href="9705df1.htm">Figure 1</A>.) When compiled with optimization, the first method creates a class of 758 bytes. The class for the second method is 597 bytes. That's a savings of over 20 percent.</p>

<p>In the original version of the converter, I ignored the GDI functions <i>SelectObject</i> and <i>DeleteObject</i>, which select and delete previously created objects into the DC. For example, when a brush is created, a handle is returned. <i>SelectObject</i> changes the DC's value of a particular object (like the brush) using that handle. When I drew the dog picture, I selected a brush that was previously defined instead of creating a new brush for the eyes. After conversion, this presented an eerie picture of the dog with hollow eyes (<a href="9705df1.htm">Figure 1</A>).</p>

<p>The <i>handleTable</i> class processes the handles used by <i>SelectObject</i> and <i>DeleteObject</i> using methods <i>selectObject</i>, <i>deleteObject</i>, and <i>addObject</i>. The <i>addObject</i> method determines the next available handle, which is an index of the vector <i>handleTableVector</i>. When <i>addObject</i> is called the first time, the value passed becomes the first element in the vector. The position in the vector is the handle to the object. So selecting handle 1 is the same as getting the element from the vector at index 1. The <i>deleteObject</i> method of <i>handleTable</i> sets the element of the handle to -1.</p>

<h3>Limitations and Future Development</h3>

<p>This converter works fairly well, but is relatively limited. There are over 70 GDI functions, and this program only supports a handful of them. For example, neither bitmap functions nor pen functionality are supported. Many of these GDI functions would be nontrivial to implement. For example, in Java, there is no direct support for a pen width or brush patterns. It would require some work to provide this functionality.</p>

<p>Implementing such additional functionality would be easier with a more robust set of Java classes for graphic support. These classes could provide easy support for things like pen and brush colors, widths, and background and foreground colors.</p>

<p>Consider an abstract class called <i>drawnObject</i>, which would have a name, type, and information about placement and size. It would contain methods to draw itself and to scale, rotate, translate, and revolve itself. It would also contain a method to generate Java code to describe itself.</p>

<p>Each primitive drawing object would extend <i>drawnObject</i>, such as <i>drawnRectangle</i>, <i>drawnOval</i>, and <i>drawnPolygon</i>. To convert the metafile to Java code based on these classes, each metarecord would create a new <i>drawnObject</i>. Now consider a <i>drawnObjectCollection</i> class that would contain a collection of <i>drawnObjects</i>. The <i>drawnObjectCollection</i> class would have the same methods as the <i>drawnObject</i> class, so it would know how to draw itself.</p>

<p>Other possibilities include creating a drawing program to generate the appropriate Java bytecodes directly. </p>

<p><b>DDJ</b></p>


<H4><a name="l1">Listing One</H4>

<pre>  case 0x41b: //rectangle       numRectangles++;
       shapeName = "rectangle" + numRectangles;
       y2 = readInt(parmStream);
       x2 = readInt(parmStream);
       y = readInt(parmStream);
       x = readInt(parmStream);
       w = (short) Math.abs(x2-x);
       h = (short) Math.abs(y2-y);
       x = cvtTool.twip2pixel(x);
       y = cvtTool.twip2pixel(y);
       w = cvtTool.twip2pixel(w);
       h = cvtTool.twip2pixel(h);
       tempBuffer = "" + "( " + x + ", " + y + ", " + w + ", " + h +
                    ");//  rectangle" ;
       if (drawFilled){
          javaGraphic = javaGraphic + "    g.fillRect " + "( " +
                        shapeName + ".x" + ", " + shapeName + ".y " +
                        ", " + shapeName + ".width"  + ", " + shapeName +
                        ".height" + ");" + "\n";
       }
       else{
          javaGraphic = javaGraphic + "    g.drawRect " + "( " +
                        shapeName + ".x" + ", " + shapeName + ".y " +
                        ", " + shapeName + ".width"  + ", " + shapeName +
                        ".height" + ");" + "\n";
       }
       javaDeclare = javaDeclare + "    Rectangle " + shapeName +
                     ";" + "\n";
       javaInit = javaInit + "      " + shapeName   +
                  "= new Rectangle" + tempBuffer + "\n";
       break;
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>      poly1.addPoint(125,165);      poly1.addPoint(148,178);
      poly1.addPoint(177,182);
      poly1.addPoint(213,179);
      poly1.addPoint(238,166);
<p></p>
      g.drawLine( 125,165, 148, 178);//  line
      g.drawLine( 148,178, 177, 182);//  line
      g.drawLine( 177,182, 213, 179);//  line
      g.drawLine( 213,179, 238, 166);//  line
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
