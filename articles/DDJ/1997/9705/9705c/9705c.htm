<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal May 1997: Database Management and Java</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Database Management and Java</h1>

<p><i>Dr. Dobb's Journal</i> May 1997
</p>
<h2>A Java class that provides one interface to multiple file formats</h2>

<h3>By Art Sulger</h3>

<I>Art is a system administrator for the State of New York and is currently involved with, among other things, a large web project. He can be contacted at asulger@ibm.net.</I>

<hr>

<p>In "Database Management in C++" (<i>DDJ</i>, November 1994), I described a class structure implemented in C++ that provided a single interface to multiple file formats. Since that time, the programming environment has become much more heterogeneous because of the growth of the Internet. I recently needed a method to interface to Health Level 7 (HL7) messages, an ANSI specification for transmitting health-related information within the Application layer of the OSI network model. The class structure I previously presented in <i>DDJ</i> implements both xBase and CData file formats, both of which are fixed-length record formats. (The CData file format is described in <i>C Database Development</i>, Second Edition, by Al Stevens, MIS Press, 1991.) By contrast, an HL7 message is a complex variable-length file consisting of a variable number of different records composed of variable-length fields. HL7 messages are sent over the Internet. Applications that send and receive HL7 messages run on various computer architectures. Compiled languages like C++ require substantial modifications between the various versions of Windows, OS/2, Solaris, and other operating systems on the Internet. Additionally, we have to distribute tailored versions to each platform.</p>

<p>Java, a platform-independent, interpreted language, addresses many of these portability problems. Could the original design be modified to add support for variable-length fields? This would be a good test of the robustness of the basic class design.</p>

<p>In this article, I'll describe the changes required to port the more than 2300 lines of C++ code (published with my previous article) to Java. I'll also describe the changes required to add variable record-length file formats such as HL7. What I won't do is provide an in-depth description of how to manipulate HL7 data, which consists of "messages" containing an assortment of record types. The HL7 code here is offered as "proof-of-concept" only. You can use these classes, however, to read a record containing variable-length columns. As with the previous article, my main point is that encapsulating column behavior in a separate class dramatically extends the capability of common relational file formats.</p>

<p>You can use this model to interface to standard-format files, and the file structures can manage extended data types that they would not ordinarily. These data types can be record sequence numbers, pointers to multimedia files, calculated fields, and the like. The files can store any data that Java can recognize using this model. You can also extend some of the built-in Java classes to be special column types in the database. This may sound like an object-oriented database, but it really is just fundamental relational design. The code includes examples of a file field that displays values from an internal list, and a field that does C-like date arithmetic.</p>

<h3>Rows and Columns</h3>

<p>Relational database design is based on rows and columns. The columns should be strongly typed, which reduces ambiguity and errors when storing, displaying, or comparing column values. Critics of relational databases often ignore this strong typing requirement. A strongly typed column, though, can manage complex data types. Separating column objects from the table object is how columns can be strongly typed, independent of the underlying file-storage mechanism. In <a name="rf1"><a href="9705cf1.htm">Figure 1</A>, which illustrates the essence of the design, a <i>Table</i> class "has" one or more columnizer objects. The columnizer is the mechanism that does the typing, or, in relational terms, it describes the domain.</p>

<p>In the C++ design, everything descended from a master database class, <i>LogicalDBMS</i> (see <a name="rf2"><a href="9705cf2.htm">Figure 2</A>). The blue objects -- <i>LogicalDBMS</i>, <i>Table</i>, and <i>Column</i> -- are abstract classes. The yellow objects can be instantiated. Complex data types extend from the <i>Column</i> class. They are declared as arrays in the <i>Table</i> descendants. The essence of this design is a polymorphic <i>Column</i> array instantiated within a <i>Table</i> class.</p>

<p>I planned to mimic the C++ design completely by making an abstract <i>Column</i> that could be extended to support the complex data types that a modern database may contain. However, I also wanted to take advantage of the rich set of built-in Java classes. There is a way to do this in Java with "interfaces" -- classes that describe methods but do nothing about the implementation. The usefulness comes when other classes that do real work "implement" the interface. You can manipulate these objects using either the interface name or the class name. Java solves some of the name and initialization confusion found in C++ multiple inheritance by forcing you to define all interface methods in all classes that implement the interface.</p>

<p><i>Tables </i>contain <i>Column</i>s. <i>Column</i>s have contradictory objectives. On the one hand, a <i>Column</i> should be completely expressive -- a <i>Column</i> containing sound should be able to play the sound, edit the sound, and do all the things sound can do. At the same time, the <i>Table</i> object should treat <i>Column</i>s in a uniform manner, whether the <i>Column</i> contains sounds, pictures, or numbers. <i>Table</i>s should be able to declare arrays of <i>Column</i>s and perform similar operations on each array member. The Java model uses an interface object to describe everything important about a <i>Column</i>; see <a name="rf3"><a href="9705cf3.htm">Figure 3</A>. Here is how it works:</p>

<p>The abstract class <i>Table</i> (abstract classes are again shown in blue) contains a <i>Columnizer</i> array (interface classes usually have names that end in "able," "izer," or "izable" because they change the behavior of other, real, classes). It is an array of unassigned references, because an interface cannot be instantiated. How, then, does a <i>Table</i> own the <i>Column</i>s? Simple. Create your column objects directly, or derive them from your own classes or any of the extensible Java classes. Any <i>Column</i> object you make must "implement <i>Columnizer</i>." After you instantiate the <i>Column</i> by calling <i>new</i>, assign it to an element of the <i>Columnizer</i> array (shown in green). The <i>Columnizer</i> array always remains an array of references. However, it now references a real <i>Column</i> object. You can use an element of the <i>Columnizer</i> array as if it were the real column to which the element points; see <a name="re1"><a href="9705ce1.htm">Example 1</A>.</p>

<p>Using an interface class gives an added capability. You can extend some of the Java built-in classes. Unfortunately, though, the Java designers marked as "final," or nonextensible, many of the classes that would be useful to extend as <i>Column</i> types. These are the classes that wrap <i>String</i>, <i>Integer</i>, and <i>Character</i>. You can build wrappers around these final classes, or you can make your column classes extend any built-in classes not marked final. There are many possibilities, as long as the <i>Column</i> class implements <i>Columnizer</i>. The examples include an xDate column that extends the Java <i>Date</i> class. It lets you perform date arithmetic on an xBase field.</p>

<p>The Java version of the <i>Column</i> class keeps track of domain information in a similar way to the C++ class. Domain information includes whether the column is a string, a date, or a number, and the like. In general, the more precisely that you can define a column's domain, the easier it is to write programs that use that data. This is the heart of expanding relational designs to include nonprimitive data types, such as multimedia. The column is the object. The column description, which is the domain, should precisely describe everything it can about the object -- how it is displayed, the paradigm in which it exists, and even enumerate the possible instances of the object. There is an HL7 column (HL7ColumnT0001) in the code listings that has a domain of only four values -- Male, Female, Other, and Unknown.</p>

<p>Column domains often consist of a combination of basic domain types. For example, a column in the NUMBER domain could also be in the FLOAT domain, as well as the RIGHT-JUSTIFIED domain. These are all valid possibilities. The C++ classes handled this by defining a column using a series of bits as an enumerated type. The enumerated types can be combined, if, for instance, a <i>Column</i> was a multitype instance, like FLOAT and NUMBER, or INTEGER and CURRENCY. You would then write the code to "express" the particular domain of the column. Java does not have enumerated types (yet), but the java.util <i>BitSet </i>object provides an easy way to do bit-level ANDs and ORs; see <a name="re2"><a href="9705ce2.htm">Example 2</A>.</p>

<h3>The <i>Table</i> Class</h3>

<p>The <i>Table</i> is the super class of all file formats. <i>Table</i>s handle such things as the underlying file I/O, if needed, and hold information like the number of rows in the table and the length of the row, for fixed length records. I was torn between naming this class "Row" and "Table." An examination of the methods convinced me to call it <i>Table</i> rather then <i>Row</i>. It makes more sense to "open" a <i>Table</i>, or get the "next" thing in a <i>Table</i>.</p>

<p>Extend this class into a specific file format that you want to implement. Each file will have specific constructors and specific open and close methods. For example, an xBase class will need to read the header information located in the first 32 bytes of the file, then read the column information located in subsequent 32-byte chunks. A class that implements JDBC must, on the other hand, create a <i>java.sql.ResultSet </i>object by executing a query, and also map the Table methods to the JDBC methods in <a name="re3"><a href="9705ce3.htm">Example 3</A>.</p>

<p>The <i>HL7Table</i> and the <i>xTable</i> use a <i>StringBuffer</i> object and a byte array to store data read by the <i>RandomAccessFile</i> object. I expected to have trouble accommodating Java's lack of pointers. After all, the original C++ code often contained constructs like <a name="re4"><a href="9705ce4.htm">Example 4</A>.</p>

<p>At times, Java's strong typing did raise some hurdles. For instance, the <i>Column</i> object needs to know where the data is in the byte array. A C programmer would hand off a pointer and length indicator to the <i>Column</i>. To Java, however, a <i>String</i> is not an array of bytes, and because of Unicode support, even an array of bytes is not an array of characters. So the classes go through the bit of skullduggery in <a name="re5"><a href="9705ce5.htm">Example 5</A> to get the <i>Columns</i> to know where the data is. The <i>readBuffer</i> byte array is copied to a <i>StringBuffer</i> object. The <i>Table</i> is responsible for telling each column the offset and length of its data in the <i>StringBuffer</i>.</p>

<p>I encountered another problem with Java's strong type checking. The xBase 4<sub></sub>byte integer is Little-endian byte order, and Java uses Big-endian byte order. A C programmer would easily deal with this using unions, pointers, or arrays. <a name="re6"><a href="9705ce6.htm">Example 6</A> presents the rather wordy (even with several lines of error checking removed) Java equivalent.</p>

<h3>Some Things are Easier</h3>

<p>Multiplatform coding in Java usually is simpler because it runs on a Java machine that is identical across platforms. For example, the main purpose of the C++ topmost class, <i>LogicalDBMS</i>, was to ensure portability between various operating environments. Java eliminates this coding by providing a uniform operating environment. Another difficult problem in multi-platform support is how to signal error conditions. Java also makes this problem easier with its extensible error and exception classes. It also forces you to think about the various array-overrun type errors and provides a mechanism for expanding on the provided error description. Therefore, many of the <i>Column</i> methods that formerly returned the <i>enum SYSERR</i> data type now return True, False, or void. The error is instead "thrown" to a <i>DatabaseException</i> class in the exception chain; see <a name="re7"><a href="9705ce7.htm">Example 7</A>.</p>

<p>You can customize error messages to better fit the run platform. The example merely invokes the parent <i>Exception</i> class or prints to the Java console. If you use the database classes in a windowed environment, the <i>DatabaseException</i> class can invoke a dialog. If you use the classes in a batch mode, the class can emit to standard error or a log file.</p>

<h3>Changes for Variable-Length Fields</h3>

<p>You can read and write xBase and CData files very quickly. <i>fseek</i>s go quickly to any record offset; new records are added to the end of the file; deleted records are never actually removed, only marked. Variable-length records like the Observation (OBR) and Patient ID (PID) in HL7, on the other hand, require a calculation of each row length to travel to the next record. Random reads are physically impossible unless you maintain a separate row-location index. Some optimizations are possible, though. In this implementation, each HL7 row starts with a row-length indicator. There is also an array of offsets that give the location of each column. Given such an array of offsets, the private <i>parseRow()</i> method passes the location of the raw data to the column object when you want the column to display itself, or want to assign data to it. You need to update the row's array information whenever a column is updated, as well as the row-length indicator, because the column length might change. If you didn't have the array, you would have to build it dynamically the first time a column from a row needed to be accessed, either for displaying or updating. This is one of many ways to handle a variable-length record. Another way would be to expand each column to maximum length and treat records as fixed length, which of course, they then would be. The method I used is a preliminary design and may not necessarily be the best for all circumstances. However, it does show that a physical database design treating the row object separately from the <i>Column</i> is easy to extend. In fact, HL7 table classes required about the same coding as fixed-length formats. The primary difference is that the columns must be initialized each time the row is accessed, whereas the fixed-length format classes only required this processing during the <i>open</i> method. </p>

<h3>Using the Classes</h3>

<p><a name="rl1"><a href="9705c.htm#l1">Listing One</A> reates an xBase file that is a subset of an existing xBase file. The complete code, available electronically (see "Availability," page 3), includes some short xBase and HL7PID records for testing. Additionally, the HL7PIDTable.java source includes a <i>main</i> section that scans through the test data. The Java code includes extensive, built-in documentation that you can compile using javadoc.</p>

<h3>Conclusion</h3>

<p>Java required half as many statements as the C++ code. Java lags behind in speed. The C++ sample application found strings in xBase files at least ten times faster than a Java application. I am not daunted by the lack of speed. Java is typically used in a client/server application, where network speed might be an order of magnitude slower than file I/O. Furthermore, large amounts of data can be stored in a fast SQL database and these classes will be responsible for dealing with subsets of that data via JDBC calls.</p>


<p><b>DDJ</b></p>

<H4><a name="l1">Listing One</H4>

<pre>//---------------------begin source file--------------import java.util.*;
import java.io.*;
import java.lang.*;
<p></p>
public class testX
   {
   public static void main(String [] args)
      {
      try{
       DataInputStream in = new DataInputStream(System.in);
       int i;
       String fname, outName;
       if (args.length &lt; 1) 
          {
          System.out.println
          ("this extracts rows from an xBase file\n" +
           "you will be asked for a filename, column number and value,\n" +
           "the program will create a new xBase file composed of rows\n" +
           "that match the search\n");
          System.out.print("enter xBase file to read:");
          System.out.flush();
          fname = in.readLine();
          } 
       else 
          fname = args[0];
       Table t = new xTable(fname,true); 
       System.out.print("enter xBase file to create:");
       System.out.flush();
       outName = in.readLine();
       xColumn[]xcols = new xColumn[t.columnCount()];
       int iOffset = 1;
       for (i = 1;i &lt;= t.columnCount();i++)
          {
          xcols[i - 1] = new xColumn(new StringBuffer(),iOffset,
          t.columnLength(i),t.columnName(i),
          t.columnDomain(i),
          t.columnDecimals(i)," ");
          iOffset += t.columnLength(i);
          }
       Table newX = new xTable(outName, xcols);
       for (i = 1; i &lt;= t.columnCount(); i++)
          {
          System.out.print(i + ": " + t.columnName(i) + "\t");
          }
       System.out.print("\nenter column number to search on,\n" +
       "or enter 0 (zero) to skip the search test: ");
       System.out.flush();
       int C = 0;
       try{
          C = Integer.parseInt(in.readLine());
          }
       catch(NumberFormatException e)
          {
          System.out.println
             ("Invalid Number Format:" + e.getMessage());
          System.exit(0);
          }
       if (C != 0) 
          {
          if(!t.isColumn(C))
             {                  
             System.out.println("Invalid column number " + C);
             System.exit(0);
             }
          System.out.print
          ("enter string or string prefix to search for: ");
          System.out.flush();
          String searchTerm = in.readLine();
          System.out.println(new Date());
          String cName = t.columnName(C);
          System.out.println
          ("looking for " + searchTerm + " in " + cName);
          System.out.flush();
          try{
             while(t.next())
                {
                if (t.isMatch(C, searchTerm))
                   {
                   newX.newRow();
                   for (int j = 1; j &lt;= t.columnCount(); j++)
                      {
                      System.out.print(t.display(j) + "\t");
                      newX.assign(j, t.display(j));
                      }
                   newX.write();
                   System.out.println(" ");
                   System.out.flush();
                   }
                }
             t.close();
             newX.close();
             System.out.println(new Date());
             System.out.flush();
             }
          catch (DatabaseException e)
             {System.out.println(e.getMessage());}
          }
       }
      catch (DatabaseException e)
         {System.out.println(e.getMessage());}
      catch (IOException e)
         {System.out.println(e.getMessage());}
      }
  } // end of class
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
