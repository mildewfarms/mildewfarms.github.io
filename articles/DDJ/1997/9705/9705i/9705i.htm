<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal May 1997: Examining the TAWK Compiler</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Examining the TAWK Compiler</h1>

<p><i>Dr. Dobb's Journal</i> May 1997
</p>
<h2>A powerful scripting tool for implementing batch-oriented software</h2>

<h3>By James K. Lawless</h3>

<I>Jim is a lead programmer/analyst for a financial software development firm specializing in Windows 95/NT programming. He can be contacted at jimbo@radiks.net.</I>

<hr>

<p>The AWK programming language was created to simplify information processing in the UNIX environment. AWK's popularity stems from its ability to perform powerful data-processing chores with fewer lines of code than traditional programming languages like C++.</p>

<p>AWK is not a machine-specific language and does not provide methods to interface with the computer at the system level. AWK is dependent on external utilities that can be invoked for environment-specific processing.</p>

<p>The UNIX programming environment is well known for its filter programs, which write output to the standard output device. Often, these programs obtain their input from standard input device. Due to their usage of standard I/O devices, the output of one filter program can be redirected to serve as input to another program (often using the pipe symbol "|").</p>

<p>For example, if you wanted to find all files in the current directory containing the word "toad," you could simply redirect the output of the directory list program (ls) to the grep search utility this way: <i>ls|grep "toad"</i>. The output of ls serves as input to grep. </p>

<p>AWK was created as a language that could facilitate filter programming. AWK automatically extracts input from the standard input device (or from a file specified on the command line).</p>

<p>An AWK program consists of a declared pattern with a counterpart action. The pattern is usually an expression that performs a comparison upon the input data. If this pattern expression yields a Boolean True condition, the counterpart action is executed.</p>

<p>AWK was designed with a philosophy of keeping the language simple, even if it meant sacrificing run-time performance. Users are not responsible for opening files, reading records, or closing files.</p>

<h3>Thompson Automation's TAWK</h3>

<p>Thompson Automation's TAWK compiler family is a set of compilers for various operating systems (UNIX, OS/2, Windows 95/NT, Solaris) that are based on the AWK language. The version of TAWK I'll examine here is TAWK 5.0 for Windows 95/NT. </p>

<p>TAWK, however, implements many extensions to the language and development environment. These extensions allow TAWK to function as a general-purpose programming language. Many features found in traditional programming languages such as C++ and Pascal can be found in TAWK, while TAWK retains many features unique to AWK-based languages.</p>

<p>TAWK can function as a compiler or an interpreter. Original implementations of AWK were pure interpreters. They read AWK source code from a file and interpreted the specified source code at run time. TAWK is packaged with an interpreter called AWKW, which reads TAWK scripts and carries out the commands issued in source code. TAWK is also packaged with a compiler called AWKCW, which reads TAWK scripts and generates stand-alone executable files from them.</p>

<p>The differences between the two modes of operation are primarily issues of available disk space -- source-code scripts often occupy fewer bytes of disk space than executable code.</p>

<p>The TAWK compiler will scan for a file called AWKW.CFG, which should contain your preferred default compile options so that they needn't be specified on the AWKCW command line.</p>

<p>TAWK users can enjoy the benefits of using separate source-code modules. TAWK is able to bind subroutine libraries to a main program in both the interpreter and the compiler. In command line <i>awkw -f DEMO.AWK -f WINDOWS.AWK</i>, TAWK loads both specified scripts, coupling them into a single logical script. The compiler can create an executable file (DEMO.EXE) from this by invoking the command line <i>awkcw -xe -z DEMO.AWK WINDOWS.AWK</i>. </p>

<p>Because of a bug in the incremental compilation feature in TAWK for 32-bit Windows, Thompson Automation has recommended the use of the -z flag when compiling to avoid both compile-time and run-time bugs. The -z flag forces each separate TAWK file to be recompiled (see http://www.tasoft.com/~thompson/ for more information).</p>

<p>A supplemental program called MKAWKLIB.EXE provides an easy method of using bundled subroutine libraries. MKAWKLIB adds entries to a special database used by TAWK when it is unable to find functions or global variables specified in a given file.</p>

<p>Suppose you have a function library called MYFUNC.AWK that contains a special function called <i>my_func()</i>. The command-line <i>mkawklib MYFUNC.AWK</i> exposes this function to all future TAWK scripts.</p>

<p>The only drawback to using TAWK libraries is that all variable and function names are stored in the compiled executable file. This includes symbolic constants that may never be referenced. This will cause the executable file to be larger than necessary.</p>

<p>Compiled TAWK programs inherit the standard TAWK command-line processor unless the -eo option is specified during compilation. When using this option, command-line arguments normally processed by TAWK ( -F, -v, -w, - - ) are placed in the <i>ARGV[]</i> array. The argument count is held in the ARGC variable. <i>ARGV[0]</i> contains the fully normalized path and filename of the executing program.</p>

<p>A counterpart option, -ee, causes TAWK to suppress filename expansion into the <i>ARGV[]</i> array. If your TAWK program processes a file using the automatic input method, TAWK will expect a filename as <i>ARGV[1]</i>. If no filename is specified, TAWK can read the input from <i>stdin</i>, but it will treat any parameter passed in <i>ARGV[1]</i> as a file and will try to open it. To avoid this, you can write the whole TAWK program in the BEGIN section, allowing unhindered access to the command line. The options -eo and -ee can be combined as -eoe. The example finger.awk program uses the -eo option to gather command-line arguments for the specified Internet account ID; see <a name="rl1"><a href="9705i.htm#l1">Listing One</A> (Executable versions of finger.awk and other programs presented here are available electronically; see "Availability," page 3.)</p>

<p>The TAWK compiler is capable of generating two different kinds of executable programs. To create a stand-alone executable file, you must specify the -xe compile switch. The executable file generated when this switch has not been specified will rely on a run-time support program called AWKR50W.EXE. This program is similar to the BRUNxx.EXE programs used by Microsoft Quick Basic in the DOS environment. Compiled TAWK programs that are dependent on this module occupy significantly smaller portions of disk space than their stand-alone counterparts. A typical "Hello world!" stand-alone TAWK program occupies over 200 KB of disk space. </p>

<h3>TAWK in a DLL</h3>

<p>With the release of Version 5.0, Thompson Automation bundled a special version of TAWK in a DLL. This DLL (AWKRW.DLL) can be invoked by external programs to provide TAWK functionality in non-TAWK environments such as Visual Basic. This DLL may not be redistributed. It is for use only by the licensed TAWK user. </p>

<p>AWKRW.DLL exports functions that allow client programs to invoke TAWK actions, invoke TAWK functions, manipulate TAWK variables, and feed command-line arguments. In its current state, the DLL cannot be used for building distributable applications. </p>

<h3>Low-Level Feature</h3>

<p>TAWK sports a robust set of features for low-level system access. Direct access to memory can be attained by using <i>addressof()</i>, <i>peek()</i>, and <i>poke()</i>. The <i>addressof()</i> function returns the address of the specified TAWK variable. Because of TAWK's internal memory-management scheme, the specified variable is locked into place until all references to the address returned by <i>addressof()</i> have been removed.</p>

<p><i>peek()</i> and <i>poke()</i> operate in a manner similar to their counterparts in BASIC. A single byte from the specified address is returned by <i>peek()</i>. <i>poke()</i> is used to store a byte at the specified address. Bitwise operators are implemented as a series of TAWK functions. <i>and()</i>, <i>or()</i>, and <i>xor()</i> all accept two 32-bit integer expressions as operands. <i>not()</i> accepts a single 32-bit integer expression. All of the bitwise functions return a 32-bit integer as a result.</p>

<p>The <i>shiftl()</i> and <i>shiftr()</i> functions perform left/right bit-shifting operations, respectively. Each function accepts two parameters. The first parameter is an integer expression; the second parameter specifies the number of bits to shift.</p>

<p>An error in the documentation might lead you to believe that port-level I/O can be accomplished in the 32-bit Windows version of TAWK. The documentation specifies that the port I/O functions -- <i>inp()</i>, <i>inpw()</i>, <i>outp()</i>, and <i>outpw()</i> -- do nothing under OS/2 and UNIX. These functions do not seem to function in the 32-bit Windows environment.</p>

<p>TAWK utilizes the associative array construct found in languages such as SNOBOL or Perl. An associative array is an array that uses a string as an index rather than an integer.</p>

<p>The <i>for</i> keyword is used to iterate through all items in an associative array. Traditional AWK usually causes the associative array to be traversed in an ascending-sorted sequence by the indexing string. TAWK lets you define how the associative array will be sorted by setting various values in the built-in SORTTYPE variable. <a name="rt1"><a href="9705it1.htm">Table 1</A> lists the combinations of values for SORTTYPE, and defines how they affect array sorting. The program asort.awk (<a name="rl2"><a href="9705i.htm#l2">Listing Two</A>) is a sort program that illustrates the usage of associative arrays. It also illustrates the usage of the SORTTYPE variable to change sort order.</p>

<h3>File I/O and Directory Processing Functions</h3>

<p>File I/O in traditional AWK has always been a bit clumsy. Files are never explicitly opened in traditional AWK. Rather, file I/O is performed by a set of I/O operators -- &gt;, &gt;&gt;, and &lt;. </p>

<p>The &gt; and &gt;&gt; operators are used to send output to a file. The single &gt; writes to a file, while the &gt;&gt; pair appends output to a file. The file name is specified on the right side of the appropriate operator. The &lt; symbol works in a similar fashion. It, however, is used to deliver input to the AWK program from a file. Traditional AWK doesn't provide methods of reading fixed-size chunks of data, nor does it provide methods of seeking to particular items in a file. Traditional AWK is limited to sequential file access.</p>

<p>TAWK provides a set of functions similar to those in the standard C library for file manipulation. <a name="rt2"><a href="9705it2.htm">Table 2</A> lists these function names and describes their uses.</p>

<p>The functions <i>fseek()</i> and <i>ftell()</i> are used in setting a logical file position and in determining a logical file position, respectively. These functions, coupled with <i>fread()</i> and <i>fwrite()</i>, provide random access to files.</p>

<p><i>flock()</i> and <i>funlock()</i> are important functions in multiuser environments. <i>flock()</i> tells the operating system to prevent other processes from accessing a series of bytes in a given file. This allows the locking application to have exclusive control over those bytes. <i>funlock()</i> frees the lock, allowing these bytes to be utilized by any other process.</p>

<p>In addition, TAWK provides a series of directory-processing functions. The <i>dirlist()</i> function is used to capture a list of filenames from a specified directory into an associative array. The general format of the <i>dirlist()</i> function is <i>dirlist(dirname, x)</i>, where <i>dirname</i> is a string denoting the specified directory and <i>x</i> is the associative array to be filled with the filenames. If the specified directory cannot be found, <i>dirlist()</i> returns False; otherwise, it returns True.</p>

<p>Since <i>dirlist()</i> simply returns an array of filenames, other functions are necessary to obtain specific information about a file. The functions <i>filetime()</i>, <i>filemode()</i>, and <i>filesize()</i> can be used to determine more information about a particular file. The <i>filetime()</i> function allows a TAWK program to determine the creation time, last modification time, or last access time of a given file. The <i>filemode()</i> function provides a means of determining the access attributes of a file. It can determine if a file has hidden, system, archive, or read-only attributes. <i>filesize()</i> determines the size in bytes of the specified file.</p>

<h3>The Windows Interface</h3>

<p>External DLL functions can be called by TAWK programs by first declaring the external function, then by calling it as though it were a native TAWK function. TAWK automatically coerces numeric data to the type specified in the declaration. The only time an additional step is required is when a function needs a pointer to a binary data structure. If that happens, <i>pack()</i> must first be used to prepare the binary structure before using the function. The SOCK_ADDR structure needed in the call to the Winsock <i>_connect</i> function (<a href="9705i.htm#l1">Listing One</A>) was prepared using a call to <i>pack()</i>. </p>

<p>The built-in variable "DLLS" allows a program to specify the directory path used to search for all DLLs.</p>

<p>The Windows DEMO.AWK program provided with the TAWK release dynamically builds a GUI Windows application. The dialog, menu, and all other resources are constructed dynamically in the program. No resources are embedded in the executable file. Implementing a GUI application takes a little more effort when using TAWK than contemporary development environments such as Visual C++ or Delphi.</p>

<p>Many Windows API functions communicate with the given application by means of callback functions. A callback function is an application-hosted function that is exposed to the Windows operating system. This exposed function is called by Windows to deliver or retrieve data.</p>

<p>Two TAWK functions -- <i>registercallback()</i> and <i>unregistercallback()</i> -- facilitate usage of Windows callback functions. Each function accepts a single string parameter that names a TAWK function. The value returned from <i>registercallback()</i> can be passed as a function pointer to a given Win32 function as a callback address.</p>

<p>TAWK allows three callback functions to operate concurrently. <i>unregistercallback()</i> is used to prevent the specified function from being used as a callback function. The TAWK callback function must accept exactly four 32-bit integers as parameters. The program timer.awk (<a name="rl3"><a href="9705i.htm#l3">Listing Three</A>) implements a callback function to service Windows timer messages.</p>

<p>The example programs provided with TAWK that utilize callbacks are all dialog programs that rely on the dialog processor's internal message pump to retrieve and dispatch messages from the application's message queue. In many cases, you'll need to perform this operation using a <i>PeekMessage()</i> loop similar to that in TIMER.AWK.</p>

<h3>Internet Applications with Winsock</h3>

<p>TAWK provides the source library SOCKET.AWK, which provides function prototypes, constants, and helper functions to facilitate TCP/IP programming.</p>

<p>TAWK provides two methods of communicating with a socket: An implementation of the send/receive functions from WSOCK32.DLL, and an implementation that references a socket through file descriptors. (The second method, however, did not work. At the time of this writing, Thomspon Automation is investigating the nature of the problem.)</p>

<p>The native WSOCK32.DLL functions perform as desired. <a href="9705i.htm#l1">Listing One</A> is source code for a simple Internet finger client. The finger protocol is a simple protocol that many Internet hosts provide as a means of identifying a specific user of their system. For example, the output of <a name="re1"><a href="9705ie1.htm">Example 1</A>(a) would look something like <a href="9705ie1.htm">Example 1</A>(b).</p>

<p>My implementation of finger tries to connect to the host specified in the user's ID (that is, the name after the "@" symbol). After the connection to port 79 (the standard finger port) is successful, the program passes the constructed query string to the host and displays the results. When the host stops sending data, the finger program shuts down and closes the socket. The program then terminates. The <i>WSAStartup()</i> and <i>WSACleanup()</i> Winsock functions are called automatically in the INIT and TERM rules in the SOCKET.AWK library provided with TAWK.</p>

<p>The popularity of using various Internet services has provided a niche software market for TCP/IP programs. TAWK's inherent text-processing power, coupled with a Winsock interface, make it an attractive Internet scripting tool.</p>

<h3>Conclusion</h3>

<p>TAWK is a potent programming tool. I would not recommend it for building GUI applications, but you could certainly build GUI programs with TAWK. Rather, I see TAWK as a powerful scripting tool that can be used to quickly implement batch-oriented software.</p>

<H3>For More Information</H3>

<P>
Thompson Automation Software<br>
5616 SW Jefferson<br>
Portland OR 97221<br>
503-224-1639<br>
http://www.tasoft.com/~thompson/<br>
</P>

<p><b>DDJ</b></p>


<H4><a name="l1">Listing One</H4>

<pre># Jim Lawless -- jimbo@radiks.net# FINGER.AWK -- This program implements a simple finger client.
# Syntax: finger id     ( finger jimbo@radiks.net )
# or finger -l id  ( finger -l jimbo@radiks.net )
# To compile: awkcw -eo -xe -z finger.awk socket.awk
<p></p>
BEGIN {
   if( ARGC &lt; 2 )
      syntax();
# Construct one long string out of the command-line parameters.
# Find the parameter with an "@" symbol and extract the hostname from it.
   for(i=1;i&lt;ARGC;i++) {
      n=index(ARGV[i],"@");
      if(n) {
         hostname=substr(ARGV[i],n+1,
            length(ARGV[i])-n);
      }
      if( length(q) )
         q = q " " ARGV[i];
      else
         q = ARGV[i];
   if( hostname == "" )
      syntax();
# Create a socket.
   sock=_socket( AF_INET, SOCK_STREAM, IPPROTO_TCP );
# Connect the socket to our host.
   host=gethostaddr(hostname);
   print "Connecting to host : " \
      hostname " (" host ")." ;
   sock_addr=pack("@&lt;s @&gt;s @&lt;l @x @x @x @x @x @x @x @x",
      PF_INET,79,inet_addr(host));
   flag=_connect( sock,sock_addr,length(sock_addr));
# If the connection has been established, send the string q to the host.
   if( flag==0) {
      b=strdup("\0",128);
      q=q "\r\n";
      _send(sock,q,length(q),0);
# Now, wait for a reply...no more than 15 seconds.
     i=0;
     retry_count=0;
     while(!i) {
        i=_recv(sock,b,128,0);
        if(!i) {
           retry_count++;
           sleep(1);
           if(retry_count&gt;15) {
              break;
           }
        }
     }
     while(1) {
# Make sure we didn't time out on the last operation!
        if( retry_count&gt;15) {
           break;
        }
# Print the returned data block.
        if(i!=0) {
           for(j=1;j&lt;=i;j++) {
              printf("%c",substr(b,j,1));
           }
# Get more data.
           i=_recv(sock,b,128,0);
        }
# If we're out of data, stop.
        else {
           break;
        }
     }
# disable sends and receives.
     _shutdown(sock,2);
     _closesocket(sock);
  }
}
# Get a long integer from a given address in memory.
function peekl(addr)
{
   local p=0;
   local i;
   for(i=0;i&lt;4;i++) {
      p*=256;
      p+=peek(addr+3-i);
   }
   return(p);
}
# Get the host address, given a host name (this returns a string).
function gethostaddr(hostname)
{
   local ret;
   local p;
   local i;
   local s;
   local realname;
  
   ret = _gethostbyname(hostname)
   if (ret == 0)  {
      return("");
   }
# get the host address here!
   p=peekl(ret+12);
   p=peekl(p);
<p></p>
   s="";
   s=peek(p) "." peek(p+1) "." peek(p+2) "." peek(p+3);
   return(s);
}
# Get a null-terminated string from an address in memory.
function getstring(addr)
{
   local ar
   unpack("@a",addr,ar)
   return ar[1]
}
function syntax()
{
   print "\n" \
   "Syntax:\n" \
   "   finger id     ( finger jimbo@radiks.net )\n" \
   "or\n" \
   "   finger -l id  ( finger -l jimbo@radiks.net )\n";
   exit();
}
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre># Jim Lawless -- jimbo@radiks.net# ASORT.AWK -- This program will utilize TAWK's associative-array
# capabilities implemented as a simple file-sorting program
# Syntax: asort infile [ options ] 
# Options: /i or /I, Ignore case-sensitivity; /d or /D, Descending sequence
# To compile: awkcw -eoe -xe -z asort.awk
<p></p>
BEGIN {
   if( ARGC &lt; 2 ) {
      print "Syntax:\n" \
            "   asort infile [ options ] \n\n" \
            "Options:\n" \
            "   /i or /I   Ignore case-sensitivity\n" \
            "   /d or /D   Descending sequence\n" ;
      exit();
   }
# Set SORTTYPE to default ASCII / Ascending
   SORTTYPE=2;
# Check command-line and alter SORTTYPE as necessary
   for(i=1;i&lt;ARGC;i++) {
      if( ARGV[i]=="/i" || ARGV[i]=="/I") {
         SORTTYPE+=4;
      }
      if( ARGV[i]=="/d" || ARGV[i]=="/D") {
         SORTTYPE+=8;
      }
   }
}
# Main input rule. Increment a table entry using whole line as a key. Counter
# built in ar array indicates how many occurrences of specified line exist.
{ ar[$0]++ }
<p></p>
# Now, we're done with input. Get values out of the array and display them.
END {
   for(i in ar) {
      j=ar[i];
      while(j--) {
         print(i);
      }
   }
}
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre># Jim Lawless -- jimbo@radiks.net# TIMER.AWK -- This program implements a Windows TimerProc callback function.
# Declare externals.  
<p></p>
extern winapi int SetTimer(int hwnd,int id,int milli, void *);
extern winapi int KillTimer(int);
extern winapi int name "PeekMessageA" PeekMessage(void *,int,int,int,int);
extern winapi int TranslateMessage(void *);
extern winapi int name "DispatchMessageA" DispatchMessage(void *);
# Use a global variable to control the timer.
global counter;
<p></p>
BEGIN {
   counter=0;
# Register the callback.
   proc=registercallback("timerproc");
# Create a timer that will activate ever 1000 milliseconds ( once per second )
   timer_id=SetTimer(0,0,1000,proc);
   PM_REMOVE=1;
# Create a buffer to hold the 28-byte MSG structure msg=strdup("\0",28);
   for(;;) {
# let Windows breathe!
      if( PeekMessage(msg,0,0,0,PM_REMOVE)) {
         TranslateMessage(msg);
         DispatchMessage(msg);
      }            
# See if we've iterated 10 times.
      if( counter &gt;= 10 )
         break;
   }
# Stop the timer
   KillTimer(timer_id);
# Free up the callback
   unregistercallback("timerproc");
}
# This function will be invoked by Windows
function timerproc( hwnd, message, wparam, lparam)
{
   counter++;
   print "In timerproc...iteration number " counter;
}
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
