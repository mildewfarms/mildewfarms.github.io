<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal May 1997: JavaScript Objects</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<p><i>Dr. Dobb's Journal</i> May 1997 </p>


<h1>JavaScript Objects</h1>
</h1>

<HR>
<p>JavaScript objects are different from C++ and Java objects; they are not actually objects. They are associative arrays of JavaScript variables. Each property can have any of the JavaScript types: <i>number</i>, <i>string</i>, <i>boolean</i>, <i>object</i>, or <i>function</i>. Additionally, a property can reference another array. If you are used to C++ or Java, it may take you a little time to get used to JavaScript objects. There are two different ways to access a JavaScript object property -- dot notation and associative indexing. If you defined a <i>person</i> object that has the property <i>name</i>, then you can reference that property using any of the following notations:</p>

<blockquote>

<PRE>person.name
person["name"]
var x="name"
person[x]
</PRE></blockquote>

<p>When you assign a value to an object property using any of these formats, you create a new property if the property did not previously exist. Since new object properties can be dynamically created, it is not always possible to know all the properties associated with a particular object. For this reason, JavaScript supplies a <i>for(in)</i> control structure that lets you iterate over all properties of a particular object. For example, the following loop prints all properties and values of the <i>Person</i> object, even though you added a new property outside the constructor.</p>

<blockquote>

<PRE>var myPerson=new Person()
myPerson.likesDonuts=true
for(var i in myPerson)
document.writeln("myPerson."+i+"="+myPerson[i]+"&lt;BR&gt;")
</PRE></blockquote>

<p> -- C.B.T.</p>

<P>
<a href="9705f.htm#rs1">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
