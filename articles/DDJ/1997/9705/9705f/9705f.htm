<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal May 1997: JavaScript Cookies</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>JavaScript Cookies</h1>

<p><i>Dr. Dobb's Journal</i> May 1997
</p>
<h2>Browser-side persistence for web developers </h2>

<h3>By Charles B. Tichenor</h3>

<I>Chuck, a software-engineering consultant, can be contacted at http://www.castle.net/~tichenor or tichenor@castle.net.</I>

<hr>
Sidebar:<a name="rs1"> <a href="9705fs1.htm">"JavaScript Objects"</A>
<HR>
<p>One of the most powerful features of JavaScript is not the language itself, but its interface to the browser. JavaScript has access to a variety of built-in objects and functions that allow a JavaScript program to control many aspects of the browser. One of these built-in objects is the document cookie, which lets users store persistent information in the browser's cookie file. The persistent information can be later read by other JavaScript programs. Using the JavaScript cookie, you can create web pages that can communicate with each other and have long-term memories. </p>

<p>In this article, I'll present a set of generic JavaScript functions that can be used to store and retrieve persistent information. These generic functions are then used to create a sample application that uses the JavaScript document cookie to communicate between two separate web pages.</p>

<h3>The Cookie</h3>

<p>HTTP cookies were designed to be used by server-side CGI scripts to store and retrieve persistent information on web clients. With the advent of JavaScript and the document cookie, you can run scripts on the browser to manipulate HTTP cookies. A cookie is a named string that can optionally contain location, expiration, and security attributes. The JavaScript <i>document.cookie</i> property provides a window into the browser cookie file. When this property is read, it returns a semicolon-delimited list of "name=value" pairs. </p>

<p>For security, only pairs that pertain to the particular domain and path of the current URL are returned. This prevents unscrupulous JavaScripters from gaining access to private cookies (refer to the <i>ReadCookie</i> method in COOKLIB.JS, available electronically; see "Availability," page 3). To store a new cookie, write a "name=value" string to the <i>document.cookie</i> property; for example, <i>document.cookie='FredsWife=Wilma'</i> will store a cookie named "FredsWife" with the value "Wilma". You can use the same method to update a previously stored cookie to a new value. For example, <i>document.cookie='FredsWife=Betty'</i> will update the cookie named "FredsWife" to the value "Betty". </p>

<p>To assure long-term persistence of your cookie data, you must append an expiration date, using the format <i>expires=GMTExpirationDate</i> to your cookie. You can create GMT date strings using the <i>Date.toGMTString()</i> method. Again for security, you can specify the <i>domain</i>, <i>path</i>, and <i>secure</i> attribute values for the cookie; see the <i>WriteCookie</i> method of COOKLIB.JS. The <i>expiration date</i> attribute of the cookie is needed to delete it. You delete a cookie by storing it with an expiration date that was in the past. Immediate cookie deletion is not guaranteed. The cookie value may persist until the end of the current browser session; see the <i>DeleteCookie</i> method in COOKLIB.JS.</p>

<h3>Persistent Objects</h3>

<p>The approach I've just described works fine for storing individual pieces of data, but is insufficient for storing an entire object. Fortunately, JavaScript objects are more similar to arrays than to actual C++ or Java objects (see the text box "JavaScript Objects" for details). Their similarity to arrays makes them easier to store generically. The methods (which will be described shortly) must be attached to objects using the "Object.Method=FunctionName" syntax.</p>

<p>The <i>StorePersistently</i> object methods in OCOOKLIB.JS (available electronically) show how to store an object with a given name in the cookie. They create a composite string of delimited "property name =property value" pairs that is then stored as a single cookie. The choice of '|' as a delimiter is arbitrary and may be changed to suit your application. There are two versions of the <i>StorePersistently</i> method -- one that works under Netscape 3.0, and another that works under Netscape 2.0 and 3.0. If you use the 2.0 version, you must ensure that all object properties that contain data values precede all object properties that contain function values. You must also ensure that the last data property is named <i>endDataMembers</i>. Adhering to this convention will guarantee that only the data properties of your objects are stored in the cookie. This saves space, because when you store a function in the cookie, the entire text of the function is stored. Version 3.0 of the <i>StorePersistently</i> method lets you create free-form objects. It uses the <i>typeof</i> operator to make sure that no object properties of type "function" are stored in the cookie. </p>

<p>The <i>RetrievePersistently</i> object method (OCOOKLIB.JS) shows how to retrieve an object from the cookie. This method is called from an existing object. The method parses the composite string, which was retrieved from the cookie using the given object name. Each parsed <i>property name=property value</i> string is used to update or create the associated property in the object using the <i>Object[PropertyName]=PropertyValue</i> associative array style syntax.</p>

<p>You might be thinking that it would be easier to create a single cookie for each property, instead of creating a single delimited composite that holds all the properties. I store the object in a single cookie instead of multiple cookies because Netscape has placed a 20-cookie limit on each domain. You don't want to use up all your cookies on a single object. Netscape has also limited cookie size to 4K and the total number of cookies to 300. Web clients, including Netscape, will likely lift these arbitrary limitations if use of client-side persistence becomes more prevalent.</p>

<h3>Putting it all Together</h3>

<p>Using the generalized JavaScript libraries discussed here, I created a custom catalog application for the fictitious "Bolts 'R' Us" company. This application is comprised of two HTML pages. The first (NANDB.HTM, available electronically) displays a view of all available bolts, and the second (FULLVIEW.HTM) displays the details of the individual bolts and lets users browse. The first page writes information to the cookie, and the second page reads the information to determine what to display. Using JavaScript and the cookie, two pages can be used to display information that would require nine static HTML pages. VIEWINFO.JS (available electronically) is the JavaScript code that glues the two pages together. This code contains the object-constructor methods that are used to create the objects that are stored into and retrieved from the cookie. The <i>ViewInfo</i> object is used to describe all the characteristics of an individual bolt. <i>ViewPageInfo</i> is a composite object containing an array of <i>ViewInfo</i> objects (one per bolt), navigational properties, and general appearance properties.</p>

<p>When the first page loads, the page header stores the properties for the body background image and text color in the cookie using the <i>SetBack</i> method from VIEWINFO.JS. It then creates a bolts-description array, which it stores in the cookie. The bolt-description array consists of <i>ViewInfo</i> structures that each contain information for a single bolt: its price and details of its image file (filename, thumbnail dimensions, full-view dimensions, title, and description). One cookie is used for each bolt. </p>

<p>The body of the page contains another script that iterates through the bolt <i>ViewInfo</i> array in order to create a table that has one bolt thumbnail per table cell. The <i>ViewInfo</i> object method <i>ViewInfo_WriteDoc</i> (VIEWINFO.JS) creates the actual HTML code that is written to the document in order to create the thumbnail cells. <a name="rf1"><a href="9705ff1.htm">Figure 1</A> shows how the first page looks when loaded. <i>ViewInfo_WriteDoc</i> creates a table cell that contains an anchor tag that links to the second page. The tag is defined so that the JavaScript <i>DoClickPic</i> method is called for the <i>onclick</i> event, and the <i>DoMsg</i> method is called for the <i>onMouseOver</i> event. The <i>DoClickPic</i> method stores the index parameter in the cookie. This parameter is the index of the <i>ViewInfo</i> array element that describes the bolt that was clicked by the user. The second page is then loaded per the anchor tag HREF attribute. When it loads, it reads the view information from the cookie and displays the view for the bolt with the index that was just stored by the <i>DoClickPic</i> method.</p>

<p>The entire body of the second page is created dynamically using JavaScript. A <i>ViewPageInfo</i> object is created and its associated <i>WriteDoc</i> method is invoked to generate the HTML that comprises the document body. The <i>ViewPageInfo</i> object constructor reads all the properties that were stored in the cookie by the first page. The <i>ViewPageInfo_WriteDoc</i> method creates an HTML document that displays the large bolt image together with a title, description, price, and navigational buttons. <a name="rf2"><a href="9705ff2.htm">Figure 2</A> shows the second page. </p>

<p>The bolt-image information is read from the current <i>ViewInfo</i> array element by indexing the <i>ViewPageInfo.view</i> array property with the <i>ViewPageInfo.curIndex</i> property. Anchor tags bracketing the navigation buttons are used to invoke the JavaScript methods <i>DoPrev</i>, <i>DoNext</i>, and <i>DoBack</i>.</p>

<p><i>DoPrev</i> causes the index of the previous <i>ViewInfo</i> element to be stored in the cookie before it reloads the current page; <i>DoNext</i> causes the same to happen for the next <i>ViewInfo</i> element. Storing a new index before reloading the page causes the page to display a different bolt. If the <i>DoBack</i> method is invoked, the first page is loaded (the page specified in the <i>ViewPageInfo.backLink</i> property). The same thing happens if either the <i>DoPrev</i> or <i>DoNext</i> methods cause the current index to go out of range. The <i>ViewPageInfo _WriteDoc</i> method has a sanity check that prevents a page from being loaded when there are no cookie parameters stored. If the <i>ViewInfoMaxIndex</i> cookie cannot be found, a static error message is displayed instead of those nasty JavaScript pop-up error boxes.</p>

<h3>Other Applications</h3>

<p>Another important application of JavaScript cookies is persistent storage of user preferences. For example, when a user visits your site, you might want to store their favorite background color, name, display preferences, and so on. This information can be encapsulated in a single preferences object that can be stored and retrieved using the JavaScript methods just described. Remember to supply an expiration date when storing cookies for the long term. If you do not provide an expiration date, the stored-cookie information will be discarded when the browser exits...at least, that's how it's supposed to work.</p>

<h3>Conclusion</h3>

<p>The JavaScript document cookie puts browser-side persistence within the reach of web developers everywhere. The JavaScript methods described here make object persistence even easier. With these tools, you can create web pages with long-term memory, web pages that replace CGI scripts, or web pages that communicate with each other. These features will allow you to create sites that are more user friendly and less burdensome to HTTP servers.</p>

<p><b>DDJ</b></p>



<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
