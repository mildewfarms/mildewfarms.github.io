<HTML>
<HEAD><TITLE>DDJ, Software Careers Fall 97:C++ in the Real World </TITLE></HEAD>
<body bgcolor="FFFFFF">




<H1>C++ in the Real World</H1>
Software Careers Fall 1997 <I>Dr. Dobb's Journal</I>
<H3><I>by Nathan Myers</I></H3>

<hr>
<I>Nathan has been relearning C++ since 1986. He has worked on the ISO/ANSI C++ Standard since 1993, designed the locale portion of the Standard C++ Library, and is responsible for the explicit keyword. You can contact him at http://www.cantrip.org/.</I>
<hr>
<IMG SRC="9719iins.gif"  ALIGN=LEFT HSPACE=10 VSPACE=10 ALT="Insert">
C++ has taken a lot of criticism: It's a big language that takes a long time to learn; standardization has taken a long time, which has made it hard to write portable code; newer languages, notably Java, draw more media attention. Still, among languages that support an object-oriented style, C++ is by far the most widely used, and its usage is still growing rapidly. Why?  <p>
Some of the complexity of C++ is inherited from C, or results from its evolutionary history, but for the most part, it's complex because it's powerful. For an easy problem, any language will do; a hard problem demands a powerful language. Each feature of C++ exists because it has proven important for some area of industrial programming. With the language standard nearly complete, compilers that implement most of the new standard features are available now on most architectures. <p>
Real-world programmers are more interested in problems than in languages: A programming language is a way to solve a problem. When you use the right mix of languages and language features, the solution to a problem is much easier to describe and implement, with better results. C++ remains an essential tool for software engineers not because anybody thinks it's the best possible language, but because it's a single, portable language that works better than any alternative in each of several areas. In this article, I'll explore C++'s strengths, and show how you can exploit them in your projects.<p>
<B>Why Use C++?<p>
</B><p>
"C++ is a general purpose programming language designed to make programming more enjoyable for the serious programmer." <p>
-Bjarne Stroustrup, 1985<p>
For many uses, C++ is not the ideal language. You might prefer Tcl/Tk for writing a user interface, SQL for relational database queries, Java for network programming, or Yacc for writing a parser. C++ is used because it works well when the ideal language is (for whatever reason) not available, and because it interfaces easily with the other libraries and languages you use.  <p>
It's no accident that you can interface C++ with almost any language interpreter or library. You rarely find a big program written all in one language, or without using libraries, so easy integration with other languages and libraries was a key design goal.  <p>
Most problems have no specialized language to solve them; some because none has (yet) been worth creating, and others because an interpreter would add too much overhead. When you can't afford a specialized language for part of a problem, a library may suffice. C++ was designed with libraries always in mind, and its most useful features are those that help you write portable, efficient, easy-to-use libraries. <p>
<B>C++ as Glue<p>
</B>A solution for any big problem depends on solutions to a variety of smaller problems. For some of those smaller problems you may find a specialized language or library ideally suited for the job. For the rest, you must write your own code, and then interface it with the other parts. <p>
For example, in a business application, you might use SQL to talk to a database server, Postscript to talk to a printer, and Tcl/Tk for its user interface; and link with libraries for fixed-precision arithmetic and encryption. In a multiplayer game, you might use Java applets in the client machines, VRML3D to describe a virtual world, and Scheme for describing nonplayer characters; and link with libraries for networking and multithreading. The Microsoft NT kernel network driver contains a small Prolog interpreter to help puzzle out network interface cards.<p>
C++ is, by design, well suited to tying together the various parts of a programming project. It has features specifically for calling libraries written in other languages, and designers of other languages are careful to make them easy to connect to C++. It also includes features to help organize big programs, and to keep libraries from interfering with one another or with your main-line code. Most importantly, it imposes no upper limit on the size of problem it can address; as your program evolves and grows, you won't discover one day that the language just isn't up to the job any more.<p>
The most familiar feature in C++ for interfacing with other languages is its C subset. Anything you can do with C you can do with C++; hence, any interface designed for C is usable from C++. Similarly, the <I>asm(...)</I> construct gives you access to lower-level code and libraries that don't present a C interface. To call a C library, or to export C interfaces, you just wrap the declarations in the <I>extern "C" {...}</I> block. <p>

<br clear=all>
<table width=500 align=center cellpadding=4 cellspacing=0 border=1>
<tr><td>
<pre>
//root.h:
template &lt;int Size, int Low = 1, int High = Size&gt;
  struct Root;

template &lt;int Size, int Mid&gt;
  struct Root&lt;Size,Mid,Mid&gt;{
    static const int root=Mid;
  };

template &lt;int Size, int Low, int Mid&gt;
  struct Root{
    static const int mean = (Low + High)/2;

    static const bool down = (mean * mean &gt;= Size);
    static const int root=Root&lt;Size,
      (down ? Low : mean+1),
      (down ? mean : High)&gt;::rott;
  };

//compute sqrt, use it for static table size
int table[Root&lt;N&gt;::root];
</pre>
</td>
<tr><td bgcolor="#cccccc"><b>Example 1:</b> Compile-time square-root computation: ceil(sqrt(N)).</td>
</table>
<br clear=all>

Interpreters are valuable when the desired semantics are unknown until run time, or when the compile-link cycle is just too slow. To get around performance bottlenecks, most interpreters let you patch in C++ subroutines. In fact, some interpreters are themselves written in C++, and their "built-in" features are implemented just that way. Some are also available as a library and let you create an interpreter object in your C++ program whenever you need one. Such interpreters are called "extension languages;" good ones include Python, Korn shell (ksh95), Tcl, and Scm (a Scheme variant).<p>
To help improve program organization, more recent C++ compilers implement the "namespace" feature. This lets you protect your programs against the chaos of global names found in operating system interfaces, C libraries, and even other C++ libraries. Namespaces let you group all your global names (functions, classes, and templates) in a separate scope (or scopes), so you can combine libraries (your own or others') without worrying about name collisions. Use them religiously.<p>
<B>C++ for Performance-Critical Sections<p>
</B>While many applications can tolerate almost any degree of inefficiency in the implementation, some can't tolerate any. In the past, you would be forced to trade expressive clarity for performance by rewriting your performance-critical code to eliminate abstractions, perhaps in assembly language or specially optimized Fortran. With Standard C++ and modern compilers this is no longer necessary.<p>
Each feature of C++ was carefully designed to be usable where performance matters. More precisely, each feature is as fast as what you would write in C to achieve the same purpose. Thus, an inline function is as fast as a C macro, and a virtual function call is about as fast as using a table to select a function to call.  <p>
<br clear=all>
<table width=500 align=center cellpadding=4 cellspacing=0 border=1>
<tr><td>
<pre>
// Given a forward declaration:
template &lt;int Dim, class T&gt;
  struct dot_class;

// a specialized base case for recursion:
template &lt;class T&gt;
  struct dot_class&lt;1,T&gt;{
    static inline T dot(const T* a, const T* b){
      return dot_class&lt;Dim-1,T&gt;::dot(a+1,b+1) + a* * b*;
    };

// ... and some syntactic sugar:
template &lt;int Dim, class T&gt;
  inline T dot(const T* a, const T* b){
    return dot_class&lt;Dim,T&gt;::dot(a,b);

// Then
int product = dot&lt;3&gt;(a,b);

// results in the same (near-)optimal code as
int product = a[0]*b[0] + a[1]*b[1] + a[2]*b[2];
</pre>
</td>
<tr><td bgcolor="#cccccc"><b>Example 2:</b> Vector dot product inline expansion.</td>
</table>
<br clear=all>

The C++ template mechanism can perform significant computation at compile time for results that consume zero run time (see Example 1), and can express control flow at compile time to expand an algorithm inline (see Example 2). Straightforward C++ code using a cleverly coded library (such as Blitz++; see "C++ Resources) and a good (but unspecialized) optimizing compiler can now beat Fortran performance on its home ground, numeric array processing. It is this combination of efficient basic operations with a uniquely powerful template mechanism that make C++ a good choice for implementing the performance-critical parts of any application.<p>
<B>C++ for Writing Libraries<p>
</B>I've already mentioned that C++ has features ideal for writing efficient, portable, easy-to-use libraries. This is no accident. To be useful for writing really big programs, the language must make it easy to assemble big programs from not-so-big pieces that hide complexity behind simple interfaces. Those pieces are libraries.<p>
Libraries are not created only (or even usually) for "reuse"; it is typically very difficult to take a library out of one program and make it useful in other programs, even when it was written with that in mind. Rather, the purpose of good library interfaces is to make it possible to understand a big program. A big program can be understandable only if complexity doesn't leak out of the libraries it uses.<p>
Part of hiding complexity is hiding the use of advanced techniques from users who may not (yet) understand them. In other words, language features and techniques that seem interesting only to a few users can be used to make better libraries for everyone else. This is abundantly evident in some libraries already available, such as the Standard Template Library (STL), which hides a potentially bewildering variety of advanced techniques behind simple interfaces. (For more information on STL, see "The SGI Standard Template Library," by Matthew H. Austern, <I>Dr. Dobb's Journal</I>, August 1997.)<p>
You can use these libraries at many levels. They package useful code, and you can just call them; but they are also examples of good interface design, and sometimes brilliant implementation. Read them as literature, to inspire your own designs, and publish your own libraries, so others can learn from them and help you improve them.<p>
<B>Advice<p>
</B>Always use the very best, most advanced compiler available. At one time, using advanced language features was asking for trouble, but no longer. Seek out a really up-to-date compiler, and accept no substitutes. Currently, compilers based on the Edison Design Group (EDG) front end implement the advanced language features most reliably (see the accompanying text box entitled "C++ Resources").<p>
Learn C++ a little at a time. Start with the basics: variables, operators, functions, flow control. (You don't need to learn C first; C++ offers better ways to do many things.) Learn how C++ treats memory, and how constructors and destructors work. Learn the features needed to use libraries: how to create objects, call members, instantiate templates. Learn how to write exception-safe code. (At this point, given some essential libraries, C++ is already useful.) Be sure to put all your code in namespaces, right from the beginning.<p>
It may take years to learn how to design classes and templates well; start by copying from good examples. (If you don't believe that designing a string class is hard, try finding a good one.) Learn templates thoroughly by studying libraries that use them well: Understanding templates will provide unending rewards. The C++ Standard Library offers both good examples (iterators, algorithms, and containers) and bad (string). Avoid overloading operators, except as part of using a library (such as <I>operator&lt;&lt;</I> for <I>ostream</I>), until you're an expert. Avoid automatic conversions; you will usually regret them, often after it is too late to do anything about it.  <p>
Don't be too impressed with inheritance and virtual functions. They are important, but not so important as many writers imagine; C++ offers other, often better, ways to express abstraction. In particular, be deeply suspicious of deep inheritance hierarchies. The Standard Library <I>streambuf</I>s and <I>locale</I> facets use inheritance reasonably. (Although the <I>streambuf</I> member names are unfortunate, the interface is worth learning.) Inheritance doesn't need to be exposed in the library interface to be useful; in the Standard Library, <I>streambuf</I>s are hidden behind streams, and <I>locale</I> facets are hidden behind <I>locale</I>s.  <p>
C++ has been called an object-oriented language, and an "impure" one; avoid this labeling trap. C++ has features to support object-oriented, generic, and structured programming styles. It also has pointer arithmetic, bit-twiddling operators, and a "goto" statement. All are useful, in places. Categories are generally more useful for writing about programming than for writing programs.  <p>
There is no substitute for Bjarne Stroustrup's <I>The C++ Programming Language</I>, Third Edition (Addison-Wesley, 1997). You may begin with an introductory text, but graduate to Stroustrup. Use a good style guide, such as <I>Industrial Strength C++: Rules and Recommendations</I> by Henricson and Nyquist (Prentice Hall, 1995), and collect books of tips, such as <I>Effective C++: 50 Specific Ways to Improve Your Programs and Designs</I> by Scott Meyers (Addison-Wesley, 1992). Learn the vocabulary of patterns; most people start with <I>Design Patterns: Elements of Reusable Object-Oriented Software</I> by Erich Gamma et al. (Addison-Wesley, 1994). Remember that becoming a good designer takes years, no matter what language(s) you use to express your ideas.<p>
By far the most important skill to develop is writing correct code. Testing always misses errors, and debugging is often impossible (such as in multithreaded or real-time code), so there is no substitute for "getting it right." The language provides many tools to help prevent errors; use them all. Get used to proving that each statement and block does what is intended. Adopt a "contract" style of programming: For each interface, list the assumptions and guarantees you cannot enforce in code. A good programmer may be a thousand times more productive than a mediocre one; this skill accounts for much of the difference.<p>

<br clear=all>
<table width=500 align=center cellpadding=4 cellspacing=0 border=1>
<tr bgcolor="#cccccc"><th><font size=+1>C++ Resources</font></th>
<tr><td><b>Great Libraries</b></td>
<tr><td>The Silicon Graphics Standard Template Library (STL)<br>
    <a href="http://www.sgi.com/technology/stl/">www.sgi.com/Technology/STL/</a><p>
    Todd Veldhuizen's Blitz Numerical/Array Library.<br>
    <a href="http://monet.uwaterloo.ca/blitz">monet.uwaterloo.ca/blitz</a><p></td>
<tr><td><b>EDG-based Compilers</b></td>
<tr><td>Comeau Computing, low cost compilers ported to many platforms.
    <a href="http://www.comeaucomputing.com/">www.comeaucomputing.com/</a>
<p>
    Kuck &amp; Associates Inc., posted to many platforms, performs thorough optimization.<br>
    <a href="http://www.kai.com">www.kai.com</a>
<p>
    Apogee Software Inc., optimizing for SPARC targets.<br>
    <a href="http://www.apogee.com">www.apogee.com</a>
<p>
    The Portland Group, optimizing for parallel machines, including Linux.<br>
    <a href="http://www.pgroup.com">www.pgroup.com</a>
<p>
    Intel Corp., VTune plugs into the MSVC++ IDE.<br>
    <a href="http://developer.intel.com/design/perftool/icl24/">developer.intel.com/design/perftool/icl24/</a>
<p>
    Motorola Corp., C++ SDK for Mac, plugs into Mac IDEs.<br>
    <a href="http://www.mot.com/sps/powerpc/library/fact_sheet/mac_sdk_faq.html">www.mot.com/SPS/PowerPC/library/fact_sheet/mac_sdk_faq.html</a>
<p>
    Edison Design Group.<br>
    <a href="http://www.edg.com">www.edg.com</a>
<p>

</td>
</table>
<br clear=all>

During the first two years that you use C++, you will often find better ways of doing things that allow you to delete hundreds of lines of code; welcome them. In general, never be reluctant to throw away or replace code; throwing away code is the (paradoxical) key to reuse. What is valuable in a library is not implementation code, but insight. A library becomes useful by responding to the experience of its users; code that implements the wrong features is worse than useless.<p>
Don't try to use one language for everything; know several different kinds of languages, be willing to learn more, and be able to combine them to exploit their strengths. (But avoid proprietary, nonportable languages; they disappear quickly, taking your code with them.) The tools you have at hand often help to determine the projects you find yourself involved in; the best projects are reserved for those who have the sharpest tools.<p>
<B>Conclusion<p>
</B>C++ is one language among many, but its unusual combination of strengths make it an essential tool for the serious engineer. Although you may take years to fully understand some of its features, you can benefit from its power immediately.  <p>
<p>

<b>DDJ</b>



</BODY>
</HTML>