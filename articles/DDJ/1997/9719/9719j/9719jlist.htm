<HTML>
<HEAD><TITLE>DDJ, Software Careers Fall 97: PDL: Table</TITLE></HEAD>
<body bgcolor="FFFFFF">



<H1>PDL: The Perl Data Language:
<br>Tables and Examples</H1>
Software Careers Fall 1997 <I>Dr. Dobb's Journal</I>
<H3><I>by Karl Glazebrook and Frossie Economou</I></H3>

<hr>
<a href="9719jlist.htm#table">Jump to Table 1</a>
<hr>
<h4>Examples:</h4>
<table width=600 cellpadding=5 cellspacing=0 border=1>
<tr><td align=center>

<table width=275 cellpadding=4 cellspacing=0 border=1>
<tr><td><pre>
  perldl&gt; $b = 2
  perldl&gt; p $b/2
  1
  perldl&gt; p $b/3
  0.666666666666667
  perldl&gt;
<pre>
<tr><td bgcolor="#cccccc"><b>Example 1:</b> Assigning values to variables, then printing them.
</table>

</td>
<td align=center>

<table width=275 cellpadding=4 cellspacing=0 border=1>
<tr><td><pre>
  perldl&gt; $a = pdl [5,3,4, [6,4,3];
  perldl&gt; print $a;
  [
    [5,3,4]
    [6,4,3]
  ]
  perldl&gt; $b = $a * $a;
  perldl&gt; print $b;
  [
    [25,9,16]
    [36,16,9]
  ]
</pre>
<tr><td bgcolor="#cccccc"><b>Example 2:</b> Creating a 2X3 Matrix and multiplying it by itself.
</table>

<tr><td align=center>

<table width=275 cellpadding=4 cellspacing=0 border=1>
<tr><td><pre>
<b>(a)</b>
perldl&gt; $a = rfits "PDL1.11/m51.fits";
IO loaded
BITPIX = 16 size =65536 pixels
Reading 131072 bytes
BSCALE = 1.0000000000E0 && BZERO
       = 0.0000000000E0
perldl&gt;

<b>(b)</b>
perldl&gt; p dims $a
256 256
perldl&gt;

<b>(c)</b>
perldl&gt; p stats $a
104.193572998047 67.4254211880158
perldl&gt;

<b>(d)</b>
perldl&gt; p sec ($a,0,3,252,255)
[
  [50 51 54 53]
  [50 50 53 54]
  [51 52 53 52]
  [54 53 54 51]
]
perldl&gt;

</pre>
<tr><td bgcolor="#cccccc"><b>Example 3:</b>
(a)Reading in and plotting an image;
(b) determining the dimensions of data by using the dims() function;
(c) determining the mean and standard deviation of a piddle using the stats() function;
(d) printing a portion of the piddle, using sec() function.
</table>

</td>
<td align=center>

<table width=275 cellpadding=4 cellspacing=0 border=1>
<tr><td><pre>
<b>(a)</b>
perldl&gt; imag $a
Loaded PGPLOT
Displaying 256 x 256 image from
  24 to 500 ...

<b>(b)</b>
perldl&gt; imag sin(0.05*$a)
Displaying image 256 x 256 from
  -0.999990224838257 to
  0.999992072582245 ...
</pre>
<tr><td bgcolor="#cccccc"><b>Example 4:</b>
(a) imag() displayign the piddle $a;
(b) results of humiliation.
</table>

</td>
<tr><td align=center>
 
<table width=275 cellpadding=4 cellspacing=0 border=1>
<tr><td><pre>
<b>(a)</b>
perldl&gt; $r = rvals zeroes 20,20

<b>(b)</b>
perldl&gt; $g = exp(-($r/6)**2)/108.08
perldl&gt; imag $g

<b>(c)</b>
perldl&gt; $b = convolve $a.$g
perldl&gt; imag $b

<b>(d)</b>
perldl&gt; imag $a-$b
</pre>
<tr><td bgcolor="#cccccc"><b>Example 5:</b> .
(a) Chaining PDL functions;
(b) using the exp() function to generate a two-dimensional Gaussian;
(c) convolving Messier 51 using the newly created Gaussian filter;
(d) creating an unsharp masked image.
</table>

</td>
</table>

<hr>
<a name="table"></a>
<h4>Tables</h4>
<table width=600 cellpadding=5 cellspacing=0 border=1>
<tr><td><pre>
<B>(a)</b>                                
<hr>
+ - * / &gt; &lt; &gt;=                   Array operators/functions 
&lt;= &lt;&lt; &gt;&gt; &amp;                         (same as Perl and C 
| ^ == != +=                       but they act element by 
-= *= /= %=                        element)
**= &lt;&lt;= &gt;&gt;= 
&amp;= |= ^= &lt;=&gt; 
** % ! ++ - 
"" atan2* sqrt* 
sin* cos* log* 
exp* abs*

X                                Matrix multiplication
~                                Matrix transpose

byte short                       Type conversions
ushort long 
float double 
convert

pdl                              Create/copy a piddle
topdl                            Coerce to piddle if scalar
howbig                           Size of piddle datatype in bytes
nelem                            Number of elements
dims                             Return list of dimensions
inplace                          Perform operation in place
list                             Convert piddle to list, e.g.
                                   for (list $x) { }
listindices                      Return list of index values (1D)
log10*                           Take log base 10
min max sum                      Min/max/sum of piddle
zeroes ones                      Create zero/one-filled piddle
sequence                         Create sequence-filled piddle
reshape                          Reshape the dimensions of a piddle
sec                              Subsection of a piddle
int* set                         Insertion/Setting
at                               Return pixel value at (x, y, z, ...)

axisvals*                        Fill piddle with axis values
xvals*
yvals* 
zvals*

rvals                            Fill piddle with distance from its
                                   center
callext                          Call external C code in dynamically
                                   loadable object
convolve                         Convolve image with kernel (real space)
hist                             Histogram of data
stats                            Return mean and standard deviation
transpose                        Matrix transpose
qsort*                           Quick sort piddle
median                           Median of piddle
oddmedian                        Lower odd median of piddle


<B>(b)</B>
<hr>
fibonacci*                       Compute Fibonacci series (simple 1D example)
cc8compt*                        Connected 8-component labelling (2D example)


<B>(c)</B>
<hr>
rfits                            Read a FITS format file
wfits                            Write  a FITS format file
rcols                            Read columns in a text file into piddles
rgrep                            Read <I>regexp</I> matches into piddles
rdsa                             Read a DSA format file (Starlink systems only)


<B>(d)</B>
<hr>
imag                             Display an image
ctab                             Load an image color table
line                             Plot vector as connected points
points                           Plot vector as points
errb                             Plot error bars
cont                             Display image as contour map
bin                              Plot vector as histogram (<I>bin hist $data</I>,
                                   for instance)
hi2d                             Plot image as 2D histogram
poly                             Draw a polygon
vect                             Display two images as a vector field
hold                             Hold current plot window range;
                                   for example, for overlays 
release                          Autoscale new plot window for each command
rel                              Synonym for "release"
env                              Define a plot window, put on "hold"
dev                              Explicitly set a new PGPLOT graphics device


<B>(e)</B>
<hr>
iis                              Display image
iiscur                           Return a cursor position
iiscirc                          Draw circles on image display
saoimage                         Start SAOimage
ximtool                          Start Ximtool


<B>(f)</B>
<hr>
flush                            Update C cache from piddle Perl
                                   data structure
copy                             Copy a piddle
new                              Create a piddle
</pre>
<tr><td bgcolor="#cccccc"><b>Table 1:</b> PDL 1.11 functions.  Starred items (log10*, for instance) act as mutators: When you say log10(inplace($a)), every element of $a is replaced with its logarithm base 10.
(a) Defined in PDL::Core;
(b) defined in PDL::Examples;
(c) defined in PDL::Io;
(d) defined in PDL::Graphics::PG (PGPLOT graphics);
(e) defined in PDL::Graphics::IIS (talk to IIS protocol image display widget);
(f) PDL methods.
</table>
<br clear=all>
<hr>
<p>
<B>DDJ</B>
<p>
<a href="9719j.htm">Return to Article</a>
<P>

</BODY>
</HTML>