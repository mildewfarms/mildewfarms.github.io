<HTML>
<HEAD><TITLE>DDJ, Software Careers Fall 97: Great Books</TITLE></HEAD>
<body bgcolor="FFFFFF">




<H1>Great Books</H1>
Software Careers Fall 1997 <I>Dr. Dobb's Journal</I>
<H3><I>by Gregory V. Wilson</I></H3>

<hr>
<I>Greg is the author of </I>Practical Parallel Programming <I>(MIT Press, 1995) and coeditor with Paul Lu of </I>Parallel Programming Using C++ <I>(MIT Press, 1996). Greg can be reached at gvwilson@interlog.com.</I>
<hr>
My programming style was largely shaped by Kernighan and Plauger's <I>Software Tools in Pascal</I> and Jon Bentley's <I>Writing Efficient Programs</I>. On the other hand, I have friends who swear by Abelson and Sussman's <I>Structure and Interpretation of Computer Programs</I>, Stevens' <I>Unix Network Programming</I>, or Petzold's <I>Programming Windows</I>. A few months ago, I began wondering what the authors of these books themselves read. I've enjoyed every book by Brian Kernighan that I've ever read, and would be willing to at least skim through anything he'd recommend. What about Stewart Brand, whose <I>How Buildings Learn</I> taught me more about how programs evolve and how to plan for their evolution than any software engineering text I'd ever read? What does he read, and why?<p>
Consequently, I dredged up e-mail addresses for people whose work or writings I thought had influenced computer science. I put about 50 people on my list, including all Turing Award winners, as many of the industry movers and shakers as I could find addresses for, and a few random names suggested by friends. I sent e-mail asking them what computing-related books they had enjoyed most or had influenced them most. The 17 individuals listed in Figure 1 were kind enough to reply with specific titles (except for Alan Cooper, who pointed me to his online annotated bibliography); Douglas Hofstadter sent me a one-liner saying, "Too busy;" and Bill Gates' secretary's secretary sent me a message that began, "Dear Dr. Gregory V. Wilson, The Chairman is grateful for your input!" (okay, I'm exaggerating a bit, but that was its tone).<p>
When the flurry of e-mail died down, I collated the lists I'd been sent (see Table 1). The first surprise was that of the 91 specific titles that were mentioned, only 11 received more than a single vote. Of those, only four (Knuth's <I>Art of Programming</I>, Hennessy and Patterson's <I>Computer Architecture</I>, Minsky's <I>Computation</I>, and Bentley's <I>Programming Pearls</I>) are "hard core" computing. Even more surprising, several people didn't include any computing books on their list at all.<p>
My second mailing therefore asked people whether they thought there were fewer "Great Books" (a term I deliberately left undefined) in computer science than in other disciplines, and if so, why? The replies I received suggested several possibilities. Andrew Tanenbaum suggested that computer science actually isn't any different from other sciences; he felt that if I'd asked chemists for lists of their favorite books, they wouldn't have agreed much either. However, I used to work with computational physicists, and know that there are some "classic" texts in the sciences-the Feynman Lectures on Physics, for example, or Shannon's original monograph on information theory.<p>
A second explanation, thanks to Steve McConnell, is that as computer science becomes more specialized, it's harder for any one book to command a large audience. When I commented on this to my brother, he asked whether it wouldn't have therefore been better to ask people about their favorite programs, rather than their favorite books. After all, people only read books once, or at most a few times, but use word processors, operating systems, and the like thousands upon thousands of times. If I'd mailed to 50 musicians, I would probably have asked for their favorite composers, pieces, or records, rather than for their favorite writers on music. He has a good point, but given how few good programs are out there, and how infrequently programmers read each other's source code, my guess is that the responses would have been pretty thin.<p>
There is one other explanation for the apparent scarcity of "Great Books" in computing: Perhaps the fortune tellers actually got it right for once- computers have made books obsolete. Several respondents suggested that computing has been changing so rapidly that most books-even useful, well-written ones-become obsolete too quickly to acquire "Great Book" status. For example, UNIX owes much of its success to the crisp, clean prose of <I>The C Programming Language</I>, <I>Software Tools</I>, and <I>The Unix Programming Environment</I>. However, like political tracts from a century ago, these books seldom interest present-day readers, for whom many of the technical points are either obvious (in the mathematician's sense of a difficult problem that has been worked out for you) or irrelevant.<p>
So what must a computing book be to be considered great? Timelessness is important: Neither the mathematics in <I>The Art of Programming</I> nor the observations on the (mis)management of software projects in <I>The Mythical Man-Month</I> show any rust. Economy of effort seems to matter as well: <I>The Elements of Style</I>, <I>A Pattern Language</I>, Hennessy and Patterson's <I>Computer Architecture</I>, and Bentley's books (all of them, not just the <I>Programming Pearls </I>series) are all about getting things right the first time. <p>
Finally, a sense of wonder is also an asset, as evidenced by <I>Godel, Escher, Bach: An Eternal Golden Braid</I> and <I>Through the Looking Glass</I>. Maybe what we're all really looking for is something that gives us the feeling that I used to get reading Isaac Asimov's science essays-the feeling that the universe is wonderful and actually makes sense to someone. <p>
<B>Books Mentioned <p>
</B>Abelson, Harold, Gerald Jay Sussman, and Julie Sussman. <I>Structure and Interpretation of Computer Programs</I>, Second Edition. MIT Press, 1996. ISBN 0262011530.<p>
<table width=200 align=right cellpadding=4 cellspacing=0 border=1>
<tr><td align=center>
  <table width=192 cellpadding=2 cellspacing=0 border=0>
  <tr><td>Victor Basili<br>
          Gordon Bell
          Tim Berners-Lee
          Stweart Brand
          Fred Brooks
          Nolan Bushnell
          Alan Cooper
          A.K. Dewdney
          Jim Gosling
          Brian Kerninghan
          Steve McConell
          Burton Smith
          William Stallings
          Guy Steele
          Andrew Tanenbaum
          Edward Tutfe
          Gerald Weinberg
  </table>
<tr><td bgcolor="#cccccc"><b>Figure 1:</b> Individuals who replied to my informal survey.
</table>
Alexander, Christopher, Sara Ishikawa, and Murray Silverstein. <I>A Pattern Language: Towns, Buildings, Construction.</I> Oxford University Press, 1977. ISBN 0195019199.<p>
Bentley, Jon Louis. <I>More Programming Pearls: Confessions of a Coder.</I> Addison-Wesley, 1988. ISBN 021118890.<p>
<I>---. Programming Pearls</I>. Association for Computing Machinery, 1986. ISBN 0201500191.<p>
<I>---. Writing Efficient Programs</I>. Prentice Hall, 1982. ISBN 013970251.<p>
Boehm, Barry W. <I>Software Engineering Economics.</I> Prentice Hall, 1981. ISBN 0138221227.<p>
Brand, Stewart. <I>How Buildings Learn: What Happens After They're Built.</I> Penguin USA, 1995. ISBN 0140139966.<p>
Brooks, Frederick P., Jr. <I>The Mythical Man-Month: Essays on Software Engineering.</I> Addison-Wesley, 1995. ISBN 0201835959.<p>
Carroll, Lewis. <I>Alice in Wonderland/Through the Looking Glass</I>. Smithmark Publishing, 1996. ISBN 0831766948.<p>
<table width=200 align=right cellpadding=4 cellspacing=0 border=1>
<tr><td align=center>
  <table width=192 cellpadding=2 cellspacing=0 border=0>
  <tr><th align=left>Author</th>
      <th align=left>Title</th>
      <th align=left>Votes</th>
  <tr><td>Donald Knuth</td>
      <td>The Art of Programming</td>
      <td>5</td>
  <tr><td>Fred Brooks</td>
      <td>The Mythical Man-Month</td>
      <td>4</td>
  <tr><td>Christopher Alexander</td>
      <td>A Pattern Language</td>
      <td>3</td>
  <tr><td>Douglas Hofstadter</td>
      <td>Godel, Escher, Bach: An Eternal Goldern Braid</td>
      <td>3</td>
  <tr><td>Jon Bentley</td>
      <td>Programming Pearls</td>
      <td>2</td>
  <tr><td>Barry Boehm</td>
      <td>Software Engineering Economics</td>
      <td>2</td>
  <tr><td>Tom DeMarco</td>
      <td>Peopleware</td>
      <td>2</td>
  <tr><td>Hennessy and Patterson</td>
      <td>Computer Architecture</td>
      <td>2</td>
  <tr><td>Marvin Minsky</td>
      <td>Computation: Finite and Infinite Machines</td>
      <td>2</td>
  <tr><td>Strunk and White</td>
      <td>The Elements of Style</td>
      <td>2</td>
  <tr><td>Lewis Carrol</td>
      <td>Through the Looking Glass</td>
      <td>2</td>
  </table>
<tr><td bgcolor="#cccccc"><b>Figure 2:</b> Favorite Books.
</table>

Demarco, Tom and Timothy Lister. <I>Peopleware: Productive Projects and Teams</I>. Dorset House, 1987. ISBN 0932633056.<p>
Hofstadter, Douglas R. <I>Godel, Escher, Bach: An Eternal Golden Braid.</I> Vintage Books, 1989. ISBN 0394756827.<p>
Kernighan, Brian W. and P.J. Plauger. <I>Software Tools in Pascal.</I> Addison-Wesley, 1981. ISBN 0201036681.<p>
Knuth, Donald E. <I>Selected Papers on Computer Science</I>. Cambridge University Press, 1995. ISBN 1881526925.<p>
<I>---. The Art of Computer Programming: Fundamental Algorithms</I>,<I> Volume 1, </I>Third Edition. Addison-Wesley, 1974. ISBN 0201896834.<p>
<I>---. The Art of Computer Programming: Seminumerical Algorithms</I>, <I>Volume 2, </I>Third Edition. Addison-Wesley, 1981. ISBN 0201896842.<p>
<I>---. The Art of Computer Programming: Sorting and Searching</I>, <I>Volume 3, </I>Second Edition. Addison-Wesley, 1997. ISBN 0201896850.<p>
Minsky, Marvin Lee. <I>Computation: Finite and Infinite Machines.</I> Prentice Hall, 1967. ISBN 0131655639.<p>
Patterson, David A., John L. Hennessy, and David Goldberg. <I>Computer Architecture: A Quantitative Approach</I>, Second Edition. Morgan Kaufman Publishers, 1996. ISBN 1558603298.<p>
Petzold, Charles. <I>Programming Windows 3.1</I>, Third Edition. Microsoft Press, 1992. ISBN 1556153953.<p>
Stevens, W. Richard. <I>Unix Network Programming.</I> Prentice Hall, 1990. ISBN 0139498761.<p>
Strunk, William and E.B. White. <I>Elements of Style</I>, Third Edition. Allyn &amp; Bacon, 1979. ISBN 0024181900.<p>
<p>

<b>DDJ</b>



</BODY>
</HTML>