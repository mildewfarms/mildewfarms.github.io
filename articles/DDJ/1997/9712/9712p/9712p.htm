<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal December 1997: ATL and Dual Interfaces</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>ATL and Dual Interfaces</h1>

<p><i>Dr. Dobb's Journal</i> December 1997
</p>
<h3>By George Shepherd and Scot Wingo</h3>

<I>Scot is a cofounder of Stingray Software. He can be contacted at mfc_faq@stingsoft.com. George is a senior computer scientist with DevelopMentor and can be contacted at 70023.1000@compuserve.com. They are the coauthors of MFC Internals (Addison-Wesley, 1996).</I>

<hr>

<p>Writing a COM object involves banging out a lot of code, much of it necessary just to get a COM object working. Once you're familiar with the basic idea of COM, it seems as though much of the code could be factored out. </p>

<p>This is just what Microsoft's Active Template Library (ATL) does. ATL provides template implementations of most of the common COM idioms. Visual C++ even gives you a wizard for developing COM interfaces. For the most part, you can get away with using Visual C++'s wizard technology for writing simple COM classes, without understanding how ATL works. However, to work with the more advanced COMisms in ATL, you'll want to understand what ATL is doing behind the fa&ccedil;ade of wizardry. </p>

<p>For example, every COM object has to support the <i>IUnknown</i> interface. While <i>IUnknown</i> comprises just three functions -- <i>QueryInterface</i>, <i>AddRef</i>, and <i>Release</i> -- everybody who writes COM objects has to grind out similar code. <i>IUnknown</i> implementations tend to be fairly standard, and an <i>IUnknown</i> implementation makes a good candidate for code that should be factored out. ATL splits its <i>IUnknown</i> implementation among <i>CComObjectRootBase</i>, <i>CComObjectRootEx</i>, and <i>CComObject</i>. </p>

<p>ATL is flexible when it comes to implementing <i>IUnknown</i>. As far as <i>AddRef</i> and <i>Release</i> go, you can apply the correct code for your target threading model through templates. In addition, ATL provides a decent implementation of <i>QueryInterface</i> using interface maps. (They're just interface lookup tables.) ATL's version of <i>QueryInterface</i> actually turns out to be flexible, providing support for such esoteric COM class composition techniques as aggregation and tear-off interfaces. Another aspect of writing COM classes that turns out to be standard boilerplate-type code is implementing dual interfaces. This month, we'll look at ATL's dual-interface machinery to see how it works under the hood. </p>

<h3>What's a Dual Interface?</h3>

<p>COM is about getting software components to interoperate with each other, even though they may be written using different development environments. That's a tall order, given the variety of software-development tools. However, when it comes down to it, languages fall into two general categories -- compiled and interpreted. A compiled language like C++ tends to be static in terms of data types you can use in the program. To generate the correct code, the compiler needs to know about the program's data structures and the like. In other words, all the data types and functions need to be declared ahead of time. Not so with interpreted languages, which tend to be much more dynamic. The interpreter doesn't need to know about data types and function calls until it's necessary, then figures them out on the fly. </p>

<p>COM gets different pieces of software to cooperate by defining a specific binary layout. COM objects talk to one another by adhering to defined interfaces, which turn out to be function tables at the binary layout. C++ uses pure abstract base classes to conveniently define interfaces. <a name="rl1"><a href="9712p.htm#l1">Listing One</A> for example, is a valid COM interface defined in C++.</p>

<p>All COM interfaces derive from a base interface named <i>IUnknown</i>, which allows clients of the interface to discover an object's additional functionality at run time. <i>IUnknown</i> also provides a means of lifetime control for the object by providing a reference-counting scheme for the object. Clients of <i>ISomeInterface</i> might use the interface as demonstrated in <a name="rl2"><a href="9712p.htm#l2">Listing Two</A>.</p>

<p>COM interfaces are defined and published for the world to see. When a statically typed language like C++ encounters a pointer to a COM interface defined in a header file, the compiler understands the binary layout of the interface because it's defined in the header file. The compiler can generate the correct code for jumping to the right function in the table because it understands the entire picture. </p>

<p>Scripting environments, however, don't work this way. A scripting environment figures out how to make the function call at run time, not at compile time. In this case, the standard COM interface doesn't work. COM, therefore, defines a single well-known interface named <i>IDispatch</i> that scripting languages understand how to deal with. <i>IDispatch</i> is just another COM interface, which looks like <a name="rl3"><a href="9712p.htm#l3">Listing Three</A>.</p>

<p>Rather than accessing functionality by understanding certain positions in a function table, clients of <i>IDispatch</i> access functionality by understanding how to call <i>IDispatch::Invoke</i>. To call <i>Invoke</i>, a client acquires a token representing the function it wants to call. (<i>IDispatch::GetIDsOfNames</i> is one way to acquire a token.) The client calls <i>IDispatch::Invoke,</i> passing the token representing the function. Arguments are passed using a self-describing data type known as VARIANTs. Notice that this is a dynamic situation -- clients can acquire the invocation tokens at run time given human readable names. Because <i>Invoke</i> uses VARIANTs (and not predetermined data types) as arguments, figuring out what kind of arguments to pass is also dynamic. </p>

<p>In its early days, Visual Basic required clients to call <i>GetIDsOfNames</i> to acquire the dispatch tokens before calling <i>Invoke</i>. These days, Visual Basic can figure out the dispatch tokens beforehand by consulting the type library. In addition, Visual Basic can even call regular COM interfaces and ignore the entire dynamic dispatching mechanism of <i>IDispatch</i>. However, there are still a number of environments that require <i>IDispatch</i>. One example is using VBScript inside a web page.</p>

<p>Before jumping into dual interfaces, take a minute to ponder <i>IDispatch</i>. The client has to do a lot of work before it can call <i>Invoke</i>. The client first has to acquire the invocation tokens. Then the client has to set up the VARIANT arguments. On the object side, the object has to decode all those VARIANT parameters, make sure they're correct, put them on some sort of stack frame, then make the function call. As you can imagine, this is complex and time-consuming. If you're writing a COM object and expect some of your clients to use scripting languages and other clients to use languages like C++, you've got a dilemma -- you have to include <i>IDispatch</i> or lock your scripting-language clients out. If you provide only <i>IDispatch</i>, then you make it inconvenient to access your object from C++. Of course, you can provide access through both <i>IDispatch</i> and through a custom interface, but that involves bookkeeping. </p>

<p>Dual interfaces handle this problem. A dual interface is simply <i>IDispatch</i> with functions pasted onto the end. For example, <a name="rl4"><a href="9712p.htm#l4">Listing Four</A> is a valid dual interface. Because <i>ISomeDualInterface</i> derives from <i>IDispatch</i>, the first seven functions of <i>ISomeDualInterface</i> are those of <i>IDispatch</i>. Clients that understand only <i>IDispatch</i> (VBScript for instance) look at the interface as just another version of <i>IDispatch</i> and feed <i>DISPIDs</i> to the <i>Invoke</i> function in the hopes of invoking a function. Clients that understand<i> vtable</i>-style custom interfaces look at the entire interface and ignore the middle four functions (the <i>IDispatch</i> functions) and concentrate on the first three functions (<i>IUnknown</i>) and the last three functions (the ones that represent the interface's core functions). <a name="rf1"><a href="9712pf1.htm">Figure 1</A> shows the <i>vtable</i> layout of <i>ISomeDualInterface</i>.</p>

<h3>Raw C++ and <i>IDispatch</i> </h3>

<p><i>IDispatch</i> is a nasty interface, especially the <i>Invoke</i> function. To get <i>Invoke</i> working, the object has to unpack the list of VARIANTs, decode them, set them up into some appropriate execution context, perform the function, and package the result back into a VARIANT. </p>

<p>Even though <i>IDispatch</i> is fairly complex, it turns out to be pretty easy to implement -- even if you're using raw C++. We'll take a look at the most common way to implement <i>IDispatch</i> in raw C++ because that's the approach ATL uses. After understanding a raw implementation of <i>IDispatch</i>, ATL's approach seems obvious. </p>

<p>The most straightforward way to implement dual interfaces in C++ is to describe the interface in IDL, use the IDL to generate a type library, and then delegate calls to <i>Invoke</i> and <i>GetIDsOfNames</i> to the type library. Defining a dual interface in IDL looks something like <a name="rl5"><a href="9712p.htm#l5">Listing Five</A>.</p>

<p>You can think of IDL as an attribute-extended version of C. The syntax is similar. However, IDL differs from C in that IDL is a purely declarative language. Notice in <a href="9712p.htm#l5">Listing Five</A> that the IDL starts out with square braces. These square braces indicate that some attributes are to follow. The keyword <i>object</i> indicates that what follows is a COM interface. The <i>uuid</i> keyword names the interface. Finally, the <i>dual</i> keyword says the following interface is a dual interface. This keyword causes some additional information to be inserted into the registry when the type library is registered. </p>

<p>Next comes the interface. The IDL syntax indicates the interface derives from <i>IDispatch</i>. Also notice that each interface method has some attributes (as shown in the square braces) attached. In this case, the attributes are the DISPIDs for each function (that is, the tokens a client will need to use to invoke a method via <i>IDispatch::Invoke</i>). </p>

<p>Compiling this IDL file through the MIDL compiler yields a header file (useful for C++ implementations) and a type library -- a binary representation of the information included in the IDL file. Getting <i>IDispatch</i> to work is simply a matter of completing several more steps.</p>

<p>To get the dual interface working, first write a C++ class that includes <i>IDispatch</i> as one of the interfaces to implement. The constructor of the C++ class can use the API function <i>LoadTypeLib</i> to load the IDL-generated type library into memory. <i>LoadTypeLib</i> returns a COM interface named <i>ITypeLib,</i> which includes a function named <i>GetTypeInfoOfGUID</i>. Given the GUID of the dual interface, <i>GetTypeInfoOfGUID</i> returns an interface named <i>ITypeInfo</i> that represents the information about the dual interface. Then you can implement <i>GetTypeInfo</i>, <i>Invoke</i>, and <i>GetIDsOfNames</i> through the type information from the type library. <a name="rl6"><a href="9712p.htm#l6">Listing Six</A> illustrates a dual interface in raw C++. Notice how the C++ implementation loads the type library straight away and uses <i>ITypeInfo</i> to do the nasty task of implementing <i>Invoke</i> and <i>GetIDsOfNames</i>.</p>

<h3>ATL and<i> IDispatch</i></h3>

<p>ATL's implementation of <i>IDispatch</i> is similar to the approach just outlined. ATL's implementation of <i>IDispatch</i> lives in the class <i>IDispatchImpl</i>. Objects that want to implement a dual interface just include the <i>IDispatchImpl</i> template in the inheritance list as shown in <a name="rl7"><a href="9712p.htm#l7">Listing Seven</A>.</p>

<p>In addition to including the <i>IDispatchImpl</i> template class in the inheritance list, the object includes entries for the dual interface and for <i>IDispatch</i> in the interface map so <i>QueryInterface</i> works properly; see <a name="rl8"><a href="9712p.htm#l8">Listing Eight</A>. As you can see, the <i>IDispatchImpl</i> template class arguments include the dual interface itself, the GUID for the interface, and the GUID representing the type library holding all the information about the interface. In addition to these template arguments, the <i>IDispatchImpl</i> class has some optional parameters not illustrated. The template parameter list also includes room for a major and minor version of the type library. Finally, the last template parameter is a class for managing the type information. ATL provides a default class called <i>CComTypeInfoHolder</i>. </p>

<p>In <a href="9712p.htm#l6">Listing Six</A>, <i>CSomeObject</i> called <i>LoadTypeLib</i> and <i>ITypeLib::GetTypeInfoOfGuid</i> in the constructor and held on to the <i>ITypeInfo</i> pointer for the life of the class. ATL does things a little differently by using the <i>CComTypeInfoHolder</i> to help manage the <i>ITypeInfo</i> pointer. <i>CComTypeInfoHolder</i> maintains an <i>ITypeInfo</i> pointer as a data member and wraps the critical <i>IDispatch</i>-related functions <i>GetIDsOfNames</i> and <i>Invoke</i>. </p>

<p>Clients acquire the dual interface by calling <i>QueryInterface</i> for <i>IID_ISomeDualInterface</i> (the client will also get this interface by calling <i>QueryInterface</i> for <i>IDispatch</i>). If the client calls <i>Function1</i>, <i>Function2</i>, or <i>Function3</i> on the interface, the client accesses those functions directly (as it would for any other COM interface). </p>

<p>When a client calls <i>IDispatch::Invoke</i>, the call lands inside <i>IDispatchImpl</i>'s Invoke function as you'd expect. From there, <i>IDispatchImpl::Invoke</i> delegates to the <i>CComTypeInfoHolder</i> to perform the invocation. Unlike <a href="9712p.htm#l6">Listing Six</A>, the <i>CComTypeInfoHolder</i> doesn't call <i>LoadTypeLib</i> until an actual call to <i>Invoke</i> or <i>GetIDsOfNames </i>is made. <i>CComTypeInfoHolder</i> has a member function named <i>GetTI,</i> which consults the registry for the type information (using the GUID and any major/minor version numbers passed in as a template parameter). Then <i>CComTypeInfoHolder</i> calls <i>ITypeLib::GetTypeInfo</i> to get the information about the interface. At that point, the type information holder just delegates to the type information pointer. <i>IDispatchImpl</i> implements <i>IDispatch::GetIDsOfNames</i> in the same manner.</p>

<h3>Multiple Dual Interfaces</h3>

<p>What happens if you want to include two dual interfaces in a single ATL-based COM class? All dual interfaces begin with the seven functions of <i>IDispatch</i>. The problem occurs whenever the client calls <i>QueryInterface</i> for <i>IID_IDispatch</i>. As a developer, you need to choose which version of <i>IDispatch</i> to pass out. For example, consider the <i>CDualTestOb</i> class in <a name="rl9"><a href="9712p.htm#l9">Listing Nine</A> again.</p>

<p>The interface map is where the <i>QueryInterface</i> for <i>IID_IDispatch</i> is specified. ATL has a specific macro for handling this situation. The macro is named COM_INTERFACE_ENTRY2. To get <i>QueryInterface</i> working correctly, all you need to do is decide which version of <i>IDispatch</i> the client should get when they ask for <i>IDispatch</i> like <a name="rl10"><a href="9712p.htm#l10">Listing Ten</A>. In this case, a client asking for <i>IDispatch</i> gets a pointer to <i>ISomeDualInterface</i> (whose first seven functions include the <i>IDispatch</i> functions). </p>

<h3>Conclusion</h3>

<p>ATL's implementation of <i>IDispatch</i> is the same as most raw C++ implementations. The Zen of ATL matches the Zen of COM in that IDL is the starting point for the entire project. Given some valid IDL, the MIDL compiler can easily generate everything you need to get a solid implementation of <i>IDispatch</i> working. Since the information needed for implementing <i>IDispatch::Invoke</i> is in the type library, it's sensible to use the type library to implement <i>IDispatch::Invoke</i>. The main way ATL differs from raw C++ is that ATL manages the type information in a wrapper class called <i>CComTypeInfoHolder</i>. </p>

<HR>
<H4><a name="l1">Listing One</H4>

<pre>struct ISomeInterface : public IUnknown {   HRESULT SomeFunction();
   HRESULT AnotherFunction();
};
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>void UseSomeInterface(ISomeInterface* pSomeInterface) {   pSomeInterface-&gt;SomeFunction();
   pSomeInterface-&gt;AnotherFunction();
}
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>interface IDispatch : public IUnknown {   HRESULT GetTypeInfoCount(UINT FAR* pctinfo);
   HRESULT GetTypeInfo(UINT itinfo, LCID lcid, ITypeInfo FAR* FAR* pptinfo);
   HRESULT GetIDsOfNames(REFIID riid, char FAR* FAR* rgszNames,
                         UINT cNames, LCID lcid, DISPID FAR* rgdispid);
   HRESULT Invoke(DISPID dispidMember, REFIID riid, LCID lcid,
                  WORD wFlags, DISPPARAMS FAR* pdispparams,
                  VARIANT FAR* pvarResult, EXCEPINFO FAR* pexcepinfo,
                  UINT FAR* puArgErr);
};
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>interface ISomeDualInterface : public IDispatch {   virtual void HRESULT Function1();
   virtual void HRESULT Function2();
   virtual void HRESULT Function3();
};
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<H4><a name="l5">Listing Five</H4>

<pre>[   object,
   uuid(271165EE-2110-11D1-8CAA-FD10872CC837),
   dual
]
interface IDualTestOb : IDispatch
{
   [id(1)] HRESULT Function1();
   [id(2)] HRESULT Function2();
   [id(3)] HRESULT Function3();s
};
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>
<H4><a name="l6">Listing Six</H4>

<pre>class CSomeObject : public ISomeDualInterface {  ITypeInfo *m_pTypeInfo;
public:
  CSomeObject(void) : m_pTypeInfo(0) {  
    ITypeLib *ptl = 0;
    if (SUCCEEDED(LoadTypeLib(g_wszTypeLib, &amp;ptl))) {
      ptl-&gt;GetTypeInfoOfGuid(IID_ISomeDualInterface, &amp;m_pTypeInfo);  
      ptl-&gt;Release();}
  }
  HRESULT QueryInterface(REFIID riid, void **ppv) {
    if (riid == IID_ISomeDualInterface) 
      *ppv = m_pTypeInfo ? (ISomeDualInterface*) this : 0;
    else if (riid == IID_IDispatch) 
      *ppv = m_pTypeInfo ? (DIFoo*) this : 0;
    else if (riid == IID_IUnknown) 
      *ppv = (DIFoo*) this;
    else *ppv = 0;
     :
  }
  HRESULT GetTypeInfoCount(UINT * pticount) 
  {
    *pticount = 1;
    return NOERROR;
  }
  HRESULT GetTypeInfo(UINT i, LCID lcid, ITypeInfo**ppti)
  {
    if (i != 0) return DISP_E_BADINDEX;
    (*ppti = m_pTypeInfo)-&gt;AddRef();
    return NOERROR;
  }
  HRESULT Invoke(DISPID dispid, REFIID riid, LCID lcid, WORD wFlags,  
                 DISPPARAMS * pdispparams, VARIANT * pvarResult, 
                 EXCEPINFO * pei, UINT * puArgErr) {
    return m_pTypeInfo-&gt;Invoke((ISomeDualInterface*)this, dispid, wFlags, 
                                 pdispparams, pvarResult, pei, puArgErr);
  }  
  HRESULT GetIDsOfNames(REFIID riid, OLECHAR* rgszNames[],
                        UINT cNames, LCID lcid, DISPID rgdispid[]) {
   return m_pTypeInfo-&gt;GetIDsOfNames(rgszNames, cNames, rgdispid);
  }
   ...
// Implement the rest of IUnknown and the dual interface functions...
</pre>
<P>
<a href="#rl6">Back to Article</A>
</P>
<H4><a name="l7">Listing Seven</H4>

<pre>class ATL_NO_VTABLE CDualTestOb :   public CComObjectRootEx&lt;CComSingleThreadModel&gt;,
  public CComCoClass&lt;CDualTestOb, &amp;CLSID_DualTestOb&gt;,
  public IDispatchImpl&lt;ISomeDualInterface, &amp;IID_ISomeDualInterface, 
                       &amp;LIBID_DUALTESTLib&gt; {
};
</pre>
<P>
<a href="#rl7">Back to Article</A>
</P>
<H4><a name="l8">Listing Eight</H4>

<pre>BEGIN_COM_MAP(CDualTestOb)   COM_INTERFACE_ENTRY(ISomeDualInterface)
   COM_INTERFACE_ENTRY(IDispatch)
END_COM_MAP()
</pre>
<P>
<a href="#rl8">Back to Article</A>
</P>
<H4><a name="l9">Listing Nine</H4>

<pre>class ATL_NO_VTABLE CDualTestOb :   public CComObjectRootEx&lt;CComSingleThreadModel&gt;,
  public CComCoClass&lt;CDualTestOb, &amp;CLSID_DualTestOb&gt;,
  public IDispatchImpl&lt;ISomeDualInterface, &amp;IID_ISomeDualInterface, 
                       &amp;LIBID_DUALTESTLib&gt; 
  public IDispatchImpl&lt;IAnotherDualInterface, &amp;IID_IAnotherDualInterface, 
                       &amp;LIBID_DUALTESTLib&gt; {
};
</pre>
<P>
<a href="#rl9">Back to Article</A>
</P>
<H4><a name="l10">Listing Ten</H4>

<pre>BEGIN_COM_MAP(CDualTestOb)   COM_INTERFACE_ENTRY(ISomeDualInterface)
   COM_INTERFACE_ENTRY(IAnotherDualInterface)
   COM_INTERFACE_ENTRY2(IDispatch, ISomeDualInterface)
END_COM_MAP()
</pre>
<P>
<a href="#rl10">Back to Article</A>
</P>

<p><b>DDJ</b></p>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
