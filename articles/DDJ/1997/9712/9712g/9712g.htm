<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal December 1997: Improve Your Programming with Asserts</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Improve Your Programming with Asserts</h1>

<p><i>Dr. Dobb's Journal</i> December 1997
</p>
<h2>Ten easy rules for more reliable software</h2>

<h3>By Bruce D. Rosenblum </h3>

<I>Bruce is vice president of software development at Turning Point Software and Inera Inc. Bruce can be contacted at brosenblum@turningpoint.com.</I>

<hr>

<p>Several years ago, we were testing the near-final build of a Macintosh product. The program crashed, and one of our quality-assurance engineers found herself staring at a Macsbug screen. When I sat down to try to locate the problem, I couldn't get stack crawl information.</p>

<p>The tester went to another machine to try to reproduce the crash with the debug build of the application. Meanwhile, I tried to track the problem on her computer. Because I didn't know whether the problem was reproducible, I didn't want to destroy the state of the machine that had crashed. After hours of sleuthing with the Macsbug data and a set of source code, I thought I was getting close to the problem, but I still had no answers.</p>

<p>Four hours later, the engineer came back and said she had triggered an assert message that indicated memory corruption. The assert also showed a stack trace that pointed to the suspect subroutine. I took one look at the source code for the suspect routine and immediately saw the source of the memory corruption. In one minute, the assert allowed me to find a problem that four hours of sleuthing had failed to uncover.</p>

<h3>Many People Don't Understand Asserts</h3>

<p>Effective use of asserts will help you track and fix bugs faster, keep your project on schedule, and ship a bug-free application. Because they slow execution, however, it is important to maintain debug and ship versions of your application during the entire development cycle. Debug builds include asserts and ship versions do not, allowing your application to run at maximum speed. Users of your application never see the debug version that you and your quality-assurance engineers have tested, but they will appreciate the added stability from the correct use of asserts.</p>

<p>Our experience conducting code reviews has shown that developers need guidance in the appropriate use of asserts when they first start to use them. At Turning Point Software, we have developed ten guidelines for the use of asserts. These guidelines explain correct use of asserts. More importantly, they explain <i>incorrect</i> use of asserts. Incorrectly used asserts can, in many cases, be worse than no asserts at all.</p>

<p>There is one important point to stress before reviewing the guidelines: Asserts must never be used as a substitute for correct error handling. The most common mistake that engineers make is to use assert where a legitimate error can occur. Asserts are only used to indicate an impossible condition that should never happen in normal operation of the application. If the potential situation you are checking can happen in the shipping application (such as a memory or file failure), it must be handled with appropriate error handling (returning an error code or throwing an exception, depending on how errors are handled in your specific project). The following guidelines are based on this fundamental concept.</p>

<p><b>Assert explicit programmer errors. </b>Asserts are best used to signal impossible conditions, those that should never occur in the application if there are no mistakes in programming. For example, in a well-behaved application, if a memory block of 1000 bytes is allocated, the code should never read or write from location 1001 of that memory block.</p>

<p>Because such memory overwrites are a frequent cause of nasty bugs, allocate an extra byte at the end of each memory block and set it to a magic value (not 0 or -1; 0x6A is a nice value). Every time the block is referenced, check to see if this value has changed. If it has, the end of the block has been overwritten and an assert can signal this error immediately. If you do not assert, you will not know of a problem that could corrupt memory and be very difficult to track.</p>

<p><b>Assert public API functions. </b>Every parameter of an API that is exposed to external callers should be asserted if possible. For example, if a function takes a pointer that should never be NULL, assert that it isn't. If a function takes a <i>long </i>containing flag bits, assert that only valid bits are set (that is, if only 18 bits are used, assert that unused bits are still 0; if they aren't zero, an incorrect value has been passed). If a parameter should be an <i>enum</i> in a small range, assert that the value falls within the range. For every function, if the API is thoughtfully reviewed, you can find a way to assert virtually any parameter.</p>

<p><b>Assert assumptions. </b>Assert any assumption that you have made in the code. For example, if you write a routine assuming it will only produce positive numbers as return values, assert the return value to make sure it's positive.</p>

<p><b>Assert reasonable limits. </b>Assert that values are within reasonable limits for the application of the code. For example, when locking and unlocking handles, check the lock count. Assert that the lock count has not exceeded 32, which might be considered a reasonable number of locks. If this limit is exceeded (even though it is within the limit of the operating system), you may have a logic problem in your application code. A similar check can ensure that the lock count never falls below zero.</p>

<p><b>Assert unimplemented and untested code. </b>If you provide a function entry point, but have not had a chance to fill in the code yet, you should assert it. If someone else calls this function before the code is completed, she will know why it isn't doing the correct thing.</p>

<p>If you write code you haven't yet had a chance to test, you should assert to warn a caller that the code may not work. If you test only some cases of the code, assert those cases you haven't tested. For example, I once used a library from another developer to manage some special arrays. It was written so that it could handle a physical array size up to 64 KB. The author, however, never expected the array size to exceed ten KB and never tested past that point. As soon as the array grew past 32 KB, lots of problems surfaced. A simple assert for larger arrays would have forewarned me that I was sailing into uncharted waters.</p>

<p><b>Assert classes. </b>MFC provides a method in classes derived from <i>CObject</i> called <i>AssertValid</i>. This method can be used to validate the state of a class. If you create a new class, make sure that you add an <i>AssertValid</i> method that validates as many instance variables of the class as possible. You should call this method from all appropriate methods of the class. If the class has been derived from another class, the first thing your <i>AssertValid</i> method should do is call <i>AssertValid</i> in the base class. For example, when using MFC, <i>MyApp::AssertValid()</i> should first call <i>CWinApp::AssertValid()</i>. </p>

<p><b>Do not assert memory errors. </b>Memory errors can happen at run time and should always be handled as failure conditions. They should never be handled with asserts. <a name="re1"><a href="9712ge1.htm">Example 1</A>(a) should never appear in a source file.</p>

<p>Similarly, the failure of <i>new </i>to construct a C++ object should never be asserted. The <i>new</i> operator allocates memory and therefore can fail at run time no matter how small the size of the object. <a href="9712ge1.htm">Example 1</A>(b) should never appear in a source file.</p>

<p>You also should not assert <i>new</i> because, in most new compilers, <i>new</i> will throw an exception if the memory allocation for the object fails. In this case, the assert will never be triggered even if there is a memory failure. If <i>m_pBtn</i> is NULL, the exception will pass control to  a <i>catch</i> statement, and in this example, the assert is not inside a catch.</p>

<p><b>Do not assert resource failures. </b>The failure of resources to load is a run-time failure that can happen in the ship version of your application due to lack of memory or a disk failure. It must be handled as a legitimate run-time error. <a name="re2"><a href="9712ge2.htm">Example 2</A> is incorrect because the error will not be handled when it occurs in the ship version of the product (and it can happen).</p>

<p>Do not assert FALSE. You should not assert unconditionally. Include the test for which you are asserting in the assert itself. Instead of <a name="re3"><a href="9712ge3.htm">Example 3</A>(a), your code should read like <a href="9712ge3.htm">Example 3</A>(b).</p>

<p>If you need to assert FALSE, you probably are flagging a condition that should be handled with a specific check for a condition. There are only a few exceptions in which it is appropriate to assert FALSE. If you have a <i>switch</i> statement that has no default case, it should be unconditionally asserted; see <a href="9712ge3.htm">Example 3</A>(c). </p>

<p><b>Do not use VERIFY. </b>Many environments include a macro VERIFY such as the one in MFC. This macro allows shipping code to be included inside the check for an assertion condition. This macro should not be used. All validation code that goes into debug-only builds should be in separate statements so that it is clearly separate from the ship version of the code. Using VERIFY is more likely to be error prone when maintaining code than using an assert. Instead of <a name="re4"><a href="9712ge4.htm">Example 4</A>(a), your code should read like <a href="9712ge4.htm">Example 4</A>(b).</p>

<h3>A Better Assert</h3>

<p>A basic assert displays a message such as "Error!" that tells you something has gone wrong. While useful, this simple assert can easily be made much more informative. The additional information can save you time tracking the source of the assert.</p>

<p>I once spent several hours tracking a problem because the debug version of the application for which I was writing an extension simply put up a message "Assert," telling me I had done something wrong. I finally tracked the problem to a handle that hadn't been unlocked before calling <i>free</i>. A verbose assert would have told me the source of the problem in ten seconds.</p>

<p>To avoid such problems, we use an enhanced assert that lets you track bugs faster. (The complete source code for this assert is available electronically; see "Availability," page 3.) What is "enhanced" about this assert?</p>

<ul>
<li>The assert is verbose. As <a name="rf1"><a href="9712gf1.htm">Figure 1</A> shows, a clear <i>Reason</i> for the assert is displayed instead of a generic message. This allows you to understand the problem without referring to the source code.  <li>The source <i>FileName</i> and <i>Line #</i> are shown to easily determine where the assert was triggered.
  <li>Additional <i>Memory</i> information can be displayed in the assert. In this case, the value of the offending handle is shown. Such information can be helpful in evaluating the cause of the problem.
  <li>The <i>Stack Crawl</i> is shown, which helps find the true cause of the problem more rapidly. The code needed to display the stack crawl often takes more advanced system-level expertise to write, but the time invested to develop this code more than pays for itself in reduced debugging time.
  <li>The <i>Display Asserts</i> check box allows asserts to be turned off to reach a specific portion of the application. They can be reenabled from a menu command.
  <li><i>Display As Hex</i> lets the display of <i>Memory</i> data be switched between decimal and hex mode for easier debugging.
  <li>The <i>Debugger</i> button transfers application control to the appropriate low-level debugger.
  <li>The <i>Exit to Shell</i> button terminates the application immediately. 
  <li>The <i>OK</i> button lets users proceed with application execution.
</ul>

<p></p>

<p>The Better Assert program was written for the Macintosh. We've tested the code with CodeWarrior 9; it may need small modifications for Symantec or MPW compilers. It has been designed to avoid memory allocations in calls to <i>_tdb_DoAssertDlg</i>, the core assert display function. This technique helps to avoid disturbing the problem you are observing.</p>

<p>You can implement the same functionality on Windows. The <i>include</i> files are cross-platform and have conditional compile information for Windows. Most of the functionality, except for the stack crawl, is not difficult to write for other platforms. Code for the stack crawl is provided only for 680x0 Macintoshes.</p>

<p>This code includes a small CodeWarrior project that illustrates the simplest use of this library. The following are quickstart instructions to use this code in your own projects. More extensive documentation can be found in the file TPSDEBUG.H.</p>

<ul>
<li>Define MAC and TPSDEBUG for your project. Under Project Settings, 68K Linker options, turn on Generate A6 Stack Frames.  <li>Add the files DBGGLBL.C, MACDEV.C, MACDLG.C, MACSTACK.C, and TPSDEBUG.C to your project.
  <li>Call <i>tdb_StartupDebugLib</i> and <i>tdb_ShutdownDebugLib</i> during your application startup and shutdown, respectively.
  <li>Add the following three lines to all of your source modules after all system include files and before any project-specific include files:

<BLOCKQUOTE>
<PRE>  #include   "tpsdefs.h"
  #include   "tpsdebug.h"
  ASSERTNAME
</PRE>
</BLOCKQUOTE>
<li>Call the assert macros liberally in your code. The basic macro is <i>TpsAssert (NULL != pointer, "Invalid Null Pointer");</i>. There are additional macros defined in TPSDEBUG.H that can be used to show additional information in the assert dialog. For example, <i>TpsAssertB</i> dumps an array of bytes at a specified location. This feature allows you to examine the data that triggered the assert. There are also macros for dumping arrays of words, longs, and strings.  <li>Other useful macros include <i>UnimplementedCode</i> and <i>UntestedCode</i>. These can be used to warn others of code that is not ready for prime time.
  <li>Whenever you make major builds of your application (such as quality assurance, major milestones, gold release), make two builds: one with TPSDEBUG defined (your debug build) and one with TPSDEBUG removed (your ship build). Quality-assurance staff can test both the debug and ship builds; your customers will receive the ship build.
</ul>


<p><b>DDJ</b></p>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
