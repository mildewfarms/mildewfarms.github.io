<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal December 1997: Writing Portable Win32 SCSI Applications</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Writing Portable Win32 SCSI Applications</h1>

<p><i>Dr. Dobb's Journal</i> December 1997
</p>
<h2>The WinASPI 32-bit DLL emulator module makes it possible</h2>

<h3>By Thomas Tewell</h3>

<I>Thomas is a software engineer for Sequoia Advanced Technologies, a supplier of SCSI and IEEE-1394 system software. He can be reached at thomas.tewell@seqadvtech.com or http://www.seqadvtech.com/.</I>

<hr>

<p>During the course of developing our "WinSCSI-32 API," a developer's tool that complements and enhances the SCSI programming interfaces of Windows 95 and Windows NT, we discovered that the native SCSI APIs for the two platforms are very different from one another, making portable Win32 SCSI programming rather difficult. Windows 95 ships with a WinASPI 32-bit DLL while Windows NT does not. While some SCSI host adapter vendors do provide a WinASPI DLL for Windows NT, many more do not. Instead, Windows NT SCSI application developers must rely on the native SCSI Pass Through Interface (SPTI) mechanism. In response, we developed ASPIEMU, the WinASPI 32-bit DLL emulator module presented here.</p>

<h3>Win32 SCSI Programming</h3>

<p>Windows 95 provides you with a variety of options for SCSI programming. For MS-DOS applications, you can use either ASPI for DOS or the ANSI standard Common Access Method (CAM). For 16-bit Windows applications, you use the 16-bit WINASPI.DLL. For 32-bit Windows applications (Win32), you use the 32-bit WNASPI32.DLL. Since this interface is provided under Windows 95 as the 32-bit mechanism for accessing SCSI devices from the application level, you would naturally think that this mechanism would also be available for Windows NT. Indeed, if you read the Win32 ASPI specification provided with the Windows 95 DDK (not SDK!), you'll find the following paragraph: </p>

<blockquote><p>
With the arrival of Windows NT and Windows 95, ASPI must be extended to allow applications to take full advantage of these new, 32-bit operating systems. This specification describes the Advanced SCSI Programming Interface (ASPI) for the Win32 environment.</p>
</blockquote>

<p>For Windows NT, however, the WNASPI32.DLL is conspicuously absent. In its place is a set of <i>DeviceIoControl()</i> function calls described in SPTI.C, an obscure sample application provided in the Windows NT DDK. The documentation for the functions invoked by the SCSI Pass Through Interface (SPTI) is a file called README.TXT that resides in the same directory. SPTI is difficult to follow and even led us off course in a couple of areas.</p>

<p>The differences between the calls to the ASPI DLL and the NT SPTI are substantial enough to warrant the development of an ASPI emulation module so that WinSCSI<sub></sub>32 can be made portable. Since WinSCSI<sub></sub>32 is a tool used by programmers to speed SCSI software development, we felt that two versions of the WinSCSI-32 DLL -- one for Windows 95 and another for Windows NT -- was unacceptable. Thus ASPIEMU was born.</p>

<h3>The WinASPI-32 DLL Emulation Module</h3>

<p>WinSCSI-32 issues SCSI requests through the WinASPI DLL mechanism. Since we did not want to rewrite every single function (there are over 150), we decided to emulate the WinASPI-32 DLL under NT. </p>

<p>This involved creating <i>SendASPI32Command()</i>, a master SCSI-command execution function. Notice that this is the same name used by the "real" WinASPI DLL. <i>SendASPI32Command()</i> dynamically determines whether the machine is running Windows 95 or NT, and automatically routes the ASPI request to WNASPI32.DLL or the SCSI Pass Through Interface (SPTI), respectively. </p>

<p>The first time the ASPIEMU module is called, the code in <a name="rl1"><a href="9712f.htm#l1">Listing One</A> determines whether Windows 95 or NT is running. If it detects the Windows 95 environment, the program loads WNASPI32.DLL via <i>LoadLibrary("WNASPI32.DLL")</i>. The code <i>fpAspiAddress= (WinAspiCommand)GetProcAddress(hWinAspi, "SendASPI32Command");</i> then gets the address of the ASPI <i>SendASPI32Command()</i>. We then set a flag to True indicating that all subsequent ASPI requests will be routed to the WNASPI32.DLL.</p>

<p>Under Windows NT, we emulate the ASPI DLL function <i>SendASPI32Command</i> by converting the ASPI request to SPTI and sending it off to SPTI. This job of converting the ASPI request to a SPTI request belongs to the function <i>Aspi2Spti()</i>. The SPTI command is executed via the function called, logically, <i>ExecuteScsiRequest()</i>. Once SPTI executes the SCSI command, the status must be reflected back to the original ASPI request packet. This is the job of <i>Spti2Aspi()</i>. The core of the ASPIEMU module, however, are <i>FindDevices()</i> and <i>ReconcileDevices()</i>. </p>

<h3>ASPIEMU Initialization</h3>

<p>If the ASPIEMU module is running under Windows NT, the first time the ASPIEMU <i>SendASPI32Command()</i> function is called, it in turn calls the initialization functions <i>FindDevices()</i> and <i>ReconcileDevices()</i>.</p>

<p>These functions build the local memory structures used by ASPIEMU to execute emulated requests. The first step during initialization is to determine how many SCSI devices NT has enumerated. Typically, you would issue SCSI-inquiry commands in path, target ID, and LUN succession requesting the SCSI devices to report their identities. SPTI, however, provides a convenient IOCTL function (IOCTL_SCSI_GET_INQUIRY_DATA) that instructs the SCSI-port driver to fill in a user-supplied buffer containing a list of all the SCSI devices that that specific port is supporting. Remember that there is often more than one SCSI adapter installed in an NT system. In fact, since NT treats IDE and ATAPI devices as SCSI devices, there will be at least two SCSI "ports" in a system with only a single genuine SCSI host adapter.</p>

<p>The SPTI workhorse is <i>DeviceIoControl()</i>. Since <i>DeviceIoControl()</i> requires a file handle to direct the request to the appropriate device driver, what file handle do you provide? To get the handle to the SCSI-port driver, you open a file called "\\.\SCSIx:", where "x" is the SCSI-port number, which is a zero-based index specifying a SCSI-miniport driver that the SCSI-port driver routes the request to. A SCSI-miniport driver is the lowest level of the SCSI-driver stack under Windows NT. It directly programs the SCSI host adapter to perform the request. Consequently, opening the SCSI port to send a command looks like <a name="rl2"><a href="9712f.htm#l2">Listing Two</A>, which is in a loop where <i>AdapterCount</i> is incremented on each iteration.</p>

<p><a name="rl3"><a href="9712f.htm#l3">Listing Three</A> shows the code used to issue the inquiry data IOCTL request, while the data returned by IOCTL_SCSI_GET_INQUIRY_ DATA is formatted by the code in <a name="rl4"><a href="9712f.htm#l4">Listing Four</A>.</p>

<p>Since all of the inquiry data for all of the devices are lumped together in the <i>InquiryBuffer</i>, we decided to write <i>FetchInquiryData(),</i> which returns a pointer to the specific <i>Inquiry</i> data structure indicated by a passed device index. This zero-based index allows us to form a device loop that parses the SCSI_INQUIRY_DATA device-by-device until there are no more SCSI_INQUIRY_DATA structures in the buffer. ASPIEMU then uses these individualized SCSI_INQUIRY_DATA structures to build its internal ASPI_ENTRY structures. SCSI target IDs and LUNs that are not recognized by the SCSI-port driver as connected to (or powered on) the SCSI bus do not have a SCSI_INQUIRY_DATA structure allocated to them.</p>

<p>Once a SCSI device is identified, we build a structure called an ASPI_ENTRY_STRUCTURE -- the master structure ASPIEMU uses to manage a request to and from a SCSI device. Each new ASPI_ENTRY structure is filled in by the <i>CreateNewAspiEntry()</i> function; see <a name="rl5"><a href="9712f.htm#l5">Listing Five</A>. The SCSI-port and SCSI-device looping in <a href="9712f.htm#l5">Listing Five</A> is performed (with an ASPI_ENTRY structure being created for each SCSI device) until there are no more SCSI ports. The <i>hFileHandle</i> entry in the ASPI_ENTRY structure represents the file handle for the SCSI port that manages the SCSI device. At this point, it would seem logical that we could start issuing SPTI SCSI requests to the SCSI-port driver using <i>hFileHandle</i> as the <i>DeviceIoControl()</i> file handle. </p>

<p>But, of course, it isn't quite that simple. If a class driver (such as a disk or CD-ROM driver) is controlling the SCSI device, then you will find that the <i>fDeviceClaimed</i> Boolean in the ASPI_ENTRY structure will be True. This value comes directly out of the SCSI port's SCSI_INQUIRY_DATA structure and is reflected into our ASPI_ENTRY structure. If the SCSI device is claimed by a class driver, the SCSI-port driver will refuse all SPTI SCSI requests by terminating the request with an error.</p>

<p>At this point, we were about ready to throw our hands up and write a low-level device driver for WinSCSI-32 to communicate with when we noticed an obscure Win32 function (NT specific) called <i>QueryDosDevice()</i>. This function returns a list of symbolic name links created by device drivers from the Windows NT object namespace. (For example, recall that when we opened the SCSI port driver using the <i>CreateFile()</i> function, we used the symbolic name link "SCSIx".)</p>

<p>Typical symbolic names are "C:", "CdWriterx", "Scannerx", "Tapex", and so on, where "x" is the zero-based unit number designating a particular unit. How do we correlate these symbolic names with a file handle that we will use to execute SCSI requests? We wrote <i>ReconcileDevices()</i> and <i>FindFileHandle()</i> to do just that.</p>

<p>To get the symbolic name list, we use <i>size=QueryDosDevice(NULL,buffer,1024);</i>, where 1024 is the number of bytes of symbolic name information to return. A buffer size of 1024 was more than enough to hold the symbolic name list on all of the NT systems we tested.</p>

<p>For each SCSI device ASPIEMU supports, we march through the list of symbolic names, open the device drivers specified by each symbolic name, issue the IOCTL_SCSI_GET_ADDRESS request to the driver specified by the symbolic name, and compare the port number, target ID, and LUN with the returned data. If the values match, we have the handle to the class driver that is claiming the device. We then store that file handle in the ASPI_ENTRY structure. All "unclaimed" SCSI devices are obviously managed by the already existing SCSI-port file handle.</p>

<p><a name="rl6"><a href="9712f.htm#l6">Listing Six</A> illustrates the process of opening the class driver. The reason for opening the device Read/Write first and then Read Only in <a href="9712f.htm#l6">Listing Six</A> is pretty clear: Some devices, most notably CD-ROM, cannot be written to, so the open Read/Write function fails. This is also why CD-writer devices and CD-ROM devices have different symbolic names.</p>

<p>Once we have opened a device, we ask it to return the address of the SCSI device it is managing via the specified symbolic-name file handle; see <a name="rl7"><a href="9712f.htm#l7">Listing Seven</A>. For most of the symbolic names in the list, there are no SCSI devices associated with the driver. Another interesting note about <i>ReconcileDevices()</i> is the use of <i>SetErrorMode()</i>. One of our customers noticed that sometimes a blue system box appeared on the screen under Windows NT when issuing SCSI commands to the WinSCSI-32 API DLL. This happened because there were no media in the floppy drives "A:" or "B:" when <i>CreateFile()</i> was called to open the device driver. By setting the error mode to SEM_NOOPENFILEERRORBOX, the blue box disappeared. We set the error mode back to its original value using <i>SetErrorMode()</i>.</p>

<h3>Executing SCSI Requests</h3>

<p>Now that we have the file handles to execute SCSI requests, we are ready to start issuing SCSI requests. Then we will convert the ASPI packet to an SPTI packet. The conversion is straightforward and is handled by <i>Aspi2Spti()</i>; see <a name="rl8"><a href="9712f.htm#l8">Listing Eight</A>. As <a name="rl9"><a href="9712f.htm#l9">Listing Nine</A> shows, the execution of the SCSI request is also straightforward.</p>

<p>Once the command has been executed, determining the status of the ASPI packet is handled by <i>Spti2Aspi()</i>. We convert the return codes from SPTI to an appropriate ASPI code and copy the Sense data to the ASPI packet, if necessary.</p>

<p>Upon studying the ASPIEMU source code (available electronically; see "Availability," page 3), you should find that once you get by the file-handle logic, the execution is quite simple. To use this code in your applications, simply link the ASPIEMU module in with your application and call <i>SendAspi32Command()</i>. ASPIEMU will automatically dispatch the request to the appropriate interface, and your SCSI application becomes portable across Windows 95 and Windows NT. This module is used in exactly this form in the commercially shipping WinSCSI-32 API library.  </p>

<p>Calling <i>SendAspi32Command()</i> is identical to calling the WinASPI32 DLL: Build the ASPI request packet and call <i>SendAspi32Command()</i>. (See <a name="rl10"><a href="9712f.htm#l10">Listing Ten</A>.)</p>

<p>For improvements, you might try adding multithreaded support, common registry functions, and the like. In any case, we hope you find ASPIEMU as useful as we have.</p>
<HR>
<H4><a name="l1">Listing One</H4>

<pre>if(GetVersion() &lt; 0x8000000){
    Windows NT
}
else
{
    Windows 95
}
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>//-------------------------------------------------------------------// Open SCSI Port Driver
//-------------------------------------------------------------------
wsprintf(adapter_name,"\\\\.\\SCSI%d:",AdapterCount);
fileHandle = CreateFile(adapter_name, GENERIC_WRITE | GENERIC_READ,
          FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>status = DeviceIoControl(fileHandle, IOCTL_SCSI_GET_INQUIRY_DATA, NULL, 0,                                    InquiryBuffer, 2048, &amp;returned, FALSE);
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>UCHAR NumberOfBuses;<p></p>
// Each structure allocated contiguously for each bus 
// indicated in NumberOfBuses
SCSI_BUS_DATA BusData[x]; 
<p></p>
// Each structure allocated contiguously for each bus indicated in
// BusData[x].NumberOfLogicalUnits
SCSI_INQUIRY_DATA DeviceData[x];  // one structure for each device indicated 
                                  // in SCSI_BUS_DATA
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<H4><a name="l5">Listing Five</H4>

<pre>typedef struct _ASPI_ENTRY {    SCSI_PASS_THROUGH_DIRECT Srb;    
    ULONG Filler;
    BYTE ucSenseBuf[32];
    HANDLE hFileHandle;
    BYTE byDeviceType;
    BYTE byPath;
    BYTE byTarget;
    BYTE byLun;
    BOOL fDeviceClaimed;
    struct _ASPI_ENTRY *AEForwardPtr;
    struct _ASPI_ENTRY *AEBackwardPtr;
} ASPI_ENTRY, *PASPI_ENTRY;
<p></p>
<p></p>
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>
<H4><a name="l6">Listing Six</H4>

<pre>strcpy(devname,"\\\\.\\");strcat(devname,bufptr);
bufptr += strlen(bufptr);
++bufptr;
<p></p>
fileHandle = CreateFile(devname, GENERIC_WRITE | GENERIC_READ,
           FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);
//---------------------------------------
// if device won't open, try read only...
//---------------------------------------
if(fileHandle == INVALID_HANDLE_VALUE)
{
    fileHandle = CreateFile(devname, GENERIC_READ, FILE_SHARE_READ, NULL,
                                                     OPEN_EXISTING, 0, NULL);
}
</pre>
<P>
<a href="#rl6">Back to Article</A>
</P>
<H4><a name="l7">Listing Seven</H4>

<pre>status = DeviceIoControl(fileHandle, IOCTL_SCSI_GET_ADDRESS, NULL, 0, &amp;sa,                                 sizeof(SCSI_ADDRESS), &amp;returned, FALSE);
</pre>
<P>
<a href="#rl7">Back to Article</A>
</P>
<H4><a name="l8">Listing Eight</H4>

<pre>typedef struct _SCSI_PASS_THROUGH_DIRECT {    USHORT Length;
    UCHAR ScsiStatus;
    UCHAR PathId;
    UCHAR TargetId;
    UCHAR Lun;
    UCHAR CdbLength;
    UCHAR SenseInfoLength;
    UCHAR DataIn;
    ULONG DataTransferLength;
    ULONG TimeOutValue;
    PVOID DataBuffer;
    ULONG SenseInfoOffset;
    UCHAR Cdb[16];
}SCSI_PASS_THROUGH_DIRECT, *PSCSI_PASS_THROUGH_DIRECT;
</pre>
<P>
<a href="#rl8">Back to Article</A>
</P>
<H4><a name="l9">Listing Nine</H4>

<pre>return(DeviceIoControl(pae-&gt;hFileHandle, IOCTL_SCSI_PASS_THROUGH_DIRECT,                &amp;pae-&gt;Srb, sizeof(ASPI_ENTRY), &amp;pae-&gt;Srb,
                sizeof(ASPI_ENTRY), &amp;returned, FALSE) ? 0 : GetLastError());
</pre>
<P>
<a href="#rl9">Back to Article</A>
</P>
<H4><a name="l10">Listing Ten</H4>

<pre>if((ASPICompletionEvent = CreateEvent(NULL,FALSE,FALSE,NULL)) == NULL){
    return(ERROR_RESOURCE_FAILURE);
}
de-&gt;AspiSrb.SRB_Flags      = SRB_DIR_IN;
de-&gt;AspiSrb.SRB_BufLen     = INQUIRY_DATA_SIZE;
de-&gt;AspiSrb.SRB_BufPointer = (BYTE *)&amp;de-&gt;InquiryData;
de-&gt;AspiSrb.SRB_CDBLen     = 6;
de-&gt;AspiSrb.CDBByte[0]     = 0x12;
de-&gt;AspiSrb.CDBByte[1]     = (de-&gt;AspiSrb.SRB_Lun &lt;&lt; 5);
de-&gt;AspiSrb.CDBByte[2]     = 0;
de-&gt;AspiSrb.CDBByte[3]     = 0;
de-&gt;AspiSrb.CDBByte[4]     = INQUIRY_DATA_SIZE;
de-&gt;AspiSrb.CDBByte[5]     = 0;
de-&gt;AspiSrb.SRB_Status     = SS_PENDING;
de-&gt;AspiSrb.SRB_Flags     |= SRB_EVENT_NOTIFY;
de-&gt;AspiSrb.SRB_PostProc   = ASPICompletionEvent;
de-&gt;AspiSrb.SRB_Time_Out   = de-&gt;TimeOut;
<p></p>
SendASPI32Command(&amp;de-&gt;AspiSrb);
<p></p>
if(de-&gt;AspiSrb.SRB_Status == SS_PENDING)
{
    WaitForSingleObject(ASPICompletionEvent, INFINITE);
}
    CloseHandle(ASPICompletionEvent);
</pre>
<P>
<a href="#rl10">Back to Article</A>
</P>

<p><b>DDJ</b></p>
<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
