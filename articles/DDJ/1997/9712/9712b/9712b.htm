<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal December 1997: Implementing Abstract Factory as an STL Container</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Implementing Abstract Factory as an STL Container</h1>

<p><i>Dr. Dobb's Journal</i> December 1997
</p>
<h2>A practical, reusable structure</h2>

<h3>By Jason Shankel</h3>

<I>Jason is a programmer at Maxis, where he develops multiplayer games. He can be contacted at jshankel@maxis.com.</I>

<hr>
Sidebar:<a name="rs1"> <a href="9712bs1.htm"><I>The STL</i> Set <i>Class</I></A>
<HR>
<p>The Abstract Factory design pattern described in <i>Design Patterns: Elements of Reusable Object-Oriented Software</i>, by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides (Addison-Wesley, 1995) provides an abstract interface for object creation. This allows applications to select object implementation at run time. </p>

<p>C++ templates provide a means of implementing this design pattern in a generic way, and the Standard Template Library (STL) provides an interface standard for accessing the objects created by factories. In this article, I'll examine how you can implement the Abstract Factory design pattern using C++ and STL. The Abstract Factory implementation I present provides a practical, reusable structure that preserves type safety and makes minimal demands on its object families. The STL interface ensures that the Abstract Factory will be compatible with the emerging C++ standard. </p>

<h3>Overview of Abstract Factory </h3>

<p>Consider the abstract class <i>IFoo,</i> which has the concrete implementations <i>CFoo1</i> and <i>CFoo2</i>. Suppose you want to determine at run time which implementation of <i>IFoo</i> to instantiate. You can accomplish this by defining a factory class hierarchy for creating <i>IFoo</i> objects. This hierarchy consists of <i>CFoo1Factory</i> and <i>CFoo2Factory</i>, which both inherit <i>IFooFactory</i>. In turn, <i>IFooFactory</i> has a <i>MakeNewObject</i> method that returns a new <i>IFoo</i> object. <i>CFoo1Factory</i> and <i>CFoo2Factory</i> override this method to return new <i>CFoo1</i> and <i>CFoo2</i> objects, respectively. </p>

<p>Deciding which kind of <i>IFoo</i> to create at run time is a matter of selecting which kind of factory to instantiate. <i>MakeFooFactory</i> decides what kind of <i>IFooFactory</i> to make (see <a name="rl1"><a href="9712b.htm#l1">Listing One</A>) subsystems needing a new <i>IFoo</i> don't need to know which implementation was selected. </p>

<h3>Implementation in C++ </h3>

<p>One application of Abstract Factories is selecting platform-specific implementations of classes (such as windows and network connections) at run time. </p>

<p>A typical implementation in C++ of an Abstract Factory for creating window objects for Macintosh and Windows might look like <a name="rl2"><a href="9712b.htm#l2">Listing Two</A>. An application using this structure detects which platform it's running on and creates the appropriate window factory. One problem is immediately evident, however. As the number of different platforms increases, so does the number of concrete factories.  </p>

<p>In <i>Design Patterns</i>, Gamma and others suggest using a prototype method to address this issue. A single concrete factory is defined, and it is initialized with an instance of the object it creates. This object must have a <i>MakeCopy</i> routine that the factory uses to make new instances; see <a name="rl3"><a href="9712b.htm#l3">Listing Three</A>. While this solves the problem of concrete factory proliferation, it also places limitations on the kinds of objects factories can create. For instance, the object must have a <i>MakeCopy</i> method, which may not always be possible or desirable. Also, this approach requires that the concrete factory own an actual instance of the object type it creates. If the created type has significant instantiation consequences (for example, a network class that initializes network connections or a window class that creates a visible window), it might not be desirable to have unused instances. </p>

<h3>Templates to the Rescue </h3>

<p>C++ templates let you apply generic programming techniques to the kinds of problems just described. They give you a set of classes with behaviors that vary only by the type of object they create. </p>

<p>An Abstract Factory can be implemented with templates such as those in <a name="rl4"><a href="9712b.htm#l4">Listing Four</A>. New factories can now be defined more easily, as in <a name="rl5"><a href="9712b.htm#l5">Listings Five</A> and <a name="rl6"><a href="9712b.htm#l6">Six</A>. For any class hierarchy you create, you can now have a factory with a single <i>typedef </i>(as long as the concrete objects have default constructors). </p>

<h3>The STL Interface </h3>

<p>Automated object creation is great, but it's only half the story. It would be useful to add object storage to the <i>IAbstractFactory&lt;I&gt;</i> class to allow users access to all instances created by a given factory. As <a name="rl7"><a href="9712b.htm#l7">Listing Seven</A> shows, the STL makes this easy with the <i>set</i> container (see the accompanying text box entitled "The STL <i>Set</i> Class"). The Abstract Factory now keeps track of each object created, and the STL provides an interface standard for accessing these objects. </p>

<p>The factory object can be designed to support the STL's nonmutating sequence operations. For this, the factory needs iterators, size, value, and reference types, and the <i>begin</i>/<i>end</i> and <i>rbegin</i>/<i>rend</i> sequences. </p>

<p>These requirements can be met by adding the functions and <i>typedef</i>s in <a name="rl8"><a href="9712b.htm#l8">Listing Eight</A> to <i>IAbstractFactory&lt;I&gt;</i>. Objects created by a factory can now be easily traversed. For instance, say you wanted to have a loop that refreshed every window created by a window factory; see <a name="rl9"><a href="9712b.htm#l9">Listing Nine</A>. Similarly, any of the STL algorithms that can operate on the <i>set</i> container, such as <i>for_each</i> and <i>find_if</i>, can be used to traverse all objects created by a factory, reducing the number of such operations you would normally have to implement. </p>

<p>Containing objects in this way also makes it easier to deal with issues such as object persistence and garbage collection. </p>

<p>Absent from the STL interface are any functions that allow users to insert or remove objects from the factory directly. The factory provides read-only access to its object list. This is appropriate because the factory owns a set of pointers to created objects. (The objects themselves are not read only -- just the pointers.) </p>

<h3>Support for Multiple-Object Families </h3>

<p>Another problem with Abstract Factory is that it makes it difficult to add new families of objects to the factory, since each new object type must be given a method in the Abstract Factory that must be overridden in every concrete factory. </p>

<p>For example, if you wanted to add scrollbars and menus to the window factories described earlier, you would have to add <i>MakeScrollBar</i> and <i>MakeMenu</i> methods to the abstract class structure.</p>

<p>To address this problem, Gamma suggests a <i>MakeObject</i> method that returns objects of different types depending on a passed parameter. This approach, however, presents a conflict between flexibility and type safety. Either every object type returned by <i>MakeObject</i> must inherit from a common object, which is not always desirable, or <i>MakeObject</i> must return a typeless pointer (<i>void *</i>), which the client function must cast down to the appropriate type, sacrificing type safety. </p>

<p>You can get around this trade-off by defining a multiobject type factory as a <i>struct</i> with an <i>IAbstractFactory&lt;I&gt;</i> for each object type; see <a name="rl10"><a href="9712b.htm#l10">Listing Ten</A>. <i>GUIFactory</i> defines a factory for producing GUI elements. In<a name="rl11"> <a href="9712b.htm#l11">Listing Eleven</A>, which shows how <i>GUIFactory</i> is used, <i>SetupGUIFactory</i> figures out which platform the application is running on and initializes the members of <i>GUIFactory</i> with the appropriate concrete factory types. Adding new object families only requires modifying a single data structure, not every structure in a hierarchy. Of course, <i>SetupGUIFactory</i> could be a member of <i>GUIFactory</i>, but this tightly couples factory initialization to factory definition, which might not be appropriate. </p>

<h3>Notes on Object Families </h3>

<p>In practice, it is often desirable for members of object families created by factories to have private constructors and destructors and to declare their factory types as friends. This helps prevent unauthorized instantiation of objects. </p>

<p>In <i>Design Patterns</i>, Gamma and others recommend that Abstract Factories be implemented as Singletons (single-instance classes with a convenient public interface). I've found in practice that making the factories static members of the object type they create is useful. Not only does this provide a consistent standard for access to the factories, but each created object has convenient access to the factory that created it. </p>

<h3>Conclusion </h3>

<p>A functional implementation of the Abstract Factory template class and sample application that demonstrates the use of the Abstract Factory template with a class hierarchy for multiplayer games is available electronically (see "Availability," page 3). The sample application defines three player types (<i>CLocalPlayer</i>, <i>CRemotePlayer</i>, and <i>CComputerPlayer</i>) that inherit from <i>IPlayer,</i> and factory objects for the creation of each player type. </p>

<p>The main routine creates four players of each type and demonstrates iteration through each factory using the STL interface. The application compiles under both Borland C++ and Visual C++ with the RogueWave and HP implementations of the STL.</p>
<HR>
<H4><a name="l1">Listing One</H4>

<pre>IFooFactory *g_theFooMaker; void main() 
{ 
g_theFooMaker = MakeFooFactory(); 
IFoo *aNewFoo =  
 g_theFooMaker-&gt;MakeNewObject(); 
}
<p></p>
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>class IWindow {...}; 
class CMacWindow : public IWindow 
{...}; 
class CWindowsWindow :  
 public IWindow 
{...}; 
class IWindowFactory 
{ 
 ... 
 virtual  IWindow *MakeWindow() = 0; 
}; 
class CMacWindowFactory :  
 public IWindowFactory 
{ 
 ... 
 virtual  IWindow *MakeWindow(){ 
  return new CMacWindow; 
 } 
}; 
class CWindowsWindowFactory :  
public IWindowFactory 
{ 
 ... 
 virtual IWindow *MakeWindow(){ 
  return new CWindowsWindow; 
 }   
}; 
<p></p>
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>class CWindowFactory :   public IWindowFactory 
{ 
 ... 
 public: 
 CWindowFactory(IWindow *aWindow){ 
  m_prototype = aWindow; 
 }; 
 virtual IWindow *MakeWindow(){ 
  return m_prototype-&gt;MakeCopy(); 
 }; 
 private: 
 IWindow *m_prototype; 
}; 
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>template&lt;class I&gt; class IAbstractFactory 
{ 
 ... 
virtual I *MakeNewObject()=0; 
virtual void ReleaseObject(I *anObject) = 0;
}; 
//C inherits  from I 
template&lt;class C,class  I&gt; 
class CConcreteFactory :   
public IAbstractFactory&lt;I&gt; 
{ 
 ... 
virtual I *MakeNewObject(){ 
             return new C; 
           };
 virtual void ReleaseObject(I *anObject){ 
                delete anObject; 
              }; 
};
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>

<H4><a name="l5">Listing Five</H4>

typedef   
CConcreteFactory&lt;CWindowsWindow,IWindow&gt;  
CWindowsWindowFactory; 
<p></p>
typedef   
CConcreteFactory&lt;CMacWindow,IWindow&gt;  
CMacWindowFactory; 
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>
<H4><a name="l6">Listing Six</H4>

<pre>typedef  CConcreteFactory&lt;CWinsockConnection, 
INetworkConnection&gt;  
CWinsockFactory; 
<p></p>
typedef  
CConcreteFactory&lt;CDirectPlayConnection, 
INetworkConnection&gt;  
CDirectPlayFactory; 
</pre>
<P>
<a href="#rl6">Back to Article</A>
</P>
<H4><a name="l7">Listing Seven </H4>

<pre>template&lt;class I&gt; class IAbstractFactory 
{ 
 ... 
typedef  
set &lt;I *,less&lt;I *&gt; &gt; containerType; 
containerType m_objects; 
}; 
template&lt;class  C,class I&gt; 
class  CConcreteFactory  :  
public IAbstractFactory&lt;I&gt; 
{ 
 ... 
virtual I *MakeNewObject(){ 
 C *newObj = new C; 
 if (newObj)  
  m_objects.insert(newObj); 
 return newObj; 
 } 
virtual void ReleaseObject(I *anObject){ 
 if (m_objects.find(anObject)  
     != m_objects.end()){ 
      m_objects.erase(anObject); 
      delete anObject; 
     } 
 else 
  assert(false); 
 };
};   
</pre>
<P>
<a href="#rl7">Back to Article</A>
</P>
<H4><a name="l8">Listing Eight</H4>

<pre>//The Iterators <p></p>
typedef  
containerType::iterator  
iterator; 
<p></p>
typedef  
containerType::const_iterator  
const_iterator; 
<p></p>
typedef  
containerType::reverse_iterator  
reverse_iterator; 
<p></p>
typedef  
containerType::const_reverse_iterator   
const_reverse_iterator; 
//The Sequences 
iterator begin(){ 
 return m_objects.begin(); 
} 
iterator end() {  
 return m_objects.end(); 
} 
reverse_iterator rbegin(){ 
 return m_objects.rbegin(); 
} 
reverse_iterator rend(){ 
 return m_objects.rend(); 
}    
//Typedefs 
typedef  
containerType::size_type  
size_type; 
<p></p>
typedef  
containerType::value_type  
value_type; 
<p></p>
typedef  
containerType::reference  
reference; 
 
typedef  
containerType::const_reference  
const_reference; 
 
typedef  
containerType::difference_type  
difference_type; 
</pre>
<P>
<a href="#rl8">Back to Article</A>
</P>
<H4><a name="l9">Listing Nine</H4>

<pre>for (  IAbstractFactory&lt;IWindow&gt;::iterator  
 it = g_theWindowFactory-&gt;begin(); 
 it!= g_theWindowFactory-&gt;end(); 
 it++) 
{ 
 (*it)-&gt;Refresh(); 
} 
</pre>
<P>
<a href="#rl9">Back to Article</A>
</P>
<H4><a name="l10">Listing Ten</H4>

<pre>typedef struct _tagGUIFactory { IAbstractFactory&lt;IWindow&gt; * 
 WindowFactory; 
IAbstractFactory&lt;IScrollBar&gt; * 
 ScrollBarFactory; 
IAbstractFactory&lt;IMenu&gt; * 
 MenuFactory; 
} GUIFactory; 
</pre>
<P>
<a href="#rl10">Back to Article</A>
</P>
<H4><a name="l11">Listing Eleven</H4>

<pre>GUIFactory g_theGUIFactory; SetupGUIFactory(&amp;g_theGUIFactory); 
IWindow *theMainWindow = g_theGUIFactory.WindowFactory-&gt; 
 MakeNewObject(); 
</pre>
<P>
<a href="#rl11">Back to Article</A>
</P>

<p><b>DDJ</b></p>
<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
