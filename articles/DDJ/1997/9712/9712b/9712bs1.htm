<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal December 1997: The STL <i>Set </i>Class</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<p><i>Dr. Dobb's Journal</i> December 1997 </p>

<h1>The STL <i>Set </i>Class</h1>
</h1>

<HR>
<p>The STL <i>Set</i> class is a container that is optimized for fast lookup. <i>Set</i> takes two template parameters: a <i>Key</i>, which is the object type to be stored, and a <i>Compare</i> function object, which is used to sort the <i>Key</i>s (typically <i>less&lt;Key&gt;</i>). <i>Set</i> can contain only one copy of a given <i>Key </i>value.</p>

<p>The <i>Compare</i> object is a <i>struct</i> that overrides the () operator to take two references of type <i>Key,</i> and returns True if the first <i>Key</i> should appear before the second <i>Key</i>.</p>

<p>The <i>Set</i> class sorts its members into an ordered tree using the STL's red-black tree class, <i>rb_tree</i>. This structure allows fast (order log<i>n</i>) key searches. For an excellent explanation of red-black trees, see Mark Nelson's <i>Programmer's Guide to the Standard Template Library</i> (IDG Books Worldwide, 1995).</p>

<p>As with all STL containers, access to member objects is provided with iterators. The <i>begin</i>/<i>end</i> sequence provides access to all objects in the order defined by the <i>Compare</i> object.</p>

<p><a name="re1"><a href="9712be1.htm">Example 1</A> declares a set of integers, inserts 0-9 into the set, and streams the members out. Searching a set for a particular member is accomplished with the <i>find</i> method, which returns an iterator that points to the object. If a <i>set</i> does not contain the object, <i>find</i> returns the end iterator; see <a name="re2"><a href="9712be2.htm">Example 2</A>.</p>

<p>In this article, the Abstract Factory class uses <i>set&lt;I*, less&lt;I*&gt; &gt;</i>, where <i>I</i> is the template parameter to the Abstract Factory class. Since the <i>set</i> contains pointers and it uses the <i>less</i> function object on those pointers, the <i>set</i> is sorted in arbitrary order, based on the numerical values of the pointers the factory allocates.</p>

<p>If object order is important, you may want to replace the compare function in the set container from <i>less&lt;I*&gt;</i> with something that sorts appropriately for your application.</p>

<p> -- J.S.</p>

<P>
<a href="9712b.htm#rs1">Back to Article</A>
</P>
<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
