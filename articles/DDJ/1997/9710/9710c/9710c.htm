<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal October 1997: The SSH Transport Layer Protocol</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>The SSH Transport Layer Protocol</h1>

<p><i>Dr. Dobb's Journal</i> October 1997
</p>
<h2>Making the Internet secure</h2>

<h3>By Camillo S&auml;rs</h3>

<I>Camillo is a product manager at Data Fellows Ltd. He can be contacted at Camillo.Sars@DataFellows.com.</I>

<hr>
Sidebar:<a name="rs1"> <a href="9710cs1.htm"><I>SSH Background</I></A>
<HR>
<p>At one time, the Internet was a reasonably safe place, judging by the protocols that are still in use today. Whenever you use Telnet, ftp, or almost any remote login protocol, your password is sent in the clear over the network. Unfortunately, the Internet is no longer safe. Even a novice can grab a sniffer and a root kit and use them to break most systems on the Internet today. The Secure Shell (SSH) protocol provides secure connections that are authenticated and encrypted using military-grade encryption. The technology is so secure that you actually can build a Virtual Private Network over the Internet. In this article, I'll focus on the transport layer protocol for secure remote connections.</p>

<h3>Design Principles</h3>

<p>SSH was designed to provide maximum security. The preferred symmetric cryptographic algorithms all use a key length of at least 128 bits, and the protocol can support longer keys. The preferred algorithms -- Blowfish, IDEA, and three-key 3DES -- have received extensive public scrutiny and are generally regarded as strong. Message integrity is assured using cryptographic message authentication codes (MACs) that make tampering with the connection virtually impossible.</p>

<p>One factor that has contributed significantly to the success of the protocol is ease of use. SSH programs are easy to install and use. On most platforms a typical installation might require as little as three commands and some system reconfiguration. SSH can transparently replace the rexec, rsh, and rcp commands with a much more secure system for users who do not bother to learn new commands. For more security-conscious users, advanced features add authentication and forwarding services, including X11 forwarding.</p>

<p>If you are familiar with cryptographic authentication, you may wonder how SSH handles key distribution. The somewhat surprising answer is that it doesn't. SSH assumes that the keys are distributed in some manner, but does not enforce any particular policy. One of my favorite features of SSH is the ability to connect to an unknown host and still get an encrypted session. If allowed, the SSH client will respond to an unknown host and host key by assuming the key is correct. This makes a man-in-the-middle attack possible for the first contact, but it is still better than connecting without any encryption whatsoever. Users can distribute their public keys as they wish, and once a public key infrastructure for the Internet is deployed, SSH can use it without protocol changes.</p>

<p>Finally, SSH is fast. The key exchange has been optimized to 1.5 round trips and the encryption algorithms typically surpass average Internet connection speeds, which means that there is little or no slowdown due to encryption. On congested links, SSH may even increase throughput, since data is compressed before transmission.</p>

<h3>Data Types</h3>

<p>Encryption is straightforward, as it basically converts plain-text blocks into encrypted blocks and vice versa. The SSH protocol gets by using only three kinds of data: Booleans, integers, and strings.</p>

<p>Boolean values are 0 and 1. Any implementation should regard any nonzero value as true, but only write values 0 and 1.</p>

<p>The integer types are <i>byte</i>, <i>vlint32</i>, <i>uint16</i>, and <i>uint32</i>. The <i>byte</i> type is typically used to define fixed-length data as an array of bytes, <i>byte[n]</i>. The <i>uint</i> types are ordinary unsigned integers, with the MSB first. <i>vlint32</i> is an arbitrary 32-bit unsigned integer that is encoded using one to five bytes. The first two bits (bits 6 and 7) show how many bytes follow the first byte according to <a name="rt1"><a href="9710ct1.htm">Table 1</A>. Bits 0-5 carry the first six bits of the integer, except if both bit 6 and bit 7 are set when bits 0-5 are zero.</p>

<p>An SSH string is a <i>vlint32</i> followed by an arbitrary binary string that may contain any 8-bit characters. No terminating null character is used and a string may contain null characters. Strings are used for data transmission and parameter negotiation, typically in the form of comma separated lists without spaces.</p>

<p>For instance, algorithms are named using strings such as <i>3des-cbc</i>, <i>sha-1</i>, or <i>ourcipher-cbc@ssh.fi</i>. A cipher list might then be <i>3des-cbc,ourcipher-cbc@ssh.fi</i>. The last cipher name is an example of how a proprietary algorithm should be named, to avoid conflicting names. The last part of the name should be a valid Internet domain name, and each domain manages its own local ciphers as it wishes.</p>

<h3>Packet Protocol</h3>

<p>SSH packets consist of the following fields:</p>

<p></p>

<ul>
<li>Length. A <i>vlint32</i> containing the length of this packet in bytes, not including the length field or the MAC.  <li>Padding length. A <i>vlint32</i> containing the length of the packet padding.
  <li>Payload. The encrypted and possibly compressed data that is transmitted in a packet. The uncompressed payload may not be longer than 32,768 bytes, and the maximum length of the entire packet may not exceed 35,000 bytes. This length limitation makes the protocol usable even for 16-bit microprocessors.
  <li>Padding. Random padding ensures that the packet length, excluding MAC but including the length field, is a multiple of the cipher block size or 8 bytes, whichever is bigger. At least four bytes of padding should always be used.
  <li>MAC. The length of the MAC depends on the algorithm that is used to calculate it and this field is omitted if no MAC is in use.
</ul>

<p></p>

<p>You should be particularly careful when you calculate the length of the padding, as the size of the <i>Length</i> field may change when you increase the amount of padding, which in turn affects the amount of padding needed. When receiving, you should decipher the length field once you have received at least eight bytes or the first cipher block, to determine how much more data must be read to decipher the entire packet. </p>

<h3>Connection Setup</h3>

<p>The SSH protocol was designed to work over any 8-bit clean binary-transparent transport layer. Current implementations all use TCP/IP, but future implementations may work on other transports as well. The Internet Assigned Numbers Authority (IANA) has assigned port 22 for SSH over TCP/IP.</p>

<p>The SSH client initiates the session by setting up the transport layer connection. Both sides then independently send an identification string of the form "SSH-protoversion-softwareversion comments" followed by a newline. This string may not exceed 255 characters, counting the terminating newline, and the version parts should only include printable characters, excluding space and "-". The string is used for debugging purposes, and the protocol version is used to determine compatibility options. You should try to make the string as descriptive as possible to make debugging easier. Also note that this is not sent as an SSH string.</p>

<p>Immediately after the identification strings have been transmitted, without waiting for acknowledgment, key exchange commences using the binary packet protocol I just described. This way, the complete connection setup can be reduced to 1.5 round trips, with the worst case being 2.5 round trips. At this point no encryption or compression is used, and no MAC is calculated, since the appropriate algorithms are determined during key exchange.</p>

<p>Unfortunately, the connection setup of Version 2.0 is incompatible with the older protocol versions. If you implement a 2.0 server, you may want to delay sending the key exchange packet until you know the version of the connecting client. This will make the connection establishment slightly slower, but will allow old clients to connect during a transition period. A 2.0 client must detect old servers because the 2.0 protocol causes a protocol violation in old servers. When the client detects this situation, it should disconnect and reconnect using the earlier protocol.</p>

<h3>Compression and Encryption</h3>

<p>Both compression and encryption run separately in each direction, and may actually use different algorithms and encryption keys for the different directions. Even if the algorithm is the same, there will typically be two separate encryption keys for the different directions. The data transmitted in one direction will be considered a single data stream; initialization vectors and compression tables will be carried from one packet to the next. </p>

<p>When compression is used, only the payload is compressed using the algorithm determined during key exchange. The payload may expand during compression, but the total packet length must not exceed the maximum. Currently, two compression methods are defined; see <a name="rt2"><a href="9710ct2.htm">Table 2</A>.</p>

<p>The encryption algorithm encrypts everything in the packet except the MAC. The packet length is defined to be a multiple of the block size, so a block cipher can work directly on the packets without extra padding. Stream ciphers and block ciphers with small block sizes must use packets that are a multiple of 8 bytes. <a name="rt3"><a href="9710ct3.htm">Table 3</A> lists the ciphers currently supported. (For more information about these ciphers, see Bruce Schneier's <i>Applied Cryptography</i>, Second Edition, John Wiley &amp; Sons, 1996.)</p>

<h3>Data Integrity</h3>

<p>Encrypting the data only ensures that nobody can eavesdrop on the connection, but tampering with the data is still possible and in some cases even feasible. Each packet should be protected by a MAC that is calculated from a shared secret -- the packet sequence number and the packet contents before encryption. The MAC is appended to the encrypted packet, and its length may vary depending on the algorithm used.</p>

<p>The packet sequence number is never actually transmitted, but is included in the MAC calculation along with the integrity key. The sequence number for the first packet is zero, and the number is incremented for every packet sent and never reset. If this 32-bit number is not big enough, it simply wraps around to begin again from zero. If a packet was ever to be lost or received out of sequence, the MAC calculation would fail.</p>

<p>As with compression and encryption, the integrity key can be different for each direction and the sequence number always is. <a name="rt4"><a href="9710ct4.htm">Table 4</A> lists the currently defined algorithms. Again, I refer you to the literature for more information on these algorithms. HMAC is defined in RFC 2104.</p>

<h3>Key Exchange</h3>

<p>The key exchange begins with algorithm negotiation. Typically one specific algorithm is widely used and will be used to create a default key-exchange packet. If this guess was correct, the key exchange will proceed immediately, else the parties have to decide on which algorithm to use by comparing lists. Currently, only one key exchange algorithm, "double-encrypting-sha," is defined and mandatory.</p>

<p>Algorithm negotiation is done by sending a packet of type SSH_MSG_KEXINIT. The packet contains:</p>

<ul>
<li><i>cookie</i>. Sixteen random bytes. This cookie makes it impossible for either party to fully determine the keys, which might be used to pass certain types of authentications to third parties.  <li><i>kex_algorithms</i>. A list of the supported key-exchange algorithms with the guessed algorithm first.
  <li><i>server_host_key_algorithms</i>. The server lists the algorithms for which it has keys, the client lists the algorithms it is willing to accept. Currently, only "ssh-simple-rsa" is defined, which is RSA with encoding similar to PKCS-1.
  <li><i>encryption_algorithms</i>, <i>mac_algorithms</i>, <i>compression_algorithms</i>. Lists acceptable algorithms, with separate lists for each direction.
  <li><i>hash_algorithms</i>. A list of acceptable hash algorithms. You should only allow algorithms that you consider to be fairly secure, since the hash function will be used for important tasks such as deriving keys from the shared secret. <a name="rt5"><a href="9710ct5.htm">Table 5</A> lists the current hash algorithms. All hash algorithms produce at least 16 bytes of output.
  <li><i>first_kex_packet_follows</i>. A Boolean value that indicates whether an attempt was made at guessing the algorithms. The guess is typically made, and the first packet follows immediately. The guess is only assumed to be right if the guessed algorithms are the first ones on every list; otherwise, the following packet is disregarded by the receiver. This means that correct packets are occasionally dropped, but there may not be a better way to reliably determine if the guess was correct. 
</ul>

<p>Four bytes at the end of the packet are reserved for future extensions. </p>

<p>Algorithms are listed in order of preference, with the preferred algorithm first on the list. Using no algorithm must be explicitly listed as the alternative "none" to be accepted. Typically, the selected algorithm is the first on the client's list that also occurs on the server's list. Occasionally, this may not be possible. For instance, the selected algorithm might require a host key that can be used for signatures, but no such key is available. In this case, the next alternative on the client's list is tried. If no suitable match is found, the connection fails.</p>

<p>In the double-encrypting key exchange, only two more messages are required to complete the key exchange: a SSH_MSG_ KEXRSA_HOSTKEY message from the server and a SSH_MSG_KEXRSA_SESSIONKEY from the client.</p>

<p>In the KEXRSA_HOSTKEY message, the server sends its public host key and the periodically changing server key to the client. The client then verifies the host key in some way that is not specified by the protocol definition. Currently, it is usually done by comparing the key with a known copy in a database, but any reliable approach will do.</p>

<p>Once the client has verified the host key, it generates a random 256-bit session key. It then calculates the session identifier to verify that nobody has tampered with the key exchange. The session identifier is an SHA-1 hash of the concatenated payloads of the client's KEXINIT, the server's KEXINIT, the KEXRSA_HOSTKEY messages, and the 32 bytes of the key.  SHA-1 is specified explicitly to make verification of the algorithm easier.</p>

<p>The session identifier is never recalculated and is used for authentication in several cases. Signed, it provides proof of possession of a private key.</p>

<p>The client now concatenates six zero bytes, the first ten bytes of the session identifier, and the 32 bytes of the key. The result is first encrypted with the smaller of the host and server keys and then with the larger one. Finally this is sent in a KEXRSA_SESSIONKEY message to the server.</p>

<p>The server decrypts the message, calculates the same hash as the client and verifies that it is correct. If the hash is correct, the server replies with an SSH_MSG_ NEWKEYS message and waits for the client to acknowledge this with SSH_MSG_ NEWKEYS. Only then are the keys taken into use. The reason for this is that either party may send SSH_MSG_DISCONNECT at this point if something goes wrong. If the DISCONNECT message was encrypted with the new keys, the recipient would not be able to interpret it correctly. The DISCONNECT message also carries a reason code and a descriptive string for error tracking.</p>

<p>The different keys needed by the protocol are calculated using the selected hash function on the session identifier and 16 bytes of the shared secret. Using the session identifier makes it impossible for either party to calculate keys alone. <a name="rt6"><a href="9710ct6.htm">Table 6</A> shows which bytes are used for which key.</p>

<p>The length of the key thus depends on the selected hash function. This key can then be extended to the required length by repeatedly concatenating the key and the hash of the key to form a new, longer key. </p>

<p>The key exchange may be redone at any time during the session. It is initiated with an SSH_MSG_KEXINIT message from either party, but the roles as client and server remain the same. The whole exchange is transparent and is done with the old keys and algorithms. You should change keys periodically, either after one hour of connection time or one gigabyte of data.</p>

<h3>Services</h3>

<p>Once the key exchange has completed and the keys have been taken into use, the client proceeds to requests a service using the SSH_MSG_SERVICE_REQUEST message. The only parameter of this message is a string of up to 64 noncontrol characters identifying the required service. If the server provides this service and the client is allowed access to it, the server responds with a SSH_MSG_SERVICE_ACCEPT message; otherwise, it responds with SSH_MSG_DISCONNECT. You should note that service names are case sensitive.</p>

<p>The client does not have to wait for the SERVICE_ACCEPT message, and can proceed to transmit packets for the service immediately after the request.</p>

<p>The SSH protocol does not specify how applications pass data to the protocol, but defines a stream service that is used to forward a stream over the encrypted connection. Data is transmitted asynchronously using SSH_MSG_STREAM_DATA messages that contain the data as a string. Either party can close its data channel at the end of the stream using the SSH_ MSG_STREAM_ EOF message. No data can be transmitted after this message, but the other direction remains open.</p>

<p>Stream communication is terminated using a pair of SSH_MSG_STREAM_CLOSE messages. The party that wants to close the channel sends the STREAM_CLOSE message and then waits for the other party to respond before closing the channel. The other party should respond to the STREAM_CLOSE message immediately and then close the channel. </p>

<h3>Public-Key Infrastructure</h3>

<p>The Internet lacks a public-key infrastructure, and this is rapidly becoming a major problem. Cryptographic authentication and key exchange typically require access to the other party's public keys and a way to verify that the keys are reliable. The SSH protocol does not commit itself to any particular solution, although the SSH programs use a database of trusted keys.</p>

<p>I expect that a key infrastructure will evolve during the next few years, and that several similar solutions will coexist during the transition period. If you decide to implement the SSH protocol, you should take great care to make the implementation independent of any particular solution. Users should be allowed to decide for themselves which infrastructure they trust, and you should give them a choice of different security features and levels.</p>

<h3>References</h3>

<p>Data Fellows Ltd. "Secure Networking, Remote Login and Systems Administration," http://www.Europe.DataFellows.com/f-secure/fnetsys.htm, 1996.</p>

<p>Schneier, B. <i>Applied Cryptography: Protocols, Algorithms and Source Code in C</i>, Second Edition, John Wiley &amp; Sons, 1996. </p>

<p>Krawczyk, H., Bellare, M., and Canetti, R. "HMAC: Keyed-Hashing for Message Authentication," RFC 2104, February, 1997.</p>

<p>Yl&ouml;nen, T. "SSH Transport Layer Protocol," draft-ietf-tls-ssh-00.txt, 1996. (Officially expired September 1, 1997.)</p>

<p>The complete SSH protocol has been documented in an Internet Draft. Unfortunately, Internet drafts are, by nature, temporary, so it may be difficult to find a copy. There are a few Internet sites that keep older drafts, however.</p>

<p><b>DDJ</b></p>



<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
