<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal October 1997: Java and Inter-Applet Communication</title>
</head>

<BODY BGCOLOR="#ffffff" TEXT="#000000" LINK="#0000ff" VLINK="#330066" ALINK="#FF0000">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Java and Inter-Applet Communication</h1>

<p><i>Dr. Dobb's Journal</i> October 1997
</p>
<h2>A communication mechanism using the Java hash table</h2>

<h3>By Andrew Meckler</h3>

<I>Andrew is a senior programmer for Access Health and can be contacted at ameckler@access-health.com.</I>

<hr>

<p>Developing commonly consists of writing a single applet from which the functionality of the system will evolve. This works fine for small programs that display multimedia on web pages or present simple data-entry forms. But as systems get more complex, this approach becomes problematic. It would be difficult, for example, to rewrite a large desktop application as a giant monolithic applet embedded in a web page. Even if the task was accomplished, the price would be paid in other ways -- class download time, maintenance, and so on. When facing these problems, what we need is a system that supports many relatively small applets that communicate with one another -- which together make up the entire application.</p>

<p>Of course, the base Java libraries partially support inter-applet communication. If all applets are within the same applet context (the same HTML page), they can freely communicate. However, if there are multiple applet contexts (multiple HTML pages) displayed in the browser at one time, the applets in different contexts cannot communicate with one another with the standard Java libraries. This is a severe limitation, since you often want to have distinct sections of a web page split up into different frames (see <a name="rf5"><a href="9710df5.htm">Figure 5</A>). In this article, I'll present one technique for addressing this problem.</p>

<h3>Inter-Applet Communication Across Frames</h3>

<p>A viable solution to the problem of inter-applet communication is to create a common class that is accessible by every applet in the browser, regardless of where it is running. This common class could then be used as the central communication link between all the applets.</p>

<p>The difficult part is constructing the mechanism by which all the applets communicate within this class. A cryptic approach might be to set flags or messages in the class to certain values that the other applets that are running would know how to interpret. This approach works, but would quickly become inefficient. If you closely examine the problem, you see that applets can't communicate across applet contexts (frames) because they can't get the object reference to the applet with which they are trying to communicate. If a data structure were created to capture the object references of all the applets currently running within the browser, an applet could communicate with any other running applet by getting its object reference and using it to communicate with the applet. In essence, you would be tricking Java into thinking that the applet you want to talk to is on the same HTML page.</p>

<p>The Java hash table is a perfect data structure for implementing a communication mechanism in this fashion. This hash table could be designed to accept entries that consist of a unique string identifier to distinguish the applet, and an object reference to the applet. When an applet wants to talk to another applet, all the applet needs to do is get the object reference out of the hash table by specifying its unique string identifier, then make calls to visible methods in the destination applet to conduct communication. In <a name="rf1"><a href="9710df1.htm">Figure 1</A>, three applets are communicating using this inter-applet communications technique. Each of the applets must use the <i>CommManager</i> class (presented here) for communication with any of the other applets. The <i>CommManager</i> class contains the hash table where all the applet information is stored. <i>CommManager</i> allows applets to:</p>

<ul>
<li>Register themselves, allowing other applets to communicate with them.  <li>Unregister themselves if they are shutting down, preventing other applets from communicating with them.
  <li>Obtain object references of any other applets running in the browser, in order to communicate with them. This is the option that will be used most frequently. Registering and unregistering are only done once per applet. Obtaining the object reference is executed repeatedly depending on the actions that users perform within the system. Whenever an applet needs to communicate with another applet, this step will be performed.
</ul>

<p></p>

<p><a name="rf2"><a href="9710df2.htm">Figure 2</A> illustrates the relationships between all the classes in this example. Every box represents a Java class. Inside each box are the class name (top), its data members (middle), and the available methods (bottom). The line between each of the applet classes and the communication manager class indicates that each applet class can have only one <i>CommManager</i> class associated with it. This relationship is commonly referred to as a "one-to-one" relationship.</p>

<p><a name="rf3"><a href="9710df3.htm">Figure 3</A> is a data-flow diagram that shows the flow of data between the various processes. The boxes represent the applet objects. The oval structures are processes that the objects use to affect the flow of information. The hash table is represented at the top as the sole data store for this model. All of the lines represent flow of data between the various structures in this diagram. The two dotted lines showing the flow of information into the inter-applet communication process represent conditional flow of data. This flow of data is only possible if the label on the line is met. In other words, inter-applet communication is only possible in this model if the applet that wants to communicate with another applet has that applet's reference. If the applet reference has not yet been obtained using the three processes shown in <a href="9710df3.htm">Figure 3</A>, this flow of data is invalid.</p>

<p>There are two paths in <a href="9710df3.htm">Figure 3</A> that lead away from the Applet classes. The path that leads from the Applet class and goes to the Get Applet process uses the unique identifier for the class that the applet wants to communicate with. This path for the Applet 1 class, for example, uses the unique identifier for Applet 3 because this is the applet that Applet 1 wants to communicate with. The converse would likewise be true for Applet 3. The other path that leads away from the applet classes and goes to the Unregister Applet process uses the unique identifier of the applet that is trying to unregister itself. When Applet 1, for example, uses the Unregister Applet process to unregister itself, it would use the unique identifier for itself. Once again, the converse would likewise be true for Applet 3.</p>

<p><a name="rf4"><a href="9710df4.htm">Figure 4</A> shows these three applets running on separate HTML pages (split by HTML frames) in Internet Explorer. All have the ability to communicate with one another. (The <i>CommManager</i> class shown in <a href="9710df5.htm">Figure 5</A> is for clarity.) You can send text from one applet to any of the other applets by typing text in its text area and pressing the appropriate "send message" button. Once this button is pressed, the text will be displayed in the destination applet's text area. </p>

<p>If, for example, the "send message to Applet 3" button is pressed in Applet 1, the following events will occur:</p>

<p>1.	Applet 1 will call <i>getApplet()</i> in the <i>CommManager</i> class, passing it Applet 3's unique string identifier.</p>

<p>2.	Applet 1 will use the object reference obtained in step 1 to communicate with Applet 3 and send it the contents of its text area control.</p>

<p><a name="rf6"><a href="9710df6.htm">Figure 6</A> shows a scenario that could occur if users were sending information back and forth between Applet 1 and Applet 3. <a name="rf7"><a href="9710df7.htm">Figure 7</A> shows an event trace of the scenario, illustrating how each  event affects the various classes. </p>

<h3>The <i>CommManager</i> Class</h3>

<p>The communication manager class used in this inter-applet communications technique is called <i>CommManager.class</i>. <a name="rl1"><a href="9710d.htm#l1">Listing One</A> is its declaration in its entirety.</p>

<p>At the heart of this class is the hash table <i>private static Hashtable applets = new Hashtable()</i>, where all the entries will be stored for all the applets that are running in the web browser. The hash table resizes itself automatically as needed, so <i>CommManager</i> doesn't have to worry about doing this. This data structure is private, so it cannot be modified except through the provided methods. It is also static to ensure that there is only one instance of the hash table regardless of how many instances of the class there are.</p>

<p>The <i>CommManager</i> class remains in memory as long as something is using it. When the last applet using it shuts down, <i>CommManager</i> also goes away. Theoretically, since the entire class consists of static information, you don't have to instantiate it before using it -- it can be used directly.</p>

<h3>Registering Applets with <i>CommManager</i></h3>

<p>For an applet to be accessible by other applets, it must register itself with the communications manager. This is accomplished by making a call to <i>regApplet()</i> in the <i>CommManager</i> class. The method declaration is: <i>public static boolean regApplet(String s, Applet a)</i>.</p>

<p>For the registration attempt to be successful, a unique string identifier to identify the applet and a reference to the applet itself must be passed into this method. If the registration is successful, a new entry is created in the hash table for the applet and a value of True will be passed back to let the calling method know that the registration attempt was successful. If the registration attempt fails, a value of False will be returned and a new entry will not be added to the hash table.</p>

<p>Usually applets register themselves with the communications manager when they are first loaded and the <i>start</i> method is executed. For example, <a name="rl2"><a href="9710d.htm#l2">Listing Two</A> registers Applet 1 (<a href="9710df6.htm">Figure 6</A>). Once <a href="9710d.htm#l2">Listing Two</A> code is executed, an entry is added to the hash table for Applet 1. It consists of the unique string identifier <i>Applet1</i> and the reference to Applet 1, which is represented by the keyword <i>this</i>. Once this occurs, all other applets that are already registered with the communications manager can freely communicate with Applet 1.</p>

<p>All the unique identifiers that are used in <i>CommManager</i> are case sensitive. This means that if Applet 1 is registered by passing <i>regApplet "Applet1",</i> the same exact string must be used in order to obtain a reference to the applet and to unregister it.</p>

<h3>Getting an Object Reference from <i>CommManager</i></h3>

<p>Before one applet can attempt to talk to another over an HTML frame, the applet initiating the communication will need to get an object reference from the communications manager. This is done by calling the <i>getApplet()</i> method in <i>CommManager</i>. The method declaration is <i>public static Applet getApplet(String s)</i>.<b> </b></p>

<p>The unique identifier for the destination applet needs to be passed into this method. If the method is successful and able to find the applet in the hash table, it will pass back the object reference to the destination applet. This reference can then be used to initiate communications with the destination applet. If the applet is not found in the hash table, the method returns null.</p>

<p>In this demonstration, when the "send message to Applet 3" button is clicked, <a name="rl3"><a href="9710d.htm#l3">Listing Three</A> is executed. This code will first get the object reference to Applet 3, and then call the <i>ReceiveText()</i> method in Applet 3 to send it the contents of Applet 1's text area control. The line that calls <i>ReceiveText</i> is a little confusing. The <i>refApplet3</i> object is of type <i>Applet</i>, so it doesn't know what the <i>ReceiveText</i> method is. To get this to work properly, you have to cast the <i>refApplet3</i> object with Applet 3. Once this is accomplished, Applet 1 can freely call all of the methods that are visible in Applet 3.</p>

<h3>Unregistering an Applet from <i>CommManager</i></h3>

<p>When an applet is shutting down, its entry in the <i>CommManager</i> hash table is no longer valid, so it must be removed. The applet is responsible for removing itself from <i>CommManager,</i> which is accomplished by calling the <i>unregApplet()</i> method in <i>CommManager</i>. The method declaration is <i>public static boolean unregApplet(String s)</i>.<b> </b></p>

<p>When the call to <i>unregApplet()</i> is made, the unique string identifier must be passed in to tell it which class to remove, or unregister, from the hash table. The method passes back a Boolean value indicating success or failure.</p>

<p>In <a href="9710df6.htm">Figure 6</A>, <a name="rl4"><a href="9710d.htm#l4">Listing Four</A> unregisters Applet 3. This method only gets called when the applet stops. Once this line of code is executed, the entry in the hash table with a key of <i>Applet3</i> is removed and can no longer be called.</p>

<h3>Future Enhancements </h3>

<p>Even though <i>CommManager</i> is useful as is, there are modifications that would make it more robust and flexible for a particular environment, including:</p>

<p></p>

<ul>
<li>Adding exception handling. There are several places where the code is vulnerable for throwing an exception.  <li>Adding a mechanism to help ensure that object references are valid. Although no mechanism can completely guarantee that object references are valid, there are several techniques that can improve their reliability. A thread could be added to this class that runs a process every so often that checks all the object references to ensure that they are valid at that point in time. If the object reference were not valid, its entry would be removed from the hash table.
  <li>Modifying or removing places where values are hardcoded in this class. For instance, if one applet wants to talk to another applet, it has to know its exact string identifier in order to communicate with it. Although this technique works, it is not flexible.
  <li>Removing the need for the applet to cast the method that it is calling with the destination applet once the object reference has been obtained. One technique that could be used is to have all the applets use a common base applet class. Then the cast will always be the same, regardless which applet is conducting communication.
  <li>Adding methods for a particular environment, possibly including methods to return the number of running applets, return a list of all the applet references, or return a copy of the hash table.
  <li>Adding a facility that allows applets to "query" <i>CommManager</i> for the current interface for another applet. This would make the class similar in many ways to COM.
  <li>Extending the class to include not just applets, but other kinds of objects that are being used in a particular environment.
  <li>Extending <i>CommManager</i> to allow applets to not only call other applets' methods, but to access other applets' variables. Although this really goes against the essence of object orientation, it could prove useful in many cases.
</ul>
<HR>
<H4><a name="l1">Listing One</H4>

<pre>import java.applet.*;import java.util.*;
public class CommManager
{
    private static Hashtable applets = new Hashtable();
    public static Applet getApplet(String s)
    {
        return (Applet)applets.get(s);
    }
    public static boolean regApplet(String s, Applet a)
    {
        if (a != null) {
            applets.put(s, a);
        return true;
        }
        else
            return false;
    }
    public static boolean unregApplet(String s)
    {
        if (applets.containsKey(s)) {
            applets.remove(s);
            return true;
        }
        else
            return false;
    }
}
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>public void start(){
    CommManager.regApplet("Applet1", this);
}
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>public boolean action(Event event, Object obj){               
    if ("Send Message to Applet 3".equals(obj)) {
        Applet refApplet3 = CommManager.getApplet("Applet3");
        ((Applet3)refApplet3).ReceiveText(SendTextEdit.getText());
    }
} 
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>public void stop(){
    CommManager.unregApplet("Applet3");
}
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>

<p><b>DDJ</b></p>


<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
