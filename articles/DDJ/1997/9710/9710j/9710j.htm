<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal October 1997: LUCA: Reusable Communications Code</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>LUCA: Reusable Communications Code</h1>

<p><i>Dr. Dobb's Journal</i> October 1997
</p>
<h2>Bridging the media and protocol gap</h2>

<h3>By Bennett M. Griffin</h3>

<I>Bennett is president of Griffin Technologies and can be contacted at bennett@griftech.com.</I>

<hr>

<p>Communications programming has traditionally been anything but reusable. A program designed to communicate asynchronously through a modem could do only that -- reusing the same code for TCP/IP communications across the Internet would be impossible. From a conceptual point of view, however, these two operations are identical. Each requires a communications connection to begin, data streams to be sent and received, and a termination of the connection.</p>

<p>In spite of these apparent similarities, the traditional approach to communications programming has prevented such reusability. This is because the traditional approach is hardware oriented -- the communications code depends on the protocols and drivers that are used.</p>

<p>An alternative approach is to take an object-oriented view of communications, in which differences between protocols and drivers are left to the internal implementations of the classes. This approach makes code reusability possible. The protocol and media used become details of the implementation. You are therefore free to look at the idea of data communications from the conceptual level -- open, read, write, close. Ultimately, this means that an object-oriented communications program designed for a dial-up modem would work identically on an ISDN connection or across the Internet without modification.</p>

<p>To demonstrate the simplicity of this approach, I present in this article a multiprotocol terminal program that can handle both async communications via the PC COM port and Telnet through TCP/IP over the Internet (as well as many other types of communications) using the same reusable code. I'll create this code using the Langner Universal Communications API (LUCA) and Visual C++ 5.0. LUCA, developed by Langner GmbH, supports C, C++, Delphi, and Visual Basic on Windows 95/NT, providing a universal API for data communications for popular transmission media and protocols. </p>

<h3>Universal Communications</h3>

<p>As <a name="rt1"><a href="9710jt1.htm">Table 1</A> illustrates, LUCA integrates support for all popular protocols and transmission media in use today. Even with this functionality, the LUCA API (see <a name="rt2"><a href="9710jt2.htm">Table 2</A>) is straightforward, with 13 functions and 6 event handlers. The number and type of functions in the API underscores the difference between the LUCA's object-oriented view and traditional communications programming. </p>

<p>The functions mirror the conceptual view of communications programming. <i>Vwrite()</i> and <i>Vread()</i> transmit and receive data, including file transfers, faxes, e-mail, or anything else that needs to be communicated. You can understand and use <i>Vwrite()</i> and <i>Vread()</i> without knowledge of the protocol or media being used.</p>

<p>Vgetfile() and <i>Vputfile()</i> further automate communication with Zmodem, FTP, or other file-transfer protocols. They are actually add-on functions and are provided as source code. They help automate the read/write polling loops as well as the operating-system-specific file I/O commonly associated with file transfers.</p>

<h3>The Link Identifier</h3>

<p>To achieve this abstraction from protocols and media, there has to be some way to specify which protocols and media are being used in each specific situation. LUCA utilizes an approach based on a string called a "Link Identifier," which is passed to the <i>Vopen()</i> function to establish a communications channel and is constructed just like a protocol stack. In fact, it actually does create a protocol stack within LUCA out of different software modules.</p>

<p>For example, the link identifier "TELNET/TCP:telnet/SOCKET:myserver" specifies that the Telnet protocol should be run on the TCP protocol using the telnet port, which in turn runs on the Socket driver and connects to the host <i>myserver. </i>Similarly, the link identifier "TCP:1024/SOCKET:myserver" establishes a connection to <i>myserver</i> using TCP port 1024, again running on top of the Socket driver. </p>

<p>To establish a dial-up modem connection, the link identifier would be something like "ATMODEM:5551234/ASYNC /COM:2, SPEED=115200, FLOW=RTSCTS." In this case, you are loading the AT-style modem protocol to dial 555-1234 on top of an asynchronous connection via the COM driver attaching to COM2 at 115200 bps with hardware handshaking enabled. Whatever the specifics, the communications driver is always listed rightmost, and protocols are stacked to the left.</p>

<p>All of the protocol and driver-specific information is contained within this link identifier string. This data is not analyzed or processed by the LUCA API functions, but instead by the appropriate LUCA protocol or driver module. Consequently, the API itself is not bogged down by any protocol or driver details. This fact is one of the keys to code reusability and expandability.</p>

<p>This method of modular protocol stacking also allows for some unconventional, but handy, abilities. For example, the protocol module for HDLC framing can be easily stacked on top of a character-based protocol such as an async COM port, instantly producing an error-detecting, block-oriented transmission.</p>

<p>This modular design also enables expandability. As additional LUCA modules are written to support new drivers and protocols, all you need to update old code to enable use of the newest driver is the latest LUCA module and an updated link identifier. Protocols higher in the stack such as FTP and Telnet will continue to work with the new driver. Just as ODBC has lead to generic database processing code, LUCA enables completely reusable communications code.</p>

<h3>Distributed Communications</h3>

<p>Sometimes it is desirable to use multiple types of communications to accomplish one task. Network, or segmented, links are communications links that are made up of more than one communications type. Network modem servers are a good example of segmented links. The communication is first carried through the LAN to the modem server, and then via the modem server's COM port to a modem. Networked links allow applications to utilize the communications resources of multiple computers and systems at different locations.</p>

<p>Usually each segment in a networked link has different characteristics. By including the "&gt;" redirection symbol in a link identifier, LUCA creates a networked link of two or more segments. For example, a two-segment link that utilizes TCP on the first half and the 3964R async protocol on the second would have a link identifier such as "HDLC/TCP: 3030/SOCKET:remote_pc&gt;3964R /ASYNC/COM:1." In this example, <i>COM:1</i> (listed in the second portion of the link) refers to the COM1 port on the computer specified by the <i>remote_pc</i> IP address.</p>

<p>This again demonstrates code reusability, because the LUCA API functions work with this networked link just like any standard end-to-end connection. No specific code is required to enable networked links, and the details are again contained within the link identifier string.</p>

<h3>A Generic Terminal</h3>

<p>To see this idea in action, I'll present a C++ communications terminal application that works across multiple protocols and media. The most interesting aspect of this program is that it doesn't contain a single line of protocol or media-specific code. It will open Telnet sessions, dial-up modem connections, even connect to a PLC using the Siemens 3964R protocol. This same application could easily be written in C, Visual Basic, or Delphi.</p>

<p><a name="rl1"><a href="9710j.htm#l1">Listing One</A> contains the main function loop. The only major data structure used is a class called <i>TermPort</i>, which inherits from the LUCA class <i>Vport</i>. This class only has two public methods, a constructor and a method named <i>active()</i>, which is the heart of the communications write loop. Private methods overriding most of the default event handling are also defined.</p>

<p>After a syntax message is displayed, the application waits for a link identifier to be entered by the user. At that point, a new <i>TermPort</i> object is created using the link identifier supplied by the user. The application then loops on the <i>active()</i> method, pausing briefly between each call.</p>

<p>The <i>TermPort</i> constructor (see <a name="rl2"><a href="9710j.htm#l2">Listing Two</A>) is where the link identifier is actually used and the connection is established. <i>Vopen()</i> is called with the given link identifier. If the link identifier is invalid, or if the specified link isn't possible to open, an error is produced. Otherwise, the communications link is established and is ready to send and receive data.</p>

<p>Character transmission is handled by the <i>active()</i> method (<a name="rl3"><a href="9710j.htm#l3">Listing Three</A>). Each time it is called, it checks to see if any characters have been entered from the keyboard. If escape was pressed, the connection is closed via the <i>Vclose()</i> function. Otherwise, the character is sent out across the communications link with the <i>Vwrite()</i> function.</p>

<p>Reading character data is the responsibility of the <i>OnCANREAD()</i> event handler (see <a name="rl4"><a href="9710j.htm#l4">Listing Four</A>). This event is fired when there is data waiting to be read from the communications link. It calls the <i>Vread()</i> function with a buffer in which to store the incoming data. This data is then sent to the standard output device for display.</p>

<p><a name="rl5"><a href="9710j.htm#l5">Listing Five</A> contains the <i>OnDISCONNECT()</i> event-handler code. This example app outputs a summary of the link parameters utilized in the just-completed connection within this handler. This information is obtained from the <i>Vgetpar()</i> function.</p>

<p>The only other code required to implement this "generic" terminal application is some simple event-handling for connection confirmation and error reporting; see <a name="rl6"><a href="9710j.htm#l6">Listing Six</A>. There are two different event handlers for error reporting. <i>OnERROR()</i> handles link-connection errors, and calls <i>Vclose()</i> to ensure the failed connection has been properly terminated. <i>OnNONSTD()</i> provides a way for protocol and driver modules to relay protocol- and driver-specific errors. It uses the <i>Vgetpar()</i> function to retrieve the actual error message set by the protocol or driver module.</p>

<p>As you can see from the program code, all the specifics regarding the type of communication are managed by the <i>Vopen()</i> and <i>Vclose()</i> functions. With this strategy, the same code for reading and writing data can be used regardless of the particular type of communications. This provides the code reusability that has escaped communications software in the past.</p>

<h3>Conclusions</h3>

<p>Data communications has been one of the last areas of computer programming to embrace the object-oriented approach and the design efficiencies that come with it. With an object-oriented approach such as LUCA's, you can enjoy the same level of code reusability employed by database access, file I/O, and innumerable other areas of software design within the framework of data communications.</p>
<HR>
<H4><a name="l1">Listing One</H4>

<pre>// We define our own Terminal Port here as a subclass of LUCA's Vport// class.  active() is called from the main loop as often as possible
// to send characters out the port.
<p></p>
class TermPort : public Vport
{
public:
       TermPort(char *link_identifier, char esc_char); // create link
  int  active(); // while it's active, do something else
private:
  int  is_active;
  char escape;
  // overloaded event handlers
  void OnCONNECT();
  void OnDISCONNECT();
  void OnCANREAD();
  void OnNONSTD();
  void OnERROR();
};
int main(int argc, char **argv)
{
  char link_identifier[255];
  TermPort *port;
  cout &lt;&lt; "To use this simple terminal example, you have to enter " &lt;&lt; endl;
  cout &lt;&lt; "a LUCA Link Identifier." &lt;&lt; endl &lt;&lt; endl;
<p></p>
  // Get a new link identifier from the user or command line.
  if (argc == 1) { 
    cout &lt;&lt; "Link Identifier (enter 'quit' to exit):"
    cin &gt;&gt; link_identifier;
  }
  else strcpy(link_identifier, argv[1]);
<p></p>
  // Main loop for communication.  0x1b is the ESC key.
  port = new TermPort(link_identifier, 0x1b);
  while (port-&gt;active()) Sleep(50);
  delete port;
<p></p>
  cout &lt;&lt; "Press any key to return to the operating system." &lt;&lt; endl &lt;&lt; flush;
  char c = getch();
  return 0;
}
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>TermPort::TermPort(char *link_identifier, char esc_char){
  char errorstr[255];
<p></p>
  // Tell the user how to disconnect
<p></p>
  escape = esc_char;
  cout &lt;&lt; "Terminal mode.  Hit"
  if (escape &lt; 32) {
    if (escape == 0x1b)
       cout &lt;&lt; "ESC";
    else
       cout &lt;&lt; "Ctrl-" &lt;&lt; (char)(escape+"@");
    }
  else
    cout &lt;&lt; escape;
  cout &lt;&lt; " to disconnect." &lt;&lt; endl;
  cout &lt;&lt; "Wait for connect..." &lt;&lt; endl;
  if ((Vopen(link_identifier)) &lt; 0) {
    // oops, it failed.
    Verror(errorstr);
    cout &lt;&lt; "No connection: " &lt;&lt; errorstr &lt;&lt; endl;
    is_active = 0;
  } else {
    is_active = 1;
  }
}
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>int TermPort::active(){
  // Try and fetch a character from the keyboard and sent it to port.
<p></p>
  if (is_active) {
    if (kbhit()) {
      char c = getch();
      if (c == escape) {
        is_active = 0;
        cout &lt;&lt; "Closing connection." &lt;&lt; endl;
        Vclose();
      } else if Vwrite(&amp;c, 1) &lt; 0) {
        cout &lt;&lt; "Write Error" &lt;&lt; endl;
        is_active = 0;
      }
    }
  }
  return is_active;
}
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>void TermPort::OnCANREAD(){
  // If we can read, we'll send all data to the console screen.
  unsigned char buffer[8192];
<p></p>
  int n = Vread(buffer, sizeof(buffer));
  if (n &gt; 0) {
    buffer[n] = '\0';
    cout &lt;&lt; buffer &lt;&lt; flush;
  } else if (n == 0) {
    cout &lt;&lt; "Read EOF" &lt;&lt; endl &lt;&lt; flush;
  } else {
    cout &lt;&lt; "Read Error" &lt;&lt; endl &lt;&lt; flush;
  }
}
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<H4><a name="l5">Listing Five</H4>

<pre>void TermPort::OnDISCONNECT(){
  // The connection was lost.  Inform the user what happened and print
  // all communications parameters that were used on this connection.
  char param[256];
  char value[256];
  int n;
<p></p>
  cout &lt;&lt; "The following parameters were used:" &lt;&lt; endl;
<p></p>
  n = Vgetpar("", param);
  while (n &gt; 0) {
    Vgetpar(param, value);
    cout &lt;&lt; "        " &lt;&lt; param &lt;&lt; " = " &lt;&lt; value &lt;&lt; endl;
    n = getpar("+", param);
  }
  cout &lt;&lt; "Disconnected." &lt;&lt; endl &lt;&lt; flush;
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>
<H4><a name="l6">Listing Six</H4>

<pre>void TermPort::OnCONNECT(){
  // everything went well
  cout &lt;&lt; "Connected." &lt;&lt; endl &lt;&lt; flush;
}
void TermPort::OnNONSTD()
{
  // something extra came up -- print it.
  char eventname[255];
  if (Vgetpar("NONSTD", eventname) &gt;= 0) {
    cout &lt;&lt; "Non Standard Event: " &lt;&lt; eventname &lt;&lt; endl &lt;&lt; flush;
  }
}
void TermPort::OnERROR()
{
  // Something else went wrong.  Close down for good measure.
  char err[255];
<p></p>
  Verror(err);
  cout &lt;&lt; "Error! " &lt;&lt; err &lt;&lt; endl &lt;&lt; flush;
  is_active = 0;
  Vclose();
}
</pre>
<P>
<a href="#rl6">Back to Article</A>
</P>

<p><b>DDJ</b></p>


<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
