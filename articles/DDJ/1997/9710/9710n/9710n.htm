<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal October 1997: Java Q&amp;A</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>How do I Write a Java Servlet?</h1>

<p><i>Dr. Dobb's Journal</i> October 1997
</p>
<h3>By Cliff Berg</h3>

<I>Cliff, vice president of technology at Digital Focus, can be contacted at cliffbdf@ digitalfocus.com. To submit questions, check out the Java Developer FAQ Web site at http://www.digitalfocus.com/faq/.</I>

<hr>

<p>Anyone who has written CGI programs is familiar with the request/ response stream application model. When a web server receives a request for a CGI program, it loads the program as a new process, feeds it the input that follows the request, and returns the output from the program to the requesting source. The main advantage of CGI programs is that they are accessible via the Web, and require only a generic piece of client software -- a browser.</p>

<p>The list of disadvantages is much longer, however. There is no standard language for CGI programs, so people have used every language imaginable -- Perl, Tcl, csh, C, C++, and now Java. Since Java is becoming the language of choice for web-deployed applications, it makes sense to unify the language used on the server with the language used for the client. The proliferation of CGI programs written in many languages presents a maintenance problem for web site administrators. Often, a large site will have CGI programs written in a variety of languages, depending on the preferences of individual programmers. Some of these programs can be difficult to decipher, especially if they perform communications services or are multithreaded.</p>

<p>CGI programs are also notoriously hard to debug. While there are tools to assist in debugging these programs, they are nonstandard, and you don't know whether the tools you are familiar with will be available on each web server. An inherent problem with CGI programs is that they execute in a context not directly controllable or viewable by you. When an error occurs, more often than not, the only output is a message saying that there was an error.</p>

<p>From a performance point of view, CGI programs are abysmal. Typical process creation and startup time for a single request is of the order of hundreds of milliseconds. The delay becomes longer if the program needs to access other connection-oriented resources, such as databases. Since CGI programs are stateless, it is difficult to design applications that reuse resource connections, so new connections must be created with every request. This, of course, can be overcome with a more sophisticated multitier design, but the inherent problem is the statelessness of the protocol and the simple-minded invocation technique. </p>

<p>Because each invocation of a servlet runs as a thread instead of a comparatively heavyweight process, servlets have better performance than CGI programs. This kind of invocation strategy can be a hundred times faster, requiring less memory and leading to much better scalability. In addition, once invoked, a servlet object remains in memory indefinitely, ready to respond to further invocations, until the administrator stops it or stops the web server, (and therefore, it may contain state). In other words, it does not have to initialize itself every time it is invoked, and it can maintain persistent connections to data sources.</p>

<p>There are other protocols for creating remote or distributed applications. For example, CORBA lets you create object servers that provide a remote call interface. This is a powerful solution, but requires the installation of CORBA services on the server. This is another major component to administer. Servlets, on the other hand, can be installed on any web server that supports servlets. The Java Servlet Development Kit (JSDK) describes the procedure to configure the Netscape, Microsoft, and Apache servers so that they can support servlets. </p>

<p>It won't be long before most HTTP servers support Java servlets out of the box, primarily for security reasons. Security requires that sophisticated system administrators set up and manage CGI facilities at ISP installations in such a way that the system and other users are protected from errant CGI programs, without completely restricting CGI altogether. Most small ISPs don't bother with restrictions, because they do not have the required expertise to set this up. Larger ISPs, like UUNet, allow CGI programming, but CGI processes are restricted to run in a sandbox, or "rbox." The servlet security manager automatically provides such a sandbox, in a standardized way. Over time, administrators will come to understand this security model, which is simpler to deal with than all the issues that can come into play with CGI-related security. Understanding the Java servlet security model does not require a high level of expertise in a particular operating system, and the issues are the same regardless of the platform. This translates into easier administration.</p>

<h3>What is a Servlet?</h3>

<p>A Java servlet is a Java class that implements the <i>Servlet</i> interface. Conceptually, a servlet is a class that can be instantiated automatically by a server, receive stream input, and send stream output back to the invoking client. The inspiration for servlets comes from the HTTP protocol -- thus, the servlet API is primarily oriented toward HTTP-related functions, but the details of HTTP are abstracted out. <i>HttpServlet</i>, an abstract class that implements <i>Servlet</i>, provides HTTP-specific functionality for processing GET and POST requests. You extend this class if you need to access HTTP header information, such as a user name if authentication is employed (for example, the URL is password protected), or if you need to process POST requests.</p>

<p>In many applications, you will implement the <i>Servlet</i> interface directly. For example, if your servlet has a dual personality and can support RMI invocation, then it will need to extend <i>java.rmi.server.RMIUnicastRemoteObject</i>. You will then have to implement the <i>Servlet</i> methods directly. They are:</p>

<ul>
  <li><i>init(ServletConfig)</i>: Initializes the servlet. Once initialized, the servlet remains active until the web server is stopped, or until it is explicitly removed by an administrative action. This is where you would set up the servlet for business; opening a database connection, and reading initialization data, for example. You must also save the <i>ServletConfig</i> parameter that is passed in, because the server may ask for it back by calling your <i>getServletConfig()</i> method. This method is called the first time a servlet is requested.
  <li><i>getServletConfig()</i>: Returns the <i>ServletConfig</i> object reference you saved when the server called your <i>init(ServletConfig)</i> method.
  <li><i>getServletInfo()</i>: Returns author, version, and copyright.
  <li><i>service(ServletRequest, ServletResponse)</i>: The entry point called by the server whenever someone invokes your servlet. Each request runs in a separate thread, in the process space (virtual machine) of this servlet object. This method should therefore be reentrant (thread safe). The input stream to read from can be obtained from the <i>ServletRequest</i> argument, and the output stream to write to can be obtained from the <i>ServletResponse</i> argument.
  <li><i>destroy()</i>: Releases servlet object resources -- stops threads, closes database connections, and the like. This is the last chance to write persistent data.
</ul>

<h3>The Servlet Development Kit</h3>

<p>Javasoft supplies a development kit for creating servlets, the Java Servlet Development Kit (JSDK), available at http://jserv .javasoft.com/. This kit comes complete with Servlet Runner, a test server for testing your servlets.</p>

<p>At the same location, you can find Javasoft's Java Web Server, written entirely in Java. Needless to say, the Java Web Server supports servlets, but you do not have to download it to develop a servlet (although you might want to in order to test deployment modes not supported by the Servlet Runner). In the same way that Hot Java is the canonical final test of an applet running in a browser, and the applet viewer is merely a quick test bench, the Java Server is a full-featured high-performance server for testing servlets (and publishing web content), while the Servlet Runner is a simple test bench (for example, the Servlet Runner cannot test servlets deployed as embedded server <i>include</i>s). </p>

<h3>How do I Write a Servlet?</h3>

<p>To demonstrate how to write a servlet, I present a servlet called <i>CustomerManager</i>. This servlet can be invoked via an RMI interface and as a servlet. This dual personality is useful in many applications. The servlet could be, for example, a web-based interface for querying status. At the same time, a more full-featured interface for management functions could be accessible only to an RMI client applet.</p>

<p>In my example, the class <i>CustomerManagerImpl</i> (see <a name="rl1"><a href="9710n.htm#l1">Listing One</A> implements the <i>Servlet</i> interface. The methods in this interface are those called by a web server to initialize and invoke the servlet. Each invocation will result in a call to my <i>service (ServletRequest, ServletResponse)</i> method. In addition, the very first invocation after each web-server restart will first call my <i>init()</i> method prior to calling <i>service()</i>. Therefore, I perform all first-time initialization in <i>init()</i>.</p>

<p>This object will also be called by an RMI client. The services published for that client are specified in the RMI interface for this object (which I call <i>CustomerManager</i>). <a name="re1"><a href="9710ne1.htm">Example 1</A> lists its methods (exception specifications have been omitted for brevity). These methods manage a customer database. In my demo, I use an object file, instead of a real database, for simplicity. Thus, in the servlet <i>init()</i> method, I do two things: I register this object as an RMI server object, by calling <i>java.rmi.registry.Registry.rebind()</i>; and I read in the stored <i>Customer</i> object file data, and create an in-memory representation of that data. In a database application, I would likely establish a persistent database connection instead.</p>

<p>The four RMI-based methods in <a href="9710ne1.htm">Example 1</A> must be synchronized, because they access the <i>Customer</i> object. The bodies of these methods are straightforward: They simply provide access to the data in the <i>Customer</i> object, which is a <i>Vector</i> of <i>Customer</i> objects. The <i>Customer</i> object contains data on a customer, including firstname, last name, and age. This data is deliberately simple, so as to not upstage the main points being demonstrated here.</p>

<p>The RMI methods are those called by the management interface to my demonstration system. I provide such an interface in the form of the <i>CustomerManagerApplet</i> applet, which establishes a GUI framework for displaying customer data. It also lets users establish a connection to the servlet (which is an RMI server object) by calling the <i>java.rmi.Naming.lookup()</i> method. Once connected, it allows the user to list, add, modify, and delete customer data. <a name="rf1"><a href="9710nf1.htm">Figure 1</A> shows this applet.</p>

<p>The <i>CustomerManagerImpl</i> servlet (available electronically; see "Availability," page 3) should be invoked by the web server at least once prior to attempting to access it via the management interface. The reason being that it does not perform an RMI bind (or even exist!) until the web server instantiates it and its <i>init()</i> method is called, so the <i>CustomerManagerApplet</i> will not be able to access it prior to invocation. Remember, this servlet object has a dual personality, and it is the servlet personality that knows how to initialize it, so you must call it that way first.</p>

<p>The <i>service()</i> method is called when the servlet is invoked via a web server. There is only one method entry point, so you have to figure out what to do based on parameters or data passed into the input stream. In this case, you retrieve parameters specifying the first name and last name of a customer, then use those to look the customer up in our customers list. If you find the customer, you retrieve all available information about that customer, and write it to the output stream. If you do not find the customer, you write a suitable message saying so. The intended use of this service is a simple human-readable customer status query. <a name="rf2"><a href="9710nf2.htm">Figure 2</A> shows the browser output of the servlet.</p>

<p>The complete code for this servlet, including a script file to build it, is available from <i>DDJ</i> at http://www.ddj.com/, and from Digital Focus at http://www.digitalfocus.com/ddj/code/.</p>

<h3>How do I Deploy and Invoke It?</h3>

<p>Javasoft defines three ways to invoke a servlet:</p>

<p></p>

<ul>
<li>URL. Specify the URL of a servlet directly. This can also be an alias registered with the web server. For example, http:// myhost/servlet/mypackage.myservlet?parm1=abc&amp;parm2=def would invoke the servlet <i>myservlet</i> in package <i>mypackage</i>, in the servlets directory on host <i>myhost</i>. Parameters are specified in the normal HTTP GET query manner.  <li>Server-Side Include. Embed the name of the servlet in an HTML page, much the way you embed an applet in an HTML page. However, the <i>&lt;servlet&gt; </i>tag in HTML is processed by the server prior to sending it to the client, and output from the servlet is substituted in its place; see <a name="re2"><a href="9710ne2.htm">Example 2</A>. The HTML file must have a .shtml extension. A codebase parameter may also be specified. It appears that the Java Web Server, at present, requires a servlet deployed in this way to reside in the server's servlet directory, even if a codebase parameter is specified.
  <li>Chaining. This is configured at the administration level. Chaining allows servlets to be invoked automatically depending on the MIME type of a data stream. Chaining can be used to automatically filter or process data of certain types.
</ul>

<h3>Signing a Servlet</h3>

<p>Servlets are more secure than CGI programs, because they run under the watchful eye of a Java security manager. My demonstration program does two things that could potentially violate Java security policies -- it opens a socket (via RMI), and it reads and writes a file. In the Java Web Server, local servlets installed in the servlets directory are considered trusted, and can perform any of these operations with no difficulty. Thus, all you have to do is place your servlet into the servlets directory (or, if it is in a package, put the package directory in the servlets directory), and then use the Java Web Server admin tool to install the servlet. The Java Web Server also lets you install remote servlets, however, by specifying a remote URL in the admin tool. Remote servlets are not trusted, and they must be signed: You specify the name of the signed JAR file as part of the URL. You can then assign privileges to the remote servlet via an admin access-control list mechanism.</p>

<h3>What Servers Support Servlets?</h3>

<p>The JSDK comes with patches or plug-ins for Microsoft Internet Information Server, Netscape's Enterprise and FastTrack servers, and the Apache web server. In the case of IIS, all you need to do is install a DLL and make an entry in the registry. IIS 2.0 and 3.0 are supported. For the Netscape servers, you must compile servlets with JDK 1.02, and there are some limitations related to multithreading. The Apache server is the most troublesome (always the case with freeware!), since you have to obtain the source and recompile it.</p>

<p>These reconfigurations may seem inconvenient, but should be weighed against the tremendous benefits of the increased security, performance, and maintainability of servlets when compared to CGI. Further, future versions of these servers will likely have servlet support built in. Pure Java servers, like the Java Web Server, already support servlets.</p>

<h3>Conclusion</h3>

<p>Servlets are inherently far more secure than their CGI counterparts, and have much better performance.</p>

<p>Servlets are not the only model for remote Java computing, but they are a powerful and simple one, appropriate for many environments, especially those that are primarily web based. When servlets become more widely understood, they may well revolutionize the server side of the Web the same way that Java applets have already revolutionized the client side.</p>
<HR>
<H4><a name="l1">Listing One</H4>

<pre>/* CustomerManagerImpl.java * Copyright 1997 by Digital Focus. May be used for non-commercial purposes.
 * No warrantee or guaranteed is given or implied. */
 
package customer;
import java.io.*;
import javax.servlet.*;
/** Servlet which has dual-personalities: http and RMI.
 * Allows you to write services that can be accessed from any browser, and 
 * across a firewall without tunneling. */
public class CustomerManagerImpl 
   extends java.rmi.server.UnicastRemoteObject
    implements CustomerManager, Servlet
{
    private ServletConfig servletConfig;
    private java.util.Vector customers;
    static
    {
        // Set security manager for RMI invocation, to protect 
        //    against malicious stubs
        if (System.getSecurityManager() == null)
        {
            System.setSecurityManager(new java.rmi.RMISecurityManager());
            System.out.println("Servlet server has no security manager; 
                                                using RMI security manager");
        }
    }
    public CustomerManagerImpl() throws java.rmi.RemoteException
    {
        super();
    }
    // CustomerStatus methods. The remote entry point implementations are 
    // synchronized, because they may be called my multiple server threads, 
    // either as an RMI service, or as a servlet service.
    public synchronized Customer getCustomer(String firstname, 
                String lastname) throws java.rmi.RemoteException, Exception
    {
        return findCustomer(firstname, lastname);
    }
    public synchronized Customer[] getCustomers() 
                                  throws java.rmi.RemoteException, Exception
    {
        Customer[] ca = new Customer[customers.size()];
        for (int i = 0; i &lt; customers.size(); i++)
        {
            Customer c = (Customer)(customers.elementAt(i));
            ca[i] = c;
        }
        return ca;
    }
    public synchronized void addCustomer(String firstname, String lastname, 
                       int age) throws java.rmi.RemoteException, Exception
    {
        Customer c = new Customer(firstname, lastname, age);
        customers.addElement(c);
        save();
    }
    public synchronized void remCustomer(String firstname, 
                String lastname) throws java.rmi.RemoteException, Exception
    {
        Customer c = findCustomer(firstname, lastname);
       if (c == null) throw new Exception("Not found");
        customers.removeElement(c);
        save();
    }
    protected Customer findCustomer(String firstname, String lastname)
    {
        for (int i = 0; i &lt; customers.size(); i++)
        {
            Customer c = (Customer)(customers.elementAt(i));
            if (c.getFirstname().equals(firstname) &amp;&amp; 
                                            c.getLastname().equals(lastname))
            {
                return c;
            }
        }
        return null;
    }
    protected synchronized void load() throws Exception
    {
        // synchronized to protect access to customers object
        System.out.println("Loading CustomerFile...");
        File file = new File("CustomerFile");
        FileInputStream fis = null;
        try { fis = new FileInputStream(file); } 
                                   catch (FileNotFoundException ex) {}
        if (fis == null)
        {
            customers = new java.util.Vector();
        }
        else
        {
            ObjectInputStream ois = 
                        new ObjectInputStream(new FileInputStream(file));
            customers = (java.util.Vector)(ois.readObject());
            ois.close();
        }
        System.out.println("...done loading.");
    }
    protected synchronized void save()
    {
        // synchronized to protect access to customers object
        System.out.println("Saving CustomerFile...");
        File file = new File("CustomerFile");
        try
        {
            ObjectOutputStream oos = 
                         new ObjectOutputStream(new FileOutputStream(file));
            oos.writeObject(customers);
            oos.close();
        }
        catch (IOException ex)
        {
            System.out.println("Error writing customer file:");
            ex.printStackTrace();
       }
        System.out.println("...done saving.");
    }
    // Servlet methods...
    public void destroy()
    {
        // Save file
        save();
    }
    public ServletConfig getServletConfig()
    {
        return servletConfig;
    }
    public String getServletInfo()
    {
        return "CustomerStatus Servlet";
    }
    public void init(ServletConfig c) throws ServletException
    {
        servletConfig = c;
        init();
    }
    public void init() throws ServletException
    {
        try
        {
            java.rmi.registry.Registry registry = 
                            java.rmi.registry.LocateRegistry.getRegistry();
            registry.rebind("CustomerManager", this);
            System.out.println("Server bound to CustomerManager");
        }
        catch (Exception ex)
        {
            System.out.println("Could not bind:");
            ex.printStackTrace();
        }
        // Load file
        try
        {
            load();
        }
        catch (Exception ex)
        {
            System.out.println("Error reading customer file:");
            ex.printStackTrace();
            throw new ServletException("Terminating due to prior error");
        }
    }
    public static void main(String[] args)
    {
        try
        {
            CustomerManagerImpl m = new CustomerManagerImpl();
            m.init();
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }
    }
    public void service(ServletRequest request, ServletResponse response) 
        throws ServletException, IOException
    {
        System.out.println("Service...");
        // Identify customer
        String firstname = request.getParameter("firstname");
        String lastname = request.getParameter("lastname");
        if ((lastname == null) || (firstname == null))
        {
            response.getOutputStream().println("Both last name and 
                                              first name must be specified");
            return;
        }
        // Retrieve information on the customer
        System.out.println("firstname=" + firstname);
        System.out.println("lastname=" + lastname);
        Customer customer = null;
        try
        {
            customer = getCustomer(firstname, lastname);
        }
        catch (Exception ex)
        {
            throw new ServletException("Error looking up customer.");
        }
        
        // Return information on the customer
        if (customer == null)
        {
          response.getOutputStream().println("Customer could not be found.");
          return;
        }
        response.getOutputStream().println(customer.toString());
    }
}
<P>
<a href="#rl1">Back to Article</A>
</P>

<p><b>DDJ</b></p>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
