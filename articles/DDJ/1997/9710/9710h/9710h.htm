<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal October 1997: Building and Running Online Auctions</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<H1>Building and Running Online Auctions</H1>
<h2>Webalog, a tool for enhancing online commerce</h2>
<p><i>Dr. Dobb's Journal</i> October 1997
</p>

<h3>By Brent Gorda and Gregory V. Wilson</h3>

<I>Brent is president of Bonsai Software and codesigner of Webalog. He can be contacted at gorda@bonsai.com. Greg works for Visible Decisions and can be contacted at gvwilson@interlog.com.</I>

<hr>

<p>With the exceptions of sites such as Amazon.com (http://www.amazon.com/) and Firefly (http:// www.firefly.com/), web-based retailing hasn't really taken off. One reason is that electronic cash is still in its infancy, and many people are reluctant to send credit card numbers over the Internet. A more fundamental reason is that web-based shopping isn't actually much of an improvement over more traditional means. Browsing a catalog online is usually slower than flipping through one made of dead trees, and ordering something via the Internet is rarely quicker than calling a toll-free number. The only real advantage of online catalogs is that they are always up-to-date, but this is not a major concern in most traditional retailing, which tends to be highly seasonal. Few people need to know, for example, exactly when a retailer runs out of winter coats.</p>

<p>However, there is one area where the Web is clearly better than traditional alternatives -- auctions. An auction is inherently interactive, and involves many players instead of a conventional sale's single buyer and seller. Auctions also tend to deal in one-of-a-kind or close-out items, which has traditionally made it ineffective to produce catalogs for all but the highest-priced sales.</p>

<p>In this article, we'll describe a web-site toolkit called Webalog, developed by Bonsai Software, which is being used to construct online auctions and various similar web-based applications.</p>

<p>In an auction, users can browse the items for sale and enter a maximum (proxy) bid price. The Webalog server then plays out the bidding until at least one bidder's maximum price is reached. Other bidders are then asked whether they want to go higher. This cycle repeats until a time deadline is reached, or until an undisputed winner emerges. Online visitors can participate in multiple auctions at the same time, relying on Webalog to keep them abreast of their position in each.</p>

<p>Webalog not only demonstrates how commerce can take advantage of the Web's strengths, but also shows how freeware can be leveraged to build useful, flexible applications as new opportunities arise. In addition to being used for online auctions and catalogs, Webalog is the basis for a benefits-selection system, a biological data registry site, a time-sheet reporting system, a task-management system, and an intranet customer-list system. All of these applications were developed by just four developers in just two years. It is difficult to imagine how such a small team could construct so many diverse products so quickly if freeware had not made it as easy to "recycle" as to "build" or "buy." </p>

<h3>How Webalog Works</h3>

<p>Webalog works by embedding commands and data in HTML pages, then interpreting them on the fly. Commands are written in Tcl. Webalog's designers chose to use Tcl for three reasons:</p>

<ul>
  <li>Tcl is in the public domain, and therefore available for use on almost any platform. 
  <li>Unlike languages such as Perl and Java, Tcl scripts are not compiled to bytecode before being run, but are instead interpreted directly. This speeds up the development/debug cycle and (more importantly) minimizes the startup delay of small applications. 
  <li>Tcl is extensible: You can add commands to the base language without any performance penalty by compiling in your own C libraries. It is also a glue language: It can easily be used to bind databases, existing libraries of code, and custom programs together. 
</ul>

<p>Webalog was originally developed for building catalogs, but its authors soon found that there was considerably more interest in online auctions. One such auction, from which the examples given here are drawn, is at http://www.auctionx.com/ (see <a name="rf1"><a href="9710hf1.htm">Figure 1</A>). When users first retrieve the start page from this site, Webalog fetches a list of the categories of items currently up for auction from a SQL database and turns into HTML. As it does this, Webalog inserts a "session ID" into all of the URLs of that page. A session ID is simply a unique, machine-generated identifier; a new session ID is generated for each user on the first page fetch he or she makes each day, and is threaded into the URLs that Webalog cares about. Subsequent fetches use the session ID to keep track of the state of the session. For example, a typical URL within a page of the site will look like normal HTML: </p>

<blockquote>
<PRE>&lt;a href=/about.html&gt;About&lt;/a&gt; this site. 
</PRE></blockquote>
<p>After a session ID is inserted, this URL would appear as:</p>

<blockquote>
<PRE>&lt;a href=http://www.auctionx.com/q/@035790ztzzgv/about.html&gt;About&lt;/a&gt; this site.
</PRE></blockquote>

<p>Webalog's use of session IDs to track user operations highlights an aspect of the Web that is so obvious that it is often forgotten. Since the only part of the URL that is interpreted at the client side is the address of the machine to which the URL refers, site builders are free to use URLs as more than just pointers. URLs are not physical links to sites, any more than file names are directly mapped to sectors on a disk. Every time a page is fetched, several programs must cooperate to map the URL into a file, then pass the contents of that file back to the requesting browser. The power and flexibility of web-based systems can be greatly enhanced by modifying either the identifier (the URL) or any of the intervening programs.</p>

<p>Session IDs are used to keep track of subsequent page fetches from the same browser, threading the activity together into a session. With this information, Webalog can preload relevant state information from its session database. This database holds such things as the user's login name, his or her shopping basket (in the case of a catalog), and any other information the site builder decided to store. Any information stored to the session database is made available within the context of any other page for the duration of the session.</p>

<p>Webalog uses its own session IDs instead of Netscape cookies to keep track of users for two reasons. First, not all browsers support Netscape cookies, and Webalog was designed to run with everything, everywhere. While it would be possible to hide the Webalog session ID inside a Netscape cookie, this hasn't yet been important enough to merit development effort. The backlash against Netscape cookies is a second reason for using modified URLs instead: To site managers, being nonintrusive and out in the open is actually a selling point for Webalog.</p>

<p>Webalog's heart is a universal CGI-bin script called "QB" that runs on the server side of page fetch. As <a name="rf2"><a href="9710hf2.htm">Figure 2</A> illustrates, QB sits between the server and the web site, watching the conversation, and helping out when asked.</p>

<p>When the server receives a page request, the URL is handed to QB first. QB parses the session ID contained in the URL, then loads the proper context for that session (such as the currently active shopping cart). Any variables from the command line are parsed out and bound to the environment as Tcl variables. QB then loads the requested HTML or CGI-bin file. As the information is passed back to the server for return to the user, QB interprets any Tcl scripts embedded in the page. This provides Webalog with its programmability and will be discussed in more detail shortly. Finally, QB parses the output stream, modifying any URLs it contains in order to thread the session as previously described.</p>

<p>As simple as it is, QB provides all the infrastructure required to build high-end sites, such as session tracking and programmability. As a bonus, this system automatically produces a session log file enabling detailed (and customizable) site-management reports. This information has been used to provide statistics on the typical path visitors take through a site and the amount of time spent in an area (such as the search or help section of the site). This allows site managers to spot unnecessarily long URL chains, or provide quick jumps to frequently visited pages. As the novelty of the Web wears off and competition between sites heats up, this kind of tuning can make the difference between commercial success and failure.</p>

<h3>Embedding Tcl</h3>

<p>What makes QB especially powerful as a site-development tool is that it allows any page to contain sections of Tcl that are executed in place during the page's return from the server. This gives developers a simple, well-known programming environment with which to do powerful scripting within the page. For example, if <a name="rl1"><a href="9710h.htm#l1">Listing One</A> were embedded in a page, users reading that page would see the digits 0 through 9.</p>

<p>Like many systems, Webalog started by using programs to print out HTML. Though it was flexible and programmable, this method led to long chains of hard-to-read <i>put</i> statements (the Tcl equivalent of <i>print</i>). Webalog's designers eventually realized that turning this inside out -- that is, putting the Tcl in the HTML -- was more readable, hence easier for site managers to modify and maintain. It also allowed them to use WYSIWYG page-layout tools, which is a definite plus as more complicated effects are more widely used. Since the processing is done on the server side, the <i>qbtcl</i> tags are consumed, and browsers need not deal with them.</p>

<p>QB also has a simple mechanism for presenting live data using <i>qbsub</i> regions. QB replaces the text of any Tcl variables in a <i>qbsub</i> region with the values of those variables. While it is not as powerful as full-blown scripting, variable substitution enables nonprogrammers (such as graphic artists) to build pages as if they were pure HTML, while taking advantage of many of the capabilities provided by QB. If a bid ID and a manufacturer's description were saved in a session database, for example, <a name="rl2"><a href="9710h.htm#l2">Listing Two</A> would be filled in with the appropriate data in the obvious way.</p>

<p>Variable substitution of this kind greatly enhances the ability of nontechnical webmasters to edit pages for look and feel, while leaving programmers free to work on the code for the logical data movement through the site. Values for variables can be looked up in a variety of databases; the list of currently supported databases includes db, bdb, dbm, Msql, and Informix.</p>

<p>QB uses the session ID for more than tracking; it also provides state for the session. The session ID points into a session database (sdb), using either of UNIX's db or bdb formats, containing information stored by the site programmer. Thus, a login page could include <a name="rl3"><a href="9710h.htm#l3">Listing Three</A>, so that a subsequent page could use this information as part of a database lookup; in the case of <a name="rl4"><a href="9710h.htm#l4">Listing Four</A> for fetching the user information.</p>

<p>Some Webalog users have asked why it uses Tcl, rather than Java or JavaScript. The simplest answer is that neither Java nor JavaScript is available on all interesting platforms (yet). In addition, for many applications, the processing needs to be done on the server side. Bid checking, for example, needs access to the current state of the auction and has to be able to lock the relevant database records for update. As exciting as Java might be, its "let the client compute" model is simply not appropriate for this problem.</p>

<p>Finally, there are some serious drawbacks to client-side Java. It could be used for simple tasks, such as validating form fields, but the caching features of some browsers can cause major problems. Once a user downloads an applet, the browser's cache wants to use that copy for a long time, which makes code updates problematic (unless something like Marimba's Castanet is used, but this, in turn, forces users to download yet another software set). Provider caches can be problematic as well. At one point, America Online changed its caching policy, negatively affecting many content providers. The fix was to have QB insert a simple cache-buster tag into each outgoing page. Other solutions may have required every page on the system to be edited to contain anticaching directives.</p>

<h3>Forms and URL Arguments</h3>

<p>Forms are the most widely used input mechanism on the Web; in fact, some would argue that forms and embedded graphics are what made the Web more than just a point-and-click interface to FTP. In a QB-based site, values in form submissions are automatically bound to the associative array named <i>qb_val</i>. A form submission can therefore be processed using something like <a name="rl5"><a href="9710h.htm#l5">Listing Five</A>.</p>

<p>QB recognizes standard argument-passing tricks, such as embedding options in the URL. When such options are used, QB recognizes and binds the appropriate variable for the programmer. Consider the URL <i>http://www.auctionx .com/bidform.html?lot_ id@663+login@tycho</i>. Within the page "bidform.html," the Tcl <i>lot_id</i> variable would be created and bound to the value "663." Likewise, the Tcl <i>login</i> variable would be created with the value "tycho."</p>

<p>Finally, QB has a number of built-in commands, which take the form <i>qb &lt;command&gt; &lt;args&gt;</i>. Our experience is that any nontrivial interactive web site needs to have the capabilities provided by these functions, just as any nontrivial programming languages needs to support modules, debugging, safe concurrency, and referential data structures. <a name="rt1"><a href="9710ht1.htm">Table 1</A> lists the most commonly used of these commands.</p>

<h3>Conclusion</h3>

<p>Webalog is a good example of "opportunistic" development. Originally intended for use in online catalogs, Webalog was instantly useful in developing online auctions when the demand for them emerged. This rapid development simply would not have been possible without the large amount of high-quality freeware that is now available.</p>

<p>One possible future direction for Webalog is to embed the technology in an HTTP server, further reducing the startup time and overhead involved. Another is to support live auctions through the Web. This would enable Internet users to participate in traditional auctions alongside present participants. This is an area where Java's client-side processing could be of use in combination with Webalog's server-side capabilities.</p>

<p>In the longer term, Webalog auctions are an example of what the agent-based future of networked computing may look like. Every time a user registers a bid, he or she is effectively creating a simple-minded agent that knows how much to offer for something, how aggressively to try to acquire it, and how much its principal is willing to pay. While the agents of the future might be free-floating bits of executable code, their behavior and utility will be similar to that of Webalog's bids.</p>

<H4>For More Information</H4>

<BLOCKQUOTE><P>
Bonsai Software<BR>
2582 Old First Street<BR>
Livermore, CA 94550-3155<BR>
510-606-5420<BR>
http://www.bonsai.com/<BR>
</P></BLOCKQUOTE>

<HR>
<H4><a name="l1">Listing One</H4>

<pre>&lt;html&gt;&lt;qbtcl&gt;
    for {set i 0} { $i &lt; 10 } { incr i } {
        puts "i is $i &lt;br&gt;"
    }
&lt;/qbtcl&gt;
 ...
&lt;/html&gt;
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>&lt;qbsub&gt;    Lot Number: $lotNum&lt;br&gt;
    Description (Manufacturer): $lotDesc &lt;br&gt;
    Quantity Available: $lotQuant &lt;br&gt;
    Current Price: $lotMinBid &lt;br&gt;
    ...
&lt;/qbsub&gt;
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>&lt;qbtcl&gt;   set sdb(login) $username
&lt;/qbtcl&gt;
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>&lt;qbtcl&gt;    if {info exists sdb(login)} {
       set userquery "select * from users where login = \"$sdb(login)\""
       set userhandle [ esql query $userquery ]
        ...
    }
&lt;/qbtcl&gt;
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<H4><a name="l5">Listing Five</H4>

<pre>  ...&lt;qbtcl&gt;
    # was a login provided?
    if [ info exists qb_val(login) ] {
        set sdb(login) $qb_val(login)  # remember this for future use
    }
&lt;/qbtcl&gt;
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>

<p><b>DDJ</b></p>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
