<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Sourcebook March/April 1997: SRDL: A Small Relational Database Language</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>SRDL: A Small Relational Database Language</h1>

<p><i>Dr. Dobb's Sourcebook</i> March/April 1997
</p>
<h2>A tool for prototyping data structures</h2>

<h3>By Sergei Savchenko</h3>

<I>Sergei is a developer for Counselware in Montreal, Canada. He can be contacted at savs@CS.McGill.CA.</I>

<hr>

<p>When developing software, we are often confronted with what appears to be a typical database problem, yet ends up requiring operations some database engines can't deliver. Obviously, what we need in such situations is a tool that lets us quickly create custom, specialized features. The tool I present in this article -- a small relational database language called SRDL -- is designed to provide applications with a considerable amount of flexibility in dealing with database problems. If you are familiar with SQL, you will find a lot of similarities in SRDL. There are differences between the two languages, of course, primarily in the definition of relations, structure of operators, and typing scheme. </p>

<p>SRDL is implemented in C++ (using template classes). The current implementation is about 2500 lines of code. It should compile under GCC and most other modern C++ compilers, and run on practically any platform. The implementation can either be used interactively or embedded into C++ applications that call member functions implementing the operators explicitly. The complete SRDL source code (distributed as freeware) is available electronically; see "Programmer's Services," page 3.</p>

<p>There are two distinguishable levels in the SRDL implementation -- the lower-storage level and the upper-manipulation level. There is a minimal interface between the two, and all algorithmic complexity of operators is in the upper level, with the lower level providing a way to read or write into some particular format on some storage. Multiple implementations of the lower level are possible, so that relations can be stored in different formats (or even in different storage areas; for example, placed into memory to speed up execution of consecutive operators).</p>

<p>I find SRDL helpful in prototyping data structures, especially possible operations on data structures. Of course, it can be extended for practical use as an underlying database engine for many kinds of applications.</p>

<h3>Relations</h3>

<p>Informally, a relation corresponds to a table with repeating rows of numbers or text. More formally, however, a relation is defined as a set of tuples of scalar data. The order of tuples doesn't matter and no tuple appears more than once in the set. Tuple in this notation corresponds to what is often called a "record."</p>

<p>SRDL extends this definition of a relation. Just as with tables on paper, there is often a need for fields that relate to the table as a whole, rather than to any individual record. Table description, totals, and minimum/maximum values are attributes of all tuples combined, rather than any individual record. Thus, SRDL distinguishes between horizontal and vertical fields. The former have instances in every record, whereas the latter are stored separately in a unique instance per relation.</p>

<p>In almost any programming language, you can differentiate between the objects you manipulate and the operations that let you perform manipulations. In this case, relations containing vertical/horizontal fields constitute the manipulated objects and set of relational operators; the relational algebra makes up the operations. Each relational operator takes a single relation or several relations as an argument, and produces a relation as a result. We can say that relations are "closed" under the relational operators. </p>

<p>For most purposes, only a few operators are needed in most database languages. SRDL defines three operators: <i>join, select, </i>and <i>project.</i></p>

<p>The <i>select </i>operator is straightforward. If you specify a selection criteria, only those tuples of the argument that satisfy the criteria are extracted into the result. In <a name="rf1"><a href="9714cf1.htm">Figure 1</A>, a relation with two fields (<i>ID</i> and <i>value</i>) is applied by <i>select </i>with the criteria <i>value&gt;4</i>. As you can see, the record with <i>ID=B</i> has <i>(value=3.1)&lt;4</i>, thus fails the criteria and doesn't appear in the result.</p>

<p>The <i>join </i>operator combines fields specified in two tables. In <a name="rf2"><a href="9714cf2.htm">Figure 2</A>, two relations have fields that contain the same kind of information, notably the <i>ID </i>field. If two records -- one in each relation -- have the same contents in the <i>join</i> fields, you would combine information from both, placing the augmented record into the result relation. In <a href="9714cf2.htm">Figure 2</A>, the record with <i>ID=A</i> from the first table can be joined with two records of the table (numbers 1 and 2) since both have <i>ID=A.</i> This operation is often called a "natural" or "intersection" <i>join. </i>Other kinds of joins can be defined, including a "union" <i>join, </i>which produces somewhat different results.</p>

<p>The purpose of the <i>project</i> operator is to augment or simplify the internal structure of relations. In <a name="rf3"><a href="9714cf3.htm">Figure 3</A>, you want to project the argument relation into another relation continuing to carry the <i>ID</i> field, as well as containing the new <i>tvalue</i> field (computed as <i>items*value</i>). In the next field, you want to add a vertical field into the result. It is recursively defined to be <i>total=0:total+tvalue</i>, meaning that <i>total</i> is to be initialized to 0. For each record, you would readjust <i>total</i> as its previous value plus the contents of the horizontal field <i>tvalue</i>. Since computation proceeds in the order of field definition, <i>tvalue</i> is computed when you evaluate the <i>total+tvalue</i> expression.</p>

<p>In SRDL syntax, horizontal fields are enclosed in curly brackets, while vertical fields are enclosed in square brackets. The length of a field (in bytes) follows the field name. </p>

<p>Although it appears in a <i>project </i>operation that the destination should have exactly the same number of records as arguments, this is not necessarily the case. If you attempt to leave the <i>value</i> field in the result relation, you can potentially get duplicate tuples, since <i>value</i> equals 5 in both record A and record B, which is not allowed by the definition of a relation. </p>

<p>Also, during a <i>project </i>operation, expressions are evaluated in the scope of both source and result relations, with the source relation having priority. In other words, each field is first being looked for in the source relation; the evaluator will only try to locate the field in the destination relation if the first lookup fails.</p>

<p>The <i>project </i>operator is flexible. For example, computing the maximum of the <i>value</i> column for vertical fields is <i>[max:10=0:(!(value&gt;max))*max+(value&gt; max)*value]</i>. Computing the total number of records, on the other hand, is <i>[num:10=0:num+1]</i>. </p>

<p>However, expressions with a legal syntax for a vertical field might well be ambiguous. For instance, in the expression <i>total=0:tvalue-total</i>, the subtraction binary function is not commutative (a-b <img src="noteq.gif" alt="[not equal to]" width="10" height="12"> b-a), which makes the expression depend on the order of records in the relation. But by the definition of a relation, there is no guarantee of any particular order. Opportunities for errors do exist, but fortunately, these errors happen when the expression doesn't have any logical meaning anyway. However, considering opportunities for parallel evaluation, you would have to restrict vertical expressions to some subset of the functions.</p>

<p>Upon further examination of the project operator, you can also see domain or field algebra at work. In the specification of fields, you apply operators to fields and get fields as a result. In SRDL, fields are typeless. The only field attribute that should be described is its length, which (in the current syntax) follows the field name in the field definition. However, there is no explicit information on whether data being stored is integer, real, or textual. </p>

<p>Being typeless has several benefits. For one thing, it simplifies notation. More importantly, it allows some polymorphism. Even though SRDL is typeless (as far as definition is concerned), at the time of expression evaluation, the type is based on the current contents of fields. A value is considered to be an integer if it contains only characters from the set {0123456789}. If it contains characters from the set {0123456789.}, it is considered real. The rest is considered to be textual. </p>

<p>When it comes to scalar data types, there is a hierarchy of integer -&gt; real -&gt; text. For example, a Boolean contains less information then an integer. In fact, a Boolean can always be represented as an integer, just as in C. An integer contains less information then a real (and, in fact, can be represented using a real). Finally, anything (including reals) can be represented as text. </p>

<p>Whenever SRDL evaluates a binary function on operands of different type, it uses the aforementioned hierarchy to upgrade an operand of a lesser type to a higher type, and evaluate the binary function in the space of a single type. <a name="rt1"><a href="9714ct1.htm">Table 1</A> defines the relevant functions and operators. The @ operator in <a href="9714ct1.htm">Table 1</A> provides for the "leaking" of relational algebra into the field algebra; see <a name="rf4"><a href="9714cf4.htm">Figure 4</A>.</p>

<p><a href="9714cf4.htm">Figure 4</A> implies that, for each record of a relation, you can compute a combined attribute of some other relation parameterizing this computation with the current context. Having this operator, you can avoid (in a somewhat expensive way) the need for a reduction operator. Reduction allows you to compute a vertical expression for groups of tuples, as opposed to all tuples in the relation. Tuples fall into different groups based on the contents of some horizontal field (with which the reduction operator is parameterized). Although SRDL doesn't have a true reduction operator, the same effect can be achieved by using the @ operator within expressions for horizontal fields.</p>

<p>Together, relational and field algebra provide a considerable amount of flexibility. This methodology gives an abstraction in which many problems that require some coding effort in imperative languages like C can be trivially solved.</p>

<h3>An Example</h3>

<p><a name="rf5"><a href="9714cf5.htm">Figure 5</A> illustrates a common database layout that contains three relations. Each item from PROD relation is composed of several items from COMP relation, with the CONT relation setting the correspondence. The typical task for a database engine is to produce a table summarizing the contents of some product. You can do this using the sequence of relational operators in <a name="re1"><a href="9714ce1.htm">Example 1</A>(a). Note that the COMP relation contains expressions in the cost column. They are being evaluated using the ? operator. </p>

<p><a href="9714ce1.htm">Example 1</A>(b), which is slightly more complex, finds the number of components per product. The total number of components is being fetched by means of the @ operator from a relation being created for each record of the argument as a result of another project operator. Note here that the inner project is parameterized by a variable from the outer project (<i>prod</i>). From a purely practical point of view, there is a danger of shadowing. When both inner and outer scopes have variables with the same name, the evaluator always takes the inner scope according to the scoping rule, which perhaps was not the intended meaning. Providing function calls with dummy variables can ease this complication.</p>

<p>SRDL can be extended both through adding other relational operators (union join, perhaps a true reduction operator), optimization (adding hidden record indexing), or by adding code for different data formats. The language itself requires function calls that would make coding much more practical.</p>

<p><b>DDJ</b></p>


</body>
</html>
