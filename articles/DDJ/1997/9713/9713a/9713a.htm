<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Sourcebook January/February 1997: CorbaWeb: A Navigator for CORBA Objects</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>CorbaWeb: A Navigator for CORBA Objects</h1>

<p><i>Dr. Dobb's Sourcebook</i> January/February 1997
</p>
<h2>A gateway between HTTP servers and CORBA objects</h2>

<h3>By Philippe Merle, Christophe Gransart, and Jean-Marc Geib</h3>

<I>Philippe, a postgraduate student at the University of Lille, France, can be contacted at merle@lifl.fr. Christophe is a lecturer at the University of Lille and can be reached at gransart@lifl.fr. Jean-Marc, a professor of computer science at the University of Lille, can be contacted at geib@lifl.fr. </I>

<hr>

<p>The CorbaWeb environment (http:// corbaweb.lifl.fr/) is a generic gateway between HTTP servers and CORBA objects. CorbaWeb, which can be classified as a "generic object navigator" (see P. Merle et al., "CorbaWeb: A Generic Object Navigator," <i>Proceedings of the 5th International World-Wide Web Conference</i>, May 1996) enables World Wide Web clients to navigate through CORBA object links using dynamically generated URLs for each object. CorbaWeb is composed of meta scripts allowing the access, representation, and invocation of any CORBA object across the Web. These operations are executed by scripts (currently CGI programs) written in the CorbaScript interpreted scripting language.</p>

<p>The CorbaWeb environment has been implemented on a Sun SPARCstation with Orbix 2.0 for Solaris 2.4 (for more information, see P. Merle et al., "CorbaScript and CorbaWeb: A Generic Object-Oriented Dynamic Environment upon CORBA," <i>Proceedings of TOOLS Europe'96</i>). The CorbaWeb prototype implementation consists of 20,000 lines of C++ code including the syntax analyzer, interpreter engine, and CORBA-specific code. We plan to adopt another server API, like Apache API instead of CGI, to improve performance, but the CorbaWeb architecture will not be modified. CorbaWeb was designed to support a Shared Information Space (SIS) model in which highly distributed information is accessed by large numbers of cooperative users. An SIS is delivered by distributed servers and accessed by standard client programs. As opposed to the World Wide Web, an SIS is structured by various types of objects. Users navigate an SIS by following links between these objects. Any operation can be invoked on these objects. Navigation is accomplished by a single, uniform user interface (a browser) no matter what the information types. The navigator adapts itself to the user's profile and to the object types. An SIS also manages object-access control policies to protect information confidentiality and prevent anybody from accessing and modifying information. The four major facets of this model involve:</p>

<ul>
  <li>Object orientation, which allows the construction of applications using classes. SIS makes it possible to mix classical and multimedia objects: data (databases), services (computational objects), and multimedia (sound, image, video objects).
  <li>Distributed/heterogeneous environments, in which clients and servers are running on different architectures and operating systems. Communication between several programs is achieved using the common protocols: HTTP between web clients and web servers; IIOP (see "Universal Network Objects," OMG Document Number 94.9.32) between CORBA applications.
  <li>Navigation and invocation through a single, uniform user interface. Users always apply operations and show results in the same way, no matter what kind of information they manipulate or computing environment they use. Traditionally, you find N user interfaces for N applications. In the SIS model, you use one interface for all applications, and all navigation through this space is accomplished via hypertext. In an application designed with object methodology, for example, users can follow the references between objects to browse information contained in objects.
  <li>Users' point of view. In the SIS model, information is displayed according to a user's profile. In a medical application, for example, a physician can browse a patient's medical folder, seeing <i>all</i> information about the patient. When browsing the same folder, however, a hospital receptionist sees only a part of it (patient name and address). As the information space is shared between several users, object access-control policy protects information confidentiality, and prevents anybody from accessing and modifying any information.
</ul>

<p>To implement SIS environments, you will need:</p>

<ul>
<li>An Interface Definition Language (IDL) to specify SIS object interfaces.  <li>The Common Object Request Broker Architecture (CORBA) to support SIS object servers.
  <li>Web browsers as a single, uniform user interface to navigate through SIS objects.
  <li>URLs to access objects and apply operations on them. 
  <li>HTML to present the object state.
  <li>CGI in web servers as a gateway between the Web and SIS objects.
</ul>

<p>From a technological point of view, our work involves the integration of the Web and CORBA. Services are implemented in an appropriate language and are accessible through a standard web browser or specific CORBA client application. On the web side, we're investigating how to access any CORBA-based information system, even if the system was not designed for the Web. In short, the SIS model provides the best CORBA-based object-oriented programming and web-based hypermedia navigation.</p>

<h3>The CorbaWeb Environment</h3>

<p>Recognizing the need for a standard in object-oriented application interoperability, the Object Management Group (OMG) created a unified, distributed architecture to promote object technologies. The CORBA specification defines an object-oriented messaging facility for distributed-object environments. </p>

<p>CORBA provides interoperability between applications on different machines in heterogeneous distributed environments and seamlessly interconnects multiple object systems. CORBA is specified independently of any programming language, since object interfaces are described in the IDL. As <a name="rf1"><a href="9713af1.htm">Figure 1</A> illustrates, a typical CORBA environment consists of:</p>

<ul>
  <li>A client/server object-oriented invocation system. The communication between objects is supported by a standard stubs mechanism generated by the compilation of IDL descriptions. This separation hides distribution and permits heterogeneity between the service consumer (client) and the service producer (server). 
  <li>An adaptive object-support policy. CORBA provides object adapters to accommodate a diverse range of object features such as lifetime and granularity policies.
  <li>A reflexive environment. CORBA provides objects at run time to retrieve IDL information (Interface Repository). It facilitates dynamic type checking and allows the construction of requests through the dynamic invocation interface (DII).
</ul>

<p>The IDL allows the definition of types, structures, exceptions, and interfaces. An object interface is a set of attributes and operations applying to its instances. Each operation is specified by a return type, operation name, set of parameters, and list of related exceptions. Each parameter is specified by a call mode (<i>in</i>, <i>out</i>, and <i>inout</i>), type, and name. A type can be any basic IDL type (integer, double, Boolean, char, string, object reference) or constructed type (structure, sequence, array, union, or object interface). Operations can return exceptions to signal problems.</p>

<p><a name="re1"><a href="9713ae1.htm">Example 1</A> is an IDL description that defines the object-interface computer. This interface contains three operations: <i>is_prime_number</i> determines if a number is prime; <i>prime_numbers</i> computes prime numbers less than a specified value; and <i>decompose_into_prime_factors</i> decomposes a number into its prime factors.</p>

<p>This object type can be implemented with any CORBA-supported language. A language mapping defines how this language interfaces with CORBA. Currently, the mappings for C, C++, Smalltalk, and Ada95 have been specified by the OMG.</p>

<h3>The CorbaWeb Architecture</h3>

<p>To promote integration between the World Wide Web and CORBA objects, the CorbaWeb environment acts as a generic gateway between HTTP servers and CORBA systems. The web browser manages user interactivity and sends user actions to the web server. CorbaWeb receives user actions and executes operations on CORBA objects. These operations are invoked by scripts written in CorbaScript.</p>

<p>The CorbaWeb architecture (see <a name="rf2"><a href="9713af2.htm">Figure 2</A>) is supported by:</p>

<ul>
  <li>Standard WWW technology. Any web browser acts as a GUI to browse and invoke CORBA objects represented both by HTML anchors (to access objects) and HTML Forms (to invoke operations on them).
  <li>CorbaWeb interprets user requirements by invoking objects. It is composed of many CorbaScript CGI scripts that invoke objects and generate HTML documents to show request results. 
  <li>CorbaScript lets you write scripts that dynamically invoke objects. This language contains constructions to manage variables, control execution flow, catch exceptions, and the like.
  <li>The CorbaWeb (CorbaScript) interpreter translates CGI parameters into CorbaScript variables.
  <li>The CORBA environment supports the heterogeneous distributed-object-oriented system and the DII.
  <li>The Interface Repository contains a graph of objects representing IDL descriptions. These objects are dynamically invoked to check invocations of scripts.
  <li>The CorbaWeb Repository maintains CorbaWeb environment information. For instance, it stores representation and access-control information. This information is structured by CORBA objects. It is handled by special scripts (also called "meta scripts").
</ul>

<h3>The CorbaScript Language</h3>

<p>A CorbaScript program is a sequence of instructions.</p>

<p>The <i>print</i> instruction outputs any value. It recursively explores structures, unions, arrays, and sequences to display their field values. For instance, a structure is displayed by an HTML list. Each field is an item of this list. An object reference is displayed by an HTML anchor referring to a CGI script that displays the object.</p>

<p>The assignment instruction (=) assigns a value to a variable. Variables are defined at their first use. A variable can be set with any IDL value.</p>

<p>The conditional-test instruction is constructed as follows: <i>test_construction ::= if condition { instructions1 }[ else { instructions2 } ]</i>. <i>instructions1</i> is executed if <i>condition</i> is True; otherwise <i>instructions2</i> is executed.</p>

<p>The conditional-loop construction is <i>loop_ construction :: while condition { instructions }</i>. The instruction is executed while condition is True.</p>

<p>The exception-management construction handles CORBA exceptions; see <a name="re2"><a href="9713ae2.htm">Example 2</A>. This construction executes <i>instructions1</i>. If an exception is raised by one operation of <i>instructions1,</i> then <i>instructions2</i> are executed. Several exception types can be caught, and each is managed by a separate <i>catch</i> clause. If an unexpected exception is raised, then <i>instructions3</i> are executed. If an exception is raised from a <i>catch</i> block (<i>instructions2</i>, <i>instructions3</i>, for example) then it is propagated in the previous block.</p>

<p>The invocation mechanism (. operator) permits operation calling, attribute getting, or attribute setting on any CORBA object.</p>

<p>Objects are dynamically invoked through the DII. CorbaScript and its interpreter hide the complexity of using the DII. The interpreter translates scripts into dynamic invocations. Invocations are checked, thanks to the IDL signatures retrieved from the Interface Repository. The parameters are dynamically checked and inferred if necessary. The interpreter dynamically constructs a request according to parameters. This request is then sent to the ORB. The ORB executes the request on the appropriate object and returns the result.</p>

<p>A script is a set of instructions handling values and variables. A CorbaScript value could be:</p>

<ul>
  <li>Any basic value like integer, float, character, or string. 
  <li>A set of CorbaScript values such as <i>(10, 'a', "hello")</i>.
  <li>The result of an operation invocation on an object.
  <li>Any CORBA typed value composed of an IDL type and set of values.
  <li>Any expression with standard operators (+, or, &lt;, ...).
  <li>A variable (<i>computer</i>, for example). 
  <li>A CORBA object reference.
</ul>

<p>A CorbaScript object reference of a CORBA object is composed of an IDL object interface, object name, application name, and host name. For example, <i>computer("my_computer:computerSvr:blanche")</i> refers to an object of type <i>computer</i> with the name <i>my_computer</i>. This object is managed by the <i>computerSvr</i> application that runs on the host <i>blanche</i>.</p>

<p>We have a complete mapping of IDL in CorbaScript so we can handle simple or composed IDL values (integer, character, string, sequence, union, and so on). The shell performs type inference on the parameters; for example, <i>(10, "hello", True)</i> given as a parameter to a method call is translated into the appropriate IDL structure. The user does not give the IDL types for the items in the structure or the structure type; all this work is done by the interpreter.</p>

<h3>A CorbaScript Example</h3>

<p>Although it is not directly accessible from the standard Web, the previous object <i>computer</i> can be a web service. CGI protocol provides a way to access it -- designing a CGI script that acts as a gateway between a web server and a <i>computer</i> instance. Consequently, this CGI program is referred by the <i>/cgi-bin/prime_service</i> URL. The CGI program generates the graphical interface to use an object <i>computer </i>(other solutions are possible). <a name="rf3"><a href="9713af3.htm">Figure 3</A>, an HTML document generated by this CGI script, contains HTML Forms to call the various operations of this object. The action associated with each form is a URL to the CGI script with a distinct query string (for example, <i>?is_prime</i>, <i>?prime_numbers</i>, and <i>?decompose</i>). <a name="rl1"><a href="9713a.htm#l1">Listing One</A> llustrates how to a write CGI script to access a CORBA object <i>computer</i>. </p>

<p>The CorbaScript interpreter (named "cwsh") translates CGI parameters into CorbaScript variables. The variable <i>computer</i> refers to a computer instance. This script generates an HTML document according to the value of the CGI variable QUERY_STRING. If it contains:</p>

<ul>
  <li>a null value, the script generates HTML Forms (<a href="9713af3.htm">Figure 3</A>) to use the service.
  <li>an <i>is_prime</i> value, then it invokes the <i>is_prime_number</i> operation of the <i>computer</i> object.
  <li>a <i>prime_numbers</i> value, then it invokes the <i>prime_numbers</i> operation of the <i>computer</i> object. 
  <li>a <i>decompose </i>value, then it invokes the <i>decompose_into_prime_factors</i> operation of this object.
</ul>

<p>After each invocation, the script displays the invocation result.</p>

<p>CorbaScript simplifies the implementation of CGI scripts that interface objects with the Web. Still, this first approach looks like standard CGI programming, the main difference being that CorbaScript is a dynamically interpreted scripting language specially designed for CORBA and OMG-IDL. Thus, the web integration of several million objects and several hundred object interfaces requires you to program a plethora of CGI scripts. Meta scripts solve this problem.</p>

<h3>CorbaWeb: A Set of Meta Scripts</h3>

<p>Meta scripts allow the definition of generic actions on CORBA objects. These scripts take parameters (like object references or scripts) and apply meta operations (such as an object browsing or a script executing) on them.</p>

<p>The Exec meta script (see <a name="rl2"><a href="9713a.htm#l2">Listing Two</A>) takes a script as a parameter, then executes it. It allows users to invoke operations on any object from a web browser. If the parameter is not set, then the script generates an HTML Form and the user types its parameter script.</p>

<p>The Exec meta script in <a href="9713a.htm#l2">Listing Two</A> presents the instruction <i>eval</i> and a variable EXCEPTION. The <i>eval</i> instruction takes one string as a parameter and executes it as a CorbaWeb script. This executed script can raise exceptions and the meta script must catch them and signal the web user. The variable EXCEPTION stores the last exception. CorbaWeb unmarshals an exception into an HTML list as it unmarshals complex IDL types. This generic unmarshaling is based on the possibility of exploring a CORBA TypeCode (which represents an IDL type) at run time.</p>

<p>The script aims to provide a distant invocation mechanism for mobile code. The next meta script reuses the first meta script to provide a generic object browser that allows the invocation of any defined operation on any object type.</p>

<p>The Interface meta script takes an object reference as a parameter and generates an HTML document containing one HTML Form for each operation of the object IDL interface. The action of each Form refers to the Exec meta script. From the object reference, the script retrieves its interface object. This object is managed by the Interface Repository. The script accesses the IR object and retrieves all operations and attributes of this interface. It generates a form for each operation or attribute. When an operation takes parameters, it generates HTML input text fields. For an <i>enum</i> parameter, it generates a popup menu (&lt;SELECT&gt;..&lt;/SELECT&gt; in HTML). For instance, the <i>computer</i> object can be browsed via HTML Forms (see <a name="rf4"><a href="9713af4.htm">Figure 4</A>(a)) automatically generated by the Interface meta script. Then it can be invoked via the Exec Meta Script in <a href="9713af4.htm">Figure 4</A>(b).</p>

<p>The Exec and Interface meta scripts define basic meta operations (that is, invocation and browsing) allowing users to access and invoke any object. In a shared information space, however, objects must be displayed according to users' profiles. For each object type and profile, we associate a View script. These scripts are composed of CorbaScript instructions that generate an HTML document representing the object state. They are stored into the CorbaWeb Repository.</p>

<p>Thus, the View meta script in <a name="rf5"><a href="9713af5.htm">Figure 5</A> takes two parameters -- an object reference and a profile (1). It retrieves from the CorbaWeb Repository the appropriate view script according to the object type and profile (2). Then it executes the retrieved script (3), which calls attributes and operations on the object (4), and generates an HTML document presenting the object state (5). The script can also generate HTML forms to invoke object methods.</p>

<p><a name="rf6"><a href="9713af6.htm">Figure 6</A>, for instance, shows a complex HTML document generated by View scripts. This figure illustrates a hospital information system mixing multimedia and structured-object information. In this example, the user is a physician whose profile is mapped by the HTTP authentication mechanism. Note that navigation across structured information is achieved by anchors. These anchors are dynamically generated URLs referring to the View meta script.</p>

<p>The concept of meta scripts allow seamless integration of any CORBA object into the Web. These scripts are designed for general purposes and handle meta operations on objects. Meta scripts can be used in many ways, including distant invocations supported by the Exec meta script, HTML Forms representing IDL object interfaces that are automatically generated by the Interface meta script, View meta scripts that allow the generation of HTML or MIME documents representing the state of any object, and (in the near future) VRML documents that could be generated by a VRML meta script to navigate in 3-D objects.</p>

<p>The CorbaWeb environment can be incrementally extended thanks to meta scripts. Moreover, meta scripts permit the integration of legacy CORBA objects (that is, those not designed for the Web) without object modification.</p>

<h3>Conclusion</h3>

<p>The integration of the Web and object-oriented design provides a great way to manage the explosion of web services. We are currently testing this environment on a hospital information system. This experimentation will enable us to define new required meta scripts and propose an object-access-control policy for the CorbaWeb environment.</p>

<p>Our SIS model combines the benefits of both environments -- the WWW as a hypermedia browsing environment and CORBA as an object-oriented structuring system. It is our belief that the WWW and CORBA will merge to provide the next infrastructure for distributed client/server computing.</p>

<h3>References</h3>

<p>Merle, P., C. Gransart, and J.M. Geib. "CorbaScript and CorbaWeb: A Generic Object-Oriented Dynamic Environment upon CORBA." <i>Proceedings of TOOLS Europe '96</i>. Prentice-Hall, February 1996. http://www .lifl.fr/~merle/papers/TOOLS96.ps.gz.</p>

<p>Merle, P., C. Gransart, and J.M. Geib. "CorbaWeb: A Generic Object Navigator." <i>Proceedings of the Fifth International World-Wide Web Conference</i>, May 1996. http://www.lifl.fr/~merle/papers/96_WWW5/paper/Overview.html.</p>

<p>Object Management Group. "The Common Object Request Broker: Architecture and Specification." Revision 1.2. OMG Document Number 93.12.43, December 1993. ftp://ftp.omg.org/pub/docs/1993/93-12-43.ps.</p>

<p>Object Management Group. "Universal Network Objects." OMG Document Number 94.9.32, September 1994. ftp://ftp .omg.org/pub/docs/1994/94-09-32.ps.</p>

<p>The Orbix Home Page at IONA Technologies. http://www.iona.ie/.</p>

<h4>For More Information<br>
<br>
<a href="http://corbaweb.lifl.fr/">The Corbaweb home page</a></h4>
<p><b>DDJ</b></p>

<a name="l1"><h4>Listing One</h4>
<pre>#! /bin/cwsh
print "Content-type: text/html\n\n&lt;HTML&gt;\n"
computer = computer("my_computer:computerSvr:blanche")
if ( QUERY_STRING == "" ) {
  # generates HTML Forms (see Figure 3)
  # each text field of HTML forms is named 'number'.
}
if ( QUERY_STRING == "is_prime" ) { ... invokes computer and displays result ...
}
if ( QUERY_STRING == "prime_numbers" ) {
  result = computer.prime_numbers(number)
  print "The prime numbers less than the number " , number , " are\n&lt;P&gt;\n"
  print result
}
if ( QUERY_STRING == "decompose" ) { ... invokes computer and displays result
 ... }
print "&lt;/HTML&gt;\n"
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<a name="l2"><h4>Listing Two</h4>
<pre>#! /bin/cwsh
print "Content-type: text/html\n\n&lt;HTML&gt;\n"
if ( QUERY_STRING &lt;&gt; "" ) {
  print "&lt;TITLE&gt;" , QUERY_STRING , "&lt;/TITLE&gt;\n&lt;BODY&gt;\n"
  try {
    print eval ( QUERY_STRING )
  } catchany ( EXCEPTION ) {
    print "Exception raised: " , EXCEPTION
  }
  print "&lt;/BODY&gt;\n&lt;/HTML&gt;\n"
} else {
  # generates HTML Form for user's input
}
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
</body>
</html>
