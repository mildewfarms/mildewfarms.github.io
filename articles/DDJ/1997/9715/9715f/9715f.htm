<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Sourcebook May/June 1997: A Visual User Interface Manager</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>A Visual User Interface Manager</h1>

<p><i>Dr. Dobb's Sourcebook</i> May/June 1997
</p>
<h2>An object-oriented model for handling visual objects</h2>

<h3>By Saurabh Dixit</h3>

<I>Saurabh is a contract programmer who can be reached at sdixit@ix.netcom.com.</I>

<hr>
Sidebar:<a name="rs1"> <a href="9715fs1.htm"><i>Property Lists</i></a>
<hr>
<p>Visual programming environments such as Microsoft's Visual Basic and Borland's Delphi have become popular (in part) because visual interaction with objects on the screen is highly intuitive. Users manipulate and set up various user-interface components by assigning appropriate data to the objects' properties. With complex systems, however, managing visual objects can be a chore. Consequently, I'll present an object-oriented model for managing visual objects. This model is based on a flexible Microsoft Foundation Class (MFC) extension cluster implementation. The complete system -- including source code, executables, related files, and sample programs -- is available electronically; see "Programmer's Services," page 3.</p>

<h3>Properties</h3>

<p>To implement the model, I started by defining an abstraction for an object property (see PROP.H, also available electronically). The class <i>CProperty</i> derives from the class <i>CObject</i>, enabling it to be serializable. <i>CProperty</i> encapsulates not only the data type of an object's property, but also the string representation and validation that goes with it. <a name="rt1"><a href="9715ft1.htm">Table 1</A> describes the methods.</p>

<p>From the <i>CProperty</i> abstraction, I derived other base property classes for (most of) the commonly used built-in Win32-specific data types. <a name="rf1"><a href="9715ff1.htm">Figure 1</A> shows the inheritance hierarchy for this. All the base property class types require data access methods, such as <i>data set</i> and <i>data get</i> member functions. The signatures for the methods are identical, except that the underlying data type argument and return values are different. <a name="rl1"><a href="9715f.htm#l1">Listing One</A> llustrates this by showing how to read/write <i>CIntProperty</i> and <i>CColorProperty</i> instances. <i>CProperty</i>, of course, knows nothing about the data. However, it does stipulate that the base properties provide their own string representations. This is done through the pure virtual <i>ValueString()</i> method. In <a name="rl2"><a href="9715f.htm#l2">Listing Two</A>, <i>ValueString()</i> is implemented for <i>CColorProperty</i>. Thus, the data type of a property (COLORREF in <a href="9715f.htm#l1">Listing One</A>) is independent of its data's string representation.</p>

<p>The overridable <i>ValueStrings()</i> method is useful for the property object to return valid choices that its data can take. This is handy for implicit data validation on assignment -- users are allowed to set a property's value only from the available choices. <a name="rl3"><a href="9715f.htm#l3">Listing Three</A> is the <i>ValueStrings()</i> implementation for <i>CBoolProperty</i>. Whether <i>ValueStrings()</i> is implemented or not depends on where the <i>CProperty</i> protected member <i>m_valuetype</i> is assigned. <i>ValueStrings()</i> is required only if <i>m_valuetype</i> is <i>VT_RANGE</i> or <i>VT_CHOICE</i>. I have implemented some custom properties that illustrate this (see CUSTPROP.H, available electronically). For instance, <i>CFontNameProperty</i> overrides this part of its <i>CStringProperty</i> base to return all the names of fonts I want my application to use; see <a name="rl4"><a href="9715f.htm#l4">Listing Four</A>.</p>

<p>First, the properties value type is set to <i>VT_CHOICE</i> in the constructor, overriding the default setting of <i>VT_NORMAL</i>. Then, the allowed fonts are returned in the <i>CStringArray</i> variable passed to <i>ValueStrings()</i>. Similarly, <i>CFontSizeProperty</i> (see CUSTPROP.H) sets the <i>CUIntProperty</i> default setting to <i>VT_RANGE</i> and returns the string representations for point sizes between 8 and 24. Note that the property data type is still independent of its string representation.</p>

<p>Clearly, this model is extensible. <i>CFileProperty</i> (see PROP.H), which inherits from <i>CStringProperty,</i> overrides its <i>Data()</i> method to confirm when users want to allow a (as yet nonexistent) filename to be set to the property's data; see <a name="rl5"><a href="9715f.htm#l5">Listing Five</A>. Explicit data validation can be performed in this fashion. Another example is the <i>CRpmProperty</i> (see CUSTPROP.H), which only allows an RPM value between 10 and 100 inclusive.</p>

<p>By keeping the encapsulated data types of property objects independent of their string representations, more meaningful versions of properties can be created. <i>CSwitchProperty</i> (see CUSTPROP.H) overrides the <i>ValueStrings()</i> method of its base <i>CBoolProperty</i> (see <a name="rl6"><a href="9715f.htm#l6">Listing Six</A>) to return "Off" and "On" instead of the default "False" and "True" string representations of the Boolean value. From these examples, it should be clear how implicit and explicit validation of the underlying data type can be achieved while changing the string representation at will.</p>

<p>Finally, <i>CProperty::StringData()</i> lets all derived classes provide proper data assignment from a string representation of the property data; see <i>CIntProperty::StringData()</i> in <a name="rl7"><a href="9715f.htm#l7">Listing Seven</A>.</p>

<h3>Objects</h3>

<p>With the property representation out of the way, I concentrated on the visual object's data representation. On its own, the object's data is simply a bunch of properties. The data, coupled with its visual representation, has a control window associated with it. <i>CControlData</i> (see CTRLDATA.H, available electronically), the abstraction for representing the data, has some stock properties defined on it. More complex objects can be created by deriving other objects from this base class, and adding other base property class members as required. The <i>CreateControl()</i> pure virtual method is used to force any derived object class to provide its visual representation on the screen. For example, a fan object <i>CFan</i> (see FAN.H) has its visual representation implemented through a <i>CFanWnd</i> (see FANW.H and FANW.CPP) instance as depicted in <a name="rf2"><a href="9715ff2.htm">Figure 2</A>.</p>

<p>Just like the <i>CProperty</i>-derived base property classes, <i>CControlData</i> is perfectly extensible. The file-display object <i>CFileText</i> (see FILETXT.H) and its visual representation <i>CFileTextWnd</i> (see FILETXTW.H and FILETXTW.CPP) allow a text file to be displayed on the screen. An extension of this object, <i>CFileTextEx</i> (see FILETXT.H), and its visual representation <i>CFileTextExWnd</i> (see FILETXTW.H and FILETXTW.CPP) allow you to extend that implementation by providing additional capabilities to the original object; for example, the ability to choose the text's typeface and point size. <i>CFileTextEx</i> is subclassed from <i>CFileText</i>, while <i>CFileTextExWnd</i> is derived from <i>CFileTextWnd</i>.</p>

<p>Together, the <i>CProperty</i>-based property type implementations and the <i>CControlData</i>-based control data objects let you create a reusable framework of C++ classes for defining object data and visual representations that are loosely coupled with each other. This loose coupling facilitates code reuse.</p>

<h3>VUIM</h3>

<p>The Visual User Interface Manager (VUIM) is a sample application (available electronically) that demonstrates how the aforementioned model can be put to use. My implementation fits well with the MFC Document/View architecture. The document class <i>OnNewDocument()</i> method looks like <a name="rl8"><a href="9715f.htm#l8">Listing Eight</A>. Ordinarily, the information for creating the objects would be serialized from disk. <i>OnNewDocument()</i> simply decides to create a <i>CFan</i>, a <i>CFileText,</i> and a <i>CFileTextEx</i> object.</p>

<p>VUIM operates in design and application mode and is, therefore, an SDI application with two views -- one for each mode in which the application executes at any instant; see <a name="rf3"><a href="9715ff3.htm">Figure 3</A>. In design mode, objects are set up by manipulating their properties through a property list (see the accompanying text box, entitled "Property Lists"). The design view looks at the document data and prompts the control objects to create their visual representations through a <i>CreateControl()</i> implementation required by all <i>CControlData</i> derived objects, supplying a <i>CControlDesignWnd</i>* as the parent. The design view maintains the currently selected object at all times through its <i>m_pSCDW</i> member, which is also reflected in the document. <a name="rl9"><a href="9715f.htm#l9">Listing Nine</A> is the view's <i>OnInitialUpdate()</i> method. </p>

<p>CControlDesignWnd (see CTRLDWND.H and CTRLDWND.CPP) allows the contained visual representation to be sized and moved. By simply having the visual-representation window disabled in design mode, <i>CControlDesignWnd</i> uses a <i>CRectTracker</i> MFC helper to control how the windows are manipulated on the screen. The visual-control window knows that it is being created in design mode through the last parameter passed to object data class <i>CreateControl()</i> method by <i>CControlDesignWnd::Create()</i>; see <a name="rl10"><a href="9715f.htm#l10">Listing Ten</A>.</p>

<p><i>CreateControl(),</i> in turn, passes this information on to the visual-object control window (see <a name="rl11"><a href="9715f.htm#l11">Listing Eleven</A>) for <i>CFileTextEx</i> and <i>CFileTextExWnd</i>. This case is trivial since <i>CFileTextExWnd</i> simply delegates creation to <i>CFileTextWnd</i>. A <i>WM_NCHITTEST</i> handler is used in <i>CControlDesignWnd</i> to return the appropriate code for sizing the control, using the code returned by the <i>CRectTracker</i> instance. <i>WM_SIZE</i> and <i>WM_MOVE</i> handlers are used to handle additional coordinate translation and to keep the object property data in sync with what is displayed in the object's property list. </p>

<p>The application view simply lets the control data object create the visual representation as an enabled child window of the view. <a name="rl12"><a href="9715f.htm#l12">Listing Twelve</A> presents the view's <i>OnInitialUpdate()</i> method. This time, the object data class <i>CreateControl()</i> method is invoked with the final <i>bDesign</i> parameter set to <i>FALSE</i>.</p>

<p>VUIM is a good testing tool, letting users switch at will between the two modes of execution. The application was built and tested on Windows 95. <a name="rf4"><a href="9715ff4.htm">Figure 4</A> shows the application running in design mode and <a name="rf5"><a href="9715ff5.htm">Figure 5</A> shows it in application mode.</p>

<h3>Conclusion</h3>

<p>With the model implemented here, you can easily incorporate visual objects in any application. For a visual programming environment, triggering events simply requires public methods in the visual-representation window class acting as event handlers. The classes described here could even be deployed in off-the-shelf applications for configuring dynamic interfaces. For example, instead of the vendor providing an application that can view one or more text files, the underlying component could be exposed to the end user. This way, if an application is intended to be used to view the same three files simultaneously in a proposed MDI application, it could be set up once to bring those files up in design mode.</p>

<p><b>DDJ</b></p>

<H4><a name="l1">Listing One</H4>

<pre>CIntProperty int_p;                   // an integer (int) property instanceCColorProperty color_p;               // a color (COLORREF) property instance
int_p.Data (1);                       // set data to 1
color_p.Data (RGB(255,0,0));          // set data to 'Red'
int intval int_p.Data ();             // fetch integer value
COLORREF colorval color_p.Data ();    // fetch color value
<p></p>
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>void CColorProperty::ValueString (CString&amp; szValue){
    szValue.Format ("RGB (%u,%u,%u)",
        GetRValue (m_data),
        GetGValue (m_data),
        GetBValue (m_data));
}
<p></p>
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three </H4>

<pre>void CBoolProperty::ValueStrings (CStringArray&amp; szValueA){
    szValueA.Add ("False");
    szValueA.Add ("True");
}
<p></p>
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>CFontNameProperty::CFontNameProperty (){
    m_valuetype VT_CHOICE;
}
void CFontNameProperty::ValueStrings (CStringArray&amp; szValueA)
{
    szValueA.Add ("Arial");
    szValueA.Add ("Courier New");
    szValueA.Add ("Ms Sans Serif");
    szValueA.Add ("Ms Serif");
    szValueA.Add ("Times New Roman");
}
<p></p>
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<H4><a name="l5">Listing Five </H4>

<pre>void Data (LPCTSTR data){
  HANDLE handle 
  CreateFile (data, GENERIC_READ, FILE_SHARE_READ, NULL,
   OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
  if (handle INVALID_HANDLE_VALUE) {
   int ret 
   AfxMessageBox("Invalid File Assignment.\n Continue assignment?",MB_YESNO);
  if (ret IDNO)
        return;
  }
  CStringProperty::Data (data);
}
<p></p>
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>
<H4><a name="l6">Listing Six</H4>

<pre>void CBoolProperty::ValueStrings (CStringArray&amp; szValueA){
    szValueA.Add ("False");
    szValueA.Add ("True");
}
void CSwitchProperty::ValueStrings (CStringArray&amp; szValueA)
{
    szValueA.Add ("Off");
    szValueA.Add ("On");
}
<p></p>
</pre>
<P>
<a href="#rl6">Back to Article</A>
</P>
<H4><a name="l7">Listing Seven</H4>

<pre>void CIntProperty::StringData (LPCTSTR lpszValue){
    Data (atoi (lpszValue));
}
<p></p>
</pre>
<P>
<a href="#rl-1">Back to Article</A>
</P>
<H4><a name="l">Listing Eight </H4>

<pre>BOOL CVuimDoc::OnNewDocument(){
    if (!CDocument::OnNewDocument())
        return FALSE;
    CFileText* pFT new CFileText;
    if (pFT) {
        pFT-&gt;m_top.Data (300);
        pFT-&gt;m_filename.Data ("c:\\windows\\win.ini");
        m_controls.Add (pFT);
    }
    CFileTextEx* pFTX new CFileTextEx;
    if (pFTX) {
        pFTX-&gt;m_left.Data (300); pFTX-&gt;m_top.Data (300);
        pFTX-&gt;m_color_fg.Data (RGB (192, 192, 192));
        pFTX-&gt;m_color_bg.Data (RGB (0, 0, 0));
        pFTX-&gt;m_filename.Data ("c:\\windows\\system.ini");
        m_controls.Add (pFTX);
    }
    CFan* pFan new CFan;
    if (pFan) {
        pFan-&gt;m_color_fg.Data (RGB (255, 0, 255));
        m_controls.Add (pFan);
    }
    m_pSCDW 0;
    return TRUE;
}
<p></p>
</pre>
<P>
<a href="#rl-1">Back to Article</A>
</P>
<H4><a name="l">Listing Nine </H4>

<pre>void CVuimDesignView::OnInitialUpdate(){
    CView::OnInitialUpdate();
    int nControls GetDocument()-&gt;m_controls.GetUpperBound () + 1;
    for (int n 0; n &lt; nControls; n ++) {
        CControlDesignWnd* pCDW new CControlDesignWnd;
        if (pCDW) {
            pCDW-&gt;Create (GetDocument()-&gt;m_controls[n], this, ++m_idcounter);
            GetDocument()-&gt;m_controls[n]-&gt;UpdateControl ();
        }
        else
         AfxMessageBox ("Unable to create visual representation for object");
        m_visualwindows.Add (pCDW);
        if (!m_pSCDW &amp;&amp; pCDW) {
            pCDW-&gt;m_IsSelected TRUE;
            m_pSCDW pCDW;
            GetDocument()-&gt;m_pSCDW m_pSCDW;
        }
    }
}
<p></p>
</pre>
<P>
<a href="#rl9">Back to Article</A>
</P>
<H4><a name="l10">Listing Ten</H4>

<pre>BOOL CControlDesignWnd::Create (CControlData* pData, CWnd* pParent, UINT id){
    if (!(m_pData pData)) return FALSE;
    CRect rcData;
    rcData.left m_pData-&gt;m_left.Data ();
    rcData.top m_pData-&gt;m_top.Data ();
    rcData.right rcData.left + m_pData-&gt;m_width.Data ();
    rcData.bottom rcData.top + m_pData-&gt;m_height.Data ();
<p></p>
    rcData.left -4; rcData.top -4; rcData.right +4; 
    rcData.bottom +4;
    if (CWnd::Create (NULL, NULL,WS_CHILD|WS_VISIBLE,rcData,pParent, id))
    {
        m_pCWnd pData-&gt;CreateControl (this, id, TRUE);
        return TRUE;
    }
    return FALSE;
}
<p></p>
</pre>
<P>
<a href="#rl10">Back to Article</A>
</P>
<H4><a name="l11">Listing Eleven</H4>

<pre>CWnd* CFileTextEx::CreateControl (CWnd* pParent, UINT id, BOOL bDesignMode){
    CFileTextExWnd* pW new CFileTextExWnd;
    if (pW)
        pW-&gt;Create (this, pParent, id, bDesignMode);
    m_pW pW;
    return m_pW;
}
BOOL CFileTextExWnd::Create (CControlData* pData, 
                                  CWnd* pParent, UINT id, BOOL bDesignMode)
{
    BOOL bCreated CFileTextWnd::Create (pData, pParent, id, bDesignMode);
    if (bCreated)
        UpdateFont ();
    return bCreated;
}
<p></p>
</pre>
<P>
<a href="#rl11">Back to Article</A>
</P>
<H4><a name="l12">Listing Twelve</H4>

<pre>void CVuimApplicationView::OnInitialUpdate(){
    CView::OnInitialUpdate();
    int nControls GetDocument()-&gt;m_controls.GetUpperBound () + 1;
    for (int n 0; n &lt; nControls; n ++) {
        CWnd* pW 
        GetDocument()-&gt;m_controls[n]-&gt;CreateControl (this, 
                                                 ++m_idcounter, FALSE);
        if (!pW)
         AfxMessageBox ("Unable to create visual representation for object");
        m_visualwindows.Add (pW);
    }
}
<p></p>
</pre>
<P>
<a href="#rl12">Back to Article</A>
</P>
<H4><a name="l13">Listing Thirteen </H4>

<pre>void CVuimDesignView::OnUpdate(CView* pSender, LPARAM lHint, CObject* pHint){
    CControlDesignWnd* pCDW (CControlDesignWnd*)pHint;
    if (pHint) {
        // only certain aspects of object could be updated
        CProperty* pP (CProperty*)lHint;
        CControlData* pData pCDW-&gt;m_pData;
        // update the contained control with changed attributes
        pData-&gt;ApplyProperties ();
        // force a repaint
        CRect rc pData-&gt;GetRect();
        rc.left - 4; rc.top - 4; rc.right + 4; rc.bottom + 4;
        m_pSCDW-&gt;Refresh (&amp;rc);
        return;
    }
    CView::OnUpdate (pSender, lHint, pHint);
}
<p></p>
</pre>
<P>
<a href="#rl13">Back to Article</A>
</P>



</body>
</html>
