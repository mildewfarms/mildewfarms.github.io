<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Sourcebook May/June 1997: Property Lists</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<p><i>Dr. Dobb's Sourcebook</i> May/June 1997 </p>

<h1>Property Lists</h1>

<hr>
<p>A property list control is an invaluable asset for manipulating visual object properties. Tools such as Visual Basic often use property lists because they provide immediate feedback about an object's properties. Since such a control was not available, I rolled my own.</p>

<p>
At first, I thought of using the Windows 95 list control. However, I became frustrated with it because it required too much effort to customize the capabilities I needed from my property list. So, I decided to use a simple owner-drawn list box instead. 
</p>
<p>
My <i>CPropertyList</i> class (see CPL.H and CPL.CPP, available electronically) is simply a <i>CWnd</i>-derived window object with <i>CHeaderCtrl</i> and <i>CListBox</i> extensions; that is, <i>CHeaderWnd</i> (CHW.H and CHW.CPP) and <i>CListWnd</i> (CLW.H and CLW.CPP) as children; see <a name="rf6"><a href="9715ff6.htm">Figure 6</A>. (At this time, <i>CHeaderWnd</i> does not do anything useful.)
</p>
<p>
I set up the header control with two columns and handled the track notification messages sent by it in <i>CPropertyList</i> (to adjust the owner-drawn columns of <i>CListWnd</i>).
</p>
<p>
The <i>CListWnd </i>class is <i>CProperty</i> aware. Hence, it knows how to display both the property name and the property data. Items stored in the owner-drawn list box are of type <i>CProperty</i>*. Cooperating with the property objects, the list box helps the property list provide the appropriate user interface for manipulating the properties. For simple property data types, the user clicks in the data value column of the property being changed; an edit control pops up, and the user can enter data. For color values (COLORREF) and file names (<i>CString</i>), users click the button at the right edge of the property value column to bring up the appropriate common dialogs. In the future, I will do something similar for handling font information. If implicit validation has been enabled through the <i>range</i> (VT_RANGE) or <i>choice</i> (VT_CHOICE) specifiers, a choice menu pops up when the button provided is clicked.
</p>
<p>
With the help of the <i>Properties()</i> method, which must be implemented by all <i>CControlData</i>-derived data objects, the property list can be initialized in one shot with the properties of any compliant object, easing the synchronization of the control with the selected object in the design view of VUIM.
</p>
<p>
When users change a property through the property list, a notification is sent to the VUIM main window. The main window, in turn, forwards this request to the document object, which then takes care of updating the design view for the currently selected object. It does so by calling the required <i>ApplyProperties()</i> override for the visual data object and forcing a repaint. The <i>OnUpdate()</i> method for the "design view" in Listing Thirteen makes this clearer. The object that changed and the property data modification that caused the change are passed in as hints by the document, so that the view may be optimally refreshed as desired.
</p>
<p>
Similarly, when a user moves or sizes an object, the property list is refreshed by calling the <i>UpdatePropertyList()</i> method of the design view class <i>CVuimDesignView</i>, which passes on the request to the document class <i>CVuimDoc</i> method <i>RefreshPL()</i>.
</p>
<p>
 -- S.D.
</p>
<P>
<a href="9715f.htm#rs1">Back to Article</A>
</P>
</body>
</html>
