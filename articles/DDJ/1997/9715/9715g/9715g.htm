<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Sourcebook May/June 1997: Ramblings in Real Time</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Terra Incognito</h1>

<p><i>Dr. Dobb's Sourcebook</i> May/June 1997
</p>
<h3>By Michael Abrash</h3>

<I>Michael is the author Zen of Graphics Programming, Second Edition, and Zen of Code Optimization. He can be contacted at mikeab@idsoftware.com.</I>

<hr>

<p>Many years ago, I was a counselor's aide at a summer camp. For years, I had been a terrible student, with little to be proud of academically (unfortunately, reading science fiction by the bucketload didn't count for anything), but that school year I had gotten the hang of taking tests (though not, I admit, actually studying for them), and to my amazement had vaulted near the top of my class. Even more amazingly, I had done very well on the SATs, and I was so unused to this business of having something to boast about that it didn't take much to get me to mention my SAT score. In retrospect, I can see how obnoxious I must have been, but at the time I was in my own happy little world, and the other guys at camp were kind enough to make approving noises and keep their comments to themselves.</p>

<p>One afternoon, it was my job to man the headquarters office, playing the bugle calls and answering the phone. As the sun set, shadows crept across the office; I looked for the light switch, but couldn't find it. I could see the bulb on the ceiling plainly enough -- heck, I could reach out and touch it -- but though I traced the power cable along the unfinished ceiling and into the wall, I could find no sign of a switch. So the shadows grew deeper, until at last I was manning my post by the light of the moon. Finally, a counselor walked in and said, "Why the heck are you sitting in the dark?"</p>

<p>"I can't help it," I explained. "There's no light switch."</p>

<p>He walked to the bulb, reached up, gave it a quarter-turn, and it sprang to life. He looked at me, said, "1450, huh?" and walked out, grinning from ear to ear.</p>

<p>Another anecdote: When John Carmack wrote <i>DOOM</i>, he discovered the wonders of using BSP trees for rendering. Most indoor renderers back then used approaches like tiling or sectors for spatial partitioning and for drawing order, but <i>DOOM</i> was far more flexible because it used a BSP tree. Another element John put into <i>DOOM</i> was line-of-sight testing to tell whether monsters could see the player. It took John a long time to get this code working well, and when he finally did get it working, it was quite messy and slow, requiring many tests against a gridded set of world polygons.</p>

<p>Not long after <i>DOOM</i> was finished, John met Bruce Naylor, one of the leading BSP researchers in the world. In the course of their discussion, John mentioned his solution to the line-of-sight problem, and said he wished he could have thought of something cleaner. Bruce said, "But you have a BSP tree. Why not just clip the sight line into the tree?"</p>

<p>John thought about it, then said, "Oh my God, I'm an idiot!" It had simply never occurred to him. Alerted to the possibility, he put BSP trees to good use in <i>Quake</i>, reducing the line-of-sight calculations to a few dozen lines of recursive code, with <i>O(log(n)) </i>performance.</p>

<p>I've been asked by several people why I tell you tales of failure (relatively speaking), such as these two anecdotes, rather than cutting to the chase and telling you only the successful approaches learned in the wake of the failures. By way of an answer, I must digress and tell you something else, which is that my life has taken another of its sudden turns, and that this will be the last "Ramblings in Real Time" I will write, at least for a while. This being a final column, I've thought back over what I've tried to convey during the last two-plus years. I've concluded that in the end, if there is one thing I hope you can take away from these columns and use in the future, it is this: As important as they are, the most important skill you can develop is not a set of techniques and solutions to problems; rather, it is a sense of how to develop techniques and solve problems.</p>

<p>In your programming career, you are going to have to solve most of your problems on your own; each project is unique in many ways, and cookbook approaches will take you only so far. Certainly, if you plan to do leading-edge work, you'll have to be inventive, and you'll often have to fumble your way through unknown territory -- terra incognito -- as, for example, John did with BSP trees. When you do that, what you know or can look up will matter greatly, but your ability to identify and fill in the gaps in your current conception of the technology will matter more. So be proud of what you get working, but always ask yourself what you're missing, what simplifying assumption or tying together of seemingly unrelated areas might pay off.</p>

<p>Let's start this month by looking at new territory that we'll all be exploring soon: The potential for variation in hardware-based 3-D games.</p>

<h3>3-D Hardware and Differentiation</h3>

<p>As you might expect, I get quite a bit of e-mail related to this column, and the concern most frequently expressed by readers over the past few months can be summed up as follows: Once 3-D hardware is widespread, 3-D games are all going to look pretty much the same. A common corollary is that with hardware taking over rasterization, the programming challenge -- the thrill, if you will -- will be largely gone from 3-D graphics. That's pretty serious stuff, especially since I expect 3-D acceleration to be standard in all new systems by the end of 1997. But are these concerns justified?</p>

<p>In a word, no. Sure, things will be different -- everything changes in this industry every couple of years -- but the thrill, and the programming challenge, will remain.</p>

<p>First off, I think we can all agree that the programming challenge would remain even if there were no variation in graphics. In my opinion, graphics currently get an outsized share of game programming mindshare and development time, while areas such as physics, AI, biped motion, and networking are relatively shortchanged. That's understandable, because graphics are better eye-candy and are just plain more fun to develop. However, there are huge steps to be taken in other areas, steps that would go further toward improving gameplay and sales than yet another flashy water effect or a few hundred more polygons in a scene. For example, good physics-modeling software -- capable of handling not only idealized rigid bodies, but also much more realistic objects with features like deformation -- can currently simulate motion quite well. Unfortunately, such software can't do it anywhere near fast enough; a general micro-impulse-based simulation of a pool table runs at less than 1/10th the speed of real time -- for only 16 moving objects. Getting that level of realism into a game is certainly a programming challenge!</p>

<p>I think we can also agree that games wouldn't really look alike even if they all used exactly the same 3-D engine. Art, animation, models, and world design are all highly individualized efforts; after all, books aren't all the same because they all use the same output engine, and neither are web pages. </p>

<p>So, what I think these concerns really come down to is that</p>

<ul>
  <li>Games will all have the look of SGI demos.
  <li>There won't be any challenging graphics programming left to do, because rendering will just be a matter of tossing a pile of polygons at the hardware.
</ul>


<p>Ah, but which pile of polygons? Good hardware acceleration lets you draw a lot of polygons, but still nowhere near enough to allow brute force to do the job; there's no way the hardware is going to be fast enough to let you just draw all the polygons in your world database, with no large-scale culling. The baseline system for id's next-generation 3-D technology -- the Trinity engine -- is a 233-MHz Pentium Pro with MMX, 32 MB of memory, and a 3-D accelerator capable of 300,000 texture-mapped, alpha-blended, z-buffered triangles per second, and a 50 megapixels/second fill rate. That's more powerful than the best PC you can buy as I write this, yet even that system is not capable of brute-force drawing all the polygons in a large <i>Quake</i> level at 15 frames/second, let alone the considerably more detailed levels Trinity is targeted at. So the first part of the new programming challenge is scene management -- efficiently extracting the limited set of polygons that need to be drawn from increasingly large world databases.</p>

<p>Hardware acceleration makes it possible to extend scene management into new territory as well. The ability to draw more polygons makes it possible to display highly detailed surfaces; for example, a stone wall could actually have thousands of bumps and cracks, rather than being a flat surface with a picture of bumps and cracks on it, as is currently the case in 3-D games. However, there is no way that an entire visible scene can be drawn with that level of detail; the transformation, projection, and set-up load would instantly bring any accelerator to its knees. Moreover, there's no reason to draw the entire scene in so much detail, because the subtleties would be lost for all but the nearest surfaces. Consequently, variable level of detail (LOD) is a huge challenge for accelerated 3-D games. For Trinity, John has experimented with using fractal surfaces to generate smoothly emergent LOD with decreasing distance, with the new vertices morphing toward their final positions to avoid popping as new triangles are added. The early results are very encouraging. (To understand why LOD morphing is necessary, check out the current crop of flight simulators and racing games, many of which have mountains and buildings that abruptly pop into and out of existence, or snap between detail levels, reducing the sense of immersion.)</p>

<p>Still other programming challenges arise as you try to improve the quality of high-LOD surfaces by lighting and shadowing them properly. In fact, high-quality dynamic lighting and shadowing typify the new generation of knotty graphics problems, having more to do with scene and database management than with rasterization.</p>

<p>So challenges aplenty remain, but there's still the nagging concern that accelerated 3-D games will all look basically the same, once voxels and raytracing and other unique CPU-based approaches are displaced by accelerated texture-mapped, alpha-blended, z-buffered polygons. There's no question that there will be a greater tendency to use polygons, given hardware acceleration, but while this will make some approaches impractical, it will also enable a wider variety of capabilities than you might imagine, especially given alpha blending, z<sub></sub>buffering, and the richness of the blending operations supported by 3-D APIs such as OpenGL and Direct3D. </p>

<p>For example, everyone knows that transparency and translucency can be rendered using alpha blending. (Consider the drawing-order constraints involved in translucency, though, and you'll see another reason why programming for an accelerator involves more than just sending polygons to the hardware.) However, it's far less obvious that a second alpha-blend pass with a light map for a texture can produce precisely the same detailed, perspective-correct, vertex-independent lighting as <i>Quake</i>'s surface caching (see my <i>Dr. Dobb's Sourcebook</i> November/December 1996 column for a discussion of <i>Quake</i>'s lighting model). Better yet, lighting with a second alpha pass uses little extra texture memory (the light maps have a density of one light point every 256 texels, and intensities are 8-bit alpha values), and makes for level performance, because, unlike surface caching, there are no cache misses to deal with. Given the richness of the 3-D pipeline, there are surely many similar techniques yet to be devised.</p>

<p>Also, surface caching is quite feasible with a hardware accelerator; the only downside is that surfaces are larger than texture tiles, so they take longer to download and require more texture memory. Still, MMX and faster processors make it possible to do quite a bit of procedural texturing while building a surface, all the more so since an accelerator can rasterize in parallel while the CPU builds surfaces. It might be too expensive to use surface caching for all surfaces in a game, but it's certainly a possibility for special surfaces when effects like pseudobump-mapping, swirling plasma, and burning paper are needed. Which brings us to another class of 3-D programming challenges yet to be solved in the new world of 3-D acceleration: fire, water, rain, snow, swirling fog, and the like. Consider just the problem of a spotlight beam illuminating floating motes of dust, or a streetlight shining into thick, shifting fog, and I think you'll agree: It's going to be a lot of fun to be a 3-D programmer over the next few years.</p>

<h3>Win32 Game Programming Revisited</h3>

<p>Last time, I discussed some information about Win32 game programming that I had found useful as I ported <i>Quake</i> to Win32. With two months of further experience, I have some corrections and clarifications, as well as new information.</p>

<p>Last time, I described how <i>ChangeDisplaySettings()</i> can be used to change the video mode, even if DirectDraw isn't installed (although on Win95, only the resolution can be changed this way; changing the bit depth requires DirectDraw). I described the CDS_FULLSCREEN flag to <i>ChangeDisplaySettings()</i>, which tells GDI not to move and/or resize the windows on the desktop to match the new resolution; if this flag is not used, then when you return from, say, 640&times;480 to a 1024&times;768 desktop, all the windows will be scrunched into the upper left 640&times;480 of the desktop. However, I neglected to mention that when you call <i>ChangeDisplaySettings()</i> with a NULL pointer for the DEVMODE parameter (as you'd typically do when your program exits, to reset the mode to the desktop default), you must again use CDS_FULLSCREEN, as in: <i>ChangeDisplaySettings(NULL, CDS_FULLSCREEN)</i>, or else window resizing may occur. Also note that, due to a peculiarity of Windows, DOS boxes may get scrunched on some systems even if you do use this flag.</p>

<p>I also reported that calling <i>SetCursorPos()</i> each frame to recenter the mouse (so that it would have maximum range of motion before clipping against the edge of the screen) seemed to keep the screen saver from starting, a potentially useful side effect. That still appears to be true of Win95, but there is no guarantee that this applies to all systems, and it is definitely not true of NT. An alternative, documented way to keep the screen saver from starting is <i>SystemParametersInfo(SPI_SETSCREENSAVEACTIVE, FALSE, NULL, 0)</i>; however, this has the drawback of leaving the system in an incorrect state if your app should happen to crash or otherwise terminate improperly. A better approach, sent in by Todd Laney, is to block the screen saver messages in your window proc; see <a name="rl1"><a href="9715g.htm#l1">Listing One</A> (listing begins below).</p>

<p>The reason that disabling the screen saver was of interest to us was that the sound hardware is not currently a fully shareable resource. If any app has a wave device open when you try to create a <i>DirectSound</i> object, the creation will fail. Likewise, if a <i>DirectSound</i> object exists or a wave device is already open when you try to call <i>waveOutOpen()</i>, your wave open will fail. In the interest of being a good Win32 citizen, we used to shut down <i>Quake</i>'s sound (either <i>DirectSound</i> or <i>waveOut</i>, depending on whether the system had a <i>DirectSound</i> driver) every time we lost the focus, including if a screen saver started. The problem was that in systems that had sounds that played on maximization, the system would play that sound using <i>waveOut()</i> when the screen saver was turned off and <i>Quake</i> took over the screen again -- and because the sound was playing when <i>Quake</i> tried to restart its sound code, <i>Quake</i>'s sound failed to reinitialize and sound was lost, much to the player's irritation.</p>

<p>We originally thought to work around this by preventing the screen saver from starting, but similar problems can happen if <i>Quake</i> is minimized or running in the background. For example, if <i>Quake</i> is running in a window, and another window is activated and starts playing sound (such as Media Player playing a wave file), then <i>Quake</i> will be unable to produce sound when it's made the active app. We decided to resolve this by having <i>Quake</i> never relinquish the sound hardware once it has initialized it; the <i>DirectSound</i> object or wave handle is kept around for the entire session, even if <i>Quake</i> isn't in the foreground. (At <i>Quake</i> startup, if the sound hardware is already allocated to another app, the user is prompted and given the option of trying again to start sound, presumably after shutting down the offending app, or running <i>Quake</i> with no sound.) The drawback of this approach is that when <i>Quake</i> is running, even if it's minimized, no other app can play wave sound, although other <i>DirectSound</i>-based apps will be able to make sound when <i>Quake</i> isn't the active app, because <i>DirectSound</i> has built-in resource-sharing capabilities.</p>

<p>I have one more tale to tell about <i>DirectSound</i>. As I described last time, we're using <i>DirectSound</i> in an unusual way, by using our own mixing code to mix all sound channels into a single <i>DirectSound</i> streaming secondary buffer, taking care to stay ahead of the location at which <i>DirectSound</i> allows us to write to the buffer. This necessitates mixing about a tenth of a second ahead, resulting in significant latency. Consequently, we decided to try using <i>DirectSound</i> as it's intended to be used, by having each of our sounds in a separate secondary buffer, and letting <i>DirectSound</i> mix the buffers for us. The result was startling: Latency did indeed drop, but performance dropped even more. It appears that <i>DirectSound</i> is slow at starting lots of sounds (and when you're firing the nail gun in <i>Quake</i>, a lot of sounds are starting), so in scenes where dozens of sounds were constantly starting, <i>Quake</i>'s performance dropped by as much as half compared to our old, mix-it-ourselves architecture. At this point, I would have to conclude that the performance of <i>DirectSound</i> is not good enough for a real-time game with many sounds constantly starting, unless you do your own mixing.</p>

<p>Nearly as surprising was the discovery that we could get a 5 to 10 percent speed increase by mixing our sounds into a wave buffer rather than a secondary <i>DirectSound</i> buffer, and playing through <i>waveOut()</i> rather than <i>DirectSound</i>. Unfortunately, <i>waveOut()</i> imposes still more latency, enough to be quite noticeable on some systems, so neither approach is ideal. We've made <i>DirectSound</i> the default in <i>Quake</i>, but let the player select wave sound if they'd rather have a higher frame rate at the cost of greater sound latency.</p>

<p>Overall, <i>DirectSound</i> is a good sound API, and I expect that as upcoming releases of <i>DirectSound</i> solve these performance problems and clean up a few rough spots, both wave sound and mix-it-yourself approaches will become distant memories for game programmers. Right now, though, you may not be able to get the performance you want using <i>DirectSound</i> in a straightforward manner.</p>

<h3>Until We Meet Again</h3>

<p>And with that, I'll bid you farewell for now. It's been a great couple of years; I've very much enjoyed writing this column, and it's been an equal pleasure getting remarkably knowledgeable feedback from many readers. I'd like to thank <i>Dr. Dobb's</i> for giving me this space in which to share information, and I'd like to thank the editors with whom I've worked here -- John Dorsey, Kevin Carlson, and Deirdre Blake -- for their diligent work on behalf of this column. I'd also like to thank the friends who contributed their time and expertise to brainstorming and reviewing columns, especially John Carmack and Chris Hecker. Finally, I'd like to express my appreciation that a shared resource such as <i>Dr. Dobb's</i> continues to exist, even as microcomputers have gone from a hobby to a mammoth industry.</p>

<p>There is limitless great software yet to be written, so keep on coding. And no matter how talented and experienced you are, remember -- somewhere in your code there's almost certainly a light bulb waiting to be screwed in just a quarter-turn more!</p>

<p><b>DDJ</b></p>

<a name="l1"><h4>Listing One</h4>
<pre>// Disables screen saver
LRESULT CALLBACK ToplevelWIndowProc(HWND hWnd, UINT uMsg,
     WPARAM wParam, LPARAM lParam)
{
    switch (uMsg)
    {
        case WM_SYSCOMMAND:
            switch (wParam & ~0x0F)
            {
                case SC_SCREENSAVE:
                case SC_MONITORPOWER:
                    // Don't call DefWindowProc() or
                    // it will start the screen saver
                    return 0;
            }
        //  :
        // other cases
        //  :
    }
}
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
</body>
</html>
