<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Sourcebook May/June 1997: DataBlade Technology for Web Development</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>DataBlade Technology for Web Development</h1>

<p><i>Dr. Dobb's Sourcebook</i> May/June 1997
</p>
<h2>Web-site storage managed via database technology</h2>

<h3>By Chris Trueman</h3>

<I>Chris is a systems engineer for Informix's TelCo &amp; Media group, and can be contacted at ctrueman@informix.com.</I>

<hr>
Sidebar:<a name="rs1"> <a href="9715ds1.htm"><i>D-Tree Indexing</i></a>
<hr>

<p>Creating a web site is easy: You take a message you want to broadcast, add images and HTML tags, publish on the Web, and let everything gently simmer. This is the model on which most web sites are built. For really powerful web sites, however, you need some form of connectivity between the web client and a database. One approach is to write CGI programs that invoke a query on the database, then write HTML code to format the results for display by the client. The disadvantage of this approach is that you usually must become familiar with yet another programming language, not to mention that programs tend to proliferate as the size and complexity of the site increases. Moreover, the nature of the site becomes piecemeal in that HTML pages are scattered around the disk, coupled with CGI programs and a back-end database server.</p>

<p>In this article, I'll present an alternative approach based on the Informix Universal Server and its DataBlade technology. <a name="rf1"><a href="9715df1.htm">Figure 1</A> shows how the components fit together into what is called the "Universal Web Architecture." The software integrates with your existing web-server implementation by providing a single CGI program -- WebDriver -- that manages requests from clients for HTML pages (a native Netscape NSAPI version is also available). The actual pages and other site data (such as images, Java applets, sound, and the like) are stored in the database. This puts an end to the question, "How do I manage my site?" -- storage management is now undertaken by the database. An added bonus is that the backup/recovery mechanism of the site is also provided by the database.</p>

<p>DataBlade modules extend the general-purpose capabilities of the Informix server. Individual off-the-shelf DataBlade modules that provide data storage and management functionality for images, text, visual information retrieval, spatial data, web development, and the like are available. You can also write DataBlade modules from scratch. (For more information on DataBlade modules, see http:// www.informix.com/.)</p>

<p>For instance, assume that the client in <a href="9715df1.htm">Figure 1</A> has requested the test page, indicated by the value of the <i>MIval</i> variable. WebDriver establishes and manages connections with the database and calls on the Web DataBlade to process the request. This means retrieving the page from the database and parsing it for <i>MIxxxx</i> tags, which provide the interface with the database via embedded SQL and provide mechanisms for handling variables and errors (see <a name="rt1"><a href="9715dt1.htm">Table 1</A>). </p>

<p>The results of the queries are returned to the Web DataBlade, which uses the HTML tags surrounding the column identifiers (<i>$1</i> and <i>$2</i> in <a href="9715df1.htm">Figure 1</A>) to format the data. In essence, each HTML page has been transformed from a static document into a dynamic data template where the data is supplied by the database. This is much like painting GUIs in regular client applications, and the process can lead to a reduction in the number of pages needed to support your web site.</p>

<p>Since the interface to the database is via SQL, you can call from HTML pages any Informix Universal Server DataBlade module to extend the functionality of your web site.</p>

<h3>The Search Engine Example</h3>

<p>To illustrate how you can use the Universal Server and DataBlades, I've developed a document search engine (see <a name="rl1"><a href="9715d.htm#l1">Listings One</A> and <a name="rl2"><a href="9715d.htm#l2">Two</A>) that can be used on any Internet/intranet where documents are shared.</p>

<p>To build the site, I used the Informix Text DataBlade, which provides support for document management and free text searches. The Text DataBlade implements a single object of type <i>doc</i>, 27 functions (including <i>Contains</i>, which answers the question, "Does the document contain the list of specified keywords?"; and <i>Oc</i>currences, which addresses the question, "How many times does the list of keywords appear in the document?"), and the D-tree access method. (For more information, see the accompanying text box entitled "D-Tree Indexing.") When a document is inserted into a table as an object of type <i>doc</i>, the file is parsed into individual words. Syntactically a word is a letter followed by zero or more letters, digits, or underscores. Punctuation is discarded. The DataBlade module then looks for is the stem of each word in the <i>wordnet</i> tables that are provided as part of the DataBlade module. A stem word can be thought of as the root of the word. For example, plural nouns are usually stemmed to their singular versions. For verbs, suffixes connoting tense are discarded. The Text DataBlade is case insensitive. </p>

<p>The <i>stemword</i> list is then compared with the <i>stopwords</i> list, also provided as part of the Text DataBlade installation. <i>Stopwords</i> represent white-noise words, such as "is" and "it;" any matches are removed. The remaining words are then stored in the object that represents the document in the database. These words form the basis of the document's D-tree index, which is used to support fast free-text queries. </p>

<p>The Informix Text DataBlade supports the document formats <i>ascii</i>, <i>dvipostscript</i>, <i>nroff</i>, <i>postscript</i>, <i>qwertzgml</i>, <i>tex</i>, and <i>troff</i>.</p>

<p>When inserting documents into the database, you must specify the format of the document so that the appropriate preprocessing can take place. Third-party DataBlades from Verity and PLS extend the formats supported and provide additional search facilities such as thesaurus and fuzzy matches. </p>

<p>The critical part of the search engine is the SQL string used to extract documents from the database: </p>

<p>select GetDocText(doc), title, Occurrences(doc, $keywords) where Contains(doc, $keywords) order by Occurrences(doc, $keywords)</p>

<p>Each of the function calls is implemented by the Text DataBlade. <i>$keywords</i> contains the search text entered in the text field on the input form. The result set is ordered by the number of matches on the search words entered -- a simple form of document ranking. </p>

<p><a name="re1"><a href="9715de1.htm">Example 1</A> shows what the query and formatting look like when included in the HTML template. Each column in the result set is identified by its position (starting from 1). <a href="9715de1.htm">Example 1</A> returns three columns in the result set. For the purposes of display, I use only columns two and three (indicated by <i>$2 </i>and <i>$3</i>). Any HTML formatting can be applied to the results set.</p>

<p>When the &lt;?MIVAR&gt; tag in the input form (see <a name="re2"><a href="9715de2.htm">Example 2</A>) is encountered, the Web DataBlade replaces the tags with the value of the variable specified. In this case, $WEB_HOME is replaced with the URL to WebDriver (on my machine, that's http://holly/cgi-bin/webdriver). The text input field is named "keywords." This name is supplied as an environment variable in the page that is called when the form is submitted. Hidden input fields specify which page in the database executes when the form is submitted. This is illustrated in <a href="9715de2.htm">Example 2</A> when <i>MIval</i> is set to <i>search</i>: When the page is submitted, WebDriver loads the search page from the database and sets the environment variables according to their values from the input form.</p>

<p>Consider what happens if you choose not to enter any keywords and simply submit the form. Since <i>keywords</i> will be empty, the search returns an empty table. It would be better to display a message informing users why the search returned nothing. The Web DataBlade lets you do this by supporting logical blocks within an HTML page. Each block is delimited by the &lt;?MIBLOCK&gt;...&lt;?/MIBLOCK&gt; tags. Each block can be associated with a condition, as in <a name="re3"><a href="9715de3.htm">Example 3</A>. This condition states that the variable keywords must exist and not be empty. The block can be embedded in the same page as the one used to process the search request. In effect, you can specify a set of preconditions that must be satisfied in order for the page to execute successfully. There is no restriction on the number of blocks a page can contain, and blocks can be nested.</p>

<p>What about errors from the database? The Web DataBlade provides a convenient means of trapping errors generated by database interactions. The error handler in <a name="re4"><a href="9715de4.htm">Example 4</A> inserts the error number and current timestamp into the <i>web_errors</i> table whenever an error is returned. The scope of the handler extends from the point in the HTML page where it is defined to the end of the page. Error handlers can be defined by using the ERR attribute of MIERROR. This is illustrated in <a name="re5"><a href="9715de5.htm">Example 5</A>, which specifies that the NO_KEYWORDS error handler is to be executed if the highlight line fails. As for MIBLOCK, tags there is no restriction on the number of error handlers a page can include.</p>

<p><b>DDJ</b></p>

<a name="l1"><h4>Listing One</h4>
<pre>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Document Search Engine

&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;

&lt;P&gt;
&lt;B&gt;Welcome&lt;/B&gt; to the document search engine. This engine will allow you to search for documents using any combination of keywords. Matched documents can be viewed on-line.
&lt;/P&gt;

&lt;P&gt;This WEB site was built using the following DataBlades:&lt;/P&gt;

&lt;UL&gt;
&lt;LI&gt;Informix Web DataBlade 2.1 &lt;/LI&gt;

&lt;LI&gt;Informix Text DataBlade 1.3 &lt;/LI&gt;
&lt;/UL&gt;

&lt;?MISQL SQL="select img from web_pics where ID = 'marble_hbar';"&gt;
&lt;P&gt;
&lt;IMG SRC="$WEB_HOME?LO=$1&type=image/gif" HEIGHT=14 WIDTH=763&gt;
&lt;/P&gt;
&lt;?/MISQL&gt;

&lt;P&gt;
&lt;FORM ACTION=&lt;?MIVAR&gt;$WEB_HOME&lt;?/MIVAR&gt; METHOD="Post"&gt;
Enter words to search on (space delimited): 
&lt;INPUT NAME="keywords" TYPE="text"&gt;
&lt;INPUT NAME="search" TYPE="submit" VALUE="Search"&gt;
&lt;INPUT TYPE="hidden" NAME="MIval" VALUE="doc_search_v3"&gt;
&lt;/FORM&gt;
&lt;/P&gt;

&lt;?MISQL SQL="select img from web_pics where ID = 'marble_hbar';"&gt;
&lt;P&gt;
&lt;IMG SRC="$WEB_HOME?LO=$1&type=image/gif" HEIGHT=14 WIDTH=763&gt;
&lt;/P&gt;
&lt;?/MISQL&gt;

&lt;CENTER&gt;
&lt;P&gt;&lt;FONT SIZE=-2&gt;This page &lt;I&gt;needs&lt;/I&gt; your help to be successful. If you have a document that you think would benefit from being indexed here then simply drop me a line: &lt;A HREF="mailto:ctrueman@informix.com"&gt;Chris Trueman&lt;/A&gt; &lt;/FONT&gt;&lt;/P&gt;&lt;/CENTER&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<a name="l2"><h4>Listing Two</h4>
<pre>&lt;HTML&gt;

&lt;?MIBLOCK COND=($keywords.nxst.)&gt;
&lt;H1&gt;
Error
&lt;/H1&gt;
&lt;H2&gt;
You must specify a word or words to be matched against the documents.
&lt;/H2&gt;
&lt;?/MIBLOCK&gt;

&lt;?MIBLOCK COND=($keywords.xst.)&gt;
&lt;H2&gt;
You requested a document search on: &lt;?MIVAR&gt;$keywords&lt;?/MIVAR&gt;
&lt;/H2&gt;

&lt;P align=center&gt;
&lt;table width=100% border=1&gt;
&lt;tr&gt;
&lt;th&gt;Document&lt;/th&gt;
&lt;th&gt;Frequency (%)&lt;/th&gt;
&lt;th&gt;Occurrences&lt;/th&gt;
&lt;/tr&gt;

&lt;?MISQL SQL="select raw_doc, name, Round(100 * WeightContains('documents_index', ctid, '$keywords'))::integer, Occurrences(doc, '$keywords') from documents where Contains(doc, '$keywords');"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;A HREF="$WEB_HOME?LO=$1&type=text/html"&gt;$2&lt;/A&gt;&lt;/td&gt;
&lt;td&gt;$3%&lt;/td&gt;
&lt;td&gt;$4&lt;/td&gt;
&lt;/tr&gt;
&lt;?/MISQL&gt;

&lt;/table&gt;
&lt;/P&gt;

&lt;?/MIBLOCK&gt;
&lt;/html&gt;
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
</body>
</html>
