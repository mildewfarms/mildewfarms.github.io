<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal April 1997: Algorithm Alley</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Understanding CRCs</h1>

<p><i>Dr. Dobb's Journal</i> April 1997
</p>
<h3>By Tim Kientzle</h3>

<I>Tim is an editor for DDJ and author of the forthcoming Developer's Guide to Sound Programming (Addison-Wesley, 1997). He can be reached at kientzle@ddj.com.</I>

<hr>

<p>From XModem to TCP, most communications protocols use some form of error-detecting signature. The sender computes a special value and "signs" the packet of data with that value. When the receiver sees the data, it computes its own signature and compares it with the one received from the sender. An error in transferring the data will hopefully cause these two values to disagree. The two most popular error-detecting signatures are checksums and cyclic redundancy checks (CRCs). </p>

<p>Although simple, checksums lack the robust mathematical properties of CRCs. Checksums are the easiest signatures to understand and may well be the most widely used type of signature. A checksum simply adds up the values of each byte of data to obtain a signature value. Unfortunately, checksums aren't particularly effective.</p>

<p>To detect a large number of errors, the signature values must be uniformly distributed -- on random data any signature value should be about as likely as any other. Unfortunately, checksums do not have this property, due to a statistical fact known as the "Law of Large Numbers." (This is the same principle that says seven is more likely than two when you roll a pair of dice.) To get well-distributed signatures, you need to look elsewhere.</p>

<h3>What You Need to Know About CRCs </h3>

<p>There are many different CRCs, all computed in essentially the same fashion. The most important aspect of a CRC is its length. Longer CRCs are more effective than short ones at detecting errors.  A 12-bit CRC will miss only one error out of 2<sup>12</sup>, while a 32-bit CRC will miss only one error in 2<sup>32</sup>.</p>

<p>CRCs are characterized by a string of bits called the "generating polynomial." Each different generating polynomial produces a different CRC. There are also a number of minor differences in how CRCs are computed. If you want to compute a compatible CRC, you need to understand these differences.</p>

<p>CRCs can be computed nearly as quickly as checksums, using table-driven algorithms (such as those presented here). These implementations are both compact and fast. CRCs are also easy to compute in hardware.</p>

<p>Because CRCs are easily implemented, they are widely used. They are used to detect errors in floppy- and hard-disk interfaces, network software and hardware, program loaders, backup software, revision-control systems, and the like.</p>

<h3>Implementing CRCs</h3>

<p>The generating polynomial is written either as a sum of powers of <i>x </i>or as a string of bits. <a name="rt1"><a href="9704mt1.htm">Table 1</A> lists three popular generating polynomials. It's not important at this point that you know what a generating polynomial is, just that different generating polynomials give different CRCs.</p>

<p>The relationship between the binary and polynomial forms is just that the powers of <i>x</i> indicate which bits in the binary form are set, with the convention that 1 in the polynomial form is thought of as <i>x</i><sup>0</sup>. So, for the generating polynomial <i>x</i><sup>16</sup>+<i>x</i><sup>12</sup>+<i>x</i><sup>5</sup>+1, bits 16, 12, 5, and 0 are set.</p>

<h3>Computing CRCs Slowly</h3>

<p>CRCs are calculated on a stream of bits. I'll start with a simple calculator that computes the 16-bit CRC recommended by the CCITT, which creates international communications standards. The calculator in <a name="rl1"><a href="9704m.htm#l1">Listing One</A> isn't efficient, but it will help explain those that follow.</p>

<p>CRC calculations consist of alternating two operations: collect the next bit(s), and reduce the value so far. In <a href="9704m.htm#l1">Listing One</A>, the function is called once for each bit of data. The shift and exclusive-or puts this bit into the <i>longcrc</i> variable, and the <i>if</i> statement handles the reduction. <a name="rl2"><a href="9704m.htm#l2">Listing Two</A> shows a modification (checking the top bit before the shift rather than after) that eliminates the need for a long temporary variable.</p>

<h3>Table-Driven CRC Calculation</h3>

<p>If you look at this operation over the eight bits in a byte, the eight reductions don't depend on the bits being shifted into the low-order end -- they depend only on what was already in the high-order byte. Thus, you can rearrange the calculation to collect eight bits, then do eight reductions (or vice versa). By precomputing the reductions in a table, you end up with the very efficient algorithm shown in <a name="rl3"><a href="9704m.htm#l3">Listing Three</A>. <i>InitCrc16</i> precomputes the reductions for all 256 possible byte values, using exactly the algorithm in the previous section.</p>

<p>Using the precomputed values in the table, <i>Crc16()</i> can rapidly update the CRC value. The table itself is small enough to comfortably fit in the L1 cache on most processors. To make <i>Crc16()</i> even faster, it could be modified to accept a pointer and a count, removing the need for a function call for each byte of data.</p>

<h3>Real CRC Calculators</h3>

<p>If you compare the previous code with the CCITT-CRC16 computations for YModem and ZModem, you'll notice that the table is identical, but the CRC calculation itself (<a name="rl4"><a href="9704m.htm#l4">Listing Four</A>) is slightly rearranged. There's an interesting mathematical reason for this, but here's a relevant nonmathematical observation: In the first version, if you initialize the <i>crc</i> value to zero, the first two bytes simply get shifted directly into the CRC (the zero entry in the table is always zero). That is, the <i>CRC16</i> of a 2-byte buffer is just those two bytes. <a href="9704m.htm#l4">Listing Four</A> doesn't have this property. You can get the exact same result from <a href="9704m.htm#l3">Listing Three</A> by adding two zero bytes to the end of your data and including those in the CRC calculation. </p>

<p>The <i>CRC16</i> in <a name="rl5"><a href="9704m.htm#l5">Listing Five</A> is another variation. Kermit computes its CRC backwards, shifting the CRC to the right rather than left. This reversed direction means you test the least-significant bit rather than the most-significant bit, and the CRC constant is reversed from 0&times;1021 to 0&times;8408.</p>

<h3>32-Bit CRCs</h3>

<p>Other CRCs can be computed similarly. <a name="rl6"><a href="9704m.htm#l6">Listing Six</A> shows how to compute a common 32-bit CRC. Notice that the left shift shifts by 8, because it's computing the CRC one byte at a time. The right shift aligns the high-order byte, and therefore is a shift by 24. With minor modifications, this code can be used for any CRC of at least eight bits. Note that ZModem computes its 32-bit CRC backwards from the <i>Crc32</i> function here, just as the Kermit CRC16 is backwards from the X/Y/ZModem CRC16.</p>

<h3>CRC Variations</h3>

<p>Common CRC calculators show a number of other minor variations, none of which affect the mathematical effectiveness of the CRC:</p>

<p></p>

<ul>
<li>Multibyte CRCs can be sent in any byte order.  <li>The CRC may be initialized to all 0s or all 1s.
  <li>The final CRC is often complemented before being used.
</ul>

<h3>Understanding CRCs</h3>

<p>CRCs are based on a technique for dividing polynomials that's routinely discussed in high-school algebra classes. The key point is to think of the data being transferred as a single long list of bits. By writing this list as a polynomial, a chunk of data becomes a single mathematical entity that can be manipulated as a whole. Put differently, polynomials provide a way of computing that treats any large block of binary data as a single mathematical object.</p>

<h3>Long Division of Polynomials</h3>

<p>Grade-school math classes teach a technique for division referred to as "long division" which looks at the dividend (the part under the division symbol) a few digits at a time. High-school math classes teach this same method for dividing polynomials. As you may recall, division of polynomials is even simpler than division of integers, because only the first term matters. For example, the first step in dividing 2<i>x</i><sup>4</sup>-2<i>x</i><sup>3</sup>-12<i>x</i><sup>2</sup>+12<i>x</i>-6 by <i>x</i><sup>2</sup>-3<i>x</i>+2 is to divide 2<i>x</i><sup>4</sup> by <i>x</i><sup>2</sup>, yielding 2<i>x</i><sup>2</sup>. The rest of the process (see <a name="rf1"><a href="9704mf1.htm">Figure 1</A>) is the same as dividing integers. At each step, you divide the leading terms to obtain a new term in the quotient, then multiply and subtract.</p>

<p>If you look back at the original bit-at-a-time CRC calculator, you'll see these same steps: Bring another term (bit) into consideration (shift), divide the leading terms (test the high-order bit), multiply (by 0 or 1), and subtract (exclusive OR). Repeating this procedure for each term (bit) eventually leaves a remainder (CRC).</p>

<p>Because you're dividing by a second-degree polynomial in <a href="9704mf1.htm">Figure 1</A>, you always consider three terms at a time. After subtracting, you're left with two terms, so you "shift" another term into consideration, just as the CRC algorithm shifts the next bit into the CRC variable. Also, the CRC algorithm only tests a single bit at each loop, much as the division algorithm divides only the leading terms.</p>

<p>The reduction is the part that doesn't make sense at first glance. The subtraction in the normal division algorithm somehow has been mutated into an exclusive-or operation. Clearly, these aren't ordinary polynomials...</p>

<h3>Polynomials Modulo 2</h3>

<p>The number system of integers modulo 2 has only two numbers -- 0 or 1. This number system allows all four of the basic arithmetic operations according to <a name="rf2"><a href="9704mf2.htm">Figure 2</A>. Just as in normal arithmetic, division by zero is undefined.</p>

<p>Using integers modulo 2 to create polynomials gives you some peculiar properties. For example, since 1+1=0 in modulo 2, you know that (<i>x</i>+1)<sup>2</sup>= <i>x</i><sup>2</sup>+<i>x</i>+<i>x</i>+1=<i>x</i><sup>2</sup>+1, which is very different from what you get using the standard integers.</p>

<h3>Messages as Polynomials</h3>

<p>Now consider the word "dog" in ASCII. As a string of bits, it is 0110 0100 0110 1111 0110 0111. By considering these bits as the coefficients, you have a 22nd degree message polynomial: <i>x</i><sup>22</sup>+<i>x</i><sup>21</sup>+<i>x</i><sup>18</sup>+<i>x</i><sup>14</sup>+<i>x</i><sup>13</sup>+<i>x</i><sup>11</sup>+<i>x</i><sup>10</sup>+<i>x</i><sup>9</sup>+<i>x</i><sup>8</sup>+<i>x</i><sup>6</sup>+<i>x</i><sup>5</sup>+<i>x</i><sup>2</sup>+<i>x</i>+1.</p>

<p>In a similar way, even a multimegabyte data file can be viewed as a single large polynomial. Fortunately, because the division algorithm only requires you to look at a few bits at a time, you can compute with these very large polynomials quite easily.</p>

<p>Be forewarned that many people are tempted to equate these polynomials with binary numbers by "substituting 2." That doesn't work. A moment ago you saw that (<i>x</i>+1)<sup>2</sup>=<i>x</i><sup>2</sup>+1 in modulo 2. If you "substitute 2," this would mean that (2+1)<sup>2</sup>=32=9 is the same as 22+1=4+1=5. It's more appropriate to think of a term such as <i>x</i><sup>22</sup> as meaning that there is a one bit in position 22. The polynomial is then just a list of which bit positions hold ones.</p>

<h3>CRCs Defined</h3>

<p>Now, I'm ready to define a cyclic redundancy check: A CRC is the remainder obtained by dividing the message polynomial by the generating polynomial. The key to translating this into the code I presented earlier is to realize that adding and subtracting polynomials in modulo 2 is really just the exclusive-or operation, as reflected in the addition and subtraction tables in <a href="9704mf2.htm">Figure 2</A>. The initial bit-at-a-time CRC calculator is just the direct realization of the long division algorithm for polynomials modulo 2.</p>

<h3>From Mathematics into C</h3>

<p>Because CRCs use polynomials modulo 2, there are only two possibilities at each step of the long division algorithm -- either it divides or it doesn't. For example, a 16th degree polynomial divides any other 16th degree polynomial. That's the key to the bit-at-a-time CRC calculator. Checking the high-order bit is simply checking to see if a polynomial is 16th degree. If it is, the exclusive-or does the subtraction. </p>

<p>In symbols, if the message polynomial so far is <i>m</i>, and the generating polynomial is <i>g</i>, then <i>m/g</i> can be written in terms of a quotient <i>q</i> and a remainder <i>r</i>: <i>m/g=q+r/g</i>.</p>

<p>Assume that's already been done. In particular, you know <i>r</i>, which is the CRC of the message before this bit. If the next bit is <i>b</i>, the new message is <i>mx+b</i>. (Multiplying <i>m</i> by <i>x</i> raises each power by one; that is, it performs a left shift.) The previous remainder then tells you something about the new remainder: <i>(mx+b)/g=mx/g+b/g=qx+(rx+b)/g</i>.</p>

<p>This result tells us that the remainder from <i>(mx+b)/g</i> is the same as the remainder from <i>(rx+b)/g</i>. To find out the new remainder (new CRC), just shift the new bit <i>b</i> into the old remainder, and then take the remainder from dividing that by <i>g</i>. Because the old remainder was at most 15th degree, the new remainder cannot be more than 16th degree, so the division is just one bit test and a possible exclusive-or. If you look back at the original bit-at-a-time CRC calculator, you'll see that's exactly what it's doing. The nice part about only needing the old remainder to compute the new one is that it's not necessary to look at the entire file to compute the CRC; you only need to keep track of the CRC thus far as you scan through the bits in the file.</p>

<p>Instead of looking at one bit <i>b</i> at a time, you could consider the next eight bits at a time, which reveals the table-driven algorithm. Just let <i>B</i>=<i>b</i><sub>0</sub><i>x</i><sup>7</sup>+<i>b</i><sub>1</sub><i>x</i><sup>6</sup>+... +<i>b</i><sub>6</sub><i>x</i>+<i>b</i><sub>7</sub> (<i>B</i> is the next byte of the message). Then, as before, the old remainder <i>r</i> becomes the basis for computing the new remainder: <i>(mx</i><sup>8</sup><i>+B)/g=qx</i><sup>8<i></sup>+(rx</i><sup>8</sup><i>+B)/g</i>. Since <i>B</i> has a smaller degree than <i>g</i>, this simplifies to <i>rx</i><sup>8</sup><i>/g+B/g</i>. The table is just the precomputed remainder from <i>rx</i><sup>8</sup><i>/g</i>.</p>

<h3>Why CRCs Work</h3>

<p>To understand why CRCs work, start by examining what happens when there's an error -- when the data you receive is different than what was sent. If you subtract the two different message polynomials (the one that was sent and the one you received), you have a polynomial with a one bit at each error location.</p>

<p>This "error polynomial" is the key. If the CRC doesn't detect the error, then the error polynomial is divisible by the generating polynomial. If the generating polynomial isn't divisible by <i>x</i> (the least-significant bit is a one), then the first and last wrong bits must be at least as far apart as the degree of the generating polynomial. This is the often-quoted fact that a CRC will detect any burst error shorter than the generating polynomial.</p>

<p>By selecting the factors of the generating polynomial, you can bias the CRC to detect certain errors. For example, every multiple of <i>x</i>+1 has even parity, so the CRC-16 (which has a generating polynomial divisible by <i>x</i>+1) will catch every error which affects an odd number of bits. (The error polynomial will have odd parity, and hence can't be a multiple of the generating polynomial.) Conversely, if an error affects an even number of bits, the CRC-16 is that much less likely to detect it, so most generating polynomials cannot be factored.</p>

<h3>Conclusion</h3>

<p>I originally wrote this description of the CRC after reading many articles that claimed CRCs relied on "properties of prime numbers." Such near-misses are all the more frustrating because the complete story is only slightly more complex, and it gives practical insight into how to compute a wide variety of different CRCs.</p>

<p>For more information on CRCs, see Andy Lowry's algorithm for computing the 16-bit Kermit CRC in the Kermit protocol reference, available via anonymous FTP from kermit.columbia.edu. Likewise, Terry Ritter provided a good description of CRCs in "The Great CRC Mystery" (<i>DDJ</i>, February 1986).</p>

<p><b></b></p>

<p>DDJ</p>


<H4><a name="l1">Listing One</H4>

<pre>short BitwiseCrc16(int bit, short crc) { long longcrc = crc;
 longcrc = (longcrc &lt;&lt; 1) ^ bit;  /* next bit */
 if (longcrc &amp; 0x10000)
   longcrc ^= 0x11021; /* reduce */
 return(longcrc &amp; 0xFFFF);
}
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>short BitwiseCrc16(int bit, short crc) { if (crc &amp; 0x8000)
   crc = (crc &lt;&lt; 1) ^ bit ^ 0x1021 ;
 else crc = (crc &lt;&lt; 1) ^ bit;
 return (crc &amp; 0xffff);
}
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>static short Crc16Table[256];<p></p>
void InitCrc16() {
  short i, j, crc;
  for(i=0; i &lt; 256; i++) {
    crc = (i &lt;&lt; 8); /* Put i into MSB */
    for(j=0; j &lt; 8; j++) /* Do 8 reductions */
      crc = (crc &lt;&lt; 1) ^((crc &amp; 0x8000)? 0x1021:0);
    Crc16Table[i] = crc &amp; 0xFFFF;
  }
}
short Crc16(int ch, short crc) {
    crc = Crc16Table[((crc &gt;&gt; 8) &amp; 255)] ^ (crc &lt;&lt; 8) ^ ch;
    return crc &amp; 0xFFFF;
}
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>/* InitCrc16() is same as Listing Three */short XYZModemCrc16(int ch, short crc) {
  crc = Crc16Table[((crc &gt;&gt; 8) ^ ch) &amp; 255] ^ (crc &lt;&lt; 8);
  return crc &amp; 0xFFFF;
}
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<H4><a name="l5">Listing Five</H4>

<pre>static short KermitCrc16Table[256];void KermitInitCrc16() {
  int i, j, crc;
  for(i=0; i &lt;256; i++) {
    crc = i;  /* Start with i in low-order byte */
    for(j=0; j &lt; 8; j++)
      crc = (crc &gt;&gt; 1) ^ ((crc &amp; 1) ? 0x8408 : 0);
    KermitCrc16Table[i] = crc &amp; 0xFFFF;
  }
}
short KermitCrc16(int ch, short crc) {
  crc = KermitCrc16Table[(crc ^ ch) &amp; 255)] ^ (crc &gt;&gt; 8);
  return crc &amp; 0xFFFF;
}
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>
<H4><a name="l6">Listing Six</H4>

<pre>static long Crc32Table[256];InitCrc32() {
  int i, j;  long crc;
  for(i=0; i &lt;256; i++) {
    crc = (i &lt;&lt; 24); /* Put i into MSB */
    for(j=0; j &lt; 8; j++) /* 8 reductions */
      crc = (crc &lt;&lt; 1) ^ ((crc &amp; 0x80000000L) ? 0x04c11db7L : 0);
    Crc32Table[i] = crc;
  }
}
long Crc32(int ch, long crc) {
  crc = Crc32Table[((crc &gt;&gt; 24) ^ ch) &amp; 255] ^ (crc &lt;&lt; 8);
  return crc &amp; 0xFFFFFFFF;
}
<p></p>
</pre>
<P>
<a href="#rl6">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
