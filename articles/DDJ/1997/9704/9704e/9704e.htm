<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal April 1997: Java Beans and the New Event Model</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Java Beans and the New Event Model</h1>

<p><i>Dr. Dobb's Journal</i> April 1997
</p>
<h2>Gluing Java components together</h2>

<h3>By Eric Gigu&egrave;re</h3>

<I>Eric is a software engineer with the Powersoft Languages Division of Sybase and one of the developers of Powersoft Optima++. He can be reached at giguere@ watcom.com.</I>

<hr>

<p>The defining software trend of the '90s is the use of software components and rapid application development (RAD) tools to quickly prototype and flesh out interactive applications. In Java, components that follow the Java Beans specification can be used in a number of Java-based RAD tools. In this article, I'll examine the Java Beans specification and describe the event model that lets you glue components together.</p>

<h3>Component Models</h3>

<p>A component is a software object that has the following elements: </p>

<ul>
  <li>Properties (public state information readable and/or writable by a program).
  <li>Methods (actions invocable at run time by a program).
  <li>Events (notifications to a program in response to state change in the object). 
</ul>

<p>Components are also opaque (their internal implementation is hidden, and they may only be available in binary form), and they encapsulate important functionality. Many components represent on-screen windows or controls that interact with the user. These components are usually referred to as "visual components." In a RAD tool, the emphasis is on the use of visual components, but nonvisual components can also be used, in which case the RAD tool creates a special design-time representation for the nonvisual component that can be manipulated directly by the user.</p>

<p>Applications are built by combining a set of independent components with developer-written code. The developer's code acts as the "glue" between components, in most cases responding directly to component events by setting component properties or invoking component methods.</p>

<p>Actually implementing a component requires component writers and the developers of RAD tools to agree on a component model -- a set of conventions for identifying and invoking properties, methods, and events. The component model can also describe design-time information that the RAD tool might find useful -- the icon to display in a toolbar or instructions on how to bring up a set of property sheets -- independent of a particular programming language or development system.</p>

<p>There are many different component models in use today, and some tools can use more than one. The ActiveX Control (formerly known as OCX) model is probably the best known on Microsoft Windows platforms.</p>

<h3>Java Beans</h3>

<p>Java Beans is a component model for building and using Java-based components. Beans is a public specification developed by Sun in consultation with the Java community at large. Version 1.0 of the spec is available for download from http://splash.javasoft.com/beans.</p>

<p>A "bean" is just a Java class with some extra descriptive information. The descriptive information is similar to the concept of an OLE type library. Unlike OLE type libraries, however, a bean is usually self-describing. Because of Java's late-binding features, a Java .class file (the equivalent of a .OBJ file in C or C++) contains the class's symbol information and method signatures, and can be scanned by a development tool to gather information about the bean. This gathering process is referred to as "introspection" and is usually done by applying heuristics to the names of public methods in a Java class. (The Beans specification refers to these heuristics as design patterns, not to be confused with the high-level design patterns common in object-oriented software design.) Introspection can also be performed by using a <i>BeanInfo</i> companion class provided by the developer of the bean, which allows fine control for limiting the object attributes<b> </b>that are exposed to the user. A typical use for a <i>BeanInfo</i> would be to retrieve localized names for a bean's properties, methods, and events.</p>

<p>Any Java class with public methods can be considered a bean, but a bean typically has properties and events as well as methods. <a name="rl1"><a href="9704e.htm#l1">Listing One</A> s an example of a simple bean with a single property.</p>

<p>Properties are sets of methods that follow special naming conventions. In the case of read/write properties, the convention is that if the property name is <i>XYZ</i>, then the class has the methods <i>setXYZ</i> and <i>getXYZ, </i>respectively. The return type of the <i>getter</i> method must match the single argument of the <i>setter</i> method. Read-only or write-only properties have only one of these methods. Boolean properties can also have a <i>getter</i> method of the form <i>isXYZ</i> in addition to or instead of the <i>getXYZ</i> method. Java Beans also provides support for indexed properties, which are properties that set or get an indexed value. Indexed properties take an additional integer parameter in their <i>setter</i> and <i>getter</i> methods.</p>

<p>The Beans definition of a property isn't revolutionary. It essentially reflects and standardizes what is common practice both in Java and in other object-oriented languages. The most interesting feature of Java Beans is really the Java event model.</p>

<p>Note that the Beans specification does not define things such as visual components and how they paint themselves. These are determined by the application framework. Usually, this consists of the AWT UI classes, so most visual beans will end up deriving from one of the existing AWT classes such as <i>java.awt.Canvas</i>.</p>

<h3>The Old Event Model</h3>

<p>Events are a convention for notifying a program of things that might interest it, but they are not really part of the Java language. Events are typically associated with UI components and are often triggered in response to what the user does to or with the component.</p>

<p>The Java event model was defined by the AWT 1.0 UI classes that ship as a standard part of the Java environment. The model is very simple. When an event occurs, AWT calls the <i>handleEvent</i> function on the appropriate component, passing an <i>Event</i> object that describes the event (which event occurred, the key and mouse states, and so on). If false is returned from the <i>handleEvent</i> function, AWT calls the <i>handleEvent</i> function of the component's container. This process continues until a component returns True from <i>handleEvent</i> or the top-most container is reached.</p>

<p>There are three problems with this event model: </p>

<ul>
<li>Every event triggers a call to <i>handleEvent</i>, even if most of those events are ignored by the application (most mouse-movement events are ignored, for example). This adds overhead to the program.  <li>There is no way to handle an arbitrary event without subclassing a component (or a container) and overriding the <i>handleEvent</i> function. Your code must filter out uninteresting events and identify the component that triggered the event.
  <li>Event data must be passed via the <i>Event</i> class or a class derived from <i>Event</i>, using a unique integer to identify the event without conflicting with the event identifiers used by other components.
</ul>

<p>These problems are all addressed by the event model in the Java Beans specification. The Beans event model can be used with the AWT 1.1 UI classes.</p>

<h3>The Beans Event Model</h3>

<p>The Beans event model is a callback model: Anyone interested in an event registers itself as a listener with the component. When the event occurs, the component calls the listener back. This model is used with great success in other systems (like Motif and Optima++) and avoids the problems just listed because</p>

<ul>
<li>The event source knows exactly who is interested in a particular event. Events that are not of interest to anyone simply aren't triggered.  <li>No subclassing or event filtering is required: The event triggers a direct call to a specific event handler.
  <li>Event data can be customized to suit the event. Depending on how the listener registration is handled, the need for unique event identifiers (and potential conflicts) can be avoided.
</ul>

<p>In languages like C and C++, the callback mechanism is simple to implement: Event handlers are invoked indirectly through function pointers (or member function pointers). The registration process is merely a matter of passing a function pointer to the event source, which stores it in a list. So how do you do this in a language like Java that doesn't support pointers of any kind?</p>

<p>The answer is that you define a callback interface for each event, a class with a method whose signature (name and parameters) is known by the event source. An object of that class is created and the object itself is registered with the event source. When an event occurs, the event source directly invokes the method on each registered object. In C++, you would define the callback method as a virtual function on an abstract base class. In Java, the preference is to define a Java interface.</p>

<p><a name="rl2"><a href="9704e.htm#l2">Listing Two</A>(a) is an example of a listener interface that is close to what Beans defines. Recall that in Java, an interface is really just a set of methods that are to be implemented by one or more classes. <a href="9704e.htm#l2">Listing Two</A>(b) is a class implementing a listener.</p>

<p>The nice thing about interfaces in Java is that you can treat them like classes in many cases, so that a component can easily define a registration interface, as in <a href="9704e.htm#l2">Listing Two</A>(c). Here I've defined a registration method called <i>addClickListener</i> which takes a <i>ClickListener</i> as input and adds it to an internal list. When the component wants to notify the listeners that a <i>Click</i> event has occurred, it simply calls the click method on each <i>ClickListener</i> in the list.</p>

<p>The Java Beans event model is a bit more complicated than the simple listener model in <a href="9704e.htm#l2">Listing Two</A>. All event-listener interfaces must extend the <i>java.util.EventListener</i> interface -- this is what identifies it as an event interface during the introspection process. The name of the interface must end in the <i>Listener</i> suffix. The methods (there may be more than one) defined by the interface must take a single parameter whose type is a subclass of <i>java.util.EventObject</i> (exceptions to this rule are permitted but should be avoided). <a name="rl3"><a href="9704e.htm#l3">Listings Three</A>(a) and (b) show the Beans version of <i>ClickListener</i> and the <i>ClickEvent</i> class.</p>

<p>ClickEvent is not a particularly interesting class, but the idea is that each event would add methods and data members to its subclass of <i>java.util.EventObject</i> as appropriate.</p>

<p>The only thing left to do is to define the registration methods in the event source. The Beans specification requires methods to add and remove listeners, as in <a href="9704e.htm#l3">Listing Three</A>(c).</p>

<p>The <i>addClickListener</i> and <i>removeClickListener</i> methods are synchronized to make them thread safe. Notice how the <i>handleClick</i> method first clones the existing list of listeners before invoking the click method on each element in the list. This means that once the event is triggered, all the event listeners that were registered with the event source at that time are guaranteed to be called. (Technically, the <i>handleClick</i> method is not required by the Beans spec but it makes good sense to have such a function. If you make it protected, it can only be called by the component or one of its subclasses.)</p>

<p>If you are implementing an event source, you might consider some simple optimizations. The first that comes to mind is to not allocate the <i>Vector</i> object until the first listener is added. Another optimization is to delay the cloning operation until absolutely necessary by moving it into the add and remove operations. Both optimizations require more code but can yield much better performance and memory usage. (After implementing a few events, though, you'll probably find you miss not having C++ templates and a preprocessor! The only real disadvantage to this event model is the constant code duplication that's required.)</p>

<p>Event names should be as simple as possible. As long as you place all your classes in unique Java packages, there won't be any conflict with events in other packages. The names of the listener interface and the event data class are derived from the name of the event.</p>

<p>I've provided sample source code that demonstrates how to define and use the Java Beans event model (see "Availability," page 3). Files of particular interest include:</p>

<ul>
<li>MyComponent.java, which defines the <i>ClickListener</i> interface and the <i>ClickEvent </i>class.   <li>PushButton.java, which subclasses the AWT <i>Button</i> class to redirect the action event to the new <i>Click</i> event.
  <li>MyDialog.java, MyDialog2.java, MyDialog3.java, which show the different ways you can hook up to events.
</ul>

<p></p>

<p>The MyDialog examples can be run directly from the command line.</p>

<h3>Using the Beans Model</h3>

<p>Assume you have a <i>PushButton</i> component with a <i>Click</i> event. If the button is on a dialog, there is a simple way to trap the event, as shown in <a name="rl4"><a href="9704e.htm#l4">Listing Four</A>(a). Problems arise, of course, if you have two or more <i>PushButton</i> objects on the same dialog. You could use an <i>if</i> statement inside the click function to distinguish the buttons based on the source of the event (available as a parameter from the event data). The class would look something like <a href="9704e.htm#l4">Listing Four</A>(b).</p>

<p>Another approach is to define a relay class (the Beans specification refers to this as an "adaptor") whose job is to implement a particular listener interface and then relay the event to another object. You can modify <a href="9704e.htm#l4">Listing Four</A>(b) to use relays quite simply, as in <a href="9704e.htm#l4">Listing Four</A>(c).</p>

<p>Which approach is better? As usual, there are trade-offs. Using relays increases the number of classes (each class gets compiled into a separate .class file) and the amount of memory your project uses increases. Relays are very efficient, however, since there are no <i>if</i> statements. Not using relays keeps the number of class files to a minimum but adds a small performance penalty that increases with the more components you use. With luck, your development tool gives you a choice of which approach to use.</p>

<h3>The Future of Beans</h3>

<p>Although the Beans specification was completed ahead of schedule, it will take a while for vendors to update their components to work as beans, and for web browsers and other applications that embed the Java virtual machine to update themselves to the new Java event model. An SDK for Beans is in the works and a number of software vendors have announced support for using and creating beans in their Java development tools. At this point, however, nothing is stopping you from writing your own beans, so just grab the specification and start writing. It's a lot less complicated than creating an OCX ever was.</p>


<p><b>DDJ</b></p>


<H4><a name="l1">Listing One</H4>

<pre>public class SimpleBean {<p></p>
    // Define the 'Visible' property
    public boolean getVisible() { return _visible; }
    public void setVisible( boolean visible ) { _visible = visible; }
    private boolean _visible;
}
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<p>(a) </p>

<pre>// A simple (but not a Beans) listenerinterface ClickListener {
    void click();
}
<p></p>
(b)
<pre>// An implementation of a simple listener<p></p>
public class MyClickListener implements ClickListener {
    public void click() {
        System.out.println( "You clicked!" );
    }
}
<p></p>
(c)
<pre>public class MyComponent {    private Vector _clickListeners = new Vector();
<p></p>
    public void addClickListener( ClickListener listener ) {
        _clickListeners.addElement( listener );        
    }
    protected void handleClick() {
        for( int i = 0; i &lt; _clickListeners.size(); ++i ){
            ((ClickListener) _clickListeners.elementAt(i)).click();
        }
    }
}
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<p>(a)</p>

<pre>// A Beans listener interfaceinterface ClickListener extends java.util.EventListener {
    void click( ClickEvent event );
}
<p></p>
(b)
<pre>// A Beans event data classpublic class ClickEvent extends java.util.EventObject {
    public ClickEvent( Object source ) {
        super( source );
    }
}
<p></p>
(c)
<pre>// A Beans event sourcepublic class MyComponent {
    private Vector _clickListeners = new Vector();
    public synchronized void addClickListener( ClickListener listener ) {
        _clickListeners.addElement( listener );        
    }
    public synchronized void removeClickListener( ClickListener listener ) {
        _clickListeners.removeElement( listener );
    }
    protected void handleClick( ClickEvent event ) {
        Vector l;
        synchronized( this ) {
            l = (Vector) _clickListeners.clone();
        }
        for( int i = 0; i &lt; l.size(); ++i ){
            ((ClickListener) l.elementAt(i)).click( event );
    }
}
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<p>(a)</p>

<pre>public class MyDialog extends java.awt.Dialog implements ClickListener {    public MyDialog() {
        super( null, true );
        pb = new PushButton( "pb_1" );
        pb.addClickListener( this );
<p></p>
        add( "Center", pb );
        pack();
    }
    public void click( ClickEvent event ) {
        System.out.println( "You clicked!" );
    }
    private PushButton pb;
    public static void main( String args[] ) {
        MyDialog app = new MyDialog();
        app.show();
    }
}
<p></p>
(b)
<pre>public class MyDialog2 extends java.awt.Dialog implements ClickListener {    public MyDialog2() {
        super( null, true );
        pb_1 = new PushButton( "pb_1" );
        pb_1.addClickListener( this );
        pb_2 = new PushButton( "pb_2" );
        pb_2.addClickListener( this );
<p></p>
        add( "Center", pb_1 );
        add( "Center", pb_2 );
        pack();
    }
    public void click( ClickEvent event ) {
        Object source = event.getSource();
        if( source == pb_1 ){
            System.out.println( "You clicked pb_1!" );
        } else if( source == pb_2 ){
            System.out.println( "You clicked pb_2!" );
        }
    }
    private PushButton pb_1;
    private PushButton pb_2;
<p></p>
    public static void main( String args[] ) {
        MyDialog2 app = new MyDialog2();
        app.show();
    }
}
<p></p>
(c)
<pre>class pb_1_Relay implements ClickListener {    public pb_1_Relay( MyDialog3 dlg ) { _target = dlg; }
    public void click( ClickEvent event ) {
        _target.pb_1_Click( event );
    }
    private MyDialog3 _target;
}
class pb_2_Relay implements ClickListener {
    public pb_2_Relay( MyDialog3 dlg ) { _target = dlg; }
    public void click( ClickEvent event ) {
        _target.pb_2_Click( event );
    }
    private MyDialog3 _target;
}
public class MyDialog3 extends java.awt.Dialog {
    public MyDialog3() {
        super( null, true );
        pb_1 = new PushButton( "pb_1" );
        pb_1.addClickListener( new pb_1_Relay( this ) );
        pb_2 = new PushButton( "pb_2" );
        pb_2.addClickListener( new pb_2_Relay( this ) );
<p></p>
        add( "Center", pb_1 );
        add( "South", pb_2 );
        pack();
    }
    public void pb_1_Click( ClickEvent event ) {
        System.out.println( "You clicked pb_1!" );
    }
    public void pb_2_Click( ClickEvent event ) {
        System.out.println( "You clicked pb_2!" );
    }
    private PushButton pb_1;
    private PushButton pb_2;
    public static void main( String args[] ) {
        MyDialog3 app = new MyDialog3();
        app.show();
    }
}
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
