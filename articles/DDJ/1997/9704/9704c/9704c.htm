<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal April 1997: A Rapid Entropy-Coding Algorithm</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>A Rapid Entropy-Coding Algorithm</h1>

<p><i>Dr. Dobb's Journal</i> April 1997
</p>
<h2>Encoding and decoding with near-optimal compression ratios</h2>

<h3>By Wm. Douglas Withers</h3>

<I>Wm. Douglas, a member of the department of Mathematics at the U.S. Naval Academy and a research scientist with Pegasus Imaging Corp., can be contacted at wdw@ sma.usna.navy.mil.</I>

<hr>

<p>There are two problems with compressing digital data -- modeling and entropy coding. Whatever the given data represents in the real world, it exists in digital form as a sequence of symbols, such as bits. The modeling problem is to choose a suitable symbolic representation for the data and to predict for each symbol of the representation the probability of the occurrence of each allowable value for that symbol. The entropy-coding problem is to code each symbol as compactly as possible. (In the realm of lossy compression, there is a third problem -- evaluating the relative importance of various kinds of errors.)</p>

<p>For example, suppose you want to transmit messages composed of the letters <i>a</i>, <i>b</i>, <i>c</i>, and <i>d</i>. A straightforward scheme for coding these messages in bits would be to represent <i>a</i> by 00, <i>b</i> by 01, <i>c</i> by 10, and <i>d</i> by 11. However, suppose that for any letter of the message (independent of all other letters), <i>a</i> occurs with probability 0.5, <i>b</i> with 0.25, and <i>c</i> or <i>d</i> with 0.125 each. You then might choose a shorter representation for <i>a</i>, at the cost of accepting longer representations for the other letters. You could represent <i>a</i> by 0, <i>b</i> by 10, <i>c</i> by 110, and <i>d</i> by 111. This representation is more compact on average; indeed, it is the most compact representation possible (though not uniquely so). In this example, modeling involves determining the probabilities for each possible symbol value; entropy coding involves determining the representations in bits from those probabilities. In short, the probabilities associated with the symbol values play a fundamental role in entropy coding.</p>

<p>Entropy coding is an abstract problem weakly related to the type of data being compressed, while modeling of data compression depends intimately on the type of data being compressed. Entropy coding is well understood, while for many real-world types of data, the modeling issue remains mysterious. In this article, I'll address entropy coding and the most rudimentary aspect of modeling. The algorithm I describe here, which I call the ELS-coder (short for Entropy Logarithmic-Scale), allows rapid encoding and decoding. Though the ELS-coder has a pending patent, Pegasus Imaging licenses it on a royalty-free basis. (For more information, send e-mail to sarmstrong@jpg.com.)</p>

<h3>The Decoding Algorithm </h3>

<p>The ELS-coder works only with a binary alphabet {0,1}. You can encode symbols from larger alphabets, but they must first be converted to a binary format. The programs COMPRESS and EXPAND (provided electronically; see "Availability," page 3) illustrate how this is done. This conversion is a disadvantage, but a binary alphabet facilitates rapid coding and rapid probability estimation.</p>

<p>The ELS-coder was developed for an application that would generally compress a dataset once and then decompress it many times, so decoding speed was more important than encoding speed. We therefore designed the decoder first, and the encoder to fit. </p>

<p>The decoder in <a name="rl1"><a href="9704c.htm#l1">Listing One</A> oes not provide any compression -- it simply extracts bits from a file (and not in the most efficient manner, either). The most-significant bits of each byte in the file are extracted first. It is presented here as an illustration of a decoder's operation. (I assume that a <i>char</i> has 8 bits of precision, a <i>short</i> 16 bits, and a <i>long</i> 32 bits of precision.)</p>

<p>For the decoder to hold data, it must be furnished with several states. It is convenient to represent the state of the decoder by two components: <i>b</i>, indicating the quantity of data (in bits) held by the decoder; and <i>x</i>, indicating the content of that data. When called upon to decode a symbol (the procedure <i>decode_bit()</i>), the decoder is in one of several possible states. One subset of these states represents the symbol value 0, and another the symbol value 1. The decoder determines to which subset its state belongs (by comparing <i>x</i> to <i>Threshold[b]</i>). It then transitions to a new state to reflect the depletion of its store of data (by decrementing <i>b</i> and, if necessary, decreasing <i>x</i>). At times (when <i>b</i> reaches the value 0), the decoder must replenish its store of data by reading from an external file (<i>decode_import()</i>). This <i>import</i> operation modifies both <i>x</i> and <i>b</i>.</p>

<p>Enhancements to this example produce the ELS decoding algorithm. In <a href="9704c.htm#l1">Listing One</A>, <i>A[b]</i> gives the number of allowable states of a system holding <i>b</i> bits of data. Thus <i>A[b]</i>=2<sup><i>b</i></sup>. There are <i>A[b]</i> allowable values for <i>x</i> at any time. In arithmetic coding, this relationship between the number of bits of data in a system and the number of allowable states remains valid even when <i>b</i> is not an integer.</p>

<p>I apportioned the allowable values corresponding to 0 and 1, respectively, so that all of the former values were less than all of the latter. Thus you can determine to which subset of values the value of <i>x</i> belongs by comparing it to <i>Threshold[b]</i>, which is the minimum value of <i>x</i> corresponding to 1. When the symbol value 0 is decoded, the number of allowable values for <i>x</i> necessarily becomes the value of <i>Threshold[b]</i> before decoding the symbol. </p>

<p><a name="rl2"><a href="9704c.htm#l2">Listing Two</A> is a full-fledged ELS decoder, although at a crude level of accuracy. (The procedures for initializing and terminating the decoding process are available electronically.)</p>

<p>There are differences between <a href="9704c.htm#l1">Listings One</A> and Two. First, to compress symbols from a binary alphabet, you work with quantities of data smaller than a bit. You therefore define a "jot" to be a unit of data equal to 1/<i>F</i> of a byte, <i>F</i> being an integer larger than 8. In <a href="9704c.htm#l2">Listing Two</A>, <i>F</i> is given the value 15; in practice, <i>F</i> normally takes larger values. <a href="9704c.htm#l2">Listing Two</A> measures data in jots rather than bits. For example, <i>A[j]</i> now gives the number of allowable values for <i>x</i> for a given number of jots. This is determined by the same relation as previously: <i>A[j]</i> takes the value 2<sup>8<i>j</i>/F</sup> with appropriate rounding. For example, 23 jots is equal to 23/15 bytes or 8 times 23/15 bits. The number of corresponding allowable values is 2<sup>8 x 23/15</sup>, or about 4927.59. I round this to give a value of 4928 for <i>A[</i>23<i>].</i></p>

<p>Second, consider the probability associated with the given symbol value. Thus <i>decode_bit()</i> now has a parameter <i>rung</i> (whose relation to the probability will later be made explicit). This is used as an index into a table <i>Ladder[]</i> of structures with three elements: <i>c0</i> and <i>c1</i> (indicating the number of jots required to code 0 and 1, respectively), and <i>Threshold</i>, which (as before) is the lower bound for allowable values of <i>x</i> corresponding to the symbol value 1. </p>

<p>Third, unlike <i>b</i> in <a href="9704c.htm#l1">Listing One</A>, <i>j</i> is not decreased by a single predictable quantity for each symbol decoded. Thus, you can't depend on <i>j</i> hitting the value 0 exactly as it is decreased. Therefore, I have expanded <i>x</i> from one byte to two; I call the higher-order byte the "working" byte and the lower-order byte "reserve." Keep the reserve byte completely filled with data and the working byte at least partially filled with data -- that is, maintain at least 256 allowable values for <i>x</i>. I let <i>j</i> indicate the amount of data in the working byte of <i>x</i>, with negative values of <i>j</i> indicating that the reserve byte is at least partially depleted. Meaningful values for <i>j</i> range from -<i>F</i> when the decoder is completely empty of data (though in actual operation the minimum value attained by <i>j</i> is 1-<i>F</i>), to <i>F</i> when the decoder is completely full. The decoder calls <i>decode_import()</i> when the value of <i>j</i> dips to zero or lower. Moreover, <i>j</i> is never decreased by more than <i>F</i> in a single call to <i>decodeBit()</i>, lest you exhaust the reserve byte.</p>

<p>Fourth, importing a byte is complicated by the expansion of <i>x</i> to two bytes. It involves a shift and OR rather than a simple assignment (as in <a href="9704c.htm#l1">Listing One</A>).</p>

<p>Consider as an example a call to <i>decodeBit()</i> with a value of 0 for <i>rung</i>, the value of <i>j</i> being 3. This indicates that <i>x</i> contains <i>F</i>+3=18 meaningful jots. Since <i>A[</i>18<i>]</i> = 776, the value of <i>x</i> must be one of 0,1,...,775. If the decoded symbol has the value 0, then <i>j</i> will decrease to 2 by subtracting <i>Ladder[</i>0<i>]</i>.<i>c</i>0, and <i>x</i> will then contain <i>F</i>+2=17 meaningful jots. If the decoded symbol has the value 0, then <i>j</i> will decrease to -1 by subtracting <i>Ladder[</i>0<i>]</i>.<i>c</i>1, and <i>x</i> will then contain <i>F</i>-1=14 meaningful jots. Since <i>A</i>[17] = 536 and <i>A</i>[14] = 177, out of the 776 allowable values for <i>x</i>, the 536 values 0,1,...,535 represent 0 and the 177 values 536, 537,...,712 represent 1. Suppose the value of <i>x</i> is 600. The first step in decoding the symbol is to compare 600 to 536 (the value of <i>Ladder[</i>0<i>]</i>.<i>Threshold[</i>3<i>]</i>) and see that the symbol has the value 1. Then subtract 4 from <i>j</i>, giving it the value -1. The allowable values for <i>x</i> are now 0,1,...,177; subtract 536 from <i>x</i> (making it 64) to bring it within this range.</p>

<p>Since -1<img src="lteq10.gif" width="5" height="7">0, you have exhausted the data in the working byte of <i>x</i>; call <i>decode_import()</i> to import a byte from the external file. Suppose the next byte in the external file has the value 137. You update the value of <i>x</i> to (64 <img src="dot10.gif" width="5" height="8"> 256)+137=16521 (actually accomplished by shifting and ORing) and update the value of <i>j</i> to -1+15 = 14. The number of allowable values for <i>x</i> is now <i>A[</i>14+15<i>]</i>, or 45283.</p>

<p>Of the 776 allowable values for <i>x</i>, 536 represent 0 and 177 represent 1. The other 776-536-177 = 63 values are wasted. This is a defect of the decoder. Ideally, every allowable value should represent either 0 or 1, but the restriction of <i>j</i> and <i>A</i> to integer values makes such waste unavoidable, at least some of the time.</p>

<p>The definition of "allowable" states does not consider the future development of a state. Thus, some allowable states may not lead to allowable states in the future; such states are unusable in practice. The situation where such states exist is called a "data leak." In the presence of a data leak, there are possible states for the decoder that are not allowable. Another characteristic of a data leak is that some possible coded data streams are illegal or redundant.</p>

<p>Data leaks form one of two main sources of coding inefficiency in the ELS-coder, the other being inaccuracy in the proportion of values allocated to 0 and 1. However, for larger values of <i>F</i>, the inefficiency is quite modest. A good working value for <i>F</i> is 754; in this case, the data leak described causes a coding inefficiency of less than 0.008 bits per symbol.</p>

<p>A data leak exists when some allowable states of the decoder do not lead to allowable states of the decoder at a later time. Since these allowable states embody the data present in the decoder, a data leak implies that data is somehow dissipating into nothing. The situation is analogous to an engine failing to convert all the energy input into usable energy output. It is a virtue for an engine to convert a large portion of energy input to energy output. On the other hand, if you expect energy output to exceed energy input for any engine, you've made a fundamental error.</p>

<p>The analogous principle for the ELS-coder (or for any decoder viewed in the light of the paradigm) is that all allowable states of the decoder <i>must</i> be derivable from allowable states of the decoder at any <i>earlier</i> time. The name for a violation of this principle is "perpetual motion," which implies the existence of allowable states that are not possible. Data leaks and perpetual motion are dual evils; while the former is regrettable, the latter must be avoided at all costs.</p>

<p>For example, the components <i>c0</i> and <i>c1</i> for each entry of the array <i>Ladder[]</i> in <a href="9704c.htm#l2">Listing Two</A> must satisfy the constraint that <i>A[j-c0]+A[j-c1] </i><img src="lteq10.gif" width="5" height="7"> <i>A[j]</i> for all values of <i>j</i> between 1 and <i>F</i>, inclusive; that is, of <i>A[j]</i> allowable values for <i>x</i> at any time, those representing 0 and those representing 1 can total no more than <i>A[j]</i>.</p>

<p>The example decoding process illustrates a second data leak in the decoder, which may be less immediately apparent. This occurs while importing a byte from the external file. Immediately before importing the byte, <i>x</i> has 177 allowable values. Importing a byte makes the number of values available 256 <img src="dot10.gif" width="5" height="8"> 177 = 45312. However, the number of allowable values after importing is specified as 45283; thus 29 allowable values have been lost. In constructing the table <i>A[]</i>, avoid perpetual motion while importing a byte. Recall that <i>A[j]</i> takes the value 2<sup>8<i>j</i>/<i>F</i></sup> with "appropriate" rounding: "appropriate" means that <i>A[j]</i> takes the value 2<sup>8<i>j</i>/<i>F</i></sup> rounded to the nearest integer when <i>F</i> <img src="lteq10.gif" width="5" height="7"> <i>j</i> &lt; 2<i>F</i>, but for 0 <img src="lteq10.gif" width="5" height="7"> <i>j</i> &lt; <i>F</i>, to avoid perpetual motion, we calculate <i>A[j]</i> as (<i>A[j</i> + <i>F]</i> + 255)/256 (that is, rounded up).</p>

<p>The value of <i>rung</i> to be used in a call to <i>decodeBit()</i> is dictated by the probabilities that the symbol to be decoded will have value 0 or 1. Let <i>p</i> denote the probability that the symbol takes the value 1. For a given element of the array <i>Ladder[]</i>, the expected number of jots used to code the symbol is <i>c0 </i><img src="dot10.gif" width="5" height="8"> (1-<i>p</i>)+<i>c1 </i><img src="dot10.gif" width="5" height="8"><i> p</i>. For example, with a value of 0 for <i>rung</i>, the expected number of jots is (1-<i>p</i>)+4<i>p</i> = 1+3<i>p</i>; with a value of 1 for <i>rung</i>, the expected number of jots is 2(1-<i>p</i>)+2<i>p</i> = 2. For data compression, the smaller of these two values is preferable; you can solve the inequality 1+3<i>p</i> <img src="lteq10.gif" width="5" height="7"> 2 for <i>p</i> to find that the value 0 is preferable to 1 for <i>rung</i> if <i>p</i> <img src="lteq10.gif" width="5" height="7"> 1/3. With similar calculations, you find that 1 is the preferred value if 1/3 <img src="lteq10.gif" width="5" height="7"> <i>p <img src="lteq10.gif" width="5" height="7"> </i>2/3 and 2 is the preferred value if 2/3 <img src="lteq10.gif" width="5" height="7"> <i>p</i>. (At the boundary points between these intervals, you may choose the preferred value for either side.)</p>

<p>Incidentally, the theoretical optimum compression can be calculated <i>c0= F</i>log<sub>256</sub><i> (1-p), c1=F</i>log<sub>256</sub><i> p</i>; the corresponding expected number of jots <i>-((1-p)</i>log<sub>256 </sub><i>(1-p) + p</i>log<sub>256</sub><i> p)F</i> is known in data compression theory as the "entropy" of the symbol (usually measured in bits rather than jots).</p>

<p>All entries of the table <i>Ladder[]</i> are calculated so that the values of <i>c0</i> and <i>c1</i> satisfy the following "ladder" constraints:</p>

<p>1. <i>A[j-c0]+A[j-c1] <img src="lteq10.gif" width="5" height="7"> A[j]</i> for any value of <i>j</i> between 0 and <i>F</i>-1, inclusive (to avoid perpetual motion).</p>

<p>2. <i>c0</i> &gt; 0 and <i>c1</i> &gt; 0 (so that each symbol value 0 or 1 corresponds to at least some allowable values).</p>

<p>3. <i>c0</i> &lt;= <i>F</i> and <i>c1</i> &lt;= <i>F</i> (to avoid running beyond the end of the reserve byte while decoding a symbol).</p>

<p>4.Subject to the above criteria, <i>A[J]-(A[J-c0]+A[J-c1])</i> should be minimized (to minimize data leaks).</p>

<p></p>

<p>In all cases, <i>Ladder[i].Threshold</i> takes the value <i>A</i> - <i>Ladder[i].c</i>0<i>+F</i>. With <i>F</i>=15 there are three combinations of <i>c0</i> and <i>c1</i> satisfying all the aforementioned criteria; these yield the three entries of the table <i>Ladder</i> in <a href="9704c.htm#l2">Listing Two</A>.</p>

<h3>The Encoding Algorithm </h3>

<p>The ELS encoder uses knowledge of the decoder's inner workings to create a data stream that will manipulate the decoder into producing the desired sequence of decoded symbols. <a name="rl3"><a href="9704c.htm#l3">Listings Three</A> and<a name="rl4"> <a href="9704c.htm#l4">Four</A> are procedures for encoding that are compatible with the decoding procedures of <a href="9704c.htm#l2">Listing Two</A>. The tables <i>A[]</i> and <i>Ladder[]</i> and the macro <i>F</i> are identical to the decoder's.</p>

<p>The ELS-encoder operates by considering <i>all</i> possible coded data streams, gradually eliminating those inconsistent with the current state of the decoder ("current" and other adverbs of time refer to position in the data stream, rather than actual temporal time). For the decoder, the "allowable" values of the internal buffer form a reference point for discussion; for the encoder, you are concerned with the set of values for the coded data stream consistent with the current set of allowable values in the decoder.</p>

<p>The encoder need not actually consider the entire coded data stream at one time. You can partition the coded data stream into three portions. From end to beginning of the data stream they are: <i>preactive</i> bytes, which as yet exert no influence over the current state of the decoder; <i>active</i> bytes, which affect the current state of the decoder and have more than one consistent value; and <i>postactive</i> bytes, which affect the current state of the decoder and have converged to a single consistent value. Each byte of the coded data stream goes from preactive to active to postactive; the earlier a byte's position in the stream, the earlier these transitions occur. A byte is not actually moved to the external file until it becomes postactive. Only the active portion of the data stream need be considered at any time.</p>

<p>Since the internal buffer of the decoder contains two bytes, there are always at least two active bytes. The variable <i>n</i> counts the number of active bytes in excess of 2. In theory, <i>n</i> can take arbitrarily high values, but higher values become exponentially less likely. You number the active bytes 0, 1,...,<i>n</i>+1 from latest to earliest. The encoder has a variable <i>j</i> matching in value the decoder's variable <i>j</i> at the same point in the data stream.</p>

<p>You can think of the <i>n</i>+2 active bytes as forming a single unsigned number with <i>n</i>+2 bytes of precision, byte 0 being least significant and byte <i>n</i>+1 being most significant. The set of allowable values in the decoder form a continuous range; the consistent values of the active bytes in the encoder likewise form a continuous range. Thus you can describe this range simply by its minimum value <i>m</i> and maximum value <i>M</i>. Each of these is a nonnegative integer with <i>n</i>+2 bytes of precision; write <i>m<sub>k</i></sub> or <i>M<sub>k</i></sub> to refer specifically to byte <i>k</i> of <i>m</i> or <i>M</i>, respectively. Moreover, since the number of elements of the range is given by <i>A[F+j],</i> only the minimum value need be specified.</p>

<p>Suppose <i>n</i> &gt; 0. Consider the most-significant active byte, byte (<i>n</i>+1). The minimum consistent value for this byte is <i>m<sub>n</i>+1</sub> and the maximum is <i>M<sub>n</i>+1</sub>. Since this byte is active and not yet postactive, it has more than one consistent value; thus <i>m<sub>n</i>+1</sub> &lt; <i>M<sub>n</i>+1</sub>. The current number of allowable values for the decoder's internal buffer is <i>A[j]</i>; and <i>M = m+(A[j]</i>-1). Recall that <i>A[j]</i> is a 2-byte value. If you consider the operation of adding (<i>A[j]</i>-1) to <i>m</i> byte-by-byte to obtain <i>M</i>, you see that a carry must occur from byte 1 to byte 2 and on upward to byte (<i>n</i>+1) in order for byte (<i>n</i>+1) to take differing values for <i>m</i> and <i>M</i>. You must also have <i>m<sub>n</i>+1</sub>+1 = <i>M<sub>n</i>+1</sub>. Furthermore, if <i>n </i>&gt; 1, then <i>m</i><sub>2</sub>,<i>m</i><sub>3</sub>,...,<i>m<sub>n</i></sub> must all take the maximum possible value, 255, in order for the carry to propagate from byte 1 to byte (<i>n</i>+1). (Hence, <i>M</i><sub>2</sub>,<i>M</i><sub>3</sub>,...,<i>M<sub>n</i></sub>, all take the minimum possible value, 0.) </p>

<p>This is convenient in that you need not separately store all <i>n</i>+2 bytes of <i>m</i>: You can make the 4-byte variable <i>x_min</i> serve. Bytes 0, 1, and 2 of <i>x_min</i> represent <i>m</i><sub>0</sub>, <i>m</i><sub>1</sub>, and (when <i>n</i> is positive) <i>m</i><sub>2</sub>, respectively. When <i>n</i>&gt;1, then byte 3 of <i>x_min</i> represents <i>m<sub>n</i>+1</sub>. Since bytes <i>m</i><sub>2</sub>,...,<i>m<sub>n</i></sub> all hold the same value, <i>x_min</i> and <i>n</i> together suffice to describe <i>m</i> in entirety. Moreover, most of the arithmetic operations to be performed on <i>m</i> can be performed on <i>x_min</i> in a completely ordinary way. The exceptions can be recognized in the code because they require the manipulation of <i>n</i>.</p>

<p>Now consider the arithmetic operations involved in encoding a symbol. Recall the sequence of events in the decoder attending the decoding of the symbol value 0. Initially, <i>x</i> has one of <i>A[F+j]</i> values. The decoder compares <i>x</i> to <i>Ladder[rung].Threshold[j]</i>; a 0 is decoded if <i>x</i> holds the lesser value. Then <i>Ladder[rung].c0</i> is subtracted from <i>j</i>, reflecting the newly decreased number of allowable values for <i>x</i>. The allowable values eliminated are all taken from the top of the range (those greater than <i>Ladder[rung].Threshold[j]</i>). Thus <i>m</i> does not change; the encoder need not modify <i>x_min</i> or <i>n</i> but only <i>j</i>.</p>

<p>For encoding the symbol value 1, the chief difference in the sequence of events in the decoder as compared to the case for 0 is that those values representing 0, numbering <i>Ladder[rung</i>].Threshold[j], are eliminated from the bottom of the range of consistent values for the coded data stream. Additional values may be eliminated from the top of the range if there is a data leak. Thus the encoder, in addition to changing the value of <i>j</i> to track its value in the decoder, must add <i>Ladder[rung].Threshold[j]</i> to <i>x_min</i> to raise <i>m</i>. If the encoder is not representing <i>M</i> directly, the operation of eliminating consistent values from the top of the range takes care of itself. The unusual format by which <i>x_min</i> represents <i>m</i> never becomes an issue in <i>encodeBit()</i>. </p>

<p>When the value of <i>j</i> dips to zero or lower, the encoder calls <i>encode_export()</i>. In contrast to <i>decode_import()</i>, which invariably reads a single byte from the external file, <i>encode_export()</i> writes from zero to several bytes in a single call. One of its tasks is to determine whether the most-significant active bytes have converged to a unique consistent value, thus becoming postactive and ready to be exported to the encoder's external file. These most-significant bytes may actually converge to a unique consistent value well before <i>encode_export()</i> is called, but there is no harm in waiting until then to check. On each call, <i>encode_export()</i> moves a single byte from the preactive to the active portion of the coded data stream. The format by which <i>x_min</i> represents <i>m</i> does become an issue in <i>encode_export()</i>; you must manipulate <i>n</i> and <i>x_min</i> together.</p>

<h3>The Example Programs</h3>

<p>ELSCODER.H and ELSCODER.C (available electronically) contain declarations and definitions for an implementation of the ELS-coder, respectively. COMPRESS.C and EXPAND.C (also available electronically) use the ELS-coder to compress and expand a file using a 1-byte model.</p>

<p><a href="9704c.htm#l1">Listings One</A> through Four are designed more for didactic value than utility. The sample programs, on the other hand, emphasize utility. Note the following differences:</p>

<ul>
<li>The variables describing the states of the decoder and encoder have been collected into structures named <i>d</i> and <i>e</i>, respectively.  <li>Globally visible names in the coder have been prefixed to help prevent namespace collisions.
  <li><i>decode_import()</i> and <i>encode_export()</i> have been eliminated and the corresponding operations incorporated directly into <i>els_decode_bit()</i> and <i>els_encode_bit()</i>.
  <li>The value of F has been increased from 15 to 754. The value 754 represents a sort of local optimum. Although higher values for <i>F</i> generally yield better coding efficiency, the vagaries of the ladder constraints dictate that higher compression ratios are attainable for the value 754 than for 755 and subsequent higher values up to around 1508. 
</ul>

<p>ELSCODER.C includes the straightforward procedures <i>els_decode_start()</i> and <i>els_encode_start()</i> for initializing, and <i>els_decode_end()</i> and <i>els_encode_end()</i> for terminating encoding and decoding.</p>

<p>The sample files also incorporate some enhancements to the basic ELS-coder. First is probability estimation. The user must categorize the bits to be coded into groups; the bits of each group share statistical properties. (We call each group a <i>context </i>for the given bit. The sample shell programs COMPRESS.C and EXPAND.C provide an example of this.) The ELS-coder then maintains its own probability estimate for each group, based on the previously coded bits for that group. It does this using a state machine that transits to a state indicating a higher probability when the bit value 1 is coded or a state indicating a lower probability when the bit value 0 is coded. By defining the constant ALACRITOUS or not, you select one of two state machines. Define ALACRITOUS if coding efficiency is your first priority; omit the definition if speed is your first priority.</p>

<p>Second, although the entropy-coding algorithm works with units of data smaller than a bit, the source and destination files must have lengths that are multiples of a byte. Thus a file coded with ELS-coder is likely to end with a fraction of a byte not containing meaningful data. The sample ELS-coder attempts to make a virtue of necessity by using this empty portion to encode something akin to a checksum. When encoding is concluded, a certain number of consistent values remain in the encoder; these are used to store the value of <i>j</i> to whatever precision is possible. This is done automatically in the procedure <i>els_encode_end()</i>. If desired, users can call <i>els_decode_ok()</i> when finished decoding but before calling <i>els_decode_end()</i>; this verifies that the value of <i>j</i> matches that sent by the encoder. Any corruption of the compressed data will most likely profoundly alter the course of execution of the decoder; the probability of ending with the same value of <i>j</i> is quite small. Of course, this value is only encoded to the precision possible with the fraction of a byte remaining at the end of coding; thus the probability of hitting the correct value by chance ranges from 1 in 255 to 1, depending on what that fraction is.</p>

<h3>Acknowledgments</h3>

<p>I would like to thank Stephen Mann for reading an early draft of this article and proposing many improvements in both form and content.</p>


<p><b>DDJ</b></p>


<H4><a name="l1">Listing One</H4>

<pre>int b; int Threshold[10] = {0, 1, 2, 4, 8, 16, 32, 64, 128, 256};
int A[] = Threshold+1; /* For expository purposes only */
FILE *external_in;
unsigned char x;
int decode_Bit(){
   if (x &gt;= Threshold[b]){
       x-= Threshold[b];
       if (--b &lt;= 0)
           decode_import();
       return 1;
   }else{
       if (--b &lt;= 0)
             decode_import();
       return 0;
   }
}
void decode_import(){
   x = fgetc(external_in);
   b +=  8;
}
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>#define F 15unsigned short A[2*F] = {1, 2, 3, 4, 5, 7, 10, 14, 20, 28, 41, 59, 85, 123, 177, 256, 371, 536, 776, 1123, 1625, 2353, 3405, 4928, 7132, 10321, 14938, 21619, 31288, 45283};
<p></p>
struct{
    unsigned short *Threshold;
    short c0;
    short c1; 
    } Ladder[3] = {{A+14, 1, 4}, {A+13, 2, 2}, {A+11, 4, 1}};
unsigned short x;
int j;
FILE *external_in;
<p></p>
int decode_bit(unsigned char rung){
     if (x &gt;= Ladder[rung].Threshold[j]){
       x -=  Ladder[rung].Threshold[j];
       if ((j -= Ladder[rung].c1) <SPECIAL>&lt;=</SPECIAL> 0)
          decode_import();
       return 1;
     }else{
       if ((j -= Ladder[rung].c0) <SPECIAL>&lt;=</SPECIAL> 0)
          decode_import();
       return 0;
     }
}
void decode_import(){
  j += F;
  x &lt;&lt; = 8;
  x |= fgetc(external_in);
}
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>unsigned long x_min;int j;
int n;
FILE *external_out;
void encode_bit(unsigned char rung, int bit){
   if (bit){
      /* Encode a 1 */
      x_min  +=  Ladder[rung].Threshold[j];
      j  -=  Ladder[rung].c1;
   }else{
      /* Encode a 0. */
      j  -=  Ladder[rung].c0;
   }
if (j <SPECIAL>&lt;=</SPECIAL> 0)
      encode_export();
}
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>void encode_export(){    unsigned long diff_bits;
    /* First check for bytes becoming postactive; diff_bits marks differences 
       between max and min consistent values */
    j  +=  F;
    diff_bits = (x_min + A[j] - 1) ^ x_min;
    switch (n){
    default: /* 2 or greater */
        if (diff_bits&amp;0xFF000000)
        break;
    fputc(x_min&gt;&gt;24, external_out);
    while (-- n &gt; 1)
    fputc((x_min&gt;&gt;16)&amp;0xFF, external_out);
case 1:
    if (diff_bits &amp; 0x00FF0000)
        break;
    fputc((x_min&gt;&gt;16)&amp;0xFF, external_out);
    n -- ;
case 0:
    if (diff_bits &amp; 0x0000FF00)
        break;
    fputc((x_min&gt;&gt;8) &amp; 0xFF, external_out);
    n --;
    }
}
/* Move a byte from preactive to active. */
if (++ n &gt; 2)
   x_min = (x_min&amp;0xFF000000)| ((x_min&amp;0x0000FFFF)&lt;&lt; 8);
else
   x_min &lt;&lt;= 8;
}
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
