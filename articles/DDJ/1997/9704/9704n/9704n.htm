<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal April 1997: Undocumented Corner</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>How MFC Does ActiveX Connections</h1>

<p><i>Dr. Dobb's Journal</i> April 1997
</p>
<h3>By George Shepherd and Scot Wingo</h3>

<I>Scot is a cofounder of Stingray Software. He can be contacted at ScotWi@aol.com. George is a senior computer scientist with DevelopMentor and can be contacted at 70023.1000@compuserve.com. They are the coauthors of MFC Internals (Addison-Wesley, 1996).</I>

<hr>

<p>When they fully grasp the gestalt of the Component Object Model (COM) for the first time, many people ask this question: "I certainly understand being able to call into a COM object using an interface. But what if I want to have my COM object call back out to the client?" OLE/ActiveX Connections were invented to address this question. This month we'll take a look at how two COM objects can set up a communication scheme whereby the object calls back to the client. We'll first examine how Connections work, then look at how MFC implements them.</p>

<p>As it turns out, having a two-way communication channel between two pieces of software is a common requirement. Given two independent software components, there are many situations where it's useful to have an object notify its client(s) of various goings on. The classic example of this is ActiveX Controls, where the controls notify their clients of special events. ActiveX Control Events are an example of the utility of ActiveX Connections. </p>

<h3>Incoming versus Outgoing Interfaces</h3>

<p>The ability for a client to call into a COM object has been available since COM was invented. Any interface implemented by a COM object is an incoming interface, so named because the interface handles incoming method calls. For clients, acquiring a COM object's incoming interface is a matter of creating the COM object in the usual way (using a function like <i>CoCreateInstance</i>) and calling methods on the interface; see <a name="rl1"><a href="9704n.htm#l1">Listing One</A> </p>

<p>Incoming interfaces are the norm for COM objects, providing a way for clients to call into COM objects. <a name="rf1"><a href="9704nf1.htm">Figure 1</A> illustrates a COM object with incoming interfaces. However, there is another kind of interface called an "outgoing interface." Outgoing interfaces (see <a name="rf2"><a href="9704nf2.htm">Figure 2</A>) are those interfaces implemented by the client so that the COM object can call the client. </p>

<p>COM already defines several standard outgoing interfaces. One of the best examples is an interface named <i>IAdviseSink,</i> which is used in conjunction with another interface named <i>IDataObject</i>. These are useful interfaces for transferring presentations (among other things) between OLE Document objects and OLE Document clients. Objects implement <i>IDataObject</i>. Once connected to the object and <i>QueryInterface</i> for <i>IDataObject</i>, the client can plug its implementation of <i>IAdviseSink</i> into the client using <i>IDataObject::DAdvise</i> and begin receiving notifications whenever the data inside <i>IDataObject</i> changes. This happens whenever the object calls back to the client's implementations of <i>IAdviseSink::OnViewChanged</i> or <i>IAdviseSink::OnDataChanged</i>.</p>

<p>This is a very specific case. The interfaces and the connection process are well-understood by both the client and the object. But suppose you want to create a very generalized case of this connection strategy. Perhaps you're inventing a new kind of COM object, and you'd like the COM object to be able to call back to its client, but you also want to generalize the connection mechanism so it's not specific to the interfaces involved. How would you do it?</p>

<p>Microsoft has taken a shot at it and defined connectable objects. Microsoft invented connectable objects to connect an ActiveX Control to its client so the control can report events back to its client. After all, ActiveX Control events are simply a way for a Control to call back to the client.</p>

<h3>The Interfaces</h3>

<p>We'll start by examining the COM interfaces involved in connections -- <i>IConnectionPoint</i> and <i>IConnectionPointContainer</i>. Both interfaces are implemented by the object (as opposed to the client). These interfaces exist for the sole purpose of connecting an object to its client. Once the connection is made, these interfaces drop out of the picture (much like monikers). Let's look at <i>IConnectionPoint</i> first; see <a name="rl2"><a href="9704n.htm#l2">Listing Two</A>. </p>

<p>You can probably guess the nature of this interface from the function names. Objects implement this interface so that clients have a way to subscribe to events. Once a client acquires this interface, the client may ask to subscribe to data change notifications via the <i>Advise</i> function. Notice the <i>Advise</i> function takes an <i>IUnknown</i>, so the callback interface can be any COM interface at all. Of course this interface also contains the complementary <i>Unadvise</i> function. </p>

<p>Clients may implement any callback interface and use <i>IConnectionPoint</i> to hand the interface over to the object so the object may call back to the client. Once the object has the callback interface (passed via <i>Advise</i>'s first parameter), the object can easily call back to the client. This begs the next question -- how can the client acquire a connection point in the first place? The answer is through the <i>IConnectionPointContainer</i> interface (see <a name="rl3"><a href="9704n.htm#l3">Listing Three</A>). </p>

<p><i>IConnectionPointContainer</i> is an unfortunate name for this interface, especially given the history of ActiveX Controls. The name <i>IConnectionPointContainer</i> may lead you to conclude that it's implemented by the control container (also known as the client). However, this interface is implemented by the object. A more descriptive name for this interface may have been <i>IConnectionPointHolder</i> because it holds connection points.</p>

<p>As you can tell from the second function, this is the interface a COM client uses to acquire an <i>IConnectionPoint</i> interface (which the client can then use to establish a connection). </p>

<p>A COM client calls <i>CoCreateInstance</i> to create a COM object. Once the client has an initial interface, the client can ask the object if it supports any outgoing interfaces by calling <i>QueryInterface</i> for <i>IConnectionPointContainer</i>. If the object answers "yes" by handing back a valid pointer, the client knows it can attempt to establish a connection.</p>

<p>Once the client knows the object supports outgoing interfaces (that is, it is capable of calling back to the client), the client can ask for a specific outgoing interface by calling <i>IConnectionPointContainer::FindConnectionPoint</i> using the GUID representing the desired interface. If the object implements that outgoing interface, the object hands back a pointer to that connection point. At that point, the client uses <i>IConnectionPoint::Advise</i> to plug in its implementation of the callback interface so the object can call back to the client.</p>

<p>To support this connection functionality, the object needs to implement these two interfaces. The most common occurrence of this functionality is within ActiveX Controls, whose clients like to listen to the controls for events. MFC remains the most convenient way to write ActiveX Controls, so you might expect MFC to implement connections. MFC's support for connections consists of three classes and a set of macros. </p>

<h3>How MFC Does It</h3>

<p>Most of MFC's support for connections lies within the <i>CCmdTarget</i> class. A quick gander at <i>CCmdTarget</i> reveals the following connection-related parts of <i>CCmdTarget</i>. <a name="rl4"><a href="9704n.htm#l4">Listing Four</A> shows these parts. </p>

<p>The minute you see the DECLARE_CONNECTION_MAP macro, you should immediately recognize it as an MFC-style lookup mechanism (think of message maps). Hmm. It appears as though MFC's going to use a similar device for connections.</p>

<p>Digging through the source files a bit more reveals some new macros: BEGIN_CONNECTION_PART, END_CONNECTION_PART, CONNECTION_IID, BEGIN_ CONNECTION_MAP, END_CONNECTION_ MAP, and CONNECTION_PART. If you're at all familiar with MFC's mechanism for implementing COM, this may look familiar. MFC implements COM using macros that expand into nested classes, with each nested class implementing an interface. MFC's COM macros provide a lookup mechanism for <i>QueryInterface</i> that maps interface IDs to the <i>vtbls</i> implemented by the nested classes. Again, it appears as though something similar is going to happen with MFC's implementation of connections. Let's take a closer look at the macros, starting with BEGIN_CONNECTION_PART, END_CONNECTION_PART, and CONNECTION_IID. MFC's support for connections is implemented using nested classes. For every connection point implemented by a <i>CCmdTarget</i>-derived object, that object has a nested class to handle the connection point. Remember again what the connection point has to do -- it has to implement <i>IConnectionPoint</i> so clients can subscribe and unsubscribe to notifications. BEGIN_CONNECTION_PART adds a nested class derived from <i>CConnectionPoint,</i> which is documented -- it simply implements the <i>IConnectionPoint</i> interface. <i>CConnectionPoint </i>is derived from <i>CCmdTarget</i> and has the MFC COM macros for implementing nested classes and interface map. </p>

<p>The best way to examine these macros is to find a situation where they're used. MFC-based ActiveX controls, for instance, have two connection points by default: one for notifying clients about events and another for notifying clients about property changes. In fact, if you look in AFXCTL.H at the class <i>COleControl</i>, you'll see a connection part for events and a connection part for properties.</p>

<p>The BEGIN_CONNECTION_PART macro adds a nested class derived from <i>CConnectionPoint</i> to <i>COleControl</i> for handling the connections. <i>CConnectionPoint</i> implements <i>IConnectionPoint</i> and includes a few handy overridable functions. The CONNECTION_ IID macro overrides the function <i>CConnectionPoint::GetIID</i> necessary to implement <i>IConnectionPoint::GetInterface</i>. Finally, END_CONNECTION_PART ends the nested class declaration and adds that class as a data member to the <i>CCmdTarget</i>-derived class. Using these macros effectively implements <i>IConnectionPoint</i> for each connection supported by the COM object.</p>

<p>Once the connections are defined, <i>CCmdTarget</i> needs a way to look up the connections. Remember, once the client acquires the <i>IConnectionPointContainer</i> interface, the client will ask for a specific connection (sounds like the perfect job for a lookup table).</p>

<p>If you're familiar with how MFC does lookups, connection maps will seem old hat. Just like MFC uses lookup tables for message handling (message maps), COM support (interface maps), and Automation (dispatch maps), MFC uses a lookup table to support <i>IConnectionPointContainer</i> using connection maps.</p>

<p>Connection maps follow the same form as other MFC lookup tables -- there's a BEGIN_CONNECTION_MAP macro, END_CONNECTION_MAP macro, and CONNECTION_PART macro to fill in the table.</p>

<p>Adding the BEGIN_CONNECTION_MAP macro to a <i>CCmdTarget</i>-derived class implements the member function <i>GetConnectionMap</i> (which was added using the DECLARE_CONNECTION_MAP macro), and a pointer to an array of "connection entries" to that class. The CONNECTION_ PART macro pairs an interface ID to a <i>CConnectionPoint</i> class that implements <i>IConnectionPoint</i>. The END_CONNECTION_MAP macro terminates the array of IID/nested class pairs.</p>

<p>At this point, the class implements a set of connection points and a lookup mechanism for the connection points. For example, <a name="rf3"><a href="9704nf3.htm">Figure 3</A> illustrates an ActiveX Control <i>CSomeControl</i> derived from <i>COleControl</i>.</p>

<p>Using the connection macros builds a structure similar to the one illustrated, where each connection point is represented by a nested class, and the mechanism for the connection lookup is chained together in the hierarchy (in exactly the same way as the rest of MFC's lookup devices, like message maps). The only things left are an implementation of <i>IConnectionPointContainer</i> and the rest of the <i>IConnectionPoint</i> functions (like <i>Advise</i> and <i>Unadvise</i>). </p>

<h3>MFC's <i>IConnectionPointContainer</i> Implementation</h3>

<p>Notice the <i>XConnPtContainer</i> structure declaration in the middle of the <i>CCmdTarget</i> declaration (<a href="9704n.htm#l4">Listing Four</A>). <i>CCmdTarget</i> holds a pointer to MFC's implementation of <i>IConnectionPointContainer</i> in <i>m_xConnPtContainer.m_vtbl</i>. As you can probably guess from the name, <i>CCmdTarget::EnableConnections</i> fills this variable. <a name="rl5"><a href="9704n.htm#l5">Listing Five</A> shows how the folks in Redmond fill the <i>CCmdTarget</i> class's connection point container <i>vtable</i> (this function can be found in OLECONN.CPP).</p>

<p>If you've ever looked into MFC's Automation support, you may notice how similar <i>EnableConnections</i> is to <i>EnableAutomation</i>. At any rate, calling <i>EnableConnections</i> is a requirement to getting the connection machinery up and running.</p>

<p>Notice the use of a class called <i>COleConnPtContainer</i>. This is an undocumented class that MFC uses to implement <i>IConnectionPointContainer</i>. If fact, if you look in the MFC source file OLECONN.CPP, you'll see the definition for <i>COleConnPtContainer</i>; see <a name="rl6"><a href="9704n.htm#l6">Listing Six</A>. There isn't a whole lot to <i>COleConnPtContainer</i> -- it simply implements <i>IConnectionPointContainer</i>. The interesting functions are <i>EnumConnectionPoints</i> and <i>FindConnectionPoint</i>.</p>

<p>Clients call <i>EnumConnectionPoints</i> to obtain an enumerator to find out all the available connection points to which it can connect. MFC's implementation creates an instance of the <i>CEnumConnPoints</i> class, another undocumented MFC class. <i>CEnumConnPoints</i> is based on <i>CEnumArray</i>, MFC's generic void pointer COM-style enumerator. <i>CEnumConnPoints</i> holds a list of <i>IConnectionPoint</i> pointers. In addition to the regular enumeration functions, <i>CEnumConnPoints</i> has a function named <i>AddConnectionPoint,</i> which adds a pointer to an <i>IConnectionPoint</i> interface to the enumeration.</p>

<p>Whenever clients call <i>IConnectionPointContainer::EnumConnectionPoints</i>, the object builds a <i>CEnumConnPoints</i> on the fly and starts adding connection points to the enumerator. MFC's implementation first calls an overridable function in <i>COleConnPtContainer</i> named <i>GetExtraConnectionPoints</i>. This is overridable, so you can bypass the entire macros listed earlier if you want to add connection points. <i>COleConnPtContainer</i> takes all the connection points from <i>GetExtraConnectionPoints</i> and adds them to the enumerator. Then <i>COleConnPtContainer</i> walks the connection maps, adding connections to the enumerator. At the end, the client gets back an enumerator.</p>

<p>The other interesting function is <i>FindConnectionPoint</i>. Clients call <i>FindConnectionPoint</i> to figure out if a certain connection is available. <i>FindConnectionPoint</i> behaves similarly to <i>EnumConnectionPoints</i>, except <i>FindConnectionPoint</i> searches for a single connection point (named by GUID). MFC's implementation first calls the virtual function <i>COleConnPtContainer::GetConnectionHook</i>, which also lets you override the macros. If the connection point is available through <i>GetConnectionHook</i>, the object returns that connection point. Otherwise, the object walks the connection point map looking for the connection.</p>

<h3>Back to <i>IConnectionPoint</i>: Making the Connection</h3>

<p>Actual connections are made in <i>IConnectionPoint::Advise</i>, which takes two parameters: a pointer to <i>IUnknown</i> and a pointer to a DWORD. The <i>IUnknown</i> pointer is the interface to use to call back to the client. The DWORD represents a token the client can later use to turn off the connection.</p>

<p>When connecting, MFC's implementation checks to make sure that a connection is available. MFC lets you control the number of clients that can connect by overriding <i>CConnectionPoint::GetMaxConnections</i>. Then MFC calls <i>QueryInterface</i> through the <i>IUnknown</i> pointer to make sure the correct callback interface is available. If everything is still "go" at this point, <i>CConnectionPoint::Advise</i> makes the connection. If this is the first connection to this connection point, MFC caches the callback interface in <i>CConnectionPoint::m_pUnkFirstConnection</i>. Otherwise, <i>Advise</i> adds the interface pointer to the pot. <i>CConnectionPoint</i> maintains an array of callback interfaces (that is, interface pointer to clients that are interested in being called back by the object) in a <i>CPtrArray named m_pConnections</i>. <i>CConnectionPoint</i> caches the first callback interface as an optimization. Most of the time there will be only one client subscribing to a particular connection point. By caching the first callback pointer, MFC avoids the overhead of maintaining an array if it's unnecessary. <i>CConnectionPoint::Advise</i> returns the address of the callback interface as the token used by the client to call <i>Unadvise</i>.</p>

<p>Clients use <i>CConnectionPoint::Unadvise</i> to disconnect from the object (that is, to unsubscribe from any callback notifications). Clients call <i>Unadvise</i> using the token received back from the initial call to <i>Advise</i>. If the connection being terminated is the first one (that is, the token passed in is equal to <i>CConnectionPoint::m_pUnkFirstConnection</i>), <i>CConnectionPoint::Unadvise</i> releases the callback pointer (remember, <i>Advise</i> implicitly performed an <i>AddRef</i> by calling <i>QueryInterface</i> and sets the callback pointer to NULL). If the interface isn't the first connection, <i>Unadvise</i> goes through the array of connections looking for the one matching the token. When <i>Unadvise</i> finds the callback interface, <i>Unadvise</i> releases it and removes it from the array.</p>

<p>Once the connection is made, the object has a way to call back to the client. Of course, a classic application of this technology is ActiveX Controls. ActiveX Controls call back to their clients whenever they want to report an event. The typical callback mechanism is <i>IDispatch</i> -- the Automation interface. However, objects are not restricted to calling back to clients through <i>IDispatch</i>. The connection mechanism is flexible to accommodate any interface. However, if you'd like to use something other than <i>IDispatch</i> for your MFC-based ActiveX Controls, you're on your own. You'll probably want to use MFC's connection facilities.</p>

<h3>Conclusion</h3>

<p>Connections address the need for clients and objects to maintain a two-way communication channel. Callback interfaces have been available since COM first came into being several years ago. However, <i>IConnectionPoint</i> and <i>IConnectionPointContainer</i> define a protocol by which any general connection may be made. Connections were first added for ActiveX Controls (then called OLE Controls) to connect the main event set and the property notify interface to the client, but you can use the connection mechanism to set up a two-way communication channel between multiple objects whenever necessary.</p>


<p><b>DDJ</b></p>


<H4><a name="l1">Listing One</H4>

<pre>ISomeInterface* pSomeInterface = NULL;HRESULT hr;
<p></p>
hr = CoCreateInstance(CLSID_SomeObject, NULL, CLSCTX_ALL, 
                                 IID_ISomeInterface, *pSomeInterface);
if(SUCCEEDED(hr)) {
   pSomeInterface-&gt;Function1();
   pSomeInterface-&gt;Function2();
   pSomeInterface-&gt;Release();
}
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>interface IConnectionPoint : IUnknown {  HRESULT GetConnectionInterface(IID *pIID) = 0;
  HRESULT GetConnectionPointContainer(IConnectionPointContainer **ppCPC) = 0;
  HRESULT Advise(IUnknown *pUnk, DWORD *pdwCookie) = 0;
  HRESULT Unadvise(DWORD dwCookie) = 0;
  HRESULT EnumConnections(IEnumConnections **ppEnum) = 0;
};
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>interface IConnectionPointContainer : IUnknown {   HRESULT EnumConnectionPoints(IEnumConnectionPoints **ppEnum) = 0;
   HRESULT FindConnectionPoint(REFIID riid, IConnectionPoint **ppCP) = 0;
};
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>class CCmdTarget : public CObject { ...
   EnableConnections();
   DECLARE_CONNECTION_MAP()
   struct XConnPtContainer {
      DWORD m_vtbl; // place-holder for IConnectionPointContainer vtable
   } m_xConnPtContainer;
   virtual BOOL GetExtraConnectionPoints(CPtrArray* pConnPoints);
   virtual LPCONNECTIONPOINT GetConnectionHook(const IID&amp; iid);
<p></p>
   friend class COleConnPtContainer;
 ...
};
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<H4><a name="l5">Listing Five</H4>

<pre>void CCmdTarget::EnableConnections() {   // construct an COleConnPtContainer instance just to get to the vtable
   COleConnPtContainer cpc;
   // copy the vtable (and other data) to make sure it is initialized
   m_xConnPtContainer.m_vtbl = *(DWORD*)&amp;cpc;
}
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>
<H4><a name="l6">Listing Six</H4>

<pre>class COleConnPtContainer : public IConnectionPointContainer{
public:
   STDMETHOD_(ULONG, AddRef)();
   STDMETHOD_(ULONG, Release)();
   STDMETHOD(QueryInterface)(REFIID, LPVOID*);
   STDMETHOD(EnumConnectionPoints)(LPENUMCONNECTIONPOINTS* ppEnum);
   STDMETHOD(FindConnectionPoint)(REFIID iid, LPCONNECTIONPOINT* ppCP);
};
<p></p>
<p></p>
<P>
<a href="#rl6">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
