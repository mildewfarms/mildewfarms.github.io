<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal January 1997: The Zlib Compression Library</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>The Zlib Compression Library</h1>

<p><i>Dr. Dobb's Journal</i> January 1997
</p>
<h2>A compression engine for everyone</h2>

<h3>By Mark R. Nelson</h3>

<I>Mark is the author of The C++ Programmer's Guide to the Standard Template Library (IDG Books, 1995) and The Data Compression Book, Second Edition (M&amp;T Books, 1995). He can be contacted at markn@tiny.com.</I>

<hr>

<p>Afew months back, Scott Steketee, a developer of the educational/visualization tool The Geometer's Sketchpad, asked via e-mail if I knew of a software package that could be used in place of the compress.exe and expand.exe Windows files for installation. Scott commented that the compression achieved by the standard Windows programs didn't seem to be very good.</p>

<p>I frequently see messages like this in Internet newsgroups such as comp.compression and comp.lang.c, or on various CompuServe forums. Often, programmers find their needs aren't being fulfilled by the Windows API functions in LZEXPAND.DLL (no compression functions) and they don't want to spend money on third-party solutions, such as Greenleaf's ArchiveLib (which I wrote).</p>

<p>Fortunately, I was able to point Scott to zlib, an efficient, portable, and free solution to his problem. zlib is a library of C routines that can be used to compress or expand files using the same deflate algorithm popularized by PKZIP 2.0.</p>

<h3>A Brief History of zlib</h3>

<p>zlib's roots are in Info-ZIP, a loosely organized group of programs that exists, according to its authors, for the following reason:</p>

<blockquote><p>
...to provide free, portable, high-quality versions of the Zip and UnZip compressor-archiver utilities that are compatible with the DOS-based PKZIP, by PKWARE, Inc.</p>
</blockquote>

<p>The free versions of Zip and UnZip are world-class programs and are in wide use on many platforms, including the Amiga through DOS PCs, and high-powered RISC workstations. But these programs are designed to be used as command-line utilities, not as library routines. People have found that porting the Info-ZIP source into an application can be a grueling exercise.</p>

<p>Fortunately, two Info-ZIP gurus decided to solve this problem. Mark Adler and Jean-loup Gailly single handedly created zlib, a set of library routines that provide a safe, free, and unpatented implementation of the deflate compression algorithm.</p>

<p>zlib was created in part for use as the compressor for PNG-format graphics (see "PNG: The Portable Network Graphic Format," by Lee Daniel Crocker, <i>DDJ</i>, July 1995). After Unisys belatedly began asserting its patent rights to LZW compression, programmers were thrown into a panic over the prospect of paying royalties on their GIF decoding programs. The PNG standard was created to provide an unencumbered format for graphics interchange. The zlib version of the deflate algorithm was embraced by PNG developers, not only because it was free, but because it also compressed better than the original LZW compressor used in GIF files.</p>

<p>zlib turns out to be good for more than graphics development, however. The deflate algorithm makes an excellent general-purpose compressor and can be incorporated into all sorts of software. For example, I used zlib as the compression engine in Greenleaf's ArchiveLib, a data-compression library that works with ZIP archives. Its performance and compatibility meant I didn't have to reinvent the wheel, and I saved precious months of development time.</p>

<h3>zlib's Interface</h3>

<p>As a library developer, I know that interfaces make or break a library. Performance issues are important, but if an awkward API makes it impossible to integrate a library into your program, you've got a problem.</p>

<p>zlib's interface is confined to just a few simple function calls. The entire state of a given compression/decompression session is encapsulated in a C structure of type <i>z_stream</i>; see <a name="rf1"><a href="9701df1.htm">Figure 1</A>.</p>

<p>There are three steps (see <a name="rf2"><a href="9701df2.htm">Figure 2</A>) to using the library to compress or decompress a file or other data object:</p>

<p>1.Create a <i>z_stream</i> object.</p>

<p>2.Process input and output, using the <i>z_stream</i> object to communicate with zlib.</p>

<p>3.Destroy the <i>z_stream</i> object.</p>

<p></p>

<p>Steps 1 and 3 of the compression process are done using conventional function calls. The zlib API, documented in header file zlib.h, prototypes the following functions for initialization and termination of the compression or decompression process:</p>

<ul>
<li><i>deflateInit()</i>  <li><i>inflateInit()</i>
  <li><i>deflateEnd()</i>
  <li><i>inflateEnd()</i>
</ul>

<p></p>

<p>Step 2 is done via repeated calls to either <i>inflate()</i> or <i>deflate()</i>, passing the <i>z_stream</i> object as a parameter. The entire state of the process is contained in that object, so there are no global flags or variables, which allows the library to be completely reentrant. Storing the state of the process in a single object also cuts down on the number of parameters that must be passed to the API functions.</p>

<p>When performing compression or decompression, zlib doesn't perform any I/O on its own. Instead, it reads data from an input-buffer pointer that you supply in the <i>z_stream</i> object. Simply set up a pointer to the next block of input data in member <i>next_in</i>, and place the number of available bytes in the <i>avail_in</i> member. Likewise, zlib writes its output data to a memory buffer set up in the <i>next_out</i> member. As it writes output bytes, zlib decrements the <i>avail_out</i> member until it drops to 0.</p>

<p>Given this interface, step 2 of the compression process for an input file and an output file might look something like <a name="rf3"><a href="9701df3.htm">Figure 3</A>. This method of handling I/O frees zlib from having to implement system-dependent read and write code, and it ensures that you can use the library to compress any sort of input stream, not just files. It's simply a matter of replacing the wrapper code in <a href="9701df3.htm">Figure 3</A> with a version customized for your data stream.</p>

<h3>Wrapping it Up</h3>

<p>While zlib's versatility is one of its strengths, I don't always need all that flexibility. For example, to perform the simple file-compression task Scott asked about, it would be nice to just call a single function to compress a file and another function to decompress. To make this possible, I created a wrapper class called <i>zlibEngine</i> that provides a simple API that automates the compression and decompression of files and uses virtual functions to let you customize your user interface to zlib. <a name="rf4"><a href="9701df4.htm">Figure 4</A> is the entire class definition. There are two different groups of members that are important in <i>zlibEngine</i>. The first is the set of functions providing the calling interface to the engine. The second is the set of functions and data members used to create a UI that is active during the compression process.</p>

<h3>The Calling API</h3>

<p>There are three C++ functions that implement the API for simple compression and decompression. Before using the engine, you must call the constructor, the first function. Since <i>zlibEngine</i> is derived from the <i>z_stream</i> object used as the interface to zlib, the constructor is, in effect, also creating a <i>z_stream</i> object that will be used to communicate with zlib. In addition, the constructor initializes some of the <i>z_stream</i> member variables that will be used in either compression or decompression.</p>

<p>The two remaining functions are straightforward: <i>compress()</i> compresses a file using the deflate algorithm. An optional level parameter sets a compression factor between 9 (maximum compression) and 0 (no compression). <i>decompress()</i> decompresses a file, as you would expect. The compression-level parameter isn't necessary when decompressing, due to the nature of the deflate algorithm. Both of these functions return an integer-status code, defined in the zlib header file zlib.h. <i>Z_OK</i> is returned when everything works as expected. I added an additional code, Z_USER_ABORT, for an end-user abort of the compression or decompression process.</p>

<p>The wrapper class makes it much easier to compress or decompress files using zlib. You only need to remember to</p>

<ul>
  <li>Include the header file for the wrapper class, zlibengn.h.
  <li>Construct a <i>zlibEngine</i> object.
  <li>Call the member functions <i>compress()</i> or <i>decompress()</i> to do the actual work.
</ul>

<p></p>

<p>This means you can now perform compression with code as simple as that in <a name="re1"><a href="9701de1.htm">Example 1</A>.</p>

<h3>The User-Interface API</h3>

<p>The calling API doesn't really make much of a case for creating the <i>zlibEngine</i> class, nor do the <i>compress()</i> and <i>decompress()</i> functions really need to be members of a class. In theory, a global <i>compress()</i> function could just instantiate a <i>z_stream</i> object when called, without the caller even being aware of it.</p>

<p>The reason for creating this engine class involves the user interface. It's nice to be able to track the progress of your compression job while it's running. Conventional C libraries have to make do with callback functions or inflexible standardized routines in order to provide feedback, but C++ offers a better alternative through the use of virtual functions.</p>

<p>The <i>zlibEngine</i> class has two virtual functions that are used to create a useful UI: <i>progress()</i> is called periodically during the compression or decompression process, with a single integer argument that tells what percentage of the input file has been processed. <i>status()</i> is called with status messages during processing.</p>

<p>Both of these virtual functions have access to the <i>zlibEngine</i> protected data element, <i>m_AbortFlag</i>. Setting this flag to a nonzero value will cause the compression or decompression routine to abort immediately. This takes care of another sticky UI problem you encounter when using library code.</p>

<p>Writing your own UI then becomes a simple exercise. You derive a new class from <i>zlibEngine</i> and define your own versions of one or both of these virtual functions. Once you instantiate an object of your class instead of <i>zlibEngine</i>, your UI can be as spiffy and responsive as you like.</p>

<h3>Command-Line Compression</h3>

<p>I also wrote a command-line test program to demonstrate the use of class <i>zlibEngine</i>. zlibtest.cpp does a simple compress/decompress cycle of the input file specified on the command line. I implement a progress function that prints out the current percent toward completion as the file is processed; see <a name="re2"><a href="9701de2.htm">Example 2</A>.</p>

<p>Since class <i>zlibEngine</i> is so simple, the derived class doesn't even have to implement a constructor or destructor. The derived version of <i>progress()</i> is able to provide user feedback as well as an abort function with just a few lines of code. zlibtest.cpp, zlibengn.h, and zlibengn.cpp are available electronically (see "Availability," page 3).</p>

<h3>The OCX</h3>

<p>To provide a more complicated test of class <i>zlibEngine</i>, I created a 32-bit OCX using Visual C++ 4.1. The interface to an OCX is defined in terms of methods, events, and properties. zlibTool.ocx has the following interface:</p>

<p></p>

<ul>
<li>Properties. <i>InputFile</i>, <i>OutputFile</i>, <i>Level</i>,  and <i>Status.</i>  <li>Methods. <i>Compress()</i>, <i>Decompress()</i>, and <i>Abort().</i>
  <li>Events. <i>Progress().</i>
</ul>

<p></p>

<p>Note that I chose to pass status information from the OCX using a property, not an event.</p>

<p>zlibTool.ocx is a control derived from a standard Win32 progress bar. The progress bar gets updated automatically while compressing or decompressing, so you get some UI functionality for free. Using it with Visual Basic 4.0 or Delphi 2.0 is a breeze. After registering the OCX, you can drop a copy of it onto your form and use it with a minimal amount of coding.</p>

<p>Both the source code for the OCX and a sample Delphi 2.0 program are available electronically; see "Availability," page 3. <a name="rf5"><a href="9701df5.htm">Figure 5</A> shows the Delphi program in action.</p>

<p><b>DDJ</b></p>

<H4>For More Information<BR>

The best place to find information on zlib and Info-ZIP software can be found online:<BR>

http://quest.jpl.nasa.gov/Info=ZIP/<BR>
http://quest.jpl.nasa.gov/zlib/</H4>


<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
