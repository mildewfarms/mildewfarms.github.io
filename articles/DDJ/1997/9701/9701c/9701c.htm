<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal January 1997: </title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Reed-Solomon Error Correction</h1>

<p><i>Dr. Dobb's Journal</i> January 1997
</p>
<h2>A fast software implementation in assembly language and C</h2>

<h3>By Hugo Lyppens</h3>

<I>Hugo is a programmer/analyst at Goldman, Sachs <i>&amp;</i> Company. He can be reached at hlyppens@advn.com or at http://www.stack.urc.tue.nl/~hugo.</I>

<hr>
Sidebar: <a href="9701cs1.htm"><I>"A Complete Reed-Solomon Encoding and Decoding Example"</I></A>
<HR>
<p>Transmission media, such as telephone lines, wide-area networks, and satellite links, or storage media, like optical/magnetic disk and tape, are usually imperfect. To make digital data transmission and storage reliable, error-correcting codes are indispensable. The efficient Reed-Solomon class of error-correcting codes is highly popular in many applications, including CD, DAT (digital audio tape) players, tape-backup systems, and similar devices. These all use a hardware implementation of Reed-Solomon. However, because microprocessor speeds have increased considerably, software implementations are also feasible in some applications.</p>

<p>In this article, I'll present a highly optimized software implementation of Reed-Solomon error correction, which I implemented while developing the "Video Backup System" for the Commodore Amiga. This product lets users connect a VCR to the Amiga via a hardware interface to use the VCR as a file-backup device. I developed the software that encodes computer data in a video signal and performs error correction on information read back from the VCR to compensate for drop-outs on the video tape. Even though the original Amiga implementation was written in C and 68000 assembly language, the version I'll discuss here is implemented in 32-bit Intel x86 assembly language using Borland C++ 4.2 and TASM 4.0.</p>

<h3>Reed-Solomon Codes</h3>

<p>A codeword of a Reed-Solomon (RS) code consists of a sequence of <i>N</i> symbols over the Galois field <i>GF(q).</i> <i>GF(q)</i> is a finite field with <i>q</i> elements, where <i>q=p<sup>m</i></sup> for some prime number <i>p</i>. (For an introduction to Galois fields, see "Error-Recovery Codes," by Bart de Canne, <i>DDJ</i>, December 1994.) Reed-Solomon codes have, by definition, <i>N=q-</i>1. Out of these <i>N</i>, let <i>K</i> be the number of actual information symbols. The other <i>N-K</i> are redundancy symbols. The amount of redundancy in each codeword defines the maximum number of symbol errors that can be corrected. The necessary error-correcting capability of the code can be determined from the quality of the medium (raw error rate) and the desired reliability of the application. Let <i>T</i> be the number of symbol errors that can be corrected in each code word. Because all Reed-Solomon codes are maximum-distance separable, the necessary overhead to correct up to <i>T</i> symbol errors is only 2<i>T</i> symbols. Therefore, the actual information content of each codeword, <i>K</i>, is <i>N</i>-2<i>T</i> symbols. The resulting data rate is: <i>K</i>/<i>N</i> or 1-(2T/N).</p>

<p>Each codeword can be identified with a polynomial over <i>GF(q)</i> in the following way:</p>

<BLOCKQUOTE><P>
<img src="9701cq1.gif" width="239" height="16">
</P></BLOCKQUOTE>

<p> Reed-Solomon codes are cyclic. For each codeword <i>(c<sub>0</sub>,...,c<sub>N-1</sub>)</i> in a RS code <i>C</i>, <i>(c<sub>N-1</sub>,c<sub>0</sub>,c<sub>1</sub>,..., c<sub>N-2</sub>)</i> is also in <i>C</i>. Viewing codewords as polynomials, the aforementioned statement can be written as:</p>

<BLOCKQUOTE><p><img src="9701cq2.gif" width="206" height="15"></p>
</BLOCKQUOTE>

<p>A <i>T</i>-error-correcting RS code <i>C</i> can be described by a single unique polynomial <i>g(x)</i>, its generator polynomial. <i>g(x)</i> is a polynomial of degree 2<i>T</i> and the coefficient of <i>x</i><sup>2T</sup> in <i>g(x)</i> is 1 by definition. <i>c(x)</i> is a codeword in <i>C</i> only if it is divisible by <i>g(x)</i>. Let <img src="alpha12.gif" width="7" height="6"> be a primitive element of <i>GF(q)</i>. This means that every nonzero element of <i>GF(q)</i> can be written as a power of <img src="alpha12.gif" width="7" height="6"> and <img src="9701cq3.gif" width="51" height="13">. For a RS code,</p>
<p><img src="9701cq4.gif" width="226" height="16"></p>

<h3>Choosing Code Parameters</h3>

<p>To maximize efficiency, choose code parameters that match the architecture of the implementation platform as closely as possible. A convenient unit of information on the 32-bit Intel CPU (and most other computer architectures) is a <i>byte</i> which can be stored, retrieved, and manipulated very efficiently. Therefore, in my RS implementation, each symbol is represented by one byte. (For a more complete example of encoding/decoding, see the accompanying text box entitled "A Complete Reed-Solomon Encoding and Decoding Example.") A byte has 256 possible values, so the most convenient Galois field size is q=256=2<sup>8</sup>, p=2, and m=8. When shortened RS codes are ignored, this automatically implies that <i>N</i>=255. The only degree of freedom left at this point is the choice of <i>T</i>, the maximum correctable number of symbol errors per codeword. Although the computer architecture does not dictate a value for <i>T</i>, there is a slight advantage if <i>T</i> is a power of 2. For my application, I implemented RS for <i>T</i>=8. Using this as a starting point, it is easy to create your own implementation for other values of <i>T</i>.</p>

<h3>Implementation of GF(2<sup>8</sup>)</h3>

<p>GF(2<sup>8</sup>) can be regarded as the set of polynomials of degree &lt;8, with coefficients in GF(2); for example, 0 or 1. Addition, subtraction, multiplication, and division are all defined operators. In GF(2<sup>8</sup>), adding two elements is accomplished by adding their corresponding coefficients modulo 2. Since subtraction modulo 2 is the same as addition (1-1 = 1+1 = 0 mod 2, 0-1 = 0+1 = 1 mod 2), subtraction and addition are the same in GF(2<sup>8</sup>) as well.</p>

<p>In <a name="re1"><a href="9701ce1.htm">Example 1</A>, the most-significant bit (MSb) in a byte represents the coefficient of x<sup>7</sup>; the least-significant bit (LSb) represents the coefficient of x<sup>0</sup>. For example, x<sup>7</sup>+x<sup>4</sup>+x<sup>2</sup> is represented by byte 1001010. The assembly language equivalent of computing the sum of two elements of GF(2<sup>8</sup>) is the use of the exclusive-or instruction (XOR) on the byte representations of the elements. Multiplication in GF(2<sup>8</sup>) is done modulo a polynomial <i>f(x)</i> of degree 8. <i>f(x)</i> has to be irreducible over GF(2), which means that it cannot be written as a product of two or more other polynomials over GF(2) of lesser degree. If <i>f(x)</i> is irreducible and every nonzero element of GF(2<sup>8</sup>) can be written as a power of <i>x</i> modulo <i>f(x)</i>, <i>f(x)</i> is called a "primitive polynomial" and <i>x</i> is a primitive element. Bart de Canne's article contains code for searching for such primitive polynomials (there is always at least one for every Galois field). I use the following primitive polynomial to construct GF(2<sup>8</sup>): x<sup>8 </sup>+ x<sup>6</sup> + x<sup>5</sup> + x<sup>4</sup> +1.</p>

<p>In <a name="re2"><a href="9701ce2.htm">Example 2</A>, my implementation uses a 256&times;256 byte array called <i>RSG_multiply</i> to efficiently implement multiplication of elements of GF(2<sup>8</sup>). The Intel architecture has a quirk that makes it efficient to access this array, given two values (<i>I</i> and <i>J</i>) to multiply; of the lower 16 bits of the data registers eax through edx, the CPU can separately access the upper and lower byte. Given that the upper 16 bits of ebx are 0 and that edi points to <i>RSG_multiply</i>, <a name="re3"><a href="9701ce3.htm">Example 3</A> is all that is needed to load the product of <i>I</i> and <i>J</i> into al. Understanding this makes the assembly listing easier to read. If you are hard-pressed for registers, you could even free up the register edi by making sure that the <i>RSG_multiply</i> array resides at a 64-KB boundary in memory to which the upper 16 bits of ebx could point. </p>

<p>Division of an element <i>a</i> by an element <i>b</i> is accomplished by multiplying <i>a</i> by b<sup>-1</sup>, the multiplicative inverse of <i>b</i>. The array <i>RSG_multinverse</i> contains the multiplicative inverse of every nonzero element of GF(2<sup>8</sup>). Finally, <i>RSG_logarithm</i> is a logarithm table that tells you which power of <i>x</i> each nonzero GF(2<sup>8</sup>) element is. For instance, since x<sup>8</sup> = x<sup>6</sup> + x<sup>5</sup> + x<sup>4</sup>+1, log<sub>x</sub> (x<sup>6</sup> + x<sup>5</sup> + x<sup>4</sup> +1) = 8 and 01110001<sub>2</sub> = 71 hex, RSG_logarithm[0x71] equals 8. <a name="rl1"><a href="9701c.htm#l1">Listing One</A>, gf256.c, s the code to prepare the arrays needed for GF(2<sup>8</sup>) arithmetic. These arrays are used by both the C and the assembly language parts of the implementation. </p>

<h3>Encoding</h3>

<p>Again, each codeword is a multiple of the generator polynomial <i>g(x).</i> To encode an information sequence <i>a(x)</i> <i>= a<sub>0</sub>+a<sub>1</sub>x+...+ a<sub>K-1</sub>x<sup>K-1</i></sup>, you could multiply it by <i>g(x)</i> to turn it into a codeword. However, it is more efficient to compute <i>b(x) = a(x)x<sup>N-K</i></sup> mod <i>g(x).</i> A possible encoding of <i>a(x)</i> is then <i>b(x) + a(x)x<sup>N-K</i></sup>. Yet, I have the intuitive notion that the information symbols should come first and the redundancy symbols should be attached to the end of the data array. Since the RS codes are cyclic, this is no problem and a valid codeword that satisfies this notion can be created by cyclically rotating this encoding to the left by <i>N-K</i> symbol positions. The final encoding of <i>a(x)</i> then becomes <i>a(x)+ b(x)x<sup>K</i></sup>.</p>

<p>As the encoder processes each information symbol in <i>a(x),</i> it maintains <i>b(x).</i> To speed things up, the code uses a table that contains <img src="beta12.gif" width="5" height="10"><i>g(x)</i> for each <img src="9701cq5.gif" width="68" height="15">. When the encoder finishes computing <i>b(x),</i> it writes it to the Kth position in the data array to create the final encoding of <i>a(x).</i> <a name="rl2"><a href="9701c.htm#l2">Listing Two</A> (genpol.c) calculates the generator polynomial and prepares this table. The function <i>RSG_encode</i> in the program codecsup.asm (available electronically, along with executables; see "Availability," page 3) is the assembly language implementation of the encoder.</p>

<h3>Decoding</h3>

<p>Decoding of received words is the most challenging part of any system that uses error-correcting codes. Fortunately, an efficient algorithm exists for the decoding of RS codes. Decoding a received word <i>r(x)</i> amounts to finding the closest codeword, the one that was most likely transmitted. You need to know at which locations the errors occurred and what their magnitudes are.</p>

<p>Since</p>

<BLOCKQUOTE><P>
<img src="9701cq6.gif" width="220" height="17">
</P>
</BLOCKQUOTE>

<P>
then
</P>

<BLOCKQUOTE><P>
 <img src="9701cq7.gif" width="174" height="17">
</P>
</BLOCKQUOTE> 

 <p> Given that all codewords are a multiple of g(x),</p>

<BLOCKQUOTE><P>
<img src="9701cq8.gif" width="208" height="15">
</P>
</BLOCKQUOTE>

 <p>holds for any valid codeword <i>c(x).</i> Since we know that all multiples of <i>g(x)</i> are codewords, you can infer that a received word <i>r(x)</i> is erroneous when any of the values is nonzero. This set of 2<i>T</i> values is actually referred to as the syndrome of the received word r(x), and it can be expressed as the polynomial</p>

<BLOCKQUOTE><P>
<img src="9701cq9.gif" width="286" height="14">
</P>
</BLOCKQUOTE>

<p>It is important to realize that the syndrome contains all the information needed to decode the received word <i>r(x).</i> </p>

<p>Conceptually, there are three stages in the decoding process:</p>

<p>1. Compute the syndrome of the received codeword.</p>

<p>2.If the syndrome is nonzero, find the number of errors, their locations, and their magnitude.</p>

<p>3. Correct the errors.</p>

<p><b>Stage 1.</b> To compute the syndrome, the decoder could subsequently evaluate <i>r</i>(<img src="alpha12.gif" width="7" height="6">) through <img src="9701cq10.gif" width="53" height="15">.</i> Unfortunately, this basic syndrome computation cannot be optimized as well as the encoding algorithm. I realized later that, by definition, the syndrome of <i>r(x)</i> is the same as the syndrome of <i>m(x) = r(x)</i> modulo <i>g(x).</i> And this is good, because <i>m(x)</i> is a much shorter polynomial (of degree up to 2T) than <i>r(x),</i> which makes computing <i>m</i>(1) through <i>m</i>(2<sup>T-1</sup>) cheap. For calculating <i>m(x)</i> from <i>r(x)</i> and <i>g(x),</i> the decoder uses the same efficient technique as the encoder. Obviously, if <i>m(x)</i> = 0, then <i>r(x)</i> is a valid codeword, and there is no need for further decoding. The function<i> calc_syndrome</i> in codecsup.asm (available electronically) contains the code to compute <i>m(x)</i> and the syndrome of the received word.</p>

<p><b>Stage 2.</b> The main question in this stage is: How can we derive the error locations and magnitudes from the syndrome? What is their mathematical relationship? Again, assume that <img src="alpha12.gif" width="7" height="6"> is a primitive element of GF(2<sup>8</sup>). I will define the set <i>B</i> of error locations as</p>

<BLOCKQUOTE><P>
<img src="9701cq11.gif" width="405" height="18">
</P></BLOCKQUOTE>


<p>For each <img src="9701cq12.gif" width="28" height="15">, the corresponding error magnitude is <img src="9701cq13.gif" width="13" height="12">. Given this mathematical representation of error magnitudes and locations, the error locator polynomial, <img src="sigma12.gif" width="8" height="7"><i>(x),</i> and the error evaluator polynomial, <img src="omega12.gif" width="9" height="7"><i>(x)</i> of a received word, are defined by <a name="rf1"><a href="9701cf1.htm">Figure 1</A>. The error locations are simply the set of values for <i>x</i>, where <img src="sigma12.gif" width="8" height="7"><i>(x)=0,</i> which is <i>B</i>. For each error locator <img src="9701cq12.gif" width="28" height="15">, the corresponding error magnitude is shown in <a name="rf2"><a href="9701cf2.htm">Figure 2</A>. </p>

<p>At this point, I'll turn to the key equation for the decoding algorithm. After all, all that is known is the syndrome <i>S(x).</i> Recall that <i>T</i> is the error-correcting capability of the code and the degree of the generator polynomial is 2<i>T</i>. The key decoding equation is: </p>

<BLOCKQUOTE><P>
<img src="9701cq14.gif" width="166" height="15">
</P></BLOCKQUOTE>


<p>It is interesting that a variation of the ancient algorithm discovered around 300 b.c. by Euclid can be used to determine <img src="sigma12.gif" width="8" height="7">(<i>x</i>) and <img src="omega12.gif" width="9" height="7">(<i>x</i>) from the aforementioned equation. I am referring to the extended algorithm for finding the greatest-common divisor of two polynomials. In this case, it is applied to the two polynomials <i>x</i><sup>2<i>T</i></sup> and <i>S(x)</i> until the degree of the resulting polynomial falls below <i>T</i>.</p>

<p>If, at this stage, the degree of <i>S(x)</i> is greater than <i>T</i>, it can be concluded that too many errors occurred, and any attempt to correct them will be utterly fruitless. The decoder will return an error code. Now that <img src="sigma12.gif" width="8" height="7">(<i>x</i>) and <img src="omega12.gif" width="9" height="7">(<i>x</i>) are known, the next step is to find <i>B</i>, the set of error locations. There is a shortcut for the case where the received codeword has only 1 error, which implies that <img src="sigma12.gif" width="8" height="7">(<i>x</i>) has degree 1. Then, <img src="sigma12.gif" width="8" height="7">(<i>x</i>) can be written as <i>ax+b</i>. This polynomial is zero when <i>x=b/a</i> and <i>B={b/a}.</i></p>

<p>When the degree of <img src="sigma12.gif" width="8" height="7">(<i>x</i>) is greater than 1, all nonzero elements of <i>GF(2<sup>8</sup>)</i> are plugged into <img src="sigma12.gif" width="8" height="7">(<i>x</i>) to find all its zeros. This stage is actually performed by an assembly language routine because assembly offers optimization opportunities in this kind of computation. Examine codecsup.asm to see how short the code is (at label <i>evalpoly</i>, in the function <i>find_roots</i>) that evaluates <img src="sigma12.gif" width="8" height="7">(<i>x</i>) in each iteration! If, at this stage, the number of zeros found does not match the degree of <img src="sigma12.gif" width="8" height="7">(<i>x</i>), the decoder returns an error code because too many errors must have occurred. Finally, for each <img src="9701cq12.gif" width="28" height="15">, <img src="9701cq13.gif" width="13" height="12"> is computed using the error magnitude formula defined above.</p>

<p>Stage 3. At this stage, you are finally able to enjoy the fruits of your labor, as the algorithm seems to apply the right corrections at the right places in the received symbol sequence to recover the original codeword! By definition, each <img src="9701cq12.gif" width="28" height="15"> is equal to <img src="9701cq15.gif" width="32" height="13">, where <i>loc</i> is the error location. <i>loc</i> can be expressed as <img src="9701cq16.gif" width="59" height="16">. The correction of the error at <i>loc</i> is done by adding <img src="9701cq13.gif" width="13" height="12"> (the error magnitude) to the <i>loc</i><sup>th</sup> symbol in the received word. This translates to the following simple statement in C <i>data[loc] ^= magn</i>.</p>

<p>The program decode.c (available electronically) contains the function <i>RSG_decode</i> that integrates stages 1, 2, and 3 of the decoding process. The program codecsup.asm contains the assembly function <i>find_roots</i> that searches for all zeros of (<i>x</i>).</p>

<h3>Main Program</h3>

<p>The main program (rsmain.c, <a name="rl3"><a href="9701c.htm#l3">Listing Three</A>) lets you play with the Reed-Solomon error-correction functions that I have discussed. When you run the program it sets up the arrays for GF(2<sup>8</sup>) arithmetic and computes the generator polynomial. Then, it asks you for an original string. This string is padded with zeros to create an array of <i>K</i> symbols. This array is encoded to form the original codeword. Next, it asks you for a string with up to <i>T</i> symbol errors. The program now overwrites the first <i>K</i> symbols of the original codeword with the second string and executes the decoding algorithm. After this, the process will repeat itself. To exit the program, just enter an empty string at any of the prompts. The program generates a lot of diagnostic output to let you follow the decoding process. In <a name="rf3"><a href="9701cf3.htm">Figure 3</A>, the strings "Coding theory is fun!" and "C0ding th.ory is f&amp;n?" are entered by you.</p>

<p>Although this program only lets you test cases where the information symbols (the first <i>K</i> symbols of each codeword) are affected by errors, the algorithm also works if some or all of the errors occur in the redundancy part of a codeword.</p>

<h3>Conclusion</h3>

<p>Reed-Solomon codes are extremely efficient because they only need 2<i>T</i> redundancy symbols to achieve an error correction capability of up to <i>T</i> symbol errors. They are also fairly easy to decode. As demonstrated, a Reed-Solomon code with the right parameters lends itself extremely well to implementation in software on the Intel 32-bit x86 and other computer architectures. As my positive experiences with the Amiga Video Backup System suggest, software Reed-Solomon implementations could be used to build a wide variety of systems (especially low-volume or custom applications) which wouldn't otherwise be feasible because of the high cost of using hardware-error correction.</p>

<h3>References</h3>

<p>van Tilborg, H.C.A. <i>Coding Theory: A First Course</i>. Eindhoven Technical University, 1993.</p>

<p>Hoffman, D.G., D.A. Leonard, C.C. Lindner, K.T. Phelps, C.A. Rodger, and J.R. Wall. <i>Coding Theory: The Essentials</i>. Auburn, AL: Marcel Dekker. 1991.</p>

<p><b>DDJ</b></p>


<H4><a name="l1">Listing One</H4>

<pre>/****************************************************** * File: gf256.c -- contains code to construct GF(2^8) and all required
 * arrays for GF(2^8) arithmetic.
 * Copyright (c) 1995 by Hugo Lyppens with permission to print in DDJ
 ******************************************************/
#include "hdr.h"
#include "rs.h"
<p></p>
#define POL              0x171    /* primitive polynomial used to construct
                                     GF(2^8) is: x8 + x6 + x5 + x4 + 1
                                     represented as 101110001 binary */
UBYTE                    RSG_powers[FIELDSZ];
UBYTE                    RSG_logarithm[FIELDSZ];
UBYTE                    RSG_multinv[FIELDSZ];
UBYTE                    RSG_multiply[FIELDSZ][FIELDSZ];
<p></p>
static UBYTE             multiply_func(UBYTE, UBYTE);
static UBYTE             multinv_func(UBYTE);
<p></p>
void        RSG_ConstructGaloisField()
{
     int          v;
     UBYTE        i, j;
     v = 1;
     for(i = 0; ; i++) {
          RSG_powers[i]         = (UBYTE)v;
          RSG_logarithm[v]  = i;
          v &lt;&lt;=1; // multiply v by alpha and reduce modulo POL
          if(v &amp; (1&lt;&lt;GF_M)) {
                v ^= POL;
          }
          if(i==MAXELT-1)
                break;
     }
     RSG_powers[MAXELT] = 1;
     // construct multiplication table
     for(i = 0; ; i++ ) {
          if(i) RSG_multinv[i] = multinv_func(i);
          for(j = i; ; j++) {
              RSG_multiply[i][j] = RSG_multiply[j][i] = multiply_func(i, j);
              if(j==MAXELT)
                    break;
          }
          if(i==MAXELT)
                break;
     }
}
// compute multiplicative inverse of x. The value y for which x*y = 1
static UBYTE multinv_func(x)
UBYTE x;
{
    if(!x)
        return 0;
    return RSG_powers[FIELDSZ-1-RSG_logarithm[x]];
}
// compute product of i and j
static UBYTE multiply_func(i, j)
UBYTE i, j;
{
     int r, b, k;
     r = 0; k = j;
     for(b = 1; b&lt;FIELDSZ; b&lt;&lt;=1, k&lt;&lt;=1) {
        if(k &amp; (1&lt;&lt;GF_M)) k^=POL;
         if(i &amp; b)       r ^= k;
     }
     return((UBYTE)r);
}
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>/********************************************************************* * File: genpol.c -- contains code to generate the generator polynomial
 * of degree 2*T for Reed-Solomon encoding/decoding
 * Copyright (c) 1995 by Hugo Lyppens with permission to print in DDJ
 *********************************************************************/
#include "hdr.h"
#include "rs.h"
<p></p>
UBYTE                    RSG_shiftregtab[FIELDSZ][2*T];
Polynomial               RSG_genpol;
void    RSG_CalcGeneratorPoly()
{
    int     i, j;
    UBYTE   a, *p;
    RSG_genpol.degree = 2*T;
    memset(RSG_genpol.c, 0, 2*T);
    RSG_genpol.c[0] = RSG_powers[0];
    RSG_genpol.c[1] = 1;
    for(j = 1; j&lt;2*T; j++) {
        a = RSG_powers[j];
        for(i = 2*T; i&gt;=1; i--) {
           RSG_genpol.c[i] = RSG_genpol.c[i-1]^multiply(RSG_genpol.c[i], a);
        }
        RSG_genpol.c[0] = multiply(a, RSG_genpol.c[0]);
    }
    printf("Generator polynomial: ");
    printpoly(&amp;RSG_genpol);
    for(i = 0; ; i++) {
        p = &amp;RSG_multiply[i][0];
        for(j = 0; j&lt;2*T; j++) {
            RSG_shiftregtab[i][j] =
                 p[RSG_genpol.c[j]];
        }
        if(i==MAXELT)
            break;
     }
}
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>/****************************************************** * File: rsmain.c -- main function: repeatedly asks for original string and 
 * string with errors and tries to recover original string from string with 
 * errors using Reed-Solomon decoding
 * Copyright (c) 1995 by Hugo Lyppens with permission to print in DDJ
 ******************************************************/
#include "hdr.h"
#include &lt;conio.h&gt;
#include "rs.h"
<p></p>
main(argc, argv)
int    argc;
char  *argv[];
{
    char         str[N], str2[N];
    int          r;
<p></p>
    RSG_ConstructGaloisField();
    RSG_CalcGeneratorPoly();
<p></p>
    for(;;) {
        printf("Enter original string or enter empty string to quit:\n");
        memset(str, 0, N); str2[0] = 0;
        gets(str);
        if(!str[0]) break;
        RSG_encode((UBYTE *)str);
<p></p>
        printf("Enter string with up to %d symbol errors or enter 
                                            empty string to quit:\n", T);
        gets(str2);
        if(!str2[0]) break;
<p></p>
        strncpy(str, str2, K);
        r = RSG_decode((UBYTE *)str);
        if(r &lt; 0) {
            printf("Decoding error -- too many errors!\n");
        } else {
            printf("Decoding OK, recovered '%s' from '%s' by correcting %d 
                                                errors!\n", str, str2, r);
        }
    }
    return(0);
}
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
