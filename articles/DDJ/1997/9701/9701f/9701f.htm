<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal January 1997:  Steganography for DOS Programmers</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1> Steganography for DOS Programmers</h1>

<p><i>Dr. Dobb's Journal</i> January 1997
</p>
<h2>Hiding a tree inside a forest</h2>

<h3>By Alan Johnson</h3>

<p>Steganography is a branch of cryptography that deals with concealing messages. It has unique possibilities, particularly when you have terabytes of information  --  much of it mundane or infrequently accessed  --  that offer hiding places for important information. The techniques I present here will enable you to effectively hide critical information within a large volume of data.</p>

<h3>Text Versus Binary Files</h3>

<p>The difference between DOS text and binary files is at the heart of this approach to steganography. A DOS text file is generally composed of text, control characters, and maybe graphics characters. It is a "last-record-check" type of file, meaning that the last record is a flag or sentinel that marks the end of the file. When opened for listing or reading, the system keeps reading data until it hits the end-of-file (EOF) flag, then stops. For an ordinary DOS text file, this EOF marker is control-Z (ASCII 26). </p>

<p>A binary file, on the other hand, can contain characters in any order, since there is no EOF flag in binary mode. End-of-file is calculated from the directory. The system reads the file specs to see how many bytes are in the file (recorded at the last write to the file) and stops reading when it has read that many characters. Binary files are necessary for .COM and .EXE files, as machine-language files may end up having an ASCII character 26 (or any other character) anywhere. </p>

<p>A file on disk can be opened for reading or writing in either binary or text mode, regardless of whether its internal format is text or binary. You can read a text file in binary mode, or a binary file in text mode. </p>

<h3>Enter DOS </h3>

<p>Since DOS usually stores files without an EOF marker, the operating system must calculate EOF from the directory. However, many DOS utilities also check for control-Z. The DOS TYPE, MORE, and FIND commands open files for reading in text mode. COPY, XCOPY, and MOVE, on the other hand, open a file in binary mode (they may be copying or moving a .COM or .EXE file). The COPY command has a /A switch for copying ASCII (text) files, but defaults to binary mode -- except when a file is created using the COPY command from the console (COPY CON <i>filename</i>). This copies from the keyboard (<i>stdin</i>) to the file until control-Z is typed. <i>Stdin</i> and <i>stdout</i> are text files.</p>

<p>What if you were to open a text file in binary mode, and append another file to the end of the first while explicitly writing the EOF flag at the end of the first file? The result is that the second text is hidden beyond the EOF flag. The only way to get to it is to read the file again in binary mode. Remember, TYPE reads in text mode. The data beyond EOF is hidden from anyone looking around in your hard drive. If you use this technique to add a small amount of data, say 1 or 2 KB, to a large file (say 100 KB), the extra length will likely not be noticed if the file is TYPEed to the screen. For even better security, you can encrypt the hidden part and it will look like random garbage at the end of the text file. Most people would consider this just a system or disk error, even if they found it.</p>

<p>It is best to choose a text file that is used only for reading. If another program opens the host file in text mode for updating, the hidden data will likely be lost. Use reference files as the host files, and consider using ATTRIB to make them read-only.</p>

<h3>The Source Code</h3>

<p>Because XCOPY and COPY do not support the kind of appending I've just described, you must write special programs to implement this technique under DOS. <a name="rl1"><a href="9701f.htm#l1">Listing One</A> is LLIST.C, a program that lists binary files to the screen. (LLIST stands for "long-list," implying a long listing beyond EOF.) LLIST will list a text file, then list the hidden data after EOF.</p>

<p><a name="rl2"><a href="9701f.htm#l2">Listing Two</A>, LAPPEND.C (short for "long-append") tacks a second file onto the first with a control-Z between them to keep the second file hidden. Be aware, however, that the second file is not automatically deleted from the disk. You must manually delete it, or a copy of the hidden data will be left in the open. (Or, you can use the optional <i>remove()</i> command supplied in a comment line in LAPPEND.) </p>

<p><a name="rl3"><a href="9701f.htm#l3">Listing Three</A>, LSPLIT.C, copies the hidden data to the temporary file TEMP.1 This can be modified to place the data in a file supplied by the user as the second command-line argument. Change the <i>fopen</i> statement for <i>thedata</i> to use <i>params[2]</i> as the filename, and change <i>if (n == 2 )</i> to <i>if (n == 3 )</i>. Remove the <i>#define</i> statement and change the error-message <i>printf</i>s to show the new command format <i>lsplit &lt;source&gt; &lt;destination&gt;</i>.</p>

<p>Hidden data can be removed from the host file by redirecting the output of TYPE. For example, <i>type</i> <i>host &gt; dummy</i>. To return the data to the host, <i>copy dummy host</i>. Then delete <i>dummy</i>. The same result can be obtained using the COPY command with the /A switch, except that the EOF flag is retained. Of course, you should do this <i>after</i> recovering the hidden data with LSPLIT.</p>

<p><a name="rl4"><a href="9701f.htm#l4">Listing Four</A>, LWRITE.C, allows the writing of data from the keyboard to the far end of EOF of the target file, and requires a bit of extra explanation. DOS uses two characters -- a carriage return (ASCII 13, CR) and a line feed (ASCII 10, LF) -- to separate the lines of a text file on disk. In contrast, when you type on a keyboard, you obviously only press one key, the Enter key. To make things consistent, and to simplify the processing of text files, the C library getc() function converts all line separators to newline characters (ASCII 10, LF). This ensures that whether you read text from the keyboard or a disk file, you'll see one newline character at the end of each line. This conversion is only performed if you open the file as a text file. If you read from a file opened as text, and write to a file opened as binary -- as LWRITE does -- you must manually convert each newline to a CR-LF combination.</p>

<p>The purpose of <a name="rl5"><a href="9701f.htm#l5">Listing Five</A>, FINDH.C, is to find hidden data, in case you forget which is the host file(s). FINDH.C looks for control-Z in the file at a point before the physical end of the file, and prints the filename to the screen. The wildcard characters "*" and "?" can be used, and all the files in a directory can be scanned for possible hidden data. Each directory must be searched individually. If you use "*.*", any .COM or .EXE file may show up as a false possibility if it happens to contain a control-Z at some point. </p>

<p>To read the directory, FINDH uses the <i>findfirst()</i> and <i>findnext()</i> functions. These are not completely standard, so you may have to rewrite them to work with alternate compilers. I am using PowerC 1.1.6 from MIX Software. Most compilers should support some equivalent of these two functions; Microsoft QuickC, for instance, has <i>_dos_findfirst()</i> and <i>_dos_findnext()</i>.</p>

<p>LAPPEND and LSPLIT offer another interesting possibility. You are not limited to placing only one hidden file beyond EOF; they can be stacked up behind each other. LAPPEND will keep adding new hidden files onto the end of the host file, and LSPLIT splits off everything behind the FIRST EOF to TEMP.1. You can have a hidden part, hidden on the end of another hidden part, which is hidden itself, and so on. To recover the next layer of hidden data, use LSPLIT on a renamed TEMP.1. </p>

<p>You cannot stack up hidden files if they are individually encrypted with pseudorandom numbers. I advise LAPPENDing multiple files together, then encrypting, then placing the cipher at the end of the host file. The reason is that if you are encrypting with pseudorandom numbers to generate a random cipher byte for each byte of cleartext, sooner or later an encrypted byte will fall on control-Z. If just one such cipher file is hidden beyond EOF, LSPLIT will find it, as an EOF precedes all the cipher. If LSPLIT is used to try to separate appended cipher files, eventually it will split a cipher file. If your encryption scheme disallows a value of integer 26 (control-Z), then hidden cipher files can be directly stacked beyond EOF. Otherwise, LAPPEND all the files to be hidden while they are still text, then encrypt them as one file -- EOFs and all  --  then LAPPEND that one cipher file to the host file. When using LSPLIT and decrypting, all the files will be cleartext and LAPPENDed together. Subsequent files will still be hidden beyond EOF, even though they are decrypted. If the actual data to be kept confidential is in one of the following hidden files, it may remain undiscovered, even if decrypted. You can leave the following ones as hidden, or split them off with LSPLIT. </p>

<p>You also could super encipher messages by using LAPPEND to join a cipher file to a text, encrypting both, then LAPPENDing the cipher to a host file. The first cipher file is now super enciphered, possibly with a different key the second time. This could be used to give encrypted instructions for using the first cipher file to an intermediary, without the intermediary necessarily knowing the key to the first cipher. Be careful, however, that your plans and protocols don't become too complicated. </p>

<h3>Conclusion</h3>

<p>Other steganography techniques hide data by altering one bit-per-pixel-record in a high-resolution graphic, or one-bit-per-sound record in digitized music or speech. You can hide data that's on your own system, sent over phone lines, or mailed on a disk. These methods can be used to distribute keys for more-rapid encrypted communication and are useful for couriers.</p>

<p>Remember to encrypt the hidden data for the best security, and to erase the LAPPENDed files, or program LAPPEND to do so automatically by including the <i>remove()</i> statement supplied with LAPPEND. Don't forget that an erased file on disk still contains data until something new is written over that portion of disk, so creating an overwrite-erase utility is advisable. Or, just work on a Ramdisk, and keep the cipher on the hard drive.</p>

<p>DDJ</p>


<H4><a name="l1">Listing One</H4>

<pre>/* llist.c  */#include "stdio.h"
main(argc,argv)   /* ....this program lists a file in binary mode; */
                  /*     ALL characters are shown.                 */
     int    argc;
     char  *argv[];
{
  int byte;
  long count=0l;
  FILE *infl;
  if ( argc == 2 )
    {
          infl = fopen(argv[1],"rb");
          if ( infl != NULL )
            {
                while( ( byte = getc(infl) ) != EOF )
                     {
                           count++;
                  /*       if ( byte != 26 ) remove these comment marks to 
                                          avoid display of cntrl-Z. Writing
                                          cntrl-Z to stdout terminates the 
                                          program on some systems.        */
                           putc(byte,stdout);
                     }
                close(infl);
            }
          else
            {
               printf("\n\n...cannot open input file...\n\n");
            }
    }
  else
    {
        printf("\n\n....must supply one file name...\n");
    }
}
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>/* lappend.c  */#include "stdio.h"
main(n,params)
  int n;
  char *params[];
{
  FILE *thefile,*thedata;
  int ch=0;
  if ( n == 3 )
    {  
       thefile = fopen( params[1], "ab" );
       thedata = fopen( params[2], "rb" );
       if ( thefile != NULL &amp;&amp; thedata != NULL )
         {
           fseek(thefile, 0, 2);
           putc(26,thefile); 
           while ( (ch = getc(thedata)) != EOF ) 
             { 
                    putc(ch,thefile);
             }
         }
       else
         {
           printf("\ncannot open a file..\n");
         }
       fclose(thedata);
       fclose(thefile);
    /*   remove(params[2]);   option to erase the source of the hidden data */
    }
  else
    {
      printf("\nproper format is:\nlappend &lt;file appended to&gt; ");
      printf("&lt;file to append&gt;\n");
    }
}
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>/*  lsplit.c  */#include "stdio.h"
#define TEMPFILE "temp.1"
main(n,params)
  int n;
  char *params[];
{
  FILE *thefile,*thedata;
  int ch=0,hiddendata=0;
  if ( n == 2 )
    {  
       thefile = fopen( params[1], "rb" );
       thedata = fopen( TEMPFILE, "wb" );
       if ( thefile != NULL )
         {
           while ( (ch = getc(thefile)) != EOF ) 
             { 
               if (ch == 26 ) hiddendata++;
               if (hiddendata)
                 {
                   while ( (ch = getc(thefile)) != EOF )
                     {
                        putc(ch,thedata);
                     }   
                 }     
             }
         }
       else
         {
           printf("\ncannot open a file..\n");
         }
       fclose(thedata);
       fclose(thefile);
    }
  else
    {
      printf("\nproper format is:\nlsplit &lt;datafile&gt;\n");
      printf("hidden data (if any) will be in temp.1\n");
    }
}
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>/* lwrite.c  */#include "stdio.h"
main(n,params)
  int n;
  char *params[];
{
  FILE *thefile;
  int ch=0;
  if ( n == 2 )
    {  
       puts("type control-Z to finnish");
       thefile = fopen( params[1], "ab" );
       if ( thefile != NULL )
         {
           fseek(thefile, 0, 2);
           putc(26,thefile); /*&lt;-add new EOF...*/
           while ( (ch = getc(stdin)) != EOF ) 
             { 
               if ( ch == 10 )
                 putc(13,thefile); /* explicitly add CR.*/
                 putc(ch,thefile);
             }
         }
       else
         {
           printf("\ncannot open file..\n");
         }
       fclose(thefile);
    }
  else
    {
      printf("\nproper format is:\nlwrite &lt;filename&gt;\n");
    }
}
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<H4><a name="l5">Listing Five</H4>

<pre>/* findh.c  */#include "stdio.h"
#include "direct.h"
#include "dos.h"
read_file(filename)
char *filename[];
{
  FILE *readingthis;
  int inbyte=0,stoploop=0;
  long count=0l,filelength=0l;
  readingthis = fopen(filename,"rb");
  fseek(readingthis,0l,2); /*&lt;-find end of file          */
  filelength = ftell(readingthis);/*&lt;-find filelength    */
  fseek(readingthis,0l,0);/*&lt;-return to begining; Rewind!*/  
<p></p>
  while( (inbyte = getc(readingthis) ) != EOF &amp;&amp; !stoploop ) 
    {
      count++;
      if (inbyte == 26 &amp;&amp; ( count &lt; filelength-1 ) )
        {
          stoploop++;
          printf("\n%s has possible hidden data ", filename);
          printf("  %ld bytes from the begining...",count);
        }
    }
  fclose(readingthis);
}
main(n,params)
int  n;
char *params[];
{
  struct ffblk fldata;
  int c1;
  if ( n &gt;= 2 )
    {
      for(c1=1;c1&lt;n;c1++)
        {
           if (findfirst(params[c1],&amp;fldata,(FA_NORMAL | FA_RDONLY)) != -1)
            {
              read_file(fldata.ff_name);
              while( findnext(&amp;fldata) != -1)
                {
                  read_file(fldata.ff_name);
                }
             }
           else
             {
               printf("\n..no matching file(s) for %s\n",params[c1]);
             }
          }/*endfor*/
    }
  else
    {
       printf("\nproper format is:  findh  filename(s) \n"); 
       printf(" wildcards `*' and `?' may be used.\n"); 
    }
}
<P>
<a href="#rl5">Back to Article</A>
</P>
<p><b>DDJ</b></p>


<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
