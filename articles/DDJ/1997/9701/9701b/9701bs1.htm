<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal January 1997: Examining the Birthday Paradox</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<p><i>Dr. Dobb's Journal</i> January 1997 </p>

<h1>Examining the Birthday Paradox</h1>
</h1>
<HR>
<p>Consider the following question: If we have a group of 23 people, what is the probability <i>p </i>that at least two of them have the same birthday? The answer can be computed by looking at the problem in a different way: We compute the probability that they all have a different birthday (this probability is equal to 1-<i>p</i>). The first person can have his or her birthday on any day; for the second person, there are 364 days left out of 365 possible birthdays (we ignore leap years); for the third person, there are 363 days left out of 365, and so on. For the 23rd person, there are 343 days left out of 365. </p>

<p>The probability that all these birthdays are different is equal to the product of these probabilities, or</p>

<BLOCKQUOTE><img src="9701bq2.gif" width="208" height="43"></BLOCKQUOTE>

<p>Thus we find <i>p</i> = 0.493. This probability is much higher than our intuition suggests. The explanation of this paradox is that there are only 23 people, but 23<img src="dot10.gif" width="5" height="8">22/2 = 253 pairs of people.</p>

<p>How can this now be applied to finding collisions for hash functions? For a hash function with an <i>n</i>-bit result (typically <i>n</i> = 128 or 160), we have a space of size 2<sup><i>n</i></sup> (this corresponds to the 365 days in the year). If we evaluate the hash function for <i>r</i> inputs, we have <i>t</i> = <i>r</i>(<i>r</i>-1)/2 pairs of strings. The probability that the two strings in a pair are identical is 1/(2<sup><i>n</i></sup>). So if <i>t</i> equals about 2<sup><i>n</i></sup>, we expect to find one pair with identical strings. This corresponds to <i>r</i> <img src="9701bq3.gif" width="54" height="15"> 2<sup><i>n</i>/2</sup>. So for a hash function with a 128-bit result, the effort to find a collision is only about 2<sup>64</sup> evaluations of the hash function, which is the square root of the effort to find a preimage. It turns out that clever algorithms allow us to find these solutions without having to store this huge number of strings.</p>

<p> -- A.B., H.D., B.P.</p>

<P>
<a href="9701b.htm#rs1">Back to Article</A>
</P>
<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
