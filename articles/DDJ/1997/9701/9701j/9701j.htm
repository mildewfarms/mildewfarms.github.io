<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal January 1997: Publishing Dynamic Data on the Internet</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Publishing Dynamic Data on the Internet</h1>

<p><i>Dr. Dobb's Journal</i> January 1997
</p>
<h2>Making your databases Internet accessible</h2>

<h3>By Lauren Hightower</h3>

<I>Lauren is a general partner of the Calico Company in Tallahassee, FL. Her company specializes in client/server and Internet development. She can be contacted at calico@supernet.net.</I>

<hr>

<p>In a relatively short time, the World Wide Web has grown from a static information-delivery system to a full-blown interactive medium with enough potential to make IS shops reconsider their software-development strategies. At the same time, tools are beginning to surface that will marry this massive information system with the information source that drives businesses -- databases.</p>

<p>Companies always have needed to provide customers and employees with current, live corporate data. These databases typically are accessed through proprietary software written for viewing, manipulating, and updating data. Companies also have developed a number of strategies for distributing information to clients, including dial-up access to internal systems and proprietary applications with monthly data updates. But given the vast array of PC architectures and operating systems, these solutions can create costly software-development and technical-support nightmares.</p>

<p>Enter the Internet. Third-party and database companies are rushing to develop products that allow data access through the Web. Any user with an Internet-capable computer can use tools to access data through a web-based dynamic data application. A web browser serves as the only software a client computer needs to access and manipulate data. The web server provides the data-access and manipulation tools.</p>

<p>Traditionally, a CGI script or program was used to allow the web server to access data in a database. As database-driven applications are becoming more popular, developers are searching for easier and more efficient ways to access data.</p>

<p>Allaire's Cold Fusion is a development tool that can be used with Windows 95 or Windows NT web servers to provide access via the Web to any database the web server can access using ODBC. It runs as a multithreaded Windows NT system service and works with any ODBC-compliant database. Cold Fusion uses SQL to retrieve and manipulate the data, including adding tables to a database, adding records to a table, and updating multiple rows in a table using an action query.</p>

<p>A Cold Fusion web application uses template files instead of static HTML pages. When users request a Cold Fusion template file, the template is processed by Cold Fusion, which generates a standard HTML page that is sent back to the user's browser; see <a name="rf1"><a href="9701jf1.htm">Figure 1</A>.</p>

<p>A Cold Fusion template file is an ASCII text file that looks a lot like an HTML file at first glance. You can use any standard HTML tag in a Cold Fusion template that you would use in a static HTML web page. As the HTML standard develops, you can incorporate new HTML tags in your templates. As long as the browser can interpret the HTML tags, you don't need to worry about compatibility issues between Cold Fusion and HTML. </p>

<p>In addition to the HTML tags and standard text you want the template to generate, you must also include Database Markup Language (DBML) tags to tell Cold Fusion what information the user has requested and what to do with the result set. Cold Fusion uses the SQL statement you include in a DBQUERY DBML tag to connect to the database using ODBC. It queries the database, then generates the dynamic web page using the HTML tags in your template and the results of the query.</p>

<h3>An Online Ordering System</h3>

<p>To illustrate how you can use Cold Fusion, I developed an online ordering system that allows users to shop from a catalog, placing orders when they have filled their shopping carts. The products displayed to users through the Web come from the same database we use to maintain product and price lists, thus the information is up-to-date and accurate, 24 hours a day, 7 days a week. This type of application frequently is referred to as a "shopping cart" application by web developers. For an alternative approach to web shopping carts, see "Implementing a Web Shopping Cart," by Chris Baron and Bob Weil (<i>DDJ</i>, September 1996).</p>

<p>The Online Ordering System contains three major components:</p>

<ul>
<li>A product-listing module that displays all of our products and prices by manufacturer.  <li>An ordering module that inserts an order into the database and totals the transaction for the user.
  <li>An e-mail module that generates and sends a message to the sales department as soon as a customer submits an order. 
</ul>

<h3>The Cold Fusion Administrator</h3>

<p>At the heart of the Cold Fusion system is the Cold Fusion Administrator. It resides on the web server and allows you to manage and maintain ODBC data sources, links from the web server to ODBC-compliant databases. Without an entry in the Cold Fusion administrator, a database is not accessible by the web server. For the online catalog, I created a data source named "calico" to access my product database. Because the product database is a Microsoft Access 7.0 database, I specified the Access 7.0 ODBC driver as the connection source.</p>

<p>You also use the Cold Fusion Administrator to map physical directories to logical template file paths, configure the debugging output and error logging behavior of Cold Fusion, and configure the caching of the DBML.EXE script and ODBC libraries. All of these settings are created by default when you install Cold Fusion. You can edit them if you require a setting other than the installation default.</p>

<h3>Using DBML</h3>

<p>DBML.EXE is the Cold Fusion stub program (14 KB) that passes relevant CGI data from the web server to the Cold Fusion NT service, then receives the dynamic page back from the service and passes it back to the web server to display. The two most-basic tags are those you use to do the bulk of the work:</p>

<p></p>

<ul>
<li>DBQUERY defines a SQL statement to be performed by Cold Fusion against a datasource defined in the Cold Fusion Administrator.  <li>DBOUTPUT allows you to display the results of a DBQUERY.
</ul>

<p></p>

<p>DBML tags, like HTML tags, may have attributes you can set to define the behavior of the query. Two DBQUERY attributes are optional -- the <i>maxrows</i> parameter defines the maximum number of rows you want Cold Fusion to return, and the <i>debug</i> parameter instructs Cold Fusion to return the data source name and number of records with the result set. The three mandatory attributes for DBQUERY are <i>name</i>, <i>datasource</i>, and <i>SQL</i>. You use the name of the query after the query is performed if you want to display the results to the user. The <i>datasource</i> parameter links the query to the data source you defined in the Cold Fusion Administrator. The SQL parameter defines the SQL statement you want to execute against the data source.</p>

<p>When a user accesses our site, the database generates a unique shopper ID and assigns it to that user. The <i>ShopperID</i> field in the Access database is an <i>AutoNumber</i> field that is generated when Cold Fusion performs an <i>Insert</i> into the table using the SQL statement: <i>INSERT INTO hns_orders (customerfirstname) VALUES ('Temporary Shopper')</i>. I accomplish this by redirecting the default URL, http:// www.calico-company.com/hotnstuf/, to a Cold Fusion template file using the URL http://www.calico-company.com/cgi-shl/dbml.exe?Template=hnsdefault.dbm. The template, hnsdefault.dbm, contains a DBQUERY tag instructing Cold Fusion to insert a new row into the <i>hns_orders</i> table in the Calico datasource: <i>&lt;DBQuery Name="InsertShopper" DataSource="Calico"</i> SQL="INSERT INTO hns_orders (customerfirstname) VALUES('Temporary Shopper')"&gt;. (The complete Cold Fusion template is available electronically; see "Availability," page 3.)</p>

<p>Cold Fusion executes the INSERT statement as soon as it processes the template, then it retrieves the <i>ShopperID</i> number from the table by executing <i>Max(shopperID)</i> immediately after it adds the new row: <i>&lt;DBQuery Name="FindMax" DataSource="Calico" SQL="SELECT Max(shoppingid) as shopid FROM hns_orders"&gt;</i>. Now I can use <i>shopid</i> to uniquely identify the shopper and to display it to the user with the DBOUTPUT tag: <i>You are shopper &lt;dboutput query="FindMax"&gt; #shopid# &lt;/dboutput&gt;</i>. (See <a name="rf2"><a href="9701jf2.htm">Figure 2</A>.)</p>

<p>Cold Fusion uses the pound sign to indicate the name of a database field within <i>dboutput</i> tags, parameters passed with a URL, or form fields passed when users click a Submit button on a form. In this example, <i>#shopid#</i> represents the database field generated by the DBQUERY named "<i>FindMax</i>."</p>

<p>If the shopper decides to buy an item, I can uniquely identify the purchases by the shopper ID. To do this, I must pass the shopper ID to each template while the shopper is browsing our product database. Cold Fusion allows you to pass parameters to DMBL.EXE as part of the URL. For instance, to pass the shopper ID to a template, called hnsprods.dbm, that lists all of our products from a particular manufacturer. Within the referring template file, I use the URL <i>http:// www .calico-compa</i>ny .com/cgi-shl/ dbml .exe? Template=hnsprods.dbm&amp;shopid=&lt;dboutput query="FindMax"&gt;#shopid#&lt;/dboutput&gt;. I can add as many parameters as I want by concatenating each parameter to the list with an ampersand (&amp;). To specify the category ID of the products I want to list within the referring template file, I use the URL <i>http://www. calico-company.com/ cgi-shl/dbml.exe? Template=/hnsprods .dbm&amp;shopid= &lt;dboutput query= "FindMax"&gt;#shopid# &lt;/dboutput&gt;&amp;catid=1</i>.</p>

<p>I have four categories of products in my database, each identified by a unique category ID. When I pass the category ID to the template that handles the product listing, it uses the information to generate a product listing: <i>&lt;DBQuery Name="ListProducts" DataSource="calico" SQL= "SELECT * FROM hns_products WHERE productcategory = #catid# ORDER BY producttype, productname"&gt;</i>. </p>

<p>When I display the results of the query, I use a DBOUTPUT tag (see <a name="rl1"><a href="9701j.htm#l1">Listing One</A> with the <i>Group</i> parameter to group the products by product type. Because I want the shopper to be able to purchase a product directly from the list, I put the results inside a form. The Action parameter of the &lt;form&gt; HTML tag specifies the URL to call when users press the Submit button at the bottom of the order form. </p>

<p>As this example demonstrates, you can nest DBOUTPUT statements to customize your data output. In this case, the first DBOUTPUT tag specifies the group and the second DBOUTPUT statement lists all the products that belong to the group. The second DBOUTPUT tag iterates through the query-result set until it gets to the last product. As in HTML, you must terminate some DBML tags: &lt;DBOUTPUT&gt; requires a terminating &lt;/DBOUTPUT&gt;.</p>

<p>When using a form to allow users to enter information, you can pass information to a Cold Fusion template on the URL line or as a hidden-field type. In the hnsprods.dbm file, I use hidden fields to specify the shopper ID (<i>shopid</i>) and product ID (<i>prodid</i>). Cold Fusion also uses hidden-field types to validate data and specify error messages to users. For instance, the hidden fields in <a name="rl2"><a href="9701j.htm#l2">Listing Two</A> tell Cold Fusion that users must enter a value into the field named "quantity" and the value in the quantity field must be a number. If users don't enter a value or they enter a value that isn't a number, they receive the error message specified in the hidden field's value parameter; in this case, either "You must enter a quantity" or "The quantity must be a number."</p>

<p>When users submit the order form, the hnsorder.dbm template processes the order, totals all the items in the shopping cart, then gives instructions to place the final order or to continue to shop. SQL statements inside DBQUERY tags perform all the database manipulation and calculation. DBOUTPUT tags display the results; see <a name="rl3"><a href="9701j.htm#l3">Listing Three</A>.</p>

<p>With the DBIF and DBELSE tags, I can do conditional processing and formatting of result sets. In this case, if the <i>MfgId</i> field of the database is blank, the template instructs Cold Fusion not to display the field: <i>&lt;dbif #MfgID# is not ""&gt;(#MfgID#)&lt;/dbif&gt;</i>. </p>

<p>Using the same tags, I can restrict submitted orders to those with a total cost of $15 or more. If a user has only $13 worth of merchandise in a shopping cart, he must continue shopping; otherwise, he can fill out the purchase information to submit his final order; see <a name="rl4"><a href="9701j.htm#l4">Listing Four</A>.</p>

<p>If the user decides to place the final order, he enters his shipping and credit-card information into a form, then submits the information. The user's shipping, order, and credit-card information are now in my database. In addition, my Cold Fusion template instructs Cold Fusion to generate an e-mail message to my sales department listing the information needed to fill the order. When the message is received, the salesperson calls to confirm the order and processes the shipment. </p>

<p>The DBMAIL tag tells Cold Fusion to generate an e-mail message and send it to a specified recipient or list of recipients. The DBMAIL tag can take four parameters:</p>

<p><b>From</b> -- the e-mail address to be listed on the e-mail's from line.</p>

<p><b>To</b> -- the e-mail address to whom the message will be sent.</p>

<p><b>Query</b> -- the query name to be used in any output in the message.</p>

<p><b>Subject</b> -- the subject text to be listed on the e-mail's subject line.</p>

<p></p>

<p>In my application, I need to send only one e-mail message to a single recipient; see <a name="rl5"><a href="9701j.htm#l5">Listing Five</A>. I just as easily could have a table in my database with e-mail addresses of all the sales people in a department. Using this table and a DBQUERY to retrieve all the e-mail addresses, I could send a message to each e-mail address in the table by adding the QUERY parameter to the DBMAIL tag, using the data result set in the TO line of the message in <a href="9701j.htm#l6">Listing Six</A>.</p>

<h3>Conclusion</h3>

<p>Tools such as Cold Fusion that link databases to the Web are surfacing as developers and users begin to grasp the power and potential of the Web. This new technology is in its infancy and each new wave of products will bring innovative and better ways to exploit this new medium. It is only a matter of time before databases have built-in data types for video and audio. Already, client-side tools such as Java and ActiveX give power to the client beyond simple "browsing." The Internet has a massive structure for information exchange. It is now up to developers and vendors to build on existing principles of client/server development to create the applications and the tools to deliver the information in an efficient, reliable, and meaningful manner.</p>


<p><b>DDJ</b></p>


<H4><a name="l1">Listing One</H4>

<pre>&lt;DBOUTPUT Query="ListProducts" Group="ProductType"&gt;&lt;center&gt;&lt;HR&gt;&lt;/center&gt;
&lt;H2&gt;#ListProducts.ProductType#&lt;/H2&gt;
&lt;DBOUTPUT&gt;
&lt;FORM ACTION="http://www.calico-company.com/cgi-shl/dbml.exe?
 Template=hnsorder.dbm" METHOD=Post&gt;
&lt;input type=hidden name=shopid value=#shopid#&gt;
&lt;input type=hidden name=prodid value=#productid#&gt;
&lt;input type=hidden name=quantity_required value="You must enter a quantity."&gt;
&lt;input type=hidden name=quantity_number value="The quantity must be a number."&gt;
&lt;center&gt;&lt;HR width=500&gt;&lt;/center&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;Font Size=+1&gt;#ProductName#&lt;/font&gt;&lt;/STRONG&gt; 
 &lt;dbif #MfgID# is not ""&gt;(#MfgID#)&lt;/dbif&gt;
&lt;br&gt;&lt;STRONG&gt;Price:&lt;/STRONG&gt; #DollarFormat(PriceEach)# each (#PerCase# per case)
&lt;br&gt;Quantity: &lt;input type=text name=quantity value="1" size=3&gt; 
(this must be a number)
&lt;p&gt;&lt;input type=submit value=" Order Now "&gt;
&lt;/form&gt;
&lt;EM&gt;#ProductDescription#&lt;/EM&gt;
&lt;/DBOUTPUT&gt;
&lt;/DBOUTPUT&gt;
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>&lt;input type=hidden name=quantity_required value="You must enter a quantity."&gt;&lt;input type=hidden name=quantity_number value="The quantity must be a number."&gt;
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>&lt;DBQUERY Name="InsertItem" DataSource="Calico" SQL="INSERT INTO hns_orderdetail(Shoppingid, ProductID, ProductQuantity) VALUES(#form.shopid#,
#form.prodid#,#form.quantity#)"&gt;
&lt;DBQUERY NAME="FindOrders" DataSource="Calico" SQL="SELECT 
hns_products.ProductName, hns_orderdetail.ProductQuantity, 
hns_products.MfgID FROM (hns_orderdetail INNER JOIN 
hns_orders ON hns_orderdetail.ShoppingID = 
hns_orders.shoppingId) INNER JOIN hns_produ
cts ON hns_orderdetail.ProductID = hns_products.ProductID WHERE 
(((hns_orderdetail.ShoppingID)=#form.shopid#))"&gt;
&lt;DBQuery NAME="TotalOrder" DataSource="Calico" SQL="SELECT 
Sum(hns_products.PriceEach) AS TotalCost FROM 
(hns_orderdetail INNER JOIN hns_orders ON 
hns_orderdetail.ShoppingID = hns_orders.shoppingId) 
INNER JOIN hns_products ON hns_orderdetail.ProductID = hn
s_products.ProductID WHERE hns_orderdetail.ShoppingID=#form.shopid#"&gt;
&lt;DBQuery NAME="TotalCost" DataSource="Calico"
SQL="SELECT Sum([ProductQuantity]*[PriceEach]) AS RealCost FROM 
(hns_orderdetail INNER JOIN hns_orders ON 
hns_orderdetail.ShoppingID = hns_orders.shoppingId) 
INNER JOIN hns_products ON hns_orderdetail.ProductID = 
hns_products.ProductID WHERE hns_orderdetai
l.shoppingid=#shopid#"&gt;
&lt;DBOUTPUT QUERY="FindOrders"&gt;
&lt;li&gt;&lt;strong&gt;#ProductQuantity# #ProductName#&lt;/strong&gt; 
 &lt;dbif #MfgID# is not ""&gt;(#MfgID#)&lt;/dbif&gt;
&lt;/DBOUTPUT&gt;
&lt;/ul&gt;
&lt;DBOUTPUT QUERY="TotalCost"&gt;
&lt;p&gt;&lt;strong&gt;TOTAL : &lt;/strong&gt;#DollarFormat(RealCost)#
&lt;/DBOUTPUT&gt;
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>&lt;DBIF #RealCost# less than 15&gt;&lt;P&gt;&lt;strong&gt;The minimum order we can mail is $15.00. You have not reached that amount yet.
&lt;P&gt;To continue shopping, press the BACK button on your browser to get back to the product listing you were viewing.&lt;/strong&gt;
&lt;/dbelse&gt;
&lt;P&gt;To finalize your order and submit your order form with the items listed, fill out the information below.&lt;/strong&gt;
&lt;/dbif&gt;
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<H4><a name="l5">Listing Five</H4>

<pre>&lt;DBMAIL QUERY="FindOrders" FROM="calico@supernet.net"
<p></p>
 TO="calico@supernet.net"
 SUBJECT="Hot N Stuf Order Form"&gt;
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>
<H4><a name="l6">Listing Six</H4>

<pre>&lt;DBQUERY NAME="FindEmail" DataSource="calico" SQL="SELECT email  FROM recipients"&gt;
&lt;DBMAIL QUERY="FindEmail"
 FROM="calico@supernet.net"
 TO="#email#"
 SUBJECT="Hot N Stuf Order Form"&gt;
 Here is the information for a new order placed through the Online Catalog.
&lt;/DBMAIL&gt;
<p></p>
<P>
<a href="#rl6">Back to Article</A>
</P>
</DDJarticle=>
<p><b>DDJ</b></p>


<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
