<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal January 1997: Programming Paradigms</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<H1>The Spreadsheet Paradigm</H1>
<H3>By Michael Swaine</H3>

<I>Michael is editor-at-large for DDJ. He can be contacted at mswaine@cruzio.com.</I>

<hr>

<p>This month's column is another "Paradigms Past" installment, based on research for the planned second edition of the personal computer history <i>Fire in the Valley,</i> a book I wrote with Paul Freiberger and published with Osborne/McGraw-Hill back in 1984.</p>

<p>Spreadsheets aren't programming, although they have always had some degree of connection with programming. But the development of the electronic spreadsheet is surely one of the most important steps in the development of the personal computer as we know it today. It is one of the two or three most-important pieces of application software ever, from the point of view of creating the personal-computer market and the personal-computer revolution. It's hard to imagine anyone running a business without a computer these days (although I hear it's done), but it's even harder to imagine anyone running a business using a computer and not using a spreadsheet program. And I wouldn't be surprised if the record numbers of new businesses launched in some recent years were partly due to the ease with which one can run out "what-if" scenarios on an electronic spreadsheet. But what is obvious today wasn't so obvious back in the early microcomputer days. The list of people who clearly saw the need for business software for the machines, but had trouble seeing the virtues of the spreadsheet program, even when the first one was demonstrated to them (nudge, nudge, Mike Markkula), is large and impressive.</p>

<p>In the first edition of <i>Fire in the Valley</i>, a story that ends in 1984, the spreadsheet tale was largely relegated to a section entitled "VisiCalc" in the Apple chapter. Certainly VisiCalc, an Apple II program and the first spreadsheet program, is an important chapter in Apple's history, but it was only the beginning of the spreadsheet story. It is clear, in retrospect, that we left out many interesting human, technological, and business stories. (Of course, some of it hadn't happened yet when we wrote the book....) The story of Lotus Development Corp. has been taught in business schools, and Mitch Kapor's personal history is exactly the sort of anticorporate-idealist-becomes-entrepreneur story that <i>Fire in the Valley</i> is filled with. As we worked up our plan for the second edition, we knew we wanted to tell the whole spreadsheet story, and as we did our research, that story began to unfold something like this:</p>

<h3>A Software Invention</h3>

<p><i>The original design was futuristic. I wanted to implement a heads-up display, as with a fighter plane where you see the numbers in front of you.</i></p>

<p> -- Dan Bricklin on VisiCalc</p>

<p>Quick recap: <i>Fire in the Valley</i> tells the basic VisiCalc story. How Dan Bricklin came up with the idea for the first spreadsheet program while studying business in graduate school at Harvard; how he recruited old MIT computer-science classmate Bob Frankston to develop the program; how they formed the company Software Arts; and how, in April 1979, Software Arts contracted with Personal Software (which was a respected personal-computer software firm at the time, even if it was just Dan Fylstra and his fianc&eacute;e selling software out of an apartment) to market their program, VisiCalc. VisiCalc, developed initially for the Apple II, was a runaway success and became Personal Software's top seller, running up 100,000 unit sales in two years -- truly impressive for the time. What the book skipped, though, was some acknowledgment of the beauty of Bricklin's invention.</p>

<p>I don't mean that the VisiCalc program itself was beautiful, although I might have made that claim back in 1979. Software esthetic standards evolve, thank goodness.</p>

<p>But the spreadsheet paradigm was a beautiful invention. The sliding window on an infinitely large blackboard. The grid of cells with values that can be dependent on one another. The whole idea of doing math in two dimensions. The things left out, or worked out, of the design: the truly uncluttered simplicity of the concept.</p>

<p>And invention, in those days, was what sold.</p>

<p>Dave Reed, who worked for Software Arts later on, summarized the basic fact of market position back then. "The first generation of product was what [succeeded]. If something new came along, you could just find gobs of new people to try the thing."</p>

<p>Reed puts it in terms of products and markets, but it's important to remember that products can create markets, and in the early days of the PC industry, that was more often than not the case with successful products. </p>

<p>The success of the first product in a market wasn't always just a matter of being the first to fill an existing niche. It was sometimes a matter of creating that niche, creating a new kind of thing in the world. It was, sometimes anyway, invention.</p>

<p>Viewed that way, it leads us to the pleasant thought that when customers were snapping up these genuinely new things, they were buying inventions. They were rewarding invention. There was, in those giddy days, more of a close conversation between the inventor and the market. And the spreadsheet was an invention, more than many software gadgets that have subsequently been granted patent protection. Which makes Bricklin's deliberate decision not to try to patent the spreadsheet concept all the more significant. It left the door open for enhancements to the concept, for the kind of iterative collaboration that still can be found in the most active and exciting areas of software development. More immediately, of course, it left the door open for Mitch Kapor.</p>

<h3>The Drifter</h3>

<p><i>I didn't have a direction. I was drifting. I was kind of an intellectual gypsy.</i></p>

<p> -- Mitch Kapor</p>

<p>The kid, as anyone could see, had promise.</p>

<p>There was that computer he built as a science-fair project in junior high, for one thing. All right, so it was really just an adding machine with a rotary-phone dial for input. Still, how many kids would even have thought of building a computer back in 1964?</p>

<p>He was given every encouragement to live up to that promise. Dad, a successful small-business owner, discouraged Mitch from thinking about business as a career. A college professor: That was a worthwhile goal for the bright young kid from Boston. His school gave him every encouragement, too; it offered a course in computer programming, which was highly unusual for a high school in the 1960s. Add to that the National Science Foundation-sponsored enrichment courses in the summer, classes at Columbia University on weekends...</p>

<p>Then, in 1967, came graduation. And along with it a few other things. It was the Summer of Love; the flowering of Haight-Ashbury; the release of the "Sgt. Pepper" album. Mitch was going to college in the fall, to Yale, but that summer his mind was 2,000 miles away. His event horizon was something like a week out, and his priorities were (more or less) sex, drugs, and rock 'n roll.</p>

<p>The Kapors were not happy.</p>

<p>Mitch was a good son: He did the Yale thing, got his degree, had some further encounters with computers along the way that both intrigued and frustrated him, and went on to graduate school. But the culture of the '60s got inside Mitch Kapor.</p>

<p>In the '60s, dropping out was a viable option. You could live on the fringe, not being a visible blip on the economic radar screen, but not starving, either. Mitch may have made $12,000 one of those years, but generally, it was rather less. He was drifting, directionless, an "intellectual gypsy," as he later characterized his life then. He drifted into teaching transcendental meditation, into a stint as a disc jockey, into work as a counselor in a mental hospital, into and out of a marriage. "I wasn't unhappy, but I wasn't happy either," he later said. "My parents weren't happy."</p>

<p>Closing in on 30, low on cash, and without direction, he seized on an old fascination. Pawning his stereo, he bought an Apple II computer and started programming. He became a BASIC hacker. Mitch's relationship with programming was schizoid: He was fascinated with the cleanness, the orderliness of what computers could be made to do, but he was exasperated whenever he tried to make them do it. He didn't think he was a very good programmer. He persevered, though, and got good enough to complete a program that worked with VisiCalc spreadsheets, for use in plotting and analyzing spreadsheet data.</p>

<p>He had done a good-enough job, in fact, that he was able to sell it to Personal Software. Dan Fylstra, who was flush with cash from sales of the very successful VisiCalc, was looking for new products, and Mitch pitched it as a product to fill out a "Visi" product line for Personal Software. He called it "VisiPlot/VisiTrend." Fylstra gave him $1.2 million for it.</p>

<h3>Accidental Entrepreneur</h3>

<p><i>As the rumors started that [the IBM PC] would come out, Mitch started his project...</i></p>

<p> -- Dave Reed</p>

<p>Mitch decided to use the money to start a company. It wasn't what his father wanted and it wasn't terribly consistent with his own '60s anticorporate values, but he figured that having his own company would allow him still to do what he wanted and, at the same time, put enough money in his hands so that he wouldn't feel like a drifter.</p>

<p>He called the company "Micro Finance Systems," and the first product was to be something called "Executive Briefing System." Its trick was to take a graph or plot and organize it into a presentation. It took some of its look and feel from Mitch's VisiPlot, and was conceived and designed by Mitch Kapor, but it was coded by a teenaged hacker named Todd Agulnick. Mitch would later write cogently on his notion of the role of the software designer, as opposed to the programmer, in the development of a software product. But in the early days of Executive Briefing System, he was less clear on the concept. He did know, though, that he wanted a better programmer than himself writing his software.</p>

<p>Mitch changed the company name to Lotus, in honor of his days as a transcendental-meditation teacher, before Executive Briefing System ever shipped. It barely shipped at all. Although some sales of Executive Briefing System apparently showed up on the balance sheet later during second-round venture financing for Lotus, Mitch never made much effort to sell the product, soon dropping it altogether to put all the Lotus eggs into a different basket.</p>

<p>The inspiration for the second basket, er, product, was a chance meeting at an Apple II user group with a seasoned professional programmer named Jonathan Sachs.</p>

<p>Sachs had his own software company, Concentric Data Systems, but not long before had been in charge of a team of programmers writing an operating system at Data General, and before that, had spent more than a decade studying and developing software at MIT. Concentric was a tiny venture: a consulting firm consisting of Sachs, who was trying to create products, and John Henderson, his former boss at Data General, who was bringing in the real money with contract programming. Together, they wrote a technically spiffy but strategically disastrous spreadsheet for Data General hardware that did nothing for the bottom line and contributed a lot to the breakup of their partnership. When they split, Sachs got custody of the spreadsheet.</p>

<p>Kapor knew, generally, about IBM's plans for a personal computer, and knew that there was going to be a VisiCalc for the IBM machine. When Sachs told him about his Data General spreadsheet program (and when he went on to explain how quickly he could develop a new spreadsheet for another machine, any machine, based on that spreadsheet), Mitch thought he saw a nice synergy. They struck a deal.</p>

<p>The idea for the spreadsheet evolved rapidly. Out went the powerful embedded-programming language that Sachs liked. Some of it would come back later in the form of macros. And what had been a simple spreadsheet soon became a three-function program. Mere spreadsheets had been done. Integrated software was the concept, Mitch felt. The program would combine the functions of spreadsheet, graphics, and word processing in one integrated program. And because it did more, you could charge more for it. Making money was not the prime motivation behind the more and more furious activity at Lotus, but somewhere along the way, it occurred to Mitch that one could make a lot of money on this stuff. And, on reflection, he decided that would be a Good Thing. Somewhere around this time, it also began to occur to him that the marketing strategies of current software companies were a little, um, quaint. If personal-computer software was going to be a serious business -- and the $1.2 million Fylstra had given him felt pretty serious to him -- marketing strategies would have to change. </p>

<p>Meanwhile, Sachs coded, working at home and bringing in the latest version about once a week for Mitch's feedback. As he massaged the program into a product, the original three functions (spreadsheet, graphics, and word processing) evolved into spreadsheet, graphics, and database management (the word-processor component proved a little too hairy). That was a nice choice, though: The database capability fit better with the other capabilities. And it was still a three-function program, so they decided to play that up in the name.</p>

<p>They called it "Lotus 1-2-3."</p>

<h3>Riding the Rocket</h3>

<p><i>We thought we had to call it integrated software. The market quickly told us it was a spreadsheet.</i></p>

<p> -- Mitch Kapor</p>

<p>IBM introduced its PC in 1981. Kapor immediately started talking up Lotus 1-2-3 to potential investors and potential buyers. One of the potential buyers was Dan Fylstra. Fylstra had bought software from Mitch before, knew him well, and had the money and the market position. Personal Software was the largest PC software company and had just had a $12-million year.</p>

<p>But Fylstra passed on the idea, wishing Mitch well.</p>

<p>One of the potential investors was venture capitalist Ben Rosen. Mitch pitched Rosen on this integrated spreadsheet, database, and graphics program that could take advantage of the PC's 640 KB of RAM. But he also pitched the company. Lotus Development Corporation was going to be a serious software powerhouse. Rosen didn't pass on the idea. He kicked in the seed capital in 1982 to get Lotus Development Corporation off the ground. In April 1982 Lotus was off and running, with $1 million in seed capital, eight employees, and one product under development.</p>

<p>Six months later, Lotus announced 1-2-3 at the Windows on the World restaurant in New York's World Trade Center. There was major press attendance and there was a story about it in <i>The Wall Street Journal</i> on the following day.</p>

<p>Rosen delivered another $3.8 million in December. In terms of investment, in terms of rolling the dice and sheer chutzpah, they were in unexplored territory. Nobody had put that kind of money into a personal-computer software company before: certainly not into one whose entire sales record consisted of a few copies of Executive Briefing System sitting on a store shelf in West Hartford, Connecticut.</p>

<p>The selling of Lotus 1-2-3 was a remarkable gamble. It was hands-down the biggest market blitz in the short history of the personal computer industry history. To run the campaign, Mitch hired consultants McKinsey &amp; Company, and McKinsey &amp; Company -- was it prescience or dumb luck? -- assigned a new hire by the name of Jim Manzi to the job. Lotus 1-2-3 hit the stores in January.</p>

<p>It sold more than 200,000 copies in the first year. It took over the top of Softsel's bestseller list by April and held it the rest of 1993. That year, the product brought in $53 million in sales to Lotus, making a nice return on that $4.8 million investment.</p>

<p>Manzi, the hero of the campaign, joined Lotus as marketing director in May. He took out ads in <i>The Wall Street Journal</i>, a radical move given the skepticism with which personal computers were greeted in corporate circles. Sales went to $300 million in three years. Lotus 1-2-3 became one of the all-time best-selling software products ever.</p>

<p>And along the way, the market explained to Mitch that what he was selling was a spreadsheet. Silly him. He had thought it was integrated software. No, the market explained, those other features are just part of what we (now) expect from a spreadsheet. Who knew?</p>

<p>Next month: What went wrong at Lotus, how Software Arts and Personal Software did each other in, how Mitch walked away from it all when he was on top, and the real reason why Fylstra passed up one of the all-time best-selling software products ever.</p>

<p><b>DDJ</b></p>


<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
