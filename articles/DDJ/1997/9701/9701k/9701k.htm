<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal January 1997: Inside Iterated Systems' Fractal Development Kit </title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Inside Iterated Systems' Fractal Development Kit </h1>

<p><i>Dr. Dobb's Journal</i> January 1997
</p>
<h2>There are advantages to having "fractals inside"</h2>

<h3>By Dino Esposito</h3>

<I>Dino is a senior software engineer specializing in Windows programming and a contributing editor to many Italian programming magazines. He can be reached at esposito@infomedia.it.</I>

<hr>

<p>In today's world of graphics-intensive computing, it is critical to minimize the space required for storing images -- and fractal-based software provides an efficient way to do just that. Although fractal compression can be time consuming because of the intrinsic asymmetry of the algorithm, decompression is almost immediate. Furthermore, fractals inside applications are resolution independent and scalable. A 30-KB, 700&times;400-pixel image can decompress to the screen in any size (smaller or larger) in a matter of seconds.</p>

<p> The Fractal Development Kit (FDK) from Iterated Systems is a library that makes it possible for you to embed fractal-imaging capabilities into C/C++ Windows and Macintosh applications. The royalty-free Image Decoder lets you display Fractal Image Format (FIF) files or convert files to other formats. It supports 32-bit Windows (Windows 95/NT/Win32s), 16-bit Windows (Windows 3.x), and MacOS. The decoder is compatible with compilers such as Watcom C/C++ 10.5a, Borland C++ 4.5, and Microsoft Visual C++ 4.0 (and v1.52a for 16-bit) under Windows, and MPW 3.4, CodeWarrior 1.4, Symantec 8.0.3, and Visual C++ 4.0 for the MacOS. The Image Encoder, which requires a license, lets you convert files from other formats to FIF files. It supports 32-bit Windows only.</p>

<p> You can download the complete kit from http://www.iterated.com/. Once you have downloaded the libraries, you simply use two DLLs, one for compressing images and the other for decompressing. </p>

<h3>The Decompression Library</h3>

<p>The decompression library, deco_32.dll, is a 32-bit Windows library compatible with Win32s. Before decompressing your first fractal image, you should be acquainted with concepts such as FTT files, resolution format, output color table, dithering, and the FIF buffer. The libraries are powerful and flexible, but require work before you can successfully display a decompressed bitmap. The process consists of the following steps:</p>

<p></p>

<p>1. Initializing the engine.</p>

<p>2. Reading the input FIF file.</p>

<p>3. Reading the input FTT file (if required).</p>

<p>4. Setting the output resolution.</p>

<p>5. Allocating a buffer for the image.</p>

<p>6. Invoking the decompressor.</p>

<p></p>

<p>From the software perspective, decompressing involves a request to a server. This server, called "decompressor," is initialized using <i>OpenDecompressor</i>. The handle that is returned represents the session. Each session has a set of properties: output format, color-table format, output color table, and dithering. You can specify the desired format for the pixels of the image and for the image's palette. With <i>SetOutputFormat</i>, you can decide how bits should be returned. For example, if you want a true-color Windows DIB, use a call such as <i>SetOutputFormat(hDeco, BLUE8, GREEN8, RED8, NOT_USED, BOTTOM_LEFT)</i>, where the first argument is the handle to the decompressor instance, the next four arguments represent an RGB quadruple (for DIBs the first byte is blue, the second is green, and the third is red), and the last parameter is a flag denoting the order in which you would process the output data. The DIBs are usually bottom-left ordered and require three bytes (B,G,R). For the Macintosh, the call should be changed to <i>SetOutputFormat(hDeco, BLANK8, RED8, GREEN8, BLUE8, TOP_LEFT)</i>. </p>

<p><i>SetOutputFormat</i> gives you full control of how the decompressed bits are organized in the return buffer. You can ask the decompressor for true-color and color-mapped bitmaps. Using <i>SetColorTableFormat</i>, you determine the format of the output color table. The palette is calculated by the library and made available via <i>GetOutputColorTable</i>. Often, you cannot afford an optimized palette for each image because of hardware limitations or interface requirements. The FDK offers a good solution to this kind of problem. <i>SetOutputColorTable</i> lets you define the output palette color by color. You may decide that the <i>i</i>th entry will be dynamically determined by the decompressor, or statically fixed by your software. You need to pass an array of flags, one for each color-table entry. Typical values are CM_DYNAMIC, CM_STATIC, and CM_NOT_USED. <a name="re1"><a href="9701ke1.htm">Example 1</A> gets an optimized palette.</p>

<p>Once you have initialized the decompressor, turn to the FIF file. You should provide code to open the file, read it in, and bufferize it. You also have to take care of memory allocation and checking for a valid FIF format (using <i>TestIfFIF</i>). The bytes to decompress must be stored in an internal buffer via <i>SetFIFBuffer</i>. If the FIF file requires a fractal template (FTT file), you read in and set it using <i>SetFTTBuffer</i>. </p>

<p>One advantage of fractals over other compression technologies is the capability of recreating images, scaling from their original size. When you first acquire the image from a photo, slide, book, or wherever, you get a physical bitmap whose dimensions depend upon the density of digitization. The higher the DPI (dots per inch) ratio, the better the quality of the resulting image. Compressing a bitmap such as this usually binds you to a particular width and height; you can provide scaling effects only by means of stretching algorithms. Having fractals inside your apps lets you extract and store in FIF codes just the information needed to reproduce the image at the resolution that best fits your program. In one sense, producing fractal codes from a bitmap is somewhat like extrapolating the inner nature of the image itself. It also allows you to quickly generate the image again and again. The image is not drawn to fit a new size, but it actually has that new size. Previous releases of the FDK allowed only three decompression scales: half, full, and double. With the current release, the image can be scaled by an arbitrary real value using <i>SetOutputResolution</i>. The FDK also contains functions to read the original size of the image (in pixels and before compression) and its physical dimensions. Don't be surprised by the resolution independence. Think of fractal compression the same way you think of a straight line: Once you know its coefficients, you know all of it and you can reproduce it correctly given any interval [x,y]. The advantage of fractals is that you don't have a N&times;M image stretched to N'&times;M', but a completely new N'&times;M' image.</p>

<p>Before decompressing, you should allocate enough memory to hold the DIB. The amount of memory is determined by multiplying the desired width and height by the number of bytes per pixel. The function that actually performs the decompression is <i>DecompressToBuffer</i>, which requires that you pass in the padded width of each scanline (the width is aligned to doublewords). The FDK supports a callback function to monitor the progress of the operation or to abort it. The decompression process returns the actual bits of the DIB and calculates an optimized color table, if required. At this point, all that remains is fusing the bits with the palette, adding a header, and displaying the final DIB.</p>

<h3>The Compression Library</h3>

<p>The library for creating FIFs is comp_32.dll. The steps required to use it are similar to decompression, although the parameters are set differently. Those steps are:</p>

<p></p>

<p>1. Initializing the engine.</p>

<p>2. Reading the input file.</p>

<p>3. Allocating buffer for the FIF.</p>

<p>4. Setting the quality and speed.</p>

<p>5. Invoking the compressor.</p>

<p>The function <i>OpenCompressor</i> initializes an instance of the engine. Keep in mind that fractal compression is ultimately an exhaustive search that, starting from a partition of the image, compares each portion of the image to all the others in order to capture any significant redundancy. For performance reasons, hardware compression, which requires a specialized add-in card, was commonly used in the past to perform most of the searching. Hardware support can be helpful and, based on a previous release of the FDK, reduces the time needed to compress an image by up to one minute per megabyte. However, because of the availability of high-performance processors, the current release of the FDK doesn't support hardware solutions, and compression is software only. Still, the current decompressor can handle all the FIFs created with older compressors (including hardware), although the current compressor is not backward compatible. That is, the FIFs created cannot be decompressed with previous versions of the fractal decoder.</p>

<p>Once you've successfully started the session, you need to fill the input buffer with the actual image data. First, you need to indicate the format in which your data will be represented. You call <i>SetInputFormat(hComp, BLUE8, GREEN8, RED8, NOT_USED, BOTTOM_LEFT)</i> if you want the compressor to receive the bits as they are stored in a Windows DIB. <i>SetImageBuffer</i> must be assigned the input data in the aforementioned format. The engine needs to know the dimensions (in pixels) of the image being compressed and, optionally, its physical size in inches or meters (<i>SetImageResolution</i>). Before launching compression, you should allocate enough memory to hold the resulting fractal codes. The FDK provides the function <i>GetMaxFIFSize</i>, which protects you from having a buffer that is too small! It returns the maximum size of the FIF file depending on the data registered with <i>SetImageResolution</i>. </p>

<p>There are also parameters to control the speed and quality of the compressor. Both are specified with a value of 1 to 100, where 1 means low speed, low quality, and small size; and 100 means high speed, best quality, and large sizes. There is no direct relation between speed and quality: If you vary the compression speed, the quality remains constant and vice versa. On the other hand, both speed and quality affect the file size. The necessary functions are <i>SetCompressionSpeed</i> and <i>CompressToBuffer</i>. The latter is also the routine you need to invoke to actually produce fractal code. It is recommended that you set a callback function to give feedback to the user. The function should have the prototype <i>long_cdecl CompProc(long h, long percDone)</i>, where the first argument is the handle to the compressor instance and the second is an estimate of the job already done. <i>CompressToBuffer</i> requires the pointer to the buffer where the FIF code will be stored, together with a variable to let you know the exact size of the FIF generated. </p>

<h3>Other Issues</h3>

<p>The FTTs (Fractal Transform Templates) are files that can help speed up the compressor. In reality, they are collections of small fragments (usually 32&times;32 pixels) of the images they refer to. There is at most one FTT for each image and multiple images may share the same FTT file. This means that the small pieces of bitmaps may come from different images but they should be related to the same subject. For example, an FTT can be a collection of details of faces such as noses, eyes, or mouths. Fortunately, the FDK supports FTTs only in decompression and only for compatibility purposes. When decompressing old images, a common error code is "FTT needed but not provided"; so, make sure the required FTTs are in the same path as the FIF files.</p>

<p> If users required a color-mapped image, a considerable amount of decompressing time is spent calculating a half-tone palette. You can reduce this time to zero by storing a precalculated palette inside the FIF. The function that lets you do this is <i>SetFIFColorTable</i>. By default, the color format of the FIF file is the same as the color format of the input file, but you can ask the compressor to use a grayscale table for the image (<i>SetFIFFormat</i>).</p>

<h3>The Sample Code</h3>

<p>Available electronically (see "Availability," page 3) are the source and executables for a program called FRACTAL.EXE, which illustrates image compression/decompression using the FDK 1.1. I've compiled this version of the program with MS Visual C++ 4.x. To run or recompile FRACTAL.EXE, you need the FDK 1.x.</p>

<p>You should note that the compressor supports only 24-bit BMP files in input, and the decompressor returns only 8-bit colormapped DIBs. These are limits of the program, not of the FDK or the technology. FRACTAL's compression ratio is low (less than 10:1) because of the speed/quality settings used by the program. The values passed maximize the speed over the file size (85) and require an average quality (65). Finally, the program accepts a BMP true-color image and returns a FIF file with the same name in the same directory. </p>

<h3>Progressive Compression/Decompression</h3>

<p>Both compression and decompression can occur incrementally. Incremental compression can be useful for limiting the amount of memory needed to hold a large 24-bit image, and incremental decompression is especially useful for Internet programming. An incremental variant gives users the possibility of piecemeal processing. Incremental compression requires less memory but a little more time, whereas the decompression occurs little by little as the file comes in. The progressive compression divides the image into rectangles and handles them separately. A final step gathers all the data in a single FIF file.</p>

<p>Progressive decompression uses the data received to prepare either a small and well-defined image or a full-size but blurred image. In the first case, the size will increase step by step; in the second, the image will be progressively focused. The incremental technology doesn't give you a different image from the standard. The APIs are different, but the programming approach is the same.</p>

<h3>The Evolution of the Libraries</h3>

<p>Nowadays only JPEG and FIF ensure high compression ratios. They're based on different algorithms but try to offer the same advantages to end users -- high compression, scalability, resolution independence, and video support. Deciding which of them better fits your needs is up to you, but consider that the potential of fractal compression technology has barely been explored.</p>

<h3>References </h3>

<p>Anson, Louisa. "Fractal Image Compression." <i>BYTE</i>, October 1993.</p>

<p>Barnsley, Michael F. and Alan Sloane. "A Better Way to Compress Images." <i>BYTE</i>, January 1988.</p>

<p>Barnsley, Michael F. and Lyman P. Hurd. <i>Fractal Image Compression</i>. Wellesley, MA: AK Peters, 1993.</p>

<p>McGregor, D.R, R.J. Fryer, P. Cockshott, and P. Murray. "Faster Fractal Compression." <i>Dr. Dobb's Journal</i>, January 1996.</p>

<p><b>DDJ</b></p>


<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
