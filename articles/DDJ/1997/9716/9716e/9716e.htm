<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Sourcebook July/August 1997: In-Memory Tables for Delphi</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>In-Memory Tables for Delphi</h1>

<p><i>Dr. Dobb's Sourcebook</i> July/August 1997
</p>
<h2>Borland Database Engine features for Delphi</h2>

<h3>By Alexandre M. Gimenez</h3>

<I>Alexandre is a graduate student at the Federal University of Sao Carlos, Brazil. He can be contacted at gimenez@dc.ufscar.br.</I>

<hr>

<p>Nearly every Delphi programmer understands that the <i>TGrid</i> component provides a spreadsheet-like interface for users to edit and view information. Using <i>TGrid</i> is straightforward when the information in all of the cells is of a single type. But what happens if you need a grid control where cells in different columns are of different types, and all the cells in any one column are of a single type? This is when <i>TDBGrid</i> comes in handy.</p>

<p><i>TDBGrid</i> is a grid that's associated with a database table, having each column mapped to a field and each row mapped to a record in the table. The cells are edited and displayed according to each column's data type, which is taken from the associated <i>TField</i>. Records can be added and deleted by inserting and removing lines from the grid. The table is changed on the fly as users type into the cells, and you also get automatic validation from the <i>TField</i> objects. This works okay, but what if you don't want to create a table? You may want to let users enter temporary data and, in such cases, it's undesirable to have to create a table and delete files later. Plus, creating a physical table dynamically can be too slow for some applications. What you really need is a memory array. However, automatic validation and typed editing are useful and, if you use an array, you'll have to code those yourself. This line of thought made me turn to In-Memory Tables (IMTs).</p>

<h3>IMTs versus Arrays</h3>

<p>In essence, an IMT is a table that's associated with a region in memory instead of a file. IMTs behave much like ordinary database tables, except they don't have a physical file associated with them. Instead, they have an in-memory image of their record set, which is allocated dynamically. You can think of it as a bidimensional array with a separate type for each column (field), where each record is a line. Unlike Pascal arrays, IMTs are dynamic -- the number of lines (records) is variable, making them more useful than arrays in many instances. With this in mind, all you need to do is associate a <i>TDBGrid</i> with an IMT instead of a standard <i>TTable</i>. Thus, you'll produce a typed grid for entering temporary data, without even having to code validation and editing routines.</p>

<p>There are several situations where IMTs come in handy, including:</p>

<ul>
<li>Entering and storing data in different forms. Sometimes you need to enter data in one field and save it into various other fields, or vice versa. The data could be entered into an IMT first, then transferred to a physical table, enabling you to use standard data-aware controls to enter the data (rather than having to transfer data manually between memory variables and controls).  <li>Creating reports where it's difficult or impossible to map records to the detail band. You can fill an IMT with the data to be listed and use it as the main report table. (Yes, IMTs can be passed to QuickReport.)
  <li>Providing parameters to a query. IMTs are a convenient way of letting the end user enter a list of parameters of the same type to a query. For example, the list of customers to consider in a sales report could be entered in an IMT, so that the user could choose any number of customers.
</ul>

<h3><i>TMemTb</i>: an IMT Component in Delphi</h3>

<p>All of Delphi's database functionality is built on top of the Borland Database Engine (BDE). Surprisingly, Delphi does not provide any type of direct or native support for IMTs, even though the BDE does. The code I present here fills this gap by implementing a component that plays the role of a bridge between Delphi and the BDE functions that access IMTs. Like the standard <i>TTable</i> component, the <i>TMemTb</i> component (see <a name="rf1"><a href="9716ef1.htm">Figure 1</A>, which shows a typical field description for a <i>TMemTb</i> component) is derived from the <i>TDataSet</i> virtual class.</p>

<p><i>TDataSet</i>s have a database handle that is obtained with a call to the <i>CreateHandle</i> virtual function. Thus, I had to replace the original <i>CreateHandle</i> (that opens a table in a database) with a custom version that creates an IMT and returns its handle. This fools the <i>TDataSet</i> object into thinking it's dealing with a real table, when it's actually using the IMT handle. The steps I took to implement the component included:</p>

<p>1.	Finding out what BDE routines manipulate IMTs. I searched Delphi's documentation with no success, until I realized that what I was looking for was in the BDE documentation. The only function I needed was <i>DbiCreateInMemTable</i>.</p>

<p>2.	Finding out how and where the BDE database handles are associated with <i>TDataSet</i> objects. While browsing through Delphi's VCL code, I discovered that the association is made through calls to <i>CreateHandle</i>, <i>OpenCursor</i>, and <i>CloseCursor</i> --  all of which are virtual (thus, overrideable) methods of the <i>TDataSet</i> class.</p>

<p>3.	Providing a way to specify the IMT's structure. I did this by adding a string list data member to <i>TMemTb</i>. Each string in the list has to have the name, type, and size for a field in the IMT. For example, the string "SURNAME:A20" defines an alphabetic field named "SURNAME" that is 20 characters wide. This list is used to fill an array of field descriptions that's passed to <i>DbiCreateInMemTable</i> when the table is opened in the call to <i>CreateHandle</i>. The string list can be edited at design time (a published property). </p>

<p>While these steps may sound straightforward, IMTs are an undocumented feature of Delphi. Consequently, I did run into several problems implementing <i>TMemTb, </i>including:</p>

<ul>
  <li>IMTs cannot have their records deleted. Every time I tried to use the standard <i>Delete</i> method, it would raise an "unsupported capability" exception, so I had to code a replacement to <i>Delete</i> (<i>imDelete</i>). At first, I thought I'd override the <i>TDataSet</i>'s <i>Delete</i> method, but it's not virtual. In Delphi 2, it was easy to set an error handler to call <i>imDelete</i> when <i>Delete</i> failed. In Delphi 1, things are not that simple, and it's necessary to avoid calls to <i>Delete</i>, using <i>imDelete</i> instead.
  <li>IMTs cannot have indexes. This is not really a problem if you consider the temporary nature of IMTs (they lose all their data when closed). Nevertheless, I coded a simple version of <i>FindKey</i> that uses the first table fields as keys to search the IMT.
  <li>IMTs need a database. I created a <i>Tdatabase</i> component dynamically when the first IMT was created, passed its handle to <i>DbiCreateInMemTable,</i> and destroyed it when the last IMT went away.
</ul>

<p><a name="rl1"><a href="9716e.htm#l1">Listing One</A> is the class declaration for <i>TMemTb</i>, and <a name="rl2"><a href="9716e.htm#l2">Listing Two</A> is the code for the custom version of <i>CreateHandle</i>. (The complete source code and a sample In-Memory Table are available electronically; see "Programmer Services," page 3.) Note that the function never calls the original version, which is completely replaced. Using the component is quite simple: After it is installed, just place it on a form, define the field structure (the <i>FieldStruct</i> property appears at the property sheet), and activate it.</p>

<h3>Conclusion</h3>

<p>Despite the limitations in the BDE and Delphi's IMT support, IMT tables can be useful in many circumstances. An enhancement that could be made to the component presented here would be to provide a way for the IMT to be related to other tables, as in a master-detail or a one-to-one relation.</p>

<p><b>DDJ</b></p>


<H4><a name="l1">Listing One</H4>

<pre>TMemTb = class(TDataSet)  private
    FFieldStruc: TStrings;
    prvHand : HDBICur;
    procedure SetTheFields(Value: TStrings);
    function RecordMatch(const A:array of const): boolean;
    procedure Fill_Field_Spec(fld_spec, fld_name:string; var m:flddesc);
  protected
    function CreateHandle: HDBICur; override;
    {$IFDEF VER20}
    procedure ErrorDel(DataSet: TDataSet; E: EDatabaseError;
                  var Action: TDataAction);
    {$ENDIF}
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    function FindKey(const A:array of const): boolean;
    procedure imDelete;
  published
    property FieldStruc: TStrings read FFieldStruc write SetTheFields;
  end;
<p></p>
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2"></H4>

<p>Listing Two</p>

<pre>function TMemTb.CreateHandle: HDBICur;var
 return_value: HDBICur;
 mfield: array [0..(MAX_IMT_FIELDS-1)] of flddesc; { 16 fields max...for now }
 err_cd: DBiResult;  { error code }
 cur_field:integer;
 fld_name, fld_spec:string;
 colon_pos:integer;
 fld_width:integer;
 mlast: integer;
begin
 cur_field:=0;
 mlast:=0; { index to the last field added }
<p></p>
 while cur_field &lt; FFieldStruc.Count do
 begin
    { field definitions assumed to be in the form NAME:TYPE[SIZE] }
    fld_name:= FFieldStruc.Strings[cur_field];
    colon_pos:=pos(':', fld_name);
    if colon_pos&gt;0 then
    begin
       fld_spec:= copy( fld_name, colon_pos+1, length(fld_name)-colon_pos );
       fld_name:=copy(fld_name, 1, colon_pos-1 );
<p></p>
<p></p>
<p></p>
       Fill_Field_Spec( fld_spec, fld_name, mfield[mlast] );
       mfield[mlast].iFldNum  :=mlast+1;        { Field number (1..n) }
       if (length(fld_name)&gt;0) and (mlast&lt;MAX_IMT_FIELDS) then
          inc(mlast);
    end;
    inc(cur_field);
 end;
 if mlast=0 then  { empty field list?
                    I'll create an useless field just to avoid the GPF }
 begin
    Fill_Field_Spec( 'F', 'No_Fields', mfield[mlast] );
    mfield[mlast].iFldNum  :=mlast+1;        { Field number (1..n) }
    inc(mlast);
 end;
 err_cd:=DbiCreateInMemTable (
           tdbobj.Handle,     { Database handle }
           'temptable',       { Logical Name }
           mlast,             { Number_of_fields }
           return_value       { Returned cursor handle }
         );
 if err_cd&lt;&gt;DBIERR_NONE then
 begin
    return_value:=nil;
    DbiError(err_cd);
 end;
 prvHand := return_value; { and they thought they'd hide it from me ;) }
 CreateHandle := return_value;
end;
<p></p>
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>

</body>
</html>
