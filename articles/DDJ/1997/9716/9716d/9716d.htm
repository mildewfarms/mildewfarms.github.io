<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Sourcebook July/August 1997: Portable Custom Time Structures</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Portable Custom Time Structures</h1>

<p><i>Dr. Dobb's Sourcebook</i> July/August 1997
</p>
<h2>Coding for a multiplatform environment</h2>

<h3>By Donald Bryson</h3>

<I>Donald is the president of Quality Software Solutions and the creator of TimeClock. He can be contacted at http:// www.tclock.com/.</I>

<hr>

<p>TimeClock, a commercially available employee attendance system I developed, automatically computes regular hours, overtime, sick time, vacation, and holidays. When I started developing TimeClock, I knew I would be releasing it for MS-DOS, XENIX, UNIX, and AIX. I have since ported to Linux. Consequently, I wanted the code to be as portable as possible. To achieve this, I initially planned on using FairCom's c-tree database engine, curses for screen I/O, and Standard C library functions for time calculations. I assumed all the ANSI time functions would be available on every system -- that's why they call it "ANSI." Unfortunately, I was in for a surprise.</p>

<p>I coded my initial prototype in Borland C++ 2.0, then developed a prototype on a XENIX system. That's when I discovered XENIX libraries did not have a <i>mktime()</i> function. <i>mktime()</i> takes a pointer to a <i>date</i> structure and returns a <i>long</i>, which is the number of seconds since January 1, 1970. The <i>date</i> structure is called <i>tm</i> and the <i>long</i> is <i>time_t</i>. Users enter time in hours and minutes; and dates in years, months, and days. Using these one-dimensional variables, computers simply perform calculations. Clearly, <i>mktime()</i> (or something like it) is the most important function in the software. Thus, it became equally clear that I was going to have to write my own.</p>

<p>I started by examining the "standard" <i>tm</i> structure in each of the operating systems I intended to support. Unfortunately, "standard" is relative. The <i>tm</i> structure generally differs from one environment to another. The first part of the structure is the same in all environments -- from <i>tm_sec</i> to <i>tm_yday</i>. However, beginning with <i>tm_ isdst</i> (a flag indicating daylight saving time), some are different. The older XENIX C library uses any nonzero value to indicate the current time is daylight saving time. Both positive and negative numbers indicate daylight saving time in XENIX. However, in newer C/C++ libraries, only a positive number indicates daylight saving time. A negative number indicates that you do not know if it is daylight saving time. After <i>tm_isdst</i>, even the actual fields are different between environments. Microsoft C++ 1.5 for MS-DOS, for instance, does not have any elements after <i>tm_isdst</i>. Most of the UNIX libraries (with the exception of AIX) have <i>tm_tzadj</i> and <i>tm_name</i> after <i>tm_isdt</i>. The <i>tm_tzadj</i> is the amount of adjustment needed to convert local time to Universal Coordinated Time (abbreviated UTC, due to its French origins), also called Greenwich Mean Time (GMT); and the <i>tm_name</i> is the name of the time zone. The GNU C++ libraries have similar fields, but they are called <i>__tm_ gmtoff__</i> and <i>__tm_zone_</i>_.</p>

<h3>Custom Data Structures: Advantages and Disadvantages</h3>

<p>The upside of having to write your own data structure is that the process gives you the opportunity to make the program more portable. I started by removing nearly all references to the <i>tm</i> structure from my program. (Storing <i>tm</i> or any other structure in the database was straightforward because c-tree allows any type of information to be stored in a fixed-length file.) </p>

<p>For instance, compare the replacement structure, <i>tt</i>, with <i>tm</i> (see <a name="rl1"><a href="9716d.htm#l1">Listings One</A> and <a name="rl2"><a href="9716d.htm#l2">Two</A>). The <i>tm_mon</i> field in <i>tm</i> starts with 0 through 11. This requires converting input from users every time they enter a month. The program must do the reverse when printing or displaying the month. The <i>month</i> field in <i>tt</i> starts with 1 and continues through 12; conversion is not necessary. The same holds true for day-of-the-year fields of the two structures (<i>yearday</i> in <i>tt</i> and <i>tm_yday</i> in <i>tm</i>). Again, conversion is not necessary for inputting, displaying, and printing. The biggest difference is the <i>year</i> field. The <i>tm_year</i> field in <i>tm</i> stores only the last two digits of the year, while <i>year</i> field in <i>tt</i> stores the complete year. (The code executes correctly for the year 2000 and beyond.)</p>

<p>TimeClock does not need the additional time fields included in some of the libraries, so I excluded them and made the structure smaller. It has no need for the name of the time zone or the flag for daylight saving time. I handle daylight saving dynamically in the code and none of my customer installations split time zones. Reduced size is usually a small benefit in disk storage, but it is a big benefit when loading a large array of structures into memory for sorting.</p>

<p>Don't capriciously exclude elements from a structure. You should carefully review your design document before finalizing the format of your structures. Make sure you are not removing essential elements. For example, my first pass at the <i>tt</i> structure did not include the <i>weekday</i> field. When I looked at the employee scheduling module, it depended on the current weekday to lookup the employee's schedule for that day. Schedules are stored in a structure called <i>WeekSchedule</i> (see <a href="9716d.htm#l2">Listing Two</A>) that contains an array of structures called <i>DaySchedule</i>. Each day of the week is one of the seven elements in the array. The program uses the <i>weekday</i> element of the <i>tm</i> structure as a vector into the correct element of the array. While I could dynamically calculate the day of the week, that would unnecessarily consume CPU time. It makes more sense to store the day of the week in the <i>tt </i>data structure. This costs an extra byte per record but it saves CPU cycles every time the program looks at an employee schedule.</p>

<p>Fortunately, adding elements was not a problem during the initial design/code/port phase. However, expanding a structure in a program with an installed user base can be inconvenient -- especially if your application requires a large amount of disk space for its data files. You can run out of disk space during an upgrade that expands the structure, resulting in unhappy customers. Try to include all the elements you currently need and try to anticipate elements you might need in the future.</p>

<h3>Standard C Time Functions and Variables</h3>

<p>The ANSI C function <i>time()</i> (see <a href="9716d.htm#l1">Listing One</A>) retrieves the system time, storing it in a variable of type <i>time_t</i>. This variable, usually a long integer, is the number of seconds from midnight January 1, 1970 to the current time. The magic time -- midnight on January 1, 1970 -- is called the "epoch date." The system adjusts for your time zone into UTC. The information to perform this adjustment is contained in the TZ environment variable. TZ usually includes: <i>daylight</i>, a flag to indicate that daylight saving time is in effect; <i>timezone</i>, the number of seconds to adjust between UTC and local time; and <i>tzname</i>, one or two three-letter abbreviations for your local time zone. Also, you will need to execute <i>_tzset()</i> to make the environment variables available to your program if you use them on an MS-DOS system. (Incidentally, an MS-DOS system will always report the time zone in Redmond, Washington, if TZ is not actually set; see <a name="rl3"><a href="9716d.htm#l3">Listing Three</A> for syntax.)</p>

<p>There are basically two functions that create a <i>tm</i> structure from the <i>time_t</i> variable. The <i>gmtime()</i> function populates a <i>tm</i> structure that represents <i>time_t</i> in GMT. The function, <i>localtime()</i>, populates a <i>tm</i> structure that represents <i>time_t</i> adjusted for the local time zone. Both of these functions use a static buffer to populate the same <i>tm</i> structure. Each call invalidates any previous results from the functions (see <a href="9716d.htm#l1">Listing One</A>). If you need both, copy the global buffer to your own buffers. Calculating time difference is simple, provided both times are converted to UTC. Simply subtract the earlier time from the later time. Always convert to UTC before performing any time difference calculations. Given two local times in different time zones, your results will be off by the time zone adjustment factor unless you convert both of them to UTC. (Also, calculating between two local times that split the daylight saving time boundary will be off by one hour.)</p>

<p>While UTC is needed for calculations, it is not a good idea to store UTC in your database. Users don't care what time it is in Greenwich, they want the current time at their terminal. If you store time in UTC, then your program must convert between local and UTC every time it reads/writes a record to disk. I store the time in a database as local time, but convert to UTC when performing math calculations.</p>

<h3>The New Time Functions</h3>

<p><a href="9716d.htm#l2">Listing Two</A> presents the new time functions. <i>ItIsLeapYear()</i> determines if a given year is a leap year. <i>ItIsLeapYear()</i> is based on the well-known fact that a year is always a leap year if it is divisible by 400. It is also a leap year if it is divisible by 4 and not divisible by 100. Its return value is used as an offset into the <i>daytable</i> array and is also used in the function <i>days_yr().</i></p>

<p>The <i>days_yr()</i> function returns the number of days per year given the year.  If it is a leap year, it returns 366. Otherwise, it returns 365. The <i>tt_Convert()</i> function is one of the two main conversion functions. Its one parameter is a pointer to properly populated <i>tt</i> structure. It returns a <i>time_t</i> that is normalized for the time zone. (However, TimeClock does not normalize in the MS-DOS environment because DOS users normally do not properly set the TZ environment variable.) For illustration purposes, I left the time zone adjustments in the function (see <a href="9716d.htm#l3">Listing Three</A>). First, the function checks the range of each field in the given <i>tt</i> structure. It returns -1 if any of the ranges are invalid. The next thing it does is tally the number of days in each year since 1970. It adds this total to the number of days in each month of the given year. Notice that it makes corrections for a leap year by using an offset into the variable <i>daytable</i>. It then adds the number of days in the given month to the total. After the function determines the number of days since the epoch, it multiplies that number by the number of seconds in a day and stores it in the variable <i>EpochDate</i>. It then multiplies the number of seconds in the given hours and adds that to <i>EpochDate</i>. It then adds the number of seconds in the given minutes to the <i>EpochDate</i>.</p>

<p>Finally, the function makes the correction for daylight saving time and time zone, using the global variables <i>timezone</i> and <i>daylight</i>. If <i>daylight</i> is True, then it subtracts an hour from <i>EpochDate</i>. It adds the <i>timezone</i> value to <i>EpochDate</i>. The other main conversion function, <i>Timet_to_tt</i>, populates a <i>tt</i> structure from a <i>time_t</i> long. It populates a <i>tm</i> structure with <i>localtime()</i>. It then parses out those fields into the fields of <i>tt</i>. Do you see the bug in my program? All the dates after 2070 and before 2170 will be exactly 100 years off. While I could have fixed this, it would require extra steps in the function. This function executes many times in the program and it was not worth the computer resources to add those steps. Also, the <i>mktime()</i> in Microsoft C++ 1.52 is scheduled to break in February 5, 2036. Mine is good for an extra 34 years. Besides, no one will be using this code close to either of those two breaking dates.</p>

<p><b>DDJ</b></p>

<H4><a name="l1">Listing One</H4>

<pre>/* Example of time functions and structures */#include &lt;stdio.h&gt;
#include &lt;time.h&gt;
<p></p>
void main( void )
{
    struct tm *UTCtime;
    struct tm *LocalTime;
    long ltime;
    time( &amp;ltime );
    
    /* _tzset() sets the following global variables that have been
    set in the environment:
    (1) _daylight
    Nonzero value if a daylight-saving-time zone is specified in the TZ 
    setting; otherwise, 0
    (2) _timezone
    Difference in seconds between UTC and local time
    (3) _tzname[0]  
    String value of the three-letter time-zone name from the TZ 
    environmental variable
    (4) _tzname[1]  
    String value of the daylight-saving-time zone, or an empty 
    string if the daylight-saving-time zone is omitted from the 
    TZ environmental variable
    */
    
    _tzset();
    printf("Daylight Savings Flag: %d\n", _daylight);
    printf("Offset in seconds from UTC and local time: %d\n", _timezone);
    printf("Regular Time Zone: %s\n", (char *)_tzname[0]);
    printf("Daylight Savings Time Zone: %s\n", (char *)_tzname[1]); 
    
    /* An example of incorrectly populating two tm structs */
    /* Both gmtime() and locatime() use the same global static buffer */
    /* for conversion.  Calling the two functions and then trying */
    /* to use the two pointers will result in an incorrect answer. */
    /* The buffer contains UTC time after gmtime() is called, but */
    /* it contains local time after locatime() is called. */
    UTCtime = gmtime( &amp;ltime );
    LocalTime = localtime( &amp;ltime );
    /* a \n is not needed in the following printf statement.  It is added to 
    the string by asctime() */
    printf( "Incorrect Universal Coordinated Time: %s", asctime(UTCtime) );
    printf( "Correct Local Time: %s", asctime(LocalTime) );
<p></p>
    /* This is one way of getting the both functions together */
    UTCtime = gmtime( &amp;ltime );
    /* Note: we use the tm we got */
    printf( "Universal Coordinated Time is %s", asctime(UTCtime) );
<p></p>
    /* Now we get the other tm */
    LocalTime = localtime( &amp;ltime );
    printf( "Local Time is %s", asctime(UTCtime) );
    
    /* Note: You can also copy the global buffer to your own buffers with
    with each call.  Use that method if you need to compare different
    tm structures. */
<p></p>
    return;
}
<p></p>
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>/* Example of custom time structures and functions */#include &lt;stdio.h&gt;
#include &lt;time.h&gt;
<p></p>
/* ****************************************************************** */
/* This table is used to determine the number of days in the month 
given the month and the flag for leap year as determined by ItIsLeapYear()*/
static unsigned char daytable[2][13] = {
    {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
    {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};
/* ****************************************************************** */
/* The Custom time structure tt */
typedef struct {
    unsigned int year;     /* year stored as a full year, i.e., 19XX */
    unsigned char month;   /* month - Jan=1, Dec=12*/
    unsigned char day;     /* day 1-31 */
    unsigned char hour;    /* hour 0-59*/
    unsigned char minute;  /* minute 0-59 */
    unsigned weekday;      /* Day of week 0=Sunday, 6=Saturday */
    int yearday;           /* Day of year Jan 1 = 1 */
} tt;
/* The following tm structure is only included for comparison */
#ifdef ONLYFORDISPLAY
struct tm
{
    /* Standard Section of the tm structure */
   int tm_sec;    /* Seconds - [0,59] */
   int tm_min;    /* Minutes - [0,59] */
   int tm_hour;   /* Hours - [0,23] */
   int tm_mday;   /* Day of the month - [1,31] */
   int tm_mon;    /* Months - [0,11] */
   int tm_year;   /* Years since 1900 */
   int tm_wday;   /* Days of week - [0,6] */
   int tm_yday;   /* Days since January 1 - [0,365] */
   int tm_isdst;  /* Daylight savings time flag */
};
#endif
/* ****************************************************************** */
/* Employee Schedule Structures */
typedef struct {
    char In1hr; /* Hour of 1st Clock-in */
    char In1mn; /* Minute of 1st Clock-in */
    char Out1hr; /* Hour of 1st Clock-out */
    char Out1mn; /* Minute of 1st Clock-out */
    char In2hr; /* Hour of 2nd Clock-in */
    char In2mn; /* Minute of 2nd Clock-in */
    char Out2hr; /* Hour of 2nd Clock-out */
    char Out2mn; /* Minute of 2nd Clock-out */
} DaySchedule;
<p></p>
typedef struct {
    char StatusFlag;
    long ScheduleNum;
    char ScheduleName[21];
    DaySchedule WorkDay[7];
} WeekSchedule;
/* ****************************************************************** */
/* Determine if the given year is a leap year */
/* The year parameter must be a full year i.e. 1997 */
int ItIsLeapYear(int year)
{
   if ( ( year % 4 == 0 ) &amp;&amp; ( year % 100 != 0 ) || ( year % 400 == 0) ) 
      return 1;
   else
      return 0;
}
/* ****************************************************************** */
/* Determine the number of days per year */
unsigned int days_yr(int year)
{
    if (ItIsLeapYear(year))
        return 366;
    else
        return 365;
}
/* ****************************************************************** */
/* Convert from the custom time structure, tt, into the standard time_t
variable */
time_t tt_Convert(tt *ttPtr)
{
    int unsigned t_year;
    int month;
    int leap;           /* Flag to indicate if leap year is in effect */
    time_t DaysInPartial;   /* Number of Days in the Partial Year */
    time_t EpochDate;
    struct tm *tmPtr;
    EpochDate = 0L;
    DaysInPartial = 0L;
    month = 0;
<p></p>
    /* Check the validity of the tt parameter */
    leap = ItIsLeapYear(ttPtr-&gt;year);
    if ( ttPtr-&gt;yearday == -1 ) {
        return -1L;
    }
    if ( ttPtr-&gt;month &gt; 12 ) {
        return -1L;
    }
    /* Use leap year in case current year is a leap year */
    if ( ttPtr-&gt;day &gt; daytable[leap][ttPtr-&gt;month] ) {
        return -1L;
    }
    if ( ttPtr-&gt;hour &gt; 24 ) {
        return -1L;
    }
    if ( ttPtr-&gt;minute &gt; 60 ) {
        return -1L;
    }
    /* Set the temporary year to the epoch year */
    t_year = 1970;  
    
    /* Calculate the number of days in each full year since 1970 */
    while ( t_year &lt; ttPtr-&gt;year ) {
        DaysInPartial += (long)days_yr(t_year);
        ++t_year;
    }
    /* Calculate the number of days in each month in current year */
    while ( month &lt; ttPtr-&gt;month ) {
        DaysInPartial += daytable[leap][month];
        month++;
    }
    /* Add the number of full days this month */
    DaysInPartial += (long)(ttPtr-&gt;day - 1);
    
    /* Now we know the number of days since Jan. 1, 1970 */
    /* Convert the number of days to seconds */
    EpochDate = (time_t)((time_t)DaysInPartial * (time_t)( 60L * 60L *24L) );
    /* Convert the hours to seconds and add to total */
    EpochDate += (time_t)((time_t)ttPtr-&gt;hour * 60L * 60L);
    /* Convert the minutes to seconds and add to total */
    EpochDate += (time_t)((time_t)ttPtr-&gt;minute * 60L);
    /* Determine if Daylight Savings Time is in Effect */
    /* And adjust for the time zone and daylight savings time */
    /* Note: I included these lines only in the *NIX versions, but 
    I am leaving it here for demonstration purposes only for MS-DOS
    programmers. */
    
    tmPtr = localtime(&amp;EpochDate);
<p></p>
    if ( tmPtr-&gt;tm_isdst &gt; 0 ) {    
        EpochDate -= ( 60L * 60L ); 
    }
    EpochDate += timezone;
    
    /* Like the standard mktime() normalize the year day and week day. */
    tmPtr = localtime(&amp;EpochDate); 
    ttPtr-&gt;yearday = tmPtr-&gt;tm_yday + 1;
    ttPtr-&gt;weekday = tmPtr-&gt;tm_wday;
<p></p>
    return EpochDate;
}
/* convert from a time_t variable to a tt variable */
tt *Timet_to_tt(time_t tlong, tt *ttPtr)
{
    struct tm *t;
    t = localtime(&amp;tlong);
    /* Code will break in 2070 */
    if ( t-&gt;tm_year &gt; 70 ) {
        ttPtr-&gt;year = t-&gt;tm_year + 1900;
    } else {
        ttPtr-&gt;year = t-&gt;tm_year + 2000;
    }
    ttPtr-&gt;month = t-&gt;tm_mon + 1;
    ttPtr-&gt;day = t-&gt;tm_mday;
    ttPtr-&gt;hour = t-&gt;tm_hour;
    ttPtr-&gt;minute = t-&gt;tm_min;
    ttPtr-&gt;yearday = t-&gt;tm_yday + 1;
    ttPtr-&gt;weekday = t-&gt;tm_wday;
    return ttPtr;
}
void main(void) {
    tt OurNewStruct;
    struct tm *UTCtime;
    struct tm *LocalTime;
    long ltime;
<p></p>
    /* Set the global time zone variables */
    _tzset(); 
<p></p>
    time( &amp;ltime );
    printf("The time_t for the current time: %ld\n", ltime);
    
    /* Obtain Both local time and UTC */
    UTCtime = gmtime( &amp;ltime );
    printf( "Universal Coordinated Time is %s", asctime(UTCtime) );
    
    LocalTime = localtime( &amp;ltime );
    printf( "Local Time is using tm %s", asctime(UTCtime) );
<p></p>
    /* Populate the custom structure tt from time_t */  
    Timet_to_tt(ltime, &amp;OurNewStruct);
    printf("tt converted from current time_t: %d/%d/%d %d:%d\n", 
        OurNewStruct.month, OurNewStruct.day, OurNewStruct.year, 
        OurNewStruct.hour, OurNewStruct.minute);
<p></p>
    /* Convert from tt to time_t */
    ltime = tt_Convert(&amp;OurNewStruct);
    LocalTime = localtime(&amp;ltime);
    printf("The time_t variable calculated tt: %ld\n", ltime);
    printf("Local Time from tm calculated from time_t calculated 
                                         from tt: %s", asctime(LocalTime) ); 
}
<p></p>
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>REM MS-DOS BATCH for playing with Listing 1 and Listing 2rem The syntax to setting the TZ environment variable is
rem set TZ=tzn[+ | -]hh[:mm[:ss] ][dzn]
set TZ=EDT4EST
LISTING1
LISTING2
<p></p>
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
</body>
</html>
