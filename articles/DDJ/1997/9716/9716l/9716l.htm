<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Sourcebook July/August 1997: LiveWire Web-to-Database Solutions, Part 2</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>LiveWire Web-to-Database Solutions, Part 2</h1>

<p><i>Dr. Dobb's Sourcebook</i> July/August 1997
</p>
<h3>By William Robert Stanek</h3>

<I>William is the executive director of Global Internet Solutions and the author of several books, including Web Publishing Unleashed, FrontPage 97 Unleashed, Peter Norton's Guide to Java Programming, and Netscape ONE Developer's Guide. He can be contacted at director@tvpress.com.</I>

<hr>

<p>LiveWire is a powerful tool for building web-to-database solutions. Whether you want to create a query engine or a complete database management system, you can rely on LiveWire to help you get the job done. The key to LiveWire is that you use server-side JavaScript and WYSIWYG development tools to create web-based applications. Although these applications can run in any JavaScript-compliant browser, they depend on a Netscape SuiteSpot-compliant web server to prepare the data. Additionally, your database server must be ODBC compliant.</p>

<p>If you read my previous column, by now you have either joined the LiveWire bandwagon or are still sitting on the sidelines contemplating whether LiveWire is the web-to-database solution you are looking for. Either way, you probably want to see what LiveWire is made of and if you can really create advanced applications with it. Enter the dynamic query engine, which I'll explore in this column.</p>

<h3>Creating the Query Engine</h3>

<p>When your LiveWire application sends commands to a database server, those commands are generally in the form of SQL statements. Traditionally, the SQL command used to query databases is the SELECT statement. Using LiveWire and HTML form elements, you can create a friendly interface (see <a name="rf1"><a href="9716lf1.htm">Figure 1</A>) that builds SELECT statements.</p>

<p>As you examine the figure, note that the interface takes advantage of the general syntax for SELECT statements, which is <i>SELECT column(s) FROM table WHERE conditions_exist</i>. <a name="rl1"><a href="9716l.htm#l1">Listing One</A> is the source code for the main page of the query engine. As you examine this listing, note the three input fields that let users build the SELECT statement. When you submit the HTML form containing these fields, a request object property that corresponds to each named field in the form is created; your browser then loads the page called "rorig.htm."</p>

<p>Building the database query, passing the query to the server, and formatting the returned data are all handled in the search results page (rorig.htm). The first step is to check the database connection and redirect the browser to a connection page if there is a problem (see <a name="re1"><a href="9716le1.htm">Example 1</A>).</p>

<p>After connecting to the database and verifying the connection, you can build the query. Because you generally want the query to be persistent over multiple requests, you create the query using a property of the client object.</p>

<p>The final step is to format the data. Ideally, you want to ensure that the data retrieved from the server is presented in a sensible way. The easiest way to do this is to use the <i>database.SQLTable()</i> method, which automatically formats the data retrieval into an HTML table; see <a name="re2"><a href="9716le2.htm">Example 2</A>. <a name="rl2"><a href="9716l.htm#l2">Listing Two</A> shows how Examples 1 and 2 come together in the finished page. Note that the project object is locked before you try to connect to the database. Locking the project object ensures that other clients cannot read or set project properties until you have finished connecting to the database and made the query.</p>

<h3>Moving to Dynamic Queries</h3>

<p>Although the query engine just presented works, it is neither dynamic nor intelligent. Let's say you are designing your query engine for a customer service department where users always work with two tables, called "customer" and "employee," in a particular database. The customer table is used to track information pertaining to customer accounts. The employee table is used to track customer-service representatives assigned to customer accounts, as well as other employees throughout the organization. Wouldn't it be great if you could customize the query engine for these tables? Well, you can. To do this, you will need to create scripts that can update the query page on the fly.</p>

<p>Before getting started, you need to sit down with the customer service folks to see how they currently use the company database. For this scenario, let's say the user generally performs two types of queries: limited searches that deal with only a few columns in the customer/employee table, or expanded searches that deal with all the columns in the customer/employee table. You note this as a design feature you want to implement in the query engine.</p>

<p>Now you are ready to design the interface for the query engine. Start by examining the database and obtaining a list of all the columns in the customer and employee tables. To ensure that the column names for these tables are dynamically accessible, you can put the column names into arrays as shown in <a name="re3"><a href="9716le3.htm">Example 3</A>.</p>

<p>Because end users are dealing with specific tables and columns, you can make it easier for them to choose specific columns using selection menus. To ensure that you can dynamically update a selection menu, you must label the menu with a unique name. As shown in <a name="re4"><a href="9716le4.htm">Example 4</A>, you can then populate the menu with a default set of column names. Since you know that you need to switch between limited and expanded searches in either the customer table or the employee table, you must design the interface to handle these tasks. As <a name="re5"><a href="9716le5.htm">Example 5</A> shows, one way to toggle between search modes and tables is with radio buttons.</p>

<p>When the user changes the radio button for table selection, the <i>searchCrit()</i> function is called. The job of this function is to dynamically populate the selection menu. When you examine <a name="re6"><a href="9716le6.htm">Example 6</A>, you will see that the selection menu is accessed using the name assigned in the NAME attribute. If the user selects the customer table, the selection menu is populated with the elements from the <i>tableOne</i> array. Otherwise, the <i>tableTwo</i> array is used.</p>

<p>When the user changes the radio button for the search mode, the <i>searchSize()</i> function is called. This function uses the value assigned to the radio button to dynamically resize the selection menu. As you check <a name="re7"><a href="9716le7.htm">Example 7</A>, note that a reference to the radio button object is passed to the function.</p>

<p>Take a look at <a name="rl3"><a href="9716l.htm#l3">Listing Three</A> to see how the dynamic query engine comes together. Although this is not the finished product, you can get a good idea of the basic structure of the search engine in an actual web page.</p>

<h3>Making the Query Engine More Useful</h3>

<p>In the real world, database retrievals are much more advanced than those allowed for in the example query engine. Often, users want to retrieve multiple columns from a table based on several different search criteria. Fortunately, once you have the basic structure for the query engine, updating it to meet the needs of your users is fairly easy.</p>

<p>Let's say that your analysis reveals the end-user's search generally looks like this:</p>

<ul>
  <li>User typically selects no more than five columns, but sometimes wants to return all columns.
  <li>User typically matches against no more than two different search criteria.
  <li>Searches are AND/OR with parameters of &gt;, &lt;, =, or !=.
</ul>

<p><a name="rf2"><a href="9716lf2.htm">Figure 2</A> shows how the interface for the query engine can be updated to accommodate these requirements. The key is to ensure that the column choices and the search criteria selection menus can be updated on the fly.</p>

<p>Fortunately, implementing and repopulating multiple selection menus can be handled in almost the same way you would implement and repopulate a single selection menu. <a name="re8"><a href="9716le8.htm">Example 8</A> shows a straightforward method of repopulating multiple selection menus based on user choices.</p>

<p>Similarly, you can dynamically resize multiple selection menus in much the same way you would dynamically resize a single selection menu. <a name="re9"><a href="9716le9.htm">Example 9</A> shows one way to resize multiple selection menus.</p>

<p><a name="rl4"><a href="9716l.htm#l4">Listing Four</A> is the completed query engine. As you examine the source code, note that this updated search engine allows users to perform fairly complex database retrievals with an easy-to-use interface. Using the updated search engine, the structure of a query is transformed from the limited retrieval of <i>SELECT column_name FROM table WHERE condition</i> to a more powerful structure that reads:</p>

<p>SELECT column_name1[, 	column_name2, 	... column_name5,] </p>

<p>FROM table WHERE conditionA 	[and/or conditionB] </p>

<p>[plus_additional_criteria]</p>

<h3>Retrieving the Dynamic Query</h3>

<p>After creating a dynamic search engine, you need a way to retrieve and display the queries. However, before you can retrieve anything from the database, you need to build the query. The first step is to build a list of the columns that the user can see and select from in the search results. <a name="re10"><a href="9716le10.htm">Example 10</A> shows how this could be done. Note that <i>if</i> statements are used instead of<i> else/if</i> statements, just in case the user chooses an additional column but doesn't do so using the order you would normally expect.</p>

<p>Next, you need to determine the search criteria chosen by the user. <a name="re11"><a href="9716le11.htm">Example 11</A> checks to see if the user selected a column name in the second search criteria menu, then adds the additional search criteria if necessary. The code also determines the table the user selected and whether there is miscellaneous search criteria entered into the last input field.</p>

<p>The final step is to put the query together and pass it to the server. When the server responds, you format the retrieval. <a name="rl5"><a href="9716l.htm#l5">Listing Five</A> is the complete source for the query and result page.</p>

<h3>Conclusion</h3>

<p>With LiveWire, you can leverage the power of JavaScript and HTML to develop advanced applications with a minimum amount of fuss. The ease with which you can create applications in LiveWire can shave months off the development of any project, and the query engine developed in this column certainly gives you something to think about.</p>

<p><b>DDJ</b></p>

<H4><a name="l1">Listing One</H4>

<pre>&lt;HTML&gt;&lt;HEAD&gt;
&lt;TITLE&gt;The Help Center: Database Query&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR="#FFFFFF"&gt;
&lt;SERVER&gt;
if(client.query == null)
   client.query = "";
&lt;/SERVER&gt;
<p></p>
&lt;FORM METHOD="post" ACTION="rorig.htm"&gt;
&lt;H1 ALIGN=CENTER&gt;The Help Center: Database Query&lt;/H1&gt;
&lt;HR SIZE=5 WIDTH=75%&gt;
&lt;P&gt;&lt;B&gt;Example:&lt;/B&gt;
&lt;P&gt;SELECT * FROM employee WHERE emp_dep=Service
&lt;P&gt;
SELECT
&lt;BR&gt;
&lt;INPUT type=text NAME="findWhat" SIZE=50 VALUE="*"&gt;
&lt;BR&gt;
FROM
&lt;BR&gt;
&lt;INPUT type=text NAME="findFrom" SIZE=50&gt;
&lt;BR&gt;
WHERE
&lt;BR&gt;
&lt;INPUT type=text NAME="findWhere" SIZE=50&gt;
<p></p>
&lt;P&gt;
&lt;INPUT TYPE="submit" VALUE="Enter Query"&gt;
&lt;/FORM&gt;
<p></p>
&lt;/BODY&gt;
&lt;/HTML&gt;
<p></p>
<p></p>
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>&lt;HTML&gt;&lt;HEAD&gt;
&lt;TITLE&gt;The Help Center: Search Results &lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR="#FFFFFF"&gt;
<p></p>
&lt;SERVER&gt;
<p></p>
project.lock();
database.connect(client.dbtype, 
                 client.server, 
                 client.id, 
                 client.password, 
                 client.database);
if(!database.connected()) redirect("connect.html");
<p></p>
client.query = "SELECT " + request.findWhat + 
               " FROM " + request.findFrom + 
               " WHERE " + request.findWhere
write(client.query);
database.SQLTable(client.query);
project.unlock();
&lt;/SERVER&gt;
<p></p>
&lt;/BODY&gt;
&lt;/HTML&gt;
<p></p>
<p></p>
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>&lt;HTML&gt;&lt;HEAD&gt;
&lt;TITLE&gt;The Selection Engine&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="JavaScript1.1"&gt;
var datasetOne = "*,cust_name,cust_phone,cust_city,cust_state,cust_account,
cust_company,cust_fax,cust_email,cust_weburl"
<p></p>
var datasetTwo = "*,emp_name,emp_wphone,emp_city,emp_dep,emp_hphone,
emp_supervisor,emp_pager,emp_ssn,emp_alt"
<p></p>
tableOne = datasetOne.split(",")
tableTwo = datasetTwo.split(",")
<p></p>
function searchCrit(which) {
   var dataObj = document.forms[0].table
   var dataLen = dataObj.length
   for (var i = 0; i &lt; dataLen; i++) {
      if (which == "customer") {
         dataObj.options[i].text = tableOne[i]
      } else {
         dataObj.options[i].text = tableTwo[i]
      }
   }
   history.go(0)
}
function searchSize(choice) {
   var dataObj = document.forms[0].table
   var whichDB = (document.forms[0].detTable[0].checked)?"customer":"employee"
   dataObj.length = 0
   for (var i = 0; i &lt; choice.value; i++) {
      if (whichDB == "customer") {
         dataObj.options[i] = new Option(tableOne[i])
      } else {
         dataObj.options[i] = new Option(tableTwo[i])
      }
   }
   dataObj.options[0].selected = true
   history.go(0)
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
<p></p>
&lt;BODY&gt;
&lt;H1&gt;The Help Center: Query Database&lt;/H1&gt;
&lt;FORM&gt;
<p></p>
Select a table:
&lt;INPUT TYPE="radio" NAME="detTable" VALUE="customer" 
onClick="searchCrit('customer')" CHECKED&gt;Customer Accounts
<p></p>
&lt;INPUT TYPE="radio" NAME="detTable" VALUE="employee" 
onClick="searchCrit('employee')"&gt;Customer Service Reps
<p></p>
&lt;P&gt;
Search style:
&lt;INPUT TYPE="radio" NAME="choiceCount" VALUE="6" 
onClick="searchSize(this)" CHECKED&gt;Limited
<p></p>
&lt;INPUT TYPE="radio" NAME="choiceCount" VALUE="10" 
onClick="searchSize(this)"&gt;Expanded
&lt;P&gt;
Select a database column:
<p></p>
&lt;SELECT NAME="table"&gt;
   &lt;OPTION SELECTED&gt;cust_name
   &lt;OPTION&gt;cust_phone
   &lt;OPTION&gt;cust_city
   &lt;OPTION&gt;cust_state
   &lt;OPTION&gt;cust_account
&lt;/SELECT&gt;
&lt;/FORM&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
<p></p>
<p></p>
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>&lt;HTML&gt;&lt;HEAD&gt;
&lt;TITLE&gt;The Help Center: Database Query&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="JavaScript1.1"&gt;
<p></p>
var datasetOne = "*,cust_name,cust_phone,cust_city,cust_state,cust_account,
cust_company,cust_fax,cust_email,cust_weburl"
<p></p>
var datasetTwo = "*,emp_name,emp_wphone,emp_city,emp_dep,emp_hphone,
emp_supervisor,emp_pager,emp_ssn,emp_alt"
<p></p>
tableOne = datasetOne.split(",")
tableTwo = datasetTwo.split(",")
<p></p>
function searchCrit(which) {
   var dataObj = document.forms[0].tableCol
   var dataObj2 = document.forms[0].tableCol2
   var dataObj3 = document.forms[0].tableCol3
   var dataObj4 = document.forms[0].tableCol4
   var dataObj5 = document.forms[0].tableCol5
   var dataObj6 = document.forms[0].tableCol6
   var dataObj7 = document.forms[0].tableCol7
   var dataLen = dataObj.length
   for (var i = 0; i &lt; dataLen; i++) {
      if (which == "customer") {
         dataObj.options[i].text = tableOne[i]
         dataObj2.options[i].text = tableOne[i]
         dataObj3.options[i].text = tableOne[i]
         dataObj4.options[i].text = tableOne[i]
         dataObj5.options[i].text = tableOne[i]
         dataObj6.options[i].text = tableOne[i]
         dataObj7.options[i].text = tableOne[i]
      } else {
         dataObj.options[i].text = tableTwo[i]
         dataObj2.options[i].text = tableTwo[i]
         dataObj3.options[i].text = tableTwo[i]
         dataObj4.options[i].text = tableTwo[i]
         dataObj5.options[i].text = tableTwo[i]
         dataObj6.options[i].text = tableTwo[i]
         dataObj7.options[i].text = tableTwo[i]
      }
   }
   history.go(0)
}
function searchSize(choice) {
   var dataObj = document.forms[0].tableCol
   var dataObj2 = document.forms[0].tableCol2
   var dataObj3 = document.forms[0].tableCol3
   var dataObj4 = document.forms[0].tableCol4
   var dataObj5 = document.forms[0].tableCol5
   var dataObj6 = document.forms[0].tableCol6
   var dataObj7 = document.forms[0].tableCol7
   var whichDB = (document.forms[0].detTable[0].checked)?"customer":"employee"
   dataObj.length = 0
   dataObj2.length = 0
   dataObj3.length = 0
   dataObj4.length = 0
   dataObj5.length = 0
   dataObj6.length = 0
   dataObj7.length = 0
   for (var i = 0; i &lt; choice.value; i++) {
      if (whichDB == "customer") {
         dataObj.options[i] = new Option(tableOne[i])
         dataObj2.options[i] = new Option(tableOne[i])
         dataObj3.options[i] = new Option(tableOne[i])
         dataObj4.options[i] = new Option(tableOne[i])
         dataObj5.options[i] = new Option(tableOne[i])
         dataObj6.options[i] = new Option(tableOne[i])
         dataObj7.options[i] = new Option(tableOne[i])
      } else {
         dataObj.options[i] = new Option(tableTwo[i])
         dataObj2.options[i] = new Option(tableTwo[i])
         dataObj3.options[i] = new Option(tableTwo[i])
         dataObj4.options[i] = new Option(tableTwo[i])
         dataObj5.options[i] = new Option(tableTwo[i])
         dataObj6.options[i] = new Option(tableTwo[i])
         dataObj7.options[i] = new Option(tableTwo[i])
      }
   }
   dataObj.options[0].selected = true
   dataObj2.options[0].selected = true
   dataObj3.options[0].selected = true
   dataObj4.options[0].selected = true
   dataObj5.options[0].selected = true
   dataObj6.options[0].selected = true
   dataObj7.options[0].selected = true
   history.go(0)
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR="#FFFFFF"&gt;
<p></p>
&lt;SERVER&gt;
if(client.query == null)
   client.query = "";
&lt;/SERVER&gt;
<p></p>
&lt;H1&gt;The Help Center: Query Database&lt;/H1&gt;
&lt;FORM METHOD="post" ACTION="response.htm"&gt;
&lt;B&gt;
Select a table:
&lt;INPUT TYPE="radio" NAME="detTable" VALUE="customer" 
onClick="searchCrit('customer')" CHECKED&gt;Customer Accounts
<p></p>
&lt;INPUT TYPE="radio" NAME="detTable" VALUE="employee" 
onClick="searchCrit('employee')"&gt;Customer Service Reps
<p></p>
&lt;P&gt;
Search style:
&lt;INPUT TYPE="radio" NAME="choiceCount" VALUE="6" 
onClick="searchSize(this)" CHECKED&gt;Limited
<p></p>
&lt;INPUT TYPE="radio" NAME="choiceCount" VALUE="10" 
onClick="searchSize(this)"&gt;Expanded
&lt;P&gt;
Select database columns to return:
&lt;P&gt;
&lt;SELECT NAME="tableCol"&gt;
   &lt;OPTION SELECTED&gt;*
   &lt;OPTION&gt;cust_name
   &lt;OPTION&gt;cust_phone
   &lt;OPTION&gt;cust_city
   &lt;OPTION&gt;cust_state
   &lt;OPTION&gt;cust_account
&lt;/SELECT&gt; , 
&lt;SELECT NAME="tableCol2"&gt;
   &lt;OPTION SELECTED&gt;*
   &lt;OPTION&gt;cust_name
   &lt;OPTION&gt;cust_phone
   &lt;OPTION&gt;cust_city
   &lt;OPTION&gt;cust_state
   &lt;OPTION&gt;cust_account
&lt;/SELECT&gt; , 
&lt;SELECT NAME="tableCol3"&gt;
   &lt;OPTION SELECTED&gt;*
   &lt;OPTION&gt;cust_name
   &lt;OPTION&gt;cust_phone
   &lt;OPTION&gt;cust_city
   &lt;OPTION&gt;cust_state
   &lt;OPTION&gt;cust_account
&lt;/SELECT&gt; , 
&lt;BR&gt;
&lt;SELECT NAME="tableCol4"&gt;
   &lt;OPTION SELECTED&gt;*
   &lt;OPTION&gt;cust_name
   &lt;OPTION&gt;cust_phone
   &lt;OPTION&gt;cust_city
   &lt;OPTION&gt;cust_state
   &lt;OPTION&gt;cust_account
&lt;/SELECT&gt; , 
&lt;SELECT NAME="tableCol5"&gt;
   &lt;OPTION SELECTED&gt;*
   &lt;OPTION&gt;cust_name
   &lt;OPTION&gt;cust_phone
   &lt;OPTION&gt;cust_city
   &lt;OPTION&gt;cust_state
   &lt;OPTION&gt;cust_account
&lt;/SELECT&gt;
&lt;P&gt;
Enter Search Criteria:
&lt;P&gt;
&lt;SELECT NAME="tableCol6"&gt;
   &lt;OPTION SELECTED&gt;*
   &lt;OPTION&gt;cust_name
   &lt;OPTION&gt;cust_phone
   &lt;OPTION&gt;cust_city
   &lt;OPTION&gt;cust_state
   &lt;OPTION&gt;cust_account
&lt;/SELECT&gt;
<p></p>
&lt;SELECT NAME="equality1"&gt;
   &lt;OPTION SELECTED&gt;=
   &lt;OPTION&gt;!=
   &lt;OPTION&gt;&gt;
   &lt;OPTION&gt;&lt;
&lt;/SELECT&gt;
<p></p>
&lt;INPUT type=text NAME="entry1" SIZE=50&gt;
<p></p>
&lt;P&gt;
&lt;SELECT NAME="andOr"&gt;
   &lt;OPTION SELECTED&gt;AND
   &lt;OPTION&gt;OR
&lt;/SELECT&gt;
&lt;P&gt;
&lt;SELECT NAME="tableCol7"&gt;
   &lt;OPTION SELECTED&gt;*
   &lt;OPTION&gt;cust_name
   &lt;OPTION&gt;cust_phone
   &lt;OPTION&gt;cust_city
   &lt;OPTION&gt;cust_state
   &lt;OPTION&gt;cust_account
&lt;/SELECT&gt;
<p></p>
&lt;SELECT NAME="equality2"&gt;
   &lt;OPTION SELECTED&gt;=
   &lt;OPTION&gt;!=
   &lt;OPTION&gt;&gt;
   &lt;OPTION&gt;&lt;
&lt;/SELECT&gt;
&lt;INPUT type=text NAME="entry2" SIZE=50&gt;
<p></p>
&lt;P&gt;
Enter additional criteria:
&lt;INPUT type=text NAME="entry3" SIZE=50&gt;
<p></p>
&lt;P&gt;
&lt;INPUT TYPE="submit" VALUE="Enter Query"&gt;
&lt;/FORM&gt;
<p></p>
&lt;/BODY&gt;
&lt;/HTML&gt;
<p></p>
<p></p>
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<H4><a name="l5">Listing Five</H4>

<pre>&lt;HTML&gt;&lt;HEAD&gt;
&lt;TITLE&gt;The Help Center: Search Results &lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR="#FFFFFF"&gt;
<p></p>
&lt;SERVER&gt;
<p></p>
project.lock();
database.connect(client.dbtype, 
                 client.server, 
                 client.id, 
                 client.password, 
                 client.database);
if(!database.connected()) redirect("connect.html");
var tableColumns = request.tableCol 
if (request.tableCol2 != "*") tableColumns += ", " + request.tableCol2
if (request.tableCol3 != "*") tableColumns += ", " + request.tableCol3
if (request.tableCol4 != "*") tableColumns += ", " + request.tableCol4
if (request.tableCol5 != "*") tableColumns += ", " + request.tableCol5
<p></p>
var searchCrit = request.tableCol6 + request.equality1 + request.entry1
if (request.tableCol7 != "*") searchCrit += " " + 
          request.andOr + " " + request.tableCol7 + 
          request.equality2 + request.entry2
<p></p>
var whichTable = request.detTable
if (request.entry3 != "") searchCrit += " " + request.entry3
client.query = "SELECT " + tableColumns + " FROM " + 
               whichTable + " WHERE " + searchCrit
write(client.query);
database.SQLTable(client.query);
project.unlock();
&lt;/SERVER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>


</body>
</html>
