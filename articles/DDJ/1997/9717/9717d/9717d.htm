<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Sourcebook September/October 1997: ODBMS Solutions</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>ODBMS Solutions</h1>

<p><i>Dr. Dobb's Sourcebook</i> September/October 1997
</p>
<h2>Cache management by reference counting</h2>

<h3>By Chris Aakre </h3>

<I>Chris works for Primus Communications in Seattle, Washington, and can be contacted at chrisa@primus.com.</I>

<hr>

<p>One of the benefits of using an object-oriented database system is the seamless marriage of the database and programming language. With Versant Object Technology's Versant Object Database Management System (ODBMS), you can think of the objects in your database simply as C++ objects that are persistent. To use a persistent object, you dereference a Versant link -- the Versant database equivalent of a C++ pointer. You use a link the way you would a pointer. When the link in <a name="re1"><a href="9717de1.htm">Example 1</A> is dereferenced, for instance, it uses the object's unique permanent identifier to retrieve the object from the database. The object is placed in the address space of the database client as a C++ object. If the object is already in the client's cache, dereferencing the link simply returns a C++ pointer to the cached object.</p>

<p>Seems simple, right? So where's the catch? Using persistent objects introduces at least three additional issues -- locking, pinning, and refreshing.</p>

<p>Locks are placed on objects to manage concurrent reading and updating by multiple users. When a Versant object is brought into cache, it's pinned, meaning the object will physically remain in the cache until the pin is released. Finally, if an object is read without a lock, the object may be updated in the database by another user. This causes the version of the object in our cache to grow "stale," and makes it necessary to periodically refresh the object. If the link is simply treated as a smart C++ pointer, these issues are merely hidden.</p>

<p>The Versant ODBMS engine is at the heart of Primus' SolutionBuilder, an application designed to help customer-support analysts capture information and find solutions to customer problems. SolutionBuilder requires extensive use of "dirty reads" (reads with no locks) in the searches and for extensive locking and updating of objects on large databases. For SolutionBuilder to succeed, it was imperative to explicitly control the locking, pinning, and refreshing of objects in the database. From this need arose a solution that addressed these four questions:</p>

<ul>
  <li>How can the state of the object's lock be controlled?
  <li>How can a consistent view of an object (before the object is dirtied) be guaranteed?
  <li>How can the point at which the client is no longer interested in an object be determined?
  <li>How can the size of the cache be managed?
</ul>

<p>These problems were solved by wrapping the Versant <i>Link</i> class. This isolated the necessary logic for locking, pinning, and refreshing in a single location. In addition, our link class was integrated with a reference counting facility. This integration is key to SolutionBuilder, but before discussing how reference counting addressed each of these questions, let's first discuss the reference counting model.</p>

<h3>Reference Counting</h3>

<p>A reference counting mechanism was already in place for transient objects. Reference counting provides a clean way of returning objects from function calls. It doesn't incur the expense of returning objects by value. It also avoids the sticky ownership issues that arise from passing C++ pointers, including memory leaks and double deletions.</p>

<p><a name="rl1"><a href="9717d.htm#l1">Listing One</A> is a simple implementation of reference counting to determine when a transient object is no longer needed and, therefore, can be deleted. </p>

<p><a name="rl2"><a href="9717d.htm#l2">Listing Two</A> is an example of how the references are applied. The <i>Solution</i> object is allocated on the heap and passed into a reference that is allocated on the stack. When a reference is constructed, it is added to a set of references held by the referent object in class <i>Refable</i>. Since the reference is allocated on the stack, the reference will automatically be destroyed when it goes out of scope. When a reference is destroyed, it is removed from the set. When the last reference is removed from the set, a virtual function on the referent, called <i>SignalZeroRefs,</i> is invoked, which deletes the object.</p>

<p>This simple idea can be extended to persistent objects as well. However, instead of creating and deleting the object, we pin and unpin the object. The base class for all persistent objects (<i>Object</i>) inherits from the Versant base class <i>PObject</i> (as well as <i>Refable</i>), and overrides <i>SignalZeroRefs</i> to unpin the object instead of deleting it (see <a name="rl3"><a href="9717d.htm#l3">Listings Three</A> and <a name="rl4"><a href="9717d.htm#l4">Four</A>). A class called <i>RLink</i> was created: It wraps the Versant class <i>Link</i>. Additionally, a function called <i>MakeRef</i> was added to <i>RLink</i> to perform the dereference of the link. To dereference a persistent object, you call <i>MakeRef</i> to get a reference, then use the dereference operator to get a C++ reference. The object is brought into cache by calling <i>refreshobj</i> in <i>MakeRef</i>. This also has the effect of locking and pinning the object. As long as at least one reference exists on the object, the object remains pinned and is safe to dereference. When the last reference is destroyed, the object is unpinned. Unpinning the object makes it available to be released from cache if necessary. </p>

<p>The key to this solution is integrating our link class with references. References allow objects to be dereferenced repeatedly, without having to worry about locking, pinning, or refreshing. Reference counting also automatically handles downgrading the lock and unpinning the object.</p>

<h3>Managing Locks</h3>

<p>The first time you dereference a link to an object, the object is retrieved with the default lock. Since the default lock is a global value that can be set at any time by calling <i>set_default_lock()</i>, dereferencing the link can have the unexpected side effect of locking the object with whatever the current default lock happens to be. Our application usually needs to perform a dirty read. Thus, it was critical to explicitly specify the lock mode when retrieving the object to avoid inadvertently locking the object.</p>

<p>All object activation occurs in <i>RLink::MakeRef()</i>. A function was used, instead of an operator, so that it's clear in the code where the object is being retrieved. Also, there is no default for the lock mode parameter because it's important for the caller to explicitly decide what type of lock is called for. Once there is a reference, you can safely dereference the reference without accidentally placing a lock on the object.</p>

<h3>Refreshing the Object</h3>

<p>To change the state of a persistent object, you mark it as "dirty," telling Versant that you've made a change to an object that needs to be committed at the end of the transaction. Before you dirty an object, it's necessary to make sure you have the latest version of the object (so you don't accidentally overwrite someone else's changes). Versant doesn't automatically refresh the object when you place a lock on the object or when you dirty the object. Instead, these are two distinct and separate concepts, which provides more flexibility in designing your own locking and transaction model.</p>

<p>Fortunately, our link and reference wrappers provide the perfect opportunity to ensure that we always have the latest version of the object when the object is locked. When an object already in cache is upgraded from a NOLOCK to a <i>read</i> or <i>write</i> lock, <i>refreshobj</i> is called with the requested lock mode. This atomically locks the object and refreshes the cached object.</p>

<p>To guard against dirtying the object without refreshing, we made the Versant <i>PObject::dirty()</i> function private in class <i>Object</i>, and added a function called <i>Dirty()</i> that throws an exception if a lock has not been placed on the object before calling <i>Dirty()</i>. As an added bonus, the <i>Dirty()</i> function allows us to trap all calls to <i>Dirty()</i> for a variety of useful purposes, including logging and detecting unexpected calls to <i>Dirty()</i>.</p>

<h3>Client Reference Counting</h3>

<p>Sometimes an application needs to hold a lock on an object for a long period of time, spanning multiple transactions. For example, any user can edit a solution, but only one user can edit an individual solution at a time. We enforce this with a <i>write</i> lock on the persistent object <i>PSolution</i>. But how can you tell when the user is done editing the solution, so that the lock can be dropped and another user can edit the solution? We decided to extend our reference counting to the client. <a name="rf1"><a href="9717df1.htm">Figure 1</A> shows how references on the client pin and lock the persistent solution object so two users can't edit the solution at the same time.</p>

<p>We acquire a <i>write</i> lock on <i>PSolution</i> and hold it with a reference. The reference is stored as a data member of the transient class <i>Solution</i>. Next, the solution reference is sent from the application server to the client. Our application uses C++ stored procedures (called actions) to transmit data between the client and server. An action can marshal various basic types including integers, strings, and network references. A network reference (class <i>NetRef</i>) is a special type of reference that can be returned to the client.</p>

<p>In <a href="9717df1.htm">Figure 1</A>, a network reference is created and the reference to the <i>Solution</i> object is stored in the <i>NetRef</i>. The network reference is placed in an action. When the action is returned to the client, all of the attributes of the action are marshaled to a copy of the action on the client. When the network reference is marshaled, it is placed in a global set of network references on the server. This keeps the reference count for the network reference greater than zero, so that the <i>Solution</i> object isn't deleted and the <i>PSolution</i> object remains pinned and locked.</p>

<p>The network reference treats the address of the referent as a unique ID that can be reference counted on the client just like on the server. However, since the network reference doesn't hold a C++ pointer to an object on the client, it can't be dereferenced. The client can cache a network reference. For example, you might store it as a data member of a <i>ClientSolution</i> object that maps one-to-one with a <i>Solution</i> object on the application server. When users are done editing the solution, the network reference is cleared from the <i>ClientSolution</i> object. This causes the reference count on the client to go to zero. The client notifies the server that the network reference is no longer held. The network reference is removed from the global set on the server, which causes a cascade of reference decrementing. The reference counts on the <i>Solution</i> and <i>PSolution</i> objects go to zero, which causes the <i>Solution</i> object to be deleted and the persistent <i>PSolution</i> object to be unpinned and unlocked. At this point, another user is free to edit the solution by acquiring a <i>write</i> lock on the <i>PSolution</i> object.</p>

<h3>Managing Cache Growth</h3>

<p>Information retrieval is a key component of our application. To speed searching, commonly accessed objects must be cached in the database client's address space. This means it is too costly to flush all of the objects out of the cache at the end of the transaction. (However, if we never released any objects, the cache would grow too large, consuming lots of memory.)</p>

<p>Versant provides support for managing the growth of the client cache. A "swap threshold" indicates how large the client cache can grow before unpinned objects are released to make room for the retrieval of additional objects. Only objects that are unpinned can be released. Since objects are unpinned when the reference count reaches zero, the objects are automatically cleaned up, allowing Versant to properly manage the cache size.</p>

<h3>Moving Objects</h3>

<p>As shown in <a href="9717d.htm#l1">Listing One</A>, our first implementation used the same reference counting mechanism for both persistent and transient objects. The reference class <i>Ref</i> holds a pointer to the persistent C++ object. This should be safe since the object is guaranteed to be pinned while at least one reference is held on the object. Since a pinned object is guaranteed to physically remain in cache, the pointer should be safe to dereference.</p>

<p>Unfortunately, there's a hole in this logic. It's possible for the object to move if the lock is upgraded from a NOLOCK to a <i>read</i> or <i>write</i> lock, thus invalidating the C++ pointer held in any references previously acquired with no lock. <a name="rl5"><a href="9717d.htm#l5">Listing Five</A> gives an example to help illustrate the problem. <i>Ref1</i> is acquired with a NOLOCK. <i>Ref2</i> is acquired with a WLOCK. Since someone else may have changed the object, the object must be retrieved from the database again, using <i>refreshobj</i>. If the object has grown and there's insufficient contiguous memory to hold the object at the current address, Versant must move the object. <i>Ref1</i> now holds a dangling pointer to invalid memory. Subsequent use of <i>Ref1</i> will lead to unpredictable results.</p>

<p>This problem can be solved by adding the class <i>PRef</i>, which behaves exactly like <i>Ref</i> except it holds a Versant <i>Link </i>instead of a C++ pointer. <a name="rl6"><a href="9717d.htm#l6">Listing Six</A> defines this class. Since a Versant <i>Link</i> is guaranteed to be valid even if an object moves in cache, we no longer have a problem with dangling pointers.</p>

<h3>Conclusion</h3>

<p>Even though it's possible to treat Versant links like pointers, we found that by wrapping the <i>Link</i> dereference operator we gained much better control over locking and refreshing. By integrating with references, we correctly handle pinning as well. Programmers have a simple interface to control locking, refreshing, and pinning without worrying about the required mechanics. This has led to a programming environment less prone to error.</p>

<p><b>DDJ</b></p>

<H4><a name="l1">Listing One</H4>

<pre>class RefAny{
};
template &lt;class T&gt;
class Ref : public RefAny
{
public:
 Ref() : referent_(NULL) {}
 Ref(T&amp; obj) : referent_(NULL) { Set(obj); }
 Ref(Ref&lt;T&gt;&amp; ref) : referent_(ref.referent_) {
    if (referent_) referent_-&gt;AddRef(*this); }
    ~Ref() { Clear();
 }
 T&amp; operator ()() const { return Deref(); }
 T&amp; operator =(T&amp; obj) { Clear(); return Set(obj); }
<p></p>
 void Clear () { if (referent_) referent-&gt;RemoveRef(*this); }
<p></p>
private:
 T&amp; Deref () const {
 if (!referent_) {
    NullRefException err(__FILE__,__LINE__);
    throw err;
 }
 return *referent_;
 }
<p></p>
 T&amp; Set (T&amp; obj) {
    referent_ = &amp;obj;
    obj.AddRef(*this);
    return obj;
 }
private:
 T* referent_;
};
class Refable
{
public:
 void AddRef(RefAny&amp; ref) { refs_.Insert(&amp;ref); }
 void RemoveRef(RefAny&amp; ref) {
    refs_.Delete(&amp;ref);
    if (refs_.Length() == 0) SignalZeroRefs();
 }
 virtual void SignalZeroRefs() { delete this; }
<p></p>
private:
 Set&lt;RefAny*&gt; refs_;
};
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>class Solution : public Refable{
   Solution (char* id, char* title) : id_(id), title_(title) {}
<p></p>
   char* GetTitle() const { return title_; }
   char* GetID() const { return id_; } 
<p></p>
private:
   char* title_;
   char* id_;
}
Ref&lt;Solution&gt; App::CreateSolution(char* id, char* title)
{
   Ref&lt;Solution&gt; solution = new Solution(title id);
   return solution;
}
void main()
{
   App app;
   Ref&lt;Solution&gt; solution = app.CreateSolution("mysolution","1234");
   cout &lt;&lt; "Created solution " &lt;&lt; solution().GetTitle();
}
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three </H4>

<pre>template &lt;class T&gt;class RLink
{
public:
  RLink() : link_() {}
  RLink(const Link&lt;T&gt;&amp; link) : theLink(link) {}
<p></p>
  Ref&lt;T&gt; MakeRef (o_lockmode lm) const {
    Ref&lt;T&gt; ref;
    if (!link_.in_cache() ||
    (GetLock() == NOLOCK &amp;&amp; lm != NOLOCK) ) {
      ref = ::dom-&gt;refreshobj(link_,lm);
    } else {
      ref = *link_;
    }
    return ref;
  }
    o_lockmode GetLock () {
    o_lockmode  current_lock = NOLOCK;
    o_u4b       lock_counter = 0;
    link_.getcachedlockinfo(NULL, &amp;current_lock, &amp;lock_counter);
    return current_lock;
  }
private:
  Link&lt;T&gt; link_;
};
<p></p>
class Object : public PObject, public Refable
{
public:
  void SignalZeroRefs() {
    DowngradeLock(NOLOCK);
    Unpin();
  }
  void Dirty() {
    Link&lt;Object&gt; link(this);
    if (link.GetLock() == NOLOCK) {
      DirtyWithoutLockException err(__FILE__,__FILE__);
      throw err;
    }
  }
private:
  void Unpin () {
    Link&lt;Object&gt; link(this);
    while (link.is_pinned()) {
      link.unpinobj();
    }
  }
  void DowngradeLock (o_lockmode lm) {
    Link&lt;Object&gt; link(this);
    ::dom-&gt;downgradelock(link,lm);
  }
  void dirty() { PObject::dirty(); }
};
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>class PSolution : public Object{
   PSolution (char* id, char* title) : id_(id), title_(title) {}
<p></p>
   char* GetTitle() const { return title_; }
   char* GetID() const { return id_; } 
<p></p>
private:
   PString title_;
   PString id_;
}
Ref&lt;PSolution&gt; App::CreateSolution(char* id, char* title)
{
   // Create persistent solution object using overloaded new operator macro.
   Ref&lt;PSolution&gt; solution = O_NEW_PERSISTENT(PSolution)(id,title);
   return solution;
}
void main()
{
   App app;
   Ref&lt;PSolution&gt; solution = app.CreateSolution("1234","My Solution");
   cout &lt;&lt; "Created persistent solution " &lt;&lt; solution().GetID()
        &lt;&lt; " - " &lt;&lt; solution().GetTitle() &lt;&lt; endl;
}
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<H4><a name="l5">Listing Five</H4>

<pre>void SetTitle (RLink&lt;PSolution&gt;&amp; link, char* title){
   // Caches C++ pointer to PSolution object
   Ref ref1 = link.MakeRef(NOLOCK);
   char* old_title = ref1().GetTitle();
<p></p>
   if (strcmp(old_title,title) != 0) {
      // May cause object to move!
      Ref ref2 = link.MakeRef(WLOCK);
      ref2().SetTitle(title);
   }
   // Possible error dereferencing ref1!
   cout &lt;&lt; "Changed title of solution ID: " &lt;&lt; ref1().GetSolutionID() &lt;&lt; endl;
}
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>
<H4><a name="l6">Listing Six</H4>

<pre>template &lt;class T&gt;class PRef : public RefAny
{
public:
  PRef() : referent_(NULL) {}
  PRef(T&amp; obj) : referent_(NULL) { Set(obj); }
  PRef(Pref&lt;T&gt;&amp; ref) : referent_(ref.referent_) {
     if (!referent_.is_null()) Deref().AddRef(*this);
  }
  ~Ref() { Clear(); }
<p></p>
  T&amp; operator ()() const { return Deref(); }
  T&amp; operator =(T&amp; obj) { Clear(); return Set(obj); }
<p></p>
  void Clear () { if (referent_) referent-&gt;RemoveRef(*this); }
<p></p>
private:
  T&amp; Deref () const {
    if (referent_.is_null()) {
      NullRefException err(__FILE__,__LINE__);
      throw err;
    }
    return *referent_;
  }
  T&amp; Set (T&amp; obj) {
    Link&lt;T&gt; link(&amp;obj);
    referent_ = link;
    obj.AddRef(*this);
    return obj;
  }
private:
  Link&lt;T&gt; referent_;
};
</pre>
<P>
<a href="#rl6">Back to Article</A>
</P>


</body>
</html>
