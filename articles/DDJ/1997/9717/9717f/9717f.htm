<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Sourcebook September/October 1997: Dealing with Java Persistence</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Dealing with Java Persistence</h1>

<p><i>Dr. Dobb's Sourcebook</i> September/October 1997
</p>
<h2>Flexibility is the key</h2>

<h3>By Johnny Martin</h3>

<I>Johnny is the president of the Object Guild. He can be contacted at johnnym@objectguild.com</I>

<hr>

<p>With the release of Java Developer's Kit (JDK) 1.1 and new Java standards for data storage, application developers face several alternatives for accessing persistent data -- relational databases are supported by JDBC, flat files can store streamed Java objects, and several vendors of object database management systems (ODBMS) are beginning to offer Java bindings to their storage engines (see <a name="rt1"><a href="9717ft1.htm">Table 1</A>).</p>

<p>The object database alternative offers three main benefits:</p>

<ul>
  <li>Transparency. The same mechanisms used to manipulate objects in memory are used for persistent objects, which means that the same object model used to design business application objects is used to define database schema, since the programming language is also used as the data definition language (DDL).
  <li>Graph structured data. Data in an object database is organized as a graph or network of interrelated data. This is similar to the way you program with objects and their references (pointers).
  <li>Smart caching. Data objects are retrieved from storage as needed. Typically when a reference is traversed, objects are automatically "faulted-in," without writing explicit code to fetch data from a database.
</ul>

<p>ODBMSs differ from their relational counterparts in that the underlying architecture of the ODBMS varies widely from vendor to vendor. Because of these architectural differences, different ODBMS products have benefits and drawbacks that depend upon the nature of your application.</p>

<p>Although C++ is well supported by object database vendors, not all vendors currently provide Java bindings to their databases, and those that do may not provide Java access to all of the features available from C++. This leaves programmers with a dilemma. Choosing an ODBMS tool may be based on Java binding features more than database architecture, and this choice might introduce application dependencies on one particular ODBMS product or version. It seems a shame to burden a well-designed application with an implementation that requires a particular data storage technique or that requires a particular data storage tool.</p>

<h3>Leveraging JNI and C++ Object Database Bindings</h3>

<p>For these reasons, my company (Object Guild) developed Direct Express, a tool that provides Java application developers with access to an object database's C++ binding without writing C++ code. Direct Express provides a straightforward mechanism for achieving Java persistence, which takes advantage of two standard offerings:</p>

<ul>
  <li>Java Native Interface (JNI). Javasoft's JNI, which was introduced with JDK 1.1, is the standard "glue" that is used to integrate Java and C++ in a platform-independent way.
  <li>C++ bindings. Object database vendors offer C++ bindings, which have been around for almost a decade and have many more proven deployments when compared to Java bindings. Furthermore, the ODMG provides a compliance suite for C++ bindings, whereas at the time of this writing, the ODMG has yet to release the official Java binding compliance suite.
</ul>

<p>Direct Express combines these two standard offerings by automating the generation of JNI and C++ code to provide reliable Java persistence through an object database's C++ binding.</p>

<p>Direct Express consists of three main components:</p>

<ul>
<li>A translator generator (JGEN) that converts persistent-capable Java files into their concrete implementations.  <li>Precanned translation definitions (.DEF files) used by JGEN.
  <li>A set of database transaction and connectivity classes, which support the ODMG Java interface specification.
</ul>

<p>Writing a Direct Express application involves identifying persistence-capable Java classes, then providing application control flow in order to coordinate connecting to databases and issuing commits at the appropriate transaction boundaries.</p>

<p>You first identify Java business application classes, which should be persistence capable. In accordance with the draft ODMG Java specification for object databases, persistence-capable Java classes are pure Java. Unlike the ODMG C++ binding, the Java binding does not use special syntax. It also does not require derivation from a base class to achieve persistence. With Direct Express, all that is necessary is that you process the persistence-capable classes that you have identified with the JGEN translator. In the examples that follow, notice that the keyword "transient" is used to define data members that are not stored persistently. (The ODMG has received Javasoft's blessings on the use of the "transient" keyword in persistent-capable classes.)</p>

<p>JGEN translates your Java classes into concrete Java and C++ files. There are two C++ files: a header file and its corresponding body. These define counterpart persistent C++ classes and define the JNI methods that link Java to C++. JGEN generates the C++ code automatically from translation definitions, and therefore, it is not necessary to write C++ code. The resulting Java code must be compiled into .class files and the resulting C++ code must be compiled and linked to produce a DLL. <a name="rf1"><a href="9717ff1.htm">Figure 1</A> shows how JGEN translates a persistent-capable Java source file into three concrete implementation files: a Java source file containing JNI stubs; a C++ file containing JNI methods definitions; and a C++ header file, which is also the data definition language (DDL) file for defining object database schema.</p>

<p>Perhaps the most interesting aspect of Direct Express is that the JGEN translator generator offers a user-configurable approach to defining just what persistence means. JGEN reads from a definition file (which performs translation rewriting duties) to determine what files to generate and to determine what concrete code is emitted. The JGEN translation rewriting definitions use a tagged markup notation, which is very similar to SGML or HTML. Each tag identifies the target output file, the type of Java object under translation, and other information. The body of the tagged markup is the actual code with keyword substitution phrases.</p>

<p>JGEN's configurable definitions file lets you fine-tune the exact translations from Java to C++ and JNI, so that new versions of an object database's C++ binding can be accommodated without having to rewrite Java application code. This allows you to implement business or application objects independent of underlying persistence mechanisms, knowing that they will be supported by the translations provided by JGEN.</p>

<p><a name="rl1"><a href="9717f.htm#l1">Listing One</A> is an excerpt from a JGEN definition file, which prescribes the translation for Java String declarations into JNI code used to link Java to the Objectivity/C++ binding.</p>

<p>JGEN's configurable definitions file ensures that Java application code can work with new releases of C++ bindings, and provides flexibility in adapting to different persistence models or even different database products.</p>

<h3>A Clinical Patient Record Example</h3>

<p>To demonstrate a JGEN translation of a user's Java class definition for clinical patient records, I'll present a clinical patient record example. The Java class is named <i>Patient</i> and has been simplified for presentation.</p>

<p><a name="rl2"><a href="9717f.htm#l2">Listing Two</A> is the input Java file, which will be made persistence capable. Notice the use of the "transient" keyword to identify the <i>guiCount</i> data member, which is not stored, but only used in Java at run time.</p>

<p>In this example, I have configured JGEN to generate C++ and JNI for Objectivity/C++ Version 3.8. <a name="rf2"><a href="9717ff2.htm">Figure 2</A> shows the Direct Express Configuration tool, which is used to select the appropriate C++ binding. For Objectivity/C++ 3.8, JGEN generates three output files: a Java file, a CPP file, and a DDL file. The Java file looks similar to the input file except that persistent definitions are automatically commented out and replaced by <i>get</i> and <i>set</i> methods. The <i>get </i>and <i>set </i>methods are implemented so that they pass the buck to private native methods.  And these private native methods use JNI to access the corresponding C++ counterpart objects.</p>

<p>In <a name="rl3"><a href="9717f.htm#l3">Listing Three</A>, the Java input file does not use a base class for persistence. Objectivity/C++, on the other hand, requires that all persistent-capable C++ objects inherit directly or indirectly from the base class <i>ooObj</i>. The persistent base class requirement would be too restrictive in Java, which does not support multiple inheritance. The <i>ooObj</i> base class is hidden behind the JNI machinery used to achieve persistence, and the additional instance methods needed to support persistence in Direct Express are automatically generated by the JGEN translator, thus Direct Express conforms to the ODMG Java specification by not requiring a Java base class.</p>

<p><a name="rl4"><a href="9717f.htm#l4">Listing Four</A> consists of an excerpt from the generated .DDL file. It shows C++ accessor methods for the <i>medicalID</i> attribute. With Objectivity/C++, the DDL file serves as a C++ header, as well as the data definition language.</p>

<p><a name="rl5"><a href="9717f.htm#l5">Listing Five</A> consists of an excerpt from the generated C++ file excerpt, which  shows the JNI macros. These macros are used to link up the Java native declarations to their concrete implementations in C++.</p>

<h3>Object or Relational</h3>

<p>Although Direct Express was designed for use with object databases, it could, in theory, be used to build a relational database mapping code interface that conforms to the ODMG Java specification. This could be a task for the adventurous, who are comfortable with JGEN's tagged markup. It would certainly be possible to create a .DEF file to map from the Java input file to JDBC for relational database access. Each rewriting rule would specify a concrete implementation for <i>get</i> and <i>set</i> methods using the appropriate SQL and JDBC to retrieve and store values, effectively insulating the object model in your application code from the relational mapping code. The detailed issues in designing effective relational mapping layers are beyond the scope of this article, and touch on the theoretical underpinnings of object and relational database architectures.</p>

<p>Keep in mind that relational databases are "set-theoretic" because data is organized in tables (or views), which are sets of tuples. Interrelationships among data are not stored in the database, but are calculated on the fly via "join operations" that intersect sets of tuples on matching key fields. A separate data modeling and access language (SQL) is needed. JDBC provides Java integration for connectivity to SQL, and the programmer must write application code that provides a mapping between Java objects and relational data. This set theoretic property makes relational data flexible in performing queries, but makes transparent integration difficult with an object programming language, such as Java.</p>

<p>Object databases (and to some extent, their ancient cousins, network databases) are "graph-theoretic," on the other hand, because data is organized as datum nodes with directed relationships (pointers). Since the "pointers" are stored along with the data, this "graph-theoretic" property can make arbitrary queries difficult, but makes the mapping from an object language to database trivial. The elimination of database mapping code is achieved completely through "transparent object access" from an object language, such as Java. </p>

<h3>Conclusion</h3>

<p>Since JGEN uses customizable translation rules, using Direct Express buys a lot of flexibility in choosing an underlying persistence mechanism for your Java application. You can configure Direct Express to work with different C++ and Java bindings. In fact, Direct Express ships with precanned .DEF files for several C++ binding versions and an alpha Java binding from Objectivity. It is also possible to configure Direct Express to map to JDBC accessing a relational database. Ultimately, Direct Express enforces a clean separation between application and database implementation, which should contribute to an application's flexibility and longevity.</p>

<p><b>DDJ</b></p>

<a name="l1"><h4>Listing One</h4>

<pre>&lt;code fileSuffix=.cpp sect=3 kind=String&gt;
/* Class:     %underScoredPackageName%_%className%
 * Method:    %methodname%
 * Signature: (I)%Ljava/lang/String%
 */
JNIEXPORT jstring JNICALL
Java_%underScoredPackageName%_%className%_%methodname%__I
  (JNIEnv * env, jobject obj, jint handle) {
  ooHandle(%className%) & %lowerCaseClassName% = 
                                        *(ooHandle(%className% )*) handle;
  return env-&gt;NewStringUTF(%lowerCaseClassName%-&gt;%name%());
}
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<a name="l2"><h4>Listing Two</h4>
<pre>package COM.objectGuild.directExpress;

class Patient {
  int medicalID;
  String name;
  String ssn;
  Chart myChart;
  transient int guiCount;
}
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<a name="l3"><h4>Listing Three</h4>
<pre>  /** DO NOT EDIT. This file is generated by Direct Express. */

package COM.objectGuild.directExpress;

class Patient {
  /*persistent int medicalID;*/
  /*persistent String name;*/
  /*persistent String ssn;*/
  /*persistent Chart myChart;*/
  int guiCount;

  /** Return the medicalID field of class Patient object
   */
  public int medicalID() throws OGDBException {
    return p_medicalID(counterpart());
  }

  /** Set the medicalID field of the Patient object to the specified int
   */
  public void medicalID(int inmedicalID) throws OGDBException {
    p_medicalID(counterpart(),inmedicalID);
  }

  /** Native method that creates the counterpart in C++.
   * @return Address of the handle to the C++ object.
   */
  private native int makeCxxCounterpart();

  /**
   * Private native methods for medicalID
   */
  private native int p_medicalID (int handle) throws OGDBException;
  private native void p_medicalID (int handle, int medicalID)
    throws OGDBException;

  ...

}
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<a name="l4"><h4>Listing Four</h4>
<pre>class Patient : public ooObj {
  private:
    int _medicalID;
  int medicalID() const {
    return _medicalID;
  }
  void medicalID (int medicalID) {
    _medicalID = medicalID;
  }
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<a name="l5"><h4>Listing Five</h4>
<pre>/* Class:     COM_objectGuild_directExpress_Patient
 * Method:    medicalID
 * Signature: (I)INT
 */
JNIEXPORT jint JNICALL
Java_COM_objectGuild_directExpress_Patient_medicalID__I
  (JNIEnv * env, jobject obj, jint handle) {
  ooHandle(Patient) & patient = *(ooHandle(Patient )*) handle;
  return patient-&gt;_medicalID();
}
/* Class:     COM_objectGuild_directExpress_Patient
 * Method:    medicalID
 * Signature: (II)INT
 */
JNIEXPORT void JNICALL
Java_COM_objectGuild_directExpress_Patient_medicalID__IINT
  (JNIEnv * env, jobject obj, jint handle, int j_medicalID) {
  ooHandle(Patient) & patient = *(ooHandle(Patient )*) handle;
  patient-&gt;medicalID(j_medicalID);
}
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>
</body>
</html>
