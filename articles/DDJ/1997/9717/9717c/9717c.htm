<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Sourcebook September/October 1997: Authorization Models for Object-Oriented Databases </title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Authorization Models for Object-Oriented Databases </h1>

<p><i>Dr. Dobb's Sourcebook</i> September/October 1997
</p>
<h2>Formalizing authorization policies</h2>

<h3>By Frank Buddrus</h3>

<I>Frank is a researcher at Johann Wolfgang Goethe-University in Frankfurt, Germany. He can be contacted at buddrus@dbis.informatik.uni-frankfurt.de. </I>

<hr>

<p>It is essential that all databases support authorization to protect data. There are a variety of authorization models, most of which typically describe the kind of information protected, the scope of protection, any constraints, and the model's underlying functionality. Unfortunately, many of these models were originally developed for relational database systems and, because of the huge number of complex objects that can be stored, may not always be appropriate for object databases (ODBMSs). In this article, I will present a flexible method of providing customized authorization to object-oriented databases. This approach is based on Prolog-like rule mechanisms and triggers, and supports definition and execution of authorization models for an ODBMS. </p>

<p>Traditionally, there are two types of access control -- discretionary and mandatory. Discretionary access control lets users determine how they will access the data/objects they own. Mandatory access control, on the other hand, links protection to data, so that users can only access data and/or objects according to specified "rules." Here, I will focus on discretionary access control for ODBMS. </p>

<p>An authorization rule such as <i>(user, right, object)</i> says a user owns access rights to an object. If there is no corresponding authorization rule, access is denied by default. To minimize the number of rules and optimize maintenance, some rules imply others and need not be specified explicitly. For instance, <i>(user, UPDATE, object) </i>can imply <i>(user, READ, object)</i>, as long as the right to update an object presumes the right to read it. Furthermore, implications such as this can be extended to users and objects themselves. To disable implied authorizations (referred to as "explicit access denial"), "negative" authorization can be expressed as <i>(user, !right, object).</i> General requirements that must be fulfilled by implementing and executing an authorization model primarily concern authentication, confidentiality, consistency, scalability, transparency, auditing, and administration. </p>

<h3>Conventional Authorization Mechanisms</h3>

<p>Checking for authorization every time a stored object is accessed would be highly inefficient. Consequently, ODBMS authorization models try to group objects with common characteristics. There are several models that theoretically provide ODBMSs with discretionary-access control, the main differences among them being scope. For the sake of example, I will briefly examine the class-level model because of its simplicity.</p>

<p>With the class-level model, access to an attribute of an object is granted or denied according to authorization rules attached to the class from which they are instantiated. For example, applying inheritance properties to the schema in <a name="rf1"><a href="9717cf1.htm">Figure 1</A> results in the effective schema of <a name="rf2"><a href="9717cf2.htm">Figure 2</A>. An authorization rule might say that a student advisor is allowed to read the attribute <i>Year</i> of any <i>Student</i>. A set of "policies" (that is, general rules responsible for granting certain access) describe the authorization implications: </p>

<ul>
  <li>Policy 1 (inherited authorization). Users who have access to a class are allowed to have a similar type of access on the corresponding subclasses to the attributes inherited from this class. 
  <li>Policy 2 (class access). Access to a complete class implies access to the attributes defined in that class as well as to attributes inherited from a superclass (but only to the class-relevant values of these attributes). If there is more than one superclass (multiple inheritance), access is granted to the union of the inherited attributes. 
  <li>Policy 3 (visibility). Attributes defined for a subclass are not accessible by accessing any of their superclasses. 
</ul>

<p>For example, if the student advisor wants to read the <i>Year</i> of a <i>Foreign Student,</i> he is authorized by applying Policy 1. The access to the <i>Visa,</i> however, would be denied following Policy 3. </p>

<h3>An Alternative Authorization Mechanism </h3>

<p>The most effective method of placing access control is to extend the schema/object manager. Whenever a class definition or object is requested, this manager can check the authorization of the request. Modifying the manager, however, will likely result in greater work on the part of the programmer. Moreover, every change in authorization policy implies the need for a modification of the manager. Thus, implementing authorization mechanisms within the schema/object manager should only be done if the policies are fixed, and no changes are expected. Access control by precompiling means analyzing existing code in order to insert additional code that can perform appropriate authorization checks. This mechanism has to be extended for any kind of access, especially for the query language and available APIs. Any access to data offered by predefined methods (list primitives, for instance) cannot be controlled in this way. Therefore, except for prototyping concerns, precompiling should not be applied. </p>

<p>Objects in an ODBMS play a different role than data in other database systems. Whenever information flows, messages have been sent to objects. This message passing can easily be monitored and exploited for different needs, including triggering. Rules as part of a schema can be used to keep the database consistent. For access control, you can write rules that perform authorization checks on instantiated objects. Using trigger mechanisms, an authorization model can be implemented without intervention in the running code of a database application or underlying schema/object manager. </p>

<p>To illustrate class-level access using rules, I will present a model for administration of authorization in an ODBMS called Security in an Object-Oriented Database (SecOO). SecOO is based on the authorization model described by E.B. Fernandez, E. Gudes, and H. Song, in "A Model for Evaluation and Administration of Security in Object-Oriented Databases," <i>IEEE Transactions on Knowledge and Data Engineering</i>, April 1994. SecOO is implemented by applying a Prolog-like rule interpreter and trigger mechanism described by C. Collet, T. Coupaye, and T. Svenson (Project GOODSTEP, Technical Reports No. 10 and 11, Laboratoire de GENIE INFORMATIQUE, University Joseph Fourier of Grenoble, France). </p>

<p>As <a name="rf3"><a href="9717cf3.htm">Figure 3</A> shows, the SecOO system runs on top of an ODBMS and is responsible for installing triggers/rules and managing the administration of users (groups), their authentication, and authorization grant/revocation. All of these services are communicating with the authorization server, running as a single process to serve multiple ODBMS clients. This server behaves like an interpreter for Prolog rules, which are used to describe authorization models in a flexible way. </p>

<p>To see how you create triggers/rules for application code, consider the authorization model and one class of the class hierarchy discussed in <a href="9717cf1.htm">Figures 1</A> and <a href="9717cf2.htm">2</A> and described in <a name="rl1"><a href="9717c.htm#l1">Listing One</A> For class-level authorization, SecOO generates the triggers/rules shown in <a name="rl2"><a href="9717c.htm#l2">Listing Two</A>.</p>

<p>After enabling these triggers/rules for each access to the attribute <i>Year</i> of an instance of <i>Student</i>, the corresponding rule is fired, regardless of whether it belongs to a query, running method, API program, or ad hoc request. The requested action will be approved according to the underlying authorization model. It will be continued upon success or canceled with an access violation. The authorization check performed a call to a special method access that is part of SecOO. This will first check the user's authentication and, if necessary, perform a login. Then it will call the SecOO server, which must determine if the requested access can be granted. The method returns <i>False</i> on denial, which cancels the query due to access violation; otherwise it returns <i>True</i>, and the action continues. SecOO processes all classes, their attributes, and inheritance relationships, and generates triggers/rules and SecOO facts, which are interpreted for implication computing. Upon class generation or modification, services are called that keep track of the triggers/ rules and their corresponding entries (facts) in the SecOO server. </p>

<h3>SecOO Rules </h3>

<p>For further illustration, I present two sets of Prolog-like rules. The first set contains database- and application-dependent facts (rules without body) and are determined by SecOO, database administrators, and database users at run time. The second set contains rules suitable for both representing and executing the authorization policies determined by the database designer. These policies instantiate the access control mechanism offered by SecOO. To protect objects instantiated from certain classes, class information must be provided. This is done with two kinds of facts. One kind describes the composition of a class, the other describes the inheritance relation; see <a name="rl3"><a href="9717c.htm#l3">Listing Three</A>. </p>

<p>The first fact, for instance, expresses that the class <i>Person</i> consists of the two attributes, <i>Name</i> and <i>SSN</i>, and that the class <i>Student</i> is a subclass of class <i>Person</i>. A second category of facts is concerned with explicit authorization rules. These rules can be given for a single attribute or for a complete class; see <a name="rl4"><a href="9717c.htm#l4">Listing Four</A>.</p>

<p>These facts represent specific information about the actual state of a database -- its classes, users (groups), and explicit authorizations. The facts have to be updated whenever a class, group, or authorization is modified, deleted, or added. This is done by services on the ODBMS client, which communicate with the SecOO server. </p>

<p>The rules in <a name="rl5"><a href="9717c.htm#l5">Listing Five</A> describe authorization implication and build the core of an actual SecOO server instantiation. Rules are grouped into policies. The set of given policies describes a major part of the chosen authorization model. This set is fixed as long as the proposed model is able to fulfill security needs. Access to a single attribute or a complete class will be granted if there is an explicit authorization rule for it (the arrow represents the implication direction). </p>

<p>Access to a single class attribute implies access to this attribute in all derived classes (Policy 1); see <a name="rl6"><a href="9717c.htm#l6">Listing Six</A>. In <a name="rl7"><a href="9717c.htm#l7">Listing Seven</A>, access to a complete class implies access to all (transitively inherited) attributes (Policy 2), while in <a name="rl8"><a href="9717c.htm#l8">Listing Eight</A>, a certain right on an attribute implies all its lower rights.</p>

<p>SecOO is designed to minimize the number of access checks by enabling/disabling generated triggers. Whenever a group is authenticated, all demanded triggers are enabled. On any successful access to an object (attribute), the corresponding triggers are disabled. Any subsequent access to objects (attributes) of this class are granted as long as a new login or change in the server's fact base have not taken place; see <a name="rf4"><a href="9717cf4.htm">Figure 4</A>. </p>

<p>This mechanism guarantees full data protection and a minimal decrease in efficiency for applications (methods) stored in the database. </p>

<h3>SecOO Administration </h3>

<p>SecOO provides a set of administration commands that supplement the ODBMS shell and are dependent on the instantiated authorization model. For the model I have described here, these commands are: </p>

<ul>
  <li><i>control &lt;class&gt; [&lt;attribute&gt;]</i>. Installs appropriate triggers and provides the SecOO server with structural information for a given (complete) class or a single attribute. Any further access to (attributes of) objects of this class will be controlled by SecOO. 
  <li><i>release &lt;class&gt; [&lt;attribute&gt;]</i>. The reverse command of control. 
  <li><i>login</i>. Used to authenticate a group by asking for a password, which automatically enables/reenables all installed triggers. 
  <li><i>change_password</i>. Used to change the password of the actual group. 
</ul>

<p>There are also special commands that can only be executed by the database administrator: </p>

<ul>
  <li><i>grant access &lt;group&gt;&lt;right&gt;&lt;class&gt; [&lt;attribute&gt;]</i>. A command that grants access. 
  <li><i>revoke access &lt;group&gt;&lt;right&gt;&lt;class&gt; [&lt;attribute&gt;]</i>. A command that revokes access. 
  <li>	<i>insert group &lt;group&gt;</i>. A command that adds a new group. 
  <li><i>add domination &lt;groupA&gt; &lt;groupB&gt;</i>. A command that creates a domination relation from <i>groupA</i> to <i>groupB</i>. 
  <li><i>remove group &lt;group&gt;</i>. A command that removes an existing group including its potential access rights.
  <li><i>rename group &lt;group&gt;</i>. A command that renames an existing group (which does not affect its access rights). 
</ul>

<h3>Conclusion </h3>

<p>The approach I have suggested here offers flexibility and a distinct way to formalize authorization policies. Still, further development is needed in this area. For instance, we are still working on ways to keep the rule base up to date with class information. We are also working on the semantics of negative authorizations.</p>

<p><b>DDJ</b></p>

<H4><a name="l1">Listing One</H4>

<pre>class Student inherit Person     type tuple ( Year : integer ) 
end;
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>create rule Student_Year_update    on before update Student-&gt;Year with o 
     if ( !access( update, o-&gt;class_o f, "Year" ) ) 
   do instead { abort( "access violation " ); } 
create rule Student_Year_read 
<p></p>
   on before read Student-&gt;Year with o 
     if ( !access( read, o-&gt;class_ of, "Year" ) ) 
   do instead { abort( "access violation " ); } 
create rule Student_update 
<p></p>
   on before update Student with o 
     if ( !access( update, o-&gt;class_of  ) ) 
   do instead { abort( "access violation " ); } 
create rule Student_read 
   on before read Student with o 
     if ( !access( read, o-&gt;class_of  ) ) 
   do instead { abort( "access violation " ); } 
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>class ( 'Person', ['Name', 'SSN'] ). class ( 'Student', ['Year'] ). 
class ( 'ForeignStudent', ['Visa'] ). 
<p></p>
inherits( 'Student', 'Person' ). 
inherits( 'ForeignStudent', 'Student' ). 
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>expl_access( 'advisor', write, 'Person' ). expl_access( 'student_advisor', read, 'Student',' Year' ). 
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<H4><a name="l5">Listing Five</H4>

<pre>policy explicit_authorization    access(Group, Right, Class, Att ) &lt;- 
        expl_access ( Group, Right, Class, Att ). 
   access( Group, Right, Class ) &lt;- 
        expl_access ( Group, Right, Class ). 
end policy. 
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>
<H4><a name="l6">Listing Six</H4>

<pre>policy inherited_authorization    access( Group, Right, SubClass, Att ) &lt;- 
       inherits( SubClass, SuperClasses ), 
       member( SuperClass, SuperClasses ), 
       access( Group, Right, SuperClass, Att ). 
end policy. 
</pre>
<P>
<a href="#rl6">Back to Article</A>
</P>
<H4><a name="l7">Listing Seven</H4>

<pre>policy class_access    inherited ( Class, Att ) &lt;- 
       class( Class, AttList ), 
       member( Att, AttList ). 
   inherited ( Class, Att ) &lt;- 
       inherits( Class, SuperClasses ), 
       member( SuperClass, SuperClasses ), 
       inherited( SuperClass, Att ). 
   access( Group, Right, Class, Att ) &lt;- 
       inherited( Class , Att ), 
       access( Group, Right, Class ). 
end policy. 
</pre>
<P>
<a href="#rl7">Back to Article</A>
</P>
<H4><a name="l8">Listing Eight</H4>

<pre>policy right_domination     access( Group, RightA, Class, Att ) &lt;- 
        rdom( RightB, RightA ), 
        access( Group, RightB, Class, Att ). 
    access( Group, RightA, Class ) &lt;- 
        rdom( RightB, RightA ), 
        access( Group, RightB, Class ). 
    rdom( update, read ). 
end policy. 
</pre>
<P>
<a href="#rl8">Back to Article</A>
</P>




</body>
</html>
