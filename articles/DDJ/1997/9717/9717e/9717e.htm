<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Sourcebook September/October 1997: Relational C++ Objects</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Relational C++ Objects</h1>

<p><i>Dr. Dobb's Sourcebook</i> September/October 1997
</p>
<h2>An interface model for persistent object storage</h2>

<h3>By Eric Kass</h3>

<I>Eric is a system software engineer for IBM's AS/400 division. He can be contacted at kasseric@vnet.ibm.com.</I>

<hr>

<p>The object model facilitates large system design by forcing atomic data structuring that optimally mimics the actual interactions in the real world. Object-oriented database systems provide object-oriented modeling and object persistence -- permanent object storage. The problem with these database systems is not in their inherent ability, but the lack of standards in the industry -- neither the language nor the object storage formats are standardized.</p>

<p>In this article, I present a database system that builds on C++ by adding a set of object classes that provide an object-oriented modeling environment that stores data inside industry-standard relational database systems. This system overcomes the inherent problem of mapping a hierarchical object schema to flat storage. The current implementation runs on top of Windows and uses ODBC to access any available relational database system. </p>

<p>Persistence is provided by the framework classes that are used to define the derived classes in the application domain. The design model dictates that objects be defined as sets of interfaces, which themselves define sets of characteristics. In this model, inheritance is defined by the aggregation of interface definitions. Polymorphism is dynamic, as the set of interfaces that describe any single object can be modified at run time.</p>

<p>The complete database class framework is available electronically; see "Programmer's Services," page 3. All you need to design and implement a database application is this framework, a Win32 compiler, and an ODBC database engine (such as the Jet database engine included with Microsoft Access).</p>

<h3>Database-System Design</h3>

<p>My major objective in designing this object database system was to provide a mechanism for using preexisting relational database systems to support object-oriented database-application development. Since Windows was the target platform, access to SQL databases via ODBC seemed most appealing. Applications written using the ODBC API need no modification or recompilation to access any supporting database system (all major commercial database vendors provide ODBC drivers).</p>

<p>Database designs conform to an interface model that defines the object-relational storage interaction. The interface model provides both a sound design methodology and practical object abstraction that maps well to the flat storage provided by relational database systems. The characteristics of an object are defined by associating appropriate interfaces. An interface maps directly to a flat relational table with fields that represent the data members of the interface. Since an object is constructed by a number of interfaces, a single object may span a number of relational tables. In the C++ domain, objects are derived from the <i>DBObject</i> base class, and associated interfaces from the <i>DBInterface</i> base class. </p>

<p>For example, a basic <i>animal</i> class definition contains an interface that describes the generic "animal." A <i>dog</i> object would be derived from <i>animal</i>, but would also contain the <i>dog</i> interface containing that which describes "dogness."</p>

<p>In short, an object is defined for each representative entity in the application domain. An object is defined by a set of attributes that are grouped together in interfaces. In essence, an interface defines "characteristicness."</p>

<p>Queries return objects. The <i>DBObjectQuery</i> class provides the query mechanism used for all data searches. An initial query is made by using one of the first two methods in <a name="re1"><a href="9717ee1.htm">Example 1</A>. <i>DBObjectQuery</i> forms the correct SQL statement to return a single object identifier for each item in the result set. The methods create a new instance each time they are invoked. The attributes for the returned objects are accessed by requesting the appropriate interface from the objects. Since the system creates a separate relation table for each type of interface, SQL queries can be made on the database using the name of the interface and the names of its members. </p>

<p>The three classes in <a name="rl1"><a href="9717e.htm#l1">Listing One</A> define a person, student, and book. A student is also a person and is derived appropriately. The respective interfaces define the characteristics of the objects with similar names. <a name="rf1"><a href="9717ef1.htm">Figure 1</A> shows how instances of the objects would be stored in a database. </p>

<p><a name="rl2"><a href="9717e.htm#l2">Listing Two</A> prints all students born before 1972. The query requests the objects that have entries in the student interface table <i>(GetFirst(Student)</i>). The objects that are returned, then, are certain to at least support the <i>Student</i> interface. For each student object, its <i>Person</i> interface is requested. The person's name -- defined by the <i>Person</i> interface -- is then printed.</p>

<p>Any valid SQL query can be used to define the object result set. <a name="rl3"><a href="9717e.htm#l3">Listing Three</A> prints all authors who have written books for "Random House." Authors are identified by the system-generated object identifier <i>Persons.ID</i>. The <i>Query</i> class detects the primary object in the <i>From</i> clause and returns objects of that type; namely, objects that support the primary interface <i>Person</i>. </p>

<h3>Database-System Implementation</h3>

<p>A table is created in the relational database system for each type of interface defined. The first field of each interface record is an instance identifier (ID) that identifies the object to which the interface belongs. At run time, when a C++ object is generated, the system loads the list of interfaces that belong to the object. When the program requests an interface for an object, the system loads the data from the database as needed.</p>

<p>A <i>Database</i> class maintains complete database session-state and connection information by encapsulating ODBC calls. A reference to the <i>Database</i> class is propagated throughout the application. Besides maintaining the connection, the <i>Database</i> object is the source of new SQL <i>Statement</i> objects and is the controller of nested transactions. Transaction requests made by a statement are accumulated by the <i>Database</i> object until the number of commits equals the number of transaction starts. </p>

<p>All SQL interaction occurs via <i>Statement</i> objects. Besides acting as a gateway to the relational database system, <i>Statement</i>s maintain query-state information for those operations where multiple item-result sets are a consequence.</p>

<p>A single class maintains system state and controls interaction between all the objects and interfaces in a database. The <i>ObjectDatabase</i> derives from the <i>Database</i> class and defines the storage location for the objects. The <i>ObjectDatabase</i> class tracks objects and interface class types, and is used to create object identifiers and generate interface instances.</p>

<p>When an application initializes, it creates an instance of the <i>ObjectDatabase</i>, which it connects to an ODBC data source. The application further registers interface types with the class. The methods of the <i>ObjectDatabase</i> are not usually accessed by application programs, but the instance is required for creating new objects or generating queries.</p>

<p>The <i>DBObject</i> is the basic unit for operations. The <i>DBObject</i> controls all persistence and manages the interfaces that define the object. Each object instance is assigned a unique identifier by the system. This identifier is placed in the ID field of each interface record that is associated with the object. </p>

<p>Before an object goes out of scope, a call must be made to the object's <i>Save()</i> method to cause the object to be written to the relational database system. It is possible to place <i>Save()</i> in the destructor of derived objects to enable an automatic save operation when the object loses scope. <a name="rl4"><a href="9717e.htm#l4">Listing Four</A> presents simplified save code. The procedure iterates through a linked list of interface information records that are attached to the object. Each interface is written to the database, in turn, using ODBC calls. The binding record contains information about the interface class structure used to create the SQL update or create statements. </p>

<p>A persistent object is restored automatically either by a query to the database or by explicitly constructing an object with a specific ID. An object's persistence can be removed by calling <i>Delete()</i>.</p>

<p>To refresh the memory image of all interfaces registered with an object call, a <i>Reload()</i> method is provided. This function has the artifact of guaranteeing a complete copy of an object in memory, which may not be the case during normal operation, since interface data is usually loaded only as needed.</p>

<p>Interfaces of an object are accessed with the <i>GetInterface(classId)</i> method. The method returns an interface instance if <i>classId </i>is a member of the object, otherwise it returns NULL. If the interface is a member of the object but the underlying database system fails to load it, the method will throw an exception. <a name="rl5"><a href="9717e.htm#l5">Listing Five</A> shows simplified <i>GetInterface()</i> method code. The procedure attempts to retrieve the interface from the object's cache, but loads complete interface information if necessary. The presence of the interface record does not necessarily guarantee that the interface object has been loaded from the database. <i>GetInterface()</i> creates the interface class instance if necessary and fills in its members from the database before returning.</p>

<p>Dynamic polymorphism is supported through the use of methods that dynamically add and remove interfaces (characteristics) to and from objects. The <i>AddInterface()</i> method dynamically adds the characteristic defined by the interface to the object. Similarly, <i>RemoveInterface()</i> can be used to delete an interface. For example, consider the object that describes a person who initially enters the system as a student, but then becomes a faculty member. The student could become a faculty member by removing the student interface and adding the faculty interface.</p>

<h3>Interface Class Factories</h3>

<p>The class factory is the most important component of the interface model. Each object is defined by a set of interfaces that describe the object's characteristics. When an interface for the object is requested, the database system must be able to produce the C++ interface instance. Class factories are generated when the interface classes are defined, and registered with the <i>ObjectDatabase</i> at application startup. When a request for an interface is made, the <i>ObjectDatabase</i> searches its list of class factories for one with an equal class identifier. The matching factory is requested to generate the appropriate interface instance.</p>

<p>The class factory also maintains all interface type information. This includes binding information and a SQL statement cache for the most-often used SQL statements -- those used to save and restore object data to the relational database system.</p>

<h3>SQL Interaction and Binding Records</h3>

<p>Bindings describe how an interface is stored in a table. A binding table can be created manually, but macros have been designed to simplify the process. For each member of the interface class, a binding is to be defined using <a name="rl6"><a href="9717e.htm#l6">Listing Six</A>.</p>

<p>The second macro is used for variable-sized objects, like strings. The macros compute the storage offset location for the indicated member's class using a multiple-inheritance-safe formula; see <a name="rl7"><a href="9717e.htm#l7">Listing Seven</A> (where <i>_Locator</i> is the first member of the base <i>DBInterface</i> class).</p>

<p>With the relative storage location information, the SQL driver can place object data directly at the memory location occupied by the interface. The interface example in <a name="rl8"><a href="9717e.htm#l8">Listing Eight</A> defines a complete definition.</p>

<p>An object may contain a collection of other objects. <i>DBSetInterface</i> is a persistent container for other objects. An object simply registers <i>DBSetInterface</i> as a member interface during construction. The interface provides four primary methods; see <a name="re2"><a href="9717ee2.htm">Example 2</A>. The first two are self explanatory; the third and fourth provide a means of iterating the set.</p>

<p>It is possible to guarantee atomic actions on an object by wrapping all critical code between calls to the <i>Take()</i> and <i>Release()</i> methods. <i>Take()</i> attempts to obtain the object's critical section; upon failure, a specified number of additional attempts are made -- each followed by a delay. Using object-critical sections, object operations can safely span multiple threads and processes. </p>

<p>The critical section implementation uses the fact that the relational-database system will not create two records having the same key. <i>Take()</i> attempts to create a record in the mutual exclusion table with a key equal to the object instance identifier. If the operation is successful, the critical section is owned. Another attempt to create a record with the same object will fail. <i>Release()</i> simply removes the record that represents the critical section.</p>

<p>All object operations are handled as transactions to guarantee that an object's persistent image is always in a consistent state. The nesting transaction ability of the <i>Database</i> class permits transactions to span multiple objects and databases. </p>

<h3>The Reservation Application</h3>

<p>The reservation application consists of two parts. The first part is a complete reservation system, independent of an interface. The second part is a Windows GUI application. The separation facilitates changing the interface or porting the application. Because the database system is simply a set of C++ classes, no additional work is needed to merge the database and application domains. </p>

<p>Conceptually simple, the two primary elements are objects that represent each piece of equipment. Each equipment item contains its own list of reservations. Each reservation is associated with the person who reserved the item and with the location at which it will be used. The actual database contains a number of other classes that maintain information about the original equipment owner, manufacture, and description fields.</p>

<p>Each type of equipment is derived from a generic equipment base class. The database model usually requires the definition of at least two classes per object. One class represents the object itself, the others are the interfaces that the object supports. The generic <i>Equipment</i> class supports the <i>IEquipment</i> and <i>IScheduleSet</i> interfaces. <i>IScheduleSet</i> defines a container for <i>Schedule</i> objects -- the reservations. Each type of equipment is derived from the <i>Equipment</i> class and supports an additional interface defining the extension properties.</p>

<p>Most reservation system operations are encapsulated in the <i>Scheduler</i> class; <a name="rl9"><a href="9717e.htm#l9">Listing Nine</A> shows the methods of this class.</p>

<p>Queries find equipment items with schedules having the defined properties. The query is dynamically constructed from only those parameters which are specified (that is, not NULL). <a name="rl10"><a href="9717e.htm#l10">Listing Ten</A> is the constructed query statement.</p>

<p>Although similar, searching for available equipment is complicated by the fact that each item must not contain a reservation in the requested time frame. The derived <i>DBObjectQuery</i> class that is used for available equipment queries overrides a filter method that is called to verify the inclusion of each item as it is returned from the SQL query. The filter checks for the nonexistence of a reservation in the requested time frame using <a name="rl11"><a href="9717e.htm#l11">Listing Eleven</A>.</p>

<p>For demonstration purposes, I wrote a simple Win32 GUI interface for making reservations and running queries. The main screen in <a name="rf2"><a href="9717ef2.htm">Figure 2</A> is a menu for the three primary operations -- Reserve, Query, and Maintenance. Both the reservation and query buttons open the window in <a name="rf3"><a href="9717ef3.htm">Figure 3</A>. The maintenance mode allows the administrator to define new equipment.</p>

<p>To make a reservation, the user selects the type of equipment, and the time and location for which he desires the equipment. The program returns with a list of relevant items; see <a name="rf4"><a href="9717ef4.htm">Figure 4</A>. From the list, the user selects the item or items he would like to reserve. </p>

<p>Information about any listed item can be brought forth by pressing the Details button to bring up a window of properties similar to the one in <a name="rf5"><a href="9717ef5.htm">Figure 5</A>. It should be straightforward to extend the output so that it provides a type-sensitive display of properties; that is, computer properties would differ from those of a television. The basic equipment property screen shows a list of current reservations. </p>

<p><b>DDJ</b></p>

<H4><a name="l1">Listing One</H4>

<pre>class PersonInterface : public DBInterface    {
    char Name[50];
    DATE Birthday;
    }
class Person : public DBObject
    {
    Person() {AddInterface(PersonInterface);}
    }
class StudentInterface : public DBInterface
    {
    char Major[50];
    }
class Student : public Person
    {
    Student () {AddInterface(StudentInterface);}
    }
class BookInterface : public DBInterface
    {
    char Title;
    INSTID Author;
    char Publisher[50];
    }
class Book : public DBObject
    {
    Book() {AddInterface(BookInterface);}
    }
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>DBObjectQuery Query(ODB);student = Query.GetFirst(Student, " Birthday &lt; 1972");
while (student)
    {
    Iperson = studentrGetInterface(Person);
    cout &lt;&lt; Iperson-&gt;GetName();
    student = Query.GetNext();
    }
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>DBObjectQuery Query(ODB);From = "Persons JOIN Books ON Persons.ID = Books.Author";
Where = "Books.Publisher = 'Random House'";
current = Query.GetFirst(From,Where);
while (current)
    {
    Iperson = current-&gt;GetInterface(Person);
    cout &lt;&lt; "Author: " &lt;&lt; IpersonrGetName();
    current = Query.GetNext();
    }
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>struct InterfaceRecord : public LinkList&lt;InterfaceRecord&gt;    {
    flag Loaded;
    CLASSID ClassID;
    flag NewInterface;
    DBInterface *Interface;
    };
bool DBObject::Save()
    {
    bool Status = true;
    InterfaceRecord *Record;
    ODB.BeginTransaction();
    try {
        Record = Interfaces.GetFirst();
        while (Record &amp;&amp; Status)        // Save each interface.
            {
            Status = SaveInterface(Record);
            Record = Interfaces.GetNext(Record);
            }
        }
    catch (...)
        {
        Status = false;
        }
    if (Status) ODB.Commit();
    else ODB.Rollback();
    return Status;
    }
bool DBObject::SaveInterface(InterfaceRecord *Record)
    {
    bool Status = true;
    DBInterface *Interface = Record-&gt;Interface;
    if (Interface &amp;&amp; Record-&gt;Loaded)
        {
        Status = Interface-&gt;Update();   // Save preexisting interface.
        }
    else    {
        if (!Interface)                 // Need to access interface.
            {
            CLASSID ClassID = Record-&gt;ClassID;
            Interface = ODB.CreateInterface(ClassID,InstID);
            Record-&gt;Interface = Interface;
            }
        if (Record-&gt;NewInterface)   // Create new interfaces.
            {
            Status = Interface-&gt;Create();
            Record-&gt;NewInterface = false;
            Record-&gt;Loaded = true;
            }
        }
    return Status;
    }
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<H4><a name="l5">Listing Five</H4>

<pre>DBInterface* DBObject::GetInterface(CLASSID ClassID)     {
    InterfaceRecord *Record;
    Record = SearchInterfaceCache(ClassID);
    if (!Record)                        // Not in cache.
        {
        LoadInterfaceList();
        Record = SearchInterfaceCache(ClassID);
        if (!Record) return NULL;           // Not a member.
        }
    if (!Record-&gt;Interface)             // No instance exists...
        {
        Record-&gt;Interface = ODB.CreateInterface(ClassID,InstID);
        Record-&gt;Interface-&gt;Init();
        }
    if (!Record-&gt;Loaded &amp;&amp; !Record-&gt;NewInterface)
        {
        Record-&gt;Interface-&gt;Load()       // Load data from DB.
        Record-&gt;Loaded = true;
        }
    return Record-&gt;Interface;
    }
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>
<H4><a name="l6">Listing Six</H4>

<pre>BINDING(Class, Member, Type, Index)    Class = Name of the interface.
    Member = Name of the class member.
    Type = String, Date, Double, Long
    Index = Controls whether an index is created on the field.
VAR_Binding(Class, Member, Type, Size, Sizemember, Index)
    Size = Bytes of member.
    Sizemember = Variable to recieve member's active size.
</pre>
<P>
<a href="#rl6">Back to Article</A>
</P>
<H4><a name="l7">Listing Seven </H4>

<pre>ComputeOffset(Class,Member)     ((long)(&amp;((Class *)0)-&gt;Member) +
         (long)(&amp;((DBInterface *)0)-&gt;_Locator) - 
               (long)(&amp;((Class *)0)-&gt;_Locator))
</pre>
<P>
<a href="#rl7">Back to Article</A>
</P>
<H4><a name="l8">Listing Eight</H4>

<pre>class IAnimal : public DBInterface    {
    private:
        DWORD _Sz;
        char Name[30];
        unsigned long Age;
    public:
        INIT_INTERFACE(IAnimal);
        void SetData(Name,Age);
        char* GetName();
        unsigned long GetAge();
    };
BEGIN_BINDING_TABLE(IAnimal,2);
    VAR_BINDING(IAnimal,Name,FT_String,30,_Sz,true);
    BINDING(IAnimal,Age,FT_Long,false);
END_BINDING_TABLE;
</pre>
<P>
<a href="#rl8">Back to Article</A>
</P>
<H4><a name="l9">Listing Nine</H4>

<pre>Scheduler(ObjectDatabase &amp;ODB);flag AddReservation(Equipment &amp;Item, Schedule &amp;Reservation);
flag RemoveReservation(Equipment &amp;Item, DATETIME &amp;StartTime);
flag RemoveReservation(Equipment &amp;Item, Schedule &amp;Reservation);
Equipment* QueryAll(CLASSID EQtype, DATETIME *Start, DATETIME *End,
            User *ByWhom=NULL, Location *Place=NULL);
Equipment* QueryAvailable(CLASSID EQtype, DATETIME &amp;Start, DATETIME &amp;End);
Equipment* QueryNext();
</pre>
<P>
<a href="#rl9">Back to Article</A>
</P>
<H4><a name="l10">Listing Ten</H4>

<pre>SELECT Equipment.ID FROM (IEquipment INNER JOIN IScheduleSet ON IEquipment.ID = 
IScheduleSet.Owner) INNER JOIN ISchedule ON 
IScheduleSet.Member = ISchedule.ID WHERE 
(ISchedule.StartTime &gt;= 12/9/1996) AND 
(ISchedule.EndTime &lt;= 12/9/1996 0:0) AND 
(ISchedule.Who = 752) AND 
(ISchedule.Place = 4) AND 
(IEquipment.Type = 2004)
</pre>
<P>
<a href="#rl10">Back to Article</A>
</P>
<H4><a name="l11">Listing Eleven</H4>

<pre>flag Equipment::IsAvailable(DATETIME &amp;Start, DATETIME &amp;End)    {
    char DateQuery[100];
    IScheduleSet *Schedules;
    ReservedString(DateQuery,Start,End);
    Schedules = (IScheduleSet *)GetInterface(ScheduleSetID);
    if (!Schedules) return false;
    DBObject *Item = Schedules-&gt;GetFirst(ScheduleID,DateQuery);
    if (Item) delete Item;
    return Item == NULL;        // True if no Reservation.
    }
</pre>
<P>
<a href="#rl11">Back to Article</A>
</P>
<H4><a name="l12">Listing Twelve</H4>

<pre>// Object Database Test<p></p>
#include &lt;stdio.h&gt;
#include &lt;conio.h&gt;
#include &lt;sqlobj.h&gt;
<p></p>
#define PersonID 1001
#define ChildSetID 1002
<p></p>
class Person : public DBObject
    {
    public:
        Person(ObjectDatabase &amp;ODB) : DBObject(ODB)
            {
            AddInterface(PersonID);
            AddInterface(ChildSetID);
            }
    };
class Children : public DBSetInterface
    {
    public:
        INIT_SETINTERFACE(Children);
        flag AddPerson(Person *p) {return AddObject(p);}
        flag RemovePerson(Person *p) {return RemoveObject(p);}
    };
class PersonInterface : public DBInterface
    {
    private:
        char Name[30];
        DWORD _NameSize;
        unsigned long Age;
    public:
        INIT_INTERFACE(PersonInterface);
        void SetData(char *name, long age)
            {
            strcpy(Name,name);
            Age = age;
            }
        char* GetName() {return Name;}
        unsigned long GetAge() {return Age;}
    };
BEGIN_BINDING_TABLE(PersonInterface,2);
    VAR_BINDING(PersonInterface,Name,FT_String,30,_NameSize,true);
    BINDING(PersonInterface,Age,FT_Long,false);
END_BINDING_TABLE;
<p></p>
char *Names[] = {"Beth","Debbie","Bob","Mary","John","Laura",NULL};
long Ages[] = {43,13,12,21,6,10,0};
<p></p>
void ComplexQuery(ObjectDatabase &amp;ODB, char *ChildName)
    {
    DBObject *Current;      // Prints the parents of a Child.
    char *From, Where[100];
    PersonInterface *IPerson;
    DBObjectQuery Query(ODB);
    From = "(PersonInterface AS Parent "
           "INNER JOIN Children ON Parent.ID = Children.Owner) INNER JOIN "
           "PersonInterface AS Child ON Children.Member = Child.ID ";
    sprintf(Where,"Child.Name = '%s'",ChildName);
    Current = Query.GetFirst(From,Where);
    while (Current)
        {
        IPerson = (PersonInterface *)Current-&gt;GetInterface(PersonID);
        printf("Parent: %s\n",IPerson-&gt;GetName());
        delete Current;
        Current = Query.GetNext();
        }
    return;
    }
void View(ObjectDatabase &amp;ODB)          // Prints the names of Beth's
    {                                   // children who are older than 12.
    DBObject *Parent;
    Children *IChildren;
    PersonInterface *IPerson;
    DBObjectQuery Query(ODB);
    Parent = Query.GetFirst(PersonID,"Name='Beth'");
    IPerson = (PersonInterface *)Parent-&gt;GetInterface(PersonID);
    IChildren = (Children *)Parent-&gt;GetInterface(ChildSetID);
    printf("Name: %s\n",IPerson-&gt;GetName());
    printf("Age: %lu\n",IPerson-&gt;GetAge());
    DBObject *Child = IChildren-&gt;GetFirst(PersonID,"Age &gt;= 12");
    while (Child)
          {
          IPerson = (PersonInterface *)Child-&gt;GetInterface(PersonID);
          printf("Child: %s (%lu)\n",IPerson-&gt;GetName(),IPerson-&gt;GetAge());
          delete Child;
          Child = IChildren-&gt;GetNext();
          }
    delete Parent;
    return;
    }
void Make(ObjectDatabase &amp;ODB)          // Adds users to the database
    {                                   // making the first the parent
    Person Parent(ODB);                 // of all the others.
    Children *IChildren;
    PersonInterface *IPerson;
    IPerson = (PersonInterface *)Parent.GetInterface(PersonID);
    IChildren = (Children *)Parent.GetInterface(ChildSetID);
    IPerson-&gt;SetData(Names[0],Ages[0]);
    Parent.Save();
    for (int i=1; Names[i]; i++)
        {
        Person Child(ODB);
        IPerson = (PersonInterface *)Child.GetInterface(PersonID);
        IPerson-&gt;SetData(Names[i],Ages[i]);
        IChildren-&gt;AddPerson(&amp;Child);
        Child.Save();
        }
    Parent.Save();
    return;
    }
main()
    {
    ObjectDatabase ODB("Persons","","");
    ODB.Connect();
    REGISTER_INTERFACE(ODB,PersonInterface,PersonID);
    REGISTER_SETINTERFACE(ODB,Children,ChildSetID);
    Make(ODB);
    View(ODB);
    ComplexQuery(ODB,"John");
    ODB.Disconnect();
    getch();
    return 0;
    }
</pre>
<P>
<a href="#rl12">Back to Article</A>
</P>
<H4><a name="l13">Listing Thirteen</H4>

<pre>// Reservation System #include &lt;assert.h&gt;
#include &lt;stdio.h&gt;
#include &lt;conio.h&gt;
#include &lt;sqlobj.h&gt;
<p></p>
#pragma hdrstop
#include &lt;schedule.h&gt;
void PrintSchedule(Equipment &amp;Item)
    {
    IScheduleSet *Reservations;
    Reservations = (IScheduleSet *)Item.GetInterface(ScheduleSetID);
    if (!Reservations) return;
    Schedule *Reservation = (Schedule *)Reservations-&gt;GetFirst();
    while (Reservation)
          {
          ISchedule *iReservation;
          iReservation = (ISchedule*)Reservation-&gt;GetInterface(ScheduleID);
          if (iReservation)
            {
            char Start[100], End[100];
            DateToString(Start,iReservation-&gt;GetStartDate());
            DateToString(End,iReservation-&gt;GetEndDate());
            printf("     Reserved: %s TO %s\n",Start,End);
            }
          delete Reservation;
          Reservation = (Schedule *)Reservations-&gt;GetNext();
          }
    return;
    }
void PrintEquipment(ObjectDatabase &amp;ODB)
    {
    Scheduler Reservations(ODB);
    Equipment *equipment = Reservations.QueryAll(EquipmentID);
    while (equipment)
        {
        IEquipment *iEquipment;
        iEquipment = (IEquipment*)equipment-&gt;GetInterface(EquipmentID);
        if (iEquipment)
            {
            printf("Item: %s\n",iEquipment-&gt;GetDescription());
            PrintSchedule(*equipment);
            }
        delete equipment;
        equipment = Reservations.QueryNext();
        }
    return;
    }
void PrintUsers(ObjectDatabase &amp;ODB)
    {
    DBObjectQuery Query(ODB);
    User *user = (User *)Query.GetFirst(UserID);
    while (user)
        {
        Users *iUser;
        iUser = (Users *)user-&gt;GetInterface(UserID);
        if (iUser) printf("User: %s\n",iUser-&gt;GetName());
        delete user;
        user = (User *)Query.GetNext();
        }
    return;
    }
void Test(ObjectDatabase &amp;ODB)
    {
    Scheduler Reservations(ODB);
    Equipment Sony(ODB,"Sony Monitor");
    Sony.Save();
    Computer IBM(ODB,"IBM Computer");
    Schedule Reservation(ODB,NULL,NULL,"1/2/1996","2/3/1997");
    Reservations.AddReservation(IBM,Reservation);
    Reservations.RemoveReservation(IBM,"1/2/1996");
    Reservation.Save(); 
    IBM.Save();
    PrintEquipment(ODB);    
    return;
    }
main()
    {
    ObjectDatabase ReservationODB("Reservations","","");
    flag Status = ReservationODB.Connect();
    if (!Status)
        {
        printf("\nCan't Connect To Database\n");
        getch();
        }
    RegisterInterfaces(ReservationODB);
    Test(ReservationODB);
    getch();
    ReservationODB.Disconnect();
    return 0;
    }
</pre>
<P>
<a href="#rl13">Back to Article</A>
</P>








</body>
</html>
