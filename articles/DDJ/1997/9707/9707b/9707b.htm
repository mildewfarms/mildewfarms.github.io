<html>
<META NAME="year" CONTENT="1997">
<head>
<title>Dr. Dobb's Journal July 1997: A Memory-Constrained Image-Processing Architecture</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>A Memory-Constrained Image-Processing Architecture</h1>

<p><i>Dr. Dobb's Journal</i> July 1997
</p>
<h2>Patterns for processing pictures</h2>

<H3>By Mayur Patel</H3>

 <I>Mayur is a member of the software development staff at Cinesite Digital Film Center, a full-service post-production and visual effects facility. He can be contacted at mpatel@cinesite.com.</I>

<hr>
Sidebar: <I><a name="rs1"><a href="9707bs1.htm">A Macro Technique for Managing Types</A></I>
<HR>
<p>Image-processing applications are hungry for both processing time and memory. CPU demand typically does not pose a problem, since most operating systems' schedulers can adequately balance the needs of competing applications. However, virtual memory is the only service provided by the operating system to deal with the memory load. Allowing an image-processing application to swap memory pages to disk impairs all the activity on the machine.</p>

<p>A good image-processing library should deal with this memory problem with minimal supervision from you. In this article, I present an image-processing architecture that gives you a reasonable degree of control over memory consumption.</p>

<h3>Tile On Demand</h3>

<p>Tile-based processing consists of dividing an image into small, rectangular pieces called "tiles," processing each tile, and reassembling the image. The principle of locality applies, so an image-processing operation usually requires input tiles of approximately the same area as the output tile. Clearly, processing each tile requires less memory than processing the entire image.</p>

<p>Many existing image-processing libraries support scan-line-based rather than tile-based image processing. Scan-line libraries are easy to implement and often perform efficiently because most image file formats store data in scan-line chunks. However, a tile-based approach retains the same advantages (scan-lines are simply tiles with a height of one pixel) and is more general.</p>

<p>One case where you benefit directly from flexible tile size is with transform-based image compression. Many popular Discrete Cosine Transform-based compression algorithms require 8&times;8 tiles. With scan-line-based libraries, you must construct 8&times;8 units by writing eight scan lines into a buffer and moving data back and forth from the buffer accordingly. This is unnecessary busy work; it is better to provide tiles in whatever proportions you request.</p>

<p>Another convenient feature is lazy evaluation. Processing on demand reduces the expense of image processing and promotes interactivity. For example, users may reorder the sequence of operations several times before explicitly requesting an output image. Users may also require only a small portion of the output image or may extract data somewhere in the middle of the pipeline. Such requests can be serviced in less time than it takes to produce the entire output. Demand-driven processing helps to minimize wasted computation in these situations.</p>

<p>In this framework, data requests propagate from the output toward the input (see <a name="rf1"><a href="9707bf1.htm">Figure 1</A>). The input satisfies those requests and triggers the appropriate computation, and the result flows back toward the output. Along the way, operations are applied to the data according to the dependency information already supplied through the application. By the time the data reaches the output, all the specified operations have been performed.</p>

<p>Coupling demand-driven execution with tile-based processing yields an environment with great potential. Certainly, these features carry with them nontrivial overhead. However, they also work together to reduce the total amount of memory required to process images. The extra cooking time is often worth the wait.</p>

<h3>Object Interaction</h3>

<p>This tile-based image-processing architecture is inherently object oriented. The interaction between three fundamental classes -- <i>Image</i>, <i>ImageTile</i>, and <i>ImageMan</i> -- is the foundation of the system.</p>

<p>Tiles constitute the interface between the library and the application. You need not be aware of the internal representation of the image as long as the tile implementation is sufficiently general to handle the widest range of cases.</p>

<p>Applications request pixels in two ways. The more convenient interface is <i>Image:: newTile(),</i> which allocates a new tile and fills it with image data. The other interface is <i>Image::fillTile()</i>, which accepts an existing tile for processing and overwrites its contents. The API is as simple as that.</p>

<p>Behind the scenes, the image interacts with the image manager; see <a name="rf2"><a href="9707bf2.htm">Figure 2</A>. <i>Image::newTile()</i> requests (which go to the image manager) let the image manager provide a host of services, including caching. The manager eventually comes back to the image and uses its <i>Image::fillTile()</i> method to compute data.</p>

<p>In the obvious implementation of this interaction pattern, there is one inefficiency. When the system receives a <i>newTile()</i> request, it immediately allocates memory. <i>Image::fillTile()</i> then pulls input data into scope for local processing. The <i>fillTile()</i> method most likely uses the <i>newTile()</i> interface to request data, so memory is allocated at every step as requests propagate backward. These allocations aren't actually needed until the data begins to flow forward.</p>

<p>A more constrained approach allocates memory only after the input data is available, but I prefer the former behavior for two reasons: </p>

<ul>
  <li>It supports a flexible interface between the image and image manager. 
  <li>It supports a simple developer interface for the implementation of real image processing operators.
</ul>

<h3>Implementation</h3>

<p>The tiles in my architecture use the (X,Y,Z,C) image-space model. The X component represents the width, Y represents the height, C represents the color channel, and Z the frame number. This model lets you describe images of any number of channels. It also lets you describe a series of images as a sequence, which is useful for processing digital video or film since an animation is expected to consist of several frames, each with a uniform width, height, and channel count.</p>

<p>The coordinate (x,y,z,c) is sufficient to specify the smallest datum. In addition to these coordinates, my tile structure (see <a name="rf3"><a href="9707bf3.htm">Figure 3</A>) contains width and height elements that make it possible to represent a one-channel area from an image. You can access pixel data using methods provided by the tile class.</p>

<p>Different applications will require pixels of different precision. For example, 8 bits per color channel commonly represents image data. For higher quality work, however, 16 bits per channel is more useful. In some cases, particularly in scientific computing, 32-bit floating-point values (0.0 to 1.0) best represent each plane. This implementation supports all three options. A method allows typecasting the data between supported types.</p>

<p>Granted, using macros in C++ is generally bad programming style. Likewise, cute macro tricks in C also represent poor programming style. However, I have used both to encapsulate data-type support. Any technique, with disciplined execution, has its place. In this situation, a new data type may be incorporated with the addition of only one function. No changes to existing code are necessary. You can judge the case for yourself. This approach is discussed in more detail in the accompanying text box entitled, "A Macro Technique for Managing Types." </p>

<p>The tile class inherits the properties of a referenced object. Smart pointers may be used to organize tiles at the application level. The method <i>Tile::deleteTile()</i> is included to complement the <i>Image::newTile()</i> method. <i>Image::newTile()</i> provides construction services; <i>Tile::deleteTile()</i> provides dereferencing and destruction services.</p>

<p>My image manager implementation is generic, providing the minimum set of services required to meet its obligations. At most, only one image manager may exist at any time. An auxiliary class regulates access. The Singleton design pattern applies well to the image manager, making sure only one instance of a class exists at any time. Blending the referenced-object pattern with the Singleton pattern also ensures that the image manager is deallocated when it is not required. This is useful if image processing represents only a small portion of the total application. Attaching an image-manager reference to images through the base class ensures that the image manager is instantiated during the lifetime of any of its potential clients.</p>

<p>I provide two base classes for images: <i>InputImage</i> and <i>SampledImage</i>. <i>InputImage</i> best suits images (described as mathematical functions) that may have variable resolution or unlimited range. <i>SampledImage</i> best suits images of finite resolution and range. </p>

<p><i>SampledImage </i>uses the Strategy design pattern to deal with out-of-range behavior. The Strategy design pattern encapsulates implementations of an algorithm so that the algorithm isn't hardwired into a class. A <i>SampledImage</i> may receive a request during a convolution calculation for data beyond its range of valid samples. Fill-strategy objects may be attached to <i>SampledImage</i> to determine how this area is validated before the tile is returned to the client.</p>

<p>I don't use a base class for the output image. Since the output can flow to the screen or printer as easily as to a file, the output mechanism will often depend upon application-specific code. Additionally, the demand-driven characteristic of the architecture makes it easy not to place constraints on the output.</p>

<h3>Example Applications</h3>

<p><a name="rl1"><a href="9707b.htm#l1">Listing One</A> s a test program that enhances the contrast of an SGI RGB file. The program first specifies data dependencies using class constructors. The first object opens an SGI RGB-format file. The second object executes the contrast-enhancement operation. The last object writes the data to an output file, possibly converting the data type. Once these dependencies are defined, instantiating the output image triggers processing of this simple chain.</p>

<p>SGI RGB files are both powerful and flexible, supporting 8- or 16-bit integer channels and any number of color channels. As you can see from the <i>Contraster</i> class (see <a name="rl2"><a href="9707b.htm#l2">Listings Two</A> and <a name="rl3"><a href="#l3">Three</A>), implementing new operators is straightforward. <i>Contraster</i> consists of a constructor, a destructor, and a <i>fillTile()</i> implementation. Developers of new image-processing operators are well shielded from the image manager and other system complexities.</p>

<p>The <i>Contraster</i> object executes the contrast-enhancement operation using floating-point math. I did this for two reasons. First, it demonstrates how easy it is to typecast the data in tiles. (But be warned: Typecasting is as expensive as any pixel-processing operation.) Second, using floating-point math makes it easy to deal with over- and under-exposure problems. Integer values may overflow or underflow, whereas floating-point values retain data integrity. There are ways around integer saturation, but I show floating-point in action for the sake of example.</p>

<h3>Extending the Library</h3>

<p>Since my image-manager implementation doesn't take full advantage of the flexibility of the architecture, it is a good place to start extending my implementation. One of the first features that should be incorporated into the image manager is a tile-caching mechanism. Imagine a chain of convolution operations executed using the current implementation. As the requests for tiles propagate toward the input, the size of the requested area becomes larger. Over time, these requests will result in excessively redundant calculations.</p>

<p>A cache minimizes redundancy by storing data that is perceived to be frequently used. Although the cache requires more RAM -- one of the constraints you're trying to overcome -- you can control how much RAM it uses. Giving some RAM back to the processing engine for caching is a guard against extremes in the space-time tradeoff. Remember, caching operator data saves more than the computation at that node in the pipeline. It saves computations at every node up to and including that operation.</p>

<p>How you implement the caching mechanism depends on the execution characteristics that you want the library to have. You can cache individual tiles, color channels, or entire images. You may need predictive caching or reactive caching. Matching your needs with a cache implementation is well worth the development time.</p>

<p>Earlier, I described why I have two image base classes. The <i>InputImage</i> encapsulates infinite-range or infinite-resolution data. The <i>SampledImage</i> encapsulates traditional image representations. If the caching technique you prefer depends on the image's resolution or range, you will not be able to cache <i>InputImage</i> images. If so, then you may add <i>InputImage</i> support by making <i>InputImage</i>'s <i>newTile()</i> method defer to the image manager. This gives you more flexibility in experimenting with new caches.</p>

<p>Once you have implemented a cache, it would be nice to offer forced caching. Some image operators, such as a Fast Fourier Transform (FFT), are not localized. To execute an FFT, it is easiest to process the entire image at once. And it isn't cheap. Forced caching lets you identify and address hot spots for the caching system, such as these nonlocalized operators. Without forced caching, or if there isn't enough room to cache the entire FFT image, each tile request arriving at the FFT image will likely result in recalculation of the entire image. </p>

<p>Another characteristic of the current image manager is that tile sizes are not regulated. Currently, the application is on its honor not to request more data than it actually needs at one time. Poorly designed applications may request the entire image in one call. The current image manager will propagate this request. This defeats the purpose of having an architecture designed to constrain memory demand.</p>

<p>Request decomposition allows the image manager to decompose requests for large tiles into several requests for smaller tiles. Processing each smaller tile requires less memory than the whole. Another benefit of request decomposition is that the requests for the many small tiles may be executed in parallel. Giving the image manager the power to dispatch concurrent requests empowers the entire system with concurrent execution behavior. The developer of image-processing operators doesn't need to worry about writing parallel code.</p>

<h3>Conclusion</h3>

<p>The source code accompanying this article (see "Availability," page 3) implements the framework of this architecture. It is written in C++ and should be fairly easy to port. I encourage you to develop the architecture into an image-processing library custom fitted to your specific environment. For small systems, it should allow processing pipelines of considerable complexity. For multiprocessor systems, it should allow multiple renders to coexist without malicious contention for resources.</p>

<p>The Silicon Graphics Imagevision Library provides a superset of all the features I describe here, and I recommend that IRIX users evaluate it. However, it is not available for other platforms.</p>

<h3>Acknowledgment</h3>

<p>Thanks to Bob Amen and Cinesite Digital Film Center in Hollywood, California, for making equipment available for testing.</p>

<HR>

<H4><a name="l1">Listing One</H4>

<pre>#include &lt;SGIReader.h&gt;#include &lt;Contraster.h&gt;
<p></p>
#include &lt;SGIWriter.h&gt;
<p></p>
int main ( int argc, char *argv[] )
{
   SGIReader in( "test.rgb" );     
   Contraster contrasted( &amp;in, 1.3 );   
   SGIWriter 
      out( "out.rgb", (InputImage *)&amp;contrasted, in.getArea(), UChar);
   return ( 0 );
}
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>// File: Contraster.h -- (c) 1996 Mayur Patel<p></p>
#ifndef Contraster_CLASS
#define Contraster_CLASS
<p></p>
#include &lt;InputImage.h&gt;
#include &lt;Type.h&gt;
<p></p>
class Contraster : public InputImage {
   public:
      Contraster( InputImage *pIn, float rLumFactor, float rGreyPoint = 0.5 );
      ~Contraster( void );
      int
      fillTile( ImageTile *pWriteHere );
   protected:
      InputImage    *_pHost;
      float     _rLumFactor;
      float     _rGrey;
};
#endif
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>// File: Contraster.C -- (c) 1996 Mayur Patel<p></p>
#include &lt;Contraster.h&gt;
#include &lt;assert.h&gt;
<p></p>
Contraster::Contraster( InputImage *pIn, float rLumFactor, float rGrey )
:  InputImage( Real )
{
   _pHost = pIn;
   if ( _pHost )
      _pHost-&gt;registerReference();
   _rLumFactor = rLumFactor;
   _rGrey = rGrey;
}
Contraster::~Contraster( void )
{
   if ( _pHost )
      _pHost-&gt;unregisterReference();
   return;
}
int
Contraster::fillTile( ImageTile *pWriteHere )
{
   int          iRet = 0;
   ImageTile        *pTile;
   unsigned long    lLoop;   
   register float   *pSrc;
   register float   *pDest;
   if ( _pHost &amp;&amp; pWriteHere )
   {
      pTile = _pHost-&gt;newTile( pWriteHere-&gt;getArea() );
      if ( pTile )
      {
         assert( getType() == pWriteHere-&gt;getType() );   
         pTile-&gt;typecast( Real );
         pSrc = (float *) pTile-&gt;getBuffer();
         pDest = (float *) pWriteHere-&gt;getBuffer();
         lLoop = 
            pWriteHere-&gt;getArea().width *
            pWriteHere-&gt;getArea().height;
         while ( lLoop )
         {
            lLoop--;
            // contrast enhance:
            *pDest = _rGrey + (( *pSrc - _rGrey ) * _rLumFactor );
            // clamp over-exposure &amp; under-exposure:
            *pDest = ( *pDest &lt; 0.0 ) ? ( 0.0 ) : ( *pDest );
            *pDest = ( *pDest &gt; 1.0 ) ? ( 1.0 ) : ( *pDest );
            pDest++;
            pSrc++;
         }
         pTile-&gt;deleteTile();
      }      
   }
   return ( iRet );
}
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>   #ifndef TYPESEPER   #define TYPESEPER ;
   #endif
<p></p>
   #ifndef TYPEENDOFLIST
   #define TYPEENDOFLIST ;
   #endif
<p></p>
   TYPEMACRO( float, Float )
   TYPESEPER
   TYPEMACRO( int, Int )
   TYPEENDOFLIST
<p></p>
   #ifdef TYPESEPER
   #undef TYPESEPER
   #endif
<p></p>
   #ifdef TYPEENDOFLIST
   #undef TYPEENDOFLIST
   #endif
<p></p>
   #ifdef TYPEMACRO
   #undef TYPEMACRO
   #endif
</pre>
<P>
<a href="9707bs1.htm#rl4">Back to Sidebar</A>
</P>
<H4><a name="l5">Listing Five</H4>

<pre>enum Type {<p></p>
#define TYPESEPER ,
#define TYPEENDOFLIST
#define TYPEMACRO( type, label ) label
#include &lt;Type.m&gt;
};
</pre>
<P>
<a href="9707bs1.htm#rl5">Back to Sidebar</A>
</P>
<H4><a name="l6">Listing Six</H4>

<pre>void addition( Type opType, void *pDest, void *pOp1, void *pOp2 )
{
   switch( opType )
   {
   #define TYPEMACRO( type, label ) \
         case( label ) : \ 
            *(( type * ) pDest ) = \
               ( type ) *pOp1 + ( type ) *pOp2; \
            break;
   #include &lt;Type.m&gt;
 default:
         break;
   };
   return;
}
</pre>
<P>
<a href="9707bs1.htm#rl6">Back to Sidebar</A>
</P>
<p><b>DDJ</b></p>



<HR><I>Copyright &copy; 1997, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
