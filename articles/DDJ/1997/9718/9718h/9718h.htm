
<HTML><HEAD><TITLE>DDJ, Spring1997: Fuzzy Logic Engine</TITLE></HEAD>
<body bgcolor="FFFFFF">



<H1>
A Tunable Fuzzy Logic Engine 
</H1>

Spring 1997 <I>Dr. Dobb's Journal</I>
<H2>
Enhancing and extending an existing fuzzy
logic engine</H2>
<H3><I>
by Richard Sevenich and Paul Leathers
</I></H3>

Richard is a professor of computer science at Eastern Washington University. He can be contacted at <I>rsevenich@ewu.edu</I>. Paul is completing a master's degree in computer science at Eastern Washington University and can be contacted at <I>pleather@sirti.org</I>.
<HR>
<IMG SRC="9718hins.gif" WIDTH=105 HEIGHT=117 ALIGN=LEFT HSPACE=6 VSPACE=3 ALT="Insert">



Fuzzy logic has become a common tool in control engineering and decision making. In the senior year of Eastern Washington University's computer-science curriculum, students typically carry out a large and practical project. One such project, conducted in the spring of 1995, was to add useful enhancements to an existing Fuzzy Logic Engine (FLE).

<P>
Rather than start from scratch, we chose to use Greg Viot's article "Fuzzy Logic in C" (<I>Dr. Dobb's Journal,</I> February 1993) and the follow-up article by John Tucker et al., "Fuzzy Logic in C: An Update" (<I>Dr. Dobb's Journal,</I> April 1994) as a springboard. The latter article included an extended version of Viot's Fuzzy Logic Engine that can be used in a limited range of application problems. It is an excellent first exposure, uncluttered with sophisticated (albeit useful) features. (For background information on fuzzy logic, see Earl Cox's <I>The Fuzzy Systems Handbook</I>, AP Professional, 1994, and the two-part interview with fuzzy logic inventor Lotfi Zadeh, <I>Dr. Dobb's Journal</I>, July and August 1994.)

<P>
In this article, we'll focus on two enhancements to Viot's FLE. The first is a potentially robust online-tuning capability as supported by a tuning language and its associated translator. The second is a dynamic simulator allowing users to try out their fuzzy logic parameter choices in an active setting. For our purposes, we assumed the application was in automated control using fuzzy logic control algorithm, although the Tuning Language (TL) would be equally useful for setting up a decision making package.

<P>
<H2>The Fuzzy Logic Engine</H2>

There are three major pieces of application software in this project: 
<P>
<UL>
<LI>FLE (adapted from the supplemented Viot program).
<LI>Translator.
<LI>Simulator.
</UL>

<P>
The enhanced Viot program, presented by Tucker, Fraley, and Swanson, consisted of an FLE with up to two input variables and one output variable. Fuzzy sets for inputs and outputs did not allow modifiers (called "hedges"). For example, a temperature could be "cold" but not "very cold." Conditional rules were supported, but not unconditional rules. The rules were extensible to support the fuzzy sets appropriately. The AND connective was provided for rule antecedents, so that an antecedent could be something like <I>"If Temperature is COLD and Humidity is HIGH, ..."</I>. This AND was interpreted as the traditional Zadeh AND. The OR connective was not provided in antecedents, but it could be accommodated with multiple rules.

<P>
Students were encouraged to make the modifications needed for a selection of enhancements, such as hedges or connectives other than the traditional Zadeh choices. However, the retention of one crucial feature from the preexisting program was required&#151;the program had to initialize its FLE by reading a data file designed for that purpose. This provides convenient flexibility in applying the software to different problems by modifying the initialization data file. However, it is also a key feature needed in tuning the algorithm and it is useful in establishing the simulator.

<P>
In most cases, students folded the simulator in with the FLE as a single executable file. However, in all cases, the translator was a separate executable file.

<P>
The software was developed in a Linux operating-system environment. This was attractive because the online tuning feature relies on the ability of Linux to open multiple consoles in a multitasking fashion. Of course, the needed tools&#151;lex, yacc, and the GNU C compiler&#151;were free, as was the entire Linux system. Also, Linux is used elsewhere in our curriculum and was familiar to the students. The source code developed in this project is extensive and is
available electronically.

<P>
These two enhancements&#151;tuning and simulation capabilities&#151;are relatively independent of the particular fuzzy logic software package. Hence, the ideas presented here could easily be adapted to other fuzzy logic approaches. In fact, upon completion, several of the student projects had taken quite distinct approaches to the FLE. Any of those projects could have been used as the vehicle used in this article.

<P>
<H2>The Tuning Language and Translator</H2>


One of the intents of the TL is to provide a convenient and intuitive way for such a person to create an initialization data file. The person using the fuzzy logic software should have a thorough understanding of fuzzy logic, but need not be a programmer. The fact that the software initializes the FLE based on the contents of a data file is the key to the TL.

<P>
You might argue that if the only task of the TL is to automate the preparation of that initialization data file, you might as well prepare the data file with an editor. However, such hand preparation of a data file for online tuning is risk prone: A minor typo can cause a software crash. If that software is controlling an expensive hardware installation, such a failure could be dangerous. Consequently, the second major task of the TL is to catch errors before run time, insofar as is possible. These errors might be classed as superficial (typos, for example) or significant (for instance, inconsistencies in Fuzzy Input Sets). The translator converts the user's TL source code into an initialization data file and performs this error checking.

<P>
The translator was constructed with the help of lex and yacc. A complete discussion of the use of lex and yacc is outside the scope of this article, but the book <I>lex &amp; yacc</I>, by John Levine, Tony Mason, and Doug Brown (O'Reilly &amp; Associates, 1992) is a good resource. 

<P>
Examination of the chosen version of the TL makes it particularly evident that this software is prototypical. An industrial-strength application would require consultation with potential users to design a truly useful and convenient TL. It is possible that such development would result in a general-purpose text-based language on top of which a family of graphical user interfaces, aimed at specific niche application markets, could be built.

<P>
<H2>Tuning Language Source Code and Error Annunciation</H2>


The TL defines the input fuzzy set families, output fuzzy set families, and rules. Other features can be incorporated, such as the method of inference to be used in rule evaluation and the method of defuzzification. A sample TL source file appears in <A HREF="9718hlis.htm#1">Listing One</A>.

<P>
Note how the user can create a few simple rules for controlling room temperature with a fan. For the sake of readability, reserved words appear in lowercase and user-specified identifiers in capitals; however, the translator is not case sensitive. Text enclosed in C-style comment delimiters ("/*...*/") has been included strictly for clarity, but is not valid input.

<P>
To see how the fuzzy set definitions work, consider the four lines defining the sets within the TEMPERATURE domain. The group of four numbers within braces describes the shape of the set. In particular, the x-y graph of a given set is a trapezoid whose base runs along the x-axis from the first of the four numbers to the last, and whose top, at y=1, runs between the second and third numbers.

<P>
Thus, in <A HREF="9718hlis.htm#1">Listing One</A>, WARM begins at 60 degrees, ends at 90 degrees, and has its maximum value (=1) between 70 and 80 degrees. The meaning of an x-value depends on the domain in question, but a y-value always represents the degree of fuzzy set membership (0 indicating exclusion from the set, and 1 representing complete membership) that is associated with a given x. Conditional statements of the form "if ... then ..." are rules. Note the use of clarifying parentheses in certain rules. Without punctuation, the conjunctions "and" and "or" associate from left to right.

<P>
The structure of this particular translator input can be somewhat loose. There is no declaration section or rules section. Identifiers (domains and sets) must be defined before they are used in rules or other definitions, but, provided this intuitive restriction is obeyed, rules and definitions may be freely mixed.

<P>
Let's look at several examples to observe how errors in the user's TL source code are identified. The errors exemplified are all careless errors of the sorts likely to occur. For example, assume that we had used the domain TEMPERATURE in a rule before it and its sets have been defined (<A HREF="9718hlis.htm#2">Listing Two</A>). When the source file containing this is submitted to the translator, the error is identified with the relevant source line as in <A HREF="9718hlis.htm#3">Listing Three</A>.

<P>
The translator also recognizes badly formed or meaningless fuzzy sets, such as the sets in <A HREF="9718hlis.htm#4">Listing Four</A>. <A HREF="9718hlis.htm#5">Listing Five</A> shows the translator identifying the incorrect set parameters.

<P>
Finally, <A HREF="9718hlis.htm#6">Listing Six</A> shows sample input that mismatches a domain with a set in a rule. The error is that HIGH is not defined as a TEMPERATURE (although it is a valid FAN_SPEED). The translator responds to the badly formed rule with the message shown in <A HREF="9718hlis.htm#7">Listing Seven</A>.

<P>
<H2>Online Tuning</H2>

Online tuning is easy to accomplish in a multitasking system. We are assuming that fuzzy logic is being used as the control algorithm in an automated control application. The software operates in a cyclic manner within such a control scenario. The pseudocode in Example 1 shows this cycle.

<P>
<B>Example 1</B>: <I>Pseudocode for an automated control application.</I>

<PRE>While the control is still active
 * If there is a new initialization data file,
initialize the FLE and mark the new FLE 
initialization file as old
 * Read all FLE inputs coming from the
process being controlled
 * Apply the fuzzy-logic algorithm creating 
FLE outputs
 * Send all FLE outputs to the process 
being controlled</PRE>



<P>
One approach to performing online tuning is to open a second console and write a TL source file incorporating the desired parameter changes. The TL source file is then submitted to the translator. This process is iterated until the translator finds no errors and produces the new initialization file. The latter will be detected by the FLE per the preceding pseudocode.

<P>
It is useful to also incorporate the ability to return to the previous initialization by a keystroke combination. Hence, if the new FLE degrades performance, the prior engine is easily restored. It might also be useful to restrict the size of the changes allowed in the tuning step, but this was not implemented.

<P>
<H2>The Dynamic Simulator</H2>


Dynamic simulation is desirable in a control scenario, allowing the user to identify gross problems. However, one reason engineers often choose fuzzy logic control is because the process under control is very difficult (or impossible) to model. So what approach can be taken for simulation? Our solution was to use fuzzy logic in the simulation as well. We call this the Fuzzy Logic Simulator (FLS).

<P>
To see how the FLS is designed to operate with the FLE, a pseudocode representation is useful. Note that the possibility of tuning both the FLE and FLS is suppressed in the pseudocode in Example 2 to avoid obscuring the salient features.<P>

<B>Example 2</B>: <I>Pseudocode for the dynamic simulator.</I>

<PRE>Initialize FLE inputs
While the control is still active
 * Read all FLE inputs 
 * Apply the FLE algorithm creating FLE outputs
 * FLS inputs = FLE inputs AND FLE outputs
 * Apply the FLS algorithm creating the FLS 
outputs; these are incremental changes in the FLE inputs
 * FLE inputs = FLE inputs + changes in FLE inputs</PRE>
<P>
As a specific example, assume you are controlling temperature in a hot cell by a ventilating cooler. One of the FLE rules might be that shown in <A HREF="9718hlis.htm#8">Listing Eight</A>, where TEMPERATURE is an FLE input variable (value=HOT) and FAN_SPEED is an FLE output (value=HIGH). Similarly, an associated FLS rule might be that shown in <A HREF="9718hlis.htm#9">Listing Nine</A>, where both TEMPERATURE and FAN_SPEED are FLS input variables (value=HOT and HIGH) and DELTA_TEMPERATURE is an FLS output variable (value=NEGATIVE_SMALL).

<P>
From the the examples and listings, it is clear that the number of FLS inputs will inherently outnumber the FLE inputs. This can lead to an explosion in the number of rules, potentially straining system resources and slowing system performance. Our investigation was perhaps too simplistic and did not suffer from this problem.

<P>
There are ways to cut down the number of rules. For example, a set of unconditional rules can be used to establish default behavior while minimizing the number of conditional rules. This can lead to an overall reduction in the number of rules. The book by Cox discusses unconditional rules at length.

<P>
A second difficulty with the simulator follows from the fact that the user supplies the fuzzy logic models for both control and simulation. Hence, the system acts in accord with those models, and not necessarily in accord with reality. This can give a very misleading prediction of system behavior.

<P>
This is quite evident in the preceding example of an FLS rule. In particular, note how that rule will tend to force the model away from a high-temperature runaway condition. This behavior is simply built-in by the rule and does not necessarily reflect what would actually happen.

<P>
However, keeping this important caveat in mind, the simulation can be useful in identifying gross conceptual errors in parameter choices for control. Further, as system experience is gained, the models can be corrected and refined. Once the simulation is realistic, it can be used for other purposes such as operator training.

<P>
<H2>A Sample Run</H2>


<A HREF="9718hlis.htm#10">Listing Ten</A> and <A HREF="9718hlis.htm#11">Listing Eleven</A> show two translator source files that describe the temperature-control scenario previously discussed. <A HREF="9718hlis.htm#10">Listing Ten</A> can be used to build the actual fuzzy logic control module; Listing Eleven specifies the FLS. Note that the inputs to the FLS are formed by the union of the control engine's inputs and outputs, and that the sole FLS output is a "delta" domain corresponding to the engine's input domain.

<P>
Figures 1 through 4 show the result of using the preceding FLE and FLS initialization files to create a simulation scenario with two different initial temperatures. Figure 1 depicts the simulated behavior of the temperature when it starts at 40. As the process heat raises temperature, the cooling fan competes until the temperature reaches a value just above 80 where the control algorithm holds it steady. Figure 2 shows the corresponding fan behavior leading to the temperature curve of Figure 1.

<P>
<B>Figure 1: </B><I>Simulated behavior of the temperature when it starts at 40</I>. <P>
<IMG SRC="9718hfig1.gif" ALT="Diagram" ALIGN=TOP WIDTH="269" HEIGHT="209">

<P>
<B>Figure 2:</B> <I>Corresponding fan behavior leading to the temperature curve of Figure 1</I>.<P>
<IMG SRC="9718hfig2.gif" ALT="Diagram" ALIGN=TOP WIDTH="271" HEIGHT="209">

<P>
Similarly, Figures 3 and 4 show the behavior with a starting temperature of 100. The same control algorithm again brings the temperature to a steady state value, just above 80. A designer wishing to simulate a realistic system would naturally want to concoct a much richer set of rules and domains, but this example gives the flavor of the simulator's appearance and behavior.
<P>
<B>Figure 3: </B><I>Behavior with a starting temperature of 100</I>.<P>
<IMG SRC="9718hfig3.gif" ALT="Diagram" ALIGN=TOP WIDTH="282" HEIGHT="215">

<P>
<B>Figure 4: </B><I>Corresponding fan behavior leading to the temperature curve in Figure 3</I>.<P> 
<IMG SRC="9718hfig4.gif" ALT="Diagram" ALIGN=TOP WIDTH="280" HEIGHT="216">
<P>
<H2>Conclusion</H2>


This prototypical work shows that with further development of its error-detecting capabilities, the translator can provide a robust and flexible approach to tuning fuzzy logic control algorithms. The key to the tuning capability as presented here is that the FLE is initialized by reading a data file. The particular FLE software package is otherwise incidental. Hence, tuning with error detection could be easily implemented in most fuzzy logic software packages.

<P>
The simulator is similarly insensitive to the particular FLE software; it merely uses that same model to create the simulator. While modifications must be made to the rules, input sets, and output sets, a fundamental change in the model is not required. On the other hand, the simulator must be used with the realization that it can help discover gross conceptual errors but cannot provide realistic simulation until significant experience is accrued from the actual control process.

<P>
<H2>Acknowledgments</H2>

One of the authors, Paul Leathers, was part of the team whose software has been placed on the <I>DDJ</I> ftp site. The other team members were Cory Davidson and Heath Lynn, whose contributions we acknowledge here. Jason Pegg, from yet another team, provided the initial impetus to prepare this article, but had to cut short his involvement because of other pressing work.<P>


<A HREF="9718hlis.htm"> Listings </A> 
<P>


</BODY>
</HTML>
