<HTML>
<HEAD><TITLE>DDJ, Spring1997: C++ Class for Large Files</TITLE></HEAD>
<body bgcolor="FFFFFF">



<H1>
A C++ Class for Editing Large Files</H1>

<H2>
How well does your editor handle 900-MB files?
</H2>

<H3>
<i>by Vincent Van Den Berghe</i>
</H3>

Vincent is currently employed at Bureau van Dijk Electronic Publishing in Belgium, and his primary fields of interest are algorithms, optimization techniques, and compiler design. Vincent can be reached at <I>vvdb@bvd.com</I>.
<HR>
<IMG SRC="9718fins.gif" WIDTH=105 HEIGHT=117 ALIGN=LEFT HSPACE=6 VSPACE=6 ALT="Insert">

The company I work for specializes in CD-ROMs, and we generate files with sizes that range from 100 MB to over 1 GB. These files have to be viewed and sometimes even edited. The edits are usually minor, but none of the editors we tried could handle such large files well. Many load the entire file into virtual memory. As a result, simply viewing a 900-MB file can be quite tedious. Since the editor's temporary files are at least as big as the original, disk space becomes a problem as well. 

<P>
As a result, I began to look for a C++ class that could be used to build my own, more-efficient editing tools. I found classes that encapsulate standard file operations, but I also needed support for basic editing operations. I finally decided to design my own class, specifically tailored to meet the following "CD-ROM" requirements:

<P>
<UL>
<LI>No temporary file or extra memory if the file is not changed.

<LI>Rapid file positioning and reading.


<LI>Resource consumption is a function of the number and size of edit operations, not the size of the file.


<LI>Portable.


<LI>Modifying a file does not greatly reduce the speed at which the modified file can be viewed.


<LI>Original file is never modified unless a "flush" operation is performed, or the file object is destroyed.


<LI>Can determine whether data at a certain position has been modified (for implementing "highlight the changes" features).
</UL>

<P>
The complete source code for the class is 
available electronically.

<H2>
The Interface
</H2>

The main class is the <I>TEditableFile</I> class (see <A HREF="9718flis.htm#1">Listing One</A>). The functions are straightforward and require little explanation:

<P>
<UL>
<LI>The <I>read</I>, <I>write</I>, <I>tell</I>, and <I>seek</I> functions are analogous to the standard ANSI C functions.


<LI>The <I>insert</I> and <I>remove</I> functions provide basic editing operations. 


<LI>The <I>flush</I> method is overloaded to either save the edits to the original file (with no arguments), or to a separate file (with a file-handle argument). In the latter case, the original file contents are left untouched. You can provide the original file handle as an argument to <I>flush, </I>but don't pass a duplicate handle to the same file.


<LI>The <I>size</I> function returns the current size of the file in bytes.


<LI>The <I>eof</I> function returns nonzero if current position is at end-of-file.


<LI>The <I>failed</I> function is described later.


<LI>The <I>cancelChanges</I> function cancels all edits and returns the file to its state when the program started or when the last <I>flush()</I> was executed.


<LI>The <I>isUnmodified</I> is used to test if certain data has been edited. It can optionally find the longest contiguous block of unedited data. The loop in Example 1 simply lists the modified and unmodified blocks in a file.
</UL>

<P>
<B>Example 1</B>: <I>Identifying modified sections of a file.
</I><PRE>while(pos&lt;file.size()) {
    long endPos;
    if(file.isUnmodified(pos,&endPos))
        cout &lt;&lt; "Positions " &lt;&lt; pos &lt;&lt; " through " &lt;&lt; endPos
             &lt;&lt; " unmodified" &lt;&lt; endl;
    else
        cout &lt;&lt; "Positions " &lt;&lt; pos &lt;&lt; " through " &lt;&lt; endPos
             &lt;&lt; " modified" &lt;&lt; endl;
    pos=endPos+1;
}
</PRE><P>


<H2>
Data Structures</H2>

The underlying idea is what I call the "version control" principle: If you can't keep track of the entire file, keep track of the changes. More specifically, I view the file as a sequence of one or more "deltas." Each delta identifies the source of a block of data in the edited file. Each delta is either a file delta (specifying a block of data from the original file) or an edit delta (with data from an edit operation). The former will be written as <I>F[x,n]</I> (<I>n</I> bytes of data from position <I>x</I> of the original file). The latter will be written as <I>E[n]</I> (<I>n</I> bytes of data from an edit operation). The file position of the edit delta is deduced from its position in the delta list.

<P>
To see how this mechanism works, consider editing the 11-byte file containing "Hello World." Originally, there is a single delta <I>F[0,11]</I>. If you remove 3 bytes from position 2, the original delta is split into <I>F[0,2], F[5,6]</I>. If you then insert the 2 bytes "ol" at position 1, the first file delta will be split (analogous with the remove operation), and an edit delta will be inserted between the two cuts. The final file contains:<PRE>
   F[0,1]="H"
   E[2]="ol"
   F[1,1]="e"
   F[5,6]=" World"</PRE>

<P>
Every edit operation (<I>write</I>, <I>insert</I>, <I>remove</I>) causes the delta list for the file to be updated with the new information. Writing <I>n</I> bytes is equivalent to removing <I>n</I> bytes and inserting the new bytes at the same position.

<P>
Note that the file deltas only require storage space for the pointers, not the actual data. Only edit deltas actually store data.

<H2>
Implementation
</H2>

Two observations guided the development of the class. First, for any position <I>p</I> in the file, there is one and only one delta containing the data at that position. Second, the effects of an operation can propagate to deltas located to the left or right of this affected delta.

<P>
The first observation hinted at a very simple implementation of the <I>TEditable</I> file class: Find the correct delta and "delegate" the operation to that delta. <A HREF="9718flis.htm#1">Listing One</A> shows how this works. The <I>getDelta</I> function locates the (unique) delta containing a file position. The <I>read</I>, <I>write</I>, <I>insert</I>, and <I>remove </I>operations call that function and pass the operation to the delta object. Note that the offset will be the offset within the delta, not the offset within the file.

<P>
The second observation led me to organize the deltas in a doubly linked circular list with a sentinel. There are several advantages to this structure:

<P>
<UL>
<LI>Each element knows its left and right neighbor (needed to propagate an operation).


<LI>The sentinel eliminates special cases.


<LI>The sentinel delta can be designed to handle operations. For example, a <I>read </I>operation immediately returns end-of-file.
</UL>

<P>
With all this in mind, Figure 1 illustrates the class hierarchy for the deltas. 
<P>
<B>Figure 1: </B> Class hierarchy (classes in parentheses not implemented).<P>

<IMG SRC="9718ffig1.gif" ALT="Chart" ALIGN=TOP WIDTH="252" HEIGHT="108">
<P>
<I>TDelta</I> is an abstract class, defining a common protocol for all derived delta classes. This protocol is enforced by using pure virtual functions. The functions <I>bytesLeft()</I>, which returns the number of bytes that can be inserted, and <I>unmodified(), </I>which returns true if the delta contains unmodified data, identify the kind of delta. These functions are sufficient to identify file deltas from edit deltas, and are generic enough to be applicable to any other kind of delta you may dream up.

<P>
The <I>TFileDelta</I> implements file deltas, and is shown in <A HREF="9718flis.htm#2">Listing Two</A>. The <I>TSentinelDelta</I> implements the sentinel for the doubly linked list. There will typically be only one instance of this class per <I>deltaList</I>.

<P>
The other classes implement edit deltas. Because inserted data might be stored in a variety of places&#151;disk, extended memory, conventional memory&#151;I chose to have a different class for each delta variety.

<P>
Having different kinds of edit deltas introduces the problem of determining which type of edit delta to create in each different situation. I have therefore defined a "factory" class <I>TEditDelta</I>. This class contains only one static function, called <I>createNew</I>. It will return a new edit delta of the appropriate type. The current implementation always creates a <I>TDiskEditDelta</I> (which is the only type I've implemented so far), but could be modified to create different kinds of deltas depending on such factors as memory availability.

<P>
The most interesting operation is <I>flush</I>. Consider a 100-byte file in which 10 bytes have been inserted at the beginning. The <I>deltaList</I> will be <I>E[10], F[0,100]</I>. If you write the deltas to the file sequentially, <I>E[10]</I> will overwrite the first 10 bytes of the file, but <I>F[0,100]</I> needs these first 10 bytes.

<P>
Another approach is to first flush the file deltas that have moved, and then flush the rest. But that doesn't work with the <I>deltaList E[10], F[0,50], F[55,45]</I>. This is the previous file, but with 5 bytes removed from position 50. If you write the moved file deltas in order, the last 5 bytes of the second file delta will overwrite the first 5 bytes of the third. 

<P>
The solution is to use three passes: 

<P>
<OL>
	<LI>Write all file deltas that were moved up in reverse order.

	<LI>Write all file deltas that were moved down in forward order.

	<LI>Write all other deltas.
</OL>

<P>
The entire implementation has been split into six .cpp files, each with a corresponding header file, as shown in Table 1.

<P>
<B>Table 1</B>:<I> Flush implementation reflecting the class hierarchy.</I><PRE>
File Name	Implements	 	        Corresponding 
                                                Header File

EDITABLE.CPP	TEditableFile class 	        EDITBALE.H
DELTA.CPP	TDelta abstract base class      DELTA.H
FILDELTA.CPP	TFileDelta class	        FILEDELTA.H
SENDELTA.CPP	TSentinelDelta class	        SENDELTA.H
EDTDELTA.CPP	TEditDelta class	        EDTDELTA.H
DSKDELTA.CPP	TDiskEditDelta class	        DSKDELTA.H
</PRE><P>

<P>
These files directly reflect the class hierarchy. Your program only needs to include EDITABLE.H (which, itself, depends on no other header files). The rest of the files can be compiled into a library that can be linked with your program.

<H2>
Error Handling</H2>

To detect and handle errors, you will have to check the member-function return values. Most <I>TEditableFile</I> member functions return the number of bytes processed. If this is a short count, something went wrong. To determine the cause of the error, check the (standard) <I>errno</I> variable, which holds the code of the last disk error. There is also a special member function, <I>failed()</I>, that returns nonzero if the constructor failed (remember that constructors do not return error codes).

<H2>
Portability</H2>

The code has been written by making minimal assumptions about the current ANSI C++ standard. No advanced features, operating-system calls, or memory-model assumptions were used. Porting this code to other environments, including those with minimal C++ support, should require little effort.

<P>
One potential problem is the handling of operator <I>new</I>. The draft C++ standard states that if operator <I>new </I>fails, an exception (<I>xalloc</I>) is thrown. My code assumes the previous behavior, that operator <I>new </I>returns NULL if it fails.

<P>
The other potential problem is the file operations. The classes have been designed using (UNIX-like) handle-based file I/O, which is not covered by the ANSI standard. It's trivial to make the classes <I>iostream </I>or FILE oriented. Buffer size problems have been circumvented by using the ANSI-defined <I>size_t</I> type instead of the more usual <I>int</I> or <I>long</I> integral type. As a result, the maximum amount of data you will be able to transfer is whatever the maximum value of <I>size_t</I> is.

<P>
Unfortunately, there is no constant describing the maximum value of <I>size_t</I> or the maximum number of bytes that can be read in one <I>read()</I> operation. On a 16-bit PC compiler, <I>size_t</I> is an unsigned <I>short </I>(if the memory model is not huge), but the maximum read size is slightly less than 64 KB, so that constant had to be hard coded. In a Windows environment, you may be able to use <I>hread()</I> and <I>hwrite()</I> to handle I/O requests of more than 64 KB at a time. 

<H2>
Performance Bottlenecks </H2>

My class assumes that there are few edits. More edits lead to a larger <I>deltaList</I> and slow the search for the correct delta. The <I>deltaList</I> length will, therefore, be the main performance bottleneck.

<P>
One way to address this is to design a more-efficient search structure for the <I>deltaList. </I>For example, each delta could keep the actual file position, and you could keep the list in "Least Recently Used" order. This would allow the <I>deltaList </I>to self organize, such that the most frequently used deltas are found first.

<P>
Another approach is to minimize the length of the list by delaying the creation of new deltas (as much as possible) and by collapsing deltas. I have already implemented delayed creation to some extent, but the algorithm currently does not collapse deltas. For example, the <I>deltaList</I> of a 100-byte file in which 10 bytes were inserted at position 50, then immediately removed, would be <I>F[0,50], F[50,50]</I>, which can be collapsed to <I>F[0,100]</I>.

<P>
Since you can only collapse deltas of the same type, you need to identify the type of the delta. You could use run-time type identification (RTTI) supported by some compilers, or you could add a pure virtual function in <I>TDelta</I> such as <I>virtual int typeId() =0;</I> redefined to return a unique ID (or a string constant) for each delta type.

<P>
Although removing bottlenecks is not trivial, it does not fundamentally change the algorithm described here, and is, therefore, left as an exercise for you. Simpler improvements, like adding a cache to speed I/O, should not be a problem.

<H2>
Extensions</H2>

One interesting addition would allow editing files directly on CD-ROM. The current class saves all modifications to the file in the <I>deltaList</I>. You could add the ability to save just the <I>deltaList</I> to the hard disk, and return to your "edited" CD-ROM file at a later date. This could be the basis of a file-annotation mechanism for CD-ROM files. You could also extend the flush operation to save overwritten data to a separate file, allowing for "reverse deltas" that would take you back to any previous version of the file.

<H2>
Conclusion</H2>

The <I>TEditableFile</I> class presented here is ideally suited for small edit operations on large files. When used correctly, it can act as a drop-in replacement for a standard file class and simplify file modifications, including insertions and deletions. 

<P>

<A HREF="9718flis.htm"> Listings </A> 
<P>


</BODY>
</HTML>
