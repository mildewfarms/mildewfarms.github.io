<HTML>
<HEAD><TITLE>DDJ, Spring1997: Keys to the Kingdom</TITLE></HEAD>
<body bgcolor="FFFFFF">



<H1>
Keys to the Kingdom
</H1>
Spring 1997 <I>Dr. Dobb's Journal</I>
<H3><I>by Al Williams</I></H3>
<P>
Al is a contributing editor for Dr. Dobb's Sourcebook. You can contact him at <A HREF="http://www.al-williams.com/awc">http://www.al-williams.com/awc</A>.
<HR>
<IMG SRC="9718jins.jpg" WIDTH=89 HEIGHT=118 ALIGN=LEFT HSPACE=8 VSPACE=10 ALT="Insert"><P>

Although Borland bills Delphi as a good replacement for Microsoft's Visual Basic (VB), it is not compatible with Visual Basic. Porting a VB program to Delphi (or any other language) is no easy task. Besides the language differences, there are several statements in VB that don't have direct equivalents in other languages. Consider the <I>SendKeys</I> call, for example.<P>

<I>SendKeys</I> is one of those statements that you either don't need or can't live without. Its sole purpose is to send fake keystrokes to the system. You might think this is a simple task. Why not just post WM_CHAR or WM_KEYDOWN messages? There are several problems with this simple approach. Although you can easily fake simple characters to single applications, there is no simple way to send the messages to whatever application is active. Further, you can't affect the state of the keyboard, which many applications check. For example, a program might detect the Esc key, then examine the keyboard state to find out if the Shift or Ctrl keys are down. Posting a simple message won't handle these programs. Unless you are using VB, you clearly need a better way to send keystrokes.

<P>
The Win32 API provides a useful function, <I>keybd_event</I>, to address this problem. Win16 has a similar function, but it is designed for use by device drivers and isn't easy to use (see the accompanying text box entitled "The 16-bit Solution"). However, the Win32 version is easy to use from any language.

<P>
In this column, I'll present a 32-bit Delphi program that implements a simple keyboard macro program. Almost all of the functionality of the program is encapsulated in a reusable unit that practically duplicates the VB <I>SendKeys</I> functions and syntax (see the accompanying text box entitled "Using <I>SendKeys</I>"). Even if you don't use Delphi, you can easily adapt the techniques this program uses to nearly any programming language.

<H2>
Who Cares?</H2>

Why do you want a <I>SendKeys</I> function? Good question. (If you are porting VB code that uses <I>SendKeys,</I> you can skip this section&#151;you already know.) There are many times when sending a keystroke to the system or another program can be very useful. You can manipulate utility programs, implement macro recorders, and automate testing, just to name three uses.

<P>
If you are even more ambitious, you could provide similar mouse capabilities by using <I>mouse_event</I>. Armed with these two functions and a knowledge of Windows hooks, you could implement a very powerful macro recorder, script language, or a sophisticated automatic-test program.

<P>
Here's a real life example: I recently wanted a way to advance PowerPoint slides by remote control. I looked at the various presentation remote controls on the market. They all cost over $100 and did things I didn't care about. All I wanted was to advance slides. I bought a $20 wireless doorbell from Radio Shack and wired it to a serial port connector. Then I wrote some simple software to "press" the Enter key (or any other string I designated) when it detected the remote control click. This type of software is simple to write with <I>SendKeys.</I>

<H2>
About <I>keybd_event</I>

</H2>
The <I>keybd_event</I> call takes a few parameters, most of which are straightforward. The first argument is, as you might expect, a virtual key code that corresponds to the key you want to simulate. The second argument is the scan code for that key. The next argument is a flag. If you pass a zero, it indicates that you wish to simulate the key going down. If you pass KEYEVENTF_KEYUP, the call simulates the key being released. The KEYEVENTF_EXTENDEDKEY flag indicates that the key is an extended key (that is, the extra cursor keys on an enhanced keyboard). The final argument is additional data that you can safely ignore.

<P>
Don't forget that virtual key codes are not ASCII characters. There is a virtual key code for each key on the keyboard. For example, there is one virtual key code for the 5 key. There isn't a code for the percent sign that appears above the 5 on the key. When a program sees a WM_KEYDOWN message for the 5 key, it has to examine the state of the Shift key to determine if it is a 5 or a percent sign. Normally, the <I>TranslateMessage</I> function takes care of this logic and generates a WM_CHAR message for the appropriate ASCII character. To simulate a % key, you must simulate a Shift-key press, a 5-key press, a 5-key release, and a Shift-key release.

<P>
Of course, you usually don't want to know all of these details just to send an ASCII character. That's why you call the <I>VkKeyScan</I> function. This call converts an ASCII character into a special 32-bit value. The 16 bits at the bottom of this value contain the corresponding virtual key code. The 16 bits at the top contain flags to tell you which of the Shift, Ctrl, or Alt keys should be down for the character. This simplifies handling ASCII characters. Of course, to send a special character (like a cursor key) you can use the special key's virtual key code directly.

<P>
The other detail you usually don't care about is the scan code. It turns out that most programs never examine the scan code anyway. However, the scan code is easy to obtain. Simply call <I>MapVirtualKey</I>, passing it the virtual key code and a zero. This returns the correct scan code. Armed with this information, it is easy to call <I>keybd_event</I> for any key.

<H2>
Inside the <I>SendKeys</I> Unit

</H2>
Once you know how to call <I>keybd_event</I>, writing the <I>SendKeys</I> unit isn't very difficult; see <A HREF="9718jlis.htm#1">Listing One</A> . To simplify the logic, I broke the code into several procedures and functions:

<P>
<UL>
	<LI><I>cvtkey</I> accepts a key and converts it to a virtual key code, shift state, and repeat count. It processes the special characters that represent shift keys and other codes.

<P>
	<LI><I>procbrace</I> handles the special named keys (like Home or Enter) which are represented by a name surrounded by curly-brace ({}) character. This may be a single character or a special keyword. In either case, there may be a space and a repeat count before the closing brace. The <I>tbl</I> array holds the first three characters of the keywords (only the first three letters count).
<P>
	<LI><I>keybd</I> is a simple wrapper around <I>keybd_event</I> that finds the scan code and selects the proper flag argument.

	<P>
	<LI><I>GetNum</I> is a simple parsing routine that pulls a number from the input stream.
</UL>

<P>
There are two flags for each modifier key. For example, the Shift-key flags are <I>shift</I> and <I>letshift</I>. The <I>shift</I> flag reflects the state of the Shift key in response to the "+" key. The <I>letshift</I> key, on the other hand, reflects the Shift-key state required to obtain the desired character (the program uses the <I>VkKeyScan</I> function to set <I>letshift</I>). The program clears <I>letshift</I> for each character. Ordinarily, it clears the <I>shift</I> flag, too. However, if you use a parenthesis, the code will be prevented from clearing the <I>shift</I> flag.

<P>
Sometimes, keystrokes can come too rapidly. You might send keystrokes to start a program, for example, then send more keystrokes before the program starts. To help prevent this, the <I>SendKeys</I> function delays 50 milliseconds between each keystroke. You can also program custom delays into scripts using the {PAUSE <I>n</I>} command, which causes the script to pause for <I>n</I> milliseconds. (By the way, this is not part of the standard Visual Basic <I>SendKeys</I> command.)

<H2>
KeyPlay Details
</H2>

The actual KeyPlay program is a reasonably simple Delphi application. I used the SDI program template to create the initial program. The form contains a single <I>TMemo</I> to hold the current macro script. If there is a file name on the command line, the form loads the file into the <I>TMemo,</I> then automatically executes the script. When the script is complete, the program closes. If you don't want the script to run automatically, prefix the file name with an asterisk. If you prevent the script from running, or load a script from the File menu, you can start it using the Play option on the File menu. Then the program does not automatically close.

<P>
When the script runs, the program minimizes itself into an icon. This helps prevent KeyPlay from sending keystrokes to itself. Running the script is simply a matter of iterating over each line in the <I>TMemo</I> and sending it to the <I>SendKeys</I> function.

<P>
File input and output is simple, too. Each <I>TMemo</I> contains a <I>TStrings</I> object (<I>Lines</I>). This <I>TStrings</I> object can read and write ASCII files easily. Just call <I>LoadFromFile</I> to read a file into the <I>TMemo,</I> and <I>SaveToFile</I> to save it back. (The source code for the KeyPlay program are available electronically.)

<H2>
Ideas</H2>

Once you become used to the idea of sending keystrokes (or mouse actions using <I>mouse_event</I>), you'll find many uses for this technique. You could easily extend the KeyPlay program to send mouse events or even use a hook function to record actions. Although OLE Automation (or ActiveX Scripting, if you prefer) allows you to automate program operations, not all applications support it. Using the techniques presented here, you can automate nearly any program, although perhaps not as elegantly.
<P>

<HR>

<H1>
The 16-bit Solution</H1>

<P>
If you are programming Windows 3.x, you can still use a similar technique to simulate keystrokes. The <I>_keybd_event</I> call is similar to <I>keybd_event</I>. However, it is primarily aimed at device drivers. Therefore, you need to use assembly language to call it, and it isn't declared in any of the header files.

<P>
You can find a good article about using this technique under Windows 3.x in "Simulating Keyboard Input Between Programs Requires a (Key)stroke of Genius," by Jeffrey Richter (<I>Microsoft Systems Journal</I>, December 1992), which shows how to use the 16-bit version of this call.
<HR>
<H1>Using <I>SendKeys</I></H1>

<P>
Using <I>SendKeys</I> is quite simple. The <I>SendKeys</I> procedure accepts a string. <I>SendKeys</I> simulates the ordinary characters in this string. The only characters that have special meaning are: +, %, ^, (, ), {, }, and ~. The ~ character stands for the Enter key. The +, ^, and % characters indicate the Shift, Ctrl, and Alt key attributes. For example, to send "DDJ" a Control-A, the Enter key, and an Alt-X, you'd use the string <I>DDJ^A~%X</I>. 

<P>
If you want a modifier key to apply to more than one character, surround the characters with parenthesis. For example, to send Control-A, Control-B, and Control-C, you might use <I>^(ABC)</I>. Notice that this is different from <I>^ABC,</I> which would send a Control-A, an ordinary B, and an ordinary C. 

<P>
The curly brace indicates a special character. If there is one character inside the brace, <I>SendKeys</I> quotes that character (which is usually a special character); for example, <I>{+}{{}</I> sends a plus sign and an open curly brace. You can also use a named key inside curly braces (see Table 1). Only the first three letters of the name are significant and case isn't important. For example, you can use {ENT} instead of {ENTER}, if you like.<P>

<B>Table 1:</B> <I>Named keys. (Only the first three letters are significant, so {DEL}, {DELETE}, and {DELIT} are the same.)</I>
<P>
	
<PRE><B>Name            Key</B>

{BACKSPACE}       Backspace
{BS}              Backspace
{BKSP}            Backspace
{BREAK}           Break
{CAPS}            Caps Lock
{DELETE}          Delete
{DOWN}            Down arrow
{END}             End
{ENTER}           Enter (same as ~)
{ESCAPE}          Escape
{HELP}            Help key
{HOME}            Home
{INSERT}          Insert
{LEFT}            Left arrow
{NUMLOCK}         Num lock
{PGDN}            Page down
{PGUP}            Page up
{PRTSCR}          Print screen
{RIGHT}           Right arrow
{SCROLL}          Scroll lock
{TAB}             Tab
{UP}              Up arrow
{PAUSE}           Pause (see text)

</PRE><P>
You can also include a space and a repeat count inside the curly braces. For example, <I>{A 10}{LEFT 9}</I> sends ten letter "A"s and nine Left-Arrow keys. The only extension that this code makes to the standard Visual Basic statement is the {PAUSE} keyword. You always provide a repeat count with this keyword. It causes the script to pause for the specified number of milliseconds.

<P>
One other difference between the Visual Basic <I>SendKeys</I> statement and the implementation in this article is how the procedure continues. With Visual Basic, you can include a flag that prevents <I>SendKeys</I> from returning before the system processes the keys. In this implementation, <I>SendKeys</I> always returns after sending the keystrokes. There is no way to tell if an application has processed those keys when the procedure returns.
<P>

<A HREF="9718jlis.htm"> Listings </A> 
<P>


</BODY>
</HTML>