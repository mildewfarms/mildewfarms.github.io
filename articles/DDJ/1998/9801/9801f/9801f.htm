<html>
<META NAME="year" CONTENT="1998">
<head>
<title>Dr. Dobb's Journal January 1998: The Java Internationalization API</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>The Java Internationalization API</h1>

<p><i>Dr. Dobb's Journal</i> January 1998
</p>
<h2>Global software for the global village</h2>

<h3>By Carol A. Jones</h3>

<I>Carol is a senior software engineer at IBM, working on Java development tools. She can be reached at jcarol@us.ibm.com. </I>

<hr>

<p>If you are writing Java applets for the Internet, people all over the world will be interacting with your code. But what happens to your user interface if the words you display are much longer in another language? How do you sort words in German or Japanese? What if you need to display a message and the grammar is different in French?</p>

<p>The answers to questions such as these involve "internationalization" -- the process of preparing programs to run in other languages. To enable internationalization for Java programmers, the JDK 1.1 includes the Internationalization API. In this article, I'll examine this API and show you how to use it to design global software. </p>

<h3>The Java Internationalization API</h3>

<p>The Java Internationalization API is a comprehensive set of APIs for creating multilingual applications. The JDK 1.1 internationalization features include:</p>

<p></p>

<ul>
<li>Classes for storing and loading language-specific objects.  <li>Services for formatting messages, dates, times, and numbers.
  <li>Services for comparing and collating text.
  <li>Support for finding character, word, and sentence boundaries.
  <li>Support for display, input, and output of Unicode characters.
</ul>

<p></p>

<p>Central to Java internationalization is the concept of a <i>Locale</i> object, which identifies a specific cultural region, including information about the country or region and its spoken language. Java code that uses a <i>Locale</i> to tailor information for users is called "locale sensitive." For example, displaying a date is a locale-sensitive operation, because dates are formatted differently in almost every country.</p>

<p>Most operating systems have some way for users to indicate their locale. Windows 95 does this through the control panel, under the Regional Settings icon. In Java, you can get the <i>Locale</i> object that matches the user's control-panel setting using <i>myLocale = Locale.getDefault();</i>. You can also create <i>Locale</i> objects for specific places by indicating the language and country you want, such as <i>myLocale = new Locale("fr", "CA");</i> for "Canadian French." </p>

<p>The strings you pass to the <i>Locale</i> constructor are two-letter language and country codes, as defined by ISO standards.</p>

<h3>Isolating the User Interface</h3>

<p>The first step in making an international Java program is to isolate all elements of your Java code that will need to change in another country. This includes user-interface text -- label text, menu items, shortcut keys, messages, and the like. You might also have images that need to be changed, either because they include text that is part of the image drawing, or because the image doesn't make much sense in another culture.</p>

<p>The <i>ResourceBundle</i> class is an abstract class that provides an easy way to organize and retrieve locale-specific strings or other resources. It stores these resources in an external file, along with a key that you use to retrieve the information. You'll create a <i>ResourceBundle</i> for each locale your Java program supports.</p>

<p>There are two kinds of <i>ResourceBundle</i> classes -- the <i>PropertyResourceBundle</i> and <i>ListResourceBundle</i>. Cliff Berg examined property-resource bundles in "How do I Write an International Application?" ("Java Q&amp;A," <i>DDJ</i>, July 1997, available electronically, see "Resource Center," page 3). In this article, I'll look at the other side of the resource-bundle coin -- the <i>ListResourceBundle</i>. </p>

<p><i>ListResourceBundle</i> works the same as <i>PropertyResourceBundle</i>, but the file format is actually Java source code that you compile into a Java class. The localized objects can be any Java objects (not just strings), so you can use <i>ListResourceBundle</i>s to store image data, numbers, dates, or any other Java objects you need. The code and search algorithms for loading <i>ListResourceBundle</i>s are the same as for <i>PropertyResourceBundle</i>s, but <i>ListResourceBundle</i>s are faster than <i>PropertyResourceBundle</i>s; see <a name="rl1"><a href="9801f.htm#l1">Listing One</A>. </p>

<p>Java loads your resources based on the locale argument to the <i>getBundle</i> method. It searches for matching files with various suffixes, based on the language, country, and any variant or dialect to try to find the best match. Java tries to find a complete match first, then works its way down to the base filename as a last resort. <a name="re1"><a href="9801fe1.htm">Example 1</A> illustrates the search order.</p>

<p>You should always supply a base resource bundle with no suffixes, so that your program will still work if the user's locale does not match any of the resource bundles you supply. The default file can contain the U.S. English strings. Then you should provide properties files for each additional language you want to support.</p>

<p>If you use both the language and country codes when you name resource bundles, you might be more restrictive than you need to be. For example, if you name a resource bundle <i>MyString_de_DE.class</i> (also available electronically), those resources will only be loaded on systems that are configured for standard German. A system that is configured for Swiss German will use the default bundle instead. It's best to omit the country code if possible, so that more users will find an appropriate match. If you had named the resource bundle <i>MyStrings_de.class</i> instead, then German-speaking users in both countries would see German strings instead of English ones. Of course, this is only desirable if the words translate the same way for both countries.</p>

<h3>Formatting Text</h3>

<p>Besides the text itself, the words in your user interface may have to adapt to other kinds of language changes. For example, when you display a date, time, or number, the format is likely to be different from country to country. If you are displaying a message where data is inserted into the message text, the entire sentence structure will probably be different in other languages. The <i>Format</i> classes in the java.text package help you solve these problems.</p>

<h3>Message Formatting</h3>

<p>Because the entire sentence structure of messages can change in other languages, you should never display strings that are built up by concatenating individual words, even if you are translating the individual words. For example, suppose you created a string in English as shown in <a name="re2"><a href="9801fe2.htm">Example 2</A>(a). The same structure would not work in Spanish; <a href="9801fe2.htm">Example 2</A>(b) shows what the Spanish equivalent should be.</p>

<p>Notice that the position of the inserted text is different. To handle this situation, use the <i>MessageFormat</i> class, which provides a means to produce concatenated messages in a language-neutral way. It works by taking an array of objects, formatting each one, and then inserting the formatted strings into a pattern string at the appropriate places. For instance, the code in <a name="re3"><a href="9801fe3.htm">Example 3</A>(a) produces the string <a href="9801fe3.htm">Example 3</A>(b).</p>

<p>The <i>{0}</i> syntax indicates a placeholder where an object will be formatted and substituted into the string. The number matches the index of the array where the appropriate object is stored. When you translate the format string to a different language, you can rearrange placeholders to any place in the string. The placeholders can have additional information about how the substituted data should be formatted. Some of the options are time, date, currency, percent, or integer, with lots of special options for each. If you need finer control over the formatting of a date, time, or numeric values, you can use the <i>SimpleDateFormat</i> and <i>NumberFormat</i> classes.</p>

<h3>User-Interface Layout</h3>

<p>When you build the user-interface components of your Java applet, the translated strings will probably take up a different amount of space than the English ones. They might take less space, but often they will take more; see <a name="rf1"><a href="9801ff1.htm">Figure 1</A>. If you haven't left enough room for longer strings, the user interface might become unreadable. The best way to avoid this is by using the Java layout manager to arrange your user-interface components. </p>

<h3>Comparing and Sorting Strings</h3>

<p>Often, you'll need to compare strings, perhaps for sorting, or just to check for a certain value. If the strings you are comparing contain natural language text, you can't just compare the numeric value of the characters. Although this works in English, it doesn't work in most other languages. In French, for example, accent differences are sorted from the end of the word, so "p&ecirc;che" comes before "p&eacute;ch&eacute;." In German, the letter "o" with an umlaut (&ouml;) is sorted as "oe," so "T&ouml;ne" comes before "Tofu." In Asian writing systems, there are several different methods of sorting that can be based on pronunciation or on the number of strokes used in a character.</p>

<p>Instead of relying on numerical comparisons, use the <i>Collator</i> class, which performs locale-sensitive <i>String</i> comparison. You can set a <i>Collator</i>'s <i>strength</i> property to determine what kinds of differences are considered significant in comparisons. There are four strengths: PRIMARY, SECONDARY, TERTIARY, and IDENTICAL. The meaning of each strength is locale dependent. In English, primary strength ignores differences in case; "A" and "a" are equal, for instance. Secondary strength ignores accent characters, and tertiary strength means that only actual letter differences are significant, such as "A" and "B." <a name="rl2"><a href="9801f.htm#l2">Listing Two</A> shows how to compare strings at each strength for different locales. (Also see StrengthDemo.class and StrengthDemo.java, available electronically.)</p>

<p>For comparing <i>String</i>s once, the <i>compare</i> method provides the best performance. The <i>compare</i> method only examines as many characters as it needs, which allows it to be faster when doing single comparisons. When sorting a list of <i>Strings,</i> however, it is generally necessary to compare each <i>String</i> multiple times. In this case, the <i>CollationKey</i> class gives better performance.</p>

<p>A <i>CollationKey</i> represents a <i>String</i> as a series of bits that can be compared bitwise under the rules of a specific locale. Comparing two <i>CollationKey</i>s returns the relative order of the <i>String</i>s they represent. This allows fast comparisons once the keys are computed. The cost of computing the keys is recouped in faster comparisons when strings need to be compared many times. Even for small lists of items, the performance of collation keys can be ten times better than using the <i>Collator</i>'s compare method.</p>

<p><a name="rl3"><a href="9801f.htm#l3">Listing Three</A> shows how <i>CollationKey</i>s might be used to sort a list of <i>String</i>s. </p>

<h3>Finding Text Boundaries</h3>

<p>The Internationalization API includes classes that help you detect natural language boundaries, including character, word, sentence, and line breaks. Many languages have special rules for determining how a sentence ends, where a line can be broken in the process of line wrapping, or even what is considered a single character.</p>

<p>To appreciate the difficulty of this problem, consider these language differences:</p>

<ul>
<li>Chinese, Japanese, Korean, and Thai do not necessarily have spaces between words.  <li>Spanish has punctuation at the beginning of a sentence; Thai doesn't use punctuation.
  <li>Most languages can have punctuation in the middle of a sentence, such as a decimal point or quotation marks.
  <li>Abbreviations that are considered one word can have periods in them. 
  <li>In some Asian languages, certain sets of characters are not allowed at the beginning of a line; other sets of characters are not allowed at the end of a line.
  <li>Many languages have accented characters, which are a base character plus a diacritical mark that together are considered one character. 
</ul>

<p></p>

<p>The class you use to parse natural language text is the <i>BreakIterator</i> class. For each kind of boundary you want to detect, you use a different instance of the class, either the character instance, word instance, sentence instance, or line instance. Then you set the text you want to parse<b> </b>into the enumeration, and iterate through it as you would for any ordinary <i>Enumeration</i> object; see <a name="rl4"><a href="9801f.htm#l4">Listing Four</A>. (Also see BreakDemo.class and BreakDemo.java, available electronically.)</p>

<h3>Unicode</h3>

<p>Historically, character encoding has been the most difficult area of internationalization. Some standards represent a character as one byte, and some two or more bytes. Passing data back and forth requires complex mappings and conversions. </p>

<p>Java 1.1 makes all of this straightforward, because it uses the Unicode 2.0 character encoding standard. In Unicode, every character occupies two bytes. Ranges of character encodings represent different writing systems or other special symbols. For example, Unicode characters in the range 0x0000 through 0x007F represent the basic Latin alphabet, and characters in the range 0xAC00 through 0x9FFF represent the Han characters used in China, Japan, Korea, Taiwan, and Vietnam.</p>

<p>Since Java uses Unicode internationally, it can represent any character of any commonly used language. The <i>DataInputStream</i> and <i>DataOutputStream</i> classes automatically handle the input and output of Unicode characters for you. These classes also include two methods that help you write text more efficiently: <i>readUTF</i> and <i>writeUTF</i>. <i>UTF</i> is a multibyte encoding format, which stores some characters as one byte and others as two or three bytes. If most of your data is ASCII characters, it is more compact than Unicode, but in the worst case, a UTF string can be 50 percent larger than the corresponding Unicode string. Overall, it is fairly efficient.</p>

<p>Despite the advantages of Unicode, there are some drawbacks: Unicode support is limited on many platforms because of the lack of fonts capable of displaying all the Unicode characters.</p>

<h3>Conclusion</h3>

<p>With careful planning and with a good understanding of the Internationalization API, you can create global software more easily and at lower cost. But even if you are not localizing your software, these Java classes give you more powerful ways to parse and format text and more efficient ways to compare and sort text; and they will help you create more flexible user-interface layouts.</p>

<p><b>DDJ</b></p>

<H4><a name="l1">Listing One</H4>

<pre>import java.util.*;<p></p>
public class MyStrings_de_DE extends ListResourceBundle {
   public Object[][] getContents() {
    return contents;
   }
   static final Object[][] contents = {
      // LOCALIZE THIS
      {"FontName",  "Schriftart"},
      {"Size",      "Gr&ouml;Be"}, 
      {"Bold",      "Fett"},
      {"Italic",    "Kursiv"},
      {"Color",     "Farbe"},
      {"Red",       "Rot"},
      {"Green",     "Grun"},
      {"Blue",      "Bla&uuml;"},
      {"Sample",    "Vorschau"}
      // END OF MATERIAL TO LOCALIZE
   };
}
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>// This sample illustrates use of the Collator classimport java.text.*;
import java.util.*;
<p></p>
class StrengthDemo {
<p></p>
  static Collator collator;
  static int result;
  static String s1 = "p&ecirc;che";
  static String s2 = "p&eacute;ch&eacute;";
<p></p>
  public static void main(String argv[]) {
            
    System.out.println("United States");
    collator = Collator.getInstance(new Locale("en","US"));
    collator.setStrength(Collator.PRIMARY);
    doSorts();
    collator.setStrength(Collator.SECONDARY);
    doSorts();
    collator.setStrength(Collator.TERTIARY);
    doSorts();
<p></p>
    System.out.println();
<p></p>
    System.out.println("France");
    collator = Collator.getInstance(new Locale("fr","FR"));
    collator.setStrength(Collator.PRIMARY);
    doSorts();
    collator.setStrength(Collator.SECONDARY);
    doSorts();
    collator.setStrength(Collator.TERTIARY);
    doSorts();
  }
  public static void doSorts()
  {
    if (collator.getStrength() == Collator.PRIMARY)
      System.out.println("Primary: ");
    else if (collator.getStrength() == Collator.SECONDARY)
      System.out.println("Secondary: ");
    else if (collator.getStrength() == Collator.TERTIARY)
      System.out.println("Tertiary: ");
    result = collator.compare(s1, s2);
    if (result == 0)
      System.out.println(s1 + " equals " + s2);
    else if (result &lt; 0)
      System.out.println(s1 + " is before " + s2);
    else if (result &gt; 0)
      System.out.println(s1 + " is after " + s2);
  }
}
Output
------
United States
Primary:
p&ecirc;che equals p&eacute;ch&eacute;
Secondary:
p&ecirc;che is after p&eacute;ch&eacute;
Tertiary:
p&ecirc;che is after p&eacute;ch&eacute;
<p></p>
France
Primary:
p&ecirc;che equals p&eacute;ch&eacute;
Secondary:
p&ecirc;che is before p&eacute;ch&eacute;
Tertiary:
p&ecirc;che is before p&eacute;ch&eacute;
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>//--------------------------------------------------------------------------// Method to sort a vector of strings. This sort uses CollationKeys, where 
// are about 10 times faster than using Collator.compare. This is true even 
// including the overhead of setting up the extra arrays, etc.
// It is a simple bubble sort, which is faster than other algorithms
// for very small vectors and for vectors that are almost in order already
// This sample illustrates use of CollationKey class
<p></p>
import java.text.*;
import java.util.*;
<p></p>
class SortDemo {
    static Vector v = new Vector();
  public static void main(String args[]) {
      v.addElement("Dan");
        v.addElement("Alice");
        v.addElement("Liza");
        v.addElement("Edward");
        v.addElement("Zane");
        v = sort(v);
        for (int i=0; i&lt;v.size(); i++)
          System.out.println(v.elementAt(i));
  }
    public static Vector sort (Vector unsorted) {
      CollationKey temp;
        int i,j;
        int size = unsorted.size();
        Vector sorted = new Vector(size);
<p></p>
        Collator collator = Collator.getInstance(Locale.getDefault());
        CollationKey[] keys = new CollationKey[size];
        for (i=0; i&lt;size; i++)
          keys[i] = collator.getCollationKey((String)(unsorted.elementAt(i)));
        for (i=0; i&lt;size; i++)
            for (j=i; j&lt;size; j++)
               if( keys[i].compareTo( keys[j] ) &gt; 0 ) {
                    temp = keys[j];
                    keys[j] = keys[i];
                    keys[i] = temp;
                }    
        for (i=0; i&lt;size; i++)
            sorted.addElement(keys[i].getSourceString());
        return sorted;
    }
}
Output
------
Alice
Dan
Edward
Liza
Zane
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>// This sample illustrates use of the BreakIterator classimport java.text.*;
import java.util.*;
<p></p>
class BreakDemo {
    static String string = 
        "He said \"How tall are you?\" and I said I'm 5\'5\" tall, etc.";
    static BreakIterator boundary;
    public static void main(String args[]) {
<p></p>
    //print each word
    boundary = BreakIterator.getWordInstance(Locale.getDefault());
    boundary.setText(string);
    printBreaks("word");
<p></p>
    //print each sentence
    boundary = BreakIterator.getSentenceInstance(Locale.getDefault());
    boundary.setText(string);
    printBreaks("sentence");
 }
 static void printBreaks(String type) {
    int start = boundary.first();
    int end = boundary.next();
    while (end != BreakIterator.DONE) {
        String part = string.substring(start,end);
        if (!part.equals(" "))
          System.out.println(part + " is a " + type);
        start = end;
        end = boundary.next();
    }
 }
}  
Output
------
He is a word
said is a word
" is a word
How is a word
tall is a word
are is a word
you is a word
? is a word
" is a word
and is a word
I is a word
said is a word
I'm is a word
5'5 is a word
" is a word
tall is a word
, is a word
etc. is a word
He said "How tall are you?"  is a sentence
and I said I'm 5' is a sentence
5" tall, etc. is a sentence
<p></p>
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
