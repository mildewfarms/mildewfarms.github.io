<html>
<META NAME="year" CONTENT="1998">
<head>
<title>Dr. Dobb's Journal January 1998: Java and COM Automation</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Java and COM Automation</h1>

<p><i>Dr. Dobb's Journal</i> January 1998
</p>
<h2>Taking the edge off dual interfaces</h2>

<h3>By Kenneth Bandes</h3>

<I>Kenneth is a software developer for Lehman Brothers Inc. in New York. He can be contacted at bandesk@mindspring.com.</I>

<hr>

<p>Java and ActiveX are usually portrayed as competing technologies. Yet many of us need to work with both, and there are compelling reasons to do so. In this article, I'll examine the ActiveX technology called Automation (formerly "OLE Automation"), and show how it can be implemented in Java. Automation provides a good way of packaging APIs because it is accessible from a wide range of desktop applications, scripting tools, and languages.</p>

<p>Java, as implemented by Microsoft in its compiler and Java Virtual Machine (JVM), simplifies several aspects of the COM technology on which Automation is based, and provides a clean way to implement Automation. Java code for Automation is, by and large, the same as other Java code -- the elaborate efforts that C++ programmers must exert to create objects, maintain reference counts, and obtain interfaces are taken care of by the JVM.</p>

<p>Java is also a superb language for efficient cross-platform network communications. Java serialization means that Java objects automatically have a canonical representation for network transport, one that can be generated or interpreted essentially without any extra code.</p>

<h3>What is Automation?</h3>

<p>An Automation API is a collection of dispatch interfaces. A COM interface is, at the binary level, a pointer to an array of function pointers. To use a COM interface, a client must know the layout of this array in advance. That is, it must know which functions occur in which order and what parameter and return types they have.</p>

<p>Early versions of Visual Basic were unable to accommodate such knowledge and used the <i>IDispatch</i> interface to determine the methods and properties of objects at run time. While Visual Basic eventually gained the ability to deal with COM interfaces, other scripting languages (such as Perl, VBScript, and JavaScript) still require this sort of run-time binding.</p>

<p>Dual interfaces combine the static binding of the array of function pointers with the dynamic binding provided by <i>IDispatch</i>. A dual interface provides efficient access for clients that understand static binding (such as C++ or more recent versions of Visual Basic), but still supports scripting clients.</p>

<p>Dual interfaces can be difficult to implement. MFC arguably makes it even more difficult in C++. ATL helps, but is a bit arcane. In Java, dual interfaces are free, once they have been defined.</p>

<p>Interfaces in COM are specified in Microsoft's Interface Definition Language (MIDL). Such a specification generates marshaling stubs for interprocess or remote (or, in some cases, interthread) invocations and a type library (a binary-encoded description of a set of interfaces). Clients can use the type library to browse your API and view its properties and methods. From the type library, you can generate code that binds your Java classes to COM interfaces.</p>

<h3>An Easy Way</h3>

<p>Version 2.0 of Microsoft's JVM provides "Automatic <i>IDispatch,</i>" which lets any Java class present an <i>IDispatch</i> interface. Simply register the class as a Java object using the javareg command. In <a name="rl1"><a href="9801b.htm#l1">Listing One</A> the <i>autoXTest</i> class is registered as a COM object. The path to the class file is given in the CODEBASE option. <i>progid</i> provides a convenient way for clients to refer to the COM object class without using the 128-bit class ID, which the command will generate.</p>

<p>Any Automation client can create a class registered in this way. If any of its methods return other classes, they can also be used by the client (even if they are not registered).</p>

<p>This is a nearly effortless way to create an Automation API, but it has several limitations. First, you cannot provide dual interfaces this way -- only dispatch interfaces. Second, you cannot specify certain features that allow your API to conform to the recommended guidelines and work smoothly with Visual Basic clients.</p>

<p>You can overcome these problems by using MIDL to define your interfaces.</p>

<h3>The Address Book API</h3>

<p>To illustrate, I'll implement an address book that is capable of storing, searching, and retrieving address entries. Complex object models (such as those found in Excel) can be built from these techniques. </p>

<p>The address book uses Microsoft's Java SDK 2.0, along with Visual J++ 1.1. Confusingly, J++ 1.1 implements the 1.0 version of the Java language, whereas the 2.0 SDK implements the 1.1 version of the language. This version implements new Java language features such as serialization and inner classes, and allows a Java COM server (API) to run in process (that is, as a DLL).</p>

<p>Microsoft's Visual J++ 1.1 can be made to work with its Java SDK 2.0. If you plan to use both, I recommend you install Visual J++ first. Then obtain and install the SDK; see http://www.microsoft.com/java/. Finally, copy the following files into your DevStudio\SharedIDE\bin directory: jvc.exe, jps.dll, and msjvc.dll. You also might want to save the original version of jvc.exe somewhere. Visual J++ works reasonably well with the SDK. I found some flakiness with the debugger, but I was using a beta version of the SDK.</p>

<p><a name="rf1"><a href="9801bf1.htm">Figure 1</A> shows the four main interfaces making up the Address Book API. </p>

<ul>
  <li>The <i>Application </i>interface is the client's first point of access to the library. 
  <li>The <i>AddressBooks </i>collection contains all the currently open <i>AddressBook </i>files. 
  <li>The <i>AddressBook </i>interface provides a collection of <i>Address </i>entries. 
  <li>The <i>Address </i>interface presents properties for a name, address, and phone number. An <i>AddressBook </i>can locate an <i>Address </i>entry by name, or list all its entries via an enumeration interface.
</ul>

<p>Both the <i>AddressBooks </i>and <i>AddressBook </i>collections provide two kinds of enumerations: <i>IEnumVariant</i> and <i>DIEnum</i> (dual-interface enumeration).</p>

<p>The MIDL file in which these interfaces are defined, AddressBookLib.idl, is available electronically (see "Resource Center," page 3). This file is compiled into a Type Library file (.tlb) using the MIDL command. From the type library, you generate Java interfaces using the JActiveX tool (in the SDK). You then write implementation classes for these interfaces.</p>

<p><a name="rl2"><a href="9801b.htm#l2">Listing Two</A> (excerpted from AddressBookLib.idl) shows the definition for the <i>Application </i>interface. All elements of an interface can (and sometimes must) have one or more attributes, which are enclosed in square brackets. All COM interfaces have the <i>object</i> and <i>uuid</i> attributes. Each must have a unique <i>uuid</i>.</p>

<p>The <i>uuid</i> can be generated with guidgen, a tool provided with Visual J++ as well as with the Java SDK. The guidgen tool generates a <i>uuid</i> and can put it on the clipboard in several formats. The Registry format is the most convenient for this purpose. A sample result is <i>{189636C0-32BD-11d1-B5AC-9E4A44000000}</i>. You can paste this between the parentheses of the <i>uuid()</i> keyword, then delete the curly braces ({}).</p>

<p>Dual interfaces require the <i>dual</i> attribute. The <i>pointer_default</i> attribute specifies the handling of pointer parameters with regard to aliasing and other issues, and is required for most interfaces. <i>pointer_default(unique)</i> is generally the proper value.</p>

<p>Interfaces, as well as methods and other elements in MIDL, can have help strings that appear in object browsers.</p>

<p>A method has an ID, which is used by <i>IDispatch</i>. The ID is generally arbitrary and can be omitted (in which case, one is assigned by the MIDL compiler), but certain values have special meanings. In <a href="9801b.htm#l2">Listing Two</A>, the <i>Name</i> property has the special ID DISPID_VALUE indicating that <i>Name</i> is the default property for this interface.</p>

<p>Properties appear exactly like methods. Each property can have a <i>get</i> and/or <i>set</i> method. These are indicated with the <i>propget</i> and <i>propput</i> attributes, respectively. Like interfaces, methods and properties can have help strings.</p>

<p>Each parameter has an indicator to show whether it is an input or output parameter, or both. The <i>retval</i> keyword indicates a return value. Although methods in a dispatch interface always return HRESULT, they do not appear that way to the client language (unless that language is C++). Instead, the HRESULT is treated as an exception code (an error code in Visual Basic), and the return value is the one indicated with <i>retval</i>, if any. The <i>retval</i> must be the last parameter, and must be an output parameter (that is, have the <i>out</i> keyword).</p>

<p>Output parameters are always pointers. When the output is an interface pointer, it must be coded as a pointer to a pointer (**). <a name="rt1"><a href="9801bt1.htm">Table 1</A> lists the legal types for parameters and return values in dispatch interfaces.</p>

<p>The <i>Application </i>interface has an <i>AddressBooks</i> property that returns an <i>AddressBooks </i>interface pointer. In addition, it has <i>Application</i> and <i>Parent</i> properties. All Automation objects should have these two properties. In the case of the <i>Application </i>interface, they simply return pointers to the interface itself.</p>

<p><a name="rl3"><a href="9801b.htm#l3">Listing Three</A> is the <i>Application </i>interface in Java, as generated by the JActiveX tool. HRESULTs are nowhere to be seen: The return values are those indicated with the <i>retval</i> attribute. HRESULTs are provided through exceptions.</p>

<p>The first statement in <a href="9801b.htm#l3">Listing Three</A> is the package declaration. The package name is derived from the library name as declared in the MIDL file.</p>

<p>The generated code is full of special comments that look like Javadoc comments, starting with /**@com. These instruct the compiler to generate special codes in the class file to support the COM mechanisms.</p>

<p><a name="rl4"><a href="9801b.htm#l4">Listing Four</A> is the declaration of the <i>coclass</i> (again, from AddressBook.idl) associated with the <i>Application </i>interface. An Automation API must provide at least one <i>coclass</i> so that the client can gain access to the library. The client instantiates an object of this class, and uses its methods and properties to obtain other objects. The <i>uuid</i> for the <i>coclass</i> forms the key value for a Windows registry entry that tells COM how to load the object's server and create an instance of the object. JActiveX generates a source file for the <i>coclass</i>. This file contains everything you need to instantiate your class through COM.</p>

<p>In Visual Basic, a statement such as <i>Set obj = CreateObject("AddressBook.Application")</i> results in a call to a COM API function (probably <i>CoCreateInstance</i>) that creates an instance of this <i>coclass</i> and obtains its dispatch interface.</p>

<p><a name="rl5"><a href="9801b.htm#l5">Listing Five</A> is the <i>AddressBook </i>interface declaration. The <i>AddressBook</i> object, like <i>AddressBooks</i>, is a typical COM collection class. Beyond the obligatory <i>Application</i> and <i>Parent</i> properties, it has an <i>Add</i> method to create new <i>Address</i> entries, and a <i>Remove</i> method to delete them. The <i>Item</i> method provides access to specified elements in the collection. <i>Item</i> is generally indexed, but the type of index depends on the collection. In this case, the index is a string representing a name. These methods are required in the Automation guidelines.</p>

<p>The guidelines also require a collection to support the <i>_NewEnum</i> property, which returns an object that implements the <i>IEnumVariant</i> interface.</p>

<p>This COM interface supports the Visual Basic "for each" construct. Since the VB construct is less convenient to use from C++ and impossible to use from Perl or VBScript, my enumeration object also supports my own <i>DIEnum</i> interface.</p>

<p>The <i>AddressBook </i>has properties and methods appropriate to document objects, including the <i>FullName</i>, <i>Name</i>, and <i>Path</i> properties. These give portions of the filename. The <i>Saved</i> property indicates whether the file has been modified since it was last saved. The <i>Save</i> method saves current changes, and the <i>Close</i> method removes it from the list of open <i>AddressBook</i> objects (that is, from its parent <i>AddressBooks</i> object).</p>

<p>The class <i>AutoEnum</i> (from AutoEnum.java, also available electronically) implements the <i>IEnumVariant</i> and <i>DIEnum</i> interfaces. It requires a reference to a collection object, from which it obtains an <i>Enumeration</i>. I've defined an interface called <i>Enumerable</i> (available electronically) that supports a single method, <i>elements()</i>, returning an <i>Enumeration</i>. I couldn't wrap the <i>Enumeration</i> directly because <i>IEnumVariant</i> provides a <i>Reset</i> method, which must obtain a new <i>Enumeration</i> from the collection.</p>

<p>The <i>Next</i> method (<a name="rl6"><a href="9801b.htm#l6">Listing Six</A>) returns its results in an array of VARIANTs. Among the data types supported by the VARIANT union is an <i>IDispatch</i> pointer. Microsoft provides a Java wrapper class for the VARIANT type. I use the <i>putDispatch()</i> method. There is a <i>put</i> method for each data type supported by VARIANT.</p>

<p>Beyond the <i>AutoEnum</i> class, the rest of the example involves straightforward Java code. The beauty of these tools is that all the COM machinery -- with which C++ programmers generally must deal explicitly -- is buried in the compiler and the JVM. <i>QueryInterface</i> is handled by Java casts, and reference counting (<i>Addref</i> and <i>Release</i>) is handled by Java memory management.  </p>

<p>In <i>AddressBooksimpl</i> and <i>AddressBookimpl</i> (I've appended "impl" to classes that implement my Automation interfaces), I use an anonymous inner class to obtain an implementation of <i>Enumerable</i> (which I need for the <i>AutoEnum</i> constructor); see <a name="rl7"><a href="9801b.htm#l7">Listing Seven</A>. I could have let the implementation classes implement this interface, but that would add <i>elements()</i> to their public interfaces, which I preferred not to do.</p>

<p><i>AddressBookimpl</i> and <i>Addressimpl</i> implement the <i>Serializable </i>interface, which declares no methods but allows those objects to be serialized. I've declared many of their private fields "transient," which prevents them from being saved or loaded. The identity of the containing <i>AddressBooksimpl</i> and <i>Applicationimpl</i> objects will change from time to time and should not be saved. This requires these classes to have methods to set proper values for these fields after the objects have been deserialized (loaded).</p>

<p>Both of my collection classes use standard Java collection classes to maintain their collections. The only job of the <i>Addressimpl</i> class (other than storing data) is to notify its parent <i>AddressBook</i> when any data has changed. The implementation classes for these are available electronically.</p>

<h3>Handling Errors</h3>

<p>The <i>AutoEnum</i> class provides several examples of error handling. Recall that all methods in the MIDL file were declared to return an HRESULT, which is not visible in the Java implementations. The way to set an HRESULT, along with other information such as a message string, is through a special exception class called <i>ComException</i> (actually, <i>com.ms.com.ComException</i>). This has two subclasses, <i>ComFailException</i> and <i>ComSuccessException</i>.</p>

<p><a name="rl8"><a href="9801b.htm#l8">Listing Eight</A> shows the <i>AutoEnum.Skip</i> method, which throws a <i>ComSuccessException</i> if there are no more entries. This results in the HRESULT being set to S_FALSE. This is not an error per se, but a special condition to which the client must be alerted. The definition of <i>IEnumVARIANT</i> calls for this code to be set in this case.</p>

<p><a name="rl9"><a href="9801b.htm#l9">Listing Nine</A> is the <i>AutoEnum.Clone</i> method. There is really no reasonable way to implement this method because Java Enumerations can't be cloned. To indicate this, it returns (throws) a standard error code, E_NOTIMPL.</p>

<p>In C++, this value would be defined in a standard header file. No such file exists for Java. Instead, I have defined it by declaring an <i>enum</i> called <i>StdErrors</i> in the MIDL file. JActiveX generates a Java interface for this <i>enum</i>, just as it does for a MIDL interface. The generated interface contains only constants (static final <i>int</i> variables). <a name="rl10"><a href="9801b.htm#l10">Listing Ten</A> shows a portion of this <i>enum</i>.</p>

<p>Similarly, I have declared an <i>enum</i> called <i>Errors</i>; see <a name="rl11"><a href="9801b.htm#l11">Listing Eleven</A>. These are application-specific error codes. The first entry sets the starting value for the sequence. This value indicates that these are error codes (the high bit), that they are interface specific (the 0x00040000 portion), and that they are not OLE standard codes (which are in the range below 0x80040200). You should always use this value for this purpose. <a name="rl12"><a href="9801b.htm#l12">Listing Twelve</A> shows the <i>AutoEnum.NextElement</i> method, which uses one of these codes.</p>

<h3>Using the API</h3>

<p>The API needs to be entered in the registry to be usable, using the javareg command. <a name="rl13"><a href="9801b.htm#l13">Listing Thirteen</A> shows a batch file that does this.</p>

<p>Any application or language that understands Automation can now use the API. The following files are available electronically:</p>

<ul>
  <li>testCreate.pl, a Perl script for creating an AddressBook file called MyBook.
  <li>testRead.pl, a Perl script that reads the file.
  <li>An Excel macro that reads the address book and populates the first two columns of a spreadsheet with names and phone numbers.
</ul>

<h3>Conclusion</h3>

<p>Sophisticated and finely tuned COM implementations may still require C++. Although Java's support for threading is excellent, Microsoft's support in Java for the various COM threading models is less so (or else largely undocumented). In addition, some COM interfaces (for example, the OLE DB database interfaces) require pointers to data buffers, which Java won't provide. </p>

<p>For most purposes, though, Java is a first-rate language in which to implement an Automation API. Java and COM Automation are valuable tools that work well together, and the techniques described here can help bridge disparate systems and solve real-world problems.</p>

<p><b>DDJ</b></p>


<H4><a name="l1">Listing One</H4>

<pre>javareg /register /class:autoXTest /clsid:"{735640F0-3B59-11D1-B5B9-98596A000000}" /typelib:autoXTest.tlb /progid:"autoXTest.Main" /codebase:"g:\projects\autoX"</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>[    object,
    uuid(4f9dfa91-32ef-11d1-b5ac-9e4a44000000), dual,
    pointer_default(unique), helpstring("Application Interface")
]
interface Application : IDispatch
{
    /* for Application, this just returns pointer to self */
    [
        propget, helpstring("Application property")
    ]
    HRESULT Application([out,retval] Application** val);
<p></p>
    /* Parent, i.e. containing object for Application, returns pointer 
                                                               to itself */
    [
        propget, helpstring("Parent property")
    ]
    HRESULT Parent([out,retval] Application** val);
<p></p>
    /* name of the application */
    [
        propget, id(DISPID_VALUE), helpstring("Application Name")
    ]
    HRESULT Name([out,retval] BSTR* val);
<p></p>
    /* the collection of open AddressBooks */
    [
        propget, helpstring("AddressBooks property")
    ]
    HRESULT AddressBooks([out,retval] AddressBooks** val);
}
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three </H4>

<pre>// Auto-generated using JActiveX.EXE 4.79.2207//   (JActiveX AddressBookLib.tlb)
// WARNING: Do not remove the comments that include "@com" directives.
// This source file must be compiled by a @com-aware compiler.
// If you are using the Microsoft Visual J++ compiler, you must use
// version 1.02.3920 or later. Previous versions will not issue an error
// but will not generate COM-enabled class files.
<p></p>
package addressbooklib;
<p></p>
import com.ms.com.*;
import com.ms.com.IUnknown;
import com.ms.com.Variant;
<p></p>
// Dual interface Application
/** @com.interface(iid=4F9DFA91-32EF-11D1-B5AC-9E4A44000000, 
                                              thread=AUTO, type=DUAL) */
public interface Application extends IUnknown
{
  /** @com.method(vtoffset=4, dispid=1610743808, type=PROPGET, 
                                   name="Application", addFlagsVtable=4)
      @com.parameters([iid=4F9DFA91-32EF-11D1-B5AC-9E4A44000000,
                                        thread=AUTO,type=DISPATCH] return) */
  public addressbooklib.Application getApplication();
<p></p>
  /** @com.method(vtoffset=5, dispid=1610743809, type=PROPGET, name="Parent", 
                                                 addFlagsVtable=4)
      @com.parameters([iid=4F9DFA91-32EF-11D1-B5AC-9E4A44000000,thread=AUTO,
                                             type=DISPATCH] return) */
  public addressbooklib.Application getParent();
<p></p>
  /** @com.method(vtoffset=6, dispid=0, type=PROPGET, name="Name", 
                                                        addFlagsVtable=4)
      @com.parameters([type=STRING] return) */
  public String getName();
<p></p>
  /** @com.method(vtoffset=7, dispid=1610743811, type=PROPGET, 
                                      name="AddressBooks", addFlagsVtable=4)
      @com.parameters([iid=4F9DFA96-32EF-11D1-B5AC-9E4A44000000,
                                        thread=AUTO,type=DISPATCH] return) */
  public addressbooklib.AddressBooks getAddressBooks();
<p></p>
  public static final com.ms.com._Guid iid = 
       new com.ms.com._Guid((int)0x4f9dfa91, (short)0x32ef, (short)0x11d1, 
       (byte)0xb5, (byte)0xac, (byte)0x9e, (byte)0x4a, (byte)0x44, (byte)0x0, 
       (byte)0x0, (byte)0x0);
}
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>    [        uuid(4f9dfa95-32ef-11d1-b5ac-9e4a44000000),
        appobject,  // the Application object
        helpstring("The Application Object for the AddressBook API")
    ]
    coclass CApplication
    {
        interface Application;
    };
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<H4><a name="l5">Listing Five</H4>

<pre>[    object,
    uuid(4f9dfa92-32ef-11d1-b5ac-9e4a44000000),
    dual,
    pointer_default(unique),
    helpstring("AddressBook Interface")
]
interface AddressBook : IDispatch
{
    [
        propget, helpstring("Application property")
    ]
    HRESULT Application([out,retval] Application** val);
<p></p>
    [
        propget, helpstring("Parent property")
    ]
    HRESULT Parent([out,retval] AddressBooks** val);
<p></p>
    [
        propget, helpstring("The file name with path for this AddressBook")
    ]
    HRESULT FullName([out,retval] BSTR* val);
<p></p>
    [
      propget, helpstring("The file name (without path) for this AddressBook")
    ]
    HRESULT Name([out,retval] BSTR* val);
<p></p>
    [
      propget, helpstring("The path (without file name) for this AddressBook")
    ]
    HRESULT Path([out,retval] BSTR* val);
<p></p>
    [
        propget, 
        helpstring("Whether the file has been saved since the last changes")
    ]
    HRESULT Saved([out,retval] VARIANT_BOOL *val);
<p></p>
    [
        helpstring("close the Address Book")
    ]
    HRESULT Close();
<p></p>
    [
        helpstring("Save changes to Address Book")
    ]
    HRESULT Save();
<p></p>
    [
        propget, helpstring("Returns number of entries.")
    ]
    HRESULT Count([out, retval] long* retval);
<p></p>
    [
        propget, restricted, id(DISPID_NEWENUM),
        helpstring("returns an enumerator for the collection.")
    ]
    HRESULT _NewEnum([out, retval] IUnknown** ret); 
<p></p>
    [
        helpstring("Add a new Address entry.")
    ]
    HRESULT Add([in] BSTR name, [out,retval] Address** ret);
<p></p>
    [
        id(DISPID_VALUE), 
        helpstring("Given a name, returns the Address entry.")
    ]
    HRESULT Item([in] BSTR name, [out, retval] Address** ret);
<p></p>
    [
        helpstring("Remove an Address from the collection.")
    ]
    HRESULT Remove([in] BSTR name);
<p></p>
    [
        propget, helpstring("returns an enumerator for the collection.")
    ]
    HRESULT Enum([out, retval] DIEnum** ret);   
<p></p>
}
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>
<H4><a name="l6">Listing Six</H4>

<pre>    public void Next(int n, Variant v[], int x[])    {
        int i;
        for(i = 0; i &lt; n &amp;&amp; enum.hasMoreElements(); ++i)
        {
            Variant var = new Variant(enum.nextElement());
            v[i] = var;
        }
        if(x != null)
            x[0] = i;
        if(i &lt; n)
            /* returns S_FALSE status, indicating end of collection reached */
            throw new ComSuccessException();
    }
</pre>
<P>
<a href="#rl6">Back to Article</A>
</P>
<H4><a name="l7">Listing Seven</H4>

<pre>    // get a COM enumeration object for this collection    private AutoEnum getAutoEnum()
    {
        /* use an anonymous class to implement the Enumerable
         * interface required by AutoEnum's constructor */
        return new AutoEnum(new Enumerable() {
            // get an Enumeration on the collection
            public Enumeration elements()
            {
                return entries.elements();
            }
        });
    }
</pre>
<P>
<a href="#rl7">Back to Article</A>
</P>
<H4><a name="l8">Listing Eight</H4>

<pre>    public void Skip(int n)
    {
        while((n-- &gt; 0) &amp;&amp; enum.hasMoreElements())
            enum.nextElement();
        if(n &gt; 0)
            // returns S_FALSE status, indicating end of collection reached
            throw new ComSuccessException();
    }
</pre>
<P>
<a href="#rl8">Back to Article</A>
</P>
<H4><a name="l9">Listing Nine</H4>

<pre>    public IEnumVariant Clone()
    {
        throw new ComFailException( 
                         StdErrors.E_NOTIMPL, "Clone method not supported");
    }
</pre>
<P>
<a href="#rl9">Back to Article</A>
</P>
<H4><a name="l10">Listing Ten</H4>

<pre>    enum StdErrors    {
        [helpstring("Unexpected failure")]
        E_UNEXPECTED = 0x8000FFFF,
<p></p>
        [helpstring("Not implemented")]
        E_NOTIMPL = 0x80004001,
<p></p>
        [helpstring("Ran out of memory")]
        E_OUTOFMEMORY = 0x8007000E,
<p></p>
        // etc.
    };
</pre>
<P>
<a href="#rl10">Back to Article</A>
</P>
<H4><a name="l11">Listing Eleven</H4>

<pre>    enum Errors    {
        E_FIRST = 0x80040200,
    
        [helpstring("Index not valid for collection")]
        E_OUTOFBOUNDS,
<p></p>
        [helpstring("Specified Item not Found")]
        E_ITEMNOTFOUND,
<p></p>
        // etc.
    };
</pre>
<P>
<a href="#rl11">Back to Article</A>
</P>
<H4><a name="l12">Listing Twelve</H4>

<pre>    public Object NextElement()    {
        if(enum.hasMoreElements())
            return enum.nextElement();
        else
            throw new ComFailException(
                        Errors.E_OUTOFBOUNDS, 
                        "Attempt to Retrieve after last element");
    }
</pre>
<P>
<a href="#rl12">Back to Article</A>
</P>
<H4><a name="l13">Listing Thirteen</H4>

<pre>REM reg.cmdREM Register the Applicationimpl class as a COM object
REM /register means register the class
REM /class specifies which class
REM /clsid specifies the class id, which is the UUID of the coclass
REM /progid specifies a human-readable alias for the class id
javareg /register /class:Applicationimpl /clsid:"{4f9dfa95-32ef-11d1-b5ac-9e4a44000000}" /progid:"AddressBook.Application"
<p></p>
</pre>
<P>
<a href="#rl13">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
