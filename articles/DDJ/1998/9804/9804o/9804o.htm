<html>
<META NAME="year" CONTENT="1998">
<head>
<title>Undocumented Corner</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Inside ATL's Property Pages</h1>

<p><i>Dr. Dobb's Journal</i> April 1998
</p>
<h3>By George Shepherd and Scot Wingo</h3>

<I>Scot is a cofounder of Stingray Software. He can be contacted at mfc_faq@stingsoft.com. George is a senior computer scientist with DevelopMentor and can be contacted at 70023.1000@compuserve.com. They are the coauthors of MFC Internals (Addison-Wesley, 1996).</I>

<hr>

<p>In our February 1998 installment of "Undocumented Corner," we took a look at how Microsoft's Active Template Library (ATL) implements dual interfaces. We saw that ATL classes implementing dual interfaces derive from a template named <i>IDispatchImpl</i>. <i>IDispatchImpl</i> works by holding an <i>ITypeInfo</i> pointer representing the type information of the dual interface. When clients call into an ATL-based object's <i>IDispatch</i> interface, ATL simply delegates to the <i>ITypeInfo</i> pointer. This month, we'll take a look at how ATL implements property pages for ActiveX controls.</p>

<h3>Property Page Review</h3>

<p>ActiveX controls are reusable software gadgets (mostly UI components) built using COM. While even today there's some confusion as to what really constitutes an ActiveX control, most folks generally agree that ActiveX controls are those COM objects that live within DLLs and implement a certain set of features. Those features include OLE's embedding protocol, regular incoming interfaces, outgoing interfaces that are connected using COM's connection point technology, and property pages. </p>

<p>In general, most ActiveX controls have both a presentation state and an internal state. The presentation state is the one reflected when the control draws itself. The control's internal state is a set of variables exposed to the outside world via one or more interfaces -- they're also known as properties.</p>

<p>For example, imagine a simple grid implemented as an ActiveX control. The grid has an external presentation state and a set of internal variables for describing the state of the grid. The properties of a grid control would probably include the number of rows in the grid, the number of columns in the grid, the color of the lines composing the grid, the kind of font to use, and so forth. </p>

<p>As ActiveX controls are usually UI gadgets meant to be mixed into much larger applications, they often find their homes within places like Visual Basic forms and MFC form views and dialogs. When a control is instantiated, the client code can usually reach into the control and manipulate its properties by exercising interface functions. However, when an ActiveX control is in design mode, it's usually not practical to access the properties through the interfaces. It would be unkind to tool developers to make them have to go through the interface functions just to tweak some properties in the control. Why should the tool vendor have to provide UI for managing properties? That's what property pages are for. Property pages are sets of dialogs implemented for manipulating properties. That way, the tool vendors don't have to keep recreating dialog boxes for tweaking the properties of an ActiveX control.</p>

<h3>How Property Pages are Used</h3>

<p>Client code usually accesses property pages in one of two ways. The first way is for the client to call <i>IOleObject</i>'s <i>DoVerb</i>, passing in the property verb identifier (named OLEIVERB_PROPERTIES and defined as the number -7). The control then shows a dialog frame with all the control's property pages. For example, <a name="rf1"><a href="9804of1.htm">Figure 1</A> illustrates the property dialog for Microsoft's FlexGrid control. </p>

<p>Property pages are a testament to the power of COM. As it turns out, each single property page is a separate COM object (represented by GUIDs, of course). When a client asks control to show its property pages via the properties verb, the ActiveX control passes its own list of property page GUIDs into a function named <i>OleCreatePropertyFrame,</i> which enumerates the property page GUIDs, calling <i>CoCreateInstance()</i> for each property page. The property frame gets a copy of an interface for talking to the control (so the frame can change the properties within the control). <i>OleCreateProperty</i> frame calls back to the control when the user hits the OK or Apply button.</p>

<p>The second way for clients to use property pages is for the client to ask the control for a list of property page GUIDs. Then the client calls <i>CoCreateInstance</i> on each property page and installs each in its own frame. See <a name="rf2"><a href="9804of2.htm">Figure 2</A> for an example of how Visual C++ uses Microsoft's FlexGrid property sheets in its own property dialog frame. </p>

<p>This is by far the most common way for clients to use a control's property pages. Notice that the property sheet in <a href="9804of2.htm">Figure 2</A> contains a General tab in addition to the control's property pages. The "General" property page belongs to Visual C++. The "Control," "Style," "Font," "Color," "Picture," and "All" property pages belong to the control (even though they're being shown within the context of Visual C++.</p>

<p>For property pages to work correctly, the COM objects implementing property pages need to implement <i>ISpecifyPropertyPages</i>, and each property page object needs to implement an interface named <i>IPropertyPage</i>. With this in mind, let's take a look at exactly how ATL implements property sheets.</p>

<h3>ATL's Property Page Classes</h3>

<p>Visual Studio provides a wizard for creating property pages in your ATL project. To create one, just select New ATL Object from Visual C++'s Insert menu. The ATL ObjectWizard generates a CPP class for you that implements the functions and interfaces necessary for the class to behave as a property page. In addition to generating a C++ class that implements the correct property page interfaces, the ATL ObjectWizard makes the property page class part of the project. The ObjectWizard adds the new property page class to the IDL file within the coclass section. In addition, the ObjectWizard adds the property page to the object map so <i>DllGetClassObject</i> can find the property page classes. Finally, the ObjectWizard adds a new registry script (so the DLL makes the correct registry entries when the control is registered). </p>

<p>ATL's property page classes are composed of several ATL templates: <i>CComObjectRootEx</i> (to implement <i>IUnknown</i>), <i>CComCoClass</i> (the class object for the property page), <i>IPropertyPageImpl</i> (for implementing <i>IPropertyPage</i>), and <i>CDialogImpl</i> (for implementing the dialog-specific behavior). </p>

<p>ATL's property pages are relatively simple beasts. They really only implement one interface -- <i>IPropertyPage</i>. <a name="rl1"><a href="9804o.htm#l1">Listing One</A> shows the <i>IPropertyPage</i> interface.</p>

<p>This interface is used by client code to manage the property page. For example, if the property page lives inside the frame created by <i>OleCreatePropertyFrame</i>, the property frame uses the interface to perform operations such as applying the new properties when the property frame's Apply button is pushed. </p>

<h3>ATL and the Properties Verb</h3>

<p>Let's examine how ATL implements the properties verb first. A control shows its property pages in response to the client issuing the properties verb by calling <i>IOleObject::DoVerb</i> using the number defined by OLEIVERB_PROPERTIES. When this happens, control ends up in <i>CComControlBase::DoVerbProperties</i>. <i>CComControlBase::DoVerbProperties</i> simply calls <i>OleCreatePropertyFrame</i>, passing in its own <i>IUnknown</i> pointer and the list of property page GUIDs. <i>OleCreatePropertyFrame</i> takes the list of GUIDs, calling <i>CoCreateInstance</i> on each one to create the property pages and arrange them within the dialog frame. <i>OleCreatePropertyFrame</i> uses each property pages's <i>IPropertyPage</i> interface to manage the property page. </p>

<h3>ATL Property Maps</h3>

<p>Of course, understanding how <i>OleCreatePropertyFrame</i> works begs the next question -- where does the list of property pages come from? ATL generates lists of property pages through its property maps -- some macros to help manage property pages. Whenever you add a new property page to an ATL-based control, you need to set up the list of property pages through these macros. For implementing property pages, there are three macros: BEGIN_PROPERTY_MAP, PROP_ENTRY, PROP_ENTRY_EX, PROP_PAGE, and END_PROPERTY_MAP. <a name="rl2"><a href="9804o.htm#l2">Listing Two</A> presents these macros.</p>

<p>When you decide to add property pages to a COM class using ATL, the ATL documentation tells you to put these macros into your class' header file. For example, if you wanted to add property pages to a class named <i>CTestCtl</i>, you could add <a name="rl3"><a href="9804o.htm#l3">Listing Three</A>. </p>

<p>ATL's property map macros set up the list of GUIDs representing property pages. Remember that property pages are just COM objects. Notice that <a href="9804o.htm#l2">Listing Two</A> shows a structure named ATL_PROPMAP_ENTRY and that BEGIN_PROPERTY_MAP declares a static variable of this structure. The PROP_PAGE macro simply inserts a GUID into the list of property pages. PROP_ENTRY insert a property page GUID into the list as well as associating a specific control property with the property page. The final macro PROP_ENTRY_EX lets you associate a certain dual interface to a property page. </p>

<p>Now let's see how ATL's property pages work with tools like Visual Basic and Visual C++. </p>

<h3>ATL and Tools</h3>

<p>Executing the properties verb isn't the only way for an ActiveX control to show its property pages. As we mentioned before, folks who write tools like Visual Basic and Visual C++ may want programmatic access to a control's property pages. For example, imagine working on a dialog box containing an ActiveX control. When you right mouse-click on the control to view the properties you get dialog frame produced by Visual C++ (as opposed to <i>OleCreatePropertyFrame</i>). </p>

<p>Visual C++ uses the control's <i>ISpecifyPropertyPages</i> interface to get the list of GUIDs; see <a name="rl4"><a href="9804o.htm#l4">Listing Four</A>. ATL implements this interface by cycling through the list of GUIDs (produced by the property map macros) and returning them within the CAUUID structure. Then environments like Visual C++ use each GUID in a call to <i>CoCreateInstance</i> to create new property page.</p>

<h3>Pushing the Apply Button</h3>

<p>The last interesting part of ATL's property page implementation is to see how they implement the <i>Apply</i> method. Once the client code has produced the set of pages (either by using <i>OleCreateFrame</i> or some other means), the client code may ask the property page to apply new properties. Remember that the ActiveX control and the property page are separate COM objects, so they need to communicate via interfaces.</p>

<p>When you create a property page using the ATL ObjectWizard, ATL overrides the Apply function from <i>IPropertyPage</i>. The ActiveX control has the necessary interfaces -- they were passed into the property page early in the game via a call to <i>IPropertyPage::SetObjects</i>. Most property pages respond to the Apply function by setting the state of the ActiveX control through the interface provided. </p>

<h3>Conclusion</h3>

<p>Property pages are fairly standard features that clients of ActiveX controls expect to be able to access. MFC has included a property page architecture since the introduction of OLE controls back in October 1994. ATL's property pages work in fundamentally the same way as MFC's. Each ActiveX control that wants to use property pages has to maintain a list of property page GUIDs. The DLL contains both the ActiveX control and the property pages. When the DLL is registered, all the components are registered together. Generally, there are two ways client code can use the property pages. First, the client can ask the control to show its property pages outright by calling <i>IOleObject</i>'s <i>DoVerb</i> function. The second and more common way is for the client to query the control for all the property page GUIDs (through <i>ISpecifyPropertyPages</i>), call <i>CoCreateInstance</i> on each one, and host the property pages from within its own frame. </p>

<p><b>DDJ</b></p>



<H4><a name="l1">Listing One</H4>

<pre>interface IPropertyPage : public IUnknown {   HRESULT SetPageSite(IPropertyPageSite *pPageSite) = 0;
   HRESULT Activate(HWND hWndParent, LPCRECT pRect, BOOL bModal) = 0;
   HRESULT Deactivate( void) = 0;
   HRESULT GetPageInfo(PROPPAGEINFO *pPageInfo) = 0;
   HRESULT SetObjects(ULONG cObjects, IUnknown **ppUnk) = 0;
   HRESULT Show(UINT nCmdShow) = 0;
   HRESULT Move(LPCRECT pRect) = 0;
   HRESULT IsPageDirty( void) = 0;
   HRESULT Apply( void) = 0;
   HRESULT Help(LPCOLESTR pszHelpDir) = 0;
   HRESULT TranslateAccelerator(MSG *pMsg) = 0;
};
<p></p>
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>struct ATL_PROPMAP_ENTRY{
   LPCOLESTR szDesc;
   DISPID dispid;
   const CLSID* pclsidPropPage;
   const IID* piidDispatch;
};
#define BEGIN_PROPERTY_MAP(theClass) \
  typedef _ATL_PROP_NOTIFY_EVENT_CLASS __ATL_PROP_NOTIFY_EVENT_CLASS; \
  static ATL_PROPMAP_ENTRY* GetPropertyMap()\
  {\
    static ATL_PROPMAP_ENTRY pPropMap[] = \
    {
#define PROP_PAGE(clsid) \
    {NULL, NULL, &amp;clsid, &amp;IID_NULL},
#define PROP_ENTRY(szDesc, dispid, clsid) \
    {OLESTR(szDesc), dispid, &amp;clsid, &amp;IID_IDispatch},
#define PROP_ENTRY_EX(szDesc, dispid, clsid, iidDispatch) \
    {OLESTR(szDesc), dispid, &amp;clsid, &amp;iidDispatch},
#define END_PROPERTY_MAP() \
      {NULL, 0, NULL, &amp;IID_NULL} \
    }; \
    return pPropMap; \
  }
<p></p>
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>class ATL_NO_VTABLE CTestCtl :    ... {
   ...
<p></p>
BEGIN_PROPERTY_MAP(CTestCtl)
    PROP_ENTRY("Caption goes here...", 2, 
                CLSID_MainPropPage)
    PROP_ENTRY_EX("Caption goes here...", 3,
                  CLSID_SecondPropPage, 
                  DIID_SecondDualInterface)
    PROP_PAGE(CLSID_StockColorPage)
END_PROPERTY_MAP()
};
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>interface ISpecifyPropertyPages : public IUnknown {   HRESULT GetPages(CAUUID *pPages);
};
typedef struct tagCAUUID 
{ 
    ULONG     cElems; 
    GUID FAR* pElems; 
} CAUUID;
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
