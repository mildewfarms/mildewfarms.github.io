<html>
<META NAME="year" CONTENT="1998">
<head>
<title>STL's Red-Black Trees</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>STL's Red-Black Trees</h1>

<p><i>Dr. Dobb's Journal</i> April 1998
</p>
<h2>Inside the library's associative containers </h2>

<h3>By Jason Shankel</h3>

<I>Jason is a programmer at Maxis, where he can be contacted at jshankel@maxis.com.</I>

<hr>

<p>The C++ Standard Template Library (STL) introduces the associative containers <i>set</i>, <i>multiset</i>, <i>map</i>, and <i>multimap</i>. The foundation of these classes is a balanced binary tree called a "red-black tree." In this article, I'll examine the nature of red-black trees and the specifics of the implementations used by the Hewlett-Packard and Silicon Graphics versions of the STL. </p>

<h3>What are Red-Black Trees?</h3>

<p>Central to understanding red-black trees is understanding 2-3-4 trees. 2-3-4 trees are balanced trees where each node contains one, two, or three data members and two, three or four links to child nodes. Each node has one link more than it has data members. 2-3-4 trees are sorted similarly to binary trees.</p>

<p>A 2-node has one data member and two links, a 3-node has two data members and three links and 4-node has three data members and four links (<a name="rf1"><a href="9804ef1.htm">Figure 1</A>).</p>

<p>The insertion rules for 2-3-4 trees enforce balancing. New data is always placed at the bottom of the tree. If the data is being added to a 2-node, the 2-node is converted to a 3-node. If the data is being added to a 3-node, the 3-node is converted to a 4-node. If the data is being added to a 4-node, the middle data member of the 4-node is promoted to its parent node (which may be a 2-, 3-, or 4-node itself), and the remaining two data members are split into two 2-nodes, one of which receives the new data and becomes a 3-node (<a name="rf2"><a href="9804ef2.htm">Figure 2</A>).</p>

<p>If the middle data member is promoted to a 4-node, the 4-node is split just as its child was and its middle data member is promoted. This process continues until a node other than a 4-node or the root node is encountered. If the root node is encountered and it is a 4-node, then it is split and the tree gains a level.  </p>

<p>For more detailed descriptions of 2-3-4 trees, see <i>Algorithms</i>, Second Edition, by Robert Sedgewick (Addison-Wesley, 1988) and <i>C++ Programmer's Guide to the Standard Template Library</i>, by Mark Nelson (IDG Books Worldwide, 1995). </p>

<h3>Red-Black Trees</h3>

<p>The advantage of 2-3-4 trees is that they are intrinsically balanced. However, they are costly to implement and traverse directly. This is where red-black trees come in.</p>

<p>Red-black trees are binary trees that implement the rules for 2-3-4 trees by establishing colors (red and black) for the links between nodes. A red link represents a link between two data members within the same 3- or 4-node, and a black link represents a link between two different 2-, 3-, or 4-nodes. <a name="rf3"><a href="9804ef3.htm">Figure 3</A> shows how red-black nodes are combined to create  2-, 3-, and 4-nodes.  </p>

<p>No node may have a red link to both its parent and its child, and all direct paths from a given node down to a leaf must cross the same number of black links.</p>

<h3>Recoloring and Rebalancing</h3>

<p>Whenever a node is inserted or removed, the tree must be recolored and rebalanced to enforce the red-black rules. </p>

<p>New data is red-linked to a leaf or single-child node of a red-black tree. The leaf's color configuration is then examined to determine how the tree must be recolored and rebalanced. If the leaf is black-linked to its parent, it is a 2-node or the root of a 3-node, and the new data has converted it into a 3-node or 4-node. No further recoloring or rebalancing need be done.</p>

<p>If the leaf is red-linked to its parent, it is part of either a 3- or a 4-node. If the leaf's parent's other child (the new data's uncle) is black-linked to its parent, the node is a 3-node. If the uncle is red-linked to its parent, the node is a 4-node.</p>

<p>If the node is a 3-node, the leaf is rotated into place so it becomes the root of a subtree consisting of itself, the new data, and its former parent. If the node is a 4-node, the leaf's parent is recolored so it is red-linked to its parent and the leaf and its sibling are recolored so they are black-linked to their parent. The leaf can now receive the new data as a 2-node and become a 3-node. The color configuration of the leaf's parent's subtree must now be examined to determine if it must be recolored and rotated to accommodate the new red link. This process continues upward until a node other than a 4-node is encountered. When a node is removed, the tree is rebalanced and recolored using similar techniques.</p>

<p><a name="rf4"><a href="9804ef4.htm">Figures 4</A>(a) through 4(c) illustrate the recoloring and rebalancing processes. For more details on red-black recoloring and rebalancing, see "Red-Black Trees," by Bruce Schneier (<i>DDJ</i>, April 1992; available electronically, see "Resource Center," page 3).</p>

<h3>The HP Implementation</h3>

<p>Both the HP and SGI versions of the STL implement red-black trees with a template class called <i>rb_tree</i>; see <a name="re1"><a href="9804ee1.htm">Example 1</A>. Its parameters are: </p>

<p></p>

<ul>
<li><i>Key</i>, the type used when comparing nodes.  <li><i>Value</i>, the type that is actually stored in the node data.
  <li>	<i>KeyOfValue</i>, a function object that converts a given <i>Value</i> type into a <i>Key</i> type.  
  <li><i>Compare,</i> a function object that takes two instances of <i>Key</i> and returns True if the first is less than the second.
</ul>

<p></p>

<p>The binary tree itself is composed of pointers to <i>rb_tree_node</i> structs. <i>rb_tree_node</i> has a color field, pointers to its parent, left child and right child nodes, and a value field. The color field indicates the color of the link between a node and its parent.</p>

<p>Node management has been optimized to reduce memory fragmentation. Freed nodes are kept in a free list for reuse. This behavior is wrapped by the <i>get_node</i> function, which gets an available node, and the <i>put_node</i> function, which adds a node to the free list when it is no longer needed. As with all STL containers, memory is allocated via the <i>Allocator</i> class, which can be specified by the user.</p>

<p>The <i>rb_tree</i> has three important data members: </p>

<ul>
<li><i>insert_always</i> is a status variable that tells <i>rb_tree</i> whether multiple instances of the same key value are allowed. This variable is set by the constructor and is used by the STL to distinguish between <i>set</i> and <i>multiset</i> and between <i>map</i> and <i>multimap</i>. <i>set</i> and <i>map</i> can only have one occurrence of a particular key, whereas <i>multiset </i>and <i>multimap </i>can have multiple occurrences.  <li><i>root</i> is the root node in the binary tree and it is set to NIL initially. NIL is not a zero pointer but rather a node with zero pointers in its parent, right child and left child links, and a black color code.
  <li><i>header</i> is a special node whose left child points to the leftmost child in the tree, whose right child points to the rightmost child in the tree and whose parent is the root.  
</ul>

<h3>Red-Black Traversal: The Iterator</h3>

<p>Like all STL container classes, <i>rb_tree</i> uses an iterator to traverse its data. The <i>rb_tree</i> iterator has a single data member, <i>node</i>, which is a pointer to an <i>rb_tree_node</i>. The ++ and -- operators move this node pointer so that it points to the next higher and next lower valued nodes in the tree, respectively. The * operator returns the value field of the current node. </p>

<p>The <i>rb_tree</i> iterator comes in <i>const</i> and non<i>const</i> flavors. The <i>begin()</i> member of <i>rb_tree</i> returns an iterator initialized to point to the leftmost node of the tree. This will be, of course, the lowest valued node in the tree.</p>

<p>The <i>end()</i> member of <i>rb_tree</i> returns an iterator, which points to <i>header</i> that has no defined value and is therefore the logical choice for the <i>end()</i> iterator, which is supposed to point "one past" the end of the data structure.</p>

<h3>Balancing Acts: Inserting and Erasing</h3>

<p>The main node insertion routine is a private function called <i>__insert</i>; see <a name="re2"><a href="9804ee2.htm">Example 2</A>. <i>__insert</i> performs no traversal but rather assumes that the first two parameters describe the precise location of the insertion. Other insert functions traverse the node tree before calling <i>__insert</i> to perform the actual insertion, recoloring, and balancing.</p>

<p>First, <i>__insert</i> gets a new node with <i>get_node</i>, sets its value to <i>v</i>, and attaches this new node to the left or right of <i>y</i> (<i>x</i> is likely to be one of the NIL children of <i>y</i>, but it doesn't have to be NIL if a node is being inserted in the middle of the tree).</p>

<p>Then, <i>__insert</i> checks the color codes for <i>y</i> and <i>y</i>'s other child (<i>x</i>'s sibling) to determine if the new node is being added to a 2-, 3-, or 4-node. Once this determination is made, the tree is recolored and rebalanced.</p>

<p>Subtree rebalancing is implemented by the <i>rotate_left</i> and <i>rotate_right</i> functions, which rotate a subtree about a given node.</p>

<p><i>erase(iterator position)</i> is the primary node removal function. <i>position</i> is an iterator which points to the node to be eliminated. There are three possibilities for <i>position</i>:</p>

<ul>
<li><i>position</i> could be a leaf (for instance, both its children are NIL), in which case it can simply be removed.  <li>Exactly one of <i>position</i>'s children could be NIL, in which case the other child is relinked in <i>position</i>'s place.
  <li>Both of <i>position</i>'s children could be non-NIL, in which case the leftmost child of <i>position</i>'s right subtree is relinked in <i>position</i>'s place.  
</ul>


<p>After the node is removed from the tree, the tree is recolored and rebalanced.</p>

<h3>The SGI Implementation</h3>

<p>Like HP, SGI has developed a freely distributed version of the STL (see "The SGI Standard Template Library," by Matthew H. Austern, <i>DDJ, </i>August 1997<i>)</i>. Based on the HP implementation, SGI's version has been restructured to work more effectively with real-world compilers.</p>

<p>Among the issues addressed by the SGI implementation are thread safety, improved memory utilization, default template parameters, efficient code generation, and inconsistencies between real-world compiler implementations and the C++ draft standard.</p>

<p>With regard to <i>rb_tree</i>, the most important modifications were made to the node and iterator structures and to the recoloring and rebalancing algorithms.</p>

<p>First, the definitions of the node and iterator structures have been moved from the <i>rb_tree</i> class scope to the global scope, eliminating the need for compilers to parse them as members of <i>rb_tree</i>.</p>

<p>Second, the node and iterator <i>struct</i>s have been redefined as two-level class hierarchies, with <i>__rb_tree_node</i> inheriting from <i>__rb_tree_node_base</i> and <i>__rb_tree_iterator</i> inheriting from <i>__rb_tree_base_iterator</i>. Only the child types (<i>__rb_tree_node</i> and <i>__rb_tree_iterator</i>) are template types. The base types (<i>__rb_tree_node_base</i> and <i>__rb_tree_base_iterator</i>) are not.</p>

<p>The recoloring and rebalancing algorithms have been moved out of the <i>rb_tree</i> class and into the global scope. The functions are <i>__rb_tree_rotate_left</i>, <i>__rb_tree_rotate_right</i>, <i>__rb_tree_rebalance</i>, and <i>__rb_tree_rebalance_for_erase</i>. These functions all operate on the nontemplate <i>__rb_tree_ node_base type</i>. Iterator traversal is implemented in the nontemplate <i>__rb_tree_ base_iterator</i> <i>struct</i> by the <i>increment()</i> and <i>decrement()</i> member functions.</p>

<p>Moving most of the code, which actually implements the red-black algorithms into nontemplate functions and classes makes it easier for real-world compilers to generate more efficient code more quickly. This move also allows the STL to bypass many of the problems real-world compilers encounter when parsing complex nested template declarations.</p>

<h3>The Front Men: Associative Containers</h3>

<p>With all this functionality, why aren't <i>rb_trees</i> typically used outside the STL? Simply put, it's because <i>rb_tree</i>'s useful functionality is presented by the <i>set</i>, <i>multiset</i>, <i>map</i>, and <i>multimap</i> containers.</p>

<p><i>set</i> and <i>multiset</i> are trees where the keys and values are identical. <i>set</i> allows only one instance of a particular value type and <i>multiset</i> allows multiple instances.</p>

<p><i>map</i> and <i>multimap</i> are trees where the keys and values are different. Key/value pairs are stored in the tree and retrieved by searching for a key. As with <i>set</i> and <i>multiset</i>, <i>map</i> only allows one instance of a given key value whereas <i>multimap</i> allows multiple instances.</p>

<p>Between these four templates, <i>rb_tree</i>'s functionality is fully exploited, making direct utilization of <i>rb_trees</i> unnecessary. Understanding how <i>rb_trees</i> are implemented, however, makes it easier to understand the consequences involved in using the STL's powerful associative container classes.</p>

<p><b>DDJ</b></p>

<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
