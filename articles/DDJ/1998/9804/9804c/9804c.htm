<html>
<META NAME="year" CONTENT="1998">
<head>
<title>Visual Cryptography &amp; Threshold Schemes</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Visual Cryptography &amp; Threshold Schemes</h1>

<p><i>Dr. Dobb's Journal</i> April 1998
</p>
<h2>Taking a look at secret sharing </h2>

<h3>By Doug Stinson</h3>

<I>Doug is a professor of computer science at the University of Nebraska, Lincoln, and author of Cryptography Theory and Practice (CRC Press, 1995). He can be contacted at stinson@bibd.unl.edu<b>.</I>

<hr>

<p></b>Visual cryptography is a secret-sharing scheme that uses the human visual system to perform the computations. In this article, I'll present some background on traditional secret-sharing schemes, then explain visual schemes, describing some of the basic construction techniques used.</p>

<h3>Traditional Secret Sharing</h3>

<p>Suppose a bank vault must be opened every day. Although the bank employs three senior tellers, management does not want to entrust any individual with the combination. Hence, bank management would like a vault-access system that requires any two of the three senior tellers. This problem can be solved using a two-out-of-three threshold scheme.</p>

<p>Invented independently in 1979 by G.R. Blakley and A. Shamir, a <i>t</i>-out-of-<i>n</i> threshold scheme is a method of sharing a secret <i>K</i> among a set <i>n</i> participants in such a way that:</p>

<ul>
  <li>Any <i>t</i> participants can compute the value of <i>K</i>, and
  <li>No group of <i>t</i>-1 (or fewer) participants can compute any information about the value of <i>K</i>.
</ul>

<p>The secret is chosen by a special participant, <i>D</i>, called the "dealer." When <i>D</i> wants to share the secret <i>K</i> among the <i>n</i> participants, he gives each participant some partial information called a "share." The shares should be distributed in a secure manner, so no participant knows the share given to another participant. The security of the scheme should be unconditional, not depending on any computational assumption.</p>

<p>At a later time, a subset of participants, say <i>B</i>, pool their shares in an attempt to compute the secret <i>K</i>. If |<i>B</i>|<img src="gteq.gif" alt="[greater than or equal to]" width="9" height="11"><i>t</i>, then they should be able to compute the value of <i>K</i> from the shares they collectively hold. If |<i>B</i>|&lt;<i>t</i>, then they should not be able to compute <i>K</i>, or any information about <i>K</i>.</p>

<p>Here is a simple way to construct a two-out-of-two threshold scheme. In this example, the secret is a binary string of length <i>m</i>, as are each of the two shares. Suppose <i>K</i>=(<i>k</i><sub>1</sub>,...,<i>k<sub>m</i></sub>) is the secret chosen by <i>D</i>. <i>D</i> will construct the two shares as follows: The first share is chosen to be a random binary string of length <i>m</i>, say <i>s</i><sub>1</sub>=(<i>x</i><sub>1</sub>,...,<i>x<sub>m</i></sub>). The second share is constructed as <i>s</i><sub>2</sub>=(<i>y</i><sub>1</sub>,...,y<sub><i>m</i></sub>), where </p>

<blockquote><p>
y<sub><i>i</i></sub>=<i>k<sub>i</i></sub>-<i>x<sub>i</i></sub> mod 2=<i>k<sub>i</i></sub>+<i>x<sub>i </sub>mod </i>2</p>
</blockquote><p>for 1<img src="lteq12.gif" alt="[less than or equal to]" width="6" height="7"><i>i</i><img src="lteq12.gif" alt="[less than or equal to]" width="6" height="7"><i>m</i>. Given the two shares <i>s</i><sub>1</sub> and <i>s</i><sub>2</sub>, <i>K</i> is computed by taking the modulo 2 sum of the strings <i>s</i><sub>1</sub> and <i>s</i><sub>2</sub> (this is the same as computing the Exclusive-OR of two binary vectors). However, neither <i>s</i><sub>1 </sub>nor <i>s</i><sub>2 </sub>gives any clue to the value of <i>K</i>.</p>

<p>For example, suppose that <i>m</i>=2, <i>s</i><sub>1</sub>=(0,1) and <i>s</i><sub>2</sub>=(1,1). Then the secret is <i>K</i>=(0+1 <i>mod </i>2, 1+1 <i>mod </i>2)=(1,0). However, looking only at <i>s</i><sub>1</sub>, say, any of the four values of <i>K</i> is possible:</p>

<ul>
  <li>if <i>s</i><sub>2</sub>=(0,0), then <i>K</i>=(0,1)
  <li>if <i>s</i><sub>2</sub>=(0,1), then <i>K</i>=(0,0)
  <li>if <i>s</i><sub>2</sub>=(1,0), then <i>K</i>=(1,1)
  <li>if <i>s</i><sub>2</sub>=(1,1), then <i>K</i>=(1,0)
<p>A similar situation applies if only the share <i>s</i><sub>2 </sub>is known.</p>

</ul>

<p>In his 1979 paper, "How to Share a Secret," Shamir showed how to construct a <i>t</i>-out-of-<i>n</i> threshold scheme for any integers <i>t</i> and <i>n</i> such that 2<img src="lteq12.gif" alt="[less than or equal to]" width="6" height="7"><i>t</i><img src="lteq12.gif" alt="[less than or equal to]" width="6" height="7"><i>n</i>. His solution is based on polynomial interpolation over finite fields, and a fairly detailed and elementary description can be found in Chapter 11 of my book, <i>Cryptography Theory and Practice</i>.</p>

<p>In their 1987 paper, "Secret Sharing Scheme Realizing General Access Structure," Ito, Saito, and Nishizeki introduced the idea of secret sharing for general access structures. An access structure consists of all the subsets of participants who are supposed to be able to reconstruct the secret. For example, suppose you have four participants -- 1, 2, 3, and 4 -- and you want a secret that can be computed by participant 4 together with any one of the other three participants, or by the subset {1,2,3}. Ito, Saito, and Nishizeki showed how to construct a secret sharing scheme for any access structure. (Several construction methods are also presented in Chapter 11 of my book.</p>

<p>Aside from the obvious application to access control, threshold schemes (and secret sharing schemes for general access structures) have found many applications in various types of cryptographic protocols, including secure multiparty computations (cryptographic voting schemes, for instance), key escrow/key recovery schemes, threshold cryptography (group signature schemes, for example), and electronic cash.</p>

<h3>A Two-out-of-Two Visual-Threshold Scheme</h3>

<p>The secret in a threshold scheme can be any type of data. For example, it might be an image <i>I</i>, comprised of black and white pixels. The secret image <i>I</i> could be encoded as a binary string <i>K=K(I)</i>, where 0 represents a white pixel and 1 represents a black pixel. Shares for <i>K</i> could be constructed using any convenient secret sharing scheme. <i>K</i> would later be reconstructed, using the appropriate algorithm for the secret sharing scheme. The resulting binary string could then be converted back into the image <i>I</i>. Of course, these operations would most likely be performed by a computer.</p>

<p>Naor and Shamir asked the following question: Is it possible to devise a secret sharing scheme in which the secret is an image <i>I</i> that can be reconstructed visually by superimposing a subset of the shares? Each share would consist of a transparency, made up of black and white pixels. (Actually, it would be more accurate to say "transparent" rather than "white.") In a <i>t</i>-out-of-<i>n</i> scheme, there would be <i>n</i> transparencies, and if any <i>t</i> of them are superimposed, the secret image <i>I</i> should magically appear. However, examination of at most <i>t</i>-1 shares should reveal no information about <i>I</i>.</p>

<p>The difference between a visual-threshold scheme and a traditional-threshold scheme is in how the secret is reconstructed. A traditional-threshold scheme typically involves computations in a finite field; in a visual-threshold scheme the computation is performed by the human visual system. The security condition is the same in the two types of schemes.</p>

<p>At first glance, it might seem impossible to construct a visual-threshold scheme that satisfies all the necessary requirements. Suppose that a particular pixel <i>P</i> on a share <i>s<sub>i</i></sub> is black. Whenever a set of shares (including <i>s<sub>i</i></sub>) is superimposed, the result must be black. This means that, in the secret image <i>I</i>, the pixel <i>P</i> must be black. In other words, you have obtained some information about the secret image <i>I</i> by examining one of the shares, and the security condition does not allow this!</p>

<p>Naor and Shamir found an elegant way around this impasse. They constructed a two-out-of-two visual-threshold scheme, which they presented at EUROCRYPT '94. <a name="rf1"><a href="9804cf1.htm">Figure 1</A> illustrates the scheme by specifying the algorithm for encoding one pixel. (This algorithm is to be applied for every pixel <i>P</i> in the image <i>I</i> to construct the two shares.) A pixel <i>P</i> is split into two subpixels in each of the two shares. If the given pixel <i>P</i> is white, then <i>D</i> flips a coin and randomly chooses one of the first two rows of <a href="9804cf1.htm">Figure 1</A>. If the given pixel <i>P</i> is black, then <i>D</i> flips a coin and randomly chooses one of the last two rows of <a href="9804cf1.htm">Figure 1</A>. Then the pixel <i>P</i> is encrypted as two subpixels in each of the two shares, as determined by the chosen row in <a href="9804cf1.htm">Figure 1</A>.</p>

<p>Let's convince ourselves that the scheme works as desired. First, consider the security condition. Suppose you turn your attention to a pixel <i>P</i> in the share <i>s</i><sub>1</sub>. One of the two subpixels in <i>P</i> is black and the other is white. Moreover, each of the two possibilities black-white and white-black is equally likely to occur, independent of whether the corresponding pixel in the secret image <i>I</i> is black or white. Thus, the share <i>s</i><sub>1 </sub>gives no clue as to whether the pixel is black or white. The same argument applies to the share <i>s</i><sub>2</sub>. Since all the pixels in <i>I</i> were encrypted using independent random coin flips, there is no information to be gained by looking at any group of pixels on a share, either. This demonstrates the security of the scheme.</p>

<p>Now consider what happens when you superimpose the two shares (see the last column of <a href="9804cf1.htm">Figure 1</A>). Consider one pixel <i>P</i> in the image <i>I</i>. If <i>P</i> is black, then you get two black subpixels when you superimpose the two shares. If <i>P</i> is white, then you get one black subpixel and one white subpixel when you superimpose the two shares. Thus, the reconstructed pixel (consisting of two subpixels) has a gray level of one if <i>P</i> is black, and a gray level of one-half if <i>P</i> is white. There will be a 50 percent loss of contrast in the reconstructed image, although it should still be visible.</p>

<p><a name="rf2"><a href="9804cf2.htm">Figure 2</A> is a Canadian flag encrypted into two shares, then reconstructed using this method. The method works quite well, despite the 50 percent loss of contrast of the reconstructed image. More complicated images may be difficult to recognize when the two shares are superimposed. This is due partly to the 50 percent loss of contrast, and partly to two nonmathematical reasons: Transparencies are floppy, hard to align precisely, and move around easily. Also, when the transparencies are created, either by photocopying an image or using a laser printer, the heat produced in the printing process actually distorts the plastic in the transparencies, making them even more difficult to align correctly.</p>

<p>In general, it is best to use simple images that are made up of a relatively small number of pixels, each of which is relatively large. (The images in <a href="9804cf2.htm">Figure 2</A> were reduced to fit on this page.) Experimentation is the best way to get a feel for which images are suitable for using this algorithm.</p>

<h3>Two-out-of-<i>n</i> Visual-Threshold Schemes</h3>

<p>I could discuss the general problem of constructing <i>t</i>-out-of-<i>n</i> visual-threshold schemes. However, since it is hard enough already to align two shares correctly, I will restrict my discussion to the case <i>t</i>=2. I describe an approach that can be used to construct two-out-of-<i>n</i> schemes, and I discuss the practical limitations of these schemes.</p>

<p>Each pixel <i>P</i> in a secret image <i>I</i> will be encrypted as some number, <i>m</i>, of subpixels in each of the <i>n</i> shares. The number <i>m</i> is called the pixel expansion of the scheme; in the two-out-of-two scheme, you have <i>m</i>=2.</p>

<p>For convenience, I represent a black pixel or subpixel by "1," and a white pixel or subpixel by "0." Then the encryption of a pixel into <i>m</i> subpixels can be represented by a binary <i>m</i>-tuple. We will use two <i>n</i>&amp;times;<i>m</i> binary matrices, named <i>M</i><sub>0</sub> and <i>M</i><sub>1</sub>, to describe the scheme. Given a pixel <i>P</i>, <i>P</i>=0 or 1, the matrix <i>M<sub>P </i></sub>is used to determine the encryption of <i>P</i> on each of the <i>n</i> shares by applying the algorithm Encrypt_Pixel in <a name="rf3"><a href="9804cf3.htm">Figure 3</A>.</p>

<p>Observe that the two-out-of-two scheme in <a href="9804cf1.htm">Figure 1</A> corresponds to the matrices <i>M</i><sub>0 </sub>and <i>M</i><sub>1</sub> presented in <a name="re1"><a href="9804ce1.htm">Example 1</A>. <i>M</i><sub>0 </sub>and <i>M</i><sub>1 </sub>for a two-out-of-three scheme with pixel expansion <i>m</i>=3 are in <a name="re2"><a href="9804ce2.htm">Example 2</A>, while <a name="re3"><a href="9804ce3.htm">Example 3</A> presents a two-out-of-four scheme with pixel expansion <i>m</i>=6.</p>

<p>I'll now turn to the encryption procedure, using the two-out-of-three scheme. In general, there are <i>m</i>! permutations of {1,...,<i>m</i>}. In the case <i>m</i>=3, there are six permutations of {1,2,3}; see <a name="re4"><a href="9804ce4.htm">Example 4</A>.</p>

<p>You can choose a random permutation of {1,2,3} by rolling a regular six-sided die. Suppose that you want to encrypt the pixel <i>P</i>=1, and you roll a "4." Then <img src="sigma12.gif" alt="[sigma]" align=middle width="8" height="7"> = <img src="sigma12.gif" alt="[sigma]" align=middle width="8" height="7"><sub>4</sub> = (2,3,1). You proceed to construct <i>N</i><sub>1</sub> by taking column two of <i>M</i><sub>1</sub>, then column three, and then column one; see <a name="re5"><a href="9804ce5.htm">Example 5</A>(a). Thus, the pixel <i>P</i> will be encoded as in <a href="9804ce5.htm">Example 5</A>(b).</p>

<p>For this approach to yield a scheme that satisfies the security condition and that yields a visible image when two shares are superimposed, <i>M</i><sub>0 </sub>and <i>M</i><sub>1 </sub>must satisfy two conditions. First, I define some notation. Let wt(<i>x</i>) denote the number of 1s in a binary vector. For two binary vectors <i>x</i> and <i>y</i>, define <i>x</i> OR <i>y</i> to be the binary vector obtained by taking the binary "or" of the vectors <i>x</i> and <i>y</i> (recall that 0 OR 0=0, 0 OR 1=1, 1 OR 0=1, and 1 OR 1=1).</p>

<p>Let 1 <img src="lteq12.gif" alt="[less than or equal to]" width="6" height="7"><i>w</i><img src="lteq12.gif" alt="[less than or equal to]" width="6" height="7"><i>m</i> be an integer. <i>M</i><sub>0</sub> will be the <i>n</i>&amp;times;<i>m</i> matrix in which every row consists of <i>w</i> 1s followed by <i>m-w</i> 0s. Now, suppose that <img src="gamma12.gif" alt="[gamma]" align=absmiddle width="5" height="9"> is a real number such that 0&lt;<img src="gamma12.gif" alt="[gamma]" align=absmiddle width="5" height="9">&lt;1, and suppose that <i>M</i><sub>1</sub> satisfies the two conditions in <a name="re6"><a href="9804ce6.htm">Example 6</A>.</p>

<p>If these two properties are satisfied, then we will say that the pair of matrices <i>M</i><sub>0 </sub>and <i>M</i><sub>1 </sub>comprise a two-out-of-<i>n</i> visual-threshold scheme with pixel expansion <i>m</i> and relative contrast g</p>

<p>To understand what is going on here, you have to examine the security and contrast provided by the scheme. First, look at a pixel <i>P</i> in a share <i>s<sub>i</i></sub>. <i>P</i> was obtained by means of a random permutation of a row of <i>M</i><sub>0 </sub>or <i>M</i><sub>1</sub>. But all rows of <i>M</i><sub>0 </sub>and <i>M</i><sub>1 </sub>have the same weight, <i>w</i>. When you begin with any vector <i>x</i> of weight <i>w</i>, and apply a random permutation to the coordinates of <i>x</i>, the result is a random binary vector of weight <i>w</i> (for instance, any vector of weight <i>w</i> is equally likely to be produced as a result of this process). Hence, any pixel in any share consists of a random combination of <i>w</i> black subpixels and <i>m-w</i> white subpixels, independent of whether the pixel in the secret image was black or white. Thus, the security condition is achieved.</p>

<p>Now consider what happens when you superimpose a pixel from two shares, say pixel <i>P<sub>i</i></sub> from share <i>s<sub>i</i></sub> and the corresponding pixel <i>P<sub>j</i></sub> from share <i>s<sub>j</i></sub>. Let <i>P</i> denote the corresponding pixel in the secret image <i>I</i>. When you superimpose <i>P<sub>i</i></sub> and <i>P<sub>j</i></sub>, the number of black subpixels (out of the <i>m</i> subpixels) in the result is given by <i>wt</i>(<i>P<sub>i</i></sub> OR <i>P<sub>j</i></sub>). </p>

<p>Recall that <i>P<sub>i</i></sub> and <i>P<sub>j</i></sub> were obtained by applying the same permutation to rows <i>i</i> and <i>j</i> of <i>M<sub>P</i></sub>. Hence, you have </p>

<blockquote><p>
<i>wt</i>(<i>P<sub>i</i></sub> OR <i>P<sub>j</i></sub>)=<i>wt</i>(<i>M<sub>P</i></sub>[<i>i</i>] OR <i>M<sub>P</i></sub>[<i>j</i>]) </p>
</blockquote><p>for all 1<img src="lteq12.gif" alt="[less than or equal to]" width="6" height="7"><i>i</i>&lt;<i>j</i><img src="lteq12.gif" alt="[less than or equal to]" width="6" height="7"><i>n</i>. Hence, if <i>P</i>=0, then </p>

<blockquote><p>
<i>wt</i>(<i>P<sub>i</i></sub> OR <i>P<sub>j</i></sub>)=<i>w</i>, </p>
</blockquote><p>whereas if <i>P</i>=1, then </p>

<blockquote><p>
<i>wt</i>(<i>P<sub>i</i></sub> OR <i>P<sub>j</i></sub>)<img src="gteq.gif" alt="[greater than or equal to]" width="9" height="11"><i>w</i>+<img src="gamma12.gif" alt="[gamma]" align=absmiddle width="5" height="9"><i>m</i> </p>
</blockquote><p>A reconstructed white pixel is <i>w/m</i> black, and a reconstructed black pixel is (at least) (<i>w</i>+<img src="gamma12.gif" alt="[gamma]" align=absmiddle width="5" height="9"><i>m</i>)/<i>m</i> black. The difference between black and white reconstructed pixels is (at least) <img src="gamma12.gif" alt="[gamma]" align=absmiddle width="5" height="9"><i>m</i> of the <i>m</i> subpixels. The fraction <img src="gamma12.gif" alt="[gamma]" align=absmiddle width="5" height="9"> is therefore a measure of the relative contrast.</p>

<p>In the two-out-of-two scheme, you have <i>m</i>=2, <i>w</i>=2, and <img src="gamma12.gif" alt="[gamma]" align=absmiddle width="5" height="9">=1/2, which agrees with my earlier statement that there was a 50 percent loss of contrast. In the two-out-of-three scheme, you have <i>m</i>=3, <i>w</i>=3, and <img src="gamma12.gif" alt="[gamma]" align=absmiddle width="5" height="9">=1/3; and in the two-out-of-four scheme, you have <i>m</i>=6, <i>w</i>=3, and <img src="gamma12.gif" alt="[gamma]" align=absmiddle width="5" height="9">=1/3. Observe that the two-out-of-four scheme achieves the same relative contrast as the two-out-of-three scheme, but it requires a larger pixel expansion to do so.</p>

<p>At this point, you might wonder about the quality of the schemes we have presented. A bound on the relative contrast helps answer this question. Blundo, De Santis, and Stinson showed that in any two-out-of-<i>n</i> visual-threshold scheme, it holds that <img src="gamma12.gif" alt="[gamma]" align=absmiddle width="5" height="9"><img src="lteq12.gif" alt="[less than or equal to]" width="6" height="7"><img src="gamma12.gif" alt="[gamma]" align=absmiddle width="5" height="9"><sup>*</sup>(<i>n</i>), where </p>

<blockquote>
<img src="9804cq1.gif" alt="[equation]" align=middle width="185" height="50">
</blockquote>

<p>A similar result was shown by Hofmeister, Krause, and Simon.</p>

<p>It is not hard to compute that <img src="gamma12.gif" alt="[gamma]" align=absmiddle width="5" height="9"><sup>*</sup>(2)=1/2 and <img src="gamma12.gif" alt="[gamma]" align=absmiddle width="5" height="9"><sup>*</sup>(3)=<img src="gamma12.gif" alt="[gamma]" align=absmiddle width="5" height="9"><sup>*</sup>(4) =1/3. Thus, the three schemes presented all achieve optimal contrast.</p>

<p>If you examine the behavior of the function <img src="gamma12.gif" alt="[gamma]" align=absmiddle width="5" height="9"><sup>*</sup>(<i>n</i>), you see that <img src="gamma12.gif" alt="[gamma]" align=absmiddle width="5" height="9"><sup>*</sup>(<i>n</i>)&gt;1/4 for all <i>n</i><img src="gteq.gif" alt="[greater than or equal to]" width="9" height="11">2, and <img src="9804cq2.gif" alt="[equation]" align=absmiddle width="141" height="22">. This raises the question of whether schemes can be constructed for all <i>n</i><img src="gteq.gif" alt="[greater than or equal to]" width="9" height="11">2 that achieve relative contrast <img src="gamma12.gif" alt="[gamma]" align=absmiddle width="5" height="9"><sup>*</sup>(<i>n</i>). This is, in fact, possible, as is shown by Blundo, De Santis, and Stinson. Since the relative contrast of these schemes is always at least 1/4, the loss of contrast is at most 75 percent, so the reconstructed images should be visible, at least for relatively simple images.</p>

<p>There are various ways to construct optimal contrast schemes. However, in addition to wanting the contrast to be as high as possible, you also want the pixel expansion, <i>m</i>, to be as small as possible. This is due to practical considerations of implementing the schemes: If <i>m</i> is too big, then the subpixels become very small and the transparencies will be difficult to align.</p>

<p>Constructions for optimal contrast/minimum pixel expansion schemes are given by Blundo, De Santis, and Stinson, and by Hofmeister, Krause, and Simon, respectively. They depend on the existence of certain combinatorial designs derived from Hadamard matrices. Hadamard matrices have been extensively studied for over 100 years, and are very useful in many engineering applications, such as signal processing, to name one example. There is a large body of knowledge on Hadamard matrices, which you can apply to the construction of visual-threshold schemes. </p>

<p>Here, I present one example of a particularly simple construction that can be derived by this approach. Suppose that <i>n</i><img src="equiv12.gif" alt="[is equivalent to]" align=middle width="9" height="5">3 <i>mod </i>4 is prime. I will describe how to construct a two-out-of-<i>n</i> visual-threshold scheme having optimal relative contrast <img src="gamma12.gif" alt="[gamma]" align=absmiddle width="5" height="9"><sup>*</sup>(<i>n</i>) and optimal pixel expansion <i>m=n</i>. Define </p>

<blockquote><p>
<i>Q</i>(<i>n</i>)={<i>i</i><sup>2</sup> <i>mod n</i>:1<img src="lteq12.gif" alt="[less than or equal to]" width="6" height="7"><i>i</i><img src="lteq12.gif" alt="[less than or equal to]" width="6" height="7">(<i>n</i>-1)/2}. </p>
</blockquote><p><i>Q</i>(<i>n</i>) is called the set of <i>quadratic residues</i> modulo <i>n</i>. You will construct an <i>n</i>&amp;times;<i>n</i> matrix <i>M</i><sub>1</sub>, labeling the rows and columns by the elements of <i>Z<sub>n</i></sub>, namely, 0,...,<i>n</i>-1. The entry in row <i>i</i> and column <i>j</i> of <i>M</i><sub>1</sub> is defined to be 1 if <i>j</i>-i mod <i>n</i><img src="memof12.gif" alt="[is a member of]" align=middle width="8" height="8"><i>Q</i>(<i>n</i>), and 0 otherwise.</p>

<p>For example, let <i>n</i>=11. You compute</p>

<blockquote><p>
1<sup>2</sup>=1<img src="equiv12.gif" alt="[is equivalent to]" align=middle width="9" height="5">1 <i>mod </i>11, 2<sup>2</sup>=4<img src="equiv12.gif" alt="[is equivalent to]" align=middle width="9" height="5">4 <i>mod </i>11, 3<sup>2</sup>=9<img src="equiv12.gif" alt="[is equivalent to]" align=middle width="9" height="5">9 <i>mod </i>11,4<sup>2</sup>=16<img src="equiv12.gif" alt="[is equivalent to]" align=middle width="9" height="5">5 <i>mod </i>11, and 5=25<img src="equiv12.gif" alt="[is equivalent to]" align=middle width="9" height="5">3 <i>mod </i>11. </p>
</blockquote><p>Hence, <i>Q</i>(11)={1,3,4,5,9}. Then the matrix <i>M</i><sub>1</sub> is as shown in <a name="re7"><a href="9804ce7.htm">Example 7</A>.</p>

<p>You can verify that every row of <i>M</i><sub>1 </sub>has weight five and the "or" of any two distinct rows has weight eight. Thus, you have constructed a two-out-of-11 scheme with <i>m</i>=11, <i>w</i>=5, and <img src="gamma12.gif" alt="[gamma]" align=absmiddle width="5" height="9">=<img src="gamma12.gif" alt="[gamma]" align=absmiddle width="5" height="9"><sup>*</sup>(11)=3/11. In general, if <i>n</i><img src="equiv12.gif" alt="[is equivalent to]" align=middle width="9" height="5">3 <i>mod </i>4 is prime, then this construction will yield a two-out-of-<i>n</i> scheme with <i>m</i>=<i>n</i>, <i>w</i>=(<i>n</i>-1)/2, and <img src="gamma12.gif" alt="[gamma]" align=absmiddle width="5" height="9">= <img src="gamma12.gif" alt="[gamma]" align=absmiddle width="5" height="9"><sup>*</sup>(<i>n</i>)=(<i>n</i>+1)/4<i>n</i>.</p>

<h3>Visual Cryptography for Graph-Access Structures</h3>

<p>In a two-out-of-<i>n</i> scheme, the secret is reconstructed by superimposing any two transparencies. I mentioned earlier the idea of secret sharing for general-access structures. This idea can be pursued for visual-secret sharing schemes, as well. Since you want to avoid having to stack more than two transparencies at a time, I will consider access structures defined by a graph. Suppose <i>G</i> is a graph defined on <i>n</i> vertices. Thus <i>G</i> consists of <i>n</i> vertices, some of which are joined by edges. You are interested in constructing a scheme where the superposition of shares <i>s<sub>i</i></sub> and <i>s<sub>j</i></sub> reveals the secret image if and only if <i>ij</i> is an edge of <i>G</i>. The graph is just a convenient way of recording which pairs of shares are supposed to reveal the secret.</p>

<p>As an example, consider the graph on four vertices presented in <a name="re8"><a href="9804ce8.htm">Example 8</A>(a). Here, you want to find a scheme in which the secret is revealed by superimposing shares <i>s</i><sub>1</sub> and <i>s</i><sub>2</sub>; <i>s</i><sub>2</sub>, and <i>s</i><sub>3</sub>; or <i>s</i><sub>3 </sub>and <i>s</i><sub>4</sub>. However, no information about the secret should be obtainable from shares <i>s</i><sub>1 </sub>and <i>s</i><sub>3</sub>; <i>s</i><sub>1 </sub>and <i>s</i><sub>4</sub>; or <i>s</i><sub>2 </sub>and <i>s</i><sub>4</sub>. The matrices <i>M</i><sub>0</sub> and <i>M</i><sub>1 </sub>for such a scheme were presented by Ateniese, Blundo, De Santis, and Stinson; see <a href="9804ce8.htm">Example 8</A>(b).</p>

<p>In this scheme, we have pixel expansion <i>m</i>=3 and contrast <img src="gamma12.gif" alt="[gamma]" align=absmiddle width="5" height="9">=1/3. Observe that, unlike the threshold schemes we constructed earlier, not all rows of <i>M</i><sub>0 </sub>and <i>M</i><sub>1 </sub>have the same weight: Rows one and four have weight one, and rows two and three have weight two. This means that shares <i>s</i><sub>2</sub> and <i>s</i><sub>3 </sub>will be darker than shares <i>s</i><sub>1 </sub>and <i>s</i><sub>4</sub>. <a name="rf4"><a href="9804cf4.htm">Figure 4</A> presents an example of shares and reconstructed images using this scheme. </p>

<h3>References</h3>

<p>Ateniese, G., C. Blundo, A. De Santis, and D.R. Stinson. "Visual Cryptography for General Access Structures." <i>Information and Computation</i> 129 (1996), 86-106. </p>

<p>Blakley, G.R. "Safeguarding Cryptographic Keys." <i>Proceedings of the National Computer Conference, 1979</i>, American Federation of Information Processing Societies Proceedings 48 (1979), 313-317.</p>

<p>Blundo, C., A. De Santis, and D.R. Stinson. "On the Contrast in Visual Cryptography schemes." <i>Theory of Cryptography Library</i>, report 96-13, ftp://theory.lcs .mit.edu/pub/tcryptol/96-13.ps.</p>

<p>Droste, S., "New Results on Visual Cryptography." <i>Advances in Cryptology: CRYPTO '96</i>, N. Koblitz, ed., Lecture Notes in Computer Science 1109 (1996), 401-415.</p>

<p>Hofmeister, T., M. Krause, and H.U. Simon. "Contrast-Optimal <i>k</i> out of <i>n</i> Secret Sharing Schemes in Visual Cryptography." <i>COCOON '97</i>, T. Jiang and D.T. Lee, eds., Lecture Notes in Computer Science 1276 (1997).</p>

<p>Ito, M., A. Saito, and T. Nishizeki. "Secret Sharing Scheme Realizing General Access Structure." <i>Proceedings of the IEEE Global Telecommunications Conference, Globecom '87</i>, IEEE Press, 1987, 99-102.</p>

<p>Naor, M. and B. Pinkas. "Visual Authentication and Identification." <i>Advances in Cryptology: </i>CRYPTO '97, B. Kaliski Jr., ed., Lecture Notes in Computer Science 1294 (1997), 322-336.</p>

<p>Naor, M. and A. Shamir. "Visual Cryptography." <i>Advances in Cryptology: EUROCRYPT '94</i>, A. De Santis, ed., Lecture Notes in Computer Science 950 (1995), 1-12.</p>

<p>Naor, M. and A. Shamir. "Visual Cryptography II: Improving the Contrast via the Cover Base<i>." Theory of Cryptography Library</i>, report 96-07, ftp://theory.lcs.mit .edu/pub/tcryptol/96-07.ps.</p>

<p>Shamir, A., "How to Share a Secret." <i>Communications of the ACM</i> 22 (1979), 612-613.</p>

<p>Stinson, D.R<i>. Cryptography Theory and Practice</i>. CRC Press Inc., 1995.</p>

<p>Verheul, E.R. and H.C.A. van Tilborg. "Constructions and Properties of <i>k</i> out of <i>n</i> Visual Secret Sharing Schemes." <i>Designs, Codes and Cryptography</i> 11 (1997), 179-196. </p>

<p><b>DDJ</b></p>

<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
