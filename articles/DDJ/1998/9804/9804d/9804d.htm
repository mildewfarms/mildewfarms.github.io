<html>
<META NAME="year" CONTENT="1998">
<head>
<title>Protocol Engineering &amp;Kannel</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Protocol Engineering &amp;Kannel</h1>

<p><i>Dr. Dobb's Journal</i> April 1998
</p>
<h2>Ensuring that messages reach their destinations safely</h2>

<h3>By Kari Gran&ouml;, Jukka Paakki, Jukka Viljamaa, and Antti Viljamaa </h3>

<I>The authors are members of the Nodes research group at the Department of Computer Science, University of Helsinki. They can be reached at kari.grano@cs.helsinki.fi, jukka.paakki@cs.helsinki.fi, jukka.viljamaa@ cs.helsinki.fi, and antti.viljamaa@ cs.helsinki.fi, respectively.</I>

<hr>

<p>Communication protocols have one basic task -- to guarantee that messages sent from network entities reach their destinations without getting lost or corrupted. This is easier said than done, however. The challenge for communication system designers is to be ready to recover from message loss in unreliable communication channels.</p>

<p>One well-known solution to the problem of flow-and-error control is the sliding-window protocol, which is based on the sender having a message buffer. The messages are continuously numbered as 0,1,...,N-1,0,1,...,N-1,0... that is, modulo N. The sequence numbers of messages the sender has sent with no acknowledgment from the receiver are kept in a cyclic list called a "window," and the corresponding messages are temporarily stored in the buffer (of size N). Whenever a new message is sent, the upper window edge is incremented (modulo N) by one and the corresponding message is stored in the buffer. When an acknowledgment of a successful message transfer is received, the lower window edge is incremented (modulo N) by one. The sender may send new messages as long as there are empty slots in the window (and in the buffer).</p>

<p><a name="rf1"><a href="9804df1.htm">Figure 1</A> illustrates the windowing mechanism with N=8. The sender is currently waiting for the acknowledgment of the sent messages numbered 2, 3, 4, and 5. The next message to be sent has 6 as its sequence number (modulo 8).</p>

<p>The advantage of the windowing mechanism becomes evident when a message is lost (or corrupted in such a way that the receiver cannot recognize it). Suppose the sender obtains the message <i>Nak(5) </i>about the loss of message number 5 in <a href="9804df1.htm">Figure 1</A>. This means the receiver has not received the message with sequence number 5; however, the messages numbered 2, 3, and 4 have reached their destinations in proper form. In this case, the lower window edge is shifted up to 5, and just the message numbered 5 is resent from the buffer. The sender may fill the window and the buffer by also sending the messages numbered 6, 7, 0, 1, 2, 3, and 4 (modulo 8), but after that, it has to stop and wait for the acknowledgment of the resent message 5.</p>

<p>To handle possible losses of the (negative) acknowledgments from the receiver, the sender has a timer that fires if no acknowledgment for a resent message is obtained within a certain period of time. The timer firing simply starts a similar resending process as a negative <i>Nak </i>acknowledgment.</p>

<h3>The Kannel Protocol Engineering Language</h3>

<p>Because of the complexity of communication systems, protocol engineering has evolved into a discipline of its own. This development has led to several formal specification and verification methods, conformance testing strategies, and protocol engineering languages and tools.</p>

<p>Kannel is an object-oriented programming language designed for protocol engineering. Kannel provides facilities for describing the main aspects of communication protocols and implementing the corresponding software. Distribution, architectural layering, message transfer, and reactivity can be expressed in Kannel with linguistic elements such as processes, channels, ports, transfer syntaxes, and statecharts.</p>

<p>Kannel was developed by the Nodes research group (of which we are members) at the Department of Computer Science, University of Helsinki. Kannel is freely available at http://www.cs.helsinki.fi/ research/kannel/.</p>

<p>In addition to these protocol-like features, Kannel includes the conventional machinery of general programming languages. Most notably, Kannel's object-oriented type system provides mechanisms such as interfaces, subtyping, code inheritance, polymorphism, and dynamic binding. From this point of view, Kannel can be compared to object-oriented languages such as C++, Eiffel, and Java.</p>

<p>Kannel is partly visual, in that many protocol aspects can be written in a graphical notation. This applies most notably to modular layers and statecharts, two central protocol components with a standard graphical representation. These also have a purely textual syntax, as does the entire language.</p>

<h3>Kannel and the Sliding-Window Protocol </h3>

<p>In our Kannel implementation, we have split the sliding-window protocol into three layers (see <a name="rf2"><a href="9804df2.htm">Figure 2</A>), each with a well-defined task: </p>

<ul>
  <li>UserLayer, which takes care of providing a rudimentary user interface.
  <li>LinkLayer, which manages connections to the peer process.
  <li>TransferLayer, which performs the actual transfer of packets. 
</ul>

<p>The birds-eye view of the system is created with the graphical editor ked. The actual contents of some processes have been hidden in a cloud to keep the picture uncluttered.</p>

<p>The three layers are called "branch processes" since they only modularize the protocol structure by hiding the layer contents, a useful feature when you wish to have several type-compatible layers that are substitutable with each other (however, our example does not exploit this feature).</p>

<p>Kannel processes can only communicate through named channels that attach to ports within the process. Channels are abstract data paths that convey messages from one process to another. There are two kinds of channels -- local channels connect processes that reside within the same address space, while separate channels connect distributed processes. Communication over a separate channel is nontrivial and must be realized either by a lower layer or by a driver object that represents the physical layer of a protocol (such as a network adapter). <a href="9804df2.htm">Figure 2</A> depicts four channels: UserCon and ConDat specify the messages exchanged between UserLayer, LinkLayer, and TransferLayer; whereas the separate Transfer channel specifies the messages exchanged within the TransferLayer. The TimerCh channel attaches timers to the TransferLayer components. <a name="rt1"><a href="9804dt1.htm">Table 1</A> lists some of the messages.</p>

<h3>State Machines</h3>

<p>The actual protocol work is done by leaf processes, which encapsulate attributes, methods, and a state automaton. The automaton controls how the process reacts to incoming messages. For example, the <i>send_lost</i> message that aborts a connection (see <a href="9804dt1.htm">Table 1</A>) can only be applied when a connection is already established. A state automaton provides a clean way to specify this constraint.</p>

<p>Kannel employs statecharts to describe process behavior. Statecharts (developed by David Harel) are a structured variation of state automata that allow you to cleanly separate concurrent activities, such as sending and receiving, from each other. In addition, states can contain substates that share the transitions of their parents, making descriptions more compact. For more information on statecharts, see "Extended State Diagrams and Reactive Systems," by Doron Drusinsky (<i>DDJ</i>, October 1994).</p>

<p><a name="rf3"><a href="9804df3.htm">Figure 3</A> illustrates the statechart of <i>ConnectionManager</i> instance <i>cm1</i>. A request for opening a connection is initiated with the <i>conn_req</i> message issued by the <i>User</i> process. When <i>cm1</i> receives this message, one of its concurrent substates, <i>send_conn</i>, reacts by changing from state <i>disconnected </i>to state <i>opening</i>, and by sending a <i>SendFrameReq(T_CIND, NO_DAT)</i> message (see <a href="9804dt1.htm">Table 1</A>) to the <i>DTransfer</i> process below. To keep statecharts compact, <a href="9804df3.htm">Figure 3</A> only shows the messages that trigger the transitions (see <a name="rl1"><a href="9804d.htm#l1">Listing One</A> for the textual equivalent of <a href="9804df3.htm">Figure 3</A>). Concurrent substates (also called AND states), such as "Connection" in <a href="9804df3.htm">Figure 3</A>, have a shaded background.</p>

<p>The receiving end must first confirm that it accepts a connection. Eventually, the packet sent arrives as a <i>conn_ind</i> message to the <i>rec_conn </i>submachine within the second <i>ConnectionManager</i> process <i>cm2</i>. This triggers the sending of a <i>SendFrameReq(T_CCNF, NO_DAT)</i> message that eventually arrives at <i>cm1</i> as a <i>conn_conf,</i> and finally establishes the connection. Now <i>cm1</i> can begin sending data to <i>cm2</i>. Note, however, that since the protocol is fully symmetric, the <i>send_conn</i> of <i>cm2</i> remains in state <i>disconnected </i>and cannot be used to transfer data to <i>cm1</i> unless a similar transaction is performed in the reverse direction.</p>

<p>The <i>DTransfer</i> process is responsible for providing a reliable data path to the remote system. The sliding-window mechanism it employs can recover from lost and duplicate packets while still being reasonably efficient in its use of the network bandwidth. <a name="rf4"><a href="9804df4.htm">Figure 4</A> shows the statechart for the <i>DTransfer</i> process. It consists of an AND state <i>Transmission</i> that contains two concurrent substates, <i>Sender</i> and <i>Receiver</i>, making simultaneous sending and receiving possible. Both states use auxiliary variables listed in <a name="rt2"><a href="9804dt2.htm">Table 2</A>.</p>

<p>The sender transmits numbered packets (received via <i>send_frame_req</i> from <i>ConnectionManager</i>) to the receiver. The packets sent remain within <i>send_window</i> until they are acknowledged. If the window ever becomes full, <i>Sender</i> stops sending packets and instead stores them in <i>send_buffer</i> to wait for subsequent transmission. The numbering ensures that packets are received in correct order.</p>

<p>Whenever a packet is sent, <i>Sender</i> starts a timer that is used to control the retransmission of lost packets. If the timer expires (message <i>t_exp</i>), the packet is resent and the timer is restarted. This process is retried at most RETX_MAX times, after which <i>Sender</i> gives up and terminates the connection (see <a name="rl2"><a href="9804d.htm#l2">Listing Two</A>).</p>

<p>However, under normal conditions the receiver will get the packet and reply with an <i>ack(n)</i> message, which removes packets numbered 0,...,<i>n</i> from <i>send_window</i> and refills the window from <i>send_buffer</i> if it contains any data (see <a name="rl3"><a href="9804d.htm#l3">Listing Three</A>).</p>

<p>The receiving end will detect when a packet is duplicated or lost and send information about it in a <i>nak(n)</i> message. This causes <i>Sender</i> to discard all packets up to <i>n</i> from the window and retransmit all remaining packets in the window. Interestingly, <i>nak(n)</i> thus combines a positive acknowledgment for packets 0,...,<i>n</i>-1 with a negative acknowledgment for packet <i>n</i> (see <a name="rl4"><a href="9804d.htm#l4">Listing Four</A>).</p>

<p>The receiving side of the protocol depicted by <i>Receiver</i> in <a href="9804df4.htm">Figure 4</A> is simpler, as it does not have to store any packets. The basic operation is performed in state <i>data </i>where <i>iframe</i> messages are checked for a matching sequence number. If a match is found, the packet is acknowledged. Otherwise, the process sends a <i>nak</i> message and enters state <i>nak_sent</i>, where all incoming packets are discarded until the one with the expected sequence number is found.</p>

<p>To cope with sender failures, <i>nak</i> messages also use a timer that eventually causes the connection to break if the sender keeps quiet.</p>

<p>The Transfer channel is separate (see the dashed line in <a href="9804df2.htm">Figure 2</A>), forcing the two protocol stacks {<i>u1,cm1,d1</i>} and {<i>u2,cm2,d2</i>} into separate executables.</p>

<p>To keep things simple, we use the Socket driver from the Kannel library to interconnect the stacks. Socket delivers packets using the UDP protocol. The socket object is configured with information obtained from the command line when starting one side of the protocol stack (see <a name="rl5"><a href="9804d.htm#l5">Listing Five</A>). After initialization, the syntax for using the channel is uniform; the driver is abstracted away, making it simple to change the driver to accommodate changes in the hardware.</p>

<h3>Kana: The Graphical Kannel Simulator </h3>

<p>The Kannel environment includes a tool called the Kannel Animator (Kana) for the symbolic execution of protocols. Because Kana is interpreter-based, it is highly interactive. In addition to controlling the execution and allowing easy manipulation of run-time data structures, the tool accepts normal Kannel code. Kana animates both the internal activity of the protocol processes and message passing between them. The animation trace produced by the tool can be saved for later examination. The user can specify breakpoints to pause execution, then inspect and modify the attributes. Process priorities and message buffers can be changed to illustrate lost or duplicated messages.</p>

<p>Kana animates the protocol with message sequence charts (see <a name="rf5"><a href="9804df5.htm">Figure 5</A>). The processes, with their names and types, are displayed as boxes in the upper part of the MSC window. The boxes can be collapsed or opened to, say, display the subparts of a branch process. The vertical lines act as endpoints for the horizontal arrows that visualize the messages sent between the processes. Kana highlights the currently active process and the message that was last sent. The messages that have not yet been received are shown as dashed arrows.</p>

<p>As an example, consider the sliding-window protocol in a situation where a packet (<i>IFrame</i>) is lost. <a href="9804df5.htm">Figure 5</A> is a Kana session where the groups of three processes on the left and on the right represent the protocol stacks of the sender and the receiver, respectively. The simulation has stopped due to a breakpoint. The <i>u1</i> process has issued requests to send data to the receiver.</p>

<p>The requests are shown as <i>SendReq</i> messages to the lower layer (<i>cm1</i>), which has redirected them to the <i>d1</i> process as <i>SendFrameReq </i>messages. The <i>d1</i> process in turn has sent them across the network inside three <i>IFrame</i> messages.</p>

<p>The receiver has acknowledged the first <i>IFrame</i> normally, and delivered it to the upper layer as a <i>DataInd</i> message. You can see that the second frame has been lost, because the last frame has already been received. The user has manually deleted the second <i>IFrame</i> from the receiver's (<i>d2</i>) buffer to simulate the message loss. The next message that arrives is out of sequence, and the receiver issues a negative acknowledgment (<i>nak</i>) asking the sender to retransmit all frames onward from the one the receiver is waiting for. When the sender gets the <i>nak</i> message, it retransmits the second and third <i>IFrame</i>. They, too, will eventually be acknowledged and removed from the sender's send window.</p>

<p>Kana can also animate the graphical specifications created with the ked tool. </p>

<p><a href="9804df5.htm">Figure 5</A> illustrates the statechart of the <i>d2</i> process (the receiver's lowest layer). The process has received a frame that is out of sync and that has fired the transition leading to state <i>nak_sent</i>. The process has subsequently sent a negative acknowledgment and is awaiting the correct frame. When that frame arrives, the process will return to its normal state <i>data. </i>If, however, the timer of the receiver should fire, the <i>nak</i> message would be retransmitted and, eventually, the connection would be terminated.</p>

<h3>Future Directions</h3>

<p>We continue to actively develop Kannel. Most notably, we're adding a mechanism called "refinement" for extending protocol layers in a type-safe manner. Furthermore, a flexible interface for supporting the different transfer representations of messages is in the works.</p>


<p><b>DDJ</b></p>



<H4><a name="l1">Listing One</H4>

<pre>and state connection is  init send_conn;
  state rec_conn is
     ...
  end rec_conn;
  state send_conn is
      ...
      state disconnected arcs
         conn_req -&gt; {
            peer ! SendFrameReq.create(T_CIND, NO_DAT);
            go opening
         }
         disc_req -&gt; { err("not connected") }
         send_req -&gt; { err("not connected") }
      end disconnected
  end send_conn
end connection
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>t_exp -&gt; {    if t_exp.num &lt;&gt; REC_TIMER then
      f : IFrame;
      if send_count &gt;= RETX_MAX then
        up ! new RecLost;
        send_buffer.clear;
        ...
        send_window.clear;
        current:= 0;
        send_count:= 0
      else
        sw_iter.initiate(send_window);
        loop sw_iter.exhausted.until;
          f:= sw_iter.get_current;
          if f.frame_num = t_exp.num then
             peer ! f;
             tim ! TStart.create(t_exp.num, TIME);
             send_count:= send_count+1;
             break
          end;
          sw_iter.next
        end loop
      end if
    end if
}
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>ack -&gt; {    f,g : IFrame;
    loop send_window.remove_head(f).while;
      tim ! TStop.create(f.frame_num);
      send_count:= 0;
      if send_buffer.remove_head(g) then
         g.frame_num:= current;
         peer ! g;
         tim ! TStart.create(g.frame_num, TIME);
         send_window.put_tail(g);
         inc(current)
      end;
      (f.frame_num = ack.frame_num).until
    end loop
}
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>nak -&gt; {    f : IFrame;
    loop send_window.first(f).while;
      (f.frame_num = nak.frame_num).until;
      send_window.remove_head(f);
      tim ! TStop.create(f.frame_num)
    end loop;
    sw_iter.initiate(send_window);
    loop sw_iter.exhausted.until;
      f:= sw_iter.get_current;
      peer ! f;
      tim ! TStart.create(f.frame_num, TIME);
      sw_iter.next
    end loop
}
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<H4><a name="l5">Listing Five</H4>

<pre>main(dvec[string]) is  send_buffer:= IFrame_queue.create(SEND_BUFFER_SIZE);
  send_window:= IFrame_queue.create(SEND_WINDOW_SIZE);
  sw_iter:= IFrame_queue_iter.create(send_window);
  current:= 0;                   -- Number for next iframe
  expected:= 0;
  send_count:= 0;                -- Retransmission counters
  rec_count:= 0;
  if arg.size &lt; 4 then
     stdout.print_str("Usage: " + arg.get(0) + " s-port host t-port\n");
     SYS.shutdown
  end;
  peer.configure(SOCK_SPORT, arg.get(1)); -- source port
  peer.configure(SOCK_THOST, arg.get(2)); -- target host
  peer.configure(SOCK_TPORT, arg.get(3)); -- target port
  peer.configure(SOCK_TCP, "false");      -- use UDP
  peer.open
end main
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
