<html>
<META NAME="year" CONTENT="1998">
<head>
<title>Using NetRexx</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Using NetRexx</h1>

<p><i>Dr. Dobb's Journal</i> April 1998
</p>
<h2>Another way to build Java applets</h2>

<h3>By Pamela J. Taylor</h3>

<I>Pamela is Rexx/Java project manager for the Share Technology Conference, vice-chairman of NCITS Committee J18 for the Rexx Language, and is on the board of directors of the Rexx Language Association. She can be reached at pamela_taylor@ stercomm.com.</I>

<hr>

<p>NetRexx is a programming language designed as an alternative to Java. The idea behind NetRexx, which was created by IBM Fellow M.F. Cowlishaw (who also designed Rexx), is to make programming the Java Virtual Machine (JVM) easier than with Java. Although NetRexx syntax is derived from Rexx, NetRexx is strongly typed, making it first-rate for programming the JVM and allowing access to primitive (binary) datatypes. NetRexx compiles to Java bytecode, and NetRexx classes and Java classes are equivalent. In short, when your development requirements include web programming or other applications for the JVM, you may well find it easier and more productive to program in NetRexx than Java.</p>

<p>NetRexx is freely available under IBM's Employee Written Software agreement and can be downloaded from http://www2.hursley.ibm.com/netrexx/ as either a ZIP file or a UNIX tar.Z file. It comes with instructions for installation and use, and also includes extensive documentation on the language definition and keyword instructions. Cowlishaw's book, <i>The NetRexx Language</i> (Prentice Hall, 1997), provides a complete reference. </p>

<p>Because NetRexx programs run on the JVM, they are fully portable and can be executed on any platform where Java is present. This includes Windows, OS/2, many flavors of UNIX, OS/390, and (soon) VM.</p>

<p>A NetRexx program contains the following:</p>

<ul>
<li>The <i>class</i> instruction defines a new class, including the name of the parent class and any behaviors that it implements.  <li>The <i>properties</i> instruction is optional; it defines class and instance variables. Properties may be public or private, so there may be more than one <i>properties</i> instruction in a class.
  <li>The <i>method</i> instruction identifies the beginning of a new method. There is no special syntax for the end of a method; a method ends when a new method begins.
</ul>

<p></p>

<p>As with Rexx, you don't need to declare variables before using them. NetRexx automatically determines the proper type of a variable from the context of its first use. Properties must be defined at the beginning of a class. Though it is not necessary to explicitly type them, it may be convenient to do so at this point. All other variables are local to the method that uses them.</p>

<p>Terms in NetRexx are evaluated in a simple and intuitive fashion that may be new to many programmers. NetRexx evaluates each term in the context in which it is first encountered. This allows new keywords to be added to the language without breaking existing programs. Simplified, the full search order is as follows:</p>

<ul>
<li>A local variable or method argument?  <li>A method in the current class?
  <li>A property in the current class?
  <li>A special word, such as <i>this</i>?
  <li>A data type?
  <li>If not, it must be a language keyword or instruction.
</ul>


<p>In <a name="re1"><a href="9804he1.htm">Example 1</A>, the <i>select</i> in the first line of the <i>action</i> method is recognized as a NetRexx keyword. However, if you insert <i>select = 'blotz'</i> at the beginning of that method, then the <i>select</i> appearing alone in a clause would have been detected as an error by the NetRexx compiler -- "unexpected use of local variable." Using <i>select</i> as a local variable in another method in the class would not preclude its recognition as a keyword in this method.</p>

<p>NetRexx also uses compound terms, which are evaluated from left to right as in Java. Thus, the term <i>u.left(1)</i> is the value of the term <i>u</i>, to which the NetRexx method <i>left</i> is applied with an argument of 1.</p>

<h3>The <i>Rexx</i> Class</h3>

<p>Recall that you don't have to declare variables in NetRexx. However, to be a first-class language for the JVM, NetRexx must be strongly typed. This can be largely transparent to the programmer, however, because NetRexx provides a default type for variables, the <i>Rexx</i> type, which is equivalent to the strings of the classic Rexx language. The NetRexx compiler automatically performs the necessary type conversion when translating a program to Java bytecodes.</p>

<p>Using variables of type <i>Rexx</i> significantly increases programmer productivity. You are freed from concern over the types of variables in a program, and the number of keystrokes required to type in the program is reduced.</p>

<p>The variables <i>registered</i>, <i>u</i>, <i>p</i>, and <i>NameList</i> in <a name="rl1"><a href="9804h.htm#l1">Listing One</A> are all of type <i>Rexx</i>, but they came to this state from different directions:</p>

<ul>
<li>The most common way to use a <i>Rexx</i> variable is to simply assign it a value and use it in your code (this is illustrated by the variable <i>registered</i> in the <i>Valid</i> method). Within the context of the program, <i>registered</i> is used as a Boolean, but there is no need to declare it as such.  <li><i>u</i> and <i>p</i> are <i>Rexx</i> variables that are assigned a value resulting from a Java method invocation (<i>getText()</i>) in the <i>Register</i> method; since the value returned by <i>getText()</i> is of type <i>String</i>, we explicitly cast this value to type <i>Rexx</i> before assigning it.
  <li><i>NameList</i> is a private property that must be defined at the beginning of the class. Although I've declared a type here, it would be equally correct to simply list it as a property with no type or initial value.
</ul>

<p></p>

<p>In addition to simple strings, the <i>Rexx</i> class supports traditional arrays with a numeric index in square brackets. Of course, NetRexx arrays may be multidimensional. It is not necessary to reserve storage -- simply assign elements as needed.</p>

<p>An even more interesting feature of the <i>Rexx</i> class is the indexed string, which is similar to a traditional array, but for which the indexes are literal strings rather than numbers (like a Java HashTable). Thus, you might populate an indexed string simply by assigning elements:</p>

<blockquote><PRE>
   method LoadList
NameList = ' '
NameList['mickey'] = 'ClubLeader'
NameList['minnie'] = 'mouseketeer'
NameList['donald'] = 'aDuck'</PRE>
</blockquote>

<p>Indexed strings also behave like arrays in that one may execute a series of instructions on all elements by looping over the indexes. The <i>loop</i> instruction in <a name="re2"><a href="9804he2.htm">Example 2</A>(a) does just this.</p>

<p>During each iteration of the loop, the variable <i>thisname</i> takes on the value of the next index. For arrays with numeric indexes, the indexes are processed in numerical order. For indexed strings, the order of selection cannot be predicted.</p>

<p>Because <i>Rexx</i> variables are strings and humans generally perceive even significant portions of program execution in terms of strings, NetRexx includes string manipulation methods. Most of the popular built-in string manipulation functions from Rexx are available as NetRexx methods.</p>

<p>There is also an <i>exists</i> method to determine if a particular index to an indexed string exists. Using this method, <a href="9804he2.htm">Example 2</A>(a) can be simplified to <a href="9804he2.htm">Example 2</A>(b). </p>

<h3>From NetRexx to Java and Back Again</h3>

<p>NetRexx uses the Java object model, so Java classes may be invoked directly from NetRexx just as if they were NetRexx classes. The converse is also true. </p>

<p><a href="9804h.htm#l1">Listing One</A> is a web-based registration form that must be completed for access to information from the server. (<a href="9804h.htm#l2">Listing Two</A> displays the applet Registry.) <a name="rl2"><a href="9804h.htm#l1">Listing One</A> includes many examples of how you can use Java classes directly: </p>

<ul>
<li>It constructs new Java buttons with <i>bclear = Button("Clear")</i>.   <li>It instantiates editable text fields with <i>name = TextField(15)</i>. 
  <li>It creates new Panels with <i>p1 = Panel()</i>.  
</ul>


<p>NetRexx does not need a keyword such as <i>new</i> to reserve storage for new instances of objects. Nor do you need to explicitly type cast the variable. NetRexx's <i>stat=Panel()</i> is functionally equivalent to Java's <i>Panel stat=new Panel()</i>.</p>

<p>NetRexx's evaluation of compound terms from left to right is consistent with Java syntax. Invoking Java methods uses the same syntax as invoking NetRexx methods; and our sample is full of examples of using Java methods directly -- in the layout, color-scheme definition, and population of the applet's window and in retrieving (or clearing) user input. </p>

<h3>Operators</h3>

<p>NetRexx provides all the usual assignment, arithmetic, logical, and comparison operators but includes extensions as well. The "equals" sign (=) assignment operator may also be used to assign a type to a variable, as illustrated by <i>statlbl = Label</i> or <i>NameList = Rexx</i>. This devolves naturally from the search order for evaluating a term.</p>

<p>A unique operator is blank concatenation, in which a single blank between two terms concatenates their values with a blank in between: <i>say 'Username:' uname</i> yields <i>Username: pjt</i> when the value assigned to <i>uname</i> is "pjt."</p>

<p>NetRexx also uses the blank operator for typecasting as illustrated by <i>u = Rexx name.getText</i> (at the beginning of the <i>Register</i> method) where the value of <i>name.getText</i> is cast to type <i>Rexx</i>.</p>

<h3>Methods Without Madness</h3>

<p>NetRexx's <i>method</i> instruction fully supports the concept of a "method signature" as in other languages such as Java. A NetRexx method may also be defined with no signature, in which case it accepts no arguments, and any value it may return is of type <i>Rexx</i>. The <i>LoadList</i> and <i>Register</i> methods in our sample share these characteristics.  </p>

<p>In the clause <i>if Register then Status("RegOK")</i>, the value returned from <i>Register</i> is treated as a Boolean. NetRexx automatically recognizes 0 and 1 (the possible return values) from <i>Register</i> as Booleans if the context requires, so explicit definition of the return type from <i>Register</i> is unnecessary. You may wish to do so for clarity, however, as in the <i>Valid</i> method.</p>

<p>Argument lists are supplied as a list of variables within parentheses immediately adjacent to the method name as illustrated by the <i>action</i> and <i>Status</i> methods. For the <i>action</i> method shown in <a href="9804he1.htm">Example 1</A>, the argument types are explicitly declared. The <i>Status</i> method shown in <a name="re3"><a href="9804he3.htm">Example 3</A> illustrates the use of optional arguments for which a default value is supplied and, in this case, the default type is <i>Rexx</i>. Both required and optional arguments may be specified, with the optional ones omitted from the right. </p>

<p>Though they are not discussed here, other keywords are available to further qualify a NetRexx method.</p>

<h3>Also of Interest</h3>

<p>NetRexx supports two styles of comments. Block comments are delimited by pairs of /* and */ and may be nested. The --delimiter begins a line comment which is terminated by the line end.</p>

<p>Unlike Java, NetRexx is generally case-insensitive. This gives you the flexibility to use the capitalization style you prefer. Furthermore, normal comparison operators perform case-insensitive comparisons, freeing you from the problem of case in such operations as comparing user input to expected inputs or specifying method argument strings. In the <i>Register</i> method, the call <i>Status("NOUSER")</i> specifies an uppercase argument, but the <i>Status</i> method compares it to the mixed-case <i>"NoUser."</i> When case sensitivity is important, the strict comparison operators == and \== can be used.</p>

<p>The <i>select</i> construct (used in both the <i>action</i> method and the <i>Status</i> method) is the NetRexx equivalent of a <i>case</i> statement.</p>

<p>The <i>action</i> method (to handle button actions) is present because this sample was implemented for use with JDK 1.02.  For JDK 1.1, this would be replaced with appropriate event listeners.</p>

<h3>Conclusion</h3>

<p>In the real world, the <i>NameList</i> would be populated from a file or database resident on the server rather than by the <i>LoadList</i> method. You might use Java classes for this, or you could use the NetRexx RXFile suite developed by Max Marsiglietti, which is accessible through the NetRexx home page.</p>

<p>The actual call to the server to load a restricted URL is commented out in my sample in favor of simply displaying a label that announces a successful connection. Reverse the commenting (and provide an appropriate URL, of course) to make this a live web application.</p>

<p><b>DDJ</b></p>


<H4><a name="l1">Listing One</H4>

<pre>/* Registry.nrx  --  Applet for users to access private information */class Registry extends Applet        -- inherit from &amp; extend the Applet class
properties private                   -- class and/or instance variables
  bclear = Button("  Clear  ")       -- Java Button class
  breg = Button("  Register  ")
  bacc = Button("  Access  ")
  name = TextField(15)               -- Java TextField class
  pw = TextField(15)
  statlbl = Label
  NameList = Rexx
method init                          -- initialization method
  LoadList                           -- initialize the names array
method start
  setLayout(BorderLayout())          -- our frame's layout (Java methods)
  setBackground(Color.white)
  setForeground(Color.blue)
<p></p>
  p1 = Panel()                       -- a different layout for the buttons
  p1.add(bclear)
  p1.add(breg)
  p1.add(bacc)
  add("Center", p1)
<p></p>
  stat = Panel()
  statlbl = Label(" ".copies(100), Label.CENTER)
  stat.setBackground(Color.white)
  stat.setForeground(Color.red)
  stat.setFont(Font("Helvetica", Font.BOLD+Font.ITALIC, 22))
  stat.add(statlbl)
<p></p>
  add("South", stat)                 -- add the panel to the frame
<p></p>
  p2 = Panel()                       -- a container for the "center" stuff
  p2.setLayout(BorderLayout())       -- but we want some control
  p2.setBackground(Color.blue)       -- set fg and bg colors for this area
  p2.setForeground(Color.white)
<p></p>
  p3 = Panel()                       -- one piece of the "center" stuff
  ulabel = Label("Enter Username:")  -- some label text
  name.setBackground(Color.white)    -- fg and bg colors for the text field
  name.setForeground(Color.black)
  p3.add(ulabel)                     -- populate this piece
  p3.add(name)
<p></p>
  p4 = Panel()                       -- another piece of the "center" stuff
  plabel = Label("Enter Password:")  -- some label text
  pw.setBackground(Color.white)      -- fg and bg colors for the text field
  pw.setForeground(Color.black)
  pw.setEchoCharacter(char "*")      -- echo character for sensitive data
  p4.add(plabel)                     -- populate this piece
  p4.add(pw)
<p></p>
  p2.add("North", p3)                -- now put the two pieces into the
  p2.add("South", p4)                --  "center stuff" container
  add("North", p2)                   -- and add that container to the frame
<p></p>
/* Handle an action (button press) */
method action(e=Event, o=Object) returns boolean
  select
     when e.target = bclear then do  -- if Clear button,
        name.setText('')             --   set contents of text fields
        pw.setText('')               --   to null
        statlbl.setText(String " ")  -- and clear message area
        return 1
        end
     when e.target = breg then do            -- if Register button,
        if Register then Status("RegOK")     -- and successful,
        return 1                             -- put up nice dialog
        end
     when e.target = bacc then do            -- if Access button,
        if Valid then AccessPrivate          --  if registered, let them in
           else Status("BadID")              -- otherwise, an error dialog
        return 1
        end
     otherwise return super.action(e, o)     -- other action we don't handle
     end
<p></p>
/* Sign up a new user */
method Register
  u = Rexx name.getText              -- get contents of text fields
  p = Rexx pw.getText
  if u = '' then do                  -- if username missing,
     Status("NOUSER")                --   put up message to tell them
     return 0                        --   that's a no-no; and return
     end                             --   failure
  if p = '' then do                  -- if password missing,
     Status("NOPW")                  --   put up message to tell them
     return 0                        --   that's a no-no; and return
     end                             --   failure
  NameList[u] = p                    -- otherwise, add to list
  return 1                           --   and return success
<p></p>
/* Validate the current user */
method Valid returns boolean
  u = Rexx name.getText
  if u = '' | u.left(1) = ' ' then return 0
  registered = 0
  loop thisname over NameList
     if u == thisname then do
       registered = 1
       leave
       end
     end
  if \registered then return 0
  p = Rexx pw.getText
  if NameList[u] \== p then return 0
  return 1
<p></p>
/* Put some initial users into the list */
method LoadList
  NameList = ''
  NameList['mickey'] = 'ClubLeader'
  NameList['minnie'] = 'mouseketeer'
  NameList['donald'] = 'aDuck'
<p></p>
/* Status Reporting */
method Status(reason='')
  select
     when reason = "RegOK"  then msg = "Registration Complete!"
     when reason = "NoUser" then msg = "Error:  Username Required"
     when reason = "NoPW"   then msg = "Error:  Password Required"
     when reason = "BadID"  then msg = "Error:  Userid and/or Password 
                                                       Missing or Invalid"
     otherwise msg = "Error: Unknown error; get help"
     end
  statlbl.setText(String msg)
method AccessPrivate
  statlbl.setText(string "Welcome to the Private Area")
  /*
     addr =          -- specify URL address here
     url = URL(addr)
     statlbl.setText(String url.getContent)
   */
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>&lt;html&gt;&lt;body bgcolor="#ffffff"&gt;
&lt;p&gt;
This sample Web page displays the applet Registry.
&lt;p&gt;
The applet appears centered in the browser window just below
this text.
&lt;p&gt;
&lt;br&gt;
&lt;center&gt;
&lt;applet code="Registry.class" width=500 height=150&gt;
&lt;/applet&gt;
&lt;/center&gt;
&lt;p&gt;
&lt;br&gt;
&lt;font size=2&gt; Last modified: 30 April 1997 &lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
