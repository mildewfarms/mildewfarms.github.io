<html>
<META NAME="year" CONTENT="1998">
<head>
<title>The Maximal Rectangle Problem</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>The Maximal Rectangle Problem</h1>

<p><i>Dr. Dobb's Journal</i> April 1998
</p>
<h2>Searching for elegant solutions </h2>

<h3>By David Vandevoorde </h3>

<I>David, a software design engineer for Hewlett-Packard, is one of the founders and moderators of the comp.lang.c++.moderated Usenet forum and represents HP on the ANSI X3J16 C++ committee. David can be contacted at daveed@ vandevoorde.com.</I>

<hr>

<p>The most enjoyable games often have the most straightforward rules. Similarly, some of the most fascinating problems can be stated most simply and most succinctly. I'll let you be the judge of whether the problem presented here is interesting or not, but you'll agree that it's easily described: </p>


<ul>
<li><i>	Given</i>: A two-dimensional array <i>b</i> (<i>M</i> rows, <i>N</i> columns) of Boolean values ("0" and "1").  <li><i>	Required</i>: Find the largest (most elements) rectangular subarray containing all ones.
</ul>

<p></p>

<p><a name="rf1"><a href="9804bf1.htm">Figure 1</A> illustrates a possible input array and the corresponding solution. (I'll often refer to a rectangular subarray as simply a "rectangle.") </p>

<h3>Brute Force </h3>

<p>Clearly, there are a finite number of distinct subarrays in the given array <i>b</i>. Hence, you could enumerate each of these subrectangles and test whether they uniformly consist of ones. Your intuition would be correct in rejecting such a solution for being too expensive, but for my purposes here, this brute force approach makes a nice baseline. It also provides me with an excuse to make a point later on. </p>

<p><a name="rl1"><a href="9804b.htm#l1">Listing One</A> (listings being on page 100) is pseudocode for this first algorithm. It enumerates all the subarrays of <i>b</i> by picking each element of <i>b</i> in turn as a possible lower-left corner <i>ll </i>of the final solution, and for each <i>ll </i>trying out every possible upper-right corner <i>ur</i>. Once <i>ll </i>and <i>ur</i> are chosen, the program tests whether or not the rectangle consists of all ones and whether or not that rectangle is larger than the best candidate solution you have found so far. Since the latter test is simpler, you can gain some time by doing it first: There is no need to scan a rectangle that is no larger than the best candidate subarray found so far. The helper function <i>area </i>computes the number of elements in a rectangle defined by its lower-left and upper-right corner. The function <i>all_ones</i> returns True only if the given rectangle contains no zeros. </p>

<p>How expensive is this algorithm? It probably depends on the array you feed it. However, I'll limit myself to estimate the worst-case asymptotic complexity of the algorithms presented in this article. If you're not familiar with that sort of analysis or with the <i>O</i>-notation, you might want to refer to an algorithms book such as <i>Introduction to Algorithms</i>, by Thomas H. Cormen, Charles E. Leiserson, and Ronald L. Rivest (McGraw-Hill, 1990). (In particular, Chapter 2 covers <i>O</i>-notation.)</p>

<p>Clearly there are <i>M</i>&amp;times;<i>N </i>possible choices for <i>ll. </i>Each of these choices has between one and <i>M</i>&amp;times;<i>N </i>corresponding upper-right corners: That means on average there will be <i>O(M</i>&amp;times;<i>N) ur</i> choices for every <i>ll. </i>Hence the total number of subrectangles of <i>b</i> is of the order <i>O(M</i><sup>2</sup>&amp;times;<i>N</i><sup>2</sup><i>)</i>. The average number of elements in these subarrays is also <i>O(M</i>&amp;times;<i>N), </i>and even though the algorithm only needs to scan a fraction of these subarrays, you can construct cases where the average number of operations performed per subarray of <i>b</i> is <i>O(M</i>&amp;times;<i>N). </i>Hence, the worst case complexity of this algorithm is <i>O(M</i><sup>3</sup>&amp;times;<i>N</i><sup>3</sup><i>)</i>, which is not very good. </p>

<p>This algorithm requires very little extra storage other than the input array itself. Some of the faster algorithms I will present will not maintain that property (but I promise it won't be too bad). </p>

<h3>Adding Direction </h3>

<p>Though inefficient, the first algorithm provides a good basis upon which to build. To improve its performance, I'll add some direction to the search. Indeed, the algorithm in <a href="9804b.htm#l1">Listing One</A> could enumerate the subrectangles in any random order and still find the correct solution. Instead, I now want to take advantage of the fact that if a small rectangle contains a zero, so will each of its surrounding rectangles. Therefore, I will grow rectangles for each possible lower-left corner. This growing process will only produce upper-right corners defining rectangles which contain all ones: The <i>all_ones</i> function of <a href="9804b.htm#l1">Listing One</A> will no longer be necessary. </p>

<p>The resulting algorithm is listed in <a name="rl2"><a href="9804b.htm#l2">Listing Two</A>, and the function <i>grow_ones</i> is at its heart. The first time through its outer <i>while</i> loop, this function scans to the right of the given lower-left corner <i>ll </i>for a chain of consecutive ones that is as long as possible. It remembers the right edge of that scan in <i>x_max</i>: When it tries to add a layer of ones in the next iteration of the outer loop, it will not attempt to scan a wider rectangle than the first one (since that would be pointless). <a name="rf2"><a href="9804bf2.htm">Figure 2</A> shows the consecutive layers that are grown at the optimal lower-left point in <a href="9804bf1.htm">Figure 1</A>. </p>

<p>The <i>grow_ones</i> function will never examine an element of the array <i>b</i> more than once. However, for an array consisting of all ones, it will scan all the elements above and right of the given position <i>ll. </i>Consequently, this function's complexity is <i>O(M</i>&amp;times;<i>N). </i>Since the main algorithm invokes <i>grow_ones </i>for every one of the elements in <i>b</i>, the total complexity of this approach is <i>O(M</i><sup>2</sup>&amp;times;<i>N</i><sup>2</sup><i>).</i> </p>

<p>Not good enough. </p>

<p>At this stage, the algorithm still does not require any significant amount of extra memory. </p>

<h3>Remember! </h3>

<p>If you play the role of a computer executing the algorithm in <a href="9804b.htm#l2">Listing Two</A> on a sample array, you may notice that the <i>grow_ones</i> function often scans and rescans the same strip of ones. For example, in <a href="9804bf2.htm">Figure 2</A>, the element designated <i>ll </i>starts a strip of three ones. Some time after establishing this, the algorithm calls <i>grow_ ones</i> on the element <i>p</i> one position to the right on <i>ll. </i>Had the algorithm remembered that <i>ll </i>has three ones to its right, it would easily deduce -- without a loop -- that <i>p</i> is the left end of a sequence of two ones. </p>

<p>To make the algorithm remember the number of ones to the right of each element in a column of the array <i>b</i>, I introduce a cache <i>c</i>. <a name="rf3"><a href="9804bf3.htm">Figure 3</A> shows consecutive cache contents near the solution rectangle. Updating this cache from one column to the next is not hard, but the initial values in the cache are easiest to set up if you start with the right-most column of <i>b</i>: In that case, you can start with a cache consisting of all zeros. This explains why I changed the direction of the outermost loop in <a name="rl3"><a href="9804b.htm#l3">Listing Three</A>. The cache is updated once per column by the procedure <i>update_cache</i>: the cost of one call to this procedure. However, it allows me to eliminate the inner loop of the <i>grow_ones</i> function, which, therefore, also reduces the cost per invocation. Combining all this, you find that this latest version of the solution costs <i>O(M</i><sup>2</sup>&amp;times;<i>N).</i></p>

<p>This gets close to being acceptable. For example, many interesting numerical matrix algorithms have this sort of complexity. I'll now present an even better algorithm. As I hinted earlier, we are now in a situation where we need a significant amount of extra memory -- the cache -- to execute the algorithm. However, this also comes with a second advantage besides efficiency: Each element of the array <i>b</i> needs to be read only once! </p>

<p>Let me make one more observation about this incarnation of the solution: Although the problem statement is symmetric with respect to rows and columns, the complexity of the algorithm in <a href="9804b.htm#l3">Listing Three</A> is not. Indeed, if <i>M </i>and <i>N </i>are significantly different, my earlier analysis predicts that it is better to look at the array <i>b</i> in landscape mode <i>(M</i>&lt;<i>N) </i>than in portrait mode <i>(M&gt;N). </i>You may therefore wonder whether the caching of horizontal scans could be combined with another cache for the vertical loop. Unfortunately, it's not that easy. There are a few algorithms that easily generalize from one dimension to two or more -- the Fast Fourier Transform (FFT) among them -- but they are the exception rather than the rule. To optimize the vertical loop, you need to take better advantage of the properties of the problem. </p>

<h3>Exploiting Structure </h3>

<p>Caching or remembering intermediate results is a general technique that applies to a wide variety of algorithms. It's also a technique that can often easily be integrated into existing algorithms. Ultimately, though, most optimal algorithms depend on the more unique features of a problem, and the maximal rectangle problem is no exception. </p>

<p>To find some additional structure in the problem, consider <a name="rf4"><a href="9804bf4.htm">Figure 4</A>, which depicts the cache <i>c</i> as a sort of profile of ones to the right of the current column. The previous algorithm examined every rectangle of ones that fits in that profile. However, some of these rectangles aren't as worth examining as others. For example, the dashed rectangle in <a href="9804bf4.htm">Figure 4</A> is inside the profile described by the current contents of the cache, but there are larger rectangles in the profile which enclose the dashed one. My goal then is to examine only those rectangles that are inside the profile, but not contained by another rectangle in that profile. These rectangles were drawn in a slightly thicker line in the left half of <a href="9804bf4.htm">Figure 4</A>; the solution rectangle (in red) is one of these interesting rectangles. </p>

<p>Arrows to the left of the profile in <a href="9804bf4.htm">Figure 4</A>  depict the vertical extent of the interesting rectangles. The crucial observation to make here is that these extents nest -- if you traverse the arrow ends from bottom to top, you'll find that an arrow that started earlier than another arrow will finish no later that other arrow. You will also notice that arrows start when the profile widens, while they end when the profile narrows. So, opening one or more nested rectangles corresponds to seeing an increase in the cache value, while closing rectangles corresponds to seeing a decrease; if the cache does not change in value, no new rectangles are opened and no opened ones are closed. </p>

<p>If you are familiar with parsing programming languages with nested structures, you know that a stack is the natural data structure to handle the opening and closing of nesting levels. The stack I use in my final algorithm keeps track of where a profile widening was seen, and what the width prior to that widening was. This allows the algorithm to recover the width of already opened narrower rectangles when closing a wider one. <a name="rl4"><a href="9804b.htm#l4">Listing Four</A> lists the details of the algorithm. </p>

<p>When the value of the cache reduces as the <i>y</i> coordinate increases, it is possible that multiple rectangles must be closed. That explains the innermost <i>do</i> loop. Each time a rectangle is closed, it is compared against the best rectangle so far and stored away if it is better. Because the <i>do</i> loop may pop one too many openings, it is followed by pseudocode that pushes back the last popped pair. </p>

<p>The cost of a single iteration of the <i>y</i> loop can be quite expensive due to the embedded <i>do</i> loop. However, each iteration of the <i>y</i> loop will never push more than one pair onto the stack. Since each iteration of the <i>do</i> loop will pop one such pair, the total number of times it will be executed for a single <i>x</i> value cannot be more than <i>M. </i>Hence the innermost <i>for </i>loop has complexity <i>O(M). </i>Because <i>update_cache</i> has the same complexity and because both <i>update_cache</i> and the inner <i>for </i>loop are executed <i>N </i>times -- by the outer <i>for</i> loop -- the total complexity of this algorithm is <i>O(M</i>&amp;times;<i>N). </i>The sort of thinking that went into the determination of the complexity of the inner <i>for </i>loop is sometimes called "amortized analysis" because the cost of the <i>do</i> loop is amortized over the number of push operations; Cormen et al. has more examples of this technique. </p>

<p>That complexity is optimal, because reading the contents of each element of the array requires at least <i>O(M</i>&amp;times;<i>N) </i>operations (and if you miss reading even one element you might not find the largest rectangle). This algorithm still requires <i>O(M) </i>memory and still works when the elements of the given array <i>b</i> are given as an input stream. </p>

<h3>Game Over </h3>

<p>The stepwise derivation of this algorithm illustrates a number of principles that are widely applicable in algorithm design. In this case, each step provided an asymptotic improvement for the worst case, and resulted -- in my opinion -- in a more elegant algorithm. That is not always the case. Sometimes, a clever refinement will only provide a nonasymptotic improvement, but that, too, is often worthwhile. Furthermore, it is often the case that such refinements make the algorithm considerably less elegant and less concise. </p>

<p>A problem similar to that presented here was rather seriously studied in the continuous domain. That problem consists in finding the largest empty rectangle inside a given rectangle filled with points. An efficient algorithm for this problem builds on the concept of tents, which have some similarity to the cache/profile used in our solution.</p>

<h3>Acknowledgment </h3>

<p>Many thanks to Saul Rosenberg, Tom Halladay, and James Curran for making me dust off this algorithm to present it at an Object Development Group (http://www .objdev.org/) meeting in New York. This article is dedicated to Susan Rodger who first showed this problem to me in a most outstanding algorithms course at the Rensselaer Polytechnic Institute. David Francis and Tara Krishnaswamy contributed many corrections and ideas to this article.</p>

<h3>References</h3>

<p>Cormen, Thomas H., Charles E. Leiserson, and Ronald L. Rivest.<i> Introduction to Algorithms.</i> New York: McGraw-Hill, 1990.</p>

<p>Orlowski, M. "A New Algorithm for the Largest Empty Rectangle Problem," <i>Algorithmica</i>, 1990, volume 5, 65-73.</p>

<p>Stroustrup, Bjarne. <i>The C++ Programming Language. </i>Third edition. Reading, MA: Addison-Wesley, 1997.</p>

<p><b>DDJ</b></p>


<H4><a name="l1">Listing One</H4>

<pre>// Variables to keep track of the best rectangle so far: best_11 = (0, 0); best_ur = (-1, -1) 
main algorithm: 
   for 11.x = 0 .. N 
      for 11.y = 0 .. M 
         for ur.x = 11.x .. N 
            for ur.y = 11.y .. M 
               if area(11, ur)&gt;area(best_11, best_ur) 
               and all_ones(11, ur) 
                  best_11 = 11; best_ur = ur 
end main algorithm 
define area(11, ur) 
   if 11.x&gt;ur.x or 11.y&gt;ur.y // If ur is left of or 
      return 0               // below 11: return 0 
   else 
      return (ur.x-11.x+1)*(ur.y-11.y+1) 
define all_ones(11, ur) 
   for x = 11.x .. ur.x 
      for y = 11.y .. ur.y 
         if b[x, y]==0 
            return false 
   return true 
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two </H4>

<pre>// Variables to keep track of the best rectangle so far: best_11 = (0, 0); best_ur = (-1, -1) 
main algorithm: 
   for 11.x = 0 .. N-1 
      for 11.y = 0 .. M-1 
          ur = grow_ones(11) 
          if area(11, ur)&gt;area(best_11, best_ur) 
             best_11 = 11; best_ur = ur 
end main algorithm 
define grow_ones(11) 
   ur = (11.x-1, 11.y-1) // Zero area ur-choice 
   x_max = N // Right edge of growth zone 
   y = 11.y-1 
   while y+1&lt;M and b[11.x, y+1]!=0 
      y = y+1; x = 11.x // Scan a new layer 
      while x+1&lt;x<sub> -- </sub>max and b[x+1, y]!=0 
         x = x+1 
      x_max = x 
      if area(11, (x, y))&gt;area(11, ur) 
         ur = (x, y) 
   return ur 
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>// Variables to keep track of the best rectangle so far: best_11 = (0, 0); best_ur = (-1, -1) 
// The cache starts with all zeros: 
c[0 .. M-1] = 0 
main algorithm: 
   for 11.x = N-1 .. 0 
      update_cache(11.x) 
      for 11.y = 0 .. M-1 
          ur = grow_ones(11) 
          if area(11, ur)&gt;area(best_11, best_ur) 
             best_11 = 11; best_ur = ur 
end main algorithm 
define update_cache(x) 
   for y = 0 .. M-1 
      if b[x, y]!=0 
         c[y] = c[y]+1 
      else 
         c[y] = 0 
define grow_ones(11) 
   ur = (11.x-1, 11.y-1) // Zero area ur-choice 
   y = 11.y-1 
   while y+1&lt;M and b[y]!=0 
      y = y+1; // Scan a new layer 
      x = min(11.x+c[y]-1, x_max) // Use the cache, Luke! 
      x_max = x 
      if area(11, (x, y))&gt;area(11, ur) 
         ur = (x, y) 
   return ur 
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>// Variables to keep track of the best rectangle so far: best_ll = (0, 0; best_ur = (-1, -1)
// The cache starts with all zeros: 
c[0 .. M-1] = 0 // One extra element (closes all rectangles)
main algorithm: 
   for x = N-1 .. 0 
      update_cache(x)
      width = 0 // Width of widest opened rectangle 
      for y = 0 .. M 
         if c[y]&gt;width // Opening new rectangle(s)? 
            push(y, width)
            width = c[y] 
         if c[y]&lt;width // Closing rectangle(s)? 
            do 
               (y0, w0)= pop()
               if width*(y-y0)&gt;area(best_ll, best_ur)
                  best_ll = (x, y0)
                  best_ur = (x+width-1, y-1)
               width = w0 
            until c[y]&gt;=width 
            width = c[y] 
            if width!=0 // Popped an active "opening"? 
               push(y0, width)
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
