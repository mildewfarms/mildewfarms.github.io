<html>
<META NAME="year" CONTENT="1998">
<head>
<title>ATL and Connection Points</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>ATL and Connection Points</h1>

<p><i>Dr. Dobb's Journal</i> June 1998
</p>
<h3>By George Shepherd and Scot Wingo</h3>

<I>Scot is a cofounder of Stingray Software. He can be contacted at mfc_faq@stingsoft.com. George is a senior computer scientist with DevelopMentor and can be contacted at 70023.1000@compuserve.com. They are the coauthors of MFC Internals (Addison-Wesley, 1996).</I>

<hr>

<p>Calling into COM objects using an incoming interface is much like calling methods on a C++ class. However, there are times when you want to have a COM object call back out to the client. Once you grasp the basic principle behind COM (that interfaces and implementations should be treated separately) and understand how to call methods through a COM interface, the next question you ask is how to set up COM objects and clients so that the clients can get callback notifications. COM's <i>Connection</i> technology addresses this question -- particularly for Visual Basic and VBScript programmers. This month, we'll take a look at how two COM objects can set up this communication scheme, whereby the object calls back to the client when the object is written using the Active Template Library (ATL). We'll first examine how connections work and then we'll examine how ATL implements them.</p>

<h3>Bidirectional Communication</h3>

<p>Bidirectional communications between two pieces of software is a common requirement. Given two independent software components, there are many situations where it's useful to have an object notify its client(s) of various goings on. The classic example of this is ActiveX Controls, where the controls notify their clients of special events. Once an object and a client agree on how the object should call back to the client, the client needs a way of connecting its implementation(s) of the callback interface(s). These interfaces defined by the object and implemented by the client are called outbound or outgoing interfaces.</p>

<p>COM defines several standard incoming/outgoing interface pairs that define a connection mechanism. One of the best examples is the <i>IAdviseSink</i> interface, used in conjunction with the <i>IDataObject</i> interface. This pair of interfaces is useful for transferring presentations (among other things) between OLE Document objects and OLE Document clients. Objects implement <i>IDataObject</i>. Once clients connect to the object and <i>QueryInterface</i> for <i>IDataObject</i>, the client can plug its implementation of <i>IAdviseSink</i> into the client using <i>IDataObject::DAdvise</i> and begin receiving notifications whenever the data inside <i>IDataObject</i> changes. This happens whenever the object calls back to the client's implementations of <i>IAdviseSink:: OnViewChanged</i> or <i>IAdviseSink::OnDataChanged</i>.</p>

<p>This is a specific case of outbound interfaces. The interfaces and the connection process are well understood by both the client and the object. But now imagine you're a software designer and you want to create a very generalized case of this connection strategy. Perhaps you're inventing a new kind of COM object and you'd like the COM object to be able to call back to its client, but you also want to generalize the connection mechanism so it's not specific to the interfaces involved. For example, imagine you wanted to establish a connection to an object in a generalized way -- in much the same way <i>QueryInterface</i> lets clients ask for an object's outgoing interface. How do you do it?</p>

<p>Microsoft has taken a shot at it and defined connectable objects. Connectable objects were invented to connect an ActiveX Control to its client so the control can report events back to its client. After all, ActiveX Control events are simply a way for a Control to call back to the client. Let's take a look at how connectable objects are used for establishing a connection between two COM objects.</p>

<h3>Incoming versus Outgoing Interfaces </h3>

<p>The ability for a client to call into a COM object has been available ever since COM was invented. Any interface implemented by a COM object is an incoming interface, so named because the interface handles incoming method calls. For clients, acquiring a COM object's incoming interface is a matter of creating the COM object in the usual way (using a function like <i>CoCreateInstance</i>) and calling methods on the interface, as in <a name="rl1"><a href="9806n.htm#l1">Listing One</A> Incoming interfaces are the norm for COM objects, providing a way for clients to call into COM objects. <a name="rf1"><a href="9806nf1.htm">Figure 1</A> illustrates a COM object with incoming interfaces.</p>

<p>However, there are also outgoing interfaces that are implemented by the client so the COM object can call the client. <a name="rf2"><a href="9806nf2.htm">Figure 2</A> illustrates an outgoing COM interface.</p>

<h3>The Interfaces</h3>

<p>We'll start by examining the COM interfaces involved in connections: <i>IConnectionPoint</i> and <i>IConnectionPointContainer</i>. Both of these interfaces are implemented by the object (as opposed to the client). These interfaces exist for the sole purpose of connecting an object to its client. Once the connection is made, these interfaces drop out of the picture. For instance, <a name="rl2"><a href="9806n.htm#l2">Listing Two</A> shows the <i>IConnectionPoint</i> interface in the raw.</p>

<p>You can probably guess the nature of this interface from the function names. Objects implement this interface so clients have a way to subscribe to events. Once a client acquires this interface, the client may ask to subscribe to data change notifications via the <i>Advise </i>function. The <i>Advise</i> function takes an <i>IUnknown</i> pointer, so the callback interface can be any COM interface at all. This interface also contains the complementary <i>Unadvise</i> function. We'll examine how the other functions are useful in a minute.</p>

<p>Clients may implement any callback interface and use <i>IConnectionPoint</i> to hand the interface over to the object so the object may call back to the client. Once the object has the callback interface (passed via <i>Advise</i>'s first parameter), the object can easily call back to the client. This begs the next question -- how can the client acquire a connection point in the first place? The answer is through the <i>IConnectionPointContainer</i> interface (see <a name="rl3"><a href="9806n.htm#l3">Listing Three</A>).</p>

<p><i>IConnectionPointContainer</i> is an unfortunate name for this interface, especially given the history of ActiveX Controls. The name <i>IConnectionPointContainer</i> may lead you to conclude that it's implemented by the control container (aka, the client). However, this interface is implemented by the object. A more descriptive name for this interface may have been <i>IConnectionPointHolder </i>or <i>IConnectionPointCollection</i> because it holds connection points. At any rate, this is the name we have to live with.</p>

<p>As you can tell from the second function, this is the interface a COM client uses to acquire an <i>IConnectionPoint</i> interface (which the client can then use to establish a connection). </p>

<p>A COM client calls <i>CoCreateInstance</i> to create a COM object. Once the client has an initial interface, the client can ask the object if it supports any outgoing interfaces by calling <i>QueryInterface</i> for <i>IConnectionPointContainer</i>. If the object answers "yes" by handing back a valid pointer, the client knows it can attempt to establish a connection.</p>

<p>Once the client knows the object supports outgoing interfaces (that is, is capable of calling back to the client), the client can ask for a specific outgoing interface by calling <i>IConnectionPointContainer::FindConnectionPoint</i> using the GUID representing the desired interface. If the object implements that outgoing interface, the object hands back a pointer to that connection point. At that point, the client uses <i>IConnectionPoint::Advise</i> to plug in its implementation of the callback interface so the object can call back to the client.</p>

<p>To support this connection functionality, the object needs to implement these two interfaces. The most common occurrence of this functionality is within ActiveX Controls, whose clients like to listen to the controls for events. ATL's support for connections consists of some template classes and a set of macros. </p>

<h3>Setting up Outgoing Interfaces in ATL</h3>

<p>Setting up the outgoing interfaces in an ATL-based object involves two steps: </p>

<ul>
<li>Describing the callback interface the client needs to implement.  <li>Adding the connection support to the object. 
</ul>

<p>As with all other interfaces in COM, the callback interfaces for an ATL-based object are described in IDL. For example, imagine you're implementing an object named <i>CConnectableObj</i> that has an outgoing interface. Normally, you'd add the object to your server by selecting New ATL Object from the Insert menu. The Wizard dialog box pops up asking you to name the object and to specify other aspects of the ATL object such as the threading model. One of the options you may select includes whether the object implements connections. <a name="rl4"><a href="9806n.htm#l4">Listing Four</A> shows the C++ class created by the Wizard (with the "Support Connection Points" option checked).</p>

<p>Callback interfaces (outgoing interfaces) are those interfaces described by the object and implemented by the client. When using ATL, the starting place for defining the outgoing interface is within the IDL. <a name="rl5"><a href="9806n.htm#l5">Listing Five</A> is an outgoing interface defined in the IDL. </p>

<p>When the project is compiled, the IDL is compiled into a type library. Clients of this object will use this information to know how to implement the callback interface. Notice in this example that the outgoing interface is a dispatch interface (an instance of <i>IDispatch</i>). The outgoing interface doesn't have to be a dispatch interface. However, if it is a dispatch interface, your object can call back to a wider variety of clients. The next step when developing the object is to come up with some way to call through the outgoing interface. </p>

<p>Visual C++ gives you an easy way to call back to an object through an outgoing interface -- the ATL proxy generator. You can get to it by selecting Developer Studio Components from the Components and Controls option from the Add to Project menu and then choosing the ATL Proxy Generator. The ATL Proxy Generator reads type libraries and generates easy-to-call functions for calling back to the client. In this case, the class generated by the ATL proxy generator wraps functions for calling back to the client through <i>IDispatch::Invoke</i>. <a name="rl6"><a href="9806n.htm#l6">Listing Six</A> shows the class generated by the proxy generator. Whenever the object wants to make calls back to the client, the object just needs to call <i>Fire_Event1</i>, <i>Fire_Event2</i>, and <i>Fire_Event3</i>. By the way, notice that <i>CProxy_DSomeEvents</i> is derived from <i>IconnectionPointImpl</i>. </p>

<p>While using these tools from within Visual C++ is fairly straightforward and you can use them without understanding the underpinnings, you're always better off understanding how ATL implements connection points so you can make important design decisions and have an easier time debugging the code. </p>

<h3>ATL and <i>IConnectionPointContainer</i></h3>

<p>Remember the basic premise behind COM is separating interfaces from their implementations. As long as the client gets back the interface (function table) it requested through <i>QueryInterface</i>, the client is happy. That interface may point to some C++-based code, some VB-based code, some Delphi-based code, or whatever. The client doesn't care what happens behind the interface (as long as it works, of course). When some client code uses <i>IConnectionPointContainer</i> and <i>IConnectionPoint</i> pointers connected to a COM object implemented using ATL, the client is talking to some C++-based source code written using templates. ATL implements <i>IConnectionPointContainer</i> through a template named <i>IConnectionPointContainerImpl</i>. </p>

<p><i>IConnectionPointContainerImpl</i> is parameterized with one parameter -- the class implementing <i>IConnectionPointContainer</i> (that would be the ATL-based class you're in the middle of implementing). Remember the purpose of <i>IConnectionPointContainer</i> is to provide a way for clients to ask about whether an object supports current outgoing interfaces (each represented by a separate <i>IConnectionPoint</i> interface). </p>

<p><i>IConnectionPointContainerImpl</i> maintains a collection of <i>IConnectionPoint</i> interfaces using the ATL helper class <i>CComEnum</i>. Before diving into <i>IConnectionPointContainerImpl</i>, we need to examine how ATL maintains a collection of connection points -- through a mechanism called connection maps. ATL's collection points maps are implemented through a set of macros including BEGIN_ CONNECTION_POINT_MAP, CONNECTION_POINT_ENTRY, and END_CONNECTION_POINT_MAP. For example, if you want to set up a list of connection points in the <i>CConnectionObj</i> class, you'd sandwich the CONNECTION_ POINT_ENTRY between the BEGIN_ CONNECTION_POINT_MAP and the END_CONNECTION_POINT_MAP like <a name="rl7"><a href="9806n.htm#l7">Listing Seven</A>. This defines the set of connection points that the client can use to connect to the object. The BEGIN_CONNECTION_POINT_MAP defines a function named <i>GetConnMap, </i>which returns a pointer to an array of _ATL_CONNMAP_ENTRY structures. The _ATL_CONNMAP_ENTRY is simply an address that points to an <i>IConnectionPoint</i> interface. The CONNECTION_ POINT_ENTRY macro calculates the address of the pointer on the fly using a helper class named <i>_ICPLocator</i>, which performs a <i>QueryInterface</i>-style operation to find the pointer based on the GUID.</p>

<p>IConnectionPointContainerImpl implements <i>EnumConnectionPoint</i>s by simply filling the connection point collection and passing back the <i>IEnumConnectionPoint</i> interface. <i>IConnectionPointContainerImpl</i> uses the connection map's <i>GetConnPoint</i> to retrieve the list of connection points and fill the collection of connection points.</p>

<p><i>IConnectionPointContainerImpl</i> implements <i>FindConnectionPoint</i> by retrieving the list of connection points using the connection map's <i>GetConnPoint</i>. <i>FindConnectionPoint</i> just rips through the list of connection points finding the requested connection point. When <i>FindConnectionPoint</i> locates the connection, the function passes back the connection point interface after calling <i>AddRef</i> through it. <i>IConnectionPointContainer</i> is fairly straightforward. The other half of the picture is how ATL implements <i>IConnectionPoint</i>. </p>

<h3>ATL and <i>IConnectionPoint</i></h3>

<p>ATL implements <i>IConnectionPoint</i> through a templatized class named <i>IConnectionPointImpl</i>. Take a look back at the ATL proxy in <a href="9806n.htm#l6">Listing Six</A> (notice it derives from <i>IConnectionPointImpl</i>) <i>IConnectionPointImpl</i>'s template parameters include the class implementing <i>IConnectionPoint</i> (that would be the proxy class), the GUID of the connection point, and a class that manages the connections. </p>

<p><i>IConnectionPointImpl</i> implements the individual connection points of an ATL-based COM class. <i>IConnectionPointImpl</i> doesn't have much state -- it maintains the GUID identifying the connection point and a collection of <i>IUnknown</i> interfaces that the object uses to call back to the client. That's really all the state required for implementing a connection point. The rest of <i>IConnecitonPointImpl</i> is implemented as a set of function templates. The two most important functions of <i>IConnectionPointImpl</i> are <i>Advise</i> and <i>Unadvise</i>. When a client wants to subscribe to callbacks, the client calls <i>IConnectionPoint::Advise</i> passing in an unknown pointer. <i>IConnectionPointImpl</i> implements <i>Advise</i> by inserting the unknown pointer into the collection of callback interfaces and returning the vector position in the <i>pdwCookie</i> parameter. </p>

<p>Clients use <i>IConnectionPoint::Unadvise</i> to stop receiving callbacks. <i>IConnectionPointImpl</i> implements <i>Unadvise </i>by looking up the unknown pointer using the <i>dwCookie</i> parameter, which happens to be the index into the collection of unknown pointers. If <i>Unadvise</i> finds the unknown pointer in the vector, <i>Unadvise </i>removes the pointer from the advise list and then releases the pointer.</p>

<p>The rest of the <i>IConnectionPoint</i> functions (<i>GetConnectionInterface</i>, <i>GetConnectionPointContainer</i>, and <i>EnumConnections</i>) aren't used as often. However, <i>IConnectionPoint</i> implements them just to make sure the interface implementation contract is complete. <i>IConnectionPointImpl</i> implements <i>GetConnectionInterface</i> by simply returning the GUID representing the connection point. <i>IConnectionPointImpl</i> maintains a pointer to the connection point container class (it was passed in as a template parameter). <i>IConnectionPointImpl</i> implements <i>GetConnectionPointContainer</i> by casting that pointer as <i>IConnectionPointContainerImpl</i> to return the <i>IConnectionPointContainer vtable</i> (this, of course, assumes the <i>IConnectionPointContainer</i> class is derived from <i>IConnectionPointContainerImpl</i>). Finally, <i>IConnectionPointImpl</i> implements <i>EnumConnections</i> by filling a <i>CComEnum</i>-based class with the unknown pointers known by the object and passing back the <i>IEnumConnections</i> interface implemented by the <i>CComEnum</i>-based class. </p>

<h3>Conclusion</h3>

<p>While developers have been able to create ActiveX Controls using MFC for some time now, using MFC imposes certain design decisions and your control has to link to the MFC DLL. ATL is a lightweight framework for implementing COM classes. In addition to providing all the machinery for writing basic COM classes, ATL includes the interfaces necessary to implement ActiveX Controls. Part of that machinery includes describing interfaces that the client is willing to implement so the ActiveX Control can call back to the client. ATL fully supports this connection mechanism through its <i>IConnectionPointContainerImpl</i> and <i>IConnectionPointImpl</i> classes. </p>

<p><b>DDJ</b></p>

<H4><a name="l1">Listing One</H4>

<pre>ISomeInterface* pSomeInterface = NULL;HRESULT hr;
hr = CoCreateInstance(CLSID_SomeObject, NULL, CLSCTX_ALL, 
                                   IID_ISomeInterface, *pSomeInterface);
if(SUCCEEDED(hr)) {
   pSomeInterface-&gt;Function1();
   pSomeInterface-&gt;Function2();
   pSomeInterface-&gt;Release();
}
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>interface IConnectionPoint : IUnknown {  HRESULT GetConnectionInterface(IID *pIID) = 0;
  HRESULT GetConnectionPointContainer(IConnectionPointContainer **ppCPC) = 0;
  HRESULT Advise(IUnknown *pUnk, DWORD *pdwCookie) = 0;
  HRESULT Unadvise(DWORD dwCookie) = 0;
  HRESULT EnumConnections(IEnumConnections **ppEnum) = 0;
};
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>interface IConnectionPointContainer : IUnknown {  HRESULT EnumConnectionPoints(IEnumConnectionPoints **ppEnum) = 0;
  HRESULT FindConnectionPoint(REFIID riid, IConnectionPoint **ppCP) = 0;
};
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>class ATL_NO_VTABLE CConnectableObj :    public CComObjectRootEx&lt;CComSingleThreadModel&gt;,
   public CComCoClass&lt;CConnectableObj, &amp;CLSID_ConnectableObj&gt;,
   public IConnectionPointContainerImpl&lt;CConnectableObj&gt;,
   public IDispatchImpl&lt;IConnectableObj, &amp;IID_IConnectableObj, 
                        &amp;LIBID_CONNECTABLEOBJSVRLib&gt;
{
 ...
};
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<H4><a name="l5">Listing Five</H4>

<pre>[   uuid(5BE91C40-BA0D-11D1-8CAA-D099043C7E50),
   version(1.0),
   helpstring("connectableobjsvr 1.0 Type Library")
]
library CONNECTABLEOBJSVRLib
{
   importlib("stdole32.tlb");
   importlib("stdole2.tlb");
   [
      uuid(21C85C43-0BFF-11d1-8CAA-FD10872CC837),
      helpstring("Events created from the control")
   ]
   dispinterface _DSomeEvents {
      properties:
      methods:
        [id(1)] void Event1([in]short x, [in] short y);
        [id(2)] void Event2([in] float x);
        [id(3)] void Event3();
   }
   [
      uuid(5BE91C4E-BA0D-11D1-8CAA-D099043C7E50),
      helpstring("ConnectableObj Class")
   ]
   coclass ConnectableObj
   {
      [default] interface IConnectableObj;
      [default, source] dispinterface _DSomeEvents;
   };
}
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>
<H4><a name="l6">Listing Six</H4>

<pre>template &lt;class T&gt;class CProxy_DSomeEvents : 
   public IConnectionPointImpl&lt;T, &amp;DIID__DSomeEvents, CComDynamicUnkArray&gt;
{
public:
//methods:
//_DSomeEvents : IDispatch
public:
   void Fire_Event1(short x, short y)
   {   
      // gnarly code for calling 
      //   IDispatch::Invoke()
   }
   void Fire_Event2(float x) 
   {
      // gnarly code for calling 
      //   IDispatch::Invoke()
   }
   void Fire_Event3()
   {
      // gnarly code for calling 
      //   IDispatch::Invoke()
   }
};
</pre>
<P>
<a href="#rl6">Back to Article</A>
</P>
<H4><a name="l7">Listing Seven</H4>

<pre>BEGIN_CONNECTION_POINT_MAP(CConnectableObj)   CONNECTION_POINT_ENTRY(DIID__DSomeEvents)
END_CONNECTION_POINT_MAP()
</pre>
<P>
<a href="#rl7">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
