<html>
<META NAME="year" CONTENT="1998">
<head>
<title>A Real Program</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<p><i>Dr. Dobb's Journal</i> June 1998 </p>


<h1>A Real Program</h1>
<HR>


<p>Robert Sedgewick and I described ternary search trees in the April 1998 issue of <i>DDJ</i>. When we worked on the data structure, we were both pleasantly surprised to find that a recursive search function was as fast as an iterative function (under optimizing compilers). The run times for the two functions are shown in the first two rows of <a name="rt3"><a href="9806mt3.htm">Table 3</A>. We therefore assumed that our other recursive search functions were competitive with the iterative versions. After performing the experiments in this article, I decided to go back and test the assumption.</p>

<p>The <i>pmsearch</i> function in (<a name="rl2"><a href="#l2">Listing Two</A>) performs a partial-match search in a tree. The query can include dots as "don't care" characters, so ".at" matches <i>bat</i>, <i>cat</i>, and a dozen other three-letter words. <i>pmsearch </i>calls itself in three distinct places, and returns to do more work after two of those calls.</p>

<p>The function <i>pmsearch2</i> is in <a name="rl3"><a href="#l3">Listing Three</A>. It is almost twice as long as function <i>pmsearch</i>, but only a bit harder to understand. The new code has two primary blocks, depending on whether the current character is a dot. Both of the cases ended with a tail recursion, so I explicitly transformed that to a <i>while</i> loop. The speedups ranged from a third to a factor of three, which I felt was worth a dozen lines of code and a couple hours of programming. I took a similar approach to a function for near-neighbor searching in ternary search trees, with similar results in code length and run time. The code for these experiments is available electronically; see "Resource Center," page 3.</p>

<p> -- J.B.</p>
<P>
<a href="9806m.htm#rs1">Back to Main Article</A>
</P>

<a name="l2"><H3>Listing Two</H3>
<PRE>  void pmsearch(Tptr p, char *s)
  {   if (!p) return;
      nodecnt++;
      if (*s == '.' || *s < p->splitchar)
          pmsearch(p->lokid, s);
      if (*s == '.' || *s == p->splitchar)
          if (p->splitchar && *s)
              pmsearch(p->eqkid, s+1);
      if (*s == 0 && p->splitchar == 0)
          srcharr[srchtop++] =
              (char *) p->eqkid;
      if (*s == '.' || *s > p->splitchar)
          pmsearch(p->hikid, s);
  }
</PRE>
<P>
<a href="#rl2">Back to Text</A>
</P>

<a name="l3"><H3>Listing Three</H3>
<PRE> void pmsearch2(Tptr p, char *s)
 {   while (p) {
         nodecnt++;
         if (*s == '.') {
             pmsearch2(p->lokid, s);
             pmsearch2(p->hikid, s);
             if (p->splitchar == 0) return;
             p = p->eqkid;
             ++s;
         } else {
             if (*s < p->splitchar)
                 p = p->lokid;
             else if (*s > p->splitchar)
                 p = p->hikid;
             else /* *s == p->splitchar */ {
                 if (*s == 0) {
                     if (p->splitchar == 0)
                         srcharr[srchtop++] =
                             (char *) p->eqkid;
                     return;
                 }
                 p = p->eqkid;
                 ++s;
             }
         }
     }
 }
</PRE>
<P>
<a href="#rl3">Back to Text</A>
</P>

<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
