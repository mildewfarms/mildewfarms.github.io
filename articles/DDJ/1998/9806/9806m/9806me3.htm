<html>
<META NAME="year" CONTENT="1998">
<head>
<title>Algorithm Alley</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h2>The Cost of Recursion</h2>
<h3><i>By Jon Bentley </i></h3>
<p><i>Dr. Dobb's Journal</i> June 1998 </p>

<pre><B>(a)</B>
typedef struct tnode *Tptr;
typedef struct tnode {
    int val;
    Tptr lo, hi;
} Tnode;
<B>(b)</B>
int rbstsearch(Tptr p, int t)
{  if (!p)
       return -1;
   if (t == p-&gt;val)
       return 1;
   if (t &lt; p-&gt;val)
       return rbstsearch(p-&gt;lo, t);
   return rbstsearch(p-&gt;hi, t);
}
<B>(c)</B>
int ibstsearch(int t)
{  Tptr p;
   for (p=root; p; ) {
       if (t == p-&gt;val)
           return 1;
       p=(t&lt;p-&gt;val) ? p-&gt;lo : p-&gt;hi;
   }
   return -1;
}
<B>(d)</B>
Tptr rinsert(Tptr p, int t)
{   if (p) {
        if (t &lt; p-&gt;val)
            p-&gt;lo = rinsert(p-&gt;lo, t);
        else
            p-&gt;hi = rinsert(p-&gt;hi, t);
    } else {
        p = (Tptr) malloc(sizeof(Tnode));
        p-&gt;lo = p-&gt;hi = 0;
        p-&gt;val = t;
    }
    return p;
}
</pre>

<H4>Example 3: (a) Each node in a binary search tree contains an integer value and two pointers to subtrees; (b) recursive search function returns 1 if the value t is in the tree, -1 if the value is not present; (c) iterative version; (d) when p is null, it makes a new node. </H4>


<p><a href="9806m.htm#re3">Back to Article</A></p>

<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
