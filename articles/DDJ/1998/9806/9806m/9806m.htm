<html>
<META NAME="year" CONTENT="1998">
<head>
<title>Algorithm Alley</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>The Cost of Recursion</h1>

<p><i>Dr. Dobb's Journal</i> June 1998
</p>
<h3>By Jon Bentley</h3>

<I>Jon is a Member of Technical Staff at Bell Labs. He can be contacted at jlb@ research.bell-labs.com.</I>

<hr>
Sidebar:<a name="rs1"> <a href="9806ms1.htm"><I>A Real Program</I></A>
<HR>

<p>Starting this month, Jon Bentley will be a regular contributor to "Algorithm Alley" Jon is best known for the "Programming Pearls" column he wrote for<i> Communications of the ACM</i> and later turned into a series of often-recommended books.</p>

<p>This month, Jon takes a hard look at a common tradeoff: Should you optimize your code to be easy to read or to be efficient? Recursive algorithms are often elegant and easy to express, but are less efficient than iterative techniques. Or are they?</p>

<p>As Jon shows, the truth is much more complicated than you might think.</p>

<p> -- Tim Kientzle</p>

<p>Too often, I find myself wrestling with a piece of code, beating at it with <i>while</i> and <i>for</i> loops, all to no avail. The code gets bigger, buggier, and uglier. After hours (or days) of frustration, I finally try recursion and a clean function jumps out in a dozen lines of code.</p>

<p>So why do I make the same mistake over and over again, and blithely ignore recursion? I'll fall back on the old excuse of the way I was raised. I grew up programming in Fortran without recursion. And during my early years of recurring, it was notoriously expensive.</p>

<p>On modern systems, though, recursion can be almost free. It can also be much more expensive (relatively) than it was in the bad old days. I recently confronted this ghost of my childhood by studying the cost of recursion. In this month's "Algorithm Alley," I'll tell the story of my experiments, starting with some examples, and ending with substantial speedups for a new data structure. It is sprinkled along the way with exercises so you can download the programs and try them (details on the program follow shortly). </p>

<p>This analysis has been a wonderfully liberating experience for me. New insights into the cost of recursion allow me to use this powerful tool more comfortably. And when recursion is too expensive, simple techniques let me retrieve the performance while maintaining much of the elegance. </p>

<h3>Strings</h3>

<p>I'll start with two important functions on strings. The <i>strlen</i> function returns the number of characters in a null-terminated string. The typical implementation is usually along the lines of <a name="re1"><a href="9806me1.htm">Example 1</A>(a). The loop increments the pointer <i>s</i> until it finds the null character, incrementing the integer <i>n</i> along the way.</p>

<p>As <a href="9806me1.htm">Example 1</A>(b) shows, you can implement the same function recursively (the leading <i>r</i> is for recursion). The length of a null string is zero; the length of a nonnull string is one more than the length of the substring that omits the first character. The two programs perform a similar sequence of computations: test <i>*s</i> for null, add 1 to <i>s</i>, and repeat. The different mechanisms for repetition can have very different overheads, though. </p>

<p><b>Exercise 1. </b>Estimate the run times of the two <i>strlen</i> functions on your machine. Assume that the input is a very long string. How will the run times vary across hardware, compilers, and optimization level?</p>

<p>The first two lines of <a name="rt1"><a href="9806mt1.htm">Table 1</A> show the run time of the two functions across three 200-MHz machines, three different compilers, and two extremes of optimization. The first entry on the first line says that on a Pentium Pro with no optimization, the <i>istrlen</i> function takes about 30<i>n</i> nanoseconds on an input of length <i>n</i>; the second entry says that the optimized version is twice as fast. The two rows together show that recursion is expensive: from factor of four on an (optimized) Pentium Pro to a whopping factor of 29 on an (optimized) UltraSPARC. Caveat hackor!</p>

<p>The next experiment (see <a name="re2"><a href="9806me2.htm">Example 2</A> (a)) implements the <i>strcmp</i> function that compares two strings. The recursive version (<a href="9806me2.htm">Example 2</A> (b)) peels off the first character of each before recurring. </p>

<p>The third and fourth lines of <a href="9806mt1.htm">Table 1</A> give the coefficient in nanoseconds for comparing two equal strings of length <i>n</i>. That data shows that recursion without optimization is more expensive than iteration by about a factor of five. With the highest level of optimization, though, recursion has exactly the same cost as iteration. The clever compilers noticed that the recursion is always the final call in the function (usually called "tail recursion"), and transformed it to iteration.</p>

<p>When I first implemented the recursive length function, I used C's "?:" conditional expression to yield more succinct (but not necessarily clearer) code; see <a href="9806me2.htm">Example 2</A> (c).</p>

<p><b>Exercise 2.</b> Will using a conditional expression change the run time of the program?</p>

<p>I had assumed the answer was no. The final line in <a href="9806mt1.htm">Table 1</A> shows that on the Pentium, the times are similar. On the other systems, though, the difference is enormous. I had originally written most of my recursive functions using conditional expressions; I rewrote the experiments to avoid this vexing anomaly.</p>

<h3>Playing with the Program</h3>

<p>All of the experiments in this column (and many others not reported here) are contained in the 300-line C program called "recit.c" (for recursion and iteration), which is available electronically; see "Resource Center," page 3. After compiling the program, run it with the single parameter <i>n</i> (500 is a fine starting value). The program produces a single column of <a href="9806mt1.htm">Table 1</A> (reflecting your machine and the optimization level you used on your compiler). The program displays the raw clicks for each operation and the computed coefficient in nanoseconds; double the value of <i>n</i> until the clicks are smooth and the coefficients converge.</p>


<p><b>Exercise 3.</b> Estimate the cost on your system of the string functions <i>strlen</i> and <i>strcmp</i>. After writing down your guesses (no cheating!), download the program and run it on your machine, the experiment with different levels of optimizations. </p>

<h3>Binary Search Trees</h3>

<p>The simple functions you've seen so far have illustrated some of the costs of recursion. They show little of its expressive power, though: The problems are easily solved iteratively. I'll move on now to a data structure that needs recursion.</p>

<p>Each node in a binary search tree contains an integer value and two pointers to subtrees; see <a name="re3"><a href="9806me3.htm">Example 3</A> (a). The nodes in the <i>lo</i> subtree have values less than <i>val</i>, while those in the <i>hi</i> subtree have values greater than or equal to <i>val</i>. The root of the tree is <i>Tptr root;</i>. The recursive search function returns 1 if the value <i>t</i> is in the tree and (for similarity to the array search) -1 if the value is not present; see <a href="9806me3.htm">Example 3</A> (b). The iterative version ( <a href="9806me3.htm">Example 3</A> (c) is similar.</p>

<p>The first two lines of <a name="rt2"><a href="9806mt2.htm">Table 2</A> are similar to other functions that employ tail recursion. (The nodes of the tree were inserted in increasing order to form a degenerate tree that requires linear time to search; the entries in the table are still the coefficients in nanoseconds.)</p>

<p>The glory of recursion becomes evident in the insertion function, which is originally called as <i>root = rinsert(root, t);</i>. If <i>p</i> is nonnull, the element is inserted in the correct branch (ties go high). When <i>p</i> is null, it makes a new node, as is shown in <a href="9806me3.htm">Example 3</A> (d). This recursion gracefully solves the problem of remembering whether to store the new subtree into a <i>lo</i>, <i>hi</i>, or <i>root</i> pointer. To appreciate that service, try doing the job yourself.</p>

<p><b>Exercise 4. </b>Write an iterative function to insert a new node into a binary search tree.</p>

<p><a name="re4"><a href="9806me4.htm">Example 4</A>, the simplest program I could come up with for this task, is faster than the recursive version, but I find it much less clear. The recursive version ran the first time; the iterative version had several bugs.</p>

<p>In situations like this, an old C trick combines the best of both worlds.</p>

<p><b>Exercise 5.</b> Use a pointer to a pointer to keep track of where to store the pointer to the new node.</p>

<h3>Tree Traversal</h3>

<p>As a final exercise, I'll turn to the problem of traversing a binary tree. I'll just scratch the surface of this fascinating topic. If you're interested in more detail, read Donald Knuth's classic "Structured Programming With goto Statements" (<i>Computing Surveys 6</i>, 4, December 1974, pp. 261-301). The rest of this section is a brief sketch of Knuth's study.</p>

<p>Some traversals report the values in sorted order; others verify that the tree is sorted. To keep our traversal simple, we'll just count the nodes in the tree. <a name="re5"><a href="9806me5.htm">Example 5</A>(a) is a recursive function for the job.</p>

<p>Since you know that recursion is expensive, you can reduce the number of calls from 2<i>n</i> to <i>n</i> by guarding the recursive call; see <a href="9806me5.htm">Example 5</A>(b). The original <i>rcount</i> first calls the function and then tests whether <i>p</i> is null; <i>rcount2</i> first tests for null, and then makes the call. For one extra <i>if</i> statement, you get a speedup of between six and 26 percent.</p>

<p><b>Exercise 6.</b> Function <i>rcount2</i> is faster than function <i>rcount</i>, but it is potentially buggy. Explain what the problem is and how to avoid it.</p>

<p>The final call in <i>rcount2</i> is tail recursive. You can therefore replace it with an assignment and a <i>while</i> loop; as in <a name="re6"><a href="9806me6.htm">Example 6</A> (a). The systems usually found this tail recursion; it was a 15 percent speedup on just one system.</p>

<p>Knuth uses several straightforward transformations on <i>rcount3</i> to remove the first recursion. The resulting <i>icount</i> function is shown in <a href="9806me6.htm">Example 6</A> (b). It uses its own stack. I found this version much more difficult to understand, so I was delighted that it was never significantly faster than the (singly) recursive function.</p>

<h3>Principles</h3>

<p>These little experiments have illustrated some big truths about recursion.</p>

<ul>
<li>Recursion is expressive. Some of the recursive tree functions are much clearer than their iterative cousins.   <li>Recursion can be very expensive. 
  <li>Tail recursion is sometimes cheap. Smart compilers convert it to iteration.
  <li>Tail recursion is sometimes very expensive. Converting it by hand to iteration can be very effective.
  <li>Guarding recursive calls can be effective.
  <li>Handwritten stacks require lots of code yet yield little (if any) run time. (Guy Steele said it best: "If the programmer can simulate a construct faster than the construct itself, then the compiler writer has blown it badly.")
  <li>Optimization is usually effective. Enabling compiler optimization can make some little functions an order of magnitude faster. Then again, it makes some functions a bit slower.
  <li>Timing is hard. The factor of 20 in a conditional expression is just one of many mines in this very large field. 
</ul>

<p>The text box, entitled "A Real Program," shows how these principles were applied to speed up search algorithms for a new data structure.</p>

<h3>Solutions to Selected Exercises</h3>

<p>The following are solutions for a couple of the exercises: Exercise 5 -- Function <i>iinsertpp</i> uses <i>p</i> as a pointer to the pointer that is assigned a new node. Note that it is almost as fast as the iterative version; see <a name="rl1"><a href="9806m.htm#l1">Listing One</A>. Exercise 6 -- You must guard the first call: <i>if (root) rcount2(root);</i>.</p>

<p><b>DDJ</b></p>
<a name="l1"><H3>Listing One</H3>
<PRE>  void iinsertpp(int t)
  {   Tptr *p = &root;
      while (*p) {
          if (t < (*p)->val)
              p = &((*p)->lo);
          else
              p = &((*p)->hi);
      }
      *p = (Tptr) malloc(sizeof(Tnode));
      (*p)->lo = (*p)->hi = 0;
      (*p)->val = t;
   }
</PRE>
<P>
<a href="#rl1">Back to Article</A>
</P>


<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
