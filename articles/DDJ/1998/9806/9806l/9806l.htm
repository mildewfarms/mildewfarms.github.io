<html>
<META NAME="year" CONTENT="1998">
<head>
<title>Java Q&A</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>How Do I Ensure Secure Communications from a Java Applet?</h1>

<p><i>Dr. Dobb's Journal</i> June 1998
</p>
<h3>By Kenneth Golomb and Thomas Sorgie</h3>

<I>Kenneth is a senior software engineer for American Management Systems. Thomas is a technical architect in the corporate banking practice at American Management Systems. They can be contacted at kenneth_ golomb@mail.amsinc.com and thomas_ sorgie@mail.amsinc.com, respectively.</I>

<hr>

<p>One of the significant features of Java is its simple implementation of networking classes. This streamlined but powerful collection of classes lets Java applets easily open sockets to servers and transmit data. Ensuring that the data transmitted over a socket is safe from prying eyes is not as simple, however.</p>

<p>The Secure Sockets Layer (SSL) protocol, developed by Netscape, is the de facto standard for sending encrypted data over the Internet. SSL provides a platform-independent way to secure data transmitted from one machine to another. On the Web, safe communications are denoted by the HTTPS protocol (meaning that a server listens for data with an SSL socket). This ensures that all communications between the browser and web server are encrypted, and that the server has been authenticated. In a case where web browsers have a certificate to prove the identity of its user, SSL also provides for client-side authentication.</p>

<p>Java applets can implement SSL in two different ways. The most obvious, and more difficult, way is to acquire an implementation of the SSL protocol written in Java. This implementation would provide a Secure Socket class that would operate in the same manner as a standard Java Socket, only the data would now be encrypted before transmission. While relatively simple from a technical standpoint, this option requires buying a commercially available Java implementation of SSL, and getting the appropriate licensing for distribution over the Web. Furthermore, the web browser needs to download the Java class files for the Secure Socket every time the applet is run, adding to the time it takes for the applet to start up. In addition, the code to perform these services is already provided by the web browser. This code is written in a native compiled language and has been time tested for optimal performance. Supplying this functionality in Java is inefficient and repetitive.</p>

<p>The second, less obvious, option utilizes the Secure Socket functionality already built into web browsers and web servers by tunneling proprietary data over the HTTPS protocol. Tunneling is the process of transmitting data of one protocol type by wrapping it in a stream of a second protocol. </p>

<p>At American Management Systems, we've experimented with HTTPS tunneling to pass data from a Java applet to an application server and determined that its benefits include:</p>

<ul>
  <li>The method uses industry-accepted and tested security procedures.
  <li>The native implementation of SSL is more efficient than a Java implementation.
  <li>HTTPS tunneling facilitates communication through firewalls. (Corporate firewalls often have HTTPS Port 443 open for access to the Internet. Access to any other port is difficult to control on the client side.)
  <li>The certificates that are installed in the web browser/web server are utilized. There is no need for separate certificates.
</ul>

<h3>Digging a Secure Tunnel</h3>

<p>There are three aspects to the tunneling process you need to consider -- the Java Applet Client, Proxying Service, and Application Server. </p>

<p></p>

<p><b>Java Applet Client.</b> The applet client is responsible for instructing the browser to send data over the HTTPS URL. The listener will receive data that is posted to the URL https://Servlets/ProxyServlet. HTTPS URLs basically function like regular sockets as a means to transmit data, with these exceptions:</p>

<ul>
<li>The data must be encoded to the x-www-form-urlencoded MIME format before it is sent to the URL. URL encoding replaces spaces with "+" characters and changes all nonalphanumeric characters to a three-character representation.  <li>Data carried over an HTTPS URL comes in one of two varieties, POST and GET. An HTTP GET sends additional data to the server as a query string appended to the URL (denoted by a question  mark). A POST sends the data as a separate blob. In this case, the POST is preferred. Unlike a GET, a POST is not restricted to any size, and it provides a content-length property that makes reading from the stream much simpler.
  <li>A feature of many browsers is that they can cache requests for a given URL. They can then return the cached data without consulting the server if the same URL is requested twice. Clearly this has the potential to cause problems in a client/server application. Fortunately, there is a method (<i>setUseCaches</i>) to turn this off. 
  <li>Unlike sockets, URLs are not connection oriented. This means that the connections are opened when they are needed and close immediately after they are read. Most browsers and web servers support the HTTP keep-alive specification, which can alleviate the overhead of renegotiating a socket connection for every send. This is accomplished by keeping the connections open for a server-specified time-out even after an application tries to close them. Those connections are reused if an attempt is made to reconnect within the time-out; see <a name="re1"><a href="9806le1.htm">Example 1</A>.
</ul>

<p>Once these considerations are made, URL connections can operate just like regular sockets. A program can retrieve an output stream to send data and an input stream to read the response.</p>

<p><a name="rl1"><a href="9806l.htm#l1">Listing One</A> is an applet that opens a URL connection using the HTTPS protocol. The applet sets the appropriate parameters on the connection object, sends the string, and reads and prints out the response. <a name="rl2"><a href="9806l.htm#l2">Listing Two</A> (ClientExample.html) calls the applet from within an HTML document. </p>

<p><b>Proxying Service.</b> One of the security features of the Java environment is that downloaded applets can only communicate back to the machine from which they were downloaded. This makes it impossible for a Java client to communicate directly to any server sitting anywhere outside of the web server. A proxying service must be created to intercept the data on the web server and forward it onto a predefined server, facilitating the communications between the client and the server. This service is responsible for:</p>

<ul>
  <li>Receiving the request data from the client over the HTTPS protocol.
  <li>Passing the data onto a predefined server address using a standard socket connection.
  <li>Waiting for the server to respond to the request.
  <li>Receiving the data from the server over the socket connection.
  <li>Passing the data back to the client over the HTTPS protocol.
</ul>

<p>The proxy service can be implemented utilizing any native web server plug-in facility such as CGI, NSAPI on Netscape Servers, ISAPI on Microsoft IIS, or the Java Servlet API. This implementation uses a Java Servlet installed on the web server. <a name="rf1"><a href="9806lf1.htm">Figure 1</A> shows how the Client/ProxyServlet/Server interact. The client POSTs the data to the <i>ProxyServlet</i> URL (https://Servlets/ProxyServlet) and waits for a response. The web server is configured to pass this data into the Java ProxyServlet for processing. The ProxyServlet URL decodes the posted data, creates a socket connection through a firewall to the Application Server, transmits the data over the socket, and waits for a response. The firewall is configured to allow communication only between the web server and the Application Server to secure the data behind the firewall. The Application Server receives the request data, processes the request, and sends the response data back to the ProxyServlet. The ProxyServlet receives the response data and returns it as a response to the POST. The Java Client Applet receives the response to the URL request and processes the response.</p>

<p>ProxyServlet.java and ServerConnection.java (available electronically; see "Resource Center," page 3) implement the Java ProxyServlet. This implementation will create a new connection to the Application Server for each client request. The Servlet.properties file (see <a name="rl3"><a href="9806l.htm#l3">Listing Three</A>) contains parameters for <i>serverPort</i> and <i>serverAddress</i>. These parameters configure the destination TCP/IP address of the application server. An enhancement to this architecture would be to add a connection manager that would maintain a pool of connections to the application server. This enhancement would remove the overhead of creating a new connection to the Application Server for each request that is processed, thus improving performance.</p>

<p><b>Application Server.</b> The Application Server is a standard TCP/IP server implementation. The Application Server listens on a defined port, receives the request data over the socket, processes the request and creates response data, then passes this data back over the socket. This is a common architecture, and examples can be easily found that are implemented in Java or C++.</p>

<h3>Issues </h3>

<p>This solution is not 100 percent pure Java because of its reliance on the browser's implementation of the HTTPS protocol. Since all of major browsers support the secure protocol, this is not a serious issue.</p>

<p>Current limitations in Microsoft's Internet Explorer 4.0x cause problems when a Java applet uses URL Connections. This problem can be alleviated by disabling the HTTP 1.1 option on either the browser or the web server. (This issue may already be resolved by the time you read this.)</p>

<h3>Conclusion</h3>

<p>While using the socket classes provided by Java for communications can be simple, when introducing real-world issues, such as security and firewalls, their usability can fall short. HTTPS tunneling provides SSL security and consideration for firewalls. When contrasted with a Java implementation of SSL, tunneling over HTTPS decreases your code size and provides significant performance improvement.</p>


<p><b>DDJ</b></p>


<H4><a name="l1">Listing One</H4>

<pre>/* ClientExample.java -- @version 1.0 * @author American Management Systems
 * Opens a connection to the specified URL using the HTTPS protocol
 * sends data that is passed as a parameter then reads the server response
 */
<p></p>
import java.applet.*;
import java.net.*;
import java.io.*;
<p></p>
public class ClientExample extends Applet {
<p></p>
   //The instance of the url connection
   private URLConnection urlConnection;
<p></p>
   /** Starts the applet this is called every time the page is reloaded */
   public void start() {
      System.out.println("ClientExample sends data to a 
                                               server using HTTPS POST");
      String data = getParameter("Data");
<p></p>
      send(data);
      read();
   }
   /** This is called to send the data over a new URL */
   public void send(String data) {
      try {
         System.out.println("Data: " + data);
<p></p>
         //URL encode the data to the x-www-form-urlencoded MIME format
         String urlEncodedData = URLEncoder.encode(data);
         System.out.println("URL Encoded Data: " + urlEncodedData);
<p></p>
         //Instance the URL (protocol, host, port)
         String protocol = getCodeBase().getProtocol();
         int  port = getCodeBase().getPort();
         String host = getCodeBase().getHost();
         URL url = new URL(protocol, host, port, "/servlet/ProxyServlet");
         System.out.println("Destination URL: " + url.toString());
<p></p>
         //Open the connection
         urlConnection = url.openConnection();
<p></p>
         //Turn off the caching feature
         urlConnection.setUseCaches(false);
<p></p>
         //Set the URL to POST instead of GET
         urlConnection.setDoOutput(true);
<p></p>
         //Set necessary properties
         urlConnection.setRequestProperty("content-type", 
                                    "application/x-www-form-urlencoded");
         urlConnection.setRequestProperty("content-length", 
                                String.valueOf(urlEncodedData.length()));
<p></p>
         //Get the output stream and send the data
         PrintStream outStream = 
                         new PrintStream(urlConnection.getOutputStream());
         outStream.println(urlEncodedData);
         outStream.close();
         System.out.println("Data sent successfully");
      }
         catch(Exception e) {
            System.out.println("URL Connection error: " + e.toString());
         }
    }
<p></p>
   /** This is called to read the response from the server */
   public void read() {
      try {
         //Get the input stream from the connection object
         DataInputStream in = 
                     new DataInputStream(new 
                     BufferedInputStream(urlConnection.getInputStream()));
         //Read a line of data
         String response = in.readLine();
         System.out.println("Server response: " + response);
      }
         catch(IOException e) {
           System.out.println("Error reading from input stream " 
                                                           + e.toString());
         }
   }
}
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>&lt;html&gt;&lt;head&gt;
&lt;title&gt;ClientExample&lt;/title&gt;
&lt;/head&gt;
<p></p>
&lt;body&gt;
Check to the java console for output
&lt;hr&gt;
<p></p>
&lt;applet code=ClientExample.class width=40 height=40&gt;
&lt;param name=Data value=ClientExample data&gt;
&lt;/applet&gt;
<p></p>
&lt;hr&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>servlet.ProxyServlet.code=ProxyServletservlet.ProxyServlet.initArgs=serverPort=4321,serverAddress=127.0.0.1
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
