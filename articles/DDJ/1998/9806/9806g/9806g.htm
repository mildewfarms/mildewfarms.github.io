<html>
<META NAME="year" CONTENT="1998">
<head>
<title>CGI Programming & Visual Basic</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>CGI Programming &amp; Visual Basic</h1>

<p><i>Dr. Dobb's Journal</i> June 1998
</p>
<h2>Simplifying CGI development</h2>

<h3>By Ofer LaOr</h3>

<I>Ofer is technical director of Quality-By-Vision, and author of CGI Programming with Visual Basic 5 (McGraw-Hill, 1997). He can be reached at olaor@netvision.net.il.</I>

<hr>

<p>The oCGI2 library I present here makes Visual Basic (VB) a viable CGI application-development tool. Although Visual Basic is not portable to platforms other than Win32, applications written using oCGI2 are portable across web servers available for Windows 95/NT (OmniHTTPd, IIS, PWS, and the like). In this article, I'll describe the oCGI2 library (available electronically; see "Resource Center," page 3), discuss some of its interesting features, and present sample applications that utilize it.</p>

<p>My original goal in writing the oCGI2 library was to provide Visual Basic applications with access to the STDIN/STDOUT streams. Visual Basic already has access to the other facilities required by CGI applications (the command line and environment variables). oCGI2 also has facilities for handling most CGI-related tasks such as decoding the parameter string.</p>

<p>The server sends the CGI parameter string in three ways:</p>

<ul>
<li>Via the command line (ISINDEX).  <li>Via the environment string (GET or PUT).
  <li>Via the STDIN stream (POST). 
</ul>

<p>oCGI2 processes all of these methods through the <i>ProcessCGI</i> function. The application calls <i>ProcessCGI</i> as a manual constructor, since you may want to modify some parameters between the oCGI2 instantiation and the actual constructor call (for example, you may want to inject a personalized parameter string).</p>

<p><i>ProcessCGI</i> calls <i>ReadCGI</i>, which returns the parameter string, then passes the string to <i>SetParams</i>, which parses the string and stores each name/value pair into a Visual Basic collection ("hashed" bag) called <i>cParameters</i>.</p>

<p>The <i>ReadCGI</i> function reads the QUERY_METHOD environment string to determine the method in which the server is passing the parameters to the CGI application. In the case of an ISINDEX submission (or when debugging), the application reads the parameter string from the application's command-line parameters. In the case of the PUT and GET methods, the function gets the parameter string from the QUERY_STRING environment variable.</p>

<p>Finally, if the stream is sent using the POST method, the application calls the <i>ReadPost</i> function. <i>ReadPost</i> (see <a name="rl1"><a href="9806g.htm#l1">Listing One</A>) uses the <i>GetStdHandle</i> Win32 function to retrieve a valid file handle for the STDIN stream, then uses the <i>ReadFile</i> Win32 function to read the parameter string from STDIN.</p>

<p>The POST method does not impose a limit on the parameter string size. Both of the other techniques are often limited by the hosting operating-system constraints (that is, the maximum size of the environment area or the maximum size of a valid command-line string).</p>

<p>However, to read data from STDIN properly, Visual Basic must preallocate a string to be used for the <i>ReadFile</i> function. The oCGI2 class exports a variable (<i>MaxPost</i>) that can be used to modify the maximum size of the parameter string being passed to the application (the default is 10,000 characters). You must modify <i>MaxPost</i> before calling <i>ProcessCGI</i> if your application will have potentially large parameter strings.</p>

<p>For example, a simple shopping cart application could easily produce an HTML form with 300 items, each of which could have four HTML controls attached to it (some could be hidden controls). If each of these controls has a name of more than eight characters, you're already past the 10,000-character limit! Such an application must modify the <i>MaxPost</i> variable prior to calling the <i>ProcessCGI</i> function.</p>

<h3>CGI Parameters</h3>

<p>The parameter string has a simple coding scheme and consists of a list of parameter names and their corresponding value <i>ParamName1=Value1&amp;ParamName2=Value2&amp;ParamNameN=ValueN</i>. The oCGI2 library stores these parameters in a Visual Basic collection.</p>

<p>A secondary class, called <i>ParamType</i>, contains each parameter's name and value. A new instance of the class is constructed for each new parameter. The parameter objects are inserted into the collection with the parameter name serving as the hash key for the parameter.</p>

<p>The application can call the <i>ReadParam</i> function to retrieve the value of a parameter, given that parameter's name. <i>ReadParam</i> uses the hash to find the appropriate parameter object. If it does not find it, a VB exception is raised, which is handled in <i>ReadParam</i> by returning an empty string (see <a name="rl2"><a href="9806g.htm#l2">Listing Two</A>).</p>

<p>Originally, the parameter class held only the value of the parameter. However, in many instances, an application may not know in advance the name of the parameter it will be using. For example, a shopping bag application could display a list of items. The quantity editbox for each item could have a name and value pair like <i>Quantity210197=1</i>. The numbers following the <i>Quantity</i> qualifier could very well indicate what the database key was for the item being purchased. In such instances, the programmer could find it useful to search through the list of parameters for qualifying names, as in <a name="rl3"><a href="9806g.htm#l3">Listing Three</A>. Also, some HTML controls, such as submission buttons and check boxes, only return a name and value pair if they are actually selected or used. In such cases, having the name stored in the <i>ParamType</i> object is necessary to determine whether a control was selected.</p>

<p><i>ProcessCGI</i> handles cookies in a similar manner. <i>ProcessCGI</i> calls the <i>SetCookies</i> function, which decodes the cookie string (passed to the application via the HTTP_COOKIE environment variable). <i>SetCookies</i> creates new <i>ParamType</i> objects and inserts them into the <i>cCookies</i> collection. Cookies can be retrieved by calling the <i>ReadCookie</i> function, which accesses the <i>cCookies</i> collection and retrieves the appropriate cookie value (if found). As with the <i>cParameters</i> collection, the <i>cCookies</i> collection is exposed and can be accessed directly.</p>

<h3>Sending Cookies and Other HTTP Headers</h3>

<p>oCGI2 provides a <i>WriteCGI</i> function for transferring information back to the web server, which subsequently transfers it to the browser that requested it. By default, the first <i>WriteCGI</i> call in an application sends the HTML MIME content type using the <i>StartCGI</i> function.  </p>

<p><a name="rl4"><a href="9806g.htm#l4">Listing Four</A> is a simple "Hello World" CGI application, and <a name="rl5"><a href="9806g.htm#l5">Listing Five</A> is a form-based application that uses <i>ProcessCGI</i> to receive an optional parameter from the originating HTML document and display it.</p>

<p>Launching the application in <a href="9806g.htm#l5">Listing Five</A> using the URL <i>http://localhost/cgi-bin/</i>Helloworld.exe?Name=Ofer+LaOr yields the HTML page in <a name="rf1"><a href="9806gf1.htm">Figure 1</A>.  </p>

<p>In most cases, the CGI program is returning HTML, so <i>WriteCGI</i> by default sends the HTML content type the first time it is called. However, <i>WriteCGI</i> has an optional parameter (<i>fSt</i>artCGI) that prevents the HTML content type from being sent at all.</p>

<p><i>fStartCGI</i> is used internally to send other HTTP headers, including cookies, since they need to be sent to the server before the content type. An application may also use this feature to send alternate content types (sounds, images, or complete files, for instance). For such cases, however, the application is responsible for sending out the appropriate content type.</p>

<p>Cookies are sent using the <i>WriteCookie</i> method, as in <a name="rl6"><a href="9806g.htm#l6">Listing Six</A>. Because <i>WriteCookie</i> uses <i>WriteCGI</i> with the optional <i>fS</i>tartCGI flag turned off, you must call <i>WriteCookie</i> before you call <i>WriteCGI</i> with <i>fSt</i>artCGI turned on for the first time. Otherwise, the cookie string is sent after the content type, and the browser will assume that this string is part of the HTML stream, not a valid cookie.</p>

<p>Cookies are sent by the browser to the server only if the server name (domain name) and script name (path name) are both valid. This prevents sites from ever seeing cookies created by other sites: Sites may only read their own cookies. Cookies can be removed by the application through specifying a cookie expiration date that has already passed. Not specifying an expiration date at all creates a cookie that is active for the current browser session only.</p>

<p>Sites are limited to 20 cookies, each with less than four KB of data. If your application (for example, a shopping cart) requires more than 20 items, this limit presents a problem.</p>

<p>Since the total limit on cookies is 80-KB per site, oCGI2 offers the facility to create virtual cookies, which store information using their own format on top of standard cookies. Virtual cookies, which are standard cookies with name such as _1, _2, and so on, allow you to overcome the four-KB-per-cookie limit and to have more than 20 cookies. The only restriction is that the total size of virtual cookies cannot surpass the total cookie limit imposed by the browser.</p>

<p>For example, two cookies can be compressed into one virtual cookie by creating the following virtual cookie string and committing it as a regular cookie: _1=CookieName1=CookieValue1&amp;CookieName2=CookieValue2. The actual cookie in this case is named _1 (the underscore denotes that this is a special cookie name). The contents of this cookie are <i>CookieName1=CookieValue1&amp;CookieName2=Coo</i>kieValue2. </p>

<p>The <i>ProcessVirtualCookies</i> function is used to process these virtual cookies. <i>ProcessVirtualCookies</i> retrieves the virtual cookies, creates a cookie string <i>sVirtualCookies</i>, parses the virtual cookie string, removes the virtual cookies from the cookie collection, and places the individual virtual cookies back into the cookie collection. You can then retrieve these virtual cookies using a regular <i>ReadCookie</i> call.</p>

<p>Since virtual cookies are converted into standard cookies by the <i>ProcessVirtualCookie</i> function, <i>ReadCookie</i> can read them without any special coding. The _1 cookie is removed from the normal cookie list so the application does not inadvertently recognize it as a valid cookie. If the _1 cookie runs out of space, the _2 cookie is employed.</p>

<p>All virtual cookies have an identical expiration date, which is passed as an optional parameter to <i>ProcessVirtualCookie</i>. If an application needs cookies with different expiration dates, you can use both standard cookies and virtual cookies.</p>

<p><i>WriteVirtualCookie</i> and <i>DeleteVirtualCookie</i> add and remove virtual cookies by modifying the virtual cookie string. This string is committed when the first standard <i>WriteCGI</i> call is made and <i>StartCGI</i> is initiated. The <i>StartCGI</i> function checks whether any virtual cookies have been modified. If so, it breaks up the virtual cookie string into individual standard cookies (namely _1, _2, and the like). Finally, if there were more cookies before than there are now (for instance, enough virtual cookies were removed from the virtual cookie string), the surplus cookies are simply removed.</p>

<h3>Interfacing with oCGI2</h3>

<p>An application may interface with the oCGI2 library using static linking, late binding, or early binding. Static linking means that each application has a local copy of the oCGI2 modules. This allows an application to be independent of everything other than the VB run-time libraries. However, the size of the application grows as a result, and any changes in oCGI2 requires recompiling each application that uses it.</p>

<p>The oCGI2 library provides a type library, a .tlb file that specifies to applications the identity of the library, where its functions reside, and the specification for each function (parameters, dispatch ID number, and so on). Type information is automatically generated by Visual Basic when the oCGI2 library is compiled. If oCGI2 is changed in such a manner that Visual Basic is forced to change this type information (for instance, a parameter in one of the functions is modified, or an existing function removed), Visual Basic will create a new type library.</p>

<p>Early binding means that the application binds to oCGI2's type library at compile time. However, if the type library information has been changed, you have to recompile the application. Late binding is slower, since it requires the application to resolve type information at run time. However, it does not need to be recompiled when the type library changes.</p>

<p>Typically, early binding is recommended since it gives you a speed advantage and prevents applications from breaking when you install newer, incompatible versions of the library.</p>

<h3>Registering ActiveX Components</h3>

<p>As with any Visual Basic application, the standard VB run-time DLLs (MSVBVM50.DLL, for instance) must already be installed on the target machine in order for the application to operate correctly. Once these are installed, users must register the oCGI2 library DLL before any application can create a new instance of an oCGI2 object. This is typically done by a setup routine or by using the REGSVR32 utility.</p>

<p>In some cases, direct access to the machine is problematic. Installing ActiveX components becomes a problem because no actual setup routine is in use, and there are no remote versions of REGSVR32.</p>

<p>For an application to register its own components (be its own setup program), you can use the technique in <a name="rl7"><a href="9806g.htm#l7">Listing Seven</A>. Using this technique, the application accesses the library's registration routine (in this case, created by Visual Basic) and performs the registration process itself rather than depending on a setup routine to do it. The oCGI2.DLL should be in the same directory as the actual application or in the Windows system directory.</p>

<p>The application can register the library by calling the library's <i>DLLRegisterServer</i> function before actually creating an instance of the oCGI2 object. This technique can be used by Visual Basic applications to register any OCX or ActiveX library, assuming that the machine has all of the necessary components (DLLs and maybe even other OCXes) required by the control.</p>

<h3>A CGI Application that Generates Images</h3>

<p><a name="rl8"><a href="9806g.htm#l8">Listing Eight</A> is a sample CGI application built using the oCGI2 library that sends an HTML page and a corresponding JPEG image. When called with no parameters, the application shows a "Hello World" HTML message and then references itself with the parameter <i>type=jpeg</i>. When it receives this parameter, the application displays the helloworld.jpg file. <a name="rf2"><a href="9806gf2.htm">Figure 2</A> is the application's output.</p>

<p>This type of application can be useful in displaying different images for different users. Another use is to provide a pay-per-use image facility that only shows the images users have paid for.</p>

<p>Banner servers use this technique to monitor in an intelligent manner the advertising banners that users have actually seen. The application can use cookies and retain the user's information across sessions. (Some browsers prevent this from occurring by simply banning cookies originating in non-HTML sources.) The site can then make sure that a banner that the user has already seen will not be viewed again. Alternatively, the site can simply use a randomize function and display one image from a host of possible banners.</p>

<p>The new HTTP 1.1 specification extends the ability to send non-HTML content by allowing CGI applications to create a mixed content output containing graphics, sounds, and HTML. This allows the application to send the entire content of a web page in one sweep, rather than requiring a request for each individual element as described earlier. (This is one reason why HTTP 1.1 is more efficient than HTTP 1.0.)</p>

<h3>Conclusion</h3>

<p>Writing CGI applications with Visual Basic is useful when a significant investment in Visual Basic has already been put into place or when VB's features are ideal for the task at hand. Visual Basic's strong capabilities in string processing and database access make it an ideal candidate as a CGI development tool. Additionally, the strong component support for Visual Basic allows an application developer to create applications that can easily integrate with any environment (credit-card systems, host systems, networking environments, and more). This makes VB a great tool for CGI application development.</p>

<p><b>DDJ</b></p>


<H4><a name="l1">Listing One</H4>

<pre>Private Function ReadPOST() As String    Static sText As String
    If (sText &lt;&gt; "") Then
        ReadPOST = sText
        Exit Function
    End If
    Dim lWritten As Long, lReserved As Long
    Dim hConsole As Long
    
    sText = Space(MaxPost)
    lReserved = 0
    If (hConsole = 0) Then
        hConsole = GetStdHandle(STD_INPUT_HANDLE)
    End If
    ReadFile hConsole, sText, Len(sText) - 1, lWritten, lReserved
    sText = Trim$(sText)
    sText = Left$(sText, Len(sText) - 1) ' kill \0
    ReadPOST = sText
End Function
<p></p>
<p></p>
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>Public Function ReadParam(sName As String) As StringOn Error GoTo EndReadParam ' parameter that hasn't shown
    ReadParam = ""
    ReadParam = cParameters(sName).Value
EndReadParam:
    Exit Function
End Function
<p></p>
<p></p>
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>For Each param in cgi.cParameters.If param.Name Like "Quantity######" then
        ... do something ...
    End If
Next
<p></p>
<p></p>
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>Option ExplicitSub main()
    Dim cgi As New oCGI2
    
    cgi.WriteCGI "&lt;HTML&gt;"
    cgi.WriteCGI "&lt;H1&gt; HELLO WORLD! &lt;/H1&gt;"
    cgi.WriteCGI "&lt;/HTML&gt;"
End Sub
<p></p>
<p></p>
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<H4><a name="l5">Listing Five</H4>

<pre>Option ExplicitSub main()
    Dim cgi As New oCGI2
    cgi.ProcessCGI Command
    
    Dim sHTML As String
    sHTML = "&lt;HTML&gt;"
    sHTML = sHTML + "&lt;H1&gt; HELLO " + cgi.ReadParam("Name")
    sHTML = sHTML + " WORLD! &lt;/H1&gt;"
    sHTML = sHTML + "&lt;/HTML&gt;"
    
    cgi.WriteCGI sHTML
End Sub
<p></p>
<p></p>
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>
<H4><a name="l6">Listing Six</H4>

<pre>Option ExplicitSub main()
    Dim cgi As oCGI2
    Set cgi = New oCGI2
    
    cgi.ProcessCGI Command
    cgi.WriteCookie "UserName", cgi.ReadParam("UserName"), _
        cgi.ReadServerName, cgi.ReadScriptName
        
    cgi.WriteCGI "&lt;HTML&gt;"
    cgi.WriteCGI "The cookie has been set! &lt;BR&gt;"
    cgi.WriteCGI "&lt;/HTML&gt;"
End Sub
<p></p>
<p></p>
</pre>
<P>
<a href="#rl6">Back to Article</A>
</P>
<H4><a name="l7">Listing Seven</H4>

<pre>Declare Function oCGI2Register Lib "oCGI2.dll" Alias _          "DllRegisterServer" () As Long
<p></p>
Sub Main()
    On Error GoTo NormalErr
    oCGI2Register
<p></p>
    Dim cgi As New oCGI2
    cgi.ProcessCGI Command
<p></p>
  ... REST OF APPLICATION HERE ...
<p></p>
    End
NormalErr:
    Beep
    End
End Sub
<p></p>
<p></p>
</pre>
<P>
<a href="#rl7">Back to Article</A>
</P>
<H4><a name="l8">Listing Eight</H4>

<pre>Option ExplicitDeclare Function oCGI2Register Lib "oCGI2.dll" Alias _
      "DllRegisterServer" () As Long
Dim cgi As New oCGI2
Sub HelloWorld()
  Select Case (cgi.ReadParam("type"))
    Case "jpeg"
       Open App.Path + "\helloworld.jpg" For Binary Access Read As #1
       PipeMIME "image/jpeg", 1
       Close #1
    Case ""
        cgi.WriteCGI "&lt;HTML&gt;&lt;HEAD&gt;"
        cgi.WriteCGI "&lt;TITLE&gt;Hello World &lt;/TITLE&gt;&lt;/HEAD&gt;"
        cgi.WriteCGI "&lt;BODY BGCOLOR=#aabbcc&gt;&lt;CENTER&gt;"
        cgi.WriteCGI "&lt;H1&gt;Hello World!&lt;/H1&gt;"
        cgi.WriteCGI "&lt;IMG SRC=""" + cgi.ReadScriptName
        cgi.WriteCGI "?type=jpeg""&gt;"
        cgi.WriteCGI "&lt;/CENTER&gt;&lt;/BODY&gt;&lt;/HTML&gt;"
  End Select
End Sub
<p></p>
Sub PipeMIME(sMime As String, iFile As Integer)
    cgi.WriteCGI "Content-type: " + sMime, False
    cgi.WriteCGI vbCrLf, False
    cgi.WriteCGI vbCrLf, False
    Dim sOut As String
    On Error GoTo FILEEOF
    Do While Not EOF(1)
        sOut = Input(1, iFile)
        cgi.WriteCGI sOut, False
    Loop
FILEEOF:
    Exit Sub
End Sub
<p></p>
Sub Main()
    On Error GoTo NormalErr
<p></p>
    cgi.ProcessCGI Command
    HelloWorld
    End
NormalErr:
    Beep
    oCGI2Register
    End
End Sub
<p></p>
</pre>
<P>
<a href="#rl8">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
