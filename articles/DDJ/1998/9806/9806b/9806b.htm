<html>
<META NAME="year" CONTENT="1998">
<head>
<title>The Visitor Pattern and a Java Grep Utility</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>The Visitor Pattern and a Java Grep Utility </h1>

<p><i>Dr. Dobb's Journal</i> June 1998
</p>
<h2>Patterns for pattern matching</h2>

<h3>By W. David Pitt</h3>

<I>David is a developer for CrossLogic Corp. He can be contacted at dpitt@crosslogic.com.</I>

<hr>

<p>Patterns are solutions to problems you consistently encounter during software development. All phases of software development have patterns -- version control, documentation, debugging, performance tuning, testing, and (of course) code production. </p>

<p>The Visitor pattern is a behavioral pattern that enables an enumeration of objects (visitors) to implement operations performed on a subject-object structure, without the subject-object structure having to retain knowledge of a visiting object (<a name="rf1"><a href="9806bf1.htm">Figure 1</A>). New operations can be implemented simply by allowing subjects to accept concrete visitor objects. Visitor behavior is exercised with a polymorphic message, passing the subject as an argument (an approach known as "double dispatching"). Subject-object structures are unaffected by adding new operations. However, changes to the subject-object structure do affect the visitor hierarchy.</p>

<p>How does the subject-object structure implement and invoke visitor objects? Visitor objects obtain a reference to the subject object they are "visiting," thus subject-object structure is made available. Visitor objects are free to implement designed operations using the subject-object structure.  </p>

<p>When should the Visitor pattern be applied? This pattern is useful when an object structure is static and does not change, but an implementation requires new or different operations to be defined. Of course, there is a drawback. Changes to an object structure must be reflected in the visitor classes affected by the change. Thick visitor hierarchies could present a maintenance burden. Therefore, stable object structures are better suited to the pattern. </p>

<h3>Java Grep</h3>

<p>One application of the Visitor pattern involves the familiar grep utility, which searches for a string pattern in a file. Implementing the utility in Java is straightforward. You open a file, read each line, check for a pattern match, and output if a match occurs. At first glance, you might consider defining a single class that implements all this functionality. A more object-oriented design, however, promotes code reuse.</p>

<p>A <i>Grep</i> class (available electronically; see "Resource Center," page 3) is defined as the primary class that uses a file processor to read a file. It also uses a pattern-matching class, defined in a <i>GrepVisitor</i> hierarchy. Partitioning behavior in this way allows the file-processor class to be used by other classes. The significance of the visitor class abstraction allows different pattern-matching operations to be defined independent of the grep and file-processing classes; see <a name="rf2"><a href="9806bf2.htm">Figure 2</A>.</p>

<h3>The<i> Grep</i> Class</h3>

<p>The <i>Grep</i> class defines the behavior necessary to obtain a file or directory and a pattern to match. It then scans a file for lines matching the pattern. </p>

<p>Reading a file line by line is performed by the <i>FileProcessor</i> class. An instance of this object is assigned to the <i>fileProcessor</i> variable. The ability to grep one or many files at once results in an instance variable used to store paths typed as a <i>Vector</i>. Since pattern-matching behavior is partitioned to another class, the pattern needs to be available during the lifetime of a <i>Grep</i> instance. Therefore, it will be assigned to an instance variable named <i>pattern</i>. Likewise, each line read by the file-processor object needs to be available for pattern matching and, thus, is stored in an instance variable named <i>buffer</i>. For convenience, a constructor is implemented that takes a file or directory path and a pattern string to match.</p>

<p>Pattern matching occurs when a <i>process()</i> message is sent to the <i>Grep</i> instance. The <i>process()</i> method iterates over defined file paths, requesting one line at a time from a file. Each line is temporarily stored in the <i>buffer</i> instance variable. Once a line is obtained, the current pattern-matching visitor object is sent the <i>visit()</i> method with the current <i>Grep</i> object as an argument.</p>

<p>Lines matching a pattern are displayed (with line numbers) to the console. A method is defined that outputs the current line number and buffer to the console. </p>

<p>FileProcessor objects are assigned in the class definition template. <i>Visitor</i> objects are assigned to the <i>Grep</i> objects by defining an <i>acceptVisitor</i> method that takes an argument of type <i>GrepVisitor</i>; see <a name="rl1"><a href="9806b.htm#l1">Listing One</A> </p>

<h3>File Processor</h3>

<p>The behavior required to read a file line by line is defined in the <i>FileProcessor</i> class. Partitioning this behavior in a separate class enables reuse. (For that matter, a URL processor could be introduced with minimal impact on the <i>Grep</i> class.)</p>

<p>Processing a file is accomplished using the <i>ReadInputStream</i> class defined in the Java.io package. An instance variable is defined for a file name, which is then passed in as an argument of the <i>FileProcessor()</i> constructor. </p>

<p><i>FileProcessor</i> objects define the method <i>read()</i>, which reads a line of a file returned as a <i>String</i>. Returning a Null indicates End of File. This allows the <i>Grep</i> object to iterate over a file.</p>

<h3>A Pattern-Matching Visitor</h3>

<p>Pattern-matching operations are defined and enumerated in a <i>GrepVistor</i> hierarchy. An abstract class <i>GrepVisitor</i> is defined that implements a subject instance variable along with abstract methods <i>match()</i> and <i>report()</i>. An inherited method <i>visit()</i> exercises these methods, which are implemented by concrete classes. The <i>visit()</i> method takes a <i>Subject</i> object that will be visited as an argument. </p>

<p>Class <i>GrepSimplePatternVisitor</i> (see <a name="rl2"><a href="9806b.htm#l2">Listing Two</A>) extends this class and implements concrete <i>match()</i> and <i>report()</i> methods. The visitor object checks to see if a pattern is found in the current line of the text file being processed; if so, it is reported. </p>

<p>Why is this significant? Why not just define this behavior as a method in the grep utility? Suppose the <i>Grep</i> class is defined with a method that performs visitor-object pattern matching. You are then given another requirement -- to traverse and grep URLs. Well, the current grep utility is outfitted to iterate over file paths using a file-processor object. URLs eventually result in text-based Internet standard documents (HTML), so pattern matching can be reused by creating a URL grep and accepting a visitor object. The alternative is to cut and paste. </p>

<p>The Visitor pattern can be further illustrated by creating concrete visitor classes that pattern match a line of text for Java message signatures being sent or defined. Different pattern-matching visitor objects can be created and accepted by the utility by defining an instance variable that indicates the type of visitor to create. </p>

<p>Of course, another behavioral design pattern, the State pattern, could be used if the number of visitors required an ugly case statement. However, that's beyond the scope of this article.</p>

<p>The <i>Grep</i> class defines a static <i>main</i> method allowing the utility to be used from a command line. A <i>Grep</i> object is created using command-line arguments and a <i>GrepSimplePatternVisitor</i> object is created and accepted by the <i>Grep</i> object. Then the <i>Grep</i> object is sent the <i>process()</i> method. Results are output to the console; see <a name="rl3"><a href="9806b.htm#l3">Listing Three</A>.</p>

<p><b>DDJ</b></p>


<H4><a name="l1">Listing One</H4>

<pre>public void acceptVisitor( GrepVisitor aVisitor)
        Visitor = aVisitor;
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>/** Return true if current line contains pattern *  @return boolean
 */
public boolean match() {
        String aLine = subject.processor.currentLine;
         if (aLine.toUpperCase().indexOf( subject.pattern.toUpperCase() ) 
                                                        &gt; 0){ return true; }
     return false;
}
/** Output file, linenumber and line to console. */
public void report() {
     String printString;
     printString = subject.currentFileName+"("+subject.lineNumber+") - 
                                         "+subject.processor.currentLine;
     System.out.println(printString);
     return;
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>/** Invoke Utility from command line *  @param args java.lang.String[]
 */
public static void main(String args[]) {
    if (args.length &lt; 2) 
        { System.out.println("Usage: java Grep &lt;file path&gt;, &lt;pattern&gt;");
            return ;}   
    Grep aGrep = new Grep();
    aGrep.filePath = args[0];
    aGrep.pattern = args[1];
    // Create and accept a Visitor
    aGrep.acceptVisitor( new GrepSimplePattern() );
    aGrep.process();
    return;
}
<p></p>
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
