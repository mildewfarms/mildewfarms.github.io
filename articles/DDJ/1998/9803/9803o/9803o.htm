<html>
<META NAME="year" CONTENT="1998">
<head>
<title>Dr. Dobb's Journal March 1998: Algorithm Alley</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Exponential Smoothing</h1>

<p><i>Dr. Dobb's Journal</i> March 1998
</p>
<h3>By William Stallings</h3>

<I>William is the author of High-Speed Networks: TCP/IP and ATM Design Principles (Prentice Hall, 1998). He can be reached at http://www.shore.net/~ws/ or ws@shore.net.</I>

<hr>

<p>Whenever your software interfaces with hardware or other software, it's hard to know what to expect. How much memory will be required? How long will it take? The most robust systems measure past performance, then use that to predict future response. In this way, your software can smoothly adapt to varying situations.</p>

<p>In "Improving Kermit Performance" (<i>DDJ</i>, February 1996; available electronically, see "Resource Center," page 3), I used a "decaying average" to predict future delays, then used those predictions to optimize error handling. This month, William explores this technique -- also known as "exponential smoothing" -- in more detail and explains a variety of uses.</p>

<p> -- Tim Kientzle</p>

<p>You often need to guess the next value in a time series based on previous values in the time series. For example, the nonpreemptive scheduling policy known as "shortest process next" (SPN) selects the process with the shortest expected processing time (before it is blocked by an I/O or system call) to run next. For this purpose, the operating system keeps a running average of all of the previous processing bursts for each process, and uses these averages to estimate the next bursts. Running averages for estimating future values also show up in many areas of communications protocol design.</p>

<h3>Smoothing Techniques</h3>

<p>Suppose you have a series of measured values V(1), V(2), V(3),..., where V(<i>i</i>) is the value observed at the <i>i</i>th observation. Assume you want to predict (estimate) the value V(<i>K</i>+1) based on the value up through V(<i>K</i>). One approach would be simply to take the average of observed values, as in <a name="rf1"><a href="9803of1.htm">Figure 1</A>(a), where AV<i>(K</i>) is the average of the first <i>K </i>values. The estimate for the next value in the series, V<i>(K</i>+1), is equal to AV<i>(K</i>). </p>

<p><a href="9803of1.htm">Figure 1</A>(b) shows the expression reformulated so that it is not necessary to recalculate the entire summation each time.</p>

<p>Each term in the summation is given equal weight; that is, each term is multiplied by the same constant 1/<i>K</i>. Typically, you would like to give greater weight to more recent instances because they are more likely to reflect future behavior. A common technique for predicting the next value on the basis of a series of past values is known as "exponential averaging," or "exponential smoothing." <a name="rf2"><a href="9803of2.htm">Figure 2</A>(a) shows how you compute SV<i>(K</i>), the "smoothed estimate." </p>

<p>Compare <a href="9803of2.htm">Figure 2</A>(a) with <a href="9803of1.htm">Figure 1</A>(b). By using a constant value of <img src="alpha14.gif" alt="[alpha]" width="7" height="6">(0&lt;<img src="alpha14.gif" alt="[alpha]" width="7" height="6">&lt;1), independent of the number of past observations, you have a circumstance in which all past values are considered, but more distant ones have less weight. To see this more clearly, consider <a href="9803of2.htm">Figure 2</A>(b). Since both <img src="alpha14.gif" alt="[alpha]" width="7" height="6"> and (1-<img src="alpha14.gif" alt="[alpha]" width="7" height="6">) are less than 1, each successive term in the preceding equation is smaller. For example, for a=0.8, the expansion is <a href="9803of2.htm">Figure 2</A>(c). The older the observation, the less it is counted in the average.</p>

<p><a name="rf3"><a href="9803of3.htm">Figure 3</A> shows the size of the coefficient as a function of its position in the expansion. The smaller the value of <img src="alpha14.gif" alt="[alpha]" width="7" height="6">, the greater the weight given to the more-recent observations. For a=0.5, virtually all of the weight is given to the four or five most recent observations, whereas for <img src="alpha14.gif" alt="[alpha]" width="7" height="6">=0.875, the averaging is effectively spread out over the ten or so most recent observations. The advantage of using a small value of <img src="alpha14.gif" alt="[alpha]" width="7" height="6"> is that the estimate will quickly reflect a rapid change in the observed quantity. The disadvantage is that brief surges in the value of the observed quantity will result in jerky changes in the smoothed average.</p>

<p><a name="rf4"><a href="9803of4.htm">Figure 4</A> compares simple averaging with exponential averaging (for two different values of <img src="alpha14.gif" alt="[alpha]" width="7" height="6">). In <a href="9803of4.htm">Figure 4</A>(a), the observed value begins at 1, grows gradually to a value of 10, and then stays there. In <a href="9803of4.htm">Figure 4</A>(b), the observed value begins at 20, declines gradually to 10, and then stays there. In both cases, you start out with an estimate of SV(1)=0. Exponential averaging tracks changes in process behavior faster than does simple averaging and the smaller value of a results in a more rapid reaction to the change in the observed value.</p>

<h3>TCP Retransmission Timer</h3>

<p>In the Transmission Control Protocol (TCP), two TCP entities exchange segments over a TCP connection. Each side retains a copy of each segment that it sends and, if an acknowledgment is not received within a retransmission timeout (RTO) interval, resends the segment. Thus, if a segment is lost in transit, it will automatically be resent. If RTO is set too small, then a TCP entity may retransmit a segment for which an acknowledgment is on its way but delayed because of network congestion; such unnecessary retransmissions actually worsen the congestion. On the other hand, if RTO is too large, the protocol will be sluggish in responding to a lost segment.</p>

<p>Initially, TCP used a smoothed average to estimate the round-trip time. However, this didn't work well if the round-trip time varied significantly. To cope with this, Van Jacobson proposed a refinement in the standard algorithm that has now been officially adopted for TCP. <a name="rf5"><a href="9803of5.htm">Figure 5</A> summarizes this algorithm.</p>

<p>The Van Jacobson algorithm provides an improvement by estimating both the round-trip time (RTT) and the standard deviation of the RTT. The RTO value is then set to the estimated value of RTT plus a constant multiplied by the estimated standard deviation. This enables the use of more reasonable values of the retransmission timer. Standard implementations of TCP use the parameters <i>g</i>=1/8=0.125, <i>h</i>=1/4=0.25, and <i>f</i>=4. Experience has shown that Van Jacobson's algorithm can significantly improve TCP performance.</p>

<h3>ATM ABR Service</h3>

<p>Support for bursty data traffic on ATM networks, such as traffic generated by TCP/IP-based applications, has traditionally been carried on the so-called Unspecified Bit Rate (UBR) service. UBR is designed to make use of available capacity on the ATM network not consumed by time-sensitive traffic such as voice and video. All of this unused capacity could be made available for the UBR service. This service is suitable for applications that can tolerate variable delays and some cell losses, which is typically true of TCP-based traffic. With UBR, cells are forwarded on a first-in-first-out (FIFO) basis using the capacity not consumed by other services; both delays and variable losses are possible. No initial commitment is made to a UBR source and no feedback concerning congestion is provided; this is referred to as a "best-effort service."</p>

<p>To improve the service provided to bursty sources that would otherwise use UBR, the Available Bit Rate (ABR) service has been defined. An application using ABR specifies a peak cell rate (PCR) that it will use and a minimum cell rate (MCR) that it requires. The network allocates resources so that all ABR applications receive at least their MCR capacity. Any unused capacity is then shared in a fair and controlled fashion among all ABR sources. The ABR mechanism uses explicit feedback to sources to assure that capacity is fairly allocated. Any capacity not used by ABR sources remains available for UBR traffic.</p>

<p>To determine how much capacity to allow to each connection, each ATM switch must monitor the traffic through itself. One of the techniques recommended by the ATM Forum for this purpose uses the equation MACR(<i>I</i>)=(1-<img src="alpha14.gif" alt="[alpha]" width="7" height="6">)&amp;times;MACR(<i>I</i>-1) +<img src="alpha14.gif" alt="[alpha]" width="7" height="6">&amp;times;CCR(<i>I</i>) for each virtual connection through the switch, where CCR is a measure of the current cell rate on a given connection, and MACR (mean allowed cell rate) is an estimate of the cell rate for the connection in the next sampling period. Typically, <img src="alpha14.gif" alt="[alpha]" width="7" height="6">=1/16, so that more weight is given to past values of CCR than to the current value. Based on the estimates for each connection, if a switch experiences congestion, it restricts the cell rate of the connections passing through it in a manner that is proportional to the estimated demand from each connection.</p>

<h3>Real-Time Transport Protocol (RTP)</h3>

<p>Real-time transport protocol (RTP) is designed to support both point-to-point and multicast real-time applications. RTP overcomes three deficiencies in TCP for real-time applications:</p>

<OL TYPE="1" START="1">
	<LI>TCP is a point-to-point protocol that sets up a connection between two end points. Therefore, it is not suitable for multicast distribution. 
	<LI>TCP includes mechanisms for retransmission of lost segments, which then arrive out of order. Such segments are not usable in most real-time applications.
	<LI>TCP contains no convenient mechanism for associating timing information with segments, which is another real-time requirement.
</OL>

<p>One key requirement for receivers of real-time traffic is to estimate the amount of delay variation, or jitter, experienced on a connection in order to determine buffering requirements. In essence, the receiver would like to pass incoming traffic through a delay buffer that will smooth out delay variability so that the received data has the same timing characteristics as the transmitted data. There is no simple way to measure this quantity at the receiver, but it is possible to estimate the average jitter in the following way. At a particular receiver, you define the following parameters for a given source:</p>

<ul>
<li>S(<i>I</i>) = Timestamp from RTP data packet <i>I</i>.  <li>R(<i>I</i>) = Time of arrival for RTP data packet <i>I</i>, expressed in RTP timestamp units. The receiver must use the same clock frequency (increment interval) as the source, but need not synchronize time values with the source.
  <li>	D(<i>I</i>) = The difference between the interarrival time at the receiver and the spacing between adjacent RTP data packets leaving the source. 
  <li>J(<i>I</i>) = Estimated average interarrival jitter up to the receipt of RTP data packet <i>I</i>.
</ul>

<p></p>

<p>The value of D(<i>I</i>) is calculated as D(<i>I</i>)=(R(<i>I</i>)-R(<i>I</i>-1))-(S(<i>I</i>)-S(<i>I-</i>1)). Thus, D(<i>I</i>) measures how much the spacing between arriving packets differs from the spacing between transmitted packets. In the absence of jitter, the spacings will be the same and D(<i>I</i>) will have a value of 0. The interarrival jitter J(<i>I</i>) is calculated continuously as each data packet <i>I</i> is received, according to the formula in <a name="rf6"><a href="9803of6.htm">Figure 6</A>. J(<i>I</i>) is calculated as an exponential average of observed values of D(<i>I</i>). Only a small weight is given to the most recent observation, so that temporary fluctuations do not invalidate the estimate. The estimated value of jitter is reported to other participants in the connection. The jitter measure may provide a warning of increasing congestion before it leads to packet loss.</p>

<h3>Internet Congestion Control</h3>

<p>When routers in a network<b> </b>become congested to the point of buffer saturation, it becomes necessary to discard incoming or buffered packets. It may be desirable for routers to begin to discard packets before total saturation occurs. In this way, TCP connections receive early warning of increased congestion as the result of a few lost packets. The TCP connections can then back off the volume that they generate to avoid more catastrophic congestion. The most important example of a proactive packet discard scheme is Random Early Detection (RED), introduced by Sally Floyd. RED has been implemented by a number of router vendors.</p>

<p>In essence, RED monitors the queue length for an output port on the router. Associated with each output buffer are two thresholds <i>THmax</i> and <i>THmin</i>. When the queue length is less than <i>THmin</i>, no discard occurs; when it is greater than <i>THmax</i>, any arriving packet is discarded. Between these two thresholds, an incoming packet has an increasing probability of being discarded as the queue length grows from the lower to the higher threshold. The use of two thresholds and a sliding probability scale affords the opportunity to fine-tune the algorithm, and experience has shown that it can be effective in anticipating congestion without wasteful discard.</p>

<p>However, rather than use the actual queue length for the calculation, RED uses a smoothed average queue length SQ(<i>K</i>)=(1-W)&amp;times;SQ(<i>K</i>-1)+W&amp;times;Q(<i>K</i>), where Q is the actual queue length, SQ is the smoothed average, and W is a weighting factor.</p>

<p>You might wonder why an average queue size is used when it would be simpler to use the actual queue size. The purpose of using an average queue size is to filter out transient congestion at the router. The weight W determines how rapidly SQ changes in response to changes in actual queue size. Floyd recommends a quite small value of 0.002. As a result, SQ lags considerably behind changes in actual queue size. The use of this small weight prevents the algorithm from reacting to short bursts of congestion.</p>

<h3>Summary</h3>

<p>Exponential averaging is used in a surprisingly wide variety of protocols and congestion-control algorithms. By varying the weighting factor used in the average, more or less weight can be given to recent observations compared to more distant ones. Anyone needing a simple technique for making estimates based on past observations should be aware of this versatile tool.</p>

<h3>References</h3>

<p>The algorithm used by TCP to adjust its retransmission timeout was described by Van Jacobson in "Congestion Avoidance and Control." <i>Proceedings, SIGCOMM '88, Computer Communication Review</i>, August 1988. The article was reprinted in <i>Computer Communication Review</i>, January 1995. A revised version is available at ftp.ee.lbl.gov/papers/congavoid.ps.Z.</p>

<p>The RED technique was described by Sally Floyd and Van Jacobson in "Random Early Detection Gateways for Congestion Avoidance," <i>IEEE/ACM Transactions on Networking</i>, August 1993.</p>

<p><b>DDJ</b></p>

<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
