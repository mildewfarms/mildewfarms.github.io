<html>
<META NAME="year" CONTENT="1998">
<head>
<title>Dr. Dobb's Journal March 1998: Visual Basic 5 Profiling</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Visual Basic 5 Profiling</h1>
</h1>
<p><i>Dr. Dobb's Journal</i> March 1998 </p>

<HR>
<p>The most-recent versions of TracePoint's HiProf and Rational's Visual Quantify incorporate support for Visual Basic 5 applications. They both rely on the fact that Visual Basic 5 is able to create native-code executables with optional debug information in the same PDB format that Microsoft Visual C++ uses. Therefore, profiling natively compiled Visual Basic applications is remarkably similar to profiling C/C++ applications: You create the executable with debug information, start the profiler, let it instrument the application, then run the application under control of the profiler.</p>

<p>I have performed only limited testing of Visual Basic application profiling, but even so, I've found differences between HiProf and Visual Quantify beyond those uncovered earlier. Overall, HiProf proved better adapted to Visual Basic: It showed both the names of the user-defined functions and of the <i>__vbaXxx</i> run-time support functions, while Visual Quantify denoted the latter support functions as ever so many <i>UnnamedTimedProcedure</i>s at different addresses. Furthermore, although both profilers caused a noticeable slowdown in the program under test (measured by wall-clock time), the slowdown was greatest with Visual Quantify. In the most extreme case, a test routine that took 7.2s to execute stand-alone, took 75.8s with HiProf, and 305.7s with Visual Quantify. It is important to note that I used Beta versions of both profilers, so things might improve in the final release versions.</p>

<p>--R.v.d.W.</p>
<P>
<a href="9803j.htm#rs1">Back to Article</A>
</P>
<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
