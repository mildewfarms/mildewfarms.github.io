<html>
<META NAME="year" CONTENT="1998">
<head>
<title>Dr. Dobb's Journal February 1998: Template Processing Classes for Python</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Template Processing Classes for Python</h1>

<p><i>Dr. Dobb's Journal</i> February 1998
</p>
<h2>Embedding Python objects in HTML pages</h2>

<h3>By Brad Howes</h3>



<hr>
Sidebar:<a name="rs1"></A> <a href="9802cs1.htm"><I>What's New in Python 1.5?</I></A><BR>
Sidebar:<a name="rs2"></A> <a href="9802cs2.htm"><I>About Python</I></A>
<HR>

<p>Recently, I was prototyping a CGI infrastructure in Python to investigate possible implementation strategies for a production system. I had achieved a multithreaded, fast CGI service with persistent objects, but the HTML text was embedded inside the Python code, represented as <i>print</i> statements. This was cumbersome and failed to adhere to the object paradigm present elsewhere in the Python code (see <a name="rl1"><a href="9802c.htm#l1">Listing One</A>.) Also, when editing, I had to contend with two syntaxes at the same time -- Python and HTML -- and I was constantly introducing errors in the latter with nearly every change. Furthermore, I was unable to easily use Emacs' wonderful HTML editing mode, with its complement of template HTML constructs and syntax coloring -- reason enough to look for an alternative.</p>

<p>At the most primitive level, I needed to insert run-time values into specific, tagged locations in a block of text. However, since I was working with rows of data from an object database, I wanted conditional and iterative control over regions of text; the former would include a block of text only if a condition was True, while the latter would map a set of values onto a text block, substituting different values for the tagged locations with each iteration. I had tried the HTML classes available for Python, but they focused on run-time HTML generation. I wanted, instead, to create a template of an HTML document, and at run time, substitute the placeholders in the template with run-time values.</p>

<p>The solution I developed is called "BoilerPlate." <a name="rl2"><a href="9802c.htm#l2">Listing Two</A> is a sample BoilerPlate template that contains examples of the three properties just described. The <i>%()...</i> constructs represent placeholders for run-time values. Conditional inclusion is represented by <i>#if#</i> and <i>#else#</i> tags, and the <i>#for#</i> tag starts a region of text iterated over with a run-time set of values. Compared to <a href="9802c.htm#l1">Listing One</A>, the HTML structure is predominant, and the BoilerPlate # tags clearly stand out. Unfortunately, the placeholder tag <i>%()...</i> does not. This is Python's string formatting descriptor, similar to that found in the C Standard Library <i>printf</i> family. I kept the Python syntax over a custom tag to keep the BoilerPlate implementation simple. As you will see, its power more than makes up for its orphaned appearance.</p>

<p>The complete BoilerPlate source is available electronically (see "Resource Center," page 3). This includes two source files and a patch file for Python 1.4. BoilerPlate.py contains the classes described in this article. The file Sink.py contains the definition of the <i>Sink</i> class, a utility class used by BoilerPlate to collect formatted output. It is a bit faster than standard Python string concatenation using the "+" operator.</p>

<p>Although I predominantly use BoilerPlate for HTML documents, it has no ties to the HTML language. It can be used to process files of any content -- including Python code and, with some care, binary files.</p>

<h3>BoilerPlate Processing Model</h3>

<p>Processing within the BoilerPlate classes occurs in three stages. These stages work with three conceptual data types which roughly correspond to specific BoilerPlate classes; <a name="rt1"><a href="9802ct1.htm">Table 1</A> presents the class hierarchy. The data types in the processing model are:</p>

<ul>
<li><i>template</i>, text with embedded BoilerPlate tags. Represented in the code as native Python strings.  <li><i>text block</i>, a range of text taken from a template. Represented by the <i>RawText</i> and <i>Block</i> classes.
  <li><i>format dictionary</i>, a mapping of BoilerPlate tag names to values. Represented by the <i>Formatter</i> class.
</ul>

<p></p>

<p>These data types are used in the following processing stages:</p>

<ul>
<li><i>fragmentation</i>, which takes a template and breaks it up into one or more text blocks based on the BoilerPlate tags encountered.  <li><i>value acquisition</i>, which generates a mapping or dictionary of BoilerPlate tag names and their run-time value.
  <li><i>formatting</i>, which creates a Python string by applying the current format dictionary to the text blocks of the template document.
</ul>

<p></p>

<p>The fragmentation stage normally occurs only once for each template object. The BoilerPlate classes save the resulting text blocks for later processing in the formatting stage. The other phases can occur at any time, to place new values in the active format dictionary or to format output. The <i>BoilerPlate</i> base class also remembers the result of the last formatting stage. However, any changes to the the active format dictionary will clear this cached value so that <i>BoilerPlate</i> instances always emit up-to-date information.</p>

<h3>Fragmentation Stage</h3>

<p>The BoilerPlate base class <i>Block</i> performs the bulk of the processing of template objects during the fragmentation stage. It looks for special tags that denote regions of text in the template. All tags begin and end with the "#" character. I chose this character because it is Python's comment character, and would least likely be found in the expressions allowed in BoilerPlate constructs. A BoilerPlate text block begins with a tag that follows the format <i>#&lt;kind&gt;&lt;data&gt;#</i>, where <i>&lt;kind&gt;</i> represents the block type, and <i>&lt;data&gt;</i> contains whatever information is required by the tag to process the block. A block ends with a corresponding tag formatted as <i>#end&lt;kind&gt;</i> (an optional space between the <i>end </i>and <i>&lt;kind&gt;</i> value is allowed). The <i>&lt;kind&gt;</i> values of the start and end tags must match.</p>

<p>Also recognized, though not actually a block, is the sequence <i>#char#</i> which will leave a single "#" in the formatted text. You would use this in the unlikely event that there is a conflict between a BoilerPlate tag and unformatted template text. <a name="rt2"><a href="9802ct2.htm">Table 2</A> presents a list of legal BoilerPlate tags.</p>

<p>BoilerPlate supports nested text blocks. The template in <a href="9802c.htm#l2">Listing Two</A> has a <i>for</i> block nested inside an <i>else</i> block. Apart from memory constraints, there is no limit to how deep you can nest.</p>

<p>Normally, all text between matching tags is owned by the <i>Block </i>instance indicated by the start tag. This includes any spaces and line-terminating characters that may appear after the block's start tag or immediately before the block's end tag. For some applications, such behavior may result in excessive whitespace when a BoilerPlate instance emits its output. To overcome this, the BoilerPlate <i>Block</i> class hierarchy supports a parsing mode called <i>lineMode, </i>which trims the first and last characters of the text owned by a <i>Block </i>instance if the characters are either a space or a line terminator. Entering <i>lineMode</i> is accomplished by passing a nonzero value for the <i>lineMode</i> argument in the <i>__init__</i> method of any Boilerplate <i>Block </i>class.</p>

<p>I usually set <i>lineMode</i> to True when using a template with HTML tables since the HTML table tag &lt;TD&gt; begins accepting data right after the closing "&gt;" character. With <i>lineMode</i> on, I can place BoilerPlate tags on their own lines within &lt;TD&gt; elements without introducing spurious whitespace characters. <a name="re1"><a href="9802ce1.htm">Example 1</A> shows the difference between normal and <i>lineMode</i> processing. Notice how the lines of output terminate at different locations.</p>

<h3>Conditional Text</h3>

<p>BoilerPlate <i>IfBlock</i> instances represent <i>if</i> blocks. Their behavior should be familiar, since they act like the traditional conditional constructs found in programming languages. An <i>IfBlock</i> instance expects a valid Python expression as its <i>&lt;data&gt;</i> component. During the <i>formatting</i> stage, the instance evaluates the expression using Python's built-in <i>eval</i> function. If the result is True, then the corresponding text block is formatted and output. <a name="re2"><a href="9802ce2.htm">Example 2</A> shows the results of <i>if</i> processing. </p>

<p>After an initial <i>if</i> block but before its matching <i>end</i> tag, a template may contain any number of <i>elif</i> blocks. If the <i>if</i> condition does not result in a True value, the <i>IfBlock</i> instance visits each <i>elif</i> block in succession until one returns True and emits its output. Finally, an <i>if</i> block can close with an <i>else</i> block that will output its formatted text block if all preceding conditions return False. The classes <i>ElifBlock</i> and <i>ElseBlock</i> represent these additional constructs.</p>

<h3>Iterating Over Text</h3>

<p>A <i>for</i> block represents an iteration over a block of text. Its behavior is defined in the <i>ForBlock</i> class. The syntax of the <i>&lt;data&gt;</i> part of the <i>for</i> tag is <i>&lt;name&gt; </i>in <i>&lt;value&gt;</i>, where <i>&lt;name&gt;</i> is a legal Python identifier and <i>&lt;value&gt;</i> is a valid Python expression. This is the same as Python's native <i>for</i> syntax. Before formatting its text blocks, the <i>ForBlock</i> instance evaluates <i>&lt;value&gt;</i> to obtain the set of run-time values to iterate over (again, using Python's <i>eval</i> function). The result of this evaluation must be a sequence (list, tuple, string) or a dictionary; anything else is an error (see <a name="re3"><a href="9802ce3.htm">Example 3</A>).</p>

<p>During the formatting stage, the <i>ForBlock</i> instance makes available to the template text certain iterator values through the identifier <i>&lt;name&gt;</i>. For instance, if <i>&lt;name&gt;</i> is <i>foo</i>, you can access the current iterator value with the qualification <i>foo.value</i>. <a name="rt3"><a href="9802ct3.htm">Table 3</A> lists the iterator attributes available from an iteration. The presence of a sequence or dictionary is dependent on the Python type being iterated on. </p>

<p>The iterator attributes of a <i>for</i> block are available through the <i>&lt;name&gt;</i> identifier even after the proper end of the block. As a result, you can show summary values at the end of formatted text, or use an iterator attribute in future <i>if</i> or <i>for</i> constructs. However, if a future <i>for</i> block has the same value for <i>&lt;name&gt;</i>, it will overwrite whatever values were there before. This also applies to any values stored in the formatting dictionary: Any slot in the dictionary that has a key that matches a <i>for</i> block's <i>&lt;name&gt;</i> value will be overwritten with the iteration attributes.</p>

<h3>BoilerPlate Comments</h3>

<p>BoilerPlate supports comments through the <i>CommentBlock</i> class. Comments begin and end with the sequences <i>#!#</i> and <i>#end!#,</i> respectively. All text contained in a comment block is ignored during the formatting stage, and is never output.</p>

<h3>Value Acquisition</h3>

<p>The <i>BoilerPlate</i> base class lets you supply values for the format dictionary in three methods: during instance creation in the <i>__init__</i> method, in the <i>Remember</i> method, and in the output generation method <i>Value</i>. You can call the <i>Remember</i> method as many times as you want to build up the values held in the formatting dictionary. However, key collisions are not detected; only the last value corresponding to a particular key is remembered in the formatting dictionary.</p>

<p>All three methods accept format dictionary values in two ways: You can simply pass in a dictionary, or you can list name/value assignments within the method call, using Python's keyword argument feature. In brief, keyword arguments look just like Python assign statements, but appear within function calls. For instance, if a method is defined as</p>

<blockquote>

<PRE>def foo( a, b, c, d )</PRE>

</blockquote><p>then the call</p>

<blockquote>

<PRE>foo( d=4, c=3, b=2, a=1 )
</PRE>
</blockquote><p>will invoke <i>foo</i> with the assignments listed in the call. The assignments do not have to follow the order in which the argument names appear in the function's definition. Furthermore, if the last variable in the definition begins with "**" (<i>def bar( a, b, **c )</i>, for instance), then upon entry to the function, the variable will contain a dictionary of all unassigned keyword arguments. Using this call sequence, positional arguments <i>a</i> and <i>b</i> would again receive the values 1 and 2, respectively; however, <i>c</i> will contain a dictionary with the keys <i>c</i> and <i>d</i>, and values 3 and 4.</p>

<h3>Formatting Stage</h3>

<p>The BoilerPlate classes use the Python string class format operator (%) to substitute placeholder tags in a template with run-time values. This entire operation takes place in the <i>Cook</i> method of the <i>RawText</i> class (<a name="rl3"><a href="9802c.htm#l3">Listing Three</A>). The syntax of the format operator is <i>&lt;string&gt; % &lt;data&gt;</i>, where <i>&lt;string&gt;</i> is a Python string instance with embedded format descriptors that start with a "%" character (similar to those of the C <i>printf</i>). For each descriptor, the format operator takes a value from <i>&lt;data&gt;</i>, formats it according to the descriptor flags, and replaces the descriptor with the resulting value.</p>

<p>Although the <i>&lt;data&gt;</i> part of the expression is usually a Python tuple or list sequence, there is a variant called <i>named value formatting</i> that requires a dictionary on the right side of the % operator. Inside the <i>&lt;string&gt;</i> value, each format descriptor has a key value. The syntax for this extension is <i>%(&lt;key&gt;)...</i>. When the format operator encounters the "(" character in a format descriptor, it grabs <i>&lt;key&gt;</i>, attempts to fetch a value from the <i>&lt;data&gt;</i> dictionary that corresponds to <i>&lt;key&gt;</i>, and formats the value per the rest of the descriptor.</p>

<p>There are three interesting facts about the % operator that are not obvious:</p>

<ul>
<li>Text between the left and right parentheses of the % descriptor can contain any character, including spaces and additional embedded parenthesis pairs. (Support for embedded parentheses is in Python Version 1.5. There is a patch available for Version 1.4.)  <li>The key is not evaluated in any way by the Python interpreter before it is used to access a value in the dictionary.
  <li>The right side of the % operator can be an instance of a class that implements a <i>__getitem__</i> method, and not just a native Python dictionary.
</ul>

<p>As a result of these conditions, a Python script can gain control during the processing of each format descriptor when it uses named value formatting. This is how <i>Formatter</i> class instances resolve attribute references and function names.</p>

<h3>Formatter Functions</h3>

<p>The stock <i>Formatter</i> class in BoilerPlate contains simple methods that you can invoke within a % descriptor to change a value before Python applies it to a formatting descriptor. In <a name="re4"><a href="9802ce4.htm">Example 4</A>, for instance, the format descriptor</p>

<blockquote><p></p>

<PRE>%( HtmlEncode( '&lt;' + Lower(       Roman( foo ) ) + '&gt;' ) )s
</PRE>
</blockquote><p>invokes three <i>Formatter</i> methods: the first, <i>Roman</i>, converts the contents of <i>foo</i> (a number) into its Roman numeral equivalent. The result is next given to <i>Lower</i>, which converts all uppercase characters in the string to lowercase. That result is then used in a Python string concatenation operation, which is the argument to the last <i>Formatter</i> method, <i>HtmlEncode</i>. It replaces characters in the set (&lt;, &amp;, &gt;, ") with their corresponding HTML encoding. </p>

<p>Finally, the format operator converts the encoded result into a string because of the "s" format flag at the end of the descriptor (an NOP in this case). <a name="rt4"><a href="9802ct4.htm">Table 4</A> lists the formatting functions in the <i>Formatter</i> class.</p>

<p>An unusual format function is the <i>Null</i> method. Like its siblings, it takes as its first argument the value to work on. Its second argument specifies a value to return if the first is a Python False value -- a member of the set (None, 0, 0.0, ", (), {}). Because <i>Formatter</i> uses the <i>eval</i> function, you can also use Python's logical operators to achieve the same effect. For instance,</p>

<blockquote>

<PRE>    %( foo or 'N/A' )s</PRE>

</blockquote><p>and </p>

<blockquote>

<PRE>    %( Null( foo, 'N/A' ) )s</PRE>

</blockquote><p>will always produce the same formatted output for all values of <i>foo</i>.</p>

<p>You can easily add your own functions either by subclassing the <i>Formatter</i> class or by installing them in the active <i>format dictionary</i> via the <i>Remember</i> method.</p>

<h3>BoilerPlate and Python <i>eval</i> </h3>

<p>BoilerPlate uses Python's <i>eval</i> built-in function to obtain conditional, iterative, and placeholder values. CGI developers might be concerned about this if they plan to use HTML form data in BoilerPlate expression tags. First, a standard rule to follow in any CGI application is to never blindly accept values received from a form. Otherwise, malicious users might be able to cause problems in your program with the data they enter. I have tried various Python expressions (<i>range( 0, 99999999 )</i>, for instance, and <i>1 / 0</i>) in a simple CGI application without incident: Python gracefully raises an appropriate exception (<i>MemoryError</i> and <i>ZeroDivisionError</i>, respectively) and continues on. That is not to say that Python will always properly handle all errors or even on all platforms; however, I think the amount of mischief that can be caused is minimal since only expressions are evaluated, and not Python statements. Again, always be wary of data obtained from an external source.</p>

<p>If this is unsatisfactory, you can implement your own expression resolution mechanism for BoilerPlate instances to use. The <i>Formatter</i> class is the only one that uses Python's <i>eval</i> built-in function; it does so in its <i>Resolve</i> method. Simply create a <i>Formatter</i> subclass with your own custom <i>Resolve</i> method. </p>

<h3>Conclusion </h3>

<p>BoilerPlate has proven to be an extremely useful library for CGI programming. My CGI applications are clearer and less cluttered, and editing an application's HTML components is no longer a chore. Perhaps most important, the incidence of HTML coding errors has dramatically decreased.</p>

<p><b>DDJ</b></p>




<H4><a name="l1">Listing One</H4>

<pre>print "&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;%s&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;" % title# Trap when there is no data to show.
if len( data ) == 0:
    print "&lt;B&gt;No data available&lt;/B&gt;&lt;P&gt;"
else:
    # Print table heading, then each row
    print "&lt;TABLE&gt;&lt;TR&gt;&lt;TH&gt;Index&lt;/TH&gt;&lt;TH&gt;Value&lt;/TH&gt;&lt;/TR&gt;"
    for index in range( 0, len( data ) ):
        print "&lt;TR&gt;&lt;TD&gt;%d&lt;/TD&gt;" % index
        print "&lt;TD&gt;%s&lt;/TD&gt;&lt;/TR&gt;" % data[ index ]
    print "&lt;/TABLE&gt;"
print "&lt;/BODY&gt;&lt;/HTML&gt;"
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>&lt;HTML&gt;&lt;!-- Example of BoilerPlate HTML --&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;%(title)s&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;!--
  -- Trap when there is no data
  --&gt;
#if len( data ) == 0#
    &lt;B&gt;No data available&lt;/B&gt;&lt;P&gt;
#else#
    &lt;!--
      -- Print table heading, then each row
      --&gt;
    &lt;TABLE&gt;
    &lt;TR&gt;&lt;TH&gt;Index&lt;/TH&gt;&lt;TH&gt;Value&lt;/TH&gt;&lt;/TR&gt;
    #for each in data#
        &lt;TR&gt;&lt;TD&gt;%(each.index)d&lt;/TD&gt;&lt;TD&gt;%(each.value)s&lt;/TD&gt;&lt;/TR&gt;
    #end for#
    &lt;TR&gt;&lt;TH&gt;Total:&lt;/TH&gt;&lt;TD&gt;%(each.sum)&lt;/TD&gt;&lt;/TR&gt;
#end if#
&lt;/BODY&gt;
&lt;/HTML&gt;
<p></p>
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre># Cook -- apply the given dictionary to a range of text we own.def Cook( self, sink, dict ):
    sink.Append( self.text % dict )
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
