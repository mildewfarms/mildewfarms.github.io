<html>
<META NAME="year" CONTENT="1998">
<head>
<title>Dr. Dobb's Journal February 1998: What's New in Python 1.5?</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<p><i>Dr. Dobb's Journal</i> February 1998 </p>

<h1>What's New in Python 1.5?</h1>
<P>
<I>Dr. Dobb's Journal</I> February 1998
</P>
<H3>By Guido van Rossum</H3>
<I>Guido, Python's creator, works at the Corporation for National Research Initiatives in Reston, Virginia. He can be contacted at guido@python.org.</I>
<HR>
<P>
Python 1.5 has some powerful improvements over previous versions of the language. I'll briefly describe some of the major modifications here. For more information, see the Python web site at http://www.python.org/.
</P>

<p><b>Packages. </b>Perhaps the most important change is the addition of packages. A Python "package" is a named collection of modules, grouped together in a directory. A similar feature was available in earlier releases through the <i>ni</i> module (named after the Knights Who Say "new import"), but was found to be too important to be optional. Starting with 1.5, it is a standard feature, reimplemented in C, although it is not exactly compatible with <i>ni</i>.</p>

<p>A package directory must contain a file <i>__init__.py</i> -- this prevents subdirectories that happen to be on the path or in the current directory from accidentally preempting modules with the same name. (The <i>__init__.py</i> file was optional with <i>ni</i>.) When the package is first imported, the <i>__init__.py</i> file is loaded in the package namespace. (This is the other main incompatibility.)</p>


For example, the package named "test" (in the Python 1.5 library) contains the expanded regression test suite. The driver for the regression test is the submodule <i>regrtest</i>, and the tests are run by invoking the function <i>main()</i> in this submodule. There are several ways to invoke it:

<blockquote>


<PRE>import test.regrtest
test.regrtest.main()</PRE>
</blockquote>

<p>If you don't want to use fully qualified names for imported functions and modules, you can write:</p>

<blockquote>


<PRE>from test import regrtest
regrtest.main()
</PRE>
</blockquote>
<p>or even:</p>

<blockquote>
<PRE>from test.regrtest import main
main()
</PRE>
</blockquote><p><b>Assertions.</b> There's now an <i>assert</i> statement to ease the coding of input requirements and algorithm invariants. For example,</p>

<blockquote>
<PRE>assert x &gt;= 0
</PRE></blockquote>

<p>will raise an <i>AssertionError</i> exception when <i>x</i> is negative. The argument can be any Boolean expression. An optional second argument can give a specific error message; for example: </p>

<blockquote><p></p>


<PRE>assert L &lt;= x &lt;= R,\"x out of range"
</PRE>
</blockquote>

<p>Once a program is debugged, the assert statements can be disabled without editing the source code by invoking the Python interpreter with the -O command-line flag. This also removes code like this:</p>

<blockquote>


<PRE>if __debug__: statements
</PRE>
</blockquote>

<p>This form can be used for coding more complicated requirements, such as a loop asserting that all items in a list have the same type.</p>

<p><b>Perl-style regular expressions.</b> A new module, <i>re</i>, provides a new interface to regular expressions. The regular expression syntax supported by this module is identical to that of Perl 5.0 to the extent that this is feasible, with Python-specific extensions to support named subgroups. The interface has been redesigned to allow sharing of compiled regular expressions between multiple threads. A new form of string literals, dubbed "raw strings" and written as <i>r"..."</i>, has been introduced, in which backslash interpretation by the Python parser is turned off. Example 5, for instance, searches for identifiers and integers in its argument string.</p>

<BLOCKQUOTE><pre>import re, sys
text = sys.argv[1]
prog = re.compile(
		 r"\b([a-z_]\w*|\d+)\b",
		 re.IGNORECASE)
hit = prog.search(text)
while hit:
	print hit.span(1),
	print hit.group(1)
	hit = prog.search(text, 
		  hit.end(0))
</pre>

<H4>Example 5: Using Python 1.5 regular expressions. </H4>
</BLOCKQUOTE>

<P>
<b>Standard exception classes.</b> All standard exceptions are now classes. There's a (shallow) hierarchy of exceptions, with <i>Exception</i> at the root of all exception classes, and its subclass <i>StandardError</i> as the base class of all standard exception classes. Since this is a potential compatibility problem (some code that expects exception objects to have string objects will inevitably break), it can be turned off by invoking the Python interpreter with the -X command-line flag. To minimize the incompatibilities, <i>str()</i> of a class object returns the full class name (prefixed with the module name) and list/tuple assignment now accepts any sequence with the proper length on the right side.
</P>


<P>
Performance. The 1.5 implementation has been benchmarked as being up to twice as fast as Python 1.4. The standard Python benchmark, pystone, is now included in the test package (<i>import test.pystone; test.pystone.main()</i>).
</P>

<p>The biggest speed increase is obtained in the dictionary lookup code. It is aided by a better, more uniformly randomizing hash function for string objects, and automatic "string interning" for all identifiers used in a program (this turns string comparisons into more efficient pointer comparisons). Some new dictionary methods make faster code possible if you don't mind changing your program: <i>d.clear()</i>, <i>d.copy()</i>, <i>d.update()</i>, <i>d.get()</i>.</p>


<P>
Other speed increases include some inlining of common operations and improved flow control in the main loop of the virtual machine.
</P>


<P>
I/O speed has also been improved. On some platforms (notably Windows) the speed of <i>file.read()</i> (for large files) has improved dramatically by checking the file size and allocating a buffer of that size, instead of extending the buffer a few KB at a time.
</P>

<p><b>Miscellaneous.</b> The default module search path is chosen much more intelligently, so that a binary distribution for UNIX no longer requires a fixed installation directory. There are also provisions for site additions to the path without recompilation.</p>

<p>If you are embedding Python in an application of your own, you will appreciate the vastly simplified linking process -- everything is now in a single library. There's also much improved support for nonPython threads, multiple interpreters, and explicit finalization and reinitialization of the interpreter.</p>


<P>
For those of us who like to read the source, the code now uses a uniform naming scheme (the "Great Renaming") wherein all names have a "Py" prefix. For example, the function known as <i>getListitem() </i>is now called <i>PyList.GetItem().</i>
</P>

<p><b>DDJ</b></p>
<P>
<a href="9802c.htm#rs1">Back to Article</A>
</P>
<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
