<html>
<META NAME="year" CONTENT="1998">
<head>
<title>Dr. Dobb's Journal February 1998: Undocumented Corner</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>ATL's ActiveX Control Architecture</h1>

<p><i>Dr. Dobb's Journal</i> February 1998
</p>
<h3>By George Shepherd and Scot Wingo</h3>

<I>Scot is a cofounder of Stingray Software. He can be reached at scot@stingsoft.com. George develops software with Stingray Software and delivers MFC, ATL, and COM seminars for DevelopMentor. He can be contacted at 70023.1000@compuserve.com.</I>

<hr>

<p>If you're a developer who's decided to begin living the COM lifestyle, using Microsoft's Active Template Library (ATL) is a reasonable alternative to creating COM classes using raw C++. Writing COM classes via raw C++ is a great exercise, since raw C++ is the assembly language of COM. It's the kind of thing everyone should do it at least once. By understanding COM at the C++ level, all the crazy machinations you'll witness when combing through MFC and ATL source code will make sense. </p>

<p>Unfortunately, most developers have real problems to solve (and real ship dates marked on their calendars), and probably don't want to spend time writing code to implement <i>IUnknown</i> and <i>IDispatch</i> over and over. Granted, <i>IUnknown</i> and <i>IDispatch</i> are straightforward -- <i>IUnknown</i> is only three functions and <i>IDispatch</i> is only four more functions. Both interfaces have basically the same amount of "boilerplateness" to them. For example, as you saw in our December 1997 column, writing a solid implementation of <i>IDispatch</i> requires three steps: </p>

<OL TYPE="1" START="1">
	<LI>Describing the interface in IDL.
	<LI>Having the MIDL compiler eat the IDL and spit out a type library.
	<LI>Implementing the <i>IDispatch</i> functions by delegating to the <i>ITypeInfo</i> interface. 
</OL>

<p>ATL exists to save you from this drudgery. However, ATL doesn't stop at <i>IUnknown</i> and <i>IDispatch</i>. ATL is also useful if you want to ship ActiveX controls. ATL implements all the interfaces required by ActiveX Controls. In this column, we'll take a look at how ATL implements ActiveX controls, starting with an examination of ATL's basic control architecture and the accompanying windowing architecture. In subsequent columns, we'll examine how ATL implements specific elements of an ActiveX control including rendering, persistence, and connections. </p>

<h3>What is an ActiveX Control?</h3>

<p>Even today, there's confusion as to what really constitutes an ActiveX control. In 1994, Microsoft tacked some new things onto its Object Linking and Embedding protocol, packaged the contraptions within DLLs, and called them OLE Controls. Originally, OLE Controls implemented nearly the entire embedding protocol. In addition, OLE Controls supported dynamic invocation (Automation), property pages (so users could modify the control's properties), outbound callback interfaces (event sets), and a standard way for clients and controls to hook up the event callbacks (connections). When the Internet became central to Microsoft's marketing plans, Microsoft intended to plant ActiveX Controls on web pages. At that point, the size of these components became an issue. Microsoft took its OLE Control specifications, renamed them ActiveX Controls, and stated that all the useful features just listed were optional -- the control's only requirement was (and is) that it be based on COM and implement <i>IUnknown</i>. Of course, for a control to be useful, it needs to implement most of those features we've just discussed. So in the end, ActiveX Controls and OLE Controls refer to more or less the same kind of animal -- reusable software gadgets (mostly UI gadgets) built using COM. </p>

<h3>Creating a Control</h3>

<p>To create a new ActiveX-based control, select File|New from Visual C++'s main menu, then select ATL COM AppWizard as the project type. The AppWizard gives you a choice between an EXE, Service, and DLL. To make a server for housing controls, choose a DLL. Once the ATL COM AppWizard pumps out your project, use the ATL Object Wizard to create a new control. For now, we'll just name the control ATLCtl and go with the defaults. <a name="rl1"><a href="9802o.htm#l1">Listing One</A> is the code emitted by the ATL COM Object Wizard. </p>

<p><a href="9802o.htm#l1">Listing One</A> shows a pretty long inheritance list. We've already seen the template implementations of <i>IUnknown</i> and <i>IClassFactory</i>. They exist in <i>CComObjectRootEx</i> and <i>CComCoClass</i>. We've also seen how ATL implements <i>IDispatch</i> within the <i>IDispatchImpl</i> template. However, for a basic control, there are about 11 more interfaces required to implement an ActiveX Control. As <a name="rt1"><a href="9802ot1.htm">Table 1</A> shows, these interfaces can be categorized into several areas of utility.</p>

<p>From the highest level, an ActiveX Control has two aspects -- its external state and its internal state (its properties). Once hosted by some sort of container (like a Visual Basic form or a dialog box), an ActiveX Control maintains a symbiotic relationship with the container. The client code talks to the control through incoming COM interfaces like <i>IDispatch</i> and OLE Document interfaces like <i>IOleObject</i> and <i>IDataObject</i>. </p>

<p>The control also has the opportunity to talk back to the client. For example, the client often implements an <i>IDispatch</i> event to represent the control's event set -- that way, controls can talk back to their clients. The container maintains a set of properties named "ambient" properties that can be used by the control to camouflage itself within the container (the container makes these properties available through an <i>IDispatch</i> interface). The container may implement an interface named <i>IPropertyNotifySink</i> so it can find out when the properties within a control might change. Finally, the container implements <i>IOleClientSite</i> and <i>IOleControlSite</i> as part of the control embedding protocol. </p>

<p>The interfaces in <a href="9802ot1.htm">Table 1</A> allow the client and object to behave as advertised. However, the heart of an ATL-based ActiveX Control lies within <i>CComControl</i> and its base classes. Let's start by taking a look at the <i>CComControl</i> class. </p>

<h3><i>CComControl</i> </h3>

<p>You can find <i>CComControl</i> in Microsoft's ATLCTL.H file under ATL's <i>include</i> directory. <i>CComControl</i> is a template class that takes a single class parameter; see <a name="re1"><a href="9802oe1.htm">Example 1</A>.</p>

<p><i>CComControl</i> is a pretty lightweight class. It doesn't have a lot going on by itself -- it derives from <i>CComControlBase</i> and <i>CWindowImpl</i>. <i>CComControl</i> expects the template parameter to be an ATL-based COM object derived from <i>CComObjectRootEx</i>. <i>CComControl</i> requires the template parameter for various reasons. For example, the class uses the template parameter to call back to the control's <i>_InternalQueryInterface</i>. </p>

<p><i>CComControl</i> implements several functions, making it easy for the control to call back to the client. For example, <i>CComControl</i> implements the function <i>FireOnRequestEdit</i> to give controls to the ability to tell the client that a specified property is about to change. <i>FireOnRequestEdit</i> calls back to the client through the client-implemented interface <i>IPropertyNotifySink</i>. This method notifies all connected <i>IPropertyNotifySink</i> interfaces that the property specified by a certain DISPID is about to change. </p>

<p><i>CComControl</i> also implements <i>FireOnChanged</i>, which is much like <i>FireOnRequestEdit</i> in that it calls back to the client through the <i>IPropertyNotifySink</i>. However, this function is useful for telling the clients of the control (all clients implementing <i>IPropertyNotifySink</i>) that a property specified by a certain DISPID has already changed. </p>

<p><i>CComControl</i> implements the function <i>ControlQueryInterface,</i> which forwards to the control's <i>IUnknown</i>. Finally, <i>CComControl</i> implements the function <i>CreateControlWindow</i>. The default behavior for this function is to call <i>CWindowImpl::Create</i> (notice <i>CComControl</i> also derives from <i>CWindowImpl</i>). You can override this method to do something other than create a single window. For example, you might want to create multiple windows for your control.</p>

<p>Most of the functionality for <i>CComControl</i> exists within those two other classes -- <i>CComControlBase</i> and <i>CWindowImpl</i>. </p>

<h3><i>CComControlBase</i> </h3>

<p><i>CComControlBase</i> is more substantial than <i>CComControl</i>. For starters, <i>CComControlBase</i> maintains the pointers used by the control to talk back to the client. <i>CComControlBase</i> uses ATL's <i>CComPtr</i> smart pointer to wrap the following interfaces implemented for calling back to the client. These member variables include wrappers for <i>IOleInPlaceSite</i>, an advise holder for the client's data advise sink, an OLE advise holder for the client's OLE advise sink, and a wrapper for <i>IoleClientSite</i>. <i>CComControlBase</i> also uses ATL's <i>CComDispatchDriver</i> to wrap the client's dispatch interface for exposing its ambient properties.</p>

<p><i>CComControlBase</i> is where you'll find the control's sizing and positioning information. <i>CComControlBase</i> maintains the control's size and position as member variables. The other important data member within <i>CComControlBase</i> is the control's window handle. Most ActiveX Controls are UI gadgets and so maintain a window. The windowing aspects of an ATL-based ActiveX Control are handled by <i>CWindowImpl</i> and <i>CWindowImplBase</i>. </p>

<h3><i>CWindowImpl</i> and <i>CWindowImplBase</i></h3>

<p><i>CWindowImpl</i> derives from <i>CWindowImplBase</i>, which, in turn, derives from <i>CWindow</i> and <i>CMessageMap</i>. As a template class, <i>CWindowImpl</i> takes a single parameter upon instantiation (the parameter is the control being created). The <i>CWindowImpl</i> needs the control type because it calls back to the control during window creation. </p>

<h3>ATL Windowing</h3>

<p>Just as <i>CComControl</i> is relatively lightweight (most work happens in <i>CComControlBase</i>), <i>CWindowImpl</i> is relatively lightweight. <i>CWindowImpl</i> more or less just handles window creation. In fact, that's the only function explicitly defined by <i>CWindowImpl</i>. <i>CWindowImpl::Create</i> creates a new window based on the window class information managed by a class named <i>CWndClassInfo</i>; see <a name="rl2"><a href="9802o.htm#l2">Listing Two</A>.</p>

<p><i>CWindowImpl</i> uses the macro DECLARE_WND_CLASS to add window class information to a <i>CWindowImpl</i>-derived class. DECLARE_WND_CLASS also adds a function named <i>GetWndClassInfo</i>. <a name="rl3"><a href="9802o.htm#l3">Listing Three</A> shows the DECLARE_WND_CLASS macro.</p>

<p>Because <i>CWndClassInfo</i> manages the information for a single window class, each window created through a specific instance of <i>CWindowImpl</i> is based on the same window class.</p>

<p><i>CWindowImpl</i> derives from <i>CWindowImplBase</i>, and <i>CWindowImplBase</i> multiply derives from <i>CWindow</i> and <i>CMessageMap</i>. <i>CWindowImplBase </i>manages the window procedure of a <i>CWindowImpl</i>-derived class. <i>CWindow</i> is a lightweight class that wraps window handles in the same way (but not as extensively) as MFC's <i>CWnd</i> class. <i>CMessageMap</i> is a tiny class that defines the pure virtual function <i>ProcessWindowMessage</i>. ATL-based message-mapping machinery assumes this function is available, so ATL-based classes that want to use message maps need to derive from <i>CMessageMap</i>. </p>

<h3>ATL Message Maps</h3>

<p>The root of ATL's message mapping machinery lies within the <i>CMessageMap</i> class. ATL-based controls expose message maps by virtue of indirectly deriving from <i>CWindowImplBase</i>. In MFC, deriving from <i>CCmdTarget</i> enables message mapping. However, just as in MFC, it's not enough to simply derive from a class that supports message maps -- those message maps are actually implemented via macros. </p>

<p>Implementing a message map in an ATL-based control is a matter of using the BEGIN_MSG_MAP macro in the class' header file. BEGIN_MSG_MAP marks the beginning of the default message map. <i>CWindowImpl::WindowProc</i> uses this default message map to process messages sent to the window. The message map directs messages either to the appropriate handler function or to another message map. ATL defines another macro named END_MSG_MAP to mark the end of a message map. Between the BEGIN_MSG_MAP and END_MSG_MAP macros lie some other macros for mapping window messages to member functions in the control. For example, take a look at the default message map pumped out by the ATL COM Wizard in <a name="rl4"><a href="9802o.htm#l4">Listing Four</A>.</p>

<p>As you can see, this message map handles three window messages: WM_PAINT, WM_SETFOCUS, and WM_FOCUS. These are standard window messages mapped using the MESSAGE_HANDLER macro. The macros produce a table relating window messages to member functions in the class. In addition to regular messages, message maps are capable of handling other sorts of events. <a name="rt2"><a href="9802ot2.htm">Table 2</A> presents a rundown of the kinds of macros that can go in a message map.</p>

<h3>Conclusion</h3>

<p>While Microsoft's documentation gives good information about how to implement ActiveX Controls using ATL, it doesn't really describe how the machinery works. Basically, ActiveX Controls need to have class objects (handled by <i>CComCoClass</i>) and implement <i>IUnknown</i> (handled by <i>CComObjectRootEx</i>). In addition, ATL-based Controls derive from interfaces necessary for the OLE Control protocol. Finally, ATL-based Controls derive from <i>CComControl</i> to get the rest of the machinery necessary to be an ActiveX Control. By deriving from <i>CComControl</i>, an ATL-based control also gets a window and a message map. In future columns we'll examine other interesting aspects of ATL's support for ActiveX Controls, including how they implement property pages and connections. </p>


<p><b>DDJ</b></p>




<H4><a name="l1">Listing One</H4>

<pre>class ATL_NO_VTABLE CATLCtl :    public CComObjectRootEx&lt;CComSingleThreadModel&gt;,
   public CComCoClass&lt;CATLCtl, &amp;CLSID_ATLCtl&gt;,
   public CComControl&lt;CATLCtl&gt;,
   public IDispatchImpl&lt;IATLCtl, &amp;IID_IATLCtl, &amp;LIBID_ATLCTLSVRLib&gt;,
   public IProvideClassInfo2Impl&lt;&amp;CLSID_ATLCtl, NULL, &amp;LIBID_ATLCTLSVRLib&gt;,
   public IPersistStreamInitImpl&lt;CATLCtl&gt;,
   public IPersistStorageImpl&lt;CATLCtl&gt;,
   public IQuickActivateImpl&lt;CATLCtl&gt;,
   public IOleControlImpl&lt;CATLCtl&gt;,
   public IOleObjectImpl&lt;CATLCtl&gt;,
   public IOleInPlaceActiveObjectImpl&lt;CATLCtl&gt;,
   public IViewObjectExImpl&lt;CATLCtl&gt;,
   public IOleInPlaceObjectWindowlessImpl&lt;CATLCtl&gt;,
   public IDataObjectImpl&lt;CATLCtl&gt;,
   public ISpecifyPropertyPagesImpl&lt;CATLCtl&gt;
{
 ... 
};
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>class CWndClassInfo {public:
   WNDCLASSEX m_wc;
   LPCTSTR m_lpszOrigName;
   WNDPROC pWndProc;
   LPCTSTR m_lpszCursorID;   
   BOOL m_bSystemCursor;
   ATOM m_atom;
   TCHAR m_szAutoName[13];
   ATOM Register(WNDPROC*);
};
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>#define DECLARE_WND_CLASS(WndClassName) \static CWndClassInfo&amp; GetWndClassInfo() \
{ \
   static CWndClassInfo wc = \
   { \
      { sizeof(WNDCLASSEX), CS_HREDRAW|CS_VREDRAW, StartWindowProc, \
        0, 0, 0, 0, 0, (HBRUSH)(COLOR_WINDOW+1), 0, WndClassName, 0 }, \
        NULL, NULL, IDC_ARROW, TRUE, 0, _T("") \
   }; \
   return wc; \
}
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>BEGIN_MSG_MAP(CATLCtl)   MESSAGE_HANDLER(WM_PAINT, OnPaint)
   MESSAGE_HANDLER(WM_SETFOCUS, OnSetFocus)
   MESSAGE_HANDLER(WM_KILLFOCUS, OnKillFocus)
END_MSG_MAP()
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
