<html>
<META NAME="year" CONTENT="1998">
<head>
<title>Dr. Dobb's Journal February 1998: A Data Acquisition System for Linux</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>A Data Acquisition System for Linux</h1>

<p><i>Dr. Dobb's Journal</i> February 1998
</p>
<h2>Device drivers are the key</h2>

<h3>By Dhananjay V. Gadre and Sunu Engineer</h3>

<I>Dhananjay is a graduate student at the Microelectronics Research and Communications Institute at the University of Idaho. He can be contacted at dgadre@mrc.uidaho.edu. Sunu is associated with the Inter-University Centre for Astronomy and Astrophysics (IUCAA) in Pune, India. He can be contacted at sunu@iucaa.ernet.in.</I>

<hr>

<p>Connecting external hardware to DOS-based PCs usually requires no more than a simple Basic program. In comparison, connecting Linux-based computers to external hardware for data logging and/or control can be a headache because the operating system requires special device drivers to connect any device to the computer. In this article, we'll describe a general-purpose data-acquisition system for Linux that can be connected to the PC's parallel port to record eight channels of analog voltage. The input range for each channel is 0 to 4.095 volts. The rate at which the data can be recorded is limited only by the speed of operation of the PC; for a 66/486 DX2, this is about 160 msec per sample, as compared to 220 <img src="mu.gif" alt="[micro]" align=middle width="8" height="13">sec on a 20/386.</p>

<p>We built the hardware half of the data-acquisition system around Maxim's Max186 eight-channel, 12-bit analog-to-digital converter (ADC). The Max186 is a low-power, multichannel ADC with integrated S/H amplifier, internal clock source, and four-wire serial interface. It can be programmed to work in a variety of modes and has a peak-supply current consumption of only 2.5 mA at 133 KSPS.<b> </b>In the power-down mode, the current consumption drops to 2<img src="mu.gif" alt="[micro]" align=middle width="8" height="13">A.</p>

<p>The eight ADC analog input pins can be programmed as eight-channel single-ended inputs, for four-channel differential inputs. <a name="rf1"><a href="9802ff1.htm">Figure 1</A> is the circuit schematic. The circuit is powered by an external +5 V supply, though the current consumption is small enough to be powered by the serial port or onboard battery.</p>

<p>The ADC is interfaced to the PC via the parallel-printer adapter port. (For more information on the parallel port, see "The Enhanced Parallel Printer Port," by D.V. Gadre and Larry Stein, <i>DDJ</i>, October 1997. Available electronically; see "Resource Center," page 3.) To acquire a sample of the analog voltage at one of the input channels of the ADC, a conversion is started on the Max186 by clocking a control byte into the Din pin of the ADC. To clock a control byte into the ADC, the CS* pin of the ADC must be held low. Each rising edge on the SCLK pin clocks a bit into the Din pin. <a name="rt1"><a href="9802ft1.htm">Table 1</A> lists the format of the control byte. At the end of this clocking sequence, the converted data is clocked out on the Dout pin of the ADC. The ADC generates two output data bytes with one leading zero and padded with three trailing zeros as the result of the conversion process. Each rising edge on the CLK pin outputs one data bit on the Dout pin from the ADC. In our design, the SCLK bit is connected to the D0 bit of the printer adapter data port. The Din pin is driven by the D7 bit of the data port. Since Dout is an input bit for the PC, it is read on the S7 bit of the status port of the parallel adapter. When the ADC is not being read, it is disabled by pulling the CS* high to reduce power consumption. For example, the control byte for accessing channel 0 in unipolar, single-ended mode with an external clock is 10001111 (that is, 0x8F). <a name="rt2"><a href="9802ft2.htm">Table 2</A> presents the control byte for the eight channels with single-ended unipolar input and external clock source. <a name="rt3"><a href="9802ft3.htm">Table 3</A> is the control byte for configuring the ADC to operate with differential, unipolar inputs. The entries in the Channel \# column refer to the two inputs whose difference is encoded by the ADC; that is, the third entry CH4-CH5 means that the voltage on CH5 is subtracted from that on CH4 and this difference is encoded.</p>

<h3>Testing Hardware on Linux</h3>

<p>Testing external hardware connected to Linux-based x86 systems is possible if you run the machine with root privileges. As a superuser, all hardware -- without any supervisory control -- is accessible.</p>

<p>For our project, we needed to access the three ports of the parallel-printer adapter. <a name="rl1"><a href="9802f.htm#l1">Listing One</A> (testport.c) shows how we did this. The parallel adapter data-port address was determined by putting the machine in DOS mode. With the function <i>ioperm()</i>, the program is granted permission to access requested ports by the operating system. A similar function <i>iopl()</i> can also be used, but <i>iopl()</i> gives unlimited access to the program and should be avoided. Another feature that is important to note in the program is the syntax of the macro <i>outb()</i>. DOS programmers are used to a similar function <i>outportb(port_address, port_value),</i> but with the GCC compiler, the structure is <i>outb(port_value, port_address)</i>. <a href="9802f.htm#l1">Listing One</A> sends a byte to the data port and reads it back. It also reads the contents of the status and control registers. The value sent to the data port and the value read back should be the same, unless the port bits are being pulled externally.</p>

<h3>The SanSon Device Driver</h3>

<p>It was important for us to have a device driver for the ADC under Linux, so that this device could be practically used in user mode in a multitasking environment for data acquisition. Since it is not possible to detail the construction of a character device driver under Linux here, we'll instead focus on the most relevant features. To build the driver, we wrote:</p>

<p></p>

<ul>
<li>Code to evaluate the ADC performance with superuser privileges.  <li>A character device driver for the ADC and linked it to the kernel at compile time.
  <li>A set of functions that can be used at the user level to open the device and read the data in real time.
</ul>

<p></p>

<p>We then wrote test code as superuser to access the parallel port directly using the Linux <i>ioperm</i> or <i>iopl</i> call, which allows the program to access a window of specified width into the I/O space. The code tests for the presence of a parallel port, identifies which port is to be used, tests for the presence of the device (the ADC, for example), and finally reads data from the device directly using the <i>inb</i> and <i>outb</i> calls of Linux.</p>

<p>The code has to be compiled with the gcc -O option so that the inline calls <i>inb</i> and <i>outb</i> can be expanded properly, otherwise the linker will complain.</p>

<p>Since this testing can cause the system to hang (with a reboot as the only option), you must be careful when testing on a fully working multiuser system. Also, it is better to use the <i>ioperm</i> call rather than <i>iopl</i> since <i>ioperm</i> allows only restricted access to I/O ports.</p>

<p>Once we were satisfied that the ADC was working as expected, we moved on to the process of constructing the device driver and integrating it into the kernel.</p>

<h3>Structure of the Device Driver</h3>

<p>The device driver code is structured as follows:</p>

<p></p>

<ul>
<li>Includes.  <li>Global variables.
  <li><i>adc_open</i>, which opens the device for reading if it is not already open. That is, it checks if the variable <i>adc_busy</i> is set; if not, it permits the user program to open the device file corresponding to the ADC and read from it.
  <li><i>adc_close</i>, which closes the device and frees it.
  <li><i>adc_read</i>, which transmits the control byte corresponding to the minor device selected (Channel Chosen), reads an <i>int</i> from the ADC (result of conversion process, properly offset), and transfers it to the user space from the kernel space.
  <li><i>test_parallel_port</i>, which tests for presence of a parallel port and returns the port address (not complete in the current implementation).
  <li><i>test_adc</i>, which tests whether the ADC is connected and powered on in the specified parallel port.
  <li><i>adc_fops</i>, the structure declaration and initialization.
  <li><i>adc_init</i> (described shortly). 
</ul>

<p></p>

<p>For Linux kernels 1.2 and greater, there exists a directory /usr/src/linux/drivers/char where the character device-driver codes are placed. The driver has a <i>drivername_init</i> function that, for the newer kernels, returns an <i>int</i> and takes a <i>void. </i>The <i>void </i>serves as the point of linking to the kernel. In the source code for mem.c (in /usr/src/linux/drivers/char), there is a function, <i>chr_dev_init,</i> in which one simply adds a <i>devicename_init</i> call, and recompiles the kernel. <a name="rl2"><a href="9802f.htm#l2">Listing Two</A> shows the relevant portions of the mem.c file with the necessary modifications. ADC.c (available electronically) is the complete device-driver code which contains the <i>adc_init</i> code. The header file ADC.h is also available electronically.</p>

<h3>Linking the Device Driver into the Kernel</h3>

<p>The steps in the recompilation of the kernel are:</p>

<ol>
<li>Change the directory to /usr/src/linux/drivers/char.  <li>2.	Edit Config.in to include <i>bool 'SanSon General Purpose ADC Support' CONFIG_SANSON_ADC</i>.
  <li>Edit the Makefile to include: 


<BLOCKQUOTE><PRE>ifdef CONFIG_SANSON_ADC
L_OBJS += ADC.o
endif
</PRE>
</BLOCKQUOTE>
<li>Change the directory to /usr/src/linux.
  <li>Type <i>make config</i> and answer all queries appropriately.
  <li>Type <i>make clean; make dep.</i> 
  <li>Type <i>make zImage</i> to be safe. Wait for the make to finish (this can take 45 minutes or more).
  <li>Make a bootdisk with your old kernel.
  <li>Copy the zImage file (or whatever your kernel image is) in directory /usr/src/linux/arch/i386/boot to /vmlinuz.
  <li>Type <i>lilo</i> if you use LILO.
  <li>Reboot. If the kernel hangs, boot with the bootdisk that you made, fix the bugs and go through the same steps again. (To speed up the compilation and linking process, you can skip the <i>make clean </i>after doing it once.)
  <li>Make the device files in /dev directory:

<BLOCKQUOTE><PRE>mknod /dev/adc0 c 31 0
mknod /dev/adc1 c 31 1
mknod /dev/adc2 c 31 2
mknod /dev/adc3 c 31 3
mknod /dev/adc4 c 31 4
mknod /dev/adc5 c 31 5
mknod /dev/adc6 c 31 6
mknod /dev/adc7 c 31 7
</PRE></BLOCKQUOTE>
</ol>

<p>After the compilation and linking, the resulting kernel is installed in the system. The ADC device is connected to the parallel port and powered on. While booting, the kernel calls the <i>adc_init</i> function, which:</p>

<ul>
<li>Tests the parallel port to find the port base address.  <li>Tests whether the ADC is connected to the port and powered on.
  <li>If ADC is connected and powered on, registers the device with the kernel with a chosen major number (in this case, 31).
</ul>

<h3>Dynamically Installing Modules</h3>

<p>Another way of including the device driver in the kernel is to dynamically insert it into a running kernel. This requires that the device driver contain two functions: <i>init_module</i> and <i>cleanup_module</i>. Dynamic installation into a running kernel is carried out via the <i>insmod</i> ADC.o command. It can be removed by the command <i>rmmod</i> ADC. This also requires that the string <i>kernel_version</i> be defined in the driver as <i>static char * kernel_version= UTS_RELEASE;</i>. </p>

<p>If the kernel complains of mismatched version, the module can be installed using <i>insmod -f ADC.o</i>. The <i>init_module</i> does the job of testing and registering the ADC driver with the kernel.</p>

<h3>Using the ADC</h3>

<p>Once the registration is done, it is simple to use the ADC. If you want to use the functions we have written (in ADC.c), simply make a call like <i>adc(CHANNEL_NUMBER, DEVICE_OPEN)</i>, followed by any number of calls to <i>adc(CHANNEL_NUMBER, DEVICE_READ),</i> closed with an <i>adc(CHANNEL_NUMBER, DEVICE_CLOSE)</i>, then repeat the process with any channel (0-7). As currently implemented, the code allows only one user process to access any one channel of the ADC at a given time. The various channels on the ADC are configured as single-ended, unipolar inputs.</p>

<p>The other way to use the ADC is to open (with the system call <i>open)</i> the device file corresponding to the required channel number in /dev directory. The files are named /dev/adc0-/dev/adc7 and are made using the <i>mknod </i>command (<i>mknod /dev/adc0 c MAJOR MINOR</i>) as a superuser. Eight such files are made with the same major number (in this case, 31) and different minor numbers (0-7) for the eight channels of the ADC. If the <i>open</i> returns True, then you can read two _unsigned <i>char</i>s from the buffer, obtained using a read call on the file descriptor returned by <i>open</i>. These can be reassembled to form the actual output, after typecasting to an <i>int</i>. The device file must be  closed with a <i>close()</i> call.</p>

<p>There are two ways of accessing the ADC. USE_ADC.c (also available electronically) shows how to access the device using the user function call. SYS_ADC.c (available electronically) shows how to access the device using the system call <i>open</i>.</p>

<p>One application for the SanSon DAS is as a temperature recorder. We used this data-acquisition system to record the ambient temperature of the surroundings using the circuit schematic in <a name="rf2"><a href="9802ff2.htm">Figure 2</A> and the user code in log_temp.c. The code accesses the ADC channel 3 using the function <i>adc()</i> in adc.c. <a name="rf3"><a href="9802ff3.htm">Figure 3</A> is a sample temperature record with this setup. </p>

<h3>Acknowledgments</h3>

<p>Ulrich Raich at CERN, Geneva, Switzerland was the first to show us the tricks of writing device drivers. His lecture notes on real-time control at the ICTP workshop in 1994 at Trieste, Italy, have helped us a lot in our work. The facilities at IUCAA, Pune, India, have been a great help in finishing this work rapidly. We also acknowledge the excellent work of the world-wide Linux hacker community.</p>

<h3>References</h3>

<p>Balluder, Karsten et al. "Selecting an Operating System, Part IV: Linux," <i>Computers in Physics</i>, January/February 1996.</p>

<p>LinuxLab Project web site: http://www.fu-berlin.de/~clausi.</p>

<p>Gadre, Dhananjay V. "Multichannel 12-bit ADC connects to PC," Design Ideas, <i>EDN, </i>April 25, 1996.</p>

<p> --  --  -- . "The Parallel Adapter as a Host Interface Port," <i>DDJ</i>, April 1996.</p>

<p>MAX186 Data Sheets, MAXIM Integrated Products. </p>

<p>Raich, Ulrich. "Linux Device Drivers," Lecture Notes, IIIrd ICTP college on Real-Time Control, ICTP, Trieste, 1994.</p>

<p>Templon, Jeffery A. "Evaluation of PC/ LINUX Systems for use as a Scientific Workstations," <i>Computers in Physics</i>, January/February 1996.</p>

<p><b>DDJ</b></p>


<H4><a name="l1">Listing One</H4>

<pre>/* testport.c *//* compile as: gcc -O testport.c */
/* Execution is possible only as a superuser*/
<p></p>
#include &lt;asm/io.h&gt;
#include &lt;asm/segment.h&gt;
#include &lt;asm/system.h&gt;
#include &lt;unistd.h&gt;
<p></p>
int ioperm();
<p></p>
#define port_add 0x378
<p></p>
void main()
{
unsigned char test_value;
int ret_value;
ret_value=ioperm(data_port, 3, 1); 
<p></p>
if ( ret_value == -1 ) 
                     {
                     printf("Cannot get I/O permission\n");
                     exit(-1);
                     }
outb(0x55,port_add);
<p></p>
test_value=inb(port_add);
printf("\nValue at Data port= %x\n", test_value);
test_value=inb(port_add+1);
printf("\nValue at the Status Port= %x\n", test_value);
test_value=inb(port_add+2);
printf("\nValue at Control Port= %x\n", test_value);
}
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>/* linux/drivers/char/mem.c *  Copyright (C) 1991, 1992  Linus Torvalds
 */
  ...
int chr_dev_init(void)
{
    if (register_chrdev(MEM_MAJOR,"mem",&amp;memory_fops))
        printk("unable to get major %d for memory devs\n", MEM_MAJOR);
    rand_initialize();
    tty_init();
#ifdef CONFIG_PRINTER
    lp_init();
#endif
#if defined (CONFIG_BUSMOUSE) || defined (CONFIG_82C710_MOUSE) || \
    defined (CONFIG_PSMOUSE) || defined (CONFIG_MS_BUSMOUSE) || \
    defined (CONFIG_ATIXL_BUSMOUSE)
   mouse_init();
#endif
#ifdef CONFIG_SOUND
    soundcard_init();
#endif
#if CONFIG_QIC02_TAPE
    qic02_tape_init();
#endif
#ifdef  CONFIG_SANSON_ADC
    adc_init(); /* Here is where our device driver is initalized */
#endif
    return 0;
}
 ...
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
