<html>
<META NAME="year" CONTENT="1998">
<head>
<title>Dr. Dobb's Journal February 1998: TclBlend: Blending Tcl and Java</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>TclBlend: Blending Tcl and Java</h1>

<p><i>Dr. Dobb's Journal</i> February 1998
</p>
<h2>Manipulating classes for testing purposes</h2>

<h3>By Scott Stanton</h3>

<I>Scott works at the Sun Microsystems Laboratories division of Sun Microsystems Inc. He can be reached at scott.stanton@ eng.sun.com. </I>

<hr>

<p>Traditionally, Tcl has been a two-language solution. Tcl scripts take advantage of domain-specific extensions implemented in C. Over the last few years, Tcl has evolved into a portable scripting solution that lets you write a single script that runs without modification on Windows, Macintosh, and most UNIX-based systems. Unfortunately, the second half of the solution, C, is much less portable. Java, with its "write once, run anywhere" philosophy, is the obvious choice for a companion language to Tcl. To address the concerns of extension writers and take advantage of the new systems being designed for Java, we wrote TclBlend.</p>

<p>TclBlend provides two new capabilities to the Tcl system. First, TclBlend introduces new Tcl commands that let you directly manipulate Java objects without having to write any Java code. The reflection classes in JDK 1.1 make it possible to invoke methods and access fields on arbitrary objects. For more information on the reflection API, see "Java Reflection," by Paul Tremblett, <i>DDJ</i>, January 1998 (available electronically; see "Resource Center," page 3). TclBlend takes advantage of these capabilities to provide a dynamic interface to Java. In addition, TclBlend provides access to the Tcl interpreter interfaces through a set of Java classes. Using these classes, you can evaluate scripts and add commands to the Tcl interpreter.</p>

<p>TclBlend has a number of potential uses in environments where groups are currently using Java or are considering adopting Java for future projects. Having an interactive interpreter that allows full access to the Java class interfaces makes exploratory programming more feasible. The immediate feedback and short turnaround time is ideal for prototyping and rapid development. Because of its ease of integration into both C and Java code, TclBlend makes Tcl an excellent way to migrate existing code into a Java environment.</p>

<p>In this article, I'll describe TclBlend and show how you can use it to manipulate the public interface of a class for black-box testing purposes. For development teams already invested in Java, TclBlend makes a good harness for writing testing scripts. The standard Tcl distribution comes with an extensive test suite that contains a highly useful generic testing framework. In testing our own Java code, we were able to use the generic test facility and the TclBlend commands to build a set of coverage and regression tests as we were writing the Java code. If we had needed to write our tests in Java, we probably would not have had time to actually write the code we were supposed to test.</p>

<p>The TclBlend sources, as well as binaries for Solaris and Windows NT, are available at http://sunscript.sun.com/java/ and from <i>DDJ</i> (see "Resource Center," page 3).</p>

<h3>Using Java from Tcl: Reflection</h3>

<p>TclBlend contains a new Tcl package called "java" that adds a number of new commands to the Tcl interpreter. These commands hide the details of using the reflection APIs. To load the package into an interpreter, a script must issue the "package require java" command. When the package is loaded, it checks to see if there is already a Java Virtual Machine (JVM) running in the current process. If no JVM exists, it starts a new one; otherwise, it simply attaches to the existing one. Once TclBlend has successfully attached to a JVM, it creates a number of Tcl commands in the "java" namespace.</p>

<p>To test a Java class, we first need some way of getting an instance of the class to test. The <i>java::new</i> command takes the name of a constructor and the arguments to the constructor, and returns a newly allocated object. In <a name="re1"><a href="9802de1.htm">Example 1</A>(a), the script creates a new instance of the <i>Simple</i> class, passing the string a "new value" as the argument to the constructor. The result of the call to <i>java::new</i> is an object handle that refers to the new instance of the <i>Simple</i> class (see <a name="rl1"><a href="9802d.htm#l1">Listing One</A></p>

<p>Object handles returned by <i>java::new</i> act just like object references in Java. An object handle can be passed as an argument, and it can also be used as the object in a method call. If an object handle appears where a Tcl command is expected, the first argument to the command is taken as a method name and the remaining arguments are passed to the method. <a href="9802de1.htm">Example 1</A>(b) shows how a script can create an object, then use the object handle to invoke a method on the object. The return value of the method call is used as the result of the Tcl command.</p>

<p>In some cases, a script may need to test a class that contains overloaded methods. TclBlend tries to pick the right method heuristically, based on the number of arguments passed by the script. Unfortunately, this doesn't always work because some calls are ambiguous. For instance, <a name="re2"><a href="9802de2.htm">Example 2</A>(a) illustrates a common situation where there are multiple constructors that take the same number of arguments. In Java, these two constructors are distinguished at the call site by the type of the objects that are passed in.</p>

<p>In Tcl, everything is a string, so it isn't possible to tell if a string like "42" is really an integer or a string constant. In such cases, a script must indicate to TclBlend which of the overloaded methods to use. <a href="9802de2.htm">Example 2</A>(b) illustrates how a script can identify which constructor should be used. In place of the name of the method or constructor, the script can pass a signature list that consists of the method name followed by the types of the arguments. TclBlend uses the signature list to pick the correct method.</p>

<p>TclBlend provides several other new commands that make using Java classes from Tcl more convenient. There are commands for setting and getting fields of objects, invoking static methods, and introspecting on the Java class hierarchy. <a name="rt1"><a href="9802dt1.htm">Table 1</A> summarizes the new commands provided by TclBlend. Most of these commands operate on Java object handles or class names like the commands we've already seen.</p>

<h3>Dynamic Testing</h3>

<p>With just <i>java::new</i> and method-calling operations, it is possible to create fairly sophisticated test scripts. <a name="re3"><a href="9802de3.htm">Example 3</A> is a table-driven test script that creates an instance of the <i>Simple2</i> class (see <a name="rl2"><a href="9802d.htm#l2">Listing Two</A>), then checks the return values of all of the <i>get</i> methods to verify that the fields were set correctly. This script demonstrates two important features of the TclBlend system. </p>

<p>First, the names of the accessor methods are generated dynamically from the <i>testdata</i> variable. The script computes the name of the method by concatenating the contents of the <i>name </i>variable (<i>Prop1</i>, for instance) with the string <i>get</i>. The resulting string is then used to determine which method to invoke. Because TclBlend uses the reflection mechanism, the exact method name does not need to be known until run time.</p>

<p>The second detail to notice is how the script treats the various primitive types. Integers, Strings, and Boolean values are passed into the method-invocation line with no explicit type conversions. TclBlend handles type conversions automatically, based on the signature of the method being invoked. So, when the script calls <i>getProp1</i>, TclBlend determines that an <i>int</i> value is needed, and it converts the literal "42" into the correct integer value before passing it to the method. Later, when the same script line calls <i>getProp3</i>, TclBlend converts the argument to a Boolean. TclBlend performs automatic conversions for all of the primitive types and <i>java.lang.String</i>. All other types are treated as object handles and obey the usual Java type rules.</p>

<p>The combination of dynamic method selection and automatic type conversion is extremely useful and can save a lot of coding time. Operations that might require several separate statements with explicit casts in Java can be written more succinctly and with less repetition using TclBlend. The cost of this convenience is a lack of static type checking. If you make type-related mistakes in your Tcl code, you won't notice until you get an error at run time.</p>

<h3>Error Handling</h3>

<p>So, what happens if a test script causes the Java code to throw an exception? TclBlend catches all exceptions thrown by Java, including run-time exceptions like <i>java.lang.NullPointerException</i>. The Java exceptions are converted into Tcl errors so they can be handled in the normal way (using the <i>catch</i> statement). The string representation of the exception is returned as the result of the method invocation. In addition, the exception object is stored in the <i>errorCode</i> global variable in case a script needs access to more information.</p>

<p><a name="re4"><a href="9802de4.htm">Example 4</A> illustrates how a script might process an exception that was thrown during a method invocation (<a name="rl3"><a href="9802d.htm#l3">Listing Three</A> presents <i>Simple3</i>). When the <i>Simple3.fails()</i> method throws an <i>IllegalArgumentException</i>, the object command generates a Tcl-level error. The <i>catch</i> statement traps the error and stores the error message in the <i>msg </i>variable. The script displays the message to the user, then uses the exception object to print a Java stack trace. The stack trace usually contains enough information to pinpoint the problem fairly quickly.</p>

<h3>Using Tcl from Java</h3>

<p>So far, all of the classes discussed have had fairly simple functional interfaces. Not all classes are this straightforward. Often, an API contains interfaces that the caller is expected to implement in order to receive callbacks from some object. This poses a special challenge for testing, since a typical test suite may need to create dozens of different callbacks to cover all of the interesting cases for just a single interface. Even if an API has as few as five different callback interfaces, the number of special classes needed for testing purposes can quickly become intractable.</p>

<p>A better solution is to write a single class for each interface that hands control over to a Tcl interpreter for further processing. To do this, however, there needs to be a way of telling the Tcl interpreter to evaluate a script from Java code. TclBlend contains the <i>tcl.lang.Interp</i> class, which provides interfaces for evaluating scripts, getting and setting variables, and adding new commands to the interpreter.</p>

<p>The <i>tcl.lang.Interp</i> class encapsulates the interfaces used to create and manipulate Tcl interpreters from Java. The constructor for the <i>Interp</i> class initializes a new interpreter context. The <i>Interp</i> class (see <a name="rl4"><a href="9802d.htm#l4">Listing Four</A>) provides several methods for modifying the state of an interpreter. The <i>eval(String)</i> method takes a script and executes it inside the interpreter. The result of the script is stored inside the interpreter object. The <i>getResult()</i> method retrieves the result of the last script execution. If an error occurred during the execution of the script, the <i>eval</i> method will throw a <i>tcl.lang.TclException</i>, and the result will contain an error message.</p>

<h3>Manipulating Tcl Values</h3>

<p>In Tcl, all values are fundamentally strings. This contributes to the ease with which Tcl manipulates different data types. However, for performance reasons, Tcl caches alternate forms for the various strings in scripts. For example, once the string "4.367" has been converted to a floating-point number, it is cheaper to keep the numeric representation around rather than reparsing the string each time. For this reason, all values in Tcl are stored as instances of the <i>tcl.lang.TclObject</i> class, which encapsulates a string and one alternate representation of the string. Once a value has been retrieved in a particular form, the parsed value is cached in the <i>TclObject</i> so that it does not have to be reparsed the next time it is needed.</p>

<p>The string representation of a <i>TclObject</i> can always be retrieved using the <i>toString()</i> method. Other representations are retrieved by calling type-specific methods, such as <i>TclInteger.get(obj),</i> which returns an <i>int</i> value. Tcl supports several types of value, including some complicated types like <i>TclList</i>. One of the more important types for testing Java code is the <i>ReflectObject</i> type, which represents a Java object handle like those returned by <i>java::new</i>. The <i>ReflectObj</i>ect.newInstance(Interp, Object) static method returns a new <i>TclObject</i> that represents a given Java object.</p>

<h3>Handling Callbacks from Tcl</h3>

<p><a name="rl5"><a href="9802d.htm#l5">Listing Five</A> demonstrates how to put all of this together to write a wrapper class to use in a callback interface. The <i>TestActionListener</i> class implements the AWT <i>ActionListener</i> interface in a completely generic fashion. A Tcl script can create a new <i>TestActionListener</i> instance, specifying a script that should be run in an interpreter. When an <i>ActionEvent</i> is delivered to an instance of this class, it puts the <i>ActionEvent</i> object into the "event" Tcl variable in the interpreter, then calls the script that was specified in the constructor. This class needs to be written only once because its behavior is determined by the script that is passed to it at creation time.</p>

<p>In <a name="rl6"><a href="9802d.htm#l6">Listing Six</A>, you can see how a Tcl script can use this wrapper class to bind a script to an event generated by an AWT <i>Button</i> object. The example code creates a trivial AWT application containing a single <i>Button</i> instance. It then creates a new <i>TestActionListener</i> instance, passing in both the current interpreter handle and a script to be executed. Rather than creating a new <i>Interp</i> instance, the script uses the <i>java::getinterp</i> command to retrieve an object handle for the current interpreter. Once it has a new <i>TestActionListener</i> instance, the test script calls <i>addActionListener</i> to attach the wrapper object to the <i>Button</i> instance.</p>

<p>When the button is pressed, AWT sends an <i>ActionEvent</i> to the button object. The button then calls the <i>actionPerformed</i> methods of all of the registered listeners, causing the action script to be invoked. In this test case, the script simply compares the action command with the expected value and indicates success or failure.</p>

<h3>Future work</h3>

<p>TclBlend, even in its current prefinal state, is a useful addition to your programming toolchest if you are trying to produce Java code under today's "web-time" constraints. The TclBlend project is working to ensure that you can benefit from the flexibility that the two-language Tcl solution offers.</p>

<p>We are planning to take TclBlend toward direct JavaBean support. By the time you read this article, TclBlend should have support for manipulating Bean properties and binding scripts to Bean events. It is our intention that TclBlend be a full Bean-hosting environment.</p>

<p>We also plan to make more of the Tcl C-library interfaces available to Java programmers. The current implementation contains everything needed to write new Tcl commands in Java, but not much more than that.</p>

<p>In support of the "100% Pure Java" effort, we are working on a version of Tcl that will run in a Java-only environment. This project is called "Jacl" and is based on work done by Ioi Lam while he was at Cornell University. This work should make TclBlend a viable strategy even for environments where no native code is allowed.</p>

<p><b>DDJ</b></p>




<H4><a name="l1">Listing One</H4>

<pre>public class Simple {    public Simple(String s) {
        contents = s;
        }
        public String toString() {
        return contents;
    }
    public String contents = "default value";
}
<p></p>
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>public class Simple2 {    public Simple2(int arg1, String arg2, boolean arg3) {
        ival = arg1;
        sval = arg2;
        bval = arg3;
    }
    public int getProp1() { return ival; }
    public String getProp2() { return sval; }
    public boolean getProp3() { return bval; }
<p></p>
    private int ival;
    private String sval;
    private boolean bval;
}
</pre>
<P>
<a href="#rl2">Back to Article</A>
</P>
<H4><a name="l3">Listing Three</H4>

<pre>public class Simple3 {    public void fails() {
        throw new IllegalArgumentException("Bad argument");
    }
}
</pre>
<P>
<a href="#rl3">Back to Article</A>
</P>
<H4><a name="l4">Listing Four</H4>

<pre>public class Interp {    public Interp();
    public void eval(String script) throws TclException;
    public void setVar(String name, TclObject value) throws TclException;
    public TclObject getVar(String name) throws TclException;
    public TclObject getResult();
}
</pre>
<P>
<a href="#rl4">Back to Article</A>
</P>
<H4><a name="l5">Listing Five</H4>

<pre>import java.awt.event.*;public class TestActionListener implements ActionListener {
    public TestActionListener(tcl.lang.Interp i, String s) {
        interp = i;
        script = s;
    }
    public void actionPerformed(ActionEvent e) {
        try {
            interp.setVar("event",
            tcl.lang.ReflectObject.newInstance(interp, e), 0);
            interp.eval(script);
        } catch (tcl.lang.TclException te) {
        System.out.println("error in ActionListener script: "
            + interp.getResult());
        }
    }
    private tcl.lang.Interp interp;
    private String script;
}
</pre>
<P>
<a href="#rl5">Back to Article</A>
</P>
<H4><a name="l6">Listing Six</H4>

<pre>set b [java::new java.awt.Button "Quit"]set f [java::new java.awt.Frame "Demo"]
$f {add java.awt.Component} $b
$f pack
$f show
<p></p>
set al [java::new TestActionListener [java::getinterp] {
    if {[string compare [$event getActionCommand] "Quit"] == 0} {
        puts "test succeeded"
    } else {
        puts "testfailed"
    }
}]
$b addActionListener $al
</pre>
<P>
<a href="#rl6">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
