<html>
<META NAME="year" CONTENT="1998">
<head>
<title>Dr. Dobb's Journal February 1998: Flexible System Control and Special-Purpose Languages</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Flexible System Control and Special-Purpose Languages</h1>

<p><i>Dr. Dobb's Journal</i> February 1998
</p>
<h2>Special circumstances demand special solutions</h2>

<h3>By Russell W. Mello</h3>

<I>Russ, an engineer with Micrion Corp., can be contacted at rmello@eng.micrion.com.</I>

<hr>
Sidebar:<a name="rs1"></A> <a href="9802gs1.htm"><I>Flex and Bison</I></A>
<HR>
<p>In any software-development project, proper design dictates that customizable parameters be easily accessible to allow changes to the system. That works fine for, say, entering limits or defining a set point. But what if the sequence of events changes? What happens when the fundamental structure of the process that you are trying to engineer changes?</p>

<p>That was the problem I faced at Micrion when designing software for a machine that repairs large area flat-panel displays. (Micrion designs and manufactures focused ion beam systems for use in mask repair, failure analysis, micromachining, magnetic head trimming, circuit modification, and the like.) The machine uses two lasers -- one to remove short circuits and another to react with a gas that deposits material on the surface, closing an open circuit.</p>

<p>The main problem was in a deposition system that required the control of several pumps and valves, which, from one process to the next, could be different. The output of transducers would have to direct the flow of control. The status of devices would have to be polled. There would also be a need to wait a predetermined amount of time before continuing to allow pressures to change. A timeout was also required to prevent the vacuum system from becoming deadlocked. In other words, the vacuum system had to be programmable.</p>

<p>Clearly, I needed a way to change the sequence of events in a predefined process while the system was running. It occurred to me that a special-purpose programming language might satisfy my design goals. However, if I was going to write a custom programming language, I wanted to get the most bang for the buck and reuse as much code as possible on other systems that Micrion had in place. But because the hardware was different on those systems, there would have to be different device-control methods. There was also the issue of device availability: There may be a common set of devices that the language could support, but the devices might not be available on some systems or the device might not automatically be detected.</p>

<p>Consequently, I wrote Micrion's Vacuum Command Language (Mvcl) to address these design issues. <a name="rf1"><a href="9802gf1.htm">Figure 1</A> is a block diagram of the various layers that make up Mvcl. The source code for Mvcl is available electronically; see "Resource Center," page 3.</p>

<h3>Choosing Language Statements</h3>

<p>What types of statements did Mvcl require? Obviously, statements were needed to open and close valves, start and stop pumps, and so on. <a name="rt1"><a href="9802gt1.htm">Table 1</A> lists the Mvcl language components by category. Program flow could be influenced from the system, which meant that Mvcl would have an <i>if-then-else</i> construct. If Mvcl was going to have <i>if-then-else</i> blocks, comparisons would have to be added. There is no point in adding an <i>if</i> statement if you can't compare two values. Where would those values be stored? Well, Mvcl would need variables as well. What started out as a simple programming language was quickly changing into a complex one. I was learning that there is a minimum set of features a special-purpose programming language must have to be useful.</p>

<p>One of the benefits of designing your own programming language is that you can tailor the statements to meet your requirements. The Mvcl <i>waitfor</i> statement is a good example. One of the most common activities in working with vacuum systems is to open or close a valve and wait for a pressure change. Without the <i>waitfor</i> statement, a Mvcl script might look like <a name="re1"><a href="9802ge1.htm">Example 1</A>. The transducer must be repeatedly read and tested to see if the pressure set point has been met. Contrast that with the script in <a name="re2"><a href="9802ge2.htm">Example 2</A>, where the <i>waitfor</i> statement does all of the work.</p>

<p>I chose statements that can handle either a class of devices or an action that is common across many types of devices. The <i>read</i> statement in Mvcl uses the latter method. The <i>read</i> statement is not device specific; the same <i>read</i> command can read from all of the devices that provide read-back capability. The Mvcl <i>open</i> statement uses the former method: <i>open</i> operates only on valve devices.</p>

<p>One goal of writing your own programming language is to create a language ideally suited to the problems you are solving. You only choose statements that have a direct benefit to your system. Remember, you are not writing a general-purpose programming language. Rather, you are writing a language that will help you express the solution to a specific problem.</p>

<h3>Lexer and Parser Implementation</h3>

<p>I used Flex and Bison to build the lexical analyzer and grammar parser. The lexer (Flex) and parser (Bison) work together to read and convert the input stream. <a name="rl1"><a href="9802g.htm#l1">Listing One</A> resents the parser specification. (For more information, see the accompanying text box entitled "Flex and Bison.")</p>

<p>The lexer splits the input stream into tokens. A token is an integer representing an element read from the input stream. The lexer accomplishes this by matching the input to a regular expression. A regular expression is a way to describe a pattern using a set of rules. To illustrate, I'll use the Mvcl <i>wait</i> statement as an example. The syntax for the Mvcl <i>wait</i> statement is <i>wait time-in-seconds;</i>, where <i>time-in-seconds</i> is a real number.</p>

<p>As the lexer receives each character from the input stream, it tries to match the growing number of characters to one of the regular expressions. In this case, the regular expression for the <i>wait</i> keyword is <i>wait</i>. When the lexer receives the sequence of characters <i>w-a-i-t</i>, it matches the regular expression in the flex specification. Each time a regular expression is matched, Flex executes the actions for the matched rule. An action can be any valid set of C statements. For the <i>wait</i> keyword, the specified action is simply to return the token WAIT to the parser.</p>

<blockquote>
<PRE>{wait}  {
    return( WAIT );
   }
</PRE></blockquote>

<p>The parser receives the token, pushes it onto its stack, and calls the lexer for the next token. The next expected token is a real number. The specified action for a real number is to convert the ASCII text into a double, store the converted value in a data structure that is common to the lexer and parser, and return the REAL token to the parser.</p>

<blockquote>
<PRE>{real}  {
      yylval.real = atof( yytext );
    return( REAL );
   }
</PRE></blockquote>

<p>Again, the parser receives the token, pushes it onto its stack, and calls the lexer for the next token. The next expected token is a semicolon (;). Like C, Mvcl uses a semicolon to delimit a line. The action for a semicolon is:</p>

<blockquote>
<PRE>{semi}  {
    return( SEMICOLON );
   }
</PRE></blockquote>

<p>All the while, the parser has been trying to match input as well. The job of the parser, like that of the lexer, is to match its input to a set of rules. The rules of a language are called a "grammar" and the parser is responsible for checking grammar. The parser is unable to match the rule for the <i>wait</i> statement until it receives the SEMICOLON token.</p>

<blockquote>
<PRE>wait_statement:  WAIT REAL
		   SEMICOLON
   	 { if( BuildMvclWaitNode
	 ( prog, $2 ) )
 	 YYABORT;
   }
;
</PRE></blockquote>

<p>The action for the <i>wait</i> statement is not executed until all of the components of the statement have been received and are syntactically correct. In this case, a node has been built for the Mvcl <i>wait</i> statement.</p>

<h3>Mvcl Data Structures</h3>

<p>Mvcl encapsulates the concept of a program into the data structure <i>MvclProgramList</i> (see <a name="rf2"><a href="9802gf2.htm">Figure 2</A>). The program list contains pointers to the head and tail of a linked list of <i>MvclProgramNode</i> nodes. A program node is a union of all possible Mvcl statements. Every Mvcl statement has an associated data structure responsible for holding all of the data that can be used by the statement. The data might be a single integer as in the <i>open</i> statement or more complex data used in the <i>waitfor</i> statement. Each node represents an Mvcl statement that was parsed from the input source.</p>

<p>Each statement in Mvcl has its own build routine, which creates the program node. Most build routines follow the same format. Device requests are first validated against a database of available devices. If the device is available, space is allocated for the program node. The node is initialized with the statement data and the node is added to the list. If the device is not present then compilation stops and an error message is issued.</p>

<p>The instruction pointer is also maintained by the program list. It always points to the instruction to be executed by the next iteration of the interpreter. For most of the Mvcl statements the instruction pointer points to the next node in the list. For the flow control statements, the instruction pointer is used to branch around blocks of code in the <i>if-then-else</i> construct, or to repeat blocks of code in the <i>for</i> loop.</p>

<p>The program list also contains a pointer to the data type <i>MvclSymbolTable</i>. The symbol table is a linked list of <i>MvclSymbol</i> symbols. A <i>MvclSymbol</i> is simply a name/value pair, where the value is a union of the data types that Mvcl supports and the variable name. A symbol table entry is allocated to hold each variable name as it is encountered. To prevent duplicate entries, a linear search through the table for the variable is done each time a variable is added. Mvcl scripts typically do not have many variables, so the linear search is more than adequate.</p>

<p>The final component in the program list is a pointer to an instance of the <i>MvclRunTimeStack</i> data type. The stack is a linked list of <i>MvclRunTimeStackEntry</i> entries that each contain a reference to a <i>MvclSymbol</i>. The stack is used to hold the addresses of nested Mvcl <i>if </i>and <i>for </i>statements while compiling the program list. The stack could also be used when I get around to adding subroutines to Mvcl.</p>

<h3>Interpreter, Compiler, or Both?</h3>

<p>I felt that there was one significant setback in using an interpreted language to operate hardware components. What happens if a syntax error or a failed device verification stops the interpretation? Several valves may have been opened, pumps could have been started. The system could be left in an unsafe state. Granted, once the script has been debugged that may not be an everyday occurrence. But it is certainly a possibility.</p>

<p>With that in mind, Mvcl compiles the script into a program list, verifying as much of the program as possible. The list can later be passed through the interpreter to actually run the program.</p>

<p>Compiling a script into an intermediate form gives the added benefit that the program runs much faster. There can be situations where the response time of a programming language is too slow. The largest contributor to the lack of response time is usually the lexer and parser. The compilation removes that lag.</p>

<p>The interpreter itself is a small <i>while </i>loop that advances through the program list based on the value of the instruction pointer. At each node, the statement type for the node is an index into a dispatch table that calls the interpreter function for that statement. Interpretation continues until either an <i>end</i> or a <i>return</i> statement is encountered. <a name="rl2"><a href="9802g.htm#l2">Listing Two</A> shows the implementation.</p>

<h3>Replaceable Device Methods</h3>

<p>A device method is an interface between Mvcl and the specific device control functions for the hardware. The method is responsible for converting requests for an Mvcl-specified device class and the device ID into the appropriate hardware-level function.</p>

<p>Mvcl is stored as a library. The library contains the default device methods for all of the devices supported by Mvcl. The default device behavior is simply to print a warning to <i>stdout</i> that a default-device method has been called.</p>

<p>You can override the functions in the library by creating functions with the same name in your applications code. The linker will resolve your function names first using your code in place of the default library method.</p>

<p>As an example, suppose that you wanted Mvcl to run on two separate hardware platforms (by sheer coincidence, that's what I wanted to do). For argument's sake, let's say that one of the systems contains only valves. The other system has both pumps and valves. On the former system, two functions would have to be overridden, <i>MvclOpenValve()</i> and <i>MvclCloseValve().</i> The remaining device actions resolve to the default method, which will never be called, but the linker will need to resolve the reference. On the latter system (which has valves and pumps), two additional functions are written; <i>MvclStartPump()</i> and <i>MvclStopPump()</i>.</p>

<h3>Conclusion</h3>

<p>Preparing for the unexpected changes that a major software development effort has in store is always a concern. If the software is controlling hardware, the job is even tougher. There are hardware changes to contend with as well as the development of a process that the software is supposed to control but may not fully exist.</p>

<p>Hardware changes occur less frequently than software changes (or so I'm told). But they do occur. And, most certainly, a process can't be completely developed until the system is fully integrated. Special-purpose programming languages provide a high level of flexibility to respond to those kinds of changes.</p>

<p>Special-purpose programming languages are an excellent model for how to design reusable software. A large part of Mvcl is not platform specific. Mvcl operates on a generic vacuum system made up of a finite set of devices. The specifics of a given vacuum system are buried in its device methods. Everything else remains the same. There are certain situations in which code reuse should be a foremost design consideration. Mvcl is one of those situations.</p>

<h3>References</h3>

<p>Kaplan Randy. <i>Constructing Language Processors For Little Languages</i>, John Wiley &amp; Sons, 1994.</p>

<p>Flex and Bison manual pages, Free Software Foundation, 1988.</p>

<p>Levine, Mason, and Brown. <i>Lex &amp; Yacc</i>, O'Reilly and Associates, 1990.</p>

<p>Aho, Sethi, and Ullman. <i>Compilers Prin</i>cipals, Techniques, and Tools, Addison-Wesley, 1986.</p>

<p><b>DDJ</b></p>


<H4><a name="l1">Listing One</H4>

<pre>%{/*                         MICRION SOFTWARE DEPT.
 *          Copyright (c) 1994 by Micrion Corp. All rights reserved.
 * FILE NAME    : mvcl.y
 * AUTHOR       : R. Mello
 * DATE WRITTEN : 12/12/94
 * VERSION      : 1.00
 * USAGE        : grammar processor for the mvcl programming language
 *  This file contains a yacc grammar for the micrion ( M ) vacuum
 * ( V ) command ( C ) language ( L ).
 */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;malloc.h&gt;
#include &lt;mvcl_int.h&gt;
<p></p>
/* local globals */
static MvclProgramList *prog = (MvclProgramList *)NULL;
static MvclProgramNode *Node;
static char            *tmp;
static int             ret;
static MvclPrintItem   *plist = (MvclPrintItem *)NULL;
%}
<p></p>
%union
  {
   double   real;
   int      integer;
   char     *string;
  }
%token  PROC END
%token  IF THEN ELSE ENDIF
%token  FOR TO DOWNTO ENDFOR
%token  OPEN CLOSE READ SET STATUS WAIT TIMEOUT EXTEND RETRACT
%token  WAITFOR PUMPON PUMPOFF EXIT PERROR PRINT PRETURN
%token  V P HCIG CCIG BT TC NZ PT MFC
%token  NAME SEMICOLON COMPARISON ASSIGNMENT QSTRING IDENTIFIER
%token  SHELL_START STREAM_START STRING_START  INTARG REALARG
%token  INTEGER REAL
%token  UNKNOWN
%token  HELP 
<p></p>
%type &lt;string&gt;  QSTRING
%type &lt;integer&gt; V P HCIG CCIG BT TC NZ PT MFC
%type &lt;string&gt;  IDENTIFIER
%type &lt;integer&gt; dev_class dev_id
%type &lt;integer&gt; COMPARISON
%type &lt;integer&gt; INTEGER
%type &lt;real&gt;    REAL
%type &lt;string&gt;  expr
 
%left '+' '-'
%left '*' '/'
%nonassoc UMINUS
<p></p>
%%
 /* Three grammars can be parsed here. One that will accept 
  * interactive commands. Interpreting each command as it is entered.
  * One that will accept a stream input. Parse the stream into a
  * list of program nodes. Then pass the resultant list through the
  * interpreter. Finally a grammar that will accept input from a string.
  */
combined:       SHELL_START  mvcl_shell
    |       STREAM_START mvcl_stream
        |               STRING_START mvcl_string
    ;
 /* ============== The stream grammar starts here ============== */
mvcl_stream:        proc_statement mvcl_statements end_program
    ;
proc_statement:     PROC QSTRING SEMICOLON
    ;
mvcl_statements:    mvcl_stream_statements SEMICOLON
    |       mvcl_stream_statements SEMICOLON
                        mvcl_statements
    ;
mvcl_stream_statements: status_statement 
        |       read_statement
        |               mvcl_statement
        |               cond_statements
        |               loop_statements
        |       return_statement
        ;
status_statement:   IDENTIFIER ASSIGNMENT STATUS dev_class
                         dev_id
                        {
                         if(BuildMvclStatusNode( prog, $1, $4, $5))
               YYABORT;
            }
    ;
read_statement:     IDENTIFIER ASSIGNMENT READ dev_class dev_id
            {
                         if(BuildMvclReadNode( prog, $1, $4, $5))
               YYABORT;
            }
    ;
cond_statements:       if_statement
        |              if_else_statement
        ;
if_statement:          IF if_test mvcl_statements endif_statement
        ;
if_else_statement:     IF if_test mvcl_statements else_statement
                       mvcl_statements endif_statement
        ;
else_statement:        ELSE
                       {
                        if( BuildMvclElseNode( prog ) )
                          YYABORT;
                       }
        ;
endif_statement:       ENDIF
                       {
                        if( BuildMvclEndifNode( prog ) )
                          YYABORT;
               }
        ;
if_test:               expr COMPARISON expr
                       {
                        if( BuildMvclIfNode( prog, $1, $2, $3 ) )
              YYABORT;
                       }
        ;
loop_statements:       for_statement
        ;
for_statement:         FOR for_args mvcl_statements endfor_statement
        ;
for_args:              IDENTIFIER ASSIGNMENT expr TO expr
                       {
                        if( BuildMvclForNode( prog, $1, $3,
                            MVCL_FOR_TO, $5 ) )
                          YYABORT;
               }
        |              IDENTIFIER ASSIGNMENT expr DOWNTO expr
                       {
                        if( BuildMvclForNode(prog, $1, $3, 
                            MVCL_FOR_DOWNTO,$5))
                          YYABORT;
               }
        ;
endfor_statement:      ENDFOR
                       {
                        if( BuildMvclEndForNode( prog ) )
                          YYABORT;
               }
        ;
expr:                  IDENTIFIER
                       { $$ = $1;
                       }
        |              REAL
                       { $$ = MvclCreateRealSymbol( prog, $1 );
                       }
        |              INTEGER
                       { $$ = MvclCreateIntSymbol( prog, $1 );
                        }
        |              QSTRING
                       { MvclParserError( "Incompatible Types\n" );
                         YYABORT;
                       }
        ;
return_statement:      PRETURN INTEGER
                      {
                        BuildMvclReturnNode( prog, $2 );
                       }
end_program:           END SEMICOLON
    ;
 /* ============= The string grammar starts here ============== */
mvcl_string:           mvcl_string_statements
        ;
mvcl_string_statements: /* empty */
        |               mvcl_shell_commands
        ;
 /* ============= The shell grammar starts here ============== */
<p></p>
mvcl_shell:     mvcl_shell_statements end_shell
   ;
mvcl_shell_statements:  mvcl_shell_commands 
        |       mvcl_shell_commands mvcl_shell_statements
    ;
mvcl_shell_commands:    status_command
        |               read_command
        |               help_command
        |               mvcl_statement
        ;
status_command:         STATUS dev_class dev_id
                        { tmp = MvclGenerateVariable();
                          BuildMvclStatusNode( prog, tmp, $2, $3 );
                        }
    ;
read_command:       READ dev_class dev_id
                        { tmp = MvclGenerateVariable();
              BuildMvclReadNode( prog, tmp, $2, $3 );
            }
    ;
help_command:           HELP
                        { MvclShellHelp();  }
end_shell:      END
               { exit( 0 ); }
    ;
 /* ================ Common grammar elements ================= */
<p></p>
mvcl_statement:     open_statement
    |       close_statement
    |       timeout_statement
    |       set_statement
    |       pumpon_statement
    |       pumpoff_statement
    |       extend_statement
    |       retract_statement
    |       wait_statement
    |       waitfor_statement
        |               print_statement
        |               error
                        { if( MvclGetParserMode() == MVCL_STREAM )
                            YYABORT;
            }
    ;
open_statement:     OPEN V dev_id
            { if( BuildMvclOpenNode( prog, $3 ) )
                            YYABORT;
            }
    ;
close_statement:    CLOSE V dev_id
            { if( BuildMvclCloseNode( prog, $3 ) )
                YYABORT;
                        }
    ;
timeout_statement:  TIMEOUT REAL
            { if( BuildMvclTimeoutNode( prog, $2 ) )
                YYABORT;
            }
    ;
set_statement:      SET dev_class dev_id REAL
            { if( BuildMvclSetNode( prog, $2, $3, $4 ))
                YYABORT;
            }
    ;
pumpon_statement:   PUMPON P dev_id
            { if( BuildMvclPumpOnNode( prog, $3 ) )
                YYABORT;
            }
    ;
pumpoff_statement:  PUMPOFF P dev_id
            { if( BuildMvclPumpOffNode( prog, $3 ) )
                YYABORT;
            }
    ;
extend_statement:   EXTEND NZ dev_id
            { if( BuildMvclExtendNode( prog, $3 ) )
                YYABORT;
            }
    ;
retract_statement:  RETRACT NZ dev_id
            { if( BuildMvclRetractNode( prog, $3 ) )
                YYABORT;
            }
    ;
wait_statement:     WAIT REAL
            { if( BuildMvclWaitNode( prog, $2 ) )
                YYABORT;
            }
    ;
waitfor_statement:  WAITFOR dev_class dev_id COMPARISON REAL
            {
                         if( BuildMvclWaitForNode(prog,$2,$3,$4,$5))
                YYABORT;
            }
   ;
print_statement:        PRINT print_list
                        { ret = BuildMvclPrintNode( prog, plist );
                          /* init for another list. */
                          plist = (MvclPrintItem *)NULL;
                          if( ret )
                            YYABORT;
                        }
        ;
print_list:             print_item
        |               print_item ',' print_list
        ;
<p></p>
print_item:             QSTRING
                        { MvclAddToPrintList( &amp;plist, $1,
                          MVCL_PRINT_STR );
                        }
        |               IDENTIFIER
                        { MvclAddToPrintList( &amp;plist, $1,
                          MVCL_PRINT_IDENT );
                        }
        |               REAL
                        { tmp = MvclCreateRealSymbol( prog, $1 );
                         MvclAddToPrintList( &amp;plist, tmp,
                         MVCL_PRINT_REAL );
                        }
        |               INTEGER
                        { tmp = MvclCreateIntSymbol( prog, $1 );
                         MvclAddToPrintList( &amp;plist, tmp,
                         MVCL_PRINT_INT );
                        }
        ;
dev_class:      V        { $$ = MVCL_VALVE_CLASS;   }
        |       P        { $$ = MVCL_PUMP_CLASS;    }
        |       HCIG     { $$ = MVCL_HCIG_CLASS;    }
        |       CCIG     { $$ = MVCL_CCIG_CLASS;    }
        |       BT       { $$ = MVCL_BT_CLASS;      }
        |       TC       { $$ = MVCL_TC_CLASS;      }
        |       NZ       { $$ = MVCL_NZ_CLASS;      }
        |       PT       { $$ = MVCL_PT_CLASS;      }
        |       MFC      { $$ = MVCL_MFC_CLASS;     }
        ;
dev_id:         /* empty */ { $$ = 0;           }
        |       INTEGER  { $$ = $1;         }
       ;
%%
/***************************************************************/
/* finis */
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>
<H4><a name="l2">Listing Two</H4>

<pre>/*                         MICRION SOFTWARE DEPT. *          Copyright (c) 1995 by Micrion Corp. All rights reserved.
 * FILE NAME    : mvcl_int.c
 * AUTHOR       : R. Mello
 * DATE WRITTEN : 3/18/95
 * VERSION      : 1.00
 * USAGE        : module of the mcvl parser
 * This source file contains the mvcl interpreter.
 */
#include &lt;stdio.h&gt;               /* for NULL, fprintf(), ect...   */
#include &lt;signal.h&gt;              /* for SIGALRM                   */
#include "mvcl.h"                /* for statement ID's            */
#include &lt;mvcl_int.h&gt;            /* for the Mvcl data structures  */
<p></p>
/* uncomment the following line for debugging. */
/* #define MVCL_DEBUG */
<p></p>
/* function prototypes. */
int  MvclInterpreter( MvclProgramList *, int * );
<p></p>
/* Interpreter function dispatch table. */
static  PFI  InterpreterTable[]=
  {
   InterpretOpenStatement,
   InterpretCloseStatement,
   InterpretStatusStatement,
   InterpretSetStatement,
   InterpretReadStatement,
   InterpretTimeoutStatement,
   InterpretPumpOnStatement,
   InterpretPumpOffStatement,
   InterpretExtendStatement,
   InterpretRetractStatement,
   InterpretWaitForStatement,
   InterpretWaitStatement,
   InterpretIfStatement,
   InterpretElseStatement,
   InterpretEndifStatement,
   InterpretForStatement,
   InterpretEndForStatement,
   InterpretNullStatement,
   InterpretPrintStatement,
   InterpretReturnStatement
  };
/******************************************************************/
int  MvclInterpreter(
   MvclProgramList   *program,   /* ptr to the program node list  */
   int               *script_return )
  {
   /* MvclInterpreter() -- This function will interpret a translated
    *     source file. The interpreter will simply traverse the list
    *     of program nodes executing the mvcl program.
    *     RETURNS: 0 for success
    *              1 for failure
    */
   int       result;
   MvclProgramNode *current;
<p></p>
   /* Make sure we have a valid program before we continue... */
   if( program != (MvclProgramList *)NULL )
     {
      #ifdef MVCL_DEBUG
      printf( "Beginning Interpretation...\n" );
      #endif
<p></p>
      /* Let's get started... */
      current = program-&gt;ip;
      /* Enter the interpreter loop. */
      while( current != (MvclProgramNode *)NULL )
        {
         #ifdef MVCL_DEBUG
         printf( "Executing A '%s' Node At Address %p \n",
         MvclStatementTypeToName( current-&gt;StatementType ),
                                  current );
         #endif
<p></p>
         /* based on statement type, dispatch the appropriate function. */
         if( current-&gt;StatementType != END )
           {
            result = (*InterpreterTable[current-&gt;StatementType])
                     ( program, current );
            /* We're done if we see a return statement. */
            if( current-&gt;StatementType == MVCL_RETURN )
              break;
           }
         else
           {
            result = 0;
            break;
           }
         /* test the return value, exit if an error occured. */
         if( result != 0 )
           break;
         /* The next node is based on the instruction pointer. */
         current = program-&gt;ip;
        }
     }
   /* reset the program's instruction pointer to the start of the program. */
   program-&gt;ip = program-&gt;head;
<p></p>
   /* Set the return value. */
   *script_return = program-&gt;return_value;
<p></p>
   return( result );
  }
/******************************************************************/
/* finis */
<P>
<a href="#rl2">Back to Article</A>
</P>



<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
