<html>
<META NAME="year" CONTENT="1998">
<head>
<title>Dr. Dobb's Journal February 1998: The Flashsort1 Algorithm</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>The Flashsort1 Algorithm</h1>

<p><i>Dr. Dobb's Journal</i> February 1998
</p>
<h3>By Karl-Dietrich Neubert</h3>

<I>Karl does basic research in solid-state and atomic physics, biophysical systems, and computer algorithms. He can be reached at karl-dietrich.neubert@usa.net.</I>

<hr>

<p>Many programmers are familiar with the theoretical result that "no sorting algorithm can be faster than <i>O(n log n)</i> on average." But this result assumes that you only have limited information; it assumes you only know how to compare two items. However, what if your keys are the integers from 0 to 100? In that case, you can simply place each item directly into the correct location -- no comparisons are necessary. There are many other situations where you can guess the final position of each item. This month, Karl shows how this basic idea can be used to fashion an <i>O(n)</i> sorting algorithm.</p>

<p> -- Tim Kientzle</p>

<p>Most discussions of sorting algorithms are based on comparing elements. Although it's faster to classify elements, algorithms based on classification suffer because they require considerable auxiliary memory. The Flashsort1 algorithm I present here addresses this problem. It sorts in <i>O(n)</i> time and requires less than 0.1<i>n</i> auxiliary memory to sort <i>n</i> elements. I achieve this by using classification to do the long-range ordering with in-place permutation, then use a simple comparison method for the final short-range ordering of each class. I assume here that the elements are approximately evenly distributed real numbers, although the algorithm can be adapted to other types of data.</p>

<p>The algorithm (see <a name="rl1"><a href="9802n.htm#l1">Listing One</A>) consists of three logical blocks: classification, permutation, and straight insertion. Classification determines the size of each class of elements. Permutation does long-range reordering to collect elements of each class together, and straight insertion does the final short-range ordering.</p>

<h3>Classification </h3>

<p>The whole idea of a classification sort is simple: Assuming the elements <i>A(i)</i> are about evenly distributed, you can compute the approximate final position directly from the element value, with no comparisons. If the maximal element is <i>Amax</i> and the minimal element is <i>Amin</i>, you can compute:</p>

<blockquote><p>
<i>K(A(i))</i>=1+<i>INT</i>((<i>m</i>-1)(<i>A(i)-Amin)/(Amax-Amin))</p>
</blockquote>

<p></i>The result will be a value from 1 to <i>m</i>, which I'll call the class of <i>A(i)</i>. Note that, on average, you have approximately <i>n/m</i> elements in each class. (In fact, the class <i>K</i>=<i>m</i> only has elements equal to <i>Amax</i>, and the remaining classes are slightly larger.)</p>

<p>Since the main part of the algorithm relies on it, I start by computing the actual number of elements in each class. This requires simply scanning the data and counting the total number of elements.</p>

<p>Since I know the size of each class, I can predict where each class will appear in the final array. The vector <i>L </i>is used to track this information. Initially, each <i>L(K) </i>indicates the upper end of the section that will contain the elements in class <i>K</i>. In particular, <i>L</i>(1) is simply the number of elements in class 1, and the final <i>L(m) </i>is equal to <i>n</i>. As I rearrange things, each <i>L(K) </i>is updated.</p>

<p>The first part of the classification is <i>O(n), </i>since it requires scanning the input to find the size of each class. Then there's an <i>O(m) </i>part, which adds up the class sizes to determine the initial <i>L(K) </i>values.</p>

<h3>Permutation</h3>

<p>The next step is to move elements into the correct class. Obviously, whenever I move one element into its new location, I have to move the old element from that location. My code uses a single temporary variable to hold the evicted element. I can then compute its new location and continue until I'm forced to stop.</p>

<p>The first problem is determining where to put each element. Rather than try to place an element <i>A(i)</i> exactly into its final location, I simply compute its class index <i>K</i> and place it into the location indicated by <i>L(K)</i>. I then decrement <i>L(K)</i>. As I move elements into their appropriate classes, these class pointers grow downward.</p>

<p>This process ends when the first class has been filled up. At that time, there are generally still elements that need to be moved because permutations usually consist of several cycles. Therefore, the second problem arises: How do you find those elements that are cycle leaders? Fortunately, it's easy to find such elements, since they're located in the wrong class. I keep a variable <i>j</i> in my implementation and use <i>j</i> to search through the array to find the next item that satisfies the condition <i>j&lt;L(K(A(j)))</i>. The corresponding item <i>A(j)</i> serves as the new cycle leader.</p>

<p>Each item is moved exactly once. I can simply count the total number of moves and stop when I've moved every element. (In fact, I can stop before that; if there's only one element unmoved, it must already be in the right place.)</p>

<p>This process is all <i>O(n)</i>. Each item is moved once, and <i>j</i> scans through the entire array at most once.</p>

<h3>Short-Range Ordering</h3>

<p>Once the permutation step has moved everything into approximately the correct place, you have a partially sorted array to work with. Following Robert Sedgewick (see "Implementing Quicksort Programs," <i>Communications of the ACM</i> 21, 1978), I use a straight-insertion sort over the entire array. Assuming the classes are about the same size, this requires <i>O((n/m)</i><sup>2</sup><i>)</i> time for each class.</p>

<h3>Minimizing Run Time</h3>

<p>By adjusting the number of classes, you can fine tune the overall running time of the algorithm. If you decrease the number of classes, the classification time decreases, but the time for the straight-insertion sort increases. To estimate the optimal number of classes, I start by estimating the total time of the algorithm:</p>

<ul>
  <li>The permutation step is <i>O(n)</i>, as is part of the classification. This contributes <i>a</i>1<img src="dot12.gif" alt="[multiplication dot]" width="6" height="9"><i>n</i> to the total time.
  <li>The rest of the classification is <i>O(m)</i>, contributing <i>a</i>2<img src="dot12.gif" alt="[multiplication dot]" width="6" height="9"><i>m</i> to the total.
  <li>The straight-insertion sort contributes <i>a</i>3<img src="dot12.gif" alt="[multiplication dot]" width="6" height="9"><i>m</i><img src="dot12.gif" alt="[multiplication dot]" width="6" height="9">(<i>n/m</i>)<sup>2</sup>.
</ul>

<p>Here, <i>a</i>1, <i>a</i>2, and <i>a</i>3 are some numbers that I'll determine later. </p>

<p>I can use simple calculus to determine the optimum value. From differentiating <i>t</i>=<i>a</i>1<img src="dot12.gif" alt="[multiplication dot]" width="6" height="9"><i>n</i>+<i>a</i>2<img src="dot12.gif" alt="[multiplication dot]" width="6" height="9"><i>m</i>+<i>a</i>3<img src="dot12.gif" alt="[multiplication dot]" width="6" height="9"><i>m</i><img src="dot12.gif" alt="[multiplication dot]" width="6" height="9">(<i>n/m</i>)<sup>2</sup>, I get <i>dt/dm</i>=<i>a</i>2-<i>a</i>3(<i>n/m</i>)<sup>2</sup>=0. Solving for <i>m</i>, I have <i>m/n</i>=<i><img src="sqrt.gif" alt="[square root]" width="11" height="18"></i>(<i>a</i>3/<i>a</i>2). In particular, I don't need to estimate <i>a</i>1.</p>

<p>By assuming shifts were twice as expensive as comparisons, Nicolas Wirth ("Algorithm and Datenstrukturen," B.G. Teubner, 1983) arrived at <i>a</i>3=3/8 (using some arbitrary unit of time) for the time constant of straight-insertion sorting. Following his lead, I estimated <i>a</i>2=2, which gives an optimal <i>m</i> of 0.43<i>n</i>.</p>

<p><a name="rf1"><a href="9802nf1.htm">Figure 1</A> shows experimental values for the time of the various procedures as a function of <i>m/n</i>. As expected, the permutation part takes the same amount of time, regardless of <i>m</i>. Between about <i>m</i>=0.2<i>n</i> and <i>m</i>=0.5<i>n</i>, there is a broad minimum of the overall time. For larger classes, the straight insertion becomes excessive; and for smaller classes, it takes longer to perform the initial classification. In particular, if <i>m</i>&gt;<i>n</i>, then many classes are empty, and straight insertion gains you no additional time.</p>

<p><a name="rf2"><a href="9802nf2.htm">Figure 2</A> shows the experimental frequency distribution of the run time for the different procedures at fixed <i>n</i> and fixed <i>m/n</i>. The time needed for classification is, of course, constant. The permutation time varies because of the varying time required to locate the next cycle leader. The straight-insertion sort varies depending on the size of each class. The distribution for the total run time reflects the combination of these two distributions.</p>

<p>The total time for Flashsort1 does not depend on the original order; partially ordered or reverse ordered elements are sorted just as fast as randomly ordered ones. However, if the values are not evenly distributed, the run time can increase unpredictably. One way to address this may be to use another classification and permutation step to sort large classes before the final straight insertion.</p>

<h3>Comparison to Other Sorts</h3>

<p><a name="rf3"><a href="9802nf3.htm">Figure 3</A> shows some experimental results on the relative run times. The separate curves indicate the running time of Flashsort1, Heapsort, and Quickersort using sequences of uniform random numbers as test numbers. As expected, the run time of Flashsort1 increases linearly with <i>n</i>. For <i>m</i>=0.1<i>n</i>, Flashsort1 is always faster than Heapsort, and is faster than Quickersort if <i>n</i>&gt;80. For <i>n</i>=10000, Flashsort1 is approximately twice as fast as Quickersort. For <i>m</i>=0.2<i>n</i>, Flashsort1 is about 15 percent faster than for <i>m</i>=0.1<i>n</i>; for <i>m</i>=0.05<i>n</i>, it is about 30 percent slower, but if <i>n</i>&gt;200, it is still significantly faster than Quickersort.</p>

<h3>Discussion</h3>

<p>Flashsort1 sorts by permutation in-situ in <i>O(n)</i> time with only a short auxiliary pointer vector. In "Mathematical Analysis of Algorithms," Donald Knuth remarked "...that research on computational complexity is an interesting way to sharpen our tools for the more routine problems we face from day to day." As he points out, time effective in-situ permutation is inherently connected with the problem of finding the cycle leaders, and in-situ permutation could easily be performed in <i>O(n)</i> time if we were allowed to manipulate <i>n</i> extra "tag" bits specifying how much of the permutation has been carried out at any time. Without such tag bits, he concludes "it seems reasonable to conjecture that every algorithm for in-situ permutation will require at least <i>n log n</i> steps on the average." In this article, I showed how <i>n</i> elements can be put into <i>m</i> property classes with <i>m</i> being only a small fraction of <i>n</i>. Instead of <i>n</i> tag bits, I need only an auxiliary vector of length <i>m</i> to sort the elements into <i>m</i> classes. As a final step, small numbers of partially distinguishable elements are sorted locally within their classes by a conventional sort algorithm.</p>

<h3>Acknowledgment</h3>

<p>I'd like to express my thanks to Christopher McManus of the Veterans Affairs Medical Center in Washington, D.C., for stimulating discussions and helpful comments on the manuscript.</p>

<h3>References </h3>

<p>Duccin, F. "Tri par addressage direct," <i>R.A.I.R.O. Informatique/Computer Science</i> 13, (1979), 225-259.</p>

<p>Feurzeig, W. "Algorithm 23: Math Sort," <i>Communications of the ACM</i> 3, (1960), 601.</p>

<p>Gamzon, E., C.F. Picard. "Algorithme de tri par addressage direct," <i>C. R. Acad. Sc</i>. Paris 269, (1969), 38-41.</p>

<p>Knuth, D.E. "Mathematical Analysis of Algorithms," <i>Information Processing</i> 71, North Holland Publishing, 1972. </p>

<p>Macleod, I.D.G. "An Algorithm for In Situ Permutation," <i>The Australian Computer Journal</i> 2,  (1970), 16-19.</p>

<p>Scowen, R.S. "Algorithm 271: Quickersort," <i>Communications of the ACM</i> 8, (1965), 669-670.</p>

<p>Williams, J.W.J. "Algorithm 232: Heapsort," <i>Communications of the ACM</i> 7, (1964), 347-348.</p>

<p><b>DDJ</b></p>


<H4><a name="l1">Listing One</H4>

<pre>      SUBROUTINE FLASH1 (A. N. L. M)C     SORTS ARRY A WITH N ELEMENTS BY USE OF INDEX VECTOR L 
C     OF DIMENSION M WITH M ABOUT 0.1 N. 
C     COPYRIGHT (C)  K. - D. NEUBERT  1997                           
<p></p>
      DIMENSION A(1),L(1)
C     ============================ CLASS FORMATION ===== 
      ANMIN=A(1)
      NMAX=1 
      DO I=1,N
         IF( A(I).LT.ANMIN) ANMIN=A(I)
         IF( A(I).GT.A(NMAX)) NMAX=I
      END DO
      IF (ANMIN.EQ.A(NMAX)) RETURN
      C1=(M - 1) / (A(NMAX) - ANMIN))
      DO K=1,M  
         L(K)=0
      END DO 
      DO I=1,N
         K=1 + INT(C1 * (A(I) - ANMIN))
         L(K)=L(K) + 1
      END DO
      DO K=2,M
         L(K)=L(K) + L(K - 1)
      END DO
      HOLD=A(NMAX)
      A(NMAX)=A(1) 
      A(1)=HOLD
C     =============================== PERMUTATION ===== 
      NMOVE=0 
      J=1
      K=M
      DO WHILE (NMOVE.LT.N - 1)
         DO WHILE (J.GT.L(K)) 
            J=J + 1 
            K=1 + INT(C1 * (A(J) - ANMIN)) 
         END DO  
         FLASH=A(J)
         DO WHILE (.NOT.(J.EQ.L(K) + 1)) 
            K=1 + INT(C1 * (FLASH - ANMIN))
            HOLD=A(L(K)) 
            A(L(K))=FLASH
            FLASH=HOLD
            L(K)=L(K) - 1
            NMOVE=NMOVE + 1 
         END DO
      END DO
C     ========================= STRAIGHT INSERTION =====
      DO I=N-2,1,-1
         IF  (A(I + 1).LT.A(I)) THEN
            HOLD=A(I)
            J=I
            DO WHILE  (A(J + 1).LT.HOLD)
               A(J)=A(J + 1) 
               J=J + 1 
            END DO
            A(J)=HOLD 
         ENDIF
      END DO
C     =========================== RETURN,END FLASH1 =====
      RETURN
      END  
</pre>
<P>
<a href="#rl1">Back to Article</A>
</P>

<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
