<html>
<META NAME="year" CONTENT="1998">
<head>
<title>Algorithms for High-Precision Finite Differences</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>Algorithms for High-Precision Finite Differences</h1>

<p><i>Dr. Dobb's Journal</i> May 1998
</p>
<h2>Improving the accuracy of numerical methods </h2>

<h3>By Michael Herstine</h3>

<I>Michael is a C++ developer at Northern Research and Engineering Corp. He can be reached at mgh@world.std.com.</I>

<hr>

<p>In developing applications for science and engineering, code reuse is just as desirable as in other areas of software development, but can often have obstacles peculiar to applied mathematics. In particular, it is common to use the results of legacy code as input to new, higher-level algorithms. In practice, this amounts to coding numerical methods where a single function evaluation (from the standpoint of the algorithm) is, in fact, a run of large amounts of code. Often, that code is single-precision legacy Fortran 77, 66, or even Fortran IV.</p>

<p>In such cases, analytic derivatives are not available, and must be estimated. However, the level of error incurred must be considered. Unfortunately, the subject of finite-difference estimates of derivatives is largely absent from the applied mathematics literature. Researchers are typically interested in issues such as convergence rates, radii of convergence, and breadth of applicability of methods. Little attention is paid to the accuracy of results compared to available precision. Numerical experiments are typically performed in double precision, and results reported to between five and seven significant figures. When derivatives are needed, they are usually obtained via forward differencing (to keep the total number of function evaluations low) with some fixed step size. The availability of 16 figures of accuracy makes the error associated with this method acceptable.</p>

<p>In this industry, however, we often don't have the luxury of throwing away half of our significant digits, especially when forced to work with single-precision code. In this article, I'll implement techniques for dealing with this situation, and present the results of numerical experiments. </p>

<p>I encountered the particular development problem that prompted this article while working on a software package that predicts the performance of compressors. Typically, users adjust various parameters (such as RPM, amount of fluid moving through the compressor, or the physical dimensions of the part) in an attempt to achieve peak performance while still meeting design criteria for weight, overall size, and so on.</p>

<p>In an attempt to automate some of the simpler problems that the designer was solving by hand, we hooked the package up to a constrained optimizer. The idea was to have the optimizer vary selected inputs to the package to maximize performance while still satisfying various constraints. One of the challenges we needed to overcome was the lack of analytic derivatives. The application was already fairly complex and solved many of its subproblems iteratively. The code would need to be treated as a black box, forcing us to approximate the derivatives numerically. Further complicating things, the core analysis routines were made up of tens of thousands of lines of Fortran 77 written in single precision. That is, we were beginning with only about seven digits of accuracy, some of which were lost during the analysis. The additional loss of accuracy incurred by naive use of forward differences essentially prevented the optimizer from converging to any real accuracy.</p>

<h3>Theoretical Basis</h3>

<p>There are two primary sources of error in all finite-difference estimates of derivatives: </p>

<ul>
  <li>Truncation error, stemming from our having thrown away higher order terms in the Taylor series.
  <li>Condition error, stemming from the finite-precision available on a computer. 
</ul>

<p>I'll turn first to the truncation error in forward differences. (For more information on this topic, see <i>Practical Optimization</i>, by Philip Gill et al., Academic Press, 1981, ISBN 0-1-228-3952-8.) </p>

<p>For more information on Taylor's theorem (<a name="re1"><a href="9805ee1.htm">Example 1</A>(a)), turn to any standard work on calculus. Solving for <i>df/dx</i> leads immediately to the forward difference formula in <a href="9805ee1.htm">Example 1</A>(b) for estimating the first derivative. The second term on the right, which is dropped in making the estimate, is referred to as the "truncation error" (because we are truncating the Taylor series for <i>f</i>). If the calculations were being performed to infinite precision, that would be the end of the story -- smaller step sizes give smaller errors. Of course, that's not the case. Since <i>f</i> is being evaluated on a computer to a fixed precision, there is some approximation error. Let <i>g(x)</i> be the computed value of <i>f(x)</i>. That is, <i>g(x)=f(x)+eps(x) </i>(so that <i>eps(x)</i> is the floating-point error in computing <i>f</i> at <i>x</i> on a computer). If <i>f</i> is a simple function, <i>eps</i> would typically be bounded by <i>|f(x)|eps(M), </i>where <i>eps(M)</i> is the machine precision (2<sup>-23</sup><img src="approx12.gif" alt="[equals approx.]" width="9" height="4">10<sup>-7</sup> for floats, 2<sup>-53</sup><img src="approx12.gif" alt="[equals approx.]" width="9" height="4">10<sup>-16</sup> for doubles). However, for more complex functions, <i>eps(x)</i> may be considerably larger. Taking this into account, <a href="9805ee1.htm">Example 1</A>(c) is the actual estimate. The last term, the error term, is referred to as "condition error."</p>

<p>You can now see how things get interesting. Truncation error gets smaller as the step size decreases, but the condition error grows. Suppose you can bound </p>

<blockquote>
<img src="9805eq1.gif" alt="[equation]" width="65" height="45">
</blockquote>

<p></i>by some constant, say <i>M </i>(at least near <i>x</i>). Suppose too, that you can bound <i>|eps(x)| </i>by another constant, <i>E, </i>near <i>x</i>. I'll denote <i>(g(x+h)-g(x))/h </i>by <i><img src="phi12.gif" alt="[phi]" width="9" height="14">(x) </i>(in other words, <i><img src="phi12.gif" alt="[phi]" width="9" height="14">(x) </i>will be the computed estimate of the derivative); then <i>|<img src="phi12.gif" alt="[phi]" width="9" height="14">(x)-df/dx(x)|<SPECIAL>&lt;=</SPECIAL>Mh/</i>2<i>+</i>2<i>E/h.</i></p>

<p>Clearly then, there exists an optimal value for <i>h</i>; the first term on the right increases with <i>h</i>, while the second term decreases with it. To find that optimum, you differentiate the right side with respect to <i>h</i> to obtain <a href="9805ee1.htm">Example 1</A>(d). If you set this equal to zero and solve for <i>h</i>, you get <a href="9805ee1.htm">Example 1</A>(e).</p>

<p>When the step size is to be fixed (this is usually done for performance reasons), the square root of the machine precision is often used. An identical analysis yields the following step sizes for other formulas:</p>

<ul>
  <li><a name="re2"><a href="9805ee2.htm">Example 2</A>(a) shows the central difference approximation to the first derivative, where in this case <i>M </i>is an upper bound on <i>d</i><sup>3</sup><i>f/dx</i><sup>3</sup><i>.</i>
  <li><a href="9805ee2.htm">Example 2</A>(b) is the central difference approximation to the second derivative, where in this case M is an upper bound on <i>d</i><sup>4</sup><i>f/dx</i><sup>4</sup>.
</ul>

<p>If you do have analytic derivatives available, the aforementioned observations can be turned around to estimate <i>E, </i>the maximal error in evaluating <i>f</i>. Recall the bound on the error in forward differencing: <i>|<img src="phi12.gif" alt="[phi]" width="9" height="14">(x)-df/dx(x)|<SPECIAL>&lt;=</SPECIAL>Mh/2+</i>2<i>E/h. </i>Notice that if <i>h</i> is small enough, the error bound will be dominated by the second term on the right side. Under this assumption, you have <i>|<img src="phi12.gif" alt="[phi]" width="9" height="14">(x)-df/dx(x)|<SPECIAL>&lt;=</SPECIAL></i>2<i>E/h, </i>or<i> E=O(|<img src="phi12.gif" alt="[phi]" width="9" height="14">(x)-df/dx(x)|h). </i></p>

<p>In other words, assume you know the correct value of <i>df/dx(x). </i>You can intentionally induce error in the forward difference approximation to <i>df/dx(x)</i> by intentionally choosing a very small step size. This will cause the condition error to balloon up, and the truncation error to die off, so you can drop the first term in our upper bound on <i>|<img src="phi12.gif" alt="[phi]" width="9" height="14"><sub>f</sub>-df/dx(x)|. </i>Then, since df/dx(x) is known, you can solve for <i>E, </i>and so estimate how much floating-point error is creeping into your function evaluations. </p>

<p>For this method to give realistic estimates in practice, a few subtle points need to be considered. The first is that the quantity 2<i>E/h </i>is only an upper bound on the finite-difference error. There is no guarantee that the actual error for a given step size will hit this upper bound. In fact, it is often the case that the actual error in evaluating a function varies widely at adjacent points. The second concerns the choice of step size. If it is taken to be too small, the forward difference will be zero, and any information on the error will have been lost. If it is taken to be too large, the assumption that the error bound is dominated by condition error will no longer be valid. Lastly, what if analytic derivatives are not available? These concerns are addressed in algorithms that implement these ideas.</p>

<h3>Algorithms</h3>

<p>I will now present algorithms for high-precision estimates of first derivatives through forward differencing (see the aforementioned <i>Practical Optimization</i>). The idea is to get a reasonable estimate of <i>M </i>(the upper bound on <i>f</i>'s second derivative) through straightforward central difference estimates. The step size for forward differencing is then chosen to be <a name="re3"><a href="9805ee3.htm">Example 3</A>(a).</p>

<p>The bulk of the work, then, is to determine a step size giving a suitable estimate of <i>M. </i>I assume that the second derivative of <i>f </i>is changing slowly enough that its value at <i>x</i> is an acceptable approximation to <i>M. </i>A sequence of trial values for that step size is generated, and at each point, the relative condition error is calculated as in <a href="9805ee3.htm">Example 3</A>(b). Here, <i>E </i>is our bound on the evaluation error in <i>f, h </i>is the trial step size, and <img src="phicap12.gif" alt="[capital phi]" width="10" height="11"> is the estimate of <i>f</i>'s second derivative. <i>condErr(<img src="phicap12.gif" alt="[capital phi]" width="10" height="11">) </i>is a measure of the size of the condition error only (that is, neglecting truncation error) in estimating the second derivative, relative to the size of the second derivative. Likewise, the relative condition errors of the forward and backward difference estimates of <i>f</i>'s  first derivative are found from:</p>

<blockquote>
<img src="9805eq2.gif" alt="[equation]" width="216" height="133">

</blockquote>



<p>For a value of <i>h</i> to be considered acceptable, <i>condErr(<img src="phicap12.gif" alt="[capital phi]" width="10" height="11">)</i> must be less than 0.1 (guaranteeing at least one correct significant digit, at least with respect to the condition error). To carefully assess the accuracy of <i><img src="phicap12.gif" alt="[capital phi]" width="10" height="11">, </i>some estimate of the truncation error is needed. However, it is inconvenient to do this, and so instead, the relative condition error is required to be at least 0.001, since the truncation error generally rises as the condition error falls. To obtain an initial estimate of <i>h</i>, the assumption shown in <a href="9805ee3.htm">Example 3</A>(c) is made.</p>

<p>In other words, it is assumed that <i>f</i>'s second derivative is proportional to <i>f</i>, and inversely to the square of its argument (note that this assumption is satisfied by any monomial of degree greater than 1). The "1s" in both numerator and denominator guard against the effects of small values for either <i>f</i> or <i>x</i>. If this assumption holds, then, from <a href="9805ee1.htm">Example 1</A>(e), the optimal interval is <a href="9805ee3.htm">Example 3</A>(d).</p>

<p>However, at a step size of <img src="hdash12.gif" alt="[h with bar over]" width="7" height="14">, <i>condErr(<img src="phicap12.gif" alt="[capital phi]" width="10" height="11">)</i> will be of order one, so we choose as our initial estimate of <i>h</i> the quantity 10<img src="hdash12.gif" alt="[h with bar over]" width="7" height="14">to produce a <i>condErr(<img src="phicap12.gif" alt="[capital phi]" width="10" height="11">)</i> of 0.01. Of course, it is entirely possible that the assumption on the behavior of <i>f</i>'s second derivative is incorrect. If the initial estimate of <img src="phicap12.gif" alt="[capital phi]" width="10" height="11"> produces a relative condition error that is too small, you simply decrease <i>h</i>, and if <i>condErr(<img src="phicap12.gif" alt="[capital phi]" width="10" height="11">)</i> is too large, <i>h</i> is increased. This is repeated until an acceptable value is found. </p>

<p>Notice that this iteration could fail to ever produce an acceptable value of <i>h </i>if, say, <i>f </i>is constant. For this reason, we set an upper limit on the number of iterations, <i>k<sub>max</i></sub>. For diagnostic purposes on failure, we also record whether or not we ever found a value of <i>h </i>that was acceptable for estimating the first derivative. This information is encoded into the variable<i> h</i>, which is initialized to -1, and set to the step size h the first time we find an <i>h </i>for which both <i><img src="phi12.gif" alt="[phi]" width="9" height="14"><sub>f</i></sub> and <i><img src="phi12.gif" alt="[phi]" width="9" height="14"><sub>b</i></sub> have relative condition errors of less than 0.1. (In the following algorithms, <i><img src="phi12.gif" alt="[phi]" width="9" height="14"><sub>f</sub> </i>denotes the forward difference approximation to the derivative, <i><img src="phi12.gif" alt="[phi]" width="9" height="14"><sub>b</sub> </i>the backward difference approximation, and <i><img src="phi12.gif" alt="[phi]" width="9" height="14"><sub>c</sub> </i>the central difference approximation.)</p>

<h3>Algorithm #1 </h3>

<ol>
<li>Initialization. Set <i>h</i>=10<i><img src="hdash12.gif" alt="[h with bar over]" width="7" height="14"></i>, where <i><img src="hdash12.gif" alt="[h with bar over]" width="7" height="14">=</i>2(1<i>+|x|) <img src="sqrt.gif" alt="[sqrt]" width="11" height="18">(E/</i>(1+<i>|f(x)|).</i> Set <i>k=</i>0. Evaluate <i><img src="phi12.gif" alt="[phi]" width="9" height="14"><sub>f</i></sub>(<i>h)</i>, <i><img src="phi12.gif" alt="[phi]" width="9" height="14"><sub>b</sub>(h),</i> <i><img src="phicap12.gif" alt="[capital phi]" width="10" height="11">(h), </i>and their relative condition errors<i>. </i>Set <i>h<sub>s</sub>=-</i>1.

<li>Evaluate the initial estimate. If <i>max(condErr(<img src="phi12.gif" alt="[phi]" width="9" height="14"><sub>f</sub>),</i> <i>condErr(<img src="phi12.gif" alt="[phi]" width="9" height="14"><sub>b</sub>)</i><SPECIAL>&lt;=</SPECIAL>0.1, set<i> h<sub>s</sub>=h</i>. If 0.001<SPECIAL>&lt;=</SPECIAL><i>condErr(<img src="phicap12.gif" alt="[capital phi]" width="10" height="11">)</i><SPECIAL>&lt;=</SPECIAL>0.1, go to step 5. If <i>condErr(F)</i>&lt;0.001, go to step 4. Otherwise, continue at step 3.

<li>Relative condition error too large. 
	<ol type=a>
	<li>Set <i>k=k+</i>1, and h=10<i>h<sub>.</i></sub>.

	<li>Recompute the finite differences and their relative condition errors. 

	<li>If <i>h<sub>s</i></sub>=-1, and <i>max(condErr(f<sub>f</sub>),</i> cond-    Err(f<sub>b</sub>))<SPECIAL>&lt;=</SPECIAL>0.1, set <i>h<sub>s</sub>=</i>h. 

	<li>If <i>condErr(F)</i><SPECIAL>&lt;=</SPECIAL>0.1, go to step 5. 

	<li>If <i>k=k<sub>max</sub>, </i>go to step 6. 

	<li>Go back to step 3a.
	</ol>

<li>Relative condition error too small.
	<ol type=a>
	<li>Set<i> k=k+</i>1, and <i>h</i>=h/10. 

	<li>Recompute the finite differences and their relative condition errors.

	<li>If <i>h<sub>s</i></sub>=-1, and <i>max(</i>condErr(<img src="phicap12.gif" alt="[capital phi]" width="10" height="11"><sub>f</sub>), cond-   Err(<img src="phicap12.gif" alt="[capital phi]" width="10" height="11"><sub>b</sub>))<SPECIAL>&lt;=</SPECIAL>0.1, set <i>h<sub>s</i></sub>=<i>h.</i>

	<li>If <i>condErr(<img src="phicap12.gif" alt="[capital phi]" width="10" height="11">)&gt;=</i>0.1, go to step 5. 

	<li>If <i>k=k<sub>Max</i></sub>, go to step 6. 

	<li>Go back to step 4a.
	</ol>
<li>Success. Set h<sub>Opt</sub>=2<i><img src="sqrt.gif" alt="[sqrt]" width="11" height="18">E/|<img src="phicap12.gif" alt="[capital phi]" width="10" height="11">|,</i> the error estimate is 0.

<li>Failure. 
	<ol type=a>
	<li>If <i>h<sub>s</sub>=</i>1, then <i>f </i>appears to be nearly  constant. Set <i>h<sub>Opt</sub>=h, </i>and set <i><img src="phi12.gif" alt="[phi]" width="9" height="14"><sub>f</i></sub>=0<i>;</i>the error estimate is zero. 

	<li>If <i>h<sub>s</sub>=/ </i>-1 and <i>condErr(<img src="phicap12.gif" alt="[capital phi]" width="10" height="11">)</i>&gt;0.1, then    <i>f </i>appears to be linear or odd. Set <i>h<sub>Opt</i></sub>=h<sub>s</sub>,<i> <img src="phicap12.gif" alt="[capital phi]" width="10" height="11">=</i>0, and set the error estimate as in step 5. 

	<li>Otherwise, the second derivative appears to be changing too rapidly. Set<i> h<sub>Opt</sub>=h </i>and set the error estimate as in step 5.</p>
	</ol>
</ol>

<p>Algorithm #1 assumes the availability of <i>E. </i>Often this is not a problem; <i>E </i>may be estimated by <i>E~|f|(machine precision)</i>. In other cases, however, this may not be sufficient. If analytic derivatives are available, then the method outlined here could be used to compute <i>eps(x)</i>. Of course, if you have analytic derivatives, then you don't care about Algorithm #1 (although I suppose that if derivative evaluation were expensive enough, you might do it once to get <i>eps</i>, and then use Algorithm #1). In general, though, the problem is that initially, you have neither a reasonable estimate of the derivative or of <i>E. </i>Luckily, I've found that, in practice, an order of magnitude estimate of <i>E </i>is sufficient for Algorithm #1. Consequently, Algorithm #2 may be used to perform a high-precision estimate of the derivative when only function evaluations are possible.</p>

<h3>Algorithm #2</h3>

<OL TYPE="1" START="1">
	<LI>Use some fixed step length to estimate <i>df/dx </i>through forward differences.
	<LI>Use this result to estimate <i>E </i>(see Algorithm #3).
	<LI>Use the result of step 2 in Algorithm #1.
</OL>

<p>Previously, I mentioned that there were a few subtle points to keep in mind when trying to back out <i>E. </i>Algorithm #1 takes them into account. The idea is to find the smallest step size that produces a change in the function value, and use that for a forward difference estimate. Any step size less than that gives no useful information, since the resulting finite-difference estimate will always be zero, independent of the function. On the other hand, the smaller the step becomes, the more the condition error term dominates the error bound. This leads you to use the smallest step size possible. </p>

<p>The algorithm proceeds in three distinct phases. The first attempts to bracket the least significant step; <i>A </i>denotes the lower bound and <i>B </i>the upper. The second phase uses a simple bisection algorithm to find the least-significant step within a user-specified relative tolerance, <i>relTol </i>(this does not have to be unduly tight; in practice; I've found that a value of 0.1 works well). The last phase takes this approximation to the least-significant step and uses it to compute the forward, backward, and central difference approximations to the first derivative. These are then compared to the "known" derivative value, and (for each approximation) <i>E </i>is computed. The maximum value is returned.</p>

<h3>Algorithm #3</h3>

<ol>
<li>Bracketing Phase. Break the procedure into cases: If both <i>f(x) </i>and <i>df/dx(x) </i>are nonzero, go to step 2. If <i>df/dx(x)  </i>is nonzero, but <i>f(x)</i>=0, go to step 3, and if both <i>f(x) </i>and <i>df/dx(x) </i>are zero, go to step 4.

<li>Bracketing Phase, Case 1. A reasonable guess for <i>h </i>might seem to be <i>|x|eps(M), </i>which would be the least-significant change you could possible make in <i>x</i>. However, when <i>x</i> is small, this can lead to absurdly small guesses for <i>h</i>, which slow the algorithm considerably. So, when <i>x</i> is small, we instead reason that <i>f(x)+eps(M)|f(x)|~f(x+h)~f(x)+df/dx(x)h </i>when <i>h </i>is the smallest significant step. So, if <i>|x|&gt;=1, </i>let <i>A=|x|eps(M) </i>else let <i>A=eps(M)|f(x)|\|df/dx(x)|. </i>Let<i> B</i>=10<i>A</i>.
	<ol type=a>
<li>Ensure that <i>A </i>is a Lower Bound.    While <i>f(x+A)<img src="noteq.gif" alt="[not equal to]" width="10" height="12">f(x), </i>let <i>B=A, A=A/</i>10.

<li>Ensure that <i>B </i>is an Upper Bound.     While <i>f(x+B)=f(x)</i>, let <i>A=B,</i> <i>B=</i>10<i>B.</i>
<li>Go to step 5.
	</ol>
<li>Bracketing Phase, Case 2. Since <i>f(x)</i>=0, function values near <i>x </i>are very small (near underflow), and the smallest-significant step size may be hard to find. Instead, we simply set <i>A </i>to 0.
	<ol type=a>
<li>Ensure that <i>B </i>is an Upper Bound.    While<i> f(x+B)=f(x),</i> let <i>A=B, B=</i>10<i>B</i>.

<li>Go to step 5.
	</ol>
<li>Bracketing Phase, Case 3. Since <i>df/dx(x)</i>=0, the function may even be constant, so we must set some maximum number of guesses, say <i>k<sub>max</i></sub>, let <i>A=</i>0, <i>k</i>=0.
	<ol type=a>
<li>Ensure that <i>B </i>is an Upper Bound.   While <i>f(x+B)=</i>0<i>, </i>and <i>k<SPECIAL>&lt;=</SPECIAL>k<sub>max</sub>,</i> let     <i>A=B, B</i>=10<i>B</i>, <i>k=k+</i>1.

<li>If <i>k=k<sub>max</sub>, </i>then the function appears to be constant -- return an error code.

<li>Go to step 5.
	</ol>
<li>Search Phase. Carry out a binary search until <i>A </i>and <i>B </i>agree to <i>relTol.</i>

<li>Estimation Phase. Compute <i><img src="phi12.gif" alt="[phi]" width="9" height="14"><sub>f</sub>(B), <img src="phi12.gif" alt="[phi]" width="9" height="14"><sub>b</sub>(B), <img src="phi12.gif" alt="[phi]" width="9" height="14"><sub>c</sub>(B). </i>Compute <i>err(f)</i>=<i>|<img src="phi12.gif" alt="[phi]" width="9" height="14"><sub>f</sub>(B)- df/dx(x),</i> <i>err(b)=|f<sub>b</sub>(B)-df/dx(x)|,</i> and <i>err(c)= 2|<img src="phi12.gif" alt="[phi]" width="9" height="14"><sub>c</sub>(B)-df/dx(x)|.</i>

<li>Return <i>max(err(f), err(b), err(c)).</i>
</ol>
<h3>Numerical Experiments</h3>

<p>I've implemented these algorithms in C++ (available electronically; see "Resource Center," page 3), and applied them to two test functions that show the algorithms in their best and worst light. In each case, the derivative was first estimated cheaply (comparatively) in the following way:</p>

<OL TYPE="1" START="1">
	<LI>Estimate <i>E </i>by <i>(</i>1<i>+|f(x)|)eps(M).</i>
	<LI>Set <i>h=|x|<img src="sqrt.gif" alt="[sqrt]" width="11" height="18">(E)</i>.
	<LI>Use <i>h </i>to compute <i><img src="phi12.gif" alt="[phi]" width="9" height="14"><sub>f</sub>.</i>
</OL>

<p>That estimate was then used in Algorithm #2 to produce a more careful approximation.</p>

<p><a name="rf1"><a href="9805ef1.htm">Figure 1</A> presents the first test function. <a name="rt1"><a href="9805et1.htm">Table 1</A> lists the errors incurred by forward difference approximations to the first partial derivative with respect to <i>x </i>at the point (0,0) (the exact value is-2). <a name="rf2"><a href="9805ef2.htm">Figure 2</A> shows a log-log plot of the step sizes against the errors.</p>

<p>Clearly, the optimal step length is near 3.45266e-4, which happens to be the square root of machine precision. So, in this case, the standard step length does quite well, giving an estimate of about 1.99979. Algorithm #1 yields a step size of 6.40672e-4, and yields an estimate of about 1.99964, comparable in accuracy to the standard method. </p>

<p><a name="rf3"><a href="9805ef3.htm">Figure 3</A> presents the second test function (based on Example 8.5 in <i>Practical Optimization</i>) <a name="rt2"><a href="9805et2.htm">Table 2</A> lists the errors incurred in estimating the derivative at <i>x</i>=100.001 (the exact value is about .1219977). <a name="rf4"><a href="9805ef4.htm">Figure 4</A> displays the same log-log plot as in <a href="9805ef2.htm">Figure 2</A>. In this case, the quick-and-dirty approach yields a step length of about .10358, and an estimated derivative of .225505 (or no correct significant digits). Algorithm #1, on the other hand, yields a step length of about 2.44427e-3, and an estimated derivative of about .124268 (or two correct significant digits).</p>

<h3>Conclusion</h3>

<p>The algorithms presented here can certainly improve the accuracy of numerical methods, though at the cost of significantly more function evaluations. They can principally be applied to practical situations where obtaining greater accuracy from the function evaluations is difficult or impossible. Another application of estimates of function evaluation error lies in appropriately tolerancing iterative schemes. Again, this generally is not covered in the academic literature, where convergence criteria can be adjusted as needed. However, in engineering software development, solvers must work reliably over a wide range of problems, and a tolerancing scheme that adapts to the available accuracy can help.</p>


<p><b>DDJ</b></p>


<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
