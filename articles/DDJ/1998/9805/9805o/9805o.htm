<html>
<META NAME="year" CONTENT="1998">
<head>
<title>Java Q&A</title>
</head>

<body bgcolor="FFFFFF">
<!--Copyright &#169; Dr. Dobb's Journal-->
<h1>How Do I Create a Streaming Audio Java Applet?</h1>

<p><i>Dr. Dobb's Journal</i> May 1998
</p>
<h3>By L. Richard Moore</h3>

<p>Rick is a System Engineer for Intel Corp. He manages a central support group in a department that is responsible for NT and UNIX infrastructure design and integration with enterprise applications. He can be contacted atrmoore@primenet.com.</p>

<p>Streaming audio refers to audio that can be downloaded at the same speed it is played. If the download speed matches or exceeds the rate at which the audio data is played, the audio can be played indefinitely without any interruptions. There are many practical applications for this technology on the Internet, and numerous commercial applications in the streaming audio client/server market have emerged. In this article, I'll present idtAudio, a streaming audio applet written in Java. (The source code for idtAudio and the companion program, idtAudio.cpp, is available electronically; see "Resource Center," page 3.) </p>

<p>As a Java applet, idtAudio inherits several advantages over most other streaming audio tools. Its most distinct advantage is that users never need to install any software. As an applet, the code is downloaded automatically into the browser as needed without user intervention. Furthermore, since the code is downloaded for each audio instance, there is no possibility of version mismatches between the audio data and the player. Also, applets are portable. The idtAudio applet seems to run equally well on Netscape Navigator 3.01 and Microsoft Internet Explorer 3.01 on Windows 95/NT. </p>

<p>The design of idtAudio also sports several distinctive features. The streaming protocol is built on standard HTTP, which is the same protocol used by all web browsers. As such, the applet can download its audio data through any firewall that allows web activity. This also means that the server has no requirements for special drivers or extensions.</p>

<h3>Compression</h3>

<p>Compression is the key to transmitting streaming audio data at low bandwidths. Audio data is considered to be one of the most difficult mediums to compress, but when using Java, the algorithm must also be very fast. </p>

<p>I researched several existing audio compression technologies, starting with MPEG. While its audio quality is excellent and several code samples are readily available, MPEG's psychoacoustic algorithm places a heavy toll on the CPU and cannot be implemented effectively in Java.</p>

<p>ADPCM is a simpler algorithm that would seem more likely to work in the Java environment. Unfortunately, ADPCM does not easily compress to the levels required for streaming modem transmission. The quality becomes poor, and the specific algorithms used become more secretive.</p>

<p>Other algorithms had similar problems, so I was forced to develop my own. Because compression relies on predictable patterns to be effective, I began by studying graphs of wave forms (see <a name="rf1"><a href="9805of1.htm">Figure 1</A>). The sinusoidal qualities of the wave suggested a first algorithm: Compress by capturing the peaks and valleys only, and decompress by programmatically filling in the remaining points using a sinusoidal function. With this algorithm, the decompressed audio had an annoying echo effect. More importantly, I also realized that the algorithm was uncompromising in that it could never predictably compress to any particular ratio. For example, a wave composed entirely of peaks and valleys would double in size after being "compressed." </p>

<p>A common technique used in modern physics is "curve fitting," where empirical data is approximated to a mathematical function such as a line or a parabola. My next attempt at audio compression broke up the wave form into a series of straight lines that approximate the original. The audio quality was much improved, and the compression ratio could be controlled by how closely the original wave form was followed. This tolerance level could be iteratively increased until the desired compression was achieved. The only problem was that, to achieve the required compression ratios, the tolerances had to be set very high. This degraded the audio quality too much. I still needed a way to increase the compression without sacrificing sound quality.</p>

<p>A frequency analysis of the audio data showed that smaller values occur much more regularly than larger ones, so it seems natural to sacrifice precision at higher amplitudes and preserve more detail near the smaller amplitudes. Originally, each audio sample is a signed eight-bit byte. idtAudio further compresses the audio data by storing a four-bit value for the amplitude instead of the full eight bits. The four-bit signed value is the square root of the eight-bit value (with negative amplitudes represented by negative square roots). Right or wrong, this extra 33 percent of compression was enough to make idtAudio work.</p>

<p>Although the audio compression program, encode.exe, was originally written in Java, performance was poor on large files, so I rewrote it in C. The C version seems quick enough for streaming encoding. Thus, we have laid the foundations for an Internet telephone, but that would be a different article entirely...</p>

<h3>Decoding and Playing the Compressed Audio</h3>

<p>Due to Java's poor audio support, the audio player applet requires the use of Sun's unsupported <i>AudioPlayer</i> class in the <i>sun.audio</i> class library. (It is this dependency that prevents idtAudio from working with every Java-capable browser.) The <i>AudioPlayer</i> class requires an <i>InputStream</i> object from which it reads and plays ulaw-encoded audio data until it reaches the end of file. The idtAudio applet derives its own class from <i>InputStream</i> called <i>FifoInputStream </i>(which will be referred to as FIS for reasons I'll explain shortly), and submits it to the <i>AudioPlayer</i> class. FIS allows one write thread and one read thread to communicate with fairly good performance. </p>

<p>A simple architectural solution, then, would have one thread downloading, decoding, and depositing audio data into the FIS queue, while another thread (implemented via <i>AudioPlayer</i>) would read and play the audio data; see <a name="rf2"><a href="9805of2.htm">Figure 2</A>. This design worked well when the compressed audio data was read from a local hard disk. Streaming from a true Internet URL was a different story. The audio was broken up and my modem lights indicated a lack of activity. Some quick tests of URL download times with C and Java programs suggested that the server's performance was not an issue, and that the Java language, itself, was not an issue. Clearly, the simple design described earlier was not an optimal solution.</p>

<p>Because a serial download leaves the CPU mostly idle, it made sense to break up the download and decode tasks into separate threads; see <a name="rf3"><a href="9805of3.htm">Figure 3</A>. The FIS class was the perfect way for the two threads to communicate. A <i>DoT</i> (short for "download thread") class, derived from <i>Thread,</i> would be responsible for downloading the audio data and depositing it into the first FIS object. The <i>DeT</i> (short for "decode thread") class, also derived from <i>Thread,</i> would be responsible for reading the first FIS object, decoding the data, and depositing the results into the second FIS. The <i>AudioPlayer</i> class would then read and play the second FIS at its leisure. This solution proved to be both successful and elegant.</p>

<h3>Optimizing Java Code</h3>

<p>Some serious optimization was still required to make the player perform on a 486 running Netscape's slightly slower implementation of Java.  </p>

<p>First, the synchronized sections of code were minimized. Some basic common sense pays off here. Consider the nature of our FIFO queue: One thread reads at the tail and another writes to the head. The only point of contention is the full member that indicates how full the queue is. Write operations to this member are synchronized. Read operations are not synchronized:This does carry a slight risk, but the risk only occurs under an unusual set of circumstances and is considered acceptable for the performance gain.</p>

<p>Every time an array is accessed in Java, the language performs some internal bounds checking. This checking can be costly. Not only was array access minimized, but looping itself was also minimized. Buffered access to the FIS objects was encouraged wherever possible in favor of character access.</p>

<p>Probably the most significant performance boost came from the <i>System.arraycopy()</i> function, which copies one array's contents to another, given offsets and lengths into each. <i>System.arraycopy()</i> is analogous to <i>memcpy()</i> in C and similar in performance. Sadly, the only alternative in Java is to use a standard loop and iteratively copy one member at a time.</p>

<p>Instead of a circular FIFO, I considered using a linked list of dynamically allocated buffers. When data was entered into a FIFO, a new buffer would be allocated and linked to the head of the list. Reading would retrieve and unlink tail-end buffers. Such a scheme could avoid one of two calls to <i>System.arraycopy()</i>, but would add the expense of garbage collection and object creation. A couple of test programs showed that <i>System.arraycopy()</i> was still slightly faster than the linked list scheme, so I never implemented the change.</p>

<p>Information on Java optimization is sketchy at best. Most texts suggest the generic approach of optimizing the innermost loops. The tricks I've just described showed remarkable performance gains, however. These techniques can be applied to almost any program.</p>

<h3>Protecting Java Code</h3>

<p>You may wonder why I chose such cryptic naming conventions for my classes. Originally, they were called <i>FifoInputStream</i>, <i>DecodeThread</i>, and <i>DownloadThread</i>, but the destiny of my applet was uncertain at that time. Because Java classes are downloaded by name, anybody using the audio player could quickly discover some key design secrets! The names were too informative, so I renamed them to <i>FIS</i>, <i>DeT</i>, and <i>Dot</i>, names that would be meaningless to anyone who didn't already understand the applet's internal architecture.  </p>

<p>Another protection mechanism demonstrated by idtAudio is the "time-bomb" feature often seen in shareware programs. (The code is commented out to effectively disable the time-bomb feature, but remains for your reference.) Typically, an expiring license scheme is not very effective in Java applets because a web developer could easily download a licensed copy of the applet from another web site. The trick to making this work is to place the "bomb" in the audio data instead of the applet itself. By doing so, the key to the license is embedded in data that is useless to everyone but the web site owner who owns the license. This is accomplished rather simply by placing a time stamp within the header information. The applet checks the time stamp and refuses to play encoded files that are too old. When registered, however, the encoder inserts null data into the time stamp slot, which indicates that the encoded audio file never expires.</p>

<h3>Using idtAudio</h3>

<p>The first step to using the idtAudio applet is to create your audio files. I use Syntrillium's Cool Edit 96 to create mine; even the disabled shareware version has enough features to do the job. Record an audio session and save it as an 8000 MHz eight-bit sam file.</p>

<p>Next, the audio file needs to be compressed. Use the encode.exe program for this. It requires an input file and an output file for command-line parameters. An optional third parameter is either a tolerance level or a target bandwidth (in characters per second), depending upon the value given. If a tolerance is given, the audio file is compressed once at the specified tolerance. If a target bandwidth is specified, the audio file is compressed iteratively at increasing tolerances until the target bandwidth is reached.  </p>

<p>My experiments suggest that a 28.8 modem connected at 24000 bps can sustain transmission speeds of approximately 2300 cps, so this is the default target bandwidth when none is specified. A 14.4 modem can only sustain bandwidths of about 1400 cps. Some experimentation has uncovered a rule of thumb: Under good conditions with PPP, a modem's bandwidth in characters per second is approximately the modem's connection speed in bits per second divided by 10. To be safe, I usually subtract another 100 cps.</p>

<p>After the encoded audio file is created, it must be stored on your web server. You may wish to use a familiar MIME type if your server is picky about such things. The four applet classes for the player (<i>DeT</i>, <i>DoT</i>, <i>FIS</i>, and <i>idtAudio</i>) must also be stored on the server. Add <a name="re1"><a href="9805oe1.htm">Example 1</A> to your HTML code to add the idtAudio applet.</p>

<p>In this example, "fish.idt" would be the name of the encoded audio file. The <i>Debug</i> parameter sets the style of the applet's appearance; <i>true</i> provides more detailed information. The <i>AutoPlay</i> parameter indicates whether the applet should begin playing immediately or wait for the user to click on it. </p>

<h3>Conclusion</h3>

<p>In retrospect, there are a number of variations to the compression algorithm that could increase compression and quality. You could even implement an "algorithm shifting" scheme that would change compression algorithms on the fly based on an analysis of the audio data.  </p>

<p>Simpler improvements would be to take the amplitude compression into account when calculating tolerances. The amplitude compression introduces substantial error that is not considered by the tolerance level. Also, the amplitudes might be better stored as offsets instead of absolutes, similar to the ADPCM method.</p>

<p>Nevertheless, the idtAudio applet exemplifies a number of concepts. First, it is a good example of object-oriented programming. In fact, I believe every object-oriented programming principle is demonstrated in some way within the applet's code. Next, it demonstrates the power of Java. Consider that the total code size is only 17 KB yet it implements a multithreaded graphical applet with performance good enough to perform downloading, number crunching, and real-time audio on a 486 machine. Lastly, it demonstrates a basic security and licensing scheme that developers may want to apply to commercial applets. </p>

<p><b>DDJ</b></p>

<HR><I>Copyright &copy; 1998, Dr. Dobb's Journal</I><BR>

</BODY>
</html>
