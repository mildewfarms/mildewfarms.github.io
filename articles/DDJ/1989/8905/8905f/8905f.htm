<HTML>
<META NAME="year" CONTENT="1989">
<HEAD>

<TITLE>MAY89: RUN LENGTH ENCODING REVISITED</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>RUN LENGTH ENCODING REVISITED<a name="00fc_0003"><a name="00fc_0003"></h1><P>
<h2><a name="00fc_0001"><a name="00fc_0000">There's more than one way to skin RLE</h2><P>
<h3>Phil Daley</h3><P>
<p><i><a name="00fc_0002"><a name="00fc_0000">Phil was a technical editor of MICRO The 6502 Journal for two years and is now a software engineer at Mentor Resources, 1 Tara Blvd., Nashua, NH 03062; 603-888-2580.</i></p><hr><P>
Many files stored on computer systems have a lot of wasted space: Often, records have duplicated spaces or fixed length records that aren't fully used, so blank areas of unused space exist that could be compressed out of the records.  (Notice how much smaller an .EXE file is after being processed by EXEPACK, if it wasn't linked with /E.)  In my work with user interfaces and screen files, a good deal of each record is either blanks or zeros.  Routines to squeeze this space out of records can be very simple (saving a minimum amount of space) or very complex (designed by the program for each record and requiring significant amounts of processing time).  What brought this all to mind was the RLE presented in Robert Zigon's &quot;Run Length Encoding&quot; (DDJ, February 1989).  The approach presented in that article, however, doesn't do well with runs of unique characters, doubling the length of each unique character as it goes.  Two changes to the encoding rules can result in a dramatic increase in the compression factor without a large increase in processing time: 1. Don't compress less than three duplicated characters; and 2.  Mark areas of unduplicated characters the same as duplicated ones, using a bit to indicate whether the next run is compressed or not.<P>
Every byte in the file is marked as either &quot;compressed&quot; or &quot;uncompressed.&quot;  The markers (or &quot;compression bytes&quot;) are 1 byte in size.  A compression byte has the high bit set if it indicates a run of redundant bytes, and clear if it marks a set of unique bytes.  The other seven bits are used to indicate the length (1 - 128) of the run of compressed or uncompressed bytes.<P>
In the case of a compression byte with the high bit set (&gt;=128), the next byte is the character that is duplicated.  When a compression byte indicates unique characters (&lt;=127), the next compression_byte + 1 characters are the normal bytes in the file.  The worst case (all unique characters) becomes 129 bytes for 128 bytes, and the best case is 2 bytes for 128 duplicated bytes.  This is illustrated in <a href="8905f.htm#00fc_0004">Figure 1</A>, which equals a total of 10 bytes, the same as Zigon's.  Notice that the CCD pattern only increased the character count by 1 byte.  This would be true for any number of unique bytes in a row, up to 128.  Zigon's method increases each different character to 2 bytes each.<P>
<h4><a name="00fc_0004"><a name="00fc_0004"><B>Figure 1:</B> Compression byte with high list set</h4><P>
<pre>
  Input buffer: A A A A B B B B B B C C D E E E E E

  Output buffer: 83 41 85 42 02 43 43 44 84 45

    Translation: 83   (4 compressed bytes value) 41
                 85   (6 compressed bytes value) 42
                 02   (3 uncompressed bytes value) 43 43 44
                 84   (5 compressed bytes value) 45</pre><P>
<P>
In my application of saving screen images and other database-type records, where a good deal of the record is either spaces or zeros, this routine saves 50 percent of the record space, on the average.  The routine does require you to save the record length along with the record, but most C implementations of variable length indexed records require this information.<P>
While I haven't coded this in assembly because the C implementation runs fast enough for my practical purposes, it probably runs a little slower than Zigon's for compression (See <a href="8905f.htm#00fc_0007">Listing One</A>).  The uncompress routine is probably just as fast as his, because of its simplicity.<P>
<h3><a name="00fc_0005">Notes<a name="00fc_0005"></h3><P>
The disk program files were compiled using the large model, the only one for which I keep libraries on my disk.  The source would produce smaller, faster .OBJ and .EXE files if it were recompiled with the small memory model.<P>
<h3><a name="00fc_0006">Availability<a name="00fc_0006"></h3><P>
All source code for articles in this issue is available on a single disk.  To order, send $14.95 (Calif. residents add sales tax) to Dr. Dobb's Journal, 501 Galveston Dr., Redwood City, CA 94063; or call 800-356-2002 (from inside Calif.)  or 800-533-4372 (from outside Calif.).  Please specify the issue number and format (MS-DOS, Macintosh, Kaypro).<P>


_RLE Revisited_
by Phil Daley

<a name="00fc_0007"><a name="00fc_0007">
<a name="00fc_0008"></pre><B>[LISTING ONE]</B><pre><a name="00fc_0008">

/***************************************************************************
*      PROGRAM          RLE.C                       *
*      written by Phil Daley                       *
*      February 3, 1989                        *
***************************************************************************/
int main(void);
int uncompress(unsigned char *,int,unsigned char *) ;
int compress(unsigned char *,int,unsigned char *) ;
int process_comp(unsigned char *,int,int) ;
int process_uncomp(unsigned char *,int,int) ;
#include   &lt;stdio.h&gt;
#include   &lt;memory.h&gt;
unsigned char   screen[24][80] = {
&quot;IMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM;&quot;,
&quot;:                                                                              :&quot;,
&quot;:                                                                              :&quot;,
&quot;:                                                                              :&quot;,
&quot;:          o   This is a sample screen that would be typical of the type       :&quot;,
&quot;:              that would present information to a user for instructions       :&quot;,
&quot;:              or a help screen, etc.                                          :&quot;,
&quot;:                                                                              :&quot;,
&quot;:                                                                              :&quot;,
&quot;:          o   While it contains a lot of unique characters in the text        :&quot;,
&quot;:              lines, it also contains a lot of white space in empty lines     :&quot;,
&quot;:              and margins.                                                    :&quot;,
&quot;:                                                                              :&quot;,
&quot;:                                                                              :&quot;,
&quot;:          o   It would be unusual for the compression algorithm used          :&quot;,
&quot;:              here to find any repeated characters other than spaces          :&quot;,
&quot;:              and the border.                                                 :&quot;,
&quot;:                                                                              :&quot;,
&quot;:                                                                              :&quot;,
&quot;:                                                                              :&quot;,
&quot;:                                                                              :&quot;,
&quot;:                                                                              :&quot;,
&quot;:                                                                              :&quot;,
&quot;HMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM&lt;&quot;} ;

unsigned char   new[2000] ;

/**********************    main      ***********************/
int main()         /*  this is a demo main  */
{
    int     orig_length = 1920 ;
    int     compressed_length ;
    int     i, j ;

    compressed_length = compress(screen[0],orig_length,new) ;
    printf(&quot;The original screen (1920) compressed to %d bytes\n&quot;,compressed_length) ;
    memset(screen,0,1920) ;      /*  erase the orig  */
    orig_length = uncompress(new,compressed_length,screen[0]) ;
    printf(&quot;And back to the original (%d) length\n&quot;,orig_length) ;
    for (i = 0; i &lt; 24; i++)
   for (j = 0; j &lt; 80; j++)   /*  show it  */
       printf(&quot;%c&quot;,screen[i][j]) ;
    return(0) ;
}
/***********************   compress   ****************************/
compress(in_array,in_size,out_array)
unsigned char   *in_array ;
int      in_size ;
unsigned char   *out_array ;
{
    register int i = 0 ;
    register int j = 0 ;
    register int k ;
    register int l ;

    while (i &lt; in_size) {
   if (in_array[i] == in_array[i + 1]  &amp;&amp; in_array[i + 1] == in_array[i + 2]) {
       k = process_comp(in_array,i,in_size) ;
       out_array[j++] = (unsigned char)k | 0x80 ;
       out_array[j++] = in_array[i] ;
       i += k ;
   }
   else  {
       k = process_uncomp(in_array,i,in_size) ;
       out_array[j++] = (unsigned char)k ;
       for (l = 0; l &lt; k; l++)
      out_array[j++] = in_array[i++] ;
   }
    }
    return(j) ;
}
/***********************   process_comp   ****************************/
process_comp(in_array,i,in_size)
unsigned char   *in_array ;
int      i ;
int      in_size ;
{
    register int len = 0 ;

    while (in_array[i] == in_array[i + 1] &amp;&amp; i &lt; in_size) {
   len++ ;
   i++ ;
   if (len == 126)
       break ;
    }
    return(len + 1) ;
}
/***********************   process_uncomp   ****************************/
process_uncomp(in_array,i,in_size)
unsigned char   *in_array ;
int      i ;
int      in_size ;
{
    register int len = 0 ;

    while ((in_array[i] != in_array[i + 1] || in_array[i] != in_array[i + 2]) &amp;&amp; i &lt; in_size) {
   len++ ;
   i++ ;
   if (len == 127)
       break ;
    }
    return(len) ;
}


/**********************    uncompress   ***********************/
uncompress(in_array,in_size,out_array)
unsigned char   *in_array ;
int      in_size ;
unsigned char   *out_array ;
{
    register int    i ;
    register int    j ;
    register int    k=0 ;
    register int    l ;

    for (i = 0; i &lt; in_size;) {
   j = in_array[i++] ;
   if (j &gt; 128) {
       for (j -= 128; j &gt; 0; j--)
      out_array[k++] = in_array[i] ;
       i++ ;
   }
   else
       for (l = 0; l &lt; j; l++)
      out_array[k++] = in_array[i++] ;
    }
    return(k) ;
}


-30-







<P>
<P>
</pre><HR><P>Copyright &copy; 1989, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
