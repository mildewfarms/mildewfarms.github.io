<HTML>
<META NAME="year" CONTENT="1989">
<HEAD>

<TITLE>JAN89: LETTERS</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>LETTERS<a name="001d_0001"><a name="001d_0001"></h1><P>
<h3></h3><P>
<h3><a name="001d_0002">Find that Function (Again)<a name="001d_0002"></h3><P>
Dear DDJ,<P>
The article &quot;Find that Function&quot; caught my attention.  I imagine every programmer, at some time, wants a list of functions or other declarations, particularly for a sizable program distributed over many source files.<P>
I was surprised by the complexity of the code used to build the function list in Hymowech's Listing One (pages 70-74), perhaps 400 lines of code and comments.  Surely there should a simpler way of doing this.  The problem is how to extract all instances of a particular grammar element, the identifier of a function definition, from a source file presented as a character stream.  This is made difficult by the start of the definition (function type, name, parameter declarations, and beginning of the function body) being commonly on more than one line, having a varied arrangement of white space and punctuation, comprising many different tokens, and possibly including comment lines.<P>
Lex, a generator of automatons for lexical analysis, is admirably suited for this particular kind of pattern-matching problem.  My example code gives Lex sources for two filters and a wrapping shell script.  The definitions (FUNCSTRT, etc.) were written in the hope that they make self-explanatory the few pattern-action rules given at the end of each source, following the %% symbol.  Mk_funclist.one and its dependents serve to build a table of functions from a list of C source files.<P>
The seven rules in the two Lex sources duplicate, I believe, the essential actions of Listing One of &quot;Find that Function.&quot;  The design of Listing One assumes that preprocessor directives within the function body do not alter the curly brace balance.  If this is not true, my second example shows that the preprocessor itself can be used to sort things out.  A few changes in Listing One serve to change it into a generator of a list of all declarations, each on one line, with parameter declarations and return value given on the line for each function (a lint library).<P>
There are tremendously powerful tools for pattern matching and extraction of elements from text files.  Public domain versions of Lex that run on non-Unix systems have been available for some time.  awk is sold for non-Unix systems (should I say MS-DOS?).  They run on simple hardware; the Lex sources of <a href="8901k.htm#001d_0003">Examples 1</A> and <a href="8901k.htm#001d_0004">2</A> were worked out on a PC AT. The problem is choosing the best tool.  For problems like the one addressed here, Lex is arguably the most appropriate.  Lex processes character streams simply, with new lines having no special meaning, and so it differs from line-oriented tools, like sed and awk.  Lex also tests left and right context simply.  Consider the last rule of Listing One.  It prints the NAME when the right context matches FUNCSTRT and when the left-context flag NORM ensures that NAME is not inside a function body.  The same parsing likely could be accomplished also by use of awk or sed, but the code for these tools would be more complicated.  My intent is not to push Lex as an all-purpose solution for text manipulation.  The filters of Listing Two, unlike those of Listing One, could just as easily have been written for awk or sed.<P>
<h4><a name="001d_0003"><a name="001d_0003"><B>Example 1</B></h4><P>
<pre>
  # MK_FUNCLIST.ONE
  echo &quot;                   /*****FUNCTION LIST*****/\n&quot;
  for i; do
          echo &quot;\n/* 'basename ${i} '*/&quot;
          cat ${i}|uncomment |funcfilt 3
  done

  % {
  /*UNCOMMENT- based on usenet posting by: */
  /*      Chris Thewalt; thewalt@ritz.cive.cmu.edu */
  %}
  STRING         \&quot;([^&quot;\n]|\\\&quot;)*\&quot;
  COMMENT        &quot;/*&quot;([^*\n]|&quot;*&quot;+[^*/\n])*&quot;*&quot;*&quot;*/&quot;
  %%
  {COMMENT}                            ;
  {STRING}                             ECHO;
  .|\n                                 ECHO;

  %{
  /*-FUNCFILT3: print function names, indented 1 tab; */
  /*DECL &amp; FUNCPTR may require change for ANSI compatibility */
  %}
  int curly;
  WLF             ([ \t\n\f\r]*)
  NAME            ([*]*[_a-zA-Z] [_a-zA-ZO-9]*)
  ARRAY           (\[[0-9+-/*]*\])
  DECL            ([;,]|{WLF}|{NAME}|{ARRAY})
  FUNCPTR         (\({DECL}*\)\({DECL}*\))
  DECLST          ({DECL}|{FUNCPTR})*
  FUNCSTRT        ([ \t]*\({DECLST}\){DECLST}\{)
  STRING          \&quot;([^&quot;\n]|\\\&quot;)*\&quot;
  SKIPALLQUOTED   ({STRING}|\'.\'|\\.)
  %START CURLY NORM
  % {
  main()  {
          /* if no shell wrapper, loop over files here */
          /* and run other filters using tmp files */
          BEGIN NORM;
          yylex();
  }
  %}
  %%
  &lt;CURLY&gt;\{               curly++;
  &lt;CURLY&gt;\}               {if (--curly == 0) {BEGIN 0; BEGIN NORM;}}
  {SKIPALLQUOTED}|.|\n            ;
  &lt;NORM&gt; {NAME}/{FUNCSTRT}        (printf (&quot;\t%s\n&quot;, yytext);
           curly=0;BEGIN 0;BEGIN CURLY;}</pre><P>
<P>
<h4><a name="001d_0004"><a name="001d_0004"><B>Example 2</B></h4><P>
<pre>
  # MK_FUNCLIST.TWO
  echo&quot;                   /*****FUNCTION LIST*****/\n&quot;
  for i; do
          echo &quot;\n/*'basename ${i}'*/&quot;
          cat $ {i}| funcfilt1|/lib/cpp -P -Cl
                   funcfilt2|uncomment|funcfilt3
  done

  %{
  /*-FUNCFILT1: prepare for cpp execution of #ifdefs, etc.; */
  /*i.e., setup to restore #includes &amp; remove code added by cpp */
  %}
  %%
  ^\#[ \t]*include.*$            {printf(&quot;/*%s*/\n&quot;, yytext);
          printf (&quot;/*DINGDONGDELL*/\n&quot;);
          printf (&quot;%s\n&quot;, yytext);
          printf (&quot;/*DELLDONGDING*/\n:);}
  .|\n                              ECHO;

  %{
  /*-FUNCFILT2: remove cpp-included code, restore #include's */
  %}
  %START DING
  %%
  ^&quot;/*DINGDONGDELL*/&quot;$               BEGIN DING;
  ^&quot;/*DELLDONGDING*/&quot;$               BEGIN O;
  &lt;DING&gt;^&quot;/*#&quot;[^*]*&quot;*/&quot;$             ;
  &lt;DING&gt;.|\n                         ;
  ^&quot;/*#&quot;[^*]*&quot;*/&quot;$                   {yytext [yyleng-2] = 0;
           printf (&quot;%s&quot;,  &amp;yytext[2]);}
  ^[\t]*\n                           ;
  .|\n                               ECHO;</pre><P>
<P>
With Lex, awk, and other such armament in hand, there would seem to be little justification for coding the solution to a text manipulation problem from scratch.  Programmers should be encouraged to use the excellent tools available and should have the knowledge to choose the one right for the job.  I hesitate to suggest that Dr. Dobb's should take its readers through discussions of the internals or give tutorials on the use of &quot;mature&quot; tools like Lex, yacc, and awk.  You could, however, take care to give readers programming examples that, rather than showing the long and wrong way to solve a problem, show them the appropriate use of tools.<P>
John Rupley<P>
University of Arizona<P>
Tucson, Arizona<P>
<h3><a name="001d_0005">Ada Aid<a name="001d_0005"></h3><P>
Dear DDJ,<P>
I've read with interest the Ada articles in the September 1988 issue and hope to see more such features in the future.<P>
In &quot;Object-Oriented Dimensional Units,&quot; John Grosberg presents a useful example of how a dimensioned unit with a float-type value might be implemented as a reusable component in Ada. However, I think one of his main points is misleading.<P>
In discussing the operations that the dimensional unit type Float_Unit.Class inherits from the predefined type Float, Mr. Grosberg notes that some operations are invalid.  For example, 5 feet x 4 feet = 20 square feet, not 20 feet.  He then states the &quot;Ada provides no way to detect it (an invalid operation) at compile time&quot; and presents a way to detect the error at run time.<P>
One way to detect such an invalid operation at compile time is to implement the type &quot;Class&quot; as a private type.  Objects of a private type may be manipulated only by the operations provided in the visible part of the spec.  If invalid operations are not explicitly provided, then they are not available to a client.  The integrity of the abstraction is thereby preserved, and invalid operation attempts are discovered at compile time.<P>
Use of private (and limited private) types is even more important when a class is implemented as an array or record, which is often the case.  Typically, individual components of a composite type need to be protected from manipulation by the clients.  This is accomplished by use of private types which provide a more accurate abstraction, a cleaner interface for the client, more precise control of operations on the class, and minimization of side effects of any changes to the internal representation of the type.<P>
The code on page 12 shows the revisions to Mr. Grosberg's Float_Unit spec required to make type &quot;Class&quot; a private type.  &quot;Class&quot; is declared as type private instead of type Float.  The private part is inserted at the end of the spec, and &quot;Class&quot; declaration is completed in the private part.  The invalid function declarations are then removed from the spec.  The Units_Error exception declaration is also removed.<P>
In the Float_Unit body, only the removal of the invalid function bodies is required. Package Float_Unit is shown in Listing One.<P>
Glenn A. Edwards<P>
St. Petersburg, Fla.<P>
John responds: My statement that &quot;Ada provides no way...&quot; sounds more absolute than I intended.  I would have been more correct had I said &quot;having chosen to make float_unit.class public, Ada provides no way....&quot;  Any method of doing something has advantages and disadvantages relative to the application.  One most choose the method that best fits the circumstances.  Mr. Edwards' method for making float_unit.class into a private type is the way I started the design of the float_unit package.  For my application, however, I eventually chose to make the type public for two main reasons: First, I wanted to be able to use floating point literals with variables of the various units types.  For example, I wanted to be able to say:<P>
<pre>supply_voltage : volt.class := 5.2;   
or       supply_voltage := 10.0;</pre><P>
Second, I wanted to be able to use the range declaration and checking features that are available for floating point types in Ada.  So, for example, I could do something like this.<P>
<pre>supply_voltage: volt.class range 0.0
                    .. 10.5;</pre><P>
I think it is safe to say neither of these capabilities is available if the type is private. One could (if the type were private) obtain the effect of my first example by adding a function to the package to convert floating point to float_unit.class:<P>
<pre>function to_class( f : float ) return
                    class;</pre><P>
and use it as an inherited function like this:<P>
<pre>supply_voltage : volt.class :=
               volt.to_class(5.2);</pre><P>
But that seems less natural, and, besides, the range feature that I wanted still wouldn't be available.  In addition, there is little reason to hide the fact that a dimensional unit is based on float, since that is the way we think about them anyway.  It is only necessary to &quot;hide&quot; or restrict the ways they can be combined with each other.  What I traded for the features I wanted was to postpone the checking of some invalid operations to run-time.  By the way, if Mr. Edwards or any other readers are interested in an altogether different method of handling units in Ada, I recommend they check out the article &quot;Dimensional Analysis in Ada&quot; by Pat Rogers, published in the ACM Ada Letters, vol. 8, no. 5, Sept./Oct. 1988.<P>
<h3><a name="001d_0006">Leftie Light Bulbs<a name="001d_0006"></h3><P>
Dear DDJ,<P>
I enjoyed reading Steve Upstill's article on RenderMan Shading Language(&quot;Photorealism in Computer Graphics,&quot; November 1988, but Figures 1 and 3 provided compelling examples of why software people have to be watched so closely out in the real world.  The threads on the light bulbs are left-handed.  And another thing: Threads are helixes, not spirals.<P>
Fred Klingener<P>
McLean, Virginia<P>
Editor's note: Unfortunately, the slide was flopped during the printing process.  The error was not the programmer's.<P>
<h3><a name="001d_0007">Algorithmic Answer for Alan<a name="001d_0007"></h3><P>
Dear DDJ,<P>
Software Manual for Elementary Functions (by William J. Cody Jr. and William Waite, Prentice-Hall) should help Alan Clark, who needs a resource that lists fundamental algorithms for high-level functions that do not exist in machine code.  (See &quot;Letters,&quot; August 1988.) The book gives detailed implementation of sqrt, alog, alog10, exp, power, sin, cos, tan, cot, asin, acos, atan, atan2, sinh, cosh, tanh, and provides a test suite to boot.<P>
Edmund Ramm<P>
Kaltenkirchen, W. Germany<P>
<P>
<P>
</pre><HR><P>Copyright &copy; 1989, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
