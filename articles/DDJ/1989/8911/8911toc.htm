<HTML>
<META NAME="year" CONTENT="1989">
<HEAD>

<TITLE>November 1989 - PARALLEL PROCESSING</TITLE></HEAD>
<body bgcolor="FFFFFF">
<H1>November 1989 - PARALLEL PROCESSING</H1>
<hr>
<h2>FEATURES</h2>
</p><h3><a href="8911a/8911a.htm">DATA-FLOW MULTITASKING</a></h3><p> by Rabindra P. Kar<br>
The beauty of data-flow architectures, as Robin explains here, is that they let you harness the power of multiple processors to process a stream of data in a sequential algorithm.
</p><h3><a href="8911b/8911b.htm">A PARALLEL MAKE WITH DESQVIEW </a></h3><p> by Mark Streich<br>
Mark uses the DESQview API to develop dvmake, a parallel make that can  easily run four tasks at once, and that you can use it to write a real-time tty controller.
</p><h3><a href="8911c/8911c.htm">CONCURRENT C FOR REAL-TIME PROGRAMMING</a></h3><p> by N. H. Gehani and W. D. Roome<br>
Concurrent C is designed to extend C for parallel programming.  Here, the  designers of the language use it to write a real-time tty controller.
</p><h3><a href="8911d/8911d.htm">LINKING WHILE THE PROGRAM IS RUNNING</a></h3><p> by Andrew Schulman<br>
Andrew explains the hows and whys of run-time dynamic linking under OS/2,  and writes a mini C interpreter in the process.
</p><h3><a href="8911e/8911e.htm">CONTAINER OBJECT TYPES IN TURBO PASCAL</a></h3><p> by Anders Hjelsberg<br>
When packaged in library modules, container objects can extend the  underlying programming language by adding stacks, queues, trees, dynamic  arrays, hash tables, and other such data structures.
</p><h3><a href="8911f/8911f.htm">EXTENSIBLE HASHING</a></h3><p> by Steve Heller<br>
With KRAM--Steve's &quot;keyed random access method&quot; program--you can  retrieve any record in a multimegabyte file with a single disk access and any  record in any size file with a maximum of two accesses.
<h2>EXAMINING ROOM</h2>
</p><h3><a href="8911g/8911g.htm">OPTIMIZING IN A PARALLEL ENVIRONMENT</a></h3><p> by Barr E. Bauer<br>
In this month's &quot;Examining Room,&quot; Barr explores the parallelization scheme  implemented by Silicon Graphics, using a Fortran test program to get to the  bottom line of high-performance computing.
<h2>COLUMNS</h2>
</p><h3><a href="8911h/8911h.htm">PROGRAMMING PARADIGMS</a></h3><p> by Michael Swaine<br>
Mike looks at two early neural net implementations, MINOS II and ADAM I,  both of which used analog devices to implement parallel algorithms in  largely discrete systems.
</p><h3><a href="8911i/8911i.htm">C PROGRAMMING</a></h3><p> by Al Stevens<br>
Al develops a linked list class for C++ and takes a quick look at what's  available in the way of C++ compilers and preprocessors.  When it comes to  ANSI C, Al finds that some things have changed, while other things never  do.
</p><h3><a href="8911j/8911j.htm">STRUCTURED PROGRAMMING</a></h3><p> by Jeff Duntemann<br>
Jeff and his cast of characters examine the subject of polymorphism and how  object-oriented Pascal programmers can use it to their advantage.
<h2>FORUM</h2>
</p><h3><a href="8911k/8911k.htm">EDITORIAL</a></h3><p> by Jonathan Erickson
</p><h3><a href="8911l/8911l.htm">LETTERS</a></h3><p> by you
</p><h3><a href="8911m/8911m.htm">SWAINE'S FLAMES</a></h3><p> by Michael Swaine
<h2>PROGRAMMER'S SERVICES</h2>
</p><h3><a href="8911n/8911n.htm">OF INTEREST </a></h3><p>compiled by Janna Custer
<HR><P>Copyright &copy; 1989, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
