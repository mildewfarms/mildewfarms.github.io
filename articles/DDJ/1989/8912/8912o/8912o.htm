<HTML>
<META NAME="year" CONTENT="1989">
<HEAD>

<TITLE>DEC89: SWAINE'S FLAMES</TITLE></HEAD>
<body bgcolor="FFFFFF">
<h1>SWAINE'S FLAMES<a name="027b_0003"><a name="027b_0003"></h1><P>
<h2><a name="027b_0001"><a name="027b_0000">It Takes More Than A Winning Smile</h2><P>
<h3>Michael Swaine</h3><P>
<a name="027b_0002"><a name="027b_0000">Paradigm: That collection of model problems, techniques, and specialized knowledge that makes a specialist generally worthless.<P>
I am a writer of prose, and when I venture outside the paradigm, I do so at peril.  Your peril, usually, but I did warn you.  I'd like to talk about marketing: The marketing of software innovation and the subversion of marketing by software innovation.<P>
<h3><a name="027b_0004">First, Get a Million Dollars<a name="027b_0004"></h3><P>
How does a capable programmer with a good product idea become a successful entrepreneur with a hot product?  The standard truism, that you've got to have money to make money, is no help and is disproved by the PC software industry as a whole.  It had nothing but ideas a decade ago, and now it's a billion-dollar industry.  Obviously, there's a cold start technique.  What is it?  I've sniffed at the roots of the major personal computer software companies without unearthing any rare truffles of wisdom.  Maybe you've got to know about business to learn about business.  But here are two homely &quot;morels&quot; I did dig up:<P>
There appear to be two normal sources of development funding for those without private fortunes or rich friends: Your current clients (or employer) and your future customers.  You can sell part of your enterprise, once you have one, to investors or venture capitalists, but in the initial phase, you don't have anything to sell but what's in your head.  Venture capitalists don't want that, and any private investors willing to take a chance on you are probably rich friends, clients, or employers.<P>
In the client-funded paradigm, you develop the components or early prototypes of your product on contract to companies with big budgets, taking care to retain all important rights to your work.  (In the risky employer-funded variation, you do product development on the job and hope you can take it away with you without losing the product or your self respect or a lawsuit.  It's been known to work.)  Client-funded development is probably the only way to make money in the stackware market today.  And it's the paradigm followed by Microsoft, which got its start in Bill Gates's tireless refining of Microsoft Basic under contract to MITS, Tandy, and others.<P>
The most gutsy way to get funding is from future customers.  This is how the personal computer hardware industry was launched: Gullible electronic hobbyists sent checks to post office boxes, and when there were enough checks, the products got built.  Legally, this technique gives you only a three-month window, but a three-month interest-free loan is nothing to sneeze at.  Many software companies followed this mail order paradigm, some with more scrupulous honesty than suggested by this scenario, some with less.  The most successful company to start out by mail orders is Borland International, which made the transition to shelf space competitor with remarkable adroitness.<P>
<h3><a name="027b_0005">Agents are Subversive<a name="027b_0005"></h3><P>
One of the promises of object-oriented programming is that you will be able to build software from reusable components: Brad Cox calls this &quot;the software IC model.&quot;  But when it comes to finding the components, the software IC model doesn't fit.  Supplier catalogs are too narrow a channel.  They work for real ICs, because manufacturing costs already narrow the channel drastically, but will be a problem for software components, for which there are likely to be as many suppliers as customers.  Some OOP supporters see agents as the answer.<P>
An agent is a program that searches for information based on criteria you supply.  An agent might scan electronic news services to put together a custom newspaper for you -- reflecting your interests.  Or it might find reusable software components.  The search space could be a single software library or all the sources for which you have e-mail addresses.  Where the product sought is information, agents could be essential in getting the product into the hands of the person who needs it.  And they could subvert the economy wherever they are effectively used.<P>
Usually, it is the vendor who takes responsibility for making the connection with the customer.  I can think of only two reasons why it would be appropriate for the vendor to take responsibility for making the connection: 1. It is easier for the vendor than for the customer; or 2. The vendor has more to gain from the transaction.  For the vast majority of goods, 1. can't be true: There are just a lot more customers than vendors.  I think that 2. is usually the deciding factor: Most sales are driven by the vendor's needs rather than the customer's.<P>
Imagine a market managed by customers and driven by their needs.  Imagine a market in which there were no marketing costs to the vendor because there was no marketing.  If you wanted a tool to help you do your job, you would sketch a description of its desired properties and dispatch your agent to search for one.  If you built a truly better mousetrap, the world really would beat a path to your door.<P>
Could we actually replace marketing by technology in this way?  A lot of people seem ready to try it in the area of reusable software components.  If it works there, the model might spread to other markets.  Of course, one can think of many products and services for which it obviously wouldn't work.  And we know that all those products and services serve real needs. Right?<P>
<P>
<P>
</pre><HR><P>Copyright &copy; 1989, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
