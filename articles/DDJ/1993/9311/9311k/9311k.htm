<HTML>
<META NAME="year" CONTENT="1993">
<HEAD>
<TITLE>NOV93: ALGORITHM ALLEY</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>ALGORITHM ALLEY<a name="0347_0003"></h1><P>
<h2><a name="0347_0001"><a name="0347_0000">Palindrome Encryption</h2><P>
<h3>Tom Swan</h3><P>
<a name="0347_0002"><a name="0347_0000">It's been said that a black hole in space is the ultimate data compressor. But, as I recently discovered, the grand poobah of compressors is actually an anonymous clerk who invents acronyms for government publications. ATBAOTCOF is a gem that I recently came across in a volume on southern navigational hazards. As everybody knows, ATBAOTCOF is an abbreviation for &quot;Area to Be Avoided Off the Coast of Florida.&quot; Don't laugh. It takes real talent to come up with compact, phonetic acronyms like that. It's phonetic because, if you could pronounce it, ATBAOTCOF is the sound you'd probably make upon accidentally straying into the ATBAOTCOF and being fined a maximum civil penalty of $50,000.<P>
<h3><a name="0347_0004">Palindromic Encryption<a name="0347_0004"></h3><P>
Government or military acronyms aren't always so ridiculous. The word &quot;radar,&quot; for instance, is a shining exception. An acronym for &quot;Radio Detecting And Ranging,&quot; radar is also a <I>palindrome</I>, a word that is spelled the same forward and backward. My middle name, Reyer, is a palindrome. Madam is another. Palindromes can also be phrases or sentences such as, quoting from Webster's, <I>Roma tibi subito motibus ibit amor</I>.<P>
A few months ago, while working on a book about file structures, I stumbled across a data-encryption method used in Microsoft Windows Calendar files. I call it the &quot;palindrome encryption algorithm&quot; because the technique produces numeric palindromes from most input sequences. Unfortunately, there's no corresponding recovery method. Once data is encrypted using this algorithm, there is no way to restore the original information.<P>
That may seem to make palindrome encryption as appealing as a bank that accepts deposits but doesn't permit withdrawals. The algorithm may have practical applications, though, in producing encrypted keys with built-in redundancy checks. For example, a Calendar file is identified by the palindrome signature bytes B5 A2 B0 B3 B3 B0 A2 B5, formed by adding the ASCII values of the characters in the uppercase string CALENDAR to the lowercase string <I>radnelac</I>, which is calendar spelled backwards.<P>
<a href="#0347_0009">Example 1</A>, Algorithm #13, describes the palindrome encryption algorithm in pseudocode. PALPAK.PAS (<a href="#0347_000a">Listing One</A>, page 144) implements the algorithm in Pascal. Some input strings produce repetitious sequences of identical values--evidence, I suppose, that a corresponding recovery method is unlikely to be discovered. ABCD, for example, translates to the four hexadecimal bytes A5 A5 A5 A5. Technically, that's a numeric palindrome, but it's not a desirable outcome. Interestingly, however, preprocessing this and similarly degenerate cases as palindromes--in other words, feeding the program ABCDDCBA--produces a usable palindrome key. In fact, inputting palindromes such as radar and madam always produces numeric palindromes. How strange!<P>
Also interesting is the fact that any palindrome with an even number of symbols can be compressed by 50 percent simply by throwing out the redundant half. This suggests that palindrome encryption could double as a data-compression method, but since there's no corresponding recovery algorithm, this property has no apparent value. If anybody discovers a practical use for Algorithm #13 or an adaptation, I'd like to know.<P>
<h3><a name="0347_0005">Blazing Text Compression<a name="0347_0005"></h3><P>
July's &quot;Alien Text-File Compression&quot; produced a basketful of mail along with several interesting text-compression techniques. Chuck Guzis sent along his text compressor that can squash files at blazing speed. <a href="#0347_002f">Listings Two</A> and <a href="#0347_0030">Three</A> (page 144 and 145, respectively) implement Chuck's algorithm in C. Compile the programs, then enter a command such as COMP5 IN.TXT OUT.TXT to compress file IN.TXT to file OUT.TXT. Use DECOMP5 similarly to decompress a packed file. Chuck explains how the code operates:<P>
<cite>I based the algorithm on the old five-level Baudot TTY's that used five-bit words and escape codes to shift between character sets. This inspired me to use &quot;short&quot; bytes to compress eight-bit characters. Huffman encoding works similarly, but instead of varying the number of bits according to a character's frequency of occurrence, I use only two lengths--short (five-bit) and long (eight-bit) codes. Five bits can store 32 values--enough room for 26 characters plus six punctuation marks or other symbols. Using this fact, the algorithm packs three characters in a 16-bit word, leaving one bit as a flag. Unencoded characters with values below 128 are stored literally. Characters with values above 128 are stored with a zero prefix, which also indicates a run of same value characters when followed by a value less than 128. Most files compress by about 30 percent. Unpacking uses a simple table lookup, and is very fast.</cite><P>
<h3><a name="0347_0006">Short and Sweet<a name="0347_0006"></h3><P>
Chuck Walbourn contributed short, but sweet, ideas for compressing text information containing numeric values. He writes:<P>
<cite>A good way to compress text that contains numbers is to convert them into binary integers or floats. This saves space, of course, but only if the representation is smaller than the ASCII original. You also need to include an escape code to mark encoded values. Another method is to use binary coded decimal (BCD), replacing pairs of digits with bytes. For example, the string &quot;Abc123456&quot; compresses to &quot;Abc&quot; 0x12 0x34 0x56, a total of six bytes instead of nine.</cite><P>
These techniques are examples of a simple but effective compression method called &quot;compact notation.&quot; You use this method every time you &quot;compress&quot; dates such as January 15, 1994 to a shorthand numeric form 1-15-94. In a computer, assuming 1900 for the century, any date can be further packed into a 16-bit word using four bits for the month, five bits for the day, and seven bits for the year. The interesting point about compact notation is that it compresses data by searching for equivalent, but shorter, forms of symbols or other values. Only the form of the information changes, not their values.<P>
Zenon Revisited<P>
July's opener, in which an alien from Zenon compressed an encyclopedia by placing a mark on a rod, drew several comments. Russ Pillsbury writes, &quot;I got a real kick out of the marked rod [compression] method. At sub-electron distances, you can insert nearly an infinite number of marks on the same rod. Since any book or volume of books will generate a unique fraction, you can probably place the entire works of humanity on that same stick!&quot;<P>
Sounds great, Russ. When you are finished marking a sample rod, be sure to send me a review copy. First, however, you may want to listen to author Neil Rubenking's ideas for gaining even better compression ratios (as if infinite compression weren't enough). Neil writes:<P>
<cite>There's a variation on your stick-marking compression that gets truly excellent results when some characters are more common than others. You start with an imaginary ruler that's marked off with a space for each character proportional to the frequency of that character. Lay this ruler against your stick to start. Take the first character in your input and find its range on the ruler. Now <I>reduce</I> the ruler to the size of that range and move it so it precisely fits on the stick. Find the second character on your ruler and squish the ruler to fit <I>that</I> range. Keep going until you've handled all the input characters. The nice thing is that the number of required significant digits increases more slowly when you encode a more common character. Say you just use A, B, and C, in proportion 2:1:1. Encoding an A reduces the active range to 1/2; encoding a B or C reduces it to 1/4. You can also do this with standard IEEE real numbers, jamming in characters until you've used up all your significant digits and then starting a new real number. It works! The hard part is knowing when to stop decoding the real numbers, but it can be done.</cite><P>
This compression technique, which goes by the name &quot;arithmetic encoding,&quot; reminds me of the supposedly true observation that every work--including all of Shakespeare plus the text of every Superman comic ever published--is encoded somewhere in the value of pi--assuming, that is, pi's decimal expansion never repeats. In fact, my unfinished novel is also probably encoded in pi, so I may as well not complete the thing since it has already been &quot;published.&quot; (And if you believe that, I know where you can rent a roomful of monkeys to write your next computer program.) (For more information on arthimetic encoding, see &quot;Arithmetic Coding and Statistical Modeling&quot; by Mark Nelson, <I>DDJ</I>, February 1991.)<P>
<h3><a name="0347_0007">Mashed Dictionaries<a name="0347_0007"></h3><P>
Neil Rubenking also offered an interesting, and perhaps more practical, text compression technique, which employs a variation on Chuck Guzis's method of using short character codes:<P>
<cite>I use a kind of differential compression to mash down the dictionary for my anagram generator, NAMEGRAM. First, I reduce every input letter to a number from 0 to 25 (the dictionary consists of capitalized words with no punctuation). Words are limited to 31 characters. Each word is represented by the number of letters it shares with the previous word, the number of additional letters, and the codes for the letters themselves. So your AARDVARK, AARDWOLF, AARONIC example would be encoded as 0 8 A A R D V A R K 4 4 W O L F 3 4 ONIC. This data stream is subject to additional compression by one-third. Every number is less than 32, so 15 bits is enough to hold three numbers. I simply mash three numbers into every two bytes, obtaining better results than PKZIP. A one megabyte file, for example, mashes down to about 290K. The same zipped file is 330K! This just goes to show what you can do when you have control over the data being compressed.</cite><P>
<h3><a name="0347_0008">Your Turn<a name="0347_0008"></h3><P>
Write to me, make suggestions, complain about your taxes, or even better, share a favorite algorithm. Send mail in care of <I>DDJ</I>, or send compressed text files to my Compuserve ID, 73627,3241. When sending files, please tell me what encryption or compression methods you use. Be forewarned: Undecipherable files will be forwarded to the appropriate government agency for dumping in the ATBAOTCOF.<P>
<h4><a name="0347_0009">Example 1:<a name="0347_0009"></h4><P>
<pre>input
  S: String;
var
  I, E, C: Integer;
begin
  I &lt;- 1;
  E &lt;- Length(S);
  while (I &lt;= Length(S)) do
  begin
    C &lt;- (Uppercase(S[I])
      + Lowercase(S[E]);
    Write C to output;
    I &lt;- I + 1;
    E &lt;- E - 1;
  end;
end;</pre><P>

<PRE>


_ALGORITHM ALLEY_
by Tom Swan


<a name="0347_000a"><a name="0347_000b"><B>[LISTING ONE]</B>


(* ---------------------------------------------------------------------- *(
**  palpak.pas -- Algorithm #13: Palindrome Encryption                       **
** -----------------------------------------------------------------------**
**  Demonstrates data encryption technique for producing keys or signatures, **
**  Microsoft Calendar files, for example, begin with signature bytes formed **
**  by applying the algorithm to the word Calendar. There is no known        **
**  recovery method for restoring text encrypted using this method.          **
**  Copyright (c) 1993 by Tom Swan. All rights reserved.                     **
)* ---------------------------------------------------------------------- *)

program PalPak;
var S1, S2: String;

function Uch(C: Char): Integer;
begin
  if (C in ['a' .. 'z']) then
    Uch := Ord(C) - 32
  else
    Uch := Ord(C)
end;
function Lch(C: Char): Integer;
begin
  if (C in ['A' .. 'Z']) then
    Lch := Ord(C) + 32
  else
    Lch := Ord(C)
end;
procedure Encrypt(S: String);
var I, E, C: Integer;
begin
  I := 1;
  E := Length(S);
  while (I &lt;= Length(S)) do
  begin
    C := Uch(S[I]) + Lch(S[E]);
    Write(C, ' ');
    I := I + 1;
    E := E - 1
  end
end;
var S: String;
begin
  repeat
    Write('Enter a string: ');
    Readln(S);
    if Length(S) &gt; 0 then
    begin
      Write('Encrypted string: ');
      Encrypt(S);
      Writeln
    end
  until Length(S) = 0;
end.

<a name="0347_002f"><a name="0347_000c"><a name="0347_000d"></pre><B>[LISTING TWO]</B><pre><a name="0347_000d">

/* ----------------------------------------------------------------------- *\
**  comp5.cpp -- Compress an ASCII text file.                              **
** - A fast, efficient text compressor that can acheive up to about 33     **
** percent reduction on most text files. - Lowercase characters are        **
** compressed 3 per word. Since there are 32 values in 5 bits, the program **
** can pack the basic 26-character alphabet plus 6 specials characters:    **
** &lt;space&gt;, comma, period, semicolon, hyphen, and quote. -If a value of 00 **
** is detected, next character is taken as a literal respresentation if    **
** the next character has a value in excess of 127 (0x80); otherwise, the  **
** value represents a repeated character count of the next char.           **
**   Copyright (c) 1993 by Chuck Guzis. All rights reserved.               **
\* ----------------------------------------------------------------------- */

#include  &lt;stdio.h&gt;
#include  &lt;stdlib.h&gt;
#include  &lt;string.h&gt;
#include  &lt;ctype.h&gt;

#define LINE_MAX 128          // Length of the longest line
#define DUPE_THRESHOLD 4      // Smallest duplicated byte count
typedef unsigned char UCHAR;  // Define a UCHAR
typedef unsigned int UINT;    // Define a UINT
long Comp_Count;              // How many bytes of compressed text?
long Orig_Count;              // How many bytes of original text?
UCHAR
  lbi[ LINE_MAX+1],           // Input line buffer
  lbo[ LINE_MAX+1];           // Output line buffer
FILE *in;                     // Input file
FILE *out;                    // Output file

//  Our 5-bit alphabet.
unsigned char Alphabet[] = &quot;abcdefghijklmnopqrstuvwxyz ,.;- &quot;;

//  An array for testing for the above.
UCHAR AlphaMap[256];          // One byte per ASCII value

//  Function prototypes.
void main(int, char **);      // Main function
void Error(char *, char *);   // Error routine
void Compress(void);          // Compressor
int DupeCheck(UCHAR *);       // Scan for duplicate characters

void main( int argc, char *argv[])
{
  UCHAR
    *ch,                      // Pointer and short int used to
    i;                        //  build AlphaMap.
  in = NULL;
  out = NULL;
  Comp_Count = 0;
  Orig_Count = 0;

//  Open the files, give an error if problems arise.
  if ( argc != 3)
    Error( &quot;Command form is - COMP5 &lt;in-file&gt; &lt;out-file&gt;\n&quot;, NULL);
  if ( !(in = fopen( argv[1], &quot;r&quot;)) )
    Error( &quot;Can\'t open %s.\n&quot;, argv[1]);
  if ( !(out = fopen( argv[2], &quot;wb&quot;)) )
    Error( &quot;Can\'t create %s.\n&quot;, argv[2]);

//  Construct the AlphaMap array.  This is done purely for speed, as
//  the memchr() function could be used to search the string.
  memset( AlphaMap, 0, sizeof( AlphaMap)); // Clear it to 0
  for ( ch = Alphabet, i = 1; *ch; ch++, i++)
    AlphaMap[ *ch] = (UCHAR) i;
//  Read the input file, compress and encode it.
  while( fgets( (char *)lbi, sizeof( lbi)-1, in))
  { // Read until eof
    Orig_Count += (strlen( (char *)lbi));   // Total original UCHARs
    Compress();
  } // Digest the file
//  Show some summary data.
  printf( &quot;\n\n&quot;
    &quot;\tOriginal text size:\t\t%ld\n&quot;
    &quot;\tCompressed text length:\t\t%ld\n&quot;
    &quot;\tSavings:\t\t\t%ld\n&quot;,
    Orig_Count, Comp_Count, Orig_Count-Comp_Count);
  fclose(in);
  fclose( out);
  exit(0);
}  // End of main

//  Compress - Compress a line and do repeated byte encoding.
//  This is a two-pass operation. Internally, we store a flag in lbi of
//  0x8000 + count. The next byte in lbi[] may contain the repeated byte.
void Compress( void)
{
  register UINT k;
  UCHAR
    *ch1,               // Source pointer
    *ch2;               // Destination pointer
  for ( ch1 = lbi, ch2 = lbo; *ch1;)
  { // Scan the line
    if ( (k = DupeCheck( ch1)) &gt; DUPE_THRESHOLD )
    { // Compression is okay
      *ch2++ = 0;
      *ch2++ = (UCHAR) k;
      *ch2++ = *ch1;            // Store the repeated string
      ch1 += k;
    }
    else
    { // See about characters &gt; 127 -- quote them
      if ( *ch1 &gt; 127)
      { // If needs quoting
        *ch2++ = 0;
        *ch2++ = *ch1++;
      }
      else
      {
//  See if there are three consecutive symbols that reside in our 5-bit
//  alphabet. Note that an end-of-line will fail the test automatically, so
//  it doesn't require checking.
    if ( AlphaMap[ *ch1] &amp;&amp;
         AlphaMap[ *(ch1+1)] &amp;&amp;
         AlphaMap[ *(ch1+2)])
    { // Bingo--got all three
      k = 0x8000 | ((AlphaMap[ *ch1]-1) &lt;&lt; 10) |
                   ((AlphaMap[ *(ch1+1)]-1) &lt;&lt; 5) |
                    (AlphaMap[ *(ch1+2)] -1);
      *ch2++ = (UCHAR) (k &gt;&gt; 8);   // Store first byte
      *ch2++ = (UCHAR) (k &amp; 255);  // Store second byte
      ch1 += 3;  // Advance
    }
    else
     *ch2++ = *ch1++;  // Everything else
      } // If character below 128
    } // If not compressible string
  } // Scan the line
  Comp_Count += (ch2 - lbo);  // Update compressed count
  fwrite((char *)lbo, (size_t)(ch2 - lbo), sizeof( UCHAR),
    out);  // Dump the line
  return;
} // Compress

//  DupeCheck - Return the number of duplicated characters.
//  Scans to end of line. Always returns at least 1.
int DupeCheck( UCHAR *what)
{
  UCHAR cref;               // Reference character
  int k;                    // Induction variable
  for ( cref = *what++, k = 1; *what; what++, k)
    if ( cref != *what)
      break;                // Just scan for same character
  return k;
} // DupeCheck

//  Error - Give an error and a message, then exit.
//  A string argument may be given, if desired.
void Error( char *msg, char *str)
{
  if ( in)
    fclose(in);      // Close files if still open
  if ( out)
    fclose( out);
  if ( str)
    fprintf( stderr, msg, str);
  else
    fprintf( stderr, msg);
  exit(1);
} // Error


<a name="0347_0030"><a name="0347_000e"><a name="0347_000f"></pre><B>[LISTING THREE]</B><pre><a name="0347_000f">

/* ----------------------------------------------------------- *\
**  decomp5.cpp -- Decompress file compressed with comp5.      **
**   Copyright (c) 1993 by Chuck Guzis. All rights reserved.   **
\* ----------------------------------------------------------- */

#include  &lt;stdio.h&gt;
#include  &lt;stdlib.h&gt;
#include  &lt;string.h&gt;
#include  &lt;ctype.h&gt;

#define LINE_MAX 128              // Length of the longest line
typedef unsigned char UCHAR;      // Define a UCHAR
typedef unsigned int UINT;        // Define a UINT
FILE *in;                         // Input file
FILE *out;                        // Output file

//  Our 5-bit alphabet.
char Alphabet[] = &quot;abcdefghijklmnopqrstuvwxyz ,.;- &quot;;

//  Function prototypes.
void main( int, char **);          // Main function
void Error( char *, char *);       // Error routine
void Decompress( void);            // Decompress
void main( int argc, char *argv[])
{
  in = NULL;
  out = NULL;
//  Open the files, give an error if problems arise.
  if ( argc != 3)
    Error( &quot;Command form is - DECOMP5 &lt;in-file&gt; &lt;out-file&gt;\n&quot;, NULL);
  if ( !(in = fopen( argv[1], &quot;rb&quot;)) )
    Error( &quot;Can\'t open %s.\n&quot;, argv[1]);
  if ( !(out = fopen( argv[2], &quot;w&quot;)) )
    Error( &quot;Can\'t create %s.\n&quot;, argv[2]);
//  Read the input file, decode it.
  Decompress();
  fclose(in);
  fclose( out);
  exit(0);
}  // End of main

//  Decompress - Read and decompress the data.
//  This routine does all of the work. Single-character I/O is done
//  in the interest of simplicity.
void Decompress( void)
{
  UCHAR ch;             // Current character
  UINT k;               // Scratch word cell
  while( !feof(in))
  { // Read and decode
    ch = (UCHAR) fgetc( in);
    if ( ch &amp; 0x80)
    { // Special flagging, packed 5 bits
      k = (ch &lt;&lt; 8);
      ch = (UCHAR) fgetc( in);
      k |= ch;           // Form a word
      fputc( Alphabet[ (k &gt;&gt; 10) &amp; 31], out);
      fputc( Alphabet[ (k &gt;&gt; 5) &amp; 31], out);
      fputc( Alphabet[ k &amp; 31], out);   // Unpack all three
    }
    else
    {
      if ( ch == 0)
      { // Escape or repeated byte
    ch = (UCHAR) fgetc( in);
    if ( ch &lt; 128)
    { // Repeated byte
      k = ch;
      ch = (UCHAR) fgetc( in);  // Get the actual byte
      while (k--)
        fputc( ch, out);        // Write the repeated byte
    }
    else
      fputc( ch, out);      // Not repeated, but just quoted
      }
      else
    fputc( ch, out);        // Just an ordinary character
    } // If not flagged
  } // Read the input
  return;
} // Decompress

//  Error - Give an error and a message, then exit.
//  A string argument may be given, if desired.
void Error( char *msg, char *str)
{
  if ( in)
    fclose(in);         // Close files if still open
  if ( out)
    fclose( out);
  if ( str)
    fprintf( stderr, msg, str);
  else
    fprintf( stderr, msg);
  exit(1);
} // Error





</pre><HR><P>Copyright &copy; 1993, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
