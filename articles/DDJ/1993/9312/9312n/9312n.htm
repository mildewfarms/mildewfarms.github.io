<HTML>
<META NAME="year" CONTENT="1993">
<HEAD>
<TITLE>DEC93: PROGRAMMER'S BOOKSHELF</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>PROGRAMMER'S BOOKSHELF<a name="039e_0003"></h1><P>
<h2><a name="039e_0001"><a name="039e_0000">Robots Make Their Move</h2><P>
<h3>Jonathan Erickson</h3><P>
<a name="039e_0002"><a name="039e_0000"><B><I>Mobile Robots: Inspiration to Implementation</I></B><P>
<I>Joseph L. Jones and Anita M. Flynn</I><P>
A K Peters, Ltd., 1993, 349 pp., $39.95<P>
ISBN 1-56881-011-3<P>
Mobile robots, long the high-tech toy of researchers, tinkerers, science fiction buffs, and like dreamers, may finally be coming into their own. Of course, stationary robots proved up years ago, at least in automated factories where they play a key role in manufacturing everything from cars to computers. (Interestingly, Steve Jobs' robot-centric manufacturing facility recently went on the auction block, a victim of Next's refocus on software.) But except for critters like R2D2 in <I>Star Wars</I>, mobile robots haven't moved forward the way their stationary cousins have.<P>
The paucity of real-world mobile-robot applications can be traced in part to the difficulties of integrating multiple complex technologies: computational hardware, sensors, machine vision, mechanics, real-time control, motors, power, programming, recognition, multitasking, learning, and navigation, to mention a few. Just getting two or three of these working together harmoniously is difficult; uniting all of them in an affordable, efficient, and reliable package can be daunting indeed.<P>
But recent reports like the following out of Maryland suggest mobile robots are moving from the theoretical to the practical. In this case, the police sent a three-foot tall, 480-pound remote-controlled mobile robot into an apartment to disarm and capture a murder suspect. Upon opening a bedroom closet door and finding a pile of clothes, the robot began plucking at the pile until the hidden suspect was uncovered. After a brief tussle, the robot used a high-pressure water gun to knock a shotgun out of the suspect's hands, enabling police officers to burst in and arrest the suspect. Practical? You bet. By avoiding a bloody confrontation, someone's life was surely spared. (Of course, not every mobile robot performs so heroically. When a mobile robot was recently sent in to disarm a bomb in San Francisco, it moved forward a few feet, then began spinning in circles instead of grabbing the bomb. Then again, maybe the robot knew what it was doing all along. That's California for you.)<P>
Over the past few years, much of the work at the MIT Artificial Intelligence Lab's Mobile Robot Group has focused on how to more smoothly integrate disparate hardware and software more smoothly to better cope with &quot;computational bottlenecks, noisy sensors, and the complexity of reality.&quot; In particular, the Lab has been investigating &quot;new models of intelligence that would be robust and work in real time.&quot; <I>Mobile Robots: Inspiration to Implementation</I> by Joseph L. Jones and Anita M. Flynn is an outgrowth of that research. Flynn (who's associated with the Lab) and Jones (of IS Robotics, makers of research robots and sensor systems) have written a book that's a trove of information--even if you're not particularly interested in robots. On one level, <I>Mobile Robots</I> provides you with virtually all the information you need to build your own mobile robot, including everything from parts lists and suppliers to control software and schematics. But <I>Mobile Robots</I> is more than a project cookbook. On another level, it's the application of a new approach to artificial intelligence referred to as &quot;nouvelle AI.&quot; And on still yet another level, the book is a comprehensive treatise on embedded-systems design.<P>
At the heart of the book is a robot called &quot;Rug Warrior&quot; that's designed around the Motorola 68HC11 microcontroller. (Flynn and Jones also briefly present TuteBot, a simple non-microprocessor-based mobile robot built from switches, relays, motors, and discrete electronic components.) Rug Warrior is significant in that its design is based on a <I>subsumption architecture</I>, a concept proposed by Rodney Brooks (also of MIT's Mobile Robot Lab) which organizes intelligence systems by layering arbitration mechanisms (that is, the priority process) between task-achieving behaviors. In other words, &quot;in a subsumption architecture, the designer of the intelligence system lays out the behaviors in such a way that higher-level behaviors subsume lower-level behaviors when the higher-level behaviors are triggered.&quot;<P>
For example, Rug Warrior can exhibit a &quot;follow-light&quot; behavior that would have higher priority than a &quot;random-wandering&quot; behavior. When Rug Warrior detects a high-intensity light source, it moves towards it. If the light source were turned off, the follow-light behavior would deactivate, cease subsuming the wandering behavior, and random wandering would resume. (Light sensors are one of several sensors the Rug Warrior can have; others include sensors for tilt, sound, force, motion, and the like. The authors provide drivers for most of these.)<P>
The beauty of subsumption, say Flynn and Jones, is that it lets you tie together in a coherent and efficient whole all elements of robot control via <I>behavior fusion</I>--and do so using modest computational resources. Alternatively, the traditional approach to programming robots--the modeling/planning paradigm--employs <I>sensor fusion</I> which is much more computationally intensive because it uses a series of sequence steps to transform sensory data into a series of actions. Certainly, the modest processing power of most low-cost microcontrollers lends itself to subsumption, rather than modeling/planning. <a href="199303a0.htm">Figure 1</A> illustrates an example of one way subsumption might be implemented for Rug Warrior. Subsumption has its roots in the nouvelle AI movement which investigates distributed approaches to organizing intelligence systems. (For more information on nouvelle AI, Jones and Flynn point to <I>Designing Autonomous Agents: Theory and Practice from Biology to Engineering and Back</I> by Pattie Maes, MIT Press, 1991.)<P>
The authors implement subsumption in both pseudocode and a version of C called &quot;IC,&quot; (short for &quot;Interactive C&quot;). In doing so, they introduce and implement behaviors as finite-state machines. IC, written by Randy Sargent and Fred Martin of the MIT Media Lab, is an implementation of C for the 68HC11A0 available free-of-charge via anonymous FTP on the Internet (cherupakha.media.mit.edu, or 18.85.0.47) IC, which runs on the PC, Macintosh, and UNIX, lets you initiate and terminate processes and execute C statements immediately. The source code presented in <I>Mobile Robots</I> is written C and 68HC11 assembler. (Jones and Flynn note that most of their actual lab work is done in Lisp; however they switched to C in the book because of familiarity amongst programmers.) As you can see in <a href="199303a1.htm">Figure 2</A>, IC syntax is C-like. Note that the code snippet in <a href="199303a2.htm">Figure 2</A> implements, in part, the subsumption network in <a href="199303a3.htm">Figure 1</A>.<P>
When it comes down to it, Rug Warrior is really nothing more than an embedded system that can move about and, from this perspective, <I>Mobile Robots</I> is one of the most complete presentations of embedded-system development you'll come across. From microcontroller innards to logic components and hardware/software interfaces, the book provides a design approach that's practical, comprehensive, and, because of the subject matter, entertaining. If you're new to embedded-systems development, or a veteran wanting hands-on information about designing MC68HC11-based systems, <I>Mobile Robots</I> provides one-stop shopping.<P>
The only downside to the book is the $39.95 price tag, which may keep <I>Mobile Robots</I> out of the hands of many potential readers. Instead of expensive color photographs and glossy hardcover, the publisher might have been better advised to produce a more affordable book. After all, it's the content that makes <I>Mobile Robots</I> unique and valuable, not the presentation.<P>
It's been over ten years since I last put together a robot, a Rube Goldberg-like stationary arm controlled by a now-extinct Radio Shack TRS-80 Model I. After reading <I>Mobile Robots</I>, I've decided its about time to get moving on another robotics project.<P>
<h4> <a href="199303a4.htm">Figure 1</A>: Implementing a behavior model using a subsumption architecture.</h4><P>
<h4> <a href="199303a5.htm">Figure 2</A>: IC source code that implements a behavior model called cruise.</h4><P>

<HR><P>Copyright &copy; 1993, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
