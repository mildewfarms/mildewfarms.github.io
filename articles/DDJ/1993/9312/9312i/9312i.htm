<HTML>
<META NAME="year" CONTENT="1993">
<HEAD>
<TITLE>DEC93: Wireless Data and Minimum Airtime Software</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Wireless Data and Minimum Airtime Software<a name="038c_0003"></h1><P>
<h2><a name="038c_0001"><a name="038c_0000">Cutting down on data-transfer errors</h2><P>
<h3>Darrell Diem</h3><P>
<p><i><a name="038c_0002"><a name="038c_0000">Darrell is software development manager for Motorola EMBARC advanced messaging. Darrell can be contacted at 407-463-3151</i></p><hr><P>
Wireless networks can be implemented as either LANs, MANs (metropolitan area networks) or WANs (wide area networks). By providing coverage for a building, city, region, or even a nation, wireless-network technology makes it possible for you to stay connected while still on the move. However, software developers who wish to create wireless-enabled applications need to understand some of the technical problems and user limitations of wireless networks.<P>
The biggest limitation of wireless networks is the range and signal strength of transmitters. The location of the receiver in relation to structural surroundings can also affect reception quality. Some radio signals do a better job of penetrating buildings and earth than others. Wireless networks that use paging technology, for example, provide for signal overlap, and the receivers are designed to catch even the faintest signals. But in many cases, an end user can do little to improve the likelihood of error-free data reception--other than change his or her location.<P>
Even if the receiving unit is within the transmitter's range and the signal comes through clearly, problems such as electrical interference (either atmospheric or man-made) can corrupt a file during wireless transmission. Often, the entire file needs to be transmitted again. This does more than just frustrate the person waiting for information in the field--it becomes a costly way to manage wireless data.<P>
Obviously, the less time the data spends flying across the air, the better the chance for error-free reception. All else being equal, the time it takes to move data across a network is directly related to the amount of data being moved. Of course, other variables apply to this equation, like data compression and throughput speed. But in general, small files take less time to move across networks, regardless if they're wired or wireless.<P>
When coded into applications, intelligent data-management software techniques, give the user control over the amount of time data spends in the air. This not only reduces the chance for errors, but significantly reduces a users bill for wireless-network airtime. These approaches incorporate &quot;minimum airtime software&quot; (MATS) algorithms.<P>
Airbase, the MATS implementation described in this article, was developed for Motorola's EMBARC (Electronic Mail Broadcast to a Roaming Computer) nationwide, wireless e-mail and data network. EMBARC, a one-way wireless approach to roaming data, is based on paging broadcast technology. You can use EMBARC to send e-mail, transfer files, and update databases simultaneously to one or more users who may be widely dispersed--and it costs the same no matter how many people you send the message to.<P>
Mobile computer users need low-error wireless delivery of data that they can control, and they need the ability to quickly recover corrupted or lost data. These needs led to the development of an &quot;intelligent packet&quot; MATS solution that addresses the problems associated with lengthy over-the-air transmission time.<P>
<h3><a name="038c_0004">MATS: A Practical Database Example<a name="038c_0004"></h3><P>
Most applications carried by mobile PCs don't require the transfer of large amounts of data--usually the bulk of the data is already on the PC and only needs to be &quot;freshened.&quot; Attempts to send a full file over-the-air when only a small part has changed results in higher costs and greater chance for error.<P>
MATS first assumes that common data is dispersed. It then updates to that database via packets containing new information along with instructions on how to process it into this roaming copy of the database.<P>
Sending data in small packets minimizes exposure to interference-induced errors. Since packets are also identified as a part of a larger &quot;set,&quot; they can be recombined into their original size and format on the receiving platform (usually a PC-type device). Error checking and ID tracking on each packet provides the user with information on a missed or corrupt packet. The receiving person or system can request retransmission of a missing or corrupt packet.<P>
However, multiple errors in a file can still occur if a large number of packets are sent and rebuilt by the receiving application. An error in an ASCII e-mail file is usually tolerable since the document is read by a human, who can usually interpolate the correct answer from the context.<P>
Binary file transfers are a different story. An 1-byte error can crash a program or change a significant digit in a database. Since databases tend to be large (frequently running into multi-megabytes), certain methods must be used to minimize over-the-air time. In addition to reducing the chance for random externally induced errors that can trash a file transfer, these methods are also less expensive than retransmitting the complete file.<P>
<a href="1993038e.htm">Figure 1</A> illustrates the complex interrelationship of a number of variables, all contributing to message errors or corruption. Length of message, mobility of receiver, and signal strength are some sources of externally induced errors.<P>
The MATS approach we implemented to solve these large data-transfer problems involved the development of a DBF (xBase) file editing and packetization software tool called &quot;Airbase.&quot; The tool, which creates a standardized packet with the changes made only to each DBF record in a file, provides a means of launching a batch process upon receipt of the data, and identifying and recovering any lost or corrupt packets. (Airbase is available at no charge from the author.)<P>
<h3><a name="038c_0005">Creating Packets<a name="038c_0005"></h3><P>
In the editing, or update, process, the server-based user selects a DBF file to update, and Airbase creates a &quot;shadow&quot; or companion database file. The names of the databases are the same except that the extension on the shadow copy is DB$. <a href="1993038f.htm">Figure 2</A> shows how the structure of the shadow file differs from the original. Notice the two additional fields in the DB$ structure. All other fields match the DBF structure. The ACTION field in SAMPLE.DB$ is a 1-byte character field containing the intended edit activity: add, copy, and delete. The edit process copies all data from an edited record into the DB$ file.<P>
The specific edit process of adding, updating, copying, and deleting causes the appropriate character to be placed in the ACTION field of the DB$ database. The sort, or key-field, data of the original SAMPLE.DBF record is also placed in the K_FIELD field of DB$. <a href="19930390.htm">Figure 3</A> shows sample record and its DB$ shadow. This data represents an update to the LAST_NAME, ADDRESS and to the CITY/ST/ZIP fields. The sort field is LAST_NAME and the sort data is &quot;Smith.&quot; The record in the SAMPLE.DBF database isn't changed at this point. Changes are accumulated in the shadow file until the session is complete or until the Transmit option is selected from the edit menu. This means that all databases are the same, including the master database, until Transmit is invoked, at which time the following happens:<P>
<UL>
<li>Each record in DB$ is compared to the original in the DBF file.</li>
<li>Each field with a change is extracted into a buffer.</li>
<li>A packet is created for each changed record.</li>
<li>The packet is submitted for transmission.</li>
<li>The packet is itself placed in a transmission packet and transmitted.</li>
<li>The file SAMPLE.DBF record is updated.</li>
<li>The SAMPLE.DB$ record is marked &quot;sent&quot; (deleted with *).</li>
</UL>
The wireless modems receive and either store or download the transmitted data packets. <a href="#038c_0009">Table 1</A> shows the basic structure of an Airbase packet.<P>
<h3><a name="038c_0006">Receiver Processing<a name="038c_0006"></h3><P>
The packet is received by a wireless receiver (the NewsStream receiver, in the case of EMBARC) and stored in the unit's internal buffer. When connected to a PC equipped with receiving software, the packets are downloaded to mailboxes and stored on disk. The system-level transmission packet header contains information including its own CRC error-checking data, source of message, time sent, number of pieces to come, application tag, unique ID, and so forth.<P>
The download software uses the application tag to determine if the packet is an Airbase data packet. If the download software is installed with the auto-process flag set to &quot;on&quot; and, if an Airbase packet is received, upon processing the last packet, the software, will stuff the keyboard buffer with a numerically named batch file. If no foreground process is running, this will launch the batch file for postprocessing the packet according to the batch-file contents. This could include a dial-back request for lost or corrupt packets to be re-broadcast. <a href="#038c_000a">Listing One</A> (page 102) shows how postprocessing is implemented. The first byte of the packet is the batch-file number. For example, a &quot;5&quot; in the first byte will launch a batch file named 5.bat, and so on. If the first byte is a 0, no keyboard stuffing occurs. <a href="#038c_000c">Listing Two</A> (page 103) provides details on download processing.<P>
<h3><a name="038c_0007">User Control<a name="038c_0007"></h3><P>
Recipients of the data can use Airbase to review the mailbox data and process it into a target database, delete the data, launch the indicated batch file, or do nothing.<P>
The received data-packet header is used to find the database file using the pathname in the packet. This lets the sender and user to update or maintain multiple copies on the receiving platform. The recipient controls access to the data by installing the wireless-modem download software with the auto-process flag set on or off. Manual execution of updates can than be executed via menus.<P>
Airbase is a three-way application: It's an editor and wireless transmit package, it provides manual review and update options for received data, and it can be called with command-line processing strings in a batch-file mode for auto-updating. See <a href="#038c_000a">Listing One</A> for details on how to process the packet. (Airbase, a free library, and sample source for this process are available from the author.)<P>
<h3><a name="038c_0008">Conclusion<a name="038c_0008"></h3><P>
The benefits from a small packet of &quot;difference only&quot; data such as that provided by MATS are:<P>
<UL>
<li>Reduced opportunity for random errors due to interference,</li>
<li>Receiver &quot;overview&quot; of data before application of updates to a data file</li>
<li>Identification of lost/corrupt packets</li>
<li>Lower cost of transmission.</li>
</UL>
The small size also reduces the high cost of retransmitting data if an error occurs, since only packets and not the full file, are rebroadcast. Recipient control over auto-batch or manual processing provides error-management control and callback capability for corrupt or missing packets.<P>
Other approaches to reducing the airtime for over-the-air file updates are required when the data structures are too complex to address with a special-purpose application such as Airbase. Spreadsheets and word-processing files are two such examples. To minimize file size and airtime exposure, the files could be compressed but, in most cases, they will still be large. Also available are utilities that create a &quot;difference&quot; file by comparing an original with a changed file. One such &quot;differencing&quot; package is .RTPatch by Pocket Soft (Houston, Texas).<P>
Coverage, error management, and the cost of wireless data distribution will improve over time. The users of the technology need to know the strengths and limits of any given implementation in making choices. Software selection and data-management strategies are opportunities for users to improve delivery quality and reduce costs. Management of data before, during, and after wireless delivery are equally important. A little thought can provide a higher-quality, cost-effective solution for maintaining &quot;roaming data.&quot;<P>
<h4> <a href="19930391.htm">Figure 1</A>: Variables that can contribute to message errors or corruption.</h4><P>
<h4> <a href="19930392.htm">Figure 2</A>: The structure of the original (SAMPLE.DBF) vs. a shadow file (SAMPLE.DB$).</h4><P>
<h4> <a href="19930393.htm">Figure 3</A>: A sample record (SAMPLE.DBF) and its DB$ shadow (SAMPLE.DB$).</h4><P>
<h4><a name="038c_0009">Table 1: Airbase data-packet structure<a name="038c_0009"></h4><P>
<pre>NAME     Bytes     TYPE     CONTENTS
Batch Tag     1     Binary     Batch-file tag number 0x01 = no<P>               tag used
Trans Type     1     ASCII     Transaction Type:
               A  ADD
               U  Update
               C  Copy
               D  Delete
Time Stamp     17     ASCII     Nonnull terminated time stamp.<P>               String format:<P>               &quot;MM/DD/YY&lt;space&gt;HH:MM:SS&quot;.
Num of Fields     1     Binary     Number of fields in the packet body
BCC     1     Binary     Block -check character. Calculated<P>               over entire      packet except for the<P>               BCC component.
Dest DB Name     1     Binary     Length of destination DB,<P>   Length               64-character      maximum.
Dest DB Name      0 to 64     ASCII     Pathname of destination DB, nonnull<P>               term.
Field Name      1     Binary     Length of field name.
   Length
Field Name     1 to 25     ASCII     Field name of changed data, nonnull<P>               term.
Key Index     1     Binary     Key indicator level of field:
               0x00 not a key field
               0x01 primary key field
               0x02 secondary key field
               0x03 tertiary key
               0xnn 0xnn<I>th</I> key
Data Length     2     Binary     Length of data.
Data     0 to 64K     ASCII/<P>          Binary     Actual data.
</pre><P>

<PRE>


_WIRELESS DATA AND MINIMUM AIRTIME SOFTWARE_
by Darrell Diem

<a name="038c_000a"><a name="038c_000b"><B>[LISTING ONE]</B>

/**************************************************************************
**  FUNCTION: MasterDBUpdate
**  DESCRIPTION: Dummy master database update routine invoked by the
**       TSR record handler for live updates
**  PARAMETERS: None
**  RETURN VALUES:
**  ERRCTKNONE  - Master D/B update performed successfully
**  ERRxxx      - Master D/B update not performed.  The Message Handler
**                will write the record to the Holding File
**  ERROR HANDLING:
**  NOTES:
**  PSEUDOCODE:
**  BEGIN MasterDBUpdate
**  END MasterDBUpdate
***************************************************************************/
int DBUpdate(int iApiIdTag, int Flag_argc)
{
    int     iRecNum,icounter;
    char       cTransType;
    int     iErCode = 0;
    int     iRetn = 0;
    int     iNumFields;
    MBOX        *pstMbx;    // pointer to mailbox structure created by API
    MBOX_MSG_HDR *pstHdr;       // buffer for mbox hdr data
    static char szOldKeyVal[FLDVALSIZ + 1];
    static char szNewKeyVal[FLDVALSIZ + 1];
    static char szTimeStamp[CTKTIMESTAMPLEN];
    static char szDataFile[_MAX_PATH];
    static char szIndxFile[_MAX_PATH];

    static char szDrive[_MAX_DRIVE];
    static char szDir[_MAX_DIR];
    static char szFname[_MAX_FNAME];
    static char szExt[_MAX_EXT];
    PDBINDFILEX pstDbFileX;

   /* perform CtkBeginTrans to get the Transaction Type, the Time Stamp,
   ** the Number of Fields in the Client/Server Packet, and the Destination
   ** Database Name */
   CtkQueueSize(iApiIdTag,&amp;iRecNum);

   icounter = iRecNum;  //number of records in mbox
   if(Flag_argc == 0)   //flag to do only newest data
iRecNum = 1;     //newest 1st so updates reflect only latest data

   //command line overrides the num recs selection
if(Flag_argc &gt; 0 &amp;&amp; Flag_argc != 'X') {
iRecNum =Flag_argc;
Flag_argc = 0;    //do only indicated rec Number
      //flag_argc to break while loop 1st pass
}
     /* loop until all processed or break encountered */
     while (iRecNum &gt; 0 &amp;&amp; iRecNum &lt;= icounter ) {

     /* open mailbox to check app_flag processing status 3 == done */
if ((iErCode = API_open_mbox(iApiIdTag, MBX_RD_WRT, &amp;pstMbx))
       ! = EPC_NO_ERR)
{
return iErCode;
}
  /* retrieve mailbox message header for this message and get message length */
if ((pstHdr = malloc((size_t) sizeof(MBOX_MSG_HDR))) == NULL)
{
API_close_mbox(&amp;pstMbx);
return ERRCTKMEMALLOCHDR;
}
if ((iErCode = API_get_msg_hdr_from_mbox(pstMbx, iRecNum, pstHdr))
      != EPC_NO_ERR)
{
free(pstHdr);
API_close_mbox(&amp;pstMbx);
return iErCode;
}
iRetn = pstHdr-&gt;app_flag;        //if zero set app_flag to
API_set_app_flag(pstMbx,iRecNum,3);  //num 3 for 'processed' data
free(pstHdr);
API_close_mbox(&amp;pstMbx);
  //this process is for command-line updates
if(iRetn &gt;= VIEWED &amp;&amp; Flag_argc &gt; 0) {
iRecNum--;
if(iRecNum &lt;= icounter) break;
continue;
     }
     CtkReadQueue(iApiIdTag, iRecNum);   //set up data packet buffer
     if ((iRetn = CtkBeginTrans(&amp;cTransType, szTimeStamp, &amp;iNumFields,
     szDataFile)) == ERRCTKNONE)
     {
/* construct index file name from the name of the data file by
** changing the extension from (nominally) &quot;.DBF&quot; to &quot;.NDX&quot; */
_splitpath(szDataFile, szDrive, szDir, szFname, szExt);
_makepath(szIndxFile, szDrive, szDir, szFname, &quot;.NDX&quot;);

/* attempt to open the data and index files for writing */
if ((pstDbFileX = DbOpenX(szDataFile, szIndxFile, TRUE)) == NULL)
{
     iRetn = ERRCTKDBUPDATEFAILED;
}
else
{
     /* attempt to retrieve the record from the database */
     iRetn = LocateDbRec(pstDbFileX, iNumFields,
szOldKeyVal, szNewKeyVal);
     switch(iRetn)
     {
/* record was found in D/B */
case ERRDB3NONE:
    switch (cTransType)
    {
case CTKTRANSADD:
    iRetn = ERRCTKDUPLICATEREC;
    break;
case CTKTRANSUPDATE:
    iRetn = TransUpd(pstDbFileX, iNumFields,
    szOldKeyVal, szNewKeyVal);
    break;
case CTKTRANSDELETE:
    iRetn = TransDel(pstDbFileX);
    break;
default:
    iRetn = ERRCTKINTERROR;
    break;
    }
    break;
/* record was not found in D/B */
case ERRDB3READFAILED:
case ERRDB3SEARCHFAILED:
    switch (cTransType)
    {
case CTKTRANSADD:
    iRetn = TransAdd(pstDbFileX, iNumFields, szNewKeyVal);
    break;
case CTKTRANSUPDATE:
case CTKTRANSDELETE:
    iRetn = ERRCTKNOSUCHREC;
    break;
default:
    iRetn = ERRCTKINTERROR;
    break;
    }
default:
    break;
    }
    /* close the data and index files */
    DbCloseX(pstDbFileX);
}
/* end transaction, and if it failed then record error */
if ((iErCode = CtkEndTrans()) != ERRCTKNONE &amp;&amp; iRetn == ERRCTKNONE)
{
    iRetn = ERRCTKDBUPDATEFAILED;
}
iRecNum--;
if(iRecNum &lt;= 0  || Flag_argc == 0) break;
     } //end while loop
API_enable_core(API_NO_FUNCT);
     }
     fclose(pstTraceFile);
     return iRetn;
}


<a name="038c_000c"><a name="038c_000d"></pre><B>[LISTING TWO]</B><pre><a name="038c_000d">

      // Batch file stuff goes here
     //
#ifdef BATCH_STUFF
  if(iBatch_Tag == 1) {
         if ( MbxHeader.api_tag &gt;= 33 &amp;&amp; MbxHeader.api_tag &lt;= 39 )
         {
  if ( do_batch_thing != 0 )
  {
       char batch_key_stuffin[30];
       // the first byte of the message is called do_batch_thing
      _itoa(do_batch_thing, batch_key_stuffin, 10);
      strcat(batch_key_stuffin,&quot;.bat\r\n&quot;);
  kbflush();
    if(MbxHeader.k_block == MbxHeader.n_blocks) //use only last request in list
 kbstuff(1, batch_key_stuffin);
  }
        }


</pre><HR><P>Copyright &copy; 1993, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
