<HTML>
<META NAME="year" CONTENT="1993">
<HEAD>
<TITLE>JUN93: EXTENDING A VISUAL LANGUAGE FOR SIMULATION</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>EXTENDING A VISUAL LANGUAGE FOR SIMULATION<a name="0182_0003"></h1><P>
<h2><a name="0182_0001"><a name="0182_0000">Discrete-event simulation made possible via DLLs</h2><P>
<h3>Peter D. Varhol</h3><P>
<p><i><a name="0182_0002"><a name="0182_0000">Peter is an assistant professor of computer science and mathematics at Rivier College in Nashua, New Hampshire.</i></p><hr><P>
As a college teacher, I'm constantly on the lookout for ways to supplement a purely mathematical treatment of system simulation and modeling.  My mostly adult professional students are usually more interested in answering the questions &quot;how and where is this useful&quot; rather than &quot;how or why is this done,&quot; necessitating a practitioner's approach to the subject.<P>
The standard languages for system simulation, such as GPSS and Simscript, are old and don't take full advantage of many of the PC's capabilities.  The alternative is to learn a new programming language to do simulation, and the simulation system itself must be expressed in terms of that language.  Further, even with educational discounts, these packages are priced beyond the reach of the students I serve.  Thus, I was understandably optimistic when introduced to VisSim, a simulation package based on a visual programming language.<P>
With VisSim, the user constructs simulations by manipulating graphical blocks representing different high-level functions useful in simulation.  These blocks are then connected to create the flow of data through the simulation.  These characteristics make the software easy to learn and highly visual, giving students better insight into the simulation process. VisSim currently runs in Microsoft Windows and on several UNIX/X platforms.  According to the vendor, Visual Solutions, the UNIX port was done by emulating the Windows API on top of X, making simulations portable between the platforms.<P>
For most of my needs, however, VisSim has one major drawback--it lacks the ability to perform discrete-event simulation, which is in far more common use than continuous simulation.  Discrete-event simulation models systems in which &quot;customers&quot; enter the system, receive &quot;service,&quot; and leave.  While this may seem more appropriate for modeling business-oriented systems, I've used this approach to successfully model systems such as job scheduling on multiuser computers, failure prediction on system components, and reliability analysis of automated processes.  &quot;Customers&quot; can readily refer to people, computer processes, automobiles on a highway, failed electrical components, or hundreds of other discrete tasks.<P>
In addition to being enormously useful, discrete-event simulation is both conceptually and computationally easier than continuous simulation, and requires little math beyond algebra. These characteristics make it easier for students to understand, and more useful in many of their professions.<P>
<h3><a name="0182_0004">Customizing VisSim Using DLLs<a name="0182_0004"></h3><P>
Fortunately, the VisSim menus include what is called a &quot;user-defined block,&quot; a gateway to user-written dynamic link libraries (DLLs).  These DLLs can be written for practically any purpose, and Visual Solutions supports C, Pascal, and Fortran.  (The use of Fortran requires C calling conventions.)  The ability to use Fortran is a nice feature for those who have existing Fortran code that can be included as part of a VisSim simulation.<P>
Calling a user-defined function (in C) or procedure (in Pascal) in a DLL is simple. Selecting the userFunction from the menu and clicking in the window creates a rectangular block similar to predefined function blocks.  The user can press the right mouse button to open a window to name both the DLL and the function.  The DLL is loaded at that time, so it has to be in place before you create the block on the screen.  The block can now be treated like any predefined block in VisSim, enabling it to be used as an operation in a larger simulation.<P>
There are certain limitations in the DLL gateway that make the development of discrete-event procedures somewhat challenging.  VisSim is designed so that the gateway between the application and the DLL consists of a three-element array of double-precision reals.  While this data type may be useful for continuous simulations, discrete-event procedures rely more heavily on integer operations.  This means that many type conversions have to be performed in the DLL.  It also means that no more than three values can be passed to a DLL at one time.<P>
<h3><a name="0182_0005">Choosing a Development Environment<a name="0182_0005"></h3><P>
I decided to work in Turbo Pascal for Windows, for several reasons.  First, I already had experience writing DLLs in Turbo C++, and I wanted to be able to compare the techniques used there with another language.  Specifically, I thought that C DLLs were unnecessarily complex (what purpose does the WEP function really serve?) and was looking for an easier way.  Second, I wanted my students to be able to examine and modify the DLLs, and Pascal is still a more universally accepted academic language.<P>
Writing DLLs is easier in Pascal than in C, although Pascal's stricter type checking meant that I had to be creative in my type conversions.  Turbo Pascal requires only that the program be declared as a library, that the appropriate Windows &quot;user&quot; files be included, and that the procedures be exported at the end of the file.  As in writing DLLs using C, there's no main program as such.<P>
<h3><a name="0182_0006">Designing the DLLs<a name="0182_0006"></h3><P>
The discrete-event DLLs I needed can be divided into two categories.  First, I had to design a set of procedures that would calculate the appropriate statistics resulting from the discrete-event processes.  These statistics included expected time spent in the system, expected number of customers in the system, and the probability of a given number of customers in the system.  These are relatively straightforward, with simple equations involving math no more difficult than algebra.  They are computations that summarize the results of a simulation, and will likely be used just prior to a VisSim output block.<P>
The second and more complex part of the problem was that I had to generate random events according to distributions that are most often associated with discrete processes.  VisSim gives me random numbers that follow the uniform and normal distributions, which were useful, but I really needed the Poisson and exponential distributions.  These values would represent the arrival rates and service times of the system.<P>
There are two ways of doing this.  First, I could use VisSim's uniform distribution generator, pass it to a DLL, filter the values so that the resulting random numbers followed the Poisson distribution, and finally return the filtered values back to VisSim.  On the other hand, I could use the random-number generator in Turbo Pascal.<P>
As <a href="#0182_000b">Listing One</A> (page 95) shows, I opted for the latter approach. Though I was not sure if there was a performance penalty in passing large amounts of random numbers to my DLL for filtering, it seemed more efficient to both create and parameterize my customer arrival rates and service rates from Pascal.  The input to this event-generation DLL will be the mean of the desired probability distribution, and the output will be the random values generated by that distribution.<P>
I ended up with three DLLs.  The first created random numbers and filtered them so that they followed the Poisson distribution, and returned these values back to VisSim.  The second did the same thing for the exponential distribution.  The third calculated system statistics based on the interaction between the two series of random numbers, and returned these statistics to VisSim.<P>
<h3><a name="0182_0007">A Template for Queueing Models<a name="0182_0007"></h3><P>
<a href="19930184.htm">Figure 1</A> shows an application of my discrete-event DLLs. I've kept it general, so that it can be used both as a template for simulating more specific systems and as a part of a more-complex simulation model.<P>
The queueing system itself has three inputs: the mean customer-arrival rate, the mean service time, and the number of servers.  The mean customer-arrival rate is used as input to my Poisson random-number filter DLL, designated by the step-distribution icon.  This returns customer interarrival times that follow the Poisson distribution, which are the customer inputs to the queueing system.<P>
The mean service time, which follows the exponential distribution, is set by the slider block and filtered through my exponential random-number generator DLL to produce individual customer-service times.  This DLL is designated by the negative exponential curve icon.  These service times for individual customers are passed into the queueing system.<P>
The last input is the number of servers, which comes from a variable block.  Note that the number of servers can easily be changed between simulation runs by changing the input variable to the &quot;Number of servers&quot; block.  Likewise, the arrival rate and service time can be adjusted by moving the sliders that contain the respective values.  Currently, the sliders for both the arrival rate and service time can be adjusted at 0.2 intervals between 0 and 20, but that range is also easily changed.<P>
The block labeled &quot;Queueing system&quot; is a compound block that contains several different operations.  It simulates customers being served and calculates several different statistics on the queueing process.  The aforementioned statistics are calculated through values passed into another DLL.  The actual values of three of the statistics are displayed in the final blocks at the far right of the model.<P>
I've used this basic template to model problems from real life, such as jobs being run on a multitasking computer or cars crossing a bridge.  Any system that follows a Markovian process can use these types of discrete operations.<P>
For greater applicability, this template can be enhanced still further.  The current approach assumes that each of the servers in a multiserver system has the same average service time.  This is adequate for most purposes, but would make it difficult to model a distributed computing system where the CPUs had different clock speeds, for example.  Another enhancement would be to display some of the statistics, such as the average number of customers in the system, in a meter or plot so that users can view the activity of the system as it occurs.<P>
<h3><a name="0182_0008">A Little About VisSim<a name="0182_0008"></h3><P>
The time I put into customizing VisSim is in no way a reflection on any failings in the product itself.  VisSim comes with several dozen predefined, high-level operations, divided into 11 categories.  These categories include arithmetic, Boolean operations, integration, transcendental functions, and nonlinear operations.  This toolbox makes it possible to create a wide variety of simulations useful to both engineers and scientists.  Its extensive collection of example simulations cover a number of different practical applications.<P>
The visual modeling approach is well thought out and easily learned by anyone interested in simulating processes.  A particularly nice feature is the ability to construct hierarchical block diagrams, representing hierarchical levels of a simulation.  Like my DLLs, hierarchical function blocks are highly reusable between simulations.<P>
Practitioners will appreciate VisSim (as opposed to traditional simulation languages) because they can visualize the simulation as it progresses.  This can be done with one or more output blocks, which include simple value displays along with more graphical meters and plots.  This allows the user to change parameter values on-the-fly and observe the results of the changes without having to save the data and display it in a spreadsheet.<P>
VisSim also supports the use of bit-mapped graphic icons in place of the simple rectangular blocks for user-defined functions.  The tool includes examples with graphical icons of DC motors and digital controls, which represent fully functional models of those devices.  The icons themselves serve no functional purpose, but serve to better communicate the layout of the simulation.  With my limited artistic ability, I used Windows Paintbrush to create my own set of icons, three of which are used in my queueing system in <a href="19930185.htm">Figure 1</A>.<P>
<h3><a name="0182_0009">Other Approaches to Discrete-event Simulation<a name="0182_0009"></h3><P>
It's possible to perform discrete-event simulation using VisSim without adding DLLs.  In its extensive collection of examples, Visual Solutions includes a simulation of a &quot;widget distribution system,&quot; shown in <a href="19930186.htm">Figure 2</A>.  In this example, widgets are produced, distributed from a central location to regional warehouses, and sold from there.  VisSim incorporates a time delay into a reservoir model to emulate the flow of widgets between distribution locations.<P>
However, this is not the way most professionals are used to thinking about discrete-event simulation, and it adds an unnecessary layer of complexity onto a relatively simple process. My approach, using DLLs for generating the necessary random events, provides simpler and more understandable tools for this category of simulation problem.<P>
<h3><a name="0182_000a">Extending and Enhancing Commercial Software: The Time has Come<a name="0182_000a"></h3><P>
In general, the user-defined DLL is probably one of the most important features in a Windows application.  An increasing number of commercial applications provide this capability, which both provides a thriving market for add-ons and lets technical users customize the products for their specific needs.  While the interface between VisSim and the DLL is restrictive, many DLLs can still be written to make the product useful to more professionals.<P>
VisSim also supports a DDE block, so that a simulation block can act as a data server or client for another application.  This means that a simulation can be used to draw data from a spreadsheet, for example, and can also update the spreadsheet with the results of a simulation run.  Developing simulations using this hot link to other applications and data sources is next on my list of simulation projects.<P>
What advantage does the visual approach to simulation have over a traditional simulation language?  VisSim has a learning curve, but since the simulation is a closer conceptual representation of the system being modeled, the learning curve is not as great as with a simulation language.  Second, a properly constructed simulation, complete with bitmapped icons representing components, can be more instructive, since the relationships between components are more explicit.  These features can benefit not only the student, but also the practitioner who seeks a greater understanding of any complex system.<P>

<PRE>

_EXTENDING A VISUAL LANGUAGE FOR SIMULATION_
by Peter D. Varhol

<a name="0182_000b">
<a name="0182_000c"></pre><B>[LISTING ONE]</B><pre><a name="0182_000c">

{*****************************************************}
{ Borland Turbo Pascal                                }
{ VisSim DLL for Windows                              }
{ Poisson distribution random number generator        }
{ This procedure of the DLL generates a random number }
{ using the Turbo Pascal random number generator,     }
{ then filters the values to pass only those that     }
{ follow the Poisson distribution.                    }
{*****************************************************}

library Queue;     {rather than program}
uses WinTypes, WinProcs;
type
VisSimArg = array[0..2] of double;

Function fact(X:integer) : integer;

var
i, total : integer;

begin
if X &lt;= 0 then fact := 0
else
    if X = 0 then fact := 1
        else
            begin
                    total := 1;
                for i := 1 to X do
                        total := total * i;
                    fact := total
                end
end;

Procedure poisson(var param, X,result:VisSimArg);
export;
const
e = 2.718;

var
n, testX_int, testY_int : integer;
testX, testY, poissonX : double;

begin
   {n := X[0];      contains Poisson mean  }
   Randomize;              {set random seed}
   testX := Random;     {uniform random number}
   testY := Random;          {second random number}
   testX_int := trunc(testX * X[0] * 2);
                                    {scale random numbers and make an integer}
   testY_int := trunc(testY * X[0] * 2);
   poissonX := (Exp(testX) * testX*Ln(-X[0])) / fact(testX_int);
                                                       {generate distribution}
   if poissonX &gt; testX_int then
    result[0] := testX_int
 end;

exports
poisson index 1;      {export by name and index number}

begin     {procedure not called in main program}
end.






<P>
<P>
</pre><HR><P>Copyright &copy; 1993, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
