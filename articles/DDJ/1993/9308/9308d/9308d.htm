<HTML>
<META NAME="year" CONTENT="1993">
<HEAD>
<TITLE>AUG93: C++ Templates</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>C++ Templates<a name="022a_0003"></h1><P>
<h2><a name="022a_0001"><a name="022a_0000">Simplify your C++ code with templates</h2><P>
<h3>Pete Becker</h3><P>
<p><i><a name="022a_0002"><a name="022a_0000">Pete is a software engineer at Borland International and is Borland's principal representative to the ANSI C++ Committee. At Borland he works on Object Windows Library, class libraries, and sometimes linkers. He can be contacted at 1800 Green Hills Road, Scotts Valley, CA 95066.</i></p><hr><P>
Where would the automobile industry be without custom tools? An assembly line in Detroit turns out hundreds of cars each day, each having its own particular variations of color, engine size, and accessories, all built according to a common plan. Since they use the same plan every time, automobile engineers can create custom tools specifically for that design, simplifying the manufacturing of cars and multiplying the productivity of factories.<P>
C++ templates can multiply your coding productivity by making it easier to write your own custom tools. You're not producing hundreds of classes each day, so your productivity gains probably won't be as dramatic as those in the automobile industry. Still, a few well-designed templates in your toolkit can make your job much easier.<P>
<h3><a name="022a_0004">Life Without Templates<a name="022a_0004"></h3><P>
Suppose you've written a class that implements a stack of integers like <a href="#022a_0012">Example 1</A>. Of course, programming being what it is, the next time you have to write a stack, it won't be a stack of integers but, say, a stack of strings. You could reuse <I>IntStack</I> by copying it, changing its name, and replacing <I>int</I> with a string where appropriate. However, this approach has drawbacks.<P>
First, it's error prone. You can't just do a global search and replace. If you do, you'll end up with the member function <I>ItemsInStack</I> returning a string, which probably isn't what you want. Doing this transformation correctly requires you to understand every use of <I>int</I> in the original class. Transforming a larger, seldom-used class could prove to be an enormous undertaking. Not to mention that once you've done this a few times, there'll be several variations of stacks used by different programs on your hard disk. If you find and fix a logic error in one, you ought to fix it in the others as well. Unless you've kept scrupulous notes on where these variations are used, you'll have a hard time finding them all.<P>
Some programmers reject templates, saying a stack class isn't very big and you can write one when needed. Sure you can copy the definition of <I>IntStack</I> and, with some care, change it to a <I>FloatStack</I> in minutes--and there's a good chance it will work correctly. However, it takes less time to create a <I>FloatStack</I> from a template: You <I>#include &quot;stack.h&quot;</I> and <I>typedef Stack&lt;float&gt; FloatStack</I>. These two lines of code do the same as the 28 lines in <a href="#022a_0012">Example 1</A>. Don't let anyone tell you that the other way is better.<P>
<h3><a name="022a_0005">On the Inside<a name="022a_0005"></h3><P>
These two lines of code don't tell the whole story. Consider the STACK.H header in <a href="#022a_0013">Example 2</A>, the heart of the <I>Stack</I> template. If you compare this template with the <I>IntStack</I> class, you'll see the two are almost identical. The template begins with <I>template &lt;class Type&gt;</I>, which tells you it's a template that takes one parameter we'll refer to as <I>Type</I>. Most of the <I>int</I>s in the original class have been replaced with <I>Type</I>s in the template, the exception being the <I>int</I> specifying the return type of <I>ItemsInStack</I>. Does that sound familiar? It's the same transformation that changes an <I>IntStack</I> into a <I>FloatStack</I>. In fact, it's common to develop a template by first writing a class that does what's needed for a single data type, then changing that class into a template by replacing that data type with a parameterized type as we did here. When you create a template, you only have to do the transformation once. After that, the compiler can do it for you.<P>
<h3><a name="022a_0006">A Brief Diversion For Philologists<a name="022a_0006"></h3><P>
The chapter on templates in <I>The Annotated C++ Reference Manual</I> (<I>ARM</I>) includes some rather confusing terms, such as &quot;class templates,&quot; &quot;template classes,&quot; &quot;function templates,&quot; and &quot;template functions.&quot; My <I>Stack</I> example is a class template--a template used to create classes. I used it to create a <I>Stack<P>&lt;float&gt;</I>, a class created from a template--a template class.<P>
The same applies to function templates, which, as the name suggests, are templates that create functions. The template that you write is a function template. When you use that template to create a function, that function is a template function.<P>
<h3><a name="022a_0007">Template Parameters<a name="022a_0007"></h3><P>
Every template definition begins with the keyword template followed by a template parameter list. As in the <I>Stack</I> example, the template parameter is delimited by a less-than (&lt;) and a greater-than (&gt;) symbol. The alternative of overloading the meanings of {}, [], or () results in confusing code because these delimiters already have so many other meanings.<P>
The parameters in a template definition fall into two broad categories: type parameters, which tell the compiler to expect the name of a type when the template is used; and nontype parameters, which tell the compiler to expect a value. For instance, <a href="#022a_0014">Example 3</A> changes the <I>Stack</I> template, so you could specify how large the stack should be. The difference between this and <a href="#022a_0013">Example 2</A> is that I've added a parameter named <I>Size</I> to the template definition and removed the <I>enum</I> that defined <I>Size</I> in the earlier version.<P>
In <a href="#022a_0014">Example 3</A>, the first parameter is a type parameter, the second, a nontype parameter. When the class keyword is used in a template parameter list, it indicates that the name following it is a type parameter. This isn't the same as the use of class in a class definition. It doesn't mean that when the template is used, the argument must be the name of a class; it only means that it must be the name of a type.<P>
When using a template, you put an argument list after the name of the template. That argument list contains the actual names or values that the compiler should use when it expands the template. Where the parameter list contains type parameters, the argument list must contain type names. Where the parameter list contains nontype parameters, the argument list must contain values of the type specified for the parameter. You'd use the two-parameter version of the <I>Stack</I> by specifying the type of the values and the maximum number of entries that the <I>Stack</I> holds: <I>Stack&lt;int,20&gt;</I> is a stack of integers with a capacity of 20, just like the original definition.<P>
<h3><a name="022a_0008">Class Templates Create Types<a name="022a_0008"></h3><P>
When you use a class template, you're creating a type name. Don't get confused because it's a template--it acts just like any other type name. All the statements in <a href="#022a_0015">Example 4</A> are legal, for example, and they mean just what you'd expect. When using templates, keep in mind that they may seem new and strange and have some odd-looking syntax, but they usually fit into your code without requiring you to do anything differently. That's the beauty of good tools: Once you understand how to use them, they get out of your way and let you do your job.<P>
<h3><a name="022a_0009">Gotchas<a name="022a_0009"></h3><P>
Templates have a couple of syntactic quirks you should watch out for. The last line in the list of declarations in <a href="#022a_0015">Example 4</A> creates a stack of stacks. It would be an error to declare <I>Stack&lt;Stack&lt;int&gt;&gt; StackOfStacks</I>. The problem is that the two greater-thans (&gt;&gt;) after <I>int</I> in this declaration don't terminate the two template-argument lists. C++ uses C's &quot;maximum-munch&quot; rule, so the &gt;&gt; is interpreted as a shift-right operator. The compiler will give you strange messages if you omit the space between &gt; and &gt;.<P>
Parameter-list delimiters can also be a problem if you use arithmetic expressions for nontype parameters. Using the two-parameter version of the <I>Stack</I> class, you might try to write <a href="#022a_0016">Example 5(a)</A>. The problem here is that the first &gt; is the end of the argument list, so everything after that is nonsense. The way around this is to put the size expression in parentheses; see <a href="#022a_0016">Example 5(b)</A>.<P>
Finally, you're not allowed to overload a class-template name. Consequently, you couldn't use the <I>Stack&lt;class Type&gt;</I> and <I>Stack&lt;class Type,int Size&gt;</I> templates in one program.<P>
<h3><a name="022a_000a">Function Templates<a name="022a_000a"></h3><P>
Function templates can be used to create functions. The rules for dealing with function templates are more complicated than those for class templates because functions and function templates can be overloaded and because we don't use an explicit template-parameter list when calling a template function. Consider <a href="#022a_0017">Example 6</A>, the compiler has to figure out what the template parameters are from the arguments used in the function call. In <I>Show(f)</I>, the argument <I>f</I> is of type <I>float</I>. Looking back at the template definition, you see that the only parameter used in the function call is the template parameter <I>Type</I>. The compiler infers that <I>Type</I> must correspond to <I>float</I> and acts accordingly. <I>Show(f)</I> acts just as if you'd written it explicitly to handle floats; see <a href="#022a_0017">Example 6(b)</A>.<P>
<h3><a name="022a_000b">Parameter Types<a name="022a_000b"></h3><P>
One problem you can run into with function templates is the rule that the compiler does not do conversions on the arguments to a function template. This is a case where your intuition may lead you astray. The template in <a href="#022a_0018">Example 7(a)</A> calculates the lesser of two values. <a href="#022a_0018">Example 7(b)</A> uses this template for some calculations. Here, <I>min()</I> is called with two arguments of type <I>int</I>. The compiler looks at the template, sees that it takes two parameters of the same type, and figures out that if it replaces <I>T</I> with <I>int</I>, it has a match. The compiler knows there's a function <I>int min(int,int)</I> and calls it. <a href="#022a_0018">Example 7(c)</A> is similar to 7(b): The compiler knows from the template that there's a function <I>long</I> <I>min(long,long)</I> and calls it.<P>
<a href="#022a_0018">Example 7(d)</A>, however, isn't like the previous examples. The two types in the call to <I>min()</I> are different. The function template takes two parameters of the same type, so the compiler cannot use the template and the call is an error. The compiler doesn't know of any function named <I>min()</I> that takes a <I>long</I> and an <I>int</I>. If I'd simply written the usual <I>#define min(a,b) ((a)&lt;(b)?(a):(b))</I>, this call would have worked. The compiler would see that it was comparing an <I>int</I> and a <I>long</I>, and would perform the usual arithmetic conversions, converting the <I>int</I> argument to a <I>long</I> so that the two matched, and the result would be a <I>long</I>. That doesn't happen with templates because of the &quot;no-conversion&quot; rule.<P>
It's generally agreed that the no-conversion rule is too harsh, and will likely change when the ISO C++ committee reviews the rules on templates. Indeed, many of today's compilers, including cfront, allow some conversions even though they're technically illegal; don't be surprised if some compilers complain about them.<P>
<h3><a name="022a_000c">Overloading<a name="022a_000c"></h3><P>
Still, it's possible to use the example <I>min()</I> function template to compare an <I>int</I> and a <I>long</I>. To understand how, look at how the compiler handles overloaded functions. Consider the best-match rules in section 13.2 of the <I>ARM</I>. These rules define the algorithm the compiler is supposed to use to determine which function to call when several functions have the same name. This rule was written before templates were added to the language. Templates don't change the rule, they extend it. The new rule states:<P>
<cite>A template function may be overloaded either by (other) functions of its name or by (other) template functions of that same name. Overloading resolution for template functions and other functions of the same name is done in three steps:</cite><P>
<cite></cite><P>
<cite>[1] Look for an exact match (sec. 13.2) on functions; if found, call it.</cite><P>
<cite>[2] Look for a function template from which a function that can be called with an exact match can be generated; if found, call it.</cite><P>
<cite>[3] Try ordinary overloading resolution (sec. 13.2) for the functions; if a function is found, call it.</cite><P>
According to the first sentence, the declarations in <a href="#022a_0019">Example 8(a)</A> can all be used in the same program. You end up with two different templates with the same name, <I>min()</I>, and an ordinary function prototype for a function with this name. That they may conflict isn't important at this point. Only when you try to use one of these functions must the compiler worry about ambiguities. The rest of the rule addresses this point. For example, suppose the program contains two string variables, <I>s1</I> instantiated to <I>&quot;abcd&quot;</I> and <I>s2</I> instantiated to <I>&quot;efgh&quot;</I>, and calls the function <I>min( s1, s2 )</I>. The call to <I>min()</I> supplies two arguments, both of type string. Declaration #2 in <a href="#022a_0019">Example 8(a)</A> says there's a function, <I>min()</I>, that takes two arguments of type <I>string</I>. So, you have a function that exactly matches the call. According to Step #1 of the overloading rule, you don't have to go any further.<P>
Next, consider two integer variables, <I>i1=3</I> and <I>i2=4</I>, and a call to <I>min(i1, i2)</I>. Because the two arguments are of type <I>int</I>, Step #1 of the overloading rule doesn't help here--we don't have any function that exactly matches the call. Moving to Step #2, there's &quot;a function template from which a function that can be called with an exact match can be generated,&quot; namely, the template <I>min<P>(T t1, T t2)</I>. The compiler can use that template to generate <I>min(int,int)</I>. That function exactly matches the call, so that's the function that will be called.<P>
Now consider a variable string <I>s1=&quot;abcd&quot;</I> and a variable <I>char *s2=&quot;defg&quot;</I>. The call string <I>min( s1, s2 )</I> doesn't satisfy either Step #1 or #2. We haven't seen the definition of this string class, but from its use you've probably figured that it has a constructor that takes an argument of type <I>char*</I>. The constructor is used to create the auto strings we've been passing as parameters. The compiler could use that constructor to call <I>min(string,string)</I> by creating a temporary object of type <I>string</I> and using that temporary object as the second parameter. That's just an ordinary function call, and it's done just as if the template weren't present. Step #3 says that's what the compiler should do in this case.<P>
Step #3 also tells us what we need to do to persuade the compiler that it's okay to call <I>min()</I> with an <I>int</I> and a <I>long</I>--tell the compiler there's a version of <I>min()</I> that takes two <I>long</I>s. Once that's done, the compiler will use Step #3 of the overloading rule and promote the <I>int</I> parameter to a <I>long</I>. You don't have to supply a definition of this particular variation as long as the compiler can generate it from the template. By supplying a prototype, you make the call legal. By supplying the template definition, you give the compiler a way of producing the actual function.<P>
<h3><a name="022a_000d">Template Specializations<a name="022a_000d"></h3><P>
Step #2 of the overloading rule says to, &quot;look for a function template from which a function that can be called with an exact match can be generated; if found, call it.&quot; It doesn't say &quot;generate the function and call it.&quot; That's quite deliberate. The compiler simply generates a call to the function that has that name. You can provide your own version of that function somewhere else in the code; if you do, that function will be called when the program is run.<P>
Consider <a href="#022a_0019">Example 8(b)</A>, a variation of the <I>min()</I> example, which, though admittedly contrived, is supposed to take two command-line parameters (text representations of numbers) and return the lower value of the two. Unfortunately, it doesn't work because the <I>min()</I> template, when applied to two <I>char*</I>s, compares the pointers, not the C strings they point to. This is where specialization comes to the rescue: You can provide your own definition of <I>min(char *, char *)</I> that calls <I>strcmp()</I> instead of comparing pointers; see <a href="#022a_0019">Example 8(c)</A>.<P>
If this function appears anywhere in the program, even in a different module from the one that contains the call, then it should be invoked at run time. The template should not be used. Think of template instantiation as a desperate measure, to be used only when nothing else works. The compiler uses the overloading rules to figure out what call to make, then tries to find an ordinary function to handle the call. If there's no ordinary function, it will instantiate the template.<P>
<h3><a name="022a_000e">Forward References<a name="022a_000e"></h3><P>
Notice in <a href="#022a_0019">Example 8</A> that I used a forward reference to the <I>min()</I> template. This works much like a function prototype, telling the compiler there's a function template named <I>min()</I> that takes two parameters of the same type and returns a result of that type. That's all the compiler needs to know to call functions created with this template. Of course, it eventually has to see the actual definition, but the definition doesn't have to appear until later; see <a href="#022a_001b">Example 9</A>. When you don't want to or can't expose the template definition, you can tell the compiler that some name is, in fact, the name of a template. Of course, if you haven't given the compiler the definition of the <I>Stack</I> template, you can't use that template in any way that depends on its definition.<P>
<h3><a name="022a_000f">Template Instantiation<a name="022a_000f"></h3><P>
But what happens when the compiler actually expands the template? Where does it put the code that the template creates? These details depend on the compiler.<P>
cfront, for example, requires you to put class-template declarations and corresponding inline functions in a header file, and non-inline member-function definitions in a file with the same base name as the header file, located in a special directory so that the compiler can find it. Each time the compiler instantiates a template, it sticks the code into a special area known as a &quot;repository.&quot; During linking, the linker looks in the repository for the template instantiations that it needs. If a particular instantiation isn't there, the linker has to call the compiler to create it.<P>
Borland C++, on the other hand, requires you to put everything in the header file. It compiles the code directly into the .OBJ file where it's used. The linker combines duplicate template instantiations, so your executable file only ends up with a single copy of the code for any particular instantiation. Whatever compiler you use, once you've set things up properly, you shouldn't have to do anything special to get templates instantiated. The compiler should take care of it.<P>
<h3><a name="022a_0010">Templates in Your Tool Kit<a name="022a_0010"></h3><P>
One of the greatest advantages of C++ over C is that it supports inheritance, which allows you to factor out common features into single class. This improves maintainability and gives you a set of reusable building blocks for future use.<P>
Templates extend this form of generalization by enabling the creation of families of similar classes and functions. Your understanding of a problem often changes during the development of an application, which means you constantly adapt building blocks to the changing requirements. Having a well thought-out set of templates makes these adaptations much easier and much less error prone.<P>
<h3><a name="022a_0011">References<a name="022a_0011"></h3><P>
Ellis, Margaret and Bjarne Stroustrup. <I>The Annotated C++ Reference Manual</I>, second edition. Reading, MA: Addison-Wesley, 1992.<P>
<pre></pre><P>
<h4><a name="022a_0012"><B>Example 1:</B> A C++ class that implements an integer stack.<a name="022a_0012"></h4><P>
<pre>class IntStack
{
public:
    IntStack() : Current(Data) {}
    int ItemsInStack() const
        {
        return Current - Data;
        }
    int Top() const
        {
        assert( ItemsInStack() != 0 );
        return *Current;
        }
    void Push( int i )
        {
        assert( ItemsInStack() &lt; Size );
        *Current++ = i;
        }
    int Pop()
        {
        assert( ItemsInStack() != 0 );
        return *(++Current);
        }
private:
    enum { Size = 20; };
    int Data[Size];
    int *Current;
};
</pre><P>
<h4><a name="022a_0013"><B>Example 2:</B> Stack.h contains the Stack template.<a name="022a_0013"></h4><P>
<pre>
template &lt;class Type&gt; class Stack
{
public:
    Stack() : Current(Data) {}
    int ItemsInStack() const
        {
        return Current - Data;
        }
    Type Top() const
        {
        assert( ItemsInStack() != 0 );
        return *Current;
        }
    void Push( Type t )
        {
        assert( ItemsInStack() &lt; Size );
        *Current++ = t;
        }
    Type Pop()
        {
        assert( ItemsInStack() != 0 );
        return *(++Current);
        }
private:
    enum { Size = 20; };
    Type Data[Size];
    Type *Current;
};
</pre><P>
<h4><a name="022a_0014"><B>Example 3: </B>Changing the Stack template so that its size can be specified.<a name="022a_0014"></h4><P>
<pre>
template &lt;class Type, int Size&gt; class
Stack
{
public:
    // same as above
private:
    Type Data[Size];
    Type *Current;
};
</pre><P>
<h4><a name="022a_0015"><B>Example 4: </B>Legal declarations using the Stack template.<a name="022a_0015"></h4><P>
<pre>
#include &lt;stack.h&gt;

Stack&lt;int&gt; S1, S2;
Stack&lt;int&gt; *Ptr;
extern Stack&lt;int&gt; S3;
void f( Stack&lt;int&gt;&amp; );
class DerivedStack : public Stack&lt;int&gt; {};
Stack&lt; Stack&lt;int&gt; &gt; StackOfStacks;

</pre><P>
<h4><a name="022a_0016"><B>Example 5: </B>(a) Attempting to use arithmetic expressions in the two-parameter version of the Stack class; (b) placing the size expression within parentheses avoids the parameter-list delimeter problem in 5(a).<a name="022a_0016"></h4><P>
<pre>(a)

const Count = 17;
Stack&lt; int, Count&gt;10?Count:10 &gt; Data;


(b)

Stack&lt; int, (Count&gt;10?Count:10) &gt; Data;
</pre><P>
<h4><a name="022a_0017"><B>Example 6: </B>(a) Usage for function templates; (b) writing this function once with a template is much less time consuming than writing it for every data type.<a name="022a_0017"></h4><P>
<pre>a)

template &lt;class Type&gt; void Show( Type T )
{
    Type times2 = T*2;
    cout &lt;&lt; T &lt;&lt; '\t' &lt;&lt; times2 &lt;&lt; endl;
}

int main()
{
    float f = 3.14159;
    double d = 2.1;
    int i = 3;
    Show(f);
    Show(d);
    Show(i);
    return 0;
}

(b)

void Show( float f )
{
    float times2 = f*2;
    cout &lt;&lt; f &lt;&lt; '\t' &lt;&lt; times2 &lt;&lt; endl;
}

</pre><P>
<h4><a name="022a_0018"><B>Example 7: </B>(a) Function template to calculate the lesser of two values; <P>(b) the compiler looks at the template in 7(a), replaces T with int, and calls int min(int,int); (c) in this case the compiler calls long min(long,long); (d) because the two types in the call to min() are different, the compiler cannot use the template and the call is an error.<a name="022a_0018"></h4><P>
<pre>
(a)

template &lt;class T&gt; T min( T t1, T t2 )
{
    return t1&lt;t2 ? t1 : t2;
}


(b)

int GetMin( int i1, int i2 )
{
    return min( i1, i2 );
}


(c)

long GetMin( long l1, long l2 )
{
    return min( l1, l2 );
}


(d)

long GetMin( long l1, int i1 )
{
    return min( l1, i1 );
}



</pre><P>
<h4><a name="022a_0019"><B>Example 8: </B>(a) These declarations can all be used in the same <P>program; (b) a variation on the template class in 8(a); (c) definition of min(char *, char *) that calls strcmp() instead of comparing pointers.<a name="022a_0019"></h4><P>
<pre>(a)

template &lt;class T&gt;
T min( T t1, T t2 );            // 1
string min( string,string );    // 2
template &lt;class T&gt;
T min( T t1, T t2, T t3 );     // 3


(b)

template &lt;class T&gt;
T min( T t1, T t2 )
{ return t1 &lt; t2 ? t1 : t2; }

int main( int argc, char *argv[] )
{
    return atoi( min(argv[1],argv[2]) );
}

(c)

char *min( char *s1, char *s2 )
{
    if( strcmp( s1, s2 ) &lt; 0 )
        return s1;
    else
        return s2;
}
</pre><P>
<a name="022a_001a">A Virtual-array Class using C++ Templates<a name="022a_001a"><P>
<h3>Douglas Reilly</h3><P>
<p><i>Doug owns Access Microsystems, a software-development house specializing in C/C++ software development. He is also the author of the BTFILER and BTVIEWER Btrieve file utilities. Doug can be contacted at 404 Midstreams Road, Brick, NJ 08724, or on CompuServe at 74040,607.</i></p><hr><P>
Class templates allow the use of a single set of functions to perform identical operations on an unlimited set of types. Templates were first described as &quot;experimental&quot; in <I>The Annotated C++ Reference Manual</I> by Margaret Ellis and Bjarne Stroustrup (Addison-Wesley, 1990). Templates are currently available in Borland C++ 3.x, and should soon be available in all C++ compilers. It's important to note that templates may not provide any savings in the resulting object code, and in this way might be no more efficient than macros. But machine efficiency isn't the only concern in programming. In the machine/<P>programmer cost equation, the programmer is more expensive, and eliminating problems associated with macros makes the programmer more productive.<P>
On more than one occasion, I've hit the memory &quot;wall&quot; when adding features or capacity. I'm primarily an MS-DOS programmer, and have long envied programmers in other environments who could declare arrays much larger than would fit in the physical memory of the machine. Templates, combined with creative use of operator overloading, are the answer.<P>
<I>virtArray</I> is a virtual-array template class; see <a href="#022a_0031">Listings One</A> and <a href="#022a_0032">Two</A> (page 102). It buffers a user-selectable number of elements, but stores the balance of the array on disk. Because of the ability to overload the subscript operator ([]) and return references, these virtual arrays can replace existing arrays with only minor modifications to the source code. After a while, you can even forget they're not part of the C++ language proper.<P>
To help test performance and determine the degree of difficulty in integrating <I>virtArray</I> into an existing application, I turned to an existing MS-DOS application that used an array for storing moderate-sized structures that defined fields in a file. This program was the perfect candidate for a virtual array, since there was a need to use more fields than was possible with traditional arrays.<P>
The first change was the declaration. I used a <I>typedef</I> to hide the details (template arguments, and so on) and to ensure that exactly the same template arguments were specified each time the virtual array was declared. This is important since template arguments must match exactly in the definitions and declarations if you are to reference the same object.<P>
Notice the <I>nullOut()</I> member function. A common way to initialize an array is to use <I>memset()</I>. This won't work with a virtual array. Given a virtual array like <I>virtArray&lt;int,256&gt;intArray(20000);</I> if you <I>memset()&amp;intArray[0]</I> for 20,000 elements times <I>(sizeof(int))</I>, you'll initialize the 256 data elements of the cache, and then initialize the next 39,488 bytes in memory. After rebooting your machine, replace the <I>memset()</I> with a call to the <I>nullOut()</I> member function. This function initializes the cache as well as the data elements in the temporary disk file.<P>
Another change in behaviors between traditional arrays and the virtual array is that you cannot simply send the address of element 0 to a function and expect that to act as a pointer to the whole array. At best, this will enable the receiving function to get at <I>cacheSize</I> elements of the array, and will then access whatever is next in memory, just as in the case of the <I>memset()</I> described earlier.<P>
An implementation detail that significantly effects performance is the way the cache is implemented. If an array element not currently in the cache is requested in the <I>operator []</I> member function, the call to the <I>get()</I> member function gets the requested element and the next <I>cacheSize--1</I> element. This is fairly effective in many cases, since a common construct is to loop through an array starting at 0, looking for the end of an array or simply processing each element. If the looping through the array takes place from the end of the array back to 0, this will force a disk read for each call to <I>operator []</I>. A reasonable alternative would be to fill the cache so that half the elements cached would be before the current element and half would be after.<P>
<a name="022a_001b"><B>Example 9: </B>A forward reference to a template works much like a function prototype.<a name="022a_001b"><P>
<pre>template &lt;class T&gt;
T min( T t1, T t2 );

int test( int i1, int i2 )
{
    return min( i1, i2 );
}
template &lt;class T&gt;
T min( T t1, T t2 )
{
    return t1 &lt; t2 ? t1 : t2;
}

</pre>

<P>
<a name="022a_0031"><a name="022a_001c"><a name="022a_001d"><B>[LISTING ONE]</B>
<pre>
(Text begins on page 44.)

#ifdef __cplusplus
#ifndef VIRTARRA_H
#define VIRTARRA_H

template &lt;class T,int cacheSize=100&gt;
class virtArray
{
private:
   int initialized;
   unsigned long cacheStart;
   unsigned long curEl;
   unsigned long numEls;
   size_t size;
   tfile *tempFile;
   T data[cacheSize];
   void put(unsigned long i);
   void get(unsigned long i);
public:
   virtArray(unsigned long tnumEls,T *defVal=0);
   ~virtArray();
   T&amp; operator [](unsigned long i);
   T&amp; current() { return operator [](curEl); };
   T&amp; next() {
      if ( (curEl+1L&lt;numEls) )
      {
         curEl++;
      }
      return(current());
   }
   T&amp; prev() {
      if ( (curEl) )
      {
         curEl--;
      }
      return(current());
   }
   void nullOut();
   void grow(unsigned long numToAdd);
};
#endif
#endif
</PRE>

<h4><a name="022a_0032"><a name="022a_001e"><a name="022a_001f"><B>[LISTING TWO]</B><a name="022a_001f"></h4>

<pre>

#include &quot;stdio.h&quot;
#include &quot;stdlib.h&quot;
#include &quot;string.h&quot;
#include &quot;tfile.h&quot;
#include &quot;virtarra.h&quot;

#define EOS '\0'
template &lt;class T,int cacheSize&gt;
virtArray&lt;T,cacheSize&gt;::virtArray(unsigned long tnumEls,T *defVal)
{
   if ( tnumEls )
   {
      unsigned long totsize;
      char *tptr;
      initialized=1;
      tempFile=new tfile;
      numEls=tnumEls;
      curEl=0L;
      size=(sizeof(T));
      totsize=numEls*(long)size;
     // no default value.  Just set everything to NULLS
      if ( defVal==0 )
      {
         memset(&amp;data,EOS,size);
         totsize=numEls*(long)size;
         int grain=20480;
         tptr=new char[grain];
         if ( tptr==0 )
         {
            if ( tptr==0 )
            {
               grain=10240;
               tptr=new char[grain];
               if ( tptr==0 )
               {
                  grain=2048;
                  tptr=new char[grain];
               }
               if ( tptr==0 )
               {
                  initialized=0;
                  delete tempFile;
                  return;
               }
            }
         }
         memset(tptr,EOS,grain);
         while ( totsize&gt;grain &amp;&amp; !(tempFile-&gt;getErrno()) )
         {
            tempFile-&gt;write(tptr,grain);
            totsize-=grain;
         }
         if ( totsize &amp;&amp; !(tempFile-&gt;getErrno()) )
         {
            tempFile-&gt;write(tptr,totsize);
         }
         delete tptr;
         if ( tempFile-&gt;getErrno() )
         {
            delete tempFile;
            initialized=0;
         }
      }
      else
      {
        // Use the default value sent to constructor
         memcpy(&amp;data,defVal,size);
         for ( unsigned long loop=0L ;
               loop&lt;numEls &amp;&amp; tempFile-&gt;getErrno()==0 ;
               loop++ )
         {
            tempFile-&gt;write(&amp;data,size);
         }
         if ( tempFile-&gt;getErrno() )
         {
            delete tempFile;
            initialized=0;
         }
      }
      cacheStart=0L;
      get(0L);
   }
}
template &lt;class T,int cacheSize&gt;
virtArray&lt;T,cacheSize&gt;::~virtArray()
{
   if ( initialized )
   {
      delete tempFile;
      initialized=0;
   }
}
template &lt;class T,int cacheSize&gt;
T&amp; virtArray&lt;T,cacheSize&gt;::operator [](unsigned long i)
{
  // cause reads past end to result in element 0
   if ( i&gt;numEls )
   {
      i=0L;
   }
   if ( i&gt;=cacheStart &amp;&amp; i&lt;(cacheStart+(unsigned long)cacheSize) )
   {
      curEl=i;
      return(data[i-cacheStart]);
   }
   else
   {
      put(cacheStart);
      cacheStart=i;
      get(i);
      curEl=i;
      cacheStart=curEl;
      return(data[0]);
   }
}
template &lt;class T,int cacheSize&gt;
void virtArray&lt;T,cacheSize&gt;::put(unsigned long i)
{
   if ( i&lt;numEls )
   {
      int putSize=cacheSize;
      tempFile-&gt;seek(i*(long)size);

      if ( (i+putSize)&gt;numEls )
      {
         putSize=(numEls-i);
      }
      tempFile-&gt;write(&amp;data[0],putSize*size);
   }
}
template &lt;class T,int cacheSize&gt;
void virtArray&lt;T,cacheSize&gt;::get(unsigned long i)
{
   if ( i&lt;numEls )
   {
      int getSize=cacheSize;
      cacheStart=i;
      tempFile-&gt;seek(i*(long)size);
      if ( (i+getSize)&gt;numEls )
      {
         getSize=(numEls-i);
      }
      tempFile-&gt;read(&amp;data[0],getSize*size);
   }
}
// Use this function to do the something like a memset()...
template &lt;class T,int cacheSize&gt;
void virtArray&lt;T,cacheSize&gt;::nullOut()
{
   char *tptr;
   unsigned long totsize;
   memset(&amp;data,EOS,size);
   totsize=numEls*(long)size;
   int grain=20480;
   tptr=new char[grain];
   if ( tptr==0 )
   {
      if ( tptr==0 )
      {
         grain=10240;
         tptr=new char[grain];
         if ( tptr==0 )
         {
            grain=2048;
            tptr=new char[grain];
         }
         if ( tptr==0 )
         {
            grain=512;
            tptr=new char[grain];
         }
      }
   }
   memset(tptr,EOS,grain);
   while ( totsize&gt;grain &amp;&amp; !(tempFile-&gt;getErrno()) )
   {
      tempFile-&gt;write(tptr,grain);
      totsize-=grain;
   }
   if ( totsize &amp;&amp; !(tempFile-&gt;getErrno()) )
   {
      tempFile-&gt;write(tptr,totsize);
   }
   delete tptr;
   get(curEl);
   return;
}
// allow the array to grow
template &lt;class T,int cacheSize&gt;
void virtArray&lt;T,cacheSize&gt;::grow(unsigned long numToAdd)
{
   unsigned long bytesToAdd=0L;
   unsigned int grain=10240;
   char *tptr;
   bytesToAdd=numToAdd*(long)size;
   for ( tptr=0,grain=10240 ; grain!=0 ;  )
   {
      tptr=new char[grain];
      if ( tptr==0 )
      {
         grain-=2048;
      }
   }
   if ( grain!=0 &amp;&amp; tptr!=0 )
   {
      tempFile-&gt;seek(0L,SEEK_END);
      while ( bytesToAdd&gt;grain &amp;&amp; !(tempFile-&gt;getErrno()) )
      {
         tempFile-&gt;write(tptr,grain);
         bytesToAdd-=grain;
      }
      if ( bytesToAdd &amp;&amp; !(tempFile-&gt;getErrno()) )
      {
         tempFile-&gt;write(tptr,bytesToAdd);
      }
      delete tptr;
      numEls+=numToAdd;
   }
}

End Listings

</pre>

<HR><P>Copyright &copy; 1993, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
