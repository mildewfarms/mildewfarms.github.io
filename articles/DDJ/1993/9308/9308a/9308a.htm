<HTML>
<META NAME="year" CONTENT="1993">
<HEAD>
<TITLE>AUG93: The History of Programming Languages</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>The History of Programming Languages<a name="021c_0003"></h1><P>
<h2><a name="021c_0001"><a name="021c_0000">HOPL features top language designers</h2><P>
<h3> K.N. King</h3><P>
<p><i><a name="021c_0002"><a name="021c_0000">K.N. King is an associate professor of mathematics and computer science at Georgia State University. He is the author of Modula-2: A Complete Guide (D.C. Heath) and is currently at work on C and C++ books for W.W. Norton. He can be reached at king@prism.gatech.edu.</i></p><hr><P>
It's official. C and C++ have come of age, or at least grown old enough to be featured at the second History of Programming Languages conference (HOPL-II) held in Cambridge, Massachusetts this past spring. HOPL-II, which provided programming-language designers a forum for discussing their languages, staking their claim to immortality, and (occasionally) taking a swipe at competing languages, brought together the likes of Dennis Ritchie, Bjarne Stroustrup, Niklaus Wirth, and Alan Kay under one roof--a rare occasion indeed.<P>
In particular, I was curious to see how the designers of C and C++ would be received by the proponents of languages such as Ada and Pascal. Despite their enormous popularity (or perhaps because of it), there are still academics who view C and C++ with suspicion. Would Wirth exchange pleasantries with Ritchie or engage him in hand-to-hand combat? I couldn't wait to find out.<P>
<h3><a name="021c_0004">Preserving History<a name="021c_0004"></h3><P>
The computing field hasn't always done a good job of preserving its own history. As time passes, our pioneers pass away and valuable artifacts are lost with them. For instance, according to HOPL-II chair J.A.N. Lee, the first Fortran compiler now exists only in binary form as boxes of punched cards; the source code has been lost or destroyed. To help remedy this situation, the Special Interest Group on Programming Languages (SIGPLAN) of the Association for Computing Machinery (ACM) sponsored the first HOPL conference in 1978. This conference, which covered languages in use by 1967, included speakers such as John Backus (Fortran), Alan Perlis and Peter Naur (Algol 60), John McCarthy (Lisp), Jean Sammet (Cobol), Kristen Nygaard (Simula), Thomas Kurtz (Basic), George Radin (PL/I), and Ken Iverson (APL).<P>
This year's HOPL-II picked up where HOPL left off. For a language to be eligible for HOPL-II, the program committee required that &quot;preliminary ideas about the language were documented by 1982 and the language was in use or being taught by 1985.&quot; Thus, HOPL-II was able to cover languages developed in the '70s as well as upstarts like C++.<P>
<h3><a name="021c_0005">The Worst Programming Language Ever<a name="021c_0005"></h3><P>
In his keynote address, &quot;Language Design as Design,&quot; Fred Brooks (project manager for the IBM System/360 and author of <I>The Mythical Man-Month</I>) gave a software designer's view of programming-language design.<P>
Brooks acknowledged that his credentials in the programming-language arena are shaky. He called OS/360 JCL, which was developed under his supervision, the &quot;worst programming language ever designed.&quot; He also ruefully admitted being &quot;the person who tried to displace Fortran with PL/I.&quot;<P>
In his view, the data types and data structures a language provides must come from its intended application area; the operations are then determined by the data types. Everything else, according to Brooks, is &quot;languagehood.&quot;<P>
Brooks also discussed &quot;rationalism versus empiricism&quot; in language design. As he sees it, rationalism (that is, designing a language by &quot;pure thought&quot;) is doomed to fail, since we have &quot;no hope of getting our complex designs right the first time.&quot;<P>
<h3><a name="021c_0006">Languages, Languages, Everywhere<a name="021c_0006"></h3><P>
Most of the other presentations were by people involved in the original design of various languages: C.H. Lindsey (Algol 68), Niklaus Wirth (Pascal), Per Brinch Hansen (Concurrent Pascal), Alain Colmerauer (Prolog), Jean Sammet (FORMAC), Barbara Liskov (CLU), Alan Kay (Smalltalk), Ralph Griswold (Icon), Dennis Ritchie (C), and Bjarne Stroustrup (C++).<P>
Several talks didn't fit this pattern however. William Whitaker, who oversaw the development of Ada for the Department of Defense, discussed the management of the Ada project, not the design of the language itself. Guy Steele and Richard Gabriel traced the evolution of Lisp, while Richard Nance gave a history of discrete-event simulation languages. The presentation on Forth was made by Elizabeth Rather instead of Chuck Moore, the actual designer of the language.<P>
A shorter talk, by someone involved with the language yet with a different viewpoint, immediately followed each main presentation. Kay was followed by Adele Goldberg, for example, while Stu Feldman, an early user of C and C++ and author of the UNIX <I>f77</I> compiler and <I>make </I>utility, followed Ritchie and Stroustrup.<P>
Steele and Gabriel employed a &quot;tag-team&quot; approach in their presentations on Lisp. Using two overhead projectors, the pair alternately traced the development of Lisp on an amazingly detailed schematic. Still, honors for the most unusual presentation go to Alan Kay. Although his paper in the conference proceedings discussed the history of Smalltalk, his talk had little to do with the language. Instead, Kay focused on issues that he finds important, including the importance of general education instead of specialized training and the need for creative freedom. His overheads were unique, to say the least, featuring pithy sayings (&quot;You can make a doghouse out of anything&quot;--in other words, it's easy to write small programs), a picture of an <I>E. coli</I> bacterium, and a copy of <I>The Federalist Papers</I> (labeled &quot;Best Book on Complex Systems Design?&quot;).<P>
One potential speaker was conspicuous by his absence from the podium. Jean Ichbiah, the chief designer of Ada, had been invited to write a paper on the history of Ada, but declined, citing lack of time. Nonetheless, he attended and participated in question-and-answer sessions.<P>
<h3><a name="021c_0007">Second-guessing<a name="021c_0007"></h3><P>
Language designers spent a lot of time discussing the reasons for their decisions--and even indulged in a bit of second-guessing. Ritchie's paper on C identified its major problems, including &quot;the failure of the original language to include argument types in the type signature of a function.&quot; He called ANSI C &quot;a noticeably better language&quot; and acknowledged in later questioning that he uses ANSI C himself.<P>
Stroustrup was fairly happy with the decisions made in the design of C++. He did, however, confess to making one major mistake: not providing a basic class library from the beginning. As he put it, &quot;Release 1.0...should have been delayed until a larger library including some simple classes such as singly- and doubly-linked lists, an associative array class, a range checked array class, and a simple string class could have been included.&quot;<P>
Wirth, however, refused to second-guess himself: &quot;It is... fruitless to question and debate early design decisions; better solutions are often quite obvious in hindsight. Perhaps the most important point was that someone did make decisions, in spite of uncertainties.&quot;<P>
<h3><a name="021c_0008">Secrets of Success<a name="021c_0008"></h3><P>
Designers also spent time analyzing the reasons for their success. Ritchie was modest about C's success, even somewhat embarrassed by his own celebrity. (When asked if there were anything he'd do differently, Ritchie replied, perhaps only half in jest, &quot;I'd become a monk!&quot;) He summed up the reasons for C's success on two overheads, titled &quot;How to Succeed in Language Design without Really Trying.&quot; The first noted C's widespread availability, its ability to interact with its environment, and its adaptability to unexpected situations. But the second gave the real secret: &quot;Be lucky.&quot;<P>
For his part, Stroustrup noted &quot;the need for a programming language and the code written in it to be just a cog in a much larger machine&quot; as a key factor in the success of C++, while Wirth said that the most important reason for Pascal's success was that &quot;many people capable of recognizing its potential actively engaged themselves in its promotion.&quot;<P>
<h3><a name="021c_0009">Exploding Myths<a name="021c_0009"></h3><P>
Speakers often cleared up common misconceptions about their languages. Ritchie, for instance, pointed to the widespread belief that C's ++ and -- operators were added to take advantage of the PDP-11's autoincrement and autodecrement addressing modes. In fact, these operators were present in B, the immediate predecessor of C, which was designed before the PDP-11 existed.<P>
Stroustrup said that he chose C as the basis for C++ because it was &quot;the best systems programming language available,&quot; not because he worked at Bell Labs, as people have often assumed. He also attacked the belief that C++ is successful because of AT&amp;T's marketing clout. &quot;We once had a marketing budget; it was $3,000. It lasted for three years.&quot;<P>
<h3><a name="021c_000a">Oddities<a name="021c_000a"></h3><P>
HOPL-II was a goldmine for trivia buffs. What do Scheme and Forth have in common? (Both languages originally had longer names that were shortened to satisfy operating-system restrictions. Scheme was originally named Schemer, after the AI languages Planner and Conniver, while Forth was supposed to be Fourth, as in &quot;fourth-generation.&quot;<P>
Which language was the first not to have goto statements? (Concurrent Pascal, according to Brinch Hansen, who added &quot;What are you supposed to do with goto's in a concurrent programming language? Where are you going?&quot;)<P>
What was the origin of the // comment convention in C++? (Far from being an innovation, it was lifted directly from BCPL, a predecessor of C.)<P>
What did the Department of Defense do before officially choosing Ada as the name of their new language? (According to Whitaker, they contacted the heirs of Ada Lovelace for permission to use her name. He jokingly wondered whether Wirth had gotten similar permission from Pascal's descendants.)<P>
How much code is written for the DoD each day? (Two million lines!)<P>
<h3><a name="021c_000b">Warfare in the Hallways?<a name="021c_000b"></h3><P>
So how did these luminaries get along? For the most part, just fine. During coffee breaks, Ritchie talked to Wirth while Stroustrup chatted with Ichbiah. So much for my visions of warfare in the hallways. Similar respect was evident during the talks, with speakers generally avoiding direct attacks on competing languages. There were exceptions however.<P>
In his talk on Concurrent Pascal, Brinch Hansen referred to Ada as &quot;large&quot; and &quot;incomprehensible&quot; and C as &quot;small&quot; but &quot;insecure.&quot; Later, he again criticized Ada and C, going so far as to accuse them of not being programming languages at all.<P>
Wirth likewise attacked Ada, saying it lacked &quot;an economy of design without which definitions become cumbersome and implementations monstrous.&quot; He refrained from criticizing C, however, until the closing panel, where he said that &quot;hacking is in&quot; and claimed that &quot;most programmers enjoy working by trial and error.&quot; Looking at Ritchie, who was sitting next to him, Wirth continued: &quot;The most important promoter of this trend: C.&quot; He said that languages such as C are useful for bootstrapping software onto a new machine, but their use should be only &quot;temporary.&quot;<P>
Ritchie, taking these attacks graciously, noted that Wirth's points were &quot;well-taken&quot; and acknowledged that &quot;it is possible to use C in a better way than people do.&quot; But he also said that &quot;one sometimes has to make compromises&quot; in the real world.<P>
In his earlier talk on C, Ritchie actually said good things about Pascal, even admitting that Pascal is &quot;elegant.&quot; He listed many similarities between C and Pascal, which were developed at about the same time but without contact between the designers. He observed that the languages even share some of the same problems, such as handling arrays with varying bounds.<P>
Even Stroustrup couldn't resist a few shots at C. Of all the languages he used in the '70s, Algol 68, not C, he said, was his favorite, noting in particular his dislike for C's syntax and the loopholes in its static type checking.<P>
<h3><a name="021c_000c">Improving SEX<a name="021c_000c"></h3><P>
An excursion to Boston's Computer Museum one evening featured the opening of what was billed as the &quot;first-ever museum exhibit on programming languages.&quot; The museum had asked conference attendees to bring buttons, T-shirts, and other pieces of &quot;programming language ephemera&quot; which would later be added to the exhibit's &quot;Tower of Babel,&quot; a tall structure listing hundreds of programming languages.<P>
At a banquet the next evening, Cobol pioneer Jean Sammet told of being upbraided by a visiting IBM executive, who complained that members of her group were discussing sex on company time. It turned out that the visitor had overheard the staff referring to a subroutine named FMCSEX by the last three letters of its name, which stood for &quot;symbolic expression.&quot; At the time of the visit, unfortunately, the group had been discussing ways to improve SEX and make it faster.<P>
<h3><a name="021c_000d">Survival of the Fittest<a name="021c_000d"></h3><P>
While history was clearly the focus of the conference, the future was not ignored.<P>
One important issue, of course, is the survival of programming languages as we know them. William Whitaker rhetorically asked, &quot;Will there be languages such as Ada, Fortran, and Pascal in 15 years?&quot; He answered his own question with a resounding &quot;yes,&quot; admitting, however, that the &quot;growth of new languages will probably slow down&quot; and &quot;evolution will produce dominant languages&quot; that will &quot;force out&quot; weaker ones.<P>
Other speakers concurred. Early in the conference, for instance, Sammet noted that, of the approximately 1000 languages implemented up to 1993, 700 are dead. Even well-known languages are not immune, as evidenced by Steele's comment that &quot;Lisp has been on the decline for 3--5 years.&quot;<P>
Not that every language designer would be upset if his or her language disappeared. Alan Kay admitted that he &quot;wouldn't shed a tear&quot; if Smalltalk disappeared tomorrow. Languages shouldn't hinder progress by outliving their usefulness, he said.<P>
What will drive the development of future languages? Opinions varied, but several speakers singled out the need for better parallel computing support. In his paper on Concurrent Pascal, Brinch Hansen stated, &quot;I don't think we have found the right programming concepts for parallel computers yet. When we do, they will almost certainly be very different from anything we know today.&quot;<P>
Both Ritchie and Kay pointed out the growing number of people using computers, and Kay also mentioned the influence of &quot;pervasive, worldwide networking.&quot; Both trends could have a long-term effect on programming languages.<P>
What should students learn as a first programming language? Many colleges are beginning to teach C as a first language. Ritchie didn't endorse this trend. Any approach that tends to produce dependence on a particular language is bad, he said, suggesting that Scheme might be a good choice. Kay refused to pick a particular language. Wirth asked &quot;Are you teaching a skill or [providing] general education?&quot; In the former case, he recommended Ada; in the latter, he advised using &quot;a simpler language&quot;--but not C. &quot;I view the landslide of C use in education as rather a calamity,&quot; he said.<P>
<h3><a name="021c_000e">Another HOPL?<a name="021c_000e"></h3><P>
Will there be a HOPL-III? Probably. When will it be held? Maybe 5 years from now, maybe 15.<P>
Preprints of the HOPL-II papers appear in the <I>ACM SIGPLAN Notices</I>, March 1993. A more complete record of the conference is to be published in 1994 as the book, <I>History of Programming Languages-II.</I> (The original <I>History of Programming Languages</I>, based on the 1978 HOPL conference, is still in print.) Reading these histories is the next best thing to a long chat with Dennis or Bjarne.<P>
<h3><a name="021c_000f">References<a name="021c_000f"></h3><P>
<I>Second ACM SIGPLAN History of Programming Languages Conference Preprints</I>. Published as <I>ACM SIGPLAN Notices</I> (March, 1993).<P>
Wexelblat, Richard L., ed. History of Programming Languages. New York: Academic Press, 1981.<P>

<HR><P>Copyright &copy; 1993, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
