<HTML>
<META NAME="year" CONTENT="1993">
<HEAD>
<TITLE>AUG93: Strategies for Better Linked Lists</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Strategies for Better Linked Lists<a name="0220_0003"></h1><P>
<h2><a name="0220_0001"><a name="0220_0000">A C toolkit that saves time and memory</h2><P>
<h3>Garyl Hester</h3><P>
<p><i><a name="0220_0002"><a name="0220_0000">Garyl is the author of programming tools, connectivity products, and related subsystems. He can be reached via CompuServe at 76507,1503 or through DDJ.</i></p><hr><P>
Linked lists are fundamental tools used by any application that deals with variable types and data. The problem with linked lists, however, is that when more than one is being used in an application, duplicate code is required to handle each list. This is because the type of data being managed by each list is different, and there is no simple way to educate the logic about the kind of data being managed at any particular moment. Linked lists also tend to diffuse when small pieces of data are being stored.<P>
This article discusses linked-list theory and presents a generic linked-list toolkit written in C that will reduce, if not eliminate, management problems. (The entire toolkit is available electronically; see &quot;Availability&quot; on page 5.) This discussion focuses on doubly linked lists, but with a little effort the algorithms can be used for singly linked lists. This package was developed using Microsoft C 6.0; the Microsoft extensions were disabled for ANSI C conformance.<P>
<h3><a name="0220_0004">Linked-list Strategies<a name="0220_0004"></h3><P>
<a href="19930222.htm">Figure 1</A> shows a traditional linked list with three links, called &quot;atoms.&quot; An atom has three parts: the previous pointer, which contains the address of the predecessor or Nil if this is the first atom; the next pointer, which contains the address of the successor or Nil if this is the final atom; and the atom data itself. The previous and next pointers form the bindery of the atom.<P>
The atom's data area can be of any type and size, and is usually composed of multiple fields. An atom is easily defined in C using a structure definition like that in <a href="#0220_000b">Example 1</A>.<P>
Head and tail pointers define the ends of a list. The head pointer is an anchor whose value records the address of the first atom in the list, while the tail pointer records the address of the last atom in the list. Even though the tail pointer is not required (the terminating link can be determined by traversing the list and looking for an atom whose next pointer is Nil), it is worth the extra code and processing time to implement a tail pointer. With doubly linked lists, the tail pointer allows you to start at the end of the list and traverse upward. Head and tail pointers both must be declared as pointers to their specific atom types, as in <I>FOOATOM*pHead</I>.<P>
The algorithm for creating and adding an atom to the end of a linked list is shown in <a href="#0220_000c">Example 2</A>. In this example, <I>h</I> and <I>t</I> are the head and tail pointers, <I>a</I> is a pointer to an atom, and <I>s</I> is the atom size. Note that the data portion of the atom is never referenced. Using this basic template, we can create a routine to process any type of atom.<P>
To implement more generic code, start by defining a generic bindery type, then include that type as the first member of any atom definition; see <a href="#0220_000d">Example 3(a)</A>. When processing the list, the atom-specific pointer is cast to a pointer of type BIND and subsequently passed to the generic logic shown in <a href="#0220_000d">Example 3(b)</A>.<P>
By placing the bindery as the first member of any atom structure, we can fool the generic logic into handling the head and tail as pointers to simple BIND structures rather than complex FOO-<P>ATOM structures. This method works well in most situations but is rather tedious. As an alternative, define a standard structure to hold head and tail pointers, as in <a href="#0220_000e">Example 4</A>. This way, only the address of the ENDS structure--not the two pointers--can be passed.<P>
While this method is easier, it requires you to cast the head and tail pointers to a pointer of the appropriate type whenever needed. We can avoid this inconvenience by declaring pointers as type void, indicating they have no assumed type. Pointers of type void can be assigned to a pointer of a specific type without casting. Notice in <a href="#0220_000f">Example 5</A> that the value of void pointer <I>pHead</I> is assigned directly to the <I>pFooAtom</I> pointer (a pointer to a specific data type): Believe me when I say that even <I>lint</I> won't complain about these types of assignments.<P>
<h3><a name="0220_0005">Linked-list Density<a name="0220_0005"></h3><P>
Linked-list algorithms make heavy use of dynamic memory functions like <I>malloc()</I> and <I>free()</I>. A single call to <I>malloc()</I> returns a pointer to a memory block <I>n </I>bytes long. However, for <I>free()</I> to work properly, the block must contain information describing the nature of the block. This additional overhead is referred to as a &quot;memory control block&quot; (MCB). If <I>k</I> is the size of the MCB, then the actual amount of core being occupied by a block of <I>n</I> bytes is <I>n+k</I> bytes. The actual size of the MCB is system dependent; in some implementations it is as small as one word, while in others it is as large as a paragraph (eight words)!<P>
MCB size is important because it affects the list density, which is calculated by contrasting the size of the data being stored (the bang) with the amount of memory required to store it (the buck). This relationship can be expressed as <I>Density=nd/(k+n(b+d)),</I> where <I>n</I> is the number of atoms stored in a <I>malloc()</I>ed block, <I>d</I> the size of the stored data, <I>k</I> the MCB size, and <I>b</I> the bindery size. This is the generic formula. Since <I>n</I> is almost always 1, the accepted form is <I>d/(k+b+d)</I>. As the density approaches 1, the list becomes more efficient. For example, a list of integers kept in an array has a density of 1 because there is no overhead: The amount of core required to maintain the list is exactly that of the data being stored. When the value of <I>n</I> is 1, the only means of achieving higher densities is to increase the size of <I>d</I> by storing larger pieces of data. This makes linked lists impractical for storing small pieces of data (integers, for instance) because the buck drastically outweighs the bang.<P>
<h3><a name="0220_0006">Requirements<a name="0220_0006"></h3><P>
Taking all of this into account, a generic linked-list toolkit should:<P>
<OL>
<LI>Provide a generic set of routines for handling any type of atom data.</LI>
<LI>Not require special considerations of atom data structures on the part of the user (that is, a BIND structure as the first member).</LI>
<LI>Increase list density.</LI>
<LI>Make best use of system memory.</LI>
</OL>
The void data type satisfies requirement #1. By passing void pointers instead of pointers to specific data types, we can make the data appear as anything we want without <I>lint </I>complaining.<P>
For requirement #2, the linked-list manager handles the allocation and management of binderies. In effect, you request that an instance of the atom data be allocated. The linked-list manager then tacks on the size of the bindery, requests a block of that size from <I>malloc()</I>, and retains that pointer. The pointer returned to the caller is to the atom data only; see <a href="19930223.htm">Figure 2</A>. This lets the user employ the linked list as a subsystem, requesting next and previous pointers, adding and deleting atoms, and so forth. However, this approach does not fully satisfy requirement #3 because multiple <I>malloc()</I> calls are required.<P>
Requirements #3 and #4 are best satisfied by allocating space for more than one atom at a time. By creating blocks of atoms at once, we increase the value for <I>n</I>, and thus the list density. However, there is a trade-off in that memory is allocated and can go unused. Therefore, you should specify the appropriate size of a block for the application. An application that will require hundreds of atoms will have a larger block size than one using only a few. Also, it is possible to store an entire list in a single block, thus achieving maximum density but requiring the user to estimate the maximum size of the list.<P>
<h3><a name="0220_0007">Design<a name="0220_0007"></h3><P>
The linked-list control block (LLCB) and the list boundary (LLST) govern the linked list. The LLCB contains two sets of head/tail pointers, the size of the atom data, and the number of atoms to create per block. The LLST contains one set of head/tail pointers and a pointer to the LLCB; see <a href="#0220_0013">Listing One</A>, page 100.<P>
There are three types of verbs in the toolkit: primitives, management, and insert/move/swap. The primitives, defined in llprim.c (<a href="#0220_0015">Listing Two</A>, page 100), are <I>ll_open()</I>, <I>ll_close()</I>, <I>ll_mklist()</I>, <I>ll_<P>rmlist()</I>, <I>ll_alloc()</I>, and <I>ll_free()</I>. <I>ll_open</I> creates a list and <I>ll_close</I> destroys it. (<a href="#0220_0010">Table 1</A> describes these calls.) <I>ll_open()</I> accepts the address of an LLCB, the size of the atom data, and the number of atoms to create per block, and returns the address of the LLCB passed to it.<P>
Once the LLCB is set up, one or more linked lists can be created using <I>ll_<P>mklist(),</I> which associates a LLST with an LLCB. <I>ll_mklist()</I> accepts the address of a LLCB and LLST, returning the address of the LLST. Multiple lists, consisting of individual lists of separate atom chains, can be associated with a single LLCB. Neither <I>ll_mklist()</I> nor <I>ll_open()</I> allocate memory; they only initialize structures passed to them.<P>
Atoms are created and destroyed using <I>ll_alloc()</I> and <I>ll_free(),</I> respectively. <I>ll_alloc()</I> accepts a pointer to a LLST, and returns a pointer of type void. Whenever <I>ll_alloc()</I> is called, the LLCB (taken from the LLST) is checked for atoms that may exist in its free chain. If available, a free atom is removed from the free chain and appended to the list managed by LLST. The address of the atom data is returned.<P>
If free atoms are not available, an attempt is made to create a fresh block of atoms. A pointer to the atom data is returned if successful, else NULL to signal that no atoms are available nor could be created. A block is organized as shown in <a href="19930224.htm">Figure 2</A>. The atoms in a block are logically created, and because they are all unused, are &quot;sewn&quot; together by linking their binderies. The first atom in the block is added to the end of the free list in the LLCB. <a href="19930225.htm">Figure 3</A> shows the results of a few <I>ll_alloc()</I> and <I>ll_free()</I> calls.<P>
The <I>ll_free()</I> call accepts as arguments the address of an atom and the address of the LLST to which the atom belongs. The atom is removed from the current list and added to the end of the free chain maintained in the LLCB. Note that a usage count is maintained within the block bindery information. When an atom is allocated from the block, the usage count is increased. When an atom is returned to the free chain, the usage count is decreased. When this usage count reaches 0, the block itself is removed.<P>
<h3><a name="0220_0008">Atom Blocks and Pointer Arithmetic<a name="0220_0008"></h3><P>
The file llbase.c (available electronically) defines the management verbs employed by the primitives to manage a linked list properly. The management verbs should never be referenced directly by the application program. The management verbs are <I>ll_appatom</I> (append atom to end of list), <I>ll_mkblock</I> (create atom block), <I>ll_unbatom</I> (unbind atom from list), <I>ll_inblock</I> (find block that contains an atom), <I>ll_frstatom</I> (return the first atom in a list), <I>ll_lastatom</I> (return the last atom in a list), <I>ll_getbind</I> (get the bindery of a neighbor), and <I>ll_rmblock</I> (remove a block of atoms).<P>
The verbs <I>ll_mkblock()</I> and <I>ll_rmblock()</I> deserve some explanation. Using <I>malloc(), ll_mkblock()</I> allocates a block of memory large enough to hold the desired number of atoms (from the LLCB) and the block-control information (LLBC). This block must be carved up into many logical atoms, then added to the end of the free atom chain for the LLCB. This is done with simple pointer arithmetic. Start by calculating the size of an atom block. The atom block contains three basic types of objects: the block header, the atom bindery (one per atom), and the atom data itself (again, one per atom). <a href="19930226.htm">Figure 2</A> illustrates the internal arrangement of an atom block. The formulas for calculating the overall size of a block of atoms are shown in <a href="#0220_0011">Example 6(a)</A>.<P>
The <I>SizeofAtomData</I> and <I>AtomCount</I>  (which were specified when the LLCB was created) are taken from the LLCB. Given that a call to <I>malloc()</I> will return a pointer to a block of memory of exactly <I>BlockSize</I> bytes, our task is to carve the region into usable atoms. The first step is to calculate the address of the first atom bindery. This will be the first byte past the LLBC, as in <a href="#0220_0011">Example 6(b)</A>, which should give us the address of the first bindery, right? Wrong.<P>
Now is a good time to point out a dangerous thing about pointer arithmetic: The compiler is very smart, and to make things easier for the programmer, adding an offset to a pointer is the same as taking a subscript to the pointer, or <I>pBlock+sizeof(LLBC)</I> is equivalent to <I>pBlock[sizeof(LLBC)]. </I>Because the elements of an array have an inherent size associated with them, the actual calculation performed by the compiler is: <I>pBind=(PLLBIND)(pBlock+(sizeof<P>(LLBC)*sizeof(LLBC))),</I> which is not what we wanted. To get a better feel for what is happening here, consider an array of integers. The size of an integer on 80x86 computers is two bytes. Let's assume that the base address of the array (the address of the first integer in the array) is 0x8000, and let's also assume that we want the address of the fourth integer in the array. In C, we have to do as shown in <a href="#0220_0011">Example 6(c)</A>.<P>
The inherent size of an integer is two bytes, so the compiler multiplies the size of the array item by the index to get the relative offset, and then adds that offset to the base address to achieve the absolute address, or, from our example, <I>3*2+0x80006+0x80000x8006</I>.<P>
If we obtained the address of the fourth element with the statement <I>int*j=a+3</I>, nothing would be different. The compiler knows that <I>a</I> is a pointer to an integer, and the index (3) would be modified by the size of the item being pointed to. This fact about pointer arithmetic gives us pause before proceeding.<P>
How do we calculate the true address of the first bindery? Again we use the power of type casting. By changing the compiler's assumption about the type of item being pointed to, we can avoid the nasty problem of inherent sizes. By casting the pointer <I>pBlock </I>into a character pointer (<I>char*</I>), the compiler believes that <I>pBlock </I>points to a character, which has an inherent size of 1. Therefore,the calculation, <I>pBind=(PLLBIND)((char*)pBlock+sizeof(LLBC));</I> will indeed yield the address of the first bindery. Further, the address of the first atom data is <I>sizeof(LLBIND)--bytes</I> from <I>pBind</I>. However, we must again cast <I>pBind </I>into a character pointer so that wearen'tsurprised: <I>void*pAtom=(void*)<P>((char*)pBind+sizeof(LLBIND));</I>.<P>
At this point, however, we are not interested in the atom data area. Our task is to ascertain the addresses of each of the binderies, link them to each other, and then append them to the end of the free atom chain in the LLCB. Because we are creating a set of new atoms, it follows that they are all unused and will end up in the free chain anyway. By doing a little magic here, we avoid calling <I>ll_appatom()</I> for each of the logical atoms as we locate them, which would use up many more cycles than it is worth.<P>
Now that we have discovered the address of the first bindery, and because we know that this is the first of many atoms to be created, we can go ahead and append this bindery to the end of the free list with a call to <I>ll_fappend()</I>. This done, we &quot;sew&quot; the remaining atoms together with the logic in <a href="#0220_0011">Example 6(d)</A>. We do this once for each atom. When we are done, <I>pBind</I> contains the address of the last bindery in the block. Because we know this to be the final bindery of all free binderies, we will set the free-list tail to <I>pBind</I> after setting <I>pBind-&gt;pNext</I> to NULL.<P>
The destructor function, <I>ll_rmblock()</I>, has a similar task--only in reverse. The atoms contained within a block must be removed from the free chain before the block is destroyed--or else, disaster! The problem is that the atoms contained within the block will more than likely not be in sequential order, as they were when they were created. They must, therefore, be removed one at a time using the <I>ll_funbind</I> (unbind atom from free chain) call. The problem then becomes how to identify which atoms in the free chain belong to the block being destroyed so they can be removed in a graceful manner.<P>
One method is to traverse the free chain, using the <I>ll_inblock()</I> function to determine if an atom is a member of the doomed block, and if so, remove it. With the potential of a rather lengthy free chain, this approach is undesirable.<P>
But remember that we would have all of the atoms readily available if only we could calculate their addresses. We did it once when we created them, and we do it again. We calculate the address of the first bindery, then call <I>ll_funbind()</I> with that address. Next we calculate the address of the next bindery, and so on until all of the atoms have been removed from the free chain. Finally, we remove the block from the block chain itself, and <I>free()</I> the block.<P>
<h3><a name="0220_0009">Using the Toolkit<a name="0220_0009"></h3><P>
The first step in using the linked-list toolkit is to declare the LLCB and the LLST variables and a structure to hold the atom data; see <a href="#0220_0012">Example 7(a)</A>.<P>
The next step is to initialize the LLCB using <I>ll_open()</I>, passing the address of the LLCB, the size of the atom data, and the number of atoms to create per block, as in <a href="#0220_0012">Example 7(b)</A>. Once the LLCB is initialized, we can attach an LLST structure to it using <I>ll_mklist(),</I> as in <a href="#0220_0012">Example 7(c)</A>.<P>
Now the linked list is ready to use. To get an atom from the list, use <I>ll_<P>alloc()</I>;<I> </I><a href="#0220_0012">Example 7(d)</A>. To traverse the list, use <I>ll_first()</I> and <I>ll_next(),</I> as in <a href="#0220_0012">Example 7(e)</A>. To remove a certain atom from the list, use <I>ll_free()</I> and specify the atom to remove; see <a href="#0220_0012">Example 7(f)</A>. To remove all of the atoms from the list, destroy the list using <I>ll_rmlist()</I>; see <a href="#0220_0012">Example 7(g)</A>. Finally, to destroy all lists associated with a particular LLCB, use <I>ll_close()</I>; see <a href="#0220_0012">Example 7(h)</A>.<P>
The test program, lltest.c (available electronically), exercises every function in the toolkit and provides an excellent template for its use.<P>
<h3><a name="0220_000a">Conclusions<a name="0220_000a"></h3><P>
The end analysis indicates that the worst case of employing a blocking method is as good as a nonblocking one, but is generally better with smaller atom sizes. However, this consideration pales when compared to the benefits of using a standardized toolkit vs. customizing each linked list from scratch.<P>
<pre></pre><P>
<h4><a name="0220_000b"><B>Example 1:</B> Traditional definition of an atom structure in C.<a name="0220_000b"></h4><P>
<pre>
typedef struct FOO_ATOM
{
   struct FOO_ATOM   *pPrev;  /* pointer to previous atom */
   struct FOO_ATOM   *pNext;  /* pointer to next atom */
   char       szName[ 30 ];   /* foo name */
   char       szPhone[ 15 ];  /* foo phone number */
}  FOOATOM;

</pre><P>
<h4><a name="0220_000c"><B>Example 2:</B> Algorithm for creating a new atom.<a name="0220_000c"></h4><P>
<pre>if((a = malloc(s))!= NULL)
{
    if(h==NULL)
             h = a;
    if(t!=NULL)
             t-&gt;next = a;
    a-&gt;prev = t;
    a-&gt;next = NULL;
}

</pre><P>
<h4><a name="0220_000d"><B>Example 3: </B>(a) Defining and using a generic bindery structure; (b) application of an atom using a generic bindery structure.<a name="0220_000d"></h4><P>
<pre><B>(a)</B>

typedef struct BINDERY
{
   struct BINDERY *pPrev; /* pointer to previous bindary */
   struct BINDERY *pNext; /* pointer to next bindery */
}   BIND;

typedef struct FOO_ATOM
{
   BIND   b;             /* atom bindery */
   char   szName[ 30 ];  /* foo name */
   char   szPhone[ 15 ]; /* foo phone */
}  FOOATOM;


<B>(b)</B>

void MyFunc( ... )
{

  FOOATOM *pHead, *pTail, *pAtom;
  pHead = pTail = NULL;
  pAtom = (FOOATOM *) AddAtom((BIND **)&amp;pHead,
                      (BIND **)&amp;pTail, sizeof(FOOATOM));
  [ other program statements ]
}

BIND *AddAtom(BIND **ppHead,BIND **ppTail,unsigned usDataSize)
{
  BIND *pRet;
  if( ( pRet = malloc( usDataSize ) ) != NULL )
  {
    if( *ppHead == NULL )
       *ppHead = pRet;
    if( *ppTail != NULL )
       (*ppTail)-&gt;pNext = pRet;
    pRet-&gt;pPrev = *ppTail;
    pRet-&gt;pNext = NULL;
    *ppTail = pRet;
  }
  return( pRet );
}

</pre><P>
<h4><a name="0220_000e"><B>Example 4: </B>ENDS structure definition.<a name="0220_000e"></h4><P>
<pre>typedef struct LIST--ENDS
{
    BIND    *pHead;
    BIND    *pTail;
}   ENDS;

</pre><P>
<h4><a name="0220_000f"><B>Example 5: </B>Traversing a linked list using ENDS structure.<a name="0220_000f"></h4><P>
<pre>FOOATOM *pFooAtom;
ENDS        FooEnds;
for(pFooAtom=(FOOATOM*)FooEnds.pHead;
   pFooAtom;pFooAtom=pFooAtom-&gt;pNext)
{
    [other program statements]
};

</pre>

<P>
<h4><B><a href="19930227.htm">Figure 1</A>: </B>Traditional doubly linked lists with three atoms.</h4><P>

<h4><B><a href="19930228.htm">Figure 2</A>:</B> The linked-list manager tacks on the size of the bindery, requests a block of that size from malloc(), and retains that pointer. The pointer returned to the caller is to the atom data only.</h4><P>

<h4><a name="0220_0010"><B>Table 1:</B> Linked-list toolkit verbs.</H4><P>

<P><B><I>LLCB *ll_open( LLCB *pList, unsigned usAtomSize, unsigned usAtomCnt );</I></B></P>

<P>Initializes a linked-list control structure. Must be the first call performed for a linked-list control. <I>usAtomSize</I> indicates the size of the atom data, and <I>usAtomCnt</I> indicates the number of atoms to create per block. This call does not allocate any memory; it only initializes the linked-list control structure with the values supplied.</P>

<P><B><I>LLST *ll_mklist( LLCB *pListCntl, LLST *pList );</I></B></P>

<P>Creates a linked list as part of the linked-list control addressed by <I>pListCntl</I>.</P>

<P><B><I>void *ll_alloc( LLST *pList );</I></B></P>

<P>Allocates a new atom in <I>pList</I>. Returns a pointer to atom data area if successful, or NULL if no atoms are available and none can be generated by creating new blocks.</P>

<P><B><I>void ll_free( LLST *pList, void *pAtom );</I></B></P>

<P>Releases an atom to the free list.</P>

<P><B><I>void ll_rmlist( LLST *pList );</I></B></P>

<P>Closes <I>pList</I> and releases all resources currently allocated by <I>pList</I>.</P>

<P><B><I>void ll_close( LLCB *pListCntl );</I></B></P>

<P>Closes the linked-list control. Any resources owned by any linked lists associated with the control are released to the system pool.</P>

<P><B><I>void *ll_first( LLST*pList );</I></B></P>

<P>Returns the first atom in <I>pList</I>, or NULL if <I>pList</I> is empty.</P>

<P><B><I>void *ll_last( LLST *pList );</I></B></P>

<P>Returns the last atom in <I>pList</I>, or NULL if <I>pList</I> is empty.</P>

<P><B><I>void *ll_next( void *pAtom );</I></B></P>

<P>Returns the next atom relative to <I>pAtom</I> or NULL if <I>pAtom</I> is the last atom in the list.</P>

<P><B><I>void *ll_prev( void *pAtom );</I></B></P>

<P>Returns the previous atom relative to <I>pAtom</I>, or NULL if <I>pAtom</I> is first on the list.</P>

<P><B><I>void ll_swap( LLST *pList, void *pSrcAtom, void *pTrgAtom );</I></B></P>

<P>Effectively swaps the places of <I>pSrcAtom</I> and <I>pTrgAtom</I> in <I>pList</I>. Both atoms are assumed to be members of <I>pList</I>, and are not checked. This can cause significant problems if atoms from two different lists are swapped.</P>

<P><B><I>void ll_mvbefore( LLST*pList, void *pSrcAtom, void *pTrgAtom );</I></B></P>

<P>Moves <I>pSrcAtom</I> before <I>pTrgAtom</I> in <I>pList</I>. Both atoms are assumed to be members of <I>pList</I>, and are not checked.</P>

<P><B><I>void ll_mvafter( LLST *pList, void *pSrcAtom, void *pTrgAtom );</I></B></P>

<P>Moves <I>pSrcAtom</I> after <I>pTrgAtom</I> in <I>pList</I>. Both atoms are assumed to be members of <I>pList</I>, and are not checked.</P>

<P>

<h4><a name="0220_0011"><B>Example 6: </B>(a) Formulas for calculating true atom and block sizes; (b) formula to calculate the address of the first bindery, with errors; (c) getting the address of a vectored integer; (d) &quot;sewing&quot; the atoms of a block together.<a name="0220_0011"></h4><P>
<pre>(a)

TrueAtomSize=sizeof(LLBIND)+SizeofAtomData
BlockSize   =sizeof(LLBC)+(AtomCount*TrueAtomSize)

(b)
pBlock=malloc(BlockSize);
pBind =(PLLBIND)(pBlock+sizeof(LLBC));


<B>(c)</B>

int a[ 10 ];
int *j = &amp;a[ 3 ];
     /* get address of fourth integer */


<B>(d)</B>

for( ... )
{
   /* calc address of next bindery */
   pBind-&gt;pNext = (PLLBIND)( (char *)pBind + TrueAtomSize );
   /* setup back reference */
   pBind-&gt;pNext-&gt;pPrev = pBind;
   /* go on to the next bindery */
   pBind = pBind-&gt;pNext;
}

</pre><P>
<h4><a name="0220_0012"><B>Example 7: </B>(a) Setting up list control; (b) initializing the list control (LLCB); (c) creating a list; (d) obtaining a fresh atom; (e) forward traversal of a list; (f) returning an atom to the free chain; (g) destroying a list; <P>(h) releasing the LLCB.<a name="0220_0012"></h4><P>
<pre><B>(a)</B>

#include &quot;ll.h&quot;
LLCB ListCB;
LLST List;
typedef struct
{
    char szName[ 30 ];
    char szPhone[ 15 ];
}    FOOATOM;


<B>(b)</B>

ll_open( &amp;ListCB, sizeof<P>          ( FOOATOM ), 10 );


<B>(c)</B>

ll_mklist( &amp;ListCB, &amp;List );


<B>(d)</B>

FOOATOM *pAtom;
pAtom = ll_alloc( &amp;List );


<B>(e)</B>

for( pAtom = ll_first( &amp;List );
 pAtom; pAtom = ll_next( pAtom ))
   printf(&quot;Name:%-30s Phone:%s\n&quot;,
             pAtom-&gt;szName,
             pAtom-&gt;szPhone);


<B>(f)</B>

ll_free( &amp;List, pAtom );


<B>(g)</B>

ll_rmlist( &amp;List );


<B>(h)</B>

ll_close( &amp;ListCB );

</pre><P>

<h4><B><a href="19930229.htm">Figure 3</A>: </B>The results of a few ll_alloc() and ll_free() calls.</h4><P>


<h4><a name="0220_0013"><a name="0220_0014"><B>[LISTING ONE]</B></H4>
<PRE>
(Text begins on page 32.)

/* LINKED LIST TOOLKIT -- Copyright (C) 1990 by Garyl Lee Hester
 * ll.h -- Global header file */
#ifndef TRUE
#define  TRUE              1
#define  FALSE             0
#endif

#define  _LL_NEXT          1
#define  _LL_PREV          2
#define  _LL_BEFORE        3
#define  _LL_AFTER         4
typedef  void *      PATOM;         /* pointer to atom */
typedef  void *      PGEN;          /* generic pointer */
/* Link List Bind Structure (LLBIND)  */
typedef struct LL_BIND
{
   struct LL_BIND *pPrev;           /* reference to next link */
   struct LL_BIND *pNext;           /* reference to prev link */
}  LLBIND, *PLLBIND;
/* Link List Head &amp; Tail Structure (LLENDS)  */
typedef struct LL_ENDS
{
   PGEN  pHead;                    /* generic head pointer */
   PGEN  pTail;                    /* generic tail pointer */
}  LLENDS, *PLLENDS;
/* Link List Block Control Strucure (LLBC)  */
typedef struct LL_BLOKCNTL
{
   struct LL_BLOKCNTL   *pPrev;        /* ref to prev block */
   struct LL_BLOKCNTL   *pNext;        /* ref to next block */
   unsigned             usUsageCnt;    /* usage count */
}  LLBC, *PLLBC;
/* Link List Control Structure (LL) */
typedef struct LL_CNTL
{
   LLENDS   Block;            /* ends of block list */
   LLENDS   Free;             /* ends of &quot;free&quot; atom list */
   unsigned usAtomSize;       /* size of link Atom */
   unsigned usAtomCnt;        /* number of Atoms per block */
}  LLCB, *PLLCB;
typedef struct LL_LIST
{
   PLLCB    pLL;              /* reference to master list */
   LLENDS   Ends;             /* ends of the current sub-list */
}  LLST, *PLLST;
typedef int (*COMPFUNC)( void *, void * );
/* Macros used by ll package only: MAKEPBIND(p), converts an atom ptr to a
 * bindary ptr; MAKEPATOM(p), converts a bindary ptr to an atom ptr */
#define  MAKEPBIND(p) ((PLLBIND)((char *)(p) - sizeof(LLBIND)))
#define  MAKEPATOM(p) ( (PATOM) ((char *)(p) + sizeof(LLBIND)))
/* User Functions supplied by Macros */
#define  ll_next(p)          ll_getbind(_LL_NEXT,(PATOM)(p))
#define  ll_prev(p)          ll_getbind(_LL_PREV,(PATOM)(p))
#define  ll_mvbefore(l,s,t)  ll_mvatom((s),_LL_BEFORE,(t),&amp;(l)-&gt;Ends)
#define  ll_mvafter(l,s,t)   ll_mvatom((s),_LL_AFTER, (t),&amp;(l)-&gt;Ends)
#define  ll_insbefore(l,s,t) ll_insatom((s),_LL_BEFORE,(t),&amp;(l)-&gt;Ends)
#define  ll_insafter(l,s,t)  ll_insatom((s),_LL_AFTER, (t),&amp;(l)-&gt;Ends)
#define  ll_first(p)         ll_frstatom((p),(p)-&gt;Ends.pHead)
#define  ll_last(p)          ll_lastatom((p),(p)-&gt;Ends.pTail)
#define  ll_swap(l,s,t)      ll_swapatom((s),(t),&amp;(l)-&gt;Ends)
#define  ll_append(l,s)      ll_appatom((s),&amp;(l)-&gt;Ends)
#define  ll_unbind(l,s)      ll_unbatom((s),&amp;(l)-&gt;Ends)
#define  ll_memoff(p,m)      (unsigned)((char *)(&amp;(p)-&gt;m)-(char *)(p))
/* Similar Functions for Handling the Free List */
#define  ll_fmvbefore(l,s,t)  ll_mvatom((s),_LL_BEFORE,(t),&amp;(l)-&gt;Free)
#define  ll_fmvafter(l,s,t)   ll_mvatom((s),_LL_AFTER, (t),&amp;(l)-&gt;Free)
#define  ll_finsbefore(l,s,t) ll_insatom((s),_LL_BEFORE,(t),&amp;(l)-&gt;Free)
#define  ll_finsafter(l,s,t)  ll_insatom((s),_LL_AFTER, (t),&amp;(l)-&gt;Free)
#define  ll_ffirst(p)         ll_frstatom((p),(p)-&gt;Free.pHead)
#define  ll_flast(p)          ll_lastatom((p),(p)-&gt;Free.pTail)
#define  ll_fappend(l,s)      ll_appatom((s),&amp;(l)-&gt;Free)
#define  ll_funbind(l,s)      ll_unbatom((s),&amp;(l)-&gt;Free)
/* Function prototypes: llprim.c - linked list primitives */
PLLCB  ll_open( PLLCB, unsigned, unsigned );
void   ll_close( PLLCB );
PLLST  ll_mklist( PLLCB, PLLST );
void   ll_rmlist( PLLST );
PATOM  ll_alloc( PLLST );
void   ll_free( PLLST, PATOM );
/* llbase.c - linked list management */
void   ll_appatom( PATOM, PLLENDS );
void   ll_mkblock( PLLCB );
void   ll_rmblock( PLLCB, PLLBC );
PLLBC  ll_inblock( PLLCB, PATOM );
void   ll_unbatom( PATOM, PLLENDS );
PATOM  ll_frstatom( PLLST, PLLBIND );
PATOM  ll_lastatom( PLLST, PLLBIND );
PATOM  ll_getbind( unsigned, PATOM );
/*  llins.c - insert and move atom routines  */
void   ll_mvatom( PATOM, unsigned, PATOM, PLLENDS );
void   ll_insatom( PATOM, unsigned, PATOM, PLLENDS );
/* llswap.c - atom swap routine  */
void   ll_swapatom( PATOM, PATOM, PLLENDS );
/* llsort.c - shell sort routine  */
void   ll_sort( PLLST, short, unsigned, COMPFUNC );
</PRE>

<h4><a name="0220_0015"><a name="0220_0016"><B>[LISTING TWO]</B></H4>

<PRE>

/* LINKED LIST TOOLKIT -- Copyright (C) 1990 by Garyl Lee Hester
 * llprim.c -- Routines for Linked List Primitives */
#include &lt;stdio.h&gt;
#include &lt;memory.h&gt;
#include &lt;malloc.h&gt;
#include &quot;ll.h&quot;

/* ll_open - initialize a new linked list control */
PLLCB ll_open( PLLCB pLL, unsigned usAtomSize, unsigned usAtomCnt )
{
   unsigned usRet = 0;
   if( pLL )
   {
     /* if the list is already active, destroy it */
      if( pLL-&gt;Block.pHead )
         ll_close( pLL );
      memset( (PGEN)pLL, 0x00, sizeof( LLCB ) );
      pLL-&gt;usAtomSize = usAtomSize;
      pLL-&gt;usAtomCnt  = usAtomCnt;
   }
   return( pLL );
}
/* ll_close - closes a linked list  */
void ll_close( PLLCB pLL )
{
   if( pLL )
   {
      while( pLL-&gt;Block.pHead )
         ll_rmblock( pLL, (PLLBC)( pLL-&gt;Block.pHead ) );
      memset( (PGEN)pLL, 0x00, sizeof( LLCB ) );
   }
}
/* ll_mklist - make a new sub list  */
PLLST ll_mklist( PLLCB pLL, PLLST pList )
{
   if( pList &amp;&amp; pLL )
   {
      pList-&gt;pLL        = pLL;
      pList-&gt;Ends.pHead = NULL;
      pList-&gt;Ends.pTail = NULL;
   }
   return( pList );
}
/* ll_rmlist - destroys a sub list  */
void ll_rmlist( PLLST pList )
{
   if( pList )
   {
      while( pList-&gt;Ends.pHead )
         ll_free( pList, MAKEPATOM( pList-&gt;Ends.pHead ) );
   }
}
/* ll_alloc - return ptr to new atom, else NULL  */
PATOM ll_alloc( PLLST pList )
{
   PLLBIND  pRet = NULL;
   PLLBC    pBlock;
   PLLCB    pLL;

   if( pList )
   {
      pLL = pList-&gt;pLL;
     /* if pFreeHead is NULL, then a new block needs to be created. */
      if( pLL-&gt;Free.pHead == NULL )
         ll_mkblock( pLL );
     /* if pFreeHead is STILL NULL, then there is no more memory */
      if( pLL-&gt;Free.pHead )
      {
         pRet = (PLLBIND)( pLL-&gt;Free.pHead );
         if( ( pBlock = ll_inblock( pLL, pRet ) ) )
            pBlock-&gt;usUsageCnt++;
         ll_unbatom( MAKEPATOM( pRet ), &amp;pLL-&gt;Free );
         ll_appatom( MAKEPATOM( pRet ), &amp;pList-&gt;Ends );
         pRet = MAKEPATOM( pRet );
      }
   }
   return( (PATOM) pRet );
}
/* ll_free - remove pAtom from pList and add to global free chain */
void ll_free( PLLST pList, PATOM pAtom )
{
   PLLBIND  pBind;
   PLLBC    pBlock;
   PLLCB    pLL;
   if( pList &amp;&amp; pAtom )
   {
      pLL   = pList-&gt;pLL;
      pBind = MAKEPBIND( pAtom );
      ll_unbind( pList, pAtom );
      ll_appatom( pAtom, &amp;pLL-&gt;Free );
      if( ( pBlock = ll_inblock( pLL, pAtom ) ) )
         if( !( --pBlock-&gt;usUsageCnt ) )
            ll_rmblock( pLL, pBlock );
   }
}
End Listings
</pre>


<HR><P>Copyright &copy; 1993, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
