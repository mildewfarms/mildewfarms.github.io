<HTML>
<META NAME="year" CONTENT="1993">
<HEAD>
<TITLE>OCT93: The Beta Programming Language</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>The Beta Programming Language<a name="02c4_0003"></h1><P>
<h2><a name="02c4_0001"><a name="02c4_0000">An OO language with Simula roots</h2><P>
<h3>Steve Mann</h3><P>
<p><i><a name="02c4_0002"><a name="02c4_0000">Steve is managing director of MADA and can be contacted at 10062 Miller Ave., Suite 202-B, Cupertino, CA 95014 or MADA@applelink.apple.com.</i></p><hr><P>
New object-oriented applications are announced every day. New object-oriented languages are another matter, however. When was the last time you saw a new commercial-grade, object-oriented language implementation? Beta (pronounced &quot;Bee'-ta&quot;) is one such new language.<P>
Development on Beta started in 1976 as a joint venture between universities in Norway, Denmark, and Finland--the same computer-science community that in the early '60s developed Simula, the first object-oriented language. Throughout its formative years, Beta research has been supported by grants from companies such as Apollo, Apple, and Hewlett Packard. Now, after more than 15 years of R&amp;D, Mjolner Informatics has released the first commercial Beta implementation.<P>
<h3><a name="02c4_0004">Beta Overview<a name="02c4_0004"></h3><P>
Beta's design is heavily influenced by its object-oriented predecessors, notably Simula. It's strongly typed, like C++, with most type checking taking place statically at compile time. The language design is based on a powerful abstraction mechanism called a &quot;pattern.&quot; <a href="#02c4_000e">Example 1</A> shows the syntax for a Beta pattern.<P>
Attributes can be many things, the most common being object declarations and methods specific to the pattern being defined. The Enter statement lists the values passed to the Do section; Exit lists the values output from the Do section; and the Do section contains imperative (executable) statements that perform actions. All syntactic elements of a pattern are optional.<P>
There are several types of patterns, including classes, procedures, functions, coroutines, processes, and exceptions. There are also three types of pattern derivatives: subpatterns (like subclasses but more powerful), virtual patterns (like C++ virtual procedures), and pattern variables (pattern pointer variables).<P>
You can create any of these derivatives from any of Beta's pattern types, making Beta a very orthogonal language. Using subpatterns, for instance, you can create a hierarchy of procedures, functions, coroutines, processes, or exceptions, where all subpatterns inherit attributes from their superpatterns. You can also define virtual classes, virtual procedures, virtual functions, and the like.<P>
<a href="#02c4_000f">Example 2</A>, a simple class pattern defining a bank-account object, has three attributes: <I>balance</I>, a declaration using a predefined class pattern called &quot;integer,&quot; and <I>Deposit</I> and <I>Withdraw</I>, a pair of procedure patterns. Note that:<P>
<UL>
<li>Asterisk/parenthesis pairs are used to enclose comments.</li>
<li>A colon (:) indicates a declaration.</li>
<li>The @ character indicates the name of an object type.</li>
<li>Patterns can be nested; the applicable scope rules are similar to Algol.</li>
<li>Imperative statements always read from left to right.</li>
</UL>
But to write a complete Beta program, you need more than just pattern definitions. You also need declarations to create real objects and imperatives to perform actions on those objects; see <a href="#02c4_0010">Example 3</A>, where the <I>&amp;</I> symbol means <I>new</I> so the expression <I>&amp;account.Deposit</I> means &quot;create a new instance of the pattern <I>account.Deposit</I> and execute it.&quot; This is basically the same as invoking a procedure. In the finished program, the primary object definition (<I>Account</I>) and the methods that operate on that account (<I>Deposit</I>, <I>Withdraw</I>, and <I>Balance</I>) are all patterns. Beta derives much of its elegance and flexibility from this use of a single syntactic element to define everything and execute operations.<P>
<h3><a name="02c4_0005">Reference Attributes and Syntactic Elements<a name="02c4_0005"></h3><P>
Beta lets you define both static and dynamic reference attributes. Examples 2 and 3 show static object references. You can declare a dynamic reference to pattern <I>Account</I> with <I>A1: ^Account;.</I> You create objects dynamically by invoking their pattern name as an executable statement. For instance, <I>&amp;Account[] --&gt; A1[];</I> creates a new instance of <I>Account</I>, returns a reference to the instance, and assigns the reference to A1. The difference between <I>&amp;Account</I> and <I>&amp;Account[]</I> is important: The first means &quot;generate an instance of <I>Account</I> and execute it,&quot; the second means &quot;generate a new instance of <I>Account</I> without executing it and return a reference to it.&quot;<P>
Beta arrays (called &quot;repetitions&quot;) are defined using one of the two forms in <a href="#02c4_0011">Example 4(a)</A>. Array index range from 1 to <I>&lt;Name&gt;.range</I>. (<I>range</I> is an intrinsic attribute of all array objects). You can dynamically resize arrays using the <I>extend</I> attribute, which adds elements to an array. You can reallocate an array, initializing all the elements to the default value for the array object type. You can also assign array slices (or parts of arrays).<P>
The Beta <I>for</I> statement is in <a href="#02c4_0011">Example 4(b)</A>. <I>&lt;Index&gt;</I> is an integer declared locally within the scope of the <I>for</I> statement. It cannot be changed within the loop. The index always starts at 1 and increments by 1. It's possible to overcome the limitations of the <I>for</I> index structure using other patterns.<P>
The <I>if</I> statement, shown in <a href="#02c4_0011">Example 4(c)</A>, is an unusual combination of traditional If and Case statements. E1_En are evaluations, I1_I<I>n</I> imperatives. The <I>else</I> clause is optional. A Boolean evaluation might be written thus (albeit awkwardly):<P>
<pre>(if (x&gt;0) and (y&lt;0)
     // True then_
     // False then_
if)</pre><P>
Beta evaluation (assignment) statements are very flexible. You can use multiple assignment statements such as <I>3 --&gt; I --&gt; J</I>. You can also combine multiple assignments with pattern executions and enter and exit redirection as in <a href="#02c4_0012">Example 5</A>.<P>
<h3><a name="02c4_0006">Subpatterns<a name="02c4_0006"></h3><P>
A <I>subpattern</I> is a pattern that is derived from a superpattern and inherits all its attributes. (Beta does not support multiple inheritance.)<P>
A subpattern is defined by following a pattern's name with the name of its superpattern. For instance, <a href="#02c4_0013">Example 6</A>, defines the basic data structures for a transportation system that has two types of reservations. Each instance of <I>FlightReservation</I> and <I>TrainReservation</I> has its own explicit attributes, plus <I>Date</I> and <I>Customer</I> attributes inherited from the superpattern <I>Reservation</I>.<P>
Certain rules define what you can do with subpatterns. First, you can only assign patterns to a pattern variable of the proper pattern or superpattern, allowing restricted dynamic run-time binding. Second, attribute references are restricted to those attributes belonging explicitly to the pattern being referenced.<P>
It's easy to create a generic pattern that can be used with all objects in a subpattern hierarchy. Suppose you want to create an array of reservations in the system, regardless of their type. <a href="#02c4_0014">Example 7</A> shows how. This group of patterns works with <I>Flight</I>, <I>Train</I>, and <I>Reservation</I> objects.<P>
<h3><a name="02c4_0007">Controlling Subpattern Imperative Sequencing<a name="02c4_0007"></h3><P>
A subpattern automatically inherits the attributes of its superpattern. When a subpattern is executed, its superpattern's imperative statements are automatically executed as well. The superpatterns are normally activated first in the execution sequence, starting with the superpattern directly above a subpattern in the hierarchy.<P>
When <I>P3</I> is invoked in the pattern definitions in <a href="#02c4_0015">Example 8(a)</A>, the execution through the pattern hierarchy is from top to bottom; see <a href="#02c4_0015">Example 8(b)</A>. Beta overrides the default execution sequence between superpatterns and subpatterns using the <I>inner</I> statement which forces the execution of the imperative section of the subpattern one level down in the subpattern hierarchy. If you redefine <I>P1</I>, <I>P2</I>, and <I>P3</I> as in <a href="#02c4_0015">Example 8(c)</A>, the execution of <I>P3</I> initiates the sequence in <a href="#02c4_0015">Example 8(d)</A>.<P>
Just as the attributes and imperatives of a subpattern hierarchy are combined during execution, the Enter and Exit lists are combined, too. The Enter part of a subpattern is the concatenation of the Enter part of the superpattern followed by the Enter part of the subpattern. The same is true for Exit.<P>
<h3><a name="02c4_0008">Virtual Patterns<a name="02c4_0008"></h3><P>
Revisiting the reservation system in <a href="#02c4_0013">Example 6</A>, assume that each attribute has a Display pattern (not shown). Then, add another pattern to display all the attributes for each pattern; see <a href="#02c4_0016">Example 9</A>. If you execute <I>TrainReservation.Display</I>, the complete set of attributes for that pattern are displayed because of the subpattern hierarchy. But if you execute <I>Reservation.Display</I>, only the <I>Reservation</I> attributes are displayed. The pattern <I>Reservation.Display</I> has no easy way of displaying attributes below it in the hierarchy. Clearly you need another solution for dealing with subpattern hierarchies where you may need to reference a pattern that isn't at the bottom, but you'd also like to access attributes below the referenced pattern.<P>
One way of doing this is to define virtual patterns--patterns that can be extended in subpatterns. Although there are different ways to syntactically define virtual patterns, the <a href="#02c4_0017">Example 10</A> refinement to the reservation system shows the simplest and most direct. With this set of virtual patterns, <I>Reservation.Display</I>, <I>FlightReservation.Display</I>, and <I>TrainReservation.Display</I> display the proper attributes in the proper order.<P>
Just as you can define virtual-procedure patterns to create cumulative sets of actions under one name in a hierarchy, you can do likewise with object patterns. Beta makes no real distinction between the two.<P>
<h3><a name="02c4_0009">Basic and Container Libraries<a name="02c4_0009"></h3><P>
Beta contains a wide variety of component and framework libraries for building both UNIX and Macintosh applications. Since Beta includes source code for all libraries, you can study both libraries and sample programs.<P>
Most of Beta's libraries are built on top of simple patterns contained in the basic libraries, including:<P>
<UL>
<li>Patterns for all basic data types: integers, Booleans, reals, characters, and repetitions (arrays).</li>
<li>Streams, for both traditional file streams and internal text strings, and UNIX-like <I>put</I> and <I>get</I> primitives for integer and real data types.</li>
<li>Exceptions, <I>ForTo</I>, <I>Cycle</I>, and <I>Loop</I> control patterns.</li>
<li>Stream patterns for repetitions, allowing you to apply integer and text <I>put</I> and <I>get</I> operations to the repetitions.</li>
<li>A real number math function library, including conversion patterns and basic trig functions.</li>
<li><I>systemEnv</I>, a library of abstract superpatterns for concurrency operations, including semaphores, monitors, and coroutines.</li>
<li>File, directory, and path management patterns for both HFS and UNIX file types.</li>
<li>A process manager that manages interprocess communication via pipes or sockets.</li>
<li>A general-purpose interface to external modules written in other languages, based on C and Pascal interface conventions.</li>
<li>A low-level interface that lets you retrieve internal information about individual objects in the Beta system.</li>
</UL>
The container libraries include a variety of abstract patterns for defining complex data structures. <a href="#02c4_000d">Table 1</A> lists Beta's standard container types.<P>
<h3><a name="02c4_000a">Macintosh Libraries<a name="02c4_000a"></h3><P>
Although the basic and container libraries simplify writing the internals of a program, they don't provide a framework for creating and managing the user interface. Beta has extensive libraries that provide Macintosh (or X Window) toolbox access and higher-level abstractions for creating and controlling the UI.<P>
Beta's toolbox library is basically just wrappers around toolbox calls. The documentation describes the methods used for handling all the toolbox interface components--value and VAR parameters, data structures, M68000 traps, and Beta's external library capabilities.<P>
Beta's toolbox support is reasonably current, including AppleEvents and the Object Model. If you need wrappers for newer toolbox capabilities or managers, the Beta documentation describes how to build your own interface patterns.<P>
The MacEnv library, which includes more advanced interface components, consists of <I>basicMacEnv</I>, <I>controls</I>, <I>fields</I>, <I>scrollingList</I>, <I>figureItem</I>, and odds and ends. <I>BasicMacEnv</I>, which must be used by all MacEnv programs, contains abstractions for dealing with menus and the menu bar, windows, interfacing to the Finder and Clipboard, and handling the mouse, keyboard, and screen. Other libraries provide supplemental features: the <I>control</I> library, which manages controls (buttons, small text-entry controls, and scroll bars) and items intended for programming dialog boxes; the <I>fields</I> library, which has patterns for displaying pictures in windows and for creating and managing various types of text editors; the <I>scrollingList</I> library, which has facilities for making scrolling lists of text string such as those you might put in a Standard File dialog; and the <I>figureItem</I> library, a small vector graphics library that implements graphics objects that may react to a user's mouse actions.<P>
One of the strengths of the MacEnv library is the simplicity of event handling from the programmer's point of view. All Macintosh events are converted into invocations of special virtual patterns within the appropriate UI object. The patterns have default behaviors (when it makes sense) to respond to all events. To complete or refine the interface, you only have to override those subpatterns that need further definitions. (You don't have to create a giant event loop.)<P>
<I>BasicMacEnv</I> manages menus and windows and all the basic event handling in a program. It defines a menu bar with the three standard menus--Apple, File, and Edit--and the expected commands. Default behavior is defined for obvious operations--opening and closing windows, clipboard operations, and so on. (Unfortunately, the default behaviors skip some basic functionality like printing and undo.) You can override the <I>hit</I> pattern for a command to further refine any menu command.<P>
Beta menus have permanent and dynamic menu items. Permanent items (Open and New on the File menu, and Clipboard commands) are for menu items that are valid irrespective of the active window; there are default virtual patterns for all permanent items. Dynamic items are commands that may vary depending on the state of the active window. You need to explicitly attach and detach (enable and disable) dynamic items to coordinate them with the active window.<P>
<I>BasicMacEnv</I> includes predefined patterns for all standard Macintosh window types, plus a wide range of appropriate attributes--title, position, and so on--with default values. Additionally, there are patterns for opening and closing windows, plus default behaviors for dragging, zooming, resizing, and other standard window behaviors. <a href="#02c4_0018">Listing One</A> (page 116) creates a movable window with zoom and close boxes whenever New or Open is selected from the File menu (note how <I>BasicMacEnv</I> is invoked).<P>
When the program is launched, three standard menus are automatically enabled: Open, New, and Quit. <I>myWindow.open</I> creates a resizable nonmodal window and enables the Close command on the File menu. You close the window by selecting the Close command or clicking the close box.<P>
<h3><a name="02c4_000b">The fields Library<a name="02c4_000b"></h3><P>
The <I>fields</I> library contains five patterns designed for displaying and manipulating higher-level data structures: <I>pictureField</I> for displaying pictures; <I>textField</I>, a sophisticated text-editing field with support for styled text and a variety of text-editing functions; <I>abstractScroller</I>, which implements scrolling for any <I>windowItem</I> object; <I>textEditor</I>, a full-fledged text editor canvas with scrolling capabilities; and <I>scroller</I>, a subpattern of <I>abstractScroller</I> which implements scrolling for a <I>windowItem</I> in a canvas.<P>
<a href="#02c4_001a">Listing Two</A> (page 116), a multiwindow text editor, is created by binding a <I>textEditor</I> object to each window opened with either the New or Open command on the File menu. All text editing, Clipboard operations, and menu management are handled automatically by <I>basicMacEnv</I>. In addition, a font menu with some basic size choices is created and added to the menu bar at startup. That menu can be used to modify the text contents of each of the editor windows.<P>
<a href="#02c4_001a">Listing Two</A> shows how easy it is to implement file support, styled text capabilities, and most of the expected default Macintosh behaviors simply by overriding some of Beta's library virtual patterns. However, it isn't a commercial-quality application--there's no industrial-strength file exception handling, no support for undoing editing commands or reverting to previous versions, and no support for intelligent font sizing.<P>
<h3><a name="02c4_000c">The Mjolner Beta System<a name="02c4_000c"></h3><P>
In addition to the Beta features described in this article, the Mjolner Beta System includes:<P>
<UL>
<li>Native code generation.</li>
<li>Automatic garbage collection and storage management.</li>
<li>Separate compilation of program fragments with automatic dependency analysis.</li>
<li>Interfaces to C and assembly language modules (and Pascal on the Mac).</li>
<li>An experimental persistent store.</li>
<li>Process management and concurrency-control patterns.</li>
<li>Application frameworks for X Windows, Motif, as well as the Macintosh Toolbox.</li>
</UL>
Mjolner also offers some additional tools, including a modifiable Hyper Structure Editor, a metaprogramming system, a Beta CASE Tool (UNIX only), and a source-level debugger (UNIX only).<P>
The Mjolner Beta System is not without flaws--the development environment is static, not dynamic, and it uses the native assembler and linker. You have to wade through compile, assemble, link, and run cycles to develop programs. The application frameworks are a good starting point, but they're missing basic printing, undo, and revert support. Finally, the documentation could be improved and expanded.<P>
Keep in mind that these minor complaints are about the implementation, not the language. Beta springs from a unified, object-oriented theoretical foundation. The result is a very clean implementation of virtually all recognized and desired object-oriented capabilities in a simple, easy-to-understand language available in commercial-grade tools. Beta is truly an evolution of object-oriented technology.<P>
For More Information<P>
Mjolner Beta System<P>
Macintosh, $295.00<P>
UNIX, $2890.00<P>
MADA<P>
408-253-2765 (voice)<P>
408-253-2767 (fax)<P>
10062 Miller Ave.<P>
Suite 202-B<P>
Cupertino, CA 95014<P>

<h4><a name="02c4_000d">Table 1:<a name="02c4_000d">Standard container types.</h4><P>
<pre>
Function               Description
<I>container</I>             Abstract superpattern for all containers,
                        including basic container attributes and
                        exception-definitions collection an abstract
                        superpattern for all position-independent
                        container patterns.
<I>multiSet</I>              Unstructured collections that allow duplicates.
<I>set</I>                   Unstructured collections where duplicates are
                        not allowed.
<I>classificationSet</I>     Specialized set that lets you dynamically
                        classify other sets into subsets and supersets,
                        and manage their set operations.
<I>hashTable</I>             Basic hash table where you can define the hash
                        ranges and hash function, with table searching,
                        and table statistic calculations.
<I>extensiblehashTable</I>   <I>hashTable</I> where you can rehash the contents of
                        the tab or extend the range of hash values.
<I>arrayContainer</I>        Element repetition abstraction, including put,
                        get, and sorting operations.
<I>sequentialContainer</I>   An abstract container for sequentially-ordered
                        collection of elements.
<I>stack</I>                 A basic stack with push, pop, and top patterns.
<I>queue</I>                 An ordinary queue.
<I>deque</I>                 A double-ended queue with patterns for operating
                        on both ends of the queue.
<I>prioQueue</I>             A sequential container where each container
                        element has a numeric priority.
<I>list</I>                  A more complex pattern that implements a
                        double-linked list; many list operations take a
                        list position as an argument.
<I>recList</I>               A recursive doubly-linked list.</pre>

<h4><a name="02c4_000e">Example 1:<a name="02c4_000e"></h4><P>
<pre>&lt;Pattern Name&gt;: (#
  &lt;Attribute 1&gt; ;
  &lt;Attribute 2&gt; ;
 .
  &lt;Attribute N&gt; ;
  Enter &lt;Input list&gt;
  Do &lt;Imperatives&gt;
  Exit &lt;Output list&gt;
#);</pre><P>
<h4><a name="02c4_000f">Example 2:<a name="02c4_000f"></h4><P>
<pre>Account: (# (* a simple bank account class pattern *)
  balance: @integer;  (* bank account balance *)
  Deposit: (# (* add `amount' to balance *)
    amount: @integer(* local declaration *)
    enter amount(* input list *)
    do balance + amount -&gt; balance  (* action *)
    exit balance(* output list *)
#);
Withdraw: (#(* subtract `amount' from balance *)
    amount: @integer
    enter amount
    do balance - amount -&gt; balance
    exit amount
#);  #);</pre><P>
<h4><a name="02c4_0010">Example 3:<a name="02c4_0010"></h4><P>
<pre>(#  (* a program pattern with no name *)
  Account: (# (*  a pattern declaration within the unnamed pattern *)
    acct_balance: @ integer;
    Deposit: (#
       amount: @ integer
       enter amount
       do acct_balance + amount -&gt; acct_balance
       exit balance
#);
Withdraw: (#
    amount: @ integer
    enter amount
    do acct_balance - amount -&gt; acct_balance
    exit amount
#);
Balance: (#
   exit acct_balance
#); #);
A: @ Account;
cash_on_hand, balance: @ integer;
do  100 -&gt; &amp;A.Deposit;
    250 -&gt; &amp;A.Deposit;
    75  -&gt; &amp;A.Withdraw -&gt; cash_on_hand; (* $75 on hand *)
    &amp;A.Balance -&gt; balance;  (* $275 balance *)
#)</pre><P>
<h4><a name="02c4_0011">Example 4:<a name="02c4_0011"></h4><P>
<pre>(a)
&lt;Name&gt;: [size] @&lt;Type&gt; ;(* static repetition *)
&lt;Name&gt;: [size] ^&lt;Type&gt; ;(* dynamic repetition *)
(b)
(for &lt;Index&gt;: &lt;Range&gt; repeat &lt;Imperative-list&gt; for)
(c)
(if E0
   // E1 then I1
   // E2 then I2
   . . .
   //En then In
   else I
if)</pre><P>
<h4><a name="02c4_0012">Example 5:<a name="02c4_0012"></h4><P>
<pre>(#
Power: (#   (* compute X^n where n &gt; 0 *)
X, Y: @ real;   n: @ integer;
enter (X, n)
do  1 -&gt; Y;
(for i: n repeat Y * X -&gt; Y for)
exit Y
#)
Reciproc: (#    (* compute (Q, 1/Q) *)
Q, R: @ real;
enter Q
do  (if (Q // 0) then 0 -&gt; R
else (1 div Q) -&gt; R
if )
exit (Q, R)
#);
A, B: @ real;
do  (3.14, 2) -&gt; &amp;Power -&gt; &amp;Reciproc -&gt; (A, B);
(* A = 3.14 ^ 2, B = 1/A *)
#)</pre><P>
<h4><a name="02c4_0013">Example 6:<a name="02c4_0013"></h4><P>
<pre>Reservation:(#
Date:   @DateType;
Customer:   ^CustomerRecord
#)
FlightReservation: Reservation  (#
FlightNo:   ^Flight;
SeatNo: ^Seat
#)
TrainReservation: Reservation   (#
TrainNo:^Train;
CarriageNo: ^Carriage;
SeatNo: ^Seat
#)</pre><P>
<h4><a name="02c4_0014">Example 7:<a name="02c4_0014"></h4><P>
<pre>ReservationRegister: (#
Table: [100] ^ Reservation; (* arbitrary size restriction *)
top: @integer;
Insert: (#  (* insert a reservation *)
R: ^ Reservation;
enter R []
do R [] -&gt; Table [top+1 -&gt; top] []
#);
NoOfRes: (# (* get number of reservations in system *)
exit top
#)
GetRes: (#  (* get reservation number inx *)
inx: @ integer
enter inx
exit Table [inx] [];
#); #)</pre><P>
<h4><a name="02c4_0015">Example 8:<a name="02c4_0015"></h4><P>
<pre>(a)
P1: (# a: @integer  do 1 -&gt; a   #);
P2: P1  (# b: @integer  do 2 -&gt; b   #);
P3: P2  (# c: @integer  do 3 -&gt; c   #);
(b)
P3 invoked  P2 invoked  P1 invoked  1 -&gt; a  2 -&gt; b  3 -&gt; c
(c)
P1: (# a: @ integer do INNER P1;1 -&gt; a  #);
P2: P1  (# b: @ integer do 2 -&gt; b;  INNER P2#);
P3: P2  (# c: @ integer do 3 -&gt; c   #);
(d)
P3  P2  P1  P2 (via INNER P1)   2 -&gt; b
P3 (via INNER P2)   3 -&gt; c  1 -&gt; a</pre><P>
<h4><a name="02c4_0016">Example 9: Building a virtual pattern<a name="02c4_0016"></h4><P>
<pre>Reservation: (#
  Date: @ DateType;
  Customer: ^ CustomerRecord
  Display: (#
    do  Date.Display;
       Customer.Display; INNER
#); #)
FlightReservation: Reservation (#
  FlightNo: ^ Flight;
  SeatNo: ^ Seat
  Display: (#
    do  FlightNo.Display;
       Customer.Display
#); #)
TrainReservation: Reservation (#
  TrainNo: ^Train;
  CarriageNo: ^Carriage;
  SeatNo: ^ Seat
  Display: (#
     do  TrainNo.Display;
        CarriageNo.Display;
        SeatNo.Display
#); #)</pre><P>
<h4><a name="02c4_0017">Example 10:<a name="02c4_0017"></h4><P>
<pre>Reservation: (#
   Date: @DateType; Customer  ^CustomerRecord
   Display:&lt; (#
      do  Date.Display;
        Customer.Display; inner
#); #)
FlightReservation: Reservation (#
   FlightNo: ^Flight;
   SeatNo: ^Seat
   Display::&lt; (#
      do  FlightNo.Display;
          Customer.Display
#); #)
TrainReservation: Reservation (#
   TrainNo: ^Train;
   CarriageNo: ^Carriage;
   SeatNo: ^Seat
   Display::&lt; (#
     do  TrainNo.Display;
       CarriageNo.Display;
       SeatNo.Display
#); #)
</pre><P>

<PRE>


_THE BETA PROGRAMMING LANGUAGE_
by Steve Mann

<a name="02c4_0018"><a name="02c4_0019"><B>[LISTING ONE]</B>


ORIGIN '~beta/macenv/v3.5/basicmacenv' (* part of the fragment system *)
--- program: descriptor ---(* for handling code modules *)

MacEnv (* include the basic app framework *)
(#
   myWindow: @window (#
      type::&lt; windowTypes.zoom;
      hasClose::&lt; trueObject;
      open::&lt; (#
         do  (100, 100)  -&gt; position;
             (300, 100)   -&gt; size;
             My window'  -&gt; title;
   #); #);
 FileMenu::&lt; (#
   iNew::&lt; (# hit::&lt; (# do myWindow.open #); #);
   iOpen::&lt;    (# hit::&lt; (# do myWindow.open #); #);
#); #)


<a name="02c4_001a"><a name="02c4_001b"></pre><B>[LISTING TWO]</B><pre><a name="02c4_001b">

ORIGIN '~beta/macenv/v3.5/basicmacenv'
[[
--- INCLUDE '~beta/macenv/v3.5/fields'
--- INCLUDE '~beta/macenv/v3.5/macfile'
--- INCLUDE '~beta/basiclib/v1.3/file'
--- program:descriptor---

MacEnv (#
(* === Font Menu Patterns === *)
   FontMenu: @Menu (#
      fontSizes: [4] @integer;
      firstFontOset: @integer;
      theEditor: ^edWindow;
      Name::&lt; (# do 'Font' -&gt; theName #);
(*    create the font menu--names on top, sizes on bottom. the
*     handler distinguishes between the two using the item number. *)
      open::&lt; (#
      do  System.AvailableFonts
          (# do thisFontName[] -&gt; Append #);
          separator -&gt; Append;
          '9' -&gt; Append -&gt; firstFontOSet; '12' -&gt; Append;
          '14' -&gt; Append; '18' -&gt; Append;
          9  -&gt; fontSizes [1];12 -&gt; fontSizes [2];
          14 -&gt; fontSizes [3];18 -&gt; fontSizes [4];
      #);
(*    override the standard event handler for this menu
*     to change the font or size of the current selection *)
      EventHandler::&lt; (#
         EvalStatus::&lt;   (# Done::&lt; trueObject #);
         Select::&lt; (#
         do  (if theEditor[] &lt;&gt; None // true then
                 (if theItem.ItemNumber &gt;= firstFontOSet // true then
                    fontSizes [theItem.ItemNumber - firstFontOset + 1] -&gt;
                      theEditor.ChangeSize;
                 else theItem.name -&gt; theEditor.ChangeFont
         if);if);
   #); #); #);
(* === Editor Window Patterns === *)
   edWindow: Window (#
      Type::&lt; WindowTypes.Zoom;   HasClose::&lt; TrueObject;
      myText: ^StyledText;myFile: ^macfile;
      opened: @boolean;
(*    change the font type of the current text selection *)
      ChangeFont: (#
          aTextStyle: @TextStyle; start,end: @Integer
          enter aTextStyle.name
          do  myEditor.Contents.Selection -&gt; (start, end);
              (start, end, aTextStyle.FontID) -&gt;
                      myEditor.Contents.SetOneFont
      #);
(*    change the font size of the current text selection *)
      ChangeSize: (#
          fontSize, start,end: @Integer
          enter fontSize
          do  myEditor.Contents.Selection -&gt; (start, end);
              (start, end, fontSize) -&gt;
                      myEditor.Contents.SetOneSize
      #);
(*    create a dynamic menu item for the File/Close command *)
      DoClose: @theFileMenu.action (#
          hit::&lt; (# do close #); #);
(*    create a dynamic menu item for File/Save command *)
      DoSave: @theFileMenu.action (#
          hit::&lt; (#
      do  (if opened // true then myEditor.saveMyEd
                 else myEditor.saveAsMyEd if)
      #); #);
(*    create a dynamic menu item for File/Save As command *)
      DoSaveAs: @theFileMenu.action (#
          hit::&lt; (# do myEditor.saveAsMyEd #); #);
(*    Window event handler--enable/disable the font menu and dynamic
*     File commands as current window gets activated / deactivated *)
      EventHandler::&lt; (#
      Activate::&lt; (#
          do  this (edWindow)[] -&gt; FontMenu.theEditor[];
               FontMenu.enable;
               DoClose[]   -&gt; theFileMenu.CloseItem.Attach;
               DoSave[]    -&gt; theFileMenu.SaveItem.Attach;
               DoSaveAs[]  -&gt; theFileMenu.SaveAsItem.Attach;
      #);
      Deactivate::&lt; (#
           do  none -&gt; FontMenu.theEditor[];   ;
                FontMenu.disable;
                theFileMenu.CloseItem.Detach;
                theFileMenu.SaveItem.Detach;
                theFileMenu.SaveAsItem.Detach;
      #);#);
(*    pattern to open an existing file *)
      openFile: (#
           do  newFile;
              (if ('','Select a File to Edit: ') -&gt;
                   myFile.GetFile -&gt; opened // true then
                   myFile.RestoreStyledText -&gt; myText[]
               if)
       exit opened
       #);
(*     pattern to create a new file *)
       newFile:(#
           do  &amp;StyledText[] -&gt; myText[];
               &amp;macfile[] -&gt; myFile[]
       #);
(*     pattern to open a new window *)
       open::&lt; (#
          do  'Untitled' -&gt; title;
              (if opened // true then
                   myFile.entry.path.name -&gt; title
               if);
               nextPosition -&gt; Position;   (350,400) -&gt; Size;
               (5,10) -&gt; nextPosition.add; myEditor.open
       #);
(* === Text Editor Patterns--scoped inside Window to have ===
*  === access to all of the Window attributes === *)
   myEditor: @TextEditor (#
(*     track text changes (to disable Save if no changes). *)
       docChanged: @boolean;
       ContentsDesc::&lt; (#
           Textchanged::&lt; (# do true -&gt; docChanged #);
       #);
(*  open (create) a new text editor--bind to window *)
    open::&lt; (#
       do  this(edWindow).Size-&gt;Size;
       true-&gt;BindBottom-&gt;BindRight;
       myText[] -&gt; Contents.contents;
       myEditor[] -&gt; Target;
       false -&gt; docChanged
   #);
(*  save the current document to disk *)
    saveMyEd: (#
       do  contents.contents -&gt; myFile.SaveStyledText
    #);
(*  save the current doc to disk, but allow a name change *)
    saveAsMyEd: (#
       do  (if ('Select a Destination File Name: ',title) -&gt;
               myFile.PutFile // true then saveMyEd;
               myFile.entry.path.name -&gt; title
            if)
     #);
(*   close and (optionally) save the current text editor *)
     close::&lt; (#
         do  (if docChanged // true then saveAsMyEd if)
     #);#); #);
(* === File Menu Patterns === *)
   FileMenu::&lt; (#
(* File/Open command *)
   iOpen::&lt; (# hit::&lt; (#
      myWindow:^edWindow;
      do  &amp;edWindow[] -&gt; myWindow[];
          (if myWindow.openFile // true then
              myWindow.open
          if)
    #);#);
(* File/New command *)
   iNew::&lt; (# hit::&lt; (#
       myWindow:^edWindow
       do  &amp;edWindow[] -&gt; myWindow[];
            myWindow.newFile;
            myWindow.open
   #);#);#);
(* === Program start - create the font menu, put it on the ===
*  === menu bar, and set the first window tiling position. === *)
   nextPosition: @Point;
   do  FontMenu.Open;
          FontMenu.disable;
          FontMenu[] -&gt; Menubar.Append;
          (5,40) -&gt; nextPosition
#)
---]]





</pre><HR><P>Copyright &copy; 1993, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
