<HTML>
<META NAME="year" CONTENT="1993">
<HEAD>
<TITLE>OCT93: The Eiffel Programming Language</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>The Eiffel Programming Language<a name="02c6_0003"></h1><P>
<h2><a name="02c6_0001"><a name="02c6_0000">A pure OO language designed with reuse in mind</h2><P>
<h3>Robert Howard</h3><P>
<p><i><a name="02c6_0002"><a name="02c6_0000">Robert &quot;Rock&quot; Howard is president of Tower Technology Corporation, creator of the TowerEiffel system, and chairman of NICE, the Eiffel Consortium. You can contact him at 2701 Stratford Drive, Austin, TX 78746 or at rock@twr.com.</i></p><hr><P>
With software complexity mushrooming because of ever-increasing user expectations, programmers should avoid &quot;accidental&quot; complexities imposed by languages and tools whenever possible. The Eiffel programming language, perhaps more than others, removes unnecessary complexities without limiting the ability to express the inherent complexity of software.<P>
Eiffel combines object-oriented (OO) capabilities with a unique focus on software &quot;correctness&quot; and reusability. Eiffel programs can express abstractions in a clear manner using a syntax that's simple to learn and use. Eiffel can be used for OO design-specification, or as a full-fledged, software-engineering tool.<P>
Eiffel is a class-based language that reinforces OO design. It includes multiple and repeated inheritance, selective exporting, strong type checking, parameterized classes, dynamic binding, garbage collection, feature renaming, exception handling, and persistency. Eiffel is implemented via sophisticated compilers that perform dependency analysis and optimization. To speed the development cycle, some implementations include interpretation.<P>
Since its introduction in 1986, Eiffel has attracted an international following in academia and engineering and is used extensively by in-house and commercial software-development projects. Eiffel is the only OO language outside of Smalltalk and C++ with multiple commercial implementations. The Eiffel trademark is owned by the Nonprofit International Consortium for Eiffel (NICE), an independent consortium that administers and enforces language and core library standards.<P>
Eiffel's major benefit is the reduction of software-maintenance costs. This comes about in two ways. First, Eiffel supports the development of correct software via the use of semiformal assertion technology. Second, Eiffel supports the development and use of reusable software. These concepts are intimately linked since software correctness is a prerequisite for effective software reuse.<P>
Eiffel is a &quot;pure&quot; object-oriented language. Every value is either an object, a reference to an object, or void. (Void denotes the state of a reference that is not currently attached to an object.) While Eiffel syntax resemble Pascal, it was designed as a class-based, statically-typed object-oriented language.<P>
All Eiffel classes implicitly inherit from class ANY, and include both shallow and deep copying, cloning, comparison, and so on. Eiffel supports a clean mechanism allowing you to easily add capabilities to this class.<P>
Eiffel has no formal notion of pointers. Conceptually, all feature arguments are object references. The compiler can &quot;decide&quot; to implement a feature call in an appropriate manner--given the actual type of the objects used as arguments. Compared to languages where there are choices between pointer and reference semantics, Eiffel's uniformity in calling conventions simplifies class interfaces.<P>
Eiffel has standard mechanisms for interfacing with C, including calling C from Eiffel, and Eiffel from C. Some implementations include extensions that allow the use of C macros or inline C within designated Eiffel routines. Come compiler vendors also include mechanisms for accessing Eiffel object data or features from C.<P>
Eiffel implementations come with a variety of kernel classes handing basic types--integers, reals, floats, Booleans, strings, arrays, bits, and so on. The compiler knows about these types and can produce optimized code when they're used. Other kernel classes are basic I/O, standard files, and exceptions. NICE is working to standardize the kernel classes.<P>
It is easy to add persistency to Eiffel. Interactive Software Engineering (Goleta, CA) provides the STORABLE class that allows for persistence to classes that inherit from it. Tower Technology (Austin, TX) provides a library that can encode any Eiffel object into a heterogeneous, packed binary format that can be decoded into a separate process on another machine, or at a future time. SIG Computer (Braunfels, Germany) has specialized FILE classes used for simple persistency.<P>
<h3><a name="02c6_0004">Improving Software Correctness<a name="02c6_0004"></h3><P>
Eiffel eliminates the possibility of entire categories of errors--memory management errors, unintended side effects caused by poor encapsulation, bad links from erroneous makefiles, improper routine dispatching due to type errors or confusion, and the like. Eiffel also &quot;attacks&quot; errors in application logic and semantics via its advanced assertion technology. Assertions support the contract metaphor, aid feature and class comprehensibility, interact with the exception-handling capabilities, and improve confidence in system reliability. Debugging time, especially defect location, is usually cut drastically when assertions are used in Eiffel classes.<P>
Assertions in Eiffel come in two flavors--preconditions and postconditions. (Class invariants, loop invariants, loop variants, and checks are also supported, but for the sake of this argument you can lump them in with postconditions.) Preconditions require that arguments provided to feature calls are acceptable, and that the object is in a state such that the feature call can be handled. Postconditions ensure that a chunk of code performed correctly, provided an acceptable result, and left the object in a correct state.<P>
The preconditions, postconditions, and class invariants are treated as inherent parts of the class interface and are retained under inheritance to enforce required behavior even for subclasses. Eiffel's automatic interface extraction tool treats assertions as equally important as routine signatures. Unlike other languages, semantic assumptions expressed via assertions are explicit and public.<P>
When a run-time error occurs, the Eiffel exception-handling capability kicks in. If no handler is designated for a given assertion failure, it's handled by the Eiffel run-time system, which dumps trace and other information. Precondition failures denote errors in the feature caller, while postconditions denote errors in the feature body. Thus the liberal use of assertions usually immediately isolates many run-time defects. (For further discussion of software correctness, see &quot;Writing Correct Software with Eiffel&quot; by Bertrand Meyer, <I>DDJ</I>, December 1989.)<P>
Eiffel supports the reuse of classes via inheritance, parameterization, and composition. The inheritance mechanism allows renaming and redefinition of features so that derived classes can be easily specialized. Parameterization goes beyond simple template construction as type parameters can be constrained. This allows the constraint class's capabilities to be used within the enclosing parameterized class, enabling the implementation of high-level abstract data types. Eiffel also includes an indexing clause for locating reusable classes.<P>
<h3><a name="02c6_0005">Exploring Eiffel<a name="02c6_0005"></h3><P>
To examine Eiffel's syntax, let's begin by looking at the linked list example (see the Eiffel code on page 122, which is part of the article, &quot;Comparing Object-oriented Languages&quot;). At first glance, the syntax seems similar to Pascal--assignment via <B><I>:=</I></B>, <I>If</I> statements, routine declarations, and the optional semicolon statement separators are familiar elements borrowed from Pascal. The <I>loop</I> construct is demonstrated in class MY_LIST. The <I>from/until/loop/end</I> pattern can also be supplemented by optional <I>loop invariant</I> and <I>loop variant</I> assertions.<P>
Distinguishing Eiffel from Pascal are the clauses introduced by the <I>inherit, creation,</I> and <I>feature</I> keywords. The optional <I>inherit</I> clause lists the class or classes that are inherited. In this clause, it's possible to rename individual features and otherwise join classes so that naming conflicts don't occur. The optional <I>creation</I> clause lists procedures that are available to initialize a newly-created object. The <I>feature</I> clause specifies the export status for one or more Eiffel attributes and/or routines grouped within it. (Eiffel uses the term &quot;feature&quot; to denote attributes or routine since, in some cases, they may be substituted for each other.)<P>
Although not specified by the language definition, current Eiffel implementations expect that each class definition resides in a separate file with a suffix of <I>.e</I>. The name of the class need not match the file name, although that's the convention. Related classes are often grouped together in directories called &quot;clusters.&quot; An important cluster is the &quot;kernel&quot; cluster that's provided with each Eiffel implementation. The kernel includes the low-level base classes, including the basic types--integer, real, double, character, array, string, file, and others.<P>
A configuration file names the clusters where classes may be found for building an executable. It also names a class as the top-level class, and a feature as the initial feature to call within the top-level class. Various debugging options and other system-building parameters are specified. Interactive Software Engineering, and Tower Technology use the &quot;LACE&quot; configuration file format while SIG Computer uses the &quot;pdl&quot; format. (NICE will likely standardize on a single format in the future.)<P>
To build the sample Eiffel system, the configuration file specifies DRIVER as the top-level class and <I>make</I> as the initial feature to call. The code for <I>make</I> in class DRIVER performs the same work as the C++ <I>main()</I> function.<P>
The !! syntax denotes object creation. Some classes denote one or more procedures as &quot;creation procedures&quot; by naming them in the creation clause near the beginning of the class. If a class has no creation procedure, then the object is created without a call (for example, <I>!!list1</I>). If a class has at least one creation procedure, then creation requires a call such as (<I>!!n1.set( 10 )</I>.<P>
The <I>set_data</I> routine in class ELEMENT can be used for either creating an instance of ELEMENT, or as a normal feature call. If required, export controls can be used to make a routine available only for creation.<P>
The Eiffel class PRINTABLE replaces <I>MyListData</I> in the C++ code example. Note that PRINTABLE is marked <I>deferred</I> so that no objects of type PRINTABLE can be created. Instead, it's used as an abstract data type and inherited from it to get reliable polymorphic behavior. Also, the class LIST is a general-purpose version of MY_LIST. LIST takes a generic parameter named <I>T</I>. To use LIST, you declare it with an actual generic parameter; for instance, <I>this_list : LIST(HAT);</I>. Thus <I>this_list</I> holds objects of type HAT and/or objects that inherit from class HAT.<P>
Class MY-LIST also has a generic parameter, but there's a restraint on its parameter <I>[T-&gt;PRINTABLE]</I>. This means that only objects that inherit from PRINTABLE are allowed to be used wherever <I>T</I> is used within the class. The result is that the compiler ensures that the call to <I>print_self</I> (which was defined as a deferred feature in class PRINTABLE) will always work.<P>
<h3><a name="02c6_0006">More Code Notes<a name="02c6_0006"></h3><P>
Eiffel assertions can have optional labels that are echoed to the standard error output if the exception caused by an assertion failure is not handled; see the invariant clause of class LIST.<P>
Every attribute and routine is defined within the scope of a feature clause that denotes its export status. <I>Feature [NONE]</I> is equivalent to private. <I>Feature [ANY] </I>is equivalent to public since all Eiffel classes automatically inherit from class ANY. <I>Feature [LIST}</I> in class ELEMENT is an example of selective exporting. Only class LIST and classes that inherit from it may invoke these features.<P>
Eiffel automatically initializes all fields to default values, so some of the initialization logic from the C++ code is not necessary.<P>
The I/O calls (<I>put_string, put_int, put_newline,</I> and <I>put_char</I>) are from the SIG's Eiffel/S BASIC_IO class. Interactive Software's Eiffel 3 has a slightly different I/O library. Tower uses either ISE or Eiffel/S style. NICE is developing a single I/O standard and other core capabilities.<P>
<h3><a name="02c6_0007">Extending the Linked List Example<a name="02c6_0007"></h3><P>
Although the Eiffel linked list implementation is wordier than the C++ implementation, it's safer, more understandable, and does much more. For example, it includes a general-purpose list, not one specialized for printable objects. Furthermore, the specialized class MY-LIST is safer since nonconforming objects can't be added to it.<P>
The routines in <a href="#02c6_000a">Example 1</A> are additions to class LIST for removing items. Eiffel will reclaim an item's memory as is appropriate. Doing this in C++ is painful because you must build or include a garbage collector or a sophisticated reference counting system to know when to call destructors safely.<P>
The routine in <a href="#02c6_000b">Example 2</A> can be added to class LIST to return individual items. In Eiffel, there are two approaches to using this capability. One approach shown in <a href="#02c6_000c">Example 3</A> is to fetch the item as conforming to a type that includes the needed capabilities and then rely on dynamic typing. The other approach is shown in <a href="#02c6_000d">Example 4</A> and uses an assignment attempt. This will assign an object only if it conforms to the target reference. Otherwise the reference is set to VOID.<P>
These examples show the Eiffel objects retain type information. Because C++ objects don't retain type information, the examples are hard to duplicate. Instead, C++ has the dangerous type coercion capability that can't match the safety and flexibility of these examples.<P>
<h3><a name="02c6_0008">Development Automation<a name="02c6_0008"></h3><P>
According to the Eiffel philosophy, compilers should take on many of the automatable tasks involved in building applications. For example, replying on programmers for dependency-analysis information (makefiles) is a waste of time and a source of problems. Requiring the maintenance of separate class interface files, including the complex include file invocation order, is another nonproductive effort.<P>
Eiffel compilers take on much of the burden of performing system-wide and local optimizations. For example, all Eiffel features are &quot;virtual&quot; as far as the Eiffel programmer is concerned. The Eiffel compiler locates all appropriate opportunities for in-lining or removing unnecessary code and eliminating unnecessary dynamic binding. Programmers focus optimization efforts on choosing proper data structures and streamlining object interactions. The compiler also eliminates dead code, permitting you to focus on data structures and object interactions.<P>
Eiffel compilers take on the task of fully checking for correct type usage, without imposing a confusing or limited type system on you. In Eiffel, subclassing and subtyping are one and the same, making the use of inheritance particularly powerful and easy. Eiffel supports the more natural, covariant type system that allows classes to be easily specialized in concert.<P>
<h3><a name="02c6_0009">Final Thoughts<a name="02c6_0009"></h3><P>
Eiffel encourages you to use languages and tools appropriately; that is, to use an OO language for implementing OO designs. You can then use a portable assembler such as C for low-level optimizations and operating-system interfaces, or an AI tool or language where a logic-based approach is needed. As long as the languages and tools can interface appropriately, this approach yields better results than the use of hybrid languages or tools.<P>
Eiffel's support for semiformal, parameterizable specifications allow the construction of robust, reusable software components. The clear syntax couples with the elucidation of assumptions via assertions makes it easier to share these components with confidence. The result is that the real benefits of object-oriented programming are more fully realized.<P>
<h4><a name="02c6_000a">Example 1:<a name="02c6_000a"></h4><P>
<pre>   is_empty : BOOLEAN is
         -- return TRUE if LIST is empty
      do
         Result := ( head = void )
      end ; -- is_empty
   remove is
         -- remove the first list item
      require
         not_empty: not is_empty
      do
         head := head.next ;
         if head = void
          then
            tail := void ;
         end;
      end ; -- remove</pre><P>
<h4><a name="02c6_000b">Example 2:<a name="02c6_000b"></h4><P>
<pre>   item : T is
         -- return the head of the list
      require
         not is_empty
      do
         Result := head
      end ; -- item</pre><P>
<h4><a name="02c6_000c">Example 3:<a name="02c6_000c"></h4><P>
<pre>      local
         this_list : MY_LIST[PRINTABLE] ;
         pr : PRINTABLE ;
      do
         -- create the list
         !!this_list ;
         -- add items to the list (not shown)
         ...
         -- fetch an item from the list
         if not this_list.is_empty
          then
            pr := this_list.item ;
            pr.print_self ; -- dynamic binding still works!
         end</pre><P>
<h4><a name="02c6_000d">Example 4:<a name="02c6_000d"></h4><P>
<pre>      local
         this_list :
      MY_LIST[PRINTABLE] ;
         pt : MY_POINT
      do
         -- create the list
         !!this_list ;
         -- add items to the list
         ... (not shown)
         -- fetch an item from the list
         pt ?= this_list.item 
         if pt /= void
          then -- it was a MY_POINT
            pt.print_self ;
         end ;</pre><P>


<PRE>


EIFFEL SOURCE CODE EXAMPLE

class DRIVER
   -- In Eiffel, the top level driver is an object, too.
inherit
   BASIC_IO
creation
   make
feature {ANY}
   make is
      -- run this test driver
      local
      list1, list2 : MY_LIST[PRINTABLE] ;
      n1, n2 : MY_NUMBER ; -- a kind of PRINTABLE
      p1, p2 : MY_POINT ;  -- also a kinf of PRINTABLE
      do
         -- create the various objects
      !!list1 ;
      !!list2 ;
      !!n1.set( 10 ) ;
      !!n2.set( 20 ) ;
      !!p1.set( 2, 3 ) ;
      !!p2.set( 4, 5 ) ;

      list1.add_to_list( n1 ) ;
      list1.add_to_list( n2 ) ;
      list1.add_to_list( p1 ) ;
      list2.add_to_list( n2 ) ; -- objects can be in more than one list
      list2.add_to_list( p1 ) ;
      list2.add_to_list( p2 ) ;
      list2.add_to_list( list1 ) ; -- list 1 is an element of list 2

      put_string( &quot;list1:%N&quot; ) ;
      list1.print_self ;
      put_string( &quot;list2:%N&quot; ) ;
      list2.print_self ;
      end -- make
end -- DRIVER
deferred class PRINTABLE
   -- insures that 'print_self' is implemented
inherit
   BASIC_IO
feature {ANY}
   print_self is
      -- print yourself
      deferred
      end -- print_self
end -- PRINTABLE
class MY_NUMBER
   -- holds and can print an integer
inherit
   PRINTABLE
creation
   set
feature {ANY}
   value : INTEGER ;
   set( new_value : INTEGER ) is
      -- set this number
      do
      value := new_value ;
      end ; -- make
   print_self is
      -- print the value
      do
      put_string( &quot;Number: &quot; ) ;
      put_int( value ) ;
      put_newline ;
      end ; -- print_self
end -- MY_NUMBER
class MY_POINT
   -- holds and can print an x,y pair
inherit
   PRINTABLE
creation
   set
feature {ANY}
   x, y : INTEGER ;
   set( new_x : INTEGER; new_y : INTEGER ) is
      -- set this point
      do
      x := new_x ;
      y := new_y
      end ; -- set
   print_self is
      -- print the value
      do
      put_string( &quot;Point: &quot; ) ;
      put_int( x ) ;
      put_char( ',' ) ;
      put_int( y ) ;
      put_newline ;
      end ; -- print_self
end -- MY_POINT
class ELEMENT[T]
   -- holds an object reference and a
   -- single link to another ELEMENT[T]
creation
   set_data
feature {LIST}
   data : T ;
   next : ELEMENT[T] ;
   set_data( new_data : T ) is
      -- set data to the new_data
      do
      data := new_data
      end ; -- set_data
   set_next( new_next : ELEMENT[T] ) is
      -- set next to the element
      do
      next := new_next
      end ; -- set_next
end -- class ELEMENT
class LIST[T]
   -- a generic linked list class
feature {ANY}
   add_to_list( data : T ) is
      -- add to the end of the list
      local
      new_element : ELEMENT[T] ;
      do
      !!new_element.set_data( data ) ;
      if head = void
       then
         head := new_element ;
      else
         tail.set_next( new_element ) ;
      end
      tail := new_element ;
      end ; -- add_to_list
feature {NONE}
   head, tail : ELEMENT[T] ;
invariant
   tail_next_is_void: tail.next = void ;
   tail_void_when_head_void: head = void implies tail = void
end -- LIST
class MY_LIST[T-&gt;PRINTABLE]
   -- A printable list which holds printable data
inherit
   LIST[T]
   PRINTABLE
feature {ANY}
   print_self is
      -- print the list elements
      local
      el : ELEMENT[T] ;
      do
      from
         el := head
      until
         el = void
      loop
         el.data.print_self
         el := el.next ;
      end ;
      end ; -- print_self
end -- MY_LIST

</PRE>

<HR><P>Copyright &copy; 1993, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
