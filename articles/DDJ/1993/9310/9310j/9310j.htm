<HTML>
<META NAME="year" CONTENT="1993">
<HEAD>
<TITLE>OCT93: C++ Manipulators and Applicators</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>C++ Manipulators and Applicators<a name="02cf_0003"></h1><P>
<h2><a name="02cf_0001"><a name="02cf_0000">Simplifying the use of C++ I/O streams</h2><P>
<h3>Reginald B. Charney</h3><P>
<p><i><a name="02cf_0002"><a name="02cf_0000">Reg is president of Charney and Day Inc. and a member of ANSI's X3J16 Committee on the C++ language. He is also former chairman of The Canadian Standards Association's Working Group on Program Design Standards (Z243.21). Reg can be reached on CompuServe at 70272,3427.</i></p><hr><P>
Manipulators and applicators simplify the use of C++ I/O streams and add elegance to input and output expressions. As a result, the logical connection between functionality and use is more obvious. They also express complex procedures more concisely and minimize name-space pollution. That is, names chosen for manipulators and applicators can also be used for other things, since function-name overloading will distinguish between uses of the same name.<P>
Although the terms manipulator and applicator are commonly used for both functions and classes, this article distinguishes between the two uses. When manipulators and applicators are used without qualification, the name applies to both functions and classes.<P>
<h3><a name="02cf_0004">The Problem<a name="02cf_0004"></h3><P>
Using function <I>qStr()</I> and the iostream.h package, you'd expect <a href="#02cf_000d">Example 1(a)</A> to produce the output in <a href="#02cf_000d">Example 1(b)</A>. However, the output we actually get is shown in <a href="#02cf_000d">Example 1(c)</A>. The reversed output and pointer values are caused by the function in the output expression being evaluated first.<P>
A compiler reduces all components of an expression to data and operator types. Next, the user-defined operators of equal precedence are processed in order. In <a href="#02cf_000d">Example 1(a)</A>, all the operators have the same precedence. So, only the function call needs to be replaced by its return type before evaluating the expression.<P>
The solution to the reversed output problem is to make <I>qStr()</I> appear as a data type. The compiler can then evaluate the similar expressions in the expected order.<P>
<h3><a name="02cf_0005">Manipulator and Applicator Functions<a name="02cf_0005"></h3><P>
Manipulator functions modify their environment via side affects. Usually, they take and return references to the streams in which they are used. Other arguments normally remain unchanged. Refer to <a href="#02cf_000e">Example 2(a)</A> and 2(b).<P>
An applicator function has two or more arguments, one of which is a function pointer. The applicator invokes the function argument passing the other arguments to it. Its return type can be anything. <a href="#02cf_000f">Example 3</A> shows an applicator function called <I>af().</I><P>
<h3><a name="02cf_0006">Manipulator Classes<a name="02cf_0006"></h3><P>
Manipulator classes solve the problem of replacing a function call with a data type. These classes encapsulate a manipulator function pointer with its arguments and an applicator function that is recognized in the streams where the manipulator class instances will be used.<P>
Manipulator constructor arguments are stored and used later. The arguments always include a manipulator function pointer. Friend operator functions overload the stream insert and extract operators and allow the compiler to recognize an instance of the manipulator class within a stream expression. These operators are also applicator functions. That is, they invoke the stored manipulator function using the stored arguments. <a href="#02cf_0010">Example 4</A> shows manipulator class output. (Bjarne Stroustrup refers to manipulator class instances as &quot;function objects.&quot;)<P>
<h3><a name="02cf_0007">Manipulator Interface Functions<a name="02cf_0007"></h3><P>
In <a href="#02cf_0011">Example 5(a)</A>, a manipulator interface function is used to encapsulate the manipulator function and its arguments into an instance of the manipulator class. <a href="#02cf_0011">Example 5(b)</A> shows the output.<P>
With the manipulator functions, manipulator classes, and applicator functions already defined, you're ready to output quoted strings. <a href="#02cf_0012">Example 6</A> specifies manipulators explicitly. However, every C++ implementation, has a iomanip.h library header file that contains generic input and output manipulator classes. Depending on compiler, they are implemented as macros or as templates. <a href="#02cf_0013">Example 7</A> uses templates to get the same results as <a href="#02cf_0012">Example 6</A>.<P>
The iomanip.h header depends on the iostream.h header file. Therefore, it must appear after the inclusion of iostream.h. The names of the generic manipulator classes vary with compiler, but most use the names SMANIP, OMANIP, IMANIP and IOMANIP classes for <I>ios</I>, <I>ostream</I>, <I>istream</I>, and <I>iostream</I> stream classes, respectively. By default, all compilers generate manipulator classes to handle <I>int</I> and <I>long</I> manipulator function arguments. They also generate the prototypes for the standard manipulator functions like <I>setw().</I><P>
If iomanip.h is implemented using macros and you wish to handle arguments of types other than <I>int</I> and <I>long</I>, you must do two additional things. First, ensure that the new type is a single token, like <I>CP</I> in <a href="#02cf_0013">Example 7</A>. The macro preprocessor uses this single token type name to generate other names. Second, you must issue a <I>IOMANIPdeclare</I> statement to generate all the generic manipulator classes for the new type. The new type can be a class. <a href="#02cf_0014">Example 8</A> uses a macro version of the generic manipulator functions.<P>
<h3><a name="02cf_0008">Applicator Classes<a name="02cf_0008"></h3><P>
An applicator class, which is an alternate way of specifying manipulator interface functions, has one or more constructors and one or more function-call operators. The applicator class constructors take one argument--a pointer to a user-defined manipulator function. The pointer is stored for later use.<P>
The applicator function-call operator associates an applicator instance with a set of arguments. The stored function pointer and arguments are used in the manipulator class constructor to create and return an instance of its class. <a href="#02cf_0015">Example 9</A> shows a typical applicator definition.<P>
As with manipulators, the iomanip.h header file contains generic applicator classes, usually called SAPP, IAPP, OAPP and IOAPP for the <I>ios</I>, <I>istream</I>, <I>ostream</I>, and <I>iostream</I> classes.<P>
<a href="#02cf_0016">Example 10</A> shows how an applicator class would be used in <a href="#02cf_0013">Example 7</A> with the template version of the iomanip.h header.<P>
<h3><a name="02cf_0009">Implementation Details<a name="02cf_0009"></h3><P>
The parameterless manipulators <I>endl</I>, <I>ends</I>, <I>flush</I>, <I>dec</I>, <I>hex</I>, <I>oct</I>, and <I>ws</I> are predefined in the iostream.h header file. The header iomanip.h defines the <I>int</I> and <I>long</I> manipulators <I>setw(int)</I>, <I>setfill(int)</I>, and <I>setprecision(int).</I><P>
The declaration of manipulator interface functions can be placed in header files while a separate file can contain their definitions.<P>
Manipulators for classes derived from I/O stream must be defined carefully. They will also apply to the base-class-streams unless there is a non-member applicator defined for the manipulator and the derived class.<P>
<h3><a name="02cf_000a">Conclusions<a name="02cf_000a"></h3><P>
For this article, I used three compilers that support templates: Comeau Computing's C++ v3.0, MetaWare's HIGH C/C++ v3.0, and Borland's C++ v3.1. Only Comeau's C++ comes with a template version of iomanip.h. The other two compilers use macro versions of this header file.<P>
Manipulators and applicators are most often used with the I/O streams package. However, their use can be extended to any type of class which has overloaded operators and whose designers want elegance and clarity.<P>
<h3><a name="02cf_000b">Acknowledgments<a name="02cf_000b"></h3><P>
This article was written as part of my response to an article on C++ design by Michael Schelkin of Stins Coman, Moscow, Russia, which appeared in the C Users Group (U.K.) magazine, <I>CVu</I>. He was responding to my article on C++ design in the <I>C++ Journal</I> (vol 2, no. 2).<P>
<h3><a name="02cf_000c">References<a name="02cf_000c"></h3><P>
Charney, R.B. &quot;Data Attribute Notation, Part 1.&quot; <I>C++ Journal</I> (vol 2 , 1992).<P>
Charney, R.B. &quot;Data Attribute Notation, Part 2.&quot; <I>C++ Journal</I> (vol 2 , 1993).<P>
Dewhurst S.C. and K.T. Stark. <I>Programming in C++. </I>Englewood Cliffs, NJ: Prentice Hall, 1989.<P>
Eckel, B. <I>C++ Inside &amp; Out</I>. Berkeley, CA: Osborne McGraw-Hill, 1993.<P>
Jensen Partners International, Topspeed C++ 3.02 <I>Class Library Guide</I>, 1991.<P>
Microsoft C/C++ Version 7.0 <I>Class Libraries User's Guide</I>, 1991.<P>
Stroustrup, B. <I>The C++ Programming Language Second Edition</I>. Reading, MA: Addison-Wesley, 1991.<P>
UNIX System V AT&amp;T C++ Language System Release 2.0 <I>Library Manual</I>, 1989.<P>
Zortech C++ Compiler 3.0 <I>Function Reference Manual</I>, 1991.<P>

<h4><a name="02cf_000d">Example 1:<a name="02cf_000d"></h4><P>
<pre>(a)
// quote argument string and then
// output it.
ostream&amp; qStr(char* s)
{ return cout&lt;&lt;&quot;'&quot;&lt;&lt;s&lt;&lt;&quot;'&quot;; }
cout &lt;&lt; &quot;Output is a &quot; &lt;&lt;
  qStr(&quot;string&quot;) &lt;&lt; &quot;.&quot;;
(b)
Output is a 'string'.
(c)
'string'Output is a 0x48f2.</pre><P>
<h4><a name="02cf_000e">Example 2:<a name="02cf_000e"></h4><P>
<pre>(a)
typedef ostream OS; // an abbrev
// quote argument string and then
// output it.
OS&amp; aMF(OS&amp; os,char* s)
{ return os &lt;&lt; &quot;'&quot; &lt;&lt; s &lt;&lt; &quot;'&quot;; }
aMF(cout, &quot;string&quot;);
(b)
outputs on
cout the value:
'string'</pre><P>
<h4><a name="02cf_000f">Example 3:<a name="02cf_000f"></h4><P>
<pre>typedef long (*FP)(int, int);
// af is applicator function
long af(FP f, int i, int j)
  { return (*f)(i,j); }
long sum(int i, int j)
  { return i+j; }
long dif(int i, int j)
  { return i-j; }
af(sum,2,3); // returns (long)5
af(dif,9,5); // returns (long)4</pre><P>
<h4><a name="02cf_0010">Example 4:<a name="02cf_0010"></h4><P>
<pre>typedef ostream OS; // an abbrev
template&lt;class T&gt;
class OMC // output manip class
{
  typedef OS&amp; (*MF)(OS&amp;, T);
  MF mf;  // manip function
  T  a;     // arg of type T
public:
  OMC(MF mmf,T aa)
     : mf(mmf), a(aa) { }
  friend OS&amp; operator &lt;&lt;
     (OS&amp; os, const OMC&lt;T&gt;&amp; mc)
  { return (*mc.mf)(os,mc.a); }
};</pre><P>
<h4><a name="02cf_0011">Example 5:<a name="02cf_0011"></h4><P>
<pre>(a)
// define manipulator interface
// for manipulator function aMF.
OMC&lt;char*&gt; aMI(char* s)
{ return OMC&lt;char*&gt;(aMF,s); }
cout &lt;&lt; &quot;Value &quot;&lt;&lt; aMI(&quot;string&quot;);
(b)
Value 'string'</pre><P>
<h4><a name="02cf_0012">Example 6:<a name="02cf_0012"></h4><P>
<pre>#include &lt;iostream.h&gt;
typedef ostream OS; // an abbrev
// qSTR - manip function
OS&amp; qSTR(OS&amp; os,char* s)
{ return os &lt;&lt; &quot;'&quot; &lt;&lt; s &lt;&lt; &quot;'&quot;; }
// OMC - Output Manipulator Class
template&lt;class T&gt; class OMC {
  typedef OS&amp; (*MF)(OS&amp;, T);
  MF mf;  // manipulator fcn
  T  a;     // arg of type T
public:
  OMC(MF mmf,T aa)
     : mf(mmf), a(aa) { }
  friend OS&amp; operator &lt;&lt;
     (OS&amp; os, const OMC&lt;T&gt;&amp; mc)
  { return (*mc.mf)(os,omc.a); }
};
// qStr - manip interface
// for manip function qSTR
OMC&lt;char*&gt; qStr(char* s)
{ return OMC&lt;char*&gt;(qSTR,s); }
// sample output expression
cout &lt;&lt; &quot;Output is a &quot; &lt;&lt;
    qStr(&quot;string&quot;) &lt;&lt; &quot;\n&quot;;</pre><P>
<h4><a name="02cf_0013">Example 7:<a name="02cf_0013"></h4><P>
<pre>#include &lt;iostream.h&gt;
#include &lt;iomanip.h&gt;
typedef ostream OS; // an abbrev
typedef char* CP;   // single token
// qSTR - manip function
OS&amp; qSTR(OS&amp; os,CP s)
{ return os &lt;&lt; &quot;'&quot; &lt;&lt; s &lt;&lt; &quot;'&quot;; }
// qStr - manip interface
// for manip function qSTR
OMANIP&lt;CP&gt; qStr(CP s)
{ return OMANIP&lt;CP&gt;(qSTR,s); }
// sample output expression
cout &lt;&lt; &quot;Output is a &quot;
     &lt;&lt; qStr(&quot;string&quot;) &lt;&lt; &quot;\n&quot;;</pre><P>
<h4><a name="02cf_0014">Example 8:<a name="02cf_0014"></h4><P>
<pre>#include &lt;iostream.h&gt;
#include &lt;iomanip.h&gt;
typedef ostream OS; // an abbrev
typedef char* CP; // single token
IOMANIPdeclare(CP);
// qSTR - manip function
OS&amp; qSTR(OS&amp; os,CP s)
{ return os &lt;&lt; &quot;'&quot; &lt;&lt; s &lt;&lt; &quot;'&quot;; }
// qStr - manip interface
// for manipulator fcn qSTR
OMANIP(CP) qStr(CP s)
{ return OMANIP(CP)(qSTR,s); }
// sample output expression
cout &lt;&lt; &quot;Output is a &quot;
     &lt;&lt; qStr(&quot;string&quot;) &lt;&lt; &quot;\n&quot;;</pre><P>
<h4><a name="02cf_0015">Example 9:<a name="02cf_0015"></h4><P>
<pre>typedef ostream OS; // an abbrev
template&lt;class T&gt; class OAC {
  typedef OS&amp; (*MF)(OS&amp;, T);
  MF mf;
public:
  OAC(MF mmf) : mf(mmf) { }
  OMC&lt;T&gt; operator()(T a)
     { return OMC&lt;T&gt;(mf,a); }
};</pre><P>
<h4><a name="02cf_0016">Example 10:<a name="02cf_0016"></h4><P>
<pre>#include &lt;iostream.h&gt;
#include &lt;iomanip.h&gt;
typedef ostream OS; // an abbrev
typedef char* CP;   // single token
// qSTR - manip function
OS&amp; qSTR(OS&amp; os,CP s)
{ return os &lt;&lt; &quot;'&quot; &lt;&lt; s &lt;&lt; &quot;'&quot;; }
OAPP&lt;CP&gt; qStr = qSTR;
// sample output expression
cout &lt;&lt; &quot;Output is a &quot;
     &lt;&lt; qStr(&quot;string&quot;) &lt;&lt; &quot;\n&quot;;

</pre><P>



<HR><P>Copyright &copy; 1993, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
