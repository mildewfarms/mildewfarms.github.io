<HTML>
<META NAME="year" CONTENT="1993">
<HEAD>
<TITLE>MAR93: FILE CONVERSION USING C++ TEMPLATES</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>FILE CONVERSION USING C++ TEMPLATES<a name="00b1_0003"></h1><P>
<h2><a name="00b1_0001"><a name="00b1_0000">What goes in isn't what comes out</h2><P>
<h3>Timothy Butterfield</h3><P>
<p><i><a name="00b1_0002"><a name="00b1_0000">Tim is a developer with RDI Software Technologies' object technology group.  He can be reached at 6300 N. River Rd., Suite 200, Rosemont, IL 60018, by phone at 708-518-0181, x618, or on CompuServe at 70304,277.</i></p><hr><P>
Converting files from one format to another can be as simple as importing one line of text into a database record or as complex as importing data from a variety of accounting systems into a single tax-worksheet program.  Likewise, graphical data often must be converted before it can be printed to different printers or plotters (each of which requires different command sets) or displayed in various formats on a screen.<P>
In a recent project I worked on, multi-megabyte billing-report text files on mainframes needed to be converted to several DBF files.  Each page of the report had to be checked for various criteria in differing locations, split into different sections, and put into a memo field in its entirety for later viewing.<P>
Our approach to the problem was to build a parser-based conversion engine using C++ templates that, as it turns out, works well for both converting files between different formats and printing or displaying graphical data.  By using templates to design the conversion engine, we were able to design a &quot;black-box&quot; conversion class.  This class allows us to use the various required data types and processes without rewriting the basics of the conversion engine for each new combination.<P>
An additional advantage of templates is the division of each major part into separate, manageable components.  Instead of developing the entire conversion process as one block, each section was individually designed, tested, and maintained.<P>
<h3><a name="00b1_0004">Converter-engine Requirements<a name="00b1_0004"></h3><P>
In its most basic form, a converter must be able to input data and output data and have input, conversion, and output mechanisms.  For example, importing a text file to a DBF format requires the following: data from the text file; the data record to write to the DBF file; a function to read in the text-file data; a function to convert the text to the record format; and finally, a function to write the output record to the DBF file.<P>
To be classified as an &quot;engine,&quot; the individual sections of the converter must be replaceable.  The input data type could be anything from an individual character or integer to a structure or a class instance.  Likewise, the output data type can range from an individual character through a class instance.  The input class retrieves the input data and supplies it to the conversion engine.  The convert class processes the input data, converting it into the output data format.  The output class receives the output data and puts it where it needs to go, whether to screen, disk, and so on.<P>
<h3><a name="00b1_0005">Conversion Classes<a name="00b1_0005"></h3><P>
The Converter class is defined with each of the five conversion requirements being part of the template, as shown in <a href="#00b1_0006">Figure 1(a)</A>, which is excerpted from the CONVERTR.HPP header file (<a href="#00b1_000a">Listing One</A>, page 98).  A pointer is stored to an instance of each of the five sections with a method provided to allow on-the-fly changing of each.  The current stage and status are stored with a method for access to them.<P>
<h4><a name="00b1_0006">Figure 1: (a) The Conversion template class declaration; (b) required conversion-engine support-class method prototypes.</h4><P>
<pre>
  (a)

  template
  &lt; class CONVERT, class INPUT, class INTYPE, class OUTPUT, class OUTTYPE &gt;
  class Converter { ... };

  (b)

  INPUT-&gt;getData ( INTYPE &amp;id );
  CONVERT-&gt;process ( INTYPE &amp;id, OUTTYPE &amp;od );
  OUTPUT-&gt;putData ( OUTTYPE &amp;od );</pre><P>
<P>
The idea of an engine implies a consistent interface.  Therefore, each of the three required classes has required methods; their prototypes are shown in <a href="#00b1_0006">Figure 1(b)</A>.  By using the standard means of access, the engine and each class can remain consistent for each new usage.  Each of the required methods receives the data by reference and returns a status of OK, Done, or Error.  This can easily be extended to handle more explicit messages, but for ease of explanation, I use just these three.<P>
Since each class is a stand-alone definition, they may contain more than the minimum required methods.  Each can have its own instance data and additional methods.  Each class, or certain methods, can be made a friend to the other classes and allow communication beyond that used in the conversion-engine class.  For instance, the convert class may need to call a rewind function in the input class if it needs to return to previous data.<P>
<h3><a name="00b1_0007">A Sample Program<a name="00b1_0007"></h3><P>
CVTEST.CPP (<a href="#00b1_000c">Listing Two</A>, page 98) demonstrates the use of the Converter class engine by converting a range of numbers (int) into a char * format and outputting them onto the console using cout; see <a href="199300b3.htm">Figure 2</A>. This gives an example of using the template class, though on a much smaller scale than an actual file conversion.<P>
To demonstrate the flexibility of the engine, I used a simple integer for the input data type, while a class is used for the output data type.  The Output-Data class is a simple means of demonstrating the use of a class for a data type.  It uses the itoa() function to convert the input data integer into an array of char.  A setNumber() method is provided for this as well as a getNumber() method for returning the address of the character array.  To take advantage of the type checking provided in C++, typedefs are used for the input and output data types.<P>
The input class constructor accepts a range of numbers to increment through.  In this example, error checking is not provided, though it would probably be used in most cases.  The beginning, ending, and current count are stored as member variables and are initialized in the constructor.  The required getData() method checks the current count against the ending value and returns CONVERTR_DONE if it is greater.  Otherwise, it copies the current count into the input data instance (passed by reference), increments, and returns CONVERTR_OK.<P>
The convert class consists entirely of the required process() method.  This method calls the setNumber() method of the OutputData class, passing it the input data, and then returning CONVERTR_OK.<P>
Similarly, the output class consists entirely of the required putData() method.  This method uses cout and the OutputData class getNumber() method to display the output data on the console.  It then returns CONVERTR_OK to the conversion-engine class.<P>
<h3><a name="00b1_0008">Summary<a name="00b1_0008"></h3><P>
Though the example used is simple, it demonstrates the usage of the conversion-engine template class.  By replacing the five requirements--input data type, output data type, input, convert, and output--a file converter or graphical output mechanism can be developed with relative ease.  The full project mentioned earlier was designed with a paging class for the input data type and a record-instruction class for the output data type.  This allowed for an entire page of the billing report to be processed as a unit and for the development of a set of instructions for writing the particular page to the DBFS.<P>
While there are alternatives to templates, such as using a standard set of base classes for the conversion engine with derived classes for each section, the approach described here provides both the flexibility of a variety of formats and a mechanism for the data and its processing.<P>
<h3><a name="00b1_0009">Acknowledgments<a name="00b1_0009"></h3><P>
Special thanks to Eric Nagler (TeamB) for his compilations with the Metaware High C/C++ compiler and to Pete Becker (Borland) for his explanations of Borland's implementation of the AT&amp;T CFRONT 3.0 C++ standard.<P>

<PRE>


_FILE CONVERSION USING C++ TEMPLATES_
by Tim Butterfield

<a name="00b1_000a">
<a name="00b1_000b"></pre><B>[LISTING ONE]</B><pre><a name="00b1_000b">

// --------- CONVERTR.HPP --- Converter class ---------

#ifndef _CONVERTR_HPP_
#define _CONVERTR_HPP_

#define CONVERTR_OK     0
#define CONVERTR_DONE   1
#define CONVERTR_ERROR  -1

#define STAGE_INPUT     0
#define STAGE_CONVERT   1
#define STAGE_OUTPUT    2
#define STAGE_DONE      3

template
&lt; class CONVERT, class INPUT, class INTYPE, class OUTPUT, class OUTTYPE &gt;
class Converter
{
   public:
      // constructor
      Converter
         ( CONVERT &amp;c, INPUT &amp;i, INTYPE &amp;id, OUTPUT &amp;o, OUTTYPE &amp;od );

      inline void setInput   ( INPUT   &amp;i  );   // set a new INPUT object
      inline void setConvert ( CONVERT &amp;c  );   // set a new CONVERT object
      inline void setOutput  ( OUTPUT  &amp;o  );   // set a new OUTPUT object
      inline void setInData  ( INTYPE  &amp;id );   // set a new INTYPE object
      inline void setOutData ( OUTTYPE &amp;od );   // set a new OUTTYPE object

      int   getStatus()  { return status; }  // return the converter status
      int   getStage()  { return stage; }    // return the current stage

      void run();   // run the converter

   private:
      INPUT   *input;     // input class
      CONVERT *convert;   // conversion class
      OUTPUT  *output;    // output class
      INTYPE  *indata;    // passed by reference to input::getData()
                          // and convert::process()
      OUTTYPE *outdata;   // passed by reference to convert::process()
                          // and output::putData()
      int status;         // current status - ok == 0, done &gt; 0, error &lt; 0
      int stage;          // current process
};

// ------- converter class methods -------
template
&lt; class CONVERT, class INPUT, class INTYPE, class OUTPUT, class OUTTYPE &gt;
Converter &lt; CONVERT, INPUT, INTYPE, OUTPUT, OUTTYPE &gt;::
   Converter ( CONVERT &amp;c, INPUT &amp;i, INTYPE &amp;id, OUTPUT &amp;o, OUTTYPE &amp;od )
{
   setInput( i );       // set input class
   setConvert( c );     // set conversion class
   setOutput( o );      // set output class
   setInData( id );     // set input data item
   setOutData( od );    // set output data item
}
template
&lt; class CONVERT, class INPUT, class INTYPE, class OUTPUT, class OUTTYPE &gt;
void Converter &lt; CONVERT, INPUT, INTYPE, OUTPUT, OUTTYPE &gt;::
   setInput ( INPUT &amp;i )
{
   input = &amp;i;   // save pointer to input class
}
template
&lt; class CONVERT, class INPUT, class INTYPE, class OUTPUT, class OUTTYPE &gt;
void Converter &lt; CONVERT, INPUT, INTYPE, OUTPUT, OUTTYPE &gt;::
   setConvert ( CONVERT &amp;c )
{
   convert = &amp;c;   // save pointer to conversion class
}
template
&lt; class CONVERT, class INPUT, class INTYPE, class OUTPUT, class OUTTYPE &gt;
void Converter &lt; CONVERT, INPUT, INTYPE, OUTPUT, OUTTYPE &gt;::
   setOutput ( OUTPUT &amp;o )
{
   output = &amp;o;   // save pointer to output class
}
template
&lt; class CONVERT, class INPUT, class INTYPE, class OUTPUT, class OUTTYPE &gt;
void Converter &lt; CONVERT, INPUT, INTYPE, OUTPUT, OUTTYPE &gt;::
   setInData ( INTYPE &amp;id )
{
   indata = &amp;id;   // save pointer to input data
}
template
&lt; class CONVERT, class INPUT, class INTYPE, class OUTPUT, class OUTTYPE &gt;
void Converter &lt; CONVERT, INPUT, INTYPE, OUTPUT, OUTTYPE &gt;::
   setOutData( OUTTYPE &amp;od )
{
   outdata = &amp;od;   // save pointer to output data
}
template
&lt; class CONVERT, class INPUT, class INTYPE, class OUTPUT, class OUTTYPE &gt;
void Converter &lt; CONVERT, INPUT, INTYPE, OUTPUT, OUTTYPE &gt;::
   run()
{
   status = CONVERTR_OK;
   do
   {
      // go through each stage of the convertion
      for ( stage = STAGE_INPUT;
            status == CONVERTR_OK &amp;&amp; stage &lt; STAGE_DONE;
            stage++ )
      {
         switch ( stage )               // which stage is the converter in
         {
            case STAGE_INPUT:           // get data
               status = input-&gt;getData( *indata );
               break;
            case STAGE_CONVERT:         // process data
               status = convert-&gt;process( *indata, *outdata );
               break;
            case STAGE_OUTPUT:         // put data
               status = output-&gt;putData( *outdata );
               break;
            default:                     // shouldn't get here
               break;
         }
      }
   } while ( status == CONVERTR_OK );   // not done, no errors
}
#endif   // #ifndef _CONVERTR_HPP_

// ------- EOF:  CONVERTR.HPP -------





<a name="00b1_000c">
<a name="00b1_000d"></pre><B>[LISTING TWO]</B><pre><a name="00b1_000d">

// ------- CVTEST.CPP --- Converter class test program -------

#include &lt;stdlib.h&gt;        // itoa() in OutputData class
#include &lt;iostream.h&gt;      // cout
#include &lt;iomanip.h&gt;       // endl
#include &quot;convertr.hpp&quot;    // Converter class

// ------- converter data types -------
// simple class for storing the output data
class OutputData
{
   public:
      // constructor
      OutputData ( )  { number[0] = '\0'; }   // clear number
      // retrieve the number
      char *getNumber ( )  { return number; }
      // set a new number
      void setNumber ( int n ) {   itoa( n, number, 10 ); }

   private:
      char number[6];   // make room for number
};

// use of typedefs allows better type checking
typedef int              inType;    // input data block type
typedef class OutputData outType;   // output data block type

// ------- converter Input class -------

// class declaration
class Input
{
   public:
      Input ( int b, int e );       // constructor
      int getData ( inType &amp;id );   // called by converter::run()
   private:
      int begin;   // beginning count
      int end;     // ending count
      int cur;     // current count
};
// constructor
Input::Input ( int b, int e )
{
   begin = b;      // set beginning count
   end   = e;      // set ending count
   cur   = begin;  // set current count
}
// get data for the converter
int Input::getData ( inType &amp;id )
{
   if ( cur &gt; end )               // past the end yet ?
   {
      return ( CONVERTR_DONE );   // yes, return &quot;done&quot;
   }
   id = cur++;      // put data in &quot;input block&quot;, increment count
   return ( CONVERTR_OK );         // return &quot;ok&quot;
}

// ------- converter conversion class -------

// class declaration
class Convert
{
   public:
      int process ( inType &amp;id, outType &amp;od ); // called by converter::run()
};
// process the data for the converter engine
int Convert::process ( inType &amp;id, outType &amp;od )
{
   od.setNumber( id );     // convert to output data type

   return ( CONVERTR_OK );   // return &quot;ok&quot;
}

// ------ converter Output class -------

// class declaration
class Output
{
   public:
      int putData ( outType &amp;od );   // called by converter::run()
};
// put data from the converter
int Output::putData ( outType &amp;od )
{
   // display the output &quot;block&quot;
   cout &lt;&lt; &quot;[&quot; &lt;&lt; od.getNumber() &lt;&lt; &quot;]&quot; &lt;&lt; endl;

   return ( CONVERTR_OK );   // return &quot;ok&quot;
}

// ------- main -------
void main ( )
{
   // class instances required by the converted
   Input   i(1,10);   // initialize input class instance
   Convert c;         // initialize convert class instance
   Output  o;         // initialize output class instance
   // data blocks required by the converter
   inType  id;        // initialize input data block
   outType od;        // initialize output data block class instance
   // create an instance of the converter using the defined types
   Converter&lt; Convert, Input, inType, Output, outType &gt;
      cv( c, i, id, o, od );
   // run the converter
   cv.run();
}

// ------- EOF: CVTEST.CPP -------





Figure 1:  (a) The Conversion template class declaration; (b) required conversion engine support class method prototypes.<P>


(a)

template
&lt; class CONVERT, class INPUT, class INTYPE, class OUTPUT, class OUTTYPE &gt;
class Converter { ... };

(b)

INPUT-&gt;getData ( INTYPE &amp;id );
CONVERT-&gt;process ( INTYPE &amp;id, OUTTYPE &amp;od );
OUTPUT-&gt;putData ( OUTTYPE &amp;od );







<P>
<P>
</pre><HR><P>Copyright &copy; 1993, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
