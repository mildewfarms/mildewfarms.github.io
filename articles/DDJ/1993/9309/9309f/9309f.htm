<HTML>
<META NAME="year" CONTENT="1993">
<HEAD>
<TITLE>SEP93: Accessing NetWare SQL Files Without NetWare SQL</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Accessing NetWare SQL Files Without NetWare SQL<a name="028b_0003"></h1><P>
<h2><a name="028b_0001"><a name="028b_0000">Duplicating NetWare SQL functionality with less overhead</h2><P>
<h3>Douglas Reilly</h3><P>
<p><i><a name="028b_0002"><a name="028b_0000">Doug owns Access Microsystems, a software development house specializing in C/C++ software development. He is also the author of BTFILER and BTVIEWER Btrieve file utilities. Doug can be contacted at 404 Midstreams Road, Brick, NJ 08724, or on CompuServe at 74040,607.</i></p><hr><P>
Multiple ways of storing information have led us to a virtual DataTower of Babel. Even something as &quot;simple&quot; as a string, for example, can be represented by familiar programming languages in at least three ways: &quot;normal&quot; strings, where a 20-character string is made up of just 20 characters (what you see is what you get); Pascal-style <I>Lstrings</I>, where a 20-character string takes 21 characters, with the first byte being a length byte (thus limiting a normal Pascal string to 255 bytes); and C-style <I>Zstrings</I>, where a 20-character string also takes up 21 characters, with the extra character used for a Null terminator signaling the end of the string.<P>
One solution to the problem of getting to your data is the use of a higher-level interface that understands a variety of formats. Novell's NetWare SQL (and XQL, its DOS cousin, also from Novell) provide just such a solution.<P>
NetWare SQL provides a convenient way to access information within a database without regard to the physical characteristics of the data files. NetWare SQL data files can contain data with field types ranging from Intel-format integers to Decimal fields (also known as BCD, binary coded decimal). <a href="#028b_000b">Table 1</A> lists the NetWare SQL-supported data types. However, while NetWare SQL provides this ability, the memory required to use it (possibly more than 200K) can prohibit its use.<P>
Thankfully, there's another way. Since Btrieve is the file manager engine NetWare SQL uses, and since NetWare SQL files are simply Btrieve files that have available additional descriptions of fields, you can duplicate the functionality of NetWare SQL you want (that is, have access to the data without regard to the physical layout of the file) with considerably less overhead. In effect, this gives you access to NetWare SQL files without requiring your users to have NetWare SQL.<P>
<h3><a name="028b_0004">What is a NetWare SQL Database?<a name="028b_0004"></h3><P>
Btrieve files, unlike many other types of database files, don't contain field information within the files. Btrieve files do contain information on record length, key types and positions, and details about keys, such as whether the key is modifiable and whether duplicate values are allowed. Keys can be any of the types listed in <a href="#028b_000b">Table 1</A>.<P>
To provide access to the Btrieve files that make up its database, NetWare SQL uses external files to describe how data is stored within the files. Unsurprisingly, these data dictionary files are Btrieve files and have .DDF extensions; see <a href="#028b_000c">Table 2</A>.<P>
FILE.DDF, <a href="#028b_000c">Table 2(a)</A>, contains information on each file in the database, as well as each of the .DDF files. The File ID is an integer assigned by SQL to uniquely identify the file, and link it to fields and indices stored in the other data dictionary files. The File Name is used within SQL queries to access the file. It's the &quot;human readable&quot; name of the file, like &quot;PO Header&quot; or &quot;Item Master.&quot; The File Location is used to store the file name the operating system should use. Often, this field contains only the file name and extension. The final file name is then the result of the search of a path-like environment variable. The only current documented use of the File Flags field is to use bit 4 signal if a file is a dictionary file (one of the .DDF files) or a user-defined file.<P>
FIELD.DDF, <a href="#028b_000c">Table 2(b)</A>, contains information on each field in each file in the database, as well as each field in the .DDF files. The Field ID, assigned by SQL, identifies the field and links this file back to the FILE.DDF file. The Field Name is used to identify the field within queries. The Data Type describes the format of the data in this field. The Offset, Field Size, and Decimals fields locate and help format the data in the field. The Flags field uses bit 0 as a case flag for strings.<P>
INDEX.DDF, <a href="#028b_000c">Table 2(c)</A> contains information on each index of each file in the database. The File ID and Field ID fields correspond to the fields in FILE.DDF and FIELD.DDF. The Index Number field identifies the index number. The Key Segment field is a further qualifier. NetWare SQL supports multisegment indices and this segment number is used to give the order of segments in a multisegment key. Prior to NetWare SQL 3.0, the limit on index segments was 24. NetWare SQL 3.0 allows up to 119 key segments. The Key Flags field is a bit-mapped integer used to describe the index more fully.<P>
While there are other DDF files (VIEW.DDF, ATTRIB.DDF, and so on), I haven't covered them here since most applications expect these three.<P>
<h3><a name="028b_0005">Accessing NetWare SQL Files with Class<a name="028b_0005"></h3><P>
A convenient way to access NetWare SQL files is with a C++ class. With some minor changes (a different data dictionary reading routine, a different raw file handling class, and the like) the techniques presented here are applicable to any file format that handles a variety of data types.<P>
Listings One and Two show the class definition for the <I>ddfFIle</I> class and supporting classes. <a href="#028b_000e">Listing One</A> (page 92) is the .H file, while <a href="#028b_0010">Listing Two</A> (page 92) .CPP source. Class <I>Value</I> is used to contain the values of each field. <I>Value</I> has private data members <I>strValue</I>, a character pointer, <I>dValue</I> and <I>iValue</I> (double and long types, respectively). Note that even if a value can be represented by a C/C++ data type of smaller size (a <I>float</I> or an <I>int</I>), <I>Value</I> always stores values using the largest comparable C/C++ type. The <I>len</I> and <I>dec</I> private data elements keep track of length and number of decimals used for string formatting.<P>
Constructors initialize the value with a character pointer, double and long, as well as a constructor that requires no initial value. <I>Operator=</I> and casting operators are overloaded to provide a convenient syntax to set and get values.<P>
Next some structures that generally mirror the layout of the DDF files are described. One difference is the inclusion of a <I>Value</I> member in the FIELDDDF structure. An additional structure (BOOKMARK) allows you to set and return to a &quot;bookmark&quot; in the file. Btrieve allows you to record the physical position in a file (using a four-byte value), as well as keep track of the key number. With this, you can look at a record, set a &quot;bookmark,&quot; look around at other records in the file, and then return to the records you first examined.<P>
<I>ddfFile</I> has private data elements to keep track of the physical file name and the file name used by NetWare SQL to refer to the file. A pointer to a <I>bfile</I> class is what is used to do the actual manipulations of the raw Btrieve file (also see my article &quot;Wrap It Up&quot; in <I>Windows Tech Journal</I>, May 1992). An array of 256 pointers to the FIELDDDF structure allows you to get at all fields in a NetWare SQL file (field limit is 255) as well as an additional field used to point to somewhere harmless if an invalid field name is passed.<P>
The constructor takes a single mandatory argument, the logical file name, and a single optional argument, an owner name (used if security is enabled on the underlying Btrieve file). The constructor gets the actual DOS file name from the passed logical file name by reading through FILE.DDF, creates the <I>bfile</I> object (which handles opening the file and allocating buffers, and so on), and loads the field names and descriptions into the <I>fields[]</I> array of FIELDDDF structures.<P>
The destructor performs memory clean up, and as the <I>bfile</I> object goes out of scope, its destructor is called. It cleans up memory used for buffers and closes the actual Btrieve file.<P>
Several member functions (<I>set_key_num()</I>, <I>get_status()</I>, and to a lesser extent, <I>get_rec()</I>, <I>put_rec()</I>, <I>insert()</I> and <I>del_rec()</I>) act as simple wrappers around the <I>bfile</I> class. For getting and saving records, one additional step must be taken. <I>ddfFile</I> supplies two member functions to convert from the raw data into fields and back: <I>dataToFields()</I> and <I>fieldsToData(),</I> respectively.<P>
To provide access to fields in the file, two <I>getValue()</I> member functions are provided. One accepts as an argument a field number (to be used if you know the relative field number in the file) and the other accepts the field name as an argument. Using the field name to access the value removes dependence on the physical details of the file's structure. Each function within <I>ddfFile</I> that gets information from the file uses the <I>dataToFields()</I> member function and each function that saves information to the file uses <I>fieldsToData()</I>.<P>
These functions use information from the FIELD.DDF file and pass that information along to a <I>btrvConvert()</I> function to transform the raw data to displayable values and back again.<P>
<I>ddfFile</I> uses several conversion routines, only one of which (NUMERIC.CPP) is presented here (due to space constraints). Other conversion routines (BTRVCNVT.CPP, BCD.CPP, DBLE_DB.C, and so on) are provided electronically; see &quot;Availability,&quot; page 3. Note that each field type allowed by NetWare SQL has a <I>#define</I>d name. Within <I>btrvConvert()</I>, this field type is used to signal the type of conversion required. The field type plus 100 decimal, signals a conversion back from a displayable value to the format that exists in the file.<P>
<h3><a name="028b_0006">String Conversions: The Easy Stuff First<a name="028b_0006"></h3><P>
When it comes to data conversions, strings are relatively easy. The only tricky part is ensuring that our C/C++ centric mindset doesn't get you into trouble. If a straight String type is defined, be sure that when you do conversions to that type you don't use a null terminator. When the destination of the string is a field in a data file, this null will become the first character in the next field. For this reason, the string is first formatted into a C-style string in a temporary buffer that actually takes up <I>dlen</I> bytes plus 1 for the null terminator, then <I>memcpy()</I> is used rather than <I>strcpy()</I> to copy only the bytes before the null terminator. For Pascal-style LSTRINGS, read the length byte at the head of the string, rather than what NetWare SQL tells you the destination length is--unless the length byte tells you that the string is longer than the NetWare SQL field length. C-style ZSTRINGS are, of course, not a problem for C++ class.<P>
<h3><a name="028b_0007">ASCII Representations of Numbers<a name="028b_0007"></h3><P>
Two of the number types allowed by NetWare SQL use standard ASCII to represent numbers. The most common of the two types is the Numeric type in which numbers are represented by their ASCII code, and the decimal is implied. Thus, a seven-character numeric field containing the value <I>123.45</I> would appear in the actual data as <I>0012345</I>. One twist to this encoding is handling negative values. The solution is to embed the sign into the last digit. <a href="#028b_000d">Table 3</A> lists the digits and the associated character to use in the last digit if the value is negative. The values supplied for positive values are hardly ever used, but the conversion routine presented does support them. See NUMERIC.CPP, <a href="#028b_0012">Listing Three</A>, page 94.<P>
Another approach to handling negative values is the NUMERICST type, added with NetWare SQL 3.0. This field is made up of the absolute value in the first n-1 characters and the sign (+ or -) as the last character. Clarity for browsing through the raw data is gained, at the loss of a single character per number represented. <I>123.45</I> would be represented in a seven-character field as <I>012345+</I>.<P>
<h3><a name="028b_0008">Binary Representations of Numbers<a name="028b_0008"></h3><P>
NetWare SQL supports seven binary representations of numbers. Combining essentially identical types, you're still left with four distinct types of representations. Two of the types are various sizes of native C/C++ types. INT values can be either <I>char</I> (one byte wide), <I>int</I> (two bytes wide), or <I>long</I> (four bytes wide). Add the unsigned modifier to the types discussed and the UNSIGNED BINARY type is handled. An additional binary integer type is AUTOINC, which allows you to insert a record with the AUTOINC field set to binary 0. After the insert the field will contain a value one higher than the previous highest value for the field.<P>
The NetWare DECIMAL and MONEY types are very similar. MONEY fields are DECIMAL fields with the number of decimals fixed at two. In addition, MONEY-type fields traditionally are displayed beginning with a dollar sign. DECIMAL numbers are equivalent to standard ANSI-74 Cobol's COMP-3 type. Numbers are represented by a nibble (half a byte, or four bits). The trailing nibble contains the sign, with either an F or C for positive numbers, or a D for negative numbers. For instance, the number <I>123.45</I> set up to display seven digits would be encoded as the hex digits 0012345F, taking up four bytes. <I>bcdtof()</I> (available electronically) provides for details on the conversion.<P>
Both types of floating-point data contain a sign bit and some number of bits for the exponent and the mantissa. The secret, of course, is deciding where each type of information is stored. The FLOAT type can be a C/C++ <I>float</I> type (four bytes wide) or double (eight bytes). These values can simply be reformatted using standard C conversion routines (<I>atof()</I>, <I>sprintf()</I>, and the like).<P>
BFLOAT values are Basic floating-point values. Before IEEE floating point took over the world, Microsoft came up with its own way of storing floating-point numbers. BFLOAT fields can be either four or eight bytes wide. REALCNVT.H, DBLE_BD.C, and DBLE_BS.C (available electronically) provide details on the conversion. Keep in mind, however, that some precision could be lost in the conversion between eight-byte wide FLOAT and BFLOATs, since the number of digits used for the mantissa and exponent vary. Another complication for the conversion of any type of floating-point value is that the number of decimals to display is not stored in the decimals field of the FIELD.DDF file. Formatting information on floating-point values traditionally is derived from the ATTRIB.DDF file, a file not discussed in detail here.<P>
<h3><a name="028b_0009">Times and Dates<a name="028b_0009"></h3><P>
NetWare SQL, seemingly like every other file-handling system ever invented, has its own internal representation for dates and times. TIME fields are stored with one byte each for 100ths of a second, seconds, minutes, and hours. DATE fields are represented by a two-byte integer year and single-byte integer month and day. Dates are formatted as MM/DD/YY, or if the destination length is sufficient, MM/DD/YYYY. (Remember, the year 2000, or the year 00 with only two digits, is right around the corner!)<P>
<h3><a name="028b_000a">Putting It All Together<a name="028b_000a"></h3><P>
<a href="#028b_0014">Listing Four</A> (page 96) presents an example <I>main()</I> that accesses two files identical in content but different in format. (The data files and the DDF files are also available electronically). The function <I>showData()</I> is called twice, first to show data in TEST 1, then showing data in TEST 2. See <a href="1993028d.htm">Figure 1</A>. The output from this sample program (see <a href="1993028e.htm">Figure 2</A>) is identical for both files, even though the files are different in structure, and in length.<P>
Note that the example does expect you to have some &quot;magic&quot; knowledge of the key structure of the file. It wouldn't be a big step from here to have the <I>ddfFile</I> class read INDEX.DDF to get information on the key fields and allow the user of the class to set the index simply by passing by name the field or fields in the index.<P>
By isolating the details of the data from the substance of the data, applications can continue to work even if additional fields are added or existing fields are moved around. Using <I>ddfFile</I>, you can get one step closer to the ideal of a program acting as the &quot;engine&quot; fueled by, but independent from, the data.<P>
<h4> <a href="1993028f.htm">Figure 1</A>: Sample File Layouts</h4><P>
<h4> <a href="19930290.htm">Figure 2</A>: Sample Output</h4><P>
<h4><a name="028b_000b">Table 1:<a name="028b_000b"></h4><P>
<pre>NetWare SQL field types. * Treated like one character string in <I>ddfFile</I> class. ** Not supported by <I>ddfFile</I> class. *** New with NetWare SQL 3.0 and Btrieve 6.0, supported by <I>ddfFile</I> class.
===========================================================================
 Data Type Keyword    Code    Description
===========================================================================
 INT                   1      1, 2 or 4 byte integer
 FLOAT                 2      IEEE floating point
 DATE                  3      4 byte encoded date
 TIME                  4      4 byte encoded time
 DECIMAL               5      Like Cobol's COMP-3
 MONEY                 6      DECIMAL with 2 decimal places
 LOGICAL               7      True/False*
 NUMERIC               8      ASCII number string, implied decimals
 BFLOAT                9      BASIC floating point
 LSTRING              10      Pascal-style strings
 ZSTRING              11      C-style strings
 NOTE                 12      Variable length**
 LVAR                 13      Variable length**
 AUTOINC              15      2 or 4 byte integer, gets next value
 BIT                  16      Logical fields
 NUMERICST            17      NUMERIC with trailing sign***
===========================================================================</pre><P>
<h4><a name="028b_000c">Table 2:<a name="028b_000c"></h4><P>
<pre>DDF file layouts: (a) FILE.DDF; (b) FIELD.DDF; (c) INDEX.DDF.
===========================================================================
  Field Name         Type      Size  Description
===========================================================================
(a)
  File ID            INTEGER   2     ID generated by NetWare SQL
  File Name          STRING    20    Logical Name
  File Location      STRING    64    Physical (DOS) file name
  Flags              INTEGER   1     if bit 4=1, this is a dictionary,<P>                      file, else this is a user-defined file
(b)
  Field ID           INTEGER   2     ID generated by NetWare SQL
  File ID            INTEGER   2     Links to File ID in FILE.DDF
  Field Name         STRING    20    Logical Field Name
  Btrieve Data Type  INTEGER   1     Value from Table 1
  Offset             INTEGER   2     Offset in file
  Size               INTEGER   2     Size of data in file
  Decimals           INTEGER   1     Decimal places for DECIMAL, NUMERIC<P>                      and MONEY types
  Flags              INTEGER   2     Bit 0 is case flag for STRINGs
(c)
  File ID            INTEGER   2     Links to File ID in FILE.DDF
  Field ID           INTEGER   2     Links to Field ID in FIELD.DDF
  Key Number         INTEGER   2     Key Number, 0 through 23, or through<P>                      118 in NetWare SQL version 3.0
  Key Segment        INTEGER   2     Segment number for multi-segment keys
  Flags              INTEGER   2     Index flag attributes
===========================================================================</pre><P>
<h4><a name="028b_000d">Table 3:<a name="028b_000d"></h4><P>
<pre>Sign bytes for NUMERIC types.
==================================
  Digit  Positive  Negative
==================================
    1        A        J
    2        B        K
    3        C        L
    4        D        M
    5        E        N
    6        F        O
    7        G        P
    8        H        Q
    9        I        R
    0        {        }
==================================
</pre><P>

<PRE>


_ACCESSING NETWARE SQL FILES WITHOUT NETWARE SQL_
by Douglas Reilly


<a name="028b_000e"><a name="028b_000f"><B>[LISTING ONE]</B>

#ifndef DDFFILE_H
#define DDFFILE_H
#include &quot;bfile.h&quot;

class Value {
   char *strValue;
   double dValue;
   long iValue;
   int len;
   int dec;
public:
   Value(int l=0,int dec=0);
   Value(char *s,int l=10,int dec=0);
   Value(double t,int l=10,int dec=0);
   Value(long i,int l=10);
   ~Value()
   {
      if ( strValue!=0 )
      {
         my_free(strValue,__FILE__,__LINE__);
      }
   }
   void setVal(char *s);
   void setVal(double t);
   void setVal(long i);
   void operator=(long l)
   {
      setVal(l);
   }
   void operator=(double d)
   {
      setVal(d);
   }
   void operator=(char *s)
   {
      setVal(s);
   }
   void setLenDec(int l,int d);
   void clear();
   operator char *() { return strValue; }
   operator long() { return iValue; }
   operator double() { return dValue; }
   int getLen() { return len; }
   int getDec() { return dec; }
};
struct FILEDDF {
   int fileID;
   char fileName[20];
   char fileLoc[64];
   int flags;
};
struct FIELDDDF {
      int fieldID;
      int fileID;
      char fieldName[20];
      char btDataType;
      int offset;
      int fieldSize;
      char decimals;
      int flags;
      class Value value;
} ;
struct INDEXDDF {
   int fileID;
   int fieldID;
   int keyNumber;
   int segNumber;
   int flags;
};
// this is what is needed to keep track of Btrieve currency.
struct BOOKMARK {
   char pos[4];
   int key;
};
class ddfFile {
   char physicalName[22];
   char logicalName[70];
   bfile *theFile;
   struct FIELDDDF *fields[256];
   struct FILEDDF fileDDF;
   int numFields;
   int fieldsToData();
   int dataToFields();
public:
   ddfFile(char *lname,char *owner=0);
   ~ddfFile();
   void setValue(char *t,int fnum)  { fields[fnum]-&gt;value.setVal(t); }
   void setValue(long l,int fnum)   { fields[fnum]-&gt;value.setVal(l); }
   void setValue(double d,int fnum) { fields[fnum]-&gt;value.setVal(d); }
   void nullOut();
   int getFieldID(char *);
   char *getFieldName(int);
   char *getValue(char *);
   char *getValue(int fnum);
   void toData(int fnum,void *t);
   int get_status()
   {
      if ( theFile==0 )
      {
         return 9999;
      }
      else
      {
         return theFile-&gt;get_status();
      }
   }
   int unlock()
   {
      return theFile-&gt;unlock();
   }
   void set_key_num(int key_num)
   {
      theFile-&gt;set_key_num(key_num);
   }
  // overload operator++
   int  operator++(int )
   {
      char temp[255];
      return(get_rec(temp,B_GET_NEXT));
   }
  // overload  operator--
   int  operator--(int )
   {
      char temp[255];
      return(get_rec(temp,B_GET_PREV));
   }
  // Gets a record.  Uses key 0 unless you have set key number.
   int  get_rec(char far *keystr,int op=B_GET_EQ);
  //   SEE BELOW...
   int  put_rec(char far *keystr=0,unsigned tlen=0,int just_update=0);
  // Insert.  made seperate functions to force insert.
   int  insert(char far *keystr=0,unsigned tlen=0);
  // self explanatory...except that if keystr==0, positioning is not done
   int  del_rec(char far *keystr=0) { return(theFile-&gt;del_rec(keystr)); };
   int getBookmark(struct BOOKMARK *theMark);
   int gotoBookmark(struct BOOKMARK *theMark);
};
#endif



<a name="028b_0010"><a name="028b_0011"></pre><B>[LISTING TWO]</B><pre><a name="028b_0011">

#include &quot;stdio.h&quot;
#include &quot;stdlib.h&quot;
#include &quot;ddffile.h&quot;

int loadFields(int currentFileID,struct FIELDDDF *fields[]);
char *btrvConvert(int type,char *src,char *dst,int slen,int sdec,
                                                int dlen,int ddec);
Value::Value(int l,int d)
{
   strValue=0;
   dValue=0.0;
   iValue=0L;
   len=l;
   dec=d;
}
Value::Value(char *s,int l,int d)
{
   strValue=my_malloc(l+2,__FILE__,__LINE__);
   strcpy(strValue,s);
   dValue=(atof(s));
   iValue=(atol(s));
   len=l;
   dec=d;
}
Value::Value(double t,int l,int d)
{
   strValue=my_malloc(l+2,__FILE__,__LINE__);
   sprintf(strValue,&quot;%*.*f&quot;,l,dec,t);
   dValue=t;
   iValue=(long)t;
   len=l;
   dec=d;
}
Value::Value(long i,int l)
{
   strValue=my_malloc(l+2,__FILE__,__LINE__);
   sprintf(strValue,&quot;%*ld&quot;,l,i);
   dValue=(double)i;
   iValue=i;
   len=l;
   dec=0;
}
void Value::setLenDec(int l,int d)
{
   if ( strValue!=0 )
   {
      my_free(strValue,__FILE__,__LINE__);
      strValue=0;
   }
   strValue=my_malloc(l+2,__FILE__,__LINE__);
   len=l;
   dec=d;
}
void Value::clear()
{
   if ( strValue!=0 )
   {
      sprintf(strValue,&quot;%*s&quot;,len,&quot; &quot;);
   }
   dValue=0.0;
   iValue=0;
}
void Value::setVal(char *s)
{
   if ( strValue==0 )
   {
      strValue=my_malloc(len+2,__FILE__,__LINE__);
   }
   strcpy(strValue,s);
   dValue=(atof(s));
   iValue=(atol(s));
}
void Value::setVal(double t)
{
   if ( strValue==0 )
   {
      strValue=my_malloc(len+2,__FILE__,__LINE__);
   }
   sprintf(strValue,&quot;%*.*f&quot;,len,dec,t);
   dValue=t;
   iValue=(long)t;
}
void Value::setVal(long i)
{
   if ( strValue==0 )
   {
      strValue=my_malloc(len+2,__FILE__,__LINE__);
   }
   sprintf(strValue,&quot;%*ld&quot;,len,i);
   dValue=(double)i;
   iValue=i;
}
ddfFile::ddfFile(char *lname,char *owner)
{
   strcpy(physicalName,pNameFromLName(lname,fileDDF));
   strcpy(logicalName,lname);
   theFile=new bfile(physicalName,0,owner);
   if ( theFile !=0 &amp;&amp; theFile-&gt;get_status()==BERR_NONE )
   {
      numFields=loadFields(fileDDF.fileID,fields);
   }
}
ddfFile::~ddfFile()
{
   int loop;
   delete theFile;
   for ( loop=0 ; fields[loop]!=0 ; loop++ )
   {
      delete fields[loop];
   }
}
int ddfFile::getFieldID(char *name)
{
   int loop;
   for ( loop=0 ; fields[loop]!=0 &amp;&amp; name!=0 ; loop++ )
   {
      if ( !(memicmp(name,fields[loop]-&gt;fieldName,(strlen(name)))) )
      {
         return(loop);
      }
   }
   return(255);
}
char *ddfFile::getFieldName(int i)
{
   if ( i&lt;numFields )
   {
      return(fields[i]-&gt;fieldName);
   }
   return(fields[255]-&gt;fieldName);
}
char *ddfFile::getValue(char *fname)
{
   return((char *)fields[getFieldID(fname)]-&gt;value);
}
char *ddfFile::getValue(int fnum)
{
   return((char *)fields[fnum]-&gt;value);
}
int ddfFile::get_rec(char far *keystr,int op)
{
   theFile-&gt;get_rec(keystr,op);
   dataToFields();
   return(theFile-&gt;get_status());
}
int ddfFile::put_rec(char far *keystr,unsigned tlen,int just_update)
{
   fieldsToData();
   return(theFile-&gt;put_rec(keystr,tlen,just_update));
}
int ddfFile::insert(char far *keystr,unsigned tlen)
{
   fieldsToData();
   return(theFile-&gt;insert(keystr,tlen));
}
int ddfFile::fieldsToData()
{
   int loop;
   for ( loop=0 ; loop&lt;numFields ; loop++ )
   {
      btrvConvert(fields[loop]-&gt;btDataType+100,(char *)fields[loop]-&gt;value,
                  theFile-&gt;get_data()+fields[loop]-&gt;offset,
                  fields[loop]-&gt;value.getLen(),fields[loop]-&gt;value.getDec(),
                  fields[loop]-&gt;fieldSize,fields[loop]-&gt;decimals);
   }
   return(loop);
}
int ddfFile::dataToFields()
{
   int loop;
   char temp[255];
   for ( loop=0 ; loop&lt;numFields ; loop++ )
   {
      memset(temp,EOS,255);
      btrvConvert(fields[loop]-&gt;btDataType,
                   theFile-&gt;get_data()+fields[loop]-&gt;offset,temp,
                   fields[loop]-&gt;fieldSize,fields[loop]-&gt;decimals,
                   fields[loop]-&gt;value.getLen(),fields[loop]-&gt;value.getDec());
      fields[loop]-&gt;value.setVal(temp);
   }
   return(loop);
}
void ddfFile::nullOut()
{
   int loop;
   for ( loop=0 ; loop&lt;numFields ; loop++ )
   {
      fields[loop]-&gt;value.clear();
   }
   return;
}
void ddfFile::toData(int fnum,void *t)
{
      if ( fnum&lt;255 )
      {
         btrvConvert(fields[fnum]-&gt;btDataType+100,(char *)fields[fnum]-&gt;value,
                   (char *)t,
                   fields[fnum]-&gt;value.getLen(),fields[fnum]-&gt;value.getDec(),
                   fields[fnum]-&gt;fieldSize,fields[fnum]-&gt;decimals);
      }
}
int ddfFile::getBookmark(struct BOOKMARK *theMark)
{
   theMark-&gt;key=theFile-&gt;get_key_num();
   theFile-&gt;get_pos(theMark-&gt;pos);
   return(theFile-&gt;get_status());
}
int ddfFile::gotoBookmark(struct BOOKMARK *theMark)
{
   theFile-&gt;set_key_num(theMark-&gt;key);
   theFile-&gt;set_pos(theMark-&gt;pos);
   dataToFields();
   return(theFile-&gt;get_status());
}

<a name="028b_0012"><a name="028b_0013"></pre><B>[LISTING THREE]</B><pre><a name="028b_0013">


#include &quot;stdio.h&quot;
#include &quot;stdlib.h&quot;
#include &quot;string.h&quot;
#include &quot;ctype.h&quot;

extern &quot;C&quot; int del_trsp(char *);
char negchars[]={'J','K','L','M','N','O','P','Q','R','}',0};
char poschars[]={'A','B','C','D','E','F','G','H','I','{',0};

double numerictof(char *numstr)
{
   int lastchar;
   int isneg=0;
   double retf=0.0;

   del_trsp(numstr);
   lastchar=numstr[(strlen(numstr))-1];
   if ( !(isdigit(lastchar)) &amp;&amp; lastchar!='.' )
   {
      int loop;
      for ( loop=0 ; negchars[loop]!='\0' &amp;&amp; !(isneg) ; loop++ )
      {
         if ( negchars[loop]==lastchar )
         {
            numstr[(strlen(numstr))-1]='0'+loop;
            isneg=1;
         }
      }
      for ( loop=0 ; poschars[loop]!='\0' ; loop++ )
      {
         if ( poschars[loop]==lastchar )
         {
            numstr[(strlen(numstr))-1]='0'+loop;
            break;
         }
      }
      retf=(atof(numstr));
      if ( isneg )
      {
         retf*=-1;
      }
   }
   else
   {
      retf=(atof(numstr));
   }
   return(retf);
}
char *numerictostr(double numf,int len=9,int decimals=2)
{
   static char retstr[30];
          int  lastcharpos;
          int  lastchar;
   if ( numf&gt;=0.0 )
   {
      sprintf(retstr,&quot;%0*.*f&quot;,len,decimals,numf);
   }
   else
   {
      sprintf(retstr,&quot;%0*.*f&quot;,len,decimals,(numf*(-1)));
      lastcharpos=(strlen(retstr))-1;
      lastchar=retstr[lastcharpos];
      retstr[lastcharpos]=negchars['0'-lastchar];
   }
   return(retstr);
}



<a name="028b_0014"><a name="028b_0015"></pre><B>[LISTING FOUR]</B><pre><a name="028b_0015">

#include &quot;stdio.h&quot;
#include &quot;stdlib.h&quot;
#include &quot;string.h&quot;
#include &quot;bfile.h&quot;

extern &quot;C&quot; {
   char *my_malloc(int num,char *pfile,int line);
   int  my_free(char *,char *pfile,int line);
};
#include &quot;ddffile.h&quot;
#include &quot;realcnvt.h&quot;
void showData(ddfFile&amp; file)
{
   char temp[255];
   if ( (file.get_rec(temp,B_GET_LO))==BERR_NONE )
   {
      do {
         printf(&quot;\nName: %-12.12s, %-12.12s  ID: %10ld  Zip Code: %s&quot;,
                       file.getValue(&quot;LAST NAME&quot;), file.getValue(&quot;FIRST NAME&quot;),
                       (atol(file.getValue(&quot;ID&quot;))), file.getValue(&quot;ZIP&quot;));
      } while ( ((file)++)==BERR_NONE );
   }
}
void main()
{
   ddfFile file1(&quot;TEST 1&quot;);
   ddfFile file2(&quot;TEST 2&quot;);
   if ( file1.get_status()==BERR_NONE )
   {
      printf(&quot;\n\nFILE 1\n\n&quot;);
      showData(file1);
   }
   else
   {
      printf(&quot;\nStatus %d on FILE 1&quot;,file1.get_status());
   }
   if ( file2.get_status()==BERR_NONE )
   {
      printf(&quot;\n\nFILE 2\n\n&quot;);
      showData(file2);
   }
   else
   {
      printf(&quot;\nStatus %d on FILE 2&quot;,file2.get_status());
   }
}



</pre><HR><P>Copyright &copy; 1993, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
