<HTML>
<META NAME="year" CONTENT="1993">
<HEAD>
<TITLE>SEP93: ALGORITHM ALLEY</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>ALGORITHM ALLEY<a name="029c_0003"></h1><P>
<h2><a name="029c_0001"><a name="029c_0000">Diving into Windows Bitmaps: Part Two</h2><P>
<h3>Tom Swan</h3><P>
<a name="029c_0002"><a name="029c_0000">I'm not much of a gambler. Never mind what Jeff Duntemann had to say about my skills at the rubber-chicken toss in Las Vegas at the Circus Circus hotel one Comdex ago (<I>DDJ</I>, March 1991). True, I beat the feathers off Jeff that evening as we catapulted flacid poultry into pots rotating on a lazy Susan ringed by other chicken-hearted players. But you mustn't believe my friend Jeff when he claims high-stakes innocence. As I recall, it took three of us to drag him away complaining &quot;this time for sure!&quot; from the quarter avalanche machine--or whatever they call those jukebox-size boxes into which one flings quarters at layers of coins resting under oscillating pushers that promise to shove riches onto your lap on every turn. Jeff told me that he can tell just by looking, which machine is about to pay off. Maybe he's right, but I'll stick to chickens.<P>
Actually, during that same trip, I did win $6.50 on five aces at a nickel poker slot machine, so perhaps I do have a smoldering Midas touch. Frankly, I doubt it, but when it comes to testing algorithms, who couldn't use a high-power lucky star? Rubber chickens and two-bit avalanches might not help in software development, but sometimes, there's simply no other way to prove an algorithm's correctness except to trust in chance.<P>
<h3><a name="029c_0004">Monte Carlo Method<a name="029c_0004"></h3><P>
The term &quot;Monte Carlo Method,&quot; named after the famed Monaco casino, came into being during the mid-40's from its use in mathematical problems that were solved with random numbers. Now the term generally refers to test procedures that simulate a computer program's input data with a random-number generator. A typical Monte Carlo test repeatedly puts a program through its paces until an error is detected, or until the programmer decides enough testing is enough. In short to, &quot;Monte Carlo&quot; your code, as some would say, you write a program to create sample data files at random, and then feed those files into the program until you are satisfied that it's working correctly.<P>
How do you know when to stop a Monte Carlo test? You don't. It's a gut feeling--like the one you get when you just know the dealer is about to turn up an ace. That feeling might steer you wrong in blackjack, but in programming, if you run a Monte Carlo test long enough--and if your test procedures are sound--it's a good bet the code is working. For a Monte Carlo test to be trustworthy, however, it should follow other tests that prove assumptions you've made about a program or algorithm. Only after you are reasonably sure that a program is working should you subject it to Monte Carlo scrutiny. Just throwing a bunch of random numbers at a program won't do any more for your code than pitching elastic birds into pots has done for my bank account.<P>
The value of the Monte Carlo method is especially high for a program that parses data files of many different shapes and sizes, such as the Windows bitmap compressor introduced last month. With it you can test how well a program handles common data sequences. You can also test the code's outer limits. But you can never test all possible sequences the program will ever meet. That's where the Monte Carlo method comes in. The secret is to create random test files that closely resemble the real data the program will spend its life consuming.<P>
Last month, I introduced algorithms and two test programs for compressing and decompressing Windows bitmap files. To simplify debugging, rather than mangle real bitmaps, I programmed the tests to operate on phony bitmaps stored in text files. This month, I'll list the remaining test programs (including a Monte Carlo sample-file generator) and the final C++ utility that can compress real 256-color bitmap files. I'll also point out a few quirks in the algorithms that gave me trouble.<P>
<h3><a name="029c_0005">Test Suite<a name="029c_0005"></h3><P>
<a href="#029c_000b">Listing One</A> (page 132), CREATE.CPP, is a C++ program that creates sample bitmap files in the format illustrated in <a href="#029c_0009">Figure 1</A>, repeated from last month. This isn't a real bitmap file, of course. It's a text representation of pixels that makes debugging and testing easier. The first two values represent the number of pixels per line (0A) and the number of scan lines in the image (04). The remaining values are hexadecimal bytes, one per pixel.<P>
Just outputting pixel values at random would create unsuitable test files with few same-color runs. Such files would not exercise the algorithm's primary compression technique in which pixel groups such as 07 07 07 07 are run-length encoded as two values, 04 07 (four pixels of color 07). To create more realistic test files in the format illustrated by <a href="#029c_0009">Figure 1</A>, CREATE uses a simple but effective method listed in Pascal in <a href="#029c_000a">Example 1</A>. First, set a pixel to a random value from 0 to 255. Then, in a For loop (NP represents the number of pixels in a scan line), use a random function to decide whether to change the current pixel to another value. In this way, the program outputs pixel runs as might be found in a typical bitmap. The key here is to use an expression such as <I>If (random(100)&gt;=80)</I> to decide whether to change an aspect of the output rather than directly use <I>random()</I>'s result. In this case, the <I>if</I> statement causes pixels to change color only about 20 percent of the time.<P>
<a href="#029c_000d">Listing Two</A> (page 132), COMPARE.CPP, completes the test suite by comparing two sample bitmap files, ignoring the two-value information line at top (see <a href="#029c_0009">Figure 1</A>). <a href="#029c_000f">Listing Three</A> (page 132), MONTE.BAT, uses CREATE and COMPARE along with TPACK and TUNPACK from last month's column to test the bitmap compression and decompression algorithms in Monte Carlo style. Run MONTE.BAT with all four C++ programs compiled in the current directory. The test ends automatically upon detecting any errors, or you can press Crtl+C to end the test when you are satisfied the code is working.<P>
<h3><a name="029c_0006">Bitmap Compressor<a name="029c_0006"></h3><P>
<a href="#029c_0011">Listing Four</A> (page 132), BPACK.CPP, is the final bitmap compression utility. I wrote the code in C++, but I did not use <I>IOStream</I>s or classes, so the program should be easily ported to Pascal, C, and other languages. The program can compress only 256-color, Windows bitmap files. If you don't have any files in that format, load any 16-color bitmap into Windows Paintbrush, and save it under a different name with Type set to &quot;256-Color bitmap.&quot; Or, just create a new image. If your file is named MYBITS.BMP, compress it with the DOS command BPACK MYBITS.BMP PACKED.BMP, then compare file sizes. Most files compress to about one half of their original size, but in some cases, BPACK has produced compression ratios as good as 80 percent.<P>
Of course, you can also use a compression utility such as PKZIP or LHA to compress bitmap files. To view images compressed this way, however, you first have to decompress them to other files. To view images compressed by BPACK, you simply view them. Most Windows display drivers can directly display packed bitmaps. Unfortunately, though, not all Windows programs can do the same. For example, loading a packed bitmap into Paintbrush produces the error &quot;The format of this file is not supported.&quot; (You'd think Windows' own programs would recognize bitmap compression, but evidently, this isn't the case.)<P>
To view a packed bitmap image, therefore, you must use another utility such as the BITZOOM.CPP program that I wrote for Borland's <I>The World of ObjectWindows</I> video, or the program MDIBITS.PAS in my book, <I>Borland Pascal 7.0 Programming for Windows</I> (Bantam, 1993). The Pascal program has a bug, however, that prevents it from loading packed bitmaps. To repair the problem, add a global <I>Word</I> variable named <I>Result</I> to file UBITMAP.PAS, and change all instances of <I>BlockRead(X,Y,Z)</I> to <I>BlockRead(X,Y,Z,Result)</I>. Without the <I>Result</I> parameter, <I>BlockRead</I> forces a run-time error of 100 if the number of bytes read from a file do not match the requested quantity in parameter Z. The repaired files are included on disk and on line with this month's files.<P>
<h3><a name="029c_0007">Quirks<a name="029c_0007"></h3><P>
The following are some suggestions for improving BPACK, and a few details about quirks in the compression algorithms. See last month's column for explanations about terms used in these items:<P>
<UL>
<li>Absolute-mode runs must have a minimum of three pixels, forcing runs of one and two pixels to be encoded as 01 0X or 01 0X 01 0Y where 0X and 0Y are pixel values. This fact isn't mentioned anywhere in Microsoft's documentation.</li>
<li>Normally, delta escape codes are used to define outlines of foreground images to be displayed on fixed backgrounds. For general-purpose compression, however, delta escape codes are of little value, and they are difficult to program in a general way. For these reasons, BPACK does not generate delta escape codes.</li>
<li>Bitmaps with little redundancy might take more space when compressed. A better compression program could detect this condition and warn users not to bother compressing the file.</li>
<li>Short, same-color runs embedded inside different-color, absolute-mode runs aren't handled as efficiently as possible. For example, it would be better to encode the pixels 01 02 03 04 04 04 01 02 03 as a straight absolute-mode run rather than as two absolute runs separated by the run-length encoded unit, 03 04. I suspect that the compression algorithm could deal with this and similar cases better than it does now, but I stopped short of making the necessary improvements.</li>
<li>Not all Windows display drivers correctly handle compressed bitmaps. If yours doesn't, complain loudly to your hardware vendor. There's no excuse for a Windows display driver not recognizing bitmap compression.</li>
<li>The bitmap compression algorithm is &quot;horizontally oriented.&quot; That is, runs of same-color pixels are detected only on pixel rows, not columns. A revised algorithm could compare the results of horizontal and vertical run-length encoding, and select the better of the two. (Windows would no longer recognize the resulting file, however.)</li>
<li>BPACK handles only 256-color (one byte per pixel) bitmaps. As a project, you might consider adding support for 16-color images. The compression algorithm is nearly identical in both cases. If you write the code, I'd like to see the result.</li>
</UL>
<h3><a name="029c_0008">Your Turn<a name="029c_0008"></h3><P>
I may not be a gambler, but I'll wager this isn't the last &quot;Algorithm Alley&quot; on data compression--one of the most fascinating subjects in programming. Feel free to send comments, code, and algorithms to me in care of <I>DDJ</I>. You can also upload text files to my CompuServe ID, 73627,3241. Or, if you want to chat in person, try the rubber chicken arena at Circus Circus. I'm usually there.<P>
<h4><a name="029c_0009">Figure 1: Sample &quot;fake&quot; bitmap text file<a name="029c_0009"></h4><P>
<pre>0A 04
01 01 01 02 02 02 02 02 03 03
01 02 03 04 05 06 07 08 09 0A
01 02 03 04 04 04 01 02 03 04
01 02 01 02 01 02 01 02 01 02</pre><P>
<h4><a name="029c_000a">Example 1: Generating pixel runs at random<a name="029c_000a"></h4><P>
<pre>pixel := random(256);
for I := 0 to NP - 1 do
begin
  if (random(100) &gt;= 80)
    then pixel := random(256);
  Write(pixel)
end;
</pre><P>

<PRE>


_ALGORITHM ALLEY_
by Tom Swan


<a name="029c_000b"><a name="029c_000c"><B>[LISTING ONE]</B>

/* ----------------------------------------------------------- *\
**  create.cpp -- Create random test bitmap file               **
**     Copyright (c) 1993 by Tom Swan. All rights reserved.    **
\* ----------------------------------------------------------- */

#include &lt;iostream.h&gt;
#include &lt;iomanip.h&gt;
#include &lt;fstream.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;

typedef unsigned char Byte;

void Error(const char *msg);
void RandomizeScanLine(Byte *sl, int np);
int RandomRange(int low, int high);
void PutByte(Byte b);

int main()
{
  int np;  // Number of pixels per scan line
  int ns;  // Number of scan lines

  cout &lt;&lt; setiosflags(ios::uppercase);
  cout &lt;&lt; setfill('0') &lt;&lt; hex;
  randomize();
  np = RandomRange(10, 640);
  ns = RandomRange(4, 480);
  cout &lt;&lt; setw(2) &lt;&lt; np &lt;&lt; ' ' &lt;&lt; setw(2) &lt;&lt; ns &lt;&lt; endl;
  Byte *sl = new Byte[np];  // Allocate scan line
  if (!sl) Error(&quot;out of memory&quot;);
  while (ns-- &gt; 0) {
    RandomizeScanLine(sl, np);
    for (int i = 0; i &lt; np; ++i)
      PutByte(sl[i]);
    cout &lt;&lt; endl;
  }
  delete sl;
  return 0;
}
// Display error message and halt
void Error(const char *msg)
{
  cerr &lt;&lt; endl &lt;&lt; &quot;Error: &quot; &lt;&lt; msg &lt;&lt; endl;
  exit(1);
}
// Insert random pixel values into scan line sl
void RandomizeScanLine(Byte *sl, int np)
{
  int pixel = random(256);
  for (int i = 0; i &lt; np; ++i) {
    if (random(100) &gt;= 80)
      pixel = random(256);  // 20% chance of new pixel value
    sl[i] = pixel;
  }
}
// Return integer at random from low to high
int RandomRange(int low, int high)
{
  return low + random((high - low) + 1);
}
// Write byte b in hex in 2 columns with leading 0
// plus one blank to cout
void PutByte(Byte b)
{
  cout &lt;&lt; setw(2) &lt;&lt; (unsigned int)b &lt;&lt; ' ';
}



<a name="029c_000d"><a name="029c_000e"></pre><B>[LISTING TWO]</B><pre><a name="029c_000e">

/* ----------------------------------------------------------- *\
**  compare.cpp -- Compare files created by tpack and tunpack  **
**     Copyright (c) 1993 by Tom Swan. All rights reserved.    **
\* ----------------------------------------------------------- */

#include &lt;iostream.h&gt;
#include &lt;iomanip.h&gt;
#include &lt;fstream.h&gt;
#include &lt;stdlib.h&gt;

void Error(const char *msg);
int main(int argc, char *argv[])
{
  int np, ns;  // Number of pixels, number of scan lines
  int b1, b2;  // Bytes from files 1 (original) and 2 (converted)

  if (argc &lt;= 2)
    Error(&quot;filenames missing (enter two names)&quot;);
  ifstream ifsOriginal(argv[1], ios::in);
  if (!ifsOriginal)
    Error(&quot;unable to open file #1&quot;);
  ifstream ifsConverted(argv[2], ios::in);
  if (!ifsConverted)
    Error(&quot;unable to open file #2&quot;);
  // Skip number of pixels np and number of scan line ns
  // at beginning of original test data
  ifsOriginal &gt;&gt; hex &gt;&gt; np &gt;&gt; ns;
  while (!ifsOriginal.eof()) {
    ifsOriginal &gt;&gt; hex &gt;&gt; b1;
    ifsConverted &gt;&gt; hex &gt;&gt; b2;
    if (b1 != b2) Error(&quot;Files are different&quot;);
  }
  cerr &lt;&lt; endl &lt;&lt; &quot;Files match&quot; &lt;&lt; endl;
  return 0;
}
// Display error message and halt
void Error(const char *msg)
{
  cerr &lt;&lt; endl &lt;&lt; &quot;Error: &quot; &lt;&lt; msg &lt;&lt; endl;
  exit(1);
}



<a name="029c_000f"><a name="029c_0010"></pre><B>[LISTING THREE]</B><pre><a name="029c_0010">

@echo off
rem
rem monte.bat -- Monte Carlo batch file for bitmap tests
rem
:REPEAT
echo.
echo Starting new test
echo Deleting old bitmap.00? files
del bitmap.00?
echo Creating bitmap.000 test file
create &gt;bitmap.000
echo Packing bitmap.000 to bitmap.001
tpack bitmap.000 &gt;bitmap.001
echo Unpacking bitmap.001 to bitmap.002
tunpack bitmap.001 &gt;bitmap.002
echo Comparing bitmap.000 and bitmap.002
compare bitmap.000 bitmap.002
if errorlevel 1 goto ERROR
goto REPEAT
:ERROR
echo.
echo ERROR: File mismatch found!!!
echo.
:END



<a name="029c_0011"><a name="029c_0012"></pre><B>[LISTING FOUR]</B><pre><a name="029c_0012">

/* ----------------------------------------------------------- *\
**  bpack.cpp -- Pack (compress) a Windows bitmap file         **
**     Copyright (c) 1993 by Tom Swan. All rights reserved.    **
\* ----------------------------------------------------------- */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;alloc.h&gt;
#include &lt;windows.h&gt;

// Miscellaneous definitions
#define FALSE 0
#define TRUE 1
// State-machine definitions
#define READING 0         // General reading mode
#define ENCODING 1        // Encoding same-color pixel runs
#define ABSMODE 2         // Absolute-mode encoding
#define SINGLE 3          // Encoding short absolute-mode runs
#define ENDOFLINE 4       // End of scan line detected
// Type declarations
typedef unsigned char Byte;
struct BitmapStruct {
  BITMAPFILEHEADER bfh;   // Bitmap file header
  BITMAPINFOHEADER bih;   // Bitmap info header
  RGBQUAD *bmiColors;     // Pointer to color table (variable size)
  int clrSize;            // Number of colors in table
};
// Function prototypes
void Instruct();
void Error(char *msg);
int Odd(int v);
void ReadBitmapHeader(FILE *inpf, BitmapStruct &amp;rbs);
int IsCompressible(BitmapStruct &amp;rbs);
void WriteBitmapHeader(FILE *outf, BitmapStruct &amp;rbs);
void WriteBitmapBits(FILE *inpf, FILE *outf, const BitmapStruct &amp;rbs);
void PackRLE8(FILE *outf, int np, const Byte *sl);
void PutByte(FILE *outf, Byte b);

// Global variable
long imageSize;
int main(int argc, char *argv[])
{
  BitmapStruct bs;
  puts(&quot;\nBitmap file compressor by Tom Swan&quot;);
  if (argc &lt;= 2) Instruct();
  FILE *inpf = fopen(argv[1], &quot;rb&quot;);
  if (!inpf) Error(&quot;Can't open input file&quot;);
  ReadBitmapHeader(inpf, bs);
  if (!IsCompressible(bs)) Error(&quot;Cannot compress this file&quot;);
  FILE *outf = fopen(argv[2], &quot;wb&quot;);
  if (!outf) Error(&quot;Can't open output file&quot;);
  printf(&quot;Compressing file...&quot;);
  WriteBitmapHeader(outf, bs);      // Write dummy header
  WriteBitmapBits(inpf, outf, bs);  // Compress bitmap image
  bs.bih.biCompression = BI_RLE8;   // Mark bitmap as compressed
  bs.bih.biSizeImage = imageSize;   // Modify image size value
  fseek(outf, 0, SEEK_END);         // Seek to eof for next statement
  bs.bfh.bfSize = ftell(outf);      // Modify file size in bytes
  WriteBitmapHeader(outf, bs);      // Write real header
  fclose(inpf);
  fclose(outf);
  printf(&quot;\n%s --&gt; %s\n&quot;, argv[1], argv[2]);
  delete bs.bmiColors;
  return 0;
}
// Display instructions and exit program
void Instruct()
{
  puts(&quot;\nSyntax: BPACK infile outfile&quot;);
  puts(&quot;\nEnter the name of a bitmap (infile) to compress.&quot;);
  puts(&quot;The program packs the bitmap if possible, and&quot;);
  printf(&quot;stores the results in a new file (outfile).\n&quot;);
  puts(&quot;The original bitmap file is not changed in any way.&quot;);
  puts(&quot;This version is limited to 8-bit (256-color) files&quot;);
  puts(&quot;that are not already compressed.&quot;);
  exit(0);
}
// Display error message and exit program
void Error(char *msg)
{
  printf(&quot;\nERROR: %s\n&quot;, msg);
  exit(1);
}
// Return true if v is odd
int Odd(int v)
{
  return v &amp; 0x01;
}
// Read bitmap headers and color table into rbs
void ReadBitmapHeader(FILE *inpf, BitmapStruct &amp;rbs)
{
  if (fread(&amp;rbs.bfh, sizeof(rbs.bfh), 1, inpf) != 1)
    Error(&quot;Cannot read bitmap file header&quot;);
  if (fread(&amp;rbs.bih, sizeof(rbs.bih), 1, inpf) != 1)
    Error(&quot;Cannot read bitmap info header&quot;);
  if (rbs.bih.biClrUsed != 0) {
    rbs.clrSize = (int)rbs.bih.biClrUsed;
  } else switch (rbs.bih.biBitCount) {
    case 1: rbs.clrSize = 2; break;
    case 4: rbs.clrSize = 16; break;
    case 8: rbs.clrSize = 256; break;
    case 24: rbs.clrSize = 0; break;
    default: Error(&quot;biBitCount not 1, 4, 8, or 24&quot;);
  }
  if (rbs.clrSize == 0) Error(&quot;clrSize == 0&quot;);
  rbs.bmiColors = new RGBQUAD[rbs.clrSize];
  if (!rbs.bmiColors)
    Error(&quot;bmiColors is null. Out of memory.&quot;);
  if (fread(rbs.bmiColors, sizeof(RGBQUAD),
    rbs.clrSize, inpf) != rbs.clrSize)
    Error(&quot;Cannot read color table&quot;);
}
// Returns true if bitmap header rbs is compressible
// Required format: MS DIB, uncompressed, 8-bit (256-color)
int IsCompressible(BitmapStruct &amp;rbs)
{
  if (rbs.bfh.bfType != 0x4d42) return FALSE;
  if (rbs.bih.biSize != sizeof(BITMAPINFOHEADER)) return FALSE;
  if (rbs.bih.biBitCount != 8) return FALSE;
  if (rbs.bih.biCompression != BI_RGB) return FALSE;
  return TRUE;
}
// Write bitmap headers and color table in bs to outf
void WriteBitmapHeader(FILE *outf, BitmapStruct &amp;rbs)
{
  rewind(outf);
  if (fwrite(&amp;rbs.bfh, sizeof(rbs.bfh), 1, outf) != 1)
    Error(&quot;writing bitmap file header&quot;);
  if (fwrite(&amp;rbs.bih, sizeof(rbs.bih), 1, outf) != 1)
    Error(&quot;writing bitmap info header&quot;);
  if (fwrite(rbs.bmiColors, sizeof(RGBQUAD),
    rbs.clrSize, outf) != rbs.clrSize)
    Error(&quot;writing color table&quot;);
}
// Read pixel data from inf, compress and write to outf
void WriteBitmapBits(FILE *inpf, FILE *outf, const BitmapStruct &amp;rbs)
{
  int np;      // Number of pixels per scan line
  int ns;      // Number of scan lines
  int slSize;  // Size of one scan line in bytes
  Byte *sl;    // Pointer to scan line
  // Assign miscellaneous sizes
  np = (int)rbs.bih.biWidth;
  ns = (int)rbs.bih.biHeight;
  // Allocate scan line buffer
  if (Odd(np))
    slSize = np + 1;  // Must have an even number of bytes
  else
    slSize = np;
  if (slSize &lt;= 0) Error(&quot;slSize &lt;= 0&quot;);
  sl = new Byte[slSize];
  if (!sl) Error(&quot;out of memory&quot;);
  // Read and compress scan lines
  while (ns-- &gt; 0) {
    if (fread(sl, 1, slSize, inpf) != slSize)
      Error(&quot;reading pixel scan line&quot;);
    PackRLE8(outf, np, sl);
  }
  delete sl;
  PutByte(outf, 0);  // Mark end of bitmap
  PutByte(outf, 1);
}
// Compress and write np pixels in sl to output file outf
void PackRLE8(FILE *outf, int np, const Byte *sl)
{
  int slx = 0;           // Scan line index
  int state = READING;   // State machine control variable
  int count;             // Used by various states
  Byte pixel;            // Holds single pixels from sl
  int done = FALSE;      // Ends while loop when true
  int oldcount, oldslx;  // Copies of count and slx

  while (!done) {
    switch (state) {
      case READING:
      // Input:
      // np == number of pixels in scan line
      // sl == scan line
      // sl[slx] == next pixel to process
        if (slx &gt;= np)                      // No pixels left
          state = ENDOFLINE;
        else if (slx == np - 1) {           // One pixel left
          count = 1;
          state = SINGLE;
        } else if (sl[slx] == sl[slx + 1])  // Next 2 pixels equal
          state = ENCODING;
        else                                // Next 2 pixels differ
          state = ABSMODE;
        break;
      case ENCODING:
      // Input:
      // slx &lt;= np - 2 (at least 2 pixels in run)
      // sl[slx] == first pixel of run
      // sl[slx] == sl[slx + 1]
        count = 2;
        pixel = sl[slx];
        slx += 2;
        while ((slx &lt; np) &amp;&amp; (pixel == sl[slx]) &amp;&amp; (count &lt; 255)) {
          count++;
          slx++;
        }
        PutByte(outf, (Byte)count);  // Output run-length-encoded unit
        PutByte(outf, pixel);
        state = READING;
        break;
      case ABSMODE:
      // Input:
      // slx &lt;= np - 2 (at least 2 pixels in run)
      // sl[slx] == first pixel of run
      // sl[slx] != sl[slx + 1]
        oldslx = slx;
        count = 2;
        slx += 2;
        // Compute number of bytes in run
        while ((slx &lt; np) &amp;&amp; (sl[slx] != sl[slx - 1]) &amp;&amp; (count &lt; 255)) {
          count++;
          slx++;
        }
        // If same-color run found, back up one byte
        if ((slx &lt; np) &amp;&amp; (sl[slx] == sl[slx - 1]))
          if (count &gt; 1)
            count--;
        slx = oldslx;  // Restore scan-line index
        // Output short absolute runs of less than 3 pixels
        if (count &lt; 3 )
          state = SINGLE;
        else {
          // Output absolute-mode run
          PutByte(outf, 0);
          PutByte(outf, (Byte)count);
          oldcount = count;
          while (count &gt; 0) {
            PutByte(outf, sl[slx]);
            slx++;
            count--;
          }
          if (Odd(oldcount))
            PutByte(outf, 0);  // End run on word boundary
          state = READING;
        }
        break;
      case SINGLE:
      // Input:
      // count == number of pixels to output
      // slx &lt; np
      // sl[slx] == first pixel of run
      // sl[slx] != sl[slx + 1]
      while (count &gt; 0) {
        PutByte(outf, 01);
        PutByte(outf, sl[slx]);
        slx++;
        count--;
      }
      state = READING;
      break;
      case ENDOFLINE:
        PutByte(outf, 0);
        PutByte(outf, 0);
        done = TRUE;
        break;

      default:
        Error(&quot;unknown state in PackRLE8()&quot;);
        break;
    }
  }
}
// Write byte b to output file outf. Increments global imageSize variable
void PutByte(FILE *outf, Byte b)
{
  if (fwrite(&amp;b, 1, 1, outf) != 1)
    Error(&quot;writing byte to output file&quot;);
  imageSize++;
}



</pre><HR><P>Copyright &copy; 1993, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
