<HTML>
<META NAME="year" CONTENT="1993">
<HEAD>
<TITLE>JUL93: ALGORITHM ALLEY</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">

<H1>ALGORITHM ALLEY<a name="020e_0003"></A><a name="020e_0003"></A></H1>

<H2><a name="020e_0001"></A><a name="020e_0000"></A>Alien Text-File Compression</H2>

<H3>Tom Swan</H3>

<a name="020e_0002"></A><a name="020e_0000"></A>File-compression algorithms
are among the most fascinating in computer science. The very idea that
a certain sequence of bytes can be represented by another, shorter sequence
of bytes, makes me wonder if, someday, a programmer will discover the ultimate
compression method that can reduce any data set to a single integer. Imagine
how much disk space you would gain with a 99.999 percent file-compression
ratio.

<P>&nbsp;That may seem to be an impossible dream until you consider a story
told by Martin Gardner in his book, <I>Gotcha</I> (W.H. Freeman, 1982).
As Gardner tells the tale, on visiting Earth, an inquisitive alien wishes
to collect all of human knowledge. Having no room for the <I>Encyclopedia
Britannica</I> aboard an already-cramped spaceship (and lacking a CD-ROM
player), the alien proposes a clever method for compressing the <I>Encyclopedia</I>'s
volumes. Assuming there are fewer than 1000 unique letters, digits, and
other symbols in the text, our resourceful visitor assigns each symbol
a three-digit code from 000 to 999, including leading 0s. The word "Snow,"
for example, might be encoded as 083110111119. Translating the entire <I>Encyclopedia</I>
this way produces a giant integer that, with an imaginary decimal point
to the left, is equivalent to the decimal fraction, A/B. To complete the
data compression, the visitor places a mark on a small rod of otherworldly
material that divides the bar into two lengths, A and B. After returning
to Zenon (or wherever), the alien precisely measures the marked rod, obtains
lengths A and B, and divides A/B to yield the original integer, which a
computer decodes to print out the <I>Encyclopedia</I>.

<P>&nbsp;Is this a valid data-compression technique? Yes. Is it possible
to implement? Hardly. To precisely mark the rod, explains Gardner, would
require measuring distances many times smaller than an electron. If, however,
you could make an appropriately fine measurement, the method would work.
So, theoretically speaking, does this imply that all data is infinitely
compressible? Maybe not, but imagine a "rod drive" of the future that moves
a quark-size mark up and down to compress gigabytes of data on a staff
no bigger than a popsicle stick. What a great backup system that would
be! All of this is science fiction, of course, although the story makes
me wonder what sorts of exotic data-compression techniques--not to mention
aliens--are out there waiting to be discovered.

<P>&nbsp;

<H3><a name="020e_0004"></A>Compressing Text Files<a name="020e_0004"></A></H3>

Popular text-compression algorithms such as variable-width Huffman codes,
which have been covered extensively in <I>DDJ</I>, produce impressive compression
ratios. Though highly efficient, Huffman codes must be processed one bit
at a time, causing compression programs to run slowly.

<P>&nbsp;When choosing a compression algorithm, however, efficiency isn't
always the primary concern. Speed and ease of use might be more important
in some applications, and in this column, I'll focus on algorithms that,
unlike Huffman codes, run quickly while still appreciably reducing text-file
sizes. The methods gain much of their speed simply by processing text as
characters rather than as individual bits. I'll start with the most basic
of these methods: embedded tabs. Though simple, the algorithms for inserting
and deleting tabs belong in every programmer's toolbox. I'll also explore
some other alien--that is, less common--text-compression algorithms that
you might want to try.

<P>&nbsp;
<H3>
<a name="020e_0005"></A>Embedded Tab Compression<a name="020e_0005"></A></H3>
<a href="#020e_0009">Example
1</A>, Algorithm #6, lists the pseudocode for inserting tabs into a line
of text <I>L</I> at fixed columns of size <I>tabWidth</I>. <a href="#020e_000b">Example
2</A>, Algorithm #7, removes <I>tabWidth</I> tabs from a line of text.
Both algorithms operate on a single string, represented as an array of
characters, indexed as <I>S[1]</I> to <I>S[n]</I>, where <I>n</I> is the
string length.

<P>&nbsp;To insert tabs, <a href="#020e_0009">Example
1</A> calls a subfunction, <I>NextChar,</I> which peeks ahead to the next
character in line <I>L</I>. If that character equals a unique sentinel
appended to the end of the line, the algorithm sets flag <I>Eol </I>True.
A While loop appends tabs to a temporary string <I>T</I>. A second While
loop appends blanks to <I>T</I> in order to fill out partial columns that
can't be aligned with a tab. Removing tabs is the simpler of the two related
algorithms; see <a href="#020e_000b">Example
2</A>. In this case, the procedure merely examines line <I>L</I> one character
at a time, outputing blanks at every tab character encountered.

<P>&nbsp;INSTAB.PAS (<a href="#020e_000e">Listing
One</A>, page 142) implements Algorithm #6. REMTAB.PAS (<a href="#020e_0010">Listing
Two</A>, page 142) implements Algorithm #7. To alter the column width,
change <I>tabWidth</I> to any value from 2 up. A width of 4, instead of
the standard 8, usually produces better results on program source files.
For simplicity, and to keep the listings short, I designed the programs
to write their output to a new file, TXT.OUT, which is overwritten in the
current directory without warning. The original file is never changed.

<P>&nbsp;While experimenting with these programs, I noticed an odd effect
that tabs can have on other compression software such as the popular PKZIP
and LHA. <a href="#020e_000a">Table
1</A> shows the results of one test in which I inserted 4-column tabs into
a Pascal source file of 16,273 bytes, reducing the file to 15,052 bytes.
PKZIP further reduced the tabbed file to 5614 bytes, but to my surprise,
this file was 277 bytes larger than the compressed, tab-less text. LHA
did a better job than PKZIP in compressing this file, but here again, the
compressed file with tabs was 224 bytes larger than the compressed, tab-less
original.

<P>&nbsp;These numbers suggest some interesting points about PKZIP and
LHA, and possibly other data compressors. The amount of savings gained
from compressing a file can be highly dependent on the nature of the information
in that file. Also, compressing text with tabs apparently interferes with
algorithms that compact runs of identical values (not only blanks) into
a count N and a value V, a method commonly called "run-length encoding."
It therefore makes good sense to strip tabs from text files before compressing
them. Perhaps a smart text-compression engine could recognize this fact
and detab files before compressing. During decompression, the tabs could
easily be added back. I've never seen a data compressor that does this,
but the idea might be worth giving a whirl.

<P>&nbsp;
<H3>
<a name="020e_0006"></A>Indentation Compression<a name="020e_0006"></A></H3>
UCSD Pascal uses a relatively obscure, but effective, text-compression
technique that takes advantage of indentation in a typical Pascal, C, or
C++ text file. The algorithms are straightforward, so I'll leave them as
a project for you to implement. Simply replace each line's leading blanks
with a unique escape code and a value that represents the number of replaced
blanks--a relatively crude form of run-length encoding, but one that can
produce better results than embedded tabs. To expand a line, if it begins
with an escape code, read the next value and output that many spaces. Lines
that don't begin with escape codes are displayed normally.

<P>&nbsp;One drawback with indentation compression is the need to reserve
a unique escape code, but a side benefit is that compressed files tend
to display faster--the exact opposite of the extra runtime overhead usually
added by compression algorithms. To display a line of compressed text,
assuming the display row is clear, just move the cursor to the position
of the first nonblank character, saving the time it would take to display
that many spaces one at a time. It's amazing how much display speed you
can gain from this simple method. A programmer's editor could use the concept
internally to increase output speed on relatively slow terminals or with
sluggish GUIs such as Microsoft Windows. The compressed text would also
conserve memory.

<P>&nbsp;
<H3>
<a name="020e_0007"></A>Differential Compression<a name="020e_0007"></A></H3>
One of my favorite compression algorithms takes advantage of the redundancy
in sorted files where groups of adjacent words begin with the same letters.
Storing the differences between these words saves space by eliminating
duplicate prefixes. For example, the words Aardvark, Aardwolf, and Aaronic
can be encoded as Aardvark, 4wolf, and 3onic, where 4 and 3 represent the
number of letters to be copied from the preceding, uncompressed words.
This technique is especially good at squeezing lengthy dictionaries, but
it can also be used with sorted name-and-address databases or with other
alphabetically sorted files. Difference compression can also pack bitmaps,
especially those of large-size color values, say, 24 bits per pixel. Such
files can often be greatly reduced by storing the <I>difference </I>in
color between one pixel and the next.

<P>&nbsp;<a href="#020e_000c">Example
3</A>, Algorithm #8, lists the pseudocode for differentially compressing
a word <I>W</I> given a preceding word <I>P</I>. <a href="#020e_000d">Example
4</A>, Algorithm #9, expands a compressed word <I>W</I>, again given an
uncompressed preceding word <I>P</I>. To use these algorithms, initialize
<I>P</I> to a null string, then pass a list of words <I>W</I> to the appropriate
procedure.

<P>&nbsp;DIFF.PAS (<a href="#020e_0012">Listing
Three</A>, page 142) and UNDIFF.PAS (<a href="#020e_0014">Listing
Four</A>, page 142) implement Algorithms #8 and #9, respectively. To test
the programs, I compressed a sorted list of 21,400 proper names. Compressing
the file with DIFF reduced its size from 174,510 to 112,935 bytes, a savings
of about 35 percent. That's pretty good as compression ratios go, but consider
what happened when I again compressed each of the two files using LHA.
The original, plain text reduced to 57,295 bytes. The differentially compressed
text slimmed down to only 42,977 bytes, a total reduction of greater than
75 percent. Now, that's a hot compression ratio!

<P>&nbsp;The message here is that, despite advances in data-compression
techniques, it's often the combination of selected algorithms along with
knowledge of a data file's contents that can produce optimal results. Removing
tabs from text files, taking advantage of indentation, and packing sorted
files differentially (just to name a few of many possibilities), and then
also compressing those precompressed files using other techniques might
reduce file sizes more than any single algorithm on its own.

<P>&nbsp;
<H3>
<a name="020e_0008"></A>Your Turn<a name="020e_0008"></A></H3>
Next time, I'll explore data-compression algorithms used for packing Microsoft
Windows bitmaps. Until then, if you know of any unusual text-file or other
compression techniques, I'd like to hear from you. Feel free to upload
files packed with PKZIP or LHA to my CompuServe ID, 73627,3241. Please
send only text files; do not send executable code. If you don't have a
CompuServe account, you can send a disk to me in care of <I>DDJ</I>. Include
postage and a self-addressed mailer if you want your disk back.

<P>&nbsp;Sorry, but I can't return marked rods or popsicle sticks. (I just
know some alien with a sense of humor is going to send me a bag of these.)

<P>&nbsp;
<H4>
<a name="020e_0009"></A><B>Example 1: </B>Pseudocode for Algorithm #6 (insert
tabs).<a name="020e_0009"></A></H4>

<PRE>procedure InsertTabs(L: String);
var
&nbsp; T: String;
&nbsp; J, K: Integer;
&nbsp; C, Q: Char;
&nbsp; Eol: Boolean; { End of line }
&nbsp; function NextChar(var C: Char): Char;
&nbsp;&nbsp; begin
&nbsp;&nbsp;&nbsp; C &lt;- L[J + 1];
&nbsp;&nbsp;&nbsp; Eol &lt;- C = Q; { True at end of line }
&nbsp;&nbsp;&nbsp; Return C;
&nbsp; end;
begin
&nbsp; Set T to null string;
&nbsp; Set Q to unique char;
&nbsp; Append Q to L as sentinel;
&nbsp; K &lt;- 0;&nbsp; { Column count }
&nbsp; repeat
&nbsp;&nbsp;&nbsp; J &lt;- K;
&nbsp;&nbsp;&nbsp; while NextChar(C) = blank do
&nbsp;&nbsp;&nbsp; begin
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; J &lt;- J + 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if J mod tabWidth = 0 then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; begin
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Append tab to T;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; K &lt;- J;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; end;
&nbsp;&nbsp;&nbsp; end;
&nbsp;&nbsp;&nbsp; while (K &lt; J) do
&nbsp;&nbsp;&nbsp; begin
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Append blank to T;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; K &lt;- K + 1;
&nbsp;&nbsp;&nbsp; end;
&nbsp;&nbsp;&nbsp; if not Eol then
&nbsp;&nbsp;&nbsp; begin
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Append C to T;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; K &lt;- K + 1;
&nbsp;&nbsp;&nbsp; end;
&nbsp; until Eol;
&nbsp; Return T;
end;</PRE>

<H4>
<a name="020e_000a"></A><B>Table 1:</B> Results of compressing a text file
with and without tabs.<a name="020e_000a"></A></H4>

<PRE>
               Original  PKZIP   LHA
Without tabs   16,273    5,337   5,127
With tabs      15,052    5,614   5,351
Bytes saved    1,221     -277    -224</PRE>

<H4>
<a name="020e_000b"></A><B>Example 2: </B>Pseudocode for Algorithm #7 (remove
tabs).<a name="020e_000b"></A></H4>

<PRE>procedure RemoveTabs(L: String);
var
&nbsp; T: String;
&nbsp; I: Integer;
&nbsp; C: Char;
begin
&nbsp; Set T to null string;
&nbsp; for I &lt;- 1 to Length(L) do
&nbsp; begin
&nbsp;&nbsp;&nbsp; C &lt;- L[I];
&nbsp;&nbsp;&nbsp; if C = tab then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; repeat
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Append blank to T;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; until Length(T) mod tabWidth = 0;
&nbsp;&nbsp;&nbsp; else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Append char C to T;
&nbsp; end;
&nbsp; Return T;
end;</PRE>

<H4>
<a name="020e_000c"></A><B>Example 3:</B> Pseudocode for Algorithm #8 (differential
compression).<a name="020e_000c"></A></H4>

<PRE>procedure Compress(var W, P: String);
var
&nbsp; T: String;&nbsp;&nbsp; { Temporary copy of W }
&nbsp; I: Integer;&nbsp; { String index }
begin
&nbsp; Copy W to T;
&nbsp; Set I equal to 1;
&nbsp; while (I &lt;= Length(W)) and
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (I &lt;= Length(P)) and
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (W[I] = P[I]&nbsp;&nbsp; ) do
&nbsp;&nbsp;&nbsp; I &lt;- I + 1;
&nbsp; Delete I - 1 chars from head of W;
&nbsp; Insert Chr(I - 1) at head of W;
&nbsp; Set P equal to T;
end;</PRE>

<H4>
<a name="020e_000d"></A><B>Example 4:</B> Pseudocode for Algorithm #9 (differential
decompression).<a name="020e_000d"></A></H4>

<PRE>procedure Decompress(var W, P: String);
var
&nbsp; I: Integer;&nbsp; { String index }
begin
&nbsp; Set I to value of W[1];
&nbsp; Delete W[1] from W;
&nbsp; while (I >= 1) do
&nbsp; begin
&nbsp;&nbsp;&nbsp; Append P[I] to head of W;
&nbsp;&nbsp;&nbsp; I &lt;- I - 1;
&nbsp; end;
&nbsp; Set P equal to W;
end;</PRE>

<H4>
<a name="020e_000e"></A><a name="020e_000f"></A><B>[LISTING ONE]</B></H4>

<PRE>&nbsp;(Text begins on page 121.)<a name="020e_000f"></A></PRE>

<PRE>
{ instab.pas -- Algorithm #6: Insert Tabs by Tom Swan }
program InsTab;
const
&nbsp; outFName = 'TXT.OUT';
&nbsp; tabWidth = 8;&nbsp; { Try 4 for source code files }
&nbsp; blank = #32;&nbsp;&nbsp; { ASCII blank character }
&nbsp; tab = #09;&nbsp;&nbsp;&nbsp;&nbsp; { ASCII tab character }
var
&nbsp; InFName: String;
&nbsp; InFile, OutFile: Text;
&nbsp; Line: String;
procedure InsertTabs(var L: String);
var
&nbsp; T: String;
&nbsp; J, K: Integer;
&nbsp; C, Q: Char;
&nbsp; Eol: Boolean; { End of line }
&nbsp; function NextChar(var C: Char): Char;
&nbsp; begin
&nbsp;&nbsp;&nbsp; C := L[J + 1];
&nbsp;&nbsp;&nbsp; Eol := C = Q;&nbsp; { True at end of line }
&nbsp;&nbsp;&nbsp; NextChar := C
&nbsp; end;
begin
&nbsp; T := '';&nbsp;&nbsp;&nbsp;&nbsp; { Set result T to null }
&nbsp; Q := #0;&nbsp;&nbsp;&nbsp;&nbsp; { Sentinel }
&nbsp; L := L + Q;&nbsp; { Append sentinal to L }
&nbsp; K := 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { Column count }
&nbsp; repeat
&nbsp;&nbsp;&nbsp; J := K;
&nbsp;&nbsp;&nbsp; while NextChar(C) = blank do
&nbsp;&nbsp;&nbsp; begin
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; J := J + 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if J mod tabWidth = 0 then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; begin
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T := T + tab;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; K := J
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; end;
&nbsp;&nbsp;&nbsp; end;
&nbsp;&nbsp;&nbsp; while (K &lt; J) do
&nbsp;&nbsp;&nbsp; begin
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T := T + blank;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; K := K + 1
&nbsp;&nbsp;&nbsp; end;
&nbsp;&nbsp;&nbsp; if not Eol then
&nbsp;&nbsp;&nbsp; begin
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T := T + C;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; K := K + 1
&nbsp;&nbsp;&nbsp; end;
&nbsp; until Eol;
&nbsp; L := T&nbsp; { Return T via parameter L }
end;
begin
&nbsp; Writeln('Insert tabs');
&nbsp; Write('Input file name? ');
&nbsp; Readln(InFName);
&nbsp; Assign(InFile, InFName);
&nbsp; Reset(InFile);
&nbsp; Assign(OutFile, outFName);
&nbsp; Rewrite(OutFile);
&nbsp; Write('Inserting tabs...');
&nbsp; while not Eof(InFile) do
&nbsp; begin
&nbsp;&nbsp;&nbsp; Readln(InFile, Line);
&nbsp;&nbsp;&nbsp; InsertTabs(Line);
&nbsp;&nbsp;&nbsp; Writeln(OutFile, Line)
&nbsp; end;
&nbsp; Writeln;
&nbsp; Close(InFile);
&nbsp; Close(OutFile);
&nbsp; Writeln(InFName, ' -> ', outFName)
end.</PRE>

<H4>
<a name="020e_0010"></A><a name="020e_0011"></A><B>[LISTING TWO]</B></H4>

<PRE><a name="020e_0011"></A></PRE>

<PRE>
{ remtab.pas -- Algorithm #7: Remove Tabs by Tom Swan }
program RemTab;
const
&nbsp; outFName = 'TXT.OUT';
&nbsp; tabWidth = 8;&nbsp; { Try 4 for source code files }
&nbsp; blank = #32;&nbsp;&nbsp; { ASCII blank character }
&nbsp; tab = #09;&nbsp;&nbsp;&nbsp;&nbsp; { ASCII tab character }
var
&nbsp; InFName: String;
&nbsp; InFile, OutFile: Text;
&nbsp; Line: String;
procedure RemoveTabs(var L: String);
var
&nbsp; T: String;
&nbsp; I: Integer;
&nbsp; C: Char;
begin
&nbsp; T := '';
&nbsp; for I := 1 to Length(L) do
&nbsp; begin
&nbsp;&nbsp;&nbsp; C := L[I];
&nbsp;&nbsp;&nbsp; if C = tab then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; repeat
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T := T + blank
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; until Length(T) mod tabWidth = 0
&nbsp;&nbsp;&nbsp; else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T := T + C
&nbsp; end;
&nbsp; L := T&nbsp; { Return T via parameter L }
end;
begin
&nbsp; Writeln('Remove tabs');
&nbsp; Write('Input file name? ');
&nbsp; Readln(InFName);
&nbsp; Assign(InFile, InFName);
&nbsp; Reset(InFile);
&nbsp; Assign(OutFile, outFName);
&nbsp; Rewrite(OutFile);
&nbsp; Write('Removing tabs...');
&nbsp; while not Eof(InFile) do
&nbsp; begin
&nbsp;&nbsp;&nbsp; Readln(InFile, Line);
&nbsp;&nbsp;&nbsp; RemoveTabs(Line);
&nbsp;&nbsp;&nbsp; Writeln(OutFile, Line)
&nbsp; end;
&nbsp; Writeln;
&nbsp; Close(InFile);
&nbsp; Close(OutFile);
&nbsp; Writeln(InFName, ' -> ', outFName)
end.</PRE>

<H4>
<a name="020e_0012"></A><a name="020e_0013"></A><B>[LISTING THREE]</B></H4>

<PRE>
{ diff.pas -- Algorithm #8: Differential Compression by Tom Swan }
program Diff;
const
&nbsp; outFName = 'TXT.OUT';
var
&nbsp; InFName: String;
&nbsp; InFile, OutFile: Text;
&nbsp; AWord, Prev: String;
procedure Compress(var W, P: String);
var
&nbsp; T: String;&nbsp;&nbsp; { Temporary copy of W }
&nbsp; I: Integer;&nbsp; { String index }
begin
&nbsp; T := W;
&nbsp; I := 1;
&nbsp; while (I &lt;= Length(W)) and&nbsp; (I &lt;= Length(P)) and (W[I] = P[I]&nbsp;&nbsp; ) do
&nbsp;&nbsp;&nbsp; I := I + 1;
&nbsp; Delete(W, 1, I - 1);
&nbsp; W := Chr(I - 1) + W;
&nbsp; P := T
end;
begin
&nbsp; Writeln('Differential Compression');
&nbsp; Write('Input file name? ');
&nbsp; Readln(InFName);
&nbsp; Assign(InFile, InFName);
&nbsp; Reset(InFile);
&nbsp; Assign(OutFile, outFName);
&nbsp; Rewrite(OutFile);
&nbsp; Prev := '';
&nbsp; Write('Compressing...');
&nbsp; while not Eof(InFile) do
&nbsp; begin
&nbsp;&nbsp;&nbsp; Readln(InFile, AWord);
&nbsp;&nbsp;&nbsp; Compress(AWord, Prev);
&nbsp;&nbsp;&nbsp; Writeln(OutFile, AWord)
&nbsp; end;
&nbsp; Writeln;
&nbsp; Close(InFile);
&nbsp; Close(OutFile);
&nbsp; Writeln(InFName, ' -> ', outFName)
end.</PRE>

<H4>
<a name="020e_0014"></A><a name="020e_0015"></A><B>[LISTING FOUR]</B></H4>

<PRE>
{ undiff.pas -- Algorithm #9: Differential Decompression by Tom Swan }.
program UnDiff;
const
&nbsp; outFName = 'TXT.OUT';
var
&nbsp; InFName: String;
&nbsp; InFile, OutFile: Text;
&nbsp; AWord, Prev: String;
procedure Decompress(var W, P: String);
var
&nbsp; I: Integer;
begin
&nbsp; I := Ord(W[1]);
&nbsp; Delete(W, 1, 1);
&nbsp; while (I >= 1) do
&nbsp; begin
&nbsp;&nbsp;&nbsp; W := P[I] + W;
&nbsp;&nbsp;&nbsp; I := I - 1
&nbsp; end;
&nbsp; P := W
end;
begin
&nbsp; Writeln('Differential Decompression');
&nbsp; Write('Input file name? ');
&nbsp; Readln(InFName);
&nbsp; Assign(InFile, InFName);
&nbsp; Reset(InFile);
&nbsp; Assign(OutFile, outFName);
&nbsp; Rewrite(OutFile);
&nbsp; Prev := '';
&nbsp; Write('Decompressing...');
&nbsp; while not Eof(InFile) do
&nbsp; begin
&nbsp;&nbsp;&nbsp; Readln(InFile, AWord);
&nbsp;&nbsp;&nbsp; Decompress(AWord, Prev);
&nbsp;&nbsp;&nbsp; Writeln(OutFile, AWord)
&nbsp; end;
&nbsp; Writeln;
&nbsp; Close(InFile);
&nbsp; Close(OutFile);
&nbsp; Writeln(InFName, ' -> ', outFName)
end.
End Listings</PRE>

<HR><P>Copyright &copy; 1993, <I>Dr. Dobb's Journal</I></P></BODY>
</HTML>
