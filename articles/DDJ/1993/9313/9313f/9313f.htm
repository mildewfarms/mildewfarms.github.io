<HTML>
<META NAME="year" CONTENT="1993">
<HEAD>
<TITLE>APR93: HYPERCARD DATABASE TUNING</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>HYPERCARD DATABASE TUNING<a name="03bc_0003"></h1><P>
<h2><a name="03bc_0001"><a name="03bc_0000">Linked lists for greater performance</h2><P>
<h3>Jeff Elliott</h3><P>
<p><i><a name="03bc_0002"><a name="03bc_0000">Jeff, an engineer and freelance writer whose work has appeared in EIR magazine and the San Francisco Chronicle, can be contacted at 6945 Hutchins Ave., Sebastopol, CA 95472.</i></p><hr><P>
Everybody knows that large HyperCard stacks are supposed to be slow.  It's common knowledge, part of the same musty storehouse of wisdom that reminds you never to swim after a full meal, run while holding scissors, or believe a politician during an election year.  If everybody knows it, it must be true, right?<P>
Common knowledge isn't always true, of course, except perhaps the bit about politicians.  It certainly isn't true that large HyperCard stacks have to be sluggish.  HyperCard may not match the speed of a true database engine like FoxBase, but HyperCard's find is no slouch either, taking only 20 seconds to search my database of over 3600 cards and find 190 matches--that's an impressive speed of about 180 cards per second.  Not bad, but faster is always better, and searches can be up to 20 times faster if you use linked lists.<P>
<h3><a name="03bc_0004">What are Linked Lists?<a name="03bc_0004"></h3><P>
Linked lists (as in links of a chain) tie together information scattered through a database. This information can be text in a particular field, the highlight of a button, or anything el e important enough to need frequently.  A recipe database might have a &quot;main ingredient&quot; field that specifies whether a recipe uses chicken, broccoli, or other meats or vegetables.  Each unique entry in this field would be linked together: fried chicken linked to General Tso's chicken, and so on.  Another set of links may connect a popup that indicates the cuisine type: Chinese, Italian, or Mexican.  As the different links thread their way through the stack they will sometimes overlap, as Chinese and chicken do in the recipe for General Tso's chicken.<P>
In addition to reducing search time because fewer cards have to be examined, linked lists can also be a powerful navigational tool.  Each item linked provides an opportunity for the user to branch off in a new direction following a link trail.  And, to give the browser as much control as possible (after all, this is a Macintosh), there can be a second link for each item, providing the freedom to move backward through the chain as well as forward.<P>
The benefits of linked lists--faster searches and easier browsing--can be lost if it is hard to find one of the cards with the link you need.  A good solution is to maintain an index of all the linked strings.  This index can be kept in a scrolling field from which the user may select a linked topic.  The recipe stack, for example, would benefit from both a cuisine index and main-ingredient index, allowing simple and quick access to linked lists covering different topics.<P>
<h3><a name="03bc_0005">HyperLinks<a name="03bc_0005"></h3><P>
Unfortunately, the only linking capability built into HyperCard is the linkTo option found in the button dialog, and it's unusable for linked lists.  For starters, linkTo is one of the few things that cannot be used in a HyperTalk script.  To link, therefore, the user must change to the button tool, double-click on a card-level button to invoke the dialog, click on linkTo, find the card to link with, click OK, and finally choose the browse tool again.<P>
Together, the link function and insert-Link subroutine (<a href="#03bc_0007">Listing One</A> , page 41) provide a better solution.  These routines make the linking process invisible to the user and create links for each topic on-the-fly.  The link function also builds and maintains an index of all linked topics.  The linking is fast, requiring only about 15 ticks to insert a new card into the chain, quick enough that it's probably not necessary to change the cursor or otherwise notify the user.<P>
The links are stored in one or more hidden fields on each card.  The card ID is used for the links because it is guaranteed not to change if cards are added or sorted.  All of the links can be stored on different lines of a single field, but there are some performance trade-offs when HyperCard has to work harder to find the link.  <a href="199303be.htm">Figure 1</A>  compares the speed of fetching a link when it is alone in a field, when it is one of several items on a line, and when it is on a separate line.  When speed is important, it's best just to have a single link in the field.<P>
<a href="199303bf.htm">Figure 1</A> also compares the performance of HyperCard's find when there are only two characters in a search string vs.  three or more characters.  It's well known that triplet searches are quicker, but I was surprised to discover that they're over 20 times faster.  This is another advantage to using linked lists: Because we're using card IDs instead of find, there's no performance difference if there are fewer than three characters in the search string.<P>
<h3><a name="03bc_0006">Linking Your Stack<a name="03bc_0006"></h3><P>
To build your own linked lists, drop the link and insertLink functions into the stack script of your HyperCard stack.  As mentioned previously, there are advantages to using the linked lists with an index.  They provide fast search access to a card with the desired link, and also a simple way for the user to select a linked topic.<P>
These routines expect you to have a card named index with both a back ground field hiddenIndex and a card field index.  Field index only has the selectable text strings, and hiddenIndex (which obviously should be a hidden field) has three items on each line: the string that the user sees, the ID of the first card in the link, and the count of how many cards share the link.  The index field is not technically necessary, but it keeps things neat.  Both fields must have the &quot;don't wrap&quot; and &quot;lock text&quot; options turned on.<P>
When the user clicks on a line in the index field, the script looks up the string in hiddenIndex and takes the user to the first card in the linked list.  <a href="#03bc_0009"> Listing Two</A> (page 41) is the script for field index.<P>
The link handler has four parameters: name, linkf, n, and i.  The name parameter is a string to search for in field hiddenIndex on the index card.  If this name is not found, it is added to the index.  Otherwise, this card is linked into the chain of other cards that share the name string in this field.  The next three parameters, linkf, n, and i, all refer to the same background field on the card being linked.  linkf is the name of the field that holds the links, n is the line number, and i the item number for the forward link.  The backward link follows as item i + 1.<P>
If you're only linking a single field, you may want to simply have an Add Link button that prompts for a string (new or existing) and creates a new linked card for the user.  <a href="#03bc_000b">Listing Three</A> (page 41) shows what the script for this button might look like.<P>
If you have more than one object to link, you should call link whenever data has been entered; you don't want to clutter the cards with a multitude of special buttons.  When you are linking text fields, the closeField handler is an ideal time to call link because this message is sent only when something has been entered or changed in the field.<P>
Once the links are in place, you can use them for navigation.  In my HyperCard stacks, each field and group of buttons that is linked has an adjoining pair of arrows that allow the user to branch off and follow a particular link.  The scripts for these navigational arrows should read something like:<P>
<pre>  go card ID item 1 of line 3 of field links</pre><P>
where the item 1 of line 3 is the next link in that particular chain.<P>

<PRE>


_HYPERCARD DATABASE TUNING_
by Jeff Elliott

<a name="03bc_0007">
<a name="03bc_0008"></pre><B>[LISTING ONE]</B><pre><a name="03bc_0008">

-- insertLink: Subroutine for Link.  Links this card into the chain, both
-- forwards and backwards.  Does not modify the index.
-- Arguments:
--   root     card id of the first card in the chain
--   linkf     name of the bg field on this card that holds the links
--   n        line number for links in linkf
--   i        item number for FORWARD link in line n
-- returns: 0: noErr,      -1: no forward link,     -2: no back link
function insertLink  root,linkf,n,i
  --  BACKWARD link always follows FORWARD link as the next item in line n of field linkf
  put i + 1 into j
  put the short ID of this card into myself
  put item i of line n of field linkf of card id root into forward
                                                      -- set vars; who was the
  put item j of line n of field linkf of card id root into backward
                                                      -- root pointing to?
  if there is not a card id forward  then return -1
  if there is not a card id backward then return -2
  put myself into item j of line n of field linkf of card id root
                                               -- root's back is always myself
  if forward is myself then             -- it's just the 2nd card
    put myself into item i of line n of field linkf of card id root
                                               -- so my forward is also root
  else                      -- no more root changes
    put myself into item i of line n of field linkf of card id backward
                                               -- his forward is me
  end if
  -- finally, make links for myself
  put backward into item j of line n of field linkf
                                                -- my back is previously oldest
  put root into item i of line n of field linkf -- my next card is the root
  return 0
end insertLink
-- Link: called from the card that's being linked.  Before a link is added,
-- we must first lookup the name in the index. If this name isn't found,
-- then we create an index entry.  Otherwise, we link this card to the others.
-- Expects: card &quot;index&quot; with background field &quot;hiddenIndex&quot; and card field
-- &quot;index&quot; -- Arguments: name, string to lookup in (or add to) the index;
--  linkf, n, and i are the same as for subroutine insertLink.
-- returns: a success or failure message
function link   name, linkf, n, i
  put the short ID of this card into myself
  go card &quot;index&quot;
  find whole name in field &quot;hiddenIndex&quot;    -- is this name in the index?
  if the result is &quot;not found&quot; then       -- no, so add it to index
    -- first in the link, so create index entries
    -- format for hiddenIndex: string, card ID, count
    get the number of lines in field &quot;hiddenIndex&quot;
    put name &amp; &quot;,&quot; &amp; myself &amp; &quot;,&quot;  &amp; 1   B
    into line it + 1 of field &quot;hiddenIndex&quot; -- tack it onto the end
    -- card field index only has the strings
    get the number of lines in cd field &quot;index&quot;
    put name into line it + 1 of cd field &quot;index&quot;
    sort cd field &quot;index&quot;          -- make it pretty
    go back
    -- as the only card, it is just linked to itself
    put myself &amp; &quot;,&quot; &amp; myself into line n of field linkf
  else         -- the name's in the index, so we link to other cards
    add 1 to item 3 of line word 2 of the foundline B
    of field &quot;hiddenIndex&quot;       -- increase link count in index
    put item 2 of the value of the foundline into root
    go back             -- return to card being linked
    -- we're ready to link up with the other cards
    if   insertLink (root,linkf,n,i) is not 0 then
      return &quot;The links are damaged or missing.&quot; -- error exit
    end if
  end if
  return &quot;Link successful.&quot;          -- everything OK, normal exit
end link





<a name="03bc_0009">
<a name="03bc_000a"></pre><B>[LISTING TWO]</B><pre><a name="03bc_000a">

on mouseUp
   -- works only in HyperCard 2.0 or later
  find whole the value of B
  the clickline in field &quot;hiddenIndex&quot;
  go card ID item 2 of B
  the value of the foundLine
end mouseUp




<a name="03bc_000b">
<a name="03bc_000c"></pre><B>[LISTING THREE]</B><pre><a name="03bc_000c">

on mouseUp
   ask &quot;Name to add:&quot;
   if it is not empty then
      doMenu &quot;New Card&quot;
      put it into fld &quot;myName&quot;
      put link (it,&quot;links&quot;,1,1)
   end if
end mouseUp





<P>
<P>
</pre><HR><P>Copyright &copy; 1993, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
