<HTML>
<META NAME="year" CONTENT="1993">
<HEAD>
<TITLE>MAY93: A PORTABLE LIBRARY FOR EXECUTING CHILD PROCESSES</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>A PORTABLE LIBRARY FOR EXECUTING CHILD PROCESSES<a name="012b_0003"></h1><P>
<h2><a name="012b_0001"><a name="012b_0000">A multi-environment library for C programmers</h2><P>
<h3>Matt Weisfeld</h3><P>
<p><i><a name="012b_0002"><a name="012b_0000">Matt is currently employed by the Allen-Bradley Company in Highland Heights, Ohio. He is responsible for the design and development of test software on VAX/VMS, UNIX, DOS, and other platforms.  This article is an excerpt from his book, Building and Testing Portable Libraries in C, to be published by QED.  You can reach him on CompuServe at 71620,2171.</i></p><hr><P>
One of the primary advantages of the C programming language is the ease with which code can be ported between various platforms.  While the ANSI standard provides the vehicle for this portability, many useful system calls are specific to certain platforms, and consequently reduce portability.  One group of system calls not bound to a standard involves the creation and execution of child processes.  Despite their nonstandard, nonportable nature, these system calls provide a powerful tool for managing child processes.  This article presents a library of functions that make the creation and execution of child processes portable across many different computer platforms.<P>
<h3><a name="012b_0004">Portability Issues<a name="012b_0004"></h3><P>
No matter how uniform a language design attempts to be, some functions simply can't be performed on certain systems.  These limitations can be the result of either hardware or software constraints.  For example, both VMS and UNIX are multitasking; thus, a parent process can continue to execute even while one of its children is executing.  DOS, on the other hand, is not multitasking, so a parent and child cannot execute concurrently.  Because of differences like these, it is unreasonable to expect one portable call to handle all possibilities for all conceivable systems.<P>
However, it is possible to construct libraries that perform limited functionality common to many operating systems.  In this context, the objective is to have the parent create the child process, wait for a return code from the child and then, based on the result of the return code, continue execution (capabilities shared by VMS, UNIX, and DOS).  The intent is to make the function call look portable to the application program, regardless of the compiler used.<P>
<h3><a name="012b_0005">Child-process Concepts<a name="012b_0005"></h3><P>
UNIX, DOS, and VMS all require that sufficient memory exist before a child process can be created.  If this isn't the case, the system commands will fail.  Memory management is handled differently, depending on the system call invoked.  For VMS and UNIX, creating a child process is handled by a combination of system calls.  The UNIX fork() command copies the parent's memory space exactly into newly acquired memory space.  At this point two identical copies of the parent exist.  (There are times when it is desirable for two identical processes to execute concurrently.)  To initiate a new, totally distinct child, the exec() family of commands are used.  An exec() command actually overlays the process space of the duplicated parent with a new process, thus resulting in two distinct processes.  There are many flavors of the exec() command and they will all be investigated later.<P>
VMS uses a version of the fork() command called vfork().  The fork() command can be incredibly inefficient as it copies each memory address of the parent.  No process is actually created by vfork(), just some setup functions necessary for a subsequent call to an exec().fork() can be used without an exec(), but vfork() must be combined with a call to exec().  Thus, when it is not necessary to have two identical processes running asynchronously, vfork() is more efficient.  Some UNIX systems also have a vfork() command. However, one man page stated that the vfork() command will be eliminated at some point in the future because the fork() command is becoming much more efficient.  The vfork() will be used for the remainder of this discussion because it is available on both UNIX and VMS and it satisfies the functionality needs of the portable library.<P>
If the parent has no concern about the child's fate, it can proceed as if the child does not exist.  However, if the parent needs a return code from the child, it must execute a wait() command.  The wait() command will suspend the parent until the child completes and passes back a return value.  (If a parent does not execute a wait(), it may still communicate with a child via pipes and mailboxes.  These data structures have no bearing on the fork()/exec() and are beyond the scope of this article.)<P>
The basic use of fork()/exec()/wait() is shown in pseudocode in <a href="#012b_0006">Example 1</A>.  The format is a bit confusing at first.  The call to fork() actually returns values at two different times.  When fork() is initially called, it returns a 0 and enters the else part of the example where the exec() is invoked.  If the exec() is successful, control is passed back to the point of the fork(), which now returns 1. The parent can then either ignore the child and continue on its way or execute a wait() command and suspend until the child completes.<P>
<h4><a name="012b_0006">Example 1: Pseudocode illustrating fork/exec/wait.</h4><P>
<pre>
    if ( (status = fork()) ! = 0) {
        /* parent code */
        if (status &lt; 0)
                 error (fork failed);
        if (wait (&amp;child_status) == -1)
                 error (wait failed);
    } else {
        /* exec the child */
        if (exec () == -1)
                 error (exec failed);
    }</pre><P>
<P>
A UNIX exec() command can determine if a child-program image exists.  Thus, if a child executable cannot be found, the exec() will fail at the point of the call.  VMS cannot determine if the image exists.  Therefore, the exec() will appear to succeed even though the image does not exist.  The fact that the creation of the child process failed will not be reported until the status from the wait() command is inspected.<P>
The DOS exec() command behaves differently than its counterparts on VMS and UNIX.  Because DOS does not support multitasking, it is impossible for both the parent and the child to be running at the same time.  The DOS exec() command terminates the parent when the child is created.  When the exec() command is called, DOS actually overlays the parent process with that of the child.  The only way the parent can regain control is if the exec() on the child fails.  Once the child is running, the parent process cannot be recovered.<P>
DOS also provides a facility for the parent to suspend itself while the child initiates, and then re-awaken when the child process completes.  The commands to accomplish this are called spawn() commands.  DOS must find enough space for the child to occupy, or the spawn() will fail.  A sample spawn() format is shown in <a href="#012b_0007">Example 2</A>.<P>
<h4><a name="012b_0007">Example 2: Using spawn().</h4><P>
<pre>
if ((status = spawn ()) == -1 )
     error (spawn failed);</pre><P>
<P>
The DOS spawnv() command requires less code to perform a function similar to the fork()/exec()/wait().  However, the fork()/exec()/wait() affords much more flexibility.  The remainder of this discussion will focus on the VMS/UNIX exec() and the DOS spawn() family of commands.<P>
<h3><a name="012b_0008">Command Line and Environment Variables<a name="012b_0008"></h3><P>
Two types of parameters can be passed via the exec()/spawn() commands: mandatory and optional.  The mandatory parameter is the argument list by which the child is called.  The optional parameter is the environment-variable list.  The child is called in the same way any C program is called from the command line.  Recall that when accepting arguments from a command line, a program's main procedure looks like <a href="#012b_0009">Example 3</A>.<P>
<h4><a name="012b_0009">Example 3: Main procedure when accepting arguments from a command line.</h4><P>
<pre>
    main (argc, argv, envp);
    int argc;
    char *argv [];
    char *envp[];</pre><P>
<P>
The environment variables (envp) are optional.  Under normal circumstances, a child inherits most of the parent's environment attributes.  Using the environment variables in the exec()/spawn() command allows the child to be initiated within a different environment.  The variables that can be changed are HOME, TERM, PATH, and USER.<P>
<h3><a name="012b_000a">The Different Flavors of exec()/spawn()<a name="012b_000a"></h3><P>
In the previous section I mentioned that the use of the environment variable is optional.  The manner in which the environment variable is utilized depends upon which exec()/spawn() command is used.  The two primary categories are differentiated by the way the argument list is passed.  The execv()/spawnv() command format is shown in <a href="#012b_000b">Example 4(a)</A> .<P>
<h4><a name="012b_000b">Example 4: (a) execv()/spawnv() command format; (b) execl() format; (c) execl() function call; (d) hard coding the command line; (e) calling getenv using execv(); (f) argument lists when executables are kept in another directory; (g) command to utilize path information; (h) command that allows parent to change environment variables of the child.</h4><P>
<pre>
  (a)

  execv (argv[0], argv);
  spawnv(P_WAIT, argv[0], argv);

  (b)

  execl (command, command, arg 1, .... arg N, NULL);

  (c)

  execl (&quot;command&quot;, &quot;command&quot;, &quot;-x&quot;, &quot;-c&quot;, &quot;-v&quot;, NULL);
  spawnl (P_WAIT, &quot;command&quot;, &quot;command&quot;, &quot;-x&quot;, &quot;-c&quot;, &quot;-v&quot;, NULL);

  (d)

  char *argv[] = {&quot;command&quot;, &quot;-x&quot;, &quot;-c&quot;, &quot;-v&quot;, NULL};

  execv (argv[0], argv);
  spawnv (P_WAIT, argv[0], argv);

  (e)
  char *argv[] = {&quot;getenv&quot;, NULL);

  execv(argv[0], argv);
  spawnv(P_WAIT, argv[0], argv);

  (f)

  char *argv[] = {&quot;{test.exe}getenv&quot;, NULL};       /* for VMS */
  char *argv[] = {&quot;/test/bin/getenv&quot;, NULL};       /* for UNIX */
  char *argv[] = {&quot;C:\\bin\\getenv&quot;, NULL};        /* for DOS */

  (g)

  execvp(argv[0], argv);
  spawnvp(P_WAIT, argv[0], argv);

  (h)

  char *argv[] = {&quot;getenv&quot;, NULL};

  char *envp[] = { &quot;HOME = /test/home&quot;,
                   &quot;TERM = vt100&quot;,
                   &quot;PATH = /test/bin&quot;,
                   &quot;USER = test&quot;
                    NULL                       };

  execve(argv[0], argv, envp);
  spawnve(P_WAIT, argv[0], argv, envp);</pre><P>
<P>
The DOS command spawnv() has one more parameter than execv().  The Turbo C Reference Guide states that the first parameter passed with spawnv() specifies whether or not the parent should wait for the child to return, either P_WAIT or P_NOWAIT.  A later note explains that P_NOWAIT is not supported (understandable because DOS cannot support two concurrent processes).  This parameter is provided for future use; however, it still needs to be included.<P>
In all flavors of execv()/spawnv() the argument list argv must be built and its pointer passed.  (From this point on, any reference to an exec() command will cover the equivalent spawn() command.)  The command argv[0] is the first parameter.  Notice that the command is actually passed twice, once as a standalone parameter and then as the first member of the argument list.<P>
The argument list can also be passed explicitly, that is, as hard-coded strings.  This command is called execl() and its format is shown in <a href="#012b_000b">Example 4(b)</A>. Again, notice that the command is passed twice, and the list is terminated by a null.  For instance, <a href="#012b_000b">Example 4(c)</A> invokes the execl() function using command -x-c -v as the command line.<P>
There are uses for the execl() family of commands; however, the hard-coding aspects of the command make it less flexible than the execv() commands.  In fact, if you're intent on hard coding the command line, execv() can still be used; see <a href="#012b_000b">Example 4(d)</A> .  Because of this, only the execv() functions will be discussed further.<P>
When the execv() command is called, the current directory is searched for the executable specified by argv[0].  If it is not found, an error will result.  If the executable resides in another directory, the entire path must be explicitly provided.  To illustrate, a program called &quot;getenv,&quot; which simply prints out the current value of the environment variables, is called by execv(); see <a href="#012b_000b">Example 4(e)</A>.<P>
The getenv executable must reside in the current directory or the command will fail. However, assume that all program executables are kept in a directory called [test.exe] (for VMS), /test/bin (for UNIX), or C:\bin (for DOS).  The argument lists would look like <a href="#012b_000b">Example 4(f)</A>.<P>
Explicitly providing the path information is not always the most elegant solution.  There is a way to take advantage of the execution paths UNIX and DOS provide.  VMS does not provide a path, but a path variable called VAXC$PATH can be set.  The command to utilize the path information is called execvp(), which looks similar to the regular execv(); see <a href="#012b_000b">Example 4(g)</A>.<P>
The only difference is that if the executable is not found in the current directory, the PATH environment variable is searched.  In VMS, the VAXC$PATH variable can be set either at the command line or in the login.com file as define VAXC$PATH [test.exe].<P>
The last version of execv() is called execve().  This command allows the parent to change the environment variables of the child; see <a href="#012b_000b">Example 4(h)</A>.  This command will create an environment for the child without changing the environment of the parent.  All of these execv() commands have an execl() counterpart.<P>
DOS also provides a command called spawnvpe().  This command combines the functionality of execve() and execvp().  VMS and UNIX do not provide this function, but code can be added to the library to include this functionality.<P>
<h3><a name="012b_000c">Building a Portable execv()<a name="012b_000c"></h3><P>
Because the execv() command is the basis for all of the other extensions, this command will be used as an illustration.  The code for the complete library is in <a href="#012b_0011">Listing One</A> (page 90).  The intent is to create a library command, called xexecv, that will handle all of the overhead involved in creating and executing a child process.  In essence, the only code required in an application program should be: status = xexecv (argv[0], argv);.<P>
This one line of code will fork() and exec() (in UNIX and VMS) or spawn() (in DOS), execute the command, and return the proper status.<P>
The first order of business is to determine what platform the program is running on.  This is defined in the header file, exec.h, presented in <a href="#012b_0013">Listing Two</A> (page 90).  Portability issues can be addressed here, such as whether or not the platform is ANSI standard.  Once this information is known, either defined on the compilation line or in the exec.h file itself, the ifdefs in the code can handle the portability issues.<P>
After xexecv is called, the first ifdef determines whether or not the platform is DOS.  If it is, only the spawnv() command is executed.  If it is not DOS, the fork(), execv(), and wait() calls are made.  In any event, the status--whether the actual child return status or an error code--is passed back to the calling program.<P>
<h3><a name="012b_000d">Special Portability Issues<a name="012b_000d"></h3><P>
Besides the fact that execv() and spawnv() are different commands, there are other portability issues to consider.  One, the way VMS uses VAXC$PATH, has already been mentioned.  Further portability concerns pertain to compiler/ operating-system bugs, return codes, and word alignment.  As of this writing, there is a bug registered against the VMS command execvp(). The problem is that the proper value of VAXC$PATH is not returned.  The way to get around this is to use the getenv() command to obtain the information.  Then the path can be prepended to the command.  The code workaround appears in the xexecvp function in the library.  It is somewhat curious that the VMS command xexeclp does work properly.<P>
Architecture also plays a role in the lack of portability.  The program return codes for VMS and DOS differ from those of some of the UNIX platforms, at least the ones already ported to SUN/OS and HP/UX.  These UNIX systems place the return code in the high-order byte, so, to conform with the other platforms, the contents need to be shifted as: child_status = child_status &gt;&gt; 8;.<P>
The intent of the return codes poses a problem.  VMS, UNIX, and DOS have different ways of interpreting returned information.  This portability issue is dealt with in the error-handling section.<P>
The three operating systems/compilers referenced by this article are not the only ones that can be incorporated into the library.  Any operating system that supports the creation of child processes and conforms to the functionality discussed can be added.<P>
<h3><a name="012b_000e">Error Handling<a name="012b_000e"></h3><P>
Error handling is the responsibility of the calling routine, not the execv() library (which returns only status information).  This status information can be either an error code or the status of a successfully invoked child process.  The error codes are defined in the include file exec.h.  It is up to the calling program to process the return status and report any anomalies.  The error codes can be tailored to a specific application.<P>
<h3><a name="012b_000f">Sample Application<a name="012b_000f"></h3><P>
To illustrate how the execv() library works, a short example is presented.  The example program is called child.c; see <a href="#012b_0015">Listing Three</A> (page 90).  This short program tests each flavor of the execv() library: xexecv, xexecve, xexecvp.  The data structure envp holds information that will be used to alter the environment variables.  The routine convert(), which is presented in <a href="#012b_0017">Listing Four</A> (page 92), takes a (char*) command line as input and converts it into an (char**) argv structure.  A malloc, used within the convert() routine, acquires the appropriate amount of memory for the argv structure.  In this example, a command called getenv is converted into an argv list, and then is passed to the appropriate execv().  A status is passed back and checked by the routine check_status().  When the process is complete, the memory used by the argv structure is released.<P>
The program getenv is presented in <a href="#012b_0019">Listing Five</A> (page 92) and will compile on all three of the target systems.  The routine invokes the system command getenv, which displays the system's environment information.<P>
To utilize the library in an application, simply compile the modules execv.c, child.c, and convert.c, and then link all three into an executable (in this case called &quot;child&quot;). Remember, either a compiler switch or an entry in the exec.h file must define the target platform.<P>
Sample output from the program child is presented in <a href="#012b_001b">Listing Six</A>  (page 92).  Notice the output from the call to execve().  The environment variables have been altered and reflect the data defined in the data structure envp.<P>
<h3><a name="012b_0010">Conclusion<a name="012b_0010"></h3><P>
Despite the fact that C is a very portable language, portability is still a problem in some areas.  System calls, such as the execv() and spawn() family of commands, can be specific to an individual platform.  When used, these commands may obstruct portability.  These problems can be resolved with code libraries that, when linked into application programs, free the programmer from dealing with these system concerns.  With the vast number of platforms and compilers now available, it is helpful to have these libraries of reusable code ready at hand.<P>

<PRE>


_A PORTABLE LIBRARY FOR EXECUTING CHILD PROCESSES_
by Matt Weisfeld

<a name="012b_0011">
<a name="012b_0012"></pre><B>[LISTING ONE]</B><pre><a name="012b_0012">

#include &lt;stdio.h&gt;
#ifdef DOS
#include &lt;process.h&gt;
#include &lt;stdlib.h&gt;
#endif
#include &quot;exec.h&quot;

int _execv(char **argv)
{
    int status, child_status;

    /* fork off the child process */

    /* vfork returns values on two different occasions :
        1) It returns a 0 the first time it is called, before
            the exec functions is called.
        2) After the exec call is made, control is passed
           back to the parent at the point of the vfork.
    */
#ifdef DOS
    if ((child_status = spawnv(P_WAIT,argv[0],argv)) == -1) {
            return (BADEXEC);
    }
#else
    if ((status = vfork()) != 0) {
        /* after the exec, control is returned here */
        if (status &lt; 0) {
            printf (&quot;Parent: child failed\n&quot;);
            return (BADFORK);
        } else {
            printf (&quot;Parent - Waiting for child\n&quot;);
            if ((status=wait(&amp;child_status)) == -1) {
                printf (&quot;Parent: wait failed\n&quot;);
                return (BADWAIT);
            }
        }
    } else {    /* if vfork returns a 0 */
        /* execute command after the initial vfork */
        printf (&quot;Parent - Starting Child\n&quot;);
        if ((status=execv(argv[0], argv)) == -1) {
            printf (&quot;Parent: execv on child failed\n&quot;);
            return (BADEXEC);
        }
    }
#endif

#ifdef UNIX
    child_status = child_status &gt;&gt; 8;
#endif
    return (child_status);
}
int _execvp(char **argv)
{
    /* fork off the child process */
    /* vfork returns values on two different occasions :
        1) It returns a 0 the first time it is called, before
            the exec functions is called.
        2) After the exec call is made, control is passed
           back to the parent at the point of the vfork.
    */
    int status, child_status;
    int pathlen,comlen;

    char *path;
    char *command;
    /* This code has to be here, if it is within the vfork domain, then any
       error return code will be interpreted as an error from the child. */

#ifdef VMS
    if ( (path = getenv(&quot;CHILD$PATH&quot;)) == NULL) {;
        printf (&quot;Error: CHILD$PATH not defined\n&quot;);
        return(BADPATH);
    }
    pathlen = strlen (path);
    comlen  = strlen (argv[0]);

    if ( (command = malloc(pathlen+comlen+1)) == NULL) {
        printf (&quot;Error: malloc failed\n&quot;);
        return(BADMALLOC);
    }
    strcpy (command, path);
    strcat (command, argv[0]);
    argv[0] = command;

    printf (&quot;command = %s\n&quot;, command);
#endif

#ifdef DOS
    if ((child_status = spawnvp(P_WAIT,argv[0],argv)) == -1) {
            return (BADEXEC);
    }
#else
    if ((status = vfork()) != 0) {
        /* after the exec, control is returned here */
        if (status &lt; 0) {
            printf (&quot;Parent: child failed\n&quot;);
            return (BADFORK);
        } else {
            printf (&quot;Parent - Waiting for child\n&quot;);

            if ((status=wait(&amp;child_status)) == -1) {
                printf (&quot;Parent: wait failed\n&quot;);
                return (BADWAIT);
            }
        }
    } else {    /* if vfork returns a 0 */
        /* execute command after the initial vfork */
        printf (&quot;Parent - Starting Child\n&quot;);

#ifdef VMS
        if ((status=execv(argv[0], argv)) == -1) {
#else
        if ((status=execvp(argv[0], argv)) == -1) {
#endif
            printf (&quot;Parent: execv on child failed\n&quot;);
            return (BADEXEC);
        }
    }
#endif

#ifdef UNIX
    child_status = child_status &gt;&gt; 8;
#endif
    return (child_status);
}
int _execve(char **argv, char **envp)
{
    int status, child_status;
    /* fork off the child process */

    /* vfork returns values on two different occasions :
        1) It returns a 0 the first time it is called, before
            the exec functions is called.
        2) After the exec call is made, control is passed
           back to the parent at the point of the vfork.
    */

#ifdef DOS
    if ((child_status = spawnve(P_WAIT,argv[0],argv,envp)) == -1) {
            return (BADEXEC);
    }
#else
    if ((status = vfork()) != 0) {
        /* after the exec, control is returned here */
        if (status &lt; 0) {
            printf (&quot;Parent: child failed\n&quot;);
            return (BADFORK);
        } else {
            printf (&quot;Parent - Waiting for child\n&quot;);
            if ((status=wait(&amp;child_status)) == -1) {
                printf (&quot;Parent: wait failed\n&quot;);
                return (BADWAIT);
            }
        }
    } else {    /* if vfork returns a 0 */
        /* execute command after the initial vfork */
        printf (&quot;Parent - Starting Child\n&quot;);

        if ((status=execve(argv[0], argv, envp)) == -1) {
            printf (&quot;Parent: execve on child failed\n&quot;);
            return (BADEXEC);
        }
    }
#endif

#ifdef UNIX
    child_status = child_status &gt;&gt; 8;
#endif
    return (child_status);
}





<a name="012b_0013">
<a name="012b_0014"></pre><B>[LISTING TWO]</B><pre><a name="012b_0014">

/* One of the following must be defined here or on the compile line
#define DOS 1
#define UNIX 1
*/

#define VMS 1

#define BADFORK   -1
#define BADEXEC   -2
#define BADWAIT   -3
#define BADPATH   -4
#define BADMALLOC -5





<a name="012b_0015">
<a name="012b_0016"></pre><B>[LISTING THREE]</B><pre><a name="012b_0016">

#include &lt;stdio.h&gt;
#include &lt;stdarg.h&gt;
#include &quot;exec.h&quot;

char envp1[50] = &quot;HOME=sys$sysdevice:[weisfeld]&quot;;
char envp2[50] = &quot;TERM=vt100&quot;;
char envp3[50] = &quot;PATH=sys$sysdevice:[weisfeld.exe]&quot;;
char envp4[50] = &quot;USER=test&quot;;

int main()
{
    int status, child_status;

    char **argv;
    char *envp[6];

    envp[0] = envp1;
    envp[1] = envp2;
    envp[2] = envp3;
    envp[3] = envp4;
    envp[4] = 0;


    printf (&quot;CALL EXECV\n&quot;);
    argv = (char *)convert(&quot;getenv&quot;);
    status = _execv(argv);
    check_status(status);
    free (argv);

    printf (&quot;CALL EXECVE\n&quot;);
    argv = (char *)convert(&quot;getenv&quot;);
    status = _execve(argv, envp);
    check_status(status);
    free (argv);

    printf (&quot;CALL EXECVP\n&quot;);
    argv = (char *)convert(&quot;getenv&quot;);
    status = _execvp(argv);
    check_status(status);
    free (argv);

    return;
}

check_status(status)
int status;
{
    switch(status) {
        case BADFORK:
            printf (&quot;Error: bad fork\n&quot;);
        break;
        case BADEXEC:
            printf (&quot;Error: bad exec\n&quot;);
        break;
        case BADWAIT:
            printf (&quot;Error: bad wait\n&quot;);
        break;
        case BADPATH:
            printf (&quot;Error: bad path\n&quot;);
        break;
        case BADMALLOC:
            printf (&quot;Error: bad malloc\n&quot;);
        break;
        default:
            printf (&quot;Child status = %d\n&quot;, status);
        break;
    }
}





<a name="012b_0017">
<a name="012b_0018"></pre><B>[LISTING FOUR]</B><pre><a name="012b_0018">

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;ctype.h&gt;

#define EXIT_NORMAL  1
#define EXIT_ERROR   5

/* convert line to 'c' like argv */
char **convert(char *ptr)
{
    static char buffer[100];
    char *bufptr;
    int offset = 0;
    int counter = 0;
    char **argv;

    strcpy (buffer, ptr);

    bufptr = &amp;buffer;

    for (;;) {
        /* bypass white space */
        while (isspace(*bufptr)) {
            bufptr++;
        }
        /* if we have a null string break out of loop */
        if (*bufptr == '\0')
            break;
        counter++;
        /* continue until white space of string terminator is found */
        while ((!isspace(*bufptr)) &amp;&amp; (*bufptr != '\0')) {
            bufptr++;
        }
    }
    /* get space for argument */

      if ((argv = (char **)calloc(counter+1, sizeof(char *))) == (char **) 0) {
        printf (&quot;Error: no space available\n&quot;);
        return (EXIT_ERROR);
    }
    bufptr = &amp;buffer;
    /* build argument */
    for (;;) {
        while (isspace(*bufptr)) {
            *bufptr = '\0';
            bufptr++;
        }
        if (*bufptr == '\0')
            break;
        *(argv + offset++) = bufptr;
        while ((!isspace(*++bufptr)) &amp;&amp; (*bufptr != '\0'));
    }
    /* return all the arguments */
    return(argv);
}





<a name="012b_0019">
<a name="012b_001a"></pre><B>[LISTING FIVE]</B><pre><a name="012b_001a">

#include &lt;stdio.h&gt;

#define EXIT_NORMAL 1

main()
{
    char  *logical;

    logical = getenv(&quot;HOME&quot;);
    printf (&quot;HOME = %s\n&quot;, logical);
    logical = getenv(&quot;TERM&quot;);
    printf (&quot;TERM = %s\n&quot;, logical);
    logical = getenv(&quot;PATH&quot;);
    printf (&quot;PATH = %s\n&quot;, logical);
    logical = getenv(&quot;USER&quot;);
    printf (&quot;USER = %s\n&quot;, logical);

    return(EXIT_NORMAL);
}




<a name="012b_001b">
<a name="012b_001c"></pre><B>[LISTING SIX]</B><pre><a name="012b_001c">

CALL EXECV
Parent - Starting Child
HOME = sys$sysdevice:[weisfeld]
TERM = vt300-80
PATH = sys$sysdevice:[weisfeld.test]
USER = WEISFELD
Child status = 1
CALL EXECVE
Parent - Starting Child
HOME = sys$sysdevice:[weisfeld]
TERM = vt100
PATH = sys$sysdevice:[weisfeld.exe]
USER = test
Child status = 1
CALL EXECVP
command = [WEISFELD.EXE]getenv
Parent - Starting Child
HOME = sys$sysdevice:[weisfeld]
TERM = vt300-80
PATH = sys$sysdevice:[weisfeld.test]
USER = WEISFELD
Child status = 1


<P>
</pre><HR><P>Copyright &copy; 1993, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
