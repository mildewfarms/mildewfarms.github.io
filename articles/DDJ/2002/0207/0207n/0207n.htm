<html><head><title>Jul02: Dr. Ecco's Omniheurist Corner</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>Nanomunchers</h1><p><i>Dr. Dobb's Journal</i> July 2002</p><h3>By Dennis E. Shasha</h3><I>Dennis, a professor of computer science at New York University, is the author of </i>The Puzzling Adventures of Dr. Ecco<i> (Dover, 1998); </i>Codes, Puzzles, and Conspiracy<i> (W.H. Freeman &amp; Co., 1992); </i>Database Tuning: A Principled Approach</i> (Prentice Hall, 1992); (coauthored with Jason Wang and Bruce Shapiro) Pattern Discovery in </i>Biomolecular Data: Tools, Techniques, and Applications<i>  (Oxford University Press, 1999); and (coauthored with Cathy Lazere) Out of Their </i>Minds: The Lives and Discoveries of 15 Great Computer Scientists<i> (Springer-Verlag, 1998). He can be contacted at <a href="mailto:DrEcco@ddj.com">DrEcco@ddj.com</a>.</I><hr><p>We had heard of Dr. Robert Hatchett. A world authority on bioterrorism and toxic waste disposal, he exuded a sense of ironic good humor at the over-hyped technology he heard about every day.</p><p>"Nanomachines in science fiction play the role of magic," he said with a smile. "If one needs a super-flexible robot, a swarm of nanomachines fits the bill. If one needs extra-sensory perception, nanomachines can do that, too. The foreseeable reality, however, suggests that nanomachines have pico-intelligence.</p><DDJADVERTISEMENT INLINE><p>"In fact, the nanomunching machines we are planning to deploy for hazardous waste disposal will follow a trivial program of the form:</p><pre><p>eat at start position<br>loop<br>  if there is something to eat to the left<br>        then go there and eat it<br>  if there is something to eat above<br>        then go there and eat it<br>  if there is something to eat to the right<br>        then go there and eat it<br>  if there is something to eat below<br>        then go there and eat it<br>end loop<br></pre><p>"We abbreviate such a loop as left, up, right, down. Because the nanomuncher gets its nutrients from what it eats, it won't visit a node that it has already eaten or that another nanomuncher has partly eaten. The nanomuncher will not even go through that node. All it will do is keep following the loop on the graph it is assigned to until it can't continue.</p><p>"Note that the loop keeps its 'program counter' position after each move. So if you start at<i> A</i> and go left to <i>B,</i> you will first try to go up from <i>B</i>. If not possible then right, if not possible then down, if not possible then left. If none are possible, then<i> B</i> is called a black hole and the nanomuncher will disintegrate. The goal is to eat at every node in a given graph before entering a black hole. If you succeed, then you have 'munched' the graph.</p><p>"You are allowed to choose the first node and to choose the order in the loop. So a loop might be right, up, left, down, for example."</p><p>"I see that both can make a difference," 14-year-old Liane volunteered. "Consider <IMG SRC="0207n1.gif" ALIGN="bottom">. If you start at<i> B</i>, then you will surely lose, no matter what your loop is. If you start at<i> A</i> or <i>C</i>, you will win, regardless of the order in the loop.</p><p>"Here is an example in which the order makes a difference. Suppose you have: </p><IMG SRC="0207n2.gif"><p>If you start at </i><i>C</i>, then you will win if the loop is down, right, up, left (or anything else that starts with down), but not if it is right, down,...(or anything else that starts with right)."</p><p>"Very fast on the uptake, young lady," said Hatchett. "Perhaps you can answer this one: What is the connected graph with the fewest nodes that cannot be munched, no matter what the order or what the starting point?"</p><p><i></p><p>Reader: Before reading on, give it a shot.</i></p><p>Liane thought about this for a few seconds. "Any two or three node graph must constitute a single path, which can obviously be munched," she said. "So the smallest impossible connected graph must have four nodes:"</p><IMG SRC="0207n3.gif"><p>"Well done again," said Hatchett. "Now, here are a bunch of questions.<i> </i>Are there any shapes having the property that even an arbitrarily large graph of that shape has a solution, regardless of the start node and regardless of the order of the loop?"<i></p><p>Reader: Would you like to try this one?</i></p><p>"Are there graphs that are munchable with two nanomunchers (with different starting points and possibly different loop orderings) but not with one?" Hatchett asked. "You can assume that if a nanomuncher arrives at a node already occupied by another, it will retreat. If two nanomunchers reach an uneaten node at the same time, the one coming from a lower node will retreat; if they both come from nodes at the same height, then the one to the left will retreat. You may not assume any other synchronization nor may you assume that different nanomunchers work at the same speed."</p><p><i></p><p>Reader: What do you say about this (pretty easy) one?</i></p><p>"How about vice versa; for instance, some graph that two nanomunchers can't munch but one can?" he continued. "For this to be true, there must be a successful start node and loop configuration for one nanomuncher, but none for two nanomunchers. (It's not enough to find one unsuccessful configuration for two nanomunchers. All configurations must be unsuccessful.)" </p><p><i></p><p>Reader: This one is open. Do you have thoughts?</i></p><p>"You have posed many interesting questions," Ecco said with a smile. "Is there one question that you are most concerned about?" </p><p>"Well, two actually," Hatchett responded. "You see here in <A NAME="rf1"><A HREF="0207nf1.htm">Figure 1</A> a graph that is a portion of a grid. Can you munch it? </p><p>"Second, we will often be faced with grids of various vertical and horizontal dimensions. Which ones are munchable by a single nanomuncher and how?"</p><p>"I take it that a grid is a two-dimensional <i>n</i>x<i>m</i> checkerboard configuration, right?" Liane asked.</p><p>Hatchett nodded.</p><p>Liane took longer on this one. "I can arrange to munch any <i>n</i>x1, <i>n</i>x2, or <i>n</i>x3 grid. I can also handle any <i>nm</i> grid when both <i>n</i> and <i>m</i> are odd. I'm not sure about the others."</p><p><i></p><p>Reader: Can you match Liane's achievement? Can you determine whether all </i>nxm<i> grids are munchable? Would your answer change if you had two nanomunchers?</i> </p><h3>Last Month's Solution</h3><p>The goal was to find the number <i>k</i> (5 in Liane's solution) such that all numbers between 1 to <i>n</i> (57 in Liane's solution) could be expressed using only arithmetic operators and using under 5 (a coincidence) members of <i>k</i>. In this case, the average cost was 4.98. The method Liane used was quite brute force. She explored each generator between 3 and 20. For each generator <i>k</i>, she seeded a dynamic programming algorithm with the generator for 1(<i>k</i>/<i>k</i>) and 2(<i>k</i>+<i>k</i>/<i>k</i>). Then for any value <i>i</i>, her program would explore every addition and multiplication possibility involving numbers less than <i>i</i>, and every subtraction and division possibility greater than <i>i</i>. </p><blockquote><p>1: 5/5</p><p>2: (5+5)/5</p><p>3: (5+(5+5))/5</p><p>4: 5-(5/5)</p><p>5: 5</p><p>6: (5/5)+5</p><p>7: ((5+5)/5)+5</p><p>8: (5+5)-((5+5)/5)</p><p>9: (5+5)-(5/5)</p><p>10: 5+5</p><p>11: (5/5)+(5+5)</p><p>12: ((5+5)/5)+(5+5)</p><p>13: (5+(5+5))-((5+5)/5)</p><p>14: (5+(5+5))-(5/5)</p><p>15: 5+(5+5)</p><p>16: (5/5)+(5+(5+5))</p><p>17: ((5+5)/5)+(5+(5+5))</p><p>18: (5*5)-(((5+5)/5)+5)</p><p>19: (5*5)-((5/5)+5)</p><p>20: (5*5)-5</p><p>21: ((5/5)+(5*5))-5</p><p>22: (((5+5)/5)+(5*5))-5</p><p>23: (5*5)-((5+5)/5)</p><p>24: (5*5)-(5/5)</p><p>25: 5*5</p><p>26: (5/5)+(5*5)</p><p>27: ((5+5)/5)+(5*5)</p><p>28: (5+(5*5))-((5+5)/5)</p><p>29: (5+(5*5))-(5/5)</p><p>30: 5+(5*5)</p><p>31: (5/5)+(5+(5*5))</p><p>32: ((5+5)/5)+(5+(5*5))</p><p>33: (5+(5+(5*5)))-((5+5)/5)</p><p>34: (5+(5+(5*5)))-(5/5)</p><p>35: 5+(5+(5*5))</p><p>36: (5/5)+(5+(5+(5*5)))</p><p>37: ((5+5)/5)+(5+(5+(5*5)))</p><p>38: (5*(5+5))-(((5+5)/5)+(5+5))</p><p>39: (5*(5+5))-((5/5)+(5+5))</p><p>40: 5+(5+(5+(5*5)))</p><p>41: (5/5)+(5+(5+(5+(5*5))))</p><p>42: ((5/5)+5)*(((5+5)/5)+5)</p><p>43: (5*(5+5))-(((5+5)/5)+5)</p><p>44: (5*(5+5))-((5/5)+5)</p><p>45: (5*(5+5))-5</p><p>46: ((5/5)+(5*(5+5)))-5</p><p>47: (((5+5)/5)+(5*(5+5)))-5</p><p>48: (5*(5+5))-((5+5)/5)</p><p>49: (5*(5+5))-(5/5)</p><p>50: 5*(5+5)</p><p>51: (5/5)+(5*(5+5))</p><p>52: ((5+5)/5)+(5*(5+5))</p><p>53: (5+(5*(5+5)))-((5+5)/5)</p><p>54: (5+(5*(5+5)))-(5/5)</p><p>55: 5+(5*(5+5))</p><p>56: (5/5)+(5+(5*(5+5)))</p><p>57: ((5+5)/5)+(5+(5*(5+5)))</p></blockquote><p>If you may use an average of 6 numbers, then it is possible to handle all numbers from 1 to 121. The average here is exactly 6. (The solution is available electronically; see "Resource Center," page 5.) It is interesting that 4 works better than 5 for this. The best solution for 7, where 308 was possible using 6 as a generator, is also available electronically.</p><h3>Reader Notes</h3><p>Before discussing the solutions to the Color War puzzle (<i>DDJ</i>, April 2002), I should mention that the inspiration for the model underlying this puzzle came from Aris Tsirigos's masters thesis at Cornell.</p><p>Clever readers found some excellent solutions to the problem. The best came from Robert Byard, Nicholas Singer, Shawn B. Nematbakhsh, Pike Enz, Andrew Palfreyman, Leif Jensen, Warren Dougherty, Douglas Wilson, Jason Strickland, John Trono, and Dennis Okon.</p><p>Byard was the first to offer the optimal solution for Blue, distributing 162, 171, 192, 219, 256, 0, 0, 0, 0, and 0 to the players in descending order of their initial probability to win. Once again, the best runners don't get the most tickets. The expected result after three tackles is 537.60. He also pointed out that double targeting doesn't help Red.</p><p>The techniques readers used to tackle the problem varied: Byard used spreadsheets; Jensen, linear programming; Wilson, a genetic algorithm; Strickland, exhaustive search; and Trono, simulated annealing. Who would have thought Color War could lead to so much thought? </p><p><b>DDJ</b></p></body></html>