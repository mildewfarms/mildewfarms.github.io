<html><head><title>Jul02: Programmer's Bookshelf</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>Mathematics &amp; C++</h1><p><i>Dr. Dobb's Journal</i> July 2002</p><h3>By Peter N. Roth</h3><I>Peter is president of Engineering Objects International, producers of commercial and custom components for Delphi, C++ and Microsoft Office. He can be contacted at <a href="mailto:peteroth@erols.com">peteroth@erols.com</a> and <a href="http://engineeringobjects.com/">http://engineeringobjects.com/</a>.</I><hr><h4><br><b><i>Precise Numerical Methods Using C++</b></i><br>Oliver Aberth <br>Academic Press, 1998<br>368 pp., $63.00 <br>ISBN 0120417502 <br><b><br><i>An Introduction to Numerical Methods in C++</b></i><br>Brian Hilton Flowers<br>Oxford University Press, 2000<br>576 pp., $65.00 <br>ISBN 0198506937 <br></h4><p>When I look for books on mathematics, I expect them to include theory, some numerical applications of the theory with error estimates, and references. If it's a textbook, it needs to have end-of-chapter exercises, along with the answers. If the book also involves C++, it should be modern (post 1998), as standard as possible, and use the library and templates. It might take a shot at using <i>std::valarray&lt;&gt;</i>, but if not, it will at least use <i>std::vector&lt;&gt;</i> for the pedestrian tasks. Finally, it will provide plug-in sample code from a CD-ROM or web site, where "sample" is to be read "cheap code that I don't have to write."</p><p>Oliver Aberth is an emeritus professor at the Texas A&amp;M University Mathematics Department, and his <i>Precise Numerical Methods Using C++</i> is the more "mathy" of the books I examine here. It's a good intro to numerical work that concentrates first on the standard mathematical functions, <i>viz.</i>, <i>sin()</i>, <i>cos()</i>, and so on, and then moves on to derivatives, integrals, finding zeroes, optimization, and linear algebra.</p><DDJADVERTISEMENT INLINE><p>I particularly liked the idea of solvable and nonsolvable problems in numerical analysis. As an example of a nonsolvable problem: For any real number <i>a</i>, decide whether or not <i>a</i> equals 0. Notwithstanding Seymour Cray's hardwiring of 0.0 into his machines (he knew that there was a zero), the ramifications of Aberth's idea is that floating-point calculations should be done to a specified precision, and that computational problems should be stated such that nonsolvability is avoided. The book uses range arithmetic to avoid the difficulty, but such approaches seem too slow for production number-crunching work.</p><p>If you teach from this book, you'll want to read more than a day ahead so you can prepare exercises for your students &#151; there are none suggested.</p><p>The source code accompanying <i>Precise Numerical Methods Using C++</i> consists of 21,834 lines of C++ on a CD-ROM that's bundled with the book. The same code can be downloaded from the author's web site, the only difference being an additional TEX document file. The code introduces classes for rational arithmetic that allow for long integers. The format of some modules leads me to believe that C++ is not the author's native tongue: Files are "chained" like those ancient Basic programs on paper tape; the last lines in some files are <i>#include "someotherfile.cpp"</i>. I spent a couple of hours trying to get the code to compile with Borland C++Builder 5 to no avail, and finally gave up. You will need some patience to deduce the structure of the code: Namespaces aren't used, the Standard Library complex and string classes are rewritten, and the C++ memory allocation system is replaced. In short, this book is a keeper for the mathematics, but fails the code test.<i></p><p>An Introduction to Numerical Methods in C++</i>, by Brian Hilton Flowers, is a revision of the 1995 edition of the book. Lord Flowers, fellow and former Rector of the Imperial College at the University of London, is a man of some curiosity, and likes to get his hands dirty finding out how things work. His chosen subset of C++ omits virtual functions (and hence polymorphism) and exceptions. The Standard Library is almost completely ignored; &lt;math.h&gt; is as far as it goes. Templates are used in the generation of a linked list class. For the mathematical details, you are often referred to the text by K.E. Atkinson, so Flowers's text is more of an applied than theoretical treatment.</p><p>The first two chapters define the C++ language subset to be used. Thence the text discusses typical introductory numerical material: errors, finding zeroes, differential equations, matrix operations, and so on. A class for rational arithmetic is also presented, but it is limited to the accuracy of <i>long</i>. Vector and matrix classes are also presented, but the destructor is incorrect.</p><p>Flowers's chosen implementation is Borland's DOS-based Turbo C++, which is, at this time, far from the "standard." On the other hand, this choice is what I would expect from a "hobbyist programmer" &#151; someone who works alone, and as Flowers mentions in the Preface &#151; "someone who wants to know how things work, rather than simply using a black box." Since the reference is to Turbo C++PL Edition 1, the text code is very close to C. The code is copious in the text, but it is old code. There is no CD-ROM or web site.</p><p><b>DDJ</b></p></body></html>