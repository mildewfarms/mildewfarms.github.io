<html>
<head>
<title>Mar02: C99 & Numeric Computing</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>C99 &amp; Numeric Computing</h1>
<p><i>Dr. Dobb's Journal</i> March 2002</p>
<h2>Scientific computing in real and complex domains</h2>

<h3>By Harry H. Cheng</h3>

<I>
Harry is an associate professor and director of the Integration Engineering Lab at the University of California Davis. He can be contacted at <a href="mailto:hhcheng@ucdavis.edu">hhcheng@ucdavis.edu</a>.</I>

<hr>

<p>Although C is a powerful systems programming language that can deliver much of the same control over devices as assembly language, it has deficiencies when it comes to scientific and engineering applications that require extensive numerical computing. While some numerical computing deficiencies in the original K&amp;R C were addressed in C90, many limitations still remain.</p>
<p>C99, ratified as the ANSI/ISO C Standard (ISO/IEC IS 9899), is a milestone in C's evolution into a viable programming language for scientific and numerical computing. Among other features, C99 supports IEEE floating-point arithmetic, complex numbers, and variable-length arrays (VLAs) for numerical programming. Complex numbers and VLAs were added mainly based on the prior art of implementation of Ch from SoftIntegration (<a href="http://www.softintegration.com/docs/whitepaper/">http://www.softintegration.com/docs/whitepaper/</a>), SCC from Cray Research (<a href="http://www.cray.com/">http://www.cray.com/</a>), gcc from Free Software Foundation (<a href="http://www.gnu.org/">http://www.gnu.org/</a>), and others.</p>
<DDJADVERTISEMENT INLINE>

<p>Although support for C99 is limited, more compilers are adding these new features. For example, Comeau C 4.2.45.2 from Comeau Computing (<a href="http://www.comeaucomputing.com/features.html#c99">http://www.comeaucomputing.com/features.html#c99</a>) supports VLAs without complex numbers. The C compiler from Hewlett-Packard supports VLAs and complex numbers. GCC 2.95 and later (<a href="http://gcc.gnu.org/c99status.html">http://gcc.gnu.org/c99status.html</a>) provide limited support of VLAs and complex numbers. The Dinkum C99 Library from Dinkumware (<a href="http://www.dinkumware.com/">http://www.dinkumware.com/</a>) is a complete library for C99.</p>

<p>Complex numbers are handled as built-in data types in C. With C++, on the other hand, complex numbers are treated as classes. For example, Forte C++ 6 Update 2 (formerly Sun Visual WorkShop C++; <a href="http://www.sun.com/forte/cplusplus/index.html">http://www.sun.com/forte/cplusplus/index.html</a>) provides some support for complex arithmetic. Still, there is no provision for IEEE floating-point arithmetic for both real numbers and complex numbers in C++.</p>

<p>In this article, I'll examine what's involved with C99 compliance by looking at Ch, a C virtual machine produced by SoftIntegration, a company I founded (<a href="http://www.softintegration.com/">http://www.softintegration.com/</a>). Ch has provisions for consistent handling of numerical numbers in the entire real and complex domains with VLAs under the framework of IEEE floating-point arithmetic. As a superset of C interpreter, Ch also supports classes in C++. In particular, I'll focus on the design and implementation of IEEE floating-point arithmetic and complex numbers.</p>

<p>Ch was designed for script computing in the framework of C/C++. C or C++ conforming programs with complex numbers will run in this virtual machine without modification. I've tested all C programs presented here with both Ch and GCC 2.96, and C++ programs with Ch and G++ 2.95.</p>



<h3>Computing in the Entire Real Domain</h3>


<p>The IEEE 754 standard for binary floating-point arithmetic is significant for consistent floating-point arithmetic with respect to real numbers. IEEE 754 distinguishes +0.0 from -0.0, which introduces additional programming complexity. Another important IEEE 754 feature is the internal representations for the mathematical infinities and invalid values. The mathematical infinity <IMG SRC="infinity.gif"> is represented by <i>Inf</i>. A mathematically indeterminate or an undefined value such as division of zero by zero is represented by <i>NaN</i> (short for "Not-a-Number"). Many computers support in-hardware signed zeros, infinity, and <i>NaN</i>. However, information about low-level and limited high-level instruction sets provided by hardware vendors may not be relevant to application programmers, and most features of a final system depend on the software implementation. Even for IEEE machines, there is no provision for propagating via software the sign of zeros, infinity, and <i>NaN</i> in a consistent and useful manner. They must be programmed as if zeros were unsigned, without infinity and <i>NaN</i>. Based on IEEE machines, some vendors provide software support for IEEE 754 through libraries. However, these special values in libraries are not transparent to programmers. Although the application of symbols such as <i>Inf</i> and <i>NaN</i> can be found in some mathematical packages and libraries, vendor handling of these special numbers is often flawed. These are the gray areas in which IEEE 754 is not supported in many hardware and software systems.</p>


<p>To make the power of IEEE 754 easily available to you, C99 introduced the floating-point numbers INFINITY, -INFINITY, NAN, and signed zeros -0.0 and 0.0. In Ch, INFINITY and NAN &#151; which correspond to the built-in metanumbers <i>Inf</i> and <i>NaN</i> &#151; are defined as macros in the header file math.h. For convenience, I use the metanumbers <i>Inf</i> and <i>NaN,</i> which are transparent to programmers. Signed zeros (+0.0 and -0.0) in C99 behave like correctly signed infinitesimal quantities 0+ and 0-, whereas symbols <i>Inf</i> and <i>-Inf</i> correspond to mathematical infinities <IMG SRC="infinity.gif"> and -<IMG SRC="infinity.gif">, respectively. IEEE 754 only addresses the arithmetic involving these metanumbers. These metanumbers are extended in C99 to commonly used mathematical functions in the spirit of IEEE 754. Ch includes provisions for consistent handling of metanumbers in I/O, arithmetic, relational and logic operations, and polymorphic mathematical functions. An <i>NaN</i> is propagated consistently through subsequent computations. Many people believe the C99 committee errored in handling some mathematical functions. For example, the values of function calls for <i>hypot(Inf,NaN)</i>, <i>hypot(-Inf,NaN)</i>, <i>pow(1,NaN)</i>, and <i>pow(NaN,+/-0.0)</i> are defined in C99 as <i>Inf</i>, <i>Inf</i>, 1.0, and 1.0, respectively. In Ch, I implement them to return <i>NaN</i> because these functions are mathematically undefined for the arguments with the aforementioned values.</p>

<p>For real numbers, C99 distinguishes -0.0 from 0.0. The metanumbers 0.0, -0.0, <i>Inf</i>, <i>-Inf</i>, and <i>NaN</i> are useful for scientific computing. For example, the function <i>f(x)=e</i><i><sup>1/x</i></sup> is not continuous at the origin; see <A NAME="rf1"><A HREF="0203bf1.htm">Figure 1</A>. This discontinuity can be handled gracefully in C99. The evaluation of the expression <i>exp(1/0.0)</i> returns <i>Inf</i> and <i>exp(1/(-0.0))</i> gives 0.0, which corresponds to mathematical expressions <i>e</i><i><sup>1/0</i></sup><i><sub>+</i></sub> and <i>e</i><i><sup>1/0</i></sup><i><sub>-</i></sub><i> </i>or <i>lim</i><i><sub>x<IMG SRC="arrow12.gif">0</i></sub><i>+e</i><i><sup>1/x</i></sup> and <i>lim </i><i><sub>x<IMG SRC="arrow12.gif">0-</i></sub><i>e</i><i><sup>1/x</i></sup>, respectively. In addition, the evaluation of expressions <i>exp(1.0/Inf)</i> and <i>exp(1.0/(-Inf))</i> get the value of 1.0. Likewise, the function <i>finite(x)</i> recommended by IEEE 754 is equivalent to the expression <i>-Inf&lt;x&amp;&amp;x&lt;Inf</i>, where <i>x</i> can be a <i>float</i>/<i>double</i> variable or expression. If <i>x</i> is a <i>float</i>, <i>-Inf&lt;x&amp;&amp;x&lt;Inf</i> is equivalent to <i>-FLT_MAX<IMG SRC="lteq12.gif">x&amp;&amp;x<IMG SRC="lteq12.gif">FLT_MAX</i>; if <i>x</i> is a <i>double</i>, <i>-Inf&lt;x&amp;&amp;x&lt;Inf</i> is equivalent to <i>-DBL_MAX<IMG SRC="lteq12.gif">x&amp;&amp;x<IMG SRC="lteq12.gif">DBL_MAX;</i>. The mathematical statement "if -&lt;value <IMG SRC="lteq12.gif"><IMG SRC="infinity.gif">, then <i>y</i> becomes <IMG SRC="infinity.gif">" can be programmed like this:</p>

<blockquote><p>
if(-Inf &lt; value &amp;&amp; value &lt;= Inf) y = Inf;</p>

</blockquote>

<p>However, computers can only evaluate expressions step by step. Although the metanumbers are limits of the floating-point numbers, they cannot replace mathematical analysis. For example, the natural number <i>e</i> equal to 2.718281828... is defined as the limit value of the expression in <A NAME="re1"><A HREF="0203be1.htm">Example 1</A>(a). But the value of the expression <i>pow(1.0 + 1.0/Inf, Inf)</i> is <i>NaN</i>. The evaluation of this expression is carried out like <A NAME="re1"><A HREF="0203be1.htm">Example 1</A>(b). If the value <i>FLT_MAX</i> is used here instead of <i>Inf</i>, the result is obtained by <A NAME="re1"><A HREF="0203be1.htm">Example 1</A>(c). Because the metanumber <i>NaN</i> is unordered, a program involving relational operations should be handled cautiously. For example, the expression <i>x&gt;y</i> is not equivalent to <i>!(x&lt;= y)</i> if either <i>x</i> or <i>y</i> is an <i>NaN</i>. Likewise, <A NAME="re2"><A HREF="0203be2.htm">Example 2</A>(a) is different from the code in <A NAME="re2"><A HREF="0203be2.htm">Example 2</A>(b). The second <i>if</i> statement should be written as <i>if(x<IMG SRC="lteq12.gif">0.0||isnan(x))</i> to have the same functionality for these two code fragments. </p>

<p>The metanumbers 0.0, -0.0, <i>Inf</i>, <i>-Inf</i>, and <i>NaN</i> are useful for applications in engineering. For example, the discontinuity at the origin can be expressed using signed zeros. The infinity of mechanical advantage at a toggling position for a four-bar linkage can be written as <i>Inf</i>. If no solution exists for output link corresponding to a given input link position of a four-bar linkage, the solution can be represented symbolically as <i>NaN</i>.</p>



<h3>Computing in the Entire Complex Domain</h3>


<p>Complex numbers <i>z</i><IMG SRC="memof12.gif"><i><b>C</i></b>={(<i>x,y</i>)|<i>x,y</i><IMG SRC="memof12.gif"><i><b>R</i></b>} can be defined as ordered pairs <i>z=(x,y)</i> with specific addition and multiplication rules. The real numbers <i>x</i> and <i>y</i> are called the "real" and "imaginary" parts of <i>z</i>. If you identify the pair of <i>(x,0.0)</i> as the real numbers, the real number <i><b>R</i></b> is a subset of <i><b>C</i></b>; that is, <i><b>R</i></b>={(<i>x,y</i>)|<i>x</i><IMG SRC="memof12.gif"><i><b>R</i></b>, <i>y</i>=0.0} and <i><b>R</i></b><IMG SRC="cimage.gif"><i><b>C</i></b>. If a real number is considered either as <i>x</i> or <i>(x,</i>0.0) and let <i>i</i> denote the pure imaginary number <i>(</i>0,1<i>)</i> with <i>i</i>*<i>i=-1</i>, complex numbers can be mathematically represented as <i>z=x+iy</i>.</p>


<p>Complex numbers have wide applications in engineering and science. Due to their importance in scientific programming, numerically oriented languages and packages usually provide complex number support in one way or another. Fortran, for example, has long provided complex data types. Computations involving complex numbers can be accomplished using a data structure in C90. However, programming with such a structure is clumsy because a corresponding function has to be invoked for each operation. With C++, classes for complex numbers can be created. By using operator and function overloadings, built-in operators and functions can be extended to also apply to the complex data type. Therefore, the complex data type can be achieved. Such complex classes have been added in the C++ Standard. Without overloading features of classes, C99 supports complex numbers with built-in data types. There are differences for complex numbers in C/C++. However, a typical C or C++ program with complex numbers can run in Ch without any modification. A complex number <i>z=(x,y)=re</i><i><sup>i<IMG SRC="theta14.gif"></i></sup> can be constructed by <i>x+I*y</i>, <i>complex(x,y)</i>, <i>polar(r,theta)</i>, <i>float_complex(x,y)</i>, or <i>double_complex(x,y)</i> in Ch. Complex numbers are supported in generic polymorphic mathematical functions in Ch. Textbooks and software often avoid issues related to complex infinity and, other than Ch, no other general-purpose programming language and implementation has provisions for consistent handling of complex infinity. Ch is the only computing environment in existence that can perform numerical computing with consistent numerical results under the IEEE floating-point arithmetic in the entire real domain and complex domain using an extended complex plane for a Riemman sphere. There are two models for implementation of complex numbers under the framework of IEEE floating-point arithmetic. One is to follow the conventional mathematics, while the other is invented in C99's informative Annex G with imaginary types. In this model, the metanumbers <i>(+-Inf,x) (x,+-Inf)</i>, <i>(+-Inf,+-0.0) (+-0.0, +-Inf)</i>, <i>(+-Inf,NaN)</i>, and <i>(NaN,+-Inf)</i> can represent a complex infinity. The sign of zeros is honored. Not-a-number is no longer not a number &#151; it is essentially treated as any number. In short, nonconventional numerical results are invented.</p>

<p>There are major problems in this model:</p>


<ul>
  <li>First, many results in Annex G are pure invention and mathematically incorrect, according to the conventional complex analysis. For instance, in a well-known example in complex analysis, <i>exp(ComplexInf)</i> is undefined because the complex infinity can be approached from different directions, leading to different numerical results. But Annex G invented <i>exp(Inf,NaN)==(+-0,+-0)</i>, <i>exp(Inf,NaN)==(+-Inf,NaN)</i>, <i>exp(-Inf,Inf)==(+-0,+-0), exp(Inf,Inf)==(Inf,NaN)</i>, and the like. In this model, real and imaginary parts of a complex number are treated as a whole in some cases. In other cases, they are treated as if completely independent; for example, <i>imag(complex(NaN,x))</i> gives <i>x</i>. 
  <li>Second, the model has to introduce a new data type of imaginary in the type system to achieve the aforementioned nonconventional numerical results. In fact, three new data types &#151; <i>float imaginary</i>, <i>double imaginary</i>, and <i>long double imaginary</i> &#151; have been added to the type system. It is expensive to add a type system to C because many operators and type conversion rules have to be overloaded internally, which in turn slows compilation and execution speed, even for programs that don't use imaginary types.

  <li>Third, the new imaginary type is not orthogonal with other types. The set of imaginaries is closed under addition but not multiplication, so it isn't a proper number system under the field operations. They do not form a self-contained subspace. For example, the square root of an imaginary does not return a pure imaginary. Few (if any) real-world applications use only pure-imaginary numbers. Imaginaries are typically embedded in the whole complex plane. Nevertheless, additional functions are needed to handle mathematical functions with arguments of imaginary type. 

  <li>Fourth, this model dramatically complicates complex arithmetic operations and complex functions, which leads to inefficiency for numerical computing. 

  <li>Fifth, this model also shifts the burden of keeping track of zeros to users. It is almost impossible to get the correct computing results without constantly consulting a manual, especially for complex functions with multiple arguments. If the sign of zero is ignored in complex numbers, you can ignore the sign of zeros. If the sign is honored, you have to worry about the sign of zeros.

</ul>


<p>And most importantly, inventions such as <i>exp(-Inf,NaN)==(+-0,+-0)</i> in Annex G have no practical use in engineering and science. These inventions, which run counter to conventional complex mathematical analysis, are even harmful; see <A NAME="re3"><A HREF="0203be3.htm">Example 3</A>.</p>

<p>If it happens that the numerical value  for <i>x</i> is any positive number such as 3.0, <i>y</i> is -0.0, and <i>r</i> is <i>NaN</i> at a singularity point of a robot. This code works fine for implementations such as Ch, based on an alternative complex model. But based on the invention in Annex G, a patient's brain might be damaged. Propagating <i>NaN</i> to a valid, but erroneous, numerical result according to Annex G has a serious consequence for applications in engineering and science. </p>

<p>In short, Annex G is neither normative nor mandated for C99-conforming implementations. Consequently, the C99-conforming implementation of Ch uses a different complex model in the spirit of IEEE 754 floating-point arithmetic &#151; one that follows the conventional complex analysis under a Riemann sphere. In this model, there is only one complex infinity <i>(Inf, Inf)==ComplexInf</i> in the extended complex domain, one <i>Complex-Not-a-Number (NaN, NaN)==ComplexNaN</i>, and zero is unsigned. This complex model is easy to implement and use.</p>

<p>In conventional complex analysis under a Riemann sphere, complex numbers can be represented in the extended complex plane. In <A NAME="rf2"><A HREF="0203bf2.htm">Figure 2</A>, there is a one-to-one correspondence between the points on the Riemann sphere <b><IMG SRC="rsphere.gif"></b> and the points on the extended complex plane <i><b>C</i></b>. The point <i>p</i> on the surface of the sphere is determined by the intersection of the line through the point <i>z</i> and the north pole <i>N</i> of the sphere. There is only one complex infinity in the extended complex plane. The north pole <i>N</i> corresponds to the point at infinity.</p>

<p>Because of the finite representation of floating-point numbers, complex numbers in Ch are programmed in the extended finite complex plane; see <A NAME="rf3"><A HREF="0203bf3.htm">Figure 3</A>. Any complex or float complex values inside the ranges of <i>|x|&lt;FLT_MAX</i> and <i>|y|&lt;FLT_MAX</i> are representable in finite floating-point numbers. Variable <i>x</i> is used to represent the real part of a complex number and <i>y</i> the imaginary part; <i>FLT_MAX</i>, a predefined system constant in header file float.h, is the maximum representable finite floating-point number in the <i>float</i> data type. For <i>double complex</i>, the boundary for the extended finite complex plane will be expanded from <i>FLT_MAX</i> to <i>DBL_MAX</i>. Outside the extended finite complex plane, a complex number is treated as a complex infinity represented as <i>ComplexInf</i> or <i>complex(Inf,Inf)</i> in Ch. The origin of the extended finite complex plane is <i>complex(0.0, 0.0)</i>. In Ch, an undefined or mathematically indeterminate complex number is denoted as <i>complex(NaN, NaN)</i> or <i>ComplexNaN</i> (short for "Complex-Not-a-Number"). The special complex numbers of <i>ComplexInf</i> and <i>ComplexNaN</i> are referred to as "complex metanumbers." Because of the mathematical infinities of +-<IMG SRC="infinity.gif">, it becomes necessary to distinguish a positive zero 0.0 from a negative zero -0.0 for real numbers. Unlike the real line, along which real numbers can approach the origin through the positive or negative numbers, the origin of the complex plane can be reached in any direction in terms of the limit value of <i>lim</i><i><sub>r<IMG SRC="arrow12.gif">0</i></sub><i>re</i><i><sup>i<IMG SRC="theta14.gif"></i></sup>, where <i>r</i> is the modulus and <IMG SRC="theta14.gif"> the phase of a complex number. Therefore, complex operations and complex functions in Ch do not distinguish 0.0 from -0.0 for real and imaginary parts of complex numbers.</p>

<p>Under this complex model, the conventional numerical results such as <i>ComplexInf+ComplexInf==ComplexNaN</i>, <i>ComplexInf-ComplexInf==ComplexNaN</i>, <i>ComplexInf*ComplexInf==ComplexInf</i>, and <i>exp(ComplexInf)==ComplexNaN</i> can be obtained. The ex- pression (<IMG SRC="infinity.gif"><i>i</i>)*(<IMG SRC="infinity.gif"><i>i</i>) is equivalent to <i>ComplexInf*ComplexInf</i> with the result of <i>ComplexInf</i>. </p>



<h3>Application Examples</h3>


<p>Assume that the second order polynomial equation in <A NAME="re4"><A HREF="0203be4.htm">Example 4</A>(a) can be solved by the formula in <A NAME="re4"><A HREF="0203be4.htm">Example 4</A>(b). According to this formula, two solutions of <i>x</i><i><sub>1</i></sub><i>=2</i> and <i>x</i><i><sub>2</i></sub><i>=3</i> for <A NAME="re4"><A HREF="0203be4.htm">Example 4</A>(c) can be obtained by <A NAME="rl1"><A HREF="#l1">Listing One</A>. Executing <A NAME="rl1"><A HREF="#l1">Listing One</A> yields the output:</p>


<blockquote><p>
x1=3.000000</p>

<p>
x2=2.000000</p>

</blockquote>

<p>For the equation <i>x</i><sup>2</sup><i>-</i>4<i>x+</i>13=0, two complex solutions of <i>x</i><sub>1</sub><i>=</i>2<i>+i</i>3 and <i>x</i><sub>2</sub><i>=</i>2<i>-i</i>3 cannot be solved in the real domain. These complex numbers cannot be represented in double data type. In the domain of real numbers, the values of these solutions are Not-a-Number. Therefore, executing <A NAME="rl2"><A HREF="#l2">Listing Two</A> gives this output:</p>

<blockquote><p>
x1=NaN</p>

<p>
x2=NaN</p>

</blockquote>

<p>However, using complex numbers, <i>x</i><sup>2</sup>-4<i>x</i>+13=0 can be solved by the C99-conforming program in <A NAME="rl3"><A HREF="#l3">Listing Three</A>. Executing <A NAME="rl3"><A HREF="#l3">Listing Three</A> gives this output:</p>

<blockquote><p>
x1=complex(2.000000,3.000000)</p>

<p>
x2=complex(2.000000,-3.000000)</p>

</blockquote>

<p>The same problem can be solved by the C++-conforming program in <A NAME="rl4"><A HREF="#l4">Listing Four</A> with the same output as <A NAME="rl3"><A HREF="#l3">Listing Three</A>. Note that complex type is declared with the type specifier <i>double_complex</i> in C++ instead of <i>double complex</i> in C99. Real and imaginary parts of a complex number are obtained by functions <i>real()</i> and <i>imag()</i> in C++, instead of <i>creal()</i> and <i>cimag()</i> in C99. </p>

<p>If the coefficient <i>b</i> in <i>ax</i><sup>2</sup>+<i>bx+c</i>=0 is <IMG SRC="infinity.gif">, which can be represented as INFINITY in C99, the solution can be calculated by <A NAME="rl5"><A HREF="#l5">Listing Five</A> with this output:</p>

<blockquote><p>
x1=NaN</p>

<p>
x2=-Inf</p>

</blockquote>

<p>Note that the C99 macro INFINITY for <IMG SRC="infinity.gif"> is not supported in gcc; it is obtained conveniently in the program by dividing 1.0 by 0. If complex numbers are used in the calculation by <A NAME="rl6"><A HREF="#l6">Listing Six</A>, which is C99 conforming, the output becomes:</p>

<blockquote><p>
x1=complex(NaN,NaN)</p>

<p>
x2=complex(NaN,NaN)</p>

</blockquote>

<h3>Conclusion</h3>


<p>C99 makes the power of IEEE 754 floating-point arithmetic easily available to you for applications in the real domain. Still, a few special values of mathematical functions related to Not-a-Number &#151; improperly defined in C99 &#151; should be redefined. For example, the results of <i>hypot(Inf,NaN)==Inf</i>, <i>hypot(-Inf,NaN)==Inf</i>, <i>pow(1,NaN)==1.0</i>, <i>pow(NaN,0.0)==1.0</i>, <i>pow(NaN,-0.0)==1.0</i> in C99 should be redefined as <i>NaN</i>.</p>


<p>Complex numbers are a generalization of real numbers. C99 supports complex numbers as built-in data types, whereas C++ uses classes. There are differences for complex numbers in C and C++. But a typical C/C++ conforming program using complex numbers can run in Ch without any modification. Still, I recommend that the familiar complex-construction function <i>polar()</i> be added to resolve the compatibility of C/C++. </p>

<p>Ch conforms to the C99 standard related to the IEEE 754 floating-point arithmetic and complex numbers. Following the conventional mathematics, Ch handles numerical numbers consistently in the entire real and complex domains. Ch treats floating-point real numbers with signed zeros, signed infinities (<i>Inf</i> and <i>-Inf</i>), and a Not-a-Number (<i>NaN</i>); and complex numbers with unsigned zeros, a unique complex infinity (<i>ComplexInf</i>), and a unique complex Not-a-Number (<i>ComplexNaN</i>) in a consistent manner. In addition, generic mathematical functions in Ch have optional arguments to handle different branches of complex functions. Commonly used high-level functions with complex numbers for numerical analysis have been implemented in Ch. Furthermore, Ch has computational arrays for numerical computing of linear algebra and matrices. For example, linear equation <i>b=A*x</i> can be written verbatim in Ch. Users do not need to worry about the underlying optimization with fast and accurate numerical algorithms. Numerical computing with high-level numerical analysis functions in the entire real and complex domains under the framework of C99 and IEEE 754 Standards are very useful for solving problems in engineering and science.</p>


<p><b>DDJ</b></p>
<H4><A NAME="l1">Listing One</H4>


<pre>#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
int main() {
    double a = 1, b = -5, c = 6, x1, x2;
    x1 = (-b +sqrt(b*b-4*a*c))/(2*a);
    x2 = (-b -sqrt(b*b-4*a*c))/(2*a);
    printf("x1 = %f\n", x1);
    printf("x2 = %f\n", x2);
}
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two</H4>


<pre>#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
int main() {
    double a = 1, b = -4, c = 13, x1, x2;
    x1 = (-b +sqrt(b*b-4*a*c))/(2*a);
    x2 = (-b -sqrt(b*b-4*a*c))/(2*a);
    printf("x1 = %f\n", x1);
    printf("x2 = %f\n", x2);
}
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3">Listing Three</H4>


<pre>#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#include &lt;complex.h&gt;
int main() {
    double complex a = 1, b = -4, c = 13, x1, x2;
    x1 = (-b +csqrt(b*b-4*a*c))/(2*a);
    x2 = (-b -csqrt(b*b-4*a*c))/(2*a);
    printf("x1 = complex(%f,%f)\n", creal(x1), cimag(x1));
    printf("x2 = complex(%f,%f)\n", creal(x2), cimag(x2));
}
</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>
<H4><A NAME="l4">Listing Four</H4>


<pre>#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#include &lt;complex.h&gt;
int main() {
    double_complex a = 1, b = -4, c = 13, x1, x2;
    x1 = (-b +sqrt(b*b-4*a*c))/(2*a);
    x2 = (-b -sqrt(b*b-4*a*c))/(2*a);
    printf("x1 = complex(%f,%f)\n", real(x1), imag(x1));
    printf("x2 = complex(%f,%f)\n", real(x2), imag(x2));
}
</pre>
<P>
<A HREF="#rl4">Back to Article</A>
</P>
<H4><A NAME="l5">Listing Five</H4>


<pre>#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#ifndef INFINITY
#define INFINITY (1.0/0.0)
#endif
int main() {
    double a = 1, b = INFINITY, c = 13, x1, x2;
    x1 = (-b +sqrt(b*b-4*a*c))/(2*a);
    x2 = (-b -sqrt(b*b-4*a*c))/(2*a);
    printf("x1 = %f\n", x1);
    printf("x2 = %f\n", x2);
}
</pre>
<P>
<A HREF="#rl5">Back to Article</A>
</P>
<H4><A NAME="l6">Listing Six</H4>


<pre>#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#include &lt;complex.h&gt;
#ifndef INFINITY
#define INFINITY (1.0/0.0)
#endif
int main() {
    double complex a = 1, b = INFINITY, c = 13, x1, x2;
    x1 = (-b +csqrt(b*b-4*a*c))/(2*a);
    x2 = (-b -csqrt(b*b-4*a*c))/(2*a);
    printf("x1 = complex(%f,%f)\n", creal(x1), cimag(x1));
    printf("x2 = complex(%f,%f)\n", creal(x2), cimag(x2));
}</pre>
<P>
<A HREF="#rl6">Back to Article</A>
</P>


</body>
</html>
