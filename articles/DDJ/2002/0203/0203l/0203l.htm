<html>
<head>
<title>Mar02: C Programming</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Wave Repairs and a First Look at C#</h1>
<p><i>Dr. Dobb's Journal</i> March 2002</p>

<h3>By Al Stevens</h3>

<I>
Al is DDJ's senior contributing editor. He can be contacted at <a href="mailto:astevens@ddj.com">astevens@ddj.com</a>.</I>

<hr>

<p>I'll open this month's column with a farewell to an old friend. Peter Hutchinson is leaving <i>Dr. Dobb's Journal</i> after a long association as publisher and member of management. Like most writers, I am suspicious of publishers, and like most programmers, I am disdainful of managers. Peter is the exception in both cases. As a reader, you wouldn't know about Peter unless you took time to read his name in tiny print on that list of employees buried inside the book. But his contributions to and influence on what you have read and enjoyed for the past many years are substantial. For me, that list will always have a gaping hole where Peter's name once was. The magazine itself will not be the less for his departure. He built too good an organization for that to happen; our quality is his legacy and our endurance his monument. Looking back, I realize that being able to visit with Peter and his delightful wife Neva is one of the main reasons I traveled cross country to attend all those otherwise dull company parties all those many years. He carries the affection, respect, and good wishes of all of us wherever his fortunes may carry him.</p>


<h3>Fixing the Waves</h3>


<p>Last month's column described a library of classes that implement audio waveform playback and recording on the Win32 platform. This month I make some minor repairs to those classes. There are two reasons for these changes. First, Windows XP has minor differences between its wave processing API and those of other versions of Win32, differences that uncovered an insidious bug in my code. Second, the next version of Visual C++ draws somewhat closer than its predecessors to the C++ Standard specification, and I had to get compliant.</p>
<DDJADVERTISEMENT INLINE>


<p>The issue with XP was a puzzle. My audio application plays waveform audio when run on Windows 98 and ME. But when I copied the executable binary to an XP system and ran it, the playback operation produced nothing but silence and locked up the application. As reported last month, I built my classes by referring to the code in Tim Kientzle's and Charles Petzold's books, so my first test was to see if their programs work under XP. They do, so the problem had to be related to how I wrote my program, which, of course, it was.</p>

<p>This problem was a disaster in waiting and is a major lesson to be learned. I originally planned to complete the application in time for the annual meeting of the International Association of Jazz Educators (<a href="http://www.iaje.org/">http://www.iaje.org/</a>) in January 2002. Meeting that objective would have required completing CD-ROM masters for production well before XP was in the mainstream. Not long ago you would have been safe releasing a product that runs only on Windows 9x. In fact, you still find Win32 applications on the shelf that say they do not run under Windows NT, which is notorious for unconventional (as in, "incompatible with Win9x") implementation of the Win32 API. But, as of Christmas 2001, new computers from major manufacturers come with Windows XP by default. XP is a Windows 2000 derivative, which is an NT derivative, so be prepared to test your applications on all the operating systems.</p>

<p>To understand this particular problem, you must look at the code that the <i>Wave</i> and <i>WavePlayer</i> classes use when the client constructs a <i>WavePlayer</i>-derived object and calls the <i>Play</i> member function. (The wave.h, wave.cpp, waveplayer.h, and waveplayer.cpp files are available electronically; see "Resource Center," page 5.) The <i>Wave</i> constructor instantiates and initializes two WAVEHDR structures. The <i>WavePlayer</i> constructor prepares the structures for audio playback by calling the Win32 <i>waveOutPrepareHeader</i> function. The <i>Play</i> member function gets playback started by calling the <i>FillBufferAndPlay</i> member function once for each of the two structures. Using two structures supports overlapped waveform playback. The <i>FillBufferAndPlay</i> member function waits for the WHDR_DONE bit to be set in the header's <i>dwFlags</i> data member, and that was the problem. Under Windows 98/ME, the <i>waveOutPrepareHeader</i> function apparently leaves the <i>dwFlags</i> data member alone, and I had initialized it to WHDR_DONE so the test would not wait the first time. Under Windows XP (and, I guess, NT and 2000), the function clears that bit. The API documentation says you have to initialize the <i>dwFlags</i> data member to zero before calling <i>waveOutPrepareHeader</i>, but I thought I knew better and tried to get away with something. By waiting for the bit to be set in the first calls to <i>FillBufferAndPlay</i>, the program goes into a lifeless loop under XP. To fix it, I sheepishly added a special first-time state variable to the program to get past the test the first time in. Neither Tim's nor Charles's code depended on the WHDR_DONE bit the way mine did. I had privately congratulated myself for a more elegant solution that was able to play back audio waveform data with less code by twiddling that bit. Some guys never learn.</p>



<h3>VC++ and the <i>std</i> Namespace</h3>


<p>The second problem with my wave processing class library was simple enough: It has to do with the <i>std</i> namespace. I reported last month that the C++ compiler included with Visual Studio 6.0 does not put certain Standard C++ constructs into the <i>std</i> namespace by default. Specifically, the <i>auto_ptr</i> class and all the standard exception classes are in the global namespace. An internal compile-time directive remedies this error but is not defined by default. I recently installed a beta version of Visual Studio.NET 7.0, and this version of the C++ compiler uses the namespace convention by default. This is a good thing and a bit overdue; the standard has been in force for three and a half years. To compile my audio application with VC++ 7.0, I had to qualify references to <i>auto_ptr</i> and the exception classes with the <i>std</i> namespace qualifier.  </p>


<p>There really is no excuse for leaving <i>auto_ptr</i> and the exception classes in the global namespace, except perhaps that they were conceived by the committee before namespace conventions were agreed upon. That's the price we pay when we allow a programming language standards committee to invent a language beyond the codification of existing practice. Earlier versions of Visual C++ also neglect to put Standard C library declarations in the <i>std</i> namespace when a program uses new-style headers, yet another violation of the Standard C++ specification. <A NAME="re1"></a><A HREF="0203le1.htm">Example 1</A> is invalid Standard C++ code that is acceptable to Visual C++ 6.0 and earlier. I call it "interim" code because it's somewhere between legacy and standard. If the program used old-style headers, it would be legacy code. If the program qualified <i>printf</i> with<i> std::</i>, it would be standard code. Adhering to neither old conventions nor young standards, <A NAME="re1"></a><A HREF="0203le1.htm">Example 1</A> looks more like code that's having a midlife crisis.</p>

<p><A NAME="re2"></a><A HREF="0203le2.htm">Example 2</A> is valid Standard C++ code, but VC++ 6.0 and earlier do not compile it, complaining that <i>std</i> is not a namespace. This issue generated a lot of criticism from C++ programmers who felt that Microsoft, whose fierce opposition to putting the C declarations into <i>std</i> was voted down in committee, were arrogantly flexing and flaunting their market share. Of course, we know the Redmond rugrats would never do that.</p>

<p>Visual Studio.NET 7.0 almost fixes this anomaly. It properly compiles <A NAME="re2"></a><A HREF="0203le2.htm">Example 2</A>. But, guess what? It also compiles <A NAME="re1"></a><A HREF="0203le1.htm">Example 1</A>. My only guess is that Microsoft wanted to protect its own legacy code from being broken, a legacy that would not exist if earlier compiler versions had been more compliant. I can only guess; I've learned not to ask. When journalists ask Microsoft technical questions, we get spin rather than answers.</p>

<p>This oddball dual personality of <i>std</i> raises a question. If a compiler properly compiles correct code but also compiles incorrect code, is it truly a compliant compiler? I've heard it argued that language and library extensions are okay as long as the compiler behaves properly when given correct code. But this particular extended behavior defeats the reason for having those symbols in <i>std</i> in the first place, or for putting anything in any namespace for that matter, which is to protect programmers from name collisions. Apparently symbols such as printf are in both the global and std namespaces under VC++ 7.0, and the protection is only an illusion.</p>

<p>An aside: I don't usually discuss beta versions of development tools because most often I get them with the understanding that I'll wait for a formal release before mentioning them publicly. In this case, Visual Studio.NET 7.0 Beta 2 was bundled on a DVD with a recent issue of <i>DDJ</i>, so I felt no obligation to keep quiet about it.</p>



<h3>Seeing Sharp</h3>


<p>Having Visual Studio.NET gives me a chance to play with Microsoft's C# programming language. I had a brief exposure to C# earlier in 2001 when I did a tech review of one of the new C# books that was about to be published. My first reaction to C# (other than that it's a direct name ripoff of the venerable old D-Flat) was that it's a nice language, but I wondered why we needed another nice language. We already have C++, a nice language available on most platforms. C# is available only on platforms that implement .NET, and as far as I know, there's only one, or, at least one platform family, name of Windows. I suppose C# is supposed to be Microsoft's answer to Java, which the company learned the hard way (in litigation) it could not control. But Java and C# seem aimed at different targets. Java is supposed to be a platform-independent solution &#151; write once, run anywhere. Whether it ever achieves that objective remains to be seen. C# is not. But C# is one of three languages that run on top of Microsoft's .NET Common Runtime Language base, the other two being C++ and Visual Basic. Given C++, I'm not sure why we need C#, except perhaps to appease Java programmers by giving them an alternative to C++. Having already ascended the C++ learning curve, I don't need an alternative. But it's always fun looking at one.</p>




<h3>CLR</h3>


<p>The exciting thing about .NET is the Common Language Runtime (CLR) itself. The CLR offers the possibility for true multiple-language solutions to problems within which various parts of the problem are best solved with different languages, at the same time offering some layer of transparent interlanguage communication between solution components. Carried to its ultimate, the CLR would be implemented on all hardware and Internet platforms and would have sitting atop of it translators for all languages. Maybe even Java.</p>




<h3>C#: A Better C++?</h3>


<p>C# can be considered the next step in the evolution of languages that started with C. Presumably, C# fixes all the problems that C++ has because of C++'s enforced compatibility with C. We'll see. Some of the problems &#151; the preprocessor, for example &#151; are only in the eye of the beholder. Some of us pragmatists consider the preprocessor to be one of the strengths of C++ and would rue its loss. Same for multiple inheritance. If a class hierarchy is to truly model its problem domain rather than simply support the software solution, there are object networks that cannot be accurately represented without multiple inheritance. The fact that heap management, pointers, the preprocessor, multiple inheritance, and the like have their knurly knots does not render the tools unusable. One learns the limits and pitfalls associated with one's tools and proceeds with attendant caution. A chain saw improperly employed can remove many fingers, but it's still the most effective tool for felling a small-to-medium tree. With that gauntlet thrown down, I'll concede that C# looks like a good next-generation language, abandon the language wars for a later time, and concentrate on one of C#'s so-called improvements that looks really odd to me.</p>




<h3>C#'s <i>Main</i></h3>


<p>What's with the way C# implements the <i>Main</i> function? In C and C++, every program needs one and only one function named main, which defines the entry point into the program, and which is a nonstatic, nonmember function in the global namespace. That device works well, but <i>main</i> spits in the face of object-oriented purity because it represents executable code that is not what is called a method in the object-oriented lexicon. C# addresses this perceived anomaly by emulating Java. You must declare a class that has a static function named <i>Main.</i> (In Java, it's <i>main</i>, no caps.) The odd part is that the class can be any class you define for any other purpose. It's just that the <i>Main</i> function has to be in some kind of a class. And since it does not execute in the name of any particular object of the class, <i>Main</i> must be static. </p>


<p>Oddly, you can code more than one class containing a <i>Main</i> function; when you do that silly thing, you have to tell the compiler which <i>Main</i> is mainly the main <i>Main</i>. Since the compiler has an option that lets you specify the <i>Main</i> function, why can't you call it anything you want? I might want to enter my program through <i>Spongebob.Squarepants,</i> for example.</p>

<p>It would make more sense to me from a purely aesthetic view if the language required you to declare an object of a class (or of a class derived from a class) with some specified name, such as <i>Program</i> or, in .NET parlance, <i>Solution</i>. Perhaps there should be a system-defined class named something like <i>Solution</i> with a virtual function named <i>Main</i> that had to be overridden in a program-specific derived class to provide the entry point and other initializing components for the program. That's how it ought to be. But that's what happens when they don't check with me first before designing a programming language.</p>

<p>Perhaps you can tell from this discussion exactly how far I've gotten with C#. Yep, see <A NAME="re3"></a><A HREF="0203le3.htm">Example 3</A>. At the same time, and to gain some insight into my ability to form cogent first impressions, return to the thrilling days of yesteryear via the <i>DDJ</i> CD-ROM to read what I had to say about C++ when I first tried it in 1989.</p>



<h3>C++ For C# Programmers?</h3>


<p>The C# books I've seen to date advise you to use the <i>using</i> statement to qualify references to things in the <i>System</i> namespace. Without it, the code in <A NAME="re3"></a><A HREF="0203le3.htm">Example 3</A> would need to say <i>System.Console.WriteLine</i>. Following those guidelines, we would put a<i> using namespace std; </i>statement in <A NAME="re1"></a><A HREF="0203le1.htm">Example 1</A>, which would make it valid C++ for both the old VC++ compilers and the new one. But for several years, ever since the committee decided to put everything in the <i>std</i> namespace, we've been told it's bad form to take the easy way out with the <i>using</i> declaration, that it defeats the purpose of the <i>std</i> namespace. Now we're being told differently with new conventions for a new language. I'll have to get past <i>Main</i> to form an opinion.</p>


<p></p>



<p><b>DDJ</b></p>
</body>
</html>
