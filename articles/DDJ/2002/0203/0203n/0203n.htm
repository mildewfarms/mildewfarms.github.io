<html>
<head>
<title>Mar02: Dr. Ecco's Omniheurist Corner</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>With Eye of Newt</h1>
<p><i>Dr. Dobb's Journal</i> March 2002</p>

<h3>By Dennis E. Shasha</h3>

<I>
Dennis, a professor of computer science at New York University, is the author of The Puzzling Adventures of Dr. Ecco (Dover, 1998); Codes, Puzzles, and Conspiracy (W.H. Freeman &amp; Co., 1992); Database Tuning: A Principled Approach (Prentice Hall, 1992); (coauthored with Jason Wang and Bruce Shapiro) Pattern Discovery in Biomolecular Data: Tools, Techniques, and Applications  Oxford University Press, 1999); and (coauthored with Cathy Lazere) Out of Their Minds: The Lives and Discoveries of 15 Great Computer Scientists (Springer-Verlag, 1998). He can be contacted at <a href="mailto:DrEcco@ddj.com">DrEcco@ddj.com</a>.</I>

<hr>

<p>Harry Stirpot seemed completely at ease, even though he had just entered a stranger's apartment still in his lab coat. At least the coat was reasonably clean.</p>
<p>"We are creating designer proteins to test their efficacy against disease targets and need a rapid way to synthesize them," he explained just after perfunctory greetings.</p>
<DDJADVERTISEMENT INLINE>

<p>"That means we want to be able to synthesize sequences of amino acids rapidly. One way to do this is to create a gene that will code for the amino acids and then to arrange for that gene to be expressed. The main expense in this process is to create the DNA. There are machines to do this, but they produce one nucleotide at a time and run into limits after 250 or so. Another approach is to take preexisting sequences of nucleotides and to splice them together. This approach has recently become much more practical.</p>

<p>"Physicists at Sandia labs have come up with a 'glue machine' that enables them to position two nucleotide sequences next to one another and to splice them together into a longer sequence using an enzyme called 'ligase.' We want to use this technique to compile long nucleotide sequences from smaller ones.</p>

<p>"So, given the target sequence of amino acids, the genetic code that translates DNA triplets to single amino acids (with some redundancy that we can exploit), and existing snippets of DNA, find a way to add a nucleotide or two to the appropriate snippets if necessary, then splice together the snippets in an order that will produce the target.</p>

<p>"Let's try an example, suppose the target amino acid sequence is: <i>KMSPDW</i>. We have the nucleotide snippets<i> AAGATGTCT, CCG, GA,</i> and <i>GG</i>. We first add (using ligation glue) <i>CT</i> to the beginning of the last snippet, transforming <i>GG</i> into <i>CTGG.</i> Then, we can glue the snippets in the order given: <i>AAGATGTCTCCGGACTGG.</i> Looking this up in the genetic code in this table, we see that the first three nucleotides <i>AAG</i> code for<i> K, ATG </i>codes for <i>M,</i> and so on up to <i>TGG,</i> which codes for <i>W</i>."</p>

<p>This is the genetic code table in format (amino acid: nucleotide triple):</p>

<blockquote><p>
A: GCT</p>

<p>
A: GCC</p>

<p>A: GCA</p>

<p>A: GCG</p>

<p>C: TGT</p>

<p>C: TGC</p>

<p>D: GAT</p>

<p>D: GAC</p>

<p>E: GAA</p>

<p>E: GAG</p>

<p>F: TTT</p>

<p>F: TTC</p>

<p>G: GGT</p>

<p>G: GGC</p>

<p>G: GGA</p>

<p>G: GGG</p>

<p>H: CAT</p>

<p>H: CAC</p>

<p>I: ATT</p>

<p>I: ATC</p>

<p>I: ATA</p>

<p>K: AAA</p>

<p>K: AAG</p>

<p>L: TTA</p>

<p>L: TTG</p>

<p>L: CTT</p>

<p>L: CTC</p>

<p>L: CTA</p>

<p>L: CTG</p>

<p>M: ATG</p>

<p>N: AAT</p>

<p>N: AAC</p>

<p>P: CCT</p>

<p>P: CCC</p>

<p>P: CCA</p>

<p>P: CCG</p>

<p>Q: CAA</p>

<p>Q: CAG</p>

<p>R: CGT</p>

<p>R: CGC</p>

<p>R: CGA</p>

<p>R: CGG</p>

<p>R: AGA</p>

<p>R: AGG</p>

<p>S: TCT</p>

<p>S: TCC</p>

<p>S: TCA</p>

<p>S: TCG</p>

<p>S: AGT</p>

<p>S: AGC</p>

<p>T: ACT</p>

<p>T: ACC</p>

<p>T: ACA</p>

<p>T: ACG</p>

<p>V: GTT</p>

<p>V: GTC</p>

<p>V: GTA</p>

<p>V: GTG</p>

<p>W: TGG</p>

<p>Y: TAT</p>

<p>
Y: TAC</p>

</blockquote>

<p>"That was an example. We have a much harder problem for you. We want to create the following amino acid sequence: <i>ETIWITWIKNGFMTR</i>. We have the following snippets: <i>AACGGA, AC, ACCCGA, CA, CGATGTTGGATTCCAGATTATGCTA, GAGACGATT, GAGAGACCAGAGGACCCTCGA, GAAACGATGAGGGGAATAA, GCGGGTT, GG, GGTACTG, TG, TGTTTG, TGGATA, </i>and<i> TTGGATTAAA.</i></p>

<p>"Can you form the target in seven gluings or fewer, adding on at most two amino acids to one of the given snippets?<i></p>


<p>Reader: Would you like to try?</p>

<p></i></p>

<p>"We have a much more challenging general question. What is the smallest library you would need to assemble any 16-element amino acid sequence in at most seven gluings but without having to manufacture any extra snippets of amino acids. Remember that there are 20 amino acids altogether."</p>

<p>I could see a solution with 400 snippets.</p>

<p><i></p>

<p>Reader: Can you match Professor Scarlet's solution? Can you do better? Can you generalize your solution to arbitrary lengths with at most seven gluings?</p>



<h3>Last Month's Solution</h3>


<p>The dynamic programming solution works as follows. Compute two functions: </i><i>g1[dist, m1, m2], </i>which will be the probability that duelist 1 will win when it is duelist 1's turn to shoot, duelist 1 has <i>m1</i> bullets left, duelist 2 has <i>m2</i> bullets left, and both play as well as they can; <i>g2[dist, m1, m2],</i> which will be the probability that duelist 1 (and I really mean duelist 1) will win when it is duelist 2's turn to shoot, duelist 1 has <i>m1</i> bullets left, duelist 2 has <i>m2</i> bullets left, and both play as well as they can.</p>


<p>These two functions will be mutually recursive as follows: </p>

<blockquote><p>
g1[dist, m1, m2] </p>

<p>
= max(duelist 1's chance to win if he shoots, duelist 1's chance to win if he doesn't shoot).</p>

<p>
= max(prob(duelist 1 wins at dist)+(1- prob(duelist 1 hits at dist))*g2[dist, m1-1, m2], g2[dist, m1, m2])</p>

</blockquote><p>Similarly, </p>


<blockquote><p>
g2[dist, m1, m2]</p>

<p>
= min(duelist 1's chance to win if duelist 2 shoots, duelist 1's chance to win if duelist 2 doesn't shoot)</p>

<p>
= min((1-prob(duelist 2 hits at dist))* g1[dist-10, m1, m2-1], g1[dist-10, m1, m2]).</p>

</blockquote><p>It's a minimum because duelist 2 is trying to minimize the chance that duelist 1 wins. Now, it's good to combine this with Liane's observations:</p>


<p></p>

<p>1.	A duelist will win for sure at 0 paces if he has at least one bullet and it is his turn to shoot; therefore,</p>

<p>2.	A duelist will win for sure, if he has at least one bullet and the other duelist has no bullets.</p>


<p>Those observations provide initial values for <i>g1</i> and <i>g2</i> upon which the rest can be built. </p>

<p>Having constructed these functions, you can then compute the probability of each win and the optimal shooting strategy:</p>

<blockquote><p>
Duelist 2 at 8 having 3 bullets, shoots.</p>

<p>
Duelist 1 at 7 having 2 bullet(s), shoots.</p>

<p>Duelist 2 at 7 having 2 bullet(s), shoots.</p>

<p>Duelist 2 at 5 having 1 bullet(s), shoots.</p>

<p>
Duelist 1 at 0 having 1 bullet(s), shoots.</p>

</blockquote>

<p>Duelist 2's first shot is at 8. He will hit with probability 0.2. The duel will therefore continue with probability 0.8. Duelist 1 will shoot at 7. He will hit with probability 0.3, but given that he only gets to shoot if duelist 2 missed at 8, the probability that he will win then is 0.8*0.3=0.24. The duel will continue after these two shots with total probability 0.56 (product of missing the first two times). Duelist 2 will also shoot at 7. He will hit with probability 0.3. Therefore, the probability that the duel will go on beyond this is only 0.8*0.7*0.7=0.392. Duelist 2 will again shoot at 5 (Liane's observation). He will hit with probability 0.5. If he misses, duelist 1 will surely win. This will happen with probability 0.8*0.7*0.7*0.5=0.196. If we add the mutually exclusive likelihoods that duelist 1 will win, we get 0.24+0.196=0.436. So, duelist 2 (the challenged) will win more than 56 percent of the time. There are a few variants, but none gives duelist 1 a better chance to win provided duelist 2 plays as intelligently as possible.</p>

<p>If both started out with three bullets, then duelist 1 would win with probability 0.5488.</p>



<h3>Reader Notes</h3>


<p>Ultimate Tic-Tac-Toe (<i>DDJ,</i> December 2001) is a tough game and only a few readers sent in solutions: Michael Birken, Rodney Meyer (whose nicely illustrated solutions can be found at <a href="http://www.geocities.com/rodney_meyer/ddj_dec_1.htm">http://www.geocities.com/rodney_meyer/ddj_dec_1.htm</a>), and Dan Yotz (who speculates that the problem may help understand chaotic attractors).</p>


<p>Michael attempted to find a winning strategy for the entire problem and came to the following conclusion: "Searching the entire game tree has shown that <i>X</i> can force a win regardless of the moves of <i>O;</i> however, in the come-back variant, <i>X</i> cannot always force a win." For the most part, according to Michael, a heuristic in which <i>X</i> moves to the leftmost column and topmost row within that column that avoids a threesome works for the first seven turns. On the eighth turn, <i>X</i> should try to get a threesome. Unfortunately, that strategy doesn't work entirely, so he suggests a strategy of correction tables whose details you can find at <a href="http://cs.nyu.edu/cs/faculty/shasha/papers/ultimate.birken">http://cs.nyu.edu/cs/faculty/shasha/papers/ultimate.birken</a>.</p>



<p><b>DDJ</b></p>

</body>
</html>
