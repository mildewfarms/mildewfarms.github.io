<html>
<head>
<title>Mar02: Python &  Finite Elements</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Python &amp;  Finite Elements</h1>
<p><i>Dr. Dobb's Journal</i> March 2002</p>
<h2>Number crunching with an interpreted language</h2>

<h3>By Alexander Pletzer</h3>

<I>
Alexander is a member of the staff at the Princeton Plasma Physics Lab. He can be contacted at <a href="mailto:pletzer@pppl.gov">pletzer@pppl.gov</a>. </I>

<hr>

<p>Many science and engineering problems can be reduced to the form of partial differential equations (PDEs), among which elliptic equations play an important role. Problems that can be described by elliptic PDEs include the distribution of electric potential in a dielectric, the propagation of stationary waves, the incompressible flow around a wing, vibrations in a membrane, and the problem of heat conduction, to name just a few.</p>
<p>In this article, I'll present a finite element (FE) package called ELLIPT2D (available electronically; see "Resource Center," page 5, or <a href="http://ellipt2d.sourceforge.net/">http://ellipt2d.sourceforge.net/</a>) designed to solve elliptic equations in two dimensions. While most FE programs are written in C or Fortran, ELLIPT2D is implemented in Python (<a href="http://www.python.org/">http://www.python.org/</a>). </p>
<DDJADVERTISEMENT INLINE>

<p>Initially, I designed ELLIPT2D so that users could leverage a scripting interface by specifying geometry and PDE coefficients on the fly. This provided flexibility that cannot be matched in compiled environments. Of course, this idea isn't new. FREEFEM (<a href="http://www.freefem.org/">http://www.freefem.org/</a>) comes with its own scripting capability targeted for FE problems, and FEMLAB (<a href="http://www.femlab.com/">http://www.femlab.com/</a>) is invoked from the Matlab shell. Unfortunately, it is difficult to design a program that takes into account all potential needs. In particular, I encountered cases where the PDE coefficients led to singularities, which, to be properly treated, required users to modify ELLIPT2D's internals. In a problem involving photonics, for instance, the boundary conditions were such that the value at a node was equal to the value at another node times a phase shift. Such boundary conditions cannot be applied in a general geometry, but are perfectly reasonable in the considered geometry. But again, the problem could only be resolved after having access to the source and knowing the internals of ELLIPT2D. </p>

<p>To make ELLIPT2D user friendly, powerful, and transparent to the user, I realized it would have to be written in a scripting language such as Python.</p>



<h3>The FE Method</h3>


<p>The aforementioned physics and engineering problems can be cast in the general linear second order PDE form as in <A NAME="rf1"><A HREF="0203cf1.htm">Figure 1</A>, where <i>F, g,</i> and <i>s</i> are user-defined functions of the space coordinates, and <i>v</i> the solution to be determined. In the following, we assume that the problem, due to symmetry, can be reduced to two dimensions so that these functions depend on the coordinates <i>x</i> and <i>y</i> only. To obtain a unique solution, boundary conditions must be applied on the boundary of the domain <IMG SRC="omega14.gif"> (<IMG SRC="curlyque.gif"><IMG SRC="omega14.gif">), as in <A NAME="rf2"><A HREF="0203cf2.htm">Figure 2</A> where <img src="alpha14.gif"> and <img src="beta14.gif"> are also user-prescribed functions. Here, <IMG SRC="invdel12.gif"> = [<IMG SRC="curlyque.gif">/<IMG SRC="curlyque.gif"><i>x</i>, <IMG SRC="curlyque.gif">/<IMG SRC="curlyque.gif"><i>y</i>] denotes the Cartesian Del operator and<i> n</i> the normal vector pointing outwards of <IMG SRC="curlyque.gif"><IMG SRC="omega14.gif"> (<i>n</i>&middot;<IMG SRC="invdel12.gif">  would be the normal derivative). <i>F</i> in <A NAME="rf1"><A HREF="0203cf1.htm">Figure 1</A> is a tensor, so that <i>F</i>&middot; <IMG SRC="invdel12.gif">  is the vector [<i>F</i><i><sub>xx</i></sub><IMG SRC="curlyque.gif">/<IMG SRC="curlyque.gif"><i>x</i>+<i>F</i><i><sub>xy</i></sub><i><IMG SRC="curlyque.gif">/<IMG SRC="curlyque.gif" WIDTH="11" HEIGHT="18">y</i>, <i>F</i><i><sub>yx</i></sub><IMG SRC="curlyque.gif">/<IMG SRC="curlyque.gif"><i>x</i>+<i>F</i><i><sub>yy</i></sub><IMG SRC="curlyque.gif">/<IMG SRC="curlyque.gif"><i>y</i>]. Commonly occurring elliptic PDEs can be derived from <A NAME="rf1"><A HREF="0203cf1.htm">Figure 1</A> by suitable choices of <i>F(x,y), g(x,y), </i>and <i>s(x,y).</i> For example,  <IMG SRC="invdel12.gif"> <sup>2</sup><i>v</i>+<i>k</i><sup>2</sup><i>v</i>=0 (the Helmholtz equation describing the propagation of stationary waves) can be obtained simply by setting <i>F=I</i> (the identity matrix), <i>g</i>= -<i>k</i><sup>2</sup> and <i>s</i>=0. Likewise, the same equation can be written in cylindrical geometry as <i>F=xI, g</i>=-<i>k</i><sup>2</sup><i>x</i> after interpreting <i>x</i> as the radial coordinate. </p>


<p>Given a problem like <A NAME="rf1"><A HREF="0203cf1.htm">Figure 1</A> with the boundary conditions in <A NAME="rf2"><A HREF="0203cf2.htm">Figure 2</A>, the FE method involves the following steps:</p>

<ol>
<li>Mesh generation. The domain <IMG SRC="omega14.gif"> is discretized in small cells. In the case of ELLIPT2D, these are triangles with each cell bounded by three nodes (vertices) going counterclockwise; see, for example, the triangulated mesh in <A NAME="rf3"><A HREF="0203cf3.htm">Figure 3</A>.</p>

<li>The solution <i>v(x)=</i><IMG SRC="sum14.gif"><i>V</i><i><sub>j</i></sub><i>e</i><i><sub>j</i></sub><i>(x,y)</i> is expanded in a suitable set of basis functions <i>e</i><i><sub>j</i></sub><i>(x,y)</i> or finite elements, so called because they have finite support. In ELLIPT2D, I use finite elements that are linear polynomials of <i>x</i> and <i>y</i> in each cell. By finite support, I mean that the amplitude of a given element is zero on all nodes except one, where it is unity. This ensures that the amplitude <i>V</i><i><sub>j</i></sub> coincides with the numerical value of <i>v(x,y)</i> on node <i>j</i>. <A NAME="rf3"><A HREF="0203cf3.htm">Figure 3</A> is one such tent element.</p>

<li>The equation in <A NAME="rf1"><A HREF="0203cf1.htm">Figure 1</A> is multiplied by all basis functions <i>e</i><i><sub>i</i></sub><i>(x,y) </i>in turn and integrated over <IMG SRC="omega14.gif">. Integration by parts then yields a discretized form of <A NAME="rf1"><A HREF="0203cf1.htm">Figure 1</A> &#151; namely the system of linear equations in <A NAME="rf4"><A HREF="0203cf4.htm">Figure 4</A>, where <A NAME="rf5"><A HREF="0203cf5.htm">Figure 5</A> yields the stiffness matrix <i>A</i><i><sub>ij</i></sub>. Because of the finite support of the basis functions, <i>A</i><i><sub>ij</i></sub> is sparse and efficient methods exist to solve the linear system. The right-hand side vector <i>b</i><i><sub>i</i></sub> contains the source and a term representing the contribution from the boundary conditions. This step is referred to as the "matrix assembly." In ELLIPT2D, <i>F(x,y), g(x,y),</i> and <i>s(x,y)</i> are assumed to vary linearly between nodes leading to the integrals in <A NAME="rf5"><A HREF="0203cf5.htm">Figure 5</A>, which depend solely on the node values of these functions.</p>

<li>Finally, the system in <A NAME="rf4"><A HREF="0203cf4.htm">Figure 4</A> is solved for the unknown amplitudes <i>V</i><i><sub>j</i></sub>. This is by far the most demanding numerical step. Accordingly, ELLIPT2D offers the choice between a Python conjugate gradient method and a C interface to the sparse matrix solver SuperLU (<a href="http://www.nersc.gov/~xiaoye/SuperLU/">http://www.nersc.gov/~xiaoye/SuperLU/</a>) for increased performance.</p>
</li>
</ol>


<h3>Implementation Issues</h3>


<p>Granted, Python is not the first programming language that comes to mind for heavy number crunching: Matlab, Scilab, and the Interactive Data Language offer excellent interfaces to sparse matrix solvers. However, I chose Python because many data structures used in the FE method do not neatly fit into a matrix cast, the core data type of these languages. Furthermore, Python is object oriented, has a particularly clean syntax for nested lists and exception handling, and allows operator to be overloaded.</p>


<p>ELLIPT2D makes extensive use of three types of objects: node, cell, and sparse. The node object is central to the FE method as it contains information on how nodes are connected, that is, how finite elements couple in the stiffness matrix. This is captured in Python by a dictionary data type whose syntax is <i>{key: value,...}</i>. Dictionaries, also known as "hash tables" or "associative arrays," are powerful objects allowing values to be accessed by keys. They can be thought of as generalized arrays, where values are indexed not by integers, but by other objects. (One difference is that the dictionary's layout in memory is unordered.) Indeed, in Python, the syntax to access a list and dictionary value is the same and based on the [] operator. To determine the node connectivity, a dictionary <i>{i1:[(x,y), [ia, ib, ic,...],a1],...} </i>is used containing <i>i1</i> as the node index, (<i>x,y</i>) a tuple of node coordinates, <i>[ia,ib,ic,...]</i> a list of node indices that are connected to <i>i1</i>, and <i>a1</i> &#151; an additional attribute set to 1 if <i>i1</i> is a boundary node. The dictionary values can be almost anything (in this case, a nested list) while the keys can only be immutable objects (a key cannot be altered). This illustrates the utilization of a dictionary as a replacement for a C structure with the major advantage that the dictionary can grow dynamically (both the elements and the number of elements) with no particular memory-management responsibilities attached. This property is particularly useful in the case of unstructured meshes where the number of connected nodes is not known a priori. </p>

<p>Also of importance in ELLIPT2D is the cell object, a nested list<i> [k,[i1,i2,i3],...], </i>where <i>k</i> is the cell index and<i> [i1,i2,i3] </i>are the three nodes ordered in counterclockwise direction. The cell object is used during the assembly time. You can see from <A NAME="rf5"><A HREF="0203cf5.htm">Figure 5</A> how the stiffness matrix integral naturally breaks into the sum of all cell contributions. </p>

<p>So far, I have not mentioned how the boundary conditions are taken care of. The FE method distinguishes between natural and essential boundary conditions. The mixed (Robbins) boundary conditions in <A NAME="rf2"><A HREF="0203cf2.htm">Figure 2</A> are natural and dealt with by replacing <i>n</i>&middot;<i>F</i>&middot; <IMG SRC="invdel12.gif"> <i>v</i> in the source term <i>b</i><i><sub>i </i></sub>in <A NAME="rf5"><A HREF="0203cf5.htm">Figure 5</A> by <img src="beta14.gif"><i>-</i><img src="alpha14.gif"><i>v</i> and moving the term involving <i>v</i> to the stiffness matrix. However, Dirichlet boundary conditions where the value of <i>v</i> is imposed on <IMG SRC="curlyque.gif"><IMG SRC="omega14.gif"> need special treatment. Imposing the value for node <i>i</i> is achieved in ELLIPT2D by setting <i>A</i><i><sub>ij</i></sub><i>=</i>0 except for <i>A</i><i><sub>ii</i></sub>=1, while <i>b</i><i><sub>i </i></sub>takes the prescribed value. ELLIPT2D has a <i>DirichletBound</i> dictionary object that takes the node index as key. The <i>RobbinsBound</i> and <i>NeumannBound</i> (similar to <i>RobbinsBound</i>, but for<i> </i><img src="alpha14.gif">=0) take the tuple <i>(i,j)</i> as keys since they act on segments, but are otherwise invoked similarly to <i>DirichletBound</i> after the matrix assembly step.</p>

<p>Finally, the sparse stiffness matrix is represented in ELLIPT2D by the object <i>sparse</i>, a dictionary <i>{(i,j): aij,...}</i> with the row/column indices (<i>i,j</i>) and <i>aij</i> as key/value pairs, respectively. Only nonzero elements need to be stored. Python's object-oriented features let the usual matrix operations (+,-,*, and so on) be overloaded. To invert the matrix system, a conjugate gradient method using overloaded matrix operations has been written in 30 lines of Python code.</p>



<h3>The Laplace Equation </h3>


<p>To illustrate how ELLIPT2D works, I'll present an application that solves the Laplace equation on a rectangular mesh (<A NAME="rf6"><A HREF="0203cf6.htm">Figure 6</A>) with <i>nx1</i> nodes in the <i>x</i> direction and <i>ny1</i> nodes in the <i>y</i> direction; see <A NAME="rl1"><A HREF="#l1">Listing One</A>(a). The node object grid is constructed by calling one of many available methods that break a rectangular domain into a regular set of triangles. For more general structured meshes, grid can be constructed from a set of interleaving (<i>x,y</i>) coordinates; see <A NAME="rl1"><A HREF="#l1">Listing One</A>(b). </p>


<p>Next, boundary conditions must be applied. These are a sine wave on the west edge, and zero Dirichlet conditions on the south and north edges. On the east edge, zero-flux Neumann boundary conditions are imposed (<img src="alpha14.gif"> and <img src="beta14.gif"> set to zero in <A NAME="rf2"><A HREF="0203cf2.htm">Figure 2</A>). Since zero-flux conditions are the default boundary conditions of the FE method, there is no need to create a <i>NeumannBound</i> object for the west edge; see <A NAME="rl1"><A HREF="#l1">Listing One</A>(c). </p>

<p>The <i>ellipt2d</i> object can now be built; see <A NAME="rl1"><A HREF="#l1">Listing One</A>(d), and the stiffness matrix computed, as in <A NAME="rl1"><A HREF="#l1">Listing One</A>(e). The functions <i>F, g,</i> and <i>s,</i> which are passed as arguments to the <i>ellipt2d</i> constructor, are strings. These can be any expressions of <i>x</i> and <i>y.</i> To avoid any singularity, be sure that <i>F</i> remains positive definite and that all functions are finite on the nodes. Thus, you could just as well have chosen <i>F="2 +cos(pi</i>*<i>x</i>**<i>2</i>*<i>y)"</i>, for instance. For problems where these functions cannot be expressed in closed form, ELLIPT2D offers in addition the option to supply <i>F, g,</i> or <i>s</i> as node vectors, instead of strings. The vector object <i>vector.zeros(N) </i>is equivalent to supplying "0." on all nodes. Also note that a scalar form of <i>F</i> was fed into <i>ellipt2d</i> &#151; that is, "1." is formally equivalent to the identity matrix <i>(("1.","0."), ("0.","1.")).</i> </p>

<p>The stiffness matrix and right-hand side vector are updated through a call, <A NAME="rl1"><A HREF="#l1">Listing One</A>(f), and in the final step, <A NAME="rf4"><A HREF="0203cf4.htm">Figure 4</A> is solved by invoking the conjugate gradient (CG) method; <A NAME="rl1"><A HREF="#l1">Listing One</A>(g). The CG method is iterative in nature and requires an initial guess <i>v</i>0. The next arguments after the right side vector <i>b</i> specify the maximum tolerance and the maximum number of iterations. Methods for saving the results in various formats &#151; <i>toUCD</i> for AVSExpress, <i>toDX</i> for openDX; see <A NAME="rl1"><A HREF="#l1">Listing One</A>(h) &#151; are available for graphical postprocessing.</p>



<h3>Resonant Frequencies of a Structure</h3>


<p>As a second test application, consider the problem of determining the resonant frequencies of a structure consisting of an infinite set of conducting wires arranged in a regular, periodic manner. Because of the periodicity, it is possible to focus on one cell, shown in <A NAME="rf7"><A HREF="0203cf7.htm">Figure 7</A>. In such a cell, it can be shown that the problem reduces to computing <IMG SRC="lambda.gif"> in <A NAME="rf8"><A HREF="0203cf8.htm">Figure 8</A>, where <i>dm</i> and <i>dn</i> are input parameters. Notice the boundary conditions, which are such that the amplitudes on the north edge are equal, up to a complex phase factor (<i>i</i> is the imaginary number), to those on the south edge, and likewise for the east and west amplitudes. Here, you're mainly interested in the lowest eigenvalue <IMG SRC="lambda.gif">.</p>


<p>Complications arise in several respects. First, a circular concavity representing the wire's section must be carved out. This means that an unstructured mesh must be constructed, which is done by importing the module Ireg2tri, a wrapping class around the C-library TRIANGLE (<a href="http://www.cs.cmu.edu/~quake/triangle.html">http://www.cs.cmu.edu/~quake/triangle.html</a>). More significantly, to build the eigenvalue problem, the stiffness matrix must be split into two matrices (called "amat" and "bmat" in code available electronically; see "Resource Center," page 5). Boundary conditions are applied by manually modifying the elements that couple to a boundary node. For the phased-shifted conditions, this is done by adding the north and south, and east and west elements. In the case of corner elements, the contributions must be added from all other corners. Finally, the eigenvalue is computed using an inverse iteration scheme. </p>



<h3>Conclusion</h3>


<p>Of course, performance is a drawback of scripting languages. But for problems involving up to several thousand nodes, this wasn't an issue. The Laplace problem (also available electronically) runs in 1.5 CPU seconds for 100 nodes in pure Python mode, whereas the complex eigenvalue problem (800 nodes) takes less than 30 CPU seconds on a 600-MHz Pentium III laptop. Based on simple Laplace equation tests, I found Jython (<a href="http://www.jython.org/">http://www.jython.org/</a>) to run at roughly half Python's speed (Sun's Java 1.3.1). If the CPU time is broken up between modules, then the conjugate gradient solver is the most expensive part by far, with the matrix assembly requiring less than 10 percent of the CPU time. Hence, I recommend the use of the C interface to the SuperLU library. A global speedup factor of 10 can then be expected. Both the matrix assembly and SuperLU CPU's time requirements scale proportionally to <i>N</i><sup>1.7</sup>, where <i>N</i> is the number of nodes. A typical ELLIPT2D problem involves up to a few thousand nodes. Accordingly, ELLIPT2D cannot presently be extended to three-dimensional geometry where problems routinely have hundreds of thousands of nodes, although the programming paradigm applied here would lend itself to such extensions. </p>


<p>All is not perfect even in the best of all worlds. It was slightly disappointing to observe that more recent versions of Python run slower: Python 2.0 is roughly 15 percent slower than Version 1.6, which is slower than 1.5.2 by a few percents. From a programmer's point of view, I would have preferred that complex and real (floating) numbers be treated on the same footing. For instance, a.real generates an exception if <i>a</i> is a float, although you almost certainly want it to mean "If <i>a </i>is complex, then take the real part". This may simply be the result of complex numbers being added quite recently to the language. Indeed, Python's biggest strength is that so many interesting features (object orientation, exception handling, namespace) were built in the language from the ground up. </p>



<h3>Acknowledgments</h3>


<p>The boundary condition classes (DirichletBound, NeumannBound, and RobbinsBound), the C extension to TRIANGLE, the HTML documentation, as well as the Java graphics class are all contributions by John C. Mollis. This work was supported by the Department of Energy and through a National Undergraduate Fellowship.</p>


<p></p>


<p><b>DDJ</b></p>
<H4><A NAME="l1">Listing One</H4>


(a)
<pre>import reg2tri, vector       
from ellipt2d import *

xmin, xmax = 0., 1.4
ymin, ymax = 0., 1.

N = 101
nx1 = int(sqrt(float(N)*(xmax-xmin)/(ymax-ymin)))
ny1 = int(sqrt(float(N)*(ymax-ymin)/(xmax-xmin)))

(b)
<pre>grid = reg2tri.rect2criss((xmin, ymin, xmax, ymax), nx1, ny1)

(c)
<pre>db = DirichletBound()               
for i in range(nx1):
    db[i]             = 0.0  # south
    db[nx1*(ny1-1)+i] = 0.0   # north

for i in range(ny1):
    y = grid.y(i*nx1)
    db[i*nx1] = sin(pi*(y-ymin)/(ymax-ymin))   # west

(d)
<pre>F='1.'
g, s = '0.', '0.'
equ = ellipt2d(grid, F, g, s)

(e)
<pre>[amat, b] = equ.stiffnessMat()

(f)
<pre>equ.dirichletB(db,amat,b)

(g)
<pre>v0 = b
v = amat.CGsolve(v0, b, 1.e-6, 2*len(b))

(h)
<pre>equ.toUCD(v, 'ex1.inp')



</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>


</body>
</html>
