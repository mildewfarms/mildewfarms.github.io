<html>
<head>
<title>Mar02: Embedded Development with Qt/Embedded</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Embedded Development with Qt/Embedded</h1>
<p><i>Dr. Dobb's Journal</i> March 2002</p>
<h2>Linux for small systems</h2>

<h3>By Matthias Kalle Dalheimer  and Steffen Hansen</h3>

<I>
Kalle is president and CEO of Klar&#228;lvdalens Datakonsult AB. You can reach him at <a href="mailto:kalle@klaralvdalens-datakonsult.se">kalle@klaralvdalens-datakonsult.se</a>. Steffen is a senior software engineer at Klar&#228;lvdalens Datakonsult AB. Like Kalle, he is a core team member of the KDE Project. You can reach him at <a href="mailto:steffen@klaralvdalens-datakonsult.se">steffen@klaralvdalens-datakonsult.se</a>.</I>

<hr>

<a name="rs1"><a href="0203es1.htm">Making Qt/Embedded Lean and Mean</a><hr>

<p>When developing software for handheld computers such as the iPAQ, Palm, and Visor, you often face challenges that are at odds with each other. On one hand, users expect applications with resource-hungry GUIs that can be manipulated via stylus, virtual keyboard, and the like. On the other hand, you must contend with the space and processing constraints that are normal in the embedded world. In part due to issues such as these, Linux is increasingly becoming the preferred platform for embedded devices such as handheld computers. Not only is Linux resource friendly (and because these systems have little Flash and RAM, they need a resource- friendly solution) but it is also cost effective (there are no per-device royalties required when using Linux). In this article, we look at how you develop Linux-based applications for handheld devices using the Trolltech's C++ GUI Qt/Embedded toolkit (<a href="http://www.trolltech.com/">http://www.trolltech.com/</a>), available for embedded devices under both the GPL and commercial licenses for UNIX/X11 and Linux.</p>
<p>What sets Qt/Embedded apart from other embedded toolkits is that it was not specifically developed for embedded devices. Instead, Qt/Embedded is a port of the Qt toolkit for UNIX/X11, Windows, and MacOS X. Consequently, you can leverage your experience in developing desktop applications when approaching embedded application development. You don't have to learn a new API, nor do you have to pick up new programming techniques. This isn't to say that you should simply port desktop applications to pocket computers. Clearly, handheld devices have some very different requirements in terms of screen size, drag-and-drop, and limited memory. Still, Qt and Qt/Embedded share the same basic API.</p>
<DDJADVERTISEMENT INLINE>

<p>In theory, Qt/Embedded can run on any embedded device that runs Linux and that has a framebuffer. In practice, however, each new device requires some porting efforts. Among the devices that are supported out of the box are the Compaq iPAQ and HP Cassiopeia. With that in mind, we'll use the iPAQ as an example platform to illustrate Qt development for handhelds. Nevertheless, the techniques presented here apply to similar devices as well.</p>



<h3>Getting Started</h3>


<p>Of course, your first step is to install and configure Linux on the iPAQ (which comes preloaded with Microsoft's Pocket Windows), then add the development suite (that is, the "tool chain"). Since the installation process is beyond the scope of this article, the procedure for it is provided online; see "Resource Center," page 5. Also, because memory is always at a premium on embedded devices, it is important to know that you don't have to carry around the entire Qt with all its parts &#151; XML parsers, table components, and the networking module. Instead, you can trim down Qt so that it contains what you need for your application. For details, see the accompanying text box entitled "Making Qt/Embedded Lean and Mean."</p>


<p>Once Linux is installed on an iPAQ, all you'll see is a blinking cursor and console prompt. To make more happen, install the Qt Palmtop Environment (QPE, <a href="http://qpe.sourceforge.net">http://qpe.sourceforge.net</a>), which includes a number of applications developed with Qt/Embedded. However, an application QPE does not include is one to track expenses. Consequently, we present here an application called "Expenses" that lets you enter/edit/delete expenses, assign them a currency, and group them into categories. </p>



<h3>Signals and Slots</h3>


<p>One of the more notable Qt features involves signals and slots. Every GUI toolkit has to address the problem of how to connect user interaction (clicking a button or selecting an item in a menu, for instance) to program functionality (for example, calling a method). The basic idea here is that a component (such as a GUI element) can emit signals when something happens. This "something" could be users clicking buttons, data coming in via the network, or whatever. On the other hand, slots are simply ordinary methods marked up in a special way. You connect signals and slots with the <i>QObject::connect()</i> method. For example, in the constructor of the class <i>ExpensesMainWindow</i>, which implements the application window of our application (ExpensesMainWindow.cpp, available electronically), you see:</p>


<pre><p>
connect( _newExpenseAction,<br>
SIGNAL( activated() ), this,<br>
SLOT(slotNewExpense() ) );</p>

</pre><p>which means that whenever the object pointed to by <i>_newExpenseAction</i> emits the signal <i>activated()</i>, the Qt core invokes the method <i>slotNewExpense()</i> at the currently constructed object. <i>_newExpenseAction</i> is of the type <i>QAction</i>*, which is a class that abstracts from how users invoke a certain functionality; this can currently be via menu items or toolbar buttons. The signal <i>activated()</i> is emitted by <i>QAction</i> whenever users invoke this functionality. For each Qt class, the reference documentation tells you which signals and which slots are available. The slot <i>slotNewExpense()</i> is something we implement in our <i>ExpensesMainWindow</i> class.</p>


<p>Again, slots are just ordinary C++ methods marked up to be slots. Signals, on the other hand, are implemented by Qt internally and never appear in your code except in declarations and in <i>connect()</i> calls.</p>

<p>Take a look at the class declaration of the class <i>ExpensesMainWindow</i> in ExpensesMainWindow.h (also available electronically):</p>

<pre><p>
private slots:<br>
  void slotQuit();<br>
  void slotNewExpense();<br>
  void slotDeleteExpense();</p>

</pre>

<p>The pseudokeyword <i>slots</i> is what identifies these methods (and a few others not shown here) as slots. Of course, you do not need a patched C++ compiler to compile this &#151; the pseudokeyword <i>slots</i> is automatically defined away by the preprocessor. However, it serves as a sentinel for a Qt-provided program called the "Meta Object Compiler" (moc) that you need to run over your class declarations. Moc extracts the necessary information and writes a C++-source file, which you have to compile and link to your application as well. With the right build tools, you won't even notice this.</p>

<p>Now look at the constructor of the class <i>ExpenseDialog</i> (see ExpenseDialog.cpp, <A NAME="rl1"><A HREF="#l1">Listing One</A>):</p>

<pre><p>
QPushButton* cancelPB =<br>
   new QPushButton( "&amp;Cancel", this );<br>
connect( cancelPB, SIGNAL( clicked() ),<br>
   this, SLOT( accept() ) );</p>

</pre>

<p>Here, we connect the <i>clicked()</i> signal of the <i>QPushButton</i> class to the accept slot of the <i>ExpenseDialog</i> class. Actually, we do not define this slot, but instead inherit it from the base class, <i>QDialog</i> &#151; another proof that slots are just ordinary methods that can be private, protected, public, virtual, inherited, and reimplemented. The accept slot of the class <i>QDialog</i> simply closes a modal dialog and returns a positive return code to the code that has opened the modal dialog (see the methods <i>ExpensesMainWindow::slotNewExpense()</i> and <i>ExpensesMainWindow::slotEditExpense()</i> in ExpensesMainWindow.cpp) for how the modal dialog is opened and evaluated.</p>

<p>The class <i>ExpenseDialog</i> is an example for two other common Qt programming techniques. If you look at the source code, you find that we create lots of "widgets" (Qt's term for user-interface components, equivalent to "components" in the Java AWT or "controls" in Windows lingo) on the heap, but that there is not even a destructor where we would delete them. Are we having a huge memory leak here? And in an application meant for embedded devices where we need to conserve memory wherever we can?</p>

<p>Of course not. Qt maintains a parent-child hierarchy of all widgets (and actually of every object of a class that directly or indirectly inherits <i>QObject</i>). Whenever a widget is created, it registers with its parent, and when the parent is deleted, it will automatically delete its child widgets as well. So as long as the <i>ExpenseDialog</i> object is deleted, all the widgets in the dialog will be deleted. And the <i>ExpenseDialog</i> object is created on the stack, so it is deleted when the variable goes out of scope. This automatic deletion technique is also the reason why you should never create any widgets that are not top-level widgets on the stack &#151; they will be deleted by their parents when these are deleted as well, and trying to use the operator delete on memory allocated on the stack spells disaster. This does not apply to top-level widgets such as dialogs or the main application window because these have no parents and thus cannot be deleted automatically.</p>

<p>This automatic deletion leads to a programming style that is somewhat similar to using the Java AWT or Swing: Widgets are simply created and deletion is handled automatically. This is also why destructors are not so common in Qt GUI programming. Qt's solution is much more memory efficient than garbage collection as used by Java &#151; the child widgets are only kept around as long as they are needed and not until the garbage collection thread runs the next time.</p>

<p>Finally, the constructor of <i>ExpenseDialog </i>exemplifies layout management, another common Qt programming technique. While layout management is old hat to Java developers, GUI developers who have not developed for anything but Windows might be unfamiliar with it. With layout management, you do not specify the absolute positions of the widgets, but rather the positions relative to each other. For example, in the constructor, we have a vertically oriented layout (<i>toplevelVBL</i> of the class <i>QVBoxLayout</i>) that manages two other layouts, one grid oriented (<i>dataGL</i> of the class <i>QGridLayout</i>) and one horizontally oriented (<i>buttonsHBL</i> of the class <i>QHBoxLayout</i>). These in turn manage the input fields with their labels and the two buttons at the bottom.</p>

<p>Layout management has many advantages: Dialogs do not have to be redesigned after having been translated to another language, they still look nice when users resize them manually; and finally it is even easier to use after you have gotten the hang of it.</p>

<p>Of course, we could have created this dialog with Qt Designer, a graphical tool shipped with Qt for designing dialogs and other parts of your application. However, it's always a good idea to do something by hand before letting a tool do the work, which is why we have written and presented the code manually.</p>

<p>So if you use QPE, you can make one small change to the application to make it integrate nicely with QPE: In main.cpp (<A NAME="rl2"><A HREF="#l2">Listing Two</A>) replace <i>QApplication</i> with <i>QPEApplication</i> and link to libqpe.so. </p>



<h3>QMake</h3>


<p>Portable toolkits are fine and dandy, but when it comes to actually compiling code, portability typically comes to a halt. Consequently, QMake (included with Qt 3) takes a project description in a .pro file and creates a Makefile suitable for whichever platform you want. QMake supports many different UNIX versions with various compilers, as well as Windows, MacOS X, and Linux on embedded systems. <A NAME="rl3"><A HREF="#l3">Listing Three</A> is a typical .pro file. If QMake is set up correctly, <i>qmake -o Makefile expenses.pro</i> creates a Makefile suitable for your platform. QMake thus abstracts from different makefile syntax, compiler names, compiler switches, ways to build shared libraries, and so on. It even automates calling Qt's moc completely. With the files expenses.pro, qmake, and Qt 3, you can build the application on any platform supported by Qt &#151; not only Qt/Embedded. With a few smaller changes, it is even possible to build it with Qt 2.x &#151; you just replace the QDateEdit widget that is not contained in Qt 2.x with something else (three spin boxes come to mind). Also, because qmake is not included with Qt 2.x, you will have to use its predecessor tmake, available at <a href="ftp://ftp.trolltech.com/pub/freebies/tmake/">ftp://ftp.trolltech.com/pub/freebies/tmake/</a>. <A NAME="rl3"><A HREF="#l3">Listing Three</A> works with tmake the same as with qmake.</p>




<h3>Conclusion</h3>


<p>There are a number of restrictions to keep in mind when developing for handheld computers. First, since the iPAQ has a 240x320 pixel screen, we set the application window to this size and also restricted the dialog for entering new expenses. To make the columns of the central listview component fit at least somewhat in the available width, we had to abbreviate their headers, which could lead to problems if the abbreviations are not understood by the intended users. A toolbar usually does not provide anything that the menu does not provide itself, and given that a toolbar takes at least 20 pixels in a vertical direction (1/16th of the total available vertical space!), this decision was not hard to take.</p>


<p>Finally, we decided not to use the spreadsheet-like <i>QTable</i> class for displaying the entered expenses even though it would have had some advantages. However, <i>QListView</i> is more lightweight, both in run-time memory and in the code it takes in the Qt library, so we decided to go with that.</p>



<p><b>DDJ</b></p>
<H4><A NAME="l1">Listing One</H4>


<pre>#include "ExpenseDialog.h"
#include "Expense.h"

#include &lt;qcombobox.h&gt;
#include &lt;qdatetimeedit.h&gt;
#include &lt;qlabel.h&gt;
#include &lt;qlayout.h&gt;
#include &lt;qlineedit.h&gt;
#include &lt;qpushbutton.h&gt;
#include &lt;qvalidator.h&gt;

ExpenseDialog::ExpenseDialog( const QStringList&amp; categories,
         const QStringList&amp; currencies, QWidget* parent, const char*
name ) :
         QDialog( parent, name, true )
{
    // The top-level layout manager
    QVBoxLayout* toplevelVBL = new QVBoxLayout( this, 10 );

    // Create the widgets for data entry
    QGridLayout* dataGL = new QGridLayout( 5, 2, 10 );
    toplevelVBL-&gt;addLayout( dataGL );

    QLabel* dateLA = new QLabel( "Date:", this );
    dataGL-&gt;addWidget( dateLA, 0, 0 );
    _dateDE = new QDateEdit( this );
    _dateDE-&gt;setDate( QDate::currentDate() );

    dataGL-&gt;addWidget( _dateDE, 0, 1 );

    QLabel* descriptionLA = new QLabel( "Description:", this );
    dataGL-&gt;addWidget( descriptionLA, 1, 0 );
    _descriptionED = new QLineEdit( this );
    dataGL-&gt;addWidget( _descriptionED, 1, 1 );

    QLabel* categoryLA = new QLabel( "Category:", this );
    dataGL-&gt;addWidget( categoryLA, 2, 0 );
    _categoryCO = new QComboBox( this );
    _categoryCO-&gt;insertStringList( categories );
    dataGL-&gt;addWidget( _categoryCO, 2, 1 );

    QLabel* currencyLA = new QLabel( "Currency:", this );
    dataGL-&gt;addWidget( currencyLA, 3, 0 );
    _currencyCO = new QComboBox( this );
    _currencyCO-&gt;insertStringList( currencies );
    dataGL-&gt;addWidget( _currencyCO, 3, 1 );

    QLabel* amountLA = new QLabel( "Amount:", this );
    dataGL-&gt;addWidget( amountLA, 4, 0 );
    _amountED = new QLineEdit( this );
    _amountED-&gt;setValidator( new QDoubleValidator( _amountED ) );
    dataGL-&gt;addWidget( _amountED, 4, 1 );

    // Create the OK and Cancel buttons
    QHBoxLayout* buttonsHBL = new QHBoxLayout( 10 );
    toplevelVBL-&gt;addLayout( buttonsHBL );
    QPushButton* okPB = new QPushButton( "&amp;OK", this );
    okPB-&gt;setDefault( true );
    connect( okPB, SIGNAL( clicked() ), this, SLOT( accept() ) );
    buttonsHBL-&gt;addWidget( okPB );
    QPushButton* cancelPB = new QPushButton( "&amp;Cancel", this );
    connect( cancelPB, SIGNAL( clicked() ), this, SLOT( accept() ) );
    buttonsHBL-&gt;addWidget( cancelPB );

    // restrict even this dialog to 240x320
    setMaximumSize( 240, 320 );
}
void ExpenseDialog::setExpenseValues( Expense* expense )
{
    // preset the widgets with the values from the Expense object
    _dateDE-&gt;setDate( expense-&gt;date() );
    _descriptionED-&gt;setText( expense-&gt;description() );
    for( int i = 0; i &lt; _categoryCO-&gt;count(); i++ )
        if( _categoryCO-&gt;text( i ) == expense-&gt;category() ) {
            _categoryCO-&gt;setCurrentItem( i );
            break;
        }
    for( int i = 0; i &lt; _currencyCO-&gt;count(); i++ )
        if( _currencyCO-&gt;text( i ) == expense-&gt;currency() ) {
            _currencyCO-&gt;setCurrentItem( i );
            break;
        }
    _amountED-&gt;setText( QString::number( expense-&gt;amount(), 'f', 2 ) );
}
QDate ExpenseDialog::date() const
{
    return _dateDE-&gt;date();
}
QString ExpenseDialog::description() const
{
    return _descriptionED-&gt;text();
}
QString ExpenseDialog::category() const
{
    if( _categoryCO-&gt;count() &gt; 0 )
        return _categoryCO-&gt;currentText();
    else
        return QString::null;
}
QString ExpenseDialog::currency() const
{
    if( _currencyCO-&gt;count() &gt; 0 )
        return _currencyCO-&gt;currentText();
    else
        return QString::null;
}
double ExpenseDialog::amount() const
{
    double value = 0.0;
    bool ok;
    value = _amountED-&gt;text().toDouble( &amp;ok );
    if( ok )
        return value;
    else
        return 0.0;
}
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two</H4>


<pre>#include &lt;qapplication.h&gt;
#include "ExpensesMainWindow.h"

int main( int argc, char* argv[] )
{
    QApplication app( argc, argv );

    ExpensesMainWindow mainWindow;
    mainWindow.show();
    app.setMainWidget( &amp;mainWindow );

    return app.exec();
}
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3">Listing Three</H4>


<pre>TEMPLATE += app
TARGET += expenses

SOURCES += ExpensesMainWindow.cpp main.cpp Expense.cpp ExpenseDialog.cpp

HEADERS += ExpensesMainWindow.h Expense.h ExpenseDialog.h


</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>


</body>
</html>
