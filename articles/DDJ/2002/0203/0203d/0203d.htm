<html>
<head>
<title>Mar02: Debugging PHP  Using a C++ Compiler</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Debugging PHP  Using a C++ Compiler</h1>
<p><i>Dr. Dobb's Journal</i> March 2002</p>
<h2>Accelerating the debugging and auditing process</h2>

<h3>By Forrest J. Cavalier III</h3>

<I>
Forrest provides consulting services and software development through Mib Software. He can be contacted at <a href="mailto:forrest@mibsoftware.com">forrest@mibsoftware.com</a>.</I>

<hr>

<p>Many scripting languages &#151; including Perl and PHP &#151; do not feature semantic error reporting expected from good C++ compilers. Instead, they parse only for syntactic errors and do not report common programming errors, or potential errors such as misspelled variable and function names, mismatched types in assignments and expressions, mismatched numbers and types of function parameters, functions ending without returning a value, unused local variables, and use without assignment.</p>
<p>Consequently, you commonly see requests on mailing lists for program-checking tools that can report these errors. One approach to developing such a tool might be to write a complete parser and semantic analyzer. My approach, however, translates the source into C++, so that existing C++ tools can perform the analysis. To that end, I present PHP2C++, a working PHP-to-C++ translator (available electronically; see "Resource Center," page 5, and <a href="http://www.mibsoftware.com/">http://www.mibsoftware.com/</a>).</p>
<DDJADVERTISEMENT INLINE>

<p>PHP (<a href="http://www.php.net/">http://www.php.net/</a>) is a scripting language with a syntax based on C. The PHP interpreter parses the source and any included files for syntactic errors only, and otherwise does limited error checking. Typical of many scripting languages, the lack of semantic analysis can let errors remain undetected:</p>


<ul>
  <li>PHP does not use declared variables, so misspellings pass the syntactic check.
  <li>PHP has weak typing of variables, with many automatic conversions and very little type checking in expressions.

  <li>Unknown function names are found only when the function call is attempted at run time.  

  <li>The number of function call parameters is checked only when the function is run.

  <li>Run-time checking of the types of function call parameters can be done by the programmer, but typically is not.

</ul>

<h3>Simplifying Translation</h3>


<p>Language translation is a hard problem. The requirements for this type of translation are simplified by a few reasonable assumptions and limitations.</p>


<p></p>

<ul>
  <li>Translation is to be from one imperative language to another with input files known to be syntactically valid. (Syntax is already verified by the scripting language.)
  <li>The primary goal is a translation for C++ lexical analysis. Since the result will not be executed, 100 percent operational equivalence is not necessary.

  <li>Programmers will be stepping through the errors and warnings. Some errors and omissions in the translation can be tolerated. (99 percent translation is fine. Not translating deprecated or unused language features is fine.)

  <li>Programmers can supply translation hints to guide the translation.

</ul>

<p>"Translation hints" are techniques I've previously used in other tools I've developed. For example, hints are instructions to the translator to insert or delete snippets of code in the output. Hints appear in the source file as comments, so that they do not change the original operation. </p>

<p>For PHP2C++, an insertion hint is a PHP comment starting with <i>/</i>*<i>c++:</i> and ending with *<i>/</i>. PHP2C++ strips off the beginning and end sequence from the comment, and places the rest into the C++ output. A deletion hint starts with <i>/</i>*<i>php:</i>*<i>/</i> and continues to the end of the next comment (which is typically <i>/</i>**<i>/</i>); the PHP code in between will not appear in the C++ output.</p>



<h3>Resolving Differences</h3>


<p>There are four groups of differences between imperative programming languages for the translator to accommodate. Many scripting languages are similar, and some of the issues and techniques also apply when other source languages are translated.</p>


<p></p>

<p><b>Differences in syntax.</b> By assuming the input is already in valid syntax, and ignoring infrequently used features, accommodating syntax differences is often the easiest part of the translation. PHP2C++ checks a list of functions responsible for recognizing certain PHP tokens and words. When a function recognizes the syntax, it translates to the C++ equivalent and returns the number of source characters processed. It may set state variables in order to affect later translation. <b></p>


<p>Differences in names and scope.</b> The characters allowed in variable and function names can be different, and may or may not be required to match case. All PHP variable names begin with <i>$</i>. To conform to the C++ standard, PHP2C++ converts the <i>$</i> to <i>_s_</i>, which changes the names appearing in the error message output as well.</p>

<p>Names in C++ are case sensitive. If the source language has case-insensitive names (PHP has case-insensitive function names) the translator can translate them, but I chose not to translate them to report any nonstandard capitalization.</p>

<p>Scoping rules between languages can be slightly different. For example, variable names in a PHP function body are local unless declared with the <i>global</i> keyword. (Unintentionally omitting the global declaration is a frequent PHP programmer error I wanted to catch.) This version of PHP2C++ translates each global declaration into a declaration of a local variable. (This is lexically correct, but a more advanced translation would allow operational equivalence of accessing global variables.)</p>

<p>Because C++ requires declaration before use and all statements to appear within function bodies, four passes are made through each PHP source file to produce one C++ output file.</p>


<ul>
  <li>The first pass writes function declarations.
  <li>The second pass writes class declarations, including member function bodies.

  <li>The third pass writes <i>main()</i>, which contains all PHP source that is outside function bodies. (A side effect is that comments between functions will appear in the body of <i>main()</i>. This does not effect lexical scan.)

  <li>The last pass writes all the function bodies.

</ul>


<p><b>Differences in compiled versus interpreted behavior.</b> Many scripting languages often have "interpreted" strings in which the values of variables mentioned within strings are inserted at run time. This is a commonly used feature in PHP. PHP2C++ splits the strings into variables and constant sections joined with the <i>+</i> operator override.</p>


<p>A few infrequently used PHP features that have no easy C++ implementation are not translated. PHP has a feature called "variable variables" where a string variable can be used to look up the value of another variable or function by name at run time. Another feature allows the file name of the <i>include</i> statement to be an interpreted expression at run time. Both features would require a translation hint to remove the errors from the C++ compiled output.</p>


<p><b>Differences in declarations and strong versus weak typing.</b> Like many scripting languages, PHP uses weak typing: There are no variable declarations and there is automatic type juggling. In contrast, C++ uses strong typing: Variable declarations are required before use, and variables do not change type. Translating from weak to strong typing is the most challenging part of the translation.</p>


<p>A complex translator could automatically infer the type of a variable from context, or more simply insert a declaration of type "mixed" for every variable mentioned in the PHP source. Unfortunately, this would hide misspellings and inappropriate type mixing. Misspelled variables would be declared along with the correct spellings. The mixed class would override most expression operators and result in legal C++, but would defeat semantic type checking. </p>

<p>The technique I decided to use requires you to use translation hints to insert variable declarations. This is usually possible by inserting a "shorthand" hint for a type (one of <i>/</i>*<i>int</i>*<i>/</i>, <i>/</i>*<i>void</i>*<i>/</i>, <i>/</i>*<i>bool</i>*<i><b>/</i></b>, <i>/</i>*<i>string</i>*<i>/</i>, <i>/</i>*<i>mixed</i>*<i>/</i>, <i>/</i>*<i>array</i>*<i>/</i>, and <i>/</i>*<i>string_array</i>*<i>/</i>). <A NAME="re1"><A HREF="0203de1.htm">Example 1</A> shows hints inserted into a PHP function header and the resulting C++ output. (Hints for function return types must appear after the PHP <i>function</i> keyword.)</p>

<p>You should strive to use the most accurate variable type for each hint. Avoid using the mixed type, because that will prevent C++ type checking. When array elements will always contain a string, use the <i>string_array</i> type instead of <i>array</i> to permit additional checking. </p>



<h3>Type Juggling</h3>


<p>For the purpose of program audit, you need to be cautious in declaring C++ classes with operator overrides and constructors that mimic most of the automatic type juggling of PHP. (For instance, the statement <i>$I = '20 fish' + 30.2;</i> results in <i>$I</i> being a variable of floating-point type with the value 50.2.) I choose to allow converting integers to strings automatically, but want to flag converting strings to integers as a potential error.  </p>


<p>Strings and arrays are common conditional expressions in PHP. PHP2C++ avoids the need for an (int) operator for strings and arrays by enclosing all <i>if()/while()</i> conditions in <i>!!()</i>. This is sometimes unnecessary but always lexically correct.</p>



<h3>Using PHP2C++</h3>


<p>When using PHP2C++, the first step is to obtain and compile the PHP2C++ source. You run PHP2C++ by specifying the source filename as the first command-line argument and the output filename as the second. When you run a C++ compiler on the output, do not be alarmed by many errors if you have not inserted translation hints for variable declarations.  </p>


<p>Each function body typically requires a small number of hints. Since <i>#line</i> directives were inserted into the output, your IDE will quickly take you right to the PHP source line, where you can easily add hints or correct errors.</p>

<p>After the hints are added, there should be only a few remaining C++ errors, which fall into one of the following categories:</p>


<ul>
  <li>Programmer errors (misspellings and the like). Action: should be corrected.
  <li>Lines where PHP run-time type juggling comes into play. Action: Consider changing the PHP (use <i>strval()</i> and <i>intval()</i> functions, for example, which will improve the PHP slightly, and satisfy the C++ compiler at the same time).

  <li>A feature not supported by this version of PHP2C++. Action: You may need to inspect the C++ that was output to determine what is not supported. You can choose to use a translation hint to resolve it, or just ignore it.

</ul>


<p>If your PHP uses classes and declares more than one, be aware that Microsoft C++ compilers stop reporting errors after the first class with errors. (The function bodies in later class declarations are not even scanned for syntax errors!) I prefer the error reporting of the GNU C++ compiler, but I have used PHP2C++ successfully with Microsoft compilers when I use translation hints to remove all the errors in earlier class translations.</p>



<h3>Conclusion </h3>


<p>The focus of this version of PHP2C++ is translation for lexical analysis &#151; validating PHP code, after a reasonable effort to add translation hints. I've used it to accelerate debugging and auditing. In addition to in-house use, I have found several errors in popular and mature public PHP projects.  </p>


<p>A future version of PHP2C++ will translate for operational equivalence requiring a more complicated translator, class implementations, and a large function library. </p>


<p><b>DDJ</b></p>
</body>
</html>
