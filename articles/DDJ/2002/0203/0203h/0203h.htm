<html>
<head>
<title>Mar02: Java Q&A</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>How Do I Map SQL  Database Tables to Java Objects?</h1>
<p><i>Dr. Dobb's Journal</i> March 2002</p>

<h3>By Michael J. Yuan</h3>

<I>
Michael is a Ph.D. candidate at the University of Texas at Austin where he develops Java applications for astrophysics research. He can be reached at <a href="mailto:juntao@astro.as.utexas.edu">juntao@astro.as.utexas.edu</a>.</I>

<hr>

<p>Keeping up with the cutting edge of research generally requires sifting through piles of journals and reading tons of papers in your field. This can be a full-time job. Often, however, this activity can be shared amongst groups of researchers, with each person responsible for reading and filtering out the less important papers. The rest of the group would then only need to read and discuss a much smaller number of papers, based on the filtering. This scenario, though, requires close communication among researchers and is hard to achieve, especially if the group is not situated in the same geographical location. To improve remote communication among the participants in my group, I developed a research information system that lets collaborators around the world put in new papers, classify them into categories, and make comments. A web-based, database-powered application server was an obvious choice to give users anywhere in the world access at anytime. </p>
<p>The web application interacts with a relational database (MySQL) on the back end, and presents data through web interfaces using JavaServer Pages (JSP). The database contains articles, categories, comments, and user-related information in separate tables, as well as the relationships among them. For example, an article can belong to any number of categories and a category can contain any number of articles. That many-to-many mapping relationship is stored in the <i>ArticleCategory</i> table. Each entry in that table is a pair of article and category IDs. <A NAME="rl1"><A HREF="#l1">Listing One</A> (schema.sql) is the database schema for tables <i>Article</i>, <i>Category</i>, and <i>ArticleCategory</i>.</p>
<DDJADVERTISEMENT INLINE>

<p>I used JSP to handle data presentation and user interaction. JSP accesses the back-end database through a middle layer of Java classes. The advantage of this design is that the presentation logic is separated from the internal data storage structure. Therefore, database experts can work on the back end and communication experts work on the web site, independent of each other. Then, ideally, I would only need to make small changes in the middle layer to match the changes on either side. Obviously, it was important to make the middle layer simple yet flexible so that changes can be made correctly and easily. </p>

<p>However, Java's object structure is not compatible with the relational structure of SQL databases; so designing a simple, flexible structure to map relational data tables to objects was a major challenge. In this article, I discuss my experiences in implementing that SQL table and Java object mapping. To simplify the discussion, I use the <i>Article</i> table as an example. The mapping for other tables can be done in a similar manner.</p>

<p>A capable database server can take the burdens off the web application by running stored procedures, supporting transactions, and so on. But for maximum portability &#151; especially among small database servers &#151; I assume the database does nothing more than execute standard SQL commands.</p>



<h3>The Simple Approach: Static Methods</h3>


<p>I started by writing static methods for each database operation and grouped them into classes named after database tables. Those database operations were accomplished through raw JDBC calls. A table row is stored in a <i>Hashtable</i>. The field names are "keys" and values are "values." This approach was quick to implement and easy to add/remove testing/debugging methods during the initial experimental stages; however, it is not an object-oriented design. The classes were only collections of methods. Without an efficient design, new methods can be added randomly, and at will. The number of methods and the relations among them would quickly grow out of control and, even worse, the data and the methods were separated. <i>Hashtable</i> does not provide a readily available method to ensure data integrity, and programmers have to make sure that they do not make any mistakes in constructing SQL statements. One typo in a fieldname can be hard to debug. Clearly, this was not an optimal solution for a complex production system.</p>




<h3>The Sophisticated Approach:  Enterprise JavaBeans</h3>


<p>A more sophisticated approach is to use Enterprise JavaBeans (EJBs) technology. EJBs run in a separate server called the "EJB container." Applications access the beans through the container. The EJB container automatically provides many support services for beans such as security, transaction, and database connection pooling. This approach provides tight integration with other Java technologies.</p>


<p>In an EJB solution, each bean corresponds to a row in a database table. The <i>Remote</i> interface of the bean declares methods to access data fields in the row and other business methods. The <i>Home</i> interface declares factory methods to create new beans or find multiple beans. The EJB container implements most of those methods by using automatically generated SQL statements. To access the database, the application obtains proxy objects implementing those two interfaces from the EJB container.</p>

<p>The container-generated Java and SQL code greatly reduce human errors and offer flexibility. The SQL templates can be defined in the EJB container configuration file. When the database schema is changed, you only need to change the configuration file without rewriting or recompiling the beans. (A tutorial for constructing database access EJBs can be found at <a href="http://java.sun.com/j2ee/j2sdkee/techdocs/guides/ejb/html/DevGuideTOC.html">http://java.sun.com/j2ee/j2sdkee/techdocs/guides/ejb/html/DevGuideTOC.html</a>.)</p>

<p>Although EJB looks like a good solution, it is not designed for small applications. Instead, it was originally designed for distributed applications and its method calls are passed through slow network protocols with the overhead of constructing proxy objects. EJB 2.0 has improved single computer performance with a new <i>Home</i> interface, but running an EJB container can still be resource intensive and expensive. Few affordable web hosting companies provide EJB support.</p>

<p>For my small-sized application, I did not need something that sophisticated and expensive, but I did need a flexible solution to minimize the headaches for future changes. I also wanted to reuse much of the similar SQL code to minimize the chances for human errors. I decided to adapt some of the design patterns from the EJB approach but write my own class hierarchy. As an added bonus, this approach also allowed me to transfer my code to EJB-based solutions in the future &#151; when my application grows big enough to justify the cost. However, without the EJB container, I lose useful features such as integrated database connection pooling and transaction support. To compensate for that, I either wrote at least part of those features or used third-party libraries.</p>



<h3>New Architecture</h3>


<p>Interface <i>TableRow</i> defines a set of methods to access and modify a row of data; see <A NAME="rl2"><A HREF="#l2">Listing Two</A>. <i>TableRow</i> is somewhat like the <i>Remote</i> interface in EJBs. Each instance of a class implementing <i>TableRow</i> corresponds to a row of data in a database table. The <i>setValue()/getValue()</i> methods can query/update fields in the current row object. The changes are permanently committed into the database when <i>commit()</i> is called. Those methods are generic versions of the <i>getXXXX()/setXXXX()</i> methods in the EJB approach.</p>


<p>Abstract class <i>Table</i> implements the <i>TableRow</i> interface and a number of factory methods (create and find) to construct new <i>TableRow</i> objects; see Table.java (available electronically; see "Resource Center," page 5). It is somewhat similar to EJB's <i>Home</i> interface. Each class extending <i>Table</i> corresponds to a table in the database. Class <i>Table</i> serves as both a base of the type hierarchy structure and a reusable code repository. The method <i>create()</i> inserts a new row in the database and returns the corresponding <i>TableRow</i> object. A row in the database can be deleted by the <i>deleteByPrimaryKey() </i>method. Method <i>findByFieldName()</i> returns all the rows that match the given <i>field:value</i> pair. That method is a generic version of EJB's <i>findByXXXX()</i> method.</p>

<p>Now, to map the database table <i>Article</i> to the class <i>Article</i>, all I have to do is supply a constructor such as in Article.java (also available electronically). The constructor assigns values such as table name, field name, and the full name of the current class. Then, the constructor needs to call method <i>init()</i>, which is defined in the base class <i>Table</i>, to do some further initialization work. <A NAME="rf1"><A HREF="0203hf1.htm">Figure 1</A> shows the structure of the application and the class diagram of the middle layer. For simplicity, I assumed that each database table has a <i>Long Integer</i> type trivial <i>Primary Key</i> field. This field does not have any meaning other than uniquely identifying the row. It is like a serial number. I assign the primary key value for each row automatically inside the middle layer when the row is inserted into the database. </p>

<p>When I programmed the JSP pages to interact with the middle layer, I first initialized an instance of class <i>Article</i> to access the factory methods. Then I retrieved rows from the database table into <i>TableRow</i> objects using the factory methods. The content of each row can now be viewed and updated using the <i>getValue()/setValue()</i> methods in <A NAME="rl3"><A HREF="#l3">Listing Three</A>.</p>



<h3>SQL Types</h3>


<p>One of the biggest problems I had when constructing a generic base class was how to handle different SQL/Java types. The generic class does not know what types it will encounter in real-world tables. However, the JDBC driver and the SQL syntax require different treatments for different SQL/Java types. I solved this by using generic methods in JDBC's <i>PreparedStatement</i> and <i>ResultSet</i> classes. <i>PreparedStatement</i> automatically escapes any illegal SQL text. It also runs much faster than raw <i>Statement</i> by precompiling the SQL templates.</p>


<p>Generic methods <i>PreparedStatement.setObject()</i> and <i>ResultSet.getObject()</i> can handle all standard SQL types correctly. They use a JDBC standard mapping between Java object types and SQL types to construct proper SQL statements and retrieve data into objects with proper Java types. One trade-off is that all the data retrieved from the database is java.lang equivalent objects rather than Java built-in types. When I create new data rows, I also need to pass the values as java.lang objects. An exception will be thrown if the types cannot be matched correctly. The standard mapping for my example is noted in the comments in <A NAME="rl1"><A HREF="#l1">Listing One</A>. </p>

<p>This object-based approach does not impose any major inconvenience on programmers. Most database contents are already either <i>String</i> or <i>Blob</i> types, which have no equivalent Java built-in types anyway.</p>

<p>If you have your own user-defined SQL types in tables, you need to define the corresponding Java types that implement the <i>SQLData</i> interface. You then need to establish the links between the custom SQL types and custom Java types in a new type map and inform the <i>Connection</i> object through <i>Connection.setTypeMap()</i>. I could have made the class <i>Table</i> more generic by taking custom type maps. But since this is a rarely used feature, I assume standard type map for simplicity.</p>



<h3>Database Connections</h3>


<p>Database connections are expensive. Creating connection context, opening network sockets, and destroying connection context are resource- and time-consuming processes on both the application and database server sides. It is inefficient to create a new connection for each SQL statement.</p>


<p>The EJB approach addresses this problem by using a database connection pool. The pool is a set of preestablished connection objects in the memory that is maintained by the container. When users request a new connection, the container simply fetches one from the pool instead of making a new one. When users close the connection, the connection is returned to the pool. That is considerably faster than working through the slow network protocol.</p>

<p>Although I do not run EJB containers, I can still do database connection pooling through third-party utilities, of which there are several available. I used the PoolMan package from CodeStudio (<a href="http://codestudio.com/">http://codestudio.com/</a>), a generic Java object pool utility. The static code section in class <i>Table</i> loads in the connection pool driver. That makes sure that the driver is loaded before any <i>Table</i> or <i>TableRow</i> objects are initialized. At load time, the pool driver reads the configuration file poolman.xml for the appropriate JDBC driver and database connection information. File poolman.xml must be located in the JVM's classpath.</p>

<p>After the connection pool driver is loaded, <i>Connection conn = DriverManager.getConnection("jdbc:poolman://" + databaseName);</i> fetches a connection from the pool, and <i>conn.close();</i> returns the connection (<i>conn</i>) back to the pool.</p>



<h3>Synchronization (Transaction)</h3>


<p>Although a complete transaction support system is beyond the scope of my project, I still wanted some basic synchronization so that the data would not get corrupted under normal multiuser conditions. My approach was to synchronize potentially conflicting code segments against the table class object: <i>Class.forName(className)</i>. Since there is only one class object for each table in a single JVM, this approach guarantees that only one synchronized code segment is accessing the table at any give time. Of course, it will not work if the middle layer runs across several JVMs.</p>


<p>Another concern about data integrity comes from long updates. Suppose the application needs to update multiple fields of a row, one by one. If something goes wrong (software exception, JVM dies, and so on) in the middle of the process, some of the fields might get updated while others do not. That could cause serious database integrity problems. The <i>commit()</i> method can partly simulate atomic transactions and reduce the chance for such problems. The application can update the row using <i>setValue()</i> and the updated values can be accessed via the <i>getValue()</i> method. But no permanent changes will be made to the database until <i>commit()</i> is called. Method <i>commit()</i> uses a single SQL statement to do the updates. If it fails, no field is updated and the database integrity is not violated.</p>



<h3>Adding More Table-Specific Methods</h3>


<p>In addition to the generic methods already defined and implemented for the <i>TableRow</i> and <i>Table</i> classes, I can also add table-specific methods in the table class implementations. Those methods can conduct specific operations related to the current table. For example, for an <i>Article</i> row, I might want a method to report if any of the text fields are empty. I can implement such methods in the <i>Article</i> class.</p>


<p>If similar user-defined methods are implemented repeatedly in some table classes, it might be advantageous to establish new layers of abstraction for code reuse and a clear type hierarchy. It is conceivable that entity tables such as <i>Article</i> and <i>Category</i> need a different set of table-specific methods compared with relation tables such as <i>ArticleCategory</i>. For this purpose, I added an additional layer of interfaces and abstract classes, which are inherited from <i>TableRow</i> and <i>Table</i>, to model the two types of database tables. <A NAME="rf2"><A HREF="0203hf2.htm">Figure 2</A> illustrates the new class diagram. My simple and flexible design has made it easy to map complex data structures and add complex business logic into the middle layer.</p>


<p><b>DDJ</b></p>
<H4><A NAME="l1">Listing One</H4>


<pre># schema.sql
# NOTE: The SQL type "DATETIME" corresponds to Java type "java.sql.Timestamp";
# "BIGINT(20)" corresponds to "Long"; 
# "TEXT" and "MEDIUMTEXT" correspond to "String".

CREATE TABLE Article (
  Article.ArticleID BIGINT(20) PRIMARY KEY,
  Article.Title TEXT,
  Article.Authors TEXT,
  Article.Abstract TEXT,
  Article.Text MEDIUMTEXT,
  Article.PostDate DATETIME
);
CREATE TABLE Category (
  Category.CategoryID BIGINT(20) PRIMARY KEY,
  Category.Name TEXT,
  Category.ParentID BIGINT(20)
);
CREATE TABLE ArticleCategory (
  ArticleCategory.ArticleCategoryID BIGINT(20) PRIMARY KEY,
  ArticleCategory.ArticleID BIGINT(20) NOT NULL,
  ArticleCategory.CategoryID BIGINT(20) NOT NULL
);
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two  </H4>


<pre>#TableRow.java
package TableObjects;

import java.util.*;
import java.sql.*;

public interface TableRow {

  // "getValue/setValue" retrieve/update values
  // in the current row object.
  Object getValue (String tableFieldieldName) throws Exception;
  void setValue (String tableFieldName, Object tableFieldValue) 
                            throws Exception;
  // commit changes into backend database.
  void commit () throws Exception;

  String getTableName ();
  String [] getFieldNames (); 
  String getPrimaryKeyName ();
  Object getPrimaryKeyValue ();

}
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3">Listing Three</H4>


<pre>// initialize a Factory instance 
Table ArticleFactory = new Article();

// Get a row using a factory method.
// Find the row that has a primary key value of 0.
TableRow articleRow = ArticleFactory.findByPrimaryKey( (new Long(0) );

// Retrieve a field value from the row.
String subject = (String) articleRow.getValue("Subject");

// Change a field value in the Row.
articleRow.setValue("Subject", "First Post!");

// Commit the change to the backend database
articleRow.commit();


</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>


</body>
</html>
