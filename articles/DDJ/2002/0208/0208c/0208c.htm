<html>
<head>
<title>Aug02: Tracking Software  Development  Projects</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Tracking Software  Development  Projects</h1>
<p><i>Dr. Dobb's Journal</i> August 2002</p>
<h2>A physicist looks at project progress</h2>

<h3>By Joe Marasco</h3>

<I>
Joe is a senior vice president at Rational Software and holds a Ph.D. in physics from the University of Geneva, Switzerland. He can be contacted at jnm@rational.com.</I>

<hr>

<p>Progress curves reported at the end of software development projects typically look like <A NAME="rf1"><A HREF="0208cf1.htm">Figure 1</A>. Details vary, but the curve's general form is remarkably consistent and reproducible. Referred to as "S-Curves" because they resemble the letter "S," these curves describe a wide variety of human behavior; the classic learning curve, for instance, assumes this shape. Three regions characterize the curve: The flat part early in the project (the first 20 percent or so), the ramp in the middle, and another flat part late in the project. As <A NAME="rt1"><A HREF="0208ct1.htm">Table 1</A> shows, you can associate interesting behaviors with these regions for at least three seemingly different activities.</p>
<p>Why do these seemingly different activities all exhibit S-Curve behavior? What underlying forces produce this curve over and over again? To address these questions, I'll focus on the software development process.</p>
<DDJADVERTISEMENT INLINE>



<h3>It All Goes Back to Newton</h3>


<p>As anyone who has ever worked on a project knows, projects, like physical bodies, have inertia: If you leave them alone, they either stay put or continue to move as before. The measure of inertia is mass &#151; the more massive the body, the harder it is to influence. In this analogy, large, complex projects tend to be more massive than small, simple projects. </p>


<p>To change the state of motion of a body or a project, you must accelerate it. Newton said that the acceleration of a body is proportional to the force applied to it. Without any other compelling theory or data, we assume that Newton's Law applies to projects as well as to physical bodies.</p>

<p>But here's the problem: We experience acceleration when our car peels out at a stoplight, when we stomp on the brakes, or when elevators take off or come to a sharp stop. We rarely measure it, however. More often, we measure two other variables &#151; velocity (speed) and position (location, or where we are). But force is only indirectly related to these variables.</p>



<h3>Rates of Change, Derivatives, And the Slope of the Tangent</h3>


<p>So how are position, velocity, and acceleration related? By definition, velocity is the rate of change of position, and acceleration is the rate of change of velocity. If you plot the position of a body versus time, you can get the velocity by looking at the rate of change of the position. Similarly, once you have the velocity curve versus time, you can look at its rate of change and obtain the acceleration curve versus time.</p>


<p>In calculus, this means taking the derivative of the position function to get the velocity, and taking the derivative of the velocity function to obtain the acceleration. The acceleration is, therefore, the second derivative of the position. Even if you don't know these functions analytically, you can always take the derivatives numerically, so long as you have position data.</p>

<p>According to Newton, acceleration is proportional to the force applied, so the second derivative of the position of an object is proportional to the force. </p>

<p>Remember: You can find the derivative (rate of change) for any curve by looking at a line tangent to the curve at a given point. The value of the tangent's slope is equal to the derivative at that point. But can you use reasoning of this type to understand the forces at work on software development projects? </p>



<h3>The Project  Velocity Curve</h3>


<p>Again, most projects can be plotted according to <A NAME="rf1"><A HREF="0208cf1.htm">Figure 1</A>, a "position versus time" curve. What does the velocity curve look like? </p>


<p>Taking the rate of change of the project completion curve in <A NAME="rf1"><A HREF="0208cf1.htm">Figure 1</A> yields <A NAME="rf2"><A HREF="0208cf2.htm">Figure 2</A>, in which the vertical axis has been normalized. This graph tells you that projects start off slowly, move faster until they reach maximum velocity (the halfway point in <A NAME="rf2"><A HREF="0208cf2.htm">Figure 2</A> because the project completion curve is symmetric), then start slowing down. As you cross the finish line, you are actually going fairly slowly, much as you did at the beginning. </p>

<p>This is consistent with everyday experience. Finishing is hard. Getting all the fine details worked out so that you can deliver the product seems to take forever. Often it feels like you stagger across the finish line. So what does this say about the underlying forces driving the project? Well, at this point physicists would take another derivative. </p>



<h3>The Project  Forces Graph</h3>


<p>The resulting acceleration curve, which implies the forces at work, looks like <A NAME="rf3"><A HREF="0208cf3.htm">Figure 3</A>. During the first third of the project, you see an increasing positive force. This corresponds to a lot of enthusiasm for the new project, the addition of new team members, and general optimism about the chances of success. Cynics might call this the "ignorance is bliss" period, but that positive, increasing force causes the project to gain velocity.</p>


<p>At about the one-third point, this positive force begins to decline. Reality is setting in; people are far enough along to start to understand what the real problems are, and beginning to feel some schedule pressure. After all, they have now used up one third of the time but still have mountains of work to do. Also, the team is beginning to feel the full burden of a large staff; a lot of time is spent in meetings, and communicating information to all team members grows difficult. </p>

<p>At the halfway point, according to <A NAME="rf3"><A HREF="0208cf3.htm">Figure 3</A>, a negative force sets in. The team begins to feel the project pushing back. Many really tough problems are not succumbing to solutions as quickly as thought. People begin to panic as more and more sand slips through the narrows of the hourglass. At about the two-thirds point, the force hits its maximum negative value &#151; there is this sensation of swimming in molasses. If the project stays here for long, it dies. </p>

<p>And then, when you most need it, there is a breakthrough. All of a sudden, things don't look quite so bleak; although a negative force is still at work &#151; you know there are a million details left to complete and not much time to do it in &#151; this force decreases. The team can see the finish line, and the negativity decreases until you cross it.</p>

<p>Be aware that the actual turning points on this curve &#151; one third, one half, two thirds &#151; vary from project to project, and in turn affect the velocity curve and project percent completion curve. This is gratifying. You started with a prototypical percent complete curve, took derivatives, and inferred the forces underlying the project. Empirically, the data seems to fit the theory. But have you really accomplished anything here? </p>



<h3>Reality Intrudes</h3>


<p>What you would like to be able to do is predict the percent complete curve while in a state of incompletion. In other words, you want to know when you will be finished. At any point in time, all you have is that portion of the curve behind you, and some notion of the velocity curve. The forces curve is hard to pin down quantitatively. In fact, it is often hard to understand the velocity curve, and metrics that could indicate velocity would be very, very useful. Today, many project metrics focus exclusively on position &#151;  "Where are we?" To forecast accurately, however, you need both actual position and actual velocity. </p>


<p>Should you ever have the ability to understand how the velocity is changing, then you have a more complete picture. So you need to think about project metrics collection in this light. </p>



<h3>What About Iterative Development?</h3>


<p>All this is somewhat introductory; you don't do software development projects in one fell swoop. Instead, you break them down into iterations &#151; each with its own rhythm &#151; so <A NAME="rf1"><A HREF="0208cf1.htm">Figures 1</A> through 3 are really only approximations. For example, for a project with four iterations, the percent complete curve would probably look more like <A NAME="rf4"><A HREF="0208cf4.htm">Figure 4</A>, where four S-Curves are stacked on top of each other. Percent complete is cumulative, and you assume that each iteration takes 25 percent of the time and gets you 25 percent of the way along on the completion curve. </p>


<p>Now jump to the velocity and acceleration (forces) curves that correspond to this four-iteration percent complete graph (<A NAME="rf5"><A HREF="0208cf5.htm">Figure 5</A>). What do these graphs of the derivatives tell us?</p>

<p>First, you see that the velocity curve replicates itself four times &#151; no surprise there. The project gains and loses velocity each time, as each iteration follows a somewhat similar rhythm. The second derivative curve &#151; acceleration &#151; has three discontinuities. At the start of each iteration after the first, you need to kick out the residual negative force from the previous iteration and impart an initial positive force. This is what causes the velocity vector to change abruptly. Without this instantaneous, discontinuous force, you can't get going again without losing time. </p>

<p>You shouldn't be surprised by the discontinuity &#151; after all, you started at zero with a nonzero positive force to get the project underway. Most good project managers recognize this need and apply requisite force at the appropriate time. After applying this positive force, you need to once again build it until the iteration hits its wall, and the inevitable negative forces set in. Then it's just a question of hitting the breakthrough for that iteration, the one that again reverses the negative force curve. </p>



<h3>Iterations and Phases</h3>


<p>In real life iterative development, there are many iterations, divided into distinct phases. How can you inject this sort of reality into this model? </p>


<p>The Rational Unified Process, for instance, defines four phases: Inception, Elaboration, Construction, and Transition, each with different characteristics. Early in the project, you are doing a lot of discovery (new learning). In the middle, you do somewhat less discovery but lots of invention; there is still a lot of learning going on. Later, you are actually doing activities that count for completion: some invention and lots of implementation. Learning drops off as the project moves toward completion.</p>

<p>It's not clear that you need the complexity of a multiphase, multiple-iterations-per-phase graph. After all, it is the phases that differ most in their characteristics, not the iterations within the phases. So, to keep things reasonably simple, model the phases and assume only one iteration per phase. </p>

<p>At this point you need to decouple the ideas of learning and completion. <A NAME="rt2"><A HREF="0208ct2.htm">Table 2</A> lists some numbers Philippe Kruchten, author of <i>The Rational Unified Process: An Introduction</i>, Second Edition (Addison-Wesley, 2000), believes are applicable to the four phases. What these numbers tell you is that when you do phased, iterative development, you learn faster than you achieve completion. This accelerated learning is what helps reduce risk. How do you introduce these ideas into your model? </p>

<p>As <A NAME="rf6"><A HREF="0208cf6.htm">Figure 6</A> illustrates, you only need to make two modifications:</p>


<ul>
  <li>Plot "percent learned" and "percent complete" separately.
  <li>For each of these curves, plot the S-Curve segments according to <A NAME="rt2"><A HREF="0208ct2.htm">Table 2</A> to model that level of reality.

</ul>

<h3>Discussion of Results</h3>


<p>First, let's address the different shapes of the learning and completion curves. Basically, you achieve 60 percent of your learning in the first 40 percent of the project, but you are only 25 percent complete at that point. This reflects the notion that in iterative development you emphasize learning early to reduce risk. The counterweight is that you don't make much visible or tangible progress because often the learning has few associated artifacts.</p>


<p>Now look at the velocity curves. Learning velocity peaks during Elaboration, whereas completion velocity peaks during Construction. This is consistent with our model, in which you set out to get over the learning hump in Elaboration, sacrificing or deferring completion a bit. The measurable artifacts of completion begin to show up during Construction, so that is when that curve peaks. </p>

<p>You might ask why both velocity curves go down to almost zero at the 40 percent point, then back up. Wouldn't it be better if you could keep some of that velocity across the boundary? Yes, it would. Distinct phases and iterations within phases cause disruption, which is why many senior project managers try to blend things at the boundary; they sometimes get an advance team working on the next phase or iteration before the antecedent phase is actually done, to smooth the transition over the boundary. It is hard to pull this off. The more iterations you have within phases, the more boundaries you create. If there is a fixed overhead at each boundary, then you increase your total overhead by increasing the number of iterations. </p>

<p>The forces comparison for Elaboration and Construction is also pretty clear: The learning forces are stronger during Elaboration and relatively weak during Construction. On the other hand, the completion forces have about the same peak values during both Elaboration and Construction, which is a good thing. </p>

<p>Now address the Inception and Transition phases. You have large forces at the end of the project, during Transition. That's what makes finishing so hard &#151; you need a big push when the team is the most tired. And there are also large forces early in the project, during Inception, because at the end of Inception you face your first "go/no go" decision. If the project team is concerned about cancellation at this early branch point, then you can be sure these large forces will be at work. </p>



<h3>One Last Graph</h3>


<p>Assume that you can add a project's completion forces and learning forces with the total force as a function of elapsed time. As <A NAME="rf7"><A HREF="0208cf7.htm">Figure 7</A> illustrates, all the segments under the curves in the four regions have the same form, so the product of the peak value of the total force and the length of time the segment is in play is proportional to the area.</p>


<p>We know that the area is an integral, and the integral of force over time is equal to the change in momentum. <A NAME="rt3"><A HREF="0208ct3.htm">Table 3</A> shows that the change in momentum (or impulse) is roughly the same over the four phases. It's the same during Construction and Transition &#151; 10 units. The biggest impulse is during Elaboration, 12 units. And the combined impulse of the first and second phases &#151; 20 units &#151; is equal to the combined impulse of the third and fourth phases. Half the total impulse is applied during the first 40 percent of the elapsed time; this again expresses the idea of front loading, which we believe is a good thing. </p>



<h3>Conclusion</h3>


<p>The conceptual model presented here can help prepare you to deal with the various project phases as they play out. Knowing that some degree of determinism is at work can be comforting when a project hits its low point and you're worried that the team may lose hope. </p>


<p></p>


<p><b>DDJ</b></p>
</body>
</html>
