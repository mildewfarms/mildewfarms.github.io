<html>
<head>
<title>Aug02: Tips for Writing Aspects</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->


<h2>Tips for Writing Aspects</h2>
<p>When writing aspects, there are two main issues to keep in mind. The first is that your aspect is declared to be an aspect, not a Java class. If you look at the source code from this article, you'll notice that the aspects all begin with <i>public aspect</i> and not with<i> public class.</p>
<p>The second is that the current implementation of AspectJ works with source code. It does not change existing byte code or modify JARs. This means that you can't modify or manipulate existing code, and that your pointcuts only apply to the code you are compiling.</p>
<DDJADVERTISEMENT INLINE>

<p>When you begin writing aspects, be sure to completely separate your aspects from the rest of your code. In the source code accompanying this article, I put all the aspects in separate files with names  that begin with </i><i>Aspect_</i>. Moreover, I put all the aspects in their own package hierarchy (<i>aspects.wgrosso.*</i>), separate from the rest of the code. This helps you keep track of the aspects and makes it much easier to write <i>ant</i> tasks, which selectively include aspects.</p>

<p>Third, in the beginning, all your aspects should be completely unpluggable. In other words, the code should be functional without the aspects. Use aspects to enhance the code, providing things like logging and security and performance optimizations. Leave all the domain modeling and core functionality in the object hierarchy until you're comfortable with aspect-oriented thinking.</p>

<p> &#151; W.G.</p>

<a href="0208a.htm#rs1">Back to Article</a>


</body>
</html>
