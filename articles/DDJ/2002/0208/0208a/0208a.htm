<html>
<head>
<title>Aug02: Aspect-OrientedProgramming& AspectJ</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Aspect-OrientedProgramming&amp; AspectJ</h1>
<p><i>Dr. Dobb's Journal</i> August 2002</p>

<h3>By William Grosso</h3>

<I>
William is chief architect and director of QA at Hipbone Inc. He is also the author of Java RMI (O'Reilly &amp; Associates, 2001). He can be contacted at wgrosso@wgrosso.com.</I>

<hr>

<a name="rs1"><a href="0208as1.htm">Tips for Writing Aspects</a><hr>

<p>Aspect-oriented programming extends the object-oriented paradigm by enabling you to write more maintainable code using units of software modularity called "aspects." Aspects encapsulate elements such as performance optimization, synchronization, error checking/handling, monitoring/logging, and debugging, which cut across traditional module or class boundaries.</p>
<p>Aspects are separated ("modularized") from the classes and methods that make up components at design time, then compilers or interpreters create extended classes that combine aspect functionality with application components.</p>
<DDJADVERTISEMENT INLINE>

<p>There are a number of tools and languages that support the concept of aspect-oriented programming (AOP). TransWarp (http://www.zope.org/Members/ pje/TransWarp/) and Pythius (http:// pythius.sourceforge.net/), for instance, provide Python-based AOP support, while AspectC++ (http://www.aspectc .org/) and AspectC (http://www.cs.ubc.ca/ labs/spl/projects/ aspectc.html) support C++ and C, respectively. Java Aspect Components or JAC (http://jac .aopsys.com/) is a Java AOP framework, while HyperJ (http://www.research.ibm.com/hyperspace/ HyperJ/HyperJ.htm) provides Java extensions for AOP. In this article, I will focus on AspectJ (http:// aspectj.org/). For a more complete list of AOP tools and languages, see http:// aosd.net/tools.html.</p>

<p>Developed at Xerox PARC, AspectJ is a freely available open-source aspect-oriented extension to Java for the modularization of Java resource sharing, error checking, design patterns, and distribution. As <A NAME="rf1"><A HREF="0208af1.htm">Figure 1</A> illustrates, AspectJ makes modularization possible by taking code that appears in multiple places in a codebase and putting it in a single place, along with instructions on how to insert it into all the correct places.</p>

<p>The most common example of code that's amenable to this sort of "pulling out" is logging code, which:</p>


<ul>
  <li>Appears in many places in the codebase and isn't intrinsically a part of any class.
  <li>Is conceptually distinct from the classes it occurs in. 

  <li>Isn't an intrinsic part of the program's functionality.

  <li>Gets frequently inserted and removed during development.

  <li>Is often removed from the final shipping codebase.


</ul>

<p>The first two properties are important, and code that exhibits them is referred to as "crosscutting code." The goal of AOP is to pull out the crosscutting code and put all the related pieces of code together in a single place, along with instructions on how to insert the crosscutting code back into the program (either statically at compile time or dynamically at run time). The last three properties are mostly important for tutorials &#151; they tell you that everyone has a good idea of how to pull out logging code (and how to evaluate the resulting program).</p>



<h3>AspectJ Overview</h3>


<p>AspectJ is both a language for doing aspect-oriented programming and a set of tools. Java programs are valid AspectJ programs and can access all the standard Java libraries. The AspectJ toolset includes a compiler, debugger, <i>ant</i> task (for automating builds), and plug-ins for several Java IDEs (such as JBuilder).</p>


<p>The AspectJ language centers around three main concepts:</p>


<ul>
  <li>Join points, which are places in a codebase where something happens. For example, there are join points for method calls, for catching exceptions, and for changing the value of a member variable. Join points are mostly an abstraction; when using AspectJ, you use pointcuts.
  <li>Pointcuts, which are named collections of join points that have something in common. AspectJ contains a complete language for describing pointcuts. Understanding how to write pointcuts, and when a particular pointcut applies, is the hardest part of using AspectJ. 

  <li>Advice, which is Java code that has been attached to a pointcut. For example, you use pointcuts in AspectJ to specify a set of join points in a program where you want something to happen. You then attach advice to your pointcuts to say what should happen. Advice is almost always fairly simple code. The important thing about advice is not that it's particularly tricky or complex, but that the advice is executed when a particular pointcut applies.

</ul>

<h3><i>call</i> Pointcuts and <i>execution</i> Pointcuts</h3>


<p>The two most commonly used pointcuts are the <i>call</i> pointcut and the <i>execution </i>pointcut. The basic syntax for these two pointcuts is:</p>


<blockquote><p>
pointcut name(): call ([method signature])</p>

<p>
pointcut name(): execution([method signature])</p>

</blockquote><p>where <i>name</i> is the name of the pointcut (and must be unique) and <i>[method signature]</i> is an expression that captures a set of methods. AspectJ has a whole language &#151; based on string matching &#151; for specifying signatures. For example, <i>* com.wgrosso..*.*(..)</i> matches every method on every class that's in a package whose name begins with <i>com.wgrosso</i>. <A NAME="rl1"><A HREF="#l1">Listing One</A> presents some signatures along with their explanation.</p>


<p>As <A NAME="rf2"><A HREF="0208af2.htm">Figure 2</A> shows, you can think of a method call as being on the boundary of two instances. (When a method is invoked, a thread exits the scope of one instance and enters the scope of another one. In doing so, it has crossed through a join point.) </p>

<p>From the point of view of AspectJ, a stack trace (like that in <A NAME="rf3"><A HREF="0208af3.htm">Figure 3</A>) is nothing but a list of join points that the current thread has traversed and will traverse again as the stack unwinds. (While it's convenient to think of <i>call</i> and <i>execution</i> pointcuts as being comprised of pointcuts that are on the boundaries of distinct instances, they're also involved when one method on an instance calls another method on the same instance. It's the method call that matters, not the number of instances involved.)</p>

<p>A <i>call</i> pointcut specifies a set of join points right before (or after) the methods are called. That is, if you attach advice to a <i>call</i> pointcut and a thread is about to call a method that matches the signature of the pointcut, the advice will be executed. On the other hand, <i>execution</i> pointcuts specify a set of join points right after the method is called (or right before the call returns). In short, <i>call</i> pointcuts occur inside the calling object, whereas <i>execution</i> pointcuts occur inside the target object. In most cases, it doesn't matter whether you use advice based on <i>call </i>or <i>execution</i> join points.</p>

<p>There are differences between <i>call</i> and <i>execution</i> pointcuts, however. For one thing, <i>call </i>and <i>execution</i> execute at different times. This means that if more than one piece of advice is attached to a particular method, then whether a particular piece of advice is defined using a <i>call</i> or an <i>execution</i> pointcut can make a difference in how the program executes.</p>

<p>Also, <i>call</i> pointcuts are based on the compile-time object types, as understood by the calling class, while <i>execution</i> pointcuts are based on the run-time type of the target of the method call. Thus, if the calling object doesn't know the exact type of the target, then whether advice is based on a <i>call</i> or <i>execution</i> pointcut could be important. In <A NAME="rl2"><A HREF="#l2">Listing Two</A>, the instance <i>stringWrapper</i> is declared to be an instance of <i>Object</i>, but at run time, it's an instance of <i>StringWrapper</i>. Even though they have the same signatures, the <i>call</i> pointcut in <A NAME="rl2"><A HREF="#l2">Listing Two</A> is never applicable, while the <i>execution</i> pointcut is.</p>

<p>The final difference between <i>call</i> and <i>execution</i> pointcuts involves a shortcoming in the current release of AspectJ. Because AspectJ is implemented in the compiler and requires you to have the source code for all the classes, you cannot specify <i>execution</i> pointcuts for classes for which you don't have the source.</p>



<h3><i>cflow</i> Pointcuts</h3>


<p>The idea behind a <i>cflow</i> (control flow) pointcut is that you often want to insert advice based on something like a stack trace, not just the currently executing line of code. </p>


<p><i>cflow</i> pointcuts are defined in terms of other pointcuts. The basic syntax for a <i>cflow </i>pointcut is:</p>

<blockquote><p>
pointcut name(): cflow([name of a different pointcut])</p>

<p>
pointcut name(): cflowbelow ([name of a different pointcut])</p>

</blockquote>

<p>The current point of execution is in the <i>cflow</i> of a pointcut if the pointcut is below it in the stack trace (for example, if unwinding the stack causes the current thread of execution to pass through the pointcut).</p>

<p>The difference between <i>cflow</i> and <i>cflowbelow</i> is that a pointcut is inside its own <i>cflow</i>, but is not inside its <i>cflowbelow</i> (<i>cflow</i> and <i>cflowbelow</i> are analogous to &lt;= and &lt;). <A NAME="rl3"><A HREF="#l3">Listing Three</A> has examples of <i>cflow</i> pointcuts.</p>

<p>By themselves, <i>cflow</i> pointcuts aren't that useful. What makes them useful is a pointcut algebra. You can use all the standard Boolean operators (!, &amp;&amp;, ||, and so on) with pointcuts. Combining pointcuts lets you build fairly sophisticated statements.</p>

<p>For example, suppose you wrote a library and, in another program, want to log all calls into the library. That is, you want to log calls coming into your library from other code, not calls from one library object to another and not calls that originate in your library code (even if some nonlibrary classes appear in the middle of the stack trace). This can be done in just two steps: You first write a <i>call</i> pointcut specifying your library's public methods, call it "pointcut A." Then the pointcut defined by the expression <i>A </i>&amp;&amp;<i> !cflowbelow(A)</i> captures exactly what you want &#151; it picks out, at run time, all the method calls into your library that are not in the <i>cflow</i> of a method call into your library. <A NAME="rl4"><A HREF="#l4">Listing Four</A> is a complete example of this type of pointcut.</p>



<h3>Adding Advice</h3>


<p>There are three types of advice: <i>before</i> advice, <i>after</i> advice, and <i>around</i> advice.</p>


<p><i>before</i> and <i>after</i> advice are straightforward. <i>before</i> advice executes immediately before the point in the code indicated by the join point. For its part, <i>after</i> advice executes immediately after the point in the code indicated by the join point. <A NAME="rl5"><A HREF="#l5">Listing Five</A> prints the sequence "12345," illustrating the basic syntax of <i>before</i> and <i>after</i> advice. As <A NAME="rf4"><A HREF="0208af4.htm">Figure 4</A> depicts, the reason <A NAME="rl5"><A HREF="#l5">Listing Five</A> prints "12345" is that the statements are executed in the following order:</p>


<p>1. The <i>before</i> advice attached to the <i>call </i>pointcut.</p>

<p>2. The <i>before</i> advice attached to the <i>execution</i> pointcut.</p>

<p>3. The actual method body.</p>

<p>4. The <i>after</i> advice attached to the <i>execution</i> pointcut.</p>

<p>5. The <i>after</i> advice attached to the <i>call </i>pointcut.</p>

<p><i></p>

<p>around</i> advice is more complicated than <i>before</i> or <i>after</i> advice. The way <i>around</i> advice works is that some of the code in the advice executes before the pointcut, and that code must call <i>proceed </i>for the contents of the method to execute; see <A NAME="rl6"><A HREF="#l6">Listing Six</A>.</p>



<h3>A Real-World Example</h3>


<p>A few months ago, I had a server that kept running out of memory, and standard memory profiling tools didn't show a memory leak when we ran it on developer machines. What we needed to do was trace memory allocations for a week, while the server was running under real-world conditions.</p>


<p>Luckily, I recalled that Heinz Kabutz addressed the problem of tracking object allocations in issue 38 of his <i>Java Specialist </i>newsletter (http://www.smotricz.com/ kabutz/). Kabutz's solution involves inserting code into java.lang.Object to track object allocations. While this approach can be made to work, it is tricky and fragile. Furthermore, you can get a similar result with a simple aspect. <A NAME="rl7"><A HREF="#l7">Listing Seven</A> (available electronically; see "Resource Center," page 5) contains code for tracking the number of currently allocated instances in a program. It doesn't track allocations of objects that aren't in your codebase (for example, instances of <i>java.lang.String</i> are not tracked) because of the way AspectJ is currently implemented. But it does track the number of live objects in your program, printing out a status report to the console at predefined intervals, and vending a current report via an RMI interface.</p>

<p>This approach uses only one aspect, which is called during the constructor of all the objects that are tracked. Every time an object is created, it is added into a hash table using a weak reference. A background thread goes through and cleans the hash table occasionally. And the results are summarized and sent over the wire when a client asks.</p>

<p>The impressive thing about this example is that it just works. It requires absolutely no code changes to the original classes. If you have an existing project, you can change the signature of the pointcut and use the resulting aspect to track memory allocations over time. If you change the output format slightly, you can store the results to a comma-delimited file format, then graph your object allocations in Excel. It's very easy to do.</p>

<p>To further illustrate, consider the logging code in <A NAME="rl8"><A HREF="#l8">Listing Eight</A> (also available electronically). The idea here is that you have an RMI server that is accepting both remote calls (method calls that originate in another process) and in-process calls. You want to log the remote calls, along with the time they occurred, but not the local calls. <A NAME="rl8"><A HREF="#l8">Listing Eight</A> includes an aspect that lets you do this. This technique works because of the way RMI is structured. Any remote call must go through the RMI run time &#151; that is, through a class in one of the java.rmi.* packages &#151; before it gets into the server. Local calls do not go through the RMI run time at all. This means that a clever combination of <i>execution</i> and <i>cflowbelow</i> pointcuts let you spot exactly those threads of execution that originate in a call from a remote process.</p>

<p>This approach works without requiring code changes in the original source code. If you have an existing project, you can change the signature of the pointcut and use the resulting aspect to log remote method calls to your server. And that's the beauty of aspects.</p>



<p><b>DDJ</b></p>
<H4><A NAME="l1">Listing One</H4>


<pre>/* Pulls out calls to any public method that throws a RemoteException */
    pointcut example1(): call(public * * (..) throws RemoteException);

/* Pulls out calls to a constructor of any subclass of UnicastRemoteObject. 
The '+' indicates any subclass.  */
    pointcut example2(): call(UnicastRemoteObject+.new(..));

/* Pulls out executions of public methods of classes in any package below 
com.wgrosso (including classes in com.wgrosso). The '..' is what indicates 
any subpackage. */
    pointcut example3(): execution(public * com.wgrosso..*.*(..));

/* Pulls out executions of public methods of classes in any package below 
com.wgrosso (including classes in com.wgrosso). The methods have to 
be "setter" methods and return void */
    pointcut example4(): execution(public void com.wgrosso..*.set*(..));
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two</H4>


<pre>/* The call pointcut isn't applicable, because stringWrapper is declared to 
be of type Object (which does not match the signature). Because StringWrapper 
is in the package com.wgrosso, the execution pointcut does apply.  */
    pointcut callExample(): call(* com.wgrosso..*.*(..));
    pointcut executionExample(): execution(* com.wgrosso..*.*(..));

/* The code */
    public static void main(String[] args) {
        if ((null==args) || (0==args.length)) {
            System.out.println("No arguments");
        }
        else {
            System.out.println("Arguments:\n");
            for (int i=0; i &lt; args.length; i++) {
                Object stringWrapper = new StringWrapper(args[i]);
                System.out.println("\t" + stringWrapper.toString() + "\n");
            }
        }
    }
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3">Listing Three</H4>


<pre>/* The call pointcut isn't applicable, because stringWrapper is declared to 
be of type Object (which does not match the signature). Because StringWrapper 
is in the package com.wgrosso, the execution pointcut does apply.  */
    pointcut callExample(): call(* com.wgrosso..*.*(..));
    pointcut executionExample(): execution(* com.wgrosso..*.*(..));

/* The code */
    public static void main(String[] args) {
        if ((null==args) || (0==args.length)) {
            System.out.println("No arguments");
        }
        else {
            System.out.println("Arguments:\n");
            for (int i=0; i &lt; args.length; i++) {
                Object stringWrapper = new StringWrapper(args[i]);
                System.out.println("\t" + stringWrapper.toString() + "\n");
            }
        }
    }
</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>
<H4><A NAME="l4">Listing Four</H4>


<pre>/* enteringFromExternalSource picks out join points which are involve public 
methods and are not in the cflowbelow of a public method invocation. You 
need to use &amp;&amp; and ! to define this pointcut. */
    pointcut comWGrossoPulicMethods():
        call(public * com.wgrosso..*.*(..));
    pointcut enteringFromExternalSource():
        comWGrossoPulicMethods() &amp;&amp;
        !cflowbelow(comWGrossoPulicMethods());
</pre>
<P>
<A HREF="#rl4">Back to Article</A>
</P>
<H4><A NAME="l5">Listing Five</H4>


<pre>/*  The entire aspect. */
package com.wgrosso.ddjarticle1;
import org.aspectj.lang.*;
public aspect Aspect_PrintThree {
    pointcut CallStringWrapper(): call(* com.wgrosso..*.*(..));
    pointcut ExecuteStringWrapper(): execution(* com.wgrosso..*.*(..));
    before(): CallStringWrapper() {
        System.out.println("1");
    }
    before(): ExecuteStringWrapper() {
        System.out.println("2");
    }
    after(): ExecuteStringWrapper() {
        System.out.println("4");
    }
    after(): CallStringWrapper() {
        System.out.println("5");
    }
}
/* The entire class */
package com.wgrosso.ddjarticle1;
public class PrintThree {
    public static void main(String[] args) {
        System.out.println("3");    
    }
}
</pre>
<P>
<A HREF="#rl5">Back to Article</A>
</P>
<H4><A NAME="l6">Listing Six</H4>


<pre>/* We still need to define a pointcut */
    pointcut callExample(): call(public void com.wgrosso..*.*(..));

/* Around advice must call proceed in order for the  original method 
invocation to occur. Note that around advice needs a return type that 
matches the pointcut. */
    void around(): callExample() {
        /* Any code before the proceed executes before the method body. */
        proceed(); // proceed executes the method body
        /*  Any code after the proceed executes after the method body.*/
   }
</pre>
<P>
<A HREF="#rl6">Back to Article</A>
</P>


</body>
</html>
