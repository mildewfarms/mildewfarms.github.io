<html>
<head>
<title>Aug02: Letters</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Letters</h1>
<p><i>Dr. Dobb's Journal</i> August 2002</p>



<h3>Nash Equilibrium &amp; Open Source</h3>


<p>Dear <i>DDJ</i>,</p>


<p>In Mike Swaine's closing comment in "Programming Paradigms" (<i>DDJ</i>, June 2002) about open source possibly being defensible as a Nash equilibrium is, in fact, correct, but the full argument is even more interesting.</p>
<DDJADVERTISEMENT INLINE>

<p>A Nash equilibrium, in its simplest form, is a strategy that makes sense provided other people are playing the same strategy. The open-source approach is therefore a Nash equilibrium--if everyone used an open-source approach, there would be no incentive (or opportunity) to use a proprietary approach. That is, in a world that was open source, any proprietary software would have to surmount the fact that it was (a) nonstandard; (b) closed; and (c) costly; hence, it would be very unlikely to succeed.</p>

<p>However, the interesting aspect is that any world where there is a dominant operating system and set of core tools (for example, Wintel plus Microsoft Office) is also a Nash equilibrium: There is no incentive for any single player to deviate from the strategy. For example, if everyone in the world is using Windows/ Office, it is very hard to succeed if one is not. This will come as no surprise to anyone dealing with nonWindows systems.</p>

<p>This phenomenon is a general problem in game theory called a "coordination game," where the payoff occurs in doing whatever everyone else is doing--in matrix form, staying on the main diagonal of the game. Coordination games have multiple Nash equilibria.</p>

<p>So, what does this say for open source?  Contrary to the claims of some of its ideological opponents, a world dominated by open source is no less stable than a world dominated by Windows. If the proponents of open source are correct and open-source software is actually of higher quality, an open-source world would actually be a bit more stable, since it is not only a Nash equilibrium but also "Pareto optimal"--in an all open-source world, everyone is better off than they would be in an all-Windows world (I'm generalizing here: Obviously, "everyone" would not include Bill Gates and many lawyers).</p>

<p>The problem, however, is getting from the Windows equilibrium to the open-source equilibrium. This is not news to anyone involved with open source, but does provide an interesting example of Nash's concepts in action.</p>

<p>Philip A. Schrodt</p>

<p>schrodt@ku.edu</p>




<h3>VB.NET</h3>


<p>Dear <i>DDJ</i>,</p>


<p>I'd like to point out an inaccuracy in the article "Examining VB.NET," by Lauren Hightower (<i>DDJ</i>, March 2002). Lauren says, "Early binding is the practice of declaring a variable and assigning it to an instance of a class before the application is compiled. Doing so instantiates the object and stores it in memory from the time when the application is run until you use it...Late binding, on the other hand, is the practice of declaring a variable as an object and then assigning it to an instance of a class at run time."</p>

<p>This is incorrect for a number of reasons. Early binding enables the compiler to do proper type checking at compile time. Late binding is a mechanism for dynamically creating an object based on its <i>progid</i>. It maps down to the COM <i>CoCreateInstance()</i> call at the C++ level.</p>

<p>In fact, the run-time semantics in terms of when the object is loaded are the same in both cases. The object is actually created when it is first referenced, not when it is created. So, in the case of:</p>

<blockquote><p>
dim obj as New ADODB.Recordset</p>

<p>
dim obj2 as ADODB.Recordset</p>

<p> ...</p>

<p> some more code</p>

<p> ...</p>

<p>obj.SomeMethod</p>

<p>set obj2=CreateObject(''ADODB.Recordset'')</p>

<p>
obj2.SomeMethod</p>

</blockquote><p><i>obj</i> is created when <i>SomeMethod</i> is called, not at the <i>new</i> statement. Even if this were not the case (it's really a run-time optimization), there's no reason not to do <i>set obj2 = new ADODB.Recordset </i>instead of <i>set </i><i>obj2 = CreateObject("ADODB.Recordset")</i>. The argument for using late binding for objects that are used less frequently to save memory is incorrect. In general, it's almost always better to use <i>new</i> to create objects. The only exception is when you don't know what you want to create until run time. For example:</p>


<blockquote><p>
lateboundLoader( param as string )</p>

<p>
dim objLatebound as IFoo</p>

<p>dim progid as string</p>

<p>progid = "FooLib" &amp; param</p>

<p>objLatebound= new CreateObject(progid )</p>

<p>End Sub</p>

</blockquote><p>instead of</p>


<blockquote><p>
sub lateboundLoader( param as string )</p>

<p>
dim objLatebound as IFoo</p>

<p>if param = "FooA" then</p>

<p>     objLatebound = new FooLib.FooA</p>

<p>else if param = "FooB"</p>

<p>    objLatebound = new FooLib.FooB</p>

<p>End if</p>

<p>
End Sub</p>

</blockquote>

<p>Assume that <i>FooA</i> and <i>FooB</i> both implement <i>IFoo</i>. This enables you to add as [many] variations as you [want], and [do so] without modifying the creation code. The other time you would use <i>createObject</i> is with DCOM where you can use the second parameter to the create method to create an object on a remote server <i>CreateObject(progid,Server)</i>.</p>

<p>Ian MacLean</p>

<p>ianm@ActiveState.com</p>



<h3></h3>


<p>Disk Thrashing</p>

<p>Dear <i>DDJ</i>, </p>


<p>Thanks to Scott Meyer who kindly pointed out that in my article "Disk Thrashing &amp; the Pitfalls of Virtual Memory" (<i>DDJ</i>, May 2002), I mistakenly implied that indexed access to a deque is done through a directory tree, which would lead to logarithmic times. Instead it is done through constant-time index arithmetic. As always, he's right! This, by the way, makes my argument for using deques for large data sets even stronger. </p>

<p>Bartosz Milewski</p>

<p>bartosz@relisoft.com</p>




<h3>Mail4Me Update</h3>


<p>Dear <i>DDJ</i>,</p>


<p>Thanks to feedback I've received from readers regarding my article "The Mail4Me Project" (<i>DDJ</i>, June 2002) I'd like point out a typo in the listings: Line 3 of Listing Six on page 44 says <i>if (int i == 0)</i> where it should instead be <i>if (count == 0)</i>. </p>

<p>Joerg Pleumann</p>

<p>joerg.pleumann@trantor.de</p>



<p><b>DDJ</b></p>

</body>
</html>
