<html>
<head>
<title>Aug02: Java Q&A</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>How Can I Generate Java  Code for Tables in My Database?</h1>
<p><i>Dr. Dobb's Journal</i> August 2002</p>

<h3>By Mark Seaman</h3>

<I>
Mark developed the code in this article while working for Fletcher Allen Health Care. He is currently a software engineer with IBM and can be contacted at mseaman@ attglobal.net.</I>

<hr>

<p>Unless you have access to expensive tools that can generate Java code from a data model, a great deal of tedious, error-prone coding is required to create Java classes representing relational database tables. By using the <i>DatabaseMetaData</i> interface provided by the java.sql package (http://java.sun.com/products/jdk/1.1/docs/api/Package-java.sql.html), you can write code to extract the required information from the database and generate the classes you need. As an added benefit, if you save the metadata in the generated class, it can be used at run time to build and execute dynamic SQL statements without having to code any SQL. In this article, I present a technique I developed to accelerate database application development by using the information available through the <i>DatabaseMetaData</i> interface.  </p>
<p>What prompted my writing this article was Terry Smith's article "How Can I Simplify Java Data Access Objects?" (<i>DDJ</i>, May 2001). I had just finished up a project where I wrote a code generator and thought it provided a fairly good solution to the issues Terry raised. Writing data access objects normally requires a Java class for every entity in the database. Even in a modest system, this results in dozens of classes just to represent the tables from the underlying RDMS. </p>
<DDJADVERTISEMENT INLINE>

<p>In mid project, I joined a team writing a Java application to process real-time messages and store the contents in a relational database. My task was to write the code for object-relational mapping and the code that implemented database operations on the objects. The team had used a CASE tool during the design phase and employed it to generate the database schema. I asked that the tool be used to generate the Java classes for the entities so that I could begin my work. It generated all of the classes, but every member variable was declared an integer. Facing tight deadlines, there was no time to go back and figure out why the code produced by the tool was wrong. I immediately obtained a copy of the schema and started at the top, creating a Java class for each table. I think I got to the second member variable of the first class, looked at the 30 or so classes I had to go, and decided there had to be a better way to do this. In a short time, I discovered the answer &#151; the <i>getColumns</i> method of the <i>java.sql.DatabaseMetaData</i> interface provided all the information I needed to write the code to generate the required Java classes.  </p>

<p>The <i>DatabaseMetaData</i> interface of the java.sql package provides access to the capabilities of the underlying JDBC driver/RDBMS and allows retrieval of database object metadata. The <i>getColumns</i> method retrieves information about the columns of a specific table. You retrieve a <i>DatabaseMetaData</i> object by calling the <i>getMetaData</i> method of a valid <i>Connection</i> object. To call the <i>getColumns</i> method of <i>DatabaseMetaData</i>, provide the following parameters: Catalog, Schema Name Pattern, Table Name Pattern, and Column Name Pattern. The "patterns" are strings that follow the SQL standard for wildcards: "%" matches zero or more occurrences of a substring and "_" matches any single character. Any parameter set to Null causes that parameter to be dropped from the search criteria. To retrieve all columns for a given table using IBM's DB2 JDBC Driver, you pass "Null" for the catalog and column name arguments, the table owner for the Schema parameter, and the table name. Other vendors' requirements for parameters may be different. <i>getColumns</i> returns a <i>ResultSet</i> object containing columns for the table name, column name, column datatype, length, and others. (See the Java documentation for a complete listing of the columns returned by <i>getColumns()</i>.)</p>

<p>In finding a solution to the initial object-relational coding problem, I realized the next big chunk of tedious coding was to write SQL statements to retrieve, insert, update, and delete each one of these objects. To solve this problem, I realized that if I stored the metadata in the generated class, I could use it to build dynamic SQL statements at run time. In this way, I could implement the data manipulation operations without writing individual SQL statements.  </p>

<p>I first created an object to encapsulate information about database columns. <A NAME="rl1"><A HREF="#l1">Listing One</A>, the <i>ColumnInfo</i> class I created for this purpose, includes data members for the column's name, datatype, and length along with methods to get and set these attributes. The <i>length</i> data member is not used at this time. To get the column information to the methods that would use it to generate SQL statements, I decided to use hash tables of column/value pairs. For this to work, callers must be able to retrieve the <i>ColumnInfo</i> object from the hash table using the column name as the key. For a class to be "hashable" in Java, it must override the <i>hashCode</i> and <i>equals</i> methods of <i>java.lang.Object</i>. The <i>hashCode</i> method of <i>ColumnInfo</i> returns the <i>hashCode</i> for its name member using the <i>String</i> class's implementation. The <i>equals</i> method is used by the JVM to retrieve the correct object when more than one has been stored in the same hash "bucket." <i>ColumnInfo</i>'s <i>equals</i> method uses the <i>instanceof</i> operator to determine the type of the object passed to it. If the argument is a <i>ColumnInfo</i> object, the parameter's name, retrieved via its <i>getName</i> method, is compared to the current object's column name. If the argument is a <i>String</i>, the current object's column name is compared to it. If it isn't a <i>ColumnInfo </i>or a <i>String</i>, then <i>Object</i>'s <i>equals</i> method is called via <i>super.equals</i>. This permits retrieving columns from a <i>Hashtable</i> by either the <i>columnName</i> or the corresponding <i>ColumnInfo</i> object. The <i>ColumnInfo</i> class is declared final since this implementation of the <i>equals</i> method does not work correctly for descendants of <i>ColumnInfo</i>.</p>

<p>Having finalized the design, I wrote the class that generated the Java code, <i>DbGenerateClasses</i> (available electronically; see "Resource Center," page 5). It performs the work of retrieving the column information for the requested table(s) and generating the corresponding Java class. The generated class contains a protected member variable for each column. The member name is the column name converted to title case with any underscores removed. It also contains <i>get</i> and <i>set</i> methods for each member variable, and a <i>toString</i> method for dumping the contents of the object using standard java.io methods. To generate one or more classes from the database, use the command line to set the <i>ConfigFileName</i> property to the name of a configuration file containing database connection parameters and one or more tables for which to generate the code. For example, <i>java -DConfigFileName=my.cfg DbGenerateClasses Member</i> outputs a file named "MemberTable.java." The class name is the name of the table from the database converted to title case with any underscores removed and the word "Title" appended. As written, it only works for a case-insensitive DBMS such as DB2. <i></p>

<p>DatabaseMetaData</i> does provide methods that can be used to determine if a DBMS considers case significant in identifiers. These methods could be used to generalize the code so that it would work for other RDBMSs without modification. For each table, the <i>getColumns</i> method of the JDBC <i>Driver's DatabaseMetaData</i> implementation is called. A loop processes all of the columns in the <i>ResultSet</i>. </p>

<p>In addition to the methods mentioned earlier, a static initializer is created for each generated class. It loads the <i>m_colList </i>hash table member with the <i>ColumnInfo</i> object for each column keyed by the column name. Every generated class includes a <i>getColumnInfo</i> method that returns the corresponding <i>ColumnInfo</i> object given the column name. The <i>get-Columns</i> method returns a copy of the entire hash table using the <i>hashtable.clone</i> method. It is important that the <i>m_colList</i> member is not returned directly; it would provide a reference by which any user could modify its data. </p>

<p>Using the <i>getColumnInfo</i> method of the generated class, the datatype of every column can be quickly looked up at run time without the overhead of a database query. This made the generation and execution of dynamic SQL feasible for applications with modest database performance requirements. The <i>DbUtils</i> class (available electronically) is a collection of static methods that perform the basic database operations: <i>insert</i>, <i>update</i>, <i>delete</i>, and <i>retrieve</i>. Values to be inserted or updated and where criteria are specified using a <i>Hashtable</i> containing the values keyed by the corresponding <i>ColumnInfo</i> object for the column. When only specific columns are requested from the <i>executeQuery </i>method, they are specified using a <i>Vector</i> of column name <i>Strings</i>. Values are formatted by the <i>formatField</i> method that takes the datatype of a column and its value and returns either a <i>String</i> representing the value in the case of numeric types or a delimited string containing the value in the case of <i>String</i>, <i>Date</i>, and <i>Timestamp</i> types. This method relies on the implicit conversion of the value in the SQL string to the appropriate type by the underlying RDBMS. If this implicit conversion fails for a particular RDBMS, it would be necessary to modify the <i>formatField</i> method to produce an acceptable value. The public <i>DbUtils</i> methods require a valid connection object to create and execute JDBC <i>Statement</i>s. Connections should be managed at the application level, not by utility classes. It is completely up to you to determine the composition of transactions and whether or not they are automatically committed, the transaction isolation level, total number of connections required, and whether connection pooling should be used.</p>

<p>Building and executing dynamic SQL statements at run time exposes low-level quirks of the underlying database. For DB2, to embed the string delimiter (') in a character string type column (CHAR, VARCHAR, LONGVARCHAR), you must double the single-quote character. I had to add a check for this condition and code to correctly process the string delimiter to the <i>formatField</i> method. If your DBMS has the same issue but uses a different string delimiter, you can call the <i>setStringDelimiter</i> method to change the character that is used. The default string delimiter is a single-quote character. Other vendor-specific idiosyncrasies need to be handled individually. The JDBC <i>PreparedStatement </i>hides these kinds of details from you, but in my case, the additional processing time for this check was not significant. </p>

<p>The main work of <i>DbGenerateClasses</i> is to map the column's datatype into the appropriate Java datatype. The JDBC specification provides guidance on the mapping between the JDBC types and Java types. I followed the recommendation of the 1.2 specification with the exception of <i>Numeric</i> and <i>Decimal</i> types. The specification listed <i>java.math.BigDecimal</i> objects as the correct mapping for these types, but JDBC did not add a <i>getBigDecimal()</i> method to <i>ResultSet</i> until JDBC 2.0 and Java 2. I chose to map these types to the double primitive type. I also did not make any provision for user-defined types. Any unrecognized type is automatically mapped to <i>java.lang.Object</i>. The JDBC 2.1 specification added support for SQL99 datatypes (BLOB, CLOB) and other user-defined types. JDBC 2.1 also adds a method to the <i>Connection</i> object that lets an application set and retrieve a type <i>Map</i> for translating custom SQL datatypes. I haven't had the opportunity to test this functionality; there are few commercial JDBC drivers that support JDBC 2.0. Online versions of both specifications are available at http://java.sun.com/j2se/1.3/docs/guide/jdbc.  </p>

<p>Although it provides the basic functionality, the generated class is abstract because it is not useful on its own. To use it, create a class that extends it. The primary purpose of this class is to express and enforce the relationships between objects in the system. For example, the implementation of a <i>Customer</i> class for a sales system would contain the customer's <i>Orders</i>. This class will normally provide the methods to retrieve, insert, update, and delete objects of the given type. Here, the main application logic is implemented and code is written to enforce applicable business rules. Examples of business rules that may be implemented in descendant class are: Can objects of this type be deleted? Are there dependent objects that also need to be deleted when the parent object is deleted (cascading deletes)? Are updates permitted? Are data modifications audited? Complex relationships and referential integrity constraints would also be enforced by code in the descendent class.  </p>

<p>I have provided an example program loosely based on the code presented in Terry Smith's article. I thought it would be instructive to show an alternative method of simplifying database access objects using the same basic example. Terry's article was written for an Oracle database and included a SQL script to create the <i>Member</i> table. That script contained an Oracle-specific datatype (VARCHAR2). I have provided a modified Member.sql script to create the same table in a DB2 (and presumably any other SQL) database. I have also included the code generated by <i>DbGenerateClasses</i> for the <i>Member</i> table, <i>MemberTable.java</i>. I supplied it only to provide a complete working example. I recommend you create the table using the script and run the <i>DbGenerateClasses</i> application to generate your own version of <i>MemberTable.java</i>.  <i></p>

<p>Member.java</i> is a sample class that extends the generated <i>MemberTable</i> class and provides the methods to retrieve, insert, update, and delete members. Code is included that exercises these functions. As a general business rule, I decided modification of the member ID was not permitted for an existing <i>Member</i> object. This prevents a number of problems that could occur when users of the class change the member ID. If it needs to be modified, the <i>Member</i> class manipulates the member ID directly; it has access through inheritance. The overridden <i>setMemberid</i> method in the <i>Member</i> class silently does nothing. This behavior is clearly documented in the <i>Member</i> class's comments.  </p>

<p>As I mentioned previously, the <i>Statement</i> object has some drawbacks. It is the least efficient method (compared to <i>PreparedStatement</i>s and <i>CallableStatement</i>s) of performing database operations and it requires you, as the programmer, to be aware of RDBMS-specific details. <i>CallableStatement</i>s are the JDBC implementation of stored procedures and are not useful in improving the performance of the code presented here. With some modifications, they could be used with <i>PreparedStatement</i>s. In general, each generated class would have one or more <i>PreparedStatement</i> objects for each data manipulation operation. It would be straightforward to implement insert operations using <i>PreparedStatement</i>s: Any columns not supplied in the hash table for insertion would be set to Null. <i>PreparedStatement</i> for updates are more problematic (because it is difficult to anticipate the columns that will be "normally" updated). Deletion and retrieval also suffer from not knowing what criteria to support. The primary key for a table can be extracted using the <i>DatabaseMetaData</i> interface, and using the primary key for retrieval and deletion would solve some of the problem. Another potential performance improvement would be to use column numbers instead of column names for extracting column information from <i>ResultSet</i>s. Adding an additional data member to the <i>ColumnInfo</i> object and dynamically setting the column number each time a query was executed could solve this issue. </p>



<h3>Conclusion</h3>


<p>Using a vendor's implementation of the <i>DatabaseMetaData</i> interface, you can retrieve all the information required to generate Java classes that map to an underlying database table. By including the metadata in the generated class and making it available at run time, you can generate dynamic SQL statements that simplify standard SQL operations and require no knowledge of SQL from users of the class. You can almost completely eliminate the boring, mindless coding required to represent database tables as Java classes and spend your time on the more challenging aspects of your project: the application logic and business rules. The technique I present here is a general-purpose solution to the problem of object-relational mapping in Java. In my experience, general solutions trade performance for ease of use. In this case, I had no idea if the performance would be acceptable until the actual throughput testing was performed. Our requirements were to process a peak volume of 120 messages per minute. Lack of supporting indexes on key tables had a far greater impact on performance than this code. In all but the most demanding database applications, I would try to use the technique presented here and be prepared with some performance improvements if they become necessary.</p>


<p></p>

<p><b>DDJ</b></p>
<H4><A NAME="l1">Listing One</H4>


<pre>// Copyright (c) 2000, Mark J. Seaman
/** Maintains information about a column of a database table. It is designed  
*  to be stored in a hashtable and passed to the DBUtils class methods
*  @author  Mark Seaman ($Author: mark $)
*  @version $Revision: 1.3 $
*/

public final class ColumnInfo {
  /** the column name */
  private String name;

  /** the datatype of the column from the sql.Types package */
  private int datatype;

  /** the maximum length of this column, currently not used */
  private int length;

  /** uses the column name to provide a hash value for this
  * column.  This allows the column info to be retrieved
  * from a Hastable using either the name or the columnInfo object.  
  */
  public int hashCode() { return name.hashCode();}

  /** equals method required for this object to be retreived from a 
  * &lt;code&gt;java.util.Hashtable&lt;/code&gt;. It makes a &lt;code&gt;ColumnInfo&lt;/code&gt; 
  * object equal to a &lt;code&gt;String&lt;/code&gt; containing the name of the column. 
  * This assumes no DBMS implementation allows two columns of the same name 
  * in the same table. This class is declared &lt;code&gt;final&lt;/code&gt; because 
  * this method will not work on decendants of this class 
  */
  public boolean equals (Object o) {

    if (o == null) {
      return false;
    } else if (o instanceof ColumnInfo) {
      //are the names the same?
      return this.name.equals(((ColumnInfo)o).getName());
    }
    else if (o instanceof String) {
      //is this name the same as the String value
      return this.name.equals((String)o);
    } else {
      //all others defer to Object equals
    return super.equals(o);
    }
  } //equals()

  /** sets the column name */
  public void setName (String name) { this.name = name; }
  /** sets the datatype */
  public void setDataType (int datatype) {this.datatype = datatype; }
  /** sets the length of the column */  
  public void setLength ( int length ) { this.length = length; }

  /** returns the column name */
  public String getName () { return name; }
  /** returns the column type */
  public int getDataType () { return datatype; }
  /** returns the column length */
  public int getLength() { return length; }

} //ColumnInfo
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>


</body>
</html>
