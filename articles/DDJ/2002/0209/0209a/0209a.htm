<html>
<head>
<title>Sep02: Distributed Computing with Ruby</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Distributed Computing with Ruby</h1>
<p><i>Dr. Dobb's Journal</i> September 2002</p>
<h2>Using distributed Ruby to distribute task objects</h2>

<h3>By Phil Tomson</h3>

<I>
Phil is a freelance software engineer and the creator of the TaskMaster framework. He can be contacted at rubyfan@programmer.net.</I>

<hr>

<p>Often it is necessary to parallelize a set of tasks so that instead of running on one machine serially, the tasks are spread across several machines to save time. For example, you might need to test how well a compiler's parser adheres to a particular language's specified grammar. The test suite for testing the language might contain several thousand test cases that normally take, say, eight hours to complete if all of the test cases are run serially on one machine. Of course, you would like to know if the latest changes you made to the parser broke anything, and you would like to not have to wait eight hours to get results. What if you could run the test cases on eight machines and get results in one hour, or even better, if you could run them on 16 machines and get answers in 30 minutes? I recently faced a similar problem. To solve it, I created TaskMaster, a task distribution framework using DRb, Ruby's distributed object system.</p>
<p>Ruby is a dynamic, object-oriented scripting language available on platforms such as Windows, Linux, and Mac OS X (see "Programming with Ruby," by Dave Thomas and Andy Hunt, <i>DDJ</i>, January 2001). Since Ruby's DRb (sometimes referred to as dRuby) is straightforward to use, I discovered that DRb made TaskMaster easy to implement. Ruby is available at http://www.ruby-lang.org/en/download.html and DRb at http://www.rubylang.org/en/raa-list.rhtml?name=druby+distributed+ruby and http://www2a.biglobe.ne.jp/~seki/ruby/drb-1.3.4.2.tar.gz. (DRb comes with the Windows version of Ruby; on UNIX, you may have to install it separately.) TaskMaster is available at http://www.aracnet.com/~ptkwt/ruby_stuff/ TaskMaster/ and from <i>DDJ</i> (see "Resource Center," page 5).</p>
<DDJADVERTISEMENT INLINE>

<p>DRb lets you bind an object to a port on one machine and access that object's methods from another machine on the network &#151; a form of Remote Procedure Call (RPC). However, DRb lets you do more than just simple RPC. Objects can be efficiently passed from one machine to another with DRb. It all works by using Ruby's built-in Marshal module to serialize objects and transfer them over the network to other computers. TaskMaster utilizes this ability to pass objects around a network to pass task objects to clients. </p>

<p><A NAME="rl1"><A HREF="#l1">Listings One</A> and Two illustrate the simplicity of using DRb. DRbServer, the DRb Server in <A NAME="rl1"><A HREF="#l1">Listing One</A>, defines a simple class called <i>HelloFrom,</i> which defines the method <i>say_hello</i>, which returns a string composed of "hello from" and the name of the machine it's running on. A <i>HelloFrom</i> object is instantiated and referenced by the variable <i>h</i>. A DRbServer is instantiated on the next line with <i>h</i> bound to port 5555 of the machine running the server. <A NAME="rl2"><A HREF="#l2">Listing Two</A> is the client. A <i>DRbObject</i> is instantiated and is bound to port 5555 of a machine called "Remote." (Of course, you need to have Ruby and dRuby installed on master and slave machines.) </p>

<p>Suppose the code from <A NAME="rl1"><A HREF="#l1">Listing One</A> is started on the machine Remote. If <A NAME="rl2"><A HREF="#l2">Listing Two</A> is then run on another machine that can access Remote, say a machine called "Local," then on Local you'll see the message:</p>

<blockquote><p>
hello from remote</p>

</blockquote>

<p>Clearly, DRb is easy to use and there are no web servers to set up as required with XML-RPC and SOAP-based solutions. DRb forms the basis for object-oriented communications between server and clients in the TaskMaster framework.</p>



<h3>The TaskMaster Framework</h3>


<p>TaskMaster uses DRb to distribute user-defined runnable task objects from a master machine to several slave machines. I call these "runnable" objects because they must define a <i>run</i> method in the class definition. Since Ruby is dynamically typed, it doesn't matter that your runnable object is of a certain type, it only matters that the object has a <i>run</i> method defined in its public interface. The <i>run</i> method should define some task that the user wants to accomplish on the remote slave machines. For example, you could define a <i>Testcase</i> class and the <i>run</i> method of that class could be defined in such a way that it runs a test case for a compiler. Your <i>Testcase</i> class would now be able to construct runnable objects in the context of the TaskMaster framework. <i>Testcase</i> objects are created on the master machine and passed to your remote slaves. When a slave receives a runnable object, it invokes the <i>run</i> method on that object and the task is then run on the remote slave machine.</p>


<p>The classes that make up the TaskMaster framework include:</p>


<ul>
  <li><i>Distributor</i>, which is instantiated with a list of available clients. When a task object is sent to the <i>Distributor</i> (via the <i>send_task</i> method) it finds the next available machine and sends the task object to it. <i>Distributor</i> also determines when machines have finished running a task and calls the method <i>harvest</i> on the finished task. 
  <li><i>SlaveProxy</i>, which takes care of communications between the <i>Distributor</i> object on the master and a particular slave machine. <i>Task</i> objects are sent to slaves through the <i>SlaveProxy,</i> which exists on the same machine as the <i>Distributor</i> object. A <i>SlaveProxy</i> object starts a new thread when the <i>Distributor</i> sends a task object to a particular slave via the proxy. The <i>SlaveProxy</i> keeps track of the associated client machine's availability &#151; the slave will not become available again until the new thread has completed. 

  <li><i>Slave</i>, which manages DRb communication on slave machines. It also defines functions used to query the slave for various attributes (OS type, Ruby version, current working directory, and so on). The <i>Slave</i> object receives <i>task</i> objects from the master and invokes their <i>run</i> methods.

</ul>


<p>Users need to supply the following classes:</p>


<ul>
  <li><i>t</i><i>ask</i>, which defines a <i>run</i> method that contains the code for the task to be executed on a slave machine. A <i>task</i> should also define a <i>harvest</i> method, which is called by the <i>Distributor</i> after the task has completed. The results returned from a task's <i>harvest</i> method will be passed on to the user-supplied <i>reporter</i> object.
  <li><i>reporter</i>, which defines methods used to collect and report results from the slaves. The <i>Distributor</i> has a <i>reporter</i>; the <i>reporter</i> object exists on the master machine. Users can define their own <i>reporter</i>s that must respond to a <i>report</i> method.

</ul>

<h3>An Example TaskMaster Application</h3>


<p>A typical TaskMaster application has four components:</p>


<p></p>

<ul>
  <li>A master script that runs on your designated master machine. 
  <li>A slave script that runs on each of your slave machines (and it can also run on your master machine).

  <li>A user-defined <i>task</i> class that defines your application's task in a <i>run</i> method.

  <li>A user-defined <i>reporter</i> class that defines how results are collected from tasks and how they are reported.

</ul>


<p><A NAME="rl3"><A HREF="#l3">Listing Three</A>, which illustrates how you can use the TaskMaster framework, presents PiTask, an application that calculates an estimate of pi using the Monte Carlo method. </p>

<p>PiTask defines a <i>run</i> method that takes an argument <i>iterations</i>. For the given number of <i>iterations</i>, a random <i>x</i>- and<i> y</i>-coordinate is chosen (with the values of <i>x</i> and <i>y</i> between 0 and 1). A distance is then calculated from the origin (0,0). If the distance is less than or equal to 1, the random point falls within one quadrant of a circle and the <i>hits</i> variable is incremented. After thousands (or millions) of <i>iterations</i>, a value for pi can be calculated using the formula: <i>pi_est = 4(hits/iterations)</i>. This is exactly what PiTask's <i>run</i> method does. After calculating the estimate, it assigns it to an instance variable (<i>@my_pi</i>).</p>

<p>The <i>PiTask</i> class also defines a <i>harvest</i> method. A<i> task</i>'s <i>harvest</i> method is called from the master side when the <i>Distributor</i> finds that the task has completed. In this case, you simply return the value of pi that was estimated; the instance variable <i>@my_pi</i> is returned. <A NAME="rl4"><A HREF="#l4">Listing Four</A> is the master script.</p>

<p>After setting up the list of slaves, the <i>PiReporter</i> class is defined. The <i>PiReporter</i>'s <i>report</i> method receives the value returned by a <i>PiTasks</i>'s <i>harvest</i> method. In this case, the <i>report</i> method just stores the estimated value of pi coming from a slave in a list. <i>PiReporter</i>'s <i>final_report</i> method is called after all of the slave machines have completed their estimates; it calculates the average of the estimates and prints the results.</p>

<p>After setting a start time (so you can calculate how long the program takes to run) and calling <i>require</i> on the PiTask.rb file, the <i>Distributor</i> is instantiated with the <i>slaveList</i>. <i>Distributor</i>'s <i>remote_require</i> method is then called with a list containing the string <i>PiTask.rb</i> &#151; this sends the contents of that file to each of the slave machines. It essentially gives the slave machines the definition for the <i>P</i><i>iTask </i>class so that they can receive and act upon <i>PiTask</i><i> </i>objects, which will be sent to them.</p>

<p>A <i>PiReporter</i> is then instantiated and referenced by the <i>reporter</i> variable and the <i>Distributor</i>'s <i>reporter</i> instance is then set (<i>distrib.reporter = reporter</i>) to use it.</p>

<p>Now comes the time to divide up the tasks between the available slave machines. You send a <i>task</i> for each available slave machine. You divide the total number of <i>iterations</i> (in this case, 1,000,000) by the number of slave machines. In this example, there are four slaves, so each one runs 250,000 <i>iterations</i>. After all the <i>task</i>s are sent, you then wait for all of the <i>task</i>s to complete (<i>distrib.wait</i>) and then call <i>reporter.final_report</i> to give the average for all machines.</p>

<p>In reality, if you really wanted to speed this up, you would probably write the computationally intensive part of <i>PiTask</i>'s <i>run</i> method in C and create an extension for Ruby in a shared library file. You could then call the C function from this library from your <i>run</i> method. (TaskMaster includes an example of this.)</p>

<p><A NAME="rl5"><A HREF="#l5">Listing Five</A> is the slave script that should be running on your slave machines before starting the master.rb script in <A NAME="rl4"><A HREF="#l4">Listing Four</A>. </p>

<p>This example illustrates the main points you need to be aware of when creating your own distributed applications with TaskMaster:</p>


<ul>
  <li>You need to define a <i>task</i> class that defines a <i>run</i> method, which performs some task and saves the results in instance variables. You also need to define a <i>harvest</i> method, which returns the results to the master machine.
  <li>You need to define a <i>reporter</i> class, which defines a <i>report</i> method that receives the results from your <i>task</i>'s <i>harvest</i> method. Your <i>reporter</i> class can optionally define methods for generating reports based on results gathered from finished tasks.

  <li>You need to create the master-side script that instantiates a <i>Distributor</i> object with a list of slave machines.

  <li>You might need to create the slave-side script, but in most cases, you could use the example in <A NAME="rl5"><A HREF="#l5">Listing Five</A> unchanged.

</ul>

<h3>Conclusion</h3>


<p>Using Ruby's DRb module to create distributed applications is relatively easy when compared to the alternatives. XML-RPC and SOAP tend to require more setup than DRb does due to their reliance on XML and HTTP. The downside to using DRb is that you won't be able to interoperate with other languages as you can with XML-RPC or SOAP (where XML acts as an intermediate translator of intent). However, if you are starting a new project from scratch and your distributed application doesn't need to interoperate with other languages, Ruby offers a compelling alternative for getting the job done quickly and easily. As an alternative, you can also use DRb to prototype your distributed application and then migrate the project to XML-RPC or SOAP using the available Ruby modules that support those protocols. For applications where you need to distribute tasks to multiple machines, TaskMaster offers a flexible off-the-shelf solution. </p>


<p></p>


<p><b>DDJ</b></p>
<H4><A NAME="l1">Listing One </H4>


<pre># -----------hello server ------------
require "drb/drb"
class HelloFrom
  def say_hello
    return "hello from " + Socket.gethostname
  end
end
h = HelloFrom.new
h_server = DRb::DRbServer.new("druby://0.0.0.0:5555", h)
h_server.thread.join
#-----------end of hello server-----
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two</H4>


<pre># ----------- client ------------
 require "drb/drb"
 primary = DRb::DRbServer.new
 ro = DRb::DRbObject.new(nil, "druby://remote:5555")
 puts ro.say_hello
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3">Listing Three</H4>


<pre>######################################################
# PiTask.rb
# Estimates pi using the Monte Carlo method
# more iterations should produce more accurate results
#######################################################
require "TaskMaster"
class PiTask
   
   def run(iterations)
     hits = 0
     puts "iterations = #{iterations} iterations.type = #{iterations.type}"
     iterations.times { |i|
       #pick a random x,y
       x = rand
       y = rand
       dist = Math.sqrt(x*x + y*y)
       if dist &lt;= 1.0
         hits += 1
       end
     }
     @my_pi = 4*(hits.to_f/iterations.to_f)
     puts "PiTask::run finished -&gt; estimated pi = #@my_pi"
   end

   def harvest
     return @my_pi
   end

end
</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>
<H4><A NAME="l4">Listing Four</H4>


<pre>#####################################################
# master.rb - run on your master machine
#####################################################
require "TaskMaster"

iterations = 1000000
slaveList = ['frodo','sam','merry','pippin']
class PiReporter
  def initialize
    @estimates = []
  end

  def report(pi_est)
    @estimates &lt;&lt; pi_est
  end

  def final_report
    sum = 0
    @estimates.each { |est|
      sum += est
    }
    print "The average pi estimate was: "
    print "#{sum/(@estimates.length)}\n"
  end
end
startTime = Time.now
filesToRequire = ["PiTask.rb"]
filesToRequire.each { |file| require file }
distrib = TaskMaster::Distributor.new(slaveList)
distrib.remote_require(filesToRequire)
reporter = PiReporter.new
distrib.reporter = reporter
(distrib.availableSlaves).each {
  distrib.send_task(PiTask.new(),(iterations/distrib.availableSlaves.length))
}
distrib.wait
reporter.final_report
endTime = Time.now
puts "Total time: #{endTime-startTime} seconds"
</pre>
<P>
<A HREF="#rl4">Back to Article</A>
</P>
<H4><A NAME="l5">Listing Five    </H4>


<pre>#######################################
# slave.rb - run on your slave machines
#######################################
require "TaskMaster"
slaveObj = TaskMaster::Slave.new()
puts "Slave #{Socket::gethostname} started"
slaveObj.wait</pre>
<P>
<A HREF="#rl5">Back to Article</A>
</P>


</body>
</html>
