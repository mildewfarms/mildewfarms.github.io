<html>
<head>
<title>Dec02: XSLT Querying & XML Documents</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>XSLT Querying &amp; XML Documents</h1>
<p><i>Dr. Dobb's Journal</i> December 2002</p>
<h2>An alternative to DOM/SAX APIs</h2>

<h3>By Giuseppe Naccarato</h3>

<I>
Giuseppe is a software developer and technical writer in London (UK) and can be reached at naccarato@inwind.it.</I>

<hr>

<p>The Document Object Module (DOM) and Simple API for XML (SAX) are standard methods by which you can search XML documents without generating specific parsers in different programming languages. In this article, I propose an alternative method that takes advantage of Extensible Stylesheet Language Transformations (XSLT) features that can then form a Java component query on XML documents. The advantages of this approach to the classic SAX/DOM strategies include ease of use, greater flexibility, and better performance. </p>
<p>XSLT was designed to transform XML into other forms such as HTML, XHTML, or other XML documents. An XSLT processor, using one or more eXtensible Stylesheet Language (XSL) stylesheets, performs the transformation. The stylesheets are also XML documents, written according to the specifics of the XSL, containing tags interpretable by the XSLT processor. Usually, XSLT is applied in web-based systems to show&#151;in a better form&#151;data coming from XML. In this context, the web browser represents the client side of the system. It deals only with the HTML produced by the XSLT processor with input provided by the XSL stylesheet and the XML document; see <A NAME="rf1"><A HREF="0212bf1.htm">Figure 1</A>.</p>
<DDJADVERTISEMENT INLINE>

<p>The XML code in <A NAME="rl1"><A HREF="#l1">Listing One</A> (employee.xml) contains a list of employees. The attendance tag contains the day-to-day start/end work time for each employee. From this XML code, you display attendance information inside a web browser in a user-friendly format. To do this, I wrote the XSL stylesheet in <A NAME="rl2"><A HREF="#l2">Listing Two</A> (employee.xsl), which tells the XSLT processor to create an HTML file containing all the employee attributes with information about attendance.  </p>

<p>For the purposes of this article, I am interested in a particular feature that the statement <i>for-each</i> holds. Thanks to the <i>select</i> attribute, you can indicate the search criteria for extracting nodes. For example, if you substitute <i>&lt;xsl:for-each select="employees/employee"&gt;</i> with <i>&lt;xsl:for-each select="employees/employee[surname='White']"&gt;</i>, then only the employees with the surname "White" are shown. This lets you perform a query on an XML document using XSLT. </p>

<p>To specify the search criteria on the XML nodes, insert a pattern inside square brackets after the node name in the <i>select</i> attribute of the <i>for-each</i> statement. XSLT provides diverse operators and functions to make comparisons among values. In the previous example, I used the "=" operator. You can also use the function <i>contains</i> that returns True if a queried string is contained in the attributes. By using <i>&lt;xsl:for-each select="employees/employee[contains(surname,'White']"&gt;</i>, you get each employee whose surname contains the string "White." Numeric operators can also be used. If you are looking for employees whose age is greater than 30, you can write the following, where age is an attribute of employee: <i>&lt;xsl:for-each select="employees/employee[age $gt$ 30]"&gt;</i>. </p>

<p>To take advantage of XSLT features for performing a query on XML nodes, you need to carry out a Java class (say, <i>XMLQueryManager</i>), whose instantiated objects are related one-to-one to the XML documents. The class has a method to perform a query (called <i>query</i>) on the related XML. The input is the string representing the query statement written with the XSL syntax. The method creates, on the fly, the XSL stylesheet able to perform the required query.</p>

<p>Suppose that the instance of the <i>XMLQueryManager</i> works on the employee.xml file. You could pass the <i>employees/employee[surname='White']</i> statement to the query method that creates an XSL stylesheet similar to that of <A NAME="rl2"><A HREF="#l2">Listing Two</A>, except that the <i>for-each</i> command on the employee node will be <i>&lt;xsl:for-each select="employees/employee[surname= 'White']"&gt;</i>. Successively, the query method calls the XSLT processor performing the transformation in HTML code. Finally, the HTML code is returned. You can now imagine the following scenario&#151;a web-based application accepts requests from the web browser (for example, "take all the employees whose surname is White"). It then sends this information to a servlet (or JSP) that, using <i>XMLQueryManager</i>, returns the HTML code showing the result; see <A NAME="rf2"><A HREF="0212bf2.htm">Figure 2</A>.</p>



<h3>The <i>XMLQueryManager</i> Class</h3>


<p>Before you start to implement <i>XMLQueryManager</i>, you have to make some choices. First, you have to decide which XSTL processor to use. In this implementation, I used Xalan 2, an open-source Java XSLT processor produced by the XML Apache Group (http://www.apache.org/). This XSLT processor follows the Sun JAXP 1.2 specifications and is no longer compatible with the first Xalan version. JAXP 1.2 is also included in the new J2SE 1.4. Thus, if you use this version of Java, you don't need to download Xalan 2.</p>


<p>You must also have a way to generate the XSLT stylesheet on the fly. One approach would be to hard-code XSL commands into the <i>query</i> method. But this would not be a good general-purpose solution. A better solution would be to store the XSL code in a template file. This file is an XSL file where the <i>query</i> statement will be replaced at run time by the <i>XMLQueryManager</i> class. The complete implementation of the <i>XMLQueryManager</i> class is available electronically; see "Resource Center," page 5). To get an XSL template file from the stylesheet in <A NAME="rl2"><A HREF="#l2">Listing Two</A>, you replace the statement <i>&lt;xsl:for-each select="employees/employee[surname='White']"&gt;</i> with <i>&lt;xsl:for-each select="$"&gt;</i>. The <i>$</i> symbol is replaced at run time with the search-criteria string. The resulting XSL stylesheet and XML file become inputs to the XSLT processor. The class has two private attributes:</p>


<ul>
  <li><i>_xmlSource</i> is a <i>javax.xml.transform.Source</i> type, which is an interface used by the JAXP 1.2 XSLT processors. It becomes the input XML document going to the XSLT processor. A <i>Source</i> can have diverse implementations: JAXP defines the <i>StreamSource</i> class as an XML file, and a <i>DOMSource</i> class is defined when the XML is encapsulated in a DOM tree. I used the <i>StreamSource</i> implementation. 
  <li><i>_xmlFileTemplate</i> is a string that contains the name of the XSL template file.

</ul>


<p>The <i>XMLQueryManager</i> constructor accepts the name of the XML file and the name of the XSL template file as input. With the first parameter, the constructor creates the <i>SourceStream</i> object and stores it into the <i>_xmlSource</i> private attribute. The constructor also stores the <i>xslFile</i> parameter in the <i>_xmlFileTemplate</i> attribute, which is later used by the <i>query</i> method.</p>

<p>The <i>query</i> method accepts the XSL <i>query</i> statement (<i>xslStatement</i>) and creates the concrete XSL stylesheet calling the <i>makeXSL</i> private method. This method returns the name of the XSL stylesheet created from the XSL template file and the <i>query</i> statement. The name of the XSLT stylesheet is then used to build the <i>StreamSource</i> object that the XSLT processor needs. </p>

<p>Before you call the processor, you must specify the result format&#151;I used a file to store the result of the transformation. The name of the file will be built on the fly by the <i>query</i> method concatenating the string "result" with the system time in milliseconds. In this way, you can be sure the file name will be unique. This creates the <i>ResultStream</i> object. The class implements the <i>Result</i> interface and has the same meaning as <i>SourceStream</i>;<i> </i>the only difference being that <i>ResultStream</i> is used for the output, whereas <i>SourceStream</i> is used for the input.</p>

<p>At this point, you are ready to invoke the XSLT processor. The code that makes it possible is:</p>

<blockquote><p>
TransformerFactory factory = Transformer-		Factory.newInstance();</p>

<p>
Transformer trans = factory.newTransfor-		mer(xslSource); trans.transform(_xml-			Source,result);</p>

</blockquote>

<p>Thanks to the <i>transform</i> method, the <i>Transformer</i> JAXP class performs the XSLT processing. It needs <i>Source</i> and <i>Result</i> as input. To get an instance of the <i>Transformer</i>, you have to get a <i>TransformerFactory</i> instance by calling the <i>newTransformer</i> method and passing the <i>Source</i> that represents the concrete XSL stylesheet. After the invocation of the transform method, you can find the output file on the directory where your application is working. Finally, the <i>query</i> method puts this file into a string using the <i>fileToString</i> private method&#151;and returns it.</p>

<p>Before quitting, the method deletes the generated XSL stylesheet that was temporarily generated for the XSLT processor. The <i>fileToString</i> method also deletes the resulting file after its content is placed in the string.</p>

<p>In summary, the <i>makeXSL</i> method creates a concrete XSL stylesheet starting from the XSL template, replaces the <i>$</i> symbol with the <i>xslStatement</i> string in input (see <i>replace</i> method), and then returns the created file.</p>



<h3>The Employee Servlet</h3>


<p>The <i>XMLQueryManager</i> class can be used from any Java application. You can make a traditional server application using the XSL template file and the XML file as input, and send the result of the XSL transformation to a client application. This type of application can be useful in web programming, where the server application making the transformation could be a servlet and the client could be the web browser.</p>


<p>For example, I use a straightforward web-based application that, by means of an HTML page, takes an input string representing the surname of an employee, then passes this string to a servlet. The servlet builds the right XSL query statement starting with the surname of the employee, and creates an instance of <i>XMLQueryManager</i> associated with the employee XML document using the XSL template in <A NAME="rl2"><A HREF="#l2">Listing Two</A> with the <i>$</i> symbol instead of the <i>query</i> statement.</p>

<p>The generated XSL <i>query</i> statement is passed to the <i>query</i> method of the <i>XMLQueryManager</i> class. It returns a string representing the result of the transformation that is sent to the web browser as XML or HTML code, depending on the implementation of the XSL template. In this case, the code is HTML.</p>

<p>For this application, you start by implementing the HTML code that lets the surname of the employee be input. It is a small HTML page that shows a submitting form (available electronically). When the Submit button is pressed, the string in the text area is sent to the <i>EmployeeServlet</i> servlet using the HTTP-GET method. </p>

<p>The code for the <i>EmployeeServlet</i> servlet is available electronically. The servlet sets the response object as <i>text/html</i> and gets an instance of the <i>PrintWriter</i> (variable <i>out</i>). Then it gets the <i>surname</i> parameters sent by the web browser. At this point, the servlet builds an instance of the <i>XMLQueryManager</i>. The constructor takes the XML file name and the XSL template file names (employee.xml and employee.xsl), and the <i>query</i> method is called. The XSL <i>query</i> statement is made inside the servlet using the <i>surname</i> parameter: <i>employees/employee[contains(surname,"'+surname+"')]</i>, which lets the XSLT processor include only the employees/employee nodes where the <i>surname</i> attribute contains the string inside the <i>surname</i> Java variable in the result.</p>



<h3>Extendibility</h3>


<p>I introduced <i>XMLQueryManager</i> to present the possibilities of using an XSLT-based component to perform queries on XML documents. It is straightforward and much can be done to improve this method.</p>


<p>For example, you can add multiquery parameter features to the <i>XMLQueryManager</i> class. As you have seen, <i>XMLQueryManager</i> only works with one <i>query</i> statement that will replace the <i>$</i> symbol into the XSL template file. You can modify the class to accept two or more <i>query</i> statements; in the XSL template, you can put more parameters (<i>$1, $2, $3,</i> and so on). The <i>setQueryStatement</i> method would accept a number and query-statement string, storing these couples into an array. In this way, the <i>query</i> method would be able to replace the parameters in the XSL template file with the values present in the array.</p>

<p>Another improvement would be to provide the ability to take the input and return the output using other kinds of input/output systems such as String, DOM tree, or SAX processes.</p>


<p><b>DDJ</b></p>

<H4><A NAME="l1">Listing One </H4>


<pre>//  The employee.xml file
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;employees&gt;
&lt;employee id="10808"&gt;
  &lt;surname&gt;White&lt;/surname&gt;
  &lt;name&gt;Liza&lt;/name&gt;
  &lt;birthday&gt;02/28/1976&lt;/birthday&gt;
  &lt;attendance&gt;
    &lt;date&gt;01/02/2002&lt;/date&gt;
    &lt;starttime&gt;9:08 am&lt;/starttime&gt;
    &lt;endtime&gt;18:45 pm&lt;/endtime&gt;
  &lt;/attendance&gt;
  &lt;attendance&gt;
    &lt;date&gt;01/03/2002&lt;/date&gt;
    &lt;starttime&gt;8:54 am&lt;/starttime&gt;
    &lt;endtime&gt;17:55 pm&lt;/endtime&gt;
  &lt;/attendance&gt;
  &lt;attendance&gt;
    &lt;date&gt;01/04/2002&lt;/date&gt;
    &lt;starttime&gt;9:13 am&lt;/starttime&gt;
    &lt;endtime&gt;19:21 pm&lt;/endtime&gt;
  &lt;/attendance&gt;
&lt;/employee&gt;

&lt;employee id="10990"&gt;
  &lt;surname&gt;Hill&lt;/surname&gt;
  &lt;name&gt;James&lt;/name&gt;
  &lt;birthday&gt;01/16/1979&lt;/birthday&gt;
  &lt;attendance&gt;
    &lt;date&gt;01/02/2002&lt;/date&gt;
    &lt;starttime&gt;7:43 am&lt;/starttime&gt;
    &lt;endtime&gt;17:25 pm&lt;/endtime&gt;
  &lt;/attendance&gt;
  &lt;attendance&gt;
    &lt;date&gt;01/03/2002&lt;/date&gt;
    &lt;starttime&gt;8:02 am&lt;/starttime&gt;
    &lt;endtime&gt;17:11 pm&lt;/endtime&gt;
  &lt;/attendance&gt;
  &lt;attendance&gt;
    &lt;date&gt;01/04/2002&lt;/date&gt;
    &lt;starttime&gt;8:11 am&lt;/starttime&gt;
    &lt;endtime&gt;17:41 pm&lt;/endtime&gt;
  &lt;/attendance&gt;  
&lt;/employee&gt;
&lt;employee id="11145"&gt;
  &lt;surname&gt;Hill&lt;/surname&gt;
  &lt;name&gt;Marion&lt;/name&gt;
  &lt;birthday&gt;03/04/1968&lt;/birthday&gt;
  &lt;attendance&gt;
    &lt;date&gt;01/02/2002&lt;/date&gt;
   &lt;starttime&gt;7:50 am&lt;/starttime&gt;
    &lt;endtime&gt;17:12 pm&lt;/endtime&gt;
  &lt;/attendance&gt;
  &lt;attendance&gt;
    &lt;date&gt;01/03/2002&lt;/date&gt;
    &lt;starttime&gt;8:45 am&lt;/starttime&gt;
    &lt;endtime&gt;17:54 pm&lt;/endtime&gt;
  &lt;/attendance&gt;
  &lt;attendance&gt;
    &lt;date&gt;01/04/2002&lt;/date&gt;
    &lt;starttime&gt;8:34 am&lt;/starttime&gt;
    &lt;endtime&gt;17:34 pm&lt;/endtime&gt;
  &lt;/attendance&gt;  
&lt;/employee&gt;
&lt;/employees&gt;
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two  </H4>


<pre>// The employee.xsl file
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheetversion="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
&lt;xsl:output method="html"/&gt;
&lt;xsl:template match="/"&gt;
  &lt;html&gt;
  &lt;body&gt;    
    &lt;xsl:for-each select="$"&gt;
     &lt;h2&gt;
     &lt;xsl:value-of select="@id"/&gt;
     &lt;xsl:text&gt; &lt;/xsl:text&gt;
     &lt;xsl:value-of select="name"/&gt;
     &lt;xsl:text&gt; &lt;/xsl:text&gt;
     &lt;xsl:value-of select="surname"/&gt;
     &lt;xsl:text&gt; &lt;/xsl:text&gt;   
     &lt;xsl:value-of select="birthday"/&gt;     
     &lt;/h2&gt;
     &lt;table border="2" width="50%"&gt;
     &lt;tr bgcolor="yellow"&gt;
     &lt;td width="34%"&gt;&lt;b&gt;Date&lt;/b&gt;&lt;/td&gt;
     &lt;td width="33%"&gt;&lt;b&gt;Start Time&lt;/b&gt;&lt;/td&gt;
     &lt;td width="33%"&gt;&lt;b&gt;End Time&lt;/b&gt;&lt;/td&gt;
     &lt;/tr&gt;
     &lt;xsl:for-each select="attendance"&gt;
       &lt;tr&gt;
       &lt;td&gt;&lt;xsl:value-of select="date"/&gt;&lt;/td&gt;
       &lt;td&gt;&lt;xsl:value-of select="starttime"/&gt;&lt;/td&gt;
       &lt;td&gt;&lt;xsl:value-of select="endtime"/&gt;&lt;/td&gt;
       &lt;/tr&gt;
     &lt;/xsl:for-each&gt;    
    &lt;/table&gt;
    &lt;br/&gt;&lt;br/&gt; 
    &lt;/xsl:for-each&gt;    
  &lt;/body&gt;
  &lt;/html&gt;
&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>


</body>
</html>
