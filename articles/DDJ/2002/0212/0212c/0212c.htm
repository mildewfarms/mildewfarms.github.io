<html>
<head>
<title>Dec02: ASP.NET Page Persistence & Extended Attributes</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>ASP.NET Page Persistence &amp; Extended Attributes</h1>
<p><i>Dr. Dobb's Journal</i> December 2002</p>
<h2>Formalizing HTTP  state management</h2>

<h3>By David Hovel</h3>

<I>
David was a member of the original Windows NT group at Microsoft before moving to Microsoft Research where he focused on probability models and the analysis of human-computer interaction. He is now an independent consultant and can be contacted at davidhov@exmsft.com.</I>

<hr>

<p>The HTTP protocol has succeeded in large measure because of its simplicity&#151;it uses text messaging, layers on top of TCP, and is stateless. However, while streamlining web-server operations, HTTP statelessness presents difficulties to web-site builders developing active content.</p>
<p>The statelessness of HTTP means that there is no formal means of remembering&#151;either in the client or server&#151;any past interaction involving the same user. Every web-development tool ensemble provides some means of recognizing sessions and storing information associated with a particular session between HTTP requests.</p>
<DDJADVERTISEMENT INLINE>

<p>In building a reusable solution for this problem for .NET-based Active Server Pages (ASP.NET), I exploited the reflection capability of .NET languages. Reflection allows detailed, run-time examination of the contents of classes, and appears to provide opportunities for metareasoning in imperative or procedural programs that have generally been available only in symbolic languages such as Prolog, LISP, and Scheme.</p>



<h3>Mechanisms for  State Storage in ASP.NET</h3>


<p>Running under control of Microsoft's Internet Information Server (IIS), the standard classes of ASP.NET provide several distinct mechanisms for storing information about the client and the client's session. While there are clear tradeoffs between these mechanisms, they all have one thing in common&#151;each requires special coding by application developers on each page.</p>


<p>ASP.NET lets ASPX pages access information from the following collections:</p>


<ul>
  <li>Cookies. Applications can create private cookie files on the client's machine that store key information for long periods of time.
  <li>ViewState. Graphical controls and other mechanisms in ASP.NET use a hidden HTML INPUT tag to store previous state information. This information is presented as a key-value collection during page rendering.

  <li>Session. Applications have access to a collection of key-value pairs that can be used to store variables associated with the current session.

  <li>Application. Programs have access to another dictionary that is global to the ASP.NET HTTP application.

</ul>


<p>In addition, important configuration information can be added to an XML file called "web.config." Data entered in this file is loaded every time the application starts.</p>

<p>ASP.NET can create the illusion of session orientation in several ways. Most commonly, it stores cookies that contain a unique session identifier on the client's machine. When the client makes a new request, the cookie's information is encoded into the new POST request and passed to the server. ASP.NET uses this information to index into a collection of session-state information.</p>



<h3>ASPX Pages and  The Code-Behind Module</h3>


<p>Each of these state-storage mechanisms must be used wisely, and each must be used explicitly by invocation in the "code-behind" module for a given web page. </p>


<p>In traditional ASP, a single text file with the extension ASP contained raw HTML interspersed with server-side and client-side scripts in VBScript or JScript (Microsoft's version of ECMAScript). While convenient, such intermixture quickly led to serious coding anarchy.</p>

<p>Insofar as possible, Microsoft decided to segregate the HTML presentation code and client-side scripts from the server-side scripting code. In ASP.NET, a typical ASPX page is represented by two files: </p>


<ul>
  <li>The ASPX file itself, containing the invariant HTML to be rendered.
  <li>A second code-behind file, typically written in C# or Visual Basic .NET, containing the procedural code to generate the dynamic HTML tags. 

</ul>


<p>An extensive data and eventing model allows interaction between the ASPX file and the code-behind file.</p>

<p>A code-behind file defines a .NET web-page handler class that encapsulates the server-side rendering logic for the page. When an HTTP request is received for a particular ASPX page, the ASP.NET mechanism automatically creates a freshly minted instance of the page class declared in the code-behind module. Very convenient&#151;except that this page instance has no history.</p>



<h3>A Declarative Solution</h3>


<p>Since ASP.NET supports object-oriented representations of web pages, I found that the first thing I wanted to do with ASP.NET was formalize the handling of session state. My older ASP code was sprinkled with references to the Application and Session collections. Incorrectly handling any one of these would have brought the application down quickly.</p>


<p>I realized that the ideal solution would be object oriented&#151;the code-behind page instance should automatically contain the exact same values in its data field members that it did the last time such an instance existed for the same session. In other words, I wanted to be able to "pretend" that the same instance of the page class had lain dormant just waiting for the next request to come down the fiber from the same client session. This would let me employ the same coding patterns that I'd used for many years.</p>



<h3>Rules of Persistence</h3>


<p>Assuming I could implement such a declarative solution, how should it work? Again, there are five repositories of useful information: Cookies, the ViewState, Session and Application collections, and web.config file.</p>


<p>I decided I didn't want to use cookies or the ViewState collection for automatic persistence. Both have similar constraints. Not all types of objects can be stored in them, since cookies store only textual information and the ViewState is limited to objects that can be serialized (converted back and forth to text). Also, these mechanisms consume bandwidth, since such information is transmitted repeatedly between the server and the client.</p>

<p>In the end, the following rules seemed reasonable:</p>


<ul>
  <li>Only protected fields can be persisted. Since the .NET-design pattern recommends exposing fields only through properties (called "accessors" in C++), I decided that persistence would apply only to noninherited, protected fields.
  <li>Instance, that is, nonstatic fields are saved in the Session collection only.

  <li>Static or class-common fields should be saved in the Application collection, but may be saved in the Session collection.

  <li>Information in the web.config file may be restored into either instance or static fields, but there is no saving mechanism&#151;such data is read-only and is limited to strings.

  <li>Classes, other than ASPX pages, could use persistence for their static fields only.

</ul>

<h3>Extended Attributes</h3>


<p>How could this work? Ideally, I wanted to just mark a field as "please persist" and have it work magically. Considering this, I remembered a similar problem in object serialization under the .NET Framework. When class objects are serialized for storage or transmission, there are always fields that shouldn't or needn't be handled in this way. The .NET team decided to decorate these fields with additional information that could be examined by serialization code at run time. If marked as "don't serialize," the field would be ignored, saving time and bandwidth.</p>


<p>They did this feat by exploiting extended attributes. In .NET languages, classes and their elements can be prefaced with nonprocedural attributes in square braces ([ and ]) that are parsed and validated by the compiler and stored as part of the type information in the "assembly"&#151;the executable file that results from the compilation. This means that such information is always available for inspection at run time. An extended attribute is declared like a standard class. The C# code in <A NAME="rl1"><A HREF="#l1">Listing One</A> declares an enumeration and an attribute class called <i>PagePersist</i> that contains a value from the enumeration.</p>

<p>The <i>AttributeUsage</i> declaration specifies that the <i>PagePersist</i> attribute is applicable only to fields&#151;the data members of a class. To use the <i>PagePersist</i> attribute, a field in a normal class is prefaced by an attribute declaration; see <A NAME="rl2"><A HREF="#l2">Listing Two</A>. The C# compiler kindly verifies that the attribute is correctly constructed, then stores the attribute information along with the complete class type information in the resulting assembly.</p>



<h3>Using Extended Attributes</h3>


<p>It is straightforward to examine the components of a class (fields, methods, enumerations, and so on) at run time and take action accordingly. The .NET Framework calls this sort of behavior "reflection," and it is similar to Java's "introspection" mechanism. This capability applies to extended attributes also.</p>


<p>The next step in my persistence solution was to develop a class that could examine another class's type information, locate the fields to be persisted, and take the correct action.</p>

<p>The file PersistAttr.cs (available electronically; see "Resource Center," page 5) defines a <i>PagePersister</i> class that uses reflection to find the fields within a class marked with persistence attributes and either restore or save their values using the appropriate persistence mechanism.</p>

<p>PersistAttr.cs contains the <i>PagePersister</i> class. Its primary method, <i>Action</i>, saves values from or loads values into static or instance fields of a particular class. <A NAME="re1"><A HREF="0212ce1.htm">Example 1</A> is the pseudocode description of this algorithm.</p>

<p>Field data is stored into the Session and Application collections using string keys with a special prefix and the page's class name.This helps identify persisted variables and avoids collisions between similarly named values in different pages. As objects are recovered from the persistent collections, their references are removed so that the ASPX code page may recreate or dispose of them as required.</p>



<h3>Integrating the Implementation</h3>


<p>Once the fields of a code-behind page class have been decorated with the persistence attribute, all that remains is for its values to be restored when a new instance is created and stored when the instance is discarded.Remember that a new page instance will be created for each incoming request. The active lifetime of the page is bounded by two events&#151;<i>Page_Load</i> and <i>Page_Unload</i>.</p>


<p>In Visual Studio.NET, the creation of a new web project in C# generates a module called "Global.asax.cs" that represents the HTTP application. ASP.NET provides a pair of events for this generated Global module that are useful for centralizing persistence handling: <i>PreRequestHandlerExecute</i> and <i>PostRequestHandlerExecute</i>. During the prerequest event, the new page object has been created, but its <i>Page_Load</i> function has not yet been called.When the post-request event occurs, <i>Page_Unload</i> has just been called.In other words, these events scope the active lifetime of the page and are ideal for the logic required. In the sample code, prerequest and postrequest event functions in Global call the <A NAME="rl3"><A HREF="#l3">Listing Three</A> helper function in PersistAttr.cs. The <i>PersistPage</i> function accesses the current handler defined for this request in the <i>HttpApplication Context </i>object.It checks to see if the handler is a subclass of <i>System.Web.UI.Page</i>, the standard superclass for ASPX pages; if not, it returns.Then it creates a <i>PagePersister</i> object.If the page is being loaded and it's not an initial request, its fields are restored; otherwise, its fields are saved. Each ASPX page class has a property called <i>IsPostBack</i>, but it does not appear to be set before <i>PreRequestHandlerExecute</i> is called, so this routine checks other variables to see if the request is in fact a POST reply. In <A NAME="rl4"><A HREF="#l4">Listing Four</A>, an ASPX page class is declared with a single instance variable--an array of strings. The field <i>arrayString</i> is prefaced by a <i>PagePersist</i> attribute.Any number of fields in a page may be decorated in that manner.</p>

<p>The result is that between the execution of <i>Page_Load</i> and <i>Page_Unload</i>, you may treat the C# class as though it were part of any other type of application&#151;that is, "stateful." Previous changes to its fields are present, new changes will be remembered. If it later appears that previously unsaved variables must now be persisted, only the persistence attribute needs to be added.</p>



<h3>Global Initialization</h3>


<p>Since the static fields of a class may be initialized in C#, I decided to mimic this behavior by providing the option of a secondary static initialization for classes in the ASP.NET application's Global module. The Global module receives an <i>Application_Start</i> event when it's loaded for the first time; see <A NAME="rl5"><A HREF="#l5">Listing Five</A>. In this function, the call to <i>RestoreStatic</i> restores the static fields of the <i>Global</i> object itself from the web.config file. Then a call to <i>RestorePageStatics</i> restores the static variables of the code-behind classes of all ASPX pages used in the application.</p>


<p>How does <i>RestorePageStatics </i>know the identities of all the page classes in the application? The .NET reflection capability lets me iterate over all classes in the application and discover those classes that are immediate descendants of <i>System.Web.UI.Page</i>.</p>

<p><A NAME="rl6"><A HREF="#l6">Listing Six</A> demonstrates how straightforward type analysis can be in .NET. First, the routine gets a collection of all the types exported by the executing assembly. Then it iterates over the types, looking for those that are direct descendants of the base class for ASP.NET pages. The static fields of each such class are restored.</p>



<h3>Session Termination</h3>


<p>Creating a standard procedure for handling persistence information also simplifies end-of-session logic. When this happens, usually due to a time-out, the Global module receives the <i>Session_End</i> event; see <A NAME="rl7"><A HREF="#l7">Listing Seven</A>.</p>


<p>The <i>PagePersister</i>'s <i>SessionEnd</i> function searches the Session collection. All persisted objects that support the <i>IDisposable</i> interface are correctly disposed. (Typically, objects supporting <i>IDisposable</i> have precious system resources that should be released immediately without waiting for garbage collection.)</p>



<h3>Metareasoning in  Imperative Programming</h3>


<p>The page persistence class in effect creates, through the use of standard facilities, what could almost be considered a new language feature and its corresponding mechanics. All of the features it uses are fully supported because they are integral to the .NET Framework.</p>


<p>One reason that I tackled such a project while still a novice to the .NET paradigm was that I wanted to kick the tires of the reflection capability. As an old Prolog fan, I always wanted the ability in, say, C++, to examine classes at run time to pretty-print objects or create smart "deep-copy" object cloning routines.</p>

<p>As the sample code shows, reflection is easy to use. In particular, there are two areas that were simpler than I anticipated. The first concerns assigning values, since assigning arbitrary objects to typed fields would normally require casting. However, the <i>SetValue</i> method of the <i>FieldInfo</i> class handles all such assignments easily. Exceptions are thrown if the values are incompatible, but the type coercion is transparent. In addition, the boxing capability of the .NET languages means that I need not be concerned if the variable is a <i>struct</i> (handled by value) or a class (handled by reference).</p>

<p>The second area that is intriguing is the ability to examine the assembly as a whole. As stated before, I used this feature to discover all the code-behind ASPX page classes declared in the assembly that contained my sample web application.</p>

<p>Some other obvious uses for type analysis come to mind, such as intelligent dump analyzers, automated style checkers, parser generators, and functional programming. .NET lets classes be created and loaded dynamically. Coupled with reflection, many types of data-driven and declarative programming common in the LISP and Prolog communities are well within the reach of the .NET Framework. Unlike the older symbolic languages, however, the .NET languages provide additional benefits such as speed, safety, and portability.</p>



<p><b>DDJ</b></p>
<H4><A NAME="l1">Listing One</H4>


<pre>  public enum PagePersistEnum {
        ePersistSession,
        ePersistApplication,
        ePersistWebConfig };
  [AttributeUsage(AttributeTargets.Field)]
  public class PagePersistAttribute : System.Attribute
  {
        public PagePersistAttribute ( PagePersistEnum ePersist )
        {
              this.ePersist = ePersist;
        }
        public PagePersistEnum PersistLevel
        {
              get { return ePersist; }
        }
        protected PagePersistEnum ePersist;
  }
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two</H4>


<pre>class Demo
{
  public Demo() {}
  [PagePersist(PagePersistEnum.ePersistSession)]
  protected string sTest = "this is the test string";
}
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3">Listing Three</H4>


<pre>public static void PersistPage(HttpApplication app, bool bRestore)
{
 // Access the page object that will handle this request.
 System.Web.UI.Page page = app.Context.Handler as System.Web.UI.Page;
 if ( page == null )
 return; // We only handle page classes 
 // Create a persister helper for operating on this page
 PagePersister persist = new PagePersister(page);
 
 string sMethod = app.Context.Request.HttpMethod.Trim().ToUpper();
 bool bInitialRequest = app.Session.IsNewSession || sMethod != "POST";
 if ( bRestore )
 {
  if ( ! bInitialRequest )
  persist.Restore();
 }
 else
  persist.Save();
}
</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>
<H4><A NAME="l4">Listing Four</H4>


<pre>public class PersistPage : System.Web.UI.Page
{
 private void Page_Load(object sender, System.EventArgs e)
 {
 if ( ! IsPostBack )
 {  // Initialize all variables to desired original state  string[] sa = {"First","Second","Third","Fourth"};  arrayString = sa;
 }
 }
 [PagePersist(PagePersistEnum.ePersistSession)]
 protected string[] arrayString;


</pre>
<P>
<A HREF="#rl4">Back to Article</A>
</P>
<H4><A NAME="l5">Listing Five</H4>


<pre>protected void Application_Start(Object sender, EventArgs e)
{
   //  Restore static variables of the Global class and PersistPage class.
  PagePersister.RestoreStatic(Application,typeof(Global));
  //  Restore static variables of all subclasses of System.Web.UI.Page class.
  PagePersister.RestorePageStatics(Application);
}
</pre>
<P>
<A HREF="#rl5">Back to Article</A>
</P>
<H4><A NAME="l6">Listing Six</H4>


<pre>public static void RestorePageStatics(HttpApplicationState app)
{
  Assembly asmb = Assembly.GetExecutingAssembly();
  Type[] types = asmb.GetExportedTypes();
  Type tPage = typeof(System.Web.UI.Page);
  foreach ( Type t in types )
  {
     if ( tPage == t.BaseType )
        RestoreStatic(app, t);
  }
}
</pre>
<P>
<A HREF="#rl6">Back to Article</A>
</P>
<H4><A NAME="l7">Listing Seven</H4>


<pre>protected void Session_End(Object sender, EventArgs e)
{
  PagePersister.SessionEnd(Session);
}

</pre>
<P>
<A HREF="#rl7">Back to Article</A>
</P>


</body>
</html>
