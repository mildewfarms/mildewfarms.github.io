<html><head><title>Jan02: Web Services  & Java Server Pages</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; Dr. Dobb's Journal--><h1>Web Services  &amp; Java Server Pages</h1><p><i>Dr. Dobb's Journal</i> January 2002</p><h2>Building distributed applications</h2><h3>By John M. Kanalakis, Jr.</h3><I>John is director of engineering at Betasphere Inc. He can be reached at <a href="mailto:jkanalakis@betasphere.com">jkanalakis@betasphere.com</a>.</I><hr><p>Web services are collections of functions bundled together to deliver specific functionality to Internet-enabled desktop and web applications. Web services can range in functionality from simple information retrieval services, such as stock quotes, weather, and traffic updates, to complex business services that manage inventory, procurement, and supply-chain interactions. Web services can also be aggregated together to perform high-level application functionality, such as a spreadsheet application that is downloaded on demand with the latest available formulae.</p><p>Web services are based on the concept of Service-Oriented Architectures (SOA). In SOAs, core functionality is organized into discrete packages. Each package delivers functionality that targets one specific problem. Complete applications can be constructed quickly as shells that connect these various services and grow as new services become available. The SOA concept is not new by any means. Many organizations have delivered different SOA-based frameworks for several years, including Microsoft and the OMG with their COM and CORBA specifications, respectively. It's only recently that published, open standards for SOAs have come onto the scene. Microsoft, Sun, and IBM have put open standards at the heart of their approaches to SOA in the form of XML and SOAP. </p><DDJADVERTISEMENT INLINE><p>The strength behind the Extensible Markup Language (XML) is that its data structure is self describing. There are no proprietary keys or codes that distinguish data between vendors. The Simple Object Access Protocol (SOAP) is a communication protocol that defines how the self-describing XML data is transmitted from one point to another. Both technologies are based on open standards with endorsement from the World Wide Web Consortium (W3C). As <A NAME="rf1"><A HREF="0201bf1.htm">Figure 1</A> illustrates, they bring developers with different backgrounds a standard means for developing services that fit into one universal Service-Oriented Architecture.</p><p>Web-service developers can produce services in various languages, including Java, C++, Python, or any of the Microsoft .NET-supported languages. Those connecting to web services can build desktop or web applications with the same flexibility and even operate on different server platforms &#151; any platform that supports a SOAP client. Currently, server platforms supporting SOAP-based web services include IBM WebSphere, Apache Tomcat, and Microsoft .NET Enterprise Server.</p><p>Web services are foundation components for building open, distributed systems. Since web services are built on open standards such as SOAP and XML, any compliant web  service can interact with any other. The days of converting between different distributed platforms are over. Now, data can be passed from one application or web service to another in a single self-describing XML document and passed from one SOAP-based client to another.</p><p>In this article, I'll present an example portal (available electronically; see "Resource Center," page 5) that demonstrates how web applications can tie together distributed web services to offer a single solution. </p><h3>Assembling the Technology</h3><p>For any desktop or web application to be able to call a remote web service, you need:</p><ul>  <li>An active connection to the Internet.  <li>Support for XML parsing.   <li>A SOAP client. </ul><p>Class libraries offering both XML and SOAP support are available in several programming languages, including Java, C++, and Python. </p><p>When building a web-based application, such as this example portal, the main application code needs to reside on a server equipped for server-side programming. Such web servers include IBM's WebSphere, Apache's Tomcat, Microsoft's .NET Enterprise Server, and BEA's Weblogic server. Each offers some mechanism for building server-based web applications  such as Servlets, JSP, ASP, and Python.</p><p>Apache's Tomcat server can be downloaded from <a href="http://www.apache.org/">http://www.apache.org/</a>. It runs on both Windows and Linux, and supports server-side programming in the form of Java Servlets and JSPs. XML and SOAP client class libraries for Java can also be downloaded from the Apache site. After downloading the Java class libraries, install and configure them to be accessible to your Java-based web application. This often requires an addition to your Java classpath.</p><p>When the server environment is configured and you have a clear vision of what your web or desktop application will do, the next step is to locate existing web services to connect to. There are a number of solutions available to help locate existing web services, ranging from directory web sites (<a href="http://www.serviceforge.com/">http://www.serviceforge.com/</a>, <a href="http://www.x-methods.com/">http://www.x-methods.com/</a>, and <a href="http://www.salcentral.com/">http://www.salcentral.com/</a>, for instance) to the Universal Dynamic Discovery Integration (UDDI) registry. </p><p>Each web-service directory should provide a description of the web service, its Endpoint URL, Methods Namespace URI, and Parameter information (normally in WSDL format). The Endpoint URL identifies the location of the remote service's client connection point. The Methods Namespace URI is a unique identifier that identifies the remote web service. The SOAP endpoint and namespace identifier are required to establish a remote connection. The Web Service Description Language (WSDL) is an XML document that describes the web service's input parameters and return type.</p><p>By browsing the web-service directory sites, you can select which existing web services to connect to in order to bring the sample portal to life. Keep notes on which services to call, their endpoints, namespaces, and parameters. These details will be needed to layout the portal.</p><h3>The Portal Layout </h3><p>Although distributed web services have far more potential use than simple portal development, implementing this portal with web services illustrates the variety of uses that web services can offer. For many Internet users, a commercial web portal acts as the first point of contact to the Internet. For others, it's more of an Internet dashboard with all relevant information in one place, with links to surf in different directions.</p><p>The portal I present here offers a starting point for surfing the Internet with a single interface that provides access to a search engine, news headlines, weather updates, traffic information, and stock quotes. This portal is implemented as a Java Server Page (JSP) and uses a SOAP client to connect to remote web services. By implementing this portal as a JSP, you can start with a simple HTML page, add Java statements, and let the server compile the JSP into a Java Servlet class that is optimized to process HTTP requests.</p><p>Commercial portals would normally be designed to let the portal users personalize the portal. Cascading Style Sheets (CSS) would be one technology that enables portal users to configure the general look-and-feel of the portal, including colors and fonts. These preferences could be stored in a configuration file and loaded on demand. Additionally, portal users would be able to select which content they want to see and in what order they want to see it in. For the sake of simplicity, the portal will not be customizable.</p><p>Begin the portal development with the basic page layout using an HTML editor, such as Microsoft's FrontPage. You know what content you want to display on the portal, so you can layout the HTML with special notes like <i>$$HEADLINES$$</i> or <i>$$STOCKQUOTES$$.</i> Some web services require user input. You can add HTML form fields to capture that input from portal users. You should end up with a simple HTML page that looks like <A NAME="rl1"><A HREF="#l1">Listing One</A>. Save this page as "index.html" to be the first page served by the web server.</p><p>Once you have the static HTML template for the portal, you can turn it into a Java Server Page to enable the dynamic content. Take index.html and convert it into a JSP by renaming "index.html" to "index.jsp". Open the JSP with a text editor and add the JSP declarations like <A NAME="re1"><A HREF="0201be1.htm">Example 1</A>(a) at the top of the page.</p><p>When the JSP is requested by a web browser, the server first compiles this page into a Java Servlet class. As described by the declaration, this Servlet will be threadsafe and import the SOAP-related Java classes. Next, add a global variable declaration to the JSP and declare the SOAP-related objects used to interact with the remote web services; see <A NAME="re1"><A HREF="0201be1.htm">Example 1</A>(b).</p><p>As mentioned, to connect to a remote web service, you only need to know about its endpoint and namespace. You are not concerned about the implementation details, such as which programming language or host server is used The remaining objects abstract us from the details of building a request XML document filled with parameter and method details. The resulting XML document will eventually be delivered to the remote server for processing. The last two objects abstract the response XML document that is eventually returned to the web application from the remote web service.</p><p>Once you have the basic template for the portal's Java Server Page, the next step is to connect the remote web services. </p><h3>Connecting Web Services</h3><p>When performing the layout step of creating the portal, you leave placeholders to mark where the dynamic content appears. Within the Java Server Page, those placeholders will be replaced with Java code that calls a remote service and retrieves dynamic content for display. Edit the JSP and replace the <i>$$HEADLINES$$</i> placeholder with Java code that connects to the Headline News web service; see <A NAME="re2"><A HREF="0201be2.htm">Example 2</A>(a). This designates which remote server and web service to connect to. Since each web service may contain multiple methods, specify which method the portal should invoke. This aspect of the XML request is abstracted by the <i>Call </i>class and implemented like <A NAME="re2"><A HREF="0201be2.htm">Example 2</A>(b). </p><p>For those web services requiring additional parameters, the portal creates a <i>Vector</i> of <i>Parameter</i> objects. The entire <i>Vector</i> is passed to the <i>Call</i> object as supplementary information. Each <i>Parameter</i> object contains information such as name, data type, and value; see <A NAME="re3"><A HREF="0201be3.htm">Example 3</A>.</p><p>Once the Java Server Page has been properly declared, the SOAP client imported, and the <i>Call</i> object and any necessary parameters set, you can invoke a method from the remote web service. Begin with a <i>try/catch</i> block to trap any thrown exceptions. Within the <i>try/catch</i> block, call the <i>invoke()</i> method and assign the results to a <i>Response</i> object. The <i>Response</i> object tells you if there was a problem invoking the method on the remote web service. If an error was detected, you can read the <i>FaultCode</i> to determine what went wrong. If no errors occurred, you can instantiate another <i>Parameter</i> object to contain the result value for additional processing within the portal. The code that performs this processing might look like <A NAME="re4"><A HREF="0201be4.htm">Example 4</A>.</p><p>Working with the SOAP client classes makes it straightforward to interact with remote web services. These client classes take the object settings and turn them into well-formed XML documents. This XML document is delivered to the remote web service where it is processed by the web service. In the case implemented here, that requesting XML document appears in <A NAME="rl2"><A HREF="#l2">Listing Two</A>.</p><p>Now that the portal is ready to connect to the News web service, it is fairly easy to implement the rest of the web-service invocations. Review the web service's connection and parameter information again, fill in the necessary information, and call their <i>invoke</i> methods. Repeat this step for each web service that the portal connects to.</p><p>When all of the portal's placeholders are replaced with JSP code, it should look something like Listing Three (available electronically). Move the index.jsp file to an accessible directory on the web server. The web server needs to be capable of processing Java Server Pages and must be able to access the XML and SOAP Java classes. Now you should be able to point your web browser to the index.jsp page on the web server. After a few seconds to compile the JSP into the <i>Servlet</i> class, you should be able to see the portal and all of the dynamic content pulled from remote web services. </p><p>To make this a more well-rounded portal, add customization features to let portal users define the look and feel. Additionally, the portal should support browser cookies to remember the portal user's preferences, such as favorite stocks, local zip code, and preferred headlines.</p><h3>Conclusion</h3><p>Web services offer great potential to the world of distributed computing. Connecting to web services can be done quickly and painlessly with the right tools. However, web services are still in their infancy, with a cloud of issues hovering above them.</p><p>Although many web services are public and available for all to use, the most useful web services will be business related and need some method to restrict their access to only authorized users. Currently, there is no definition of how this security will be implemented, to what extent, and how other services will dynamically support these layers of security.</p><p>Another issue involves how two-phased commit transactions will be handled. If one service requires a great deal of time to complete a transaction, the other depending services cannot sit idle waiting for a response. Some type of roll-back mechanism needs to be available where the task performed by a web service can be later undone if necessary.</p><p>Also, there needs to be a universal approach for web services to announce themselves to potential consumers. There also needs to be an approach to inform existing consumers when the service changes or moves, once published. WSDL and UDDI are two technologies, also in an infancy stage, that address this.</p><p>Finally, certain web services will be more reliable than others. There needs to be a consistent measurement of reliability that helps web-service consumers determine which services to purchase. There also needs to be a way to react to the case in which a web service shuts down. Web-service consumers need to decide if they should connect to an alternative service or wait for their subscribed service to return.</p><p>With an increasing number of supported platforms, languages, and tools, web services are bound to become a standard method for deploying domain-specific functionality over the Internet. Web services benefit service developers with greater customer reach and benefit service consumers with faster time to market with imported features. </p><p><b>DDJ</b></p><H4><A NAME="l1">Listing One</H4><pre>&lt;html&gt;&lt;head&gt;&lt;title&gt;Web Services Portal&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action="index.jsp"&gt;&lt;div align="left"&gt;&lt;table border="0" cellpadding="0" cellspacing="0" width="800"&gt;&lt;tr&gt;&lt;h2&gt;JSP / Web Services Portal&lt;/h2&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;div align="left"&gt;&lt;table border="0" cellpadding="0" cellspacing="0" width="800"&gt;&lt;tr&gt;&lt;td width="200" valign="top"&gt;&lt;div align="left"&gt;&lt;table border="1" cellpadding="0"cellspacing="0" width="100%"&gt;&lt;tr&gt;&lt;td width="100%"&gt;STOCKS&lt;div align="left"&gt;&lt;table border="0" cellpadding="0"cellspacing="0" width="100%"&gt;&lt;tr&gt;&lt;td width="50%" height="21"&gt;Apple&lt;/td&gt;&lt;td width="50%" height="21"&gt;$$APPLE$$&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width="50%" height="21"&gt;AOL&lt;/td&gt;&lt;td width="50%" height="21"&gt;$$AOL$$&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width="50%" height="19"&gt;Cisco&lt;/td&gt;&lt;td width="50%" height="19"&gt;$$CISCO$$&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width="50%" height="21"&gt;Citigroup&lt;/td&gt;&lt;td width="50%" height="21"&gt;$$CITIGROUP$$&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width="50%" height="21"&gt;Oracle&lt;/td&gt;&lt;td width="50%" height="21"&gt;$$ORACLE$$&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p align="center"&gt;Symbol &lt;input type="text" name="T3" size="6"&gt;&lt;input type="submit" value="Get Quote" name="B2"&gt;&lt;/p&gt;&lt;p align="center"&gt;$$USER_STOCK_SYMBOL$$&lt;/p&gt;&lt;p align="center"&gt;&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width="100%"&gt;&lt;p align="center"&gt;$$CURRENT_TEMPERATURE$$&lt;/p&gt;&lt;p align="center"&gt;ZIP&lt;input type="text" name="T2" size="5"&gt;&lt;input type="submit"value="Get Temperature" name="B3"&gt;&lt;/p&gt;&lt;p align="center"&gt;&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width="100%"&gt;$$HIGHWAY_TRAFFIC$$&lt;p align="center"&gt;HWY NUMBER&lt;input type="text" name="T4" size="5"&gt;&lt;input type="submit"value="Get Traffic" name="B4"&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/td&gt;&lt;td width="600" valign="top"&gt;&lt;div align="left"&gt;&lt;table border="1" cellpadding="0"cellspacing="0" width="100%"&gt;&lt;tr&gt;&lt;td width="100%"&gt;&lt;p align="center"&gt;&amp;nbsp;&lt;/p&gt;&lt;p align="center"&gt;Key Words &lt;input type="text" name="T1"size="25"&gt;&lt;input type="submit" value="Search" name="B1"&gt;&lt;br&gt;&lt;input type="radio" value="V1" checkedname="R1"&gt;Google&amp;nbsp;&amp;nbsp;&lt;input type="radio" name="R1"value="V2"&gt;Lycos&amp;nbsp;&amp;nbsp;&lt;input type="radio" name="R1" value="V3"&gt;Alta Vista&lt;/p&gt;&lt;p&gt;$$SEARCH_ENGINE_RESULTS$$&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width="100%"&gt;&lt;p&gt;$$NEWS_HEADLINES$$&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</pre><P><A HREF="#rl1">Back to Article</A></P><H4><A NAME="l2">Listing Two</H4><pre>&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=("http://services.xmethods.net:80/soap"&gt;&lt;SOAP-ENV:Body&gt;&lt;ns1:getQuote xmlns:ns1="urn:xmethods-delayed-quotes"&gt;&lt;symbol xsi:type="xsd:string"&gt;ORCL&lt;/symbol&gt;&lt;/ns1:getQuote&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</pre><P><A HREF="#rl2">Back to Article</A></P></body></html>