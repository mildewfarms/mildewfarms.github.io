<html>
<head>
<title>Apr02: Implementing C++ Servlet Containers</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Implementing C++ Servlet Containers</h1>
<p><i>Dr. Dobb's Journal</i> April 2002</p>
<h2>Harnessing the power of the Java servlet API</h2>

<h3>By John Hinke</h3>

<I>
John is a software architect for Rogue Wave Software. He can be contacted at <a href="mailto:hinke@roguewave.com">hinke@roguewave.com</a>.</I>

<hr>

<p>Creating applications for the Internet with C++ can be difficult, mostly due to the lack of pure C++ technologies that can be used. Consequently, most C++ developers are required to use another language for interfacing their C++ code with the Internet. They might use a Java servlet combined with Java Native Interface (JNI) for integrating their C++ code, or they may write web server adapters such as an Apache module or an ISAPI filter.</p>
<p>What if the full power of the Java servlet API could be harnessed in C++ to create a pure C++ web application by using the same techniques used when creating Java web applications? C++ developers would then be able to create C++ web applications without needing to use multiple languages, or using a slower technology such as Java or CGI.</p>
<DDJADVERTISEMENT INLINE>

<p>In this article, I examine alternatives to C++ and some of the necessary details for creating a 100 percent pure C++ servlet container. Working in C++ is much more viable than the other alternatives because it is faster, more efficient, native to the application, and easier for the developer to learn and implement.</p>



<h3>C++ Alternatives</h3>


<p>Today, C++ programmers have limited options for bringing their applications to the Web: Java servlets combined with JNI, CGI, or a proprietary web server's API. </p>


<p>A pure C++ servlet container provides a highly efficient, scalable, robust, and very portable servlet API. By creating a C++ servlet container, you have the necessary technology to quickly and easily create 100 percent C++ web applications.</p>


<p><b>JNI.</b> One approach is to use Java servlets combined with JNI for access to legacy C/C++ code. The downside to this approach is that it requires using two languages and a good understanding of the complicated JNI interface. Additionally, there is an associated performance cost. While there are techniques for reducing the complexity of the JNI code, the performance and multilanguage issues are still prevalent. As you can see in <A NAME="rf1"><A HREF="0204ff1.htm">Figure 1</A>, the pure C++ approach reduces many of these performance problems.</p>


<p><A NAME="rl1"><A HREF="#l1">Listing One</A> is a HelloWorld Java servlet that calls to a C++ method that executes the Hello World request. While that is a simple example, the JNI code is quite complex. <A NAME="rl2"><A HREF="#l2">Listing Two</A> is the generated JNI layer.</p>

<p>Providing an implementation for this simple method is rather difficult and error prone. Also, JNI provides access to C methods, not C++ classes and methods. Therefore, you must manage accessing an instance of the C++ object and call the appropriate method.</p>

<p><b>CGI.</b> While coding a C++ application to be used with CGI can be similar to coding a Java servlet, the C++ servlet gives much greater performance. Every request for a CGI application spawns a new process. This is not only resource intensive but prevents any of the CGI programs from efficiently saving state. One single browser request can spawn several different CGI processes; multiply this by thousands of simultaneous requests and the performance of the web server is severely affected.</p>


<p>The C++ servlet container holds a servlet in memory and all requests go through that one particular servlet. The only process created is for the servlet container itself. By actively holding a servlet in memory, the C++ servlet container also allows the code to maintain state (variable values, paths of execution, and so on) while it executes. This allows for better usage of resources on a web server. With CGI, the state is reinitialized each time a program executes. </p>

<p><b>Web Server Adapters.</b> Another option for C++ programmers is to use a proprietary API such as Netscape NSAPI or Microsoft ISAPI. While these allow a more managed approach to integrating an application to the Web than CGI, they lock developers into a single vendor and platform. In addition, these APIs often only allow access to C code and not C++, which can be very limiting.</p>




<h3>C++ Servlets: A Better Option</h3>


<p>A pure C++ servlet container provides a highly efficient, scalable, robust, and very portable servlet API. A C++ servlet container solves the C++ developer's dilemma, providing a better way of integrating C++ with the Web than CGI. In addition, because they are compiled, C++ servlets provide better performance than Java, integrating easily with current C++ implementations with minimal effort and training at a significant cost savings. By following the Java servlet specification, you can quickly and easily learn this new technology. </p>




<h3>Creating a C++ API: The Design </h3>


<p>First, some goals need to be established for creating a C++ servlet container to help guide the design and implementation.</p>


<p></p>

<ul>
  <li>Consistent API. The C++ API should be nearly identical to Java, without any surprises. If parts of the Java API do not make sense in C++, they should either be removed or replaced with an alternate API. Users should be able to read any Java servlet book and be able to apply that information to a C++ version.
  <li>Performance. The C++ version must be faster than Java. As this is an alternative to Java servlets, it should not introduce any unnecessary overhead. 

  <li>Use C++ features where possible. Examples might include templates, the Standard Library, and even destructors for cleaning up memory. C++ features should only be used if they aid in the usability of the API.

</ul>


<p>Second, port some sample Java servlets to C++. This is an exercise designed to help understand what the C++ API should look like. While the C++ API should be as close to the Java API as possible, it also should take advantage of C++-specific features.</p>

<p>While most of the Java API is fairly straightforward, there are a few places in the API that need special attention. (Issues such as connecting to the servlet container are beyond the scope of this article.) </p>



<h3>A Simple Example</h3>


<p>The first servlet I'll port is the "Hello World" servlet in <A NAME="rl3"><A HREF="#l3">Listing Three</A>. While this servlet is extremely simple, it does demonstrate some of the issues that need to be resolved.</p>


<p>Some of the questions that need to be answered are:</p>


<ul>
  <li>How to handle imports?
  <li>How to pass the request and response objects? By value? Reference?

  <li>How does the servlet write data to the response object? In Java, you can use the <i>getWriter</i> or <i>getOutputStream</i> methods. What should those methods return in C++?

</ul>


<p>There are also many issues that are related to the servlet container, but those are implementation details. However, how the servlet container loads C++ servlets from DLLs or shared libraries is discussed later.</p>

<p>The answers to these questions really depend on how the API is ported from Java to C++, but some possible answers might include: </p>


<ul>
  <li>Use <i>include</i> statements for the different imports, where each package is a separate directory. For example, &lt;servlet/ Servlet.h&gt; and &lt;servlet/http/HttpServlet.h&gt;.
  <li>The request and response objects are passed by reference because they may need to be changed.

  <li>Provide a class that extends <i>std::ostream</i> (actually <i>basic_ostream</i>) and also provides the <i>print</i> and <i>println</i> methods from the Java <i>PrintWriter</i> class.

</ul>


<p>With those answers in mind, a C++ servlet might look like the simple C++ servlet in <A NAME="rl4"><A HREF="#l4">Listing Four</A>, which is close to the original Java servlet, making it possible to quickly use the C++ API, especially if the Java API is already understood. As a C++ developer, this API provides a powerful mechanism for creating pure C++ web applications. There is no complicated JNI and no web server proprietary API to learn. C++ developers simply create a servlet and deploy that servlet into a C++ servlet container.</p>



<h3>Memory Management</h3>


<p>Memory management must be carefully addressed when designing the C++ servlet API. A good C++ servlet container implementation hides as many of the memory-management issues as possible. This might involve returning smart pointers, or using the handle/body design pattern to encapsulate the memory-management issues. For example, in the Java servlet API there are several methods that return complex objects, such as the <i>getServletConfig</i> method in the servlet class that returns the internal <i>ServletConfig</i> object; see <A NAME="rl5"><A HREF="#l5">Listing Five</A>. By following the original design goals, the C++ API should be as similar as possible to the Java API. That means the C++ API should look like <A NAME="rl6"><A HREF="#l6">Listing Six</A>.</p>


<p>Each nontrivial class that is returned in the servlet API should use the handle/body pattern (or something similar) to deal with memory-management issues. However, not all classes in the servlet API need to use this pattern. The servlet class, for example, is never returned from a method and is only used internally.</p>

<p>There are a few methods that are rather difficult to implement without exposing pointers. For example, the <i>ServletContext: getResourceAsStream</i> method returns an <i>InputStream</i> object in Java. In C++, it would be nice to be able to return an <i>istream</i>; however, an <i>istream</i> cannot be returned by value. This means the API would look like: </p>

<blockquote><p>
std::istream* getResourceAsStream(...) const;</p>

</blockquote>

<p>This would require users to delete the returned object or risk a memory leak. In this case, the method is removed and a similar method added. The <i>new</i> method returned the entire resource as a string:</p>

<blockquote><p>
std::string getResourceData(...) const;</p>

</blockquote>

<p>The downside to this method is that the entire resource would be loaded into memory, but if users wanted to access a resource as a stream, they could open the file themselves and access the data.</p>



<h3>Another Example</h3>


<p>Using this information, you can quickly port another servlet to C++. The servlet in <A NAME="rl7"><A HREF="#l7">Listing Seven</A> is a simple servlet that accesses some session information and displays the session attributes. This example demonstrates the use of sessions, access to URL parameters, and adding attributes to a session. I won't discuss here the <i>Enumeration</i> class, but assume it has an interface similar to Java yet takes advantage of C++ templates. The <i>HttpSession</i> object follows the memory-management issues previously discussed, so it is safe to pass around by value. While this is a simple example, it does demonstrate some powerful capabilities of the servlet API &#151; sessions. By using sessions, web applications can maintain state across multiple client invocations.</p>


<p>In Java, session attributes are accessed with the API in <A NAME="rl8"><A HREF="#l8">Listing Eight</A>. In C++ there is no easy-to-use concept of an <i>Object</i>, so the API was changed to store strings instead, as <A NAME="rl9"><A HREF="#l9">Listing Nine</A> shows. While this has some limitations, it is still easy to use and similar to the Java API. Methods that did not change the object were declared as <i>const</i>. This mechanism for handling attributes can also be applied to the other classes that store attributes such as the <i>ServletRequest</i> and <i>ServletContext</i> classes.</p>



<h3>Deploying C++ Servlets</h3>


<p>Deploying C++ servlets should be as simple as possible. <A NAME="rl10"><A HREF="#l10">Listing Ten</A> shows how a simple Java deployment descriptor can be ported to C++. This deployment descriptor is used to describe the deployment for the previous Hello World servlet. The only difficulty is knowing how to create the servlet. In Java, the servlet-class element specifies the fully qualified class name, and the servlet container instantiates an instance of the named servlet. With C++, this is not as easy because it is not possible to load C++ classes with just a class name. However, C++ can load DLLs or shared libraries and locate named methods within the library; that information can be used to instantiate the servlet. A method will need to be created to return an instance of our servlet. For this container, the method looks like <A NAME="rl11"><A HREF="#l11">Listing Eleven</A>. The method name can be any name as long as it returns an instance of the servlet. We will change the servlet-class element to include the DLL or shared library name and the method name used to create the servlet instance. The DLL or shared library name should also be portable across multiple operating systems, so you remove the library extension (.dll on Windows, .so or .sl on UNIX) and any library prefix (such as lib on UNIX). The servlet-class element then looks like <A NAME="rl12"><A HREF="#l12">Listing Twelve</A>.</p>


<p>The servlet container loads the DLL or shared library by adding any operating-system-specific information. It then attempts to invoke the named method to create an instance of the servlet. Once the servlet container has an instance of the servlet, it can process requests normally.</p>

<p>This technique can also be used for other cases in the deployment descriptor where Java class names are used, such as the event listener and filter classes. Processing the rest of the deployment descriptor is fairly straightforward and doesn't require any special changes.</p>



<h3>Conclusion</h3>


<p>By porting the Java servlet API to C++, you finally have the power and flexibility of the servlet specification that Java developers have enjoyed for so long. Creating pure C++ web applications then becomes a matter of writing a C++ servlet and deploying that servlet into a pure C++ servlet container. You no longer need to use a multilanguage approach for their web applications. By combining the performance benefits of C++ and the power of the servlet API, C++ developers can easily create powerful, robust web applications.</p>


<p>For more information on C++ servlet containers and to download an evaluation version, see <a href="http://www.roguewave.com/developer/tac/bobcat/">http://www.roguewave.com/developer/tac/bobcat/</a>.</p>



<p><b>DDJ</b></p>

<H4><A NAME="l1">Listing One</H4>


<pre>class HelloWorld extends HttpServlet {
  public void doGet(HttpServletRequest req, HttpServletResponse res) {
    response.setContentType("text/plain");
    try {
      PrintWriter out = response.getWriter();
      out.println(helloWorld("Hello C++"));
    } catch(IOException e) { /* ignore for now. */ }
  }
  private native String helloWorld(String in);
}
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two</H4>


<pre>extern "C" {
  JNIEXPORT jstring JNICALL Java_HelloWorld_helloWorld
    (JNIEnv *, jobject, jstring);
}
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3">Listing Three</H4>


<pre>import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
public class HelloWorld extends HttpServlet {
  public void doGet(HttpServletRequest request, HttpServletResponse response)
    throws IOException, ServletException
  {
    response.setContentType("text/html");
    PrintWriter out = response.getWriter();
    out.println("&lt;html&gt;&lt;head&gt;");
    out.println("&lt;title&gt;Hello World&lt;/title&gt;");
    out.println("&lt;/head&gt;");
    out.println("&lt;body bgcolor=\"white\"&gt;");
    out.println("&lt;body&gt;");
    out.println("&lt;h1&gt;Hello World!&lt;/h1&gt;");
    out.println("&lt;/body&gt;&lt;/html&gt;");
  }
}
</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>
<H4><A NAME="l4">Listing Four</H4>


<pre>// include the necessary classes
#include &lt;servlet/ServletOutputStream.h&gt;
#include &lt;servlet/ServletException.h&gt;
#include &lt;servlet/http/HttpServlet.h&gt;
#include &lt;servlet/http/HttpServletRequest.h&gt;
#include &lt;servlet/http/HttpServletResponse.h&gt;
class HelloWorld : public HttpServlet {
  public:
    virtual void doGet(HttpServletRequest&amp; request, 
                                    HttpServletResponse&amp; response)
    {
      response.setContentType("text/html");
      ServletOutputStream&amp; out = response.getWriter();
      out.println("&lt;html&gt;&lt;head&gt;");
      out.println("&lt;title&gt;Hello World&lt;/title&gt;");
        // we can mix both println and &lt;&lt; method calls!
      out &lt;&lt; "&lt;/head&gt;" &lt;&lt; endl;
      out &lt;&lt; "&lt;body bgcolor=\"white\"&gt;" &lt;&lt; endl;
      out &lt;&lt; "&lt;body&gt;" &lt;&lt; endl;
      out &lt;&lt; "&lt;h1&gt;Hello World!&lt;/h1&gt;" &lt;&lt; endl;
      out &lt;&lt; "&lt;/body&gt;&lt;/html&gt;" &lt;&lt; endl;
    }
};
</pre>
<P>
<A HREF="#rl4">Back to Article</A>
</P>
<H4><A NAME="l5">Listing Five</H4>


<pre>interface Servlet {
  public ServletConfig getServletConfig();
}
</pre>
<P>
<A HREF="#rl5">Back to Article</A>
</P>
<H4><A NAME="l6">Listing Six</H4>


<pre>class Servlet {
  public:
    ServletConfig getServletConfig() const;
};
</pre>
<P>
<A HREF="#rl6">Back to Article</A>
</P>
<H4><A NAME="l7">Listing Seven</H4>


<pre>#include &lt;servlet/ServletOutputStream.h&gt;
#include &lt;servlet/http/HttpServlet.h&gt;
#include &lt;servlet/http/HttpServletRequest.h&gt;
#include &lt;servlet/http/HttpServletResponse.h&gt;
#include &lt;servlet/http/HttpSession.h&gt;
class SessionExample : public HttpServlet {
  public:
    virtual void doGet(HttpServletRequest&amp; request,
                       HttpServletResponse&amp; response)
    {
      response.setContentType("text/html");
      ServletOutputStream&amp; out = response.getOutputStream();
      out.println("&lt;html&gt;&lt;body bgcolor=\"white\"&gt;&lt;head&gt;");
      out.println("&lt;title&gt;SessionExample&lt;/title&gt;");
      out.println("&lt;/head&gt;&lt;body&gt;");
        // get the session from the request
      HttpSession session = request.getSession();
        // should this session be invalidated?
      std::string invalid = request.getParameter("INVALIDATE");
      if(invalid != ""){
        session.invalidate();
      } else {
          // set any attributes that are specified
        std::string name = request.getParameter("dataname");
        std::string value = request.getParameter("datavalue");
        if(name != "") {
          session.setAttribute(name, value);
        }
          // print out all attributes in this session.
        out.println("&lt;P&gt;");
        out.println("Session Data&lt;br&gt;");
        Enumeration&lt;std::string&gt; names =
          session.getAttributeNames();
        while(names.hasMoreElements()) {
          std::string name = names.nextElement(); 
          std::string value = session.getAttribute(name);
          out.println(name + " = " + value + "&lt;br&gt;");
        }
      }
      out.println("&lt;/body&gt;");
      out.println("&lt;/html&gt;");
    }
};
</pre>
<P>
<A HREF="#rl7">Back to Article</A>
</P>
<H4><A NAME="l8">Listing Eight</H4>


<pre>interface HttpSession {
  public Object getAttribute(String name);
  public Enumeration getAttributeNames();
  public void setAttribute(String name, Object value);
}
</pre>
<P>
<A HREF="#rl8">Back to Article</A>
</P>
<H4><A NAME="l9">Listing Nine</H4>


<pre>class HttpSession {
  public:
    std::string getAttribute(const std::string&amp; name) const;
    Enumeration&lt;std::string&gt; getAttributeNames() const;
    void setAttribute(const std::string&amp; name, const std::string&amp; value);
};
</pre>
<P>
<A HREF="#rl9">Back to Article</A>
</P>
<H4><A NAME="l10">Listing Ten</H4>


<pre>&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;web-app&gt;
  &lt;servlet&gt;
    &lt;servlet-name&gt;HelloWorld&lt;/servlet-name&gt;
    &lt;servlet-class&gt;com.mycompany.HelloWorld&lt;/servlet-class&gt;
  &lt;/servlet&gt;
  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;HelloWorld&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/HelloWorld/*&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
&lt;/web-app&gt;
</pre>
<P>
<A HREF="#rl10">Back to Article</A>
</P>
<H4><A NAME="l11">Listing Eleven</H4>


<pre>extern "C" {
  Servlet *createHelloWorld() {
    return new HelloWorld;
  }
}
</pre>
<P>
<A HREF="#rl11">Back to Article</A>
</P>
<H4><A NAME="l12">Listing Twelve</H4>


<pre>&lt;servlet-class&gt;mydll.createHelloWorld&lt;/servlet-class&gt;

</pre>
<P>
<A HREF="#rl12">Back to Article</A>
</P>


</body>
</html>
