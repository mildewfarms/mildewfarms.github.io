<html>
<head>
<title>Apr02: Globalized Web Applications & ASP.NET</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Globalized Web Applications &amp; ASP.NET</h1>
<p><i>Dr. Dobb's Journal</i> April 2002</p>
<h2>There's more  involved than just  translating strings</h2>

<h3>By Max Poliashenko  and Chip Andrews</h3>

<I>
Max is a software architect and can be contacted at poliashenkom@claruscorp.com. Chip is a software security architect and can be reached at chipandrews@usa.net. Both authors are members of the research team at Clarus Corp. </I>

<hr>

<p>Localization is the process of adapting an application to the conventions of a particular locale. Globalization, on the other hand, is the process of enabling localization in the single code base of an application. However, globalization generally means more than just enabling string translation &#151; true localization includes displaying numbers, currencies, dates, calendars, direction of the text layout, images, and icons in a format specific to a given locale. </p>
<p>Unfortunately, globalization often comes as an afterthought, requiring extra time and effort to localize to a particular end-user's language and conventions. Fortunately, .NET provides an extensible framework to achieve all levels of globalization from the outset. In the .NET world, a locale is called "culture" and is the primary means for determining how information is presented to end users. Once a user's culture is determined, .NET can properly render the user interface via features such as:</p>
<DDJADVERTISEMENT INLINE>


<ul>
  <li>.NET assemblies, which contain culture information in their metadata. They can also use satellite assemblies including resources for different cultures.
  <li><i>System.Globalization</i> namespace, which contains classes that encapsulate local formatting settings, local calendars, and other localization aspects. 

  <li>.NET threads. The <i>CurrentCulture</i> property affects how date-time, number, and currency data are formatted to strings, while <i>CurrentUICulture</i> is used by the Windows UI to determine proper localized resources.

  <li>Unicode. ASP.NET internally uses Unicode, although it is possible to set a different encoding, which is used for HTTP request and response. Default encoding may be specified both at a web site level (in web.config file) and page level. 

  <li>Default culture, which can be set for a web site declaratively in web.config file, or at the page level via special tags.

</ul>

<h3>The ASP Way</h3>


<p>Several globalization techniques exist with ASP, including server-side script injections into HTML as well as building HTML dynamically with the <i>Response</i> object; see <A NAME="rl1"></a><A HREF="#l1">Listings One</A>(a) and (b), respectively. However, such code is difficult to debug, maintain, and extend (imagine adding or omitting a "&gt;" somewhere). </p>


<p>Another ASP feature is that a server-side script is parsed and interpreted every time. Using in-line server-side code injections causes the parser to constantly switch between script and HTML contexts, thereby creating performance problems. Writing custom controls to alter behavior or enhance standard HTML controls is an ordeal and usually involves ActiveX or Java. Additionally, proper formatting of numbers, dates, times, and currencies requires switching locales on the server and employing custom metadata to keep track of additional information (the number of decimal places for a currency and position of the currency sign, for instance). All of these make the implementations either client heavy or nonreusable. </p>



<h3>The ASP.NET Way</h3>


<p>The ASP.NET framework treats web pages and their individual elements as classes. This allows for utilization of full object-oriented benefits including implementation inheritance, polymorphism, and better encapsulation. The ability to use object-oriented techniques is a real plus when building robust and transparent globalization frameworks.</p>


<p>Using the "code-behind" features and treating a web page as a class lets you automatically derive its behavior from other classes. This, along with a flexible DOM-like model (which exposes web page elements as objects on the server side), allows for complete separation of UI and content. If your web page requires someone other than a programmer to work on the interface, we recommend writing web pages in such a way that the page itself contains nothing but a static HTML-like layout of server-side elements and controls. The code to load page content, authenticate, authorize, control population, and handle events reside in a code-behind class. In this way, your web page can be passed to web designers who can move controls around the page and extend its presentation. The good news is that the code-behind doesn't even have to be recompiled as long as the designer has not deleted any controls or changed the IDs.</p>



<h3>Server Controls</h3>


<p>In the ASP.NET world, almost every HTML element and control can be represented by an ASP.NET server control. Some of the controls are simple wrappers around HTML elements (HTML server controls), some are sophisticated built-in controls (web form controls), and others are custom built for a particular application (user and custom controls). What is important is that all are classes and, therefore, can derive from other classes and vice versa. These controls know how to persist state between HTTP posts and how to render proper HTML and client-side script at response time. Server controls can also generate certain server-side events.</p>


<p>Custom controls are classes that derive from the <i>System.Web.UI.WebControls</i>.<i>WebControl</i> class or its descendants. The <i>WebControl</i> class defines a virtual function <i>Render(),</i> which is called by the <i>ASP.NETframework</i> when the control renders the HTML output. Custom controls can also be derived from other server controls to specialize their behavior. In this case, they may or may not override <i>Render()</i>, depending on the character of their specialization. </p>

<p>User controls (formerly known as "pagelets") are composite UI elements and usually include several web form or custom controls. They are equivalent to embedded web pages and are stored in their own .ascx files. Because they are completely separate files, their nested controls live in separate namespaces; there is never a name collision between controls in the host and in user control pages. User controls may also have code-behind classes, and server-side events (like <i>Page_Load</i>) fire for them independently from the host page events. Their output can be cached separately. </p>

<p>Because of these features, user controls are usually developed as standalone pages. You can then convert the standalone pages into user controls to encapsulate a chunk of business functionality that can be easily modularized and reused within a web application. They too can be used for globalization purposes, particularly when several controls must be localized as an orchestrated group &#151; as in the case of complex calendars.</p>



<h3>ASP.NET Globalization Techniques</h3>


<p>Taking time upfront to plan use of ASP.NET's features can save you a lot of pain later. Here, we show how to build an application in such a way that, once completed, it could be globalized with relative ease and little additional effort.</p>


<p>Inheritance can make the globalization process more transparent. Again, all elements on a web page may be represented by server-side controls, which are .NET classes. As classes, their behavior can be passed down through inheritance. Thus, you can derive your own classes from <i>TextBox</i>, <i>Label</i>, <i>DropDownList</i>, and others in the <i>System.Web.UI.Control</i> namespace. These new classes can encapsulate translating corresponding UI elements and can use virtual methods that the creators of ASP.NET thoughtfully defined for the <i>WebControl</i> class, enabling the derived classes to intercept and override rendering HTML code. <A NAME="rl2"></a><A HREF="#l2">Listing Two</A>(a) is an example of a <i>GlobalizedLabel</i> class. <i>System.Web.UI.WebControl.Label</i> is a web form control class that displays its <i>Text </i>property as read-only text. <i>Render()</i> is one of its virtual functions that can be overridden by the derived classes. It takes <i>HtmlTextWriter</i> as a parameter and writes into it whatever HTML and client-side script this control wants to render. Our implementation of <i>Render()</i> takes its <i>Text</i> property and translates it using the <i>Translator.GetLocalizedString()</i> method.</p>

<p>The <i>GetLocalizedString()</i> method can only work if the string passed to it can be pretranslated (unless you employ a real-time translator program). For this reason and because word order can be different in other languages, we strongly discourage string concatenations in globalized expressions as in <A NAME="rl2"></a><A HREF="#l2">Listing Two</A>(b); instead, use a <i>Format </i>function as in <A NAME="rl2"></a><A HREF="#l2">Listing Two</A>(c).</p>

<p>It should be noted that sometimes translation of a simple string may also depend on its context on a web page. In these cases, instead of keying off of the string alone, you could use a complex key to identify the text to be localized. For example, you could add an additional parameter to the <i>GetLocalizedString()</i> function, where you would pass the page path name and control ID (which you can obtain inside a globalized web control via <i>this.Context.Request.Path</i> and <i>this.ID</i>).</p>

<p>The formatting string now can be properly translated. With this, if we register its <i>TagPrefix</i> in our Test.aspx page, we can simply use <i>GlobalizedLabel</i> instead of an intrinsic label. Essentially, we can replace <i>&lt;LABEL&gt;</i> or <i>&lt;asp:Label&gt;</i> with <i>&lt;glb:GlobalizedLabel&gt;</i>; otherwise leaving the rest of the .aspx page and its code behind unchanged. It doesn't matter if the <i>Text</i> property is implicitly set in HTML script, as in <A NAME="rl2"></a><A HREF="#l2">Listing Two</A>(d), or changed programmatically via <i>lblGlobal.Text = "Test Label".</i> The new label class will do a proper translation before rendering its content to the HTML writer. Because it was derived from the ASP <i>Label </i>class, it can be used in any way that a <i>Label</i> can be used, including manipulating <i>Text</i> properties and generating server-side click events. </p>

<p>Creating such globalized wrappers is sufficient to start with. You don't have to write unreadable code, the resource strings don't have to be created beforehand, and the globalization framework doesn't have to be implemented in advance.</p>

<p>Validation controls such as <i>RequiredFieldValidator</i>, <i>RegularExpressionValidator</i>, <i>CompareValidator</i>, and <i>RangeValidator</i> live, for the most part, an invisible life &#151; attached to user-input controls, quietly validating data entered. They only appear when invalid input is detected, and sometimes they do it right on the client side via DHTML without posting back to the server. They can also work in conjunction with the <i>ValidationSummary</i> control that gathers all the validation messages and displays them conveniently in one place. It does this by querying and translating the <i>ErrorMessage</i> property of each validation control that signals invalid input. The <i>ValidationSummary</i> control contains the <i>HeaderText</i> property, which is also to be translated as in <A NAME="rl3"></a><A HREF="#l3">Listing Three</A>.</p>

<p>The implementation of <i>GlobalizedValidationSummary</i> hides its base class <i>HeaderText</i> property rather than translating it in its <i>Render()</i> method. However, doing it at render time is more efficient because it ensures that each translated string is retrieved only once during the page load. </p>

<p><A NAME="rf1"></a><A HREF="0204hf1.htm">Figure 1</A> is a web form with validation control messages localized for Spanish. Notice how, in <A NAME="rl3"></a><A HREF="#l3">Listing Three</A>, <i>GlobalizedValidationSummary</i> sums up all the <i>ErrorMessage</i> properties from each of the validation controls at the top of the page. Besides that, each validation control can display its own <i>Text</i> property next to the control that it validates, which in this case is used as a tip.  </p>

<p><A NAME="rl4"></a><A HREF="#l4">Listing Four</A> presents the contents of the UserEdit.aspx file. This is its complete source; for illustrative purposes we did not use the code-behind file. Even though the content of UserEdit.aspx doesn't look globalized at all (in fact, English strings seem to be hardcoded everywhere), the globalized controls were easily rendered in Spanish. </p>

<p>The primary purpose of custom controls is to encapsulate control behavior that you find repeatedly being recreated in your business applications. There is nothing wrong in creating new control types that would be specific to your business needs that go beyond generic control functionality available in the Visual Studio Toolbox. Sometimes, a more complex situation arises when simply translating localized messages and calling the <i>base.Render()</i> function is not sufficient. Sometimes, a control must generate client-side code, which also must be localized. Consider <A NAME="rl5"></a><A HREF="#l5">Listing Five</A> where the globalized confirmation button pops up a confirmation dialog on the client side: We use the <i>Attribute.Add()</i> method to generate the so-called "expando attribute" to enable wiring the <i>OnClick</i> event to the client-side JavaScript function. It is also processed on the server side as well.</p>



<h3>Culture Determination</h3>


<p>So how do our globalized controls determine the culture of users without requesting them being passed around from the web page? One way is to use <i>HttpContext</i>. Unlike in classic ASP where request context was restricted to the server-side script on the page and could not propagate down the "stack" of COM function calls, <i>HttpContext</i> (with <i>User</i>, <i>Request</i>, <i>Response</i>, and other children objects in ASP.NET) is available to all the functions on the calling stack. We recommend using <i>HttpContext.Current.Request.Cookies</i> to store and pass around user-culture information, as well as other profile attributes such as user roles. </p>


<p>Alternatively, we could have detected locale settings from the user's browser. When the <i>GetLocalizedString()</i> method is called several levels below, it would have no difficulty finding user-culture information stored in HTTP context and using it to retrieve the appropriate translation. Other possibilities include session state (now more robust in ASP.NET), passing hidden form variables, or passing parameters in the URL.  </p>



<h3>Localizing Numbers,  Dates, and Currencies</h3>


<p>String translation is important, but it isn't the only globalization task. Take, for instance, the task of converting numbers, currencies, dates, and times. Fortunately, the Common Language Runtime (CLR) framework was built with globalization issues in mind. All of its formatting functions take culture into consideration and have overloaded versions that take culture as a parameter. </p>


<p>Based on the specific culture, .NET formatting functions (such as <i>ToString()</i>) put correct decimal and millennium delimiters for numbers, and display dates and times in the proper format (like DD/MM/YY for the United Kingdom). For long date-time formats, days of the week and months would be translated into a language of the current culture. </p>

<p>Localizing monetary amounts represent several levels of challenges. Besides the fact that they are decimal numbers and suffer from the same indecisiveness about the use of commas, periods, and spaces as ordinary decimals do, you also have to worry about currency symbols, and whether to round up for zero, two, or three decimal places. Also, there is the issue of where to place a minus sign. <A NAME="rt1"></a><A HREF="0204ht1.htm">Table 1</A> shows some representative permutations for various countries. </p>

<p>In the past, most applications dealt somehow with commas and periods, displayed three-letter currency symbols instead of currency signs, used some proprietary means to keep track of decimal places, and usually ignored positioning of minus signs. Fortunately with .NET, different representations become a breeze. <A NAME="rl6"></a><A HREF="#l6">Listing Six</A> formats currency in a Dutch format, as in <A NAME="rt1"></a><A HREF="0204ht1.htm">Table 1</A>. </p>

<p>Unless there is a possibility that you may want to use different cultures on the same page, displaying multicurrency transactions is a hassle. Every formatting call must figure out what culture is to be used, to create appropriate <i>CultureInfo</i>, and to pass it to every function call. If culture information is not passed to a formatting function as a parameter, it uses <i>Thread .CurrentCulture</i> as a default. There are many ways to set it. One way is to set culture declaratively in a web.config file as in <A NAME="rl7"></a><A HREF="#l7">Listing Seven</A>. In this case, the culture set in the web.config file would be a default for an entire web application and any nested virtual directories. <A NAME="rl8"></a><A HREF="#l8">Listing Eight</A> shows how to set the language for a single page, you can also do it via its <i>Culture</i> property, as shown in <A NAME="rl9"></a><A HREF="#l9">Listing Nine</A>. Finally, you can also set it from anywhere for a thread as in <A NAME="rl10"></a><A HREF="#l10">Listing Ten</A>.</p>

<p>A warning: When specifying a culture name, be careful with local-neutral (such as "es") and extended cultures (like "es-ES-Is"). While they are defined in .NET documentation, they are not supported by the <i>CultureInfo</i> class.</p>



<h3>Conclusion</h3>


<p>The .NET platform and ASP.NET provide many features to support development and deployment of international applications. The object-oriented architecture of ASP.NET allows for easy extension with application frameworks to make globalization aspects of programming easier and more transparent. With such frameworks, the process of globalization may be reduced to simply gathering appropriate strings and translating them into supported languages. You won't have to write unreadable code, the resource strings won't have to be created beforehand, and the globalization framework itself need not be implemented in advance. Creating globalized wrappers would be sufficient for you to start using them in your code, and the implementation of globalized classes can be deferred until the proper time after which the entire web application UI will have appeared automatically localized.</p>


<p></p>

<p><b>DDJ</b></p>
<H4><A NAME="l1"></a>Listing One  </H4>


(a)
<pre>&lt;INPUT  type=text value= &lt;%=GetString(unTranslatedString ) %&gt;&gt;
</pre>
(b)
<pre>Response.Write("&lt;SELECT&gt;")
   For Each row In myRecordset
       Reponse.Write("&lt;OPTION")
       If myRecordset!ID.value = oldSelection Then
           Response.Write(" SELECTED&gt;")
       Else
           Response.Write("&gt;")
       End If
       Response.Write(GetLocalizedString(myRecordset!MyField.value)&amp;
               "&lt;/OPTION&gt;")
   Next
   Response.Write("&lt;/SELECT&gt;")
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2"></a>Listing Two</H4>


(a) 
<pre>public class GlobalizedLabel : System.Web.UI.WebControls.Label
{
protected override void Render(HtmlTextWriter output) 
    {
        output.Write(Translator.GetLocalizedString(Text));   
    }
}
</pre>
(b)
<pre>Translator.GetLocalizedString("The amount of ")) + price.ToString() + 
   Translator.GetLocalizedString(" will be charged to your account."));   
</pre>
(c)
<pre>(new StringBuilder()).AppendFormat("The amount of {0:C} will be 
                                   charged to your account.", price);
</pre>
(d)
<pre>&lt;%@ Page language="c#" %&gt;
&lt;%@ Register TagPrefix="glb" NameSpace="GlobalControls" 
                                         Assembly="GlobalComponents"%&gt;
&lt;HTML&gt;
&lt;BODY&gt;
&lt;glb:GlobalizedLabel id=lblGlobal runat=server&gt;Test Label
&lt;/glb:GlobalizedLabel&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3"></a>Listing Three</H4>


<pre>/// &lt;summary&gt;
/// Validation messages are translated
/// &lt;/summary&gt;
public class GlobalizedRequiredFieldValidator : RequiredFieldValidator
{
   protected override void Render(HtmlTextWriter output) 
   {
    Text = Translator.GetLocalizedString(Text);
    ErrorMessage = Translator.GetLocalizedString(ErrorMessage);
    base.Render(output);
   }
}
 ... etc.
public class GlobalizedValidationSummary : ValidationSummary
{
   /// &lt;summary&gt;
   /// This header will be translated
   /// &lt;/summary&gt;
   public new string HeaderText 
   {
    get{return base.HeaderText;}
set{base.HeaderText = Translator.GetLocalizedString(value);}
   }
}
</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>
<H4><A NAME="l4"></a>Listing Four</H4>


<pre>&lt;%@ Page language="c#" %&gt;
&lt;%@ Register TagPrefix="glb" NameSpace="AspNetDemo.Components" 
                                              Assembly="Components"%&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
    &lt;meta content="Microsoft Visual Studio 7.0" name="GENERATOR"&gt;
    &lt;meta content="C#" name="CODE_LANGUAGE"&gt;
&lt;/HEAD&gt;
&lt;body bgColor="#e4e4e0"&gt;
  &lt;h3 align="center"&gt;User Information&lt;/h3&gt;
  &lt;form id="Form2" method="post" runat="server"&gt;
    &lt;glb:GlobalizedValidationSummary id="vSummary" runat="server" 
    headertext="The following validation errors occurred:" /&gt;
    &lt;hr&gt;
    &lt;table cellSpacing="0" cellPadding="0" width="100%" border="0"&gt;
      &lt;tr&gt;
        &lt;td width="30%"&gt;Name&lt;/td&gt;
        &lt;td&gt;
          &lt;asp:textbox id="txName" runat="server"&gt;&lt;/asp:textbox&gt;
          &lt;glb:GlobalizedRequiredFieldValidator id="rfValidator1" 
                                          runat="server" display="dynamic" 
          controltovalidate="txName" ErrorMessage="Name is required." 
                                                         Text="required" /&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Password&lt;/td&gt;
        &lt;td&gt;
          &lt;asp:textbox id="txPassword" TextMode="Password" 
                            runat="server"&gt;&lt;/asp:textbox&gt;
          &lt;glb:GlobalizedRequiredFieldValidator id="rfValidator2" 
                            controltovalidate="txPassword" runat="server"
          ErrorMessage="Password is required." 
                            Text="minimum 5 characters" display="dynamic" /&gt;
       &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Confirm password&lt;/td&gt;
        &lt;td&gt;
          &lt;asp:textbox id="txPasswordConf" 
                                  TextMode="Password" runat="server" /&gt;
          &lt;glb:GlobalizedCompareValidator id="cmpValidator1" 
                                  runat="server" display="Dynamic" 
          controltovalidate="txPasswordConf" 
                      ErrorMessage="Passwords don't match. Please, re-enter." 
          ControlToCompare="txPassword" operator="Equal" 
                      type="String" Text="doesn't match" /&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Email&lt;/td&gt;
        &lt;td&gt;
          &lt;asp:textbox id="txEmail" runat="server"&gt;&lt;/asp:textbox&gt;
          &lt;glb:GlobalizedRequiredFieldValidator id="rfValidator3" 
                                    runat="server" display="dynamic" 
          controltovalidate="txEmail" ErrorMessage="Email is required." 
                                     Text="required" /&gt;
          &lt;glb:GlobalizedRegularExpressionValidator id="EmailRegValidator" 
          validationexpression="\w+@\w+\.\w+" runat="server"
          ErrorMessage="Email format is invalid.
                             " controltovalidate="txEmail" display="static"&gt;
          user@domain.ext&lt;/glb:GlobalizedRegularExpressionValidator&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Age&lt;/td&gt;
        &lt;td&gt;
          &lt;asp:textbox id="txAge" runat="server"&gt;&lt;/asp:textbox&gt;
          &lt;glb:GlobalizedRangeValidator id="rngValidator1" 
                                  runat="server" controltovalidate="txAge" 
          MinimumValue="1" MaximumValue="199" Type="Integer" 
                                  ErrorMessage="Age is invalid." 
          display="static" Text="0 &lt; age &lt; 200" /&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
      &lt;tr&gt;
        &lt;td align="middle" colSpan="2"&gt;
          &lt;glb:GlobalizedLinkButton id="btUpdate" 
                                  runat="server" Text="Update" /&gt;
          &amp;nbsp;
          &lt;glb:GlobalizedLinkButton id="btCancel" 
                                  runat="server" Text="Cancel"&gt;
          Cancel&lt;/glb:GlobalizedLinkButton&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
  &lt;/form&gt;
&lt;/body&gt;
&lt;/HTML&gt;
</pre>
<P>
<A HREF="#rl4">Back to Article</A>
</P>
<H4><A NAME="l5"></a>Listing Five </H4>


<pre>/// &lt;summary&gt;
/// Button that pops client-side dialog to confirm the action. It exposes 
/// ConfirmMessage property to set its dialog message with "Are you sure?" 
/// being a default. It relies on GlobalizedButton class to translate 
/// its Text and ToolTip properties. 
/// &lt;/summary&gt;
public class GlobalizedConfirmButton : Button
{
private string m_ConfirmMsg = "Are you sure?";
    /// &lt;summary&gt;
    /// Message will be translated and displayed in confirmation dialog box. 
    /// &lt;/summary&gt;
    public string ConfirmMessage 
    {
        set{m_ConfirmMsg = value;}
    }
    /// &lt;summary&gt;
    /// Renders HTML and client javascript for confirmation box
    /// &lt;/summary&gt;
    /// &lt;param name="output"&gt;&lt;/param&gt;
    protected override void Render(HtmlTextWriter output) 
    {
if (Page.Request.Browser.JavaScript == true)
{
  output.WriteLine(@"&lt;script id='clientConfirmation' 
language='javascript'&gt;&lt;!-- 
            function RUSure() 
{if (confirm('" + Translator.GetLocalizedString(m_ConfirmMsg)
 + @"')) return true;else return false;}
            //--&gt;&lt;/script&gt;");
  Attributes.Add("onclick","return RUSure();");
        }
        Text = Translator.GetLocalizedString(Text);
        base.Render(output);
}
}
</pre>
<P>
<A HREF="#rl5">Back to Article</A>
</P>
<H4><A NAME="l6"></a>Listing Six</H4>


<pre>decimal d = 1234.556M;
d.ToString("C",new System.Globalization.CultureInfo("nl-NL"));
</pre>
<P>
<A HREF="#rl6">Back to Article</A>
</P>
<H4><A NAME="l7"></a>Listing Seven</H4>


<pre>&lt;configuration&gt;
    &lt;system.web&gt;
        &lt;globalization 
responseEncoding="utf-8" 
requestEncoding="utf-8" 
fileEncoding="utf-8" 
culture="en-CA" 
uiCulture="de-DE" 
/&gt;  

    &lt;/system.web&gt;
&lt;/configuration&gt;
</pre>
<P>
<A HREF="#rl7">Back to Article</A>
</P>
<H4><A NAME="l8"></a>Listing Eight</H4>


<pre>&lt;%@ Page language="c#" Culture="ru-RU" ResponseEncoding="utf-8" %&gt;
</pre>
<P>
<A HREF="#rl8">Back to Article</A>
</P>
<H4><A NAME="l9"></a>Listing Nine</H4>


<pre>/// &lt;summary&gt;
/// Page sets its Culture according to the user profile  
/// to affect all the formatting on this page
/// &lt;/summary&gt;
public class LocalizedPage: Page
{
   public LocalizedPage()
   {
       this.Culture = Utility.GetUserContextCulture();
   }
}
</pre>
<P>
<A HREF="#rl9">Back to Article</A>
</P>
<H4><A NAME="l10"></a>Listing Ten</H4>


<pre>System.Threading.Thread.CurrentThread.CurrentUICulture = 
new System.Globalization.CultureInfo("de-DE");
</pre>
<P>
<A HREF="#rl10">Back to Article</A>
</P>

</body>
</html>
