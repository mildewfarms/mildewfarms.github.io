<html>
<head>
<title>Apr02: Programmer's Toolchest</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Java's Generic Connection Framework</h1>
<p><i>Dr. Dobb's Journal</i> April 2002</p>
<h2>Wireless networking for mobile devices</h2>

<h3>By Paul Tremblett</h3>

<I>
Paul is a software developer with AudioAudit and author of Instant Wireless Java With J2ME (McGraw-Hill). Paul can be reached at <a href="mailto:ptremblett@earthlink.net">ptremblett@earthlink.net</a>.</I>

<hr>

<p>When applications require greater performance, one of the first things you often think of is adding MIPS or memory. However, this is often not practical with mobile information devices (MIDs). You could try tapping into server resources, but this requires networking. And since networking is a specialized form of I/O, you then must know how I/O is implemented on the mobile device. Sun Microsystems's Connected Limited Device Configuration specification (CLDC; <a href="http://java.sun.com/products/cldc/">http://java.sun.com/products/cldc/</a>) addresses this issue. CLDC is the foundation of a run-time environment for mobile phones, pagers, PDAs, and other limited-resource devices. CLDC works with 16/32-bit RISC/CISC-based systems that have as little as 160 KB of memory. When used with device-specific APIs such as the Mobile Information Device Profile (MIDP; <a href="http://java.sun.com/products/midp/">http://java.sun.com/products/midp/</a>), CLDC provides a Java 2 Micro Edition (J2ME) run-time environment for small resource-constrained devices. In this article, I'll focus on the Java Generic Connection Framework, which is part of the CLDC specification. All of the examples I'll present were developed with the J2ME Wireless Toolkit; <a href="http://www.java.sun.com/j2mewtoolkit/">http://www.java.sun.com/j2mewtoolkit/</a>.</p>


<h3>A Different Approach to Input/Output</h3>


<p>The Java 2 Standard Edition (J2SE) provides a rich API for I/O. In JDK 1.4, for instance, the java.io, java.nio, java.nio.channels, and java.net packages contain approximately 120 classes, 30 interfaces, 1100 methods, and 50 exceptions. Clearly, a full implementation of the J2SE API on mobile devices is out of the question. Consequently, the MIDP spec defined the minimum requirements for MIDs with 128 KB of nonvolatile memory for the MID components and 32 KB of volatile memory for the Java run time. Besides, even if memory weren't a problem, not all of the functionality in the J2SE API is applicable to MIDs. Designing a spec that addressed these issues presented the CDLC authors with a challenge. Their solution was the Generic Connection Framework (GCF).</p>
<DDJADVERTISEMENT INLINE>


<p>Rather than using a collection of completely different abstractions, the GCF uses a set of related abstractions at the API level. All connections are created by invoking a single static method in the system class <i>Connector</i>. The method, which takes a single argument, is the <i>open</i> method. The argument is a <i>String</i> that takes the form:</p>

<blockquote><p>
"&lt;protocol&gt;:&lt;address&gt;;&lt;parameter(s)&gt;"</p>

</blockquote>

<p>Syntactically, this string is similar to a Uniform Resource Indicator (URI), as defined in IETF Standard RFC2396 (<a href="http://www.ietf.org/rfc/rfc2396.txt">http://www.ietf.org/rfc/rfc2396.txt</a>). </p>

<p>At run time, the implementation uses the portion of the parameter up to the first ":" to instruct the system to obtain an appropriate protocol implementation. This late binding permits dynamic run-time adoption to different protocols. The single-method/single-uniform string approach also simplifies setup for programmers.</p>

<p>In addition to the <i>Connector</i> class, the GCF is implemented as a hierarchy of seven <i>Connection</i> interfaces that group similar classes of protocols together. <A NAME="rf1"><A HREF="0204if1.htm">Figure 1</A> illustrates this hierarchy, which, along with <i>HttpConnection,</i> form the MIDP spec. The interfaces increase in capability from the top of the hierarchy to the bottom. </p>

<p>The <i>Connection</i> interface represents the most basic connection type and can only be opened and closed. Its <i>open</i> method is not invoked directly by programmers, but via the static <i>open</i> method in the <i>Connector</i> class. All of the interfaces I examine here are subinterfaces of <i>Connection</i>.</p>



<h3>The <i>InputConnection</i> Interface</h3>


<p>The <i>InputConnection</i> interface represents a device from which data can be read. DaytimeClient.java (available electronically; see "Resource Center," page 5) is an example of this interface being used to read data from a daytime server. The MIDlet (that is, a "mobile information device application") establishes a socket connection to the server, which listens on port 13, accepts a connection, and sends the date/time back to the MIDlet. The MIDlet reads the data a byte at a time into a byte array until all the data has been read. It then uses the byte array to create a string containing the current date and time, which it displays; see <A NAME="rl1"><A HREF="#l1">Listing One</A>.</p>


<p>You create the connection by passing "socket://127.0.0.1:13" to the <i>open</i> method of the <i>Connector</i> class and casting the <i>Connection</i> object that is returned to an <i>InputConnection</i>. You then invoke <i>openInputStream</i> against the <i>InputConnection </i>object. This method returns an instance of <i>InputStream</i> that you use to read data. <A NAME="rf2"><A HREF="0204if2.htm">Figure 2</A> is the MIDlet running under the early release of MIDP For Palm using the Palm OS Emulator (POSE). The .prc file that runs on the Palm was created using the converter utility distributed with MIDP For Palm. Input to the utility is DayTimeClient.jad (available electronically). </p>

<p>The counterpart of <i>InputConnection</i> is <i>OutputConnection</i>. These two are combined to form the <i>StreamConnection</i> interface, which is the logical starting point for classes that implement communications interfaces. </p>



<h3>The <i>StreamConnectionNotifier </i>Interface</h3>


<p>You use the <i>StreamConnectionNotifier</i> interface when you need to listen for incoming connections. SimpleMessaging.java (available electronically) contains a MIDlet that uses this interface. This MIDlet starts a thread that creates a <i>StreamConnectionNotifier</i> using <A NAME="rl2"><A HREF="#l2">Listing Two</A>.</p>


<p>The reason for invoking this method in a separate thread is that the <i>run</i> method contains the blocking call <i>sc = scn.acceptAndOpen();</i> which returns only when it receives an incoming connection on port 9191. While it is waiting for a connection, the application displays a message such as the one shown in <A NAME="rf3"><A HREF="0204if3.htm">Figure 3</A>. After the connection has been received, data is read from the input stream and displayed as in <A NAME="rf4"><A HREF="0204if4.htm">Figure 4</A>.</p>

<p>MessageSender.java (available electronically) is J2SE code to send a message to the MIDlet. It accepts input from the console and uses the networking classes in the java.net package to establish a socket connection and transmit the data.</p>



<h3>The <i>ContentConnection</i> Interface</h3>


<p>The <i>ContentConnection</i> interface is a subinterface of <i>StreamConnection</i> that provides methods for handling content. These methods are <i>getEncoding</i>, <i>getLength</i>, and <i>getType</i>. The MIDlet in PhotoClient .java (available electronically) uses this interface. In this example, you create a connection using the string <a href="http://localhost/DDJ/images/thatguy.png">http://localhost/DDJ/images/thatguy.png</a>. Since the connection is a <i>ContentConnection</i>, you can determine the length of the data that is available, allocate a byte array to hold the data, and read the data into the array using a single invocation of the <i>read</i> method. <A NAME="rf5"><A HREF="0204if5.htm">Figure 5</A> shows the output from the MIDlet. As a defensive programming measure, you should assume that the server might not send back the content length. If this is the case, <i>getContentLength</i> returns -1. In this case, you read 1 byte at a time into a byte array until all bytes have been read. You initially create an array that holds 24 KB. If the array fills up, you create a new array that is 1 KB larger than the previous array, copy the contents of the previous array into the new array, and continue reading data. You repeat the process of creating larger arrays as often as is necessary. When the <i>read</i> operation has completed, pass the byte array containing the data to the static method <i>createImage</i> of class <i>Image</i>. You pass the <i>Image</i> object that is returned to the <i>setImage</i> method of the <i>ImageItem</i> object image. Finally, you display the <i>Form</i> that contains the <i>ImageItem</i>.</p>




<h3>The <i>HttpConnection</i> Interface</h3>


<p>The MIDP specification states that MIDP implementations must provide support for accessing HTTP 1.1 servers and services. The <i>HttpConnection</i> interface, which is a subinterface of <i>ContentConnection</i>, provides the functionality needed to set request headers, parse response headers, and perform HTTP-specific functions.</p>


<p>The connection exists in one of three states: <i>setup</i>, <i>connected</i>, and <i>closed</i>. In the <i>setup</i> state, no connection has been made to the server. In this state, you can invoke the <i>setRequestMethod</i> to specify whether the request is GET (the default), POST, or HEAD. In <i>setup </i>state, you can also invoke <i>setRequestProperty</i> to specify one or more keys and their values. The connection transitions from the <i>setup</i> state to the <i>connected</i> state when you invoke any method that requires data to be sent to or received from the server. The <i>closed</i> state is entered when the <i>close</i> method is invoked. Any method invoked against a connection that has been closed results in an <i>IOException</i> being thrown.</p>

<p>SessionDemo.java (available electronically) includes a MIDlet that uses the <i>HttpConnection</i> interface to participate in a session with a servlet that delivers output to the MIDlet using Java Server Pages (JSPs). The MIDlet creates an <i>HttpConnection </i>using <A NAME="rl3"><A HREF="#l3">Listing Three</A>(a). After the connection has been created and while it is in <i>setup</i> state, the MIDlet executes <A NAME="rl3"><A HREF="#l3">Listing Three</A>(b). </p>

<p>In the first line of code of <A NAME="rl3"><A HREF="#l3">Listing Three</A>(b), you use the <i>setRequestMethod</i> to specify that the request be a POST request. You then set the request property <i>User-Agent </i>to a value that identifies this request as originating from a MIDP application and not from a browser. You may have already written servlets that used the value of this property to forward a request to a JSP that generates WML instead of HTML when the request originated from a WAP device. When the request originates from an MID, the easiest way to handle output is to forward the request to a JSP that sets the content type to "text/plain" and sends back untagged data. There is nothing, however, to prevent you from sending back XML if you wish because some XML parsers have been modified to work under MIDP.</p>

<p>When you have finished executing the setup code, you invoke the <i>getContentHeader</i> method. Because this method requires that data be read from the server, the connection transitions to the <i>connected</i> state. If the <i>Vector</i> <i>cookies</i> is <i>null</i>, indicating that it has not yet been created, you invoke <i>getCookies</i>. In this method, you instantiate a <i>Vector</i> in which you save the values of all header fields with a name of "Cookie." If <i>cookies</i> is not <i>null</i>, you invoke <i>setCookies</i>. In this method, you retrieve all of the elements from the <i>Vector</i> and concatenate them together separated by a semicolon (;). When the entire string has been formed, you use the <i>setRequestProperty</i> method to assign the property <i>Cookie</i> the value contained in the concatenated string. Among the cookies sent back to the server is one named JSESSIONID. As described in the servlet specification, the servlet container uses the value of this cookie to maintain session objects. The CountServlet.java servlet (available electronically) uses the session object to store a counter containing the number of times the client has visited. It uses the JSP shown in DisplayVisitsCount.jsp (available electronically) to send the value of this counter to the MIDlet. <A NAME="rf6"><A HREF="0204if6.htm">Figure 6</A> shows this counter after several visits.</p>



<h3>Conclusion</h3>


<p>The Generic Connection Framework is as powerful as it is simple. The fact that the MIDlets I present here talk to an existing server without modification to that server, as well as a servlet that was no different from any other servlet, demonstrates that the framework can be used to develop applications that are a transparent, integral part of an enterprise. </p>


<p></p>

<p><b>DDJ</b></p>
<H4><A NAME="l1">Listing One</H4>


<pre>try {
  socket = (InputConnection)Connector.open("socket://127.0.0.1:13",
             Connector.READ, true);
  is = socket.openInputStream();
}
catch (Exception e) {
}
try {
  int b;
  StringBuffer sb = new StringBuffer();
  while ( (b = is.read()) != -1) {
    sb.append((char)b);
  }
  socket.close();
  dt.setText(sb.toString());
  display.setCurrent(outputForm);
}
catch (Exception e) {
}
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two</H4>


<pre>String url = "serversocket://:9191";
public MessageThread() {
  try {
    scn = (StreamConnectionNotifier)Connector.open(url);
  }
  catch (IOException e) {
  }
}
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3">Listing Three</H4>


(a)
<pre>String url = "http://localhost/J2MEBOOK/servlet/CountServlet";

(b)
<pre>conn.setRequestMethod(HttpConnection.POST);
conn.setRequestProperty("User-Agent", 
  "Profile/MIDP-1.0 Configuration/CLDC-1.0");
conn.setRequestProperty("Content-type", 
  "application/x-www-form-urlencoded");







</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>


</body>
</html>
