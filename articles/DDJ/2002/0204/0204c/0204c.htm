<html>
<head>
<title>Apr02: Java Security Architecture and Extensions</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Java Security Architecture and Extensions</h1>
<p><i>Dr. Dobb's Journal</i> April 2002</p>
<h2>Application independence of cryptographic primitives</h2>

<h3>By Volker Roth</h3>

<I>
Volker is a member of the staff at the Fraunhofer Institute for Computer Graphics. He can be contacted at <a href="mailto:vroth@igd.fhg.de">vroth@igd.fhg.de</a>.</I>

<hr>

<p>The Java Development Kit comes with a number of core packages that comprise the basic support of Java. Included is a reference implementation of the Java Cryptography Architecture (JCA) &#151; a framework that attempts to provide a common interface for accessing basic cryptographic primitives. Such primitives cover digital signatures, certificates, and one-way hash functions. </p>
<p>The JCA is complemented by the Java Cryptography Extension (JCE), which is modeled along the same design principles and provides primitives such as ciphers, key exchange, and keyed hash functions (MACs). Because the reference implementation of the JCE falls under the U.S. Department of Commerce Bureau of Export Administration regulations (<a href="http://www.bxa.doc.gov/">http://www.bxa.doc.gov/</a>), uncrippled versions of JCE are not available outside the United States. However, the API documentation is available and a number of international companies have produced cleanroom implementations of this API. These are typically bundled with cryptographic packages implemented along the lines of JCA and JCE. <A NAME="rt1"><A HREF="0204ct1.htm">Table 1</A> lists some available security provider packages. </p>
<DDJADVERTISEMENT INLINE>

<p>The goal of JCA/JCE is to provide application independence for particular algorithms and implementations of cryptographic primitives. Ideally, multiple providers should be interchangeable and complement each other, accessible through a well-defined set of API and wrapper classes that comprise the JCA/JCE. Detailed knowledge about the actual provider being used should not be necessary for building cryptographically enhanced applications. In the best of worlds, applications only need to query for an algorithm name and desired key length, and can locate and use this cipher if it is supported by some installed provider. </p>

<p>Unfortunately, we are not in the best of worlds and building industry-strength crypto-enabled software based on the available providers is problematic. Problems are caused by shortcomings in the JCA/JCE, which are in turn exacerbated by sloppy implementation and interpretation of the API and implementation guidelines. In this article, I'll present techniques for building providers in an interoperable fashion, identifying mistakes to avoid. I'll also outline the scope of applications that should be feasible to implement based on a provider-independent layer &#151; in particular, the JCA/JCE. For more detailed information on JCA/JCE, see <i>Java Cryptography</i>, by Jonathan B. Knudsen (O'Reilly &amp; Associates, 1998) and <i>Java Security</i>, by Scott Oaks (O'Reilly &amp; Associates, 1998).</p>



<h3>Building on JCA/JCE</h3>


<p>Beyond pure cryptography, significant effort is required to make applications communicate securely. Secured messages, as well as the keys and algorithm parameters, need to be encoded for proper decoding. Additionally, alternative algorithms and structures must be identified in a unique way. A number of standards address this, notably the PKCS family that covers &#151; but is not limited to &#151; RSA key representation and encryption, Diffie-Hellman key agreement, password-based encryption, the syntax of cryptographically protected messages, representation of encrypted private keys, and syntax of certificate requests. The PKCS standards are defined in terms of ASN.1 and make use of structures and attributes predefined in ITU-T Recommendations X.501 and X.509, which in turn refer to a vast number of further ISO and ITU standards. Encoding/decoding of the various structures defined in these standards is governed by another ITU-T Recommendation, X.690. Implementing all of these standards can be exhausting work.</p>


<p>Nevertheless, companies are doing just that &#151; and some even provide source code of their implementations. Some of the standards must be dealt with on the level of JCA/JCE providers (for instance, PKCS#1, PKCS#3, PKCS#5, PKCS#8, and X.509 certificates). Others are located above the layer of JCA/JCE (PKCS#7 and PKCS#10, for instance). Still others, such as the X.509 <i>AlgorithmIdentifier</i>, are used both by providers and libraries built on top of the JCA/JCE. From a software designer's perspective, an architecture like <A NAME="rf1"><A HREF="0204cf1.htm">Figure 1</A> is desirable. In other words, the PKCS#7 implementation should not depend upon a particular provider, but instead use the abstractions provided by the JCA/JCE. Any implementation that does not live up to these expectations is either hardwired to a particular provider or must return generic ASN.1 structures for which the application has to do the mapping to JCE/JCA structures.</p>

<p>The first choice is clearly undesirable, since the advantages of the JCA/JCE architecture are negated, and the application becomes dependent on a single provider. The second choice is inefficient. To use new algorithms with a PKCS#7 implementation, adding new providers that implement these algorithms should be all there is to do. Ideally, there would be a Java Extension and API for ASN.1, on which both providers and layers atop the JCA/JCE can build. This would spare providers the effort of reimplementing subsets of ASN.1 and the Distinguished Encoding Rules, which are the default encoding rules for virtually all opaque representations of keys and algorithm parameters in the JCA/JCE.</p>

<p>A truly JCA/JCE-integrated implementation of PKCS#7 and related objects should use the semantics of the JCA/JCE. An implementation of <i>AlgorithmIdentifier</i> should return an instance of <i>java.security.AlgorithmParameters</i> rather than an ASN.1 object; implementations of PKCS#7 <i>SignedData</i> should be able to locate a suitable <i>Signature</i> engine on their own, and implementations of PKCS#7 <i>EncryptedContentInfo</i> should be able to decrypt with little more than a <i>RecipientInfo</i> and private key, to name some examples.</p>

<p>The key to these features is how algorithms and structures are identified throughout the standards. This is done by means of a built-in ASN.1 type, which is the Object Identifier (OID) &#151; a sequence of integers that uniquely identifies an entity such as a company, algorithm, or data structure. The common notation for OIDs is to write the succession of its integers separated by dots. Each successive integer stands for a node in the tree of all registered OIDs. For instance, RSA Laboratories is registered under OID 1.2.840.113549; starting with this prefix, RSA can define OIDs of its own choosing. For instance, the PKCS#1 Standard is denoted by 1.2.840.113549.1.1 and the RSA algorithm defined in PKCS#1 is denoted by 1.2.840.113549.1.1.1, both chosen by RSA Labs. </p>

<p>Knowing the algorithm being used is sometimes not enough. Algorithms such as symmetric block ciphers in cipher block chaining mode require an initialization vector (IV). Some ciphers support multiple key lengths. Key lengths and IVs are parameters that are required for the correct initialization and operation of such ciphers. For this reason, cryptographic algorithms are identified in X.509 and the PKCS family of standards by means of an <i>AlgorithmIdentifier</i>, which contains the OID of the algorithm in question as well as the parameters, if any. <A NAME="rl1"><A HREF="#l1">Listing One</A> is the ASN.1 structure of the <i>AlgorithmIdentifier</i> type.</p>

<p>The PKCS#7 <i>SignerInfo</i> structure (see <A NAME="rl2"><A HREF="#l2">Listing Two</A>) utilizes two <i>AlgorithmIdentifier</i>s &#151; one for the digest algorithm that is used to reduce/hash a message of variable length to a digest value of fixed length, and another for the raw signature/encryption algorithm used to transform the digest. Both jointly define the signature algorithm. For instance, the Digital Signature Standard (DSS) defines a way of producing digital signatures based on the Secure Hash Algorithm (SHA) and the Digital Signature Algorithm (DSA). The <i>AlgorithmIdentifier</i>s in a <i>SignerInfo</i> specifying a DSS signature thus contain the OIDs (multiple alternative OIDs exist; for simplicity, I only give one per algorithm) 1.2.840.10040.4.1 (DSA) and 1.3.14.3.2.26 (SHA1). The combined signature scheme DSS=SHA1/DSA is also identified by a number of alternative OIDs of which one is, for instance, 1.2.840.10040.4.3.</p>

<p>However, implementing <i>SignerInfo</i> and <i>AlgorithmIdentifier</i> in <A NAME="rl1"><A HREF="#l1">Listings One</A> and <A NAME="rl2"><A HREF="#l2">Two</A> can lead to the following problems.</p>



<h3>JCA/JCE Details and Interpretation</h3>


<p>Security providers are at the heart of the architecture. They register the various cryptographic engine classes that may be requested by means of the JCA and JCE API. <A NAME="rt2"><A HREF="0204ct2.htm">Table 2</A> lists the engine types covered by JCA/JCE. Each particular engine is located through a hash map that maps the engine type and algorithm name to the class that implements the according primitive.</p>


<p>In addition to engine classes, provider packages (should) contain transparent representations of keys and algorithm parameters, and opaque representations. Transparent representations provide a common view on implementation-specific details of keys and parameters (such as the modulus and exponent of an RSA public key) by means of a well-known interface. <i>KeySpecs</i>, with the exception of <i>EncodedKeySpecs</i>, are transparent representations of key material, and <i>AlgorithmParameterSpecs</i> are transparent representations of algorithm parameters. </p>

<p>Opaque representations hide details but provide a container for the encoded representation of keys and parameters, which is required to exchange such data. For instance, the primary encoding of RSA keys is that described in PKCS#1 and PKCS#8. Classes that implement the <i>Key</i> interface are opaque representations of key material. Likewise, classes inheriting from <i>AlgorithmParametersSpi</i> represent opaque representations of algorithm parameters. </p>

<p>Applications needing to work with a transparent representation of parameters of algorithm <i>X</i><i><sub>i</i></sub> need to import a class <i>X</i><i><sub>i</i></sub><i>ParameterSpec</i> at compile time. This is clearly a limitation because once algorithm <i>X</i><i><sub>i</i></sub> is broken, the code is wasted and replacing <i>X</i><i><sup>i </i></sup>with another algorithm requires a modification, recompilation, and redistribution of the application. An alternative approach is to work on opaque representations. For keys, this is not problematic; all engine types that require keys take <i>Key</i> objects rather than <i>KeySpecs</i>, and all engine types that generate keys return <i>Key</i> objects as well. Generators of keys and parameters can be initialized by means of an abstract notion of strength. It is up to the implementations to generate any algorithm parameters that cannot be derived from this strength parameter.</p>

<p>Algorithm parameters are treated more stepmotherly. The engines <i>Signature</i>, <i>Mac</i>, and <i>KeyAgreement</i> do not support initialization with opaque representations. There is a way out of this dilemma: The <i>AlgorithmParameters</i> class declares a method <i>getParameterSpec(Class paramSpec)</i>, which returns an <i>AlgorithmParameterSpec</i> instance. The only problem is that the understanding of how this method should behave is generally counter to the problem at hand. Among behaviors some implementations exhibit are:</p>


<ul>
  <li>Ignore <i>paramSpec</i> and return an instance of a hardcoded class <i>Y</i>.
  <li>If the name of <i>paramSpec</i> equals the name of a hardcoded class <i>Y</i>, then return an instance of <i>Y</i>. Otherwise, throw an exception. 

  <li>If a hardcoded class <i>Y</i> is either the same as or a superclass or superinterface of <i>paramSpec</i>, then return an instance of <i>Y</i>; otherwise, throw an exception.

</ul>

<p>Leaving the first option aside, getting an <i>AlgorithmParameterSpec</i> from an <i>AlgorithmParameters</i> instance thus requires knowledge of the class or interface (or subclass or subinterface) of the class supported by that instance. This is counterintuitive to what the JDK API documentation says about this method: "<i>paramSpec</i> identifies the specification class in which the parameters should be returned." Thus, I suggest this alternative behavior: If this instance supports an <i>AlgorithmParameterSpec</i> class <i>Y</i> that can be casted to <i>paramSpec</i>, then return an instance of <i>Y</i>; otherwise, throw an exception.</p>

<p>This is both a more faithful and useful interpretation of the method's documentation. In particular, this interpretation lets you pass <i>AlgorithmParameterSpec.class</i> as <i>paramSpec</i> and get a valid default <i>AlgorithmParamertersSpec</i> in return, which can be used to initialize engines that do not support opaque parameter representations. (The same argument holds for implementations of <i>KeyFactory</i> and <i>SecretKeyFactory</i>; both provide methods for converting opaque key representations into transparent ones.) <A NAME="rl3"><A HREF="#l3">Listing Three</A> is a correct implementation. </p>

<p>Engine implementations are identified by three parameters: the engine type, algorithm name, and provider name. If a provider name is not given, installed providers are searched for a matching engine implementation in the order of preference (the order in which they are registered). For this to work, providers declare the supported engine types and algorithms by means of properties &#151; key/value pairs of type <i>String</i> that are stored in a hash table. The key is the engine type and algorithm name, and the value is the fully qualified name of the class that implements that algorithm. <A NAME="rt3"><A HREF="0204ct3.htm">Table 3</A> lists the syntax of these properties.</p>

<p>The substitution pattern &lt;<i>stdalg</i>&gt; denotes the standard algorithm name as specified in the <i>Java Cryptography Architecture and Extension API Specification &amp; Reference</i> and the corresponding document for the JCE. If a standard name has not been specified for the algorithm in question, then a new name must be chosen, which should be modeled along the lines of the standard names. The second line in <A NAME="rt3"><A HREF="0204ct3.htm">Table 3</A> is an alias scheme that can be used to define alternative names for engine implementations. The alias must be mapped to a standard name. Aliases are resolved at most once and resolving is done only in the scope of the provider that defines the alias. </p>

<p>Aliases are used, for instance, to map OIDs to the standard algorithm name of the engine that implements the algorithm referred to by the OID (see <A NAME="rt4"><A HREF="0204ct4.htm">Table 4</A>). Likewise, a special form of aliases maps a standard algorithm name of an engine to a preferred OID for that algorithm. However, this type of mapping is inefficient because the image of the mapping is defined in the key and all entries in the provider hash map must be searched for a matching value/key pattern. Additionally, the JCE/JCA specification defines the alternative "slashed" name form &lt;<i>digestalg</i>&gt;/&lt;<i>sigalg</i>&gt; for signature algorithms. Both &lt;<i>digestalg</i>&gt; and &lt;<i>sigalg</i>&gt; stand for the standard name of the digest and raw signature/encryption algorithm name used in the combined signature scheme. </p>

<p>Now, again consider the ASN.1 structure <i>SignerInfo</i> that defines a signature algorithm in terms of two OIDs &#151; one for the digest algorithm and another for the raw signature/encryption algorithm that together comprise the signature algorithm to use for verifying a signature. Signature engines designed according to the JCA already combine the digesting and encryption/verification step. Consequently, signature engines are requested by means of the standard name or an OID of the combined sequence. Implementations of <i>SignerInfo</i> that fall back to proprietary OID mappings might not support the complete suite of algorithms supported by the installed providers. </p>

<p>A solution that takes OIDs declared by the individual installed providers into account is more desirable at this point. The approach that I take exploits the slashed form of signature engine names. The OIDs extracted from the <i>SignerInfo</i> are first resolved to the standard names of the corresponding <i>MessageDigest</i> and <i>KeyPairGenerator</i> engines using the alias mechanism. This requires that OIDs are set up as aliases for said engine types. Next, the standard names are combined to the slashed form, which is resolved to the standard name of the <i>Signature</i> engine. This name is then used to request the <i>Signature</i> engine implementation. The reverse process is similar. The standard signature algorithm name is resolved to its slashed form, which is split into the digest algorithm and cipher name. Both are mapped to the respective OIDs using the alias form for preferred OIDs. The resolving is done over the mappings of all installed providers and resolved combinations are kept in a cache. All required mappings are "learned" from the installed providers in this way. This scheme works only if providers support appropriate declaration of OIDs and slashed forms, and the naming discipline is kept by the providers. </p>

<p>A special name form is supported for cipher transformations; the syntax for transformations is &lt;<i>cipher</i>&gt;[/&lt;<i>mode</i>&gt;/&lt;<i>padding</i>&gt;] (square brackets denote optional elements). &lt;<i>cipher</i>&gt; is the name of the cipher algorithm, &lt;<i>mode</i>&gt; the name of the operation mode to use, and &lt;<i>padding</i>&gt; the padding scheme to use for padding the cipher text to the block size of a block cipher. This name form is parsed by the <i>Cipher</i> class in its <i>getInstance(String transformation [,provider])</i> method. The question that remains is which name to use when requesting a matching <i>AlgorithmParameterGenerator</i> instance for a given cipher transformation. The padding scheme is not significant for choosing between different algorithm parameters. My recommendation is to use &lt;<i>cipher</i>&gt;/ &lt;<i>mode</i>&gt; from the returned name first, then try &lt;<i>cipher</i>&gt; in case the first attempt fails.</p>



<h3>Conclusion</h3>


<p>I've outlined here a piece of software (PKCS standards support) that can be implemented in a provider- and algorithm-independent way based on the JCA/JCE. Some of its features cannot be implemented in a straightforward way due to limitations of the JCA/JCE algorithm naming scheme. However, there is a feasible solution based on the definition of appropriate aliases that depends on the strict adherence of providers to the specifications of the JCA/JCE, in particular, to the naming and aliasing schemes. Sun included prominent notice in the specification documents that the aliasing scheme may change or even be eliminated in the future. However, this mechanism is significant for the transparent mapping of OIDs and algorithm names and is fundamental to the transparent resolution of the signature engine identification problem. Improvements of the aliasing scheme should provide a more efficient reverse mapping of algorithm names to the preferred OID.</p>


<p>Furthermore, Java security provider packages must put more emphasis on parameter handling and algorithm initialization issues. I've experimented with several Java security provider packages and particularly observed some deficiencies (please note that I've consulted for the developers of the CDC provider, which avoids the following deficiencies):</p>


<ul>
  <li>OID mappings for symmetric ciphers are not defined.
  <li>OID mappings for <i>AlgorithmParameters</i> engines are not defined.

  <li>Implementations of <i>AlgorithmParameterGeneratorSpi</i> are not provided for symmetric ciphers.

  <li>Providers rarely implement <i>AlgorithmParametersSpi</i> classes for symmetric ciphers.

  <li>Method <i>Cipher.getParameters</i> is not properly supported in many <i>Cipher</i> implementations.

  <li>Default conversion of opaque parameters to parameter specs is not supported properly.

</ul>


<p>Implementations of <i>AlgorithmParameterGeneratorSpi</i> are particularly important because they are a <i>sine qua non</i> for transparent initialization of ciphers in a way that is independent of a particular provider and algorithm. In this vein, the opaque initialization implementation (source code available electronically; see "Resource Center," page 5) shows how cipher algorithms can be initialized transparently.</p>

<p>Likewise, the engine-name resolution tool (also available electronically) provides forward and reverse mapping of engine names to OIDs, including the resolution of signature engine names to raw cipher and digest OIDS, and vice versa.</p>

<p>Finally, a sample provider class with extensive and accurate declaration of OIDs, aliases, and parameter engines is also available electronically. The full code &#151; including sample implementations of algorithm parameter generators and parameter representations &#151; is available at <a href="http://www.semoa.org/">http://www.semoa.org/</a>, along with the source code of a JCE cleanroom implementation with accurate alias resolving and class loading and an implementation of ASN.1, DER, PKCS#7, X.501 names and further elements of PKCS and ITU standards. The PKCS#7 implementation uses the engine-name resolution tool and does not depend on any particular security provider.</p>




<p><b>DDJ</b></p>

<H4><A NAME="l1">Listing One</H4>


<pre>AlgorithmIdentifier ::= SEQUENCE {
  algorithm OBJECT IDENTIFIER,
  parameters ANY DEFINED BY algorithm OPTIONAL
}
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two</H4>


<pre>SignerInfo ::= SEQUENCE {
  version Version,
  issuerAndSerialNumber IssuerAndSerialNumber,
  digestAlgorithm DigestAlgorithmIdentifier,
  authenticatedAttributes [0] IMPLICIT Attributes OPTIONAL,
  digestEncryptionAlgorithm DigestEncryptionAlgorithmIdentifier,
  encryptedDigest EncryptedDigest,
  unauthenticatedAttributes [1] IMPLICIT Attributes OPTIONAL, 
}
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3">Listing Three</H4>


<pre>public class MyAlgorithmParametersSpi extends AlgorithmParametersSpi
 { 
   private MyAlgorithmParameterSpec mySpec;
   public AlgorithmParameterSpec engineGetParameterSpec(Class paramSpec)
     throws InvalidParameterSpecException
     {
      if (paramSpec.isAssignableFrom(MyAlgorithmParameterSpec.class))
          return mySpec;
      throw new InvalidParameterSpecException("Unsupported parameter spec!");
     }
}

</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>


</body>
</html>
