<html>
<head>
<title>Apr02: Gumbie: A GUI Generator for Jython</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Gumbie: A GUI Generator for Jython</h1>
<p><i>Dr. Dobb's Journal</i> April 2002</p>
<h2>Automatically putting  a pretty face on Jython</h2>

<h3>By Peter Brinkmann</h3>

<I>
Peter is an assistant professor of mathematics at the University of Illinois at Urbana-Champaign. He can be contacted at <a href="mailto:brinkman@math.uiuc.edu">brinkman@math.uiuc.edu</a>.</I>

<hr>

<a name="rs1"><a href="0204es1.htm">A Factory with a Twist</a><hr>

<p>Essentially, a menu bar is just a tree. For example, the first few branches of the Netscape Communicator menu bar on my Linux system look like <A NAME="rl1"><A HREF="#l1">Listing One</A>. If you want to build a menu bar, you should only have to write down such a tree, and the rest ought to be the responsibility of whatever productivity tool you're using. Gumbie, the tool I present in this article, does just that &#151; automatically creates menu bars. Additionally, Gumbie provides a number of other high-level features that facilitate the creation of graphical user interfaces (GUIs).</p>
<p>As I created Gumbie primarily for the purpose of building GUIs for existing software in Java, I implemented Gumbie in Jython (<a href="http://www.jython.org/">http://www.jython.org/</a>) &#151; a 100 percent pure Java implementation of Python that makes Java scriptable. Consequently, Gumbie works on any system with the Java Development Kit 1.1.7 (or greater). I have tested it under Linux, Solaris, Windows, and MacOS 9. Gumbie, which I'm releasing under the GNU Public License, is available at <a href="http://www.math.uiuc.edu/~brinkman/software/gumbie/">http://www.math.uiuc.edu/~brinkman/software/gumbie/</a> and electronically from <i>DDJ</i>; see "Resource Center," page 5.</p>
<DDJADVERTISEMENT INLINE>



<h3>A Gumbie Overview</h3>


<p>Most of the programming I do involves mathematical software (see, for instance, <a href="http://www.math.uiuc.edu/~brinkman/software/train/">http://www.math.uiuc.edu/~brinkman/software/train/</a>) that works as a UNIX-style filter, reading text from <i>stdin</i> and writing text to <i>stdout</i> without user interaction. To reach more potential users, I decided  to equip these filters with a GUI. As the GUI was supposed to be no more than the icing on the cake, I didn't want to spend too much time on it, so I needed a tool that would let me create GUIs as quickly as possible. Gumbie was the result and it has since developed a life of its own.</p>


<p><A NAME="rt1"><A HREF="0204et1.htm">Table 1</A> shows the most important modules of Gumbie. The class <i>MenuMaker</i> is the core of the package, providing most of Gumbie's services, such as the creation and maintenance of the GUI. In the pattern language of the Gang of Four (<i>Design Patterns: Elements of Reusable Object-Oriented Software</i>, by Erich Gamma et al., Addison-Wesley, 1994; ISBN 0-201-63361-2), <i>MenuMaker</i> is a mediator &#151; the central hub through which all transactions must pass. Concentrating responsibility in one class makes it easy to attach a GUI to other classes (such as the filters that make up my mathematical software) that may remain blissfully unaware of the GUI that uses them.<i></p>

<p>MenuMaker</i> also offers a number of other services that I find useful when creating GUIs, such as high-level dialogs and basic bookkeeping (enabling/disabling menu items and buttons, keeping track of the instances of <i>MenuMaker</i> that are currently active, and so on). In most cases, Gumbie users will not work with <i>MenuMaker</i> itself, but rather with a subclass that inherits from <i>MenuMaker</i> and from some kind of frame (like <i>java.awt.Frame</i>). <i>PowerFrame</i> and <i>LayeredFrame</i> are examples of such mixed classes.</p>

<p>The <i>LayeredFrame</i> class provides a way of managing several objects derived from <i>MenuMaker</i> within one frame, provided they conform to a certain interface. The class <i>TextLayer</i> implements this interface and offers a basic set of methods for dealing with text. Layered frames save valuable real estate on the screen and provide a way of simulating pipes within a GUI &#151; you simply take the contents of one layer, feed them into a filter, write the output of the filter to the next layer, and so on. Not only does this lower the bar for users who are unfamiliar with the UNIX command line, but it also takes the command-line paradigm to pipeless systems such as MacOS 9.</p>

<p>Gumbie maintains a widget factory object (after Gang of Four, see the text box "A Factory with a Twist") that is responsible for creating the concrete widgets that make up the GUI. The current version of Gumbie comes with a widget factory that creates awt components because I decided to minimize the requirements for running my software. Many systems still seem to ship with Java 1.1, and many potential users of my mathematical software might lose interest if they had to upgrade their system first.</p>

<p>To switch to a different family of widgets (for example, from awt to Swing), you only have to change the factory. Moreover, the current widget factory is so straightforward that the migration from awt to Swing should require little more than search-and-replace operations. The factory module also defines high-level dialogs. Replacing the default dialogs with customized versions merely amounts to subclassing or replacing the dialog classes, and subclassing the factory so it creates the new dialogs.</p>

<p>In addition to the run-time modules, Gumbie includes a code generator that reads descriptions of GUIs and creates subclasses of <i>MenuMaker</i> or <i>PowerFrame</i> that realize these GUIs. Finally, Gumbie is ready for internationalization &#151; all the strings containing messages for users are wrapped in such a way that they can easily be replaced by translations into different languages (this involves Python's gettext module, see <a href="http://www.python.org/doc/current/lib/node192.html">http://www.python.org/doc/current/lib/node192.html</a>).</p>



<h3>The GUI Description Format</h3>


<p>For Gumbie, a GUI consists of a menu bar and up to four (possibly empty) tool bars, one for each point of the compass. Typically, such a GUI lives inside a frame equipped with a <i>BorderLayout</i> whose peripheral regions hold the tool bars and whose central region is reserved for contents supplied by the programmer. While this format imposes certain restrictions on the appearance of the GUI, it is a small price to pay for the resulting simplification of GUI descriptions, and the format has always been general enough for my purposes.</p>


<p>The Gumbie code generator (generator.py) creates Jython programs from GUI description files. <A NAME="rl2"><A HREF="#l2">Listing Two</A> shows the overall structure of such a GUI description, and <A NAME="rt2"><A HREF="0204et2.htm">Table 2</A> gives a detailed grammar of the various entries (see <A NAME="rl3"><A HREF="#l3">Listing Three</A> for an example). Indentation matters, much like in Python programs. All the components are optional, and generator.py reverts to sensible defaults for missing components. The order of the four tool bars is arbitrary and only affects the order in which the tab key transfers the keyboard focus from one button to the next.</p>

<p>Whitespace (spaces and tabs) are only allowed to provide indentation or separate entries within a line; in particular, labels and options may not contain whitespace. If you want a label that contains spaces, use underscores ("_") instead, and Gumbie will replace them by spaces later on. </p>

<p>The GUI description format lets you enter essential information about the GUI (such as the structure of the GUI, labels of buttons, and callback methods) with a minimum amount of typing. At the same time, it is fairly general because the extra option lets you define arbitrary widget properties, taking advantage of Jython's ability to pass JavaBean properties to class constructors as keyword arguments. For example, when working with a widget factory that creates Swing components, one might add an icon to a button by adding an option like <i>extra:{'icon':someIcon} </i>to the definition of the button. Gumbie does not impose any restrictions on the keyword arguments created by the extra option, and you are responsible for making sure that the widget factory knows how to handle them.</p>



<h3>The Resulting Code</h3>


<p>Feeding a GUI description into generator.py yields a functional Jython program. In particular, all the buttons and menu items are already equipped with callback methods &#151; generator.py automatically creates callback methods where the GUI description doesn't provide them. These automatically generated methods merely acknowledge the event that invoked them, so they need to be manually modified to give them some useful functionality.</p>


<p>The generated code also contains a copy of the original GUI description, and a GUI can be modified by editing its description in the generated code and feeding the edited code into generator.py once more. To avoid destroying manual modifications of the code, generator.py recognizes certain environments within the code and preserves their contents as much as possible.</p>

<p>There are, for example, environments for callback methods, imports, and the like. <A NAME="rt3"><A HREF="0204et3.htm">Table 3</A> lists all possible environments. Contents of environments are changed or lost only if this is inevitable; for example, changing the base class will require a new constructor, and a callback method only makes sense as long as there exists a corresponding widget. When generator.py has to change or overwrite the contents of an environment, it still includes the old contents in a nearby comment. Manual modifications should only occur inside some environment, or else generator.py will ignore them.</p>



<h3>Gumbie in Action</h3>


<p>For an example of Gumbie in action, consider implementing a simple text editor. You first need to decide which Gumbie class to work from. In this case, <i>TextLayer</i> is the natural choice as it is a subclass of <i>MenuMaker</i> that comes equipped with a text area and a set of methods for rudimentary text manipulation. <A NAME="rl3"><A HREF="#l3">Listing Three</A> shows a possible menu structure for such a text editor, complete with menu items for search and replace operations. <i>TextLayer</i> lets users check in the current version of the document and maintains a list of checked-in versions, with its undo/redo methods operating on this list.</p>


<p>Writing the contents of <A NAME="rl3"><A HREF="#l3">Listing Three</A> to a file, say SimpleEditor.gui, and typing <i>jython generator.py -o SimpleEditor.py SimpleEditor.gui</i> at the command line creates a Jython program that you can execute by typing <i>jython SimpleEditor.py</i>; see <A NAME="rf1"><A HREF="0204ef1.htm">Figure 1</A>.</p>

<p>Since the GUI description already links most menu items to existing callback methods in <i>TextLayer</i>, the editor lets you write text, save it to a file, undo changes, and the like. Only the menu items for search-and-replace operations still require some work. At the moment, clicking on one of them merely opens a dialog window that acknowledges the event. To make the search/replace operations work, you only need to modify the corresponding callback methods that generator.py created.</p>

<p><A NAME="rl4"><A HREF="#l4">Listing Four</A> shows the automatically generated callback method for the <i>search</i> method. <A NAME="rl5"><A HREF="#l5">Listing Five</A> is a modified callback method that takes advantage of the various services that <i>MenuMaker</i> offers, such as dialogs for entering strings or displaying short messages. After you change the remaining two callback methods in a similar fashion, the editor is fully functional.</p>

<p>The contents of the Help window and the About dialog are still set to their default values, so you adjust them by entering the appropriate messages in the <i>init</i> environment. <A NAME="rl6"><A HREF="#l6">Listing Six</A> shows the automatically generated environment, while <A NAME="rl7"><A HREF="#l7">Listing Seven</A> shows the same environment with the necessary changes. That's it. </p>

<p>When adding a GUI to existing filters, I usually start with a simple editor like that presented here and add a menu or tool bar that lets users have the filter modules operate on the current text. </p>



<h3>Gumbie and the Rest of the World</h3>


<p>Gumbie is not the first tool for creating GUIs. Parrot (<a href="http://www.vision25.demon.co.uk/oss/parrot/intro.html">http://www.vision25.demon.co.uk/oss/parrot/intro.html</a>), for example, serves a similar purpose as generator.py, creating GUIs in Python/Tk (as well as HTML and XML) from a textual description. In spite of this similarity, however, Gumbie and Parrot differ in their philosophy. Parrot aims to provide a way of creating GUIs in a variety of languages based on the same description file. Gumbie, on the other hand, focuses on Jython, but offers services beyond the initial creation of the UI. </p>


<p>To my knowledge, Gumbie is currently the only GUI builder for Jython, although I expect it will not be the last, as Jython seems ideally suited for the creation of Java GUIs. Jython does cause a certain performance penalty (mostly at startup), but the resulting delays are usually barely noticeable, while the improvements in productivity are dramatic.</p>

<p>While Gumbie is considerably more modest in its aim and scope than large packages such as Borland's JBuilder (<a href="http://www.borland.com/jbuilder/">http://www.borland.com/jbuilder/</a>), OpenStep/GNUstep (<a href="http://www.gnustep.org/">http://www.gnustep.org/</a>), or Glade (<a href="http://developer.gnome.org/arch/devel/glade.html">http://developer.gnome.org/arch/devel/glade.html</a>), it has its place when it comes to rapid application development. I am not aware of any faster way to create a fully functional GUI.</p>



<h3>Conclusion</h3>


<p>The current version of Gumbie does everything I originally wanted it to do. Nevertheless, I can see a number of useful future developments, the most immediate one being a factory for Swing components. Moreover, as none of the generic classes of Gumbie use Java classes, one might even build a factory that creates Tk widgets, resulting in programs that work interchangeably with Jython/Java or Python/Tk.</p>


<p>A large library of high-level GUI primitives (including, for example, a collection of dialogs for different purposes) would be another valuable addition, as would be a generalized description format for GUIs that consist of more than the current set of menus and tool bars.</p>

<p>In spite of its general "No bells and whistles" approach, Gumbie is highly extensible. If you want to extend Gumbie for your purposes, please do so.</p>



<h3>Acknowledgments</h3>


<p>The name "Gumbie" refers to those lovable rubber-booted characters from Monty Python's <i>Flying Circus</i>. I changed the spelling from "gumby" to "Gumbie" so it contains the letters G, U, and I. The class <i>MenuMaker</i> was originally based on the class <i>GuiMixIn</i> from the book <i>Programming Python</i>, by Mark Lutz (O'Reilly &amp; Associates, 1996), although there is hardly any resemblance in the current version. Gumbie exposes a bug in Apple's Java Runtime for Macs (MRJ). I am indebted to Finn Bock for his help in finding a workaround that makes Gumbie work on Macs.</p>


<p></p>

<p><b>DDJ</b></p>
<H4><A NAME="l1">Listing One</H4>


<pre># Menu bar for Netscape Communicator (excerpt)
File
    New
        Navigator Window
        New Message
        ...
    Open Page
    Save Frameset as
    ...
Edit
    Undo
    Redo
    ...
</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two </H4>


<pre># Overall structure of GUI descriptions
# begin gui
# comments are allowed at any point
Name
    NameOfClass
Type
    NameOfSuperclass
Init
    InitializationPackage
Menubar
    (MenuDefinition)*
Toolbar
    N
        (ButtonDefinition)*
    E
        (ButtonDefinition)*
    W
        (ButtonDefinition)*
    S
        (ButtonDefinition)*
#end
</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>
<H4><A NAME="l3">Listing Three </H4>


<pre># A simple editor
# begin gui
Name
    SimpleEditor
Type
    TextLayer
Menubar
    File
        Open    self.load   shortcut:o
        Save    self.save   enabled:self.notEmpty() shortcut:T
        ---            # --- stands for a separator
        Exit    self.exit   shortcut:X
    Edit    tearoff
        Clear   self.clear    enabled:self.notEmpty()
        Undo    self.undo   enabled:self.canUndo()
        Redo    self.redo   enabled:self.canRedo()
        ---
        Find        enabled:self.notEmpty()         shortcut:f
        Find_again  enabled:self.searchString!=None shortcut:F
        Replace     enabled:self.notEmpty()         shortcut:r
    Help
        Help_window self.help   shortcut:h
        About       self.about
Toolbar
    S
        Check_in    self.checkIn    enabled:self.hasChanged()
#end
</pre>
<P>
<A HREF="#rl3">Back to Article</A>
</P>
<H4><A NAME="l4">Listing Four  </H4>


<pre>#Automatically generated call-back function
#begin callback menuCallback_Find
    def menuCallback_Find(self,e=None):
        # callback for 'Find'
        self.infoBox('Find','You clicked on Find!','OK',0)
#end
</pre>
<P>
<A HREF="#rl4">Back to Article</A>
</P>
<H4><A NAME="l5">Listing Five </H4>


<pre>#Manually modified call-back function
#begin callback menuCallback_Find
    def menuCallback_Find(self,e=None):
        s=self.inputString('Find',
            'Enter search string:')
        if s!=None:
            if not self.find(s):
                self.infoBox('Not found',
                    'String '+s+' not found.')
#end
</pre>
<P>
<A HREF="#rl5">Back to Article</A>
</P>
<H4><A NAME="l6">Listing Six </H4>


<pre>#Automatically generated init environment
#begin init
# put class level variables here
#end
</pre>
<P>
<A HREF="#rl6">Back to Article</A>
</P>
<H4><A NAME="l7">Listing Seven</H4>


<pre>#Modified init environment with useful messages
#begin init
    helptext='Nobody expects the Spanish inquisition.'
    version='SimpleEditor 0.1'
#end</pre>
<P>
<A HREF="#rl7">Back to Article</A>
</P>


</body>
</html>
