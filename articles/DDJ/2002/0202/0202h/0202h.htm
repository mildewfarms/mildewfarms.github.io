<html>
<head>
<title>Feb02: Zope Page Templates</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Zope Page Templates</h1>
<p><i>Dr. Dobb's Journal</i> February 2002</p>
<h2>Defining dynamic content using attributes</h2>

<h3>By Amos Latteier</h3>

<I>
Amos Latteier is a programmer for Zope Corp. and coauthor (with Michel Pelletier) of The Zope Book (New Riders Publishing, 2001). He can be contacted at <a href="mailto:amos@zope.com">amos@zope.com</a>.</I>

<hr>

<p>Active Server Pages, Java Server Pages, PHP, Cold Fusion Markup Language, Server Side Includes, and other templating systems are designed to solve the problem of creating dynamic HTML and XML. They do so by embedding special tags in HTML or XML that are later evaluated to create dynamic content inserted into the template. However, systems such as these suffer from several flaws:</p>
<p></p>
<DDJADVERTISEMENT INLINE>

<ul>
  <li>Templates at best approximate the appearance of the final product. More often, templates are not valid HTML/XML, do not contain sample data, and can't be easily previewed in a browser.
  <li>It is difficult to use HTML/XML editors to create and modify templates since they are not always valid and/or complete HTML/XML. Some editors can support some template tags, but often you encounter problems.

  <li>It is difficult to change either the look-and-feel or dynamic content logic without breaking the other.

</ul>

<p>Zope Page Templates (ZPTs) are one solution to problems such as these. Rather than creating new tags that are interspersed with HTML/XML tags, ZPTs define dynamic content using attributes on existing HTML/XML tags. These attributes do not disturb the tags because the attributes belong to a different XML namespace.</p>

<p>Zope is an open-source web application platform for content management. It is freely available at <a href="http://www.zope.org/">http://www.zope.org/</a>. Zope Page Templates are available as an add-on for Zope 2.4 and will be included as a core component in Zope 2.5. </p>



<h3>How Page Templates Work</h3>


<p>Here's an example of how you might create a dynamic page title with ZPTs:</p>


<blockquote><p>
&lt;title tal:content="here/title"&gt;</p>

<p>
  Page Title &lt;/title&gt;</p>

</blockquote>

<p>The <i>tal:content </i>HTML attribute is a ZPT command. The <i>tal:</i> part is an XML namespace prefix (the XML namespace declaration is not included in this example). The attribute name <i>content </i>indicates that the template dynamically replaces the content of the <i>title</i> tag. The attribute value <i>here/title</i> provides information about the content to insert into the tag. When the template renders, it dynamically fetches the content and produces something like this:</p>

<blockquote><p>
&lt;title&gt;Keep Your Pigeons Flying&lt;/title&gt;</p>

</blockquote>

<p>Because ZPTs do not add tags or content to templates, they can be created with HTML/XML editors and previewed in web browsers. Browsers won't display ZPT attributes, and most editing tools leave them alone and aren't bothered by them. This lets you easily create and edit templates. Typically, designers create HTML templates using WYSIWYG tools that show how the page should look. Programmers then add ZPT attributes to selected tags to let them call application logic and insert dynamic content. Later, designers can change the templates without breaking them. </p>

<p>ZPTs let you insert content into tags, repeat tags, change tag attributes, test conditions, handle errors, and share page elements between templates. ZPTs do not let you write business logic or perform complex calculations. Your application takes care of the logic and data.</p>



<h3>Using Zope  Page Templates </h3>


<p>You can insert content with the <i>tal:content</i> and <i>tal:replace</i> attributes. The <i>tal:content</i> attribute lets you insert dynamic content into a tag:</p>


<blockquote><p>
&lt;p&gt;Hello, </p>

<p>
  &lt;b tal:content="user/getUserName"&gt;</p>

<p>
   Name&lt;/b&gt;.&lt;/p&gt;</p>

</blockquote><p>When rendered, this template evaluates to something like this:</p>


<blockquote><p>
&lt;p&gt;Hello, &lt;b&gt;Christine&lt;/b&gt;.&lt;/p&gt;</p>

</blockquote>

<p>Notice how the dummy content and <i>tal </i>attribute disappear from the rendered template. If you want to insert inline content without adding tags, use <i>tal:replace</i> like this:</p>

<blockquote><p>
&lt;p&gt;Hello, </p>

<p>
  &lt;span tal:replace="user/getUserName"&gt;</p>

<p>
  Name&lt;/span&gt;.&lt;/p&gt;</p>

</blockquote>

<p>This template might evaluate to something like this when rendered:</p>

<blockquote><p>
&lt;p&gt;Hello, Ricky.&lt;/p&gt;</p>

</blockquote>

<p>Notice here how the <i>span</i> tag is removed from the output. When using <i>tal:replace,</i> it's a good idea to use a <i>span </i>tag since it is not visible in a browser when previewing the template. This minimizes the visual differences between the template mock-up and rendered result.</p>

<p>You can also tailor your template's output by testing conditions with the <i>tal:condition</i> attribute. For example, if your application has a <i>creditManager</i> component, you could use it within a template like this:</p>

<blockquote><p>
&lt;p&gt; tal:condition=</p>

<p>
  "here/creditManager/exceededLimit"&gt;</p>

<p>  Sorry, you have exceeded your credit</p>

<p>
  limit.&lt;/p&gt;</p>

</blockquote>

<p>This template calls the <i>exceededLimit </i>method of the <i>creditManager</i> application component and, if the result is True, displays a warning message. If the condition is False, the entire tag is removed, along with all contained tags. You can use <i>tal:condition</i> to test the request and current user, as well as the application. Condition testing in ZPTs is rudimentary; there are no "else" or "case" controls. For more complex calculations, you should use an application logic component.</p>

<p>ZPTs let you repeat tags using the <i>tal:repeat</i> attribute. For example:</p>

<blockquote><p>
&lt;ul&gt;</p>

<p>
 &lt;li tal:repeat="person here/getNeighbors"&gt;</p>

<p> &lt;span tal:replace="person/name"&gt;</p>

<p> name&lt;/span&gt;,</p>

<p> &lt;span tal:replace="person/occupation"&gt;  occupation&lt;/span&gt;</p>

<p> &lt;/li&gt;</p>

<p>
&lt;/ul&gt;</p>

</blockquote>

<p>This template queries the <i>getNeighbors</i> application component for a sequence of results and creates an unordered list with one list item for each item in the results. The rendered template might look like this:</p>

<blockquote><p>
&lt;ul&gt;</p>

<p>
 &lt;li&gt;Dan Preece, Truck Driver&lt;/li&gt;</p>

<p> &lt;li&gt;Danielle Yates, Student&lt;/li&gt;</p>

<p> &lt;li&gt;Ken Bould, Architect&lt;/li&gt;</p>

<p>
&lt;/ul&gt;</p>

</blockquote>

<p>The <i>tal:repeat</i> attribute repeats its tag (and all contained tags) for each item of the sequence. It sets a local <i>repeat</i> variable for each iteration. In this example, the <i>repeat</i> variable is named <i>person</i>. You can name the <i>repeat</i> variable whatever you wish, which makes it easy to nest repeats inside each other.</p>



<h3>Template Expressions</h3>


<p>All <i>tal </i>attributes have associated value expressions. Unlike in HTML, <i>tal</i> attributes must have values. ZPTs use several types of expressions, including path expressions, string expressions, and Python expressions. </p>


<p>Path expressions let you refer to application components using path notation (slash separated steps); for example:</p>

<blockquote><p>
"here/title"</p>

<p>
"template/author"</p>

<p>"request/form/name"</p>

<p>
"root/objectValues"</p>

</blockquote>

<p>Paths begin with a known component and may include a series of steps from that component to subcomponents or component properties. The most common built-in components are:</p>


<ul>
  <li><i>here</i>. The application component on which the template is operating.
  <li><i>root</i>. The root application component.

  <li><i>template</i>. The template component.

  <li><i>container</i>. The container application component in which the template is located.

  <li><i>user</i>. The user currently viewing the template.

  <li><i>nothing</i>. The built-in Null component.

</ul>


<p>Depending on how ZPTs are implemented by your framework, there may be additional built-in components available.</p>

<p>String expressions let you create formatted strings with variable substitution. Variables are inserted using a dollar sign ($) followed by a variable name, optionally in brackets; for example:</p>

<blockquote><p>
"string:Just text."</p>

<p>
"string:&amp;copy; $year, by $author."</p>

<p>"string:Three ${vegetable}s, please."</p>

<p>
"string:Your name is ${user/getUserName}!"</p>

</blockquote>

<p>String expressions are often used with <i>tal:content</i> and <i>tal:replace</i> attributes.</p>

<p>Python expressions consist of short Python expressions that are evaluated using a security-restricted environment. You can use Python expressions to call application objects, perform string formatting, perform simple conditional tests, and more. Python expressions are not appropriate for complex calculations. For example:</p>

<blockquote><p>
"python:user.age &gt;= 18"</p>

<p>
"python:modules['random'].choice(range(100))"</p>

<p>
"python:here.objectIds(['Folder', 'File'])"</p>

</blockquote>

<p>Python expressions must be valid Python, so when they refer to built-in variables such as <i>modules</i>, <i>here</i>, and <i>user,</i> they must use Python's subobject or subitem notation, rather than path notation. Python expressions are particularly valuable for <i>tal:condition</i> and <i>tal:repeat</i> attributes.</p>



<h3>An Example</h3>


<p>To illustrate how you can use ZPTs, let's develop the presentation layer for a web application. Suppose you are developing a web application to sell pigeon supplies. The presentation layer of the application consists of a page for each item in your catalog along with some query pages. The application's logic consists of components to handle database access, purchasing, and other logic. Begin by mocking up a page for the example catalog item in <A NAME="rf1"><A HREF="0202hf1.htm">Figure 1</A>. <A NAME="rl1"><A HREF="#l1">Listing One</A> shows the HTML code for this page. HTML designers don't have to know anything about how the application works to build this mock-up.</p>


<p>Before attaching the mock-up to the application components, assume that application data is stored in a relational database using the <i>item</i> and <i>order</i> tables in <A NAME="rf2"><A HREF="0202hf2.htm">Figure 2</A>. Further suppose that you have application components to query these tables: <i>queryItem</i> returns a row from the <i>item</i> table given an item ID, and <i>queryOrder</i> returns one or more rows from the <i>order</i> table given an item ID (in Zope, these components would be implemented as ZSQL methods).</p>

<p>Use the <i>tal:content</i> attribute to make the template title dynamic: </p>

<blockquote><p>
&lt;title tal:content="here/name"&gt;</p>

<p>
Econo Feeder&lt;/title&gt;</p>

<p> ...</p>

<p>&lt;h1 tal:content="here/name"&gt;</p>

<p>
Econo Feeder&lt;/h1&gt;</p>

</blockquote>

<p>The <i>tal:content</i> attribute replaces the content of the <i>title</i> and <i>h1</i> tags with the results of an expression. The expression <i>here/name</i> refers to the <i>name</i> variable in the application context in which the template is used. In this case, I use this template in the context of a <i>queryItem</i> query, and so the variables <i>item_id</i>, <i>name</i>, <i>description</i>, and <i>image_url</i> will be available. (In Zope terms, the <i>here</i> context would be a result item from a ZSQL method query.)</p>

<p>The description of the item can be made dynamic the same way:</p>

<blockquote><p>
&lt;p tal:content="here/description"&gt;</p>

<p>
description goes here&lt;/p&gt;</p>

</blockquote>

<p>To create a dynamic image, change the <i>src</i> and <i>alt</i> attributes on the <i>img</i> tag. You do this with the <i>tal:attributes</i> attribute:</p>

<blockquote><p>
&lt;img src="econo-feeder.gif" alt="Econo Feeder" </p>

<p>
     tal:attributes="src here/image_url; </p>

<p>
         alt here/title"&gt; </p>

</blockquote>

<p>Using <i>tal:attributes</i>, you can dynamically replace tag attributes.</p>

<p>At this point, you've made the template completely dynamic except for the ordering information at the bottom of the page. To make the order information dynamic, call the <i>queryOrder</i> component and loop over the results printing one table row for each result:</p>

<blockquote><p>
&lt;tr tal:repeat="order here/queryOrder"&gt;</p>

<p>
 &lt;td tal:content="order/number"&gt;</p>

<p>   510-115&lt;/td&gt;</p>

<p> &lt;td tal:content="order/description"&gt;</p>

<p>   24 inch&lt;/td&gt;</p>

<p> ...</p>

<p>
&lt;/tr&gt;</p>

</blockquote>

<p>The <i>tal:repeat</i> attribute inserts a copy of its tag for each item in a sequence. In this case, the sequence is a list of rows returned by the <i>queryOrder</i> component. For each loop iteration, the <i>order</i> variable is set to the value of the current item. While this example shows how to insert the order number and description, how do you insert the price and order links? The answer is to use <i>tal:replace</i> and <i>tal:attributes</i>:</p>

<blockquote><p>
&lt;tr tal:repeat="item here/queryOrder"&gt;</p>

<p>
 &lt;td tal:content="item/number"&gt;</p>

<p>    510-115&lt;/td&gt;</p>

<p> &lt;td tal:content="item/description"&gt;</p>

<p>    24 inch&lt;/td&gt;</p>

<p> &lt;td&gt;$&lt;span tal:replace="item/price"&gt;</p>

<p>    7.95&lt;/span&gt;&lt;/td&gt;</p>

<p> &lt;td&gt;&lt;a href="orderItem?number=510-115"</p>

<p> tal:attributes="href </p>

<p>    string:orderItem?number=${item/number}"&gt;</p>

<p>Add to cart&lt;/a&gt;&lt;/td&gt;</p>

<p>
&lt;/tr&gt;</p>

</blockquote>

<p>To format the price as a number with a dollar sign, you can use the <i>tal:replace </i>attribute on a <i>span</i> tag (you could also use a string expression). This causes the <i>span</i> tag to be replaced by the price. </p>

<p>You can create a dynamic <i>href</i> attribute on the anchor tag using <i>tal:attributes</i>. In this case, you create the <i>href</i> attribute using a <i>string</i> expression rather than a <i>path</i> expression in order to construct a link to the <i>orderItem</i> application component.</p>

<p>That's it. You've connected an application template. <A NAME="rl2"><A HREF="#l2">Listing Two</A> is the completed template, which is as viewable and editable as HTML. As your application develops, you can change the template's connection to application components. This is the chief virtue of ZPTs &#151; programmers and designers can collaborate without disrupting each other.</p>



<h3>Sharing Presentation with Macros</h3>


<p>All but the simplest of applications require more than one template. For example, you might want templates to handle online ordering, templates to query the catalog, and templates to display company information. Application templates should share a certain amount of look-and-feel; for example, they all might have a common navigation bar, and similar page headers and footers. ZPTs can share elements using a <i>macro</i> facility. For instance:</p>


<blockquote><p>
&lt;b metal:define-macro="company"&gt;</p>

<p>
  King Super Pigeon Supply, Inc.&lt;/b&gt;</p>

</blockquote>

<p>The <i>metal:define-macro</i> attribute defines a macro consisting of the current tag and all contained tags. In this case, the macro is named <i>company </i>and consists of an HTML bold tag and some contained text. You can use a macro with the <i>metal:use-macro</i> attribute:</p>

<blockquote><p>
&lt;p&gt;As President of &lt;span metal:use-macro=              "container/master.html/macros/company"&gt;      company name&lt;/span&gt;, I welcome you</p>

<p>
      to our web site.&lt;/p&gt;</p>

</blockquote>

<p>When the template is rendered, the <i>span </i>tag is replaced with the <i>company </i>macro:</p>

<blockquote><p>
&lt;p&gt;As President of &lt;b&gt;King Super Pigeon</p>

<p>
   Supply, Inc.&lt;/b&gt;,I welcome you to </p>

<p>
     our web site.&lt;/p&gt;</p>

</blockquote>

<p>The path expression <i>container/master.html/macros/company </i>refers to a macro named "company" in a ZPT named <i>master.html</i>, which is located in the same folder as the current template. With macros, you can share page elements such as headers, footers, logos, and navigation bars.</p>

<p>You can customize macros using slots. Slots define parts of a macro that can be overridden when the macro is used. For example, you might want to have a shared navigation bar with a slot to allow local links:</p>

<blockquote><p>
&lt;p metal:define-macro="navigation"&gt;</p>

<p>
&lt;a href="/"&gt;Home&lt;/a&gt; |</p>

<p>&lt;a href="/Help"&gt;Help&lt;/a&gt; |</p>

<p>&lt;span metal:define-slot="local-nav"&gt;</p>

<p>&lt;a href="/PigeonInfo"&gt;Pigeon Info&lt;/a&gt; |</p>

<p>&lt;/span&gt;</p>

<p>&lt;a href="/AboutUs"&gt;About Us&lt;/a&gt;</p>

<p>
&lt;/p&gt;</p>

</blockquote>

<p>The <i>metal:define-slot</i> attribute declares its tag (and all contained tags) as a slot. When you use the "navigation" macro you may choose to override the <i>local-nav</i> slot using the <i>metal:fill-slot</i> attribute:</p>

<blockquote><p>
&lt;span metal:use-macro="container/master 	.html/macros/navigation"&gt;</p>

<p>
 &lt;span metal:fill-slot="local-nav"&gt;</p>

<p> &lt;a href="/PigeonInfo/Health"&gt;Pigeon 				Health&lt;/a&gt; |</p>

<p> &lt;a href="/PigeonInfo/Diseases"&gt;Pigeon 				Diseases&lt;/a&gt;|</p>

<p> &lt;/span&gt;</p>

<p>
&lt;/span&gt;</p>

</blockquote>

<p>This would render to the following HTML code:</p>

<blockquote><p>
&lt;p&gt;</p>

<p>
&lt;a href="/"&gt;Home&lt;/a&gt; |</p>

<p>&lt;a href="/Help"&gt;Help&lt;/a&gt; |</p>

<p>&lt;span&gt;</p>

<p> &lt;a href="/PigeonInfo/Health"&gt;Pigeon 				Health&lt;/a&gt; |</p>

<p> &lt;a href="/PigeonInfo/Diseases"&gt;Pigeon 			           Diseases&lt;/a&gt; |</p>

<p>&lt;/span&gt;</p>

<p>&lt;a href="/AboutUs"&gt;About Us&lt;/a&gt;</p>

<p>
&lt;/p&gt;</p>

</blockquote>

<p>Slots let you create collections of templates that share elements while still being unique. One use of macros and slots is to create macros that cover the entire page, leaving only a few slots to be filled by other macros. For example:</p>

<blockquote><p>
&lt;html metal:define-macro="page"&gt;</p>

<p>
 &lt;head metal:define-slot="head"&gt;</p>

<p> &lt;title tal:content="here/title"&gt;title&lt;/title&gt;</p>

<p> &lt;/head&gt;</p>

<p> &lt;body metal:define-slot="body"&gt;</p>

<p> &lt;p&gt;Body text&lt;/p&gt;</p>

<p> &lt;/body&gt;</p>

<p>
&lt;/html&gt;</p>

</blockquote>

<p>You can use macros and slots to create sophisticated relationships between templates. For example, slots can be defined inside other slots allowing fine-grained control over which page elements to override.</p>

<p>While these examples don't demonstrate it, macros are easily editable by HTML designers because they are expanded when a template is edited. The designer always sees the complete page, even if much of it comes from a macro. This lets designers always work with a valid and complete mock-up.</p>



<h3>Conclusion</h3>


<p>Zope Page Templates present a novel templating system that allows designers and programmers to collaborate on web applications without disturbing each other. ZPTs allow HTML (and XML) designers to work with complete and valid page mock-ups, while programmers get a simple but expressive system to bind templates to application content and logic. Unlike many other template systems, ZPTs do not provide a complete scripting environment. They adhere to the philosophy that logic, content, and presentation should be separate.</p>




<h3>Acknowledgment</h3>


<p>Thanks to Evan Simpson, Jim Fulton, and Michel Pelletier for their help on this article.</p>


<p></p>


<p><b>DDJ</b></p>

<H4><A NAME="l1">Listing One</H4>


<pre>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Econo Feeder&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Econo Feeder&lt;/h1&gt;
    &lt;img src="econo-feeder.gif" alt="Econo Feeder"&gt;
    &lt;p&gt;These feeders are made in Taiwan from a light-weight metal with
    plastic ends, and have an anti-spill edge to prevent the birds
    from kicking the feed out of the tray. They have a wooden rollbar
    to prevent the birds from sitting on them.&lt;/p&gt;
    &lt;table&gt;
    &lt;tr&gt;
      &lt;th&gt;Item Number&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;Price&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;510-115&lt;/td&gt;
      &lt;td&gt;24 inch&lt;/td&gt;
      &lt;td&gt;$7.95&lt;/td&gt;
      &lt;td&gt;&lt;a href="orderItem?number=510-115"&gt;Add to cart&lt;/a&gt;&lt;/td&gt;        
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;510-116&lt;/td&gt;
      &lt;td&gt;36 inch&lt;/td&gt;
      &lt;td&gt;$8.95&lt;/td&gt;
      &lt;td&gt;&lt;a href="orderItem?number=510-116"&gt;Add to cart&lt;/a&gt;&lt;/td&gt;        
    &lt;/tr&gt;
    &lt;/table&gt;
  &lt;/body&gt;
&lt;/html&gt;

</pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>
<H4><A NAME="l2">Listing Two</H4>


<pre>&lt;html&gt;
  &lt;head&gt;
    &lt;title tal:content="here/title"&gt;Econo Feeder&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1 tal:content="here/title"&gt;Econo Feeder&lt;/h1&gt;
    &lt;img src="econo-feeder.gif" alt="Econo Feeder"
         tal:attributes="src here/image_url; alt here/title"&gt;
    &lt;p tal:content="here/description"&gt;These feeders are made in Taiwan
    from a light-weight metal with plastic ends, and have an
    anti-spill edge to prevent the birds from kicking the feed out of
    the tray. They have a wooden rollbar to prevent the birds from
    sitting on them.&lt;/p&gt;
    &lt;table&gt;
    &lt;tr&gt;
      &lt;th&gt;Item Number&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;Price&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr tal:repeat="item here/queryOrder"&gt;
      &lt;td tal:content="item/number"&gt;510-115&lt;/td&gt;
      &lt;td tal:content="item/description"&gt;24 inch&lt;/td&gt;
      &lt;td&gt;$&lt;span tal:replace="item/price"&gt;7.95&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href="orderItem?number=510-115"
             tal:attributes="href string:orderItem?number=${item/number}"&gt;
             Add to cart&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/table&gt;
  &lt;/body&gt;
&lt;/html&gt;


</pre>
<P>
<A HREF="#rl2">Back to Article</A>
</P>


</body>
</html>
