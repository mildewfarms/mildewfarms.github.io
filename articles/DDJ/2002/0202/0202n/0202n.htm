<html>
<head>
<title>Feb02: Algorithm Alley</title>
</head>

<body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000">
<!--Copyright &#169; Dr. Dobb's Journal-->

<h1>Yet Another Record Selection Algorithm</h1>
<p><i>Dr. Dobb's Journal</i> February 2002</p>

<h3>By William R. Mahoney</h3>

<I>
William is the senior vice president of Technical Support and a part-time computer science faculty member at the University of Nebraska at Omaha. He can be contacted at <a href="mailto:bill@techsi.com">bill@techsi.com</a>.</I>

<hr>

<p>Suppose you are asked to select a random sample of, say, 500 records from a file of known length. In the article "Reservoir Sampling" (<i>DDJ</i>, January 2001), the late Paul Hultquist and I discussed one possible method that lets you select the 500 records from a file of unknown length. Certainly, you could pretend that you do not know the length of the file and use reservoir sampling. However, knowing the length of the file eliminates the need for the reservoir and also lets you select the records in the order of their appearance in the file. The latter is important as it eliminates any possible need to sort the sample file when you are done.</p>
<p>The method for doing this is to select the records from the file, one at a time, in such a way that the likelihood for selection is increased if you are behind schedule and decreased if you are ahead of schedule. Although this necessarily changes the prob- ability of selection for a record as the algorithm runs, it is not difficult to see that the a priori probability of selection for a record in the file is the same for each record. </p>
<DDJADVERTISEMENT INLINE>

<p>For example, suppose that the file contains <i>N</i><i><sub>T</sub></i> total records, of which you want to retrieve <i>N</i> of them, where usually 0<i>&lt;N&lt;N</i><i><sub>T</sub></i>. Suppose that <i>s</i> is the number of records selected thus far as the algorithm runs. This value is initially zero and ends up, you hope, at <i>N</i>. Let <i>k</i> be the file position. It starts at zero and is incremented for each record through the last record, which is number <i>N</i><i><sub>T</sub></i>-1.</p>

<p>At each record, that particular part of the file may be added to your <i>N</i> elements with a probability of <i>(N-s)/(N</i><i><sub>T</sub></i><i>-k)</i>. That is, the number of records that you still need, over the number of records that are remaining in the file. If a random number <i>R</i> is chosen, and if <i>R&lt;(N-s)/(N</i><i><sub>T</sub></i><i>-k)</i>, you include the record in the output file. The algorithm is straightforward, as <A NAME="rl1"></a><A HREF="#l1">Listing One</A> shows.</p>

<p>However, you really want to assure yourself that the a priori likelihood for selecting each record from the file is the same.</p>

<p>The first record you encounter will have <i>s=</i>0 and <i>k=</i>0, so that the likelihood for picking the initial record is just <i>N/N</i><i><sub>T</sub></i>. There is nothing that is conditional on the first record being selected. After deciding whether <i>R&lt;(N/N</i><i><sub>T</sub></i><i>)</i>, you increment <i>s</i> if it was selected, and increment <i>k</i> regardless.</p>

<p>The probability of including the second record, though, depends on whether we included the first record. It may be <i>N/(N</i><i><sub>T</sub></i>-1<i>) </i>if it was not included, or it may be <i>(N-</i>1<i>)/(N</i><i><sub>T</sub></i>-1<i>)</i> if it was. The total probability of some event <i>E</i>, if it relies on some other events <i>A,B,C,...</i> is: </p>

<blockquote><p>
P(E)=P(E|A)P(A)+P(E|B)P(B)+P(E|C)P(C)...</p>

</blockquote><p>where <i>P(E|A)</i> is the probability that <i>E</i> happens assuming <i>A</i> happened. So this is just the total of the probabilities for all of the preceding events. If we think about the second record in the file, it has probability: </p>


<blockquote><p>
P(E)=P(E|A)P(A)+P(E|B)P(B)</p>

</blockquote><p>and the event <i>A,</i> in this case, is the first record having been chosen, while event <i>B</i> is the first record having not been chosen. The first record was chosen with probability <i>N/N</i><i><sub>T</sub></i> and was not chosen with probability 1-<i>(N/N</i><i><sub>T</sub></i><i>).</i> If it was chosen, then <i>(N-s)/(N</i><i><sub>T</sub></i>-<i>k)</i> is equal to <i>(N-</i>1<i>)/ (N</i><i><sub>T</sub></i>-1<i>)</i>, and if it was not chosen, <i>(N-s)/ (N</i><i><sub>T</sub></i>-<i>k)</i> is equal to <i>N/(N</i><i><sub>T</sub></i>-1<i>)</i>. Thus, <A NAME="re1"></a><A HREF="0202ne1.htm">Example 1</A>(a), which is <i>N/N</i><i><sub>T</sub></i><i>.</i></p>


<p>The third record is even more complex. There are now three cases to consider: The first two records were chosen (call that event <i>A</i>), one of the first two was chosen (event <i>B</i>), and neither were chosen (event <i>C</i>). Remember that the likelihood of event <i>B</i> is double, since you could have picked the first but not the second, or the second but not the first; see <A NAME="re1"></a><A HREF="0202ne1.htm">Example 1</A>(b). (Trust me on this!) </p>

<p>This might convince everyone that the selection probability for each record is <i>N/N</i><i><sub>T</sub></i><i>.</i> But it leaves open the possibility that you could pick fewer than <i>N</i> records from the file if things work out wrong at the end. The algorithm needs to terminate when <i>s=N</i>, which may happen early. </p>

<p>But you might think it could also happen late; for example, you may need two more records when you get to the last two records in the file. Maybe you pick them, maybe you don't, leaving your desired sample with too few records.</p>

<p>But if there are only two left, and you need two more &#151; the second to last record is chosen with a probability of<i> (N-s)/(N</i><i><sub>T</sub></i>-<i>k)=</i>2/2=1.0. It is certainly picked. This increments <i>s</i> and <i>k</i>. And then the last record is chosen with a probability of <i>(N-s)/(N</i><i><sub>T</sub></i>-<i>k)</i>=1/1=1.0,<i> </i>so it is also picked. (As an aside, adding the last record to your collection happens with a probability of <i>N/N</i><i><sub>T</sub></i>, adding the last two happens with a probability of <i>(N/N</i><i><sub>T</sub></i><i>)</i>2, the last three are <i>(N/N</i><i><sub>T</sub></i><i>)</i><sup>3</sup>, and so on. The selection criterion <i>(N-s)/(N</i><i><sub>T</sub></i>-<i>k)</i> tends to anticipate whether records are needed and increase or decrease the likelihood that they will be chosen.)</p>

<p>Finally, asking for <i>N</i> records out of a file with <i>N</i><i><sub>T</sub></i> records where <i>N=N</i><i><sub>T</sub></i>, naturally causes each record to be chosen, since <i>(N-s)=(N</i><i><sub>T</sub></i>-<i>k)</i> for the entire length of the run. Each record is picked with a probability of 1.0. And if <i>N&gt;N</i><i><sub>T</sub></i>, the probability is greater than 1.0 (how about those odds!), causing all records to be selected but leaving the number short of <i>N</i>. If this is not a desired behavior, a simple check to see that <i>N&lt;=N</i><i><sub>T</sub></i> is sufficient.</p>

<p>So you have a simple method for selecting the elements from the file. Pick each with probability <i>(N-s)/(N</i><i><sub>T</sub></i>-<i>k)</i> and it is guaranteed to work, even if it is a random algorithm.</p>



<p><b>DDJ</b></p>
<H4><A NAME="l1"></a>Listing One</H4>


<pre>/* =================================================================
random record selection demo
Author: Bill Mahoney
================================================================== */
#include &lt;stdlib.h&gt; // for rand/random
#include &lt;iostream&gt;
const int N_sub_t = 967; // Some "known length" for our "file"
struct file_s {
              int data; // the "data" in the "file"
              char more[ 3 ]; // "More" data in the "file"
              };
void sample( file_s *file, file_s *selected, int N );
int main()
{
     int N, i;
     file_s *file = new file_s[ N_sub_t ]; // pretend file
     file_s *selected; // The ones we pick at random
     // Fill up the file with data; of course, for a real application one 
     // would be accessing records from a file in the "select" function
     // below; the file would already have data.
     for( i = 0; i &lt; N_sub_t; i++ )
        // Just number them sequentially so that
        // it is easy to see which are selected.
        file[ i ].data = i;
    // Ask how many the user wants; we'll assume for now that 0 &lt;= N &lt; N_sub_t
    cout &lt;&lt; "How many records do you need? ";
    cin &gt;&gt; N;
    cout &lt;&lt; "Selecting " &lt;&lt; N &lt;&lt; " elements...\n";
    selected = new file_s[ N ];
    // Select the sample of N records from N_sub_t
    sample( file, selected, N );
    for( i = 0; i &lt; N; i++ )
        cout &lt;&lt; selected[ i ].data
             &lt;&lt; ( ( ( i + 1 ) % 5 == 0 ) ? "\n" : " " );
    cout &lt;&lt; "Done!\n";
    delete [] selected;
    delete [] file;
    return( 0 );
}

/* =================================================================
sample
Randomly select N records from the "file" and copy records into "selected".
================================================================= */
void sample( file_s *file, file_s *selected, int N )
{
    int s, k; // See article
    float R; // probability to test
    float limit; // (N-s)/(N_sub_t-k)
    for( k = s = 0; k &lt; N_sub_t; k++ )
    {
       // random(3) returns 0..RAND_MAX; the older C function rand(3) would 
       // also work. Since the algorithm is explained in terms of floating 
       // point, we will do this program to match. Integer math would, 
       // of course, be faster.
       R = ( (float) random() ) / ( (float) RAND_MAX );
       limit = ( (float)( N - s ) ) / ( (float)( N_sub_t - k ) );
       if ( R &lt; limit )
           // R &lt; (N-s)/(N_sub_t-k) -- include the record.
           selected[ s++ ] = file[ k ];
       if ( s == N )
          break; // get out early
    }
}

   </pre>
<P>
<A HREF="#rl1">Back to Article</A>
</P>


</body>
</html>
