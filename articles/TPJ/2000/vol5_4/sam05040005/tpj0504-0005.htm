<html><head><title>Lazy Text Formatting</title></head><body bgcolor="ffffff"><h1>Lazy Text Formatting</h1><p><i>Damian Conway</i> <br><span class="date">TPJ Issue #20</span><p><table border="1" cellspacing="0" cellpadding="5" bordercolor="#000000" bgcolor="#cccc99">  <tr>     <td><b>Packages Used</b> </td>    <td>&nbsp;</td>  </tr>  <tr valign="top" align="left">     <td>Text::Autoformat </td>    <td align="right">CPAN</td>  </tr></table><p>Don't you just <i>hate</i> getting an email that's been for<br>  matted <br>  for the wrong number of columns? It's an unprovoked ass<br>  ault<br>  on your poor visual cortex. And it's a thoughtless insult, to<br>  o.<br>  It screams: "Hey, you aren't even worth the eight keystr<br>  okes<br>  it would take me to correctly set my editor's autowrap!"<p><p> &gt; And, of course, it only gets worse when quoted email is <br>  involved. &gt; Even when someone tries to do the right <br>  thing, they just end &gt; up frying more of your neurons as<br>  you attempt to untangle &gt; the mess that most text formatters<br>  make of the standard &gt; quoting conventions. It's <i>no</i> fun trying<br>  to separate the meaning &gt; from the massage.<p><p>What the world needs is a text reformatter that looks at the  contents -- and context -- of the ASCII it's munging, and  then Does The Right Thing automagically.<p><p><b>Text::Autoformat<p></b><p>And that's exactly what the Text::Autoformat module gives you. Specifically,   it provides a subroutine named <code>autoformat</code> that wraps text to fixed   margins. However, unlike other text wrapping modules (such as Text::Wrap, Text::Correct,   or Text::Reflow), <code>autoformat</code> reformats its input by analyzing the   text's structure: identifying and rearranging independent paragraphs by looking   for visual gaps, list bullets, changes in quoting, centering, and underlining.<p><p> If you're happy to live with <code>autoformat</code>'s reasonable defaults,   then reformatting a single paragraph (taking it from <code>STDIN</code> and   printing it to <code>STDOUT</code>) is no more complicated than this: <p><pre>    use Text::Autoformat;    autoformat;</pre><p> The default width of the reformatted text is from column 1 to column 72, but   it's very easy to change that (and a plethora of other defaults) by giving <code>autoformat</code>   the appropriate options:<p><pre>    autoformat {left=&gt;8, right=&gt;64};</pre><p>Or the equivalent, but often more convenient, alternative:<p><pre>    autoformat {left=&gt;8, width=&gt;57};</pre><p> If <code>autoformat</code>'s first argument isn't a hash reference, that argument   is stringified and used as the text to be formatted. For example:<p><pre>    autoformat $msg_text;</pre><p> Likewise, if it's called in a non-void (scalar or list) context, <code>autoformat</code>   returns the formatted text, rather than printing it to <code>STDOUT</code>.<p><p> Normally, <code>autoformat</code> only reformats the first paragraph it encounters,   and leaves the remainder of the text unaltered. This behavior seems odd initially,   until you realize that the single most common use of <code>autoformat</code>   is in the following one-liner:<p><pre>    perl -MText::Autoformat -e'autoformat'</pre><p> And that the obvious thing to do with this one-liner is to map it onto a convenient   keystroke in your text editor, thereby providing intelligent, single-key, paragraph-at-a-time   reformatting. For example, if you're a vi user, you might add this to your <code>.exrc</code>   file:<p><pre>    map f !G perl -MText::Autoformat -eautoformat</pre><p>That is: map the f key to grab every line from the current editing position to the end of the file and filter it through Perl. Then, to provide that filter, the Text::Autoformat module is loaded and autoformat is called.<p><p> If <code>autoformat</code>'s default were to reformat everything it was sent,   then you'd have to write:<p><pre>    map f !} perl -MText::Autoformat -eautoformat</pre><p>and you'd be stuck with vi's <i>much</i> less sophisticated understanding on what constitutes a paragraph. More on that shortly.<p><p> Of course, the real power of the module is best seen when it operates on multiple   paragraphs simultaneously. To convince <code>autoformat</code> to do that --   to reflow every paragraph you send it -- you need to ask explicitly, with another   option:<p><pre>    autoformat { all=&gt;1 };</pre>Which leads to the obvious "just-fix-it-all-up-for-me-would-ya" editor macro:<p><pre>    map F !Gperl -MText::Autoformat -eautoformat{all=&gt;1}</pre><b><p>What is this thing called "paragraph"?<p></b><p>The <code>autoformat</code> subroutine gives the illusion of understanding   the structure of an input text because it has a series of very good heuristics   (i.e. guesses) for locating and separating paragraphs.<p><p> Most text formatters -- and many text editors -- define a paragraph to be   a sequence of characters terminated by two or more consecutive newlines. Indeed,   this is Perl's notion of a paragraph (which you can grab with a single <code>readline</code>   by setting the <code>$/</code> variable to an empty string, as described in   the <i>perlvar</i> man page).<p><p> That's very annoying, because it doesn't cope with how real people write paragraphed   text. Real people leave spaces and tabs on "empty" lines. Real people (and many   web browsers) bunch up lists of bulleted and numbered points with no whitespace   at all between them. Real people quote email messages, which transforms formerly   empty lines into non-empty <code>\n\t&gt;\n</code> sequences.<p><p> Because real people do such things, <code>autoformat</code> understands all   these notions of a paragraph. Even when they're all used at once. Even when   they're used inside one another (for example, quoting a list of bulleted points).<p><p><b>Quote, unquote, requote...<p></b><p>For example, one of Text::Autoformat's most useful paragraphing heuristics is that any sequence of lines beginning with standard "quoter" characters is a single piece of quoted text, in which the quoters should be preserved and only the text to the right of them reflowed.<p><p>The standard quoters that autoformat recognizes are  nested combinations of the characters:<p><pre>        !  #  %  =  |  :  &gt;</pre><p>Angle brackets can also be preceded by alphabetic characters. So, for example, autoformat would take a series of paragraphs like this:<p><pre>        &gt; ! &gt; calling map in a void context is the sign        &gt; ! &gt; of a sick mind        &gt; !        &gt; ! I don't see why.        &gt; Me either, I regularly do it and I'm still        &gt; quite sane. I often split in a void context        &gt; too, but there's a bug in Perl that seems to        &gt; cause that to mess up $_[0], $_[1], etc.        &gt; ! &gt; Sigh. Have you bothered to read the man        &gt; ! &gt; page on split??? Yes, I know I wrote this        &gt; ! &gt; before that reply: it's a miracle.</pre><p>and reformat them like so:<p><pre>        &gt; ! &gt; calling map in a void context is        &gt; ! &gt; the sign of a sick mind        &gt; !        &gt; ! I don't see why.        &gt; Me either, I regularly do it and I'm        &gt; still quite sane. I often split in a        &gt; void context too, but there's a bug         &gt; in Perl that seems to cause that to         &gt; mess up $_[0], $_[1], etc.        &gt; ! &gt; Sigh. Have you bothered to read        &gt; ! &gt; the man page on split??? Yes, I        &gt; ! &gt; know I wrote this before that        &gt; ! &gt; reply: it's a miracle.</pre><p> And that's the whole point. By understanding the structural conventions of   typical plaintext, <code>autoformat</code> can reflow it logically, rather than   physically.<p><p><b>Number one (with a bullet)<p></b><p>Often plaintext will include lists that are either bulleted with punctuation characters, simply numbered (i.e. 1., 2., 3., etc.), or hierarchically numbered (1, 1.1, 1.2, 1.3, 2, 2.1. etc.)  Whether or not it is physically separated from each of its neighbors, each bulleted item is implicitly a separate paragraph and needs to be formatted individually, with the appropriate indentation.<p><p> <code>autoformat</code> takes care of that renumbering, and can also detect   unordered bullets (the characters: <code>* . + -</code>), special markers that   ought to be outdented (such as: <code>NB: p.s., etc.</code>), Arabic and Roman   numerals, single alphabetic letters, and hierarchical combinations of these   (for example: <code>2.a(ix)</code>).<p><p>Besides adjusting the left margin so that the marker is outdented from the paragraph text, autoformat renumbers each numbered point sequentially (using the first number as its starting point). For example, given the following text:<p><pre>        You're wrong for the following reasons:                1. I'm right.                1.a. I'm *always* right                1. Even if you were right, you have the order        wrong.                1.x. You suggested:                        &gt; D. Analyze the problem carefully                        &gt; C. Design the algorithm appropriately                        &gt; A. Code solution systematically                        &gt; E. Test thoroughly                        &gt; B. Ship eventually                1.n. The proper sequence is:                        A. Code solution expediently                        B. Ship immediately                        E. Test sporadically (charge user for        maintenance)                        F. Release "upgrade" periodically (charge         user again)</pre><p> <code>autoformat</code> <code>{all =&gt; 1}</code> produces:<p><pre>        You're wrong for the following reasons:                1. I'm right.                1.a. I'm *always* right                2. Even if you were right, you have the                   order wrong.                2.a. You suggested:                        &gt; D. Analyze the problem carefully                        &gt; C. Design the algorithm                        &gt;    appropriately                        &gt; A. Code solution systematically                        &gt; E. Test thoroughly                        &gt; B. Ship eventually                2.b. The proper sequence is:                        A. Code solution expediently                        B. Ship immediately                        C. Test sporadically (charge user                            for maintenance)                        D. Release "upgrade" periodically                           (charge user again)</pre><p> Notice that <code>autoformat</code> got the hierarchical ordering correct,   and that it <i>didn't</i> renumber the quoted list, even though it reflowed   the text within the quoted section. That makes sense, since renumbering the   quoted list might change its meaning in a way that reformatting wouldn't.<p><p> The <code>autoformat</code> suroutine also handles renumbering of lists marked   with Roman numerals. For example, the list:<p><pre>   Examples of the five declensions are:           i. terra, terra, terram, terrae, terrae,    terra           v. modus, mode, modum, modi, modo, modo           x. nomen, nomen, nomen, nominis, nomini,   nomine           ix. portus, portus, portum, portus, portui,   portu           mmmclxiv. dies, dies, diem, diei, diei, die</pre><p>would be reformatted thus:<p><pre>   Examples of the five declensions are:             i.	terra, terra, terram, terrae,            	terrae, terra            ii.	modus, mode, modum, modi,               	modo, modo           iii.	nomen, nomen, nomen, nominis,              	nomini, nomine            iv.	portus, portus, portum, portus,              	portui, portu             v.	dies, dies, diem, diei, diei,               	die</pre><p>autoformat is even smart enough to right-justify the numbers, so as to align the paragraph bodies cleanly.<p><p>Of course automatically handling lists of letters <i>and</i> lists of Roman numerals presents an interesting challenge. A list such as:<p><pre>    I. Put cat in box.    M. Close lid.    P. Activate Geiger counter.</pre><p>should obviously be reordered as I...J...K, whereas:<p><pre>    I. Put cat in box.    M. Close lid.    XLI. Activate Geiger counter.</pre><p>should clearly become I...II...III. <p><p>But what about:<p><pre>    I. Put cat in box.    M. Close lid.    L. Activate Geiger counter.</pre><p> The <code>autoformat</code> subroutine resolves this ambiguity by always interpreting   a list with alphabetic bullets as being English letters, unless the full list   contains only valid Roman numerals, and at least one of those numerals is two   or more characters long. So the final example above would become I...J...K --   as you might have expected.<p><p><b>Famous next words<p></b><p>Literary quotations present a different challenge from quoted email. A typical formatter would re-render the following quotation:<p><pre>      "We are all of us in the gutter, but some of us     are looking at the stars"                                                                     -- Oscar Wilde                                       English playwright</pre><p>like so:<p><pre>      "We are all of us in the gutter, but some      of us are looking at the stars" -- Oscar      Wilde English playwright</pre><p>But autoformat recognizes the quotation structure and  preserves both indentation and attribution:<p><pre>      "We are all of us in the gutter,       but some of us are looking        at the stars"                               -- Oscar Wilde                                  English playwright</pre><p>It even outdents the leading quotation mark nicely.<p><p><b>Suffer not the widow to abide alone<p></b><p>Did you notice that in the previous example, <code>autoformat</code> broke   the second line earlier than it needed to? It did that because, if the full   margin width had been used, the formatting would have left the last line oddly   short:<p><pre>      "We are all of us in the gutter,       but some of us are looking at the        stars"                               -- Oscar Wilde                                  English playwright</pre><p> Typographical misdemeanors of this type (known as <i>widows</i>) are heavily   frowned upon in typesetting circles. They look ugly in plaintext too, so <code>autoformat</code>   avoids them with a kind of Dickensian artful dodge: stealing extra words from   earlier lines in a paragraph, to provide the widowed word with adequate company.<p><p>The heuristic used is that final lines must be at least ten characters long. If the last line is too short, the paragraph's right margin is reduced by one column, and the paragraph is reformatted. This process iterates until either the last line exceeds nine characters or the margins have been narrowed by 10% of their original separation. In the latter case, the reformatter gives up and just uses its original formatting.<p><p><b>Justification and sentencing<p></b><p>The <code>autoformat</code> subroutine can also take an option that tells it   how the reformatted text should be justified. For example:<p><pre>    autoformat {justify =&gt; 'right'};</pre><p> The alternative values for this option are: <code>'left' </code>(the default),   <code>'right'</code>, <code>'centre'</code> (or<code> 'center'</code>), and   <code>'full'</code>. <p><p>Full justification is interesting in a fixed-width medium like plaintext because it usually results in uneven spacing between words. Typically, text formatters provide this by distributing the extra spaces into the first available gaps of each line:<p><pre>    R3&gt; Now  is  the  Winter  of our discontent made    R3&gt; glorious Summer by this son of York. And all    R3&gt; the  clouds  that  lour'd  upon our house In    R3&gt; the deep bosom of the ocean buried.</pre><p> This produces an odd visual effect, so <code>autoformat</code> reverses the   strategy and inserts extra spaces at the end of lines (which most readers find   less disconcerting):<p><pre>    R3&gt; Now is the Winter  of  our  discontent  made    R3&gt; glorious Summer by this son of York. And all    R3&gt; the clouds that lour'd  upon  our  house  In    R3&gt; the deep bosom of the ocean buried.</pre><p> Even if explicit centering is not specified via the <code>{justify =&gt; 'centre'}</code>   option, <code>autoformat</code> will automatically detect centered paragraphs   and preserve their justification. It does this by examining each line of the   paragraph and asking itself: "If this line were part of a centered paragraph,   where would the midpoint have been?"<p><p> By making the same estimate for every line in the paragraph, and then comparing   the estimates, <code>autoformat</code> can deduce whether all the lines are   centered with respect to the same axis of symmetry (with an allowance of &#177;1   to cater for the inevitable integer rounding). If a common axis of symmetry   is detected, <code>autoformat</code> assumes that the lines are supposed to   remain centered, and automatically switches on center-justification for that   paragraph.<p><p> You can also optionally perform case conversions on the text being processed,   using the case option. The alternatives are <code>'upper'</code>, <code>'lower'</code>,   <code>'title'</code>, and <code>'highlight'</code>. Title casing capitalizes   the first letter of each word:<p><pre>    The Strange And Gruesome Case Of The Tab-indented     Python.</pre><p>and highlight casing does the same, except that it ignores  trivial words:<p><pre>    The Strange and Gruesome Case of the Tab-indented     Python.</pre><p> A fifth alternative is <code>{case =&gt; 'sentence'}</code>. This mode attempts   to produce correctly-cased sentences: first letter in upper-case, subsequent   words in lower-case (unless that word is originally in mixed case). For example,   the paragraph:<p><pre>    POVERTY, MISERY, FRIENDLESSNESS, ETC. are ever    the lot of the VisualBasic hacker. 'tis an    immutable law of Nature! Whom the GODS would    DESTROY, they FIRST force to code Word MACROS.</pre><p> under <code>{case =&gt; 'sentence'}</code> becomes:<p><pre>    Poverty, misery, friendlessness, etc. are ever    the lot of the VisualBasic hacker. 'Tis an    immutable law of Nature! Whom the gods would    destroy, they first force to code Word macros.</pre><p> Note that <code>autoformat</code> is clever enough to recognize that the period   in abbreviations such as <i>etc.</i> is not a sentence terminator, and that   the first capitalizable letter of <i>'tis</i> is the <i>t</i>, and that words   like <i>VisualBasic</i> and <i>Nature</i> should retain their existing capitalizations.<p><p><b>Once and future features<p></b><p>There is an endless list of other smart things Text::Autoformat could be extended to do. Here's a short preview of some coming attractions...<p><p><b>Columns.</b> A future release of Text::Autoformat will recognize columns within a paragraph and allow the user to independently control their layout and justification, even under margin adjustments. For example, given:<p><pre>	Name	Mark	Comment	====	====	=======	Pat	99	Unusually high score. Suspect?	Kim	72	Solid performance	Leslie	51	Just scraped through this time</pre><p>you'll be able to call:<p><pre>    autoformat { justify =&gt; ['left', 'centre', 'left'],                 width  =&gt; [undef, undef, 20] };</pre><p>and produce:<p><pre>	Name	Mark	Comment	====	====	=======	Pat	99	Unusually high			score. Suspect?	Kim	72	Solid performance	Leslie	51	Just scraped through			this time</pre><p> <b>Transliteration.</b> <code>autoformat</code> will eventually provide smart   8-to-7 bit transliteration (the way the Text::StripHigh module does now), so   that text like:<p><pre>        &yen; This example's &copy; Erwin Schr&ouml;dinger          N42(&#177;1) Un&Ccedil;ertaint&eacute; Stra&szlig;e, &Oslash;stland.</pre><p>could be transformed into this:<p><pre>        * This example's (c) Erwin Schroedinger,          No42(+/-1) Uncertainte' Strasse, Ostland.</pre><p> <b>Mail headers.</b> <code>autoformat</code> was originally developed as a   lazy way to clean up incoming and outgoing email. It does that exceptionally   well, so long as you keep it away from the headers. Sendmail doesn't take kindly   to <code>autoformat</code>'s misguided efforts with them:<p><pre>        To: Jon Orwant        &lt;orwant@oreilly.com&gt; From:        damian@conway.org Subject: Re:        When's the next meeting of the        Secret Perl Cabal? References:        &lt;200011100411.PAA17166@indy05-        .csse.monash.edu.au&gt;</pre><p>A future version of the module will detect mail headers and either leave them alone or wrap them intelligently.<p><p> <b>Mark-up.</b> Another irritation is that <code>autoformat</code> blindly   attempts to reformat HTML, pod, Perl code, and many other things it should just   ignore. The very next release of Text::Autoformat will have a "leave-it-the-hell-alone"   option that causes autoformat to disregard any (non-bulleted) text that is indented.   Later versions may also be able to automatically diagnose marked-up sections   of text -- and perhaps code examples -- and just magically skip them.<p><p> <b>Configurability.</b> Currently, the list of abbreviations and "stop words"   that <code>autoformat</code> knows about is fixed, as are the set of quoter   characters, and list bullets. This should obviously be user-configurable, and   will be in a forthcoming release.<p><p><b>How much would you expect to pay?<p></b><p>Meanwhile, despite these niggles, Text::Autoformat does a remarkably good job at what it was designed for: making ASCII text reformatting as easy as (in)humanly possible.<p><p><p>So you no longer have <i>any</i> excuse for sending email that slops over the margin.<p><p><i>_ _END_ _<p></i><p><i><p></i><p><i>Damian Conway is an autonomous semi-intelligent coding device owned and operated on behalf of the Perl community by Tony Bowden, Marjan Bace, Kit Cosper, Chris DiBona, Randal L. Schwartz, Jon Orwant, Piers D. Cawley, Joel Hall, Stephen Barton, Leon Brocard, Dave Cross, Garrett Goebel, Andy Wardley, Kevin Lenzo, Richard Clamp, Daniel Chetlin, Scott Drassinower, Marcel Grunauer, Greg Mccarroll, Ken McGlothlen, Jasmine Merced, Dr. Karl Kleine, Chris Heller, Bob Badour, Brian Katzung, Robert Partington, James Carter, Collin Starkweather, Kyle Drake, Gregory Marton, Daniel Yacob, Richard Rodger Jostraca, Alan Jaffray, Jeffrey Seifert, Michael Graham, Warren Young, Derek Lane, Clark Cooper, Eric Larson, Tytus Mapp, Paul Sherman, Colin Meyer, Kenneth Robson, Richard Dice, Rand Bamberg, Ramki Balasubramanian, James Lee Evanston, Robin Houston, Martin Heinsdorf, Christopher Taranto, Lindsay Davies, Matt Gittins, Anton Guselnikov, Dan Boorstein, Jon Orwant, Reinhard Engels, Adekunle Olonoh, Michael E. Meyers, Christopher Conrad, Jonathan Stowe, The Long Valley Perl Mongers, Michael King, David Rolsky, Amanda Gilbert, Steven McDougall, Jim Baker, Alex Fiore, Neil Kandalgaonkar, Mark Zweifel, Michael Smith, Matija Grabnar, Stuart McDow, Michael R&ouml;schter, Bruno Nicoletti, Kurtis DeMaagd, David Schmitt, Larry Emmett, Darren W. Aldredge, Dean Wilson, Chris Winters, Terry Nightingale, Benjamin Holzman, Jonathan King, Per Jonas Br&Oslash;ms&Oslash; Nielsen, T. Alex Beamish, Kellan Elliott-McCrea, Laurent Julliard, James Donnelly, Paul Trader, Casper Warming, Alvin and Jenna Sim, Mike Lavin, Brad Bowman, Jacob Morzinski, Keith Calvert Ivey, Clinton Pierce, Jim Parker, John Cavanaugh, Kurt von Tiehl, Paul Hamingson, Darin Dugan, Mark Fowler, Hugh Kennedy, John Birney, Scott Cluett, Benjamin Reed, Glenn Maciag, Alex Farber, David Storrs, Philip Newton, Andy Stritof, John Callender, Stray Toaster, Marc Majcher, Marc Kerr, Edward Almasy, Frank J. Tobin, Greg Cope, Bruce Winter, Richard Bond, Ian Bach, Robert Blackwell, Nigel Wetters, Steve Rushe, Augie De Blieck Jr, Sanford Redlich, Jon Scarborough, Tom Tarka, David James Morgan, Hampton Maxwell, Rich Gibson, Nic Doye, Briac Pilpre, and Jarrett Alexander</i>.</body></html>