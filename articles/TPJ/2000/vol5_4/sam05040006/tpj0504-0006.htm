
<html>
<head>
<title>Simulating Typos with Perl </title>

</head><body bgcolor="ffffff">
<h1>Simulating Typos with Perl </h1>
<p><b><i>Sean M. Burke</i></b> <br>
<span class="date">TPJ Issue #20</span>
<p><i>Quoth the raven, "Nwvermpre!"</i><p>
<p> About two years ago, I switched to typing on the Dvorak keymap. That meant 
  going from the Sholes "QWERTY" keymap:
<p>
<pre>
 ` 1 2 3 4 5 6       7 8 9 0 - = \
    q w e r t       y u i o p [ ]
     a s d f g       h j k l ; '
      z x c v b       n m , . /</pre>
<p>
to August Dvorak's more efficiency-minded keymap:<p>
<pre>
 ` 1 2 3 4 5 6       7 8 9 0 [ ] \
    ' , . p y       f g c r l / =
     a o e u i       d h t n s -
      ; q j k x       b m w v z</pre>
<p>
It was just a matter of switching the keymap preferences on whatever computers I had to type on, and then a few days of acclimating to all the keys having moved. This had the two desired effects: my hands would no longer ache after marathon coding sessions, and no one ever touched my computer again.<p>
<p>
But there was one side effect I hadn't anticipated: a different keymap means different kinds of typos. This became evident to me first on IRC -- since IRC is a medium characterized by people typing faster than they can think, typos abound:<p>
<pre>
  &lt;Wuglife&gt; <b>I hear it's out on video now</b>
  me&gt; <b>I know, I sow it a wook age.</b>
  &lt;Wuglife&gt;<b> sow?</b>
  &lt;Koolmodey&gt; <b>wook age?</b>
  &lt;Mugsy&gt;<b> GWAWRR! BEWARE THE AGE OF THE WOOK!</b>
  me&gt; <b>I mean I sAw it a wEEk agO</b>.
  &lt;Koolmodey&gt; <b>guh, how do you manage to aim for</b>
     <b>'e' and hit 'o' instead?  they're on
     different sides of the keyboard</b>
  me&gt;<b> They're right next to eachother on mine.</b>
    <b> I use a Dvorak keyboard.  The middle row
     goes: "aoeuidhtns".</b>
  &lt;Koolmodey&gt; <b>that's because you're a communist</b>
  me&gt; <b>columnist</b>
  &lt;Koolmodey&gt; <b>yea like dvorak</b>
  me&gt; <b>different Dvorak.  August, not John.</b>
  &lt;Mugsy&gt; <b>whatEVERRRR</b>
  &lt;Wuglife&gt; <b>i like pie</b></pre>
<p>Over time I did get the feeling that typos on a Dvorak keyboard were really consistently different. At least for me, the typos I'd made on QWERTY keyboards were either transposition ("hte" for "the") or hitting a key adjacent to the intended one. On a Dvorak, transposition errors are more or less the same, but adjacent-key errors are, naturally, rather different -- if you miss to the left or right of a QWERTY "e", you hit "w" or "r", but to the left or right of a Dvorak "e" is "o" and "u". So the equivalents of "fwlt" or "frlt" on a QWERTY become "folt" or "fult" on a Dvorak.<p>
<p>
I had the feeling that Dvorak typos were, on the whole, much less likely to "look like typos", compared to QWERTY typos. Whereas "fwlt" and "frlt" couldn't possibly be words, "folt" and "fult" look like plausible words that happen not to exist. And sometimes the typo does make for an existing word -- one off from "seen" is "soon", one off from "be" is "me", and so on. This isn't something completely exclusive to a Dvorak -- on a QWERTY, "fear" and "dear" are just one key off -- but I had a feeling it was happening much more frequently with the Dvorak.<p>
<p>
Now, looking at the keymap, it stands to reason -- but then, lots of things stand to reason that don't actually happen (like, say, everyone abandoning the QWERTY keymap, or having done so decades ago). So I decided that the best way to test this would be to write some sort of program to simulate typos on a Dvorak and on a QWERTY, have it generate lots and lots of typos, and see what the results would be.<p>
<p>
First off, this might tell me whether I was just imagining things, or whether this was a measurable (and simulatable) property of typing on a Dvorak versus typing on a QWERTY. Moreover, the code developed could be of use in catching common typos -- a capability important in spelling-correction algorithms, whether in actual spellcheckers or programs that, given a failed URL or email address, can suggest to the user an alternative. More perversely, one could use typo-simulating code to lend a hint of authenticity to a chatbot (see the TPJ #9 article "Chatbot::Eliza" by John Nolan and the TPJ #10 article "Infobots and Purl" by Kevin Lenzo).<p>
<p>
<b>Simulating the Typos<p>
</b><p>For sake of simplicity, I figure I'd model the kind of typo I make most: trying to hit one key, but hitting a key either to the left or to the right. And since most of the keys I hit are letters, I decided to ignore typos on other keys, like hitting "%" instead of "$", or even shift typos -- typing "THe" for "The".<p>
<p> The first thing any typo-simulating program needs to know is what keys are 
  next to what. So I the first thing I wrote was a data table for the keys, <code>@rows</code>, 
  and then a bit of code to expand that into two hashes, <code>%Left</code> and 
  <code>%Right</code>:
<p>
<pre>
  use strict;
  my @rows;
  if (1) {   # change to 0 to get qwerty.
      @rows = (
        # Yes, I use a split keyboard...
        "    py  fgcrl ",
        " aoeui  dhtns ",
        "  qjkx  bmwvz ",
      );
  } else {
      @rows = (
        " qwert  yuiop ",
        " asdfg  hjkl  ",
        " zxcvb  nm    ",
      );
  }

  # To simulate an un-split keyboard:
  #  for (@rows) { substr($_,6,2) = '' }

  my (%Left, %Right);
   # So $Left{$x} is what letter, if any,
   # to the left of the letter $x.
  
  foreach my $r (@rows) {
      for (my $i = 1; $i &lt; length $r; ++$i) {
           my $x = substr($r,$i,1);
           next unless $x =~ m/[a-z]/;
           $Left{$x}  = substr($r,$i - 1,1)
             unless substr($r,$i - 1,1) eq ' ';
           $Right{$x} = substr($r,$i + 1,1)
             unless substr($r,$i + 1,1) eq ' ';
      }
  }
  # And add the uppercase letters:
  %Left  = (%Left,  map uc($_), %Left);
  %Right = (%Right, map uc($_), %Right);</pre>
<p>
Then, after some tinkering, I came up with a function that, given a word, would try to think of some way to make a typo in it:<p>
<pre>
  sub typo_on_word {
      my $word = $_[0];
      my $typo_word;
      my $tries = 0;
  
   Make_typo:
    {
      if (++$tries &gt; 4) {
          # after too many do-overs, give up
          $typo_word = $word;
          last Make_typo;
      }
      my @strokes = stroke_groups($word);
      my $where = int rand @strokes;
      my $char = substr($strokes[$where],0,1);
      my $instead = (rand(1) &lt; .5)
        ? ($Left{$char}  || $Right{$char} || redo)
        : ($Right{$char} || $Left{$char}  || redo);
      $strokes[$where] = $instead
                         x length $strokes[$where];
       # So 'e' =&gt; 'r' or 'w', 'ee' =&gt; 'rr' or 'ww'
      $typo_word = join '', @strokes;
 
      redo Make_typo unless rep_pattern($word)
        eq rep_pattern($typo_word);

      # That's so that we don't create any stroke
      # groups that weren't there before, as in
      # turning "soar" into "soor", which is a
      # kind of mistake that I rarely if ever make.
    }
    return $typo_word;
  }
  
  sub stroke_groups {
      #  'eat'  =&gt; qw(e a t)
      #  'eel'  =&gt; qw(ee l)
      #  'fool' =&gt; qw(f oo l)
  
      my @out;
      while ($_[0] =~ m&lt;(.)(\1*)&gt;g) {
          push @out, $1 . $2;
      }
      return @out;
  }
  
  sub rep_pattern {
      #  'eat'  =&gt; '1_1_1'
      #  'eel'  =&gt; '2_1'
      #  'fool' =&gt; '1_2_1'
      join '_',
        map length($_),
          stroke_groups($_[0]);
  } </pre>
<p>
Now, there's a lot going on here, so I'll break it down: every word is seen as an array of stroke groups -- where each stroke group is a character plus any immediately following repetitions of itself. So "cat" is three stroke groups, "c", "a", and "t"; but "food" is two: "f", "oo", and "d".<p>
<p> Modeling things based on stroke groups captures the fact that if I miss the 
  first "o" in "food", I'm also going to miss the following "o" the same way. 
  And it also captures the fact that I wouldn't make a typo that would create 
  a new stroke group -- while I could mistype "pen" as "pes", I would <i>not</i> 
  mistype "pens" as "pess" or "penn". So if the typo-generating code tried doing 
  exactly that, turning "pens" into "pess", then <code>rep_pattern($word) eq rep_pattern($typo_word)</code> 
  would be false (<code>rep_pattern</code> of "pens" is "1.1.1.1" but <code>rep_pattern</code> 
  of "pess" is "1.1.2"), and the redo would start the block over. (Yes, you can 
  have <code>redos</code> and <code>lasts</code> in non-loop blocks!)
<p>
<p>
So if we use the above subroutines and then try:<p>
<pre>
  for (1..15) {
      print typo_on_word("nevermore"), " ";
  }</pre>
<p>
Run with the Dvorak keymap, you'll get output like this:<p>
<pre>
  nevecmore nevelmore nuvermore nevermoro severmore
  neverbore nevermole nevurmore nevurmore novermore
  nevecmore nevermare nevermoru nevormore nevermare</pre>
<p>
And with a QWERTY keymap,<p>
<pre>
  mevermore nevermote nwvermore nevermorw nevernore
  nevermpre nevermorw nebermore nevwrmore nevwrmore
  nrvermore nwvermore mevermore nevermorw nevermire</pre>
<p> Now, these look to me like plausible typos of the sort I've made on Dvoraks 
  and QWERTYs. This is not to say that every possible typo I'd make would be generated 
  by the above <code>typo_on_word</code> function. For example, <code>typo_on_word</code> 
  doesn't attempt to simulate transposition, as in "hten" for "then". Moreover, 
  it fails to account for the fact that I now and then make typos like "moro" 
  for "mere" -- where, in effect, "e-e" functions as a sort of stroke group, because 
  the left hand never leaves its key, regardless of the fact that the right hand 
  is meanwhile off hitting the "r".
<p>
<p> But there are diminishing returns to this. I think that if I wrote a function 
  that modeled <i>every</i> kind of typo I make, with the appropriate frequency, 
  it alone would be longer than this article, if not the entire issue, but wouldn't 
  be vastly more realistic than what I hacked together. The exhaustive and exhausting 
  detail that Dvorak's book <i>Typewriting Behavior</i> goes into certainly convinced 
  me of the fact that errors are not simple things. However, <code>typo_on_word</code> 
  does simulate most of the sorts of typos I do make, on each kind of keyboard.
<p>
<p>
And notice that most of the simulated Dvorak typos for "nevermore" look more or less like plausible (if not actually existing) English words to me, whereas most of the QWERTY typos contain character sequences that no English word could contain, like "nwv", "vwrm", and so on.<p>
<p>
<b>How to Tell a Word<p>
</b><p>Being able to say that the string "tevermore" <i>could</i> be an existing word but "nevwrmore" couldn't be (and maybe that "nevecmore" and "nevermoru" sort-of could be) is something we can do intuitively based on some pretty complex implicit knowledge about how letters (and, at another level, sounds) can co-occur in English. Expressing that knowledge and then teaching it to a computer would be pretty difficult.<p>
<p>
However, it's possible to teach the computer to acquire, on its own, a simple model of letter co-occurrence.<p>
<p>
Consider the word "nevermore" word as a sequence of overlapping three-character sequences, including, for good measure, enclosing brackets, to stand for the word boundaries:<p>
<pre>
  [nevermore]
  [ne
   nev
    eve
     ver
      erm
       rmo
        mor
         ore
          re]</pre>
<p>
If we scan a large amount of existing and presumably typo-free text (a corpus), and look at all such three-character clusters (trigraphs), then we'll be able to scrutinize the simulated typo "nevwrmore", and we'll see that it consists of never-before-seen clusters like "evw", "vwr", and "wrm". Then we can note that it's got three things wrong with it, which makes it rather implausible as a word.<p>
<p>
First, to build the frequency table:<p>
   <pre>
  my $text = 'babbitt.txt';
  open(TEXT, "&lt;$text")
    or die "Can't read-open $text: $!";
  my %Known_clusters;
  while (&lt;TEXT&gt;) {
      my @words = words_in($_);
      foreach my $w (@words) {
          $w = lc "[$w]";
          for (my $i = 0; $i &lt; length($w) - 2; ++$i) {
              ++$Known_clusters{substr $w, $i, 3};
          }
      }
  }
  close(TEXT);

  sub words_in {
      return " $_[0]" =~
        m/\s([a-zA-Z]+[a-zA-Z']*)(?=[\s,.`?!;])/g;
      # return $_[0] =~
      #   m/\s([a-zA-Z]+[a-zA-Z']*)(?=[\s,.])/g ;
      # # See perlfaq6 for more on matching words
  }</pre>
<p> This builds a hash, <code>%Known_clusters</code>, where the keys are all the 
  three-letter clusters in all the words in a file. The file I happen to be using 
  is a 700K text file comprising Sinclair Lewis's novel <i>Babbitt</i>, available 
  from Project Gutenberg (http://gutenberg.net).
<p>
<p> We can test whether a cluster occurred in the text by just testing <code>exists 
  $Known_clusters{$cluster}</code> -- and that's the basis of this routine that 
  gives a measure of the "plausibility" of a word, by simply figuring what proportion 
  of the word's clusters occur in <code>%Known_clusters</code>:
<p>
<pre>
  my $Debug = 1; # set to 0 to make plaus silent
  sub plaus {
      die "don't feed plaus a null string!"
        unless length $_[0];  # sanity checking
      my $w = lc "[$_[0]]";
      my $plaus_count = 0;
      my $cluster_count = 0;
      print "$w: " if $Debug;
      for (my $i = 0; $i &lt; length($w) - 2; ++$i) {
          # Loop over three-character clusters
          ++$cluster_count;
          if (exists $Known_clusters{substr $w, $i, 3}) {
              ++$plaus_count;
          } else { 
              print ' &lt;',substr($w, $i, 3),'&gt;?' if $Debug;
          }
      }
      my $p = $plaus_count / $cluster_count; 
      printf " = %0.2f\n", $p if $Debug;
      return $p;
  }</pre>
<p>
We can test this by giving it two variations on "nevermore", and a few (typo-free) phrases chosen at random from my mail file, and then some random odd-looking words and names from a dictionary:<p>
<pre>
  foreach my $w (qw(
    nevermore neverbore nwvwrmore

    potatoes cheese power and solidarity
    as metrics in language survey data analysis
    assessing ethnolinguistic vitality it seems to
    me that this homogenization of language parallels
    what took place a couple hundred years ago and
    is still going on

    Tokyo Xhosa Zanzibar yoghurt amphioxis
    Kleenex Yaqui quetzal
  )) {
      plaus($w);
      # Since we're in debug mode, just figuring
      # out plaus will print things.
  }
  exit;</pre>
<p>
This processes all the above words, noting three-letter clusters not found in the most frequent half of the clusters in <i>Babbitt</i>, and figuring the score (which is just the proportion of clusters which were known. All of the words get straight 1.0's (i.e., all clusters known), except for these:<p>
<pre>
  [nwvwrmore]:  &lt;[nw&gt;? &lt;nwv&gt;? &lt;wvw&gt;? &lt;vwr&gt;? &lt;wrm&gt;? = 0.44
  [tokyo]:  &lt;yo]&gt;? = 0.80
  [xhosa]:  &lt;[xh&gt;? &lt;xho&gt;? = 0.60
  [zanzibar]:  &lt;[za&gt;? &lt;anz&gt;? &lt;nzi&gt;? &lt;zib&gt;? = 0.50
  [yoghurt]:  &lt;ghu&gt;? = 0.86
  [amphioxis]:  &lt;iox&gt;? = 0.89
  [kleenex]:  &lt;[kl&gt;? = 0.86
  [yaqui]:  &lt;yaq&gt;? &lt;ui]&gt;? = 0.60
  [quetzal]:  &lt;etz&gt;? &lt;tza&gt;? &lt;zal&gt;? = 0.57</pre>
<p>
So, for example, "neverbore" consists entirely of clusters seen in <i>Babbitt</i>.  (The near-rarest cluster, incidentally, is "rbo", but that appears in "ca<b>rbo</b>n", "A<b>rbo</b>r", "Bou<b>rbo</b>n", and a few other words in the <i>Babbitt</i> corpus.)  But "nwvwrmore" gets a very low rating from plaus because it contains all sorts of clusters that don't appear anywhere in Babbitt: "<i>word-start</i> n w", "n w v", and so on.<p>
<p>
The words from "Tokyo" on, are all marked as somewhat implausible; while they <i>are</i> all either English words, or existing names usable in English sentences, plaus has no way to know that. But note that "nwvwrmore", with a plausibility of 0.44, scores much lower than any of these. So plaus does a pretty good job of being able to tell gibberish from the "background radiation" of merely odd words and names.<p>
<p>
Now, to test it on the "nevermore" typos we simulated in the previous section:<p>
<pre>
  sub avg_plaus {
      my @words = @_;
      return undef unless @words;
      my $plaus_sum = 0;
      foreach my $w (@words) {
          $plaus_sum += plaus($w);
      }
      return($plaus_sum / @words);
  }

  print "Dvorak 'nevermore' typo plaus: ",
   avg_plaus(qw{
     nevecmore nevelmore nuvermore nevermoro severmore
     neverbore nevermole nevurmore nevurmore novermore
     nevecmore nevermare nevermoru nevormore nevermare
   }), "\n";
  print "QWERTY 'nevermore' typo plaus: ",
   avg_plaus(qw{
     mevermore nevermote nwvermore nevermorw nevernore
     nevermpre nevermorw nebermore nevwrmore nevwrmore
     nrvermore nwvermore mevermore nevermorw nevermire
   }), "\n";</pre>
<p>
This returns:<p>
<pre>
  Dvorak 'nevermore' typo plaus: 0.955555555555556
  QWERTY 'nevermore' typo plaus: 0.851851851851852</pre>
<p>
So plaus's simple algorithm captures our observation that the simulated QWERTY typos on "nevermore" are more gibberish-like than the simulated Dvorak typos.1<p>
<p>
But that's just one word -- a real test of this would be to simulate typos in a real text. We can deal with any amount of text (either in files named on the command line, or piped via STDIN), and tries to make a typo in every word, and then reports the average plausibility (via plaus) of the typo-ridden words in the text:<p>
<pre>
my (@typo_words);
  while (&lt;&gt;) {
      foreach my $w (words_in($_)) {
          push @typo_words, typo_on_word($w);
      }
  }
  print "Typo plaus: ",  avg_plaus(@typo_words), "\n";
  print "Input words: ", scalar(@typo_words),    "\n";
  print "Typo plaus: ",  avg_plaus(@typo_words), "\n";
  print "Input words: ", scalar(@typo_words),    "\n";
  print "Start of typo text: ", join(' ',
                                      (@typo_words &gt; 100)
                    ? @typo_words[0 .. 100] : @typo_words
  ), "\n";</pre>
<p> When we feed text through this program, we get (after some minutes of frenzied 
  calculation) a report of the average <code>plaus</code> rating for the simulated 
  typos in the text. We also get to see the beginning of the typo-filled text.
<p>
<p>
Typo-free <i>Babbitt</i> starts out:<p>
<pre>
<i> The towers of Zenith aspired above the morning mist;
 austere towers of steel and cement and limestone, 
 sturdy as cliffs and delicate as silver rods.</i></pre>
<p>
But the above program, simulating typos on a split Dvorak keymap, gives us:<p>
<pre>
<i> Thu nowers af Venith aspured abowe tho mornisg bist; 
 austece tomers og sheel anh cument ond liwestone, 
 sturhy an criffs anh dericate an nilver rodn.</i></pre>
<p>
And for a split QWERTY, we get:<p>
<pre>
<i> Rhe rowers pf Zenirh asoired sbove tje mirning nist;
 ausrere rowers pf steek amd cemenr amd limestonw,
 srurdy ad clidds anf delicare as dilver rids.</i></pre>
<p>
The average plaus of the whole of <i>Babbitt</i>, all 115,826 words of it, is about 0.87 for simulated Dvorak typos, but only 0.75 for simulated QWERTY typos.<p>
<p> There may be something a bit odd about using the same text to simulate typos 
  as the <code>%Known_clusters</code> was built from; but it turns out that if 
  we use the <code>%Known_clusters</code> from <i>Babbitt</i> but simulate typos 
  on other texts (here, a 48,000-word Project Gutenberg e-text of Charles Babbage's 
  <i>Reflections on the Decline of Science in England, and on Some of its Causes</i>; 
  and the first few paragraphs of William Gibson's <i>Neuromancer</i>), we find 
  that the average <code>plaus</code> ratings are basically the same as for <i>Babbitt!</i>
<p>
<p>
Errors typed on a Dvorak, at least as modeled by my simulator, seem to be consistently more plausible (looking less like errors and more like real words) than errors on a QWERTY -- at least for English text.<p>
<p>
<b>Typos in Other Languages<p>
</b><p>I was wondering, however, to what degree this might be specific to typing just in English. After all, both the Dvorak and QWERTY keymaps were designed with only English in mind, although both (with some degree of modification) are used for typing in any language that uses the Roman alphabet.<p>
<p>
Now, simulating typos in typing another language begs the question of exactly what keymap is used -- languages with lots of accents have to add or alter the Dvorak or QWERTY keymaps to accommodate typing those accents. To keep things simple, I decided to try text in Dutch, a language with few accents.  (I do wonder how Polish typos would come out on a QWERTY and a Dvorak, but I know of no Dvorak keymaps that support Polish accents.)<p>
<p>
A quick trip over to the European Parliament's web site (www.europarl.eu.int) got me about 22,000 Dutch words: the text of four days' worth of the <i>Dagelijks Presbericht</i>, the EP Daily Notebook. An example phrase, with Dvorak and QWERTY typos:<p>
<pre>
    Maar met twee amendementen wordt er bij de Raad nogmaals op
 D: Moor mot hwee amendomenten mordt el mij du raah sogmaals ap
 Q: Naar net rwee amensementen wirdt wr bih dr rssd nognaals ip</pre>
<p>
The results over the mini-corpus of Dutch was comparable to the English results: the average plaus on Dvorak was about 0.82, and on QWERTY it was about 0.72. So the average typo on each for Dutch was a bit less plausible than for English, although interestingly enough, the difference (about 0.10) remains the same.<p>
<p>
But then, Dutch is a Germanic language like English, with similar restrictions on how many consonants you can pack into each syllable (relatively many when compared to most other languages). A typical Italian syllable, however, is just a consonant and a vowel, and possibly a consonant at the end. So, to see how Italian would work with Dvorak and QWERTY typos, I rebuilt %Known_clusters from the clusters in Dante's <i>Inferno</i>, and then simulated typos on the text. The text, with typos, starts out:<p>
<pre>
    Nel mezzo del cammin di nostra vita
 D: Ner mevvo dol commin hi sostra zita
 Q: Nwl nezzo dek cammim si nostrs bita

    mi ritrovai per una selva oscura
 D: wi ritrozai pel uno sulva oscira
 Q: ni rotrovai oer yna sekva oscurs

    che' la diritta via era smarrita.
 D: cho' lo duritta vio ora nmarrita.
 Q: cje' ka dititta vua eta amarrita.

    Ahi quanto a dir qual era e` cosa dura
 D: Ahu quanta o hir jual eca o` casa hura
 Q: Shi quamto s fir wual wra w` cisa dira

    esta selva selvaggia e aspra e forte
 D: esto selvo selvoggia u asyra o ferte
 Q: eata swlva sekvaggia w asprs w fprte

    che nel pensier rinova la paura!
 D: ghe ner pensuer rinovo ra paira!
 Q: xhe nek prnsier riniva ls psura!</pre>
<p>
(<i>"Midway upon the road of our life I found myself within a dark wood, for the right way had been missed. Ah! how hard a thing it is to tell what this wild and rough and dense wood was, which in thought renews the fear!"</i> -- from the Norton translation, also available from Project Gutenberg.)<p>
<p>
Simulating Dvorak typos on <i>Inferno</i> (about 30,000 words) gives an average plaus of about 0.81, like Dutch, and not far off from English's 0.88. But QWERTY typos have a much lower plaus: 0.61. The plaus figures are the same with <i>Paradiso</i> (also about 30,000 words).<p>
<p>
Just to see if I could throw a wrench into the works, I decided to try feeding through some texts in written Tibetan (in Romanization). While spoken Tibetan is pretty normal as languages go, written Tibetan has (silent) consonants in patterns and quantities I'd never have thought possible.  (See [Beyer 1992] for a fascinating discussion of how the writing system got to be that way.)  Luckily for my purposes, the Asian Text Input Project (http://asianclassics.org) has megs and megs of ASCII text in Tibetan. I decided at random on an 833KB file called <i>'Phags Pa Rgya Cher Rol Pa Zhes Bya Ba Theg Pa Chen Po'i Mdo</i> (<i>The Exalted Sutra of the Greater Way entitled The Sutra of Cosmic Play</i>, or <i>Arya Lalitavistara Nama Mahayanasutra</i>).
<p> 
<p><b>Figure 1. A line of Tibetan text.</b><br>
  <img src="tpj0504-0006_f1.gif" width="650" height="57"> 
<p>Here is a sample (typo-free!) line from the Tibetan text (with the actual phrase 
  shown above in Figure 1), with simulated Dvorak-typo and QWERTY-typo versions:
<p>
<pre>
    gcig na, bcom ldan 'das mnyan yod na rgyal bu rgyal
 D: gcug no, bcow ldon 'dan bnyan yad no rgyar bi cgyal
 Q: fcig ns, bcon lsan 'fas mnyam uod ns rfyal bi rfyal</pre>
<p>
You'd think that a language that admits "rgyal" as a syllable isn't too terribly choosy about syllable structure -- since "gcig" is a word, you'd bet "gcug" and "fcig" are just as plausible as words.<p>
<p> But you'd be wrong. Simulating typos on Tibetan text gives results not far 
  from typos on the other languages' texts: the Tibetan text's average plaus for 
  a split Dvorak keymap is 0.80, a few points below the 0.82 for Italian, but 
  well above the average <code>plaus</code> score of just 0.59 for QWERTY-typo'd 
  Tibetan.
<p>
<p>
The principle at work seems to be that on a Dvorak, if you miss a vowel, you'll probably get another vowel, and similarly for consonants. Moreover, there's a decent likelihood you'll get a consonant of the same articulatory class: most of bottom-right on a Dvorak ("bmwvz" -- "z" being the odd man out) is letters whose typical values are sounds articulated with the lips, and most of the middle-right row ("dhtns" -- "h" being the exception this time) are sounds articulated with the tongue-tip right behind the top front teeth. Substituting one of these for another of the same class typically will give you a plausible word.<p>
On a QWERTY keyboard, however, there is relatively little such phonetic patterning of the keys, and so being one key off will get you a letter with basically no relationship to the letter you were aiming for.<p>
<p>
While I find typing on a Dvorak to make for less work (muscularly) than typing on a QWERTY, the typos will stick out less, apparently regardless of language. So using a Dvorak means that careful proofreading has have to be even more careful -- at least until someone writes a use strict pragma for Tibetan, Italian, Dutch, and maybe even English.<p>
<p>
<i>_ _END_ _</i><p>
<p>
<i>Saen M. Burek si ruolly a vrey oogd typsit. Arr og hsi </i>.orl Qaernal<i> achigres oru gobpletely glee af p.aoes mden he sobmets ntem.</i><p>
<p>
<b>References<p>
</b><p>Beyer, Stephan V.  1992. <i>The Classical Tibetan Language.</i>  State University of New York Press, Albany.<p>
<p>
Dvorak, August, Nellie L. Merrick, William L. Dealey, and Gertrude Catherine Ford. 1936. <i>Typewriting Behavior.</i>  American Book Company, New York City.  [Out of print and rather hard to find. -- SB]
<p> 
<hr noshade size="1">
<p><b>Plausibility of simulated typos.</b> 
<p>The average plausibility of simulated typos, on different keymaps, for texts 
  in various languages. </p>
<table width="98%" border="0" cellspacing="0" cellpadding="5" bordercolor="#000000">
  <tr> 
    <td colspan="2" align="center">Dvorak </td>
    <td colspan="2" align="center">QWERTY</td>
    <td width="50%">&nbsp;</td>
  </tr>
  <tr valign="top"> 
    <td align="center">Split </td>
    <td align="center">Unsplit</td>
    <td align="center">Split</td>
    <td align="center">Unsplit</td>
    <td>&nbsp;</td>
  </tr>
  <tr valign="top"> 
    <td align="center">.874</td>
    <td align="center">.864</td>
    <td align="center">.756</td>
    <td align="center">.749</td>
    <td>Sinclair Lewis's <i>Babbitt</i></td>
  </tr>
  <tr valign="top"> 
    <td align="center">.874</td>
    <td align="center">.865</td>
    <td align="center">.773</td>
    <td align="center">.757</td>
    <td>Charles Babbage's <i>Reflections on the Decline of Science in England, 
      and on Some of its Causes</i><i> </i> (plaus based on Babbitt)</td>
  </tr>
  <tr valign="top"> 
    <td align="center">.885</td>
    <td align="center">.863</td>
    <td align="center">.770</td>
    <td align="center">.766</td>
    <td>First few paragraphs of William Gibson's <i>Neuromancer</i> (plaus 
      based on Babbitt) </td>
  </tr>
  <tr valign="top"> 
    <td align="center">.836</td>
    <td align="center">.828</td>
    <td align="center">.724</td>
    <td align="center">.692</td>
    <td>Dutch: <i>Dagelijks Presbericht</i><i> </i> 2000-10-24 .831 .821 .715 
      .686 Dagelijks Presbericht 2000-10-23, 2000-10-25, and 2000-10-26 (plaus 
      based on 2000-10-24)</td>
  </tr>
  <tr valign="top"> 
    <td align="center">.821</td>
    <td align="center">.806</td>
    <td align="center">.616</td>
    <td align="center">.600</td>
    <td>Italian: Dante's <i>Inferno</i></td>
  </tr>
  <tr valign="top"> 
    <td align="center">.821</td>
    <td align="center">.804</td>
    <td align="center">.612</td>
    <td align="center">.604</td>
    <td>Dante's <i>Paradiso</i> (plaus based on <i>Inferno</i>)</td>
  </tr>
  <tr valign="top"> 
    <td align="center">.804</td>
    <td align="center">.754</td>
    <td align="center">.585</td>
    <td align="center">.607</td>
    <td>Tibetan: '<i>Phags Pa Rgya Cher Rol Pa Zhes Bya Ba Theg Pa Chen Po'i 
      Mdo [Sutra of Cosmic</i><i> Play</i>] </td>
  </tr>
</table>
</body>
</html>
