
<html>
<head>
<title>Listing 1</title>


</head><body bgcolor="ffffff">
<b>Listing 1. A data-loading LDAP client.</b>
<pre>1   #!/usr/bin/perl --
2   # Script to transform tab delimited address data into LDAP.
3
4
5
6   use Net::LDAP;
7   use strict;
8
9   my $infile = $ARGV[0] || "addresses.txt";
10
11  my $conn = Net::LDAP-&gt;new("ldap.daisypark.net") or # Replace with your LDAP server
12    die "ERROR: Can't connect: $@";
13
14  # make a authenticated connection
15  $conn-&gt;bind( dn =&gt; 'cn=Manager, dc=daisypark, dc=net',
16              password =&gt; 'secret',
17            );
18
19  my $progress = 1;
20  $|++;
21  while ( my $rec = get_next_record($infile) ) {
22
23      next unless "$rec-&gt;{FirstName}$rec-&gt;{LastName}";
24
25      my $result = $conn-&gt;add(
26        dn =&gt; "cn=$rec-&gt;{FirstName} $rec-&gt;{LastName}, dc=daisypark, dc=net",
27
28        attr =&gt; [
29             cn	=&gt; "$rec-&gt;{FirstName} $rec-&gt;{LastName}",
30 
31             sn	=&gt; $rec-&gt;{LastName},
32             mail	=&gt; $rec-&gt;{EmailAddress},
33             telephoneNumber	=&gt; $rec-&gt;{HomePhone},
34             street	=&gt; $rec-&gt;{Address},
35             postalCode	=&gt; $rec-&gt;{PostalCode},
36             st	=&gt; $rec-&gt;{StateOrProvince},
37             l	=&gt; $rec-&gt;{StateOrProvince},
38             c	=&gt; 'US',
39             objectclass	=&gt; [ 'top', 'person', 
40                                  'organizationalPerson', 'inetOrgPerson',
41                                ],
42               ],
43      );
44
45      if ( $result-&gt;code ) {
46          warn "WARN: Failed to add entry: $rec-&gt;{FirstName}, $rec-&gt;{LastName}: ",
47          sprintf "%x", $result-&gt;code;
48      }
49
50      printf "seen: %d\r", $progress++;
51  }
52
53  print "\nClosing LDAP connection\n";
54  $conn-&gt;unbind;
55  print "done\n";
56
57  #------
58  # Subroutines
59  #------
60  # get_next_record() opens the tab-delimited file, returning successive
61  # hashref records, one per entry.
62  {
63    my ($seen, @headers); # persistent variables
64    sub get_next_record {
65        my $file = shift || return;
66
67        unless ( $seen ) {
68            open F, $file or die "ERROR: Can't open $file: $!";
69            @headers   = split "\t", scalar ;
70            $seen = 1;
71        }
72
73        my $line;
74        unless ( defined ($line = &lt;F&gt;) ) {
75            close F;
76            return;
77        }
78
79        until ( $line ) {
80            chomp $line;
81            $line =~ s/\s*$//;
82        }
83
84        my $record = {};
85
86        @$record{ @headers } = (split "\t", $line);
87
88        return $record;
89    }
90  }</pre>
</body>
</html>
