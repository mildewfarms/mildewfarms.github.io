<html><head><title>May03: Google and Perl</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; The Perl Journal--><h1>Google and Perl</h1><p><i>The Perl Journal</i> May 2003</p><h3>By brian d foy</h3><I>brian is the founder of the first Perl Users Group, NY.pm, and Perl Mongers, the Perl advocacy organization. He has been teaching Perl through Stonehenge Consulting for the past five years, and can be contacted at comdog@panix.com.</I><hr><p>Google has become the most popular search engine for techies, even to the extent that a lot of people have been treating Google as just another part of their application. In response, Google set up a SOAP service to allow people to access their services and get a response in XML. At the moment, the program is an experimental beta service and Google limits the number of SOAP queries to 1000 per developer, which is about one query every minute and a half.</p><p>To use the Google Web API, I need to register as a developer and get a developer's token at http://www.google.com/apis/. This leads me through the sign up process and provides links to documentation and FAQs. The developer's kit comes with a Web Services Description Language (WSDL) file that I can use with <i>SOAP::Lite</i> to set up the service and insulate me from the specifics of the SOAP stuff going on. I just want to get my search results.</p><p>The process is simple: I load the <i>SOAP::Lite</i> module and use its <i>service</i> method to create my search object, <i>$search</i>. The argument to <i>service</i> is the location of the WSDL file, which I have in the same directory as the script. I store my Google Developer's Key in my shell's environment and access it as <i>$ENV{GOOGLE_KEY}. </i>I print the results with <i>Data::Dumper</i> because it is quick and easy. Later, I will use the Google API to access the information.</p><h3>Making a Query</h3><p>The <i>doGoogleSearch()</i> method comes from the WSDL file and takes several arguments. If I leave off any of the arguments, the search fails.</p><PRE>Developer's keyQuery termsStarting search resultMaximum search results (10 the highest)</PRE><p>...and some others the API describes and I do not use.</p><PRE>#!/usr/bin/perluse strict;use Data::Dumper;use SOAP::Lite;     my $search = SOAP::Lite-&gt;service("File:search.wsdl");my $results = $search-&gt;doGoogleSearch(    $ENV{GOOGLE_KEY}, 'TPJ', 0, 10,    "false", "", "false", "", "latin1", "latin1");print Data::Dumper::Dumper( $results );</PRE><p>When I first ran this program, the initial search result I got had the title "TPJ Sues State Lawmaker Over Open Records," and "The Perl Journal" was the second search result. The other TPJ is Texans for Public Justice. The third argument to <i>doGoogleSearch()</i>, the results index, is zero based just like Perl, and I had used "1." Further down in the list, I found another <i>TPJ</i> magazine, the <i>Tube &amp; Pipe Journal</i> (http://www.fmametalfab.org/croydon2k/ tubepipe.htm), in case you can't get enough <i>TPJ</i>.</p><h3>Manipulating the Results</h3><p>The return value is a Perl data structure, and since I already dumped it with <i>Data::Dumper,</i> I know what it looks like. It is an anonymous hash that has keys that describe the search, including the arguments to <i>doGoogleSearch(),</i> and how long it took to do the search. Some modules on CPAN, such as <i>Net::Google</i>, provide object access to this structure, but I find it just as easy to play with the data structure.</p><p>The search results are in the <i>resultsElements</i> key, and each result is another anonymous hash.</p><PRE>$VAR1 = bless( {     'endIndex' =&gt; '1',     'searchTime' =&gt; '0.11542',     'searchComments' =&gt; '',     'documentFiltering' =&gt; 0,     'searchQuery' =&gt; 'TPJ',     'estimatedTotalResultsCount' =&gt; '48400',     'searchTips' =&gt; '',     'startIndex' =&gt; '1',     'resultElements' =&gt; [         bless( {            'URL' =&gt; 'http://www.tpj.com/',            'snippet' =&gt; ' &lt;b&gt;...&lt;/b&gt; &lt;b&gt;TPJ&lt;/b&gt; was published as a standalone quarterly magazine until 2001 when&lt;br&gt; it became a quarterly supplement to Sys Admin magazine. Beginning &lt;b&gt;...&lt;/b&gt;  ',            'directoryTitle' =&gt; 'The Perl Journal',            'hostName' =&gt; '',            'relatedInformationPresent' =&gt; 1,            'directoryCategory' =&gt; bless( {                'fullViewableName' =&gt; 'Top/Computers/Programming/Languages/Perl/Magazines_and_E-zines',                'specialEncoding' =&gt; ''                }, 'DirectoryCategory' ),            'summary' =&gt; 'The first and only periodical devoted to Perl.',            'cachedSize' =&gt; '12k',            'title' =&gt; 'The Perl Journal'            }, 'ResultElement' )        ],     'directoryCategories' =&gt; [],     'estimateIsExact' =&gt; 0    }, 'searchResult' );</PRE><p>I want to print the title and the link of the results. I modify my earlier program to extract the <i>resultElements</i> portion of the anonymous hash and go through each element of it. In my <i>foreach</i> loop, I store each element in <i>$link</i>, and then access the <i>directoryTitle</i> and URL values with a hash slice.</p><PRE>#!/usr/bin/perluse strict;use SOAP::Lite;my $search = SOAP::Lite-&gt;service("File:search.wsdl");my $results = $search-&gt;doGoogleSearch(    $ENV{GOOGLE_KEY}, 'TPJ', 0, 10,    "false", "", "false", "", "latin1", "latin1");my $links = $results-&gt;{resultElements};foreach my $link ( @$links )    {    print join "\n", @{ $link }{ qw(directoryTitle URL) }, "\n";    }</PRE><p>If I want to reinvent Google's "I feel lucky" technology, I fetch only the first result and immediately access the URL with <i>LWP::Simple</i>.</p><PRE>#!/usr/bin/perluse strict;use LWP::Simple;use SOAP::Lite;my $search = SOAP::Lite-&gt;service("File:search.wsdl");my $results = $search-&gt;doGoogleSearch(        $ENV{GOOGLE_KEY}, 'TPJ', 0, 1,        "false", "", "false", "", "latin1", "latin1");    my $link = $results-&gt;{resultElements}[0]{URL};    getprint( $link );</PRE><p>Google limits the number of search results I can get back in one query to 10, although the <i>$results</i> anonymous hash does have an estimated count of results in the <i>estimatedTotalResultsCount</i> key. This estimate can be much greater than the total number of results since Google can remove results that are the same as previous results, even though they may have different URLs. If I want to get past the first 10 results, I use a different starting number each time I call <i>doGoogleSearch()</i>.</p><PRE>#!/usr/bin/perluse strict;use SOAP::Lite;my $search = SOAP::Lite-&gt;service("File:search.wsdl");for( my ( $start, $total ) = ( 0, 1 );      $start &lt; 50 and $start &lt; $total;     $start += 10     )    {        my $results = $search-&gt;doGoogleSearch(        $ENV{GOOGLE_KEY}, 'TPJ', $start, 10,        "false", "", "false", "", "latin1", "latin1");        $total = $results-&gt;{estimatedTotalResultsCount};            my $links = $results-&gt;{resultElements};        foreach my $link ( @$links )        {        print join "\n", @{ $link }{ qw(directoryTitle URL) }, "\n";        }    }</PRE><p>The Google Web API allows me to easily access the most popular Google features. I can search, then access the results and information about the search without parsing HTML or writing a web client. I did not cover everything that I can do, but the Developer's Kit provides greater detail. Now that you know how simple it is, you have no excuse not to do it yourself.</p><p><b>TPJ</b></p></body></html>