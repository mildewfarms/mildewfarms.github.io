<html><head><title>Jun03: Publish or Perish</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; The Perl Journal--><h1>Publish or Perish</h1><p><i>The Perl Journal</i> June 2003</p><p>The Web has, unquestionably, had a democratizing effect on the software world. Open-source collaboration could never have reached its current level without it. It's hard to imagine the rise of Linux without the Web, not to mention tools like The Gimp, or window managers like KDE or Gnome. But arguably the biggest revolution brought about by the Web has been focused in publishing and broadcasting. The democratization of information delivery represents a shift in the balance of power. No, CNN and <i>The New York Times</i> aren't going away any time soon (no matter how hard they try), but they can't ignore the Web. Big generalist news organizations may be the purview  of other media, but when it comes to niche information specialists, well, long live the Web.</p><p>Perl didn't create this online publishing revolution. Any such revolution must be credited to the widespread adoption of the Web itself, not the rise of Perl. But Perl has played a significant part. Perl's preeminence in CGI scripting has earned it a lasting place in the toolkit of dynamic content delivery. And without that dynamism, web publishing would quickly become unrealistic. It doesn't take very many updates of your static-HTML web site to realize that you need some programming logic behind it to ease your burden, and more often than not, it's Perl that comes to the rescue. Sure, other technologies&#151;PHP, JavaScript, Python, and JSPs, to name a few&#151;do the job, too, but Perl is still the heavy lifter of the Web.</p><p>It's not surprising, then, that Perl plays its part in Weblog-publishing software like Blosxom (http://www.raelity.org/apps/blosxom/), Greymatter (http://www.noahgrey .com/greysoft/), or Movable Type (http://www.movabletype.org/). There's been a tremendous amount of hype about blogs and many predictions that they would quickly become irrelevant. But darn it, they seem to have staying power. That's because blogs are just the latest incarnation of the original idea behind the Web: Lots of individuals all providing their own individual brand of information, and all linking to each other in a thoroughly democratic fashion. Blog software just automates this publishing process to a new degree and in a way that's easily adopted by the masses. It's content management for the rest of us.</p><p>But Perl has done more than just automate the Web. It helped to translate the information that already existed. Much of what is now published on the Web didn't start out as HTML, XML, or even plain text. It began life in some proprietary format. Some of these formats are incredibly opaque and resistant to conversion (Quark XPress comes to mind). There are huge repositories that have been converted to these formats by, you guessed it, Perl scripts. And there are uncounted Terabytes yet to convert. There's probably no better language for this than Perl.</p><p>Perl has been a force in bringing about this sea change in publishing. Now we're trying to cope with the result&#151;more information than we can handle, and much of it from sources we're not sure we trust. The next revolution will need to be in sorting this deluge into usable signal and useless noise. This will need to be done on an individual basis&#151;one person's signal is another's noise. Extraction and Reporting. Gosh, sounds like a job for Perl.</p><P>Kevin Carlson<br>Executive Editor<br><I>The Perl Journal</I></P></body></html>