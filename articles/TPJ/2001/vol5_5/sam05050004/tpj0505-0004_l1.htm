
<html>
<head>
<title>Listing 1</title>


</head><body bgcolor="ffffff">
<b>Listing 1</b>
<pre>#!/usr/bin/perl -w
use strict;

# BTAust Quotelet.
# Paul Fenwick &lt;pjf@cpan.org&gt;, November 2000
# Insert GPL here.

package Finance::Quote::Quotelet::BTAust;

use HTML::TableExtract;
use HTTP::Request::Common;
use Data::Dumper;

# In perl 5.6 we could use 'our', but we'll try to stay 5.005 compatible.
use vars qw/$VERSION/;

$VERSION = 1.00;

# The btfunds_direct method is our unique name.  We've used
# _direct because it gets the information directly from BT's
# website, and not through a different provider.

sub methods { return (btfunds =&gt; \&amp;btfunds, btfunds_direct =&gt; \&amp;bt_funds); }

# The labels we guarantee to return (if they make sense):

sub labels {
    my @labels = qw/price name date entry exit yield/;
    return (btfunds =&gt; \@labels, btfunds_direct =&gt; \@labels);
}

# Which fields should undergo currency conversion:

sub currency_fields { return qw/price entry exit/; }

# These variables don't need to be calculated every time the function
# is called, so we define them in the top scope.

my $BTFUNDS_URL = "http://online.btfunds.com.au/btonline/default.asp?request= \<br>
  MFUnitPriceHistory&amp;FundType=RETAIL";

my %month;
@month{qw/Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec/} = 1..12;

# The actual function that does the hard work.

sub btfunds {
    my ($quoter, @symbols) = @_;
    return unless @symbols;    # No point doing work without symbols.

    # Drop our symbols into a hash for fast lookup later on.
    my %symbol_lookup;
    @symbol_lookup{@symbols} = ();

    my $ua = $quoter-&gt;user_agent;
    my %funds;    # Where we'll store the data.

    my $response = $ua-&gt;request(GET $BTFUNDS_URL);

    # Unless we have a success in the HTTP session, then
    # everything is a failure.

    unless ($response-&gt;is_success) {
        foreach my $symbol (@symbols) {
            $funds{$symbol, "errormsg"} = "HTTP failure";
            $funds{$symbol, "success"} = 0;
        }
        return wantarray() ? %funds : \%funds;
    }

    # Use HTML::TableExtract to find the information we're
    # looking for.
    my $te = HTML::TableExtract-&gt;new(headers =&gt; [
        "Product/Fund Name", "As At", "Entry Price",
        "Exit Price"]);

    $te-&gt;parse($response-&gt;content);

    # Step through each row, placing the info into our hash
    # if required.
    foreach my $row (($te-&gt;table_states)[0]-&gt;rows) {
        my ($name, $date, $entry, $exit) = @$row;

        next unless $date;    # Skips bogus rows.

        # Strip unprintables and undesirables.
        $name =~ s/[^\s\w#]/ /g;
        $date =~ s/[^\s\w]/-/g;

        # A hash on the end means this fund has a yield,
        # not a price.  We strip the hash so we can
        # compare names later on.

        $name =~ s/\s*(#?)\s*$//;
        my $yield_fund = $1;

        # Skip the row if we're not interested.
        next unless exists $symbol_lookup{$name};

        $funds{$name,"success"} = 1;
        $funds{$name,"name"} = $name;

        # Set ourselves as the module that found this info.
        $funds{$name,"method"} = "btfunds";

        # Convert the date into US format.
        $date =~ s#(\d+)-(\w+)-(\d+)#$month{$2}/$1/$3#;

        $funds{$name,"date"} = $date;

        # Note that yield funds do not have a currency,
        # only a percentage.

        if ($yield_fund) {
            $entry =~ s/%$//;    # Strip trailing percent
            $funds{$name,"yield"} = $entry;
            $funds{$name,"price"} = $entry;
        } else {
            $exit =~  s/^\$//;    # Strip leading $'s
            $entry =~ s/^\$//;
            $funds{$name,"entry"} = $entry;
            $funds{$name,"exit"} = $exit;
            $funds{$name,"currency"} = "AUD";
            $funds{$name,"price"} = $exit;
        }
    }

    # Anything not found is a failure...

    foreach my $symbol (@symbols) {
        unless ($funds{$symbol,"success"}) {
            $funds{$symbol,"success"} = 0;
            $funds{$symbol,"errormsg"} = "Symbol not found";
        }
    }

    return wantarray() ? %funds : \%funds;
}</pre>
</body>
</html>
